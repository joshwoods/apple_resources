WEBVTT

00:00:20.540 --> 00:00:22.940
I'm Richard Williamson,
and this is Getting Started with

00:00:22.940 --> 00:00:24.810
Development for Safari on iPhone.

00:00:28.090 --> 00:00:32.030
So just about one year ago,
we introduced the iPhone.

00:00:32.160 --> 00:00:37.910
And along with the iPhone, Safari,
the best mobile browser.

00:00:39.320 --> 00:00:42.880
Since then,
you all have been really busy.

00:00:43.150 --> 00:00:48.190
In fact, there are now over 1,700
web apps for the iPhone.

00:00:48.290 --> 00:00:50.270
This is really amazing.

00:00:52.590 --> 00:00:55.490
So I want to remind you that
Safari is a multi-platform browser.

00:00:55.500 --> 00:01:00.690
It runs on Windows, OS X,
as well as the iPhone and iPod touch.

00:01:01.410 --> 00:01:05.200
And behind Safari is a shared web engine.

00:01:05.330 --> 00:01:06.990
That's WebKit.

00:01:10.610 --> 00:01:13.470
With iPhone OS 2.0,
we're bringing Safari up to

00:01:13.470 --> 00:01:17.340
a compatibility level with
Safari 3.1 on the desktop.

00:01:17.390 --> 00:01:21.500
That means if your content works
well in a 3.1 browser on the desktop,

00:01:21.500 --> 00:01:24.380
it will work well on the iPhone, too.

00:01:26.080 --> 00:01:28.110
In this session today we're
going to talk about two things.

00:01:28.230 --> 00:01:30.780
We're going to talk about what
you can do to enhance and optimize

00:01:30.980 --> 00:01:35.100
your web content for the iPhone,
and we're also going to talk about

00:01:35.100 --> 00:01:38.090
what's new for Safari in iPhone OS 2.0.

00:01:40.040 --> 00:01:41.130
So let's get started.

00:01:41.320 --> 00:01:46.050
But first I want to point you
at developer.apple.com/iphone.

00:01:46.060 --> 00:01:49.900
This site has a great dedicated
web app development section,

00:01:50.020 --> 00:01:52.200
and I encourage you to
take a look at that site.

00:01:52.260 --> 00:01:57.300
There's a lot of really great video
tutorials and other material available.

00:01:58.800 --> 00:02:01.040
So what can you do to enhance
and optimize for iPhone?

00:02:01.110 --> 00:02:02.860
There's a lot of things,
and I'm going to run

00:02:02.860 --> 00:02:04.900
through several here today.

00:02:06.280 --> 00:02:09.280
First, let's focus on the screen size.

00:02:09.400 --> 00:02:12.230
It's pretty obvious,
but the iPhone has a much smaller

00:02:12.230 --> 00:02:17.590
screen than a desktop or laptop,
and that has some consequences.

00:02:19.440 --> 00:02:23.720
Typically on the desktop,
you can resize a window,

00:02:23.720 --> 00:02:26.450
and that will cause a document to reflow.

00:02:26.580 --> 00:02:29.780
So the appearance of the
document is very much dependent

00:02:29.890 --> 00:02:31.550
on the width of the window.

00:02:32.230 --> 00:02:35.280
Another issue that we have
to be concerned about is

00:02:35.330 --> 00:02:37.140
the scale of the document.

00:02:37.180 --> 00:02:39.230
Document scale doesn't
change on the desktop,

00:02:39.230 --> 00:02:40.560
but it does on the iPhone.

00:02:40.570 --> 00:02:44.560
So in fact what we do on the iPhone
is by default we'll scale your

00:02:44.560 --> 00:02:50.750
content to a width of 980 and then
scale it down to fit on the iPhone.

00:02:52.170 --> 00:02:56.470
You can control both of these properties,
the layout size as well as the scale,

00:02:56.650 --> 00:02:59.450
using the viewport meta property.

00:03:00.400 --> 00:03:04.140
The most important thing
to set here is the width.

00:03:04.140 --> 00:03:07.680
And usually the height of your
document is dictated by the layout

00:03:08.110 --> 00:03:10.340
width as the document flows.

00:03:10.790 --> 00:03:12.610
So typically,
you only need to specify the

00:03:12.610 --> 00:03:15.880
width and not the height,
and the height will be calculated.

00:03:17.720 --> 00:03:20.760
Additionally, you can set the initial
scale of your document.

00:03:20.760 --> 00:03:25.220
By default, as I said, will scale to fit,
but you can choose to set the

00:03:25.220 --> 00:03:30.210
scale to 100%, 200%, or even
smaller than 100%. And you do that

00:03:30.210 --> 00:03:32.510
with the initial scale property.

00:03:33.430 --> 00:03:37.280
You can also specify a minimum and
a maximum scale that will be used

00:03:37.360 --> 00:03:40.210
for the pinch and expand gesture.

00:03:40.340 --> 00:03:43.660
And finally,
you can turn off scaling entirely

00:03:44.570 --> 00:03:47.400
using the user scalable property.

00:03:48.760 --> 00:03:49.770
Here's a couple of examples.

00:03:49.900 --> 00:03:54.430
The first example is a typical
viewport property that you'd use

00:03:54.520 --> 00:03:58.500
for the iPhone or the iPod touch,
and it looks like this.

00:03:58.600 --> 00:04:01.290
Here we're setting the
content width to device width.

00:04:01.530 --> 00:04:06.340
Device width is a special keyword that
will be the width of the targeted device.

00:04:06.440 --> 00:04:10.030
Now on the iPhone today,
that typically is 320 pixels in

00:04:10.170 --> 00:04:14.560
the portrait orientation and 480
in the landscape orientation,

00:04:14.630 --> 00:04:16.600
but that could change.

00:04:20.540 --> 00:04:22.380
Here's another example.

00:04:22.420 --> 00:04:26.600
Here we're setting the width
to be hard-coded at 320.

00:04:26.890 --> 00:04:29.360
And we're turning off user scaling,
and we're setting an

00:04:29.360 --> 00:04:31.500
initial scale of 1.0.

00:04:31.620 --> 00:04:33.510
That's 100%.

00:04:34.300 --> 00:04:36.670
If you have a typical
website but not a web app,

00:04:36.670 --> 00:04:39.440
you want to set the width,
the layout width,

00:04:39.500 --> 00:04:42.700
to be the width that you
designed your document to fit.

00:04:42.760 --> 00:04:45.780
So that's commonly like 1024.

00:04:47.520 --> 00:04:49.740
Okay, so that's screen size.

00:04:49.740 --> 00:04:52.510
Setting the viewport probably
is the most important and also

00:04:52.510 --> 00:04:56.740
the easiest thing you can do to
enhance your content for iPhone.

00:04:56.770 --> 00:04:59.140
Now I'd like to talk about text scaling.

00:05:01.230 --> 00:05:04.300
So by default,
when we render content on the iPhone,

00:05:04.330 --> 00:05:08.820
we'll scale up the text size
beyond what CSS specifies,

00:05:08.940 --> 00:05:13.320
such that the text is legible
after the double-tap gesture.

00:05:13.530 --> 00:05:16.370
So what that means is when
you double tap on an element,

00:05:16.370 --> 00:05:19.150
it will zoom in,
and we want to make sure that you can

00:05:19.150 --> 00:05:21.200
actually read the text at that size.

00:05:22.710 --> 00:05:23.800
This works really well.

00:05:23.800 --> 00:05:25.980
In fact,
most people don't even notice it.

00:05:26.040 --> 00:05:29.300
But sometimes it can perturb
the layout of your content,

00:05:29.400 --> 00:05:30.430
so you want to turn it off.

00:05:30.540 --> 00:05:34.600
And you can do that with the
WebKit text size adjust property.

00:05:35.100 --> 00:05:38.950
One of the most common things to
do is to set this value to none.

00:05:39.080 --> 00:05:41.550
In this example, we're turning it off
for the body element,

00:05:41.670 --> 00:05:45.550
which means the entire document
will have text scaling turned off.

00:05:45.950 --> 00:05:48.700
The default is the auto value,
and as I said,

00:05:48.730 --> 00:05:52.680
we'll do this automatically by
default when you load web content.

00:05:53.360 --> 00:05:55.580
Finally,
you can specify a fixed percentage to

00:05:55.640 --> 00:05:58.350
scale up all of the text on the page.

00:06:01.630 --> 00:06:02.660
Here are some examples.

00:06:02.720 --> 00:06:06.450
In this case we've loaded the
Apple.com news site and we've zoomed

00:06:06.470 --> 00:06:08.500
in to a couple of paragraphs of text.

00:06:08.660 --> 00:06:12.500
And you can see here on the left
that the text is barely legible.

00:06:12.660 --> 00:06:16.190
So the default behavior is
to scale up that text so that

00:06:16.190 --> 00:06:18.200
you can actually read it.

00:06:19.930 --> 00:06:22.800
And finally, you can specify a fixed
percentage to scale up.

00:06:22.880 --> 00:06:26.090
It's pretty rare to use
this property or this value,

00:06:26.130 --> 00:06:28.110
but you can if you so desire.

00:06:29.650 --> 00:06:31.860
While on the subject of
text scaling in DoubleTap,

00:06:31.860 --> 00:06:34.500
I just want to make a note about design.

00:06:34.690 --> 00:06:39.570
The way DoubleTap works is to select
an element on your page and zoom in on

00:06:39.570 --> 00:06:42.800
the element to magnify the contents.

00:06:42.930 --> 00:06:45.130
In this case,
we have a layout where the text

00:06:45.300 --> 00:06:48.450
fills the entire width of the page,
so there isn't really

00:06:48.450 --> 00:06:49.690
anything we can zoom in on.

00:06:49.780 --> 00:06:52.700
If we did zoom in, you'd have to be
scrolling left and right.

00:06:52.840 --> 00:06:55.740
So an alternate design is
to do something like this:

00:06:56.020 --> 00:06:58.360
break your content up
into smaller blocks,

00:06:58.480 --> 00:07:01.750
and this enables much
better DoubleTap experience.

00:07:04.660 --> 00:07:06.900
Okay, that's text scaling.

00:07:06.990 --> 00:07:10.480
Next up are media queries.

00:07:10.480 --> 00:07:10.480
Media queries

00:07:11.100 --> 00:07:16.410
A powerful mechanism that lets
you select alternate style sheets

00:07:16.490 --> 00:07:18.960
based on device properties.

00:07:18.960 --> 00:07:23.250
So you can specify or you
can load a single HTML source

00:07:23.370 --> 00:07:25.710
file using a media query.

00:07:26.160 --> 00:07:31.820
Offer up alternate style sheets,
in this case desktop.css or mobile.css.

00:07:35.400 --> 00:07:37.800
So again,
media queries allow you to select

00:07:38.470 --> 00:07:42.590
distinct CSS based on device properties.

00:07:42.990 --> 00:07:45.860
The most common of
which is the media type.

00:07:45.900 --> 00:07:49.420
Media types are things like screen,
print, or handheld.

00:07:49.800 --> 00:07:52.670
The iPhone supports
the screen media type.

00:07:52.750 --> 00:07:54.460
We don't support print or handheld.

00:07:54.630 --> 00:07:57.700
A lot of people ask us why we don't
support the handheld media type.

00:07:57.820 --> 00:08:01.630
The reason is that a lot of
existing content out there assumes

00:08:01.630 --> 00:08:04.990
that a handheld device doesn't
have a desktop caliber browser.

00:08:05.100 --> 00:08:07.470
The assumption is that it's going
to be a dumbed-down browser.

00:08:07.610 --> 00:08:10.970
So we decided early on that we
would support the screen media type

00:08:11.050 --> 00:08:13.370
and not the handheld media type.

00:08:14.880 --> 00:08:16.830
Some other properties that you
can query are things like the

00:08:16.950 --> 00:08:20.160
device width and the device height.

00:08:20.420 --> 00:08:21.900
So here's an example of a media query.

00:08:21.920 --> 00:08:23.770
I'm not going to go into a lot
of detail about media queries,

00:08:23.880 --> 00:08:25.620
but here's one example.

00:08:25.680 --> 00:08:28.090
In this case,
we're selecting for the screen

00:08:28.090 --> 00:08:31.780
media type and for a device
that has a maximum width of 480.

00:08:31.830 --> 00:08:36.000
That happens to be the width of the
iPhone in landscape orientation.

00:08:36.280 --> 00:08:41.270
So only if this expression
is matched will we load the

00:08:41.270 --> 00:08:42.760
small device.css stylesheet.

00:08:44.820 --> 00:08:48.900
Here's an example of a page that's
loaded on the desktop with one style,

00:08:48.900 --> 00:08:52.150
an example on the iPhone,
the same HTML with a

00:08:52.150 --> 00:08:54.100
different style sheet.

00:08:56.100 --> 00:08:58.310
There's a lot of really
good documentation in the

00:08:58.470 --> 00:09:01.250
specification for this at W3,
and I encourage you to take

00:09:01.580 --> 00:09:06.620
a look at everything you can
do with CSS media queries.

00:09:08.830 --> 00:09:11.340
Okay, we've talked about media queries.

00:09:11.700 --> 00:09:14.510
Now I'd like to go on a little
bit of a religious tangent and

00:09:14.510 --> 00:09:16.880
talk about feature detection.

00:09:17.200 --> 00:09:20.670
It really is the case today that
even with standards-compliant

00:09:20.670 --> 00:09:24.130
browsers like Safari,
sometimes you want to do something

00:09:24.140 --> 00:09:25.790
which is specific to a certain platform.

00:09:25.800 --> 00:09:29.130
And what people often tend to do is
they'll look at the user agent string,

00:09:29.130 --> 00:09:31.980
and they'll parse the user agent string,
and based on that,

00:09:31.980 --> 00:09:33.990
they'll have conditional content.

00:09:34.020 --> 00:09:36.720
And this works, but it's really fragile.

00:09:36.720 --> 00:09:39.130
User agent strings vary from
platform to platform with

00:09:39.130 --> 00:09:40.570
each release they can change.

00:09:40.620 --> 00:09:43.860
And often the code that parses
the user agent string is wrong,

00:09:43.860 --> 00:09:46.980
and it'll fail when a new
version of a browser comes out.

00:09:47.100 --> 00:09:50.270
So at all possible costs,
avoid parsing the user agent string,

00:09:50.350 --> 00:09:52.800
and instead,
check for a feature directly.

00:09:52.800 --> 00:09:54.510
This is really easy to do in JavaScript.

00:09:54.610 --> 00:09:58.860
For example, here I'm checking for
the scroll top property.

00:09:58.860 --> 00:10:02.610
And only if that property exists
would I execute some JavaScript code.

00:10:04.370 --> 00:10:05.340
Here's another example.

00:10:05.540 --> 00:10:07.960
And we're checking for the type of
a particular JavaScript property.

00:10:07.960 --> 00:10:11.780
And based on that,
we'll again do something conditionally.

00:10:13.540 --> 00:10:15.610
I'm going to show you the
user agent string because we

00:10:15.610 --> 00:10:16.740
often get asked about this.

00:10:16.800 --> 00:10:20.430
This is the user agent string
for Safari on the iPhone.

00:10:20.780 --> 00:10:23.080
Again, you don't want to use this.

00:10:23.210 --> 00:10:24.500
You don't want to parse this.

00:10:24.700 --> 00:10:29.240
But one thing to point out is
that we have the iPhone platform.

00:10:29.510 --> 00:10:31.350
The user agent string on
the iPod touch is similar,

00:10:31.410 --> 00:10:34.900
but the platform is called
iPod and not iPhone.

00:10:35.850 --> 00:10:38.940
And if you really must,
these are two properties that you

00:10:38.940 --> 00:10:42.880
can look at in the user agent string,
the WebKit version number and

00:10:42.880 --> 00:10:44.690
the mobile build version number.

00:10:44.690 --> 00:10:47.830
These are often useful for
detecting subtle differences

00:10:47.830 --> 00:10:51.690
from release to release,
but you shouldn't really have to do this.

00:10:53.030 --> 00:10:57.470
Over on WebKit.org we have a
great article about detecting

00:10:57.470 --> 00:11:00.800
WebKit using the user agent string.

00:11:00.800 --> 00:11:03.770
And that site includes some
JavaScript that we use to

00:11:03.770 --> 00:11:06.720
dissect the various components
of the user agent string.

00:11:06.790 --> 00:11:09.060
And you can use that on your sites.

00:11:09.230 --> 00:11:12.670
There's also two great articles
about how to use object detection

00:11:12.720 --> 00:11:14.710
rather than the user agent string.

00:11:14.710 --> 00:11:17.440
And I encourage you to
take a look at those two.

00:11:19.620 --> 00:11:21.000
Okay, we're moving pretty quickly here.

00:11:21.000 --> 00:11:23.710
We're just going to go through these,
and then we can talk about

00:11:23.710 --> 00:11:25.770
what's new in iPhone 2.0.

00:11:26.160 --> 00:11:29.840
There are some resource limits
that Safari imposes on your

00:11:30.050 --> 00:11:32.710
web apps and your web content.

00:11:32.960 --> 00:11:35.780
And Safari does this to protect itself.

00:11:35.890 --> 00:11:37.840
Resources are limited on the iPhone.

00:11:37.960 --> 00:11:44.090
We have a limited amount of RAM,
and we have a somewhat limited CPU.

00:11:45.320 --> 00:11:49.980
So Safari imposes certain limits
on the content that you can load.

00:11:50.020 --> 00:11:53.330
If those limits are exceeded,
the iPhone also attempts

00:11:53.340 --> 00:11:54.900
to protect itself.

00:11:54.910 --> 00:11:58.960
And this is not just Safari,
this is for all applications

00:11:58.960 --> 00:12:00.240
as well as native applications.

00:12:00.240 --> 00:12:04.070
The iPhone monitors memory usage,
and if an application

00:12:04.160 --> 00:12:08.270
exceeds a certain threshold,
the iPhone will shut it down.

00:12:09.660 --> 00:12:12.660
So even though you're not
writing a native application,

00:12:12.660 --> 00:12:14.990
you still need to be
mindful of memory usage.

00:12:15.120 --> 00:12:19.050
It is possible to write a page that will
cause Safari to consume too much memory,

00:12:19.070 --> 00:12:21.930
and then Safari will shut down.

00:12:22.400 --> 00:12:26.010
So what you can do to be mindful of
memory usage is to load your content

00:12:26.010 --> 00:12:30.860
in the simulator on the desktop,
and then use a tool like Top or the

00:12:30.990 --> 00:12:34.780
Activity Monitor to monitor memory
usage of the Safari application itself.

00:12:34.990 --> 00:12:38.350
Now be sure just to load your page,
not other pages when you're

00:12:38.350 --> 00:12:40.060
monitoring memory usage.

00:12:40.130 --> 00:12:43.020
And if the memory exceeds
about 40 megabytes or so,

00:12:43.170 --> 00:12:46.040
you're getting into the
danger zone on the iPhone.

00:12:46.130 --> 00:12:48.270
That might be too much memory.

00:12:48.270 --> 00:12:51.790
So the ultimate test is to
run your web app and your web

00:12:51.890 --> 00:12:54.290
content on the iPhone itself.

00:12:54.380 --> 00:12:56.550
And when you do this,
make sure that you have all of the

00:12:56.550 --> 00:13:02.350
other background applications running,
like Mail and like the music player iPod.

00:13:06.200 --> 00:13:07.600
So what exactly are the limits?

00:13:07.600 --> 00:13:12.660
Well, we restrict text resources,
that's HTML, CSS,

00:13:12.680 --> 00:13:15.440
and JavaScript to about 10 megabytes.

00:13:15.860 --> 00:13:19.410
You can have multiple style sheets
and multiple JavaScript files,

00:13:19.410 --> 00:13:23.500
but it's all about 10 megabytes a piece.

00:13:24.010 --> 00:13:25.900
Images are restricted to 8 megabytes.

00:13:25.900 --> 00:13:28.860
Now that's the decoded size,
not the encoded size.

00:13:28.960 --> 00:13:31.950
So not the file size,
but the size of the pixel size,

00:13:32.200 --> 00:13:36.800
which is calculated by multiplying
the height times the width times 4.

00:13:37.050 --> 00:13:40.790
4 because we have 32 bits
per pixel on the iPhone.

00:13:42.320 --> 00:13:43.650
You can still use pretty big images.

00:13:43.770 --> 00:13:46.080
1024 by 2048 is the maximum image size.

00:13:46.080 --> 00:13:48.150
That's pretty big.

00:13:50.140 --> 00:13:53.660
If you use the JPEG image format,
we can render even bigger

00:13:53.660 --> 00:13:56.880
images using JPEG subsampling.

00:13:57.220 --> 00:14:00.810
So JPEG subsampling allows you to
take multiple pixels and collapse

00:14:00.810 --> 00:14:02.980
them down into a single pixel.

00:14:04.060 --> 00:14:07.140
Animated GIFs are limited to 2 megabytes.

00:14:07.140 --> 00:14:10.920
So here again the calculation is
height times width times 4 times the

00:14:10.920 --> 00:14:13.110
number of frames in the animated GIF.

00:14:13.620 --> 00:14:16.910
So this, for example,
would be a 32-frame animated

00:14:17.000 --> 00:14:19.480
GIF that's 128 by 128.

00:14:19.680 --> 00:14:21.110
Pretty big.

00:14:21.610 --> 00:14:23.910
And finally,
the Canvas element is limited to

00:14:23.970 --> 00:14:25.720
8 megabytes for its backing store.

00:14:25.980 --> 00:14:30.650
So again, that's 1024 by 2048,
a pretty big Canvas element.

00:14:33.810 --> 00:14:37.880
So in addition to those memory limits,
we have execution limits.

00:14:38.090 --> 00:14:41.830
And that's because the iPhone
is all about direct manipulation

00:14:41.850 --> 00:14:46.810
and trying to maintain as much
as possible the experience of the

00:14:46.810 --> 00:14:48.500
user interface being very fluid.

00:14:48.500 --> 00:14:51.410
And if you execute a lot of JavaScript,
that takes away from the

00:14:51.410 --> 00:14:53.110
fluidity of the user interface.

00:14:53.150 --> 00:14:57.930
So for each entry point into JavaScript,
that means for each event that you

00:14:58.010 --> 00:15:01.380
receive or each timer that's fired,
you get 10 seconds to execute.

00:15:02.020 --> 00:15:04.100
And beyond that,
you'll receive an exception and your

00:15:04.160 --> 00:15:05.840
JavaScript code will stop executing.

00:15:05.840 --> 00:15:09.790
This is up from five seconds in 1.0.

00:15:14.600 --> 00:15:17.180
Additionally, your scripts may be paused,
meaning that you may

00:15:17.290 --> 00:15:20.500
stop receiving events,
stop receiving time events,

00:15:20.540 --> 00:15:23.390
and this happens in a
couple of scenarios.

00:15:24.330 --> 00:15:29.200
First, when your window becomes inactive
because it's placed in a background tab.

00:15:29.200 --> 00:15:31.300
And second, when Safari is not active.

00:15:31.350 --> 00:15:34.080
So if the user hits the home button,
it goes to the home screen and

00:15:34.200 --> 00:15:37.210
switches to another application,
even though Safari still

00:15:37.270 --> 00:15:41.000
runs in the background,
your JavaScript execution is paused.

00:15:43.060 --> 00:15:46.900
However, JavaScript execution is not
paused during media playback.

00:15:46.900 --> 00:15:49.250
So you need to be sure that
if you do have a website or a

00:15:49.250 --> 00:15:52.550
web app that's playing media,
that you don't do too much activity in

00:15:52.560 --> 00:15:54.770
the background with your JavaScript code.

00:15:56.600 --> 00:15:58.460
Okay, that's resource limits.

00:15:58.550 --> 00:16:00.100
And again,
the best thing to do is actually

00:16:00.100 --> 00:16:03.850
run your content on the phone
with other applications running,

00:16:03.880 --> 00:16:09.200
and be sure that Safari doesn't get
shut down because of memory consumption.

00:16:10.080 --> 00:16:12.980
Safari supports all of the
standard dialogs and windows.

00:16:13.120 --> 00:16:14.500
Windows are open.

00:16:14.600 --> 00:16:15.900
You can target these by name.

00:16:15.900 --> 00:16:19.690
You can have a maximum of eight
windows open at any one time.

00:16:20.860 --> 00:16:25.230
We support the alert JavaScript dialogue,
the confirmation dialogue,

00:16:25.370 --> 00:16:27.800
and the prompt dialogue.

00:16:27.870 --> 00:16:29.750
They look like this.

00:16:32.390 --> 00:16:34.770
We don't, however,
support the show modal dialog

00:16:34.770 --> 00:16:37.740
function yet on the iPhone.

00:16:37.830 --> 00:16:40.490
We also don't support printing,
because we don't have

00:16:40.490 --> 00:16:42.090
printing on the iPhone yet.

00:16:44.750 --> 00:16:50.120
In addition to HTML, we support the
Microsoft Office document type,

00:16:50.270 --> 00:16:58.070
so that means Word, Excel,
and new for 2.0 is PowerPoint.

00:16:58.070 --> 00:16:58.070
These render like this.

00:16:58.430 --> 00:17:02.200
Alternatively, and I think much better,
we support iWork,

00:17:02.380 --> 00:17:03.530
and these look beautiful.

00:17:03.750 --> 00:17:06.600
Here's pages, numbers, and keynote.

00:17:06.600 --> 00:17:09.740
In fact, the keynote presentation there
is this very presentation,

00:17:09.740 --> 00:17:12.120
and it looks great on the iPhone.

00:17:14.220 --> 00:17:18.310
Additionally, Safari on iPhone has great
support for PDF documents,

00:17:18.310 --> 00:17:21.520
including paginated
PDF documents like this one.

00:17:24.070 --> 00:17:27.340
Okay, so we've talked about
Windows and Dialogs,

00:17:27.340 --> 00:17:29.000
the supported content types.

00:17:29.140 --> 00:17:32.110
Now I'd like to mention a little-known
feature of Safari on iPhone,

00:17:32.370 --> 00:17:34.810
and that is the debugging console.

00:17:36.930 --> 00:17:39.940
If you go to the Settings application
and select Safari,

00:17:40.050 --> 00:17:43.270
right at the bottom
there is a Developer tab.

00:17:43.330 --> 00:17:45.770
You click on that,
and it takes you to this panel,

00:17:45.770 --> 00:17:49.080
and there's a single switch to
turn on the debugging console.

00:17:49.190 --> 00:17:51.930
When you turn that on,
the debugging console will

00:17:52.030 --> 00:17:56.130
be available in Safari,
and it'll look something like this.

00:17:56.480 --> 00:18:01.280
It will show you HTML parsing errors,
as well as JavaScript syntax errors,

00:18:01.390 --> 00:18:03.880
as well as exceptions.

00:18:05.970 --> 00:18:11.810
Additionally, you can log to the console
using the console object.

00:18:12.060 --> 00:18:16.900
You can use console.log,
which is equivalent to console.info.

00:18:18.050 --> 00:18:22.700
Console.Warn and Console.Error.

00:18:22.700 --> 00:18:25.290
And for each of these logging types,
they'll be badged with a

00:18:25.370 --> 00:18:27.760
different icon in the console.

00:18:27.840 --> 00:18:33.350
Sometimes this is a really useful
debugging technique for the iPhone.

00:18:35.030 --> 00:18:38.470
Okay,
next up I'd like to talk about events.

00:18:38.530 --> 00:18:44.170
And this is the last topic before we
get on to what's new in iPhone OS 2.0.

00:18:46.830 --> 00:18:49.550
So on the desktop you have a
mouse or you have a trackpad,

00:18:49.630 --> 00:18:51.900
and along with that you get a cursor.

00:18:51.940 --> 00:18:54.880
And the cursor is used for things like
moving the scroll bar up and down,

00:18:54.980 --> 00:18:58.600
for resizing the window,
for moving the window.

00:18:58.830 --> 00:18:59.220
That's great.

00:18:59.220 --> 00:18:59.830
It's really useful.

00:19:00.010 --> 00:19:01.660
But on the iPhone,
you don't get a cursor.

00:19:01.920 --> 00:19:05.190
Instead, all input is touch input.

00:19:05.330 --> 00:19:10.590
And Safari uses touch input to provide
an experience of direct manipulation,

00:19:10.700 --> 00:19:16.480
meaning that you can pan the page
around and you can zoom in or zoom out.

00:19:16.480 --> 00:19:21.350
So how do we deal with mouse events?

00:19:21.350 --> 00:19:21.350
Well,

00:19:23.200 --> 00:19:26.210
Mouse events are sent to your content,
and we want to send mouse events to

00:19:26.260 --> 00:19:29.180
your content because there's a lot of
existing content out there that assumes

00:19:29.340 --> 00:19:31.700
they're going to receive mouse events.

00:19:31.760 --> 00:19:34.110
Mouse events are sent when you
tap and release your finger,

00:19:34.290 --> 00:19:38.900
but they're not sent until you
actually release your finger.

00:19:39.470 --> 00:19:41.860
When you do release your finger,
you'll get a mouse down,

00:19:42.040 --> 00:19:44.940
followed by a mouse move,
followed by a mouse up,

00:19:45.080 --> 00:19:47.700
or a corresponding click event.

00:19:47.700 --> 00:19:49.420
So again,
these events aren't sent until the

00:19:49.420 --> 00:19:51.270
user stops interacting with the page.

00:19:54.230 --> 00:19:56.740
Similarly,
scroll events are sent to your content,

00:19:56.920 --> 00:19:59.410
but not until the user stops
interacting with the page.

00:19:59.590 --> 00:20:02.180
So as the user is panning around,
you don't receive scroll events.

00:20:02.330 --> 00:20:07.020
But when the user releases his finger,
you'll get a scroll event.

00:20:07.650 --> 00:20:10.140
The reason for this is, again,
that we want to maintain that

00:20:10.140 --> 00:20:12.710
experience of direct manipulation.

00:20:16.110 --> 00:20:17.740
There's a little-known
event that we send,

00:20:17.740 --> 00:20:20.420
the mouse wheel event,
and there's a gesture that is

00:20:20.520 --> 00:20:24.440
used for the mouse wheel event,
and that's a two-finger scroll.

00:20:24.560 --> 00:20:27.360
So if you have a scrollable
region like an overflow region,

00:20:27.530 --> 00:20:31.830
and you scroll with two fingers,
you can move just the scrollable region,

00:20:31.830 --> 00:20:34.680
not the entire page,
and that will generate

00:20:34.680 --> 00:20:36.220
a mouse wheel event.

00:20:38.540 --> 00:20:40.190
We also send an orientation change event.

00:20:40.340 --> 00:20:42.370
This is something which
is specific to the iPhone,

00:20:42.370 --> 00:20:46.900
and we send this event when you rotate
the device from portrait to landscape,

00:20:46.940 --> 00:20:49.310
or any orientation for that matter.

00:20:51.480 --> 00:20:56.840
And of course we also support all of the
typical form and document event types:

00:20:56.900 --> 00:21:02.790
blur, focus, load, unload, reset, submit,
change, and abort.

00:21:04.860 --> 00:21:07.530
The iPhone doesn't currently
have copy and paste,

00:21:07.560 --> 00:21:10.690
so we don't send those events,
nor does it have selection,

00:21:10.740 --> 00:21:13.530
so obviously we don't send those events.

00:21:15.890 --> 00:21:19.160
One bonus topic before
we talk about what's new.

00:21:19.160 --> 00:21:21.320
That is link handling.

00:21:21.400 --> 00:21:25.680
The iPhone obviously is a telephone,
so your web content

00:21:25.680 --> 00:21:28.880
can include a tel link,
and they look like this.

00:21:29.010 --> 00:21:33.160
One thing to point out about telephone
links is that if you don't include

00:21:33.160 --> 00:21:37.870
a telephone link around something
that looks like a telephone number,

00:21:38.000 --> 00:21:41.820
Safari will detect that and
add a tel link on your behalf.

00:21:41.910 --> 00:21:43.950
So existing content will
actually support tel links.

00:21:45.050 --> 00:21:48.500
If you embed a mail link in Safari,
we'll actually bring a sheet

00:21:48.580 --> 00:21:52.150
up inside Safari rather than
going to the mail application.

00:21:52.180 --> 00:21:57.470
So the user can create a mail message
and go directly back to Safari.

00:21:57.810 --> 00:22:01.860
And finally,
if there is a Maps.google link in

00:22:01.860 --> 00:22:07.030
your content that is a form like this,
we will send that to the native map

00:22:07.030 --> 00:22:09.530
application rather than loading the page.

00:22:11.910 --> 00:22:14.060
Okay.

00:22:14.200 --> 00:22:17.480
So we've gone over the essentials
that you need to know to enhance and

00:22:17.580 --> 00:22:20.260
optimize your content for the iPhone.

00:22:20.320 --> 00:22:23.660
It's a relatively small number
of things that you can do to make

00:22:23.660 --> 00:22:25.550
your content work really well.

00:22:26.400 --> 00:22:29.450
But for iPhone 2.0,
we've added a lot of new capabilities

00:22:29.910 --> 00:22:33.140
that I think are going to take
web apps to the next level.

00:22:37.780 --> 00:22:41.610
So I'm going to talk about four topics:
improved performance,

00:22:41.740 --> 00:22:45.200
touch and gesture events,
CSS visual effects,

00:22:45.270 --> 00:22:48.190
and the toolset with the iPhone SDK.

00:22:51.320 --> 00:22:54.400
So first up is improved performance.

00:22:54.420 --> 00:22:58.670
We heard pretty loud and clear that
JavaScript performance in iPhone

00:22:58.670 --> 00:23:02.100
1.0 wasn't as good as it could be.

00:23:02.110 --> 00:23:06.810
So we put a lot of effort into
improving the speed of JavaScript.

00:23:07.790 --> 00:23:11.310
And I can tell you, it's much better.

00:23:11.310 --> 00:23:13.000
We also heard that you
wanted better bandwidth,

00:23:13.000 --> 00:23:17.230
so we have 3G that was
announced yesterday.

00:23:18.520 --> 00:23:22.500
And also, we thought about what other
resources we could bring to bear in

00:23:22.500 --> 00:23:25.310
rendering web content on the iPhone.

00:23:25.390 --> 00:23:28.960
So we added hardware acceleration,
and I'll talk about that

00:23:29.030 --> 00:23:30.540
in detail in a few slides.

00:23:31.990 --> 00:23:33.780
So here's some benchmarking numbers.

00:23:33.790 --> 00:23:38.770
A lot of numbers, but suffice it to say,
shorter is better, green is better,

00:23:38.770 --> 00:23:41.340
and these bars are really short.

00:23:41.390 --> 00:23:45.330
This compares iPhone 1.0 to iPhone 2.0.

00:23:45.500 --> 00:23:46.760
This is astounding.

00:23:46.760 --> 00:23:51.020
We're six times faster on average
for the SunSpider benchmark.

00:23:51.140 --> 00:23:54.400
This is a benchmark that you
can access at webkit.org.

00:23:54.400 --> 00:23:57.400
Now, unfortunately,
you can't run this benchmark because,

00:23:57.400 --> 00:24:01.400
remember a few slides ago I talked about
the 10-second JavaScript execution limit?

00:24:01.440 --> 00:24:04.400
Some of these benchmarks
take longer than 10 seconds.

00:24:04.400 --> 00:24:07.380
So we disabled that limit
to run this benchmark.

00:24:07.500 --> 00:24:10.550
But trust me,
it really is six times faster.

00:24:11.350 --> 00:24:14.760
There's another benchmark out there
that you can run on your iPhone.

00:24:14.760 --> 00:24:16.770
This is Craig Hockenberry's Furbo.org.

00:24:16.770 --> 00:24:18.400
It's called Benchmarking in Your Pants.

00:24:18.500 --> 00:24:20.540
And he specifically designed
this for the iPhone.

00:24:20.770 --> 00:24:22.940
And again, shorter means better.

00:24:23.090 --> 00:24:26.300
And these short green
bars are really short.

00:24:26.450 --> 00:24:30.900
So from 1.0 to 2.0,
on average -- or not on average,

00:24:31.010 --> 00:24:34.590
these results vary from
4 to 15 times faster.

00:24:34.710 --> 00:24:36.300
This is really astonishing.

00:24:36.460 --> 00:24:38.520
Fantastic improvement.

00:24:40.240 --> 00:24:42.640
So you don't have to
take my word for this.

00:24:42.710 --> 00:24:45.490
I thought that these results
were so astounding that we could

00:24:45.490 --> 00:24:51.250
do a bake-off live comparing
iPhone 1.0 with iPhone 2.0.

00:24:51.340 --> 00:24:54.370
I'd like to ask Chris to
come up and show you that.

00:24:55.090 --> 00:24:56.690
Can you hear me?

00:24:56.770 --> 00:24:59.860
So what I'd like to do is run two
side-by-side performance tests to

00:24:59.860 --> 00:25:04.990
show how much faster we've made
Safari on iPhone OS 2.0 than 1.0.

00:25:05.080 --> 00:25:09.490
So the first test is a modification
of a page that Craig Hockenberry

00:25:09.490 --> 00:25:11.070
set up at Furbo.org.

00:25:11.180 --> 00:25:13.930
This is one of the sites
that Richard just mentioned.

00:25:14.090 --> 00:25:17.150
And this test basically runs through
a set of JavaScript operations,

00:25:17.150 --> 00:25:21.000
and it times it,
and we'll see who finishes first.

00:25:21.030 --> 00:25:25.000
So on the left is 1.0,
and on the right is 2.0.

00:25:25.000 --> 00:25:26.980
Now these are original iPhones.

00:25:27.140 --> 00:25:28.000
There's no difference in the hardware.

00:25:28.000 --> 00:25:29.980
This is solely a software comparison.

00:25:30.000 --> 00:25:31.890
So let's see who finishes first.

00:25:32.110 --> 00:25:33.000
Ready?

00:25:33.000 --> 00:25:34.960
I gotta just do this
at the same time here.

00:25:35.060 --> 00:25:38.000
One, two, three.

00:25:40.620 --> 00:25:43.270
So as you can see 2.0
is done in 2.5 seconds,

00:25:43.320 --> 00:25:46.830
which is pretty amazing.

00:25:46.860 --> 00:25:49.140
And 1.0 is still chugging away.

00:25:49.240 --> 00:25:51.140
Still working.

00:25:51.200 --> 00:25:53.170
And it's done.

00:25:58.130 --> 00:25:59.860
So as you can see,
we're five times faster

00:25:59.860 --> 00:26:01.790
in this particular test,
which is huge.

00:26:01.870 --> 00:26:04.290
Imagine what this will
do for your web apps.

00:26:04.590 --> 00:26:09.680
So let me load this next test,
which is more graphical.

00:26:13.210 --> 00:26:14.690
This test is more graphical.

00:26:14.690 --> 00:26:18.780
It basically uses the Canvas element
and JavaScript and takes a set of

00:26:18.780 --> 00:26:21.660
complex equations and graphs them out.

00:26:21.660 --> 00:26:24.610
And let's see who finishes first.

00:26:28.640 --> 00:26:35.600
So 2.0 is chugging away and
1.0 is visibly behind already.

00:26:35.880 --> 00:26:39.600
2.0 is 75% done.

00:26:43.770 --> 00:26:49.060
1.0 is done in 17, 18 seconds, basically.

00:26:49.090 --> 00:26:52.530
1.0 is trying to make it through its way.

00:26:58.000 --> 00:26:59.450
Almost.

00:26:59.450 --> 00:27:00.840
Almost.

00:27:00.840 --> 00:27:01.980
Done.

00:27:02.010 --> 00:27:03.240
Almost.

00:27:03.320 --> 00:27:05.550
In 37 seconds.

00:27:08.920 --> 00:27:11.390
So in this particular
test we're twice as fast.

00:27:11.500 --> 00:27:13.700
So I want to stress that your web
apps don't have to do anything to

00:27:13.840 --> 00:27:16.390
take advantage of these performance
improvements that we've made.

00:27:16.490 --> 00:27:18.800
So the number one feedback we got
when the iPhone first came out

00:27:18.800 --> 00:27:20.910
was that JavaScript performance
wasn't good enough.

00:27:21.170 --> 00:27:24.560
And I think we heard your feedback,
and we've delivered.

00:27:24.680 --> 00:27:28.500
Thanks.

00:27:31.430 --> 00:27:32.400
It's astonishing.

00:27:32.400 --> 00:27:32.600
It's really great.

00:27:32.650 --> 00:27:34.400
And we haven't finished.

00:27:34.400 --> 00:27:38.900
Okay, what about page load?

00:27:38.940 --> 00:27:42.340
Well, the big news yesterday was 3G.

00:27:43.350 --> 00:27:44.790
and 3G is great.

00:27:44.790 --> 00:27:47.730
It's a big improvement over Edge.

00:27:47.970 --> 00:27:51.700
Here's an example of two sites,
Page Load Times,

00:27:51.760 --> 00:27:54.200
Apple.com and Microsoft.com.

00:27:54.200 --> 00:27:57.750
And again, the shorter bar is better.

00:27:58.030 --> 00:27:59.370
We're pretty good here.

00:27:59.450 --> 00:28:01.560
We're about two to three times faster.

00:28:01.610 --> 00:28:05.710
But the observant people out in the
audience might notice that there's

00:28:05.710 --> 00:28:09.380
a big delta for Apple.com and a
smaller delta for Microsoft.com.

00:28:09.610 --> 00:28:11.910
And why is that?

00:28:11.920 --> 00:28:15.040
and was optimized for the iPhone,
not at all.

00:28:15.900 --> 00:28:19.330
and it's not because Microsoft.com
doesn't know how to build a website.

00:28:19.790 --> 00:28:23.790
But let's take a look
at it in more detail.

00:28:24.280 --> 00:28:27.140
To explain this difference,
I need to talk about the interfaces

00:28:27.140 --> 00:28:29.440
that are available on the iPhone.

00:28:29.700 --> 00:28:33.940
The Edge interface is moderately fast,
but has high latency.

00:28:33.980 --> 00:28:38.680
The 3G interface is much faster,
but it still has high latency.

00:28:39.130 --> 00:28:42.810
and the Wi-Fi interface of course
is really fast and has low latency.

00:28:42.980 --> 00:28:46.160
These tubes are not to scale.

00:28:47.560 --> 00:28:51.010
But the important thing to
note here is both of the cell

00:28:51.100 --> 00:28:53.460
technologies have high latency.

00:28:53.600 --> 00:28:56.030
What that means is from the
moment you initiate a request

00:28:56.320 --> 00:28:59.780
to getting back the first data,
there's a significant lag time.

00:28:59.890 --> 00:29:02.740
With 3G, once you initiate that request
and start getting data,

00:29:02.740 --> 00:29:06.140
it comes in much more quickly than Edge,
but there's still a lag time

00:29:06.320 --> 00:29:08.040
before you get the first data.

00:29:08.270 --> 00:29:11.690
This has implications for
how you build your websites.

00:29:13.370 --> 00:29:18.020
So if we go back and look at
Apple.com and Microsoft.com,

00:29:18.020 --> 00:29:21.620
the total amount of resources
loaded by Apple.com is 610K,

00:29:21.870 --> 00:29:25.030
whereas for Microsoft.com it's 494K.

00:29:25.340 --> 00:29:28.590
So Apple.com is actually
bigger than Microsoft.com.

00:29:29.110 --> 00:29:30.140
But that's not so interesting.

00:29:30.140 --> 00:29:31.670
The next two lines are more interesting.

00:29:31.920 --> 00:29:37.230
The number of resources at Apple.com
is 31 compared to 55 at Microsoft.com.

00:29:37.230 --> 00:29:41.920
And the average size of each of
those resources is 20K at Apple.com

00:29:41.920 --> 00:29:44.100
versus 9K at Microsoft.com.

00:29:44.550 --> 00:29:48.240
So Microsoft.com has many
more smaller resources.

00:29:48.290 --> 00:29:50.450
And what that means is much more latency.

00:29:50.680 --> 00:29:53.520
And you add all that latency up,
and it makes the page load

00:29:53.880 --> 00:29:56.300
times worse over cell networks.

00:29:57.590 --> 00:30:02.530
Now, Safari does an awful lot to try and
preload content to keep the pipe stuffed,

00:30:02.700 --> 00:30:04.540
and this works pretty well.

00:30:04.710 --> 00:30:08.500
But sometimes you can write content
that thwarts that preloading mechanism.

00:30:08.620 --> 00:30:11.680
In particular,
if you write JavaScript that

00:30:11.760 --> 00:30:13.810
does a lot of dynamic loading,

00:30:14.000 --> 00:30:26.900
[Transcript missing]

00:30:27.320 --> 00:30:30.000
creates sites with fewer
resources that are larger,

00:30:30.000 --> 00:30:34.740
and trying to avoid dynamically doing
things like document.write that will

00:30:34.740 --> 00:30:37.240
in turn then load another resource.

00:30:40.140 --> 00:30:44.280
With the developer preview
of Safari 4 on the desktop,

00:30:44.350 --> 00:30:46.930
we're giving you some tools that
will help you analyze your site and

00:30:46.930 --> 00:30:48.600
how it behaves on a cell network.

00:30:48.730 --> 00:30:52.730
In particular, there's a network tab
in the Web Inspector,

00:30:52.880 --> 00:30:56.600
and that will let you sort the
resources that are loaded by latency.

00:30:56.610 --> 00:30:58.100
This is a really powerful tool.

00:30:58.220 --> 00:31:02.280
It'll show you for each of the
resources when the request was initiated

00:31:02.280 --> 00:31:04.670
and when the load first begins.

00:31:05.680 --> 00:31:08.500
So by looking at this graph,
you can see that some of these things

00:31:08.790 --> 00:31:13.210
take an awful long time to load,
to actually begin loading.

00:31:15.100 --> 00:31:19.210
The Web Inspector also has the
ability to sort by start time,

00:31:19.340 --> 00:31:20.260
which is also useful.

00:31:20.410 --> 00:31:22.100
And there are several other
ways you can sort the data,

00:31:22.100 --> 00:31:25.530
so you can slice and dice
it and really get a sense of

00:31:25.650 --> 00:31:27.790
how your site is performing.

00:31:31.500 --> 00:31:34.490
There's a whole session
dedicated just to performance,

00:31:34.490 --> 00:31:36.110
and I strongly recommend you go see this.

00:31:36.220 --> 00:31:39.070
It's on Friday at 2:00.

00:31:41.450 --> 00:31:42.290
Okay.

00:31:42.290 --> 00:31:45.160
So that's performance.

00:31:45.160 --> 00:31:48.400
We have improved
JavaScript performance dramatically,

00:31:48.450 --> 00:31:51.760
and we now have support for 3G,
and you can create content that

00:31:51.760 --> 00:31:53.680
really takes advantage of 3G.

00:31:54.730 --> 00:31:56.640
I mentioned hardware acceleration,
and I'm not going to

00:31:56.640 --> 00:31:59.800
talk about that just yet,
but we'll get to that in a future slide.

00:31:59.850 --> 00:32:03.140
Now I'd like to talk about
touch and gesture events.

00:32:04.250 --> 00:32:04.960
What are touch events?

00:32:05.130 --> 00:32:09.710
Well, UIKit,
the native user interface framework,

00:32:09.730 --> 00:32:10.500
supports touch events.

00:32:10.650 --> 00:32:13.440
So we thought, well,
why shouldn't web content be

00:32:13.440 --> 00:32:14.860
able to support touch events?

00:32:15.020 --> 00:32:17.890
So we added a new event model.

00:32:18.000 --> 00:32:34.800
[Transcript missing]

00:32:36.360 --> 00:32:39.490
Touch events,
because they send immediately,

00:32:39.710 --> 00:32:42.760
allow you to create
interactive rich content.

00:32:43.850 --> 00:32:48.810
In addition to touch events,
we support gesture events.

00:32:49.500 --> 00:32:53.560
Gesture events allow you to do
things like pinch and expand

00:32:53.560 --> 00:32:55.790
as well as a rotation event.

00:32:56.080 --> 00:33:00.000
These gesture events combine
both scale and rotation,

00:33:00.120 --> 00:33:04.440
so in the same event you could
rotate an element and expand it.

00:33:05.210 --> 00:33:09.840
The scale property is sent as a percent
change from the start of the gesture,

00:33:09.900 --> 00:33:14.300
and the rotate property is a delta
angle from the start of the gesture.

00:33:14.610 --> 00:33:22.180
And as I said, both properties are
sent with every gesture.

00:33:23.500 --> 00:33:28.190
So the best way to get to know how to use
touch and gesture really is with a demo.

00:33:28.340 --> 00:33:31.370
So I'd like to ask Chris to
come back up and show us a demo

00:33:31.370 --> 00:33:33.250
of touch and gesture events.

00:33:34.860 --> 00:33:38.400
So the first thing I want to do is
compare dragging within a web page

00:33:38.400 --> 00:33:41.090
with mouse events versus touch events.

00:33:41.180 --> 00:33:44.050
So what we have here is a really,
really simple web page,

00:33:44.050 --> 00:33:48.140
and this web page has a box,
and tapping on the box -- well,

00:33:48.140 --> 00:33:50.040
not tapping,
but rather clicking on the mouse and

00:33:50.630 --> 00:33:53.100
dragging the box around basically
drags it within the web page.

00:33:53.240 --> 00:33:55.650
Pretty darn simple.

00:33:55.740 --> 00:33:59.500
So let's try to load this page on iPhone.

00:34:02.660 --> 00:34:07.120
So this page uses mouse events
to drag something on the page.

00:34:07.120 --> 00:34:09.740
As you can see, you can't drag it.

00:34:09.740 --> 00:34:14.200
Basically dragging pans the page
and clicking this box highlights it,

00:34:14.330 --> 00:34:16.890
brings out the callout,
which is not what the author intended.

00:34:17.010 --> 00:34:20.490
So let's load a version of this
page that uses touch events.

00:34:23.560 --> 00:34:25.170
So now I can drag it within the page.

00:34:25.290 --> 00:34:27.880
As you can see,
the frame rate is pretty awesome.

00:34:27.880 --> 00:34:32.420
And this page uses gesture events, too,
so I can take two fingers to scale it,

00:34:32.440 --> 00:34:34.120
and I can rotate to twist it.

00:34:34.130 --> 00:34:36.870
And everything is pretty darn smooth.

00:34:40.600 --> 00:34:43.000
So imagine how you can use
dragging events -- excuse me,

00:34:43.180 --> 00:34:45.620
imagine how you can use
touch events to drag and use

00:34:45.750 --> 00:34:47.550
gestures within your Web page.

00:34:47.640 --> 00:34:49.190
It will be pretty awesome.

00:34:49.290 --> 00:34:51.820
So let me do something that's a
little more interesting than just,

00:34:51.870 --> 00:34:54.990
you know, dragging a box within a page.

00:34:59.330 --> 00:35:01.200
And here's this guy.

00:35:01.200 --> 00:35:05.020
He looks maybe familiar to you,
I don't know.

00:35:05.180 --> 00:35:06.860
He's kind of sweaty,
looks like he's been yelling

00:35:06.860 --> 00:35:10.170
and dancing around a lot,
I guess.

00:35:10.400 --> 00:35:13.500
So let's take his clothes off, of course.

00:35:13.520 --> 00:35:16.940
We can actually independently
move two pieces of clothing.

00:35:17.030 --> 00:35:19.940
And I hope this doesn't
make you uncomfortable here.

00:35:20.050 --> 00:35:24.720
And this top looks kind of nice,
so let's put that on here.

00:35:24.800 --> 00:35:26.790
Some nice tights.

00:35:28.770 --> 00:35:30.690
and there's a little tutu here.

00:35:30.690 --> 00:35:34.610
This tutu looks like it doesn't really
fit so I can actually use gesture events

00:35:34.670 --> 00:35:42.130
to scale it and put it on him nicely.

00:35:42.130 --> 00:35:42.130
Isn't that nice?

00:35:46.100 --> 00:35:49.300
So I hope that wasn't too weird,
and I hope this encourages

00:35:49.300 --> 00:35:52.600
you to use touch events and
gesture events in your web app.

00:35:52.680 --> 00:35:54.090
Thanks.

00:35:57.390 --> 00:35:59.580
That's awesome.

00:35:59.600 --> 00:36:03.300
Great fashion sense, Chris.

00:36:03.400 --> 00:36:08.690
So you may have noticed that
the frame rate was really good.

00:36:08.790 --> 00:36:10.140
How was that achieved?

00:36:10.200 --> 00:36:13.940
Actually, before I move on,
there is a session coming up talking

00:36:13.940 --> 00:36:17.680
entirely about touch and gesture events,
and that's Wednesday at 10:30.

00:36:17.680 --> 00:36:20.730
And I encourage you to
take a look at that.

00:36:21.090 --> 00:36:22.200
We're getting back to the demo.

00:36:22.410 --> 00:36:27.620
How did Chris achieve
that amazing frame rate?

00:36:27.650 --> 00:36:27.650
Well,

00:36:28.380 --> 00:36:33.690
In addition to the CPU on the phone,
there's a graphics processing unit,

00:36:33.690 --> 00:36:34.280
a GPU.

00:36:34.360 --> 00:36:37.400
And up until now,
it's been impossible to take advantage

00:36:37.400 --> 00:36:40.200
of the GPU in your web content.

00:36:40.510 --> 00:36:45.060
We take heavy advantage of the GPU for
native applications and UI kit.

00:36:45.090 --> 00:36:50.390
Every UI view is a layer that can be
animated and manipulated by the GPU.

00:36:50.520 --> 00:36:55.200
But your DOM elements on
a Web page up until now,

00:36:55.200 --> 00:36:58.640
it hasn't been possible to
accelerate those with the GPU.

00:36:58.640 --> 00:37:02.600
Well, that's what CSS visual
effects is all about.

00:37:05.130 --> 00:37:07.200
So let's take this very simple example.

00:37:07.240 --> 00:37:12.280
The white page represents a web page,
and the orange rectangle

00:37:12.280 --> 00:37:13.990
represents a div.

00:37:14.260 --> 00:37:19.630
A very common operation is
to animate this element from

00:37:19.630 --> 00:37:21.330
one position to another.

00:37:21.370 --> 00:37:27.000
And the way you would typically do
this is with JavaScript event handlers,

00:37:27.000 --> 00:37:30.540
maybe based on a timer,
and for every frame in the animation

00:37:30.540 --> 00:37:32.700
you would modify CSS properties.

00:37:32.780 --> 00:37:34.060
This works quite well.

00:37:34.250 --> 00:37:38.380
It's a little bit tedious to program,
and on the iPhone the

00:37:38.390 --> 00:37:40.690
performance isn't so great.

00:37:41.040 --> 00:37:46.610
So what if we could eliminate
JavaScript entirely from this animation?

00:37:46.650 --> 00:37:50.470
And what if we could describe
the animation entirely with CSS?

00:37:51.580 --> 00:37:54.390
Well, that's what CSS visual
effects are all about.

00:37:54.470 --> 00:37:58.810
There are three components of CSS visual
effects that I'd like to talk about.

00:37:58.940 --> 00:38:01.090
First are transforms.

00:38:01.590 --> 00:38:05.500
For any element on your page,
you can apply a transform.

00:38:05.660 --> 00:38:12.690
So a 2D transform is scale, a translate,
or perhaps a rotate.

00:38:13.210 --> 00:38:14.410
Here we've rotated an element.

00:38:14.570 --> 00:38:17.100
You can also imagine
translating an element.

00:38:17.220 --> 00:38:19.980
But on the iPhone,
we're not limited just to 2D transforms.

00:38:20.120 --> 00:38:23.430
You can apply a 3D transform
to any HTML element.

00:38:23.590 --> 00:38:24.500
Now this is mind-blowing.

00:38:24.500 --> 00:38:25.570
This is fantastic.

00:38:25.620 --> 00:38:30.500
It opens up a whole new set of
possibilities for web applications.

00:38:34.210 --> 00:38:37.200
In addition to transforms,
CSS visual effects gives you

00:38:37.200 --> 00:38:41.100
the ability to transition
between many CSS properties.

00:38:41.270 --> 00:38:44.680
So, for example,
I could apply a transition

00:38:45.080 --> 00:38:50.520
Oops, that's a transition, yeah,
between capacity values to make

00:38:50.570 --> 00:38:53.250
an element appear and disappear.

00:38:53.440 --> 00:38:55.650
I can also apply
transition to transforms,

00:38:55.710 --> 00:38:57.380
effectively animating an element.

00:38:57.480 --> 00:39:01.810
So thinking back to that original orange
square that we moved across the page,

00:39:02.000 --> 00:39:06.190
that is achievable entirely with
CSS transitions and transforms.

00:39:07.700 --> 00:39:11.520
Additionally,
CSS visual effects support animations.

00:39:11.670 --> 00:39:16.530
Animations are transforms across a
more complex path with keyframes.

00:39:16.760 --> 00:39:19.710
So, for example,
I might want to animate this

00:39:19.940 --> 00:39:22.060
element along a path like this.

00:39:23.600 --> 00:39:28.670
So we think that these capabilities are
going to allow you to create web apps

00:39:28.830 --> 00:39:32.080
that have never been seen before on a
mobile device with high performance,

00:39:32.130 --> 00:39:37.130
in fact, performance that's as good
as a native application.

00:39:39.580 --> 00:39:43.330
Transforms, Transitions, and Animations.

00:39:43.420 --> 00:39:47.920
And most of these behaviors
are hardware accelerated.

00:39:48.230 --> 00:39:54.210
So that means once you set up the CSS,
you don't have to execute any JavaScript.

00:39:54.550 --> 00:39:59.680
and the GPU will animate
the element across the page.

00:40:01.560 --> 00:40:05.350
And when you combine CSS visual
effects with touch events,

00:40:05.350 --> 00:40:08.660
you can create highly interactive DHTML.

00:40:10.890 --> 00:40:13.540
So I'd like to ask Chris to
come back up again and give

00:40:13.540 --> 00:40:16.300
you a few demos of what we did

00:40:16.730 --> 00:40:18.710
with CSS Visual Effects on the iPhone.

00:40:18.710 --> 00:40:20.510
Richard Williamson:
So the first thing I'd like to

00:40:20.610 --> 00:40:24.040
do is show a practical example
of using CSS Visual Effects.

00:40:24.140 --> 00:40:26.560
And then I'm going to show
you four example pages that

00:40:26.560 --> 00:40:29.580
use CSS Visual Effects from
simplest to most complex.

00:40:29.580 --> 00:40:31.890
So you may be familiar with this page.

00:40:31.960 --> 00:40:34.200
It's the iPhone version of dig.com.

00:40:34.200 --> 00:40:35.410
It's a great Web site.

00:40:35.680 --> 00:40:40.260
They're actually one of the pioneers
in creating Web apps for the iPhone.

00:40:40.350 --> 00:40:42.940
And what they've implemented on
this site is a browser-like view,

00:40:42.940 --> 00:40:45.300
a sort of hierarchical browsing view.

00:40:45.330 --> 00:40:48.350
But the issue here is the frame rate.

00:40:48.450 --> 00:40:50.950
As you can tell, it's kind of suffering.

00:40:50.950 --> 00:40:55.700
It's maybe getting three or four
frames going from one place to another.

00:40:55.700 --> 00:40:59.280
This page basically needs
to use CSS Visual Effects to

00:40:59.280 --> 00:41:01.060
get the frame rate up.

00:41:01.060 --> 00:41:03.510
So let me load another
page which is a little

00:41:16.890 --> 00:41:16.890
It does the same sort of browser-like UI.

00:41:16.890 --> 00:41:16.890
This is a page that, you know,
just shows Apple's products.

00:41:16.890 --> 00:41:16.890
And clicking through here basically
gets that awesome framework that

00:41:16.890 --> 00:41:16.890
we all want in our web apps.

00:41:17.710 --> 00:41:22.280
And let me stress that this
is not a native application.

00:41:22.280 --> 00:41:25.270
This is all inside of a web page.

00:41:25.760 --> 00:41:29.820
So now you can get this
sort of native UI look,

00:41:29.820 --> 00:41:31.820
but also the native
UI performance in your web app,

00:41:31.880 --> 00:41:33.460
which is pretty cool.

00:41:34.360 --> 00:41:37.380
Okay, so the next thing I want to do
is show four different example

00:41:37.390 --> 00:41:41.780
pages that use CSS visual effects
from simplest to most complex.

00:41:45.030 --> 00:41:48.800
And this page is really simple,
it just displays this card,

00:41:48.860 --> 00:41:50.310
but tapping on the card,

00:41:50.790 --> 00:41:55.290
gives that sort of dashboard-like
3D rotation effect.

00:41:55.310 --> 00:41:58.970
So you could imagine doing this in
your web app for something like a

00:41:58.970 --> 00:42:02.980
dashboard widget or perhaps something
like the track list in the iPod app.

00:42:07.530 --> 00:42:10.900
Okay, the next thing is a slideshow.

00:42:10.900 --> 00:42:16.490
And this slideshow uses a bunch
of CSS visual effects transitions.

00:42:16.550 --> 00:42:19.000
So I'm just going to tap
through these really quickly.

00:42:19.000 --> 00:42:23.040
As you can see, they're pretty cool.

00:42:23.040 --> 00:42:25.540
Try to think about how you
could use these in your app.

00:42:30.900 --> 00:42:35.400
Let's go to the next one.

00:42:35.410 --> 00:42:38.000
The next page is something
called Text Tower.

00:42:38.630 --> 00:42:41.740
And what you see here is
basically four divs with text,

00:42:41.740 --> 00:42:44.410
and each div is rotated from each other.

00:42:44.530 --> 00:42:46.160
And there's also two
animations going on here.

00:42:46.160 --> 00:42:49.720
There's one animation which makes
the whole tower rotate a little bit,

00:42:49.910 --> 00:42:52.400
and then there's another animation
which makes the whole tower sort

00:42:52.400 --> 00:42:54.170
of fly around within the page.

00:42:54.310 --> 00:42:55.960
Now, I'm not encouraging
using this type of UI,

00:42:55.960 --> 00:42:59.360
but I think it's a good example
of using CSS visual effects.

00:42:59.460 --> 00:43:00.900
And again,
this is not like a plug-in or anything.

00:43:00.960 --> 00:43:04.990
This is all done inside of a web
page with CSS visual effects.

00:43:05.080 --> 00:43:07.830
I can even double tap.

00:43:07.980 --> 00:43:09.300
And that works as well.

00:43:09.420 --> 00:43:13.140
It's all HTML and CSS visual effects.

00:43:13.140 --> 00:43:13.140
It's pretty cool.

00:43:19.220 --> 00:43:22.900
The last thing I want to show is a
page that you could see at Apple.com.

00:43:22.900 --> 00:43:24.200
It's not actually from Apple.com.

00:43:24.200 --> 00:43:26.010
It's just an example page.

00:43:26.180 --> 00:43:30.220
But this is an example of using
CSS visual effects within the

00:43:30.440 --> 00:43:32.700
context of a normal web page.

00:43:33.480 --> 00:43:37.960
And on this web page is a section
which uses CSS visual effects to do

00:43:37.960 --> 00:43:42.290
a sort of QuickTime VR-like thing.

00:43:43.590 --> 00:43:44.480
This is not a plug-in.

00:43:44.650 --> 00:43:47.440
This is all done with CSS Visual Effects.

00:43:47.470 --> 00:43:52.440
What you actually see here is a set
of images that create a 3D cube,

00:43:52.700 --> 00:43:55.490
and our perspective is
with inside of that cube,

00:43:55.490 --> 00:43:58.340
and I'm just simply
modifying that perspective.

00:44:05.760 --> 00:44:08.610
So basically you can get the
performance and behaviors in native

00:44:08.720 --> 00:44:10.390
apps in your web apps as well.

00:44:10.870 --> 00:44:12.480
Thanks a lot.

00:44:16.810 --> 00:44:19.920
Thanks Chris.

00:44:19.930 --> 00:44:21.480
This stuff really is amazingly powerful.

00:44:24.190 --> 00:44:27.100
There are several sessions
that I'd like to refer you to.

00:44:27.100 --> 00:44:29.870
One coming up,
Enhancing Your iPhone Web Applications

00:44:30.000 --> 00:44:31.900
with CSS Transforms and Animations.

00:44:32.040 --> 00:44:33.430
It's a fantastic session.

00:44:33.750 --> 00:44:38.000
It goes down deep into
CSS visual effects.

00:44:38.030 --> 00:44:38.640
It's a great session.

00:44:38.640 --> 00:44:42.200
There's another good session coming up,
Building an Advanced iPhone

00:44:42.200 --> 00:44:43.180
Web Application.

00:44:43.280 --> 00:44:46.050
It's a hands-on session,
and during that session we'll

00:44:46.050 --> 00:44:49.310
build a very sophisticated app,
and you can follow along.

00:44:52.700 --> 00:44:55.140
Okay, we've talked about performance,
we've talked about touch

00:44:55.140 --> 00:44:58.260
and gesture events,
and CSS visual effects.

00:44:59.320 --> 00:45:02.390
For iPhone 2.0 and the iPhone SDK,
we're also introducing

00:45:02.420 --> 00:45:04.510
some great new tools.

00:45:05.700 --> 00:45:08.600
The simulator in particular.

00:45:08.600 --> 00:45:11.930
The simulator isn't just for
simulating native applications.

00:45:11.980 --> 00:45:16.600
It's great for that,
but it also includes Safari on iPhone.

00:45:17.150 --> 00:45:20.700
This is the same engine
that runs on the iPhone.

00:45:20.700 --> 00:45:24.500
It's exactly the same code,
just compiled for OS X.

00:45:24.500 --> 00:45:28.760
So the rendering you get in
Safari in a simulator will be

00:45:28.760 --> 00:45:33.100
exactly the same as the rendering
you get with Safari on the iPhone.

00:45:33.150 --> 00:45:36.610
It's a great way to test your layout,
to test your content.

00:45:39.060 --> 00:45:42.850
The simulator also lets you
support or lets you test gestures.

00:45:43.070 --> 00:45:45.350
So, for example,
you can do the pinch and expand gesture.

00:45:45.420 --> 00:45:47.510
You can also do double tap.

00:45:49.260 --> 00:45:51.620
However,
the simulator doesn't simulate speed,

00:45:51.750 --> 00:45:55.790
doesn't simulate view speed,
and it doesn't simulate bandwidth.

00:45:57.750 --> 00:46:01.300
But there is something we
can do to simulate bandwidth.

00:46:01.300 --> 00:46:05.890
Imagine if this is your big
fat T1 pipe or your DSL pipe.

00:46:05.930 --> 00:46:09.120
What if we can shrink it down
and simulate a cell interface?

00:46:09.120 --> 00:46:10.940
Well, you can.

00:46:11.480 --> 00:46:15.230
There's a tool that's been included
with OS X for a while called IPFW,

00:46:15.530 --> 00:46:18.650
and this is a firewall
and traffic shaping tool.

00:46:18.730 --> 00:46:24.560
And using this tool, you can add latency,
and you can also limit bandwidth so you

00:46:24.560 --> 00:46:26.880
could simulate different interfaces.

00:46:27.850 --> 00:46:35.120
Here's an example of a setup of IPFW to
restrict all IP traffic to 50K upload,

00:46:35.240 --> 00:46:38.800
200K download,
and to add 150 milliseconds

00:46:38.800 --> 00:46:40.700
of latency to each request.

00:46:40.790 --> 00:46:42.700
So in this particular example,
I'm restricting all

00:46:42.700 --> 00:46:43.740
traffic on the machine.

00:46:43.930 --> 00:46:47.100
So mail is going to be
slow as well as Safari.

00:46:47.100 --> 00:46:50.890
So to reset the configuration,
you use IPFW.

00:46:51.050 --> 00:46:51.420
Flush.

00:46:51.720 --> 00:46:56.210
And that will remove any
pipes that you've added.

00:46:57.230 --> 00:46:59.790
You can also use IPFW to
restrict based on port type,

00:46:59.970 --> 00:47:03.300
so you could restrict just HTTP traffic.

00:47:04.670 --> 00:47:06.680
There's some really good
documentation on IPFW.

00:47:06.680 --> 00:47:08.270
It's got many bells and whistles.

00:47:08.310 --> 00:47:10.500
I'm not going to go into a lot of detail,
but there's a website

00:47:10.650 --> 00:47:11.990
that describes DummyNet.

00:47:12.160 --> 00:47:14.880
DummyNet is a configuration of IPFW.

00:47:15.180 --> 00:47:21.870
There's also man pages that are included
in OS X for both DummyNet and IPFW.

00:47:25.010 --> 00:47:28.450
So if you combine IPFW with
the Web Inspector,

00:47:28.500 --> 00:47:30.730
with the simulator,
you can really get a good sense

00:47:30.740 --> 00:47:34.170
of how your applications are
going to behave on the iPhone.

00:47:34.420 --> 00:47:37.950
Another tool that we've added,
or enhanced I should say, is Dash Code.

00:47:38.190 --> 00:47:45.880
Dash Code has been significantly enhanced
and tuned for iPhone web applications.

00:47:48.950 --> 00:47:51.140
And included with Dash Code is
JavaScript debugging,

00:47:51.140 --> 00:47:54.200
much like debugging
for Dash Code widgets.

00:47:54.240 --> 00:47:58.300
But you can debug your content
inside the simulator on the desktop.

00:48:00.150 --> 00:48:03.200
It also adds support
for the Web Clip icon.

00:48:03.200 --> 00:48:06.510
In a recent release we added support
for Web Clips that let you bookmark

00:48:06.860 --> 00:48:10.250
your web app right on the desktop,
right on the desktop or the

00:48:10.250 --> 00:48:12.000
home screen of the iPhone.

00:48:12.170 --> 00:48:15.000
You can easily add that
icon with Dash Code.

00:48:15.150 --> 00:48:16.990
You can also configure the viewport.

00:48:17.210 --> 00:48:19.640
This is probably one of the
most important things that you

00:48:19.640 --> 00:48:22.910
want to do for your web apps,
and you can do that right in Dash Code.

00:48:25.440 --> 00:48:29.060
Additionally,
Dash Code adds support for built-in pods.

00:48:29.260 --> 00:48:32.100
These are prepackaged
interface components.

00:48:32.260 --> 00:48:37.450
For example, buttons, lists,

00:48:37.840 --> 00:48:38.750
A Stack Layout.

00:48:38.830 --> 00:48:41.380
A Stack Layout allows you to
have two different elements

00:48:41.500 --> 00:48:45.730
and use CSS visual effects to
transition between those elements.

00:48:47.550 --> 00:48:51.130
and finally there's a browser component,
very much like the browser

00:48:51.130 --> 00:48:54.360
component that Chris demoed,
that's included in Dash Code.

00:48:54.530 --> 00:48:57.600
So you can simply drag and drop
it and create a web application

00:48:57.600 --> 00:48:59.780
that uses that component.

00:49:02.150 --> 00:49:05.980
I encourage you to go to a session
that's coming up on Wednesday at 5:00

00:49:05.980 --> 00:49:10.270
that goes into some detail about how
to use Dashcode to develop a web app.

00:49:10.270 --> 00:49:13.810
And they'll take you through building
a web app from start to finish.

00:49:20.390 --> 00:49:24.180
So in some way we've talked about
a lot of things that you can do to

00:49:24.180 --> 00:49:29.890
enhance and optimize your web apps
and your web content for the iPhone.

00:49:30.320 --> 00:49:34.560
You can set the viewport to control
how things layout and how things scale.

00:49:34.800 --> 00:49:37.090
You can control text scaling.

00:49:37.170 --> 00:49:42.100
You can use media queries to
supply alternate style sheets.

00:49:43.210 --> 00:49:46.340
We talked about feature detection,
how to use that instead of

00:49:46.340 --> 00:49:48.140
using the user agent string.

00:49:48.250 --> 00:49:51.100
We've talked about the
resource limits of Safari.

00:49:51.100 --> 00:49:54.800
And we've talked about the
supported Windows and Dialogues,

00:49:54.810 --> 00:49:58.470
as well as support for Microsoft Office,
as well as new in iPhone

00:49:58.470 --> 00:50:00.820
2.0 support for iWork.

00:50:01.550 --> 00:50:03.640
and we also talked about
the debugging console.

00:50:03.640 --> 00:50:08.330
And we talked about events,
both the emulated mouse events and

00:50:08.590 --> 00:50:11.890
now the new touch and gesture events.

00:50:12.080 --> 00:50:13.700
and CSS Visual Effects.

00:50:13.750 --> 00:50:17.030
We think that CSS Visual Effects is
going to enable a whole new

00:50:17.030 --> 00:50:20.000
class of web content for iPhone.

00:50:20.000 --> 00:50:22.870
And finally, we've talked about tools.

00:50:25.430 --> 00:50:27.590
For more information
about these technologies,

00:50:27.590 --> 00:50:29.620
you can talk to Mark Malone
or Vicki Murley,

00:50:29.680 --> 00:50:33.490
our Internet Technologies Evangelists,
and I've also included links

00:50:33.720 --> 00:50:37.770
here to documentation that was
referred to throughout the slides.