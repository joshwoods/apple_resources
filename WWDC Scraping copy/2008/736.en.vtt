WEBVTT

00:00:20.980 --> 00:00:21.940
My name is David Black.

00:00:21.940 --> 00:00:24.390
I'm a senior architect
in the Pro Apps team.

00:00:24.490 --> 00:00:27.580
And we're here this morning to
talk to you about integrating your

00:00:27.580 --> 00:00:32.180
applications with Final Cut Pro,
various technologies to basically

00:00:32.180 --> 00:00:34.990
enable you to build tools that
complement Final Cut and combine a

00:00:35.100 --> 00:00:38.950
number of tools together to build
interesting workflows for your customers.

00:00:39.210 --> 00:00:41.640
We're going to talk about a number
of technologies this morning.

00:00:41.790 --> 00:00:44.560
Of course, data interchange to push
data between applications,

00:00:44.660 --> 00:00:48.150
some automation tools for Final Cut Pro,
leveraging metadata to

00:00:48.150 --> 00:00:51.020
basically leave interesting
breadcrumbs in your media file,

00:00:51.060 --> 00:00:54.650
and also a few hints for creating
and managing media that's compatible

00:00:54.660 --> 00:00:57.180
with Final Cut and Final Cut Studio.

00:00:58.300 --> 00:01:01.800
Start talking briefly about project
data interchange and really the

00:01:01.800 --> 00:01:03.730
formats that you'll want to use here.

00:01:04.120 --> 00:01:06.360
Now just to sort of set
some context for everyone,

00:01:06.360 --> 00:01:08.950
sort of start with the question
of what project data is.

00:01:09.150 --> 00:01:11.910
And really it's the glue that
ties everything together.

00:01:11.980 --> 00:01:15.670
Especially in post-production, you know,
there's a lot of effort that

00:01:15.670 --> 00:01:19.120
goes into shooting content,
getting video and audio and images,

00:01:19.120 --> 00:01:22.780
but there's almost more work that
goes into sequencing those elements

00:01:22.780 --> 00:01:26.110
together and combining the raw
pieces into a compelling product

00:01:26.110 --> 00:01:27.800
to deliver to customers in the end.

00:01:27.870 --> 00:01:30.050
So really, at the end of the day,
this is the data that your users

00:01:30.050 --> 00:01:31.760
spend the most time creating.

00:01:31.830 --> 00:01:35.450
Of course, with all that richness,
it makes that data traditionally

00:01:35.500 --> 00:01:39.700
very difficult to exchange beyond
the most basic representations.

00:01:40.480 --> 00:01:42.740
Sort of a little bit of
background and history here.

00:01:42.780 --> 00:01:45.520
All this began probably 20,
30 years ago when you really

00:01:45.520 --> 00:01:47.080
had hardware-based systems.

00:01:47.190 --> 00:01:49.680
You think of a rack of tape decks
and a switcher controlling them,

00:01:49.720 --> 00:01:51.930
timing together to lay
down a show to tape.

00:01:52.080 --> 00:01:54.070
And there was interchange
between these systems,

00:01:54.080 --> 00:01:55.250
and it really was basic.

00:01:55.310 --> 00:01:57.610
You're basically looking
at a list of time codes,

00:01:57.700 --> 00:02:00.500
clip IDs, all put in ASCII text files.

00:02:00.530 --> 00:02:03.260
Really easy to move around,
really easy to read, but again,

00:02:03.260 --> 00:02:05.230
not a whole lot of richness there.

00:02:05.490 --> 00:02:09.140
Contemporary formats came about
in the 90s as nonlinear systems

00:02:09.140 --> 00:02:11.120
made the jump to computers.

00:02:11.150 --> 00:02:14.100
And while they were
great and they were rich,

00:02:14.110 --> 00:02:16.800
owing partly to the complexity
and partly to the limitations

00:02:16.830 --> 00:02:19.570
of the systems at the time,
they tended to be built around

00:02:19.570 --> 00:02:22.760
binary container formats,
things that were efficient in size,

00:02:22.820 --> 00:02:27.110
but rather difficult to parse,
especially if you didn't own the format.

00:02:28.610 --> 00:02:31.670
Now we came at this back in the late 90s,
and we really wanted to take

00:02:31.730 --> 00:02:33.060
a fresh look at the problem.

00:02:33.160 --> 00:02:35.000
So we started by requesting feedback.

00:02:35.080 --> 00:02:37.270
We talked to our customers,
and they gave us some

00:02:37.370 --> 00:02:38.500
really logical points.

00:02:38.510 --> 00:02:41.460
They wanted, you know,
really have common formats for data.

00:02:41.460 --> 00:02:43.990
They wanted to get at the
contents of those projects.

00:02:44.000 --> 00:02:47.510
They already had access to the media
files owing to the way we use QuickTime,

00:02:47.510 --> 00:02:49.590
but they wanted to get
at that project data.

00:02:49.590 --> 00:02:52.840
And they wanted to leverage it to
integrate Final Cut into existing and

00:02:53.010 --> 00:02:55.380
new pipelines that we're building.

00:02:56.160 --> 00:02:59.740
When we went to talk to developers,
we got much the same feedback, really.

00:02:59.740 --> 00:03:01.540
You know,
they wanted to interchange data,

00:03:01.600 --> 00:03:03.400
you know,
both with our tools and other tools.

00:03:03.400 --> 00:03:05.520
They even wanted to bridge
tools with their code.

00:03:05.520 --> 00:03:08.050
They wanted to write new
tools and extensions,

00:03:08.240 --> 00:03:10.770
and they also wanted to
build those pipelines their

00:03:10.770 --> 00:03:12.460
customers were asking for.

00:03:13.410 --> 00:03:16.110
We came away from this with what
we felt at the time was a very

00:03:16.110 --> 00:03:17.870
different take on the problem.

00:03:17.970 --> 00:03:20.100
Traditionally,
this had been viewed as pushing

00:03:20.100 --> 00:03:23.440
large amounts of data between
two very complex systems.

00:03:23.530 --> 00:03:26.740
But it was really more than that,
especially as we talked to developers.

00:03:26.800 --> 00:03:29.590
Because it came down to this
not only being a conduit for

00:03:29.680 --> 00:03:33.150
pushing between large systems,
but as a data manipulation tool.

00:03:33.290 --> 00:03:35.910
You know, it's almost more interesting
in some ways to take data,

00:03:36.020 --> 00:03:37.800
you know, pull it out,
make some small changes to it,

00:03:37.800 --> 00:03:39.090
and push it back in.

00:03:39.180 --> 00:03:40.590
That was really powerful.

00:03:40.750 --> 00:03:44.330
And also making things simple enough so
that not only could developers use it,

00:03:44.430 --> 00:03:46.890
but also power users.

00:03:48.130 --> 00:03:51.580
From this, we came up with the
Final Cut XML Interchange Format,

00:03:51.580 --> 00:03:53.430
and we introduced it
with Final Cut Pro 4.

00:03:53.520 --> 00:03:55.770
Obviously, from the name, it's XML,
which is nice because

00:03:55.770 --> 00:03:56.980
it's somewhat readable.

00:03:56.980 --> 00:03:58.950
It's pretty well self-documenting.

00:03:59.150 --> 00:04:06.970
And, you know, at the end of the day,
it's text, really easy to parse,

00:04:06.970 --> 00:04:06.970
and there are a lot of
libraries out there,

00:04:06.970 --> 00:04:06.970
pretty much on every
platform for using this.

00:04:07.750 --> 00:04:10.420
And when we designed this,
we took care to put the complete

00:04:10.560 --> 00:04:12.800
contents of our project in this file.

00:04:12.900 --> 00:04:16.940
Some previous data format efforts sort
of restricted things or black things out,

00:04:17.030 --> 00:04:20.440
and we felt that was
really important not to do.

00:04:20.520 --> 00:04:25.360
Because ultimately, this is a conduit for
interchange with everyone.

00:04:25.420 --> 00:04:29.910
And also, again,
sort of opening up not only

00:04:29.910 --> 00:04:31.210
to developers but power users,
making it really easy to look for things.

00:04:31.540 --> 00:04:33.580
Here's a small snippet of XML.

00:04:33.580 --> 00:04:35.840
And, you know, especially seeing XML,
it's pretty logical.

00:04:35.840 --> 00:04:37.690
You've got the header
information up there.

00:04:37.780 --> 00:04:40.990
We've got a clip element and
really the critical things here,

00:04:41.060 --> 00:04:43.710
the name of it,
the duration and the frame rate,

00:04:43.710 --> 00:04:46.930
even a timecode reference tying
this piece of media back to a

00:04:46.970 --> 00:04:49.090
piece of videotape in this case.

00:04:50.050 --> 00:04:51.420
Now I'd actually like to
ask a colleague of mine,

00:04:51.420 --> 00:04:54.770
Helena, to come up here to talk to you
about some details of using the

00:04:54.900 --> 00:04:57.550
Interchange Format with Final Cut Pro.

00:05:02.770 --> 00:05:05.350
Good morning.

00:05:05.590 --> 00:05:08.350
So you want to use
Final Cut Pro Interchange Format when

00:05:08.380 --> 00:05:12.800
you want to push data to Final Cut,
you want to pull some data

00:05:12.800 --> 00:05:16.350
that's in Final Cut from it,
or if you want a round trip,

00:05:16.350 --> 00:05:18.460
so you want to modify
an existing project.

00:05:18.550 --> 00:05:24.580
And I'm going to talk about handy
tools to do each of these workflows.

00:05:25.020 --> 00:05:28.970
So to make it easier for you
guys to use the XML format,

00:05:29.220 --> 00:05:33.200
we've added some-- we've
put in some handy features.

00:05:33.200 --> 00:05:34.660
Only one of these is new.

00:05:34.740 --> 00:05:37.800
So the first one I want to talk about
is the sparseness of the format.

00:05:37.970 --> 00:05:42.000
So if you look at the XML that's
exported from Final Cut Pro,

00:05:42.000 --> 00:05:43.490
it is really long.

00:05:43.570 --> 00:05:46.720
This is one I exported that
has a sequence with an item

00:05:46.800 --> 00:05:48.900
in it on the video track.

00:05:49.030 --> 00:05:55.800
So it's got things like the UUID for
that object and updating behavior,

00:05:55.800 --> 00:05:57.600
like if you were to
import that XML again,

00:05:57.600 --> 00:05:59.660
what should we do with this sequence?

00:05:59.950 --> 00:06:02.660
It's got, as Dave mentioned,
written timecode,

00:06:02.660 --> 00:06:06.430
but it's also got all sorts of
default values for like scene

00:06:06.430 --> 00:06:08.630
shot and take or comments.

00:06:08.860 --> 00:06:12.220
So--and you notice that all of
these are actually empty XML nodes.

00:06:12.270 --> 00:06:16.040
And these are all because we want to
give you all of the keys when we export.

00:06:16.040 --> 00:06:18.470
We want to make sure you
know all of the data.

00:06:18.700 --> 00:06:20.640
But when you send us XML,
you don't have to

00:06:20.640 --> 00:06:22.150
specify all these things.

00:06:22.300 --> 00:06:25.240
So this is actually
almost a full XML file.

00:06:25.420 --> 00:06:26.800
There's just closing
out all these scopes,

00:06:26.870 --> 00:06:29.800
the file, the clip item, the track,
et cetera.

00:06:29.880 --> 00:06:33.380
So it didn't quite fit on the page,
but that's all there is to it.

00:06:33.490 --> 00:06:34.820
So we have the name of the sequence.

00:06:34.900 --> 00:06:39.190
This is actually the XML I sent
to Final Cut to create the same

00:06:39.210 --> 00:06:42.360
project that I had turned around
and exported that I just showed you.

00:06:42.440 --> 00:06:43.090
It's got the name.

00:06:43.170 --> 00:06:45.040
It's got the rate of the item.

00:06:45.190 --> 00:06:48.420
And then it specifies where that item is.

00:06:48.540 --> 00:06:51.520
The track and the
location on the timeline.

00:06:51.660 --> 00:06:53.000
And then it specifies the source file.

00:06:53.180 --> 00:06:54.770
And that's it.

00:06:54.960 --> 00:07:00.060
So you can really send us very directed
information and then get back all

00:07:00.270 --> 00:07:01.610
of the data that you need from us.

00:07:01.720 --> 00:07:03.900
Both are available to you.

00:07:04.080 --> 00:07:07.900
The second thing I want to talk
about is the auto sequence settings.

00:07:08.010 --> 00:07:12.760
So if you look at the XML export, sorry,
import dialog,

00:07:12.860 --> 00:07:15.350
there's this default sequence setting.

00:07:15.350 --> 00:07:16.940
And a lot of people have
complained to us that this is

00:07:16.940 --> 00:07:21.370
non-intuitive or it's confusing,
people don't know what to do with it.

00:07:21.520 --> 00:07:26.000
So we added the ability to
leverage the open timeline.

00:07:26.000 --> 00:07:30.420
So in Final Cut Pro 6,
you can edit an item onto the timeline,

00:07:30.490 --> 00:07:35.000
and the timeline's sequence settings
can be changed to match that first item.

00:07:35.140 --> 00:07:37.240
That's exactly what's happening
here with this feature.

00:07:37.240 --> 00:07:40.560
If you select Auto,
the first item in the timeline

00:07:40.970 --> 00:07:43.990
modifies all the sequence
settings of that sequence.

00:07:44.100 --> 00:07:46.000
So then you don't have to specify them.

00:07:46.000 --> 00:07:50.880
And so the ability to do
that at XML import time is

00:07:50.880 --> 00:07:54.750
new in Final Cut Pro 6.0.3.

00:07:55.160 --> 00:07:57.170
Another thing I wanted to
talk about is inheritance.

00:07:57.300 --> 00:08:00.960
So in the XML,
you have things like rate and duration

00:08:00.960 --> 00:08:02.220
that are required all over the place.

00:08:02.250 --> 00:08:03.570
You need to specify it on files.

00:08:03.620 --> 00:08:04.980
You need to specify it in clips.

00:08:05.080 --> 00:08:07.690
Here in this snippet of XML,
we have it on clips.

00:08:07.930 --> 00:08:10.580
And it's also required on files,
but you'll notice it's not here.

00:08:10.790 --> 00:08:14.100
And the reason is because
we can just inherit those.

00:08:14.210 --> 00:08:19.070
As long as they're the same,
an enclosing scope can tell the

00:08:19.070 --> 00:08:21.440
nesting scope what those values are.

00:08:21.510 --> 00:08:22.940
And that's available on most nodes.

00:08:22.940 --> 00:08:27.670
and it's in the documentation
which keys do and don't support it.

00:08:29.020 --> 00:08:32.440
Another one that's similar but
different is the ID attributes.

00:08:32.580 --> 00:08:38.260
So you'll often in the XML reference
a media file multiple times.

00:08:38.480 --> 00:08:42.340
So the first time you reference it,
you want to specify the name,

00:08:42.340 --> 00:08:44.900
the path URL, maybe track information.

00:08:44.900 --> 00:08:47.150
You want to fully specify that
file to your best ability,

00:08:47.150 --> 00:08:47.550
right?

00:08:47.560 --> 00:08:50.830
So then you would specify
on it as well an ID.

00:08:50.860 --> 00:08:53.060
Like you could say foo here.

00:08:53.060 --> 00:08:56.880
And then the next time you refer to it,
you say, hey, I'm using foo again.

00:08:56.900 --> 00:09:00.080
And then you don't have to specify any
of the contents of that node because we

00:09:00.080 --> 00:09:01.900
already know that that's the same item.

00:09:01.900 --> 00:09:04.400
In the XML that we export,
we will use this feature.

00:09:04.470 --> 00:09:07.240
And so when inspecting,
you also want to look for that.

00:09:07.390 --> 00:09:11.580
It's available on clips, clip items,
files, and sequences.

00:09:13.210 --> 00:09:17.800
Another thing I wanted to talk about
was the update behaviors and UUIDs.

00:09:17.800 --> 00:09:21.100
And those came in the XML version 3.

00:09:21.180 --> 00:09:25.540
So when you look at the XML,
I mentioned this briefly before,

00:09:25.540 --> 00:09:27.570
there's a UUID on each item.

00:09:27.690 --> 00:09:31.450
And this is visible on
all project-level items.

00:09:31.490 --> 00:09:33.360
So clips, sequences, and bins.

00:09:33.360 --> 00:09:38.360
And the UUID lets us specify
this item is the same item.

00:09:38.360 --> 00:09:40.860
So if you take this sequence
in the user interface,

00:09:40.970 --> 00:09:43.480
copy it,
and you paste it in another project,

00:09:44.170 --> 00:09:45.400
it will have the same UUID.

00:09:45.400 --> 00:09:46.880
It's the same object.

00:09:46.900 --> 00:09:49.900
If you export it and import it,
it's the same object.

00:09:49.900 --> 00:09:53.020
And so then if you wanted
to modify it in some way,

00:09:53.020 --> 00:09:55.530
you export this project,
and you just want to

00:09:55.530 --> 00:09:59.500
change that one thing,
you can just specify an update behavior.

00:09:59.500 --> 00:10:02.530
And the default one is add,
which just adds a new object.

00:10:02.620 --> 00:10:02.620
And then I just want to
change that one thing.

00:10:02.620 --> 00:10:02.620
You can just specify an update behavior.

00:10:02.620 --> 00:10:02.620
And the default one is add,
which just adds a new object.

00:10:02.620 --> 00:10:02.620
And then I just want to
change that one thing.

00:10:02.620 --> 00:10:02.620
You can just specify an update behavior.

00:10:02.620 --> 00:10:02.620
And the default one is add,
which just adds a new object.

00:10:02.620 --> 00:10:05.890
and then actually disregards
the UID if there's already

00:10:06.010 --> 00:10:07.660
something with that same UID.

00:10:07.680 --> 00:10:09.920
But you can also then replace an item.

00:10:09.930 --> 00:10:12.260
So you can have a sequence,
modify it in some way,

00:10:12.330 --> 00:10:16.390
and then send it back,
and it will be the same item.

00:10:16.960 --> 00:10:19.750
Other options available
are add if not found,

00:10:19.750 --> 00:10:21.190
remove, replace.

00:10:21.190 --> 00:10:25.770
And it's important to note that
this update behavior key is also

00:10:25.860 --> 00:10:28.620
available in the metadata scopes,
but it works a little bit differently.

00:10:28.620 --> 00:10:31.020
And I think Dave is going
to talk about that later.

00:10:31.020 --> 00:10:33.480
And you want to make sure
not to mix this up with the

00:10:33.480 --> 00:10:35.440
ID attributes I just talked about.

00:10:35.640 --> 00:10:42.460
So the UUIDs here are a child
node of the sequence in this case.

00:10:42.460 --> 00:10:45.950
But again, clips and bins also have them.

00:10:46.120 --> 00:10:47.490
But it is not the ID attribute.

00:10:47.550 --> 00:10:50.500
That ID attribute is
unique for the XML file,

00:10:50.500 --> 00:10:54.450
but not globally unique,
where those UUIDs are unique identifiers

00:10:54.650 --> 00:10:56.960
for that object at all times.

00:10:57.830 --> 00:10:59.830
The last one I wanted to talk
about was import options.

00:10:59.840 --> 00:11:02.200
And this gives you the ability
to skip the import dialogs.

00:11:02.330 --> 00:11:06.200
So in the XML, the top level,
you could be saying import options,

00:11:06.210 --> 00:11:08.200
and you could skip this dialog here.

00:11:08.340 --> 00:11:10.700
And it includes all the
data that's in the dialog.

00:11:10.700 --> 00:11:14.700
So the first option on the dialog
is the destination project.

00:11:14.700 --> 00:11:18.790
It tells you whether you want a
new project and whether or not,

00:11:18.790 --> 00:11:21.200
if you have an existing project,
what that project is.

00:11:21.200 --> 00:11:25.700
And so here there's two different
XML keys to represent that.

00:11:25.710 --> 00:11:27.850
There's also one for the
default sequence settings,

00:11:27.850 --> 00:11:33.090
and you can specify that auto by
saying use first clip settings.

00:11:33.800 --> 00:11:38.370
There's also this checkbox here,
and this checkbox is disabled if you are

00:11:38.370 --> 00:11:44.000
using the auto because you're obviously
not using any data specified in the XML.

00:11:44.000 --> 00:11:47.120
You're using that first clip item's data.

00:11:47.120 --> 00:11:52.110
So in this case, it's true,
but if you wanted to use auto,

00:11:52.110 --> 00:11:54.220
you would put false.

00:11:54.240 --> 00:11:58.660
And there's also import options
for the following three.

00:11:58.660 --> 00:12:01.550
Then there's also one more,
and this one is my favorite one,

00:12:01.550 --> 00:12:02.240
actually.

00:12:02.790 --> 00:12:04.660
So this one's display non-fatal errors.

00:12:04.680 --> 00:12:08.480
And when you are shipping your products,
you don't want anyone

00:12:08.480 --> 00:12:09.680
to see those errors.

00:12:09.680 --> 00:12:12.010
So you would want to say
display non-fatal errors,

00:12:12.010 --> 00:12:12.480
false.

00:12:12.520 --> 00:12:16.110
But then if you're debugging,
you want to see exactly what's going on.

00:12:16.120 --> 00:12:18.040
You want to make sure you
catch every last thing.

00:12:18.040 --> 00:12:22.900
And I'm sure that you never have
to say display non-fatal errors,

00:12:22.900 --> 00:12:25.150
false, when you ship.

00:12:25.330 --> 00:12:27.630
But hypothetically,
were there any errors,

00:12:27.760 --> 00:12:29.150
you'd want to hide them.

00:12:33.400 --> 00:12:36.050
I should have explained that
you get a dialogue at the end

00:12:36.100 --> 00:12:39.390
of XML import and it says,
"There were errors found.

00:12:39.400 --> 00:12:42.300
Would you like to see them,
true or false?" And that's what

00:12:42.300 --> 00:12:45.370
that Boolean hides that dialogue.

00:12:45.450 --> 00:12:49.910
When you round trip Final Cut XML,
you would do something like

00:12:49.910 --> 00:12:52.400
you would export the XML,
you'd modify it in some way,

00:12:52.400 --> 00:12:54.400
and then you would send it back
into Final Cut with an import.

00:12:54.400 --> 00:12:56.400
So let's look at kind of
how you would do that.

00:12:56.400 --> 00:12:58.400
Let's take a snippet of XML.

00:12:58.430 --> 00:12:59.500
It's very simple.

00:12:59.500 --> 00:13:02.400
It's got a sequence of the
UID and update behavior.

00:13:02.400 --> 00:13:06.950
And so you would specify the same UID,
and then you would change the

00:13:06.950 --> 00:13:08.720
update behavior to replace.

00:13:09.510 --> 00:13:12.040
And if you want to switch up media files,
it's very similar.

00:13:12.040 --> 00:13:15.090
If we look at another snippet of XML,
we see, in this case,

00:13:15.100 --> 00:13:17.870
it's a file that we want
to change the path URL on.

00:13:18.010 --> 00:13:23.920
So you would change out that
path URL to the new path URL.

00:13:23.920 --> 00:13:26.720
And then you also want to
modify the track details.

00:13:26.950 --> 00:13:30.180
So here,
this is a-- I actually put a dot, dot,

00:13:30.180 --> 00:13:30.380
dot.

00:13:30.380 --> 00:13:34.550
This is like a six track audio,
one track of video file.

00:13:34.620 --> 00:13:37.310
And you would want to take that out
if you're modifying it in some way.

00:13:37.400 --> 00:13:40.940
So let's say maybe you're
changing it to a stereo file.

00:13:40.940 --> 00:13:42.980
Because we've specified
those tracks there,

00:13:42.980 --> 00:13:44.880
we're going to go
looking for those tracks.

00:13:44.880 --> 00:13:46.600
But if you take that out,
we'll only look for the

00:13:46.690 --> 00:13:48.380
tracks that you specify.

00:13:48.380 --> 00:13:50.860
If you don't specify any,
we'll just look at the file.

00:13:50.960 --> 00:13:54.260
So let's remove those.

00:13:54.830 --> 00:13:58.000
And then so you would send us a snippet
that looked a little bit like this.

00:13:58.130 --> 00:13:59.880
And make sure you watch out for the ID.

00:14:00.120 --> 00:14:04.670
Remember I mentioned that the reference
is there and it's an empty node.

00:14:04.680 --> 00:14:08.880
So if you were to go through
searching through the file without

00:14:08.970 --> 00:14:14.390
looking carefully to see if you were
actually getting some child back,

00:14:14.400 --> 00:14:17.450
like let's say, go get file/path URL.

00:14:17.460 --> 00:14:22.120
And you get it and you get nothing
and you'll then have a null node.

00:14:22.120 --> 00:14:22.120
So watch out for that one.

00:14:24.360 --> 00:14:27.180
I've mentioned a little bit,
there's different versions

00:14:27.230 --> 00:14:28.890
of Final Cut Pro's XML file.

00:14:28.930 --> 00:14:33.440
And it's important to note that those
are not the same as different versions

00:14:33.440 --> 00:14:36.710
of Final Cut Pro because the XML format,
as Dave mentioned,

00:14:36.780 --> 00:14:39.630
came out in Final Cut Pro 4.1.

00:14:39.710 --> 00:14:43.430
And the versioning of the
XML files has to do with the

00:14:43.480 --> 00:14:45.230
features of the XML format.

00:14:45.380 --> 00:14:49.600
So, for example, in version one,
you know, you have a basic project.

00:14:49.730 --> 00:14:53.490
But in version two,
we changed the track layout of audio

00:14:53.490 --> 00:14:56.180
files to match Final Cut Pro 5.0.

00:14:56.300 --> 00:15:00.300
And then you also get multi-clips
and you also have the ability to

00:15:00.300 --> 00:15:04.300
update and things like that in
the future and later versions,

00:15:04.300 --> 00:15:06.300
sorry, in the later versions of the
Final Cut Pro XML format.

00:15:06.300 --> 00:15:09.260
But you don't have those, say,
in version one.

00:15:09.290 --> 00:15:12.390
So if you want to use version
one for maximum compatibility,

00:15:12.390 --> 00:15:13.230
that's great.

00:15:13.330 --> 00:15:15.300
But then you obviously
don't have the features.

00:15:15.300 --> 00:15:21.890
So you have to have the features of
the latest version of the XML format.

00:15:24.290 --> 00:15:27.050
They all are,
all versions of Final Cut can take

00:15:27.050 --> 00:15:30.630
in all the older versions of the XML,
but not future versions

00:15:30.640 --> 00:15:33.030
from when they were created.

00:15:35.240 --> 00:15:40.120
So I just wanted to make a
point about user experience.

00:15:40.340 --> 00:15:42.150
We give you the ability
to use import options,

00:15:42.150 --> 00:15:44.470
and I'll talk a little bit
about AppleEvents in a second.

00:15:44.710 --> 00:15:47.690
And you want to use these to give
your users a rich experience.

00:15:47.830 --> 00:15:51.470
You don't want to have them use
the XML import and export dialogs,

00:15:51.470 --> 00:15:52.800
if at all possible.

00:15:52.800 --> 00:15:57.140
I think you want to skip those,
because it's a little

00:15:57.140 --> 00:15:59.350
bit confusing for users.

00:15:59.490 --> 00:16:02.420
Full documentation of the XML format
can be found on our website.

00:16:04.320 --> 00:16:09.330
Now let's talk about some of the
ways you can automate Final Cut Pro.

00:16:09.470 --> 00:16:13.860
So you can send
Final Cut Pro Apple events.

00:16:13.910 --> 00:16:17.150
And you can send events
to read and write the XML,

00:16:17.210 --> 00:16:20.420
to manage projects,
to perform a find operation.

00:16:20.640 --> 00:16:23.690
And it's important to note this is a
find operation in the user interface,

00:16:23.770 --> 00:16:25.800
not find operation that
gives you back data.

00:16:25.800 --> 00:16:28.940
And those are all
documented on our website.

00:16:29.100 --> 00:16:32.800
And I wanted to call out that the
Apple Events is not Apple script.

00:16:32.800 --> 00:16:39.900
So you can tell us, give me XML,
and we'll run an XML export

00:16:40.020 --> 00:16:41.000
and give you back the data.

00:16:41.140 --> 00:16:47.080
But it doesn't give you the ability
to do everything in Final Cut because

00:16:47.080 --> 00:16:50.180
that's a lot more complicated.

00:16:50.970 --> 00:16:53.060
So if you want to import
XML into Final Cut,

00:16:53.060 --> 00:16:57.780
you could either do a finder launch
to send that XML into Final Cut,

00:16:57.780 --> 00:16:58.960
and we would open it.

00:16:58.970 --> 00:17:03.110
And you would use the
four-character code KG,

00:17:03.120 --> 00:17:04.660
and you would also use XML.

00:17:04.660 --> 00:17:06.700
There's a space there.

00:17:06.970 --> 00:17:09.720
And you could also do this
by sending us an Apple event.

00:17:09.720 --> 00:17:12.950
And you would use the
I XML four-character

00:17:12.950 --> 00:17:14.940
code to specify that.

00:17:14.960 --> 00:17:18.490
And then you would also send us a
buffer of the XML you wanted to import.

00:17:18.600 --> 00:17:20.600
Potentially,
you could also choose to send

00:17:20.600 --> 00:17:23.190
it to a specific project,
in which case you'd need to send

00:17:23.190 --> 00:17:27.180
us also that project file's FSRF,
I think.

00:17:27.470 --> 00:17:32.510
And in the XML, you could use import
options to avoid dialogs.

00:17:32.620 --> 00:17:33.880
So let's look at how you do that.

00:17:34.110 --> 00:17:37.320
You have basic initialization
for all AppleEvents.

00:17:37.320 --> 00:17:38.740
These are very similar.

00:17:38.740 --> 00:17:43.160
You have all your parameters
and then you init everything.

00:17:43.260 --> 00:17:45.800
And then at the bottom here,
you have specifying

00:17:45.800 --> 00:17:47.950
Final Cut by saying key G.

00:17:48.010 --> 00:17:50.700
And you would just say the four-character
code signature of any application

00:17:50.700 --> 00:17:52.120
that you were sending the event to.

00:17:53.080 --> 00:17:57.840
And then to do an import XML,
you would specify that I XML,

00:17:57.840 --> 00:17:59.900
which I just mentioned, for import XML.

00:17:59.900 --> 00:18:04.360
Then you would pass in the
buffer for the XML data.

00:18:04.360 --> 00:18:05.680
Here it's called XMLD.

00:18:05.680 --> 00:18:07.340
And the Final Cut Pro project
is optional,

00:18:07.370 --> 00:18:08.700
which is why it's highlighted.

00:18:08.700 --> 00:18:11.140
And that would be FCP for project.

00:18:11.140 --> 00:18:12.770
And then you do the send.

00:18:12.770 --> 00:18:13.760
It's very straightforward.

00:18:13.760 --> 00:18:18.920
To do an export XML,
you would do EXML for export XML.

00:18:18.920 --> 00:18:22.410
And you can pass in the project
again that you want to specify.

00:18:23.080 --> 00:18:27.760
If you don't specify one,
you get the topmost projects XML.

00:18:27.760 --> 00:18:32.080
And that will return that
XML buffer in the same parameter

00:18:32.080 --> 00:18:33.970
name XMLD for XML data.

00:18:33.970 --> 00:18:37.380
So to do that,
you would send the same thing,

00:18:37.400 --> 00:18:40.150
only you'd modify the I XML to EXML.

00:18:40.170 --> 00:18:44.590
And then you would not specify
an XML buffer because you're

00:18:44.590 --> 00:18:47.200
going to actually get one back.

00:18:47.380 --> 00:18:49.460
So let's remove and change this thing.

00:18:49.540 --> 00:18:51.280
So this would be your send.

00:18:51.290 --> 00:18:54.070
And then you need to go get that
XML data in the reply event.

00:18:54.140 --> 00:18:55.860
So let's look at where that is.

00:18:56.170 --> 00:18:59.670
So you have initialization
of the buffers,

00:18:59.670 --> 00:19:01.860
essentially,
that you're going to pull that data into.

00:19:01.860 --> 00:19:04.340
You need to get the size of
the thing from the reply event.

00:19:04.340 --> 00:19:06.940
And then you just pull it in.

00:19:08.400 --> 00:19:10.300
So it's very straightforward.

00:19:10.300 --> 00:19:17.580
We have this also for opening projects,
which is OFCP, closing projects, CFCP,

00:19:18.000 --> 00:19:18.490
find.

00:19:18.930 --> 00:19:21.900
The find is a little bit more complicated
because it has more parameters,

00:19:21.930 --> 00:19:24.300
some of which are enums,
but those are all in the headers,

00:19:24.300 --> 00:19:29.700
which are in all the sample code,
and it's also documented on that.

00:19:29.720 --> 00:19:32.560
There's an appendix for the
Apple events in the XML documentation.

00:19:32.560 --> 00:19:34.190
It's all in there.

00:19:35.370 --> 00:19:38.360
So when you're using the AppleEvents,
you want to be aware that you're

00:19:38.360 --> 00:19:42.420
using-- I mentioned before the
UUIDs are not the same as the IDs.

00:19:42.420 --> 00:19:45.920
And when specifying a specific
object in the AppleEvents,

00:19:45.920 --> 00:19:48.780
because you can get the
XML of a specific object,

00:19:48.780 --> 00:19:50.900
you want to specify it with UUIDs.

00:19:50.900 --> 00:19:52.620
Just don't mix those up with IDs.

00:19:52.640 --> 00:19:55.940
And it'd be great if you don't
block your application's event loop

00:19:55.940 --> 00:19:57.660
waiting for a response from us.

00:19:57.680 --> 00:20:00.400
Because we actually do exactly the
same thing we do in the user interface.

00:20:00.550 --> 00:20:06.820
So if you export the XML for
a whole project that's huge,

00:20:06.830 --> 00:20:08.770
it's going to take us some
time to get you that XML.

00:20:08.900 --> 00:20:10.640
And in the meantime,
you're just sitting there

00:20:10.640 --> 00:20:11.640
churning and waiting.

00:20:11.690 --> 00:20:14.300
And we're like busily spitting out XML.

00:20:14.370 --> 00:20:15.140
So that could take a while.

00:20:15.290 --> 00:20:18.940
So it's best if you don't
block waiting for us.

00:20:19.500 --> 00:20:22.490
and full documentation can
be found on the same site.

00:20:22.560 --> 00:20:27.500
You can notice it's Chapter 9
of the XML documentation.

00:20:27.500 --> 00:20:31.440
So,
Dave will tell you more about metadata.

00:20:31.460 --> 00:20:33.280
Thanks.

00:20:33.280 --> 00:20:33.280
Thank you, Helena.

00:20:38.320 --> 00:20:40.280
Since Helena has gone through
Project Data and AppleEvents,

00:20:40.310 --> 00:20:42.300
I want to spend some time on metadata.

00:20:42.300 --> 00:20:45.300
This is something that we've been
spending some time on recently,

00:20:45.470 --> 00:20:48.300
and it really enables
some powerful workflows.

00:20:48.300 --> 00:20:52.300
Again, just to set some context,
so we're all coming from the same spot,

00:20:52.440 --> 00:20:55.120
here's a very basic
definition of what it is.

00:20:55.530 --> 00:20:58.540
Basically, we think of it as just a
collection of arbitrary data

00:20:58.540 --> 00:21:00.300
attached to a file or a dataset.

00:21:00.300 --> 00:21:02.300
It's something on the side.

00:21:02.300 --> 00:21:05.300
It's useful with the data in the dataset,
but not required for it.

00:21:05.300 --> 00:21:09.200
And you can actually modify that data,
ideally without touching

00:21:09.200 --> 00:21:11.000
your sort of central core.

00:21:11.200 --> 00:21:14.210
Probably the best example that
everyone's familiar with would be

00:21:14.220 --> 00:21:17.970
ID3 tags in your MP3 or AAC files.

00:21:18.300 --> 00:21:21.800
The central content of that
file is that compressed music.

00:21:21.800 --> 00:21:24.170
That's the thing you
play back and you enjoy.

00:21:24.240 --> 00:21:27.150
But really,
your enjoyment of it is enhanced by

00:21:27.150 --> 00:21:30.710
being able to figure out what that file
is with more than just the file name,

00:21:30.710 --> 00:21:34.160
things like the artist and the
album and even the year it came out.

00:21:34.170 --> 00:21:37.330
And going back to our definition,
it's editable.

00:21:37.380 --> 00:21:39.650
So if you get a file with a bad tag,
you can fix it.

00:21:39.690 --> 00:21:41.830
And it's actually grown
over time with new fields.

00:21:41.930 --> 00:21:44.520
Album artwork came in later
than the initial version,

00:21:44.520 --> 00:21:46.040
for example.

00:21:47.110 --> 00:21:49.540
Now, in the post-production space,
you might,

00:21:49.540 --> 00:21:51.850
if you haven't thought about it before,
you might sort of ask yourself, well,

00:21:51.860 --> 00:21:53.000
what could you use metadata for?

00:21:53.000 --> 00:21:53.980
Well, there are a lot of things.

00:21:53.980 --> 00:21:56.630
You know, at the most basic level,
you might take media files that

00:21:56.630 --> 00:21:59.690
your software creates and put a tag
on there indicating you created it.

00:21:59.780 --> 00:22:02.560
Maybe cache some information that
links back to some of your other files.

00:22:02.560 --> 00:22:04.760
If you're, you know,
working with or building

00:22:04.830 --> 00:22:07.690
an asset management system,
you know, store your database

00:22:07.730 --> 00:22:09.050
IDs in that media file.

00:22:09.060 --> 00:22:11.100
You know, so if that file itself
comes back in later,

00:22:11.170 --> 00:22:13.760
you can track it back to your
database if other links went stale.

00:22:14.540 --> 00:22:16.810
If you have a tool that does
interesting media analysis,

00:22:16.810 --> 00:22:18.630
maybe it's very
computationally intensive,

00:22:18.640 --> 00:22:20.490
you know,
cache that on the file as metadata,

00:22:20.490 --> 00:22:21.020
right?

00:22:21.020 --> 00:22:21.540
It's there.

00:22:21.540 --> 00:22:22.540
It rides with the file.

00:22:22.540 --> 00:22:24.220
You know, you do your analysis once.

00:22:24.220 --> 00:22:26.290
Then you can use it for
rendering or other process later.

00:22:26.300 --> 00:22:29.790
And another thing we've seen a lot
of growth in recently is actually

00:22:30.200 --> 00:22:33.700
leveraging data from the production
process into post-production.

00:22:33.700 --> 00:22:35.570
You know,
making use of new file-based cameras

00:22:35.680 --> 00:22:38.660
that put all sorts of useful things
in the media they record to storage.

00:22:38.660 --> 00:22:42.170
If we persist that as metadata in
the media files all the way through,

00:22:42.300 --> 00:22:44.380
even until the very end,
we can pull that.

00:22:44.540 --> 00:22:47.410
and sort of figure out
where things came from.

00:22:48.690 --> 00:22:51.770
Now, QuickTime added support for
metadata back in version 7,

00:22:51.820 --> 00:22:54.900
and the concept is basically
of metadata containers,

00:22:54.900 --> 00:22:58.770
with containers available on the movie,
track, and media levels.

00:22:59.980 --> 00:23:02.770
Each container is pretty much, you know,
sort of a key value list.

00:23:02.890 --> 00:23:04.740
It's not really a one-to-one
key value mapping.

00:23:04.740 --> 00:23:06.400
It's more sort of a one-to-end mapping.

00:23:06.400 --> 00:23:09.400
So for a key,
you'll have one or more values.

00:23:09.510 --> 00:23:11.960
It makes some interesting
semantics if you're trying to

00:23:11.960 --> 00:23:13.500
add or replace items in there.

00:23:13.540 --> 00:23:16.850
And of course,
each value has a definition of the data

00:23:16.850 --> 00:23:21.550
type stored within it along with the
length and the actual value payload.

00:23:21.550 --> 00:23:24.600
And the keys are actually
covered by a key space,

00:23:24.600 --> 00:23:26.710
and that key space is
something you specify when

00:23:26.710 --> 00:23:26.710
you work with that container.

00:23:27.800 --> 00:23:29.620
The primary key space
that QuickTime uses,

00:23:29.670 --> 00:23:31.680
uses reverse DNS strings.

00:23:31.850 --> 00:23:34.520
And it's actually quite nice
because one of the challenges

00:23:34.520 --> 00:23:37.010
with metadata has been sort of
preventing this collision problem.

00:23:37.040 --> 00:23:40.710
You know, if we both have a value named,
if we both have a value for studio

00:23:40.710 --> 00:23:43.880
and we just label it as studio,
then if I put a value in that file,

00:23:43.880 --> 00:23:46.840
you put a value in that file and
we don't know where it came from,

00:23:46.840 --> 00:23:50.330
it can be complicated if we have
tools dependent on that value.

00:23:50.500 --> 00:23:52.580
So by using reverse DNS,
we can put things like our

00:23:52.580 --> 00:23:55.190
organization name and our
product name in that labeling.

00:23:55.190 --> 00:23:57.710
And it really helps,
especially if you think of media

00:23:58.200 --> 00:24:01.050
files you've created or modified
sort of further down the production

00:24:01.110 --> 00:24:03.660
pipe being analyzed by another tool
or a user that didn't necessarily

00:24:03.660 --> 00:24:04.820
know where they came from.

00:24:04.820 --> 00:24:07.490
You know,
and here's a very basic example,

00:24:07.490 --> 00:24:12.250
very generic of just, you know,
an organization, a product, and a key.

00:24:15.010 --> 00:24:16.940
Now the metadata containers
themselves are interesting

00:24:16.940 --> 00:24:20.400
because unlike the sample data,
unlike your audio and video data,

00:24:20.400 --> 00:24:22.900
it's actually stored
in the movie resource.

00:24:22.900 --> 00:24:25.900
So of course it's going to go
wherever that resource goes.

00:24:25.900 --> 00:24:27.850
So if I open a QuickTime file
with metadata in it and

00:24:27.850 --> 00:24:30.610
I save a reference movie,
a copy of that metadata is going

00:24:30.620 --> 00:24:33.890
to go along with that movie
resource in the reference movie.

00:24:33.910 --> 00:24:35.870
Again,
sort of a couple attributes of this.

00:24:35.960 --> 00:24:38.030
This data ends up being
loaded into memory,

00:24:38.030 --> 00:24:40.870
which is nice because if
you're going to query it,

00:24:40.900 --> 00:24:42.620
you don't have any additional
overhead like you would if you

00:24:42.620 --> 00:24:43.900
were querying audio and video data.

00:24:43.900 --> 00:24:46.900
But you want to be mindful of how
much data you're putting in here.

00:24:46.900 --> 00:24:49.230
You don't want to bloat
the movie resource to,

00:24:49.230 --> 00:24:51.840
you know,
200 megabytes just for data set.

00:24:51.900 --> 00:24:54.820
If you have a set that large,
you might want to look at

00:24:54.840 --> 00:24:56.900
another option for storing it.

00:24:58.560 --> 00:25:01.440
Going into some API stuff really quick,
I've certainly heard from people

00:25:01.440 --> 00:25:04.300
that the APIs seem a little opaque,
so we'll go through some basic usages.

00:25:04.300 --> 00:25:06.600
It all starts with getting a container.

00:25:06.600 --> 00:25:11.570
And you have the QtCopyMovieMetadata
or TrackMetadata or even MediaMetadata

00:25:11.580 --> 00:25:14.010
APIs that give you back a metadata ref.

00:25:14.230 --> 00:25:16.230
And this is actually
a ref count instance.

00:25:16.240 --> 00:25:18.180
You have to release it when
you're done with metadata release.

00:25:18.180 --> 00:25:22.460
The interesting point here is even though
all these APIs have copy in the name,

00:25:22.460 --> 00:25:27.330
they're giving you a pointer or an
instance to the live container in data.

00:25:27.460 --> 00:25:31.340
So it's not so much that here's a
complete standalone copy of my container,

00:25:31.340 --> 00:25:35.080
it's here's an instance I can operate on,
just something confusing

00:25:35.080 --> 00:25:36.230
from the API name.

00:25:36.240 --> 00:25:40.760
Now once you have that container,
if you want to start getting at things,

00:25:40.760 --> 00:25:44.220
you basically use the
QtMediaGetNextItem API.

00:25:44.220 --> 00:25:46.800
When you get an item,
that item's going to have a reference

00:25:46.800 --> 00:25:48.270
to the value and the key in it.

00:25:48.320 --> 00:25:50.750
And the simplest thing is really
just to enumerate over them.

00:25:50.770 --> 00:25:54.120
So in this snippet of code here,
we initialize an item ref

00:25:54.120 --> 00:25:57.440
with the uninit constant,
and we're just basically iterating.

00:25:57.440 --> 00:26:00.760
We've got the container,
the storage format, the key format,

00:26:00.760 --> 00:26:03.180
and pretty much as long as that
comes back without an error,

00:26:03.180 --> 00:26:05.600
we're getting all of the
items in that container.

00:26:07.950 --> 00:26:11.720
Now, let's say I actually wanted to
find all the values associated

00:26:11.720 --> 00:26:13.240
with a particular key.

00:26:13.240 --> 00:26:14.990
We'd modify that call slightly.

00:26:15.170 --> 00:26:17.640
You know, we have a string here with
a key we want to look for,

00:26:17.720 --> 00:26:19.850
and you notice that we've
modified the call we made before

00:26:19.850 --> 00:26:21.180
with that key value in the link.

00:26:21.320 --> 00:26:25.710
So now we're going to iterate over
all the values attached to that key.

00:26:28.300 --> 00:26:31.420
Now once we have that item ref,
if we want to get the value payload,

00:26:31.480 --> 00:26:33.150
we turn to another API.

00:26:33.300 --> 00:26:36.310
The Get Item Value API will
basically take the value payload

00:26:36.370 --> 00:26:37.770
and copy it into a buffer.

00:26:37.810 --> 00:26:39.120
Of course,
most of the time you're going to want

00:26:39.120 --> 00:26:40.960
to dynamically allocate that buffer.

00:26:41.010 --> 00:26:46.400
So you can actually make that call
with null in the out value pointer

00:26:46.400 --> 00:26:51.110
parameter just to get the size
back in that final size argument.

00:26:52.150 --> 00:26:54.300
Oh, one other thing I'll pop
back to really quick.

00:26:54.510 --> 00:26:56.790
Once you have these items,
you can use the QuickTime Properties

00:26:56.870 --> 00:26:58.940
API to get all sorts of
interesting information about it.

00:26:58.940 --> 00:27:01.750
This includes not only
another way to get the size,

00:27:01.930 --> 00:27:07.070
but also a way to get the data
type of that value as well.

00:27:07.780 --> 00:27:10.380
Now let's say you want to
add something to a container.

00:27:10.510 --> 00:27:13.420
Well,
you use the logically named Add Item API.

00:27:13.500 --> 00:27:14.990
It's kind of long here,
but it's basically got

00:27:15.030 --> 00:27:15.700
all the essentials.

00:27:15.700 --> 00:27:19.610
It's got the container, the format,
the key, the key format, the key data,

00:27:19.610 --> 00:27:21.680
the item and the type, and everything.

00:27:21.770 --> 00:27:25.690
You're going to specify both the key
and value when you're using this API.

00:27:25.770 --> 00:27:27.480
And of course,
what it's going to do with that

00:27:27.480 --> 00:27:30.220
key is it's going to look it up,
and if there's already a key

00:27:30.220 --> 00:27:33.130
and a value list existing,
it's just going to append

00:27:33.130 --> 00:27:34.640
that value to the list.

00:27:36.420 --> 00:27:38.900
And of course, we've iterated over,
we've added something.

00:27:38.900 --> 00:27:40.900
What if you want to remove something?

00:27:41.000 --> 00:27:43.510
Pretty much the simplest way
to do it is take that key and

00:27:43.510 --> 00:27:47.290
basically call this API here,
which will remove everything

00:27:47.290 --> 00:27:48.680
associated with that key.

00:27:48.690 --> 00:27:51.030
Now,
what if I have a list of items attached

00:27:51.050 --> 00:27:53.390
to a key and I only want to remove one?

00:27:53.500 --> 00:27:56.040
You can actually use the iteration
code we saw before to figure out

00:27:56.040 --> 00:27:58.910
which value you want to remove,
and then you can call the

00:27:58.920 --> 00:28:01.990
remove item call to remove
the item from that container.

00:28:03.550 --> 00:28:05.820
So now we'll do a little
demo really quickly.

00:28:05.880 --> 00:28:08.640
And we've got an example
application we put together,

00:28:08.640 --> 00:28:11.270
again, because we wanted to
help you use the APIs.

00:28:11.380 --> 00:28:13.060
And it's kind of neat.

00:28:13.060 --> 00:28:15.830
We use all the APIs we've talked
about to basically open up a file

00:28:15.830 --> 00:28:17.760
to read all the metadata out of it.

00:28:17.850 --> 00:28:20.850
We actually made a little core data
model to hold all this in memory

00:28:20.940 --> 00:28:22.840
to help us bind to our Cocoa UI.

00:28:22.840 --> 00:28:25.270
So you can actually see it
and step through it all.

00:28:25.370 --> 00:28:27.680
Now, all the source code for
this is on the WWDC site.

00:28:27.780 --> 00:28:29.290
It's on the Apple Applications page.

00:28:29.400 --> 00:28:32.660
It's also linked to
this particular session.

00:28:32.660 --> 00:28:35.620
So if we can switch the demo machine,
please.

00:28:37.700 --> 00:28:38.540
Excellent.

00:28:38.540 --> 00:28:43.580
So I'll go ahead and run this
metadata editor application.

00:28:45.300 --> 00:28:47.130
And I'll open up just a file over here.

00:28:47.150 --> 00:28:48.860
We'll see this file later.

00:28:48.860 --> 00:28:51.300
And it's pretty simple.

00:28:51.310 --> 00:28:56.480
This is actually a QtKit view over here
for just viewing the contents of my clip,

00:28:56.520 --> 00:28:58.200
if I can click right here.

00:28:58.200 --> 00:29:01.610
And as I twiddle down through this,
I'm basically walking through

00:29:01.610 --> 00:29:02.930
all the containers in the file.

00:29:03.080 --> 00:29:06.480
This particular file only has
one key associated with it.

00:29:06.480 --> 00:29:09.370
Here are all the normal primitive
data types that QuickTime supports,

00:29:09.370 --> 00:29:11.620
and of course,
the value payload over here.

00:29:11.620 --> 00:29:12.900
Now,
I actually want to open up a slightly

00:29:12.900 --> 00:29:14.160
more complicated file for you.

00:29:14.160 --> 00:29:17.340
I mentioned earlier one of the
uses for metadata being to link

00:29:17.340 --> 00:29:19.340
production and post-production.

00:29:19.350 --> 00:29:21.810
So I'm going to take a funky
chicken movie over here,

00:29:21.810 --> 00:29:26.320
which we actually captured
using a Panasonic camera.

00:29:26.600 --> 00:29:30.380
I'm actually going to make this big
because there's so much data in here.

00:29:30.500 --> 00:29:34.700
Now, this actually originated as
an MXF file on a flash card.

00:29:34.760 --> 00:29:38.600
And there's all sorts of MXF metadata
here persisted as metadata to

00:29:38.750 --> 00:29:42.550
support workflows where MXF might
be part of it using the UMIDs.

00:29:42.670 --> 00:29:44.840
But there's all sorts of
interesting tidbits here,

00:29:44.840 --> 00:29:47.670
including some of these fields that
could have potentially been set on

00:29:47.670 --> 00:29:50.270
the camera by the person recording it.

00:29:50.750 --> 00:29:53.160
And of course,
you see on the other tracks,

00:29:53.160 --> 00:29:57.700
there's a slightly different
set of metadata as well.

00:29:57.700 --> 00:30:00.100
Can we get back to slides, please?

00:30:03.890 --> 00:30:07.430
All right, so we've talked about metadata
in the generic QuickTime context.

00:30:07.550 --> 00:30:09.800
Now I want to focus on
how Final Cut Pro uses

00:30:09.800 --> 00:30:12.150
QuickTime metadata in particular.

00:30:12.340 --> 00:30:15.180
In 5.12,
we added support for QuickTime metadata,

00:30:15.180 --> 00:30:17.600
building on all the support
we just talked about.

00:30:17.690 --> 00:30:20.200
You know, basically arbitrary metadata
in QuickTime movies.

00:30:20.350 --> 00:30:22.260
Currently,
you want to note that we're only handling

00:30:22.260 --> 00:30:24.460
containers at the movie and track levels.

00:30:24.550 --> 00:30:28.500
And we're also supporting that primary
QuickTime namespace that we talked about.

00:30:28.600 --> 00:30:31.700
And of course,
all the standard data types.

00:30:32.720 --> 00:30:35.840
Now Final Cut makes use of
metadata in a very specific way.

00:30:35.840 --> 00:30:38.360
From the outside it might
seem a little strange,

00:30:38.360 --> 00:30:39.960
but there's actually a method to this.

00:30:39.960 --> 00:30:42.780
And it's really all about
maintaining a metadata cache.

00:30:42.780 --> 00:30:45.760
Now the internal architecture
of Final Cut is such that

00:30:45.760 --> 00:30:48.830
when you bring in a file,
any file, we actually create a

00:30:48.830 --> 00:30:49.900
little file record for it.

00:30:49.960 --> 00:30:52.550
And we cache all sorts of
interesting information on that,

00:30:52.550 --> 00:30:54.090
which gets saved in the project.

00:30:54.140 --> 00:30:57.320
Things like the number
of tracks and the format.

00:30:57.320 --> 00:31:00.680
In fact, a lot of the things you actually
see in the XML are in that cache.

00:31:01.240 --> 00:31:02.550
And metadata is really the same way.

00:31:02.620 --> 00:31:05.780
Such that when we open that file
and we build that file record,

00:31:05.950 --> 00:31:09.380
we'll read all the metadata out of
it and store it in that file record.

00:31:09.420 --> 00:31:12.290
Now the useful thing about this
is Final Cut has the notion of

00:31:12.290 --> 00:31:14.020
files going online and offline.

00:31:14.100 --> 00:31:17.050
So I have a project with a file,
I quit and I save.

00:31:17.130 --> 00:31:19.570
If that file goes away
and I relaunch Final Cut,

00:31:19.570 --> 00:31:21.850
it's not sort of game over,
I can't open the project.

00:31:21.960 --> 00:31:24.670
The file and whatever clips are there,
they're just marked as offline

00:31:24.710 --> 00:31:26.220
because the media file isn't there.

00:31:26.280 --> 00:31:29.080
Of course, the user can go point to it
or go and pull that file back

00:31:29.080 --> 00:31:30.350
in their proper location.

00:31:31.140 --> 00:31:33.730
But the nice thing is when that
offline file record is there,

00:31:33.880 --> 00:31:36.070
all that metadata is
still present and active.

00:31:36.080 --> 00:31:38.160
So for example,
if you're building an asset

00:31:38.160 --> 00:31:42.120
management system and you had
database IDs stored as metadata.

00:31:42.120 --> 00:31:44.920
If you open up a project and
you see the files offline,

00:31:44.920 --> 00:31:47.130
you can pull that metadata,
go off to your server and pull

00:31:47.130 --> 00:31:50.670
a new copy of that file down
and reattach it to that project.

00:31:51.330 --> 00:31:53.940
Now, of course,
another interesting part of this is that

00:31:54.660 --> 00:31:57.410
we have that cache in the file record,
but you want to note that the

00:31:57.410 --> 00:31:59.220
movie is the authoritative source.

00:31:59.220 --> 00:32:01.660
The copy in Final Cut really is a cache.

00:32:01.660 --> 00:32:03.820
So if we sort of go back
to our model before,

00:32:03.820 --> 00:32:06.060
where we make a project,
we bring in a file,

00:32:06.060 --> 00:32:07.500
we have the metadata there.

00:32:07.500 --> 00:32:10.470
If we save our project and quit,
and then in another application

00:32:10.470 --> 00:32:13.780
modify the metadata in that file,
the next time Final Cut launches

00:32:13.780 --> 00:32:15.960
and attaches that file,
it's going to see the

00:32:15.960 --> 00:32:18.020
metadata has changed,
it's going to get rid of

00:32:18.020 --> 00:32:20.670
its copy in the cache,
and read everything in from the file.

00:32:21.200 --> 00:32:24.480
There's some interesting bits of
this you'll see in a few minutes,

00:32:24.540 --> 00:32:26.880
but again,
just something to be aware of in

00:32:26.940 --> 00:32:29.270
terms of how Final Cut uses metadata.

00:32:30.980 --> 00:32:33.420
Now, of course,
because there's metadata in Final Cut,

00:32:33.420 --> 00:32:35.350
there's also metadata in the XML format.

00:32:35.530 --> 00:32:38.660
About the same time we added
metadata elements in XML,

00:32:38.730 --> 00:32:40.540
again, they're basically under
the file elements,

00:32:40.540 --> 00:32:41.850
because that's where
they exist in Final Cut.

00:32:41.940 --> 00:32:45.470
You'll see them under File for
movie-level containers and under

00:32:45.470 --> 00:32:47.410
Audio and Video for the tracks.

00:32:48.160 --> 00:32:52.140
Here's a snippet of XML again,
and a file definition similar to

00:32:52.140 --> 00:32:53.860
what Helena is showing us earlier.

00:32:53.900 --> 00:32:55.880
And here's metadata definition.

00:32:55.890 --> 00:32:58.500
And basically,
we're indicating it came from QuickTime.

00:32:58.500 --> 00:33:00.270
We've got the reverse DNS string.

00:33:00.370 --> 00:33:01.300
We've got a type.

00:33:01.300 --> 00:33:03.800
And then we actually
have the value payload.

00:33:06.110 --> 00:33:08.600
Now, of course,
XML import also has some processing

00:33:08.600 --> 00:33:10.510
that you should be aware of,
and this relates to the caching

00:33:10.510 --> 00:33:11.720
behavior we just talked about.

00:33:11.740 --> 00:33:14.560
Normally during an XML import,
Final Cut will take that

00:33:14.560 --> 00:33:16.870
XML file you give it,
we'll parse it and make sure

00:33:16.870 --> 00:33:20.370
it's syntactically okay,
we'll go through and instantiate all the

00:33:20.480 --> 00:33:22.800
Final Cut Pro objects within that file.

00:33:22.800 --> 00:33:25.720
So, you know, build your sequence and
put everything together,

00:33:25.810 --> 00:33:28.820
and then once that build is complete,
we'll actually go and reconnect

00:33:28.820 --> 00:33:30.500
all the file references within.

00:33:30.990 --> 00:33:33.320
So in that instantiation phase,
we'll create offline file

00:33:33.320 --> 00:33:35.770
references like we discussed,
and at the very end,

00:33:35.770 --> 00:33:38.240
we'll roll through and attach it
to all the media files on disk.

00:33:38.240 --> 00:33:40.910
Now, during an XML import,
you'll want to note that

00:33:40.930 --> 00:33:44.500
during that instantiate phase,
we take all those metadata elements,

00:33:44.500 --> 00:33:46.780
and we put them effectively
in the metadata cache in

00:33:46.780 --> 00:33:48.250
those offline file elements.

00:33:48.320 --> 00:33:51.710
But of course, owing to the file being
the authoritative source,

00:33:51.740 --> 00:33:55.380
when we do that reconnect phase,
anything that's defined in the XML by

00:33:55.380 --> 00:33:59.180
default is going to get deleted in
favor of what's in the media file.

00:33:59.180 --> 00:34:00.090
This means that if you want
to use the Final Cut Pro,

00:34:00.090 --> 00:34:00.920
you'll want to use the Final Cut Pro.

00:34:00.920 --> 00:34:04.040
But if you want to use XML to
actually populate metadata,

00:34:04.120 --> 00:34:06.280
you have to take some special care.

00:34:08.030 --> 00:34:09.250
Basically, and it's actually simple.

00:34:09.270 --> 00:34:11.660
Helena talked about the update
behavior commands earlier,

00:34:11.750 --> 00:34:13.820
for new clips and sequences.

00:34:13.820 --> 00:34:16.680
We support a subset of them
in the metadata elements.

00:34:16.700 --> 00:34:18.130
We basically support add and remove.

00:34:18.140 --> 00:34:21.100
The idea being if I want
to add a metadata element,

00:34:21.100 --> 00:34:23.160
I just put that update behavior in there.

00:34:23.160 --> 00:34:26.420
And during the import processing,
during that instantiate phase,

00:34:26.420 --> 00:34:29.380
what we'll do is not only will we
put those elements in the cache,

00:34:29.380 --> 00:34:32.740
but we'll actually pull off a copy of it,
so that once the reconnect

00:34:32.870 --> 00:34:34.670
phase is complete,
we'll sort of go through and

00:34:34.810 --> 00:34:36.320
process those metadata transactions.

00:34:37.220 --> 00:34:41.640
So after we process this piece,
we would actually add a new element

00:34:41.640 --> 00:34:43.310
under that key to that file.

00:34:43.320 --> 00:34:45.760
And of course, at that point,
it's in the file, it's in the cache,

00:34:45.760 --> 00:34:46.680
everything's good.

00:34:48.750 --> 00:34:52.200
So we'll pop to another demo here just to
try and illustrate a little bit of this.

00:34:52.260 --> 00:34:56.140
We've talked about caching,
talked about exposing metadata in XML,

00:34:56.200 --> 00:34:59.870
and using the commands on import
to actually modify metadata.

00:35:00.030 --> 00:35:02.330
Can we switch to the demo machine,
please?

00:35:03.900 --> 00:35:08.200
All right, so we'll go ahead and close
out of our application here.

00:35:08.200 --> 00:35:10.130
We'll come to Final Cut where
I've got an empty project.

00:35:10.230 --> 00:35:13.430
And I'll go back to my folder,
and I'm going to take one

00:35:13.430 --> 00:35:15.100
of these puppets files here.

00:35:15.180 --> 00:35:17.700
And I will drag it into Final Cut.

00:35:17.720 --> 00:35:21.930
And if I go ahead and take this now,
and actually before I do this,

00:35:21.930 --> 00:35:25.800
I'm going to just open this
up in the editor really quick.

00:35:25.900 --> 00:35:29.980
So currently, the only element in this
file is this clip ID key.

00:35:30.980 --> 00:35:36.110
So I'm going to drag this over to
Final Cut and export this to XML.

00:35:40.140 --> 00:35:41.700
Okay, so now I've got an XML file.

00:35:41.700 --> 00:35:46.370
I'll pop this thing open,
and if we search for metadata...

00:35:47.330 --> 00:35:48.990
Here's the definition that
we were just looking at.

00:35:49.010 --> 00:35:50.200
Again, that ID.

00:35:50.300 --> 00:35:53.650
Now, I want to use the update behavior
command that I just mentioned to

00:35:53.650 --> 00:35:55.020
add another element to this file.

00:35:55.150 --> 00:35:58.910
So I'll pull a little snippet out here.

00:36:01.100 --> 00:36:04.800
Actually, what I'm going to do is I'm
just going to replace this one.

00:36:04.800 --> 00:36:06.100
I'm just going to add a new key to this.

00:36:06.100 --> 00:36:08.540
So I'll save this.

00:36:08.540 --> 00:36:12.550
And actually, I'm going to do one
more thing really quick.

00:36:17.500 --> 00:36:23.900
The file will be attached to the
old clip as well as the new one,

00:36:23.900 --> 00:36:30.170
but this will just make it
a little bit easier to see.

00:36:30.170 --> 00:36:30.170
So if I double-click on this,
we'll import it.

00:36:31.830 --> 00:36:35.490
And now if we go back to Finder,
we open this up in the editor,

00:36:35.630 --> 00:36:37.300
we see we added our new ID here.

00:36:37.300 --> 00:36:40.570
And of course, at this point,
if I were to export the

00:36:40.640 --> 00:36:44.460
XML from that project,
I'd see both of those tags defined.

00:36:44.460 --> 00:36:46.800
Can we go back to slides, please?

00:36:50.150 --> 00:36:53.720
So some thoughts to
take home from metadata.

00:36:53.740 --> 00:36:56.020
Reading metadata with XML is great.

00:36:56.020 --> 00:36:56.520
It's simple.

00:36:56.520 --> 00:36:56.920
It's quick.

00:36:56.920 --> 00:37:00.300
Sort of the whole thing-- the whole
reason why we did XML in the first place.

00:37:00.440 --> 00:37:02.610
But normally,
you're probably going to want to think

00:37:02.610 --> 00:37:07.160
about adding metadata using QuickTime,
using all the APIs we discussed.

00:37:07.160 --> 00:37:10.220
Certainly, we put the interface in
XML to modify metadata.

00:37:10.230 --> 00:37:13.880
It was normally intended for power
users and development testing.

00:37:13.890 --> 00:37:16.040
It works, but if you're doing
large volumes of things,

00:37:16.040 --> 00:37:18.590
it's probably going to be more efficient
to do it yourself in your code.

00:37:18.600 --> 00:37:20.440
And at that point,
you're doing it completely

00:37:20.440 --> 00:37:22.140
separately from Final Cut,
so you don't have to have

00:37:22.140 --> 00:37:24.600
Final Cut running necessarily
if you're on a server,

00:37:24.600 --> 00:37:25.400
for example.

00:37:26.320 --> 00:37:28.530
Just sort of like our
philosophy behind XML,

00:37:28.620 --> 00:37:31.090
really your philosophy behind
metadata should be not only

00:37:31.090 --> 00:37:34.200
storing useful data as metadata,
but making it readable.

00:37:34.200 --> 00:37:36.870
Making it readable for you in the future,
for your users,

00:37:36.870 --> 00:37:38.380
and your fellow developers.

00:37:38.380 --> 00:37:41.690
Think about using strings and numbers,
discrete values instead of

00:37:41.690 --> 00:37:43.260
large blocks of binary data.

00:37:43.280 --> 00:37:45.200
Of course, if you do that,
you don't have to deal with

00:37:45.360 --> 00:37:46.580
Indian or alignment issues.

00:37:46.580 --> 00:37:49.670
And ultimately,
you make it easier for everyone.

00:37:49.680 --> 00:37:53.630
If I pull it open in a general metadata
tool like the one I just showed you,

00:37:53.630 --> 00:37:55.320
and you can actually see what it is.

00:37:57.990 --> 00:37:59.820
Labeling metadata elements
is also part of this.

00:37:59.820 --> 00:38:02.700
We talked about reverse
DNS being there and giving you

00:38:02.700 --> 00:38:04.450
a large namespace to work with.

00:38:04.560 --> 00:38:05.460
Use that.

00:38:05.460 --> 00:38:08.340
Make sure everyone knows where
your data comes from and so there

00:38:08.340 --> 00:38:09.620
really aren't any collisions.

00:38:09.730 --> 00:38:11.690
Collisions are really bad.

00:38:11.750 --> 00:38:13.660
Of course,
also want to think about scoping.

00:38:13.820 --> 00:38:16.320
In one of the files I opened for you,
you noticed they had different data

00:38:16.320 --> 00:38:17.820
on the movie and the track levels.

00:38:17.970 --> 00:38:20.940
That's because there was data on the
track which was specific to that track.

00:38:21.160 --> 00:38:22.220
Think about that with your data.

00:38:22.220 --> 00:38:24.590
If you have data that's
specific only to the video,

00:38:24.780 --> 00:38:25.940
probably want to put
it on the video track,

00:38:25.940 --> 00:38:27.880
as opposed to things that
apply to the media package as

00:38:27.890 --> 00:38:30.280
a whole putting it on the file.

00:38:32.330 --> 00:38:36.170
So now sort of the last main section
we want to talk about is some tips for

00:38:36.770 --> 00:38:39.810
what you can expect for media files
coming from Final Cut Pro and also

00:38:39.810 --> 00:38:43.620
for you to create media files that
Final Cut and the rest of the studio

00:38:43.620 --> 00:38:46.310
applications can use without any issues.

00:38:46.630 --> 00:38:49.330
Now there are a number of ways, you know,
at the macro level to get

00:38:49.340 --> 00:38:50.900
media in and out of Final Cut.

00:38:50.900 --> 00:38:52.980
You know,
sort of the baseband interfaces,

00:38:52.980 --> 00:38:55.080
you have a PCI card or
a FireWire interface,

00:38:55.080 --> 00:38:57.830
you know, doing sort of linear
captures and linear outputs.

00:38:57.910 --> 00:39:01.490
There's also a lot of file-based devices,
you know, cameras that record to

00:39:01.520 --> 00:39:04.010
hard drive or flash drives,
where it's, you know,

00:39:04.010 --> 00:39:06.840
it might be in a proprietary
wrapper or an MXF wrapper,

00:39:06.840 --> 00:39:09.850
and they'll still be sort of almost a
logging process to bring that media in,

00:39:09.850 --> 00:39:11.990
but it'll get re-wrapped
into a QuickTime container,

00:39:11.990 --> 00:39:13.980
and of course all that
metadata persisted.

00:39:14.260 --> 00:39:15.900
And then there's also file interchange.

00:39:15.900 --> 00:39:19.030
This is probably going to be the most
interesting to everyone in this room,

00:39:19.140 --> 00:39:21.340
where, you know,
effectively you're importing media

00:39:21.340 --> 00:39:24.280
files you've created into Final Cut or
doing an export operation to get

00:39:24.280 --> 00:39:27.110
a self-contained QuickTime movie
or even a reference movie out.

00:39:29.830 --> 00:39:32.320
Now for file interchange,
we've been talking a lot about

00:39:32.380 --> 00:39:35.680
QuickTime today because that's really
the primary format for our application.

00:39:35.930 --> 00:39:38.490
There are other formats
like AFF and BroadcastWave,

00:39:38.500 --> 00:39:41.960
for example, in the audio domain,
TIFF and Photoshop files for stills.

00:39:42.230 --> 00:39:44.220
But really the prime format you're
going to want to think about,

00:39:44.220 --> 00:39:46.120
especially with the richness
of metadata support,

00:39:46.120 --> 00:39:47.780
is QuickTime.

00:39:49.790 --> 00:39:51.820
And of course, you know,
it's a generic container,

00:39:51.900 --> 00:39:54.160
basically audio, video, all of that.

00:39:54.160 --> 00:39:57.840
We support numerous formats in it,
you know, everything from, you know,

00:39:57.930 --> 00:40:00.000
DV or JPEG on up to uncompressed HD.

00:40:00.000 --> 00:40:02.800
And of course, for you,
you've got the whole QuickTime API there

00:40:02.800 --> 00:40:05.620
to help you create those files,
so you don't have to build a whole,

00:40:05.690 --> 00:40:08.540
you know, file read-write runtime
to get that QuickTime.

00:40:08.540 --> 00:40:10.010
Everything's there on the platform.

00:40:12.600 --> 00:41:08.400
[Transcript missing]

00:41:09.910 --> 00:41:11.740
Same thing goes for codecs.

00:41:11.740 --> 00:41:14.500
You can do a lot of things with
different codecs in Final Cut Pro.

00:41:14.510 --> 00:41:17.180
It really only supports
a particular subset.

00:41:17.200 --> 00:41:19.650
And that's based on what's
relevant to the video industry,

00:41:19.660 --> 00:41:22.700
what has predictable performance,
and really what our customers

00:41:22.770 --> 00:41:23.680
have been asking for.

00:41:23.680 --> 00:41:26.490
So you want to make sure that
any codecs you're working to put

00:41:26.490 --> 00:41:28.600
media in are actually supported.

00:41:28.600 --> 00:41:31.810
Another note here is that we
really don't support compressed

00:41:31.810 --> 00:41:33.400
audio at this point in time.

00:41:33.400 --> 00:41:36.690
Again, it comes back to squeezing the
most real-time playback performance

00:41:36.690 --> 00:41:39.090
out of the machine and having
predictable characteristics in

00:41:39.090 --> 00:41:41.690
terms of what we can pull and when.

00:41:41.790 --> 00:41:43.420
Another interesting
bit is timecode tracks.

00:41:43.470 --> 00:41:46.280
Timecode tracks are
actually really powerful.

00:41:46.300 --> 00:41:48.370
Traditionally,
they were used to index video on

00:41:48.370 --> 00:41:50.320
the computer back to a videotape.

00:41:50.420 --> 00:41:53.540
But even if your media has
never touched videotape,

00:41:53.540 --> 00:41:57.730
maybe it was recorded to flash,
it's still really handy because it gives

00:41:57.820 --> 00:42:00.110
us a fixed time scale to refer to things.

00:42:00.250 --> 00:42:02.060
So maybe if I have an
hour-long QuickTime movie,

00:42:02.060 --> 00:42:05.350
I can put a timecode track in it
indicating sort of a start of timecode,

00:42:05.540 --> 00:42:07.130
maybe at two hours, let's say.

00:42:07.300 --> 00:42:10.020
If at some point I decide that I need
to clip some of that media out,

00:42:10.060 --> 00:42:13.610
maybe I'm reducing my project down,
that timecode track gives Final Cut a

00:42:13.610 --> 00:42:17.260
reference to figure out how to offset
and correlate things when you attach

00:42:17.260 --> 00:42:19.460
those smaller files to your project.

00:42:21.180 --> 00:42:23.810
Now we've talked about a number
of technologies today and want

00:42:23.810 --> 00:42:26.870
to actually do another demo to
sort of tie them all together.

00:42:27.110 --> 00:42:30.740
And this is based on somewhat
real workflow example,

00:42:30.740 --> 00:42:33.890
things not only from the production
realm but all the way to broadcast,

00:42:33.970 --> 00:42:38.350
where maybe I have a project where
I have media coming in and I've

00:42:38.440 --> 00:42:40.930
got my show more or less done,
or maybe I just have something

00:42:41.090 --> 00:42:42.040
built with placeholders.

00:42:42.110 --> 00:42:44.170
And as those files come in,
I really want them to just

00:42:44.170 --> 00:42:46.900
automatically be added,
so I don't have to have someone sitting

00:42:46.920 --> 00:42:48.630
there watching a folder manually.

00:42:48.820 --> 00:42:51.380
This application, again,
like the other tool I showed you,

00:42:51.380 --> 00:42:54.600
the source code is up on the website,
linked to this session,

00:42:54.640 --> 00:42:57.260
and it uses a lot of technology
we talked about today.

00:42:57.300 --> 00:43:00.510
We use Apple Events to basically
programmatically drive Final Cut.

00:43:00.610 --> 00:43:03.420
We use XML to push and pull
data in and out of Final Cut.

00:43:03.490 --> 00:43:06.000
And we actually leverage
QuickTime metadata to identify

00:43:06.000 --> 00:43:09.790
what we're going to do with
particular pieces of media.

00:43:09.910 --> 00:43:12.420
Can we switch this demo machine, please?

00:43:14.680 --> 00:43:17.330
OK, so we've got Final Cut running
in the background here.

00:43:17.330 --> 00:43:20.800
And I'm going to run my little
movie assembler application.

00:43:22.680 --> 00:43:25.770
And what I'm going to do
is in Movie Assembler,

00:43:25.770 --> 00:43:27.680
you want to note,
I'm actually going to open up a project.

00:43:27.740 --> 00:43:29.200
This is a Final Cut Pro project here.

00:43:29.200 --> 00:43:31.950
And as I open it up,
you'll notice that Final Cut went

00:43:32.100 --> 00:43:34.080
and opened up this project as well.

00:43:34.100 --> 00:43:36.700
And if I look in the UI here,
it's pretty simple.

00:43:36.700 --> 00:43:41.180
I've got, actually what it did is it told
Final Cut to open up the project,

00:43:41.180 --> 00:43:44.640
it asked for an XML file of the project,
and then it parsed it.

00:43:44.740 --> 00:43:46.520
It figured out a couple
of things from that.

00:43:46.560 --> 00:43:49.180
It figured out the sequences in there,
since the way this tool works,

00:43:49.180 --> 00:43:51.160
it's going to point at
a particular sequence.

00:43:51.700 --> 00:43:53.920
It inferred a folder where
all the media was living.

00:43:53.920 --> 00:43:57.090
It also inferred a default watch folder,
basically a place to watch

00:43:57.140 --> 00:43:58.340
for new files to show up in.

00:43:58.360 --> 00:44:00.280
And I've also got a little log here.

00:44:00.280 --> 00:44:02.800
So now what I'm going to do,
since I see that Final Cut is

00:44:02.800 --> 00:44:05.740
open in the background,
is I want to actually process

00:44:05.740 --> 00:44:08.060
sort of one of these events,
right?

00:44:08.060 --> 00:44:09.410
I want to basically have media come in.

00:44:09.430 --> 00:44:12.580
Now, if I pop over to my sequence here,
this is just a little, you know,

00:44:12.590 --> 00:44:13.900
silly little short film.

00:44:13.900 --> 00:44:16.730
And it's pretty good,
but the shot sort of highlighted

00:44:16.870 --> 00:44:18.140
in red here is wrong.

00:44:18.140 --> 00:44:21.200
You know, I've got, let's see,
I've got my hero.

00:44:21.340 --> 00:44:22.220
He comes into the office.

00:44:22.220 --> 00:44:23.160
He's not very happy.

00:44:23.160 --> 00:44:26.460
He sits at his desk, and then, well,
wait, he's walking again.

00:44:26.460 --> 00:44:27.970
That's kind of not right.

00:44:28.120 --> 00:44:29.740
So obviously that shot's wrong.

00:44:29.740 --> 00:44:32.160
Obviously I got the wrong shot
from effects or color correction.

00:44:32.160 --> 00:44:34.310
So I've already told him
I want a new file to come in,

00:44:34.310 --> 00:44:36.960
but that's basically the fix
that I'm going to have happen.

00:44:36.980 --> 00:44:38.660
So I'll come over here
to Movie Assembler,

00:44:38.660 --> 00:44:41.350
and I'm just going to have it
start monitoring my watch folder.

00:44:41.360 --> 00:44:42.480
You'll see in the log there.

00:44:42.480 --> 00:44:46.490
And if I come back over
here to my folder...

00:44:50.050 --> 00:44:51.140
The file didn't go back there.

00:44:51.210 --> 00:44:52.240
All right, we'll fix that.

00:44:52.240 --> 00:44:53.380
So here's our watch folder.

00:44:53.410 --> 00:44:54.140
Here's our media folder.

00:44:54.140 --> 00:44:56.550
And here's a new file that's
actually going to come in and

00:44:56.550 --> 00:44:57.880
be processed by this tool.

00:44:57.880 --> 00:44:59.790
Now, we actually opened this
file a few minutes ago,

00:44:59.790 --> 00:45:02.570
and you noticed that there was actually
a piece of metadata with an ID in it.

00:45:02.640 --> 00:45:06.440
That ID is what we're going to use
to figure out where it needs to go.

00:45:06.440 --> 00:45:10.110
So if I drop this into my incoming
folder after just a second here,

00:45:10.110 --> 00:45:12.450
you'll notice that Final Cut twiddles.

00:45:12.450 --> 00:45:15.720
And if we come back to our log here,
it says it moved puppets

00:45:15.720 --> 00:45:17.130
into our media folder.

00:45:17.170 --> 00:45:20.000
So now if I come back
and open up my timeline,

00:45:20.930 --> 00:45:23.280
And zoom out a little bit.

00:45:23.300 --> 00:45:27.550
I'll see that I actually have--

00:45:28.000 --> 00:45:31.090
The correct shot here,
our hero getting lots and lots of work,

00:45:31.220 --> 00:45:32.300
lots of bugs to fix.

00:45:32.350 --> 00:45:33.320
Okay.

00:45:33.320 --> 00:45:35.160
And that's basically it.

00:45:35.320 --> 00:45:38.200
Let's go back to slides, please.

00:45:42.130 --> 00:45:44.500
Again, the sample code for all
that is up on the website.

00:45:44.520 --> 00:45:46.500
There are a number of other
tools up there as well,

00:45:46.500 --> 00:45:48.970
and we really hope that
helps you guys out.

00:45:49.030 --> 00:45:52.500
It's really powerful stuff,
and the APIs can be a little interesting,

00:45:52.500 --> 00:45:55.500
but it's pretty quick
to get the hang of it.

00:45:57.180 --> 00:46:01.190
Now last year, about this time, well,
probably five minutes from now, honestly,

00:46:01.200 --> 00:46:04.790
in Q&A, we got a number of questions
about a product we just announced.

00:46:04.850 --> 00:46:07.590
This is a product
called Final Cut Server.

00:46:08.440 --> 00:46:11.620
And for those of you who weren't
here last year or weren't at

00:46:11.620 --> 00:46:15.350
NAB this year or last year,
you might ask yourself, what is it?

00:46:15.520 --> 00:46:19.910
Well, it's a tool for workflow management
and also asset management

00:46:19.920 --> 00:46:21.900
for Final Cut Studio users.

00:46:22.040 --> 00:46:25.350
And basically,
it allows people to live as a work group,

00:46:25.350 --> 00:46:27.920
share media,
have things almost like what we

00:46:28.030 --> 00:46:31.300
talked about in Final Cut here happen
when media arrives in the system.

00:46:31.510 --> 00:46:34.860
And of course,
now it's actually shipping as opposed

00:46:34.940 --> 00:46:37.730
to last year when it had been announced.

00:46:38.410 --> 00:46:42.080
Now what's interesting for you is that,
just like Final Cut,

00:46:42.080 --> 00:46:43.650
this is actually a customizable tool.

00:46:43.700 --> 00:46:47.500
This was intended to help tie workflows
together as well as enable them.

00:46:47.500 --> 00:46:49.380
So it's very configurable.

00:46:49.480 --> 00:46:52.390
It actually uses XML for
pushing and pulling data.

00:46:52.480 --> 00:46:55.480
It actually makes very extensive
use of the metadata technology

00:46:55.570 --> 00:46:56.990
we've been talking about here.

00:46:57.060 --> 00:47:01.000
So you can populate media files,
metadata, and as they pull into server,

00:47:01.000 --> 00:47:03.680
it'll go ahead and set up definitions
for them and you can see them.

00:47:03.710 --> 00:47:07.500
You can also do things with defining
custom behaviors for that metadata.

00:47:07.500 --> 00:47:10.300
Now we're not going to go
into much more detail here.

00:47:10.300 --> 00:47:12.500
I wanted to mention it just
because it came up last year.

00:47:12.500 --> 00:47:15.790
There's actually a session
coming up at 10:30.

00:47:15.800 --> 00:47:18.360
We'll give you more information on that.

00:47:21.710 --> 00:47:26.660
Okay, so to wrap up,
think about using all the tools we've

00:47:26.820 --> 00:47:29.900
put together for you to not only tie
your applications with Final Cut,

00:47:29.900 --> 00:47:33.490
but sort of tie all sorts of things into
workflow experiences for your customers.

00:47:33.500 --> 00:47:37.780
XML, you know, it's not just a simple
import and export tool.

00:47:37.780 --> 00:47:40.060
It's a manipulation tool,
depending on what you want to do.

00:47:40.060 --> 00:47:43.420
And you can really use some
nice capabilities of XML along

00:47:43.420 --> 00:47:47.180
with Apple Events to make things
really clean for your users.

00:47:47.440 --> 00:47:50.200
You know, don't require them to do
manual imports and exports.

00:47:50.200 --> 00:47:52.020
Just have your tool do the right thing.

00:47:52.040 --> 00:47:53.960
And think about using metadata.

00:47:53.960 --> 00:47:56.410
Think about putting
interesting breadcrumbs there,

00:47:56.410 --> 00:47:58.520
not only for you, but for everyone else.

00:48:01.480 --> 00:48:05.400
So Alan is unfortunately not here
today due to a family commitment.

00:48:05.470 --> 00:48:08.370
But if you have questions,
you can certainly ping

00:48:08.370 --> 00:48:09.800
him as well as one of us.

00:48:10.010 --> 00:48:12.750
If he's not the right person,
he'll vector you the

00:48:12.760 --> 00:48:13.830
right person as well.

00:48:13.920 --> 00:48:18.560
We have all the documentation and
sample code up on the developer website.

00:48:18.610 --> 00:48:20.740
Again,
a lot of this is linked to this session,

00:48:20.740 --> 00:48:22.950
but even if you just go to
the normal developer website,

00:48:22.980 --> 00:48:24.950
you'll see all of it there.

00:48:26.270 --> 00:48:28.720
Other sessions,
actually there are two sessions coming

00:48:28.720 --> 00:48:30.490
up next which you may find interesting.

00:48:30.600 --> 00:48:32.250
In this room,
we're going to have a team up

00:48:32.300 --> 00:48:34.980
here talking about the effects
plug API for Final Cut Studio.

00:48:35.100 --> 00:48:38.240
And over in Russian Hill,
we're actually going to have a

00:48:38.240 --> 00:48:41.080
session on all of the integration
technologies for Final Cut Server.

00:48:41.100 --> 00:48:43.820
So again, the XML and the metadata.

00:48:44.290 --> 00:48:45.800
We also have labs this afternoon.

00:48:45.860 --> 00:48:48.940
If you have questions that
don't get covered during Q&A,

00:48:49.030 --> 00:48:49.690
come on down.

00:48:49.790 --> 00:48:52.180
We'll be there from 2:00
to sometime around 4:30,

00:48:52.180 --> 00:48:55.710
I believe,
both for Server and Final Cut Pro.