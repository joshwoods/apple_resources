WEBVTT

00:00:20.500 --> 00:00:21.590
My name is Eric St.

00:00:21.590 --> 00:00:23.700
Onge, and today I'm going to be
guiding you through this session.

00:00:23.700 --> 00:00:25.060
I'm an engineer on the iChat team.

00:00:26.990 --> 00:00:28.790
So let's go through the agenda today.

00:00:28.790 --> 00:00:31.880
First, we're going to start off with
a very high-level overview

00:00:31.880 --> 00:00:33.200
to what iChat Theater is.

00:00:33.400 --> 00:00:36.900
Then we're going to talk about supporting
iChat Theater in your own application.

00:00:37.090 --> 00:00:42.020
And we'll go through the
architecture of iChat Theater,

00:00:42.020 --> 00:00:47.760
supporting iChat Theater via Quick Look,
and then actually using a

00:00:47.760 --> 00:00:47.760
lower-level iChat Theater API.

00:00:47.760 --> 00:00:47.760
And at the end, we'll have time for
questions and answers.

00:00:48.880 --> 00:00:53.110
So let's start off with a simple
question of what is iChat Theater?

00:00:53.250 --> 00:00:56.280
So simply put,
iChat Theater is-- say you start

00:00:56.440 --> 00:01:00.300
off with a video conference with
me and my friend Peter here.

00:01:00.300 --> 00:01:03.710
And let's say you have a
second application that's,

00:01:03.830 --> 00:01:05.590
say, showing a slide show.

00:01:05.660 --> 00:01:09.590
iChat Theater lets you take the
content of that slide show and

00:01:09.720 --> 00:01:11.760
add it to the video conference.

00:01:11.760 --> 00:01:14.780
So Peter and I could both
be looking at the slide show

00:01:14.780 --> 00:01:14.780
of a zebra at the same time,
just using iChat.

00:01:15.340 --> 00:01:20.260
Let's also take a moment to talk
about what iChat Theater is not.

00:01:20.260 --> 00:01:25.520
First,
iChat Theater is not screen sharing.

00:01:25.680 --> 00:01:32.920
Screen sharing is a feature of iChat,
and it allows for full VNC or remote

00:01:32.920 --> 00:01:32.920
desktop access to another iChat user.

00:01:32.920 --> 00:01:32.920
But iChat Theater is different.

00:01:32.920 --> 00:01:32.920
It's for broadcast only.

00:01:34.560 --> 00:01:38.600
iChat Theater is also not video
chat in your own application.

00:01:38.600 --> 00:01:41.730
So this is not, for instance, you know,
just a video chat view that

00:01:41.730 --> 00:01:44.500
you can instantiate in your
calculator application.

00:01:44.500 --> 00:01:46.000
That's not what iChat Theater is.

00:01:46.000 --> 00:01:49.410
Again, it's just broadcasting via iChat.

00:01:50.480 --> 00:01:52.940
So there are many things you
can use iChat Theater for,

00:01:53.180 --> 00:01:55.710
for instance, still images, video,
or presentations.

00:01:55.820 --> 00:01:58.490
But let's take a look at actually
some of the clients out there that

00:01:58.510 --> 00:02:00.510
are actually supporting iChat Theater.

00:02:01.360 --> 00:02:03.160
The first of which is iPhoto.

00:02:03.200 --> 00:02:05.640
And this is actually
built directly into iChat.

00:02:05.690 --> 00:02:08.630
Under the File menu,
if you choose Share iPhoto

00:02:08.630 --> 00:02:11.810
with iChat Theater,
you'll get a browser that will

00:02:11.920 --> 00:02:15.570
show you all the photo albums
that you have set up in iPhoto.

00:02:15.630 --> 00:02:18.310
And from that browser,
you can just pick an

00:02:18.680 --> 00:02:19.940
album and choose Share.

00:02:19.940 --> 00:02:24.260
And then you can actually just
share that album over iChat Theater.

00:02:24.260 --> 00:02:27.880
And it has a little controller on
the bottom for some extra controls

00:02:27.880 --> 00:02:27.880
for moving through the slideshow.

00:02:28.890 --> 00:02:31.800
Keynote also provides full
support for iChat Theater.

00:02:31.800 --> 00:02:35.430
So all the transitions and all the
effects that you can do in Keynote,

00:02:35.450 --> 00:02:38.910
you can actually show those over
iChat through iChat Theater.

00:02:39.330 --> 00:02:41.220
But there are third-party apps as well.

00:02:41.440 --> 00:02:44.540
For those of you who saw Bertrand's
Mac OS X State of the Union,

00:02:44.550 --> 00:02:48.860
he talked about 64-bit and Osiris,
which is a powerful medical

00:02:48.870 --> 00:02:50.570
imaging application.

00:02:50.590 --> 00:02:58.510
And Osiris actually also includes
support for iChat Theater.

00:02:58.510 --> 00:02:58.880
So look how happy they
are to use iChat Theater.

00:02:58.880 --> 00:02:58.880
So your users can be this happy too.

00:03:00.040 --> 00:03:02.260
Another application is
Boinks Photo Magico.

00:03:02.480 --> 00:03:06.670
This is a photo slideshow application
that's a little more powerful than

00:03:06.670 --> 00:03:10.900
iPhoto that gives you better effects
and different things you can do.

00:03:11.280 --> 00:03:15.740
CEI Insight is an engineering
visualization application.

00:03:15.770 --> 00:03:22.200
This also supports iChat
Theater so that you can show

00:03:22.200 --> 00:03:22.200
visualizations over iChat Theater.

00:03:22.460 --> 00:03:25.740
And a company called Equinox
creates a product called the Tube,

00:03:25.880 --> 00:03:28.380
which allows you to place shift TV.

00:03:28.400 --> 00:03:33.900
So you can watch live TV or recorded
TV over iChat Theater with a friend.

00:03:34.090 --> 00:03:36.040
And hopefully,
by the end of this session,

00:03:36.040 --> 00:03:38.200
your app will support iChat Theater, too.

00:03:40.010 --> 00:03:42.980
So let's take a moment to talk
about how you start iChat Theater.

00:03:42.980 --> 00:03:46.540
The key point is to keep in mind
that iChat Theater is always

00:03:46.540 --> 00:03:48.600
user-initiated from iChat.

00:03:48.630 --> 00:03:51.350
You have to do this
through a variety of ways.

00:03:51.350 --> 00:03:53.180
We'll go through in a second.

00:03:53.190 --> 00:03:55.780
But the easiest way is
to go to the File menu,

00:03:55.890 --> 00:03:57.760
Share File with iChat Theater.

00:03:57.760 --> 00:04:01.430
And then you can pick a document
or an application that you want

00:04:01.430 --> 00:04:03.260
to share with iChat Theater.

00:04:03.320 --> 00:04:06.470
You can also drag and drop
directly onto a video chat.

00:04:06.490 --> 00:04:07.030
So let me take a moment to
show you how that works.

00:04:11.450 --> 00:04:17.090
As you can see here,
I just have iChat running,

00:04:17.090 --> 00:04:17.090
and I'm going to start a video
chat with my friend Peter.

00:04:19.720 --> 00:04:21.700
Hi, Peter.

00:04:21.700 --> 00:04:28.100
So let's say that I have some photos
from a recent trip I took to Africa.

00:04:28.130 --> 00:04:30.800
What I can do in iChat is
I can go to the File menu,

00:04:30.890 --> 00:04:34.090
and I can go Share a
File with iChat Theater.

00:04:34.970 --> 00:04:38.690
And then I have those on my desktop,
so I'll just navigate to it.

00:04:38.690 --> 00:04:41.600
And I'll pick a few of
those that I want to share.

00:04:41.800 --> 00:04:47.280
And as you can see,
it shows up just directly

00:04:47.280 --> 00:04:49.590
in the video chat.

00:04:49.860 --> 00:04:50.730
It expands,
and there's a second video stream

00:04:50.730 --> 00:04:50.730
with my friend's camera video and
the photo that we're looking at.

00:04:51.270 --> 00:04:53.870
But I can also, you know,
directly drag and drop from the

00:04:53.910 --> 00:04:55.190
Finder if I want to do that.

00:04:55.200 --> 00:04:57.590
So I'll just take these
and drag and drop that way.

00:04:57.860 --> 00:05:01.050
And as you can see,
it's just continuing to play a slideshow.

00:05:02.160 --> 00:05:04.900
But there are other kinds of
media that are supported as well.

00:05:04.930 --> 00:05:06.830
So let's say I wanted to share a movie.

00:05:06.920 --> 00:05:10.890
I can just take this video
and just drag and drop.

00:05:11.630 --> 00:05:13.390
Hello.

00:05:13.660 --> 00:05:16.220
And you can see it just immediately
starts playing in iChat Theater,

00:05:16.220 --> 00:05:18.510
just seamlessly.

00:05:19.900 --> 00:05:24.660
So I also mentioned Keynote earlier.

00:05:25.150 --> 00:05:30.950
So this machine actually does not
support Keynote fully for some reason.

00:05:31.270 --> 00:05:36.060
But normally what would happen
is if we were broadcasting over

00:05:36.160 --> 00:05:41.530
iChat Theater using Keynote,
again, you would see the full builds and

00:05:41.530 --> 00:05:42.680
transitions that you would expect
to see in a Keynote presentation.

00:05:42.680 --> 00:05:42.680
So we can go back to the slides.

00:05:47.400 --> 00:05:48.300
Slides, please.

00:05:48.300 --> 00:05:54.780
OK, so that's iChat Theater.

00:05:55.630 --> 00:05:59.260
Now let's talk about
supporting iChat Theater.

00:05:59.310 --> 00:06:03.030
And first, we'll start off talking
about the architecture.

00:06:03.030 --> 00:06:06.520
So we saw this diagram a moment
ago where there's just a zebra

00:06:06.610 --> 00:06:10.350
that's flying through an orange
bar in the video conference.

00:06:10.350 --> 00:06:14.830
Let's just go through and kind of fill in
some of the gaps as to what is actually

00:06:15.040 --> 00:06:17.510
happening technically behind the scenes.

00:06:17.690 --> 00:06:19.430
So first of all,
we're actually talking about frames

00:06:19.430 --> 00:06:19.430
that are moving from an application
to iChat to iChat on the other side.

00:06:19.870 --> 00:06:22.520
So the important piece of information
that you need to notice from

00:06:22.520 --> 00:06:26.470
this diagram is that iChat to
iChat is going over the network.

00:06:26.640 --> 00:06:34.240
And iChat is packaging
up that frame for you.

00:06:34.240 --> 00:06:34.580
So all you need to kind of look
at is an application that is

00:06:34.580 --> 00:06:34.580
providing video content to iChat.

00:06:34.980 --> 00:06:37.360
The other important piece of information
here is that your application

00:06:37.360 --> 00:06:38.960
only exists on one side of this.

00:06:38.960 --> 00:06:42.620
So your application only needs to
exist on the sending side of the video.

00:06:42.680 --> 00:06:45.970
The other side just needs to
have iChat to show the video.

00:06:46.670 --> 00:06:48.870
So when we talk about
supporting iChat Theater,

00:06:48.900 --> 00:06:51.990
primarily we're talking about
the part in your application

00:06:51.990 --> 00:06:54.080
that is sending frames to iChat.

00:06:55.410 --> 00:07:00.040
And let's look at one way that we
can support iChat via Quick Look.

00:07:00.130 --> 00:07:02.620
So here's the architecture
diagram again for reference.

00:07:02.770 --> 00:07:05.220
But Leopard introduced a new
feature called Quick Look,

00:07:05.250 --> 00:07:08.300
which allows fast previews
and thumbnails for documents.

00:07:08.340 --> 00:07:11.540
And Quick Look is responsible
for providing thumbnails

00:07:11.610 --> 00:07:14.090
and those images for Finder.

00:07:14.460 --> 00:07:16.820
So Finder can display these in
a Quick Look panel and it will

00:07:16.820 --> 00:07:19.620
also use it for Icon Thumbnails.

00:07:19.650 --> 00:07:21.180
And this is a plugin that you can build.

00:07:21.180 --> 00:07:22.920
That API is currently available.

00:07:22.990 --> 00:07:24.770
But if you have one of these,
this actually already

00:07:24.770 --> 00:07:26.100
supports iChat Theater.

00:07:26.390 --> 00:07:29.470
So iChat is able to use
Quick Look bundles and Quick Look plugins

00:07:29.470 --> 00:07:33.440
to actually provide that
content directly over iChat Theater.

00:07:35.340 --> 00:07:38.240
So as far as the details of it,
if you already have a Quick Look plugin,

00:07:38.240 --> 00:07:40.550
or if you plan to build one,
there's no extra work that

00:07:40.550 --> 00:07:43.370
you need to do to get iChat
Theater working with that plugin.

00:07:43.420 --> 00:07:49.760
It should just work right out of the box.

00:07:49.760 --> 00:07:49.760
But there are a few limitations
that you should keep in mind

00:07:49.760 --> 00:07:49.760
if you choose to do that.

00:07:50.200 --> 00:07:54.380
The first of which is that
Quick Look is always document-based.

00:07:54.440 --> 00:07:56.850
If you build an application that
hides documents from the users,

00:07:56.870 --> 00:08:00.390
maybe something like iPhoto or iTunes,
where there's just a source and all

00:08:00.500 --> 00:08:05.040
the files are hidden behind the scenes,
Quick Look might not be for you.

00:08:05.120 --> 00:08:09.990
It's also worth pointing out that
Quick Look limits the interactivity.

00:08:10.090 --> 00:08:12.780
So it's read-only,
and it's really only very simple

00:08:12.780 --> 00:08:15.760
controls like fast-forward,
rewind, play/pause,

00:08:15.760 --> 00:08:17.620
just very basic controls.

00:08:17.720 --> 00:08:20.060
So if you need more
advanced controls than that,

00:08:20.170 --> 00:08:22.350
you'll probably want to look elsewhere.

00:08:23.260 --> 00:08:29.050
It's also worth pointing out
that the fidelity is limited.

00:08:29.050 --> 00:08:36.140
So what this means is that-- I talked
about Keynote a moment ago with all the

00:08:36.140 --> 00:08:39.580
builds and presentations and effects.

00:08:39.580 --> 00:08:39.580
Applications that don't have
Keynote installed will actually

00:08:39.580 --> 00:08:39.580
just use a Quick Look plug-in to
render that Keynote presentation.

00:08:39.780 --> 00:08:43.400
But that presentation isn't
going to have those effects.

00:08:43.430 --> 00:08:47.200
It's just going to be just a
flat view of that presentation.

00:08:47.290 --> 00:08:54.190
So Quick Look is a very powerful tool,
and I would encourage you to build it

00:08:54.290 --> 00:08:57.780
in to your application's documents.

00:08:57.880 --> 00:08:59.600
You should look at session 513,
System-wide Previews with Quick Look,

00:08:59.600 --> 00:08:59.600
for more information
on how to build that.

00:09:00.280 --> 00:09:01.190
So that's Quick Look.

00:09:01.200 --> 00:09:02.890
And I talked about the limitations.

00:09:02.960 --> 00:09:06.360
If you want to move past those
limitations for more control,

00:09:06.360 --> 00:09:07.520
there's an API for you.

00:09:07.580 --> 00:09:09.730
So let's talk about that.

00:09:11.330 --> 00:09:12.710
And we'll go into this in some depth.

00:09:12.850 --> 00:09:15.700
So first we'll talk about what
you need to do before you begin.

00:09:15.740 --> 00:09:18.100
We'll talk about session state,
which is how the system

00:09:18.100 --> 00:09:19.200
is actually working.

00:09:19.200 --> 00:09:21.920
Then we'll talk about
providing video and audio.

00:09:21.920 --> 00:09:24.510
And then we'll talk
about playback controls.

00:09:25.390 --> 00:09:26.950
So first,
let's go back to the architecture

00:09:26.990 --> 00:09:30.410
diagram to see how the
API actually fits into this.

00:09:30.690 --> 00:09:38.240
So first, let's take a closer
look at the application.

00:09:38.530 --> 00:09:44.670
So your application actually
has a two-way channel of

00:09:44.670 --> 00:09:44.670
communication with iChat.

00:09:44.670 --> 00:09:44.670
And iChat is actually talking to a
data source within your application.

00:09:45.750 --> 00:09:48.410
But that data source is not
actually talking directly to iChat.

00:09:48.410 --> 00:09:52.290
It's talking to iChat via the
instant message framework.

00:09:52.490 --> 00:09:55.540
So if we are actually talking
about supporting iChat Theater,

00:09:55.540 --> 00:09:59.210
to get a little more specific,
all you need to do is build a data

00:09:59.210 --> 00:10:03.120
source in your application and
use the instant message framework

00:10:03.130 --> 00:10:05.070
to provide frames to iChat.

00:10:06.580 --> 00:10:09.500
So let's talk about what you need to
do before you begin actually supporting

00:10:09.500 --> 00:10:12.000
iChat Theater in your application.

00:10:12.670 --> 00:10:15.180
So the first thing you have to do is
you have to tell the operating system

00:10:15.460 --> 00:10:17.240
that your app supports iChat Theater.

00:10:17.310 --> 00:10:22.000
And the way you do this is by adding a
key to your application's Info.plist.

00:10:22.280 --> 00:10:26.190
If your application doesn't really
support the concept of a document,

00:10:26.190 --> 00:10:33.480
so if your application is just
capable of providing video,

00:10:33.480 --> 00:10:36.720
you'll want to add this key directly
to the top level of your info.p list.

00:10:36.720 --> 00:10:36.720
And this is ls can provide
imvideo data source,

00:10:36.720 --> 00:10:36.720
and set the value to true.

00:10:38.130 --> 00:10:43.680
If your application supports previews
for certain specific document types,

00:10:43.710 --> 00:10:48.620
you'll just add that same key to
the bundle document type definition.

00:10:50.110 --> 00:10:52.900
So that's what you need
to do before you begin.

00:10:52.920 --> 00:10:55.180
Next, let's look at session state.

00:10:57.130 --> 00:10:59.070
So I talked about how
iChat Theater uses the

00:10:59.070 --> 00:11:01.260
Instant Message Framework a moment ago.

00:11:01.260 --> 00:11:04.500
The class that it actually uses
in the Instant Message Framework

00:11:04.500 --> 00:11:05.860
is called IMAV Manager.

00:11:05.890 --> 00:11:11.550
And to get access to that,
you'll want to import the

00:11:11.870 --> 00:11:16.550
Instant Message Framework
and the IMAV Manager header.

00:11:16.550 --> 00:11:16.550
And then to get the IMAV Manager,
it's just a shared

00:11:16.550 --> 00:11:16.550
instance of IMAV Manager.

00:11:17.020 --> 00:11:19.100
That AV Manager has a state built in.

00:11:19.140 --> 00:11:21.510
So to get that state,
you would just call AV Manager state

00:11:21.720 --> 00:11:24.560
on the shared instance.

00:11:24.750 --> 00:11:27.380
And the state will change
as iChat Theater prepares

00:11:27.830 --> 00:11:29.650
to show your application.

00:11:29.660 --> 00:11:32.020
This is actually a critical step,
because if you don't register for

00:11:32.020 --> 00:11:35.100
these state change notifications,
the state will never change.

00:11:35.100 --> 00:11:38.040
iChat Theater uses this registration
to actually handle the registration

00:11:38.070 --> 00:11:39.440
for your application in iChat.

00:11:39.680 --> 00:11:43.040
So you have to do this to
actually support iChat Theater.

00:11:43.490 --> 00:11:45.850
And the way you register for
those state changes is you use the

00:11:45.870 --> 00:11:47.560
IAM Service Notification Center.

00:11:47.710 --> 00:11:50.550
If any of you saw the
Instant Message Framework presentation,

00:11:50.650 --> 00:11:54.170
this is actually the same notification
center you would use for that.

00:11:54.290 --> 00:11:59.710
And then you'll just add an observer
for the IAM AV Manager State Changed

00:11:59.710 --> 00:11:59.710
Notification.

00:12:00.890 --> 00:12:03.240
But let's talk about
those states a little bit.

00:12:03.320 --> 00:12:06.260
So there are six states that
iChat Theater will go through,

00:12:06.260 --> 00:12:10.010
or the AV Manager will go through,
that you might need to know about.

00:12:11.090 --> 00:12:13.900
The first of which is IMAV inactive.

00:12:13.980 --> 00:12:15.420
And this is an idle state.

00:12:15.470 --> 00:12:19.000
This means that iChat Theater is
not actually doing anything.

00:12:19.220 --> 00:12:23.540
It's basically waiting for the user
to initiate iChat Theater from iChat.

00:12:25.590 --> 00:12:32.470
At some point in the future,
when the user actually

00:12:32.470 --> 00:12:32.470
initiates iChat Theater,
the state will move to IMAV requested.

00:12:33.520 --> 00:12:39.410
So at this point,
if your application supports documents,

00:12:40.130 --> 00:12:47.610
The URL to share accessor on the
AV Manager will be able to tell you the

00:12:47.610 --> 00:12:47.610
document that the user asked to share.

00:12:47.780 --> 00:12:50.190
And when you've loaded that document,
you're done what you need to do to

00:12:50.210 --> 00:12:54.990
start the iChat Theater session,
you just call it AV Manager Start.

00:12:56.680 --> 00:12:59.260
When you call start,
iChat Theater will move

00:12:59.320 --> 00:13:02.040
to IM AV starting up,
which means that the session

00:13:02.040 --> 00:13:03.340
is being initialized.

00:13:03.400 --> 00:13:07.640
This usually happens very quickly,
often in less than a few seconds.

00:13:07.760 --> 00:13:13.130
So after starting up,
the state will move to IM AV pending.

00:13:13.190 --> 00:13:16.260
And pending can mean two things.

00:13:16.260 --> 00:13:20.400
It can mean that the iChat
Theater session is being

00:13:20.400 --> 00:13:20.400
negotiated and that a video
conference is already running.

00:13:20.770 --> 00:13:22.680
Or it could mean that there
is actually no video chat,

00:13:22.680 --> 00:13:24.310
or a video chat has yet to connect.

00:13:24.400 --> 00:13:26.830
So there are a couple states,
and depending on the

00:13:26.920 --> 00:13:30.290
state that you're in,
it might take a different amount of time.

00:13:30.800 --> 00:13:33.620
But the key point is that at this point,
while it's pending,

00:13:33.620 --> 00:13:39.000
no video frames are yet being requested,
but they will be shortly.

00:13:39.050 --> 00:13:41.790
And at that point,
when you need to provide video frames,

00:13:41.790 --> 00:13:43.700
the state will move to IMAV running.

00:13:43.730 --> 00:13:49.850
And as it says, iChat Theater is running.

00:13:49.850 --> 00:13:51.790
At this point, as I said,
your app should provide

00:13:51.790 --> 00:13:51.790
audio and video to iChat.

00:13:53.510 --> 00:13:55.890
Finally, at the end,
the state will move to

00:13:56.110 --> 00:13:58.000
I am AV shutting down.

00:13:58.010 --> 00:14:01.840
This means that the
AV chat has ended somehow.

00:14:02.040 --> 00:14:05.920
If you need to do any cleanup for
any of the objects you created

00:14:05.920 --> 00:14:08.900
when starting iChat Theater,
you should clean them up here.

00:14:08.950 --> 00:14:12.400
And there are multiple paths
to get to shutting down.

00:14:12.400 --> 00:14:16.280
So it's important that your
cleanup happens in shutting down

00:14:16.320 --> 00:14:20.520
rather than at the end of your
session or something like that.

00:14:20.700 --> 00:14:23.060
And finally, at the end,
it'll move back to IMEV inactive,

00:14:23.060 --> 00:14:25.640
which means that, again,
it's the unidle state,

00:14:25.640 --> 00:14:28.640
and it's waiting for the user
to initiate iChat Theater.

00:14:31.720 --> 00:14:35.100
So let's actually talk
about running a session.

00:14:35.260 --> 00:14:38.060
So I mentioned the video
data source a moment ago.

00:14:38.060 --> 00:14:41.770
And to set the video data source,
all you need to do is call set video

00:14:41.830 --> 00:14:44.170
data source on the shared AV manager.

00:14:44.580 --> 00:14:47.530
You can also set a few
options on the AV Manager,

00:14:47.530 --> 00:14:52.100
the first of which is
video optimization stills.

00:14:52.100 --> 00:14:59.220
Now, since we're actually talking about
running a video conference here,

00:14:59.220 --> 00:15:01.900
these optimizations actually provide
hints to the video conference engine

00:15:01.900 --> 00:15:01.900
to kind of hint as to what your
application is going to be doing,

00:15:01.900 --> 00:15:01.900
kind of the intent.

00:15:02.230 --> 00:15:11.690
Instills optimization means that
your application is willing to

00:15:11.690 --> 00:15:11.690
sacrifice motion-- or motion
at the expense of quality.

00:15:11.690 --> 00:15:11.690
Sorry, other way around.

00:15:12.020 --> 00:15:12.900
First way.

00:15:12.900 --> 00:15:13.900
Sorry.

00:15:13.990 --> 00:15:16.110
So what this means is that
if your application is going

00:15:16.110 --> 00:15:18.380
to show a lot of stills,
like a slide show with

00:15:18.380 --> 00:15:21.250
not much animation,
stills might allow the video

00:15:21.680 --> 00:15:24.900
conference to provide higher
resolution videos over the conference.

00:15:24.900 --> 00:15:29.900
Now, the thing is that if you are
also moving a lot in the video,

00:15:29.900 --> 00:15:32.900
the codec is not going to be
able to handle that as well,

00:15:32.900 --> 00:15:34.780
because you told it that you
were going to provide stills.

00:15:34.910 --> 00:15:38.010
So you should just keep in
mind-- keep that in mind.

00:15:38.320 --> 00:15:41.320
You can also say that you
want replacement mode.

00:15:41.360 --> 00:15:46.600
So typically what we saw was your camera
being sent with a secondary video source.

00:15:46.820 --> 00:15:50.180
So replacement mode effectively
removes that second video source

00:15:50.180 --> 00:15:53.900
and replaces your camera output with
the video from your application.

00:15:53.900 --> 00:15:57.060
And there are a couple of reasons
why you might want to do that,

00:15:57.060 --> 00:15:58.770
the first of which is CPU usage.

00:15:58.770 --> 00:16:01.290
Since you don't have to
do the camera processing,

00:16:01.360 --> 00:16:04.440
you can focus all processing
on your application's video.

00:16:04.440 --> 00:16:05.460
And that might be important,
depending on what you're doing.

00:16:06.170 --> 00:16:09.540
The second thing to keep in mind is that
bandwidth can actually be focused more on

00:16:09.540 --> 00:16:13.540
your application's video content rather
than on the entire video conference.

00:16:13.590 --> 00:16:15.690
And that could also be important.

00:16:16.090 --> 00:16:19.060
It's also good to know that
replacement might happen without

00:16:19.060 --> 00:16:20.560
you actually asking for it.

00:16:20.560 --> 00:16:23.000
So iChat Theater was
introduced with Leopard.

00:16:23.130 --> 00:16:27.280
So if you're talking with a
Leopard or Snow Leopard user,

00:16:27.280 --> 00:16:31.350
you'll be able to see that
advanced kind of split view.

00:16:31.400 --> 00:16:36.720
But if you're talking with older video
chat software or aim for Windows,

00:16:36.720 --> 00:16:38.710
you're actually always
going to see replacement,

00:16:38.710 --> 00:16:38.710
since those applications don't
know how to handle iChat Theater.

00:16:40.460 --> 00:16:44.050
So as I said before, when the state moves
to I am AV requested,

00:16:44.210 --> 00:16:47.560
you're just going to want
to start the AV Manager.

00:16:47.570 --> 00:16:50.650
And if your application wants
to stop it for some reason,

00:16:50.650 --> 00:16:52.170
you call AV Manager stop.

00:16:54.100 --> 00:16:55.490
So that was the session state.

00:16:55.590 --> 00:16:57.430
Now let's talk about
actually providing video.

00:16:57.490 --> 00:17:03.510
So as I mentioned,
we just set the video data source.

00:17:03.530 --> 00:17:07.960
And there are two kind of objects that
you can set as a video data source.

00:17:07.980 --> 00:17:10.740
The first is an NSView or
some common subclasses,

00:17:10.740 --> 00:17:12.130
which I'll talk about.

00:17:12.230 --> 00:17:15.120
Otherwise,
if it's not one of those common classes,

00:17:15.120 --> 00:17:18.980
you just have to implement an object
or write an object that implements

00:17:19.150 --> 00:17:21.180
the IAM video data source protocol.

00:17:21.190 --> 00:17:22.540
And I'll talk about
both of these in depth.

00:17:24.330 --> 00:17:26.530
The first is an NSU data source.

00:17:26.540 --> 00:17:30.390
And as I said, the common cases for
NSUs are handled for you.

00:17:30.400 --> 00:17:34.200
And where possible,
iChat has tried to hook into the display

00:17:34.200 --> 00:17:36.710
mechanism for those common cases.

00:17:36.820 --> 00:17:39.590
But let's talk about what
those cases actually are.

00:17:40.470 --> 00:17:42.310
The first of which is
just a standard NS view.

00:17:42.400 --> 00:17:43.900
So this is just a very basic NS view.

00:17:43.900 --> 00:17:47.720
Probably most of you are using
those in your application.

00:17:47.750 --> 00:17:51.980
And iChat will actually directly
support these in iChat Theater.

00:17:52.500 --> 00:17:58.010
And what is actually happening to draw
a frame in iChat Theater is that you're

00:17:58.010 --> 00:18:02.060
rendering your image on the main thread.

00:18:02.200 --> 00:18:06.470
In the method, display rect,
ignoring opacity in context.

00:18:07.220 --> 00:18:10.490
Another thing to keep in mind about this
is that it's resolution independent.

00:18:10.490 --> 00:18:13.590
That means that an affine
transform has been applied to

00:18:13.590 --> 00:18:15.730
your view before you draw into it.

00:18:16.190 --> 00:18:19.260
You should check resolution
independence guidelines online

00:18:19.260 --> 00:18:25.500
to see what this actually means.

00:18:25.570 --> 00:18:28.320
But the short story of it is that you
might be drawing into more or fewer

00:18:28.320 --> 00:18:28.320
pixels than you are used to drawing into.

00:18:29.680 --> 00:18:32.140
So I said we try to hook into the
display mechanism when we can,

00:18:32.140 --> 00:18:34.720
and that's basically
through set needs display.

00:18:34.770 --> 00:18:39.770
So if you ever need to force a new frame,
you just call set needs display yes.

00:18:41.780 --> 00:18:42.840
So that's NSView.

00:18:42.860 --> 00:18:44.820
The next class is Qt Movie View.

00:18:44.850 --> 00:18:49.610
And Qt Movie View is a view that
is built into Mac OS X that allows

00:18:49.610 --> 00:18:51.680
you to play back QuickTime movies.

00:18:51.700 --> 00:18:53.600
And for iChat Theater,
we've actually hooked directly

00:18:53.710 --> 00:18:57.500
into QuickTime to get frames
from QuickTime for iChat Theater.

00:18:57.910 --> 00:19:01.180
So this is rendering off the
main thread in QuickTime.

00:19:01.180 --> 00:19:03.940
And that means that set
needs display yes is ignored.

00:19:03.940 --> 00:19:06.580
QuickTime is handling the
drawing of these frames,

00:19:06.580 --> 00:19:09.440
so it knows when a new frame
is allowed or available.

00:19:10.000 --> 00:19:12.410
Since QuickTime handles
audio as well as video,

00:19:12.410 --> 00:19:14.560
audio comes for free with Qt Movie Views.

00:19:14.560 --> 00:19:18.310
So if you have a Qt Movie View that's
playing a movie with audio and video,

00:19:18.310 --> 00:19:21.100
both of those will get sent
through iChat Theater if a Qt

00:19:21.100 --> 00:19:23.080
Movie View is your data source.

00:19:24.760 --> 00:19:27.820
And then NSOpenGLView,
this is Mac OS X's view

00:19:27.820 --> 00:19:30.040
for showing OpenGL content.

00:19:30.120 --> 00:19:34.690
And NSOpenGLView basically reads
back a snapshot of the GL context,

00:19:34.800 --> 00:19:36.840
which means basically copying the pixels.

00:19:37.090 --> 00:19:40.000
It's capturing on the main thread.

00:19:40.140 --> 00:19:43.660
But since OpenGL does not
necessarily have a common

00:19:43.660 --> 00:19:48.140
mechanism for updating the screen,
you actually always must call

00:19:48.140 --> 00:19:51.220
setNeedsDisplayYes to get a
new frame to iChat Theater,

00:19:51.380 --> 00:19:55.990
since we have no way of knowing
when you're updating the view.

00:19:57.370 --> 00:20:03.040
QC view is the Quartz Composition view,
or Quartz Composer view.

00:20:03.040 --> 00:20:09.840
And basically,
it's a subclass of NSOpenGL view,

00:20:09.840 --> 00:20:09.840
so it works similarly.

00:20:09.840 --> 00:20:09.840
It reads back a snapshot of a GL context,
like the NSOpenGL view.

00:20:10.100 --> 00:20:13.350
But a snapshot is
captured for every frame.

00:20:13.570 --> 00:20:18.880
So since Quartz Composer is going
to render every frame on screen,

00:20:18.880 --> 00:20:22.490
you basically always
have full motion video,

00:20:22.570 --> 00:20:26.610
which means that
SetNeedsDisplayYes is ignored,

00:20:26.610 --> 00:20:29.540
since it knows when to draw frames.

00:20:29.540 --> 00:20:30.790
And IAMVideoOptimizationStills
is also ignored,

00:20:30.790 --> 00:20:30.790
since Quartz Composer is always moving.

00:20:30.790 --> 00:20:30.790
It's always full motion video.

00:20:31.870 --> 00:20:34.300
So those are the common classes.

00:20:34.320 --> 00:20:36.730
Now let's talk about some of the
limitations of things that are

00:20:36.770 --> 00:20:39.690
not supported in iChat Theater,
the first of which is, unfortunately,

00:20:39.690 --> 00:20:40.470
core animation.

00:20:40.710 --> 00:20:45.450
So if you have a layer-backed views,
animation is not supported.

00:20:45.710 --> 00:20:49.610
You'll get basically an
incorrectly drawn version of that

00:20:49.610 --> 00:20:51.980
view or something unexpected.

00:20:51.990 --> 00:20:56.690
But what you can do is that you can
use an NSAnimation context and say,

00:20:56.690 --> 00:20:56.690
set wants layer no on that view instead.

00:20:56.690 --> 00:20:56.690
That's a workaround.

00:20:57.310 --> 00:21:00.600
Also, since we're hooking into the
view mechanism wherever possible,

00:21:00.600 --> 00:21:03.300
if you have an NS view
with a QCGL or QT subview,

00:21:03.390 --> 00:21:06.810
the rendering mechanisms are
different for all of those.

00:21:07.090 --> 00:21:11.160
So iChat doesn't actually know how
to capture the frame or capture

00:21:11.280 --> 00:21:13.460
the video of those kind of views.

00:21:13.550 --> 00:21:17.790
So basically, the rendering is only going
to include the top level view.

00:21:17.860 --> 00:21:20.370
If you want to get these
into iChat Theater,

00:21:20.370 --> 00:21:23.330
you will need to manually
composite those views.

00:21:23.330 --> 00:21:27.200
But let me show you a demo of
NSU data sources in iChat Theater.

00:21:35.500 --> 00:21:37.010
So if I call my friend Peter again.

00:21:37.060 --> 00:21:44.880
So I have here an iChat
Theater sample application.

00:21:44.890 --> 00:21:46.920
The source code is available to
you if you want to follow along.

00:21:46.920 --> 00:21:48.920
But first,
let's actually see what it's doing.

00:21:48.980 --> 00:21:51.580
So I'll just start iChat Theater.

00:21:51.610 --> 00:21:54.220
And as you can see, it's got a dropdown,
basically a source list with a

00:21:54.220 --> 00:21:56.760
few different kinds of views,
starting with the OpenGL view,

00:21:56.760 --> 00:22:01.150
an NS view,
which is basically a web view,

00:22:01.290 --> 00:22:03.810
Qt movie view, and a QC view.

00:22:04.590 --> 00:22:10.060
Let's start with the NSOpenGL view.

00:22:10.060 --> 00:22:10.060
There's also a pixel
buffer and OpenGL buffer,

00:22:10.060 --> 00:22:10.060
but we'll get to those later.

00:22:10.800 --> 00:22:15.220
So if we go and we take the
iChat Theater application and

00:22:16.120 --> 00:22:16.390
we drag and drop onto iChat,

00:22:17.830 --> 00:22:20.730
You'll see that this application
is actually now just actively

00:22:20.730 --> 00:22:23.260
providing content to iChat Theater.

00:22:23.400 --> 00:22:29.700
And if we go in, if we change the source,
that kind of changes as it goes along.

00:22:30.620 --> 00:22:33.360
In the NS view, you can see like this.

00:22:33.440 --> 00:22:37.290
So the web view is an NS view,
but it's also worth noting

00:22:37.360 --> 00:22:42.490
that a web view can contain
QuickTime plug-ins and things like that.

00:22:42.490 --> 00:22:46.750
So if you wanted to see an
example where different rendering

00:22:46.870 --> 00:22:49.900
paths are not supported,
for instance,

00:22:49.900 --> 00:22:54.490
try going to view a trailer in Safari or
something like that or in this view.

00:22:54.490 --> 00:22:54.490
But let's take a look at the
source to see how that's working.

00:22:59.100 --> 00:23:01.050
So again,
this is the iChat Theater sample,

00:23:01.050 --> 00:23:02.980
if you want to follow along.

00:23:03.020 --> 00:23:06.010
And primarily,
you saw the user interface.

00:23:06.010 --> 00:23:07.390
It's very simple.

00:23:07.490 --> 00:23:15.190
Basically, there is a tab view with
multiple views behind it.

00:23:15.190 --> 00:23:15.190
And the main class that is
in charge is in controller.h.

00:23:15.800 --> 00:23:19.930
And you can see it has the pop-up button,
which is basically the source list,

00:23:20.060 --> 00:23:22.630
the NS tab view,
which basically is all the

00:23:22.680 --> 00:23:24.660
views that we were looking at.

00:23:24.690 --> 00:23:27.010
And then it has actually
accessors to all of those views.

00:23:27.120 --> 00:23:29.190
So we'll skip the first two,
but we saw the web view,

00:23:29.420 --> 00:23:32.540
the normal GL view,
which is the spinning square.

00:23:32.560 --> 00:23:35.160
It also had a QT movie
view and a QC view.

00:23:35.300 --> 00:23:38.220
So the QC view and the movie view
are actually very simple classes that

00:23:38.220 --> 00:23:41.990
just support drag and drop of a movie
or a composition onto those views.

00:23:42.020 --> 00:23:44.760
So let's not look at the code
for those since it's very simple.

00:23:44.830 --> 00:23:47.650
And a web view is actually
just a public class.

00:23:47.760 --> 00:23:51.210
So we'll take a closer look at
the normal GL view in a moment.

00:23:51.720 --> 00:23:54.580
But let's see how the
controller is actually working.

00:23:54.820 --> 00:23:58.310
So if we go to Awake from Nib,
you can see it's basically doing

00:23:58.310 --> 00:24:00.300
some work to set up the tab list.

00:24:00.810 --> 00:24:03.900
And then at the end,
it's doing an initial state

00:24:03.900 --> 00:24:07.840
synchronization to say,
set enable iChat, set enable Theater,

00:24:07.990 --> 00:24:08.310
yes.

00:24:08.310 --> 00:24:10.230
So let's see what that does.

00:24:11.290 --> 00:24:14.260
So if we are enabling iChat Theater,
we're going to register for

00:24:14.260 --> 00:24:17.380
the state change notifications,
and then we're going to perform

00:24:17.550 --> 00:24:18.880
that initial state change.

00:24:19.080 --> 00:24:22.200
So let's see what that
state change actually does.

00:24:23.200 --> 00:24:25.830
So as I said before,
when the state moved to requested,

00:24:25.890 --> 00:24:27.420
we need to start the AV Manager.

00:24:27.560 --> 00:24:30.470
And when the state moves to running,
we're going to activate the

00:24:30.470 --> 00:24:31.800
currently visible tab view.

00:24:32.210 --> 00:24:37.470
And what that means is that if the tab
view is showing a slide show or a movie,

00:24:37.470 --> 00:24:37.470
we're just going to start playing.

00:24:38.290 --> 00:24:41.930
So the video data source is actually set
in a delegate method for the tab view,

00:24:41.960 --> 00:24:44.740
which is tabViewDidSelect tabview item.

00:24:44.840 --> 00:24:47.750
So this method will be called after
the tab view has been selected,

00:24:47.750 --> 00:24:50.200
and all it does is it
gets the AV manager.

00:24:50.440 --> 00:24:53.030
It activates the tab
view if it's running.

00:24:53.270 --> 00:24:55.820
It sets some optimization options,
which we'll go back to in a second.

00:24:55.920 --> 00:24:57.820
It sets up the audio.

00:24:57.870 --> 00:24:59.290
And then it picks the data source.

00:24:59.420 --> 00:25:02.700
So it knows which view it needs to
use for each of the different views,

00:25:02.700 --> 00:25:05.220
and then sets that as the data source.

00:25:05.220 --> 00:25:08.180
If we just briefly look at
the set optimization options,

00:25:08.220 --> 00:25:11.300
you'll see that depending if it's
showing the pixel buffer or the NS view,

00:25:11.300 --> 00:25:14.500
we're basically going to
just say we want stills.

00:25:14.500 --> 00:25:17.160
There's also a replacement option
under one of the menu items

00:25:17.160 --> 00:25:18.100
if you want to turn that on.

00:25:18.100 --> 00:25:21.840
And you can also enable that
as one of the optimizations.

00:25:22.760 --> 00:25:24.620
Let's take a look at the normal GL view.

00:25:24.620 --> 00:25:26.600
This was the spinning square.

00:25:26.600 --> 00:25:29.450
And as you can see,
it's just a direct subclass

00:25:29.450 --> 00:25:33.000
of NSOpenGL view with a start
time and a redraw timer.

00:25:34.920 --> 00:25:37.410
And the code is also
very straightforward.

00:25:37.490 --> 00:25:42.150
Basically, when the view is created,
a view did move to window, gets called,

00:25:42.150 --> 00:25:45.370
and that creates a frame timer,
which gets fired every

00:25:45.370 --> 00:25:46.950
30 frames a second.

00:25:48.060 --> 00:25:50.800
And FrameTimerFire is just going to say,
"Set needs display:

00:25:50.800 --> 00:25:53.860
yes." Since this is an NSOpenGL view,
we need to always say

00:25:53.860 --> 00:25:55.000
we need a new frame.

00:25:56.480 --> 00:25:59.690
Then all that's doing is some
very basic OpenGL drawings.

00:25:59.700 --> 00:26:02.960
This is just in DrawRect,
which will get called implicitly

00:26:02.960 --> 00:26:05.100
after set needs display is called.

00:26:06.490 --> 00:26:11.130
And you can see it's just doing
some basic OpenGL operations.

00:26:11.130 --> 00:26:14.310
So that's the basics of the code.

00:26:14.350 --> 00:26:17.340
If we can go back to the slides.

00:26:19.630 --> 00:26:23.940
So that was a demo of
NSU Data Sources in iChat Theater.

00:26:23.940 --> 00:26:27.400
So that covers the very simple cases
that might work for most of you.

00:26:27.480 --> 00:26:31.240
But if you have something lower level,
you might actually need more control.

00:26:31.250 --> 00:26:34.300
And for that, you should go to the iM
Video Data Source Protocol,

00:26:34.300 --> 00:26:36.790
which will give you precise
control over video content,

00:26:36.800 --> 00:26:39.260
frame-level control over video content.

00:26:39.260 --> 00:26:42.260
If you need to do bandwidth optimization,
you can also do that,

00:26:42.350 --> 00:26:44.970
and it also will allow you to
take care of frame scheduling

00:26:44.970 --> 00:26:47.560
and audio synchronization,
if you have an advanced application

00:26:47.560 --> 00:26:48.500
where you need to do that.

00:26:48.570 --> 00:26:52.390
since the other views we talked
about actually don't handle that.

00:26:54.490 --> 00:26:56.180
So let's talk about how
you actually implement the

00:26:56.180 --> 00:27:01.810
IAM Video Data Source Protocol.

00:27:02.290 --> 00:27:03.030
Basically,
you need to implement callbacks,

00:27:03.030 --> 00:27:03.030
and the callbacks exist
for two buffer types.

00:27:03.250 --> 00:27:09.260
The first of which is a CV pixel buffer,
just a pixel buffer,

00:27:09.260 --> 00:27:10.360
or a CV OpenGL buffer,
which we'll just say OpenGL buffer.

00:27:10.790 --> 00:27:12.790
And there are two callbacks,
the first of which

00:27:12.800 --> 00:27:14.150
specifies buffer options.

00:27:14.460 --> 00:27:18.180
And this will get called immediately
after you set the video data source.

00:27:18.790 --> 00:27:22.120
There's also a second callback to provide
frames that you need to implement.

00:27:22.160 --> 00:27:24.900
This will get called off the main thread.

00:27:25.690 --> 00:27:28.160
So basically, to implement the
Video Data Threshold Protocol,

00:27:28.160 --> 00:27:30.620
you need to implement one
pair of those methods,

00:27:30.640 --> 00:27:34.300
so either the pair for pixel buffers
or the pair for OpenGL buffers.

00:27:35.770 --> 00:27:38.620
Let's take a closer look
at the pixel buffers.

00:27:38.620 --> 00:27:41.090
So as I said, there are two callbacks.

00:27:41.170 --> 00:27:43.900
The first one is to
specify the pixel format,

00:27:43.900 --> 00:27:46.590
and that is getPixelBufferPixelFormat.

00:27:46.590 --> 00:27:51.500
So just a very simple example is
setting the pixel format to 32 ARGB.

00:27:52.860 --> 00:27:59.030
The second callback you need
to implement provides frames,

00:27:59.030 --> 00:27:59.030
and that is render into
pixel buffer for time.

00:27:59.220 --> 00:28:01.480
So as you can see,
the return value is a bool.

00:28:01.540 --> 00:28:04.900
If nothing has changed since the
last time you provided a frame,

00:28:04.900 --> 00:28:07.410
you'll return no, otherwise return yes.

00:28:08.010 --> 00:28:10.470
And while you are dealing
with the pixel buffer,

00:28:10.470 --> 00:28:13.900
you need to keep in mind that iChat
Theater owns the pixel buffer,

00:28:13.900 --> 00:28:15.660
and you should not retain it.

00:28:15.730 --> 00:28:18.560
When drawing into it, make sure you first
lock the base address.

00:28:18.730 --> 00:28:21.940
Then you can either fill the buffer
directly or create a graphics

00:28:21.940 --> 00:28:23.900
context and draw into that buffer.

00:28:23.900 --> 00:28:27.200
When you're done,
unlock the base address,

00:28:27.200 --> 00:28:28.850
and that's about it.

00:28:28.850 --> 00:28:31.360
So here's a very simple example.

00:28:31.360 --> 00:28:34.900
So first, if nothing has changed since
the last time we drew a frame,

00:28:34.900 --> 00:28:34.900
just return no.

00:28:35.470 --> 00:28:38.290
Otherwise, lock the base address.

00:28:38.330 --> 00:28:40.190
Then get the width and
height of the buffer.

00:28:40.380 --> 00:28:42.710
Since this is actually an
active video conference,

00:28:42.720 --> 00:28:45.700
the frame rate and the size of
the buffer could actually change

00:28:45.720 --> 00:28:47.260
as the conference is going.

00:28:47.410 --> 00:28:53.890
So you have to make sure that
every time this callback is called,

00:28:53.890 --> 00:28:53.890
you check the width and the height to see
if you need to do something differently.

00:28:54.620 --> 00:28:58.680
Next, you need to get the base address of
that buffer before you draw into it.

00:28:58.710 --> 00:29:01.180
Then you can do your drawing code.

00:29:01.190 --> 00:29:05.150
Unlock the base address when you're done,
and return yes.

00:29:05.780 --> 00:29:09.010
So OpenGL buffers work very similarly.

00:29:09.230 --> 00:29:14.610
The callback-- the first
callback is to specify the

00:29:14.620 --> 00:29:19.360
OpenGL context in pixel format,
and that is

00:29:19.360 --> 00:29:23.450
getOpenGLBufferContextPixelFormat.

00:29:23.450 --> 00:29:23.450
And in that, again,
you just set the context and

00:29:23.450 --> 00:29:23.450
set the pixel buffer format--
or set the pixel format.

00:29:23.890 --> 00:29:30.510
The second callback provides frames,
and that is render into

00:29:30.510 --> 00:29:30.510
OpenGL buffer on screen for time.

00:29:31.150 --> 00:29:34.100
And again, if nothing has changed,
return no.

00:29:34.140 --> 00:29:42.380
Also keep in mind, again,
do not retain the buffer.

00:29:42.380 --> 00:29:42.390
But when you actually need to draw,
you need to attach the buffer

00:29:42.390 --> 00:29:42.390
to the context and to the
screen that you're drawing on.

00:29:42.640 --> 00:29:48.740
call flush at the end to make sure
that the buffer actually gets flushed,

00:29:48.740 --> 00:29:48.740
the context gets flushed.

00:29:49.060 --> 00:29:51.920
So here's a sample implementation
that we can walk through.

00:29:52.140 --> 00:29:54.960
If nothing has changed, return no.

00:29:55.470 --> 00:29:59.090
Next, we're going to set the CGL macro
context to a shared context.

00:29:59.110 --> 00:30:03.650
And let's take a moment to see what
CGL macro context actually does.

00:30:04.510 --> 00:30:06.900
So a recent version of
Mac OS X introduced the concept

00:30:06.900 --> 00:30:09.910
of concurrent OpenGL rendering,
which essentially means that

00:30:10.170 --> 00:30:12.850
OpenGL is multithreaded,
and there is not necessarily

00:30:12.850 --> 00:30:14.400
a current OpenGL context.

00:30:14.400 --> 00:30:16.540
It might vary depending
on the thread you're on.

00:30:18.240 --> 00:30:21.410
So this macro will actually
solve that problem for you.

00:30:21.410 --> 00:30:24.960
So it will actually direct
OpenGL to use a specific context.

00:30:25.180 --> 00:30:35.500
So if you want to use this macro,
you need to import the OpenGL/CGL macro

00:30:35.500 --> 00:30:35.500
header and then set CGL macro context
to the context that you want to use.

00:30:36.020 --> 00:30:39.240
And to see what this is actually doing,
let's say we have a callback

00:30:39.250 --> 00:30:42.610
thread and a main thread,
each of which has their own context.

00:30:43.110 --> 00:30:46.860
So if on the callback thread we set
it to the shared context and the main

00:30:46.860 --> 00:30:50.720
thread we set it to the main context,
what happens after that macro is

00:30:50.720 --> 00:30:53.950
called is that every operation
that is sent to OpenGL is now

00:30:54.020 --> 00:30:55.950
focused to the specific context.

00:30:56.040 --> 00:30:58.720
So if this were not taken care of,
for instance,

00:30:58.720 --> 00:31:03.050
you might end up with a bizarre situation
where you're not entirely sure where

00:31:03.050 --> 00:31:05.260
your OpenGL commands are being sent.

00:31:05.270 --> 00:31:08.410
So just keep in mind that if
you have multiple contexts,

00:31:08.410 --> 00:31:11.790
you need to set the CGL macro context
to the context you want to draw into.

00:31:12.620 --> 00:31:20.620
So to go back to the
sample implementation,

00:31:20.620 --> 00:31:20.620
you set the macro context.

00:31:20.620 --> 00:31:20.620
You attach the buffer to
the context and the screen.

00:31:20.970 --> 00:31:24.210
You get the rect for the buffer,
and then you do your

00:31:24.210 --> 00:31:29.090
OpenGL operations and your drawing,
and when you're done, return yes.

00:31:30.020 --> 00:31:32.780
So there's one parameter that
we didn't talk about yet,

00:31:32.840 --> 00:31:34.810
which is the for time argument.

00:31:34.810 --> 00:31:37.400
And as you can see,
this exists on both pixel

00:31:37.400 --> 00:31:39.250
buffers and OpenGL buffers.

00:31:39.340 --> 00:31:41.360
So what does this actually mean?

00:31:41.540 --> 00:31:46.130
And what it actually is is it's the time
stamp that the frame is being requested.

00:31:46.130 --> 00:31:50.930
And we give you this because this will
actually allow you to synchronize frames.

00:31:51.060 --> 00:31:54.250
You should set this to the time
that the frame that you are

00:31:54.250 --> 00:31:56.560
returning first appeared on screen.

00:31:56.560 --> 00:31:58.890
And let's take a look at why
you might want to do that.

00:31:59.900 --> 00:32:06.830
So let's say that you have
a data source with callbacks

00:32:06.830 --> 00:32:06.830
being called to provide frames,
you know, 20 frames a second.

00:32:07.240 --> 00:32:09.450
And you're drawing to
screen 30 times a second,

00:32:09.530 --> 00:32:12.420
so 30 frames a second.

00:32:12.540 --> 00:32:18.230
What this means is that when iChat is
calling back into your application,

00:32:18.230 --> 00:32:18.230
it's basically going to
miss every third frame.

00:32:18.940 --> 00:32:25.520
So the remote side,
when you send this over iChat Theater,

00:32:25.680 --> 00:32:31.720
is basically going to see
frames with a lot of jitter.

00:32:31.720 --> 00:32:31.720
So a frame that should have
been short might be long,

00:32:31.720 --> 00:32:31.720
and a frame that should have
been long might be short.

00:32:31.720 --> 00:32:31.720
So the motion will not look smooth.

00:32:32.030 --> 00:32:34.340
Basically,
what you want to do is you want to

00:32:34.340 --> 00:32:38.380
adjust the timestamp to when that
frame first appeared on screen to kind

00:32:38.400 --> 00:32:42.770
of match up to when your application
showed these frames on screen.

00:32:44.130 --> 00:32:46.610
So what this actually means,
or what this effectively does,

00:32:46.630 --> 00:32:48.210
is it drops the third frame.

00:32:48.290 --> 00:32:51.340
So again,
the third frames will still be dropped.

00:32:51.340 --> 00:32:53.160
So the same number of
frames will be sent.

00:32:53.160 --> 00:32:55.640
But the effect will be much
smoother on the remote side.

00:32:55.720 --> 00:33:02.110
So let me give you an example of this.

00:33:02.370 --> 00:33:04.890
I am video data source protocols.

00:33:16.660 --> 00:33:17.600
So here we are again.

00:33:17.600 --> 00:33:20.600
Let's start the iChat Theater sample.

00:33:20.630 --> 00:33:23.390
And we'll go back to the first two
sources that we didn't talk about yet.

00:33:23.420 --> 00:33:26.780
So the Pixel Buffer,
which is actually a slideshow,

00:33:27.060 --> 00:33:29.460
which also has a cool little
laser pointer if you want to

00:33:29.460 --> 00:33:31.510
add that to your application.

00:33:31.830 --> 00:33:34.010
And open a jail buffer,
which is just a very

00:33:34.070 --> 00:33:35.730
basic progress indicator.

00:33:35.890 --> 00:33:38.550
And just we can switch between these two.

00:33:38.590 --> 00:33:43.100
As you can see, it's just an additional
view like any of the others.

00:33:43.560 --> 00:33:48.010
But let's take a look at how that
actually works behind the scenes.

00:33:49.850 --> 00:33:53.110
So again, we talked about-- we already
went over the QC view,

00:33:53.110 --> 00:33:57.690
the Qt Movie view, the normal GL view,
and the web view.

00:33:57.760 --> 00:34:01.510
So the first sample, the pixel buffer,
was a slideshow view.

00:34:02.490 --> 00:34:04.280
And this is just a very simple class.

00:34:04.280 --> 00:34:06.550
It's a subclass of NSView.

00:34:06.790 --> 00:34:11.180
In terms of instance variables,
it has a start time and a timer.

00:34:11.370 --> 00:34:15.100
So like the OpenGL view
we saw in the last one,

00:34:15.100 --> 00:34:21.140
basically it's going to create a
timer that fires 30 times a second.

00:34:21.140 --> 00:34:25.880
And it also has a start and a
stop method so that it knows when

00:34:25.880 --> 00:34:25.880
to start and stop the slide show.

00:34:25.880 --> 00:34:25.880
So in terms of implementation,

00:34:27.660 --> 00:34:31.610
In Awake from Nib,
it's going to set up the slideshow.

00:34:31.610 --> 00:34:35.610
And when this is activated,
it's going to be set as

00:34:35.650 --> 00:34:37.500
the video data source.

00:34:37.500 --> 00:34:43.090
So again, as the tab switches,
it's going to set the video data source.

00:34:43.160 --> 00:34:49.220
And here you see the video data source
implements getPixelBufferPixelFormat,

00:34:49.220 --> 00:34:49.290
which sets the pixel format to 32 ARGB.

00:34:49.290 --> 00:34:49.290
And it also implements
renderIntoPixelBufferForTime.

00:34:49.760 --> 00:34:52.360
So the slideshow is interesting in
that the way it actually renders

00:34:52.360 --> 00:35:00.380
is that with a given set of slides,
it knows which slide or which dissolve

00:35:00.380 --> 00:35:00.380
between those slides it should
show at any given point in time.

00:35:00.920 --> 00:35:04.650
So since the time argument is given,
this basically means that we

00:35:04.650 --> 00:35:08.000
can look at the slide show and
see what frame we should pull

00:35:08.000 --> 00:35:10.020
out to provide to iChat Theater.

00:35:10.220 --> 00:35:13.340
And as you can see,
we do that by get current image.

00:35:14.550 --> 00:35:16.440
And that's going to give you the image.

00:35:16.440 --> 00:35:18.670
But then we're going to
lock the base address,

00:35:18.670 --> 00:35:21.480
create the graphics context,
or use the graphics context

00:35:21.540 --> 00:35:23.070
we've already created.

00:35:23.280 --> 00:35:26.090
Set the context, draw into it,
and flush it.

00:35:26.110 --> 00:35:28.950
And then at the end,
since as you saw it was a slide show,

00:35:28.950 --> 00:35:32.530
some of the images showed for
longer periods of time than others.

00:35:32.580 --> 00:35:41.950
So we're going to adjust the timestamp
back to when that slide first appeared.

00:35:41.950 --> 00:35:41.950
Then we'll release the context
and unlock and return yes.

00:35:42.890 --> 00:35:45.150
So next,
let's talk about the threaded GL view.

00:35:45.160 --> 00:35:48.160
This was the progress indicator.

00:35:48.480 --> 00:35:49.700
And again, this is very simple.

00:35:49.700 --> 00:35:52.080
It just uses a timer like the others.

00:35:52.370 --> 00:35:55.400
But it creates a context
and a pixel format.

00:35:55.830 --> 00:35:58.680
So if we look at the
implementation of that,

00:35:59.000 --> 00:36:03.440
again, on viewDidMoveToWindow,
it sets up the frame timer.

00:36:05.480 --> 00:36:08.190
And it also implements the
OpenGL buffer callbacks.

00:36:08.380 --> 00:36:11.520
So getOpenGLBuffer just basically
creates the pixel format

00:36:11.520 --> 00:36:14.610
here that it wants to use,
and it creates the context.

00:36:14.760 --> 00:36:19.090
Then it sets it to the context passed
in and the pixel format as well.

00:36:20.620 --> 00:36:25.200
And render into OpenGL Buffer for Time,
again, is using CGL macro context.

00:36:25.270 --> 00:36:29.430
Since we created a context above,
it's basically going to render on a

00:36:29.430 --> 00:36:31.950
different context than the main UI.

00:36:32.170 --> 00:36:35.260
So again, it's going to attach the buffer
to the screen in the context,

00:36:35.400 --> 00:36:38.540
get the rectangle,
set up the OpenGL commands,

00:36:38.540 --> 00:36:42.590
and then render into that
context for the specified time.

00:36:42.640 --> 00:36:44.890
And it'll just return yes.

00:36:46.100 --> 00:36:47.510
So that drawing takes place here.

00:36:47.550 --> 00:36:52.320
You can see it's basically just doing
some very basic OpenGL operations

00:36:52.340 --> 00:36:54.700
to draw that progress indicator.

00:36:56.790 --> 00:36:59.130
Okay, we can go back to the slides.

00:36:59.150 --> 00:37:06.970
So that was the iM
Video Data Source Protocol,

00:37:06.970 --> 00:37:07.320
and again, that's part of the iChat
Theater sample if you want to

00:37:07.320 --> 00:37:07.320
see how that's working in depth.

00:37:08.300 --> 00:37:09.800
Now let's talk about audio.

00:37:09.800 --> 00:37:12.320
And audio, actually,
in terms of iChat Theater,

00:37:12.460 --> 00:37:13.720
is very straightforward.

00:37:14.020 --> 00:37:16.360
The first thing you need to do
is on the video data source,

00:37:16.360 --> 00:37:19.660
you need to tell it the number of audio
channels that you are going to provide.

00:37:19.820 --> 00:37:22.590
This can be zero, one, or two.

00:37:22.600 --> 00:37:27.150
iChat Theater actually
supports one audio channel,

00:37:27.150 --> 00:37:30.760
and so it's going to
mix this down for you.

00:37:30.760 --> 00:37:30.910
But for convenience,
we'll say we support two,

00:37:30.910 --> 00:37:30.910
and you can provide two channels.

00:37:31.640 --> 00:37:34.170
And then when you've said the number
of audio channels you support,

00:37:34.170 --> 00:37:38.780
when the state is IMAV running,
you can ask for the device UID and

00:37:38.780 --> 00:37:41.580
the channels that are set up for that.

00:37:42.620 --> 00:37:47.920
And this is actually-- you
can use NS Sound to actually

00:37:47.920 --> 00:37:50.650
play into iChat Theater.

00:37:50.710 --> 00:37:55.060
So on a sound,
you can set the audio device by

00:37:55.130 --> 00:37:57.280
passing in the playback identifier.

00:37:57.280 --> 00:37:57.280
Then you can set the channel mapping.

00:37:57.280 --> 00:37:57.280
And again, this will map back to the
number of channels that you

00:37:57.280 --> 00:37:57.280
said you wanted earlier.

00:37:58.620 --> 00:38:01.310
And then finally at the end,
when you want to play, just say,

00:38:01.310 --> 00:38:02.760
my sound play.

00:38:03.180 --> 00:38:06.080
So it's worth noting that this is
actually probably more complicated

00:38:06.090 --> 00:38:07.400
than most of you need to do.

00:38:07.440 --> 00:38:11.970
We've actually written this for you,
just sample methods that

00:38:11.970 --> 00:38:16.430
would just play these sounds,
just categories on NS Sound.

00:38:16.460 --> 00:38:19.620
Those are part of the
iChat Theater sample,

00:38:19.620 --> 00:38:21.760
so we just encourage you to
take those sound additions and

00:38:21.760 --> 00:38:21.760
copy them into your own project
to use those in iChat Theater.

00:38:22.660 --> 00:38:25.100
But if you need to go
lower level than NSSound,

00:38:25.110 --> 00:38:28.540
you can also use Core Audio,
and this is by using a Core Audio device.

00:38:28.790 --> 00:38:32.540
So if NSSound is too easy for you,
you can use the Core Audio code.

00:38:32.570 --> 00:38:35.780
So again, basically,
we're talking about converting from

00:38:35.780 --> 00:38:40.510
an audio device ID-- from the audio
device UID we received from iChat

00:38:40.610 --> 00:38:42.800
Theater to an audio device in Core Audio.

00:38:43.050 --> 00:38:45.750
And we'll use an audio value
translation that's going to pass

00:38:45.750 --> 00:38:49.660
in the UID that we start with and
the device we want to translate to.

00:38:49.790 --> 00:38:53.470
And then we'll perform that get property
operation to do the translation,

00:38:53.540 --> 00:38:56.070
which ends up back in the device.

00:38:58.590 --> 00:39:02.900
And then you can use the
Core Audio device as you would

00:39:02.900 --> 00:39:05.500
any other Core Audio device.

00:39:05.500 --> 00:39:10.810
So Core Audio is kind of beyond
the scope of this presentation,

00:39:10.810 --> 00:39:14.610
but if you want to find
more about Core Audio,

00:39:14.630 --> 00:39:17.690
you can check out session 704,
Understanding the

00:39:17.690 --> 00:39:17.690
Architecture of Core Audio.

00:39:17.690 --> 00:39:17.690
Or if you want to go to a lab,
it's lab 7017, the Core Audio lab.

00:39:18.910 --> 00:39:19.930
So that was audio.

00:39:20.210 --> 00:39:23.660
Now let's talk about playback controls.

00:39:23.780 --> 00:39:27.070
So if you're running on Leopard,
basically what you see when you're

00:39:27.070 --> 00:39:30.940
running iChat Theater is not actually
just a simple window with content in it.

00:39:30.970 --> 00:39:32.310
You're also going to see a second window.

00:39:32.510 --> 00:39:33.850
So in the case of Quick Look,
for instance, here,

00:39:33.850 --> 00:39:36.020
you're going to see the
zebra in a second window.

00:39:36.040 --> 00:39:38.510
And that second window
might be in your way,

00:39:38.510 --> 00:39:40.350
and might just be occluding
your iChat experience.

00:39:40.460 --> 00:39:41.960
So we kind of want to improve this.

00:39:42.010 --> 00:39:44.610
So for Snow Leopard,
what we've done is we've refined this.

00:39:44.930 --> 00:39:47.100
So we're getting rid of
that Quick Look panel,

00:39:47.100 --> 00:39:50.860
and we're moving those controls
directly into the iChat window.

00:39:51.770 --> 00:39:54.270
So this is new for Snow Leopard,
and it's embedded in the video chat.

00:39:54.390 --> 00:39:57.660
And it's actually API that's
available for you as well.

00:39:57.660 --> 00:39:59.770
But it supports only very basic controls.

00:39:59.960 --> 00:40:06.420
So play/pause, forward,
such as next in a slide show,

00:40:06.420 --> 00:40:11.470
or backward,
which is previous in a slide show,

00:40:11.470 --> 00:40:11.470
a mute, and a time slider,
basically a scrubber like

00:40:11.470 --> 00:40:11.470
you would see in a video.

00:40:12.410 --> 00:40:14.470
So this is an opt-in API only.

00:40:14.530 --> 00:40:17.820
So if you don't want
to use these controls,

00:40:17.820 --> 00:40:19.390
you don't have to.

00:40:19.390 --> 00:40:23.650
If you've already supported
iChat Theater or have some

00:40:23.650 --> 00:40:28.480
other solution for controls that
you want to continue to use,

00:40:28.480 --> 00:40:29.850
you can do that.

00:40:29.900 --> 00:40:31.610
So it's opt-in only.

00:40:31.610 --> 00:40:32.260
There are two classes,
the IMAV Control Bar.

00:40:32.260 --> 00:40:32.260
And the Control Bar is
basically the container for the

00:40:32.260 --> 00:40:32.260
buttons that you want to use.

00:40:32.670 --> 00:40:36.370
And then there is the IMAV control,
which is the control that you

00:40:36.530 --> 00:40:38.250
can put into that container.

00:40:38.250 --> 00:40:41.090
And basically,
there are two types right now--

00:40:41.090 --> 00:40:43.120
IMAV button and IMAV slider.

00:40:43.170 --> 00:40:47.550
And those are the controls that
you see in that control bar.

00:40:47.550 --> 00:40:53.070
And these are roughly parallel to
their AppKit counterparts-- NSControl,

00:40:53.170 --> 00:40:55.160
NSButton, and NSSlider.

00:40:55.180 --> 00:40:59.770
But it's trimmed down to support
just the accessors and setters

00:40:59.770 --> 00:41:00.500
that can be used in iChat Theater.

00:41:01.170 --> 00:41:04.080
So that control bar that
you see is actually just

00:41:04.080 --> 00:41:06.170
available from an AV Manager.

00:41:06.260 --> 00:41:08.690
So if you just say Shared
AV Manager and get the control bar,

00:41:08.780 --> 00:41:10.820
you'll have that control bar.

00:41:10.970 --> 00:41:14.640
And then to add buttons to that,
the API is very straightforward.

00:41:14.960 --> 00:41:18.400
The buttons exists as shared
instances off the class that

00:41:18.500 --> 00:41:19.440
they are declared as part of.

00:41:19.460 --> 00:41:24.300
So for the Play/Pause button,
you can call imavbutton Play/PauseButton.

00:41:24.300 --> 00:41:26.160
And then you can set
the state to enabled.

00:41:26.160 --> 00:41:27.940
And you can set a target and action.

00:41:28.030 --> 00:41:30.820
So that means that when the
button is pressed in iChat,

00:41:31.000 --> 00:41:33.820
that target and action will
be called in your application.

00:41:33.890 --> 00:41:36.590
And then when you set it up,
you add it to the control bar and

00:41:36.590 --> 00:41:40.530
it'll show up immediately in iChat,
assuming that your application

00:41:40.530 --> 00:41:43.720
is the one that is providing
content to iChat Theater.

00:41:43.720 --> 00:41:44.960
Enter/remove, it's very similar.

00:41:44.960 --> 00:41:47.720
You just say remove control,
specified control.

00:41:47.720 --> 00:41:50.880
Or you can just fast remove all controls.

00:41:51.020 --> 00:41:53.320
So let's take a look at that too.

00:42:00.950 --> 00:42:02.160
Peter again?

00:42:02.160 --> 00:42:11.260
So OK, so if we start up the iChat
Theater application again.

00:42:21.270 --> 00:42:26.960
So basically, if we go to the iChat
Theater sample under the Video menu,

00:42:26.960 --> 00:42:31.400
as I said earlier,
if you want to turn on Replace Video,

00:42:31.430 --> 00:42:32.960
you can do it here.

00:42:33.000 --> 00:42:36.010
But we're going to turn on Controls.

00:42:36.010 --> 00:42:39.750
I mean, just flip on that menu item,
and as you can see,

00:42:39.750 --> 00:42:39.750
it just immediately shows up in iChat.

00:42:39.750 --> 00:42:39.750
And if we push the buttons here,
you can see it changes the

00:42:39.750 --> 00:42:39.750
view in the other application.

00:42:41.420 --> 00:42:43.050
And if we want,
we can go back here and we can, you know,

00:42:43.060 --> 00:42:46.370
shut those off,
and it just immediately shuts back off.

00:42:46.370 --> 00:42:48.490
Turn them back on if we wanted to.

00:42:48.510 --> 00:42:50.940
And that's playback controls.

00:42:51.050 --> 00:42:53.900
So let's see how that's implemented.

00:42:55.590 --> 00:43:02.840
So if we go back to the controller,
there is an additional accessor

00:43:02.840 --> 00:43:04.750
for set enable theater controls.

00:43:04.750 --> 00:43:07.580
And what that does is basically
it gets the control bar

00:43:07.580 --> 00:43:09.880
from the shared AV manager,
like we saw.

00:43:10.040 --> 00:43:12.820
And if we're enabling,
we're going to basically set up a

00:43:12.830 --> 00:43:14.860
backward button and a forward button.

00:43:14.860 --> 00:43:18.100
And we're going to set up a target
in action to select the previous

00:43:18.320 --> 00:43:19.890
source or select the next source.

00:43:19.960 --> 00:43:23.400
So it's basically just going to move
through the items available in the

00:43:23.400 --> 00:43:24.490
dropdown or in the pop-up button.

00:43:25.590 --> 00:43:28.290
We can see, so select next source.

00:43:28.320 --> 00:43:32.210
All it does is just basically
select a new source.

00:43:32.210 --> 00:43:37.900
That will kind of trigger the tab view,
did select tab view item callback,

00:43:37.900 --> 00:43:40.610
and it'll behave as we expect it to.

00:43:40.710 --> 00:43:43.990
So again,
that's really all there is to it.

00:43:43.990 --> 00:43:43.990
As you can see,
it's very little code to add

00:43:43.990 --> 00:43:43.990
those controls and to get them
working with your own application.

00:43:43.990 --> 00:43:43.990
So let's go back to the slides.

00:43:47.740 --> 00:43:50.550
So that was playback controls.

00:43:50.560 --> 00:43:54.190
And that actually almost wraps it up.

00:43:54.190 --> 00:43:58.650
So today we talked about
what iChat Theater is.

00:43:58.770 --> 00:44:04.330
We talked about supporting iChat Theater,
including an overview

00:44:04.840 --> 00:44:05.390
of the architecture,
how to support iChat

00:44:05.390 --> 00:44:05.390
Theater via Quick Look,
and then an introduction to the

00:44:05.390 --> 00:44:05.390
lower level API for iChat Theater.

00:44:06.040 --> 00:44:08.890
So you can use iChat Theater for
sharing and collaboration.

00:44:08.960 --> 00:44:11.630
You can use iChat Theater to basically
show anything that you can show in

00:44:11.630 --> 00:44:15.030
your application without having to need
your application on the other side.

00:44:15.250 --> 00:44:19.970
So your own users can basically sell
your application to their friends.

00:44:19.990 --> 00:44:22.220
And there are a few options if
you want to support iChat Theater.

00:44:22.350 --> 00:44:23.920
You can use Quick Look.

00:44:23.960 --> 00:44:26.310
Or for lower level support,
you can go to NSU or

00:44:26.310 --> 00:44:28.160
the basic subclasses.

00:44:28.270 --> 00:44:30.920
Or for full control,
you can use the IAMvideo data source

00:44:31.080 --> 00:44:33.700
protocol and implement those callbacks.

00:44:33.700 --> 00:44:36.700
As I said, Snow Leopard introduces
playback controls.

00:44:36.710 --> 00:44:39.520
So we encourage you to use those
to make the experience better for

00:44:39.520 --> 00:44:42.180
iChat users of your application.

00:44:42.180 --> 00:44:45.310
And we'd love to hear your feedback
basically on the entire process,

00:44:45.310 --> 00:44:49.050
from starting iChat Theater all
the way to the playback controls,

00:44:49.050 --> 00:44:50.140
which is new for Leopard.

00:44:50.140 --> 00:44:52.010
We're here to support you.

00:44:52.470 --> 00:44:54.860
So for more information,
you should contact Matt Drance.

00:44:54.860 --> 00:44:57.000
You can email him at
mdrance at apple.com.

00:44:57.000 --> 00:45:00.900
You can also join the mailing list
for questions about iChat Theater,

00:45:00.900 --> 00:45:04.500
the Instant Message Framework,
or any of the scripting mechanisms

00:45:04.500 --> 00:45:05.750
that you can use for iChat.

00:45:05.760 --> 00:45:08.750
That is iChat-dev at lists.apple.com.

00:45:08.760 --> 00:45:12.650
The sample that we went over today
is available from the attendees site,

00:45:12.870 --> 00:45:15.920
developer.apple.com slash www.attendee.

00:45:15.920 --> 00:45:20.620
And for related sessions,
you should check out session 523,

00:45:21.230 --> 00:45:23.280
Keeping Users Connected with
the Instant Message Framework.

00:45:23.360 --> 00:45:27.420
We have a lab tomorrow morning
at 9 o'clock if you want to drop

00:45:27.420 --> 00:45:30.130
by and ask us some questions or
if you want any help implementing

00:45:30.130 --> 00:45:31.560
iChat Theater in your application.

00:45:31.560 --> 00:45:35.100
And we also talked about Quick Look,
so if you want to find out how

00:45:35.100 --> 00:45:37.060
to implement Quick Look with
your own application,

00:45:37.060 --> 00:45:40.770
check out session 525,
System-Wide Previews with Quick Look.