WEBVTT

00:00:20.920 --> 00:00:22.800
All right, good morning.

00:00:22.800 --> 00:00:31.040
Thank you for coming out
on this Wednesday morning.

00:00:31.040 --> 00:00:34.310
Sorry we had to start so early,
but you know, when you're doing design,

00:00:34.310 --> 00:00:35.280
you got to get going quickly.

00:00:35.280 --> 00:00:37.560
My name is John Geleynse.

00:00:37.600 --> 00:00:40.000
I'm the Director of
Technology Evangelism here at Apple,

00:00:40.050 --> 00:00:42.930
and that's my team that put
on the iPhone Tech Talks,

00:00:43.120 --> 00:00:46.320
the Leopard Tech Talks,
a couple years ago, the Tiger Tech Talks.

00:00:46.470 --> 00:00:51.580
We're the guys who take the message from
WWDC out onto the road to your hometowns.

00:00:51.590 --> 00:00:54.000
And so if you think that we
need to come to your hometown,

00:00:54.000 --> 00:00:54.490
let me know.

00:00:55.050 --> 00:00:56.400
And maybe we will.

00:00:56.400 --> 00:00:58.870
But we met some great people on the road.

00:00:59.010 --> 00:01:02.230
So this morning,
we're going to be talking about iPhone.

00:01:02.240 --> 00:01:03.690
And

00:01:04.960 --> 00:01:08.580
All of you can attest to the
fact that your iPhone is awesome,

00:01:08.580 --> 00:01:08.780
right?

00:01:08.860 --> 00:01:13.200
We've all experienced what the
iPhone is like because we've got one.

00:01:13.310 --> 00:01:16.310
And anybody who's interacted
with an iPhone falls in

00:01:16.370 --> 00:01:20.270
love with it pretty quickly,
because it's a very compelling device.

00:01:20.450 --> 00:01:23.200
And it's not just because
of the industrial design,

00:01:23.200 --> 00:01:26.710
it's largely because the fact that
this is a revolutionary device with

00:01:26.710 --> 00:01:30.260
multi-touch technology and all the
other stuff that makes up iPhone,

00:01:30.350 --> 00:01:34.080
this thing really delivers
a great user experience.

00:01:34.330 --> 00:01:38.380
What's important here is that as
you consider designing for iPhone,

00:01:38.380 --> 00:01:40.900
as you think about bringing
an application to iPhone,

00:01:41.040 --> 00:01:42.700
that you have a plan.

00:01:42.860 --> 00:01:46.350
Having a plan means that you're going
to aim for something very specific,

00:01:46.390 --> 00:01:49.940
and that you're going to deliver
something really great for your users.

00:01:52.200 --> 00:01:54.480
All right.

00:01:54.490 --> 00:01:57.000
I do want to acknowledge
that it's very hard.

00:01:57.010 --> 00:02:00.580
We've been working on this
at Apple for quite a while,

00:02:00.600 --> 00:02:02.650
and it's proven to be
a very difficult task.

00:02:02.790 --> 00:02:06.760
It's hard to design something
that's perfectly suited for iPhone.

00:02:06.760 --> 00:02:11.860
It's hard to design something that
has just the right amount of features.

00:02:11.860 --> 00:02:17.190
It's hard to do something that
is a very specific solution.

00:02:17.280 --> 00:02:19.240
It's not the desktop.

00:02:19.240 --> 00:02:22.170
And so that's where the challenge lies.

00:02:22.230 --> 00:02:23.510
It's a very unique device.

00:02:23.510 --> 00:02:25.440
It delivers a very
unique user experience.

00:02:25.620 --> 00:02:29.300
And it's got all kinds of characteristics
that determine how you design for it.

00:02:29.300 --> 00:02:30.670
And it makes it very different.

00:02:30.910 --> 00:02:33.410
These characteristics make
it very different than what

00:02:33.510 --> 00:02:34.890
happens on the desktop.

00:02:37.690 --> 00:02:41.600
Secondly, I want to acknowledge that
it takes a lot of time.

00:02:41.650 --> 00:02:44.750
Designing for iPhone, as I said,
we've been working on this a long time.

00:02:44.810 --> 00:02:47.500
We've had a design team at
Apple working on the user interface,

00:02:47.600 --> 00:02:51.080
the user experience for
iPhone for three years,

00:02:51.140 --> 00:02:52.900
probably more.

00:02:52.930 --> 00:02:54.550
And if it was more,
I didn't know about it.

00:02:54.680 --> 00:02:56.830
But I only found out
about it three years ago.

00:02:57.050 --> 00:03:00.040
So we've been working on
this for a very long time.

00:03:00.060 --> 00:03:03.920
We're learning a lot about how to do it,
but it takes a lot of time.

00:03:03.930 --> 00:03:06.980
And we've got a lot of very,
very bright designers working on this.

00:03:06.980 --> 00:03:09.040
And the end result was amazing.

00:03:09.060 --> 00:03:12.610
But I think the first takeaway
for you is you have to assign,

00:03:12.610 --> 00:03:17.270
you have to prepare,
to allocate time to designing for iPhone.

00:03:19.540 --> 00:03:21.760
The last thing is,
it requires dedication.

00:03:21.840 --> 00:03:24.970
Designing something really
awesome for the iPhone requires

00:03:25.050 --> 00:03:26.620
dedication on your part.

00:03:26.650 --> 00:03:28.910
And by that I mean,
you have to pull together a

00:03:29.050 --> 00:03:33.000
team of folks who are dedicated
to putting all of their energy,

00:03:33.000 --> 00:03:35.720
all of their talent,
all of their time into this.

00:03:35.740 --> 00:03:39.180
It's not something you can do just
as yet another platform for your

00:03:39.180 --> 00:03:42.340
application or set of applications.

00:03:42.360 --> 00:03:45.220
It's not just, you know, ah,
something that you'll

00:03:45.220 --> 00:03:46.780
work on on the side,
yeah, yeah, by the way,

00:03:46.780 --> 00:03:48.940
we gotta get that iPhone
product out of the way.

00:03:48.970 --> 00:03:52.770
The best results on iPhone are
from teams who have dedicated,

00:03:52.810 --> 00:03:56.780
you know, put a lot of dedicated folks
onto the task and worked really,

00:03:56.780 --> 00:04:01.480
really hard for a long period of time
and come up with something really great.

00:04:02.390 --> 00:04:05.140
And finally,
if you've done all those things,

00:04:05.180 --> 00:04:06.360
the payoff is huge.

00:04:06.630 --> 00:04:08.470
I mean,
you look at the results that we've gotten

00:04:08.560 --> 00:04:11.380
in terms of product reviews for iPhone,
the customer feedback

00:04:11.500 --> 00:04:13.930
that we've received,
your own experience,

00:04:13.930 --> 00:04:15.630
you know that iPhone is great.

00:04:15.850 --> 00:04:17.250
And I think that's the payoff.

00:04:17.480 --> 00:04:20.440
And certainly, as I've worked with
developers for the last,

00:04:20.440 --> 00:04:23.110
certainly, well, with iPhone,
we started the iPhone

00:04:23.110 --> 00:04:24.420
Tech Talks last fall.

00:04:24.420 --> 00:04:27.600
I began working with developers
creating web apps at that time.

00:04:27.600 --> 00:04:31.080
And so probably the last eight
months I've been working with a lot

00:04:31.080 --> 00:04:33.550
of companies designing for iPhone.

00:04:33.550 --> 00:04:36.920
And the payoff for those
companies who did the right thing,

00:04:36.970 --> 00:04:40.520
who spent the time and did
something really great was big.

00:04:40.650 --> 00:04:42.790
They felt great about
what they have produced.

00:04:42.800 --> 00:04:44.260
So it's absolutely worth it.

00:04:44.340 --> 00:04:46.930
So today,
this session is all about design.

00:04:47.540 --> 00:04:50.890
And what I want to talk about this
morning is the process that you're

00:04:50.890 --> 00:04:56.470
going to go through to go from concept
to something a little bit more tangible,

00:04:56.470 --> 00:04:59.870
a little bit more real,
and then finally to reality.

00:05:05.950 --> 00:05:09.800
All right, so what is that going
to require on your part?

00:05:09.980 --> 00:05:14.430
Well, the first part of what it's going
to require on your part is a change

00:05:14.840 --> 00:05:16.690
in how you do development overall.

00:05:16.700 --> 00:05:19.320
And I'm saying these comments,
all of the comments in this session

00:05:19.320 --> 00:05:21.800
really come from my experience
working with all of the companies

00:05:21.880 --> 00:05:25.800
that I've worked with over the
last eight months for iPhone,

00:05:25.800 --> 00:05:28.340
and over the last nine years
of being at Apple working on

00:05:28.340 --> 00:05:29.920
interface design for Mac OS X.

00:05:30.260 --> 00:05:33.680
The first change you need to make
is rethink your development cycle,

00:05:33.680 --> 00:05:36.750
because the typical development
cycle for most companies that I've

00:05:36.750 --> 00:05:40.030
worked with is there's a very,
very small amount of

00:05:40.030 --> 00:05:41.530
time allocated to design.

00:05:41.540 --> 00:05:46.120
Now, maybe not that small,
but certainly the time allocated

00:05:46.300 --> 00:05:48.190
to coding is much more.

00:05:48.200 --> 00:05:50.720
There's a ton of time
allocated to writing code,

00:05:50.720 --> 00:05:54.640
and the typical experience I've got is
I meet with companies who want to get,

00:05:54.640 --> 00:05:58.200
you know, discuss interface design,
and they're all writing code.

00:05:58.200 --> 00:06:00.240
And there's a great comic strip.

00:06:00.240 --> 00:06:02.360
I saw one time years ago,
and I think I've shared

00:06:02.360 --> 00:06:04.350
this on stage before,
there's a bunch of guys

00:06:04.360 --> 00:06:07.130
sitting at a computer,
at computers, clearly programmers,

00:06:07.220 --> 00:06:10.610
and the manager's going out the door,
and he goes, "You guys start coding,

00:06:10.610 --> 00:06:12.180
and I'll find out what
they want," you know,

00:06:12.180 --> 00:06:13.610
and he's kind of going out the door.

00:06:13.630 --> 00:06:16.700
And so there's a natural
tendency among engineers,

00:06:16.700 --> 00:06:19.830
among all of us,
to quickly get to brass tacks and go,

00:06:19.920 --> 00:06:22.240
"Oh, what's the API," and get going.

00:06:22.260 --> 00:06:26.040
And the key thing for iPhone,
creating something great on iPhone,

00:06:26.040 --> 00:06:28.660
is to change that and
dramatically increase the

00:06:28.800 --> 00:06:30.180
amount of time that you put in.

00:06:30.290 --> 00:06:31.760
So I think that's the key thing
that I've been working on.

00:06:31.760 --> 00:06:32.760
And then I want to make sure
that's a part of the process.

00:06:32.760 --> 00:06:33.400
So I'm going to go ahead and go
ahead and talk to you about this.

00:06:33.400 --> 00:06:34.500
So I'm going to go ahead
and talk about this.

00:06:34.500 --> 00:06:35.690
I'm going to go ahead
and talk about this.

00:06:35.760 --> 00:06:36.850
And then I'm going to talk about this.

00:06:36.860 --> 00:06:38.820
So I'm going to go ahead
and talk about this.

00:06:39.230 --> 00:06:43.330
All right, so the process of going from
concept to reality is this.

00:06:43.330 --> 00:06:45.450
We're going to go through
these four stages this morning,

00:06:45.450 --> 00:06:47.930
and I want to explain each
one of these in detail.

00:06:48.040 --> 00:06:49.020
So get ready to take notes.

00:06:49.190 --> 00:06:52.530
We're going to move through
a lot of content really fast.

00:06:52.760 --> 00:06:57.400
All right, the first thing to do is to
familiarize yourself with iPhone.

00:06:57.530 --> 00:07:00.180
And this is accomplished by
basically living with the device.

00:07:00.340 --> 00:07:04.440
It is key that everybody who
is on your design team spends

00:07:04.550 --> 00:07:05.900
time with iPhone or iPod Touch.

00:07:05.970 --> 00:07:10.140
I can't tell you how many times I've gone
into meetings where the primary coders

00:07:10.520 --> 00:07:13.630
have an iPhone because they needed one,
or they had one already and

00:07:13.630 --> 00:07:15.700
they convinced management
to do an iPhone product,

00:07:15.700 --> 00:07:18.570
and the rest of the team is sitting
around the table interested in Apple's

00:07:18.570 --> 00:07:20.870
feedback on what they should do,
and none of them have ever

00:07:20.870 --> 00:07:22.580
really interacted with an iPhone.

00:07:22.600 --> 00:07:27.110
So it is vital that everybody on your
design team have played with iPhone,

00:07:27.110 --> 00:07:30.160
shared content with it,
listened to music on it,

00:07:30.160 --> 00:07:33.530
received calls on it,
browsed the web and experienced

00:07:33.530 --> 00:07:35.600
what it's like to be on iPhone.

00:07:37.350 --> 00:07:40.070
The second thing that's important
is to understand the characteristics

00:07:40.210 --> 00:07:41.820
that make iPhone different.

00:07:41.900 --> 00:07:45.940
So one of those is the fact that
there is no mouse on iPhone.

00:07:46.020 --> 00:07:50.020
Thankfully, the interaction with the
iPhone is through the finger.

00:07:50.020 --> 00:07:52.780
So it's this multi-touch technology,
and it's gestures and tapping

00:07:52.780 --> 00:07:54.720
on screen get things done.

00:07:54.800 --> 00:07:56.900
That's very different from what
you might have been familiar

00:07:56.900 --> 00:07:58.450
with designing for the desktop.

00:07:58.560 --> 00:08:01.620
For the desktop, you've got,
whether it's a web app on the browser,

00:08:01.620 --> 00:08:03.940
whether it's a native app on the desktop,
you've got the mouse

00:08:04.140 --> 00:08:05.200
tracking the scroll bar.

00:08:05.450 --> 00:08:07.300
You've got rollover
effects that you can do.

00:08:07.300 --> 00:08:10.470
You've got drag and drop with key,
keyboard modifiers,

00:08:10.540 --> 00:08:11.980
all kinds of things you
can do with a mouse.

00:08:12.240 --> 00:08:14.100
You cannot do those things on iPhone.

00:08:14.140 --> 00:08:16.340
As soon as you design for iPhone,
you need to keep that in mind.

00:08:16.340 --> 00:08:18.380
That's a big difference.

00:08:18.940 --> 00:08:21.350
Another thing to keep in mind,
another unique characteristic of

00:08:21.350 --> 00:08:24.160
iPhone is the fact that you've
got an on-screen keyboard,

00:08:24.160 --> 00:08:27.800
but it's not the same as the primary
keyboard you'd have on the desktop.

00:08:27.800 --> 00:08:31.300
And that changes dramatically how
users interact with your application.

00:08:31.300 --> 00:08:34.910
If you're heavily keyboard
intensive on the desktop,

00:08:35.080 --> 00:08:38.880
you have to change things dramatically
to work properly on iPhone,

00:08:38.880 --> 00:08:41.530
because entering the same amount
of data with a finger on an

00:08:41.530 --> 00:08:44.140
iPhone is not nearly as efficient.

00:08:46.850 --> 00:08:48.780
Another characteristic
of iPhone development,

00:08:48.780 --> 00:08:50.700
or characteristic that
makes iPhone different,

00:08:50.800 --> 00:08:52.600
is the fact that the
screen size is different,

00:08:52.600 --> 00:08:53.090
obviously.

00:08:53.200 --> 00:08:55.320
Things you can get away with,
the amount of real estate

00:08:55.320 --> 00:08:58.280
you've got on the desktop,
is not nearly what you've got on iPhone.

00:08:58.280 --> 00:09:03.090
And while iPhone is a 480 by 320 screen,
and it's 160 DPI,

00:09:03.090 --> 00:09:07.300
it can do a lot of things on this screen,
it absolutely limits what you

00:09:07.300 --> 00:09:10.520
can do in terms of visual design,
in many ways.

00:09:10.580 --> 00:09:13.470
But it doesn't limit it,
it just constrains the amount

00:09:13.470 --> 00:09:15.260
of stuff you can put on screen.

00:09:15.280 --> 00:09:18.380
It actually, given its characteristics
of that small screen,

00:09:18.380 --> 00:09:22.280
lets you do some really interesting
things visually to add richness

00:09:22.280 --> 00:09:25.190
and a lot of value there.

00:09:27.820 --> 00:09:30.660
In addition,
the last set of characteristics of the

00:09:30.660 --> 00:09:34.360
iPhone that are unique are the fact that
you've got a camera built into iPhone.

00:09:34.520 --> 00:09:37.570
This means that you can do things with
the camera within your application

00:09:37.850 --> 00:09:41.120
and let users take photos and
do something with them relative

00:09:41.190 --> 00:09:42.500
to what your application does.

00:09:42.610 --> 00:09:47.600
In addition, you've got location,
so you can add the where variable and

00:09:47.600 --> 00:09:51.920
think about how the location of your
user affects how your application works.

00:09:52.080 --> 00:09:54.810
Maybe they care about
where other users are,

00:09:54.810 --> 00:09:56.170
this type of thing.

00:09:57.030 --> 00:09:57.630
Wi-Fi.

00:09:57.900 --> 00:10:00.810
Wi-Fi means that you can create
Bonjour-enabled applications.

00:10:01.000 --> 00:10:03.980
Maybe you're a chess game and you can
start playing with other players nearby.

00:10:03.980 --> 00:10:07.720
Maybe you can hook up and
exchange information with other

00:10:07.720 --> 00:10:09.120
users very quickly using Wi-Fi.

00:10:09.120 --> 00:10:11.900
Bonjour is a great technology
for doing this kind of thing,

00:10:11.900 --> 00:10:15.260
and the fact that your iPhone is
always connected means that your

00:10:15.350 --> 00:10:18.700
application can get data and keep
things live and dynamic and interesting

00:10:18.820 --> 00:10:22.530
for your user in a way that you can't
necessarily in a disconnected device.

00:10:23.280 --> 00:10:26.300
And the last characteristic that's
interesting that makes iPhone

00:10:26.300 --> 00:10:29.100
different from the desktop is the fact
that you've got this accelerometer.

00:10:29.100 --> 00:10:33.220
So you saw some of the demos in Keynote
where people were driving Chromag Rally,

00:10:33.220 --> 00:10:37.440
and the accelerometer lets you do a
lot of interesting things with input.

00:10:39.600 --> 00:10:42.500
So a lot of characteristics
for iPhone that make it unique.

00:10:42.500 --> 00:10:47.440
A lot of things that you need to consider
before you even begin the design process.

00:10:47.460 --> 00:10:50.050
And that's the familiarization stage.

00:10:50.570 --> 00:10:52.300
Next stage is to conceptualize.

00:10:52.380 --> 00:10:54.850
Once you know what the iPhone is,
and you know what users

00:10:54.910 --> 00:10:58.040
are experiencing with it,
you have an understanding of what to do.

00:10:58.040 --> 00:11:01.280
Now is the stage where you can
get going with conceptualization,

00:11:01.280 --> 00:11:05.410
which is really turning your
ideas into reality in many ways,

00:11:05.410 --> 00:11:08.480
or at least beginning that process.

00:11:08.940 --> 00:11:11.970
All right, and this is done by
defining your solution,

00:11:12.090 --> 00:11:15.440
defining your feature set,
determining what your users are-- how

00:11:15.440 --> 00:11:18.670
they're perceiving that feature set,
and then developing

00:11:18.670 --> 00:11:20.060
some initial sketches.

00:11:20.100 --> 00:11:22.780
Let's talk through each
of these one by one.

00:11:25.440 --> 00:11:27.320
When you begin the process
of designing for iPhone,

00:11:27.320 --> 00:11:29.240
you're going to come
from one of two places.

00:11:29.300 --> 00:11:31.900
You're either going to
have a great new idea,

00:11:31.960 --> 00:11:34.680
or you're going to take an
application that's already

00:11:34.680 --> 00:11:37.930
on the desktop or on the web,
and you're going to bring it to iPhone.

00:11:38.050 --> 00:11:40.080
So let's begin with the new idea.

00:11:40.150 --> 00:11:43.840
Let's say we come up with this great idea
to do an interior decorating application.

00:11:43.910 --> 00:11:46.420
So we scratch it on a napkin,
and now the question is, well,

00:11:46.420 --> 00:11:48.000
what are we going to do with this thing?

00:11:48.000 --> 00:11:49.000
What's it going to do?

00:11:49.060 --> 00:11:54.560
And so the natural next step
is a deluge of features.

00:11:54.620 --> 00:11:56.840
And so we can do all things
like layout planning.

00:11:56.840 --> 00:12:00.140
Like for example, I mean,
we could do floor plan layout.

00:12:00.140 --> 00:12:03.150
We could have this app, and we could move
chairs around on screen.

00:12:03.390 --> 00:12:04.970
We could place tables.

00:12:05.250 --> 00:12:07.960
We could have a palette of furniture
on the side and pick things,

00:12:08.060 --> 00:12:09.400
just like Enigma, the game.

00:12:09.400 --> 00:12:10.580
You can move pieces out.

00:12:10.650 --> 00:12:12.880
That'd be a cool feature.

00:12:13.180 --> 00:12:15.920
We could do things like
paint color coding,

00:12:15.920 --> 00:12:18.840
and we could manage molding.

00:12:18.840 --> 00:12:21.520
We could have a molding
chooser for kitchen cabinetry.

00:12:21.520 --> 00:12:22.860
And we could go on and on and on.

00:12:22.860 --> 00:12:27.170
And there's lots of stuff-- tile
management and color management,

00:12:27.270 --> 00:12:31.390
paint choices, fabric selection,
curtain selection, light fixtures, right?

00:12:31.470 --> 00:12:33.540
And it goes on and on and on.

00:12:33.550 --> 00:12:37.200
And all of this is great,
because you have to start with something.

00:12:37.250 --> 00:12:40.420
You've got to have this idea,
and then you're going to build a really

00:12:40.490 --> 00:12:44.000
great collection of features that you're
going to decide at some point whether

00:12:44.000 --> 00:12:46.120
or not you're going to keep them or not.

00:12:46.800 --> 00:12:50.440
The second way of coming to iPhone
is you've got an app from the desktop

00:12:51.210 --> 00:12:52.740
that you want to bring to iPhone.

00:12:52.910 --> 00:12:54.940
Now of course you can't port
the application to iPhone.

00:12:54.940 --> 00:12:56.940
The code can certainly
move over in many ways.

00:12:56.980 --> 00:13:00.220
You've seen some examples of that
over the course of the week so far.

00:13:00.330 --> 00:13:03.990
But bringing an application
from the desktop to iPhone

00:13:03.990 --> 00:13:06.540
requires a lot of design applied.

00:13:06.640 --> 00:13:08.950
So let's take an application
that we brought to iPhone and

00:13:08.950 --> 00:13:10.010
look at that as an example.

00:13:10.360 --> 00:13:12.290
So this is iPhoto.

00:13:12.500 --> 00:13:15.380
Well, iPhoto has a ton of features,
right?

00:13:15.780 --> 00:13:18.440
And if you're bringing an app
from the desktop to iPhone,

00:13:18.510 --> 00:13:20.740
you're going to inherit those features.

00:13:20.800 --> 00:13:22.510
And the question is,
how are you going to decide

00:13:22.520 --> 00:13:25.000
which ones to put on iPhone?

00:13:26.840 --> 00:13:29.260
So you either brainstormed an idea,
you've got a great idea,

00:13:29.260 --> 00:13:31.030
and you brainstormed a bunch of features,
and you've got a bunch

00:13:31.070 --> 00:13:33.770
of features over here,
or you're bringing an app from Mac OS X,

00:13:33.900 --> 00:13:36.730
or from Linux or Windows, and you've got,
from the desktop,

00:13:36.730 --> 00:13:38.760
and you've got a pile of
features that you inherited.

00:13:38.760 --> 00:13:40.150
What are you going to do?

00:13:40.160 --> 00:13:42.370
Well, I'd like to caution you,
first of all,

00:13:42.370 --> 00:13:44.460
that all of those features are wanted.

00:13:44.460 --> 00:13:47.310
There's a bounty on them,
and we want to pretend that they are,

00:13:47.310 --> 00:13:50.370
not, we don't want to pretend,
we want to go after these features,

00:13:50.370 --> 00:13:53.040
because that's not what
you're going to be building.

00:13:53.540 --> 00:13:56.990
You're going to use those features
to enhance or augment or help

00:13:56.990 --> 00:14:00.170
define what your solution is,
but that's not where you finish

00:14:00.170 --> 00:14:01.660
the conceptual design phase.

00:14:01.720 --> 00:14:04.210
So these features are wanted,
and that's not the

00:14:04.210 --> 00:14:05.640
direction we want to go.

00:14:05.640 --> 00:14:08.650
So we need to stop at that point,
once you've brainstormed

00:14:08.650 --> 00:14:11.790
or inherited these things,
and focus yourselves back on the

00:14:11.790 --> 00:14:15.120
need to define a solution and
not a collection of features.

00:14:15.120 --> 00:14:18.180
Applications should not
be hosts for features.

00:14:20.740 --> 00:14:23.480
Well, how do you decide,
of the features you've got,

00:14:23.480 --> 00:14:27.120
how do you decide which ones to
bring to your iPhone application?

00:14:27.390 --> 00:14:29.500
We do that with an application
definition statement.

00:14:29.500 --> 00:14:32.180
If you've been to WWDC before,
you've seen me on stage before,

00:14:32.180 --> 00:14:34.280
you've heard me talk
about this for Mac OS X,

00:14:34.330 --> 00:14:36.800
it's completely applicable to iPhone.

00:14:36.860 --> 00:14:40.510
The key thing here is that it's
important for you to have this statement,

00:14:40.580 --> 00:14:42.970
a single statement,
that defines what your

00:14:43.050 --> 00:14:44.680
application is going to do.

00:14:44.720 --> 00:14:47.660
This statement is going to
capture your primary focus.

00:14:47.700 --> 00:14:50.130
It's going to capture the primary,
the core, you know,

00:14:50.340 --> 00:14:52.710
the core set of functionality
that your application is

00:14:52.780 --> 00:14:54.260
going to bring to the user.

00:14:54.280 --> 00:14:57.300
And it's going to basically enumerate
and define all of those things for you.

00:14:57.300 --> 00:14:59.760
As well as identify your user audience.

00:14:59.800 --> 00:15:02.310
Because it's very different,
your application will be very

00:15:02.400 --> 00:15:06.180
different if it's for pilots,
as opposed to teachers,

00:15:06.190 --> 00:15:09.080
as opposed to presenters, or biologists,
right?

00:15:09.080 --> 00:15:12.020
An application for those four different
audiences is going to be very,

00:15:12.030 --> 00:15:12.840
very different.

00:15:12.850 --> 00:15:17.250
And you take a thing like iPhoto,
and you say iPhoto for

00:15:17.350 --> 00:15:21.150
amateur photographers,
versus iPhoto for professional

00:15:21.150 --> 00:15:24.890
medical researchers,
that's a different application.

00:15:25.980 --> 00:15:27.110
So let's go through this exercise.

00:15:27.200 --> 00:15:32.700
Let's go through this process
of bringing iPhone-- sorry,

00:15:32.790 --> 00:15:36.970
iPhoto for Mac OS X to
the iPhone with photos.

00:15:37.580 --> 00:15:42.390
So iPhoto on Mac OS X has an application
definition statement that reads this:

00:15:42.510 --> 00:15:46.760
"Easy to use digital photo editing,
organizing and sharing for casual

00:15:46.760 --> 00:15:48.890
and amateur photographers." Right?

00:15:49.180 --> 00:15:51.730
That's a great,
succinct statement defining

00:15:51.730 --> 00:15:53.590
what that application does.

00:15:53.760 --> 00:15:55.300
And if you dig deeper
into that application,

00:15:55.300 --> 00:15:57.720
it's got a lot of features,
a lot of menu commands,

00:15:57.960 --> 00:16:03.160
a lot of palettes, a lot of toolbars,
and yet it's bundled on the Mac,

00:16:03.160 --> 00:16:05.410
and most people use iPhoto extensively.

00:16:05.420 --> 00:16:09.140
Most Mac users spend a
lot of time in iPhoto.

00:16:09.140 --> 00:16:12.140
And in fact,
when you dig down into what they do,

00:16:12.140 --> 00:16:16.760
because ultimately you're after the
core feature set or the core value

00:16:16.760 --> 00:16:21.310
add that this product provides,
turns out that most users of iPhoto

00:16:21.310 --> 00:16:26.540
actually spend most of their time
in iPhoto sharing their content.

00:16:26.540 --> 00:16:28.400
It's not so much about editing.

00:16:28.400 --> 00:16:31.820
It's a little bit about organizing,
but mostly it's about sharing.

00:16:31.820 --> 00:16:35.950
Creating full screen previews,
so looking at things yourself.

00:16:36.130 --> 00:16:37.660
Slideshows with music.

00:16:37.910 --> 00:16:39.120
Calendars with photos.

00:16:39.140 --> 00:16:40.380
Photos on it for family members.

00:16:40.910 --> 00:16:41.890
Coffee table books.

00:16:41.900 --> 00:16:43.890
Publishing to .Mac gallery.

00:16:43.900 --> 00:16:45.230
And then photo casting.

00:16:45.240 --> 00:16:47.890
A big part of iPhoto is sharing.

00:16:47.900 --> 00:16:53.130
And that in fact is the primary focus
for most users within this application.

00:16:53.140 --> 00:16:55.040
So that's a key point, right?

00:16:55.400 --> 00:16:59.900
Take your existing app on the desktop and
analyze it from this perspective and say,

00:16:59.900 --> 00:17:01.220
what is the core functionality?

00:17:01.220 --> 00:17:04.610
What do users spend most of their
time doing in this application?

00:17:04.710 --> 00:17:12.470
And then go to the solution you've
defined for your iPhone application,

00:17:12.470 --> 00:17:15.560
which in this case is Photos,
and finalize your application

00:17:15.560 --> 00:17:18.760
definition statement based
on the primary functionality,

00:17:18.930 --> 00:17:23.390
the core set of capabilities of
the application on the desktop.

00:17:23.490 --> 00:17:27.190
And in essence,
it's easy to use digital photo sharing.

00:17:27.370 --> 00:17:29.340
For iPhone users, that's it.

00:17:29.360 --> 00:17:32.540
That's all it's going to do,
and that's who it's for.

00:17:35.060 --> 00:17:36.420
Now at this point,
you've got an application

00:17:36.420 --> 00:17:37.750
definition statement,
you're going to start

00:17:37.840 --> 00:17:38.840
to boil features down.

00:17:38.840 --> 00:17:41.320
You're going to start taking these
two sets of these groups of features,

00:17:41.320 --> 00:17:43.240
depending on which side
of the fence you are,

00:17:43.240 --> 00:17:45.390
if you're a new app or you've
inherited an application,

00:17:45.480 --> 00:17:48.000
and you're going to run them through
that application definition statement,

00:17:48.000 --> 00:17:52.240
and you're going to pick the key
features that are most frequently

00:17:52.610 --> 00:17:57.140
used by the majority of users
that are appropriate for mobile.

00:17:57.570 --> 00:18:00.470
There's a lot of stuff that a
desktop application does that doesn't

00:18:00.470 --> 00:18:02.150
make sense in the mobile context.

00:18:02.320 --> 00:18:03.380
It's too complicated.

00:18:03.600 --> 00:18:06.720
For example, floor plan layout,
CAD functionality.

00:18:06.730 --> 00:18:08.700
There are certain things you're
not going to do on the iPhone,

00:18:08.700 --> 00:18:12.280
because most people just pull an iPhone
out of their pocket or their purse,

00:18:12.300 --> 00:18:14.500
they interact with it
for about 15 seconds,

00:18:14.500 --> 00:18:16.960
and then they move on to the next
application or they put it back

00:18:16.960 --> 00:18:18.600
and they keep going with their day.

00:18:18.600 --> 00:18:20.960
And that happens a lot
over the course of the day.

00:18:20.960 --> 00:18:24.070
So everything that you define for iPhone,
every feature you consider

00:18:24.070 --> 00:18:26.010
putting on the iPhone,
has to be run through

00:18:26.010 --> 00:18:27.200
that kind of a filter.

00:18:27.280 --> 00:18:29.000
What do most of my users want?

00:18:29.060 --> 00:18:31.280
What are they going to
be using most frequently?

00:18:31.280 --> 00:18:34.360
And is this appropriate
for a mobile context?

00:18:35.920 --> 00:18:38.700
So let's do that with the
feature set for iPhoto.

00:18:38.770 --> 00:18:41.960
Let's run it through an
application definition statement,

00:18:42.020 --> 00:18:45.760
the one that we created for
the iPhone version of this,

00:18:45.780 --> 00:18:47.590
and let's see what it
does to the feature set.

00:18:47.700 --> 00:18:50.400
So let's go back to this huge
set of features for iPhoto.

00:18:50.400 --> 00:18:53.690
And you can tell that features
don't define the big picture.

00:18:53.750 --> 00:18:55.100
They don't show you the big picture.

00:18:55.200 --> 00:18:57.320
They just really are a list of stuff.

00:18:57.370 --> 00:19:01.920
Now let's bring our definition
statement in for the iPhone

00:19:01.920 --> 00:19:03.040
application we want to create.

00:19:03.050 --> 00:19:07.470
So digital photo sharing
for iPhone users.

00:19:07.700 --> 00:19:10.680
Let's move that to the top of the
screen and let's filter things through.

00:19:10.740 --> 00:19:13.270
And what you get is,
as you go one by one, you say,

00:19:13.270 --> 00:19:14.180
is this about sharing?

00:19:14.180 --> 00:19:14.370
No.

00:19:14.570 --> 00:19:15.300
Is this about sharing?

00:19:15.300 --> 00:19:15.490
No.

00:19:15.580 --> 00:19:16.340
Is this about sharing?

00:19:16.340 --> 00:19:16.560
No.

00:19:16.580 --> 00:19:17.920
Is this for iPhone users?

00:19:17.960 --> 00:19:21.150
Mm, that's not a feature that's going
to work in the mobile context,

00:19:21.150 --> 00:19:21.580
so no.

00:19:21.630 --> 00:19:23.840
And you just go through
one by one by one by one,

00:19:23.900 --> 00:19:28.760
and what you end up with is a
dramatically smaller set of features.

00:19:28.800 --> 00:19:30.950
Now we're making progress.

00:19:32.070 --> 00:19:34.520
And in fact,
what we did for photos on iPhone

00:19:34.840 --> 00:19:37.310
is we created an application
that lets you look at albums,

00:19:37.310 --> 00:19:41.700
drill down into those albums,
and then go into full screen preview

00:19:41.700 --> 00:19:44.320
and either flick through them or
start a slideshow with a little

00:19:44.320 --> 00:19:47.240
bit of music playing and some
transitions that you can define.

00:19:47.240 --> 00:19:50.430
And that's pretty much it,
except for the fact that there is a

00:19:50.430 --> 00:19:54.480
toolbar at the bottom that lets you
forward those photos on to someone.

00:19:54.480 --> 00:19:56.470
And that's another component of sharing,
right?

00:19:56.480 --> 00:19:59.000
You can turn it into a context photo,
you can set it as wallpaper,

00:19:59.200 --> 00:20:02.600
or you can put it up to .Mac
Mobile Me or whatever you're going to do,

00:20:02.750 --> 00:20:04.300
but it's all about sharing.

00:20:04.300 --> 00:20:08.500
Every feature of photos on
iPhone is about sharing.

00:20:10.180 --> 00:20:15.470
Okay, now you've defined your solution,
you've got a clear

00:20:15.530 --> 00:20:18.200
statement about what it is,
you've boiled your features down so

00:20:18.200 --> 00:20:21.100
you've got a much smaller pile of
features that you're going to work with.

00:20:21.240 --> 00:20:25.100
Now the question is,
how does the user perceive this solution?

00:20:25.110 --> 00:20:28.310
What are they thinking of
when they consider something

00:20:28.440 --> 00:20:30.320
like interior decorating?

00:20:32.230 --> 00:20:33.860
Let's go back to the idea for a second.

00:20:34.010 --> 00:20:36.090
Take a moment to think
about interior decorating.

00:20:36.100 --> 00:20:38.370
What pops into mind for you?

00:20:40.230 --> 00:20:42.790
This is the exercise you need to
go through with a cross-functional

00:20:42.880 --> 00:20:46.000
team of folks in your organization
to look at your solution,

00:20:46.030 --> 00:20:48.520
look at your collection of features,
and sort of get a sense for

00:20:48.520 --> 00:20:51.850
what that's going to be,
and then say, all right,

00:20:51.930 --> 00:20:53.640
how are our users going
to think about this?

00:20:53.890 --> 00:20:57.840
What are immediately what comes to
mind for them in terms of objects,

00:20:57.840 --> 00:21:00.940
tasks,
relationships between these things,

00:21:00.940 --> 00:21:06.370
commonalities between elements on screen,
or between these objects and their mental

00:21:06.380 --> 00:21:09.090
model of what they're trying to build?

00:21:09.760 --> 00:21:13.600
This is a great exercise that I've told,
I have no idea how many companies,

00:21:13.600 --> 00:21:16.220
I mean, hundreds of companies I've gone
through this exercise with.

00:21:16.280 --> 00:21:18.820
Just get some pizza,
lock people away in a room for

00:21:18.820 --> 00:21:21.980
three hours on a Thursday afternoon,
and say, okay, guys,

00:21:21.980 --> 00:21:24.040
here's the definition statement.

00:21:24.040 --> 00:21:25.550
Here's what we're going to build.

00:21:25.560 --> 00:21:27.260
We're thinking of building
sort of conceptually.

00:21:27.260 --> 00:21:29.020
How do our users think about this?

00:21:29.040 --> 00:21:31.090
And once you've got this,
you're going to end up with

00:21:31.090 --> 00:21:32.350
a result something like this.

00:21:32.420 --> 00:21:34.750
So if you think of interior
decorating for a moment again,

00:21:34.810 --> 00:21:37.070
you're going to end up with
something most users think of,

00:21:37.070 --> 00:21:39.310
things like fabrics, paints, wallpaper.

00:21:39.700 --> 00:21:43.490
lights, furniture, tiles, right?

00:21:43.760 --> 00:21:47.160
The next thing to do is ask yourself,
what do these things have in common?

00:21:47.160 --> 00:21:50.360
Because often understanding the
commonality of these things is

00:21:50.360 --> 00:21:52.640
going to get you to the next stage,
which is identifying things

00:21:52.940 --> 00:21:54.200
users are going to do with this.

00:21:54.200 --> 00:21:56.560
So what do these things
all have in common?

00:21:57.460 --> 00:21:59.560
Well, it turns out color is
what they have in common.

00:21:59.600 --> 00:22:02.030
It's a great commonality
between these objects.

00:22:02.170 --> 00:22:05.440
And so once you've defined
this commonality of color,

00:22:05.500 --> 00:22:09.080
then you can do an interesting exercise,
which is to say, all right, well,

00:22:09.080 --> 00:22:11.280
what things do you do with color?

00:22:11.620 --> 00:22:14.440
What things could we do in
this application with color?

00:22:14.510 --> 00:22:15.840
We can organize it.

00:22:15.890 --> 00:22:17.440
We can annotate it.

00:22:17.480 --> 00:22:18.210
We can blend it.

00:22:18.260 --> 00:22:18.980
We can rate it.

00:22:19.040 --> 00:22:19.790
We can share it.

00:22:19.800 --> 00:22:22.060
We could do a community
of color palettes,

00:22:22.060 --> 00:22:25.960
and we could push out certain
collections of colors for people to use.

00:22:26.020 --> 00:22:28.180
Now, certainly,
you might not put that in the app,

00:22:28.240 --> 00:22:29.070
but it's an idea.

00:22:29.280 --> 00:22:32.350
And so the exercise is to identify
primary objects and tasks,

00:22:32.640 --> 00:22:34.910
understand commonalities
between these things,

00:22:34.910 --> 00:22:37.940
and start to pull these things
together and prioritize that list,

00:22:38.070 --> 00:22:41.080
and decide what is it
that you're going to do,

00:22:41.100 --> 00:22:43.790
which one of those are you
going to actually implement.

00:22:44.080 --> 00:22:45.380
Great exercise.

00:22:45.440 --> 00:22:48.480
And of course,
the last step is to turn everything

00:22:48.480 --> 00:22:52.160
that we've gotten so far-- our
primary definition statement,

00:22:52.210 --> 00:22:55.040
our collection of features,
our understanding of how the user

00:22:55.040 --> 00:22:58.610
sees these things-- turn those
into some preliminary sketches.

00:22:58.710 --> 00:23:01.630
So here's the interior decorating
application sketches and

00:23:01.630 --> 00:23:03.780
some interesting stuff there.

00:23:03.840 --> 00:23:07.340
We've even got some paint
mixing going on with the finger.

00:23:07.410 --> 00:23:10.280
And we've got some paint cans
going on over here on the right.

00:23:10.390 --> 00:23:11.520
So some great ideas.

00:23:11.520 --> 00:23:12.940
It's a good place to start.

00:23:13.010 --> 00:23:14.440
But you've got enough material.

00:23:14.440 --> 00:23:18.930
You've got enough raw goods at this point
to start building something preliminary.

00:23:18.960 --> 00:23:20.440
And this is where you need to be.

00:23:20.510 --> 00:23:23.620
And then you can iterate on some of
these with what you've got already.

00:23:23.800 --> 00:23:26.040
And you can end up with something
a little bit more solid,

00:23:26.110 --> 00:23:29.600
maybe a little bit more defined,
a little clearer,

00:23:29.600 --> 00:23:32.310
which is more of a blueprint model.

00:23:35.330 --> 00:23:39.270
And at this point,
I'd like to invite a company on stage who

00:23:39.280 --> 00:23:43.840
went through this process in preparation
for the launch of the iPhone SDK.

00:23:43.840 --> 00:23:46.730
We had them on campus,
and they worked to develop an iPhone app,

00:23:46.730 --> 00:23:50.360
and I'd like to invite AOL on stage
to talk about their experience.

00:23:56.970 --> 00:23:59.860
Thank you, John.

00:23:59.990 --> 00:24:00.330
Good morning.

00:24:00.340 --> 00:24:02.130
I'm Todd Branham from AOL.

00:24:02.290 --> 00:24:04.680
When we first got a
hold of the iPhone SDK,

00:24:05.030 --> 00:24:08.930
we knew immediately we wanted
to bring AIM to the iPhone.

00:24:09.050 --> 00:24:14.310
I've been asked to spend a few minutes
to talk about the design process we used.

00:24:15.990 --> 00:24:18.260
At first, we were really concerned
about our schedule,

00:24:18.260 --> 00:24:20.740
since we were really
starting from scratch.

00:24:20.850 --> 00:24:23.330
But in retrospect,
I think this is actually

00:24:23.330 --> 00:24:24.600
quite liberating.

00:24:26.550 --> 00:24:28.980
So the first thing we did was
we took a look at our existing

00:24:28.980 --> 00:24:30.610
AIM product on the desktop.

00:24:30.730 --> 00:24:33.700
Here's a summary of some of its features.

00:24:33.770 --> 00:24:35.740
This is just a subset.

00:24:35.790 --> 00:24:38.970
I'm pretty sure you could
send IMs with it as well.

00:24:41.040 --> 00:24:43.220
It didn't seem likely that
we're going to bring all of

00:24:43.220 --> 00:24:45.160
these features to the iPhone.

00:24:45.160 --> 00:24:47.600
And even if we did,
it didn't seem like it

00:24:47.600 --> 00:24:49.570
would make it more valuable.

00:24:49.840 --> 00:24:53.070
So we started to think about
AIM on the iPhone as being an

00:24:53.070 --> 00:24:56.360
AIM experience away from your desktop.

00:24:56.480 --> 00:24:59.420
It didn't have to replace the desktop.

00:25:02.320 --> 00:25:05.600
What makes the iPhone so amazing to me
is the number of tasks I can accomplish

00:25:05.600 --> 00:25:10.000
while standing in line somewhere,
just in a few seconds.

00:25:10.150 --> 00:25:14.990
So it was important that we kept
our application quick and simple.

00:25:15.500 --> 00:25:18.160
So what features do we really need?

00:25:18.160 --> 00:25:20.050
We kept it just the basics.

00:25:20.250 --> 00:25:24.480
A buddy list, conversations,
and buddy profiles.

00:25:25.820 --> 00:25:28.780
Then we took a look at existing
applications running on the

00:25:28.780 --> 00:25:33.760
iPhone to try to identify common
UI concepts and paradigms.

00:25:35.270 --> 00:25:37.900
Some people have hundreds of
buddies on their buddy list.

00:25:38.010 --> 00:25:40.890
So we considered using the concept
of favorites or favorite buddies.

00:25:40.900 --> 00:25:44.320
So you can have a subset of buddies
that are more relevant to you

00:25:44.320 --> 00:25:46.230
while you're using your phone.

00:25:47.370 --> 00:25:51.320
Then we again looked at our desktop
products and tried to identify

00:25:51.320 --> 00:25:55.810
how platform differences would
change how the user would use AIM.

00:25:57.040 --> 00:25:59.860
For example, on the desktop,
typically a user is asked

00:26:00.020 --> 00:26:02.840
to manage several windows,
a skinny buddy list,

00:26:02.870 --> 00:26:05.570
or one or more conversation windows.

00:26:07.380 --> 00:26:13.180
Then we sat down and started sketching
what our AIM application might look like.

00:26:13.240 --> 00:26:16.230
Doing this with paper and pencil
allowed us to quickly and cheaply

00:26:16.400 --> 00:26:21.250
iterate on our ideas without committing
ourselves to a course of action.

00:26:22.830 --> 00:26:26.310
Using our UI concept document,
or our UI concept sketches,

00:26:26.360 --> 00:26:31.970
we were able to quickly identify the core
objects required to implement the UI.

00:26:34.060 --> 00:26:38.940
Only after we defined our feature set,
had a concept UI,

00:26:38.940 --> 00:26:43.080
and identified our core objects
were we ready to start coding.

00:26:45.160 --> 00:26:49.360
We spent a lot of time thinking about
how to build aim for the iPhone.

00:26:49.360 --> 00:26:52.570
And what we learned was that
building a conceptual model

00:26:52.570 --> 00:26:54.980
prior to coding really pays off.

00:26:55.070 --> 00:26:58.730
We learned that we needed to
keep our application very simple.

00:26:59.210 --> 00:27:01.890
and we learned that we shouldn't
let existing code or application

00:27:01.890 --> 00:27:03.940
design direct our thinking.

00:27:04.070 --> 00:27:08.820
Take this chance to rethink
your application for iPhone.

00:27:08.890 --> 00:27:10.290
Thank you.

00:27:17.470 --> 00:27:21.390
Okay, great example,
great learning experience for both

00:27:21.390 --> 00:27:23.900
Apple and for the folks at AOL.

00:27:24.010 --> 00:27:27.150
So that's the conceptual design stage,
and there's a lot to do there,

00:27:27.160 --> 00:27:29.360
and we haven't started coding.

00:27:30.080 --> 00:27:31.470
Next stage is to realize.

00:27:31.640 --> 00:27:33.900
You take your preliminary sketches,
you take everything,

00:27:33.900 --> 00:27:36.690
all these raw ingredients that
you've pulled together and you've

00:27:36.840 --> 00:27:40.050
got a clear direction with,
and you're going to turn these

00:27:40.050 --> 00:27:43.090
things into something real,
but you're not going to start coding yet.

00:27:45.180 --> 00:27:47.620
So we're going to do this by
assessing the application type,

00:27:47.710 --> 00:27:49.740
your application type,
because that's going to do,

00:27:49.750 --> 00:27:51.780
it's going to give you a
direction that you need to go.

00:27:51.780 --> 00:27:53.200
It's going to help to find a
direction you're going to go.

00:27:53.200 --> 00:27:55.730
The second thing we're going
to do in this stage is to

00:27:55.960 --> 00:27:57.210
develop a navigation model.

00:27:57.500 --> 00:28:00.250
And thirdly, you're going to design
your specific screens.

00:28:00.250 --> 00:28:01.820
So you see this progression going on.

00:28:01.820 --> 00:28:03.820
You start big,
and you're progressively getting

00:28:03.820 --> 00:28:06.410
down to more and more detail
as you go through this process.

00:28:06.420 --> 00:28:09.860
So let's begin with application type.

00:28:09.890 --> 00:28:14.480
Understanding what kind of an application
you've got on iPhone is going to help

00:28:14.480 --> 00:28:18.900
to determine the behaviors of your
application and the appearance of it.

00:28:18.930 --> 00:28:22.300
Knowing what type of application you've
got is going to help to define the

00:28:22.300 --> 00:28:24.470
visual and behavioral characteristics.

00:28:24.480 --> 00:28:26.480
This is really important.

00:28:26.480 --> 00:28:30.660
And I'm not talking about whether you're
a design application or a communications

00:28:30.670 --> 00:28:34.790
application or a social networking
application versus a mail application.

00:28:34.800 --> 00:28:36.400
That's not the kind of
application I'm talking about.

00:28:36.420 --> 00:28:42.050
I'm talking about the genre of
application that we've got on iPhone.

00:28:42.920 --> 00:28:44.970
There are basically three
types of applications.

00:28:45.060 --> 00:28:46.600
Now, this is not a hard and fast rule.

00:28:46.600 --> 00:28:49.860
This is just an exercise that helps
point you in the right direction.

00:28:49.990 --> 00:28:52.890
So don't interpret from
this that there is,

00:28:52.890 --> 00:28:55.200
like Apple has defined,
three types of applications.

00:28:55.320 --> 00:28:59.540
We're just saying that at this time,
we see sort of clearly-- there are

00:28:59.540 --> 00:29:04.040
three clearly defined application types,
being productivity, utility,

00:29:04.040 --> 00:29:05.010
and immersive.

00:29:05.110 --> 00:29:06.860
And there are certainly going
to be more in the future,

00:29:06.860 --> 00:29:07.400
I'm sure.

00:29:07.680 --> 00:29:09.720
And there are certainly
places in between these.

00:29:09.790 --> 00:29:11.300
And we'll talk about that now.

00:29:11.420 --> 00:29:14.990
So the first example is productivity,
or first type is productivity.

00:29:15.290 --> 00:29:18.910
This is the application that you
would find on iPhone called Mail.

00:29:19.090 --> 00:29:20.400
It's a great example of it.

00:29:20.520 --> 00:29:23.410
Second type is utility.

00:29:23.950 --> 00:29:29.110
Utility is just like the Stocks app,
or just like the weather application,

00:29:29.230 --> 00:29:30.670
or just like Notes maybe.

00:29:30.680 --> 00:29:33.180
Notes kind of falls into that realm.

00:29:33.280 --> 00:29:35.720
And an immersive application
would be something like an Enigmo,

00:29:35.720 --> 00:29:37.800
which was demoed in
the keynote on Monday,

00:29:38.080 --> 00:29:41.520
or any type of full screen game
that takes over the entire screen,

00:29:41.780 --> 00:29:47.600
has custom UI, and has those kinds of
behaviors and appearances.

00:29:47.720 --> 00:29:49.800
So let's talk more about these in depth.

00:29:49.860 --> 00:29:54.500
And the way to do that is we're
going to talk through a grid.

00:29:54.580 --> 00:29:58.600
But understanding the type of application
helps you to orient your design.

00:29:58.660 --> 00:30:00.590
It's going to determine--
you're going to say,

00:30:00.630 --> 00:30:02.560
I'm more like this
kind of an application.

00:30:02.560 --> 00:30:06.520
And so you can use it as a model for what
you do with your preliminary sketches.

00:30:06.520 --> 00:30:09.830
And it's going to help define
the direction that you head.

00:30:10.500 --> 00:30:13.160
So let's talk about these
application designs with a very,

00:30:13.160 --> 00:30:15.250
very simple graph.

00:30:15.520 --> 00:30:17.720
Across the bottom,
we're talking about the usage

00:30:17.840 --> 00:30:21.020
pattern for your application.

00:30:21.340 --> 00:30:23.040
And on the one side,
we've got entertainment.

00:30:23.170 --> 00:30:27.540
The usage pattern for your application is
going to be more entertainment focused,

00:30:27.600 --> 00:30:30.760
versus the opposite end of the scale,
which is that it's more task oriented.

00:30:30.760 --> 00:30:33.690
It's more tool focused.

00:30:34.750 --> 00:30:37.780
And on the vertical,
we've got what is the content type

00:30:37.880 --> 00:30:39.200
that your application works with.

00:30:39.250 --> 00:30:42.250
Is it serious versus fun?

00:30:42.420 --> 00:30:44.600
And let's map some of the
existing application types

00:30:44.780 --> 00:30:46.680
to these different quadrants.

00:30:46.820 --> 00:30:49.180
So the first is Serious Tool,
upper right.

00:30:49.520 --> 00:30:52.700
You're talking about an application
that is very purpose driven.

00:30:53.190 --> 00:30:55.660
It does or changes something.

00:30:55.660 --> 00:30:59.790
Users interact with data,
and they do something with that data.

00:31:00.060 --> 00:31:01.280
It's hierarchical in nature.

00:31:01.280 --> 00:31:02.180
It's multi-window.

00:31:02.180 --> 00:31:04.650
You've got cascading hierarchy model.

00:31:04.830 --> 00:31:07.220
And typically,
these types of applications

00:31:07.300 --> 00:31:08.400
have minimal graphics.

00:31:08.590 --> 00:31:10.500
They're not very rich visually.

00:31:10.570 --> 00:31:12.660
It's really not about how they look.

00:31:12.720 --> 00:31:14.780
It's what you can do with them.

00:31:14.910 --> 00:31:18.010
So that's an application that
sits up in the top right.

00:31:18.790 --> 00:31:23.280
In the bottom right,
we've got a fun tool.

00:31:23.520 --> 00:31:24.780
What's an example of a fun tool?

00:31:24.780 --> 00:31:28.720
Well, this could be a social discovery
application like Whirl from Pelago.

00:31:28.800 --> 00:31:31.680
Or it could be something like Looped,
or anything that kind of

00:31:31.830 --> 00:31:35.980
connects you with fun content,
but that is still task oriented.

00:31:36.040 --> 00:31:39.640
And these applications can
be visually richer than the

00:31:39.640 --> 00:31:43.140
serious tool applications,
because there are components

00:31:43.240 --> 00:31:46.180
of their content that are
interesting or more visually rich.

00:31:46.260 --> 00:31:50.950
But they're largely about
interacting with the content

00:31:51.280 --> 00:31:53.540
in a very task oriented way.

00:31:53.600 --> 00:31:56.580
And they tend to have a smaller
information architecture.

00:31:56.840 --> 00:31:58.300
Let's go to top left.

00:31:58.380 --> 00:32:00.280
This is serious entertainment.

00:32:00.400 --> 00:32:03.940
So the content is serious,
but the use case is more

00:32:03.940 --> 00:32:05.200
entertainment focused.

00:32:05.280 --> 00:32:06.630
What's an example of this?

00:32:06.690 --> 00:32:07.320
I don't know.

00:32:07.380 --> 00:32:10.110
Maybe an application for students
that lets them learn about the

00:32:10.140 --> 00:32:14.660
Civil War or about some historical
event with very rich content.

00:32:14.850 --> 00:32:19.860
Video, photos, you know,
these kinds of rich elements.

00:32:19.950 --> 00:32:24.280
And yet the task is serious,
but the content is interesting.

00:32:25.580 --> 00:32:29.940
tend to be more visually rich
than some of their counterparts.

00:32:30.000 --> 00:32:32.730
And lastly, bottom left corner,
we get fun entertainment.

00:32:32.810 --> 00:32:34.100
This is the immersive type.

00:32:34.160 --> 00:32:40.700
This is where you get applications
that are very rich visually.

00:32:40.770 --> 00:32:42.810
They don't really have,
from the user's perspective,

00:32:42.820 --> 00:32:46.680
a complex hierarchy,
because the user is focused on gameplay,

00:32:46.740 --> 00:32:47.640
not on data.

00:32:48.010 --> 00:32:50.720
They're just moving through levels,
but the screen doesn't seem to change

00:32:50.720 --> 00:32:53.140
other than maybe the characters
or the elements on the screen.

00:32:53.190 --> 00:32:55.920
Overall,
it's not like they're cascading through

00:32:55.920 --> 00:32:58.160
and navigating through multiple screens.

00:32:58.200 --> 00:33:01.520
So you can see how each application,
or each type of application,

00:33:01.520 --> 00:33:04.500
has different visual and
behavioral characteristics.

00:33:04.520 --> 00:33:07.560
And understanding which one you're
like helps you to model yourself

00:33:07.560 --> 00:33:10.100
after that type of application.

00:33:11.250 --> 00:33:14.150
But there's a middle ground, obviously,
because not everything in

00:33:14.150 --> 00:33:16.400
life is black and white,
and so applications don't

00:33:16.400 --> 00:33:19.480
necessarily land cleanly in any
one of these specific quadrants.

00:33:19.540 --> 00:33:21.460
So what about that middle ground?

00:33:21.480 --> 00:33:23.760
Well, we still measure it
across the same scale,

00:33:23.820 --> 00:33:27.190
obviously, but that's what we would call
the utility type of application,

00:33:27.270 --> 00:33:29.630
and they have unique
characteristics as well.

00:33:29.640 --> 00:33:36.200
Some examples of those would be notes,
stocks, photos, right?

00:33:36.200 --> 00:33:38.680
iChat, iPod as well.

00:33:39.130 --> 00:33:41.520
Some of them sit right on
the line between a quadrant,

00:33:41.520 --> 00:33:43.000
some of them are close to the line.

00:33:43.000 --> 00:33:46.150
But definitely,
the closer you are to a particular axis,

00:33:46.170 --> 00:33:49.990
it helps to define differences in
your application versus something

00:33:49.990 --> 00:33:52.360
that's much further away from the axis.

00:33:54.690 --> 00:33:56.800
Now how do you deal with a utility?

00:33:56.800 --> 00:33:58.860
What kinds of questions
can you ask yourself?

00:33:59.030 --> 00:34:00.980
Well,
here's four that are useful for figuring

00:34:00.980 --> 00:34:03.300
out where you are within the scale.

00:34:03.390 --> 00:34:06.180
What does the user do
with the application?

00:34:07.120 --> 00:34:09.140
What kind of work do they do with it?

00:34:09.450 --> 00:34:10.340
Or don't they do work?

00:34:10.490 --> 00:34:11.440
Do they play with it more?

00:34:11.440 --> 00:34:14.390
What content does the application use?

00:34:14.480 --> 00:34:16.280
What type of information do you display?

00:34:16.280 --> 00:34:17.680
Is it very rich visually?

00:34:17.680 --> 00:34:20.600
Is the focus of your application
more just kind of finding

00:34:20.750 --> 00:34:22.750
information at a more leisure pace?

00:34:23.420 --> 00:34:26.820
Depending on the different scenarios
that you play out or that you talk about,

00:34:27.060 --> 00:34:29.400
you're going to have the dot
moving around on that graph.

00:34:29.570 --> 00:34:32.000
And that's going to help you
determine where you're closer.

00:34:32.000 --> 00:34:34.720
Are you closer to mail,
productivity serious?

00:34:34.730 --> 00:34:37.700
Or are you more closer to
a game style application?

00:34:42.730 --> 00:34:44.840
These applications are graphically rich,
typically,

00:34:44.840 --> 00:34:47.100
if you think of weather or stocks.

00:34:47.100 --> 00:34:49.100
They have pretty discrete functionality.

00:34:49.100 --> 00:34:53.170
They only do one thing,
and they do that really well.

00:34:53.460 --> 00:34:55.760
So discrete functionality,
they're narrow in scope,

00:34:55.760 --> 00:34:58.880
they're consumption oriented,
they're largely about just launching

00:34:59.150 --> 00:35:01.340
the app and looking at something,
checking the weather,

00:35:01.350 --> 00:35:06.530
checking the stocks, checking a flight,
arrival time, that type of thing.

00:35:08.080 --> 00:35:10.000
So those are the three
types of applications.

00:35:10.000 --> 00:35:13.170
The whole point of this
exercise is not to define rigid

00:35:13.170 --> 00:35:16.340
silos in which you develop,
but it is to give you a sense

00:35:16.340 --> 00:35:20.900
of thinking about iPhone
design from that perspective,

00:35:20.900 --> 00:35:23.720
and understanding which application
you're like so that you can

00:35:23.870 --> 00:35:25.400
orient yourself towards that.

00:35:26.280 --> 00:35:29.610
Now, the next step is to
determine your development,

00:35:29.730 --> 00:35:31.400
your navigation model.

00:35:31.460 --> 00:35:36.390
Navigating through your information is
a critical part of designing for iPhone.

00:35:36.590 --> 00:35:38.970
Understanding how your users are
going to get from one level of

00:35:38.970 --> 00:35:41.810
your application to another is
what's called the navigation model.

00:35:41.890 --> 00:35:44.980
And this navigation model, of course,
depends on your application type.

00:35:45.100 --> 00:35:47.680
If you're a serious tool,
like a productivity application,

00:35:47.700 --> 00:35:50.890
like mail, you're going to go through
a hierarchical screen model.

00:35:50.890 --> 00:35:54.500
If you're a game,
the way users navigate is by gameplay.

00:35:54.610 --> 00:35:56.180
They move through different
levels of the game.

00:35:56.200 --> 00:35:58.510
game, and et cetera.

00:36:00.550 --> 00:36:05.110
So, some questions to ask yourself are,
what application type are you,

00:36:05.300 --> 00:36:06.860
first of all?

00:36:07.260 --> 00:36:09.200
How deep is your object model?

00:36:09.310 --> 00:36:10.960
How complex is that object model?

00:36:10.960 --> 00:36:13.190
And by object model, I'm talking about
information architecture,

00:36:13.190 --> 00:36:13.500
right?

00:36:13.630 --> 00:36:17.250
Behind the scenes, behind the UI,
you've got an information architecture

00:36:17.350 --> 00:36:20.440
that determines which module you're in,
what collection you're in,

00:36:20.450 --> 00:36:23.140
how the objects are
organized behind the scene.

00:36:23.220 --> 00:36:26.430
And the complexity of that object
model is going to determine

00:36:26.440 --> 00:36:28.340
your navigation model as well.

00:36:29.890 --> 00:36:34.720
So if you're like a serious tool,
a productivity application like mail,

00:36:34.740 --> 00:36:37.780
you're going to have a navigation
model that's very close to mail,

00:36:37.780 --> 00:36:39.310
if not identical,
where you're going to move

00:36:39.420 --> 00:36:40.280
from screen to screen.

00:36:40.280 --> 00:36:43.680
And as you move down a branch of
your information architecture,

00:36:43.680 --> 00:36:47.110
right, as you get towards an endpoint,
you're going to traverse

00:36:47.240 --> 00:36:49.040
across screens on the iPhone.

00:36:49.040 --> 00:36:50.400
So think of how mail works.

00:36:50.400 --> 00:36:52.580
You start with a mailbox,
then you drill down

00:36:52.580 --> 00:36:54.880
into the mail messages,
then you click there,

00:36:54.880 --> 00:36:58.400
you drill down into the specific message,
and that's the end node.

00:36:58.780 --> 00:37:02.040
If you're in the settings application,
which is what this example comes from,

00:37:02.100 --> 00:37:05.220
you're starting at the highest level
of what groups of settings you are,

00:37:05.220 --> 00:37:07.360
then you drill down into general,
then you get into network,

00:37:07.360 --> 00:37:09.450
then you choose your network,
then you go down to specific

00:37:09.460 --> 00:37:12.450
things like setting up boot P and
other details about the network.

00:37:12.460 --> 00:37:14.990
So you progressively move down
towards an end node of your

00:37:14.990 --> 00:37:16.700
information architecture branch.

00:37:16.780 --> 00:37:20.510
So this is a great
principle to keep in mind,

00:37:21.010 --> 00:37:27.320
which is this movement from general to
specific as you move down that branch.

00:37:33.520 --> 00:37:36.100
Now,
as you're doing that navigation model,

00:37:36.170 --> 00:37:38.070
you're going to have views.

00:37:38.140 --> 00:37:40.550
And the best way to do this, of course,
is to provide for free from

00:37:40.550 --> 00:37:42.500
UIKit is these nav bars.

00:37:42.690 --> 00:37:46.180
And navigation bars let you
communicate clearly to the user

00:37:46.410 --> 00:37:49.480
which screen they're arriving at,
because they tap an object on screen,

00:37:49.480 --> 00:37:50.880
and then they traverse
to the next screen,

00:37:50.880 --> 00:37:53.260
and it's named after the
item that they tapped.

00:37:53.400 --> 00:37:54.540
And so you go through the sequence.

00:37:54.640 --> 00:37:58.220
This is automatic for you if you build
an iPhone app with the iPhone SDK.

00:37:58.290 --> 00:38:01.660
And as you move back through the levels,
the nav bar automatically,

00:38:01.660 --> 00:38:04.420
as part of the navigation controller,
the nav controller object,

00:38:04.520 --> 00:38:06.150
tells you what the
previous screen was named.

00:38:06.160 --> 00:38:08.510
So you can point back to that
from the user's perspective.

00:38:08.520 --> 00:38:10.510
They know where they're going back to.

00:38:10.580 --> 00:38:13.340
That's how the navigation works,
and that's a perfectly functional

00:38:13.340 --> 00:38:15.740
navigation model for iPhone applications.

00:38:15.820 --> 00:38:18.900
But again, it depends on what
application type you've got.

00:38:19.670 --> 00:38:22.360
A nav bar,
we figured out that maybe this is

00:38:22.360 --> 00:38:25.050
the way we want to do navigation,
so now a nav bar is where you're going

00:38:25.140 --> 00:38:27.660
to put certain types of controls.

00:38:28.130 --> 00:38:32.000
You can put controls in
here that manage the view.

00:38:32.000 --> 00:38:34.930
For example, in this particular case,
we've got the plus button.

00:38:34.940 --> 00:38:39.480
So you can add, let's say,
a contact to the contacts list.

00:38:39.530 --> 00:38:42.110
Or you can add,
there's different applications on iPhone

00:38:42.120 --> 00:38:44.590
that have got a plus button there,
and you can tap that,

00:38:44.590 --> 00:38:46.680
and now you can create
one of those objects.

00:38:47.280 --> 00:38:50.570
It's in the nav bar because it's
probably something you would do no

00:38:50.580 --> 00:38:52.610
matter where you are in the hierarchy.

00:38:52.720 --> 00:38:56.020
It should only be a command related
to something that's primary,

00:38:56.020 --> 00:38:57.900
an object that's really primary.

00:38:57.900 --> 00:39:00.930
But you can certainly put
controls in the nav bar like that.

00:39:03.330 --> 00:39:06.600
You can also put controls in the nav
bar that relate to managing the view.

00:39:06.600 --> 00:39:09.580
So if you think of the
phone application on iPhone,

00:39:09.580 --> 00:39:12.960
you have a segmented control at the
top that lets you toggle between

00:39:13.070 --> 00:39:18.850
all missed calls or just-- sorry,
in the Recents tab, you're looking at all

00:39:18.850 --> 00:39:21.310
calls or the recent calls.

00:39:21.370 --> 00:39:24.210
I'm sorry I said that wrong,
but you know what I'm talking about.

00:39:24.210 --> 00:39:25.390
You all have iPhones.

00:39:26.790 --> 00:39:29.450
One thing to avoid when you're
putting nav bars on screen is

00:39:29.850 --> 00:39:31.600
that you have home buttons.

00:39:31.760 --> 00:39:35.240
So avoid having a home button
that's going to jump the user,

00:39:35.240 --> 00:39:38.240
shortcut the user,
all the way to the top of the hierarchy.

00:39:38.310 --> 00:39:41.220
The problem with this is it's
very disconcerting for the user.

00:39:41.280 --> 00:39:43.260
They've moved down
through multiple levels,

00:39:43.310 --> 00:39:45.700
and mentally they're kind of
following the progression.

00:39:45.760 --> 00:39:48.330
And to jump them all the way
to the top makes them lose

00:39:48.330 --> 00:39:50.520
context from where they are.

00:39:50.570 --> 00:39:53.660
Another thing to avoid is any
kind of a breadcrumb trail.

00:39:53.730 --> 00:39:56.060
The main problem with this is
you don't have enough screen

00:39:56.060 --> 00:39:57.680
real estate to do this well.

00:39:57.780 --> 00:40:00.830
So in this case, I've only got two here,
and I've already clobbered

00:40:00.890 --> 00:40:02.090
the title of the screen.

00:40:02.430 --> 00:40:05.440
And it's also not a scalable solution,
because as soon as you get

00:40:05.440 --> 00:40:08.420
three or four levels deep,
you've got a breadcrumb trail that

00:40:08.420 --> 00:40:09.880
extends across the entire screen.

00:40:09.980 --> 00:40:12.000
So it's not a good idea
to do a breadcrumb trail.

00:40:12.070 --> 00:40:15.510
The navigation controller,
the whole hierarchical model on iPhone,

00:40:15.710 --> 00:40:18.450
is a great model,
because users are familiar with

00:40:18.530 --> 00:40:19.660
it across all applications.

00:40:19.660 --> 00:40:21.900
And so getting around is
not a big deal for anybody.

00:40:21.900 --> 00:40:24.570
Doesn't matter what application,
you know that hitting the back button is

00:40:24.580 --> 00:40:25.420
going to move you to the previous screen.

00:40:25.420 --> 00:40:28.460
And lastly,
be very careful to not put too

00:40:28.460 --> 00:40:29.550
many controls in the tab bar.

00:40:29.560 --> 00:40:31.060
You don't want to clobber the title.

00:40:31.110 --> 00:40:33.660
You don't want to make things
so cluttered up there that you

00:40:33.760 --> 00:40:37.720
can't tap things efficiently
from a user's perspective.

00:40:37.750 --> 00:40:40.620
Now, that's the simple
navigation model for iPhone,

00:40:40.620 --> 00:40:43.090
which is the cascading
hierarchical screens.

00:40:43.270 --> 00:40:45.850
But there's an alternative way,
which is to use tab bars.

00:40:46.090 --> 00:40:48.840
These are for free in UIKit.

00:40:48.900 --> 00:40:51.100
These are going to mirror
the user cognitive model,

00:40:51.100 --> 00:40:54.370
because if you've come up with an
interior decorating application,

00:40:54.370 --> 00:40:58.640
and you identify these primary objects
or tasks you could do with color,

00:40:58.680 --> 00:41:02.700
those are going to be expressed probably
most effectively with a tab bar.

00:41:02.830 --> 00:41:06.060
So tab bars are great if your
information architecture,

00:41:06.110 --> 00:41:10.780
if the user mental model as well,
is oriented around collections or

00:41:10.780 --> 00:41:15.880
categories or sets of information.

00:41:16.340 --> 00:41:17.750
They're not a toolbar alternative.

00:41:17.920 --> 00:41:19.520
Toolbars sit at the bottom of the screen.

00:41:19.520 --> 00:41:21.360
I'll talk about this in a moment.

00:41:21.410 --> 00:41:24.730
The main thing I want to say about tab
bars is only use them when you have

00:41:24.730 --> 00:41:28.720
a complex information architecture,
and don't change them when they're

00:41:28.720 --> 00:41:29.800
on the bottom of the screen.

00:41:29.800 --> 00:41:32.930
Once you've put them there,
they're solid.

00:41:32.940 --> 00:41:35.180
They should never move,
because they're an anchor point

00:41:35.180 --> 00:41:38.460
for the user to move around within
your application and to navigate

00:41:38.790 --> 00:41:41.060
throughout your application.

00:41:42.530 --> 00:41:45.630
They also add a lot of efficiency,
because if you think of how

00:41:45.630 --> 00:41:49.640
the click wheel iPod works,
you navigate down, you pick playlists,

00:41:49.740 --> 00:41:52.020
you click and you navigate
through each level.

00:41:52.020 --> 00:41:54.820
You start with, say, artists,
and you go down to the middle screen,

00:41:54.820 --> 00:41:57.100
and then you choose an artist,
and you go down to the song screen,

00:41:57.100 --> 00:41:58.470
then you play, and you go down.

00:41:58.540 --> 00:42:00.840
That's how the iPod works,
and it's great.

00:42:00.940 --> 00:42:05.570
But the problem with it is that
it gets you through this back

00:42:05.690 --> 00:42:07.160
and forth navigation model.

00:42:07.240 --> 00:42:12.150
Now, on iPod, it works because you're not
really going down too many levels.

00:42:12.480 --> 00:42:15.220
But I've seen applications from
developers that are fairly complex

00:42:15.220 --> 00:42:19.480
medical applications or what have you,
and they're going down many, many levels,

00:42:19.520 --> 00:42:21.240
and this kind of a model
doesn't really work,

00:42:21.320 --> 00:42:24.210
because their information
architecture is complex,

00:42:24.320 --> 00:42:26.160
and it's deep, and it's broad.

00:42:26.210 --> 00:42:29.660
And it means that users are going to
be moving up and down and up and down,

00:42:29.830 --> 00:42:31.280
and so it's not that efficient.

00:42:31.650 --> 00:42:33.440
The better way to do this is to use tabs.

00:42:33.530 --> 00:42:36.380
This is a great example of where
tabs introduce an efficiency to

00:42:36.380 --> 00:42:40.520
the navigation on iPhone that
your application can benefit from.

00:42:40.810 --> 00:42:45.170
So as soon as you put tabs in, boom,
users just go songs, playlists, videos,

00:42:45.280 --> 00:42:47.830
whatever they're interested in,
whatever the modules or categories

00:42:47.840 --> 00:42:51.260
are of your application,
and they're good to go.

00:42:51.300 --> 00:42:53.740
And they're within that
module very quickly.

00:42:54.050 --> 00:42:56.930
Another thing to think about in terms
of navigation is to get users to the

00:42:56.930 --> 00:42:59.040
things that are most important to them.

00:42:59.090 --> 00:43:01.190
Now sometimes they don't know
what's the most important to them.

00:43:01.200 --> 00:43:04.310
It's kind of like retailers put
end caps on in the store to say,

00:43:04.310 --> 00:43:06.800
hey, you really want to be
interested in this product.

00:43:06.860 --> 00:43:08.760
You walk into the store and boom,
there it is.

00:43:08.810 --> 00:43:10.540
Well, we do that kind of thing
in the iTunes store.

00:43:10.540 --> 00:43:12.760
We're like, hey,
here's some new music for you.

00:43:12.810 --> 00:43:14.040
It's interesting to the user.

00:43:14.040 --> 00:43:14.960
It's always different.

00:43:14.960 --> 00:43:17.100
It's always engaging.

00:43:17.150 --> 00:43:19.340
The same thing is true
with your application.

00:43:19.340 --> 00:43:22.480
It's really important that your
application always take the user

00:43:22.480 --> 00:43:26.080
to what's the most important
for them as quickly as possible.

00:43:26.140 --> 00:43:29.540
In some cases, you might want to put up
some featured content.

00:43:29.590 --> 00:43:31.940
In other cases,
if you launch for the very first time,

00:43:31.940 --> 00:43:34.420
you could do what the Stocks
application does on iPhone,

00:43:34.550 --> 00:43:36.440
which is the very first
time you launch Stocks,

00:43:36.460 --> 00:43:39.760
it actually has some stock
symbols already loaded on screen.

00:43:39.810 --> 00:43:40.680
Very cool.

00:43:40.740 --> 00:43:43.910
Do not launch your application
with nothing on screen.

00:43:44.690 --> 00:43:47.740
And lastly around navigation,
keep in mind the fact that

00:43:47.790 --> 00:43:50.880
your application only runs,
it only runs by itself.

00:43:50.950 --> 00:43:53.240
There's only one app
running at a time on iPhone.

00:43:53.360 --> 00:43:58.210
And so the key thing here is that
from a navigation perspective,

00:43:58.310 --> 00:44:03.310
you want to save state and restore state
so that you can bring the user back

00:44:03.480 --> 00:44:08.240
to what's most important for them as
soon as they relaunch your application.

00:44:08.330 --> 00:44:09.730
Because you know how iPhone works, right?

00:44:09.790 --> 00:44:11.690
You're doing something,
you get an SMS and you

00:44:11.690 --> 00:44:12.540
switch over to SMS.

00:44:12.680 --> 00:44:15.440
You're doing something and you get a
notification of an event and you look

00:44:15.580 --> 00:44:18.180
to the details of where that event is,
the meeting is.

00:44:18.450 --> 00:44:21.440
You're doing something and
you get a phone call and then

00:44:21.440 --> 00:44:25.240
that switches your attention,
you switch out the applications

00:44:25.240 --> 00:44:27.440
and when you come back to the one
you were originally working on,

00:44:27.630 --> 00:44:29.240
you want to be right
back where you started.

00:44:29.240 --> 00:44:31.970
Or right back where you were,
rather than have to come into a home

00:44:32.040 --> 00:44:35.240
screen and navigate down through
hierarchies and this kind of thing.

00:44:35.240 --> 00:44:38.070
So running one application
at a time on iPhone is,

00:44:38.330 --> 00:44:40.240
directly impacts the navigation model.

00:44:40.240 --> 00:44:44.240
And so it's important to restore
a save and restore state.

00:44:44.240 --> 00:44:47.270
And the final point
about navigation is that,

00:44:47.310 --> 00:44:49.560
and I made this comment before,
the fact that you've got a

00:44:49.560 --> 00:44:52.240
built-in keyboard on iPhone,
it's a touch screen keyboard,

00:44:52.240 --> 00:44:54.240
it's not the desktop keyboard.

00:44:54.240 --> 00:44:57.050
And so you can move users through
your application and get them to

00:44:57.170 --> 00:45:02.240
what they are most interested in much
quicker if you minimize text entry.

00:45:02.240 --> 00:45:05.230
You can do this with lists, a cascade,
these are free.

00:45:05.290 --> 00:45:06.200
We've talked about this extensively.

00:45:06.280 --> 00:45:09.070
You can do this with, pickers.

00:45:09.500 --> 00:45:13.130
Pickers are great for multi-values
and for constrained sets.

00:45:13.320 --> 00:45:15.990
They let you just quickly choose
times and dates and specify

00:45:16.120 --> 00:45:18.240
the details of each of those.

00:45:21.060 --> 00:45:25.720
And a great way to minimize typing
is to use presets whenever possible.

00:45:25.720 --> 00:45:29.360
So think of where on screen the
user is going to be filling out

00:45:29.360 --> 00:45:33.740
information in your application,
and if there's a list that you

00:45:33.740 --> 00:45:38.430
could pre-populate with all of the
options that the majority of your

00:45:38.430 --> 00:45:39.620
users are going to be interested in.

00:45:39.700 --> 00:45:42.680
It's much faster to pick from a list,
or slide to another screen

00:45:42.680 --> 00:45:44.680
to pick from a list,
or flick through a big

00:45:44.680 --> 00:45:46.720
long list of 100 items,
than it is to actually

00:45:46.720 --> 00:45:52.020
type in a city name,
or a pharmaceutical drug name,

00:45:52.020 --> 00:45:54.300
or some kind of molecular name,
or whatever.

00:45:54.510 --> 00:45:59.760
It's very hard to type on an iPhone
screen for long amounts of data.

00:45:59.880 --> 00:46:02.270
Not very hard, but very inefficient.

00:46:02.490 --> 00:46:04.750
Segment and controls are
part of the navigation model,

00:46:04.750 --> 00:46:06.970
but now we're really getting
down to the nitty gritty,

00:46:06.970 --> 00:46:07.300
right?

00:46:07.300 --> 00:46:09.470
We're down to individual
screen design almost,

00:46:09.470 --> 00:46:11.240
and I've talked extensively
about segment controls,

00:46:11.330 --> 00:46:12.410
so I'm not going to belabor the point.

00:46:12.420 --> 00:46:16.550
They're really mutually exclusive items,
and they let you manage what's on screen,

00:46:16.550 --> 00:46:19.870
or within the body of a screen,
they're useful for like a radio button

00:46:19.870 --> 00:46:21.870
set that you would do on the desktop.

00:46:24.470 --> 00:46:26.660
All right, and at this point,
I'd like to invite another guest on

00:46:26.760 --> 00:46:30.000
stage to talk about their experience
with this part of the process,

00:46:30.050 --> 00:46:31.950
and that's Handmark.

00:46:36.600 --> 00:46:38.600
All right, thanks.

00:46:38.760 --> 00:46:39.780
Good morning.

00:46:39.940 --> 00:46:41.040
My name is Doug Dickerson.

00:46:41.040 --> 00:46:43.100
I run the product
management team at HandMark.

00:46:43.100 --> 00:46:47.410
HandMark is a leading developer
and distributor of top quality

00:46:47.410 --> 00:46:49.240
mobile games and applications.

00:46:49.240 --> 00:46:52.790
We have a successful history
of developing some of the most

00:46:52.790 --> 00:46:57.650
popular titles on the market today,
including household names like TV Guide,

00:46:57.650 --> 00:46:58.600
Monopoly.

00:46:59.490 --> 00:47:02.890
Earlier this year, we acquired Astroware,
which really added a lot

00:47:02.890 --> 00:47:04.280
to our games portfolio.

00:47:04.280 --> 00:47:10.390
Some great titles like Bejeweled, Sudoku,
Casino Games, etc.

00:47:11.520 --> 00:47:15.920
But our flagship product
is Pocket Express.

00:47:16.000 --> 00:47:20.540
Pocket Express provides users
immediate access to personalized news,

00:47:20.670 --> 00:47:25.440
sports, weather information,
and more across a variety of devices,

00:47:25.440 --> 00:47:27.820
from flip phones to PDAs.

00:47:27.870 --> 00:47:33.170
And we have several million very
addicted users on BlackBerry,

00:47:33.170 --> 00:47:35.780
Palm, Windows mobile devices.

00:47:37.010 --> 00:47:41.310
So the decision to take Pocket Express to
the iPhone was really a no-brainer

00:47:41.440 --> 00:47:43.050
for a couple of different reasons.

00:47:43.200 --> 00:47:46.080
First, we literally started getting
calls the day the iPhone was

00:47:46.100 --> 00:47:50.440
announced from our customers asking,
is Express available?

00:47:50.510 --> 00:47:52.930
When's Express going to be available?

00:47:53.060 --> 00:47:55.130
Second,
we all fell in love with the device.

00:47:55.290 --> 00:47:57.960
So last summer,
we took turns standing in line,

00:47:58.030 --> 00:48:00.220
waiting to get the device on day one.

00:48:00.280 --> 00:48:02.720
Once we got it, we kind of ignored our
families for a couple of weeks

00:48:02.910 --> 00:48:05.100
and played with the device.

00:48:05.160 --> 00:48:07.810
One thing became
immediately obvious to me,

00:48:07.810 --> 00:48:10.160
and that was that the bar
had really been raised.

00:48:10.210 --> 00:48:12.680
That it was clear to me that
from that point forward,

00:48:12.730 --> 00:48:17.100
everything our team designed was
going to be ultimately compared to

00:48:17.100 --> 00:48:19.770
the core applications on the iPhone.

00:48:20.510 --> 00:48:25.330
So we actually have a lot of experience
taking Pocket Express to new devices.

00:48:25.330 --> 00:48:27.740
And one of the things that
we run into every time is we

00:48:27.870 --> 00:48:29.580
really have two competing goals.

00:48:29.620 --> 00:48:34.070
That one is we want to create a
Pocket Express signature interface

00:48:34.070 --> 00:48:36.120
across all of the devices.

00:48:36.120 --> 00:48:39.470
But on the other hand,
we want Express to feel like it's part

00:48:39.470 --> 00:48:41.800
of whatever device it's running on.

00:48:42.160 --> 00:48:45.920
So what I want to share with you
today are some of the challenges

00:48:45.920 --> 00:48:49.490
that we ran into in designing
a Pocket Express experience

00:48:49.570 --> 00:48:54.890
that feels like it's part of the
core set of iPhone applications.

00:48:55.300 --> 00:51:55.200
[Transcript missing]

00:51:55.880 --> 00:51:58.800
Based on our experience,
there's a few tips that I would give you

00:51:58.800 --> 00:52:01.340
as you start designing for the iPhone.

00:52:01.420 --> 00:52:04.920
The first thing is to really spend
some time studying the core iPhone

00:52:04.920 --> 00:52:09.110
applications and try to figure out how
to relate what they're doing to the

00:52:09.220 --> 00:52:11.260
problem that you're trying to solve.

00:52:11.440 --> 00:52:14.350
And then second is to spend
the time up front to define all

00:52:14.350 --> 00:52:18.010
the conceptual objects of your
application and how they relate.

00:52:18.080 --> 00:52:19.860
What's the hierarchy of those?

00:52:19.930 --> 00:52:23.080
Once you've done that,
then embrace tabs as a

00:52:23.080 --> 00:52:27.200
method of navigating the
top level of your hierarchy.

00:52:27.260 --> 00:52:28.990
And then when you get to
your base level object,

00:52:29.080 --> 00:52:32.900
if there's more information that
you can display on one screen,

00:52:32.920 --> 00:52:35.990
then use the segmented control to
allow the user to kind of manipulate

00:52:35.990 --> 00:52:39.260
and figure what point of view
they want to look at that object.

00:52:39.310 --> 00:52:41.010
And finally, just keep it simple.

00:52:41.220 --> 00:52:45.110
So as you're making design decisions,
err on the side of making it

00:52:45.110 --> 00:52:49.300
easy for the first time user as
opposed to fast for the power user.

00:52:49.860 --> 00:52:52.370
Thank you.

00:53:00.600 --> 00:53:01.900
All right, thank you, Handmark.

00:53:01.940 --> 00:53:05.250
Two great examples, AOL and Handmark,
of going through this process

00:53:05.360 --> 00:53:09.180
themselves and learning exactly
what it was that they needed to do,

00:53:09.200 --> 00:53:12.580
and iterating through multiple designs
and learning from that process.

00:53:12.580 --> 00:53:15.960
So at this point now,
we're moving through this conceptual,

00:53:16.160 --> 00:53:18.780
and we're getting down
to the brass tacks.

00:53:18.780 --> 00:53:22.400
Right now we're looking at, OK,
we've got our navigation model in place,

00:53:22.420 --> 00:53:26.780
and Handmark just explained their process
there of realizing how that all works.

00:53:26.830 --> 00:53:28.900
And now you're down to
an individual screen.

00:53:28.930 --> 00:53:31.570
And I want to give you some
guidelines for putting together,

00:53:31.570 --> 00:53:32.960
assembling those screens.

00:53:32.980 --> 00:53:37.090
Now you'll notice I'm not talking a
lot about immersive applications today.

00:53:37.250 --> 00:53:41.760
That's because for games,
you have a lot of freedom.

00:53:41.760 --> 00:53:44.640
You've got the whole screen to take over.

00:53:44.730 --> 00:53:46.510
And so most games are doing that fine.

00:53:46.520 --> 00:53:47.640
They've got a great model.

00:53:47.640 --> 00:53:49.900
It's very unique to this specific game.

00:53:49.920 --> 00:53:52.210
I want to spend all my time
talking about basically the

00:53:52.310 --> 00:53:55.760
utility type of application and the
productivity types of applications,

00:53:56.090 --> 00:53:58.380
because that's what the vast
majority of you are creating.

00:53:58.380 --> 00:53:59.560
And that's where the focus is.

00:53:59.660 --> 00:54:01.600
That's why the focus is on this today.

00:54:01.670 --> 00:54:03.880
So as we talk about
individual screen design,

00:54:03.910 --> 00:54:05.540
there's a few things to keep in mind.

00:54:05.560 --> 00:54:08.270
At the end of the day,
the entire process of designing

00:54:08.270 --> 00:54:12.270
an individual screen is all
about keeping things clean,

00:54:12.300 --> 00:54:13.310
clutter free.

00:54:13.630 --> 00:54:14.930
It's all about readability.

00:54:14.940 --> 00:54:18.500
If you pull an iPhone out of your pocket,
you're in line like the OL example,

00:54:18.510 --> 00:54:20.760
and you want to do
something for 15 seconds,

00:54:20.780 --> 00:54:23.450
you don't want to spend a lot of
time like flicking around and,

00:54:23.600 --> 00:54:25.360
you know, what does that say?

00:54:25.360 --> 00:54:27.830
And there's too much on screen
and all these kinds of things.

00:54:27.890 --> 00:54:30.800
It's all about readability
and quick navigation of the

00:54:30.800 --> 00:54:33.300
eye on that individual screen,
and then navigation model

00:54:33.400 --> 00:54:34.860
across the entire application.

00:54:34.900 --> 00:54:36.620
So clutter free design is key.

00:54:36.650 --> 00:54:37.410
How do you do that?

00:54:37.520 --> 00:54:39.820
Well, first of all,
you need to understand that each

00:54:39.820 --> 00:54:42.540
screen represents an end node,
right?

00:54:42.640 --> 00:54:45.180
So you have to ask
yourself questions like,

00:54:45.200 --> 00:54:47.200
what's needed for this entity?

00:54:47.220 --> 00:54:50.050
If we're on this screen,
what is the most important

00:54:50.130 --> 00:54:52.340
thing for this screen?

00:54:53.100 --> 00:54:55.740
How does this screen map to the solution?

00:54:55.760 --> 00:54:57.980
Now we had an application
definition statement.

00:54:58.000 --> 00:55:01.260
We chose our either brainstorm
features or inherited features.

00:55:01.280 --> 00:55:02.320
We boiled those down.

00:55:02.320 --> 00:55:05.080
We came up with the conceptual model,
some preliminary sketches.

00:55:05.090 --> 00:55:06.700
We build a navigation model.

00:55:06.700 --> 00:55:08.600
And now we're down to--
it's getting exciting,

00:55:08.600 --> 00:55:08.600
right?

00:55:08.650 --> 00:55:09.900
Because we're down to brass tacks.

00:55:09.900 --> 00:55:10.980
We're ready to code.

00:55:10.980 --> 00:55:12.600
I can tell you all want to code.

00:55:12.600 --> 00:55:16.380
And at this point,
it's really easy to kind of forget

00:55:16.480 --> 00:55:19.190
everything that you just went through,
to forget the application

00:55:19.290 --> 00:55:20.100
definition statement.

00:55:20.180 --> 00:55:24.000
But you can't, because at this point,
you have to keep filtering.

00:55:24.080 --> 00:55:27.610
Keep filtering your features
through what the few features are

00:55:27.610 --> 00:55:31.460
that the majority of users want,
that are appropriate for mobile context,

00:55:31.470 --> 00:55:33.600
and that map to your product
definition statement,

00:55:33.620 --> 00:55:36.560
and that are exactly what
are needed for this object,

00:55:36.610 --> 00:55:38.980
for this entity on this screen.

00:55:39.170 --> 00:55:41.100
This is the hard part, actually.

00:55:41.140 --> 00:55:43.650
Actually, it's all hard,
but this is particularly hard.

00:55:43.740 --> 00:55:45.610
So review your application
definition statement.

00:55:45.750 --> 00:55:47.060
Keep your features in bounds.

00:55:47.190 --> 00:55:50.170
Don't go off into a tangent because
this screen kind of looks cool,

00:55:50.170 --> 00:55:54.260
and suddenly now you're adding camera
functionality and it makes no sense.

00:55:54.480 --> 00:55:56.500
Focus on the purpose of this screen.

00:55:56.510 --> 00:55:58.460
I'm just saying sort of the
same thing over and over so

00:55:58.460 --> 00:56:00.040
that you drive home the point.

00:56:00.080 --> 00:56:04.220
Additions to each screen
should enhance what's there.

00:56:04.270 --> 00:56:06.920
Don't add something because there's
a little bit of room in the toolbar,

00:56:06.920 --> 00:56:09.920
and one of the engineers spent a lot of
time last night working on something,

00:56:09.920 --> 00:56:14.170
and so you really want to reward them
by putting an icon in the toolbar.

00:56:15.960 --> 00:56:18.100
Avoid cramming too much on the screen.

00:56:18.100 --> 00:56:21.580
Again, think about how what your
experience has been with iPhone.

00:56:21.580 --> 00:56:23.330
You've familiarized
yourself with this device.

00:56:23.480 --> 00:56:25.980
You know exactly how it works
and what you love about it.

00:56:26.020 --> 00:56:29.820
Make sure that whatever you design for
iPhone as well fits into that mold,

00:56:29.850 --> 00:56:33.020
and that other users are going to go, oh,
they're using your application.

00:56:33.020 --> 00:56:35.180
They go,
this is what's great about iPhone,

00:56:35.220 --> 00:56:37.590
this third-party app that they bought.

00:56:37.790 --> 00:56:39.640
So does it make sense for
something to be on screen?

00:56:39.730 --> 00:56:41.420
Is it critical functionality?

00:56:41.580 --> 00:56:42.420
Some other questions to ask.

00:56:42.580 --> 00:56:43.740
Is it frequently used?

00:56:43.930 --> 00:56:45.740
Well, let's define frequently.

00:56:45.780 --> 00:56:47.980
Is it used every time
they're on this screen?

00:56:48.020 --> 00:56:49.160
Almost always?

00:56:49.320 --> 00:56:51.220
Or sometimes?

00:56:51.270 --> 00:56:54.140
Or is it just when a selection is made?

00:56:54.610 --> 00:56:58.110
What's important now from
the user's perspective?

00:56:58.220 --> 00:57:01.950
When I'm on this screen,
what do users need to do?

00:57:03.330 --> 00:57:05.420
Prioritize items most
frequently used as well.

00:57:05.420 --> 00:57:08.710
As you're laying out these screens,
put the most important,

00:57:08.710 --> 00:57:11.170
most frequently used,
definition of important

00:57:11.170 --> 00:57:13.820
is frequently used,
things at the top of the screen.

00:57:13.820 --> 00:57:17.310
Notice here in the contacts page,
this is in the phone application,

00:57:17.310 --> 00:57:21.040
and so we're looking up a number
because we're going to call somebody.

00:57:21.040 --> 00:57:23.910
It makes sense that the telephone
number is at the top of the screen,

00:57:23.990 --> 00:57:26.700
because that's the thing we're
going to probably most likely,

00:57:26.700 --> 00:57:28.970
most frequently, most often,
most of our users are

00:57:28.970 --> 00:57:30.360
going to want to get to.

00:57:30.360 --> 00:57:33.280
If we listed the street address first,
what would happen?

00:57:33.380 --> 00:57:36.300
What would happen in terms of
the interaction model for iPhone?

00:57:36.320 --> 00:57:39.450
Got to phone my friend, look up friend.

00:57:40.380 --> 00:57:42.260
Page the screen-- oh,
there's the phone number--

00:57:42.270 --> 00:57:43.420
and dial the phone number.

00:57:43.650 --> 00:57:46.320
So think about how the screen is used,
what are users trying

00:57:46.400 --> 00:57:48.920
to accomplish with it,
and how can you lay out the data so

00:57:48.920 --> 00:57:51.690
the most important stuff is at the top.

00:57:51.890 --> 00:57:52.820
Group related items.

00:57:52.930 --> 00:57:55.850
This seems obvious,
but I can't tell you how many times

00:57:55.850 --> 00:57:59.330
I've sat down with people and it's
like there's a number up here that

00:57:59.350 --> 00:58:01.470
relates to a number down here,
and in between there's

00:58:01.470 --> 00:58:03.390
a lot of text and stuff,
and it's just kind of

00:58:03.480 --> 00:58:04.780
randomly put on screen.

00:58:04.780 --> 00:58:09.020
Not the buckshot stuff that we've
seen on Mac OS X in past years,

00:58:09.020 --> 00:58:10.920
by the way, but anyway.

00:58:10.920 --> 00:58:12.820
So group related items.

00:58:12.820 --> 00:58:16.640
You can do a great job with
group tables on iPhone.

00:58:18.290 --> 00:58:22.930
And another part here, broken slide here,
is to, another important thing is to

00:58:22.930 --> 00:58:24.260
eliminate extraneous content.

00:58:24.260 --> 00:58:31.040
So minimize the number of grouped
item titles that you've got on screen.

00:58:31.040 --> 00:58:32.580
We really only do that in settings.

00:58:32.580 --> 00:58:35.800
The rest of the time you can
tell that it's phone numbers,

00:58:35.800 --> 00:58:37.670
etc., by the data itself.

00:58:37.950 --> 00:58:39.510
Provide fingertip size targets.

00:58:39.700 --> 00:58:42.080
So when you're designing
an individual screen,

00:58:42.230 --> 00:58:46.480
make sure that everything that's
tappable is at least 44 points square.

00:58:46.480 --> 00:58:48.240
That's going to pretty much do it.

00:58:48.260 --> 00:58:52.210
define what you can put on a given line.

00:58:53.060 --> 00:58:54.690
Use standardized built-in controls.

00:58:54.820 --> 00:58:55.600
We bundle these.

00:58:55.790 --> 00:58:57.280
They're all part of iPhone SDK.

00:58:57.280 --> 00:58:59.760
There's a rich set of
controls built into UIKit.

00:58:59.960 --> 00:59:01.800
Some examples of these are here.

00:59:01.800 --> 00:59:05.820
A lot of them are accessories
to the table view object.

00:59:06.000 --> 00:59:08.300
You can't do them on your own,
but you can turn them

00:59:08.300 --> 00:59:10.510
on as accessory views,
and a lot of other

00:59:10.520 --> 00:59:11.760
stuff that's available.

00:59:11.820 --> 00:59:14.220
In addition, on this screen,
some more examples,

00:59:14.260 --> 00:59:16.520
and some more examples here in photos.

00:59:16.570 --> 00:59:20.980
Now notice in photos, the bottom bar,
there's only five icons.

00:59:21.010 --> 00:59:21.830
I'm sorry, that's in mail.

00:59:21.840 --> 00:59:24.480
I'm looking at mail messages there.

00:59:24.740 --> 00:59:26.920
All right,
a couple of key little controls I want

00:59:26.920 --> 00:59:30.730
to talk about very quickly to make sure
that we get consistent use of these.

00:59:30.870 --> 00:59:34.100
The disclosure control,
this is the disclosure indicator.

00:59:34.100 --> 00:59:35.900
It's a single arrow at the end of a row.

00:59:35.900 --> 00:59:38.920
It tells the user that when
they tap the entire row,

00:59:38.920 --> 00:59:40.580
anywhere on that row,
they're going to go to the

00:59:40.580 --> 00:59:42.300
next screen in the hierarchy.

00:59:42.400 --> 00:59:44.650
That's the action of that row.

00:59:45.000 --> 00:59:47.600
Alternatively,
there is the detailed disclosure button,

00:59:47.600 --> 00:59:49.460
which is the arrow in a circle.

00:59:49.820 --> 00:59:52.840
And that can live on a row,
or it can live elsewhere on your screen.

00:59:53.110 --> 00:59:56.910
And that,
it does a separate action from the host

00:59:57.050 --> 00:59:58.980
row that it's on in this particular case.

00:59:59.070 --> 01:00:01.290
And so it just says,
if you tap this user,

01:00:01.510 --> 01:00:03.760
you're going to get more detail
for the object on this row,

01:00:03.760 --> 01:00:06.200
rather than if you tap the row,
which does something else.

01:00:06.280 --> 01:00:09.580
Goes to the next screen in the hierarchy,
or selects the network,

01:00:09.680 --> 01:00:11.310
or whatever the example is.

01:00:11.950 --> 01:00:13.050
Toolbars are key.

01:00:13.210 --> 01:00:14.760
So you've got toolbars here in Mail.

01:00:15.040 --> 01:00:18.540
This is where you can put commands that
directly affect the things on screen.

01:00:18.650 --> 01:00:20.530
Typically,
you're only going to have controls

01:00:20.590 --> 01:00:23.190
that affect the content on screen.

01:00:24.590 --> 01:00:27.720
And as you go through this process
of designing an individual screen

01:00:27.930 --> 01:00:31.040
and choosing the elements you want
from UIKit and the standard controls

01:00:31.040 --> 01:00:33.920
that are built in the iPhone SDK,
you're going to run into a dilemma.

01:00:34.050 --> 01:00:36.050
I guarantee it because I've
seen it almost every time

01:00:36.140 --> 01:00:37.380
I've worked with a company.

01:00:37.570 --> 01:00:41.460
And the dilemma is,
which control do I use?

01:00:41.540 --> 01:00:44.660
So I want to talk about the experience
that we went through with AOL on one

01:00:44.660 --> 01:00:47.260
of their screens as it applies to this.

01:00:47.450 --> 01:00:52.480
So they had a settings
page for AIM on iPhone.

01:00:52.770 --> 01:00:54.760
And the settings page had a username.

01:00:54.820 --> 01:00:57.760
The question was, well,
do we just display the username

01:00:57.760 --> 01:00:59.250
or do we group it with an icon?

01:00:59.440 --> 01:01:00.570
Hmm.

01:01:00.910 --> 01:01:01.930
They had a buddy icon.

01:01:02.250 --> 01:01:03.620
Should they put it on the screen or not?

01:01:03.840 --> 01:01:06.740
They had looked at the context page and
they knew that the photo was very useful,

01:01:06.740 --> 01:01:08.400
but what about it?

01:01:08.480 --> 01:01:10.890
They had the ability
to set online status,

01:01:11.020 --> 01:01:12.660
but that could be done in multiple ways.

01:01:12.770 --> 01:01:13.840
They could do a list.

01:01:13.920 --> 01:01:14.900
They could do switches.

01:01:15.170 --> 01:01:16.620
They could group items.

01:01:16.700 --> 01:01:18.320
There's multiple ways
of doing these things.

01:01:18.360 --> 01:01:20.280
And as you get down to the
level of designing a screen,

01:01:20.280 --> 01:01:23.540
you're going to have to iterate through
this process to kind of figure out what's

01:01:23.540 --> 01:01:25.170
the right thing for your application.

01:01:25.350 --> 01:01:26.980
And they wanted to change away settings.

01:01:27.100 --> 01:01:29.140
So here are these things
that they wanted to do.

01:01:29.140 --> 01:01:30.460
What could they do with it?

01:01:30.510 --> 01:01:35.340
And that could be done with a
predefined list or with a text box.

01:01:35.490 --> 01:01:37.880
So they came up with
a preliminary mockup.

01:01:37.920 --> 01:01:41.580
And here you could see that they've got
some switches up at the top for status,

01:01:41.620 --> 01:01:43.580
and they've got a text
box for status message.

01:01:43.810 --> 01:01:48.910
Yeah, it's a great first sketch,
but it's not quite right.

01:01:50.800 --> 01:01:53.490
So next iteration, they went through,
they switched to I Interface

01:01:53.630 --> 01:01:55.640
Builder at that point,
started to Mach things up in

01:01:55.640 --> 01:01:59.320
a way that looked more real so
that it felt closer to reality.

01:01:59.350 --> 01:02:02.850
And here you've got,
it looks more like the context

01:02:03.020 --> 01:02:04.700
page in the phone application.

01:02:04.730 --> 01:02:09.030
It shows message,
and that saves room right below that,

01:02:09.030 --> 01:02:10.760
you know,
the two things are grouped together.

01:02:10.780 --> 01:02:12.980
You've got grouped status now.

01:02:13.020 --> 01:02:15.320
And invisibility is separate though.

01:02:15.590 --> 01:02:18.210
And the question is, should it be?

01:02:20.200 --> 01:03:29.700
[Transcript missing]

01:03:31.080 --> 01:03:33.820
At this point, I'd like to invite my
last guest on stage,

01:03:33.880 --> 01:03:38.230
Myspace, to talk about their experience
designing with some of this stuff.

01:03:44.850 --> 01:03:46.440
Good morning, everybody.

01:03:46.440 --> 01:03:47.460
My name is John Faith.

01:03:47.460 --> 01:03:50.200
I'm vice president of
engineering for Myspace.

01:03:50.300 --> 01:03:54.260
One of the teams I work with closely
on a daily basis is the mobile team.

01:03:54.360 --> 01:03:57.670
And I'm really excited to be here
this morning to talk to you all about

01:03:57.670 --> 01:04:00.760
our design and development process,
and also to be a part of

01:04:00.760 --> 01:04:02.550
this development community.

01:04:03.300 --> 01:04:05.690
So, Myspace Overview,
a little bit about our company.

01:04:05.700 --> 01:04:08.090
We were founded four
years ago in Santa Monica,

01:04:08.200 --> 01:04:11.720
California,
with the intent to connect people,

01:04:11.800 --> 01:04:14.330
content and culture on the web.

01:04:14.640 --> 01:04:16.480
As one of the early
social networking sites,

01:04:16.540 --> 01:04:19.040
we've seen a lot of growth and success.

01:04:19.090 --> 01:04:23.140
In April alone,
we signed up over 250,000 users a day,

01:04:23.210 --> 01:04:29.890
had 117 million monthly unique visitors,
and had over 50 billion page views.

01:04:30.510 --> 01:04:34.160
One of the interesting facts that
recently emerged about our company

01:04:34.160 --> 01:04:40.240
is that 12% of all time spent online
domestically is spent on MySpace.

01:04:40.330 --> 01:04:42.040
We continue to look for
growth opportunities,

01:04:42.040 --> 01:04:44.840
and when something like
the iPhone SDK comes out,

01:04:44.840 --> 01:04:48.540
we get really pumped up,
and so I want to talk a

01:04:48.540 --> 01:04:50.040
little bit about that.

01:04:50.610 --> 01:04:53.750
Prior to actually developing
for the iPhone SDK,

01:04:53.750 --> 01:04:57.360
we have launched our own website,
m.myspace.com,

01:04:57.360 --> 01:05:01.510
with the intent of having a
ubiquitous solution that is targeted

01:05:01.510 --> 01:05:03.800
to all carriers and all devices.

01:05:03.800 --> 01:05:08.120
We did so by paring down the core
functionality of a social network,

01:05:08.190 --> 01:05:10.520
of our social network,
and coming up with the core

01:05:10.520 --> 01:05:12.300
communication aspects of it.

01:05:12.380 --> 01:05:13.730
And users totally like this.

01:05:13.800 --> 01:05:19.490
We get over 1.5 million unique users
logging into m.myspace.com a day.

01:05:19.800 --> 01:05:22.970
But we realized that the
iPhone users want a little bit

01:05:22.970 --> 01:05:25.780
more out of their experience,
and so we designed

01:05:25.780 --> 01:05:28.030
specifically for the iPhone.

01:05:28.130 --> 01:05:30.240
We came up with something
that we believe is natural,

01:05:30.240 --> 01:05:31.960
intuitive to users.

01:05:32.160 --> 01:05:36.000
Our real core goal out of this
is if you are a MySpace user,

01:05:36.000 --> 01:05:38.690
and if you are an iPhone user,
the first time that you

01:05:38.690 --> 01:05:41.690
log into our application,
you're going to feel like it's home.

01:05:41.860 --> 01:05:45.360
You know what to press,
you know where to go to get your data.

01:05:46.090 --> 01:05:48.220
So how do we go about doing this?

01:05:48.340 --> 01:05:51.560
First and foremost,
we came up with our core design mantra.

01:05:51.600 --> 01:05:54.150
And the primary thing that
we concentrated on was

01:05:54.190 --> 01:05:55.700
understanding our users.

01:05:55.700 --> 01:05:58.120
MySpace users are a digital generation.

01:05:58.120 --> 01:06:00.370
They grew up with the internet.

01:06:00.470 --> 01:06:03.560
They grew up with mobile phones,
with digital cameras.

01:06:03.600 --> 01:06:07.310
And the iPhone really blends the
best of all of that together.

01:06:07.530 --> 01:06:09.210
Secondly, we streamline the experience.

01:06:09.390 --> 01:06:12.700
Even from the WAP experience
that we create on m.myspace.com,

01:06:12.750 --> 01:06:14.990
we had to rethink that because
this is a different architecture

01:06:15.000 --> 01:06:16.400
that we're working with here.

01:06:16.510 --> 01:06:20.400
Third, we've put together some cognitive
design into this process.

01:06:20.400 --> 01:06:23.390
And finally, it is Myspace,
it's the iPhone,

01:06:23.400 --> 01:06:27.430
so we wanted to create a really cool,
rich and fun application.

01:06:29.030 --> 01:06:33.530
So John spoke a lot about paper
prototyping in this presentation,

01:06:33.530 --> 01:06:35.780
and we were fully on board with this.

01:06:35.930 --> 01:06:38.360
This is the wall from our
Atlanta office where all the

01:06:38.360 --> 01:06:40.500
design went into our application.

01:06:40.500 --> 01:06:43.820
I must say that we had a really
cool experience with this,

01:06:43.820 --> 01:06:46.990
and our Atlanta team
are rabid iPhone users.

01:06:47.030 --> 01:06:50.820
So they were the ones that
were really into this.

01:06:50.880 --> 01:06:53.470
And what you're seeing here is
day one of paper prototyping.

01:06:53.580 --> 01:06:56.720
Day two, we were applying different
navigational flow and figuring

01:06:56.720 --> 01:06:58.260
out how the screens fit together.

01:06:58.440 --> 01:07:02.240
Also, it gave us the ability to put
different standard controls to

01:07:02.240 --> 01:07:07.020
MySpace features and make sure that
you're applying the right control to

01:07:07.160 --> 01:07:10.740
the right feature set for the intended
functionality of your application.

01:07:10.790 --> 01:07:11.760
This was all on a wall.

01:07:11.760 --> 01:07:13.400
It was done really cool.

01:07:13.630 --> 01:07:17.250
And then finally, within 48 hours,
a lot of caffeine later,

01:07:17.470 --> 01:07:22.050
we were able to come up with our final
flow and present that back to product,

01:07:22.240 --> 01:07:24.570
back to engineering,
and really start rocking and

01:07:24.570 --> 01:07:27.520
rolling on the application itself.

01:07:28.910 --> 01:07:30.720
Couple of slides from our application.

01:07:30.770 --> 01:07:34.000
MySpace has always been about
connecting with your friends.

01:07:34.080 --> 01:07:36.390
What I'd like you to take
a look at on this slide is

01:07:36.390 --> 01:07:38.070
the iconography we're using.

01:07:38.080 --> 01:07:40.050
This is a friend request slide.

01:07:40.050 --> 01:07:43.920
Each table row has four different
actions that you can do on it.

01:07:44.130 --> 01:07:48.130
It was very important to us to
port over the icons that users

01:07:48.130 --> 01:07:50.520
are familiar with on our website.

01:07:51.250 --> 01:07:54.720
And spruce them up a little bit,
but really stay core to

01:07:54.720 --> 01:08:01.110
what you have if you have an
existing application or website.

01:08:02.300 --> 01:08:05.640
Secondly, MySpace users,
check out profiles.

01:08:05.950 --> 01:08:09.140
What was our challenge here
was to basically deconstruct

01:08:09.290 --> 01:08:10.910
a standard profile on MySpace.

01:08:11.000 --> 01:08:13.300
If you guys have been on MySpace,
you know that there's a lot

01:08:13.380 --> 01:08:14.580
of information on a profile.

01:08:14.580 --> 01:08:18.260
So what was correct to
port to this application?

01:08:18.550 --> 01:08:22.070
Finally, what we're really stoked about
is the ability to interface

01:08:22.070 --> 01:08:26.760
with the iPhone camera SDK,
and it provided a very easy

01:08:26.760 --> 01:08:30.840
experience for us to provide the
users an experience to upload,

01:08:30.990 --> 01:08:33.980
snap and upload pictures
to their MySpace account.

01:08:34.850 --> 01:08:37.230
A couple things that I'd
like to leave you all with.

01:08:37.420 --> 01:08:38.900
Read the human interface guideline.

01:08:38.900 --> 01:08:42.680
That provided a wealth of knowledge
for us before we started coding,

01:08:42.680 --> 01:08:45.880
before we started designing,
and I cannot emphasize enough the

01:08:45.880 --> 01:08:47.650
importance of checking that out.

01:08:48.130 --> 01:08:50.660
Secondly, use the UI kit and prototype.

01:08:50.660 --> 01:08:53.810
Like I said,
by using the standard controls,

01:08:53.810 --> 01:08:58.440
it really gives you the ability to
think about what your application

01:08:58.440 --> 01:09:02.610
should be and what the UI object
hierarchy should be in it.

01:09:03.520 --> 01:09:04.810
And finally, stay true to the device.

01:09:04.970 --> 01:09:07.940
The iPhone is a very unique experience,
and you want to make sure that

01:09:07.940 --> 01:09:11.230
you're designing specifically for
this hardware and for this SDK.

01:09:11.570 --> 01:09:12.240
Thank you very much.

01:09:19.230 --> 01:09:21.020
Great, thanks John.

01:09:21.050 --> 01:09:26.710
Alright, let's wrap things up here with
one last step in this process.

01:09:27.410 --> 01:09:28.610
The last step is to finalize.

01:09:28.710 --> 01:09:32.180
This is where you're going to
polish and refine your design

01:09:32.180 --> 01:09:33.510
and really make it iPhone.

01:09:33.710 --> 01:09:36.770
Now this isn't the last thing you
do at the end of everything in terms

01:09:36.770 --> 01:09:39.780
of the overall product development.

01:09:39.920 --> 01:09:41.900
This is the last stage
of the design process,

01:09:42.050 --> 01:09:43.860
but it's kind of like washing your hair,
right?

01:09:43.860 --> 01:09:45.860
It's like shampoo, rinse, repeat.

01:09:46.000 --> 01:09:50.290
This entire cycle is going to go
back around as you kind of refine and

01:09:50.290 --> 01:09:53.030
iterate through your design process.

01:09:53.170 --> 01:09:55.620
But let's talk about the
last few things you could do.

01:09:55.750 --> 01:09:59.020
At this stage,
you need to think about how can you

01:09:59.020 --> 01:10:03.300
integrate the key characteristics of
iPhone that you familiarize yourself with

01:10:03.300 --> 01:10:06.920
way back at the beginning of the process,
and that you may have heard other

01:10:06.920 --> 01:10:08.960
applications taking advantage of.

01:10:09.430 --> 01:10:12.760
You can enhance your application
with photos and imagery.

01:10:12.830 --> 01:10:14.840
You can augment with animation.

01:10:14.900 --> 01:10:18.700
And you can use alternate
input mechanisms.

01:10:19.330 --> 01:10:21.390
First of all,
enhancing with photos and imagery.

01:10:21.510 --> 01:10:25.240
If you look at the contacts
application of iPhone,

01:10:25.310 --> 01:10:29.760
it is dramatically enhanced by the
inclusion of the contacts photo.

01:10:29.840 --> 01:10:30.210
Why?

01:10:30.400 --> 01:10:33.920
Because if it wasn't there,
the users would have to navigate

01:10:34.070 --> 01:10:35.420
and read a lot of information.

01:10:35.420 --> 01:10:38.110
Because if a couple of
contacts that shared a name

01:10:38.460 --> 01:10:41.390
lived in the same area code,
you'd have a lot of parallel

01:10:41.720 --> 01:10:44.480
and duplicity between phone
numbers and other things.

01:10:44.600 --> 01:10:47.200
And so you'd have to get into
the specifics and a lot of

01:10:47.200 --> 01:10:49.060
reading to pick the contact.

01:10:49.160 --> 01:10:52.030
So adding their photo lets you go, yes,
this is Jane Smith.

01:10:52.230 --> 01:10:54.330
This is the one I want.

01:10:54.540 --> 01:10:56.080
Same thing with iPod.

01:10:56.140 --> 01:10:57.420
We added album art.

01:10:57.760 --> 01:10:59.540
And album art does the
same thing as contacts.

01:10:59.640 --> 01:11:02.500
You pull your iPhone out, you're like,
oh, which-- oh, it's on that album.

01:11:02.500 --> 01:11:04.200
Yeah, yeah, yeah, that's the one I love,
right?

01:11:04.300 --> 01:11:06.220
Quick recognition, visual recognition.

01:11:06.270 --> 01:11:09.600
The brain does that far faster than
it does processing individual glyphs,

01:11:09.900 --> 01:11:13.930
turning those into characters,
and then turning that into a word.

01:11:14.240 --> 01:11:17.740
The same thing is true with maps
and real world objects that you can

01:11:17.740 --> 01:11:19.660
incorporate in your application.

01:11:19.700 --> 01:11:21.180
Augment with animation.

01:11:21.300 --> 01:11:24.780
Think about how the iPhone
uses animation today,

01:11:24.820 --> 01:11:28.620
and think about ways,
figure out ways to integrate that

01:11:28.620 --> 01:11:31.830
into your application to augment
the user experience of your app.

01:11:31.990 --> 01:11:35.730
Animation makes your
application realistic,

01:11:35.950 --> 01:11:38.290
fun, and very approachable, right?

01:11:38.470 --> 01:11:40.060
And that's what's a
big part of the iPhone,

01:11:40.060 --> 01:11:41.940
is that it's very fun and approachable.

01:11:41.980 --> 01:11:43.970
Animation adds physicality and realism.

01:11:44.220 --> 01:11:47.120
It makes the thing feel
like it's right there,

01:11:47.120 --> 01:11:48.860
and you're interacting directly with it.

01:11:48.860 --> 01:11:52.720
How many times have you sat and pulled
like a Safari web page all the way to the

01:11:52.720 --> 01:11:54.880
bottom and then had it bounce back up,
or the opposite?

01:11:54.880 --> 01:11:56.800
Or I mean,
sometimes we just play with our phones

01:11:56.800 --> 01:12:01.590
this way because of the animation effect
and the direct manipulation that's there.

01:12:03.520 --> 01:12:06.700
Some examples of where we augment
iPhone today with animation

01:12:06.700 --> 01:12:08.380
are we do it for deleting mail,
right?

01:12:08.380 --> 01:12:11.000
You get the animation
effect that's there.

01:12:11.000 --> 01:12:12.250
We do it for deleting notes.

01:12:12.400 --> 01:12:14.620
You get the genie effect that
goes down to the trash can.

01:12:14.620 --> 01:12:16.650
We do it for moving mail to folders.

01:12:16.950 --> 01:12:19.300
Not many people necessarily
organize their mail that way,

01:12:19.300 --> 01:12:22.150
but if you actually go into mail
application and move mail to a folder,

01:12:22.240 --> 01:12:25.120
you see the mail message icon fly
to the folder you've selected.

01:12:25.820 --> 01:12:27.430
Same effect for purchasing music.

01:12:27.440 --> 01:12:31.120
You go to download a song and boom,
you get a little animation that just,

01:12:31.260 --> 01:12:34.680
it drives home the point to the user,
gives them feedback that the

01:12:34.790 --> 01:12:38.300
action they initiated is actually
underway and was undertaken.

01:12:38.300 --> 01:12:42.950
We do animation for revealing map
features and showing map options.

01:12:42.950 --> 01:12:44.980
Now this feature,
this particular page curl,

01:12:45.130 --> 01:12:48.650
isn't yet available in the iPhone SDK,
but it's a great example of where

01:12:48.710 --> 01:12:53.210
animation can augment the experience
and not detract from the main task.

01:12:55.190 --> 01:12:56.980
Yet another example is changing photos.

01:12:57.170 --> 01:13:01.040
With the multi-touch UI and the gesture,
we're also animating that change.

01:13:01.170 --> 01:13:02.880
So there's this great feel.

01:13:02.880 --> 01:13:04.740
I mean,
that's one of the first things you show

01:13:04.740 --> 01:13:07.740
someone who doesn't have an iPhone,
is you say, oh, check this out.

01:13:07.800 --> 01:13:09.480
And you go into Photos and
you flick through Photos.

01:13:09.550 --> 01:13:13.210
That's the power of animation
and direct manipulation going on.

01:13:13.840 --> 01:13:14.820
Same thing with Safari.

01:13:14.820 --> 01:13:16.550
You choose a page,
you want to navigate to a

01:13:16.550 --> 01:13:18.820
different site or a different page,
you just flick and you get the

01:13:18.910 --> 01:13:22.180
feedback and then it animates forward
so you get that scaling effect.

01:13:22.230 --> 01:13:26.340
It's not these hard,
dry changes of state.

01:13:26.380 --> 01:13:28.360
Animation lets you morph between states.

01:13:28.410 --> 01:13:30.580
And finally,
we do animation for customizing icons.

01:13:30.690 --> 01:13:32.830
So all the icons wiggle on
the home page to tell you that

01:13:32.830 --> 01:13:35.090
there's a state difference,
you're in a different mode,

01:13:35.180 --> 01:13:37.960
you can do something different,
and yet there's not additional all

01:13:38.040 --> 01:13:41.350
kinds of new UI and controls and
button bars and all this stuff.

01:13:41.430 --> 01:13:44.220
Just changing state with
animation or conveying that to

01:13:44.220 --> 01:13:46.080
the user is really valuable.

01:13:46.190 --> 01:13:49.480
So as you consider adding animation
to augment your application,

01:13:49.510 --> 01:13:56.000
be careful to only use it to
enhance an existing task or concept.

01:13:56.290 --> 01:14:00.480
And make sure it carefully clarifies
a process and that it gives

01:14:00.670 --> 01:14:02.140
valuable feedback to the user.

01:14:02.210 --> 01:14:06.630
Don't animate everything on
screen just because it's cool.

01:14:08.190 --> 01:14:10.110
Lastly,
there are ultimate input mechanisms,

01:14:10.110 --> 01:14:11.740
which I talked about
briefly at the beginning.

01:14:11.870 --> 01:14:15.050
And they come down to accelerometer for
detecting orientation of the phone and

01:14:15.050 --> 01:14:17.340
doing something interesting with that.

01:14:17.370 --> 01:14:20.600
Using location to add the where
variable to your application,

01:14:20.610 --> 01:14:22.500
helping your users
understand where they are,

01:14:22.500 --> 01:14:25.410
where other users are, and how that might
impact your application.

01:14:25.460 --> 01:14:29.040
Only do these things if they make
sense and augment the experience of

01:14:29.040 --> 01:14:30.750
your application and its capabilities.

01:14:30.860 --> 01:14:33.280
Don't do it just because it's cool.

01:14:33.340 --> 01:14:34.910
And lastly, complex gestures.

01:14:34.950 --> 01:14:37.090
And I'll finish on this.

01:14:37.290 --> 01:14:39.210
This is beyond standard tap and drag.

01:14:39.490 --> 01:14:42.200
I know that there's a lot of
interest in doing some really cool,

01:14:42.200 --> 01:14:44.780
innovative, new, complex gestures.

01:14:44.870 --> 01:14:47.380
But I want to caution you
to take care with that.

01:14:47.520 --> 01:14:49.720
Start with the first version
of iPhone that's built on

01:14:49.720 --> 01:14:52.280
everything that's there today,
and use the gestures that we have,

01:14:52.280 --> 01:14:55.450
which is the swipe,
and basically it's a drag, and tap.

01:14:55.670 --> 01:14:58.540
The problem with creating your own and
innovating with your own gestures is

01:14:58.620 --> 01:15:02.860
that if we come up with a standardized
gesture for iPhone S in the future,

01:15:02.960 --> 01:15:05.530
that does something similar to yours,
but it's slightly different,

01:15:05.630 --> 01:15:08.490
your app is going to stand out as being
different from what we've done for that

01:15:08.490 --> 01:15:10.660
same type of gesture from the user.

01:15:10.810 --> 01:15:13.360
So only do it if you really,
really have to,

01:15:13.360 --> 01:15:14.350
and if it makes total sense.

01:15:14.460 --> 01:15:16.600
And there's a great example of an
app that was demoed in Keynote,

01:15:16.600 --> 01:15:19.940
MIM, from MIM Vista,
that does some unique things,

01:15:19.970 --> 01:15:23.520
and appropriately so, I think,
for their space.

01:15:23.590 --> 01:15:28.140
So that's the last step in this process,
and I want to drive home one final point.

01:15:28.200 --> 01:15:30.930
I made the point that the
iPhone development cycle

01:15:31.100 --> 01:15:32.820
requires a huge design phase.

01:15:32.880 --> 01:15:37.130
And I hope that you see now that
there's a lot to do in terms of design,

01:15:37.140 --> 01:15:40.050
but the end results of that
design process are great.

01:15:40.390 --> 01:15:42.310
You're going to come up
with something phenomenal,

01:15:42.310 --> 01:15:45.720
just like AOL did, just like HandMark did
with Pocket Express,

01:15:45.800 --> 01:15:50.390
and just like MySpace did with everything
that they learned through the process.

01:15:50.600 --> 01:15:53.920
So one call to action for you is,
make sure that you're

01:15:54.050 --> 01:15:56.900
allocating enough design time,
and you've got dedicated resources,

01:15:56.950 --> 01:15:59.780
and then get into the coding,
then get into debugging,

01:15:59.840 --> 01:16:02.980
then get into testing to make sure
that you've got the right design,

01:16:03.030 --> 01:16:03.920
and it works exactly the
way your users want it to.

01:16:04.030 --> 01:16:09.880
You need a blueprint, you need a design,
you need a plan when you're

01:16:09.880 --> 01:16:12.020
designing for iPhone,
and I hope that you've learned

01:16:12.020 --> 01:16:15.630
enough today to set a plan in motion,
and to aim yourself in

01:16:15.630 --> 01:16:17.180
the right direction.

01:16:17.180 --> 01:16:20.160
One of the best resources for
you to go to is the iPhone

01:16:20.160 --> 01:16:21.420
Human Interface Guidelines.

01:16:21.420 --> 01:16:24.650
There's some really talented
people contributing to that.

01:16:25.010 --> 01:16:27.310
There's a wealth of resources
there and information about how

01:16:27.400 --> 01:16:30.540
to use specific UI controls,
when to use them, when not to use them,

01:16:30.820 --> 01:16:33.220
and I encourage you
to go to that as well.

01:16:33.250 --> 01:16:36.180
And lastly,
I encourage you to contact me either

01:16:36.270 --> 01:16:39.420
during the show if you can find me,
or after the show, send me an email,

01:16:39.420 --> 01:16:41.900
and I would love to hook up with
you and work with you one-on-one

01:16:41.900 --> 01:16:45.500
on your application to make it as
great as it possibly can for iPhone.

01:16:45.560 --> 01:16:49.300
You can do this, it's hard work,
takes a lot of dedication, a lot of time,

01:16:49.380 --> 01:16:52.100
but the end result is
absolutely worth it.

01:16:52.180 --> 01:16:53.290
Thank you for coming today.