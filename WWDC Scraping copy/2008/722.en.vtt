WEBVTT

00:00:21.020 --> 00:00:24.680
Hello, I'm Kevin Calhoune of Apple's
Interactive Media Group,

00:00:24.680 --> 00:00:28.320
and this is session 722,
Preparing and Delivering

00:00:28.320 --> 00:00:30.980
Video for iPhone,
Safari, and Apple TV,

00:00:31.110 --> 00:00:34.980
also known as the session with multiple
punctuation marks in its title,

00:00:34.980 --> 00:00:37.260
which means it must be really,
really great.

00:00:38.600 --> 00:02:37.500
[Transcript missing]

00:02:38.210 --> 00:02:41.270
So what you'll learn here,
you will learn how to prepare your video

00:02:41.270 --> 00:02:44.970
assets for delivery to the platforms
of interest during this conference,

00:02:44.970 --> 00:02:49.200
iPhone, Apple TV, and web,
so how to encode it and so forth.

00:02:49.460 --> 00:02:51.990
But also,
we'll touch upon all of the options

00:02:51.990 --> 00:02:55.840
that you have for delivering
your content to those platforms,

00:02:55.840 --> 00:02:59.490
including custom applications,
including podcasts.

00:02:59.490 --> 00:03:02.470
But we're going to give most
of the emphasis during this

00:03:02.470 --> 00:03:04.000
session on web delivery.

00:03:04.000 --> 00:03:07.660
We're going to be talking about the
kinds of options that you have for

00:03:07.740 --> 00:03:11.890
integrating your content into web apps,
both what you can do today and what

00:03:11.890 --> 00:03:15.710
you can look forward to in the future,
including how to give behavior

00:03:15.730 --> 00:03:18.550
to your video in your web apps
so that it integrates well

00:03:18.860 --> 00:03:20.620
with other types of content.

00:03:20.620 --> 00:03:25.770
And part of that look ahead that
I promised pertains to HTML5.

00:03:26.800 --> 00:03:30.390
Okay, so what technology frameworks
are we going to be related

00:03:30.390 --> 00:03:31.440
to during this session?

00:03:31.440 --> 00:03:36.380
All right, for audiovisual standards,
that MPEG-4 body of standards

00:03:36.480 --> 00:03:39.520
that I mentioned for encoding
and container formats,

00:03:39.520 --> 00:03:43.820
we'll be talking about QuickTime's,
Apple's implementation of those standards

00:03:43.820 --> 00:03:45.900
in the product known as QuickTime.

00:03:45.900 --> 00:03:50.430
We'll also touch upon web standards,
obviously, HTML for markup,

00:03:50.720 --> 00:03:55.160
CSS for styling and presentation,
JavaScript for behavior,

00:03:55.200 --> 00:03:57.100
and we'll talk about Apple's
implementation of those

00:03:57.250 --> 00:03:59.330
standards in WebKit and Safari.

00:03:59.380 --> 00:04:02.090
And since we're going to be
talking about custom apps as well,

00:04:02.240 --> 00:04:05.720
we'll talk about the application
frameworks that you will need to use

00:04:05.880 --> 00:04:12.330
to build custom apps on Mac OS X,
on iPhone, and for Windows as well.

00:04:12.800 --> 00:04:13.860
So it's a packed session.

00:04:13.960 --> 00:04:15.660
I hope you're all strapped in.

00:04:15.890 --> 00:04:19.760
We're going to start with the raw
specifications for video encoding

00:04:19.770 --> 00:04:21.550
for these various platforms.

00:04:21.790 --> 00:04:25.600
We're going to tell you the bitrates and
everything just because we think some

00:04:25.770 --> 00:04:30.550
of you are curious and also because some
of you are using tools that give you

00:04:30.550 --> 00:04:35.500
broad options across the profiles that
these various encoding formats support.

00:04:35.500 --> 00:04:38.760
And you might need to know practically
what settings to use with these

00:04:38.840 --> 00:04:42.110
encoders when you're creating
material for these platforms.

00:04:42.940 --> 00:04:46.350
Also, some of you might be
implementers of encoding tools,

00:04:46.620 --> 00:04:49.780
and you might want to integrate
into those tools the ability to

00:04:49.780 --> 00:04:52.040
target these platforms specifically.

00:04:52.140 --> 00:04:54.340
So we'll give you information
about how to do that.

00:04:54.460 --> 00:04:56.470
And that's how we start.

00:04:56.700 --> 00:04:59.700
So for the next set of slides,
I'm going to be giving you the most

00:05:00.140 --> 00:05:03.360
oppressive and information-laden
portion of the session,

00:05:03.360 --> 00:05:06.040
and I was chosen to do this because
I'm the most oppressive member

00:05:06.040 --> 00:05:07.540
of your presentation team today.

00:05:07.540 --> 00:05:10.640
Well-suited for the task,
let's start with iPhone.

00:05:10.640 --> 00:05:16.500
The video encoding that we recommend
for iPhone is H.264 encoding.

00:05:17.060 --> 00:05:20.190
The iPhone supports up
to the baseline profile,

00:05:20.190 --> 00:05:23.700
level 3.0,
which by itself implies that the

00:05:23.700 --> 00:05:28.650
dimensions that it supports are up to
640 by 480 at 30 frames per second.

00:05:28.660 --> 00:05:32.290
And you may also know that baseline
profile also implies that B-frames

00:05:32.370 --> 00:05:36.140
are not supported on this platform,
although you can achieve really good

00:05:36.140 --> 00:05:41.590
quality video without the B-frames
at these resolutions on that device.

00:05:42.000 --> 00:08:09.600
[Transcript missing]

00:08:09.770 --> 00:08:14.410
For example,
if you have video at a 16:9 aspect ratio,

00:08:14.540 --> 00:08:18.400
typical for high def,
you might choose to encode it

00:08:18.400 --> 00:08:22.460
for iPhone at a scaled down size,
preserving its aspect

00:08:22.460 --> 00:08:25.500
ratio of 480 by 270.

00:08:25.550 --> 00:08:28.930
You should be aware that when you
deliver that video to the iPhone,

00:08:28.930 --> 00:08:32.670
the user has two options
for the way this might look.

00:08:37.870 --> 00:08:41.720
The user can choose to view it
at its original aspect ratio.

00:08:41.720 --> 00:08:43.880
And in this case,
since the video is a little

00:08:43.880 --> 00:08:47.200
wider than the device,
it will be displayed letterboxed with

00:08:47.200 --> 00:08:51.060
unused pixels at the top and the bottom
not needed for the video display.

00:08:51.180 --> 00:08:55.030
But the standard transport
controls on the iPhone allow

00:08:55.030 --> 00:08:56.930
the user to zoom that up.

00:08:57.070 --> 00:08:58.940
To fill the screen.

00:08:58.970 --> 00:09:01.590
And what that will look
like would be this.

00:09:01.930 --> 00:09:04.160
Zooming up to fill the
screen in this case means,

00:09:04.160 --> 00:09:06.180
since the video is
wider than the display,

00:09:06.260 --> 00:09:09.280
cutting off the left side and
the right-hand side of the video.

00:09:09.320 --> 00:09:13.470
You should be aware that
users have this option,

00:09:13.520 --> 00:09:18.910
so if you're producing content
specifically for the iPhone,

00:09:18.910 --> 00:09:20.610
you might not want to put vital
information far to the left or

00:09:20.610 --> 00:09:20.610
far to the right of the frame.

00:09:21.370 --> 00:09:25.340
Okay, that's the basics of what you
need to know if you are encoding

00:09:25.510 --> 00:09:27.540
content for delivery to the iPhone.

00:09:27.540 --> 00:09:32.700
Let's move on to something after
a punctuation mark in our title.

00:09:32.700 --> 00:09:37.300
If you are targeting video for Apple TV,
this is a different device.

00:09:37.380 --> 00:09:41.280
It supports up to high-def quality video.

00:09:41.280 --> 00:09:44.000
It looks really good when you
plug it into your high-definition

00:09:44.080 --> 00:09:45.300
flat-screen monitor.

00:09:46.460 --> 00:09:50.040
Apple TV supports same
family of video encoding,

00:09:50.040 --> 00:09:53.760
H.264,
up to the progressive main profile,

00:09:53.760 --> 00:09:55.250
level 3.1.

00:09:55.260 --> 00:09:55.850
What does this mean?

00:09:56.230 --> 00:10:02.520
This means that you have sizes
available of 1280x720 at 24 fips.

00:10:02.640 --> 00:10:05.710
That's 720p at 24 fips.

00:10:05.720 --> 00:10:09.960
Or if you need a higher frame rate,
up to 30 fips, you have to encode at a

00:10:09.960 --> 00:10:11.330
slightly smaller size.

00:10:11.380 --> 00:10:15.140
960x540 will work well
at 30 frames per second.

00:10:15.590 --> 00:10:18.230
That profile implies that
B frames are supported,

00:10:18.230 --> 00:10:21.860
and you will definitely want to use
them in order to achieve the necessary

00:10:21.940 --> 00:10:24.640
data rates with resolutions that large.

00:10:26.200 --> 00:10:27.810
Audio on the Apple TV.

00:10:28.140 --> 00:10:32.300
Again, AACLC up to 48 kilohertz
is supported on Apple TV,

00:10:32.300 --> 00:10:36.030
but you also have the option
on Apple TV if you happen to be

00:10:36.040 --> 00:10:39.800
producing content for delivery to
other types of hardware for which

00:10:39.800 --> 00:10:41.960
you are creating Dolby Digital audio.

00:10:41.960 --> 00:10:47.790
You can deliver that to Apple TV as well,
starting with Apple TV 2.0.

00:10:48.730 --> 00:10:50.540
Container formats supported by Apple TV.

00:10:50.540 --> 00:10:52.490
QuickTime movie files are supported.

00:10:52.500 --> 00:10:54.660
MPEG-4 files are supported.

00:10:54.660 --> 00:10:58.160
And the M4V variant of
MPEG-4 also supported.

00:10:58.160 --> 00:11:03.670
Same as iPhone on Apple TV, MPEG-4 video,
MPEG-4 Part 2 video, that is,

00:11:03.850 --> 00:11:05.100
is supported.

00:11:05.100 --> 00:11:09.600
And all iPod playable content is
playable on the Apple TV as well.

00:11:09.600 --> 00:11:12.480
So our table for
Apple TV looks like this.

00:11:12.590 --> 00:11:16.700
Again, the maximums listed here might
not be appropriate for you,

00:11:16.700 --> 00:11:19.720
and in particular in this case,
not all the maximums are

00:11:19.720 --> 00:11:21.000
achievable simultaneously.

00:11:21.000 --> 00:11:24.620
You'll have to recall that at 24
frames -- at the largest sizes,

00:11:24.620 --> 00:11:28.200
the highest frame rate available
is 24 frames per second.

00:11:28.260 --> 00:11:32.370
If you need a higher frame rate,
you got to scale down just a little bit.

00:11:32.550 --> 00:11:35.040
Other important point here,
data rate that you can

00:11:35.040 --> 00:11:36.800
achieve on the Apple TV.

00:11:36.830 --> 00:11:39.950
A sustained data rate of 5
megabits per second is what

00:11:39.950 --> 00:11:41.180
we recommend for the encoding.

00:11:41.180 --> 00:11:46.540
But just as happens with production
video content for other devices as well,

00:11:46.540 --> 00:11:50.630
if you have a cut in the video and
you want to play smoothly across

00:11:50.630 --> 00:11:53.910
that cut and things are changing,
you need a high-quality

00:11:53.910 --> 00:11:57.220
intraframe right after that cut,
the device supports local

00:11:57.670 --> 00:12:01.690
maximum spikes in the encoding
of up to 12 megabits per second.

00:12:01.690 --> 00:12:06.860
So you can tweak those important points
in your encoding up to that data rate.

00:12:08.580 --> 00:12:12.020
All right,
two hardware devices we covered, iPhone,

00:12:12.110 --> 00:12:14.130
Apple TV.

00:12:14.130 --> 00:12:14.130
Now...

00:12:14.290 --> 00:12:18.110
The third platform that we are talking
about in this session today is the web.

00:12:18.110 --> 00:12:23.280
But we have to remember that these days,
web delivery does not imply

00:12:23.280 --> 00:12:25.380
a specific class of devices.

00:12:25.380 --> 00:12:29.230
Desktop users can connect to
the web by any number of means.

00:12:29.300 --> 00:12:32.870
High-speed connections, broadbands,
lower network connections as well

00:12:32.870 --> 00:12:34.950
are possible from desktop machines.

00:12:34.950 --> 00:12:38.980
But whole new classes of devices
have become common that also are

00:12:39.060 --> 00:12:42.360
capable of connecting to the web,
and they have a different set of

00:12:42.470 --> 00:12:44.180
constraints on video and code.

00:12:44.200 --> 00:12:45.750
coatings.

00:12:46.440 --> 00:12:48.300
There's a wide range.

00:12:48.370 --> 00:12:52.320
However, the standard that we've adopted
at Apple for video encoding,

00:12:52.320 --> 00:12:57.100
H.264, has solutions,
has sweet spots across the entire range

00:12:57.100 --> 00:13:02.950
of devices and network speeds that you
will be encoding for for your users,

00:13:03.340 --> 00:13:05.490
regardless of the device
that they are using.

00:13:05.980 --> 00:13:09.610
So, the encoding varies by device,
but the formats that we

00:13:09.610 --> 00:13:11.310
recommend are the same.

00:13:11.310 --> 00:13:14.820
Again, H.264 video,
give you more details in a moment

00:13:14.820 --> 00:13:16.960
about the range that we recommend.

00:13:16.960 --> 00:13:21.120
For audio, again,
AACLC up to 48 kHz is supported on all

00:13:21.130 --> 00:13:24.040
the devices that we're talking about.

00:13:24.360 --> 00:13:27.470
Same list of container formats,
but on the desktop,

00:13:27.470 --> 00:13:30.800
those have web connections
from desktop machines,

00:13:30.810 --> 00:13:35.160
actually can make use of additional
container formats as well.

00:13:35.160 --> 00:13:37.710
In particular,
all the container formats as

00:13:37.710 --> 00:13:41.260
supported by QuickTime 7 are
available in case you have legacy

00:13:41.390 --> 00:13:43.400
content in any of those formats.

00:13:43.520 --> 00:13:47.270
But we recommend QuickTime movie files,
MPEG-4 and M4V,

00:13:47.270 --> 00:13:51.770
just as for the other devices,
and 3GP for the low data rate stuff.

00:13:53.420 --> 00:13:54.920
All right,
a little more information about

00:13:55.050 --> 00:13:56.380
the range that we're talking about.

00:13:56.470 --> 00:13:59.690
We're talking about really
small to really large.

00:13:59.770 --> 00:14:04.080
3GP mobile device on something
like the Edge Network,

00:14:04.320 --> 00:14:07.400
the most appropriate encoding
that you might want to use,

00:14:07.400 --> 00:14:12.860
something like 176 by 144 maximum size
at 64 kilobits per second for the video,

00:14:12.900 --> 00:14:16.620
total of 80 kilobits per second
for the audio plus video.

00:14:16.620 --> 00:14:19.970
That's a pretty narrow pipe,
but you can deliver good quality

00:14:19.970 --> 00:14:21.860
stuff across that connection.

00:14:22.440 --> 00:14:25.200
All the way to the high end
where we're talking about

00:14:25.200 --> 00:14:28.250
something like an HD trailer,
like the kind that you can

00:14:28.250 --> 00:14:33.570
see on Apple's trailer site,
up to 1080p, 1920 by 1080 dimensions,

00:14:33.610 --> 00:14:37.260
up to 8 to 10 megabits per
second sustained data write.

00:14:37.560 --> 00:14:41.050
That's achievable if you have a
fast enough network connection

00:14:41.050 --> 00:14:42.750
for delivery via the web.

00:14:42.770 --> 00:14:45.900
You probably would only have a
restricted set of users that are

00:14:45.900 --> 00:14:49.490
actually capable of keeping up with
that amount of data coming across,

00:14:49.680 --> 00:14:51.790
but it's doable for certain applications.

00:14:51.800 --> 00:14:51.850
Thank you.

00:14:55.750 --> 00:15:00.360
What if you want to deliver just one
encoding that can span this entire range

00:15:00.360 --> 00:15:01.990
of devices and network connections?

00:15:01.990 --> 00:15:03.520
What's our recommendation?

00:15:03.670 --> 00:15:08.120
Well, you've probably noticed from the
prior slides that all of the devices

00:15:08.710 --> 00:15:11.330
that are capable of connecting
to the web that we're talking

00:15:11.760 --> 00:15:13.280
about support iPhone encoding.

00:15:13.280 --> 00:15:16.610
So you can just say,
create an encoding suitable for iPhone,

00:15:16.610 --> 00:15:20.220
you can deliver that in a web app,
and that will work everywhere.

00:15:20.220 --> 00:15:23.340
Now, that won't take full advantage,
of course,

00:15:23.360 --> 00:15:27.990
of the horsepower and the bandwidth
that's available to top-end devices.

00:15:27.990 --> 00:15:34.340
So we recommend that you can choose
to create more than one encoding.

00:15:34.340 --> 00:15:38.580
If you don't have constraints
on server space or on bandwidth,

00:15:38.580 --> 00:15:43.460
you can create multiple encodings for
the same content and make sure that

00:15:43.460 --> 00:15:48.390
the appropriate users are viewing
the appropriate encoding by something

00:15:48.450 --> 00:15:50.200
that we call a QuickTime Render.

00:15:50.220 --> 00:15:51.410
So,
let's talk about the QuickTime Render.

00:15:51.490 --> 00:15:55.100
A QuickTime Render is
essentially a table of contents.

00:15:55.180 --> 00:16:00.460
And when a QuickTime Render is opened,
the user agent or QuickTime,

00:16:00.460 --> 00:16:03.440
whatever happens to be
reading the QuickTime Render,

00:16:03.510 --> 00:16:05.430
will take a look at that
table of contents and say,

00:16:05.500 --> 00:16:07.680
"Hey,
if my network connection is this fast,

00:16:07.740 --> 00:16:10.880
I'm supposed to go to this
URL and view this movie.

00:16:10.950 --> 00:16:14.440
If my network connection is this fast,
I should choose this one." There are

00:16:14.440 --> 00:16:17.820
other switches that are possible
as well in this table of contents,

00:16:17.890 --> 00:16:20.220
according to device,
according to encoding,

00:16:20.220 --> 00:16:22.220
and according to the reference movies.

00:16:22.300 --> 00:16:25.620
So, if you have a reference movie that's
a good example of a decoding format

00:16:25.620 --> 00:16:29.220
supported on the end user's device,
this reference movie, for example,

00:16:29.220 --> 00:16:34.220
could give you the option of viewing one
URL for an iPhone on an edge connection,

00:16:34.220 --> 00:16:37.220
another URL for an iPhone
on a Wi-Fi connection,

00:16:37.490 --> 00:16:43.220
and yet a third URL for a desktop
machine with a broadband connection,

00:16:43.310 --> 00:16:47.220
capable of decoding H.264 main profile.

00:16:47.220 --> 00:16:50.220
We'll talk about how you can create
these reference movies in just a minute.

00:16:50.220 --> 00:16:52.660
But first,
let's talk about how you can use

00:16:52.660 --> 00:16:56.600
some common tools to create this
whole range of encodings without

00:16:56.600 --> 00:16:59.130
having to know any of the raw
detail that we just talked about.

00:16:59.260 --> 00:17:02.220
So, we're moving away from
the oppressive detail,

00:17:02.230 --> 00:17:05.130
and we're talking more
about the cool tools.

00:17:05.900 --> 00:17:09.800
QuickTime Pro allows you to create
all of the kinds of material,

00:17:10.040 --> 00:17:11.950
all of the encodings
that I've talked about,

00:17:11.950 --> 00:17:12.740
really easy.

00:17:12.740 --> 00:17:17.220
It has what are known as movie exporters
built right into it that allow you

00:17:17.400 --> 00:17:21.390
just to choose export to iPhone
and the result will be appropriate,

00:17:21.450 --> 00:17:23.480
or export to Apple TV and so forth.

00:17:23.880 --> 00:17:27.670
These movie exporters are really
accessible in QuickTime Pro,

00:17:28.030 --> 00:17:30.560
really easy for you to get
to from QuickTime Player.

00:17:30.760 --> 00:17:36.250
But it's possible for other applications
using the QuickTime framework to make

00:17:36.400 --> 00:17:39.300
these same exporters available as well.

00:17:39.450 --> 00:17:44.020
So it's possible in custom tools or in
tools from other vendors to have these

00:17:44.080 --> 00:17:49.380
same easy-to-use features for export
targeting these particular platforms.

00:17:49.660 --> 00:17:52.790
For creating reference movies,
once you have the various encodings,

00:17:52.900 --> 00:17:54.170
we have two options for you.

00:17:54.170 --> 00:17:58.790
One, we have a feature in
QuickTime Player called Export for Web,

00:17:58.860 --> 00:18:00.160
which takes care of a lot of stuff.

00:18:00.280 --> 00:18:01.870
We're going to demo that
for you in a moment.

00:18:01.880 --> 00:18:05.480
We also have a tool that you
can use called MakeRefMovie.

00:18:05.610 --> 00:18:09.150
This is available from the
QuickTime Developer Tools site

00:18:09.290 --> 00:18:12.700
that you can navigate to
on the ADC pages at Apple.

00:18:13.740 --> 00:18:17.210
MakeRefMovie allows you to create
a reference movie by hand with

00:18:17.760 --> 00:18:21.560
whatever complex set of switches,
no matter how many encodings you

00:18:21.660 --> 00:18:24.120
decide to prepare for your users.

00:18:24.650 --> 00:18:27.880
All right, a little more detail about
how to get to this stuff.

00:18:27.940 --> 00:18:31.020
QuickTime players, export components,
as I mentioned,

00:18:31.160 --> 00:18:32.800
are standard in QuickTime.

00:18:32.800 --> 00:18:35.470
The ones that we're going
to be talking about here,

00:18:35.480 --> 00:18:38.280
movie to iPhone,
that will create exactly the type of

00:18:38.280 --> 00:18:42.670
encoding that's appropriate for an
iPhone connected to the network via WiFi.

00:18:42.920 --> 00:18:45.560
Same encoding parameters that
I just mentioned earlier.

00:18:45.560 --> 00:18:50.870
Approximately one megabit per second,
up to 480 by 360 to take advantage

00:18:51.250 --> 00:18:56.220
of that data rate for the actual
display capabilities of the device.

00:18:58.440 --> 00:19:02.490
Movie to iPhone Cellular will create
an M4V file that will work if the

00:19:02.490 --> 00:19:04.240
iPhone's connection is the Edge network.

00:19:04.600 --> 00:19:06.540
Lower data rate, still good quality.

00:19:08.350 --> 00:19:10.780
I'll mention Movie to iPod,
which is another one of these

00:19:10.780 --> 00:19:12.000
exporters that's available.

00:19:12.000 --> 00:19:15.490
From the earlier slides,
you know that all the devices that we're

00:19:15.490 --> 00:19:17.370
talking about support iPod encodings.

00:19:17.400 --> 00:19:20.880
You can choose this exporter as well
if you want to create one encoding

00:19:20.890 --> 00:19:22.850
that's suitable for all this stuff.

00:19:22.940 --> 00:19:27.190
And the parameters of the encoding that
will be created are given to you there.

00:19:27.200 --> 00:19:30.310
Finally, however, if you want,
for some reason,

00:19:30.310 --> 00:19:33.630
if you use one of these exporters
and they don't precisely give

00:19:33.660 --> 00:19:38.350
you exactly what you want,
you can use the Movie to MPEG-4 exporter,

00:19:38.490 --> 00:19:42.800
which gives you access to more settings
that you can tweak to suit you.

00:19:42.860 --> 00:19:46.760
Movie to MPEG-4

00:19:47.680 --> 00:19:49.460
Looks a little bit like this.

00:19:49.540 --> 00:19:52.500
You open up your asset
in QuickTime Player Pro.

00:19:53.010 --> 00:19:55.270
Then you choose
Export from the File menu.

00:19:55.270 --> 00:19:56.600
Up comes this panel.

00:19:56.670 --> 00:20:01.140
It includes the pop-up menu in the panel
for the exporters that you can choose,

00:20:01.310 --> 00:20:02.750
the ones that I just mentioned.

00:20:02.870 --> 00:20:05.100
For example,
you can choose Movie to MPEG-4.

00:20:05.100 --> 00:20:07.670
Those exporters that
have additional features,

00:20:07.670 --> 00:20:11.140
additional settings will
display an additional panel.

00:20:11.140 --> 00:20:13.660
This is the panel for Movie to MPEG-4.

00:20:13.660 --> 00:20:17.670
Here you can choose the data rate,
for example, of your H.264 encoding.

00:20:17.780 --> 00:20:22.770
You can choose MPEG-4 video instead of
H.264 if that's more suitable to you.

00:20:22.900 --> 00:20:25.020
For example,
if you were encoding to iPhone,

00:20:25.030 --> 00:20:27.700
you would want to click on
the Video Options button

00:20:27.710 --> 00:20:31.500
and you would want to say,
"For iPhone, I know because I went to

00:20:31.500 --> 00:20:36.220
session 722 that for iPhone,
I need to encode at the baseline

00:20:36.220 --> 00:20:40.400
profile of H.264." Other things are
tweakable there as well so that you

00:20:40.400 --> 00:20:42.810
can create an encoding to suit you.

00:20:42.820 --> 00:20:42.820
Kevin Calhoun, Jeremy Farbaugh,
Eric Carlson, Mike Czepiel But suppose

00:20:42.820 --> 00:20:42.820
you're not a video editor and
you want to encode to H.264,

00:20:42.820 --> 00:20:42.860
then you can choose MPEG-4 video instead
of H.264 if that's more suitable to you.

00:20:42.860 --> 00:20:43.810
For example,
if you were But suppose you're not

00:20:43.880 --> 00:20:47.310
interested in all those details,
you want to use the one-click feature

00:20:47.350 --> 00:20:52.200
that takes care of all this for you,
that's Export4Web in QuickTime Player.

00:20:52.200 --> 00:20:55.410
And Jeremy Farabagh,
known as the Code topiarist -- and you

00:20:55.410 --> 00:20:58.930
know I had a little bit of water before
coming up here so I can say that -- is

00:20:58.930 --> 00:21:02.340
going to show you what Export4Web will
do for you in QuickTime Player Pro.

00:21:02.340 --> 00:21:03.300
Jeremy?

00:21:03.340 --> 00:21:04.340
Jeremy Farabagh: Hi.

00:21:04.340 --> 00:21:05.340
Thanks.

00:21:05.340 --> 00:21:06.340
I'm Jeremy Farabagh.

00:21:07.620 --> 00:21:10.510
I'm a developer for the
QuickTime Player Pro team.

00:21:10.510 --> 00:21:13.960
And QuickTime Player introduced recently
a new feature called Export for Web,

00:21:13.960 --> 00:21:16.590
as Kevin said,
that allows you to export up to

00:21:16.590 --> 00:21:20.590
three different platform-appropriate
versions of your content.

00:21:20.600 --> 00:21:23.190
And I'm going to demo
it for you right now,

00:21:23.190 --> 00:21:24.300
just quickly.

00:21:26.800 --> 00:21:30.370
Okay, so here I've got a little bit of
the movie Last Time I Saw Paris,

00:21:30.370 --> 00:21:34.400
and I want to make a single version
that's appropriate for the iPhone,

00:21:34.400 --> 00:21:36.120
iPhone over Edge, and for the desktop.

00:21:36.140 --> 00:21:39.770
So up here from the File menu,
I'm going to choose Export for Web,

00:21:39.770 --> 00:21:42.480
which will pop down a sheet with
just a limited number of options.

00:21:42.480 --> 00:21:48.440
I'm going to call this Last Time,
and it lets you choose between three

00:21:48.440 --> 00:21:53.560
different versions of your exported
movies appropriate for the phone,

00:21:53.560 --> 00:21:56.120
for the iPhone over the Edge network,
and for the desktop.

00:21:56.330 --> 00:22:00.490
The desktop version will
be also great for Apple TV.

00:22:00.690 --> 00:22:04.220
If you have a movie with a poster frame,
you can choose either that or the current

00:22:04.220 --> 00:22:08.170
frame of the movie from which you'll
create a poster image if you're going

00:22:08.170 --> 00:22:11.600
to use this for embedding into a website.

00:22:12.000 --> 00:22:14.540
When I click Export,
the player is going to start

00:22:14.540 --> 00:22:16.900
three different exports.

00:22:16.970 --> 00:22:19.890
It shouldn't take too long
since it's a very small clip.

00:22:20.620 --> 00:22:23.740
And it'll create those three exported
versions plus one reference movie

00:22:23.740 --> 00:22:25.680
that wraps them all up together.

00:22:25.800 --> 00:22:30.190
It'll also create an HTML file,
which demonstrates how you would

00:22:30.190 --> 00:22:33.100
embed this movie into a web page.

00:22:33.700 --> 00:22:37.780
It includes a little bit of JavaScript,
a little bit of HTML,

00:22:37.780 --> 00:22:40.520
and you can just copy and paste
these into your web page from

00:22:40.520 --> 00:22:45.110
whatever text editor you like,
or your blog for that matter.

00:22:45.870 --> 00:22:49.900
And what you'll get is something
that looks very much like this.

00:22:50.020 --> 00:22:51.030
Right now it's just an image.

00:22:51.030 --> 00:22:54.880
You click on it and it will
switch over to a movie.

00:22:55.890 --> 00:22:56.640
Great scene.

00:22:56.700 --> 00:22:57.950
Okay.

00:22:58.040 --> 00:22:59.410
And there you have it.

00:22:59.670 --> 00:23:00.030
Very simple.

00:23:00.040 --> 00:23:01.320
Thanks, Jeremy.

00:23:05.490 --> 00:23:08.910
We'll be giving you more details
in just a little bit about the

00:23:08.910 --> 00:23:11.830
markup that Export4Web creates
and a little more details about

00:23:11.890 --> 00:23:13.040
the JavaScript that's available.

00:23:13.040 --> 00:23:15.850
But if you just put that on your website,
you're good to go.

00:23:17.610 --> 00:23:20.530
So that's tools in QuickTime Pro that
are available to prepare

00:23:20.530 --> 00:23:22.300
video for these platforms.

00:23:22.370 --> 00:23:25.990
You might be using professional
strength video editing tools such

00:23:26.380 --> 00:23:30.300
as Apple's Final Cut Studio Pro,
Final Cut Pro Studio.

00:23:30.300 --> 00:23:31.600
There, I got it right the second time.

00:23:31.600 --> 00:23:35.500
These tools have lots more options
for the preparation of video.

00:23:35.500 --> 00:23:38.070
In particular,
you can not only prepare audio

00:23:38.070 --> 00:23:41.460
and video for these platforms,
you can use this suite of tools

00:23:41.580 --> 00:23:45.420
also if you have closed caption
information in your source assets.

00:23:45.480 --> 00:23:47.480
You can bring that all the way
through to your source assets.

00:23:47.500 --> 00:23:50.920
You can also use this suite of
tools to prepare video for delivery

00:23:50.920 --> 00:23:53.640
to each one of these platforms,
iPhone, Apple TV,

00:23:53.680 --> 00:23:57.410
and the full range of web-capable
devices using this suite of tools.

00:23:57.410 --> 00:24:01.540
If you're preparing material for these
platforms with Final Cut Pro Studio,

00:24:01.540 --> 00:24:04.870
the application you use to
encode is known as Compressor 3.

00:24:04.870 --> 00:24:08.080
Compressor 3 has a similar set
of options built into it just

00:24:08.080 --> 00:24:09.910
like QuickTime Player earlier.

00:24:09.910 --> 00:24:10.930
It looks like this.

00:24:11.020 --> 00:24:14.380
For example,
you can choose to encode H.264 video for

00:24:14.490 --> 00:24:17.470
Apple devices in this particular example.

00:24:17.530 --> 00:24:19.740
For example,
we're encoding for iPhone cellular

00:24:20.270 --> 00:24:23.210
using the same kinds of settings
we saw earlier suitable for

00:24:23.340 --> 00:24:25.290
delivery over the edge network.

00:24:25.450 --> 00:24:29.660
Or here's what it would look like if
you're encoding for iPhone via Wi-Fi.

00:24:29.680 --> 00:24:32.960
So that rich set of features
is built into the professional

00:24:32.960 --> 00:24:34.470
strength tools as well.

00:24:36.790 --> 00:24:41.000
However, you might not be adopting either
of these two sets of tools,

00:24:41.000 --> 00:24:44.560
the QuickTime Player tools or
the Final Cut suite of tools.

00:24:44.970 --> 00:24:49.290
Instead, you might have a custom suite of
tools that you're using in-house

00:24:49.680 --> 00:24:51.440
for your production process.

00:24:51.440 --> 00:24:53.920
Or you might be using
tools from other vendors.

00:24:53.920 --> 00:24:57.210
And you might be interested
in integrating the same export

00:24:57.210 --> 00:24:59.050
facilities into those tools.

00:24:59.100 --> 00:25:00.000
How do you do it?

00:25:00.080 --> 00:25:03.520
Here's a code snippet for
doing that on Mac OS X.

00:25:04.400 --> 00:25:08.580
We recommend the use of QtKit together
with a Cocoa application for you

00:25:08.800 --> 00:25:11.280
to be able to manipulate media,
in particular,

00:25:11.380 --> 00:25:14.610
to write it out in these formats
that we're talking about.

00:25:14.810 --> 00:25:18.170
All you need to do to accomplish
this in your application is to

00:25:18.280 --> 00:25:23.670
instantiate QtMovie by pointing it
to your asset via QtMovie init with

00:25:23.670 --> 00:25:27.550
file or QtMovie init with attributes,
as you saw this morning

00:25:27.550 --> 00:25:29.250
at the QtKit sessions.

00:25:29.260 --> 00:25:33.230
Once you have an instance of QtMovie,
exporting it is as easy as

00:25:33.230 --> 00:25:38.380
invoking the method QtMovie
write to file with attributes.

00:25:38.420 --> 00:25:41.560
The with attributes
parameter is a dictionary.

00:25:41.580 --> 00:25:44.270
Inside that dictionary,
you would have a key that says

00:25:44.660 --> 00:25:46.040
this is an export operation.

00:25:46.260 --> 00:25:50.080
And another attribute that says
the exporter I want you to use,

00:25:50.080 --> 00:25:53.610
in this case on the wall,
is the iPhone exporter.

00:25:53.620 --> 00:25:56.580
And with this amount of code,
you can add that feature

00:25:56.580 --> 00:25:58.010
to your applications.

00:25:58.040 --> 00:26:02.400
So, now we know how to make the media.

00:26:02.420 --> 00:26:03.610
So, let's go ahead and start.

00:26:04.790 --> 00:26:07.310
Question is,
how do you get it to the audience

00:26:07.700 --> 00:26:09.560
that has interest in this media?

00:26:09.630 --> 00:26:12.330
Well, a wide variety of options,
and we're going to cover

00:26:12.900 --> 00:26:14.700
them all in this one session.

00:26:14.880 --> 00:26:16.470
First off,

00:26:16.860 --> 00:26:20.160
Delivery to iPhone and Apple TV.

00:26:20.160 --> 00:26:23.220
Several options are
available on these platforms.

00:26:23.290 --> 00:26:26.820
First off, in particular,
if you have commercial video content,

00:26:26.850 --> 00:26:30.180
video content for sale,
you can distribute it to your

00:26:30.180 --> 00:26:33.260
users of these platforms by
means of the iTunes Store.

00:26:33.490 --> 00:26:36.060
This is more of a business
arrangement than a technical thing.

00:26:36.110 --> 00:26:38.630
You'd want to get in touch with
the iTunes Store folks in order

00:26:38.630 --> 00:26:40.740
to initiate that distribution.

00:26:40.790 --> 00:26:42.710
It's available and you
should be aware of it.

00:26:43.230 --> 00:26:47.680
Another way to distribute video
by means of iTunes is to set up

00:26:47.680 --> 00:26:50.270
and maintain a video podcast feed.

00:26:50.270 --> 00:26:54.490
You make your video available from
whatever servers you happen to

00:26:54.490 --> 00:26:59.040
have and allow users to browse your
podcast together with other podcasts

00:26:59.150 --> 00:27:04.400
of interest in iTunes and other
podcast-capable applications as well.

00:27:04.480 --> 00:27:07.140
How do you set up a podcast
feed and maintain it?

00:27:07.140 --> 00:27:10.890
One recommendation is a tool
that's part of Mac OS X's server,

00:27:10.890 --> 00:27:16.080
part of the QuickTime streaming server
suite of tools known as Podcast Producer.

00:27:16.080 --> 00:27:18.850
It has a lot of features in it
that help with the preparation

00:27:18.990 --> 00:27:22.190
of the content and also in the
maintenance of the podcast feed.

00:27:22.330 --> 00:27:24.890
We'll give you a reference later
on for how you can find out more

00:27:24.890 --> 00:27:27.270
about using Podcast Producer.

00:27:27.790 --> 00:27:31.870
GarageBand is a very good tool which
many of you are already aware is

00:27:31.990 --> 00:27:34.120
capable of producing audio podcasts.

00:27:34.170 --> 00:27:36.970
But beyond that,
it has features that allow you

00:27:36.980 --> 00:27:41.120
to associate images with specific
ranges of the audio in your podcast.

00:27:41.140 --> 00:27:47.020
You can use it to create audio-visual
podcasts in GarageBand as well.

00:27:47.020 --> 00:27:47.320
It's something to check out.

00:27:47.360 --> 00:27:51.060
Finally, I asked for some recommendations
for third-party tools that are

00:27:51.060 --> 00:27:53.120
relevant for video podcasts.

00:27:53.120 --> 00:27:56.530
What I was told is that Pulp Motion by
Aquafotis is a great tool to check out.

00:27:56.720 --> 00:28:00.010
It lets you create a lot of
interesting content very easily,

00:28:00.010 --> 00:28:02.430
suitable for delivery as a video podcast.

00:28:04.610 --> 00:28:07.660
Okay, one method of delivery then,
that's iTunes.

00:28:07.660 --> 00:28:11.140
Users can browse iTunes
directly on Apple TV.

00:28:11.140 --> 00:28:14.460
They can browse iTunes on the desktop,
sync with their devices.

00:28:14.460 --> 00:28:15.780
That's good distribution.

00:28:15.810 --> 00:28:17.300
That'll work for lots of content.

00:28:17.320 --> 00:28:21.320
But another option for delivering
video content to your end users is

00:28:21.320 --> 00:28:23.800
for you to write a custom application.

00:28:23.800 --> 00:28:26.850
You may want to do this if you
need to access specific hardware

00:28:27.010 --> 00:28:30.600
features of the platform that
you're interested in building for.

00:28:31.140 --> 00:28:34.710
Or you might just want better
control over the integration of

00:28:34.710 --> 00:28:38.450
video content with other things
going on in your application.

00:28:38.460 --> 00:28:41.850
It has some feature, some tool,
some manipulation of data,

00:28:41.850 --> 00:28:43.930
and you want video to be part of that.

00:28:44.020 --> 00:28:47.580
What do you use to build
applications that integrate video?

00:28:47.580 --> 00:28:49.270
Depends on the platform.

00:28:49.280 --> 00:28:54.430
On Mac OS X, just mentioned earlier,
our recommendation is QtKit.

00:28:54.540 --> 00:28:57.760
QtKit allows you to open
media and play it back.

00:28:57.970 --> 00:29:01.020
It also allows you,
if you want to make this available,

00:29:01.250 --> 00:29:02.660
to users of your application.

00:29:02.980 --> 00:29:05.780
Some editing operations
that are available too.

00:29:05.780 --> 00:29:10.640
Those of you who are in this room during
lunch hour saw the Michael Johnson of

00:29:10.760 --> 00:29:14.640
Pixar showing some uses of QtKit that
allow you to do editing of content,

00:29:14.640 --> 00:29:15.370
not just playback.

00:29:15.420 --> 00:29:18.990
Capture is also available
in this framework as well,

00:29:19.130 --> 00:29:21.580
so that you can bring
assets in from cameras,

00:29:21.740 --> 00:29:24.300
for example, and then re-encode them.

00:29:24.360 --> 00:29:28.060
For more information about how
to use QtKit for these purposes,

00:29:28.130 --> 00:29:31.650
look on the web for the
QuickTimeKit framework reference and

00:29:31.650 --> 00:29:36.450
all the details about the richness of
those classes is there in that document.

00:29:36.820 --> 00:29:40.840
Let me skip over iPhone for a second
since it's the newest of the custom

00:29:40.840 --> 00:29:44.080
application platforms that we're
talking about this week to Windows.

00:29:44.100 --> 00:29:46.980
Yes,
you can take the encodings that we've

00:29:46.980 --> 00:29:51.300
talked about here and deliver them
in a custom application on Windows.

00:29:51.300 --> 00:29:53.910
You can do that by means of QuickTime.

00:29:53.920 --> 00:29:57.940
QuickTime 7, everywhere that it's
installed on Windows,

00:29:58.110 --> 00:30:00.940
includes the QuickTime ActiveX control.

00:30:01.220 --> 00:30:04.650
And you would use that control
in your Windows application,

00:30:04.650 --> 00:30:08.430
just like any other control,
to associate content and to manage it.

00:30:08.700 --> 00:30:13.440
The QuickTime ActiveX control allows you
to control media playback in your app.

00:30:13.540 --> 00:30:15.390
It also has some features
for editing as well,

00:30:15.390 --> 00:30:16.530
if that's what you need.

00:30:16.540 --> 00:30:21.110
The QuickTime 7 for Windows update
guide has all the information

00:30:21.190 --> 00:30:25.220
that you need to learn how to
use the QuickTime ActiveX control,

00:30:25.220 --> 00:30:28.060
the features of that class,
in your application.

00:30:29.470 --> 00:30:34.350
So iPhone, what is available in the
iPhone SDK for controlling

00:30:34.350 --> 00:30:35.970
media playback on that device?

00:30:35.980 --> 00:30:41.040
The SDK includes a media player,
and the class is known as the

00:30:41.040 --> 00:30:44.340
MP Movie Player Controller,
and with that class,

00:30:44.500 --> 00:30:48.920
you can make use of full-screen video
playback with the same transport

00:30:49.010 --> 00:30:53.120
controls as available elsewhere on
the device in your custom application.

00:30:54.210 --> 00:30:56.690
Because this is so new,
it's been covered in

00:30:56.690 --> 00:30:58.680
other sessions this week,
but I want to give you a quick

00:30:58.790 --> 00:31:03.020
look at what this class looks like
and the options that it exposes.

00:31:03.590 --> 00:31:07.430
MPMoviePlayerController allows you
to initialize from a URL the video

00:31:07.940 --> 00:31:10.120
content that you want to display.

00:31:10.120 --> 00:31:13.940
It allows you to initiate playback
and to stop it at its current time.

00:31:13.940 --> 00:31:17.890
Via some properties on this class,
you can set or discover

00:31:18.220 --> 00:31:20.140
the current scaling mode.

00:31:20.140 --> 00:31:22.480
Remember we talked earlier about
the two scaling modes that are

00:31:22.530 --> 00:31:23.800
available on iPhone for video.

00:31:23.800 --> 00:31:25.680
So if you want to interact
with that in your app,

00:31:25.680 --> 00:31:26.200
you can.

00:31:27.220 --> 00:31:30.860
Also, you have the choice of whether or
not you want the user to have access

00:31:30.860 --> 00:31:32.820
to the standard video controls.

00:31:32.820 --> 00:31:38.210
Perhaps your application doesn't want the
user to zoom in or out or to change the

00:31:38.210 --> 00:31:39.820
time that's currently being displayed.

00:31:39.880 --> 00:31:40.880
You have that option as well.

00:31:40.900 --> 00:31:44.070
Finally,
via the notifications up on the wall,

00:31:44.070 --> 00:31:47.440
you can monitor the state
of the media playback.

00:31:47.440 --> 00:31:53.200
You can discover what mode of
scaling the video is currently in.

00:31:53.200 --> 00:31:56.960
And you can also discover when
the video is played through.

00:31:56.960 --> 00:32:01.200
So if you want something to be initiated
automatically in your application

00:32:01.200 --> 00:32:04.290
when the video is done playing,
you can listen for that

00:32:04.290 --> 00:32:06.190
and respond appropriately.

00:32:09.750 --> 00:32:14.500
So, custom applications,
multiple platforms.

00:32:14.540 --> 00:32:16.780
I promised that the bulk of
the session was going to be

00:32:16.780 --> 00:32:18.380
devoted to delivery for the web.

00:32:18.420 --> 00:32:21.170
And that's what we're going
to talk about from here on in.

00:32:21.170 --> 00:32:26.310
We find that delivery of video to the web
is extremely rich and also very scalable

00:32:26.410 --> 00:32:29.190
across the devices that we've discussed.

00:32:29.720 --> 00:32:32.620
We're going to talk about
how to use technology that's

00:32:32.620 --> 00:32:36.190
already broadly disseminated,
broadly distributed to end users

00:32:36.260 --> 00:32:38.300
with QuickTime in order to do that.

00:32:38.530 --> 00:32:41.310
And we're going to have a look
ahead at emerging technology that

00:32:41.400 --> 00:32:43.340
will make the whole process easier.

00:32:43.340 --> 00:32:46.730
The first thing I want to note
is that this will all work,

00:32:46.970 --> 00:32:49.860
everything we recommend,
on Safari for iPhone.

00:32:49.860 --> 00:32:54.060
And it will also work in any browser
that supports plugins running on a

00:32:54.400 --> 00:32:56.950
machine on which QuickTime is installed.

00:32:57.820 --> 00:33:00.300
Browsers such as Safari for Mac,
Safari for Windows,

00:33:00.680 --> 00:33:03.500
Firefox for either platform, Opera,
Internet Explorer.

00:33:03.500 --> 00:33:07.090
So, lots of users can be reached
by means of the recommendations

00:33:07.090 --> 00:33:08.690
that we have for you here.

00:33:10.510 --> 00:33:14.200
What do you need to know in order to
set up and prepare delivery for the web?

00:33:14.320 --> 00:33:16.980
Well, we covered all the details
about preparing the media,

00:33:16.980 --> 00:33:21.440
including providing a reference
movie that allows you to deploy

00:33:21.440 --> 00:33:24.450
multiple encodings that different
users will see depending on

00:33:24.450 --> 00:33:25.960
the type of device we're using.

00:33:25.960 --> 00:33:27.410
So you already know that.

00:33:27.710 --> 00:33:31.440
You'll also want us to cover
how to incorporate video

00:33:31.440 --> 00:33:33.570
into your HTML document.

00:33:33.630 --> 00:33:34.900
We'll cover that briefly in a moment.

00:33:34.900 --> 00:33:38.550
You'll want to know what the
further integration possibilities

00:33:39.140 --> 00:33:40.380
are possible in video.

00:33:40.400 --> 00:33:44.190
We'll talk about the
JavaScript methods that are available.

00:33:44.190 --> 00:33:48.170
We'll talk also about the DOM events
that are emitted so that you can

00:33:48.280 --> 00:33:52.920
coordinate in your page things that are
happening in the video with things that

00:33:52.920 --> 00:33:55.480
are happening elsewhere in the page.

00:33:55.480 --> 00:33:58.190
And finally,
we'll have some practical notes for

00:33:58.360 --> 00:34:01.800
administrators of web servers to
make sure that the video will be

00:34:01.800 --> 00:34:05.830
delivered in the best and smoothest
possible fashion to your users.

00:34:05.860 --> 00:34:08.930
So, we talked about preparation.

00:34:09.020 --> 00:34:10.140
Don't need to cover that again.

00:34:11.700 --> 00:34:15.380
How to integrate video in HTML markup.

00:34:15.380 --> 00:34:19.050
You may have seen this type of example
in the past using an embed tag,

00:34:19.050 --> 00:34:23.970
which is commonly used in order to say,
"Oh, I want to load a plug-in to manage

00:34:23.970 --> 00:34:28.830
this content." And this embed
example will work in many browsers.

00:34:28.960 --> 00:34:31.460
However,
it is not the most compatible form

00:34:31.460 --> 00:34:35.090
of markup that we recommend that
you use for the full breadth of

00:34:35.090 --> 00:34:38.920
browsers and browser versions that
have been developed over the years.

00:34:38.980 --> 00:34:42.900
Our best recommendation for
you is instead of using an

00:34:42.900 --> 00:34:47.410
embed tag like you just saw,
to make use of a JavaScript library

00:34:47.410 --> 00:34:51.370
which Apple distributes and you
can redeploy on any site on which

00:34:51.430 --> 00:34:53.640
you might happen to need it.

00:34:53.640 --> 00:34:59.240
By invoking this JavaScript library's
QT_WriteObject function,

00:34:59.240 --> 00:35:03.860
the markup will be generated by that
JavaScript implementation that is most

00:35:04.000 --> 00:35:07.650
compatible with the widest variety
of browsers and browser versions.

00:35:07.660 --> 00:35:08.830
Kevin Calhoun, Jeremy Farbaugh,
Eric Carlson, Mike Czepiel So,

00:35:08.930 --> 00:35:10.790
if you want to use a script tag,
you would use a script

00:35:10.790 --> 00:35:11.700
tag in your markup.

00:35:11.760 --> 00:35:14.250
And inside the script tag,
you would invoke the

00:35:14.360 --> 00:35:15.910
QT_WriteObject function.

00:35:15.910 --> 00:35:18.480
And instead of attributes
of the embed tag,

00:35:18.490 --> 00:35:21.320
you would pass parameters to
this function that control

00:35:21.320 --> 00:35:24.400
the display of the video,
what URL for the resource that

00:35:24.520 --> 00:35:29.040
you want the video to come from,
how do you want it displayed, scaled,

00:35:29.040 --> 00:35:30.530
or fixed size, and so forth.

00:35:30.730 --> 00:35:32.960
All of that you can pass to the function.

00:35:33.000 --> 00:35:35.640
And the markup,
the compatible markup will be

00:35:35.640 --> 00:35:38.260
generated on the fly as the page loads.

00:35:39.620 --> 00:35:42.550
Now, if for some reason you're
running in a context in which

00:35:42.660 --> 00:35:45.970
JavaScript is not permitted,
or if you just want to have

00:35:45.970 --> 00:35:49.460
finer-grained control over the markup
that you use in your web pages,

00:35:49.460 --> 00:35:53.040
this is the markup that
that function will generate,

00:35:53.100 --> 00:35:57.910
the most compatible form of invocation
of a plugin that we are aware of.

00:35:58.040 --> 00:36:04.050
It's an object tag on the outer part
and inside fall back to an embed tag.

00:36:04.050 --> 00:36:07.260
So browsers that support the
object tag will pick up the

00:36:07.360 --> 00:36:11.740
parameters for the video from that,
but browsers that don't will fall

00:36:11.810 --> 00:36:15.530
back to the contained embed tag and
pick up the information for that.

00:36:15.940 --> 00:36:21.260
That guarantees that things will
work in a wide variety of contexts.

00:36:22.240 --> 00:36:25.050
So, finally,
you want to serve this stuff up so that

00:36:25.220 --> 00:36:27.680
users can view it without any glitches.

00:36:27.860 --> 00:36:32.800
How to avoid glitches in web serving
for video 101 right here on this slide.

00:36:32.880 --> 00:36:36.050
If you are a web server administrator,
please take note of

00:36:36.420 --> 00:36:37.590
these recommendations.

00:36:37.650 --> 00:36:42.490
We find over the years that many of
the bugs that end users file against

00:36:42.490 --> 00:36:46.230
QuickTime when they run into trouble
viewing content on the web have to

00:36:46.230 --> 00:36:49.410
do with misconfigured web servers,
in particular, MIME types.

00:36:49.460 --> 00:36:50.950
So please take note of this.

00:36:50.960 --> 00:36:53.710
First of all,
some of the platforms that we're

00:36:53.710 --> 00:36:58.940
talking about today depend on
byte range access to video.

00:36:59.340 --> 00:37:02.820
Video can be of great duration
and very large in size.

00:37:02.820 --> 00:37:07.150
And in fact, on some of these platforms,
you can actually play video content

00:37:07.290 --> 00:37:10.850
that doesn't even fit in the
storage capacity of the device.

00:37:10.960 --> 00:37:14.350
Obviously, in order to load chunks
of that video at a time,

00:37:14.470 --> 00:37:18.140
we want to issue byte range
requests against the HTTP server.

00:37:18.280 --> 00:37:19.820
So please turn that off.

00:37:19.820 --> 00:37:19.820
Kevin Calhoun, Jeremy Farbaugh,
Eric Carlson,

00:37:19.820 --> 00:37:24.620
Mike Czepiel You can test whether
a particular server supports

00:37:24.720 --> 00:37:29.260
HTTP requests in the Mac OS X terminal
app by issuing that curl command.

00:37:29.260 --> 00:37:31.830
It'll print out an error if
byte range is turned off.

00:37:31.920 --> 00:37:36.460
If so, please consult the documentation
of your web server to turn it on.

00:37:36.540 --> 00:37:37.770
Kevin Calhoun, Jeremy Farbaugh,
Eric Carlson, Mike Czepiel I mentioned

00:37:37.770 --> 00:37:39.210
MIME type associations.

00:37:39.210 --> 00:37:41.100
Please make sure these are right.

00:37:41.360 --> 00:37:45.440
.mp4 files should be served
with MIME type video slash mp4.

00:37:45.440 --> 00:37:47.650
If your server is serving them
with MIME type text slash plain,

00:37:47.800 --> 00:37:49.800
you can issue byte range
requests against the server.

00:37:49.820 --> 00:37:54.190
your users may not get the
experience that you intend.

00:37:55.990 --> 00:37:58.690
Finally, video's getting bigger.

00:37:58.890 --> 00:38:00.550
Resolutions are getting larger.

00:38:00.760 --> 00:38:03.340
Sizes are growing all the time.

00:38:03.380 --> 00:38:07.700
In fact, hosting for personal use on the
web is getting larger as well.

00:38:07.700 --> 00:38:10.610
We just announced this week,
MobileMe is expanding to 20

00:38:10.970 --> 00:38:13.840
gigabytes is the standard
amount of storage you can have.

00:38:13.880 --> 00:38:17.310
End users in their own homes can
be creating video that's larger

00:38:17.310 --> 00:38:20.460
than 2 gigabytes and serving
it from their personal spaces

00:38:20.460 --> 00:38:22.800
on any of a number of services.

00:38:22.910 --> 00:38:26.290
So please check that you support
downloads of greater than 2

00:38:26.290 --> 00:38:30.520
gigabytes on your web server,
and that will make everything smooth.

00:38:30.830 --> 00:38:35.080
That's all the basic information
for incorporating video into HTML.

00:38:35.280 --> 00:38:36.300
What does it look like?

00:38:36.380 --> 00:38:39.800
Eric has a simple example for HTML4.

00:38:39.910 --> 00:38:44.330
Eric Carlson is not the only worker in
the interactive media group at Apple,

00:38:44.480 --> 00:38:45.730
but he's one of the primary ones.

00:38:45.810 --> 00:38:48.610
So Eric is going to come
up and show you this now.

00:38:55.700 --> 00:38:56.700
Eric Carlson.

00:38:56.700 --> 00:39:00.840
As Kevin said, I'm also a member of the
Interactive Media Group.

00:39:00.860 --> 00:39:06.270
What we're going to look at here is
a really simple example of embedded

00:39:06.270 --> 00:39:08.690
video in the context of a web page.

00:39:08.700 --> 00:39:12.700
So we have a web page here about a movie.

00:39:12.700 --> 00:39:18.540
And so, of course,
it would be useful to have

00:39:18.590 --> 00:39:21.290
a snippet of the movie here.

00:39:21.290 --> 00:39:21.290
You've got the standard

00:39:22.350 --> 00:39:26.060
Playback controls,
you can start the movie,

00:39:26.060 --> 00:39:30.770
you can stop the movie,
you can change its volume.

00:39:30.770 --> 00:39:34.130
And if we look at the source of the page,

00:39:36.400 --> 00:39:39.160
Let's scale it up a little bit.

00:39:39.160 --> 00:39:44.670
You can see that we've used the
recommended technique that Kevin was just

00:39:44.800 --> 00:39:51.050
talking about in the part of the markup
where we want the movie to show up.

00:39:51.150 --> 00:39:56.560
We have a call to the
QT write object tag.

00:39:56.560 --> 00:39:59.080
We pass in the URL of the movie.

00:39:59.080 --> 00:40:00.400
We set the width and the height.

00:40:00.400 --> 00:40:01.100
We set the scale.

00:40:01.100 --> 00:40:03.180
We set some various things.

00:40:05.100 --> 00:40:11.890
And with that little bit of markup,
we have a page where the movie content

00:40:12.400 --> 00:40:15.370
integrates nicely with the text.

00:40:15.370 --> 00:40:20.720
For example, if we change the size
of the text in the page,

00:40:20.850 --> 00:40:26.870
the browser relays out the page
and tells the plugin element

00:40:26.870 --> 00:40:28.580
that its size has changed.

00:40:28.820 --> 00:40:33.640
Using a keyboard shortcut here,
I can scale it up and down.

00:40:33.800 --> 00:40:40.460
And you can see that it flows nicely
as the content on the page changes.

00:40:40.460 --> 00:40:49.460
We also have some Ahrefs here which
link to a simple JavaScript function.

00:40:49.460 --> 00:40:54.880
So when I click on an Ahref,
it changes the time of the movie and

00:40:54.890 --> 00:41:02.450
really integrates the video content
in with the content of the page with

00:41:02.500 --> 00:41:02.500
really just a little bit of a change.

00:41:02.530 --> 00:41:05.940
So when I click on an Ahrefs,
it changes the time of the movie and

00:41:06.010 --> 00:41:08.300
really just a little bit of a change.

00:41:09.750 --> 00:41:11.330
Okay,
so that gives you an example of what you

00:41:11.420 --> 00:41:14.540
can do with very simple markup in HTML4.

00:41:14.540 --> 00:41:16.320
We cut for time, can you believe it?

00:41:16.320 --> 00:41:18.900
We had more content that
could fit in 75 minutes.

00:41:18.900 --> 00:41:21.000
And we had to cut for time constraints.

00:41:21.000 --> 00:41:24.900
Some richer example is deployment
of video using the QuickTime plugin,

00:41:24.970 --> 00:41:26.270
but you may be aware of them.

00:41:26.270 --> 00:41:30.220
There are plenty out there
available on the public internet.

00:41:30.220 --> 00:41:34.520
If you are interested in finding out
more about the JavaScript interface of

00:41:34.580 --> 00:41:38.710
the QuickTime plugin or more details
about the markup that you would use,

00:41:38.740 --> 00:41:41.080
you can go to the following resources.

00:41:41.170 --> 00:41:45.150
From apple.com/quicktime,
navigate from there to QuickTime Pro and

00:41:45.160 --> 00:41:47.660
from there to tutorials,
and there are a couple of interesting

00:41:47.960 --> 00:41:50.920
things there about embedding
that you might want to look at.

00:41:50.920 --> 00:41:54.170
Or if you want a copy of the full
reference for JavaScript scripting

00:41:54.250 --> 00:41:58.180
of the QuickTime plugin,
start at apple.com/quicktime,

00:41:58.260 --> 00:42:02.410
go from there to developer, to guides,
and then to scripting and automation,

00:42:02.410 --> 00:42:05.610
and we have a document for you
there called JavaScript Scripting

00:42:05.610 --> 00:42:08.940
Guide for QuickTime that can tell
you everything that you need to do,

00:42:08.940 --> 00:42:12.710
everything you need to know to achieve
richer integration even than Eric was

00:42:13.020 --> 00:42:15.520
able to show you with that simple demo.

00:42:15.620 --> 00:42:19.180
What I want to highlight, though,
is that the same markup that we've

00:42:19.340 --> 00:42:23.300
just been showing you and this
many of the same scripts that are

00:42:23.300 --> 00:42:28.430
covered in the JavaScript document
also work on the iPhone.

00:42:28.630 --> 00:42:33.170
Safari for iPhone has been implemented
to be compatible with the markup for

00:42:33.240 --> 00:42:35.610
video that we've just recommended.

00:42:35.730 --> 00:42:38.560
So when it encounters the
object and embed tags,

00:42:38.560 --> 00:42:38.560
that's the same thing that
we've just recommended.

00:42:38.560 --> 00:42:40.600
So when it encounters the
object and embeds tags,

00:42:40.660 --> 00:42:43.020
it's the same thing that
we've just recommended.

00:42:43.020 --> 00:42:45.850
So when it encounters the
object and embeds tags,

00:42:45.850 --> 00:42:47.930
it's the same thing that we've just

00:42:48.220 --> 00:42:53.810
And for the first time in iPhone 2.0,
we have JavaScript control over

00:42:53.810 --> 00:42:56.260
video in Safari for iPhone.

00:42:56.260 --> 00:43:00.680
And also, video will emit DOM events
so your page can keep track,

00:43:00.790 --> 00:43:03.810
your document can keep track of
things that are going on in the

00:43:03.810 --> 00:43:05.680
video on that device in Safari.

00:43:05.680 --> 00:43:09.630
So for example,
you can initiate playback,

00:43:09.750 --> 00:43:13.800
you can initiate full screen,
stop playback, exit full screen with a

00:43:13.800 --> 00:43:16.420
JavaScript interface available
on Safari for iPhone.

00:43:16.420 --> 00:43:20.180
And there are,
in addition to a subset of the methods

00:43:20.280 --> 00:43:25.020
and DOM events available on the desktop,
there are some that are peculiar,

00:43:25.110 --> 00:43:28.920
particular to the iPhone that
allow you to control or monitor

00:43:28.920 --> 00:43:30.310
the full screen state as well.

00:43:30.510 --> 00:43:34.570
So lots of great stuff you can
now do integrating video with your

00:43:34.670 --> 00:43:37.310
web pages for Safari for iPhone.

00:43:38.720 --> 00:43:41.190
Now,
I promised you earlier in the session,

00:43:41.190 --> 00:43:45.340
I was going to tell you that we
recommend standards for video.

00:43:45.340 --> 00:43:48.700
But now the last 10 or 15 minutes
of the session has been all about

00:43:48.700 --> 00:43:50.340
this QuickTime plugin thing.

00:43:50.340 --> 00:43:50.850
And what's that?

00:43:50.940 --> 00:43:53.500
Well,
that's a module that's available from

00:43:53.900 --> 00:43:57.690
Apple that has its own unique API and
its own unique attributes that you

00:43:57.690 --> 00:44:02.400
treat in its own unique way when you're
taking advantage of it in your HTML.

00:44:02.400 --> 00:44:17.500
Well, that doesn't sound very standard,
now does it?

00:44:17.510 --> 00:44:17.510
It's very rich.

00:44:17.510 --> 00:44:17.510
It's wonderful to use.

00:44:17.510 --> 00:44:17.510
It's broadly distributed
and extremely reliable.

00:44:17.510 --> 00:44:17.510
But it falls short of the standard
story that I promised you earlier on.

00:44:17.790 --> 00:44:21.340
We've achieved interoperability
of standards for video encoding

00:44:21.940 --> 00:44:25.460
and video container formats,
as well as interoperability of

00:44:25.460 --> 00:44:27.700
a number of delivery protocols.

00:44:27.800 --> 00:44:32.200
However, we recognize that we
have not yet achieved,

00:44:32.370 --> 00:44:38.600
up till HTML4, standards for integration
of video content in the web.

00:44:38.620 --> 00:44:40.380
How are we going to get there?

00:44:40.800 --> 00:44:44.430
Well, what we've done,
together with other interested parties,

00:44:44.430 --> 00:44:49.040
is pooled our experience, in our case,
our experience with the QuickTime plugin,

00:44:49.040 --> 00:44:53.530
and we put our experience together
into a draft specification for

00:44:53.560 --> 00:44:57.660
what we think video should be
like in standard HTML markup,

00:44:58.040 --> 00:45:01.710
what kind of behavior it should
have in the standard DOM.

00:45:01.740 --> 00:45:07.510
And this specification is now
in draft form and part of HTML5.

00:45:07.600 --> 00:45:12.230
In other words, HTML5 includes,
for the first time,

00:45:12.240 --> 00:45:17.540
standard video and audio elements that
you can treat as just another type of

00:45:17.620 --> 00:45:22.790
content that any user agent can support,
with the same rich set of features

00:45:22.790 --> 00:45:26.120
that a user agent is able to
apply to any other element.

00:45:26.180 --> 00:45:28.550
We think this is going
to be really great.

00:45:28.660 --> 00:45:32.870
In fact, so great that we've already
implemented a portion of the

00:45:32.870 --> 00:45:36.900
draft specification in Safari 3.1,
and, of course, its follow-on release,

00:45:36.900 --> 00:45:37.580
Safari 3.1.

00:45:37.580 --> 00:45:43.340
So all of this stuff related to the
video tag in HTML5 that you see here,

00:45:43.340 --> 00:45:48.200
you can go home and try right
away with Safari 3.1 or later.

00:45:48.200 --> 00:45:54.250
Now, when you have video managed by an
element that's built into the DOM,

00:45:54.260 --> 00:45:57.120
you have very rich
integration possibilities,

00:45:57.120 --> 00:46:00.570
not just the kinds of things
that are possible with plugins,

00:46:00.580 --> 00:46:05.830
but further synchronization with
other things going on in the page.

00:46:05.940 --> 00:46:08.380
If the user agent is able to do that,
if the user agent is

00:46:08.700 --> 00:46:11.790
aware of time-based media,
that it can give you information about

00:46:11.870 --> 00:46:15.450
the flow through time and synchronize
and coordinate things going on

00:46:15.450 --> 00:46:17.720
elsewhere in the page as time advances.

00:46:17.720 --> 00:46:22.440
Further, the video element can be treated
for composition purposes and

00:46:22.480 --> 00:46:26.840
other purposes like anything else,
so you have extreme richness.

00:46:26.840 --> 00:46:33.080
The draft of HTML5 is currently available
at the URL given up there on the wall.

00:46:33.080 --> 00:46:37.330
We would like you to become
involved as well to participate,

00:46:37.580 --> 00:46:40.080
and the further refinement
of this draft specification,

00:46:40.080 --> 00:46:45.340
bring your interest for web delivery of
video and audio to the working groups,

00:46:45.340 --> 00:46:49.960
review the draft, make suggestions,
help us refine the specification

00:46:49.960 --> 00:46:53.220
to make it really great,
broadly implementable across

00:46:53.220 --> 00:46:56.820
the full variety of user agents,
browsers that are available to end users.

00:46:56.840 --> 00:46:58.840
We think this can be a big success.

00:46:58.860 --> 00:47:03.700
Well, what does it look like when
you use HTML5 for video?

00:47:03.700 --> 00:47:06.820
Eric is going to start out by showing
you something that will look familiar,

00:47:06.820 --> 00:47:07.560
and then we'll get to it.

00:47:07.560 --> 00:47:10.120
will move into greater
integration possibilities.

00:47:10.140 --> 00:47:11.580
Eric?

00:47:16.620 --> 00:47:20.540
So what we're going to start off
with here looks extremely similar to

00:47:20.540 --> 00:47:23.220
the demo I showed you a moment ago.

00:47:23.420 --> 00:47:25.020
It's the same text.

00:47:25.090 --> 00:47:27.070
It's the same content.

00:47:27.180 --> 00:47:31.420
But in this case, because I've written
the markup differently,

00:47:31.420 --> 00:47:40.790
instead of having the video here be
displayed by the QuickTime plugin,

00:47:40.790 --> 00:47:43.840
it's being displayed by Safari itself.

00:47:43.840 --> 00:47:48.130
So if I click on the Play button,
you'll see that the movie

00:47:48.130 --> 00:47:50.300
controller goes away.

00:47:50.300 --> 00:47:55.580
And that's just because that's
the behavior of Safari right now.

00:47:55.580 --> 00:47:57.190
But you have the same basic controls.

00:47:57.250 --> 00:47:58.660
You can start and stop the movie.

00:47:58.660 --> 00:48:02.610
You can seek around in the movie.

00:48:02.790 --> 00:48:07.870
We can, again,
jump to different times in the movie.

00:48:07.950 --> 00:48:13.480
When I click on these Ahrefs,
I'm calling a JavaScript function

00:48:13.490 --> 00:48:16.460
that seeks within the movie.

00:48:16.510 --> 00:48:19.780
But if we look at the
source to this page,

00:48:20.800 --> 00:48:31.020
We'll see that instead of just
having the call to QT write object,

00:48:31.040 --> 00:48:34.860
instead here I have a video element.

00:48:34.860 --> 00:48:40.540
On the video element is the optional
attribute that shows the controller.

00:48:40.540 --> 00:48:45.330
And then inside of the video element,
I have a pair of source elements.

00:48:45.330 --> 00:48:50.780
A source element is what you use
in a video or an audio element.

00:48:50.910 --> 00:48:54.360
So if you have a user agent,
you can load the source element

00:48:54.460 --> 00:48:58.030
from the user agent and then you
can tell the user agent which

00:48:58.030 --> 00:49:00.070
media resource it should load.

00:49:00.070 --> 00:49:02.840
In this case,
we have two source elements.

00:49:02.840 --> 00:49:06.480
This is the HTML5 way of doing
the equivalent of what you do

00:49:06.480 --> 00:49:09.140
with a QuickTime reference movie.

00:49:09.140 --> 00:49:12.700
The browser will only load one of these.

00:49:13.070 --> 00:49:18.330
The rule is or the behavior is
that it evaluates them in order and

00:49:18.330 --> 00:49:20.780
picks the first one that's relevant.

00:49:20.810 --> 00:49:28.860
So the first one here,
we have an OGG encoding of the movie.

00:49:29.330 --> 00:49:38.220
Safari doesn't support that by default,
so it continues on to the next

00:49:38.760 --> 00:49:45.400
one and it's an Mpeng4 encoding.

00:49:45.400 --> 00:49:45.400
But the point is that you
can write your markup so that

00:49:46.680 --> 00:49:56.640
So that different user agents which
support different encodings still work.

00:49:56.730 --> 00:50:02.140
So what I have over here
is a build of Firefox,

00:50:02.370 --> 00:50:08.980
an experimental build of
Firefox that includes support

00:50:09.160 --> 00:50:10.880
for the video and audio element.

00:50:10.880 --> 00:50:16.480
Let me just close this in Safari.

00:50:16.480 --> 00:50:16.480
So

00:50:21.710 --> 00:50:24.600
Let's scale this up a little bit.

00:50:24.600 --> 00:50:29.810
And when I load the same page
that we just saw in Safari 3.1,

00:50:30.240 --> 00:50:34.200
you see we get the same thing.

00:50:34.200 --> 00:50:40.890
The playback controls are primitive,
but this is just an

00:50:40.910 --> 00:50:43.500
experimental version of Firefox.

00:50:43.500 --> 00:50:52.670
The point is, in this case,
Firefox does not have an MPEG-4 encoder,

00:50:52.670 --> 00:50:52.670
but because I

00:50:52.770 --> 00:50:57.140
Included an OGG encoding,
and it has an encoder for that.

00:50:57.230 --> 00:51:00.180
It's able to load it and display it.

00:51:00.400 --> 00:51:05.230
And again,
as we change the size of the page,

00:51:05.230 --> 00:51:07.670
it all just works.

00:51:12.640 --> 00:51:13.600
Kevin?

00:51:13.750 --> 00:51:18.680
So a couple of things to note about
that markup that Eric just showed.

00:51:18.680 --> 00:51:21.230
We talked earlier about
QuickTime reference movies and the

00:51:21.230 --> 00:51:25.100
ability to make multiple encodings
available that will be used according

00:51:25.100 --> 00:51:29.080
to the suitability of those encodings
to the device and network bandwidth

00:51:29.090 --> 00:51:31.020
that was available to the end user.

00:51:31.050 --> 00:51:33.420
The source element,
which is specified as a child

00:51:33.420 --> 00:51:37.840
element of the video element,
plays the same role in HTML5.

00:51:37.840 --> 00:51:40.960
You can provide multiple encodings,
and as Eric mentioned,

00:51:40.980 --> 00:51:43.800
the user agent will survey
these encodings by MIME type or

00:51:44.290 --> 00:51:46.180
other parameters it can examine.

00:51:46.180 --> 00:51:49.400
In particular,
the specification says that you can

00:51:49.530 --> 00:51:54.420
include a CSS media query here to define
the suitability of a particular resource,

00:51:54.450 --> 00:51:58.090
and the browser can choose the first
one that it hits upon that it knows

00:51:58.110 --> 00:52:03.320
how to decode and is suitable for the
current parameters of the context.

00:52:03.390 --> 00:52:04.420
So pretty exciting.

00:52:04.450 --> 00:52:07.280
The other thing to note about this
markup that Eric mentioned is it

00:52:07.280 --> 00:52:09.100
doesn't just use the video tag.

00:52:09.260 --> 00:52:10.630
It also has fallback.

00:52:10.790 --> 00:52:15.180
It falls back in this case to using
the QuickTime plug-in if you happen

00:52:15.260 --> 00:52:18.600
to be running in a browser that
doesn't support the video tag.

00:52:18.770 --> 00:52:22.340
So if you were to launch the
current beta version of Firefox 3,

00:52:22.340 --> 00:52:26.110
which doesn't yet include this support,
which is due for a later release,

00:52:26.110 --> 00:52:28.540
you would fall back to
using the QuickTime plug-in

00:52:28.540 --> 00:52:29.640
instead of the video tag.

00:52:29.640 --> 00:52:32.980
So pretty clever markup
that you've written there.

00:52:33.400 --> 00:52:36.060
So we can do that stuff
with the video tag,

00:52:36.100 --> 00:52:39.570
similar to what we can do
with the embed tag for video.

00:52:39.590 --> 00:52:43.350
However, how far beyond that can we go?

00:52:43.360 --> 00:52:46.560
We took this feature,
the video tag of HTML5,

00:52:46.690 --> 00:52:52.180
together with other new features that are
emerging as standards in the web world,

00:52:52.190 --> 00:52:55.460
in particular,
CSS effects that are also implemented

00:52:55.460 --> 00:53:00.300
for the first time in Safari 3.1,
such as transforms and animations.

00:53:00.300 --> 00:53:03.300
And we took them to some
web designers and said,

00:53:03.340 --> 00:53:08.050
if you had these facilities in
user agents for integration of

00:53:08.050 --> 00:53:12.300
video and for effects on video,
what kind of pages,

00:53:12.300 --> 00:53:14.390
what kinds of web apps would you build?

00:53:14.440 --> 00:53:17.740
The first example that we have,
we went to some folks who

00:53:17.800 --> 00:53:21.150
have their hands on some
assets that are related to it.

00:53:21.270 --> 00:53:22.060
It's pretty good stuff.

00:53:22.150 --> 00:53:25.650
We know that the same kinds of
composition and the same kinds of

00:53:25.660 --> 00:53:27.300
integration are available in other tools,
in other running systems.

00:53:27.300 --> 00:53:27.300
So we took them to some
web designers and said,

00:53:27.300 --> 00:53:27.300
if you had these facilities in
user agents for integration of

00:53:27.300 --> 00:53:27.300
video and for effects on video,
what kind of pages,

00:53:27.300 --> 00:53:27.300
what kinds of web apps would you build?

00:53:27.300 --> 00:53:27.300
The first example that we have,
we went to some folks who

00:53:27.300 --> 00:53:27.300
have their hands on some
assets that are related to it.

00:53:27.300 --> 00:53:27.300
It's pretty good stuff.

00:53:27.300 --> 00:53:27.300
We know that the same kinds of
composition and the same kinds of

00:53:27.300 --> 00:53:27.300
integration are available in other tools,
in other running systems.

00:53:27.300 --> 00:53:27.880
So we took them to some folks
who have their hands on some

00:53:27.880 --> 00:53:28.230
assets that are related to it.

00:53:28.230 --> 00:53:28.510
It's pretty good stuff.

00:53:28.510 --> 00:53:29.180
We know that the same kinds of
composition and the same kinds of

00:53:29.180 --> 00:53:30.300
integration are available in other tools,
in other running systems.

00:53:30.300 --> 00:53:32.200
We know you can use Flash for this.

00:53:32.200 --> 00:53:34.270
We know you can use Silverlight for this.

00:53:34.300 --> 00:53:34.300
And those are great tools that
are appropriate for many uses.

00:53:34.350 --> 00:53:35.020
We know you can use Flash for this.

00:53:35.020 --> 00:53:35.890
We know you can use Silverlight for this.

00:53:35.930 --> 00:53:37.300
And those are great tools that
are appropriate for many uses.

00:53:37.300 --> 00:53:41.670
However, our position on all this is,
why do you have to stop

00:53:42.070 --> 00:53:46.500
using your web-based tools,
HTML, CSS, and JavaScript,

00:53:46.500 --> 00:53:52.280
just because you want to make use of
video together with images and text?

00:53:52.340 --> 00:53:54.300
Our answer is, you shouldn't have to.

00:53:54.300 --> 00:53:54.300
You should have the choice of
making use of video and text.

00:53:54.300 --> 00:53:54.300
Our answer is, you shouldn't have to.

00:53:54.300 --> 00:53:54.300
You should have the choice of
making use of video and text.

00:53:54.300 --> 00:53:55.500
shouldn't have to.

00:53:55.500 --> 00:53:59.630
You should have the choice of making use
of the same tool set that you already

00:53:59.630 --> 00:54:04.280
use for web-borne content when you
have video as well as when you don't.

00:54:04.610 --> 00:54:07.160
You can choose those other
options if you want to,

00:54:07.350 --> 00:54:11.360
but you can stay with the HTML standards
and do rich things with video,

00:54:11.460 --> 00:54:11.990
too.

00:54:11.990 --> 00:54:14.030
Well, how practical is it?

00:54:14.040 --> 00:54:16.860
These are some examples we
came up with internally,

00:54:16.860 --> 00:54:19.020
but we realize there's a transition.

00:54:19.020 --> 00:54:20.270
There's a challenge.

00:54:20.950 --> 00:54:24.110
Today, we have broadly disseminated
the QuickTime plugin.

00:54:24.230 --> 00:54:27.270
We hope that many more browsers
will come online over time to

00:54:27.380 --> 00:54:28.990
support these new standards.

00:54:29.170 --> 00:54:32.700
You want to deliver your video
regardless of the capabilities that

00:54:32.800 --> 00:54:37.200
are available on the particular device
that the end user happens to be using.

00:54:37.330 --> 00:54:40.630
So we wanted to do some experiments,
first of all,

00:54:40.650 --> 00:54:44.730
in the lab in Cupertino to find
out how practical it is for you

00:54:44.760 --> 00:54:49.700
content providers to begin taking
advantage of these emerging standards,

00:54:49.860 --> 00:54:50.880
even at the beginning of the year.

00:54:50.880 --> 00:54:51.250
So we're going to do some experiments
with the user agent to see how they

00:54:51.270 --> 00:54:51.640
can help you with the transition.

00:54:51.640 --> 00:54:52.460
So we're going to do some experiments
with the user agent to see how they

00:54:52.460 --> 00:54:52.900
can help you with the transition.

00:54:52.900 --> 00:54:53.650
So we're going to do some experiments
with the user agent to see how they

00:54:53.680 --> 00:54:54.920
can help you with the transition.

00:54:54.920 --> 00:54:57.820
So we asked Jeremy to build some
examples that will make use of the

00:54:57.820 --> 00:55:01.330
emerging standards when the user
agent supports them and fall back

00:55:01.730 --> 00:55:04.770
to the existing broadly distributed
things that you can use if not.

00:55:04.910 --> 00:55:06.460
Jeremy, what did you come up with?

00:55:06.460 --> 00:55:06.890
Sure.

00:55:09.320 --> 00:55:14.760
So the first task was to create a
JavaScript library that would create

00:55:14.760 --> 00:55:19.520
a video tag when it was available
and fall back to an embed tag or

00:55:19.560 --> 00:55:21.940
an object tag where it was not.

00:55:22.220 --> 00:55:24.620
And here's a good
working example of that.

00:55:24.770 --> 00:55:29.340
This is just J Random Movie with
a standard controller

00:55:29.340 --> 00:55:30.320
and everything like that.

00:55:30.550 --> 00:55:30.800
Perfect.

00:55:30.800 --> 00:55:32.750
It's using the video tag here.

00:55:32.750 --> 00:55:35.770
If I loaded it in Firefox,
it would use the object tag or the embed

00:55:35.770 --> 00:55:37.600
tag if it was on Internet Explorer.

00:55:38.470 --> 00:55:40.930
So once we have that,
we have a great foundation.

00:55:40.950 --> 00:55:44.100
Once we have a piece of
JavaScript library that can integrate

00:55:44.170 --> 00:55:47.030
the two video tags and object tags,
we can come up with a common

00:55:47.160 --> 00:55:51.890
API for controlling those
movies with something external.

00:55:51.900 --> 00:55:53.720
So what can we do with this?

00:55:53.890 --> 00:55:59.610
Well, my thought was maybe come up with a
JavaScript DOM-based movie controller to

00:55:59.630 --> 00:56:02.730
control the video playback of the movie.

00:56:02.750 --> 00:56:05.210
And because I am in the
QuickTime player team,

00:56:05.210 --> 00:56:07.650
I think I know what
I wanted it to look like.

00:56:07.720 --> 00:56:11.840
So here you have a
JavaScript-based DOM controller,

00:56:11.840 --> 00:56:15.950
fully functional,
same as the QuickTime player.

00:56:15.960 --> 00:56:19.800
Play, pause, fast forward, rewind,
go to beginning, go to end, mute,

00:56:19.920 --> 00:56:21.080
et cetera, et cetera.

00:56:23.310 --> 00:56:26.870
And the best part about this just
being a bunch of DOM elements is that

00:56:26.870 --> 00:56:29.280
they're completely styleable via CSS.

00:56:29.380 --> 00:56:33.100
So these buttons along the top,
all they do is change the class name

00:56:33.200 --> 00:56:38.440
of the root DOM element and then
pull in a different set of CSS rules.

00:56:38.440 --> 00:56:41.520
So the browser will just re-render
everything the way it's supposed to look.

00:56:41.630 --> 00:56:43.700
So here's an example of a
controller that looks a lot

00:56:43.700 --> 00:56:48.940
like the one from the Apple.com
Pro site or one from an iPod ad,

00:56:48.940 --> 00:56:51.610
or you might recognize this one.

00:56:52.560 --> 00:56:55.690
All just via JavaScript and CSS.

00:56:55.790 --> 00:56:56.050
So great.

00:56:56.220 --> 00:56:58.100
Now we have JavaScript controllers.

00:56:58.340 --> 00:56:59.910
We got a common API.

00:57:00.040 --> 00:57:01.740
Well, what else could we do?

00:57:01.800 --> 00:57:08.490
Why don't we rethink the way that
movies are embedded into your text?

00:57:08.800 --> 00:57:12.590
So if you're familiar with a piece of
JavaScript library called Lightbox,

00:57:12.650 --> 00:57:17.080
the idea is it provides a way for you
to click on an image and have it pop

00:57:17.310 --> 00:57:21.620
up over laying your text as like a
pseudo full screen kind of experience.

00:57:21.640 --> 00:57:24.830
But there's no reason we can't
do that with a video tag as well,

00:57:24.950 --> 00:57:28.560
or the QuickTime plug-in
where that falls back to.

00:57:28.660 --> 00:57:32.320
So here's an example of a website with
some text and a button that one clicked

00:57:32.400 --> 00:57:35.300
will pop up a movie on top of the text.

00:57:35.300 --> 00:57:37.570
You can see it's scrolling
around here in the background,

00:57:37.790 --> 00:57:39.580
providing you with a
JavaScript controller,

00:57:39.700 --> 00:57:41.580
close button, et cetera.

00:57:41.660 --> 00:57:44.800
So you don't have to have-- especially
useful if you have a lot of these

00:57:44.800 --> 00:57:47.300
videos embedded into your website.

00:57:47.330 --> 00:57:49.410
OK, so now we have-- let's see,
what do we got?

00:57:49.500 --> 00:57:52.380
We got a common video
tag QuickTime library.

00:57:52.380 --> 00:57:54.000
We got a JavaScript controller.

00:57:54.000 --> 00:57:54.700
We got pop ups.

00:57:54.860 --> 00:57:56.820
There's got to be something
else we can do here.

00:57:56.820 --> 00:58:00.860
And importantly, if you pull up that
same phone-- I'm sorry,

00:58:00.870 --> 00:58:02.720
you pull up that same
web page on the phone,

00:58:02.770 --> 00:58:05.340
it's just CSS and DOM.

00:58:05.530 --> 00:58:06.620
That's it.

00:58:06.790 --> 00:58:11.990
So if I could get the video on the phone,
please.

00:58:17.900 --> 00:58:22.960
Okay, here's that same link.

00:58:24.490 --> 00:58:29.340
looks completely different,
but has basically the same experience.

00:58:29.370 --> 00:58:31.180
You click on a movie,

00:58:33.600 --> 00:58:51.900
[Transcript missing]

00:58:54.760 --> 00:58:59.040
and all the watched ones
have shown up as watched.

00:58:59.280 --> 00:59:03.340
Anyway, some great options for pulling
together media on into your web pages.

00:59:03.340 --> 00:59:04.910
Back to you, Kevin.

00:59:04.940 --> 00:59:06.800
Kevin Caron: So, Jeremy,
I think when you mentioned

00:59:06.800 --> 00:59:09.320
the latest WebKit,
you meant the latest nightly build.

00:59:09.320 --> 00:59:10.670
Jeremy Farbaugh:
Latest nightly build of WebKit, yes.

00:59:10.710 --> 00:59:11.980
Kevin Caron:
They are hard at work integrating

00:59:11.980 --> 00:59:14.720
more of the CSS goodness in nightly
builds of WebKit and that's what

00:59:14.720 --> 00:59:15.800
you're taking advantage there.

00:59:15.800 --> 00:59:16.500
Jeremy Farbaugh: Yes, that's right.

00:59:16.620 --> 00:59:17.820
Kevin Caron: Okay.

00:59:17.920 --> 00:59:20.020
So, Jeremy, he works in Cupertino.

00:59:20.150 --> 00:59:21.470
He can do this stuff.

00:59:21.470 --> 00:59:24.320
The question is,
is it possible to start taking

00:59:24.320 --> 00:59:29.900
advantage of this stuff on real websites
on the public Internet right now?

00:59:29.950 --> 00:59:33.360
We wanted to run that experiment as well.

00:59:33.690 --> 00:59:34.660
And we did.

00:59:35.080 --> 00:59:39.580
We chose a website that has millions
of users and terabytes of video

00:59:39.580 --> 00:59:42.930
that people access all the time,
really useful stuff,

00:59:42.940 --> 00:59:46.290
rich integration with other
content on the website,

00:59:46.420 --> 00:59:50.080
good navigation,
currently using the QuickTime plugin.

00:59:50.080 --> 00:59:54.320
And we went to one of the developers
of that website and we said,

00:59:54.530 --> 00:59:58.990
can you possibly start taking advantage
of this right now with some changes

00:59:58.990 --> 01:00:01.400
to your JavaScript libraries probably?

01:00:01.440 --> 01:00:04.790
But once you've made those changes, well,
how seamless is the integration?

01:00:04.800 --> 01:00:06.530
How difficult is it to achieve?

01:00:06.530 --> 01:00:09.340
The person that we asked is
our friend Mike Seeple of

01:00:09.560 --> 01:00:13.070
the Apple.com developer team,
the people who bring you all that

01:00:13.070 --> 01:00:15.110
great content at www.apple.com.

01:00:15.220 --> 01:00:17.950
And he's going to let you know
whether he had any success

01:00:18.460 --> 01:00:20.060
doing that with real content.

01:00:20.060 --> 01:00:20.060
Jeremy Farbaugh: That's right.

01:00:20.060 --> 01:00:21.030
Mike Seeple:
And he's going to let you know whether

01:00:21.060 --> 01:00:22.060
he had any success doing that with
real content on that actual website.

01:00:22.060 --> 01:00:22.060
Mike?

01:00:22.060 --> 01:00:23.050
Mike Seeple: Thanks, Kevin.

01:00:23.050 --> 01:00:23.900
Hi, my name is -- Sorry.

01:00:24.060 --> 01:00:25.060
Mike Seeple: I'm sorry.

01:00:25.060 --> 01:00:25.060
I'm sorry.

01:00:25.060 --> 01:00:25.060
I'm sorry.

01:00:26.780 --> 01:00:28.510
Hi, my name is Mike Czepiel,
and I'm a developer on the

01:00:28.510 --> 01:00:29.940
Apple.com technology team.

01:00:29.940 --> 01:00:32.660
Last year at the conference,
we had the opportunity to come and talk

01:00:32.780 --> 01:00:35.920
briefly about how we use QuickTime on
Apple.com to introduce and promote

01:00:35.920 --> 01:00:37.110
some of Apple's hottest products.

01:00:37.610 --> 01:00:39.530
Thankfully, the products keep coming,
and so that just means we're

01:00:39.540 --> 01:00:40.930
putting more and more video online.

01:00:40.940 --> 01:00:44.690
Often, the video on Apple.com is the
person's first real experience

01:00:44.860 --> 01:00:48.060
with Apple.com or Apple products,
and so we really want to make sure

01:00:48.060 --> 01:00:51.120
we make a good first impression
for the widest audience possible.

01:00:51.120 --> 01:00:54.170
So it's really important that we take
all the advice you guys have been hearing

01:00:54.170 --> 01:00:55.890
about earlier in the session to heart.

01:00:56.350 --> 01:00:58.620
So we use H.264 for the
best quality video we can.

01:00:58.620 --> 01:00:59.660
We hand-tune.

01:00:59.660 --> 01:01:01.800
We have a mastering code that
hand-tunes all of our videos.

01:01:01.830 --> 01:01:04.400
We use RefMovies to serve
the appropriate content,

01:01:04.470 --> 01:01:08.120
depending upon the platform or the
user agent the visitors are using.

01:01:08.120 --> 01:01:10.220
Of course,
we're also really dependent upon,

01:01:10.220 --> 01:01:12.910
we're also really cognizant of
people coming over in varying

01:01:12.910 --> 01:01:15.890
bandwidth and different devices,
so we put a lot of effort into making

01:01:15.890 --> 01:01:18.810
sure that they get a great experience,
whether you're on a desktop,

01:01:18.810 --> 01:01:21.180
a 30-inch display,
or you're using an iPhone

01:01:21.280 --> 01:01:24.420
on the train or something,
trying to, over an edge connection,

01:01:24.420 --> 01:01:26.820
look at the latest keynote or something.

01:01:26.820 --> 01:01:30.320
So of course, with all the video that
we have on Apple.com,

01:01:30.320 --> 01:01:32.450
we're really looking forward to all
the improvements that are coming

01:01:32.460 --> 01:01:33.910
to make our lives a lot easier.

01:01:33.960 --> 01:01:37.850
We're all born and raised on this
web standard such as HTML and CSS,

01:01:37.930 --> 01:01:40.600
JavaScript, so we're really looking to
make anything that makes

01:01:40.790 --> 01:01:43.760
QuickTime and movies in general a
more integrated part of the page,

01:01:43.760 --> 01:01:46.380
a first-class citizen in the
DOM makes our lives a lot easier.

01:01:46.450 --> 01:01:50.220
And so I'd like to show you a little
bit of an existing part of Apple.com,

01:01:50.220 --> 01:01:53.400
our Find Out How section,
where we've started playing with some

01:01:53.400 --> 01:01:57.780
of this and we can talk you through
this If I could get to the demo machine,

01:01:57.780 --> 01:01:58.600
please.

01:01:58.800 --> 01:02:00.340
Thanks.

01:02:00.430 --> 01:02:02.410
So this is an existing part of
our site that you can actually

01:02:02.410 --> 01:02:06.360
visit live on apple.com/findouthow,
where new and prospective Mac users

01:02:06.360 --> 01:02:09.680
can learn a bit about the platform and
how they can actually do all the things

01:02:09.680 --> 01:02:11.540
that we've promised that they can do.

01:02:11.610 --> 01:02:14.310
And often, the easiest way to actually
tell people about how to do

01:02:14.310 --> 01:02:15.540
anything is just to show them.

01:02:15.550 --> 01:02:18.120
So this is a prime example of
where we have tons of video

01:02:18.120 --> 01:02:20.010
that are just kind of in here.

01:02:20.330 --> 01:02:23.800
All of the video here is all-- Sorry,
this-- --connections, email accounts,

01:02:23.800 --> 01:02:25.040
and basic settings.

01:02:25.120 --> 01:02:27.950
All the video here is set
up as H.264 with ref movies.

01:02:27.960 --> 01:02:29.000
I'm familiar with the Mac.

01:02:29.040 --> 01:02:32.820
And we're using just the plug-in here.

01:02:32.820 --> 01:02:33.780
Well, we'll get to that.

01:02:33.830 --> 01:02:35.770
This is a development version,
like I mentioned.

01:02:35.780 --> 01:02:38.580
So under the hood,
there's some special stuff going on.

01:02:38.630 --> 01:02:41.120
But basically,
we have the QuickTime controller here.

01:02:41.180 --> 01:02:43.820
This is just one of our
JavaScript libraries

01:02:43.850 --> 01:02:44.880
that we use to control.

01:02:44.880 --> 01:02:46.560
You can interact with it to
scrub through the movies,

01:02:46.560 --> 01:02:47.980
as you've seen earlier.

01:02:47.980 --> 01:02:50.060
This is akin kind of to Jeremy's stuff.

01:02:50.140 --> 01:02:52.160
So it's great that you guys are
going to be able to play with

01:02:52.160 --> 01:02:54.010
this yourselves more easily.

01:02:54.120 --> 01:02:57.120
I don't have code to give you,
unfortunately.

01:02:57.120 --> 01:02:58.700
So you can interact with movies.

01:02:58.700 --> 01:02:59.540
You can play them.

01:02:59.540 --> 01:03:00.660
You can pause them.

01:03:00.950 --> 01:03:02.880
And of course,
you can look for the end of the

01:03:02.880 --> 01:03:09.260
movie and act appropriately for
whatever you're trying to do.

01:03:10.370 --> 01:03:12.060
Additionally,
we're also using JavaScript APIs.

01:03:12.060 --> 01:03:16.050
We use things like the setURL function
to actually change between movies.

01:03:16.090 --> 01:03:20.600
So you can just hop between
movies just by selecting new ones.

01:03:20.790 --> 01:03:23.090
Additionally,
since it's just this particular demo,

01:03:23.140 --> 01:03:25.150
like I mentioned,
is a development version,

01:03:25.150 --> 01:03:29.280
that under the hood is actually using the
video element and using the fall-through

01:03:29.280 --> 01:03:34.180
to display the video element in
Safari or any browsers that accept that,

01:03:34.400 --> 01:03:38.400
or it's using the embedding
objects to rely on the plugin.

01:03:38.400 --> 01:03:40.600
The really cool thing is that
with a little bit of code

01:03:40.600 --> 01:03:43.470
and engineering on your part,
you can wrap the differences because

01:03:43.470 --> 01:03:45.120
they're really not that extreme.

01:03:45.640 --> 01:03:49.230
You can use the JavaScript interface
to do things like pull to update

01:03:49.380 --> 01:03:51.800
a controller on a page or keep
things in sync with the movie.

01:03:51.800 --> 01:03:54.480
You can use the DOM events
for the QuickTime plugin,

01:03:54.480 --> 01:03:56.930
and you can also use the
DOM events for the video element.

01:03:56.940 --> 01:03:59.380
It just takes a little bit of
code on your part to provide a

01:03:59.380 --> 01:04:02.540
consistent interface to people
that are actually building these.

01:04:02.540 --> 01:04:04.840
So for instance,
the team that's using the code here,

01:04:04.840 --> 01:04:07.430
they don't need to know about
the underlying technology.

01:04:07.440 --> 01:04:18.610
So it'll act exactly the same as it
does in Safari as it does in... Firefox.

01:04:20.400 --> 01:04:21.290
Exact same thing.

01:04:21.490 --> 01:04:25.200
This one's definitely using the plug-in.

01:04:25.440 --> 01:04:29.500
And if I can go to the iPhone,
you'll be able to see that

01:04:29.510 --> 01:04:32.200
it's actually the exact same.

01:04:37.480 --> 01:04:39.990
It's going to work exactly the
same here on the iPhone as well.

01:04:40.000 --> 01:04:45.010
Can we have the phone up please?

01:04:48.700 --> 01:04:50.100
Can we get the phone displayed?

01:04:50.100 --> 01:04:51.560
Thank you.

01:04:51.760 --> 01:04:51.920
Okay.

01:04:51.920 --> 01:04:54.980
So it's pretty much the exact same
thing where people can come in and

01:04:55.150 --> 01:04:57.880
they're presented with a poster frame
and if you're serving your content

01:04:57.990 --> 01:05:00.790
correctly with the right mime types
and the phone's able to detect that,

01:05:00.790 --> 01:05:03.160
picks up a little bit of the movies,
realizes it can play it,

01:05:03.160 --> 01:05:06.320
it'll provide it with a play button
that just pops you into full screen.

01:05:06.320 --> 01:05:12.940
So we're really excited about all the
features that are coming in to the HTML5

01:05:12.940 --> 01:05:15.720
spec in particular and I'd urge you to,
you know, we're actually considering

01:05:15.720 --> 01:05:16.200
putting this in.

01:05:16.200 --> 01:05:18.320
I hope to have this stuff
live on Apple.com really soon.

01:05:18.770 --> 01:05:19.950
And so we're considering it.

01:05:20.030 --> 01:05:21.450
There's no reason you guys can't,
you know,

01:05:21.520 --> 01:05:23.820
put this on your own sites and start
tinkering with it and it's a great

01:05:23.820 --> 01:05:26.350
way to start getting involved in
the HTML5 process as well because

01:05:26.350 --> 01:05:28.780
if you're starting to play with it,
you'll hit some edge cases yourself and

01:05:28.780 --> 01:05:31.310
you can give feedback either to us or,
you know, you can get involved in

01:05:31.310 --> 01:05:32.490
the spec process yourself.

01:05:32.500 --> 01:05:35.130
And, you know,
we're really looking forward

01:05:35.130 --> 01:05:38.390
to leveraging all this,
using things like different video

01:05:38.580 --> 01:05:42.980
codecs for different browsers to even,
you know, further extend who's able to

01:05:43.050 --> 01:05:45.340
watch the videos on Apple.com.

01:05:45.340 --> 01:05:47.230
So thank you for all your work, Kevin.

01:05:47.230 --> 01:05:48.310
It's looking great.

01:05:48.700 --> 01:05:49.360
Thank you, Mike.

01:05:55.610 --> 01:05:58.430
We're going to start publishing
some of the JavaScript that you

01:05:58.430 --> 01:06:01.570
would use if you want to accomplish
some of this on your own sites.

01:06:01.600 --> 01:06:04.220
Jeremy's example will
be published shortly.

01:06:04.220 --> 01:06:08.460
It's not available as sample code
and via the typical path right now.

01:06:08.460 --> 01:06:11.500
It's going to be made available by
the same means that we currently

01:06:11.500 --> 01:06:14.980
distribute that JavaScript library
for embedding that we talk about.

01:06:14.980 --> 01:06:18.720
So look for that coming real soon
and you'll get an idea of the types

01:06:18.830 --> 01:06:22.540
of scripting methods that you will
need to use in order to bridge

01:06:22.540 --> 01:06:24.610
these different technologies.

01:06:24.620 --> 01:06:29.180
Okay, told you about standards for
encoding and container formats.

01:06:29.220 --> 01:06:32.720
We told you that we were committed
to standards in general and we showed

01:06:32.720 --> 01:06:36.620
you that we were moving towards
adoption and promotion of the HTML5

01:06:36.740 --> 01:06:40.670
standard for video and also the
emerging CSS standards for styling,

01:06:40.670 --> 01:06:43.360
for effects, for mirroring,
for gradients,

01:06:43.360 --> 01:06:47.810
all that cool stuff so that video can
be very rich inside of your web apps.

01:06:47.810 --> 01:06:52.080
And that's basically where we are right
now and where we're going tomorrow.

01:06:53.980 --> 01:06:57.460
So, where can you get more information
relevant to this particular session?

01:06:57.460 --> 01:07:01.140
Alan Schaffer is the graphics
technology evangelist.

01:07:01.260 --> 01:07:04.150
He can answer questions for you or
give you the right references that

01:07:04.150 --> 01:07:05.770
you need if you want to follow up.

01:07:05.860 --> 01:07:09.910
But there are additional sessions
that you might want to be aware of

01:07:10.090 --> 01:07:13.160
at the conference this week that are
relevant to various portions of my talk.

01:07:13.310 --> 01:07:16.250
If you look very closely at this list,
you'll note that only one of

01:07:16.250 --> 01:07:17.700
them occurs in the future.

01:07:17.700 --> 01:07:22.250
What enables me to put up here
sessions that occurred in the past?

01:07:23.120 --> 01:07:27.650
Well, it's because we're going to deliver
video of those sessions to our

01:07:27.880 --> 01:07:32.210
Apple Developer Connection members
on the web in the future using

01:07:32.480 --> 01:07:36.140
the very same methodologies that we
covered right here in this session.

01:07:36.140 --> 01:07:39.400
So, you'll be able to review those
sessions in the future by that means.

01:07:39.400 --> 01:07:41.450
If you want to know more
about Podcast Producer,

01:07:41.450 --> 01:07:43.180
that's still happening in the future.

01:07:43.180 --> 01:07:44.430
The arrow is pointing that way.

01:07:44.440 --> 01:07:47.200
That'll be in Nob
Hill tomorrow at 10.30 a.m.

01:07:47.240 --> 01:07:49.960
Where can you come and ask us questions?

01:07:49.960 --> 01:07:52.780
Many or most of us will be in the future.

01:07:52.780 --> 01:07:54.730
We'll be in the Graphics
and Media Lab starting

01:07:54.850 --> 01:07:56.300
tomorrow morning at 9 a.m.

01:07:56.300 --> 01:08:00.750
Where we'll have a lab specifically
about delivering media in web apps.

01:08:00.900 --> 01:08:05.070
But following hard upon that,
there is a lab that's specifically

01:08:05.070 --> 01:08:07.530
about delivering video to iPhone.

01:08:07.540 --> 01:08:10.160
At the same time,
starting at 10.30 tomorrow is

01:08:10.210 --> 01:08:12.560
the QuickTime Video Lab runs
all the way till 3.

01:08:12.560 --> 01:08:14.140
I'll be there for the whole time.

01:08:14.140 --> 01:08:15.350
Come ask me questions then.

01:08:15.360 --> 01:08:17.880
In addition,
if you want hands-on experience

01:08:18.060 --> 01:08:22.040
with Podcast Producer,
their lab is tomorrow at 3.30 p.m.

01:08:22.880 --> 01:08:25.050
And finally,
more information about the use of

01:08:25.050 --> 01:08:27.940
Final Cut Pro and the full suite
of tools available in that package,

01:08:28.450 --> 01:08:30.970
Friday at 2,
back in the Graphics and Media Lab.

01:08:31.080 --> 01:08:33.670
So,
that was an information-packed session.

01:08:33.810 --> 01:08:38.580
I hope I raised questions in your minds
about video preparation and delivery.

01:08:38.900 --> 01:08:42.370
What can you do that you didn't even
think you could do before you came in?

01:08:42.880 --> 01:08:46.280
Come ask us how and we'll help
you develop the things that you

01:08:46.280 --> 01:08:47.450
want to develop for the future.

01:08:47.600 --> 01:08:48.980
Start tomorrow morning in the lab.