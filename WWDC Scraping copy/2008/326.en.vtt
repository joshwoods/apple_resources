WEBVTT

00:00:20.180 --> 00:00:21.330
My name is James Dempsey.

00:00:21.390 --> 00:00:24.320
I'm a software engineer on
the Cocoa Frameworks team,

00:00:24.370 --> 00:00:27.270
and I focus on application accessibility.

00:00:27.370 --> 00:00:29.120
So what are we going to
be talking about today?

00:00:29.120 --> 00:00:32.320
Well, we're going to do a brief
accessibility overview.

00:00:32.490 --> 00:00:36.040
Then we're going to take a look
at some of the major use cases

00:00:36.230 --> 00:00:41.180
of application accessibility,
both for users with disabilities,

00:00:41.180 --> 00:00:45.940
as well as how application accessibility
is very useful to power users of

00:00:45.950 --> 00:00:50.420
your application and how you yourself
can use application accessibility

00:00:50.770 --> 00:00:53.520
as part of your development process.

00:00:53.670 --> 00:00:57.630
Then we'll walk through the accessibility
architecture on Mac OS X and spend

00:00:57.630 --> 00:01:03.060
the bulk of the time talking about
how to make your application accessible.

00:01:03.230 --> 00:01:05.150
So let's get started.

00:01:06.200 --> 00:02:09.500
[Transcript missing]

00:02:10.510 --> 00:02:18.040
So let's consider for a moment the case
of a person with a visual disability

00:02:18.630 --> 00:02:22.320
using a graphical user interface.

00:02:22.380 --> 00:02:27.070
Now,
there needs to be some alternate way for

00:02:27.070 --> 00:02:30.550
a user to interact with their computer.

00:02:30.660 --> 00:02:34.060
So they need to have
the interface described.

00:02:34.380 --> 00:02:39.210
They need some way to navigate and
interact without using a mouse.

00:02:39.220 --> 00:02:43.100
And that user also needs to
find out when things happen,

00:02:43.150 --> 00:02:46.870
like when windows and sheets come and go.

00:02:47.300 --> 00:02:52.010
Now, software that provides this
alternate interface to a computer

00:02:52.410 --> 00:02:55.800
is commonly called a screen reader.

00:02:55.910 --> 00:03:02.340
Mac OS X, starting with Tiger,
has included a built-in system-level

00:03:02.340 --> 00:03:05.370
screen reader called VoiceOver.

00:03:05.600 --> 00:03:10.690
Now, the reason why I'm focusing on
VoiceOver is that the way VoiceOver works

00:03:10.880 --> 00:03:14.610
to provide this alternate interface,
it's really a collaborative effort

00:03:14.970 --> 00:03:18.910
between VoiceOver and all of the
other applications on the system.

00:03:18.920 --> 00:03:24.220
Those applications provide accessibility
information about themselves,

00:03:24.220 --> 00:03:29.720
and VoiceOver takes that information and
provides a standard spoken interface to

00:03:29.920 --> 00:03:33.750
all of the applications on the system,
or even a refreshable

00:03:33.960 --> 00:03:36.790
Braille display interface,
in fact.

00:03:38.300 --> 00:03:46.020
So another reason why VoiceOver,
we're talking about VoiceOver,

00:03:46.020 --> 00:03:48.700
is that VoiceOver ships with Mac OS X.

00:03:48.720 --> 00:03:51.360
Every version of Tiger,
every version of Leopard,

00:03:51.360 --> 00:03:56.300
in the future every version of
Snow Leopard has VoiceOver built in.

00:03:56.340 --> 00:04:00.540
And so 16,
17 million copies of this software

00:04:00.540 --> 00:04:04.390
are already out there and there's
an ever increasing number of

00:04:04.390 --> 00:04:08.880
users of your applications whose
only way of interacting with

00:04:08.880 --> 00:04:11.860
their Mac is through VoiceOver.

00:04:12.530 --> 00:04:16.270
Now,
we have one such user here with us today,

00:04:16.270 --> 00:04:20.020
and I'm very happy to
introduce Dean Hudson,

00:04:20.020 --> 00:04:23.800
who is a QA engineer
on the VoiceOver team.

00:04:23.850 --> 00:04:29.400
And Dean is going to give us a little
walkthrough and tour of VoiceOver.

00:04:29.530 --> 00:04:31.210
Take it, Dean.

00:04:33.500 --> 00:06:23.100
[Transcript missing]

00:06:23.280 --> 00:06:25.110
Next Dim button.

00:06:25.110 --> 00:06:26.190
Idle image.

00:06:26.280 --> 00:06:27.280
Mute button.

00:06:27.350 --> 00:06:29.810
100% volume horizontal slider.

00:06:30.270 --> 00:06:31.590
Full volume button.

00:06:31.720 --> 00:06:32.920
Text list button.

00:06:33.000 --> 00:06:34.250
Album list button.

00:06:34.440 --> 00:06:35.350
Cover flow button.

00:06:35.450 --> 00:06:36.450
Edit text blank.

00:06:36.460 --> 00:06:40.420
Now, as I was navigating,
you were watching the rectangle and you

00:06:40.420 --> 00:06:42.420
were seeing what was spoken in text.

00:06:42.420 --> 00:06:44.950
And you might think, boy,
that's a lot of information.

00:06:44.980 --> 00:06:49.220
I mean, geez, you know,
can't we just say button?

00:06:49.220 --> 00:06:53.820
But as a blind user,
that information is very important to me.

00:06:53.820 --> 00:06:56.100
If I land on something
that just says button,

00:06:56.100 --> 00:06:58.740
I don't know if that's a mute button,
a play button.

00:06:58.800 --> 00:07:00.020
It just says button.

00:07:00.020 --> 00:07:02.910
I land on something that just says edit.

00:07:02.910 --> 00:07:05.560
It could be a secure edit text field.

00:07:05.560 --> 00:07:07.780
It could be a regular text field.

00:07:08.230 --> 00:07:11.960
That information, description,
gives me a bit more information

00:07:11.960 --> 00:07:15.160
about what's going on and
helps me use the application.

00:07:15.390 --> 00:07:16.140
More effectively.

00:07:16.140 --> 00:07:21.480
So I'm going to try and do something
interesting and play a song,

00:07:21.490 --> 00:07:22.070
I think.

00:07:22.560 --> 00:07:28.500
Sources Table 1 Interact Audiobooks
Live Radio Store iTunes Store Now I was

00:07:28.500 --> 00:07:30.890
just going to play a song,
but Karl said that's too boring.

00:07:30.920 --> 00:07:32.940
So let's try and search
for something on the store.

00:07:33.080 --> 00:07:34.110
Stop interacting.

00:07:34.150 --> 00:07:35.500
Edit text blank.

00:07:35.660 --> 00:07:38.050
See if I can.

00:07:39.020 --> 00:07:47.910
SIG AED DEED AND D space
D N A E A L E D sign D wield clear

00:07:47.910 --> 00:07:58.700
search button sign D sign D wield
D D E L A E A space D E N G G A E D space

00:07:58.700 --> 00:08:08.980
A N D space S E A E D sign
and seal clear vertical split.

00:08:09.000 --> 00:08:19.520
I'm your host, James Dempsey,
and I'm back and not ashamed to cry.

00:08:25.600 --> 00:08:26.490
James?

00:08:26.490 --> 00:08:28.640
Oh, I'm sorry.

00:08:28.640 --> 00:08:29.550
Shoot, I forgot.

00:08:29.630 --> 00:08:30.020
Mail.

00:08:30.280 --> 00:08:32.430
I was getting too excited.

00:08:32.500 --> 00:08:34.540
Just having too much fun.

00:08:34.540 --> 00:08:35.030
Finder.

00:08:35.030 --> 00:08:35.440
Mail.

00:08:35.440 --> 00:08:37.180
Okay, so let's do something serious.

00:08:37.180 --> 00:08:39.920
Horizontal split messages table.

00:08:39.920 --> 00:08:43.060
Mail, you all know, it's a very,
very popular application.

00:08:43.110 --> 00:08:46.390
So I'm just going to use
this to send a message,

00:08:46.390 --> 00:08:49.430
something that users typically do.

00:08:49.620 --> 00:08:52.560
And again, pay attention to some of
the feedback that I get.

00:08:52.680 --> 00:08:56.440
I'm also going to get out
of this slow boat mode.

00:08:56.440 --> 00:08:59.060
We're going to speed it up the
way a blind user would use it.

00:08:59.330 --> 00:09:03.460
60%, 78%. Window, new message.

00:09:03.460 --> 00:09:07.560
To edit text, K, C, scram,
m at apple.com.

00:09:07.560 --> 00:09:09.920
Subject, edit text, customize header,
menu button, subject, edit text,

00:09:09.960 --> 00:09:13.420
insertion at beginning of text, L, U, N,
C, H, customize header, Gmail,

00:09:13.420 --> 00:09:15.090
pop-up button, text.

00:09:17.100 --> 00:09:30.700
[Transcript missing]

00:09:31.000 --> 00:09:32.000
Mac account off.

00:09:32.000 --> 00:09:32.550
Menu check.

00:09:32.590 --> 00:09:33.000
Gmail.

00:09:33.030 --> 00:09:33.540
Gmail.

00:09:33.540 --> 00:09:33.960
Let's go.

00:09:33.960 --> 00:09:34.290
Text.

00:09:34.300 --> 00:09:35.180
Messages table.

00:09:35.180 --> 00:09:35.640
No selection.

00:09:35.640 --> 00:09:36.260
Messages table.

00:09:36.260 --> 00:09:38.340
That probably won't send.

00:09:38.360 --> 00:09:40.310
Horizontal splitter.

00:09:40.320 --> 00:09:41.910
Ah, it did.

00:09:41.910 --> 00:09:43.000
Sweet.

00:09:43.020 --> 00:09:44.830
All right, James.

00:09:50.890 --> 00:09:54.150
Thank you very much, Dean.

00:09:54.310 --> 00:09:58.060
So Dean just showed us using VoiceOver.

00:09:58.060 --> 00:10:00.520
And you may be wondering,
I had mentioned that it's a

00:10:00.580 --> 00:10:03.710
collaborative process between
VoiceOver and in this case,

00:10:03.910 --> 00:10:08.240
the iTunes application,
the mail application.

00:10:08.260 --> 00:10:12.700
Let's talk a little bit about
that interaction between the

00:10:12.700 --> 00:10:17.500
two before we jump into what you
need to do in your application to

00:10:17.500 --> 00:10:20.490
provide accessibility information.

00:10:20.960 --> 00:10:23.600
What's going on is it's
a fairly straightforward

00:10:23.600 --> 00:10:25.540
client-server relationship.

00:10:25.650 --> 00:10:29.520
VoiceOver isn't doing any odd
things within your process.

00:10:29.520 --> 00:10:31.750
It lives in its own process space.

00:10:31.780 --> 00:10:37.900
And Mac OS X has a very well-defined
public accessibility client API.

00:10:37.900 --> 00:10:40.440
That's shown in this diagram in green.

00:10:40.440 --> 00:10:43.490
The prefix we use on those APIs is AX.

00:10:43.560 --> 00:10:45.510
You'll see that a lot.

00:10:45.630 --> 00:10:47.600
AX for accessibility.

00:10:49.400 --> 00:10:50.710
I kid you not.

00:10:54.690 --> 00:11:00.340
Those APIs allow VoiceOver to get
information from your application,

00:11:00.340 --> 00:11:02.220
all the applications on the system.

00:11:02.220 --> 00:11:06.230
So all the apps, in essence,
are their own mini little

00:11:06.230 --> 00:11:09.260
accessibility information server.

00:11:09.260 --> 00:11:13.250
And the red sections up there represent
the fact that that server infrastructure,

00:11:13.250 --> 00:11:16.250
the piece that can respond
to accessibility requests,

00:11:16.250 --> 00:11:21.360
is built in to the Cocoa framework,
built into the Carbon framework.

00:11:21.910 --> 00:11:24.560
So your applications,
if you have a Cocoa app

00:11:24.560 --> 00:11:28.420
that you've written,
it's already doing some accessibility,

00:11:28.490 --> 00:11:30.690
even if you didn't do a darn thing.

00:11:30.700 --> 00:11:34.670
Now let's narrow it down a
little bit to one application,

00:11:34.670 --> 00:11:37.100
the back and forth between two.

00:11:37.100 --> 00:11:41.300
You'll notice that VoiceOver has
changed to assistive application.

00:11:41.300 --> 00:11:45.900
That AX API, that client API,
is a public API.

00:11:45.900 --> 00:11:48.450
Therefore,
not only does VoiceOver use it,

00:11:48.450 --> 00:11:51.800
but in fact there are other
applications that can use it.

00:11:51.880 --> 00:11:57.260
And we call that general class of
applications assistive applications.

00:11:57.300 --> 00:12:02.880
And so an assistive application might
want to talk to your Cocoa application.

00:12:02.880 --> 00:12:06.760
And to start off,
one piece of that client API takes

00:12:07.130 --> 00:12:11.850
the process identifier of some
app and calls into that and says,

00:12:11.850 --> 00:12:16.290
give me back the application
UI element for that item.

00:12:17.950 --> 00:12:22.760
And on the client side,
the UI of your application is represented

00:12:23.090 --> 00:12:25.620
in a very lightweight but rich way.

00:12:25.690 --> 00:12:30.690
It's represented by these
little UI elements ref

00:12:31.100 --> 00:15:45.500
[Transcript missing]

00:15:45.760 --> 00:15:49.400
We also have a checkbox that
has no children underneath it.

00:15:49.560 --> 00:15:51.510
It's kind of a leaf in the tree.

00:15:51.640 --> 00:15:52.700
But it does have a parent.

00:15:52.700 --> 00:15:56.000
Also, what window it happens to be in.

00:15:56.000 --> 00:15:58.520
And this thing called
a top-level UI element.

00:15:58.520 --> 00:16:02.120
And this is,
sometimes we'll have things in

00:16:02.120 --> 00:16:04.880
a sheet or a drawer or a window.

00:16:04.880 --> 00:16:08.750
And the top-level UI element
is which one of those three

00:16:08.750 --> 00:16:11.010
things it happens to live in.

00:16:11.010 --> 00:16:15.100
Those items happen to be children of
the window that they're attached to.

00:16:15.100 --> 00:16:18.210
We also have geometry.

00:16:18.230 --> 00:16:21.250
So the screen position
and the screen size.

00:16:21.250 --> 00:16:25.210
This is what VoiceOver was using to
draw that VoiceOver cursor that was

00:16:25.400 --> 00:16:27.920
following around what it was speaking.

00:16:27.920 --> 00:16:30.980
And then information
about this control itself.

00:16:31.060 --> 00:16:32.150
Like its value.

00:16:32.150 --> 00:16:33.490
Is it checked or not?

00:16:33.600 --> 00:16:34.860
Is it enabled?

00:16:34.880 --> 00:16:35.440
Is it enabled or not?

00:16:35.510 --> 00:16:37.360
Is it the focused element?

00:16:37.480 --> 00:16:38.870
Does it have the keyboard focus?

00:16:38.880 --> 00:16:41.400
And finally, very important, a title.

00:16:41.400 --> 00:16:46.260
So that a VoiceOver user knows
what the heck this checkbox is for.

00:16:48.860 --> 00:16:57.990
And so with these UI element refs,
attributes, and the other functionality,

00:16:57.990 --> 00:17:02.290
there's a great deal that an
assistive app can do interacting

00:17:02.290 --> 00:17:04.240
with your application.

00:17:04.300 --> 00:17:09.080
And of course, VoiceOver is just one of
many assistive applications.

00:17:09.090 --> 00:17:14.150
In fact, on Mac OS X,
we ship a number of features and

00:17:14.150 --> 00:17:18.080
technologies that use this client API.

00:17:18.880 --> 00:17:21.520
Now, another one is Accessibility Tools.

00:17:21.520 --> 00:17:25.440
We'll take a look at
Accessibility Inspector in a bit,

00:17:25.490 --> 00:17:30.700
which uses it to give you a more raw,
unprocessed look at the

00:17:30.700 --> 00:17:34.440
accessibility information that's
being returned by your application.

00:17:34.440 --> 00:17:38.420
But also, user-level features.

00:17:38.420 --> 00:17:42.050
GUI scripting, which allows somebody to
write Apple scripts or using

00:17:42.150 --> 00:17:45.980
the new scripting bridge,
actually a number of scripting languages,

00:17:45.980 --> 00:17:48.780
to basically implement the
accessibility of your application.

00:17:48.780 --> 00:17:50.470
So, for example, we can actually control
the user interface.

00:17:50.470 --> 00:17:54.560
Now, advanced users who are building
automated workflows love this feature.

00:17:54.560 --> 00:17:59.260
But for developers,
this is extraordinarily useful for

00:17:59.260 --> 00:18:05.320
creating automated test suites that
drive your UI the way a user would.

00:18:05.380 --> 00:18:08.500
So you can,
and we're actually going to have Karl,

00:18:08.500 --> 00:18:11.240
he's going to show you
that in a little bit.

00:18:11.340 --> 00:18:15.850
In addition, as a user-level feature and
a developer-level feature,

00:18:15.850 --> 00:18:18.750
Automator has a feature called WatchMap.

00:18:18.800 --> 00:18:23.410
WatchMap is a feature that
allows a power user to record

00:18:23.550 --> 00:18:29.340
and play back certain UI actions
as part of an automated workflow.

00:18:29.340 --> 00:18:33.340
That same technology underneath,
based on accessibility,

00:18:33.340 --> 00:18:38.000
is also used in instruments,
which you heard about a lot yesterday.

00:18:38.000 --> 00:18:42.860
The performance tool,
not only can you just drive it yourself,

00:18:42.860 --> 00:18:47.000
in instruments you can record
a series of UI actions,

00:18:47.000 --> 00:18:48.680
and then perform it yourself.

00:18:48.850 --> 00:18:51.950
But you can play them back
again and again and again,

00:18:52.100 --> 00:18:57.900
using various profiling tools,
to be certain that you are testing the

00:18:57.900 --> 00:19:00.200
exact same thing over and over again.

00:19:00.200 --> 00:19:04.230
Which is especially handy when you
have that one case that you need to

00:19:04.230 --> 00:19:08.220
do like these 17 steps in an exact,
and then you try to debug it

00:19:08.230 --> 00:19:12.160
and you always forget step 13,
and so you have to restart over.

00:19:12.160 --> 00:19:15.930
Very handy with instruments to be
able to catch that thing by recording

00:19:15.930 --> 00:19:17.800
and playing back your actions.

00:19:18.720 --> 00:19:23.520
All of these rely upon the
accessibility in your application,

00:19:23.540 --> 00:19:27.680
that it gives out complete
information and valid information.

00:19:27.720 --> 00:19:30.680
Now, to show you a little
bit about how you can,

00:19:30.680 --> 00:19:34.460
your application can take
advantage of this using audit,

00:19:34.460 --> 00:19:36.800
or excuse me,
using GUI scripting in instruments,

00:19:36.800 --> 00:19:38.780
I'd like to introduce Karl Schramm.

00:19:38.840 --> 00:19:42.160
He's an engineer on the
VoiceOver team to walk us through

00:19:42.320 --> 00:19:44.520
automated testing in instruments.

00:19:45.720 --> 00:19:47.480
Thank you, James.

00:19:49.030 --> 00:19:50.360
Good morning everybody.

00:19:50.470 --> 00:19:53.380
So in Dean's demo,
we got to see how VoiceOver can interact

00:19:53.380 --> 00:19:57.660
with rich applications like iTunes
and Mail because they're accessible.

00:19:57.660 --> 00:20:00.910
However, VoiceOver isn't the only
assistive application.

00:20:00.990 --> 00:20:03.730
I'm gonna show you two such
tools that you can use in your

00:20:03.730 --> 00:20:07.400
development process as soon as you
make your application accessible.

00:20:07.600 --> 00:20:10.840
So the first thing I'm gonna show you,
let's get rid of that.

00:20:10.840 --> 00:20:12.560
Am I live?

00:20:12.560 --> 00:20:13.400
Okay.

00:20:19.000 --> 00:20:23.950
Technical difficulties.

00:21:04.940 --> 00:21:05.980
Great.

00:21:06.240 --> 00:21:09.740
And we're back.

00:21:09.750 --> 00:21:10.980
Thanks.

00:21:10.980 --> 00:21:11.290
Okay.

00:21:11.450 --> 00:21:15.260
So the first thing I'm going to show
you is how you can make automated use

00:21:15.260 --> 00:21:17.800
cases using AppleScript GUI scripting.

00:21:17.850 --> 00:21:21.500
And the application we're going
to be automating is Dicey.

00:21:21.500 --> 00:21:24.280
Dicey is available in the
developer examples directory of

00:21:24.340 --> 00:21:26.860
your Snow Leopard installation,
and it's this great

00:21:26.860 --> 00:21:28.420
single-player dice game.

00:21:28.420 --> 00:21:33.000
You play Dicey by rolling the
dice three times and selecting

00:21:33.130 --> 00:21:35.670
the dice to maximize your score.

00:21:35.760 --> 00:21:41.100
So I'll just pick the threes,
and we'll try for a full house.

00:21:41.100 --> 00:21:42.430
Oh, we're short.

00:21:42.520 --> 00:21:44.250
So we'll just mark this up to chance.

00:21:44.360 --> 00:21:45.360
So that's Dicey.

00:21:45.380 --> 00:21:47.980
Now for our script,
all we're going to do is click on the

00:21:47.980 --> 00:21:51.290
roll button and select the last die here.

00:21:51.700 --> 00:21:54.130
Now, in order to do this,
we're going to have to learn

00:21:54.430 --> 00:21:55.920
a little bit about Dicey.

00:21:55.920 --> 00:21:59.440
So we're going to take the Accessibility
Inspector and the Accessibility

00:21:59.440 --> 00:22:03.280
Inspector works by hit testing
whatever's directly underneath the mouse.

00:22:03.280 --> 00:22:05.560
So we can see as we move
over these dock items,

00:22:05.670 --> 00:22:09.840
we can see the information changing
in the Accessibility Inspector window.

00:22:10.000 --> 00:22:14.120
And we can lock onto an element.

00:22:14.120 --> 00:22:14.120
I'm going to lock onto the
roll button right here.

00:22:14.690 --> 00:22:17.670
This top part of the Accessibility
Inspector window shows the

00:22:17.730 --> 00:22:19.240
accessibility hierarchy.

00:22:19.240 --> 00:22:23.600
We can see that this is an AX button,
its parent is the AX window,

00:22:23.600 --> 00:22:26.600
and of course its parent
is the Dicey application.

00:22:26.760 --> 00:22:29.610
Now below this we have all the
various attributes for this button.

00:22:29.880 --> 00:22:35.300
We can see that its title is role,
it has a size and position,

00:22:35.300 --> 00:22:38.270
and a bunch of other stuff.

00:22:38.580 --> 00:22:41.980
Now below this we have all the actions
we can perform and this button only

00:22:41.980 --> 00:22:44.300
has one action and that's AX Press.

00:22:44.430 --> 00:22:47.390
We can actually perform it in
the interaction window here.

00:22:47.490 --> 00:22:52.120
So we'll select AX Press, perform it,
and we see the dice roll.

00:22:52.300 --> 00:22:55.370
We can also traverse the hierarchy
by going up to its parent and the

00:22:55.750 --> 00:22:59.750
highlight's going to change to show
that we're now on the window and

00:22:59.750 --> 00:23:03.880
we can return to the roll button by
going to the children of the window

00:23:04.310 --> 00:23:06.500
and selecting the roll button.

00:23:06.560 --> 00:23:08.140
So now we know enough
about the roll button,

00:23:08.140 --> 00:23:10.400
let's look at these dice over here.

00:23:10.410 --> 00:23:15.750
And as I move over these
and lock on to the last die,

00:23:15.750 --> 00:23:19.210
now the highlight's red and the
die is red so it's kind of hard to

00:23:19.210 --> 00:23:21.400
see that we have this highlighted.

00:23:21.460 --> 00:23:25.350
But if I perform an AX Press,
we can change the selection state

00:23:25.400 --> 00:23:27.520
so we know we have the right die.

00:23:27.680 --> 00:23:32.380
So the die is accessorized
as an AX checkbox.

00:23:32.690 --> 00:23:35.230
and its parent, The Playing Field,
is an AX group.

00:23:35.300 --> 00:23:37.860
It's important to note that
this is a custom NS view and we

00:23:37.870 --> 00:23:40.590
wouldn't know anything about this
had it not been for the fact that

00:23:40.680 --> 00:23:43.030
Dicey's been made accessible.

00:23:43.610 --> 00:23:47.280
So let's go up to the parent,
the playing field.

00:23:47.300 --> 00:23:50.500
And we'll return again,
look at its children.

00:23:50.530 --> 00:23:54.420
Now, the children are returned in the
opposite order in which you see them.

00:23:54.450 --> 00:23:56.340
And that's just the
way Dicey returns them.

00:23:56.370 --> 00:24:02.240
So the first child is the first checkbox,
which is the last die.

00:24:02.300 --> 00:24:04.710
And we know we have it selected.

00:24:04.940 --> 00:24:08.600
Okay, so now we know enough
information to make our script.

00:24:08.870 --> 00:24:11.420
And I have that script right here.

00:24:12.430 --> 00:24:16.510
So the first thing we're going to do is
tell the Dicey application to activate.

00:24:16.540 --> 00:24:19.240
And then we're going to talk to
the system events application.

00:24:19.260 --> 00:24:24.400
And this will enable us to communicate
to Dicey through the Accessibility API.

00:24:24.550 --> 00:24:27.400
So we're going to talk
to the Dicey process.

00:24:27.410 --> 00:24:31.120
We're going to talk to window one,
which is Dicey's only window.

00:24:31.160 --> 00:24:34.790
And we'll click on the button
with the title of role.

00:24:34.990 --> 00:24:37.140
and we're going to tell group one,
which is the only group,

00:24:37.150 --> 00:24:39.980
to click on checkbox one,
which is the last die.

00:24:39.990 --> 00:24:42.980
So let's clear the playing field
before we start the script.

00:24:43.160 --> 00:24:46.650
Now you also may have noticed that
I made a couple calls here to the say

00:24:46.650 --> 00:24:51.890
command because we're going to use the
Alex synthesizer to annotate our demo.

00:24:52.000 --> 00:24:53.900
So here we go.

00:24:55.260 --> 00:24:58.670
First, let's click on the roll button.

00:24:58.670 --> 00:25:01.200
Now let's click on the last die.

00:25:01.270 --> 00:25:03.910
Okay, we're off to a good start.

00:25:04.130 --> 00:25:07.600
So using this,
we can make a script that will

00:25:07.600 --> 00:25:10.020
play an entire game of Dicey.

00:25:10.020 --> 00:25:12.950
And I have this script right
here and we're going to run it.

00:25:13.360 --> 00:25:15.300
Now this script just
plays the game randomly,

00:25:15.300 --> 00:25:17.550
an entire game of Dicey,
and you can use this as a

00:25:17.550 --> 00:25:19.530
basis for other scripts.

00:25:19.620 --> 00:25:22.830
For instance,
you can make it into a regression test

00:25:22.830 --> 00:25:27.500
by adding validation checks for the game
state or you can make it into a fuzz

00:25:27.500 --> 00:25:32.400
test by trying to perform some illegal
actions or set some illegal values.

00:25:32.400 --> 00:25:34.520
And then once you've
made this suite of tests,

00:25:34.520 --> 00:25:37.860
you can run them at the end of
your build process on your daily

00:25:37.860 --> 00:25:42.610
builds or use it as a validation
before a major milestone shift.

00:25:42.630 --> 00:25:47.380
So that's how you can make automated use
cases using Apple Script GUI scripting.

00:25:49.620 --> 00:25:53.720
Next thing I'll show you is Instruments.

00:25:53.830 --> 00:25:58.020
Now as James mentioned,
Instruments UI recording feature utilizes

00:25:58.020 --> 00:26:02.550
the Accessibility API to record and
play back all your user actions just

00:26:02.550 --> 00:26:04.920
like Automator's Watch Me Do feature.

00:26:05.500 --> 00:26:08.700
Now, because of this,
the more accessible your application,

00:26:08.700 --> 00:26:10.810
the more robust your
recordings can become.

00:26:10.820 --> 00:26:13.920
So here I've launched
the Dicey Xcode project.

00:26:13.920 --> 00:26:16.220
Now,
I could launch straight into Instruments.

00:26:16.240 --> 00:26:19.600
However, Instruments is just so nicely
integrated into Xcode that I can

00:26:19.600 --> 00:26:20.680
launch it while I'm coding.

00:26:20.680 --> 00:26:25.520
I go up to the Run menu of Xcode,
select Start with Performance Tool,

00:26:25.520 --> 00:26:28.860
and we're going to go to the
UI Recorder Instrument Template.

00:26:29.010 --> 00:26:31.290
And as soon as I click on this,
Instruments is going to launch,

00:26:31.300 --> 00:26:33.100
and it's going to launch a
debugged version of Dicey,

00:26:33.100 --> 00:26:35.340
and it'll begin recording
all our actions.

00:26:35.400 --> 00:26:38.350
So here we go.

00:26:38.810 --> 00:26:40.110
Here comes Instruments.

00:26:40.230 --> 00:26:42.570
There's Dicey and we're
off and recording.

00:26:42.690 --> 00:26:45.730
Just going to do a few simple actions.

00:26:52.610 --> 00:26:56.930
So we can see in the track view
all our actions have been recorded.

00:26:56.930 --> 00:27:02.060
Now, Instruments has a whole wealth of
instruments that you can tune and tweak

00:27:02.070 --> 00:27:04.890
all sorts of aspects of your application.

00:27:04.950 --> 00:27:08.050
You can look at graphics performance,
I.O.

00:27:08.050 --> 00:27:10.110
usage, garbage collection.

00:27:10.380 --> 00:27:14.580
We're just going to look at
memory allocation and leaks.

00:27:15.220 --> 00:27:21.300
So we'll grab these two instruments,
drop them in over here,

00:27:21.300 --> 00:27:25.300
and we'll kick off leaks
at about 10 seconds.

00:27:27.170 --> 00:27:28.840
And as soon as I hit
the drive and record,

00:27:28.870 --> 00:27:31.160
it's going to play back
everything that we've recorded,

00:27:31.160 --> 00:27:33.980
and the object alloc and
leaks instruments will

00:27:34.090 --> 00:27:35.930
begin recording trace data.

00:27:36.120 --> 00:27:39.160
So Instruments is taking
control of the mouse,

00:27:39.260 --> 00:27:40.700
performing all our actions.

00:27:40.700 --> 00:27:44.940
We can see the object allocations
in the detail view of Instruments.

00:27:44.940 --> 00:27:51.390
Now leaks is prompting
me for my password.

00:27:57.200 --> 00:27:58.040
And we'll stop it.

00:27:58.040 --> 00:28:00.990
And we can see our object
allocations are okay.

00:28:01.020 --> 00:28:02.380
There's no spikes.

00:28:02.420 --> 00:28:05.370
However, we do have some leaks.

00:28:05.560 --> 00:28:09.200
So if we go to the detail view
here and get some more information,

00:28:09.230 --> 00:28:12.440
we can get the stack trace for
where this object was allocated.

00:28:12.460 --> 00:28:14.080
And it's in the Dicey project.

00:28:14.180 --> 00:28:17.080
And as soon as I double click on this,
Dicey's going to bring us back into

00:28:17.080 --> 00:28:20.200
Xcode where the object was allocated.

00:28:20.350 --> 00:28:22.990
And it says counted set right here.

00:28:23.190 --> 00:28:27.230
If we search for it, it's only used twice
and it's never released.

00:28:27.410 --> 00:28:29.490
So we do have a leak.

00:28:30.110 --> 00:28:35.150
So if we go back to Instruments,
we can save this file and pass it back to

00:28:35.150 --> 00:28:39.370
the developer and they can use this file
to reproduce the issue and fix the issue.

00:28:39.500 --> 00:28:43.690
Later on, you can use the same file to
verify that the bug's been fixed.

00:28:43.880 --> 00:28:46.870
So as you can see,
the Accessibility API serves as

00:28:46.870 --> 00:28:50.410
a foundation not only for great
user technologies like voiceover,

00:28:50.410 --> 00:28:53.080
but great developer technologies as well.

00:28:53.160 --> 00:28:54.930
Back to you, James.

00:28:59.400 --> 00:29:02.290
Thanks a lot, Karl.

00:29:02.430 --> 00:29:07.190
So Karl has just showed us two
ways that you can take advantage

00:29:07.270 --> 00:29:11.140
of the accessibility information
that you put into your application.

00:29:11.420 --> 00:29:16.100
You can use it in your
own development process.

00:29:16.150 --> 00:29:19.880
Now, we've taken a look at sort
of the client side of things,

00:29:19.880 --> 00:29:23.770
but by now you've got to be wondering,
well, what do I, tell me what I need to

00:29:23.770 --> 00:29:24.930
do in my application.

00:29:24.940 --> 00:29:29.810
So, for starters,
every one of those UI elements

00:29:29.810 --> 00:29:35.860
that an assistive application
uses gets from that client API,

00:29:35.860 --> 00:29:41.320
maps back to some Cocoa object
in your application.

00:29:42.060 --> 00:29:46.730
It's a Cocoa object that
implements a 14-method protocol

00:29:46.840 --> 00:29:49.150
called NS Accessibility.

00:29:49.160 --> 00:29:54.160
And in fact, all of the heavy hitters
in the Cocoa framework,

00:29:54.270 --> 00:29:59.800
NS application, window, views, controls,
cells, they already implement this.

00:29:59.800 --> 00:30:04.530
And so there's already a pretty
good default level of accessibility

00:30:04.530 --> 00:30:07.300
already built into the frameworks.

00:30:07.300 --> 00:30:09.790
Now,

00:30:10.570 --> 00:30:13.180
What happens when an
assistive app makes this call?

00:30:13.260 --> 00:30:14.600
How does this all work?

00:30:14.630 --> 00:30:18.240
Well, the assistive application
calls those client APIs.

00:30:18.270 --> 00:30:22.200
That comes into our app kit's
accessibility infrastructure.

00:30:22.210 --> 00:30:27.200
And based on that UIElement
ref that was asked about,

00:30:27.200 --> 00:30:31.280
we map that back to the right
Cocoa object and we send it a

00:30:31.280 --> 00:30:35.660
method in the accessibility,
in the NS accessibility protocol.

00:30:35.700 --> 00:30:39.110
We get back the response,
we package it up and send it on back.

00:30:39.250 --> 00:30:42.740
So again, fairly standard client
server sort of thing.

00:30:42.760 --> 00:30:46.940
It's just that in your application,
you're always dealing with Cocoa objects.

00:30:46.950 --> 00:30:51.040
You're never dealing with those UIElement
refs that assistive apps deal with.

00:30:51.070 --> 00:30:55.490
You're just treating windows
and views like you always do.

00:30:56.800 --> 00:31:02.910
So a little more graphical representation
of application accessibility.

00:31:02.960 --> 00:31:06.970
It really is a very lightweight
representation of your UI.

00:31:07.100 --> 00:31:09.140
So we have your applications running.

00:31:09.140 --> 00:31:12.320
Maybe there's a window with a very
boring button in it with no title.

00:31:12.320 --> 00:31:14.060
Shame on that button.

00:31:14.060 --> 00:31:18.950
But anyway, and that hierarchy is exposed
in accessibility as an

00:31:19.070 --> 00:31:23.780
application with a window,
and that window has a button in it.

00:31:23.840 --> 00:31:25.740
It's very clean and simple.

00:31:25.740 --> 00:31:29.980
And in fact, from the window on down,
you'll see that it kind of

00:31:29.980 --> 00:31:32.040
maps to the view hierarchy.

00:31:32.210 --> 00:31:35.030
However, in Cocoa,
we know that the view hierarchy is

00:31:35.030 --> 00:31:37.280
a little more complicated than that.

00:31:37.460 --> 00:31:39.310
The application has some windows.

00:31:39.660 --> 00:31:42.650
The window has a frame view,
which has a content view.

00:31:43.000 --> 00:31:44.660
That view has a button in it.

00:31:44.830 --> 00:31:49.210
And then that button has a button cell,
which is really doing most

00:31:49.210 --> 00:31:51.030
of the work of a button.

00:31:51.510 --> 00:31:56.920
And so it's that button cell that
is reporting itself as a button,

00:31:56.980 --> 00:31:59.910
but there's all this
extra stuff in the way.

00:32:00.100 --> 00:32:04.840
We have a concept in accessibility
called ignored elements.

00:32:04.890 --> 00:32:09.250
In this case,
we don't report those items in between

00:32:09.290 --> 00:32:13.230
because to an accessibility client,
they're not terribly important.

00:32:13.330 --> 00:32:14.800
They're just noise.

00:32:14.970 --> 00:32:20.920
We only need what the user is seeing,
which is an app with a

00:32:20.920 --> 00:32:20.920
window and a button in it.

00:32:23.940 --> 00:32:28.920
Now, let's take a brief look at
this Accessibility Protocol.

00:32:28.920 --> 00:32:32.440
For all of the things that
an assistive app can ask for,

00:32:32.440 --> 00:32:37.100
as you might imagine, there's a method to
return that information.

00:32:37.210 --> 00:32:40.300
So for attributes,
we can send back a list of the names.

00:32:40.300 --> 00:32:43.420
We can send back the value
for a particular attribute,

00:32:43.420 --> 00:32:46.160
whether it's settable
and setting a value.

00:32:46.520 --> 00:32:50.110
You'll also encounter something
called parameterized attributes,

00:32:50.110 --> 00:32:51.940
and this is often a mystery to folks.

00:32:51.940 --> 00:32:54.880
For complicated elements
like text elements,

00:32:55.300 --> 00:32:59.280
sometimes we need more than
just give me your value.

00:32:59.280 --> 00:33:03.500
Sometimes to navigate through text,
we need to find out things like the

00:33:03.500 --> 00:33:05.920
bounds of a particular range of text.

00:33:05.920 --> 00:33:09.300
Parameterized attributes are
things that allow you to get

00:33:09.440 --> 00:33:12.580
more specific information,
pass in a parameter when

00:33:12.580 --> 00:33:14.080
you get back a value.

00:33:14.080 --> 00:33:16.500
Typically, you will not have to implement
the Accessibility Protocol.

00:33:16.500 --> 00:33:18.520
You can implement these methods, though.

00:33:18.760 --> 00:33:22.140
Actions, again,
things like pressing something,

00:33:22.180 --> 00:33:25.110
incrementing or decrementing a slider,

00:33:26.750 --> 00:33:29.720
An object can return its
list of action names,

00:33:29.720 --> 00:33:34.360
so things that it supports,
a description that can

00:33:34.370 --> 00:33:39.810
be presented to the user,
again localized,

00:33:39.810 --> 00:33:39.810
and then finally be told to
perform a particular action.

00:33:41.730 --> 00:33:43.220
And then hit testing.

00:33:43.220 --> 00:33:47.380
As we saw in accessibility
inspector moving the mouse around,

00:33:47.380 --> 00:33:52.050
accessibility inspector is able to get
what UI element was under the mouse.

00:33:52.200 --> 00:33:54.500
This is done by a hit testing method.

00:33:54.500 --> 00:33:58.280
We haven't seen it in a demo,
but we can also -- or an

00:33:58.280 --> 00:34:02.550
assistive app can also find
out what item has the UI focus.

00:34:02.570 --> 00:34:07.410
And this is done by implementing
the accessibility focused UI element

00:34:07.410 --> 00:34:09.680
to return the focused UI element.

00:34:09.680 --> 00:34:12.390
And finally,
we saw that things might be ignored.

00:34:12.910 --> 00:34:15.480
That's what this last item is.

00:34:15.480 --> 00:34:20.200
If it's yes, I am ignored,
that doesn't mean it's hidden and

00:34:20.200 --> 00:34:22.180
all of its children are hidden.

00:34:22.180 --> 00:34:24.620
It's not like an NS view being hidden.

00:34:24.620 --> 00:34:30.310
It just means that it is skipped in
the -- as the hierarchy is reported.

00:34:30.350 --> 00:34:34.360
Its children are reported as
if they were the children of

00:34:34.360 --> 00:34:37.250
the parent of the ignored item.

00:34:39.630 --> 00:34:42.230
And finally, notifications.

00:34:42.400 --> 00:34:45.360
So these are mostly automatic.

00:34:45.360 --> 00:34:48.660
NSWindow already sends them out
when the windows come and go.

00:34:48.750 --> 00:34:50.280
Sheets do the same thing.

00:34:50.370 --> 00:34:54.420
But if you write your own custom control,
especially if you are not

00:34:54.420 --> 00:34:57.670
going through object value,
if you override that,

00:34:57.850 --> 00:35:01.380
you need to let accessibility
know your value has changed.

00:35:01.380 --> 00:35:04.710
And if you have a custom
control that within the control

00:35:04.880 --> 00:35:09.030
you're updating the UI focus,
you need to let accessibility know that

00:35:09.160 --> 00:35:11.450
the focused UI element has changed.

00:35:11.490 --> 00:35:14.500
And so those are simple
strings that you send out.

00:35:14.530 --> 00:35:16.770
And it's one function call in AppKit.

00:35:16.940 --> 00:35:20.340
The element is the thing
reporting the notification,

00:35:20.380 --> 00:35:22.320
and the string is the string constant.

00:35:25.980 --> 00:35:28.580
Now that all said,
let's talk a little bit

00:35:28.580 --> 00:35:30.800
about default accessibility.

00:35:30.930 --> 00:35:36.760
So one of the things that I spend a
great deal of time doing is making sure

00:35:36.930 --> 00:35:43.000
that the built-in classes to AppKit,
so all the Cocoa widgets,

00:35:43.230 --> 00:35:47.170
have great default
accessibility built in.

00:35:47.170 --> 00:35:49.810
So that if you're using
standard controls,

00:35:49.810 --> 00:35:54.760
there's a lot less work that you need to
do to make your application accessible.

00:35:54.760 --> 00:36:00.200
And so we definitely recommend using
standard controls whenever possible.

00:36:00.200 --> 00:36:04.260
However, we are unfortunately
unable to read minds.

00:36:04.320 --> 00:36:08.580
We're working on it,
but we have nothing to announce today.

00:36:09.620 --> 00:36:14.000
So things like I have an
image in the user interface,

00:36:14.010 --> 00:36:19.220
the framework doesn't have any
idea what that image is for.

00:36:19.220 --> 00:36:22.600
Or you've written a custom
view or a custom control,

00:36:22.600 --> 00:36:26.080
the framework has no
idea what its purpose is,

00:36:26.110 --> 00:36:28.700
what its value should be reported as.

00:36:28.700 --> 00:36:32.750
And therefore, in those situations,
we need your help.

00:36:32.860 --> 00:36:38.840
So in past WWDCs, past conferences,
what we've typically done is we've

00:36:38.840 --> 00:36:43.200
written a sample application,
Dicey would be one example,

00:36:43.460 --> 00:36:47.100
and we just do it without
doing any accessibility.

00:36:47.100 --> 00:36:50.320
Then we walk you through how
you would make it accessible,

00:36:50.320 --> 00:36:52.490
and then we release the source code.

00:36:52.490 --> 00:36:56.600
And in fact, those pieces of source code,
I highly recommend them.

00:36:56.600 --> 00:37:02.600
They're available in your Snow Leopard
Seed in the Microsoft Office.

00:37:02.930 --> 00:37:08.360
The developer examples accessibility,
so please take a look at them.

00:37:08.490 --> 00:37:11.070
But the one problem with
sample code is that,

00:37:11.090 --> 00:37:12.800
well, it's sample code.

00:37:12.800 --> 00:37:16.360
Whoever wrote the sample code had a
particular thing they wanted to show,

00:37:16.360 --> 00:37:20.760
and they wrote the code specifically
to demonstrate something in particular.

00:37:20.790 --> 00:37:24.120
And so this year we wanted to
show a real-world example of

00:37:24.210 --> 00:37:26.660
making an application accessible.

00:37:26.660 --> 00:37:30.210
And so we thought,
what if we went and grabbed a

00:37:30.210 --> 00:37:32.700
Mac application out of the wild?

00:37:32.700 --> 00:37:36.610
And took a look at it and voiceover,
and then figured out what we

00:37:36.610 --> 00:37:38.200
might need to do to change it.

00:37:38.200 --> 00:37:40.740
And then hopefully at
the end of the session,

00:37:40.760 --> 00:37:45.030
show that same user interface again,
but with its accessibility

00:37:45.450 --> 00:37:46.840
issues corrected.

00:37:46.840 --> 00:37:54.720
Now, we had a hunch that possibly a hot
topic this week might be telephony.

00:37:55.060 --> 00:37:56.500
Just a slight hunch.

00:37:56.500 --> 00:38:02.120
And so a great Mac application
for making phone calls is,

00:38:02.120 --> 00:38:02.540
of course, Skype.

00:38:02.540 --> 00:38:04.150
Skype.

00:38:04.640 --> 00:38:09.500
So we called up the Skype folks
a little over a week ago.

00:38:09.500 --> 00:38:11.020
And we've been working with them.

00:38:11.040 --> 00:38:13.930
And what we'd like to do is show you,
one,

00:38:14.190 --> 00:38:18.050
the Skype that you can download today,
and show you just one

00:38:18.050 --> 00:38:21.440
little piece of the UI,
then talk you through how you

00:38:21.540 --> 00:38:24.870
would go about auditing just
a application out of the wild,

00:38:24.980 --> 00:38:29.550
your own app, auditing its accessibility,
and then addressing the

00:38:29.550 --> 00:38:30.820
issues that you find.

00:38:30.840 --> 00:38:33.900
And then at the end,
we'll show you the results.

00:38:34.000 --> 00:38:36.880
So I'd like to bring up Dean again.

00:38:38.090 --> 00:38:44.470
is going to walk us through just
a small piece of Skype's API,

00:38:44.500 --> 00:38:46.810
or UI.

00:38:48.580 --> 00:38:51.660
All right, so while I'm getting
sound back on my machine.

00:38:51.660 --> 00:38:58.440
So visually impaired Mac users are
no different than sighted users.

00:38:58.440 --> 00:39:05.460
We don't buy a program or a
computer just to use iTunes or Mail.

00:39:05.460 --> 00:39:08.600
We really do want to
use other applications.

00:39:10.950 --> 00:39:13.390
Just like sighted users,
you hear about things,

00:39:13.400 --> 00:39:16.690
you see things on the Internet,
and especially when they've

00:39:16.690 --> 00:39:18.360
got the 30-day free trial.

00:39:18.360 --> 00:39:20.600
And in the case of Skype, it's free.

00:39:20.600 --> 00:39:21.760
It's very exciting.

00:39:21.760 --> 00:39:23.110
You're like, man, let's download this.

00:39:23.120 --> 00:39:23.850
Let's check it out.

00:39:23.940 --> 00:39:28.350
I'm going to be able to use this program,
make some free phone calls,

00:39:28.350 --> 00:39:30.460
and it's all going to be good.

00:39:30.520 --> 00:39:35.010
So I've downloaded Skype.

00:39:35.250 --> 00:39:40.520
I suppose I should turn voiceover.

00:39:40.760 --> 00:39:42.190
Cover on.

00:40:21.800 --> 00:40:23.270
Welcome to Macintosh.

00:40:23.270 --> 00:40:24.270
VoiceOver is running.

00:40:24.270 --> 00:40:25.370
System Preferences.

00:40:25.370 --> 00:40:25.710
Window.

00:40:25.830 --> 00:40:26.980
Universal Access.

00:40:27.120 --> 00:40:28.580
Toolbar.

00:40:33.300 --> 00:40:34.740
Skype.

00:40:34.740 --> 00:40:35.940
Skype.

00:40:35.940 --> 00:40:37.140
Welcome to Skype.

00:40:37.210 --> 00:40:38.480
All right.

00:40:38.610 --> 00:40:40.260
So here's what I hear.

00:40:40.260 --> 00:40:41.260
Skype.

00:40:41.260 --> 00:40:42.730
Welcome to Skype.

00:40:42.870 --> 00:40:43.950
Image.

00:40:44.080 --> 00:40:44.480
Image.

00:40:44.780 --> 00:40:45.900
Wow, that was loud.

00:40:45.900 --> 00:40:46.760
Welcome to Skype.

00:40:46.760 --> 00:40:48.170
Skype.

00:40:48.290 --> 00:40:50.490
Not much there for me.

00:40:51.670 --> 00:40:56.350
Now you can see, of course,
what's going on, that there is a login

00:40:56.350 --> 00:40:59.010
screen and password.

00:40:59.140 --> 00:41:06.520
But for our voiceover users,
there's no way for me to know,

00:41:06.520 --> 00:41:08.680
unless I have someone
sighted come along and say,

00:41:08.680 --> 00:41:08.680
ah, you're actually in the login
screen and maybe try doing this.

00:41:08.840 --> 00:41:12.460
For a user who just downloaded it,
that's all they would get.

00:41:12.500 --> 00:41:15.860
Now, James is going to
magically make this work.

00:41:15.910 --> 00:41:17.270
James?

00:41:20.000 --> 00:41:29.400
[Transcript missing]

00:41:30.960 --> 00:41:37.480
For your Cocoa applications,
you've shipped them, they're out there.

00:41:37.530 --> 00:41:40.320
VoiceOver users are downloading them,
they're looking at them,

00:41:40.320 --> 00:41:43.980
they're interacting with them.

00:41:44.240 --> 00:41:46.350
If you've not thought
about accessibility,

00:41:46.350 --> 00:41:49.840
it's not that you've necessarily,
you've not done anything wrong,

00:41:49.840 --> 00:41:54.400
you just haven't thought about
accessibility and taken any steps

00:41:54.400 --> 00:41:57.180
to address accessibility issues.

00:41:57.200 --> 00:42:00.860
So what we're going to talk about now is,
all right, let's take this login screen.

00:42:00.920 --> 00:42:08.370
Let's see what will we do to get
it to be more accessible so that

00:42:08.370 --> 00:42:09.470
Dean would be incredibly happy with it.

00:42:10.070 --> 00:42:13.030
So an accessibility audit.

00:42:13.140 --> 00:42:15.880
Sounds very fancy,
but it's kind of simple.

00:42:15.880 --> 00:42:19.600
What you want to do is first use
the accessibility tools we provide.

00:42:19.600 --> 00:42:24.820
They're located in your developer tools,
developer applications.

00:42:24.820 --> 00:42:28.990
In the utilities,
there's a folder of accessibility tools,

00:42:28.990 --> 00:42:31.940
accessibility inspector and verifier.

00:42:31.940 --> 00:42:35.390
You can also turn on voiceover
as you saw me do on Dean's

00:42:35.390 --> 00:42:37.820
machine with an impromptu demo.

00:42:39.440 --> 00:42:47.760
To see what voiceover reports when
you put it over your application.

00:42:47.760 --> 00:42:49.920
So using those tools,
the other thing to do is to

00:42:49.940 --> 00:42:53.980
focus on areas that commonly
need additional accessibility.

00:42:53.980 --> 00:42:56.110
We noticed images was one area.

00:42:56.110 --> 00:42:59.410
We had that Skype logo
that just said image.

00:42:59.750 --> 00:43:00.190
Image.

00:43:00.190 --> 00:43:01.510
Kind of useless.

00:43:01.590 --> 00:43:05.720
Also, custom controls and views tend
to be hot spots where you need

00:43:05.720 --> 00:43:07.800
to do some accessibility work.

00:43:07.900 --> 00:43:12.880
It's good to start with the most
commonly used areas of your application.

00:43:13.000 --> 00:43:16.670
Those often tend to be the places where
you've done the most custom work as well,

00:43:16.800 --> 00:43:19.550
but they're also the meat
and potatoes of your app,

00:43:19.680 --> 00:43:21.360
so that's a good place to start.

00:43:21.400 --> 00:43:23.570
And proceed window by window.

00:43:23.930 --> 00:43:27.840
The thing to note about accessibility
is certainly we would love every

00:43:27.840 --> 00:43:35.510
application and every just part of every
application to be wonderfully accessible,

00:43:35.510 --> 00:43:36.070
but accessibility is a very,
very important part of the application.

00:43:36.070 --> 00:43:36.070
And so we're going to focus on that.

00:43:36.440 --> 00:43:40.760
Adding descriptions to images,
that's a great start.

00:43:40.820 --> 00:43:44.980
Every release, make more and more of your
application accessible if

00:43:45.010 --> 00:43:46.860
you can't do it all at once.

00:43:46.910 --> 00:43:52.580
Any work that you do is really,
really a fantastic extension

00:43:52.950 --> 00:43:55.100
of your application.

00:43:55.100 --> 00:44:02.060
So now to walk us through an
accessibility audit is Karl.

00:44:05.800 --> 00:44:08.000
Here's our Skype window.

00:44:08.000 --> 00:44:11.310
It exhibits three of the most common
issues you're gonna encounter when

00:44:11.320 --> 00:44:13.220
accessorizing your application.

00:44:13.770 --> 00:44:17.460
And the first issue is that
images need descriptions.

00:44:17.550 --> 00:44:19.700
So let's look at the
Skype logo over here,

00:44:19.770 --> 00:44:22.850
and we'll lock onto
it using Command + F7.

00:44:23.190 --> 00:44:24.860
We can see that it's an AX image.

00:44:24.860 --> 00:44:26.600
Let's roll this AX image.

00:44:26.740 --> 00:44:29.790
However, when we look at the description,
it's empty.

00:44:30.130 --> 00:44:32.740
Now, to an assistive
application like VoiceOver,

00:44:32.740 --> 00:44:37.620
it really needs this description so
it can describe it to users like Dean.

00:44:37.830 --> 00:44:40.780
So the next issue I'm going to
show you is related to the first.

00:44:41.090 --> 00:44:46.260
So just like images need descriptions,
controls need title elements.

00:44:46.340 --> 00:44:51.110
So let's look at this combo box
over here and we'll lock onto it.

00:44:51.670 --> 00:44:55.620
Now there's nothing in any of
these attributes that tells us

00:44:55.660 --> 00:44:57.560
that this is a username field.

00:44:57.560 --> 00:45:01.560
However, to sighted users,
we can see that this Skype name

00:45:01.560 --> 00:45:04.380
label directly above it should apply.

00:45:04.380 --> 00:45:09.490
However, to assistive applications,
it could be the Skype name element,

00:45:09.570 --> 00:45:13.020
or it could be this don't have
a Skype name button that's

00:45:13.020 --> 00:45:14.860
right below the combo box.

00:45:15.660 --> 00:45:19.860
So to eliminate any ambiguity,
you should provide a title element,

00:45:19.860 --> 00:45:23.080
an AX title UI element,
for all of your controls.

00:45:23.080 --> 00:45:25.700
And you can do this in Interface Builder
while you're building your application.

00:45:27.300 --> 00:45:30.870
So the final issue I'm going to show you
is that you need to make sure that your

00:45:30.870 --> 00:45:32.970
accessibility hierarchy is traversable.

00:45:33.130 --> 00:45:37.780
So let's go back to the
Skype logo and we'll lock onto it.

00:45:37.960 --> 00:45:42.900
So it's an AX image and its
parent is the Skype window.

00:45:42.900 --> 00:45:47.690
So let's go up to the window
and look at its children.

00:45:48.520 --> 00:45:51.000
And it only has seven children.

00:45:51.000 --> 00:45:54.940
The first three are the close, minimize,
and zoom buttons.

00:45:54.940 --> 00:45:58.000
The next one is the
welcome to Skype label.

00:45:58.230 --> 00:46:01.140
The one below it is an AX image, however,
it's the white background

00:46:01.270 --> 00:46:02.480
image and not the logo.

00:46:02.480 --> 00:46:05.320
And then we have the Skype window title.

00:46:05.530 --> 00:46:08.340
And finally, we have the grow area,
which is the control in the lower

00:46:08.340 --> 00:46:11.320
right-hand corner of the window
that used to resize the window.

00:46:11.320 --> 00:46:14.150
So the window knows
nothing about that logo,

00:46:14.260 --> 00:46:18.320
and therefore, VoiceOver will know
nothing about that logo.

00:46:18.430 --> 00:46:21.900
Because it traverses the
hierarchy from the root down.

00:46:22.020 --> 00:46:25.440
We can also see this issue
in the controls over here.

00:46:25.550 --> 00:46:28.520
So we'll lock back onto our combo box.

00:46:28.790 --> 00:46:32.600
And we'll go up to the parent,
which is an AX group.

00:46:32.660 --> 00:46:35.930
And as we recall from looking
at the children of the window,

00:46:35.940 --> 00:46:38.200
there is no AX group as a child.

00:46:38.310 --> 00:46:42.380
So you can use Accessibility Inspector to
find all these issues like I just did,

00:46:42.380 --> 00:46:44.530
or you can use VoiceOver.

00:46:44.630 --> 00:46:47.940
And when you do find these
issues and remedy these issues,

00:46:48.060 --> 00:46:51.250
your application will be much
more usable by a VoiceOver user

00:46:51.670 --> 00:46:53.760
and much more scriptable to boot.

00:46:53.870 --> 00:46:55.660
Back to you, James.

00:46:58.940 --> 00:47:03.050
Oh, give him a big round of applause.

00:47:03.280 --> 00:47:05.550
Great.

00:47:06.560 --> 00:47:09.920
Dean showed us kind of some
of the ramifications of

00:47:10.520 --> 00:47:12.780
accessibility from his perspective.

00:47:12.820 --> 00:47:17.060
It's also interesting to note
that if you were trying to write

00:47:17.320 --> 00:47:21.270
say an automated GUI script,
you would not be able to in that log in

00:47:21.270 --> 00:47:26.360
panel because the hierarchy problem would
prevent you from actually accessing the

00:47:26.360 --> 00:47:32.710
text fields which you probably would want
to be using in your automated script.

00:47:32.790 --> 00:47:36.600
So how do we deal with these issues?

00:47:36.600 --> 00:47:40.760
So the found issues are we came up
with images with no descriptions,

00:47:41.380 --> 00:47:44.800
elements like those text fields,
the combo box with no title,

00:47:45.010 --> 00:47:48.380
and we had a hierarchy issue,
some parent child issues.

00:47:48.450 --> 00:47:51.170
And who doesn't have parent child issues?

00:47:54.100 --> 00:47:56.490
So solutions.

00:47:56.630 --> 00:47:59.820
Two of the three actually have
relatively easy solutions,

00:47:59.840 --> 00:48:00.970
which is excellent.

00:48:01.130 --> 00:48:03.970
The third one, it's not a lot of code.

00:48:04.250 --> 00:48:06.630
Just conceptually,
you need to know why it's a problem

00:48:06.790 --> 00:48:10.190
and then what to do to fix it,
which we're going to tell you right here.

00:48:10.220 --> 00:48:14.850
So adding instance-specific
accessibility information.

00:48:14.850 --> 00:48:18.320
So certainly buttons and
text fields have a set of

00:48:18.370 --> 00:48:22.140
attributes that they always have,
like their role and their

00:48:22.140 --> 00:48:23.170
value and what have you.

00:48:23.180 --> 00:48:27.980
But we can also attach additional
attributes specific to each instance,

00:48:27.980 --> 00:48:31.720
and that's what we'll do to
give images descriptions.

00:48:31.720 --> 00:48:35.530
It's also what we'll do to associate
controls with their titles.

00:48:35.560 --> 00:48:39.740
And then for correcting
parent-child reporting issues.

00:48:40.370 --> 00:48:41.980
There's two things
that we might do there.

00:48:41.980 --> 00:48:45.850
We might override the
NS Accessibility Protocol.

00:48:45.990 --> 00:48:48.860
So when we're asked for
the value for our children,

00:48:48.860 --> 00:48:53.160
we might return a different set
of children than the default.

00:48:53.310 --> 00:48:58.350
Or, as might be the case here,
we might just refactor our view hierarchy

00:48:59.170 --> 00:49:03.920
in a different way such that the right
information is reported automatically.

00:49:04.070 --> 00:49:06.360
So let's look at the first set first.

00:49:06.360 --> 00:49:08.680
So descriptions.

00:49:09.000 --> 00:49:15.800
[Transcript missing]

00:49:15.980 --> 00:49:17.570
The first thing I want to talk
about is the convention for

00:49:17.590 --> 00:49:19.240
what those strings should be.

00:49:19.240 --> 00:49:23.830
They should be localized
because a user is able to switch

00:49:23.890 --> 00:49:26.900
VoiceOver into other languages.

00:49:27.020 --> 00:49:29.320
They should not include the role itself.

00:49:29.490 --> 00:49:33.000
Don't say this is the login button.

00:49:33.090 --> 00:49:38.600
Just call it login because VoiceOver is
going to use that role description we

00:49:38.600 --> 00:49:43.920
saw before and tack that on to the end
and then it will just sound stupid.

00:49:44.060 --> 00:49:45.530
Login button button.

00:49:45.830 --> 00:49:50.130
The way I think about these is if
this weren't an image for this button,

00:49:50.130 --> 00:49:52.740
if this were just a
button with a word on it,

00:49:52.740 --> 00:49:54.350
what would that word say?

00:49:54.730 --> 00:49:58.400
That's usually about the length
that you want for your description.

00:49:58.540 --> 00:50:01.230
And don't confuse this
with the role description.

00:50:01.470 --> 00:50:06.020
One of them is just telling the
role description is describing

00:50:06.390 --> 00:50:11.170
what kind of UI element this is,
whereas the description is

00:50:11.170 --> 00:50:11.780
more information specific
to this particular item.

00:50:13.010 --> 00:50:19.710
Now, those titles we want to know,
especially when a voiceover user

00:50:19.710 --> 00:50:22.050
is tabbing through the fields.

00:50:22.090 --> 00:50:24.480
They don't want to tab to a field.

00:50:24.480 --> 00:50:26.420
They don't know what's around.

00:50:26.420 --> 00:50:27.510
They have to go to the left.

00:50:27.730 --> 00:50:29.620
Is there a title over here?

00:50:29.620 --> 00:50:29.960
No.

00:50:29.960 --> 00:50:30.940
Let me go back over.

00:50:30.940 --> 00:50:31.980
Is it on top?

00:50:32.320 --> 00:50:36.920
They just want to land on the field when
you tab to it and have that described.

00:50:36.920 --> 00:50:38.580
And it's very easy to do that.

00:50:38.640 --> 00:50:43.680
We just connect the control to
its title in Interface Builder.

00:50:45.300 --> 00:50:49.410
And then one that we didn't
see come up in the login page,

00:50:49.600 --> 00:50:53.090
or the login window,
but is very important also,

00:50:53.090 --> 00:50:54.960
are linked UI elements.

00:50:55.020 --> 00:50:59.210
So, in fact, you saw Dean use this
in interface builder,

00:50:59.210 --> 00:51:01.160
excuse me, in iTunes.

00:51:01.160 --> 00:51:04.070
When he was in the source list,
he got to the iTunes store

00:51:04.190 --> 00:51:07.200
and then he was able to jump
to another part of the UI.

00:51:07.200 --> 00:51:12.570
By linking related UI elements,
it allows a voiceover user

00:51:12.700 --> 00:51:15.200
to move to related spots.

00:51:15.200 --> 00:51:18.700
Examples would be from the
search field down to the search

00:51:18.700 --> 00:51:20.200
results and then back up.

00:51:20.250 --> 00:51:24.550
Or from a source list to the stuff
on the -- that's being displayed

00:51:24.800 --> 00:51:27.200
for the selection as we see here.

00:51:27.200 --> 00:51:30.190
So how do we do all this magic?

00:51:30.950 --> 00:51:34.650
I'll actually go in reverse order,
because you can set this

00:51:34.650 --> 00:51:35.890
up in Interface Builder.

00:51:36.050 --> 00:51:38.990
You select a button,
select some UI element.

00:51:39.180 --> 00:51:43.900
In the Inspector,
you want to go to the Identity tab,

00:51:43.940 --> 00:51:47.290
and under the Accessibility
Identity section,

00:51:47.290 --> 00:51:49.500
you just type in the description.

00:51:49.690 --> 00:51:53.490
That's very difficult.

00:51:54.380 --> 00:51:57.180
Now,
for attaching things or relating things,

00:51:57.180 --> 00:52:01.500
it's a control drag,
just like any other connection

00:52:01.500 --> 00:52:06.040
that you make in Interface Builder,
except that this time we drag

00:52:06.040 --> 00:52:10.940
from the text field to its title,
and instead of picking an action or an

00:52:11.060 --> 00:52:15.730
outlet in the very same pop-up menu,
we just pick how we want it

00:52:15.730 --> 00:52:18.340
related for accessibility.

00:52:18.340 --> 00:52:21.760
In this case, this is a title,
so we would pick title from that

00:52:21.850 --> 00:52:23.770
list to make the connection.

00:52:23.770 --> 00:52:26.230
If we were linking, we'd pick link.

00:52:27.140 --> 00:52:31.240
Now, sometimes you're not building
your UI in Interface Builder.

00:52:31.240 --> 00:52:34.980
You have some things that
happen to be programmatic.

00:52:35.200 --> 00:52:38.300
Sometimes there's things you
can't access in Interface Builder,

00:52:38.300 --> 00:52:44.600
like the segments of a control,
of a segmented control,

00:52:44.600 --> 00:52:50.800
in which case we can also set these
attributes in code using Accessibility

00:52:50.800 --> 00:52:50.800
set override value for attribute.

00:52:51.850 --> 00:52:55.650
Now I wanted to talk a little bit
about these overridden values,

00:52:55.930 --> 00:52:58.730
because sometimes they cause confusion.

00:52:58.800 --> 00:53:01.320
People see that method and they think,
oh,

00:53:01.320 --> 00:53:04.060
I can just override everything with this.

00:53:04.190 --> 00:53:10.160
Now, we saw before how an attribute tends
or is how a request for an attribute's

00:53:10.310 --> 00:53:13.140
value is responded to by a Cocoa app.

00:53:13.250 --> 00:53:14.770
In comes the request.

00:53:14.770 --> 00:53:16.840
We map it to your Cocoa object.

00:53:17.250 --> 00:53:20.400
That accessibility
protocol method is called.

00:53:20.400 --> 00:53:22.590
The return value is sent back.

00:53:22.700 --> 00:53:28.420
When you add an overridden attribute,
either in Interface

00:53:28.420 --> 00:53:31.140
Builder or using that API,
it

00:53:31.620 --> 00:53:34.300
doesn't happen quite the same way.

00:53:34.330 --> 00:53:38.970
The request comes in and AppKit's
accessibility infrastructure is

00:53:39.030 --> 00:53:42.820
keeping track of that UI element ref
that somebody has a hold of in their

00:53:42.820 --> 00:53:47.570
assistive app and all of the overridden
attributes associated with it and

00:53:47.710 --> 00:53:51.580
when the request comes in we say,
"Oh, we have that overridden.

00:53:51.580 --> 00:53:55.690
Let me just send that back." And your
Cocoa object never finds out about it.

00:53:55.690 --> 00:53:57.510
We don't want to bother you.

00:53:57.510 --> 00:53:59.840
We already know how to deal with it.

00:53:59.840 --> 00:54:05.190
Now,
this leads to just a couple of caveats.

00:54:05.660 --> 00:54:10.240
The first is you should only use
overridden attributes for those instance

00:54:10.240 --> 00:54:12.560
attributes that I've talked about.

00:54:12.600 --> 00:54:17.780
Don't use, don't try to change the role
of your user interface element

00:54:18.210 --> 00:54:22.330
using an overridden attribute,
because your object doesn't

00:54:22.730 --> 00:54:24.320
know about that change.

00:54:24.330 --> 00:54:28.170
And the Cocoa frameworks often
are doing different things

00:54:28.240 --> 00:54:31.780
depending on when it asks itself,
what's my role,

00:54:31.800 --> 00:54:33.200
it'll do different things.

00:54:33.230 --> 00:54:36.580
If you're changing things with
overridden attributes that are

00:54:36.580 --> 00:54:41.140
so central to that Cocoa object,
but it doesn't know about it,

00:54:41.260 --> 00:54:43.800
just bad things ensue.

00:54:44.120 --> 00:54:48.180
The other thing to note about overwritten
attributes is that they are static.

00:54:48.180 --> 00:54:53.030
We set a value and that value
is what is returned until

00:54:53.180 --> 00:54:56.280
another value happens to be set.

00:54:59.460 --> 00:55:06.780
So that static portion can make dynamic
image descriptions a little bit tougher.

00:55:06.790 --> 00:55:11.640
So this is just the example
of some chat client.

00:55:11.710 --> 00:55:14.100
It has a status image.

00:55:14.190 --> 00:55:18.070
It's away, then you're idle,
then you're online.

00:55:18.070 --> 00:55:22.950
You don't want to, for this dynamic
information providing image,

00:55:22.950 --> 00:55:26.530
you don't want to put a description
on it that's called status

00:55:26.530 --> 00:55:28.760
because that's not very helpful.

00:55:29.480 --> 00:55:32.410
Okay, it's the status,
but I still don't know what it is.

00:55:32.660 --> 00:55:37.380
You want to provide the description
of what the status currently is.

00:55:37.390 --> 00:55:40.870
Now,
there's a few ways you could do that.

00:55:40.870 --> 00:55:40.870
You could

00:55:41.740 --> 00:55:46.260
Use an overridden attribute and
every time that you change the image,

00:55:46.270 --> 00:55:51.080
you could re-override the
value with the new description.

00:55:51.090 --> 00:55:52.540
And that's not so bad.

00:55:52.590 --> 00:55:56.440
However, if that happens to be in a
table or an outline view,

00:55:56.450 --> 00:56:00.700
that gets very difficult because
in tables and outline views,

00:56:00.750 --> 00:56:04.190
accessibility is keeping track
of overridden attributes based

00:56:04.190 --> 00:56:05.720
on what row things are in.

00:56:05.830 --> 00:56:08.950
So if somebody resorts everything,
then you have to redo

00:56:08.950 --> 00:56:10.420
all your descriptions.

00:56:10.420 --> 00:56:11.700
It's kind of a mess.

00:56:13.310 --> 00:56:15.470
So we're thinking, well,
what can we do to make

00:56:15.470 --> 00:56:19.340
this a little bit easier,
or actually a lot easier?

00:56:19.370 --> 00:56:22.800
And we're thinking, well,
strings don't have this problem,

00:56:22.830 --> 00:56:26.980
because a string essentially carries its
own accessibility information with it.

00:56:27.120 --> 00:56:30.000
Its value is its value.

00:56:30.020 --> 00:56:36.110
You set a string and we just
pull the value out of the string

00:56:36.110 --> 00:56:36.110
because it is a description.

00:56:37.100 --> 00:56:40.400
So we thought, why don't we do the
same thing with images?

00:56:40.490 --> 00:56:44.720
So what we've added in Snow Leopard
and is in your seed is an

00:56:44.720 --> 00:56:48.000
accessibility description on NSImage.

00:56:48.140 --> 00:56:52.990
And the way it works is pretty simple.

00:56:52.990 --> 00:56:52.990
You

00:56:53.350 --> 00:56:58.640
Take a localized string and you set the
accessibility description on an NS image.

00:56:58.640 --> 00:57:02.130
And now,
any time you set that image in any

00:57:02.210 --> 00:57:07.610
kit class that displays images,
so image cells, button cells, the like,

00:57:07.890 --> 00:57:14.040
that description that you set on
the image just comes on through.

00:57:14.040 --> 00:57:19.560
That makes it a great deal easier.

00:57:20.360 --> 00:57:22.570
As I said earlier,
we can't read your mind,

00:57:22.570 --> 00:57:25.790
but sometimes we can do a little
bit better than we have been.

00:57:25.930 --> 00:57:31.230
And one thing that was introduced
in Leopard were named system images.

00:57:31.250 --> 00:57:34.700
So in NSImage,
you'll see a long list of common images

00:57:34.700 --> 00:57:40.300
that you can use in your applications and
that we use in our system applications.

00:57:40.300 --> 00:57:43.320
We thought, well,
now that we have the ability to

00:57:43.330 --> 00:57:47.220
put a description on an image,
why don't we provide

00:57:47.220 --> 00:57:49.300
a default description?

00:57:49.300 --> 00:57:53.800
And so if you use these named
system images in your application,

00:57:53.800 --> 00:57:57.800
you will get a default description.

00:57:59.760 --> 00:58:03.440
And then thinking a little bit more,
okay, so image description,

00:58:03.440 --> 00:58:04.790
we have it down to one line of code.

00:58:04.790 --> 00:58:07.310
You can call on an image.

00:58:07.450 --> 00:58:11.080
Could we get it down
to zero lines of code?

00:58:11.160 --> 00:58:14.900
Does anybody want any
guesses on whether we could?

00:58:14.900 --> 00:58:18.200
I think yes would be a yes.

00:58:18.200 --> 00:58:20.190
We added string file support.

00:58:20.190 --> 00:58:24.510
And because we noticed that what people
do is they have a bunch of images

00:58:24.510 --> 00:58:29.280
in their app package and they use
image name to bring that in and then

00:58:29.280 --> 00:58:33.630
they stick it in a button or stick
it in some spot in the user interface.

00:58:33.630 --> 00:58:40.510
So, okay, let's allow folks to add a
specially named strings file,

00:58:40.720 --> 00:58:43.700
accessibility image descriptions.

00:58:43.700 --> 00:58:47.830
The keys in that strings file
are the names of the images.

00:58:47.830 --> 00:58:51.650
The values are the
descriptions you want to use.

00:58:51.650 --> 00:58:56.420
And if you pull in an image,
set it in a user interface element,

00:58:56.420 --> 00:58:59.000
we'll automatically pick
up that description.

00:59:04.920 --> 00:59:07.140
So what's the search path here?

00:59:07.220 --> 00:59:10.300
We'll always use a
programmatically set string first.

00:59:10.450 --> 00:59:13.580
Then our first call to
accessibility description.

00:59:13.650 --> 00:59:16.820
We're going to see if you've
provided one in the strings file.

00:59:17.120 --> 00:59:22.200
If not, we'll use the default framework
description if it's present.

00:59:22.200 --> 01:00:31.800
[Transcript missing]

01:00:34.460 --> 01:00:40.300
And then the last thing that we saw
were parent-child relationship issues.

01:00:40.810 --> 01:00:47.730
And in an accessibility
hierarchy in the tree,

01:00:47.730 --> 01:00:47.730
a parent can have multiple children

01:00:47.900 --> 01:00:54.040
and each child has one and only
one parent and the children,

01:00:54.050 --> 01:00:55.280
they have to match.

01:00:55.350 --> 01:00:58.690
You can't have one thing thinking
somebody is its parent and this

01:00:58.690 --> 01:01:00.800
other thing thinks it's its child.

01:01:00.800 --> 01:01:08.400
It gets, it's like a, yeah,
it's like a bad episode of the

01:01:08.400 --> 01:01:08.400
Jerry Springer show at that case.

01:01:09.900 --> 01:01:14.180
So why do we get into
these parent-child issues?

01:01:14.230 --> 01:01:14.970
Not very Dr.

01:01:15.120 --> 01:01:17.980
Phil here, more accessibility related.

01:01:18.020 --> 01:01:22.980
If we take a look at what was
going on in that Skype login panel,

01:01:23.620 --> 01:01:29.510
It was this issue, is that there is a,
sometimes you have a control,

01:01:29.510 --> 01:01:32.990
an NS control,
and NS controls often use a

01:01:33.370 --> 01:01:38.280
cell to do their drawing and
event handling or tracking.

01:01:38.280 --> 01:01:41.500
We call those single-celled NS controls.

01:01:41.500 --> 01:01:47.980
And those controls are expecting to
report their cell as their child.

01:01:47.980 --> 01:01:51.830
The control itself is ignored,
and it's the child that reports

01:01:51.830 --> 01:01:53.580
its accessibility information.

01:01:53.600 --> 01:01:57.860
The control isn't reporting
its subviews at all.

01:01:57.910 --> 01:02:00.600
But in this case,
we had an NS image view.

01:02:00.600 --> 01:02:04.700
The image view itself is ignored as
far as accessibility is concerned.

01:02:04.770 --> 01:02:09.410
It reports its image cell as a child,
but that image cell doesn't

01:02:09.410 --> 01:02:11.790
know about its views,
subviews.

01:02:11.810 --> 01:02:13.490
It doesn't know it should report them.

01:02:13.840 --> 01:02:16.810
And in fact,
it really shouldn't report them

01:02:16.970 --> 01:02:21.450
because it's a little odd to
have subviews in an image view.

01:02:21.670 --> 01:02:24.840
And so there's a few solutions
that we could -- or approaches

01:02:24.900 --> 01:02:26.660
we could take for a solution.

01:02:26.660 --> 01:02:32.280
The first would be to subclass
NSImageView and return both the cell

01:02:32.620 --> 01:02:37.130
but also our subviews as children,
in which case they would all show up.

01:02:37.130 --> 01:02:40.530
We'd put them all into one big
happy array and send it back.

01:02:40.530 --> 01:02:46.340
Or the other thing we might do
is refactor our UI a little bit.

01:02:46.340 --> 01:02:49.750
So we might make a custom
view that displays an image.

01:02:49.810 --> 01:02:54.860
We're going to see in a moment
maybe instead of using an image view

01:02:54.970 --> 01:02:57.840
that displays a white background,
maybe just a custom

01:02:57.940 --> 01:02:59.880
view that draws whites.

01:03:00.050 --> 01:03:01.410
It's ignored itself.

01:03:01.630 --> 01:03:04.360
It already reports its subviews.

01:03:04.360 --> 01:03:06.250
Possibly refactoring is a better way.

01:03:07.860 --> 01:03:12.740
So we went through and saw the issues.

01:03:12.800 --> 01:03:15.600
Here are the ways we
can solve those issues.

01:03:15.620 --> 01:03:17.780
Now let's take a look at...

01:03:18.920 --> 01:03:20.240
The results.

01:03:20.280 --> 01:03:24.230
Now what we're about
to show is just a very,

01:03:24.230 --> 01:03:30.950
very early peek at the accessibility
directions of Skype for the Mac.

01:03:33.510 --> 01:03:36.490
VoiceOver on Skype, Window, Skype,
Skype Name, Combo Box.

01:03:36.500 --> 01:03:41.080
All right,
so we've got the Skype up here and take

01:03:41.190 --> 01:03:44.940
two on this for me as the new Skype user.

01:03:44.940 --> 01:03:46.040
Welcome to Skype.

01:03:46.100 --> 01:03:47.040
Oh, that's nice.

01:03:47.040 --> 01:03:48.700
Skype Name.

01:03:48.700 --> 01:03:50.830
Skype Name, Combo Box.

01:03:50.840 --> 01:03:52.260
Don't have a Skype Name?

01:03:52.340 --> 01:03:53.400
Button.

01:03:53.400 --> 01:03:55.000
Password.

01:03:55.000 --> 01:03:57.300
Password, secure edit text.

01:03:57.460 --> 01:03:58.640
Forgot your password?

01:03:58.690 --> 01:03:59.590
Button.

01:03:59.660 --> 01:04:01.800
Remember password, uncheck checkbox.

01:04:01.880 --> 01:04:04.100
So you can hear it's
a lot more accessible,

01:04:04.100 --> 01:04:05.100
said a lot more things.

01:04:05.100 --> 01:04:09.380
I as a user getting a lot more
information out of it than it was before.

01:04:09.500 --> 01:04:11.500
So great job.

01:04:11.540 --> 01:04:16.060
Also, I don't know if you've noticed,
through all of my demos,

01:04:16.110 --> 01:04:18.890
I've been using the keyboard exclusively.

01:04:18.990 --> 01:04:22.160
So when you make your
apps accessible or usable,

01:04:22.190 --> 01:04:25.600
I know it's easy to think
about making a rich graphical

01:04:25.600 --> 01:04:29.520
interface and mouse driven,
but think about accessibility and

01:04:29.570 --> 01:04:33.000
those who may not be able to use a
mouse may have to use a keyboard.

01:04:33.050 --> 01:04:36.030
Maybe you'd have to use some
alternative input devices

01:04:36.120 --> 01:04:38.800
to control your application.

01:04:38.800 --> 01:04:43.540
The last thing that I wanted to say is,
as James mentioned,

01:04:43.540 --> 01:04:47.920
VoiceOver is included on each
computer shipping Leopard

01:04:48.370 --> 01:04:50.060
and upcoming Snow Leopard.

01:04:50.200 --> 01:04:53.140
So for you to check your
accessibility really fast,

01:04:53.140 --> 01:04:58.570
it's just a matter of turning
VoiceOver on and just navigating the UI.

01:04:58.580 --> 01:05:04.580
And that will give you a pretty good
sense of what someone visually impaired

01:05:04.670 --> 01:05:07.880
would experience with your application.

01:05:07.930 --> 01:05:08.640
Thank you.

01:05:08.650 --> 01:05:09.520
Thanks.

01:05:09.540 --> 01:05:14.410
Thanks, Dean.

01:05:16.650 --> 01:05:22.040
Actually, let's give Dean and Karl a
big hand for the demos today.

01:05:22.040 --> 01:05:23.120
Thank you, guys.

01:05:27.200 --> 01:05:30.270
So to summarize,
application accessibility

01:05:30.280 --> 01:05:31.630
affects your users.

01:05:31.980 --> 01:05:35.730
It also can affect you and
your development process.

01:05:36.700 --> 01:05:41.310
So absolutely encourage you,
exhort you to audit your application

01:05:41.310 --> 01:05:43.650
for common accessibility needs.

01:05:43.930 --> 01:05:47.540
Images without descriptions.

01:05:47.600 --> 01:05:48.290
Take a little time.

01:05:48.290 --> 01:05:49.950
Go through the images on your app.

01:05:50.080 --> 01:05:52.990
You can drop in one of
these accessibility image

01:05:53.050 --> 01:05:54.880
description strings files.

01:05:55.180 --> 01:05:59.980
Don't even need to touch a line of code
or even a nib file to get that done.

01:06:00.010 --> 01:06:01.940
Connecting controls to their labels.

01:06:01.940 --> 01:06:06.350
Again, a simple control drag
with an interface builder.

01:06:06.620 --> 01:06:10.000
Looking at hierarchy issues,
which can be a little more complex,

01:06:10.010 --> 01:06:13.050
as well as custom views and controls.

01:06:13.290 --> 01:06:17.180
And start making your
applications accessible.

01:06:17.780 --> 01:06:22.460
Now, for more information,
our evangelist is Derek Horn.

01:06:22.520 --> 01:06:26.620
I highly recommend if you are looking
at making your application accessible,

01:06:26.750 --> 01:06:30.880
which I very much hope that you are,
is to join the Accessibility

01:06:30.890 --> 01:06:32.260
Dev Mailing List.

01:06:32.260 --> 01:06:34.400
You can go to lists.apple.com.

01:06:34.400 --> 01:06:35.650
You'll find it on the list there.

01:06:35.660 --> 01:06:39.370
But certainly all of us working
on accessibility at Apple,

01:06:39.560 --> 01:06:42.320
we read that list,
we respond on that list.

01:06:42.420 --> 01:06:47.260
It's a great place to get your questions
answered and your answers questioned.

01:06:49.970 --> 01:06:56.020
The documentation,
there's the accessibility documentation.

01:06:56.050 --> 01:06:59.230
I would also recommend taking a
look at the App Kit release notes.

01:06:59.400 --> 01:07:02.640
There are a number of minor changes
we've made in App Kit that are in

01:07:02.640 --> 01:07:06.380
your Snow Leopard Seed that we didn't
talk about in the presentation.

01:07:07.340 --> 01:07:09.300
Finally, related sessions.

01:07:09.460 --> 01:07:14.670
On Thursday, we'll be doing a chunk of
accessibility as part of

01:07:14.800 --> 01:07:16.770
polishing your Cocoa application.

01:07:16.960 --> 01:07:20.090
There you'll see if I have a custom view,
what do I need to do

01:07:20.150 --> 01:07:21.340
to make it accessible.

01:07:21.500 --> 01:07:26.520
And then a few other sessions where
some accessibility will come up,

01:07:26.690 --> 01:07:28.930
but I'm not allowed to say how.

01:07:29.500 --> 01:07:31.080
Some labs.

01:07:31.140 --> 01:07:36.230
Today, 3:30 to 6:15 in Mac Lab A is
the Accessibility Lab.

01:07:36.680 --> 01:07:40.560
Please bring your applications,
your accessibility questions.

01:07:40.580 --> 01:07:41.640
I'll be there.

01:07:41.640 --> 01:07:43.380
Dean and Karl will be there.

01:07:43.390 --> 01:07:45.560
Members of the
VoiceOver team will be there,

01:07:45.680 --> 01:07:48.560
all ready to answer your
accessibility questions.

01:07:48.640 --> 01:07:52.560
I also mentioned at the
Cocoa Open Lab on Thursday at noon,

01:07:52.560 --> 01:07:56.550
I certainly will be there to
answer other Cocoa questions,

01:07:56.650 --> 01:07:59.400
but also accessibility questions.