WEBVTT

00:00:23.590 --> 00:00:26.380
So welcome to Introduction to
Mac and iPhone Development,

00:00:26.380 --> 00:00:28.800
and welcome to our sold-out event, WWDC.

00:00:28.800 --> 00:00:30.960
So before I get started,
I'd kind of like to

00:00:30.960 --> 00:00:32.280
get an idea for myself.

00:00:32.370 --> 00:00:35.900
How many of you are here at
WWDC for the first time ever?

00:00:37.410 --> 00:00:38.850
Oh, awesome.

00:00:38.890 --> 00:00:42.710
It's fantastic to see so many
new developers at the conference.

00:00:42.900 --> 00:00:45.930
So one hour really isn't much time
to go over all the concepts needed to

00:00:45.930 --> 00:00:48.230
develop iPhone apps and Mac OS X apps.

00:00:48.230 --> 00:00:51.460
So this is going to be a bit
of a whirlwind technology tour.

00:00:51.460 --> 00:00:53.300
And hopefully as you see
things that you like,

00:00:53.300 --> 00:00:56.370
you'll be able to remember them and
follow up on them later on in the week.

00:00:58.100 --> 00:00:58.810
So I'm Deric Horn.

00:00:58.950 --> 00:01:01.100
I'm the application
technologies evangelist.

00:01:01.150 --> 00:01:04.370
And really what that means is I'm
responsible for the promotion and

00:01:04.370 --> 00:01:07.070
adoption of our key technologies,
our key application

00:01:07.070 --> 00:01:08.980
technologies by our developers.

00:01:08.980 --> 00:01:11.670
And then I'm also a voice for
the developers back inside

00:01:11.750 --> 00:01:14.560
of Apple Engineering so I can
help escalate issues and to

00:01:14.560 --> 00:01:17.910
make sure that we're delivering
what you guys are dependent on.

00:01:20.370 --> 00:01:23.540
So we released Mac OS X back in 2001,
and since then we've had

00:01:23.540 --> 00:01:24.740
these steady updates.

00:01:24.840 --> 00:01:29.470
And I think Leopard that we released last
October was an amazing release with huge

00:01:29.470 --> 00:01:31.600
user features and developer features.

00:01:31.600 --> 00:01:35.140
So everyone's been really busy, but,
you know, why stop there?

00:01:35.140 --> 00:01:37.590
We released an entirely new
platform to develop for,

00:01:37.780 --> 00:01:39.520
and that's the iPhone, of course.

00:01:39.540 --> 00:01:45.750
So I just wanted to say thank you guys
for making the beta SDK such a success.

00:01:46.460 --> 00:01:48.920
And I also wanted to thank those
hundreds of thousands of other people

00:01:48.920 --> 00:01:51.850
that downloaded the SDK that couldn't
get their tickets for the conference.

00:01:53.610 --> 00:01:56.690
So, I'm going to start off today by
talking a little bit about the

00:01:56.740 --> 00:01:59.610
architecture of Mac OS X and iPhone,
a little bit about the development

00:01:59.610 --> 00:02:01.260
frameworks to put things in perspective.

00:02:01.260 --> 00:02:04.470
And then I think any time you
develop for a new platform,

00:02:04.470 --> 00:02:08.840
and I know this when I was brought
into the iPhone development program,

00:02:08.840 --> 00:02:11.620
there are really two fundamental
questions that you have.

00:02:11.660 --> 00:02:15.970
One, I just really want to know
how do I get my code called?

00:02:15.970 --> 00:02:17.930
You know,
how do I put a button on the screen

00:02:17.930 --> 00:02:19.460
and have it call Hello World?

00:02:19.800 --> 00:02:21.480
So, we're going to start off by
talking a little bit about

00:02:21.560 --> 00:02:23.900
those development fundamentals,
the tools, the language,

00:02:23.900 --> 00:02:25.700
and the frameworks that you're
going to use to write applications.

00:02:25.700 --> 00:02:29.140
And then I think that the second
fundamental question you have is what

00:02:29.140 --> 00:02:33.440
are those available technologies and how
do I integrate them into my application?

00:02:33.450 --> 00:02:36.520
I mean, how hard is it to take something
like core location and integrate

00:02:36.540 --> 00:02:37.890
that into my application?

00:02:37.900 --> 00:02:40.660
So, along the way,
we'll have several demos.

00:02:40.660 --> 00:02:43.040
We've got some sample code
associated with this session

00:02:43.040 --> 00:02:44.400
on the attendees' website.

00:02:44.400 --> 00:02:47.090
And hopefully, I'll be able to give you a
little bit of insight as to which

00:02:47.090 --> 00:02:48.490
sessions you should follow up on.

00:02:50.590 --> 00:02:53.650
So, I'm going to show you a little bit of
the standard architecture diagram you've

00:02:53.670 --> 00:02:56.110
probably already seen a few times today,
but at the base we have

00:02:56.110 --> 00:02:57.950
the Unix and kernel,
and this is at the bottom of

00:02:57.950 --> 00:03:00.230
both the iPhone and Mac OS X,
and this really is Unix.

00:03:00.320 --> 00:03:02.910
An engineer walked into my office,
I think, last week and he said, Deric,

00:03:02.950 --> 00:03:05.060
when you say that Unix is on the iPhone,
what do you mean?

00:03:05.100 --> 00:03:05.940
And it truly is.

00:03:05.940 --> 00:03:08.560
So, for instance,
I wrote a little application about a

00:03:08.560 --> 00:03:12.400
month ago to test the file system access,
you know, what files we have read-write

00:03:12.400 --> 00:03:14.100
access to on the device itself.

00:03:14.180 --> 00:03:17.840
That was all using straight POSIX, Fopen,
Fread, Fwrite type calls,

00:03:17.840 --> 00:03:20.300
so that could run on a Solaris machine,
Mac OS X,

00:03:20.300 --> 00:03:22.160
and runs perfectly on the iPhone.

00:03:22.160 --> 00:03:24.400
And then above that we
have our core frameworks.

00:03:24.440 --> 00:03:26.440
These are typically
our non-GUI frameworks,

00:03:26.450 --> 00:03:28.940
like core foundation,
foundation type frameworks.

00:03:28.940 --> 00:03:31.620
And above that we've got a
rich set of media frameworks.

00:03:31.620 --> 00:03:35.080
And then finally,
you see where the architecture

00:03:35.090 --> 00:03:37.560
begins to diverge,
and this is the application

00:03:37.620 --> 00:03:38.720
development frameworks.

00:03:38.720 --> 00:03:42.240
On Mac OS X you develop for Cocoa,
and on the iPhone for Cocoa Touch.

00:03:43.360 --> 00:03:46.060
And then the glorious part,
where your applications get to

00:03:46.120 --> 00:03:50.060
participate up at the native application
layer where you're going to see Safari,

00:03:50.060 --> 00:03:54.240
mobile Safari, and hopefully your app
and your mobile app.

00:03:54.700 --> 00:03:57.350
But really, I think what's more important
about this diagram is that

00:03:57.350 --> 00:04:00.690
since the beginning of Mac OS X,
we've really tried to keep the operating

00:04:00.690 --> 00:04:04.250
system very nimble and keep these
dependencies in a downward direction

00:04:04.620 --> 00:04:07.560
so that we can now start to integrate
and adopt new technologies quickly

00:04:07.560 --> 00:04:09.190
and integrate them into the system.

00:04:09.200 --> 00:04:11.340
So on other platforms,
you may have to untangle a

00:04:11.390 --> 00:04:13.680
bunch of spaghetti code in
order to take one technology

00:04:13.770 --> 00:04:15.420
out and replace it with another.

00:04:15.420 --> 00:04:18.140
But this type of architecture,
we take very seriously within

00:04:18.420 --> 00:04:21.500
Apple so we can go ahead and move the
operating system and the development

00:04:21.570 --> 00:04:22.880
frameworks forward very quickly.

00:04:22.880 --> 00:04:22.880
Deric Horn, Larry Coopet

00:04:24.190 --> 00:04:26.440
So I want to touch a little
bit about what the application

00:04:26.490 --> 00:04:27.390
development frameworks are.

00:04:27.390 --> 00:04:30.070
And basically,
if you've come to WWDC to learn about

00:04:30.070 --> 00:04:33.490
how to do iPhone application development
or you've come to WWDC to learn

00:04:33.550 --> 00:04:36.230
about how to do Mac OS X development,
you're going to leave knowing

00:04:36.360 --> 00:04:37.970
how to develop on both platforms.

00:04:37.970 --> 00:04:40.880
And that's because they really
share about 90% in common.

00:04:40.880 --> 00:04:43.110
So for instance,
when you develop for Mac OS X,

00:04:43.110 --> 00:04:45.250
you're going to develop
for the foundation,

00:04:45.250 --> 00:04:47.860
non-GUI portion,
and you're going to use AppKit that's

00:04:47.910 --> 00:04:50.760
going to provide all the user interface,
your event system,

00:04:50.790 --> 00:04:53.100
and all that whole user experience level.

00:04:53.740 --> 00:04:55.490
Well, on Cocoa Touch,
we have that exact same

00:04:55.490 --> 00:04:56.790
foundation also available.

00:04:56.790 --> 00:04:59.370
And then finally,
we're introducing UIKit,

00:04:59.370 --> 00:05:01.360
and that's analogous to AppKit.

00:05:01.360 --> 00:05:04.340
A lot of the same coding
concepts are based on AppKit.

00:05:04.340 --> 00:05:06.940
It's very similar,
but it's designed specifically

00:05:07.020 --> 00:05:08.290
with the iPhone in mind.

00:05:08.320 --> 00:05:09.470
So what's the difference between the two?

00:05:09.980 --> 00:05:11.660
So at this time,
I would like to welcome a

00:05:11.660 --> 00:05:15.380
colleague of mine upstage,
and he is probably the person I know

00:05:15.380 --> 00:05:18.140
that has had his fingers in more
code than anybody else I've ever met.

00:05:18.240 --> 00:05:20.770
I'd like to welcome Larry Coope up here.

00:05:25.200 --> 00:05:26.200
Thanks, Deric.

00:05:26.200 --> 00:05:28.890
Thanks a lot.

00:05:29.000 --> 00:05:33.590
So, as Deric mentioned,
I work in worldwide developer relations,

00:05:33.590 --> 00:05:38.890
helping other developers bring
their applications to the Mac.

00:05:38.890 --> 00:05:38.890
So,

00:05:39.500 --> 00:05:41.220
I want to tell a story real quick.

00:05:41.310 --> 00:05:48.140
Every year a friend of mine comes to
WWDC and he complains how Apple makes

00:05:48.140 --> 00:05:50.270
him learn all these new things.

00:05:50.280 --> 00:05:51.570
And I tease him every year.

00:05:51.640 --> 00:05:55.160
I say, yes, if it wasn't for Apple,
you would never learn anything new.

00:05:55.160 --> 00:05:58.780
So he sent me this email with this quote,
and I thought it was appropriate

00:05:58.900 --> 00:06:02.160
as you guys are bombarded by the
amount of information this week,

00:06:02.250 --> 00:06:05.500
which is, learning is not compulsory,
but neither is survival.

00:06:05.520 --> 00:06:10.070
So keep that in mind this week when
you're going through all your content.

00:06:10.120 --> 00:06:14.470
So as Deric said,
we're going to talk briefly about tools,

00:06:14.470 --> 00:06:18.500
language,
and developing for Mac OS X and iPhone.

00:06:20.270 --> 00:06:20.830
So tools.

00:06:20.860 --> 00:06:23.830
As you heard this morning,
Xcode is our IDE.

00:06:23.830 --> 00:06:26.370
And like Deric said,
how do I get started?

00:06:26.440 --> 00:06:26.930
This is it.

00:06:26.960 --> 00:06:30.560
This is where everything begins
and you're going to build all

00:06:30.560 --> 00:06:32.780
your applications based on this.

00:06:32.780 --> 00:06:36.070
The cool thing about Xcode
and our tools is they're built

00:06:36.070 --> 00:06:37.910
on industry standard tools.

00:06:37.910 --> 00:06:41.360
GCC, GDB, LD,
including Dtrace for optimization.

00:06:41.360 --> 00:06:43.980
So these are tools you're
already familiar with.

00:06:44.130 --> 00:06:46.050
You guys already know this stuff.

00:06:47.500 --> 00:06:52.000
Next, about Xcode is,

00:06:52.590 --> 00:06:54.180
Always start from a template.

00:06:54.180 --> 00:06:58.240
As developers, people say, well,
I've got this complicated build system.

00:06:58.240 --> 00:07:01.160
You really need to start
Xcode with a template.

00:07:01.160 --> 00:07:03.970
I know it's obvious, but believe me,
a lot of people won't do it.

00:07:04.060 --> 00:07:06.120
Drag your code in.

00:07:06.120 --> 00:07:10.260
And what's interesting about the tools
that differ from other platforms,

00:07:10.380 --> 00:07:13.280
it's tight integration
with Interface Builder.

00:07:13.930 --> 00:07:14.280
Okay?

00:07:14.280 --> 00:07:15.920
And why is that interesting?

00:07:16.180 --> 00:07:18.460
Because Interface Builder
is not just a UI editor.

00:07:18.460 --> 00:07:21.450
As you've seen all day today, right,
it's an integral part of

00:07:21.450 --> 00:07:22.580
your development system.

00:07:22.580 --> 00:07:28.090
And its tight integration with
Xcode lets it know about your code.

00:07:28.130 --> 00:07:29.820
Why is that important?

00:07:29.820 --> 00:07:33.800
You're going to let IB do the dirty
work and a lot of the heavy lifting.

00:07:33.820 --> 00:07:37.920
Instantiation of UI objects
as well as your class objects,

00:07:37.920 --> 00:07:40.060
which are tightly coupled.

00:07:40.060 --> 00:07:40.620
Okay?

00:07:40.620 --> 00:07:42.300
So,

00:07:44.240 --> 00:07:47.560
The other thing I want to say about
Xcode is that it's very flexible.

00:07:47.560 --> 00:07:52.600
If you do have a complex
enterprise-based build system,

00:07:52.600 --> 00:07:53.890
and boy, I need to do this.

00:07:54.020 --> 00:07:56.220
As Deric said,
we've got Unix under the hood, okay?

00:07:56.220 --> 00:08:00.600
I can script this thing any way I want,
whether it's Python, Perl, Ruby,

00:08:00.740 --> 00:08:02.600
calling Xcode externally.

00:08:02.600 --> 00:08:05.000
We've got a command line tool,
Xcode build.

00:08:05.000 --> 00:08:07.910
So as simple or as
complicated as you want,

00:08:07.910 --> 00:08:10.350
you can build your build system.

00:08:10.700 --> 00:08:12.920
But day-to-day,
you as developers will use

00:08:13.000 --> 00:08:16.180
a really powerful integrated
development environment.

00:08:16.180 --> 00:08:19.080
Next, Objective-C, okay?

00:08:19.080 --> 00:08:24.650
I have a lot of developers say,
I can't throw my code away.

00:08:24.720 --> 00:08:27.420
You do not do that, okay?

00:08:27.420 --> 00:08:30.610
Objective-C is a superset of C.

00:08:30.610 --> 00:08:36.160
And the cool thing about our tools is
GCC is a full Objective-C++ compiler.

00:08:36.160 --> 00:08:37.650
And people say, what does that mean?

00:08:37.660 --> 00:08:40.480
Mix and match, okay?

00:08:40.820 --> 00:08:42.820
There is zero restrictions.

00:08:42.820 --> 00:08:45.990
Whatever you've got, your C, C++,
can be tightly integrated

00:08:46.390 --> 00:08:49.390
in the same file,
the same function, the same line,

00:08:49.390 --> 00:08:51.360
which you'll see in the demo.

00:08:51.360 --> 00:08:54.620
So definitely,
you're going to be reusing your

00:08:54.620 --> 00:08:57.580
intellectual property code every day.

00:08:59.420 --> 00:09:00.930
So, Objective-C.

00:09:00.930 --> 00:09:04.300
Let's take a little look, real briefly.

00:09:04.300 --> 00:09:06.340
I want to point out something here.

00:09:06.340 --> 00:09:07.380
So what have we got?

00:09:07.380 --> 00:09:10.000
I want to point out that the
semantic differences between

00:09:10.000 --> 00:09:11.550
the two languages are not big.

00:09:11.550 --> 00:09:13.560
The learning curve here is small.

00:09:13.560 --> 00:09:16.340
In this case,
I've got some C++ code and the

00:09:16.480 --> 00:09:19.520
equivalent line of an Objective-C call.

00:09:19.520 --> 00:09:24.070
I've got an object that I'm talking to,
my WND, my window object,

00:09:24.070 --> 00:09:26.430
and I'm calling a method on that.

00:09:26.430 --> 00:09:27.480
Set frame.

00:09:27.480 --> 00:09:28.260
Okay?

00:09:30.020 --> 00:09:33.620
The first parameter is the frame
or my rectangle that I'm setting.

00:09:33.620 --> 00:09:37.860
And here's where Objective-C starts
to get really interesting.

00:09:37.860 --> 00:09:41.010
And as being an old C++ guy,
I resisted this.

00:09:41.150 --> 00:09:43.690
But what's really great,
I really love Objective-C now.

00:09:44.140 --> 00:09:45.260
Because what's that?

00:09:45.310 --> 00:09:46.230
Heck if I know.

00:09:46.330 --> 00:09:47.360
Go to your headers.

00:09:47.600 --> 00:09:49.260
Talk to your other developers.

00:09:49.260 --> 00:09:51.350
What's this Boolean I'm passing?

00:09:51.360 --> 00:09:55.620
Well, in Objective-C,
the name parameters are named.

00:09:55.620 --> 00:09:58.840
So, in this case,
this method is called set

00:09:58.840 --> 00:10:01.040
frame colon display colon.

00:10:01.050 --> 00:10:04.080
And that is the method's signature.

00:10:04.080 --> 00:10:08.070
And it's hopefully, if you write your own
Objective-C functions well,

00:10:08.280 --> 00:10:10.020
they are self-documenting.

00:10:10.100 --> 00:10:13.050
In this case,
this is a true method on NSWindow.

00:10:13.050 --> 00:10:15.830
And it tells me I need to
display this window now.

00:10:16.060 --> 00:10:19.260
As you know,
Mac OS X is a buffered windowing system.

00:10:19.260 --> 00:10:21.180
And it delays all updates.

00:10:21.570 --> 00:10:25.360
But in this case, I need to tell it,
I need you to update right now.

00:10:25.360 --> 00:10:26.850
So, this is really powerful.

00:10:26.850 --> 00:10:28.160
And you'll see why later.

00:10:28.180 --> 00:10:30.810
And again, to point out,
I really want to get this

00:10:30.860 --> 00:10:32.330
through everyone's head.

00:10:32.330 --> 00:10:33.940
It's truly mix and match.

00:10:33.940 --> 00:10:36.730
In this case,
this is actually from a file of mine,

00:10:36.730 --> 00:10:37.900
some sample code.

00:10:37.900 --> 00:10:39.260
There's my C++ object.

00:10:39.260 --> 00:10:41.080
I'm extracting a value from it.

00:10:41.080 --> 00:10:43.910
And I'm passing it right
to an Objective-C method.

00:10:43.910 --> 00:10:45.240
Zero limitations.

00:10:45.240 --> 00:10:48.700
So, Objective-C being the language.

00:10:50.690 --> 00:10:52.850
What are the real differences at runtime?

00:10:52.870 --> 00:10:55.800
Well, Objective-C is loosely typed.

00:10:55.870 --> 00:10:57.720
As you get into it, you'll see.

00:10:57.720 --> 00:11:00.040
And it's dynamically name-bound.

00:11:00.040 --> 00:11:03.840
So I said set frame colon display colon,
that's the name of the function.

00:11:03.840 --> 00:11:06.450
That is found by name.

00:11:06.450 --> 00:11:07.840
There's no virtual tables.

00:11:07.840 --> 00:11:08.960
There's no pointers.

00:11:08.960 --> 00:11:11.190
That is name-bound.

00:11:11.200 --> 00:11:13.980
And what does that allow me to do?

00:11:14.110 --> 00:11:20.230
That powerful, simple construct lets me
introspect classes and instance

00:11:20.230 --> 00:11:25.900
of classes to see if that object
responds to that message by name.

00:11:25.910 --> 00:11:29.170
And you'll see how powerful
this is as you get more and

00:11:29.360 --> 00:11:31.490
more into Objective-C and Cocoa.

00:11:32.200 --> 00:11:35.020
So we've talked about
Objective C a little bit.

00:11:35.090 --> 00:11:37.130
What is Cocoa?

00:11:37.570 --> 00:11:40.240
Well, it's clearly our
object-oriented environment.

00:11:40.240 --> 00:11:44.780
It's a full-featured,
mature set of frameworks that

00:11:44.780 --> 00:11:48.120
you're going to build your
interface and application on,

00:11:48.120 --> 00:11:50.730
and if you're bringing
your other code across,

00:11:50.820 --> 00:11:53.050
that you'll build on top of that.

00:11:56.300 --> 00:12:01.350
It really allows you to
build really powerful,

00:12:01.350 --> 00:12:01.350
really consistent applications.

00:12:02.550 --> 00:12:07.470
So the important point I like to point
out here is one of the really fantastic

00:12:07.470 --> 00:12:11.970
benefits of Cocoa is the ability
to remove that day-to-day tedium,

00:12:11.970 --> 00:12:14.930
right, for you guys,
where you can really focus on your

00:12:14.930 --> 00:12:20.520
applications and not worry about all
the details building your application.

00:12:23.910 --> 00:12:26.370
One of the important things
about Cocoa as a framework,

00:12:26.370 --> 00:12:29.180
and that, like Deric says,
Apple takes very seriously,

00:12:29.180 --> 00:12:33.750
is there's very few design patterns
used throughout the system that you

00:12:33.750 --> 00:12:36.430
will see repeated over and over again.

00:12:36.440 --> 00:12:39.020
Things like the naming patterns.

00:12:39.020 --> 00:12:41.600
When you see a certain
signature in a function,

00:12:41.640 --> 00:12:44.930
you know that you own that object
that it's returning to you,

00:12:44.930 --> 00:12:46.150
or the system does.

00:12:46.240 --> 00:12:48.620
And that helps you with
your memory management.

00:12:48.620 --> 00:12:49.800
How do I manage memory?

00:12:49.800 --> 00:12:51.950
I can just look at the
function and I know.

00:12:51.950 --> 00:12:53.640
And it's used everywhere.

00:12:53.800 --> 00:12:56.620
Things like target action.

00:12:56.620 --> 00:12:59.060
How do I get my code called?

00:12:59.070 --> 00:13:03.580
How do I reuse off-the-shelf,
built-in components, but for my

00:13:03.640 --> 00:13:05.590
application-specific behaviors?

00:13:05.600 --> 00:13:08.620
And delegation,
which allows me to literally

00:13:08.670 --> 00:13:12.560
delegate temporarily some
functionality to an object that

00:13:12.560 --> 00:13:14.920
I know little or nothing about.

00:13:14.920 --> 00:13:17.460
And then, model view controller.

00:13:17.460 --> 00:13:21.010
This is really important
for you guys bringing your,

00:13:21.040 --> 00:13:23.720
you know, multi-platform, multi-device.

00:13:23.800 --> 00:13:26.510
device code to the Mac.

00:13:28.320 --> 00:13:31.950
So the goal again, more functionality,
less code.

00:13:31.970 --> 00:13:34.270
And the other thing I really
love about Cocoa now is,

00:13:34.270 --> 00:13:37.060
you know, in the days when we used to
rapidly prototype things and

00:13:37.060 --> 00:13:39.870
you'd have to go back and say,
okay, I've got a prototype and I have

00:13:39.870 --> 00:13:41.360
to go back and do it for real.

00:13:41.360 --> 00:13:45.250
Now my rapid prototype is my
production code and it's really,

00:13:45.320 --> 00:13:46.700
really fantastic.

00:13:46.710 --> 00:13:50.740
Again, keep focused on your application
and not on the details of,

00:13:50.740 --> 00:13:52.300
you know, the system.

00:13:53.980 --> 00:13:57.400
So I want to talk briefly about
the three important ones here,

00:13:57.400 --> 00:14:00.980
target action, delegation,
and model view controller.

00:14:03.610 --> 00:14:06.260
So target action, what is it?

00:14:06.280 --> 00:14:08.930
It really,
a target is an instance of your

00:14:09.050 --> 00:14:15.380
object and the action is the method
that's gonna be tied to that instance.

00:14:15.400 --> 00:14:18.210
And again,
we'll see this later in the demo.

00:14:19.470 --> 00:14:20.600
Delegation.

00:14:20.640 --> 00:14:23.720
I love this slide because
it's way too complicated.

00:14:23.820 --> 00:14:26.870
It makes it look a lot
harder than it really is.

00:14:26.990 --> 00:14:32.020
What's important to take away from this
is that Cocoa uses this over and over.

00:14:32.050 --> 00:14:35.410
When you come to a platform
and you want to take override

00:14:35.450 --> 00:14:38.330
standard system behavior,
the first thing you

00:14:38.330 --> 00:14:40.120
think of is subclassing.

00:14:40.330 --> 00:14:44.720
How do I take that system object
and make it do what I need it to do?

00:14:44.760 --> 00:14:46.980
Well, in delegation,

00:14:47.530 --> 00:14:51.320
You don't have to, in Cocoa,
we think we have a better way,

00:14:51.320 --> 00:15:00.290
which allows you to say, okay,
I'm gonna temporary turn over

00:15:00.290 --> 00:15:00.290
functionality to you to a delegate object

00:15:00.500 --> 00:15:43.000
[Transcript missing]

00:15:44.280 --> 00:15:45.100
Model-view controller.

00:15:45.100 --> 00:15:49.920
When I first started learning Cocoa,
and everyone talked about this,

00:15:49.920 --> 00:15:51.200
I was like, what?

00:15:51.200 --> 00:15:51.790
Model?

00:15:51.790 --> 00:15:53.030
I'm not a 3D app.

00:15:53.030 --> 00:15:53.620
What?

00:15:53.640 --> 00:15:56.550
And so I like to think of it this way.

00:15:56.590 --> 00:15:58.480
Engine, UI, glue.

00:15:58.480 --> 00:16:01.160
The engine being your
intellectual property,

00:16:01.160 --> 00:16:05.280
your code, the view, obviously the UI,
and the controller really is the

00:16:05.390 --> 00:16:07.560
glue or the arbiter between the two.

00:16:07.560 --> 00:16:11.560
And the important thing in this
slide to point out is the arrows.

00:16:11.630 --> 00:16:14.810
When you have a system where
that model and the view start

00:16:14.890 --> 00:16:17.760
to talk to each other directly,
you've got problems.

00:16:17.810 --> 00:16:20.510
Because the view system
is changing so often.

00:16:20.630 --> 00:16:23.880
Look at,
if you're familiar with Cocoa at all,

00:16:23.920 --> 00:16:27.560
you know that UI kit is
slightly different than NS view.

00:16:27.660 --> 00:16:31.740
And if you've followed this paradigm,
you can easily port

00:16:31.740 --> 00:16:33.670
your code to the iPhone.

00:16:34.390 --> 00:16:36.720
So what does this mean for
you guys as developers?

00:16:36.720 --> 00:16:40.050
And this is the number one
thing I tell developers.

00:16:40.050 --> 00:16:42.240
You must take ownership, right?

00:16:42.240 --> 00:16:45.000
People say, well,
my view holds state information.

00:16:45.000 --> 00:16:47.420
That's just a bad idea architecturally,
right?

00:16:47.420 --> 00:16:49.980
Your model,
your engine should hold your state.

00:16:50.000 --> 00:16:52.390
You know,
you really need to factor that code

00:16:52.490 --> 00:16:54.590
so that it plays nicely everywhere.

00:16:54.600 --> 00:16:57.830
And like I said,
removing view dependencies on state

00:16:57.880 --> 00:17:02.930
and other information like that so that
the controller can be the go-between.

00:17:02.940 --> 00:17:05.940
And then as you do that,
you automatically will be able to

00:17:05.940 --> 00:17:09.500
take advantage of all these really,
really rich technologies that

00:17:09.570 --> 00:17:11.580
Deric's going to show you later.

00:17:14.000 --> 00:17:26.600
[Transcript missing]

00:17:41.250 --> 00:17:42.430
Thank you.

00:17:42.600 --> 00:17:45.240
So in my slide,
I was talking to you how NS Window can

00:17:45.280 --> 00:17:47.640
delegate its resizing if you choose.

00:17:47.660 --> 00:17:54.490
So I'm going to open Xcode here,
and I'm going to open a new project

00:17:54.490 --> 00:17:58.090
and pick a Mac OS X application.

00:18:04.400 --> 00:18:08.430
And one of the advantages of
starting from a template is I'm

00:18:08.430 --> 00:18:10.600
going to run this application.

00:18:11.440 --> 00:18:12.240
Build.

00:18:12.240 --> 00:18:16.120
I know you guys have
seen this this morning.

00:18:16.240 --> 00:18:17.820
So I've got an application
up and running.

00:18:17.820 --> 00:18:24.260
So what I want to do is I'm going
to drag in my model code here.

00:18:25.100 --> 00:18:26.730
Let me show you what this is going to do.

00:18:26.740 --> 00:18:30.280
So this is a simple C++ object.

00:18:31.030 --> 00:18:32.800
This is purposely trivial.

00:18:32.820 --> 00:18:35.000
You'll notice it includes no Mac code.

00:18:35.000 --> 00:18:38.340
It's a C++ object that's going
to help me constrain my window,

00:18:38.340 --> 00:18:38.730
right?

00:18:38.730 --> 00:18:41.880
Very artificial,
but it's... And I've got two

00:18:41.880 --> 00:18:42.920
methods that are important.

00:18:42.920 --> 00:18:44.230
It's set constraint and set ratio.

00:18:44.230 --> 00:18:45.400
Okay?

00:18:45.400 --> 00:18:50.580
Now I'm going to go right
to my controller class.

00:18:50.580 --> 00:18:54.160
So I'm going to create a new file.

00:18:54.920 --> 00:18:59.810
And I'm going to say I want
Cocoa and I want to Objective C class

00:18:59.820 --> 00:19:03.020
and I'll call it MyController.

00:19:04.420 --> 00:19:05.460
And here's a little trick.

00:19:05.540 --> 00:19:08.840
If you're going to use C++,
there's many ways to tell GCC that

00:19:08.840 --> 00:19:13.080
I want to integrate Objective-C and C++,
but just like a .c file that

00:19:13.360 --> 00:19:17.280
tells the compiler what it is,
.m is a Cocoa file,

00:19:17.280 --> 00:19:21.230
.mm is an Objective-C++ file.

00:19:21.230 --> 00:19:23.000
So I'm going to rename that there.

00:19:23.000 --> 00:19:29.350
Then I want to...

00:19:34.200 --> 00:19:38.330
I'm going to open my little
helper script app here so you

00:19:38.330 --> 00:19:40.020
guys don't have to see me type.

00:19:40.190 --> 00:19:45.240
So I'm going to add my
little constrainor object.

00:19:45.260 --> 00:19:50.380
Then I'm going to add my instance,
which is a straight C++ instance.

00:19:50.400 --> 00:19:52.690
And then I'm going to add--

00:19:52.890 --> 00:19:54.720
Two wrapper functions, right?

00:19:54.750 --> 00:19:56.220
You notice the IB action on there.

00:19:56.220 --> 00:19:58.380
That's so Interface
Builder recognizes that.

00:19:58.420 --> 00:20:02.590
And so these are kind of
going to wrap my C++ object.

00:20:05.570 --> 00:20:11.450
Let's go back to the, now here's my,
let me open that in a

00:20:11.470 --> 00:20:13.490
bigger window for you.

00:20:16.240 --> 00:20:18.760
So now here's the implementation of that.

00:20:18.760 --> 00:20:22.310
And I need to do a little bit
more dirty work because I'm

00:20:22.370 --> 00:20:25.150
instantiating a C++ object.

00:20:25.520 --> 00:20:27.700
So my constructors and destructors.

00:20:27.720 --> 00:20:29.190
Then, here's the important part.

00:20:29.200 --> 00:20:32.610
Those action methods I declare,
I just want to point out that all

00:20:32.680 --> 00:20:36.570
I'm doing is passing this message
down directly to my C++ object.

00:20:36.630 --> 00:20:37.610
That's it.

00:20:37.680 --> 00:20:40.580
And you're going to see a lot
of Cocoa code like that that

00:20:40.580 --> 00:20:42.220
trivially wraps your C++.

00:20:42.220 --> 00:20:44.190
And then...

00:20:49.100 --> 00:20:51.160
I'm going to implement
my delegate methods.

00:20:51.160 --> 00:20:56.140
Another interesting point, I,
you can search this project,

00:20:56.140 --> 00:20:57.860
I never call this code.

00:20:58.010 --> 00:21:01.440
The cool thing is, it's funny,
some people say sometimes with Cocoa,

00:21:01.440 --> 00:21:03.880
I feel like I'm not always in control.

00:21:04.180 --> 00:21:05.000
that's sometimes true.

00:21:05.000 --> 00:21:07.930
So the window object's
going to be calling me,

00:21:08.130 --> 00:21:08.670
not me.

00:21:08.740 --> 00:21:10.160
So I build that.

00:21:10.340 --> 00:21:13.180
So I've got my code, my engine code,
which is my model.

00:21:13.180 --> 00:21:14.800
I've got my controller code.

00:21:14.800 --> 00:21:15.420
I need a view.

00:21:15.420 --> 00:21:17.840
So now I'm going to close that.

00:21:18.040 --> 00:21:20.200
And again,
I've started from a nice template.

00:21:20.200 --> 00:21:22.400
So I've got my interface
builder file here.

00:21:22.400 --> 00:21:27.970
And I'm going to go and first
I'm going to grab an object,

00:21:28.060 --> 00:21:30.380
put that in there,
which is my instance of

00:21:30.380 --> 00:21:31.950
my controller object.

00:21:32.030 --> 00:21:34.710
And what's cool about interface builder,
remember I said the tight

00:21:34.770 --> 00:21:36.870
coupling between the two,
I go in here and I can

00:21:37.210 --> 00:21:38.680
just start typing M.

00:21:40.100 --> 00:21:42.060
It already knows about my controller.

00:21:42.060 --> 00:21:45.390
And indeed, when I hit my tab,
it shows my methods there, right there.

00:21:45.390 --> 00:21:47.600
So I can start hooking things up to that.

00:21:47.640 --> 00:21:49.000
Okay?

00:21:49.000 --> 00:21:50.880
And the last thing I need to do...

00:21:53.300 --> 00:21:58.020
The second for the last thing is now
drag and tell that window that my object,

00:21:58.090 --> 00:22:01.400
which is just a generic object,
is the delegate of the window and that

00:22:01.410 --> 00:22:03.470
it should receive delegate messages.

00:22:03.480 --> 00:22:09.870
Now I want to hook up my interface to...

00:22:11.350 --> 00:22:13.960
Put in, for now,
I need to wait to set the ratio

00:22:13.960 --> 00:22:16.530
for my width to height ratio,
and I want to tell it,

00:22:16.530 --> 00:22:18.320
and I need a little checkbox.

00:22:18.320 --> 00:22:23.180
Again, this is very trivial to say, hey,
start.

00:22:26.900 --> 00:22:29.810
Start constraining the window.

00:22:29.810 --> 00:22:30.880
And then let's hook those up too.

00:22:30.880 --> 00:22:37.200
So I want to say when this guy changes,
I want to call set constraint ratio.

00:22:37.600 --> 00:22:43.280
And when this guy changes,
I want to say toggle the constraint.

00:22:43.400 --> 00:22:46.260
So hopefully,
if I haven't done anything wrong here,

00:22:46.260 --> 00:22:48.460
I can go back to Xcode and build this.

00:22:48.660 --> 00:22:51.270
It already knows,
because of the tight integration,

00:22:51.410 --> 00:22:53.840
that the interface builder file is dirty.

00:22:53.890 --> 00:22:55.960
So you save all.

00:22:57.900 --> 00:23:03.800
[Transcript missing]

00:23:09.750 --> 00:23:11.950
Run it.

00:23:11.950 --> 00:23:14.940
And now I can type in 1.5.

00:23:15.330 --> 00:23:19.680
Nothing should happen until
I click my Constrain button.

00:23:19.690 --> 00:23:22.970
And now you can see I'm
constraining the window.

00:23:24.000 --> 00:23:27.680
And if, real quick, if you want to see
something quick and dirty,

00:23:27.700 --> 00:23:29.640
just so you know, I'm not calling that.

00:23:29.710 --> 00:23:34.600
And we'll go down and set a
breakpoint on the toggle here.

00:23:34.600 --> 00:23:38.240
And if I debug this...

00:23:44.100 --> 00:23:56.500
[Transcript missing]

00:24:06.500 --> 00:24:07.850
Clicker.

00:24:07.850 --> 00:24:10.500
Back to slides, please.

00:24:13.950 --> 00:24:14.180
Great.

00:24:14.250 --> 00:24:14.980
So thank you, Larry.

00:24:15.080 --> 00:24:18.740
That was a demonstration of some of the
common design patterns that you're going

00:24:18.740 --> 00:24:21.920
to use over and over in all of the modern
frameworks that you're going to use,

00:24:22.000 --> 00:24:23.710
whether it's iPhone or Mac Development.

00:24:23.710 --> 00:24:27.200
And also, hopefully you realized how
trivial it is to integrate C++

00:24:27.200 --> 00:24:29.080
and Objective-C code together.

00:24:30.520 --> 00:24:32.920
So when I think of Cocoa,
I think of it as being both

00:24:32.920 --> 00:24:36.380
modern and mature in that it's
been developed for 20 years now,

00:24:36.380 --> 00:24:39.320
but it's also been extended
over those 20 years.

00:24:39.360 --> 00:24:41.480
So it has this great design
pattern that really allows us

00:24:41.480 --> 00:24:42.880
to integrate new technologies.

00:24:42.880 --> 00:24:45.600
So some of the newest technologies
that we integrated in the last

00:24:45.600 --> 00:24:48.860
release of Mac OS 10.5 Leopard
include things like 64-bit.

00:24:48.860 --> 00:24:50.550
So this is a core infrastructure change.

00:24:50.560 --> 00:24:53.710
So now your applications can be
built 64-bit from the ground up.

00:24:53.780 --> 00:24:57.630
We added a technology called
NSOperation that in a way allows you

00:24:57.630 --> 00:25:00.160
to incrementally add threading support.

00:25:00.220 --> 00:25:02.010
And multi-core support
into your application.

00:25:02.020 --> 00:25:03.560
It's resolution independent.

00:25:03.560 --> 00:25:06.700
So all the views and controls
can be scaled to any size.

00:25:06.700 --> 00:25:09.180
And your views can
participate in that as well.

00:25:09.180 --> 00:25:12.350
But I'd kind of like to take a
look at just a little bit deeper

00:25:12.380 --> 00:25:14.260
at one really killer technology.

00:25:14.260 --> 00:25:16.490
Just so you can see a little bit how
it fits into the operating system

00:25:16.490 --> 00:25:17.780
and in the development frameworks.

00:25:17.800 --> 00:25:18.710
And that's core animation.

00:25:18.720 --> 00:25:21.360
So if you've ever written
animation code before,

00:25:21.470 --> 00:25:23.490
typically you do it through timers.

00:25:23.500 --> 00:25:26.280
You're going to set a timer, keep state,
and move that thing along.

00:25:26.280 --> 00:25:28.660
And it's a pretty expensive way
to do it because you have to keep

00:25:28.660 --> 00:25:30.030
on re-rendering that content.

00:25:30.040 --> 00:25:34.560
Well, when we architected core animation,
we did it based on the concept of layers.

00:25:34.580 --> 00:25:37.890
So that once you render your contact,
that expensive operation of

00:25:37.890 --> 00:25:40.960
rendering that content onto a layer,
we can now perform these

00:25:41.100 --> 00:25:44.360
operations on it without having
you re-render that content.

00:25:44.360 --> 00:25:46.970
Fade it in, fade it out, move it around.

00:25:47.000 --> 00:25:49.860
Or you can even apply like 3D
matrix transformations to it

00:25:49.870 --> 00:25:51.500
to have it fly through space.

00:25:51.500 --> 00:25:53.840
And all without having you
re-render that content.

00:25:53.840 --> 00:25:56.460
Well,
we further improved on that performance

00:25:56.460 --> 00:25:59.940
by letting the core animation
engine sit on top of the OpenGL,

00:26:00.020 --> 00:26:02.010
hardware accelerated pipeline.

00:26:02.020 --> 00:26:04.330
And then furthermore,
we improved the performance by having

00:26:04.340 --> 00:26:07.310
core animation run in its own thread
so that your user interface can

00:26:07.320 --> 00:26:11.510
stay responsive while you're having
animations go on in the background.

00:26:12.380 --> 00:26:15.390
We also made this great graphics
kind of unification layer in that

00:26:15.630 --> 00:26:18.480
because it's based on layers,
you can render different types of

00:26:18.480 --> 00:26:22.060
content in these core animation layers
and then compose scenes by coalescing

00:26:22.100 --> 00:26:25.610
these layers together and then change
the attributes of each of these layers.

00:26:25.620 --> 00:26:29.860
So now where this gets interesting
is we take all of this functionality

00:26:29.860 --> 00:26:34.080
and performance and bring it up into
the Cocoa layer to make it very easy

00:26:34.090 --> 00:26:38.450
to add core animation or animation
effects into your application.

00:26:38.480 --> 00:26:40.770
So let's see a little bit how to do that.

00:26:41.930 --> 00:26:44.140
So typically,
you can probably understand right now,

00:26:44.210 --> 00:26:46.320
if we're going to call
set frame on a view,

00:26:46.320 --> 00:26:49.320
it's just going to change
its origin and its bounds.

00:26:49.340 --> 00:26:50.950
So we'll just flip it
to another location.

00:26:50.960 --> 00:26:54.000
So how does Cocoa integrate
with core animation?

00:26:54.020 --> 00:26:55.100
How do we make this animate?

00:26:55.100 --> 00:26:58.670
Well, it's really as simple as adding
about half of a line of code.

00:26:58.700 --> 00:27:00.950
Instead of calling set
frame on the view itself,

00:27:00.950 --> 00:27:03.990
we call set frame on the view's
animator and then we automatically

00:27:03.990 --> 00:27:05.510
get that smooth animation.

00:27:07.370 --> 00:27:11.900
Okay, so we've talked a little bit about
Cocoa and Mac OS X development.

00:27:11.930 --> 00:27:14.720
Now I'd kind of like to switch
gears and talk about the iPhone.

00:27:18.120 --> 00:27:22.880
So when we took a look at the iPhone,
we had to take a look at this futuristic

00:27:22.880 --> 00:27:27.000
device and really design something that
can be based on almost on the future.

00:27:27.000 --> 00:27:31.380
Design an entirely new operating system,
entirely new development frameworks.

00:27:31.440 --> 00:27:35.150
So where we started was with the
latest version of Mac OS X 10.5 Leopard

00:27:35.230 --> 00:27:38.260
and bring all those technologies
down onto this little device,

00:27:38.270 --> 00:27:39.120
the iPhone.

00:27:41.450 --> 00:27:46.100
At the heart of your iPhone development
is going to be the UIKit framework.

00:27:46.100 --> 00:27:47.870
Any application you write is
going to have to use UIKit.

00:27:47.920 --> 00:27:52.140
It's responsible for that user interface,
all of those controls, views, widgets,

00:27:52.140 --> 00:27:53.720
table views are a big part of it.

00:27:53.770 --> 00:27:56.570
We also introduce a number
of controller classes.

00:27:56.580 --> 00:27:59.590
A fundamental one is the view
controllers to help you manage

00:27:59.900 --> 00:28:03.130
all of your user interface items,
as well as an event system.

00:28:05.600 --> 00:28:08.100
So the way we worked out the UI kit
sessions through WWDC is really

00:28:08.100 --> 00:28:10.850
we go from the fundamental session
and then we get into more detailed

00:28:10.850 --> 00:28:12.390
sessions throughout the week.

00:28:12.440 --> 00:28:16.000
So I recommend that you go to the iPhone
Application Development Fundamental

00:28:16.070 --> 00:28:18.930
Session at tomorrow morning at 9 o'clock.

00:28:19.000 --> 00:28:21.410
And then throughout the week,
you'll see more advanced and more

00:28:21.650 --> 00:28:24.040
kind of detailed topics where
you can learn more information.

00:28:24.040 --> 00:28:27.000
So let's start off with
the user interface.

00:28:27.550 --> 00:28:29.880
Right out of the box,
we provide some standard,

00:28:29.880 --> 00:28:33.520
very good-looking controls that
I think your users are used to,

00:28:33.520 --> 00:28:36.580
understand how they work,
and make for an intuitive application.

00:28:36.580 --> 00:28:39.160
And those include all
those standard things,

00:28:39.160 --> 00:28:42.690
buttons, sliders, text fields, switches,
and so forth.

00:28:42.740 --> 00:28:46.640
Now, you can create your user interface
either directly in Interface

00:28:46.640 --> 00:28:49.850
Builder or if you want to,
all of the same functionality is

00:28:49.850 --> 00:28:52.000
available to create through code.

00:28:53.400 --> 00:28:57.770
But I really encourage you to take
your user interface to the next level,

00:28:57.770 --> 00:29:01.280
to really make something that's
intuitive and easy to use and

00:29:01.280 --> 00:29:04.110
that your users can be proud of.

00:29:04.800 --> 00:29:06.660
And there are some very
easy ways to do this.

00:29:06.660 --> 00:29:10.740
You can, for instance,
start to integrate your own custom

00:29:10.740 --> 00:29:14.110
images into the background of your
application or integrate your own custom

00:29:14.110 --> 00:29:16.320
images for buttons and your own views.

00:29:16.340 --> 00:29:20.730
You can just take it one little step
further and start to add animation

00:29:21.140 --> 00:29:26.400
into your iPhone applications for,
for instance, transitions to convey state

00:29:26.860 --> 00:29:28.580
changes or context changes.

00:29:28.910 --> 00:29:33.260
And I think that adds a sense of reality
to your application that users can

00:29:33.260 --> 00:29:36.010
understand and intuitively move around.

00:29:37.700 --> 00:29:41.800
So we have an iPhone application
user interface design session in

00:29:41.800 --> 00:29:43.510
Presidio on Wednesday morning at 9.

00:29:46.430 --> 00:29:50.460
So,
when you develop an iPhone application,

00:29:50.460 --> 00:29:55.300
there are really two fundamental
concepts that you need to learn.

00:29:55.370 --> 00:29:58.550
And I really encourage you to really
learn these and not just copy and

00:29:58.640 --> 00:30:02.180
paste the code from sample code and
try and use it in your application.

00:30:02.250 --> 00:30:05.880
These are fundamental concepts that
every application is going to use.

00:30:05.950 --> 00:30:08.720
And one of them is the
concept of view controllers.

00:30:08.770 --> 00:30:10.760
On any iPhone application
that you look at,

00:30:10.830 --> 00:30:14.520
it's going to be made of
several screenfuls of data.

00:30:14.870 --> 00:30:16.580
And automatically when
I look at that application,

00:30:16.580 --> 00:30:20.240
I know that every screen that I see is
going to be managed by a view controller.

00:30:20.240 --> 00:30:24.340
So going back to that MVC diagram,
that view controller is going

00:30:24.340 --> 00:30:26.920
to manage all the user interface
elements on that screen.

00:30:26.920 --> 00:30:29.030
When a user clicks a button,
it's going to call some

00:30:29.170 --> 00:30:31.590
method in my view controller,
and then my view controller can

00:30:31.660 --> 00:30:33.780
go ahead and get that image,
do some processing,

00:30:33.890 --> 00:30:35.130
and then do something else with it.

00:30:35.200 --> 00:30:39.360
So to take a quick look at what the base
UI view controller class looks like,

00:30:39.490 --> 00:30:40.920
it's got an instance
variable called view.

00:30:40.920 --> 00:30:42.170
Okay, simple enough.

00:30:42.350 --> 00:30:44.500
And that points to your view container.

00:30:44.790 --> 00:30:47.460
Within that view container,
you can now embed other views

00:30:47.770 --> 00:30:50.410
and controls and buttons and your
own custom views inside of there.

00:30:50.420 --> 00:30:53.770
It also has a couple of convenient
methods associated with it.

00:30:54.160 --> 00:30:56.900
Things like viewDidLoad,
so that once your user interface

00:30:56.900 --> 00:30:59.900
loads from Interface Builder,
that gives you the opportunity

00:30:59.900 --> 00:31:02.080
to populate your user
interface with your own data.

00:31:03.570 --> 00:31:04.860
and a number of other ones too.

00:31:04.900 --> 00:31:06.610
So because view controllers
are such a fundamental

00:31:06.760 --> 00:31:08.600
concept in iPhone development,
we have two sessions

00:31:08.600 --> 00:31:09.800
covering view controllers.

00:31:09.800 --> 00:31:18.150
The first one is understanding
iPhone view controllers on Tuesday at

00:31:18.150 --> 00:31:18.150
two o'clock in the morning.

00:31:18.150 --> 00:31:18.150
And we also have a mastering iPhone
view controller session as well.

00:31:19.060 --> 00:31:23.290
So the next fundamental concept of
iPhone development is table views.

00:31:23.290 --> 00:31:27.510
I don't think that I've seen
an iPhone application yet

00:31:27.510 --> 00:31:29.580
that does not use table views.

00:31:29.580 --> 00:31:31.780
I mean, some people point to games,
but sooner or later they have

00:31:31.780 --> 00:31:33.670
to represent their high scores,
and they're going to do

00:31:33.670 --> 00:31:34.800
that through a table view.

00:31:34.800 --> 00:31:37.800
And one of the things I really
like about the table views is

00:31:37.800 --> 00:31:41.120
that you can get them up on screen
with really very little code,

00:31:41.120 --> 00:31:44.120
and then yet at the same time,
they're very extensible,

00:31:44.120 --> 00:31:46.840
so you can get them to portray
really unique data with

00:31:46.900 --> 00:31:48.680
just a little extra effort.

00:31:49.000 --> 00:31:50.960
So our table views by
default come in two styles,

00:31:51.090 --> 00:31:52.910
a plain style which
stretches edge to edge,

00:31:52.910 --> 00:31:55.610
and a group style which has those
kind of rounded corners that you

00:31:55.610 --> 00:31:57.310
see in the settings application.

00:31:59.720 --> 00:32:04.040
By default, the table views contain
sections and section headers.

00:32:04.040 --> 00:32:07.840
If you look in the address book,
the letter H would be a section header

00:32:07.840 --> 00:32:11.600
and all the names underneath that are
going to be included in that section.

00:32:11.600 --> 00:32:14.800
Or if you go back to that settings
application and look at that,

00:32:14.800 --> 00:32:17.400
the sections are divided
by logical sections.

00:32:17.400 --> 00:32:19.860
You'll have a section header called
security and all the security-related

00:32:19.950 --> 00:32:20.980
sessions underneath that.

00:32:21.050 --> 00:32:24.670
But my favorite feature of the
iPhone table views is the fact that

00:32:24.670 --> 00:32:26.960
it can support these complex views.

00:32:27.980 --> 00:32:30.220
So if you look at any one
of these table view rows,

00:32:30.220 --> 00:32:31.340
it's called table view cell.

00:32:31.360 --> 00:32:33.640
But a table view cell is
actually just a UI view.

00:32:33.640 --> 00:32:34.900
That means it's a UI view container.

00:32:34.900 --> 00:32:37.890
At this point, you can put arbitrary
views inside of there.

00:32:37.890 --> 00:32:40.220
Images, buttons, text, your own views.

00:32:40.240 --> 00:32:43.950
You can make your table row
doesn't have to be 44 pixels high.

00:32:44.060 --> 00:32:46.230
You can make it any height you want.

00:32:46.280 --> 00:32:49.420
And all of your rows can have
different heights if you want to.

00:32:52.300 --> 00:32:54.230
The iPhone Table View also
has support for editing,

00:32:54.230 --> 00:32:55.890
so when the user clicks
on the edit button,

00:32:56.120 --> 00:32:59.310
it will automatically slide your
views over and put that little add

00:32:59.310 --> 00:33:01.030
or delete button right next to them.

00:33:01.200 --> 00:33:02.320
And it supports a lot more.

00:33:02.320 --> 00:33:05.040
So along those same lines,
we have two sessions

00:33:05.040 --> 00:33:06.980
covering iPhone Table Views.

00:33:07.010 --> 00:33:10.620
The first one is tomorrow at 3.30,
Understanding iPhone Table Views,

00:33:10.620 --> 00:33:12.940
and later on in the week we
also have a Mastering iPhone

00:33:12.990 --> 00:33:14.620
Table Views session as well.

00:33:17.720 --> 00:33:22.020
So those pinch, rotation,
and swipe gestures can really

00:33:22.060 --> 00:33:26.080
make interacting with your
application more intuitive.

00:33:26.110 --> 00:33:28.670
Now,
you can get access to all the touches

00:33:28.740 --> 00:33:32.430
at any time and interrogate them,
but UIKit offers a couple of

00:33:32.490 --> 00:33:33.970
convenience methods to you.

00:33:34.150 --> 00:33:38.050
So let's go ahead and step through
the process of what happens when

00:33:38.170 --> 00:33:40.510
the user swipes against your iPhone.

00:33:41.460 --> 00:33:43.900
When the user puts his
finger down on the screen,

00:33:43.950 --> 00:33:46.100
your ViewsTouchesBegin
method will get called.

00:33:46.100 --> 00:33:48.690
And that gives you a chance
to go ahead and store away the

00:33:48.690 --> 00:33:50.300
location of that first touch.

00:33:50.340 --> 00:33:53.060
Then as the user swipes his
finger across the screen,

00:33:53.090 --> 00:33:55.210
your TouchesMove method
is repeatedly called.

00:33:55.450 --> 00:33:59.060
So this provides a chance for
you to give user feedback.

00:33:59.090 --> 00:34:01.900
And then finally, as the user lifts his
finger from the screen,

00:34:01.950 --> 00:34:05.860
your TouchesEnded method is called,
and now you can go ahead and determine

00:34:05.860 --> 00:34:07.920
what type of a gesture this was.

00:34:09.760 --> 00:34:13.520
But multi-touch is really only one of
the input devices or one of the ways

00:34:13.520 --> 00:34:15.180
to input information into the iPhone.

00:34:15.180 --> 00:34:18.020
Another very interesting way
is to use the accelerometer.

00:34:18.020 --> 00:34:23.370
So the accelerometer gives
you very fine detail as to the

00:34:23.430 --> 00:34:27.340
gravitational pull along the X,
Y, and Z axis.

00:34:27.340 --> 00:34:30.470
And it will call back into your
application up to 100 times a second.

00:34:30.480 --> 00:34:33.480
So it can detect little changes
in the orientation you make.

00:34:33.550 --> 00:34:35.820
Or I've often seen applications
where if you shake them,

00:34:35.820 --> 00:34:38.180
it will go ahead and erase
whatever you have on screen,

00:34:38.180 --> 00:34:39.000
as an example.

00:34:39.600 --> 00:34:45.160
And then view controllers also implement
some higher level delegate routines to,

00:34:45.230 --> 00:34:47.720
for instance,
detect the rotation of your iPhone.

00:34:47.720 --> 00:34:50.280
So as you move it from
portrait to landscape mode,

00:34:50.430 --> 00:34:53.640
it will automatically call you
back and give you a chance to relay

00:34:53.640 --> 00:34:57.240
out your user interface to take
advantage of that wider display.

00:34:58.670 --> 00:35:01.000
So we have a great session
called the iPhone Multi-Touch

00:35:01.000 --> 00:35:03.490
Events and Gestures Session.

00:35:03.890 --> 00:35:07.750
The session has some terrific
sample code associated with it that

00:35:07.750 --> 00:35:11.700
really gives you a good head start
on supporting things like rotation

00:35:11.700 --> 00:35:13.640
and those zooming pinch gestures.

00:35:13.640 --> 00:35:17.790
So if you're interested
at all in multi-touch,

00:35:17.790 --> 00:35:17.790
I highly suggest you go to this session.

00:35:18.950 --> 00:35:23.950
So we've talked about kind of the basics
of developing Mac software and the basics

00:35:23.980 --> 00:35:25.400
of developing an iPhone application.

00:35:25.400 --> 00:35:27.740
But when you think about
integrating a new technology,

00:35:27.780 --> 00:35:30.560
sometimes you think, oh my gosh,
that sounds like a lot of work.

00:35:30.580 --> 00:35:32.480
I'm going to have to roll up my screens.

00:35:32.480 --> 00:35:34.890
I mean,
wouldn't it be nice if integrating a

00:35:34.890 --> 00:35:37.700
new technology were as easy as one,
two, three?

00:35:37.740 --> 00:35:39.470
So let's take a look at that.

00:35:39.770 --> 00:35:41.300
Core location.

00:35:41.580 --> 00:35:44.820
So when I think of my iPhone,
I think of it as a personal computer.

00:35:44.850 --> 00:35:46.960
I mean,
it's a computer and it's on my person.

00:35:46.960 --> 00:35:50.460
So why not take advantage of
the functionality it has and use

00:35:50.490 --> 00:35:52.580
technologies like core location?

00:35:52.580 --> 00:35:56.480
You simply supply a delegate and it
will call you back with changes in

00:35:56.480 --> 00:35:58.890
your latitude and longitude changes.

00:35:59.370 --> 00:36:03.180
What's nice about the API is
it's designed to work regardless

00:36:03.280 --> 00:36:04.600
of the hardware installed.

00:36:04.600 --> 00:36:08.710
So it'll work the same API across
triangulation through the edge network,

00:36:08.770 --> 00:36:12.080
Wi-Fi hotspots, or even GPS locations.

00:36:12.080 --> 00:36:17.420
So let's go ahead and see what it takes
to integrate a technology like that,

00:36:17.590 --> 00:36:18.890
core location, into our application.

00:36:18.900 --> 00:36:21.320
Well, it's just three lines of code.

00:36:21.360 --> 00:36:23.720
The first line,
we're going to go ahead and allocate

00:36:23.720 --> 00:36:27.240
memory for our core location object
and tell it to initialize itself.

00:36:28.060 --> 00:36:29.980
Then we're going to go
ahead and set the delegate.

00:36:29.980 --> 00:36:33.030
99 out of 100 times,
you're going to set the delegate to self.

00:36:33.150 --> 00:36:36.030
It's typically a controller class that's
going to initialize the object and wants

00:36:36.030 --> 00:36:37.740
to get notified of changes that are made.

00:36:37.760 --> 00:36:41.000
And finally,
we tell core location to start updated.

00:36:41.000 --> 00:36:42.240
It's that simple.

00:36:45.020 --> 00:36:48.040
So we've got a session on core location,
the accelerometer,

00:36:48.070 --> 00:36:51.840
and using the camera on Presidio
on Thursday evening at 5.

00:36:53.300 --> 00:36:55.890
So how else can you personalize
the experience on your iPhone?

00:36:56.070 --> 00:36:59.400
Well, you can add address book
information in there.

00:37:00.220 --> 00:37:04.420
So using the address book APIs,
you can query contacts, add contacts,

00:37:04.420 --> 00:37:06.890
delete contacts,
and then when you plug your iPhone in,

00:37:06.980 --> 00:37:11.290
it will automatically sync with your
address book on your desktop machine.

00:37:11.580 --> 00:37:14.820
So what does it take to
display the address book like

00:37:14.890 --> 00:37:17.380
this in your own application?

00:37:17.650 --> 00:37:19.100
Seems like a lot of work.

00:37:19.150 --> 00:37:21.500
Well, again,
it's just three lines of code.

00:37:21.580 --> 00:37:24.000
We're going to go ahead and allocate
in it the address book controller,

00:37:24.000 --> 00:37:28.560
set its delegate to self,
and then tell it to display itself,

00:37:28.560 --> 00:37:30.650
and it'll come animating in.

00:37:30.650 --> 00:37:32.480
And then as the user
selects one of these names,

00:37:32.530 --> 00:37:35.940
it'll call your delegate method back with
the information about what was selected.

00:37:39.150 --> 00:37:42.840
So Alex Abas,
the engineer that wrote the address

00:37:42.840 --> 00:37:45.130
book for Mac OS X and iPhone,
is giving a session on

00:37:45.140 --> 00:37:46.880
Thursday morning at 9.

00:37:48.800 --> 00:37:50.490
So what else is available on the phone?

00:37:50.490 --> 00:37:51.780
Well, there's a camera.

00:37:51.780 --> 00:37:54.820
So using the UI image picker class,
you can have access to all

00:37:54.820 --> 00:37:56.250
the albums on your iPhone.

00:37:56.250 --> 00:37:57.970
You can tell it to take a picture.

00:37:57.970 --> 00:38:01.360
And when you tell it to take a picture,
it'll go ahead and create that

00:38:01.360 --> 00:38:04.570
user experience for you so that
when the user clicks the button,

00:38:04.680 --> 00:38:05.870
it'll snap the picture.

00:38:05.870 --> 00:38:08.050
You can resize it, crop it, and so forth.

00:38:08.060 --> 00:38:11.390
And you can also save arbitrary
images back into the photo album.

00:38:11.440 --> 00:38:14.910
And then the next time you sync that
phone with your desktop computer,

00:38:14.910 --> 00:38:16.630
those pictures will be uploaded.

00:38:16.800 --> 00:38:18.670
It will be synced to your iPhone.

00:38:18.700 --> 00:38:20.370
your computer.

00:38:20.800 --> 00:38:24.830
So again, how do we integrate all this
technology into your application?

00:38:24.830 --> 00:38:28.310
Are you guys seeing a pattern here?

00:38:28.890 --> 00:38:31.220
Allocate an init,
set the delegate to self,

00:38:31.220 --> 00:38:33.300
and then ask it to present itself.

00:38:33.440 --> 00:38:34.400
And it's just that easy.

00:38:34.400 --> 00:38:36.260
Then as the user selects
one of these pictures,

00:38:36.260 --> 00:38:39.680
it will call your delegate method for you
to interpret it and pull the image out.

00:38:41.180 --> 00:38:43.440
But the image picker is just one of
the kind of the media technologies

00:38:43.440 --> 00:38:44.400
that we have on the phone.

00:38:44.400 --> 00:38:48.860
I think the Mac has had a long
history of really forging ahead

00:38:48.860 --> 00:38:50.500
on the media technologies.

00:38:50.500 --> 00:38:53.980
And what we've done is taken what
was in Mac OS 10.5 Leopard and

00:38:53.980 --> 00:38:55.770
integrated that onto the phone.

00:38:55.770 --> 00:38:59.460
So technologies like OpenGL for
embedded systems are available

00:38:59.460 --> 00:39:01.060
for your 3D graphics.

00:39:01.060 --> 00:39:03.810
Core animation has been on
the phone since day one.

00:39:03.830 --> 00:39:07.060
You can use Quartz for your
2D vector-based drawing and

00:39:07.060 --> 00:39:08.820
to go ahead and render PDF.

00:39:09.540 --> 00:39:12.800
Core audio for high-fidelity
audio input and output.

00:39:12.800 --> 00:39:17.060
We've got OpenAL to implement
surround sound within the iPhone.

00:39:17.060 --> 00:39:20.960
The media player, which is capable of
playing MPEG-4 movies.

00:39:21.010 --> 00:39:26.800
And UIKit provides a number of
other classes to manipulate images.

00:39:26.800 --> 00:39:28.840
And one of my favorites
is the UI image view.

00:39:28.840 --> 00:39:32.920
It's just the simple way of adding
an image to your application.

00:39:32.950 --> 00:39:34.370
So for instance,
if you wanted to change the

00:39:34.670 --> 00:39:36.700
background of your application,
just replace that base container

00:39:36.700 --> 00:39:37.740
view with the UI image view.

00:39:37.770 --> 00:39:42.290
And now you can give it a nice like
leather or wood grain appearance,

00:39:42.320 --> 00:39:43.560
for instance.

00:39:44.370 --> 00:39:47.040
So we've talked a little bit
about iPhone development,

00:39:47.050 --> 00:39:49.320
Mac development, but there's really a
third platform out there,

00:39:49.450 --> 00:39:52.610
and I think a lot of you
are probably web developers.

00:39:52.970 --> 00:39:57.690
So again, to add, well,
so typically in an application,

00:39:57.760 --> 00:40:01.360
you may have already
written a web application.

00:40:01.360 --> 00:40:04.520
And now you're going to go ahead
and write a native application.

00:40:04.520 --> 00:40:06.860
And when the user clicks
on one of these links,

00:40:07.040 --> 00:40:09.950
the default behavior is to go
ahead and launch Safari and maybe

00:40:10.190 --> 00:40:11.800
launch your web app in Safari.

00:40:11.800 --> 00:40:13.130
And that's going to cause
your application to quit.

00:40:13.270 --> 00:40:14.640
But that's not a great user experience.

00:40:14.700 --> 00:40:17.800
You want to keep the user in
the context of your application.

00:40:17.800 --> 00:40:22.820
So the best way to do that is to embed a
web view directly into your application.

00:40:22.900 --> 00:40:25.480
So now, again,
this is three lines of code to embed a

00:40:25.480 --> 00:40:28.980
web view directly in your application
or actually zero lines of code if

00:40:28.980 --> 00:40:30.880
you do it from Interface Builder.

00:40:30.880 --> 00:40:32.890
So here we have an embedded web view.

00:40:34.450 --> 00:40:37.820
But where this really gets interesting
now is that your native application

00:40:37.910 --> 00:40:39.700
can interact with this web view.

00:40:39.700 --> 00:40:43.540
You can actually call
JavaScript functions within

00:40:43.590 --> 00:40:46.760
the context of this web page,
or you can load your own JavaScripts or

00:40:46.760 --> 00:40:50.860
create your JavaScripts on the fly and
kind of inject them into this web page,

00:40:50.860 --> 00:40:53.740
and they will have full access
to the complete DOM over here.

00:40:53.780 --> 00:40:56.870
So, for instance,
I want to go ahead and change the style

00:40:56.870 --> 00:40:59.580
sheet from underneath this web page.

00:40:59.580 --> 00:41:01.060
Well, it's just two more lines of code.

00:41:01.550 --> 00:41:05.560
I go ahead and I load my JavaScript,
and I call one API to have it evaluate

00:41:05.560 --> 00:41:09.530
within the context of that page,
and it will switch the CSS style sheet.

00:41:09.560 --> 00:41:14.200
So we've got a great sample associated
with this session as kind of giving

00:41:14.280 --> 00:41:18.030
you a good head start on integrating
your web applications with your native

00:41:18.030 --> 00:41:19.360
applications called Style Switcher.

00:41:19.360 --> 00:41:22.820
And I also wanted to mention that
it is possible to place things

00:41:22.930 --> 00:41:26.320
like buttons within your web page,
and then when you click on that button,

00:41:26.320 --> 00:41:29.600
it can actually affect how your
native application behaves.

00:41:29.950 --> 00:41:32.430
So if I placed a take picture
button in my web page,

00:41:32.460 --> 00:41:35.380
I can click on that,
my native application can detect that,

00:41:35.430 --> 00:41:37.640
and then take a picture
using the UI image picker,

00:41:37.640 --> 00:41:38.460
for instance.

00:41:38.500 --> 00:41:41.260
So all that information is
available with the sample code.

00:41:43.520 --> 00:41:46.160
Okay, so now we've covered
all these technologies.

00:41:46.160 --> 00:41:48.250
It's been kind of a
whirlwind technology tour.

00:41:48.250 --> 00:41:51.460
And now the question is,
how do you write an iPhone

00:41:51.460 --> 00:41:53.340
application from scratch?

00:41:53.440 --> 00:41:56.400
Well,
I think maybe you've heard about that

00:41:56.480 --> 00:42:00.860
$100 million iFund and you're thinking,
I'm going to come to this session,

00:42:00.860 --> 00:42:03.300
I'm going to learn how I can grab
a piece of that $100 million iFund.

00:42:03.300 --> 00:42:06.390
And actually, we do have a session on the
iFund later on this week.

00:42:06.470 --> 00:42:07.940
I believe it's on Thursday.

00:42:08.560 --> 00:42:10.980
So I think it all
starts out with an idea.

00:42:10.980 --> 00:42:12.480
You have a great idea.

00:42:12.480 --> 00:42:15.180
You want to do a little bit of research,
see if it's feasible,

00:42:15.180 --> 00:42:16.870
see if there's any sample
code you can leverage,

00:42:16.880 --> 00:42:18.980
see the reference material,
the documentation.

00:42:18.980 --> 00:42:23.480
And I actually have a really good idea,
and it's going to make me rich.

00:42:23.480 --> 00:42:25.570
So let's go ahead and
see what that idea is.

00:42:25.640 --> 00:42:29.600
I have this idea that I'm going
to go ahead and make tutorials.

00:42:29.600 --> 00:42:31.550
This is going to be a
little native application,

00:42:31.550 --> 00:42:34.670
and I'm going to teach different things
like foreign languages or teach people

00:42:34.730 --> 00:42:36.380
how to write iPhone applications.

00:42:36.400 --> 00:42:38.370
And I'm going to put them for sale.

00:42:38.460 --> 00:42:40.490
On the iTunes Music Store.

00:42:40.520 --> 00:42:43.740
And the way writing any iPhone
application starts is by

00:42:43.750 --> 00:42:45.910
storyboarding the application.

00:42:45.920 --> 00:42:48.220
They're always going to take
multiple screenfuls of data.

00:42:48.240 --> 00:42:49.970
So if you were to look
in my office right now,

00:42:49.970 --> 00:42:52.910
you'd see tons of these little printouts
of iPhones lying around my desk,

00:42:52.910 --> 00:42:55.730
and you'd see these little stick
figures drawn all over them.

00:42:55.780 --> 00:42:59.900
And the idea is, on my main screen,
I'm going to want some sort of a title,

00:42:59.930 --> 00:43:03.380
tutor player,
and I'm going to put a play button there.

00:43:03.400 --> 00:43:05.840
And when the user clicks the play button,
I want to go ahead and

00:43:05.860 --> 00:43:08.540
launch another screen,
and that's going to show my tutorial.

00:43:08.540 --> 00:43:11.140
And I'm going to provide all
these controls on it so that

00:43:11.160 --> 00:43:14.400
the user can rewind a little bit
in case they missed something.

00:43:14.550 --> 00:43:18.080
So just by looking at this,
I can think like, OK, two screens,

00:43:18.100 --> 00:43:19.200
two controllers.

00:43:19.230 --> 00:43:20.860
That's what I'm going to need to do.

00:43:20.940 --> 00:43:23.530
So let's go ahead and walk through
the steps of what actually it

00:43:23.530 --> 00:43:25.180
takes to write this application.

00:43:29.210 --> 00:43:30.200
Excellent.

00:43:30.260 --> 00:43:31.660
So we're going to go
ahead and launch Xcode.

00:43:31.660 --> 00:43:35.260
First thing we're going to want
to do is create a new project.

00:43:35.260 --> 00:43:38.180
In this case, we're going to create
an iPhone application.

00:43:38.180 --> 00:43:40.810
You can see right off the bat,
we've got six different default

00:43:40.810 --> 00:43:42.140
templates to choose from.

00:43:42.140 --> 00:43:45.200
If you're going to write an OpenGL game,
this template will provide a

00:43:45.200 --> 00:43:46.830
GL surface for you to render on.

00:43:46.830 --> 00:43:49.680
We have some common navigation paradigms,
like a tab bar that appears at

00:43:49.680 --> 00:43:52.090
the bottom or a navigation bar
where you're going to drill down

00:43:52.090 --> 00:43:53.760
and get more detailed information.

00:43:53.760 --> 00:43:55.800
But in this case,
we're just going to create

00:43:55.800 --> 00:43:59.190
a simple iPhone application,
and I'm going to call it Tutor Player.

00:44:03.600 --> 00:44:07.600
Save it on my desktop.

00:44:07.600 --> 00:44:08.240
Great.

00:44:08.250 --> 00:44:11.790
And what we can see straight off the bat,

00:44:12.050 --> 00:44:14.340
is that we have a view controller file.

00:44:14.430 --> 00:44:16.240
So great,
it's going to create one for me.

00:44:16.270 --> 00:44:19.850
And we've got our main file
and the app delegate where

00:44:19.860 --> 00:44:21.220
everything gets kicked off.

00:44:21.250 --> 00:44:23.770
So let's go ahead and
run the application.

00:44:26.610 --> 00:44:27.430
says it's running.

00:44:27.440 --> 00:44:29.440
Oh, no, device.

00:44:29.440 --> 00:44:31.830
Okay, can we switch over to device?

00:44:31.840 --> 00:44:36.390
Marianne, do I click this button?

00:44:42.460 --> 00:44:44.400
I can build it for the simulator.

00:44:44.400 --> 00:44:46.140
Oh, I'm sorry.

00:44:46.140 --> 00:44:48.250
Oh, great.

00:44:48.390 --> 00:44:50.240
Thank you.

00:44:50.240 --> 00:44:51.380
Okay.

00:44:51.380 --> 00:44:54.640
So now we see our actual
application running on my device,

00:44:54.660 --> 00:44:55.640
on my own iPhone.

00:44:55.640 --> 00:44:57.690
Now, it looks pretty simple right now.

00:44:57.790 --> 00:45:01.040
All I see is a white screen,
so it doesn't look too fancy yet.

00:45:01.220 --> 00:45:04.110
If I quit the application,
my application is right

00:45:04.110 --> 00:45:07.470
here called Tutor Player,
and you can see that it just has

00:45:07.470 --> 00:45:09.620
a plain white square for an icon.

00:45:09.620 --> 00:45:12.350
Not too fancy yet,
but it's a good starting point.

00:45:12.400 --> 00:45:13.880
place.

00:45:14.220 --> 00:45:16.830
So let's go ahead and pop
open our view controller.

00:45:16.950 --> 00:45:19.230
So since we did see
that one white screen,

00:45:19.300 --> 00:45:22.100
I have a good idea that my
view controller is going to

00:45:22.120 --> 00:45:23.820
manage that white screen.

00:45:27.250 --> 00:45:29.000
Sorry.

00:45:29.040 --> 00:45:30.440
Can you guys see now?

00:45:30.450 --> 00:45:32.500
That was a trick,
a little bit magic behind the scenes.

00:45:32.550 --> 00:45:36.090
Actually, I just have my tutor player
view controller.h file open.

00:45:36.090 --> 00:45:39.180
As you can see,
it's derived from the UI view controller.

00:45:39.180 --> 00:45:42.620
And there's a couple
things we want to do.

00:45:43.080 --> 00:45:45.730
First,
we want to add in support to Play Movies.

00:45:46.030 --> 00:45:47.450
Now, that's not directly in UIKit.

00:45:47.520 --> 00:45:51.000
That's in a separate framework.

00:45:51.030 --> 00:45:52.660
So let me--

00:45:56.000 --> 00:46:02.000
So we're going to go ahead and include
a separate header file that has a

00:46:02.000 --> 00:46:03.400
definition for our media player.

00:46:03.400 --> 00:46:06.380
Now within our view controller,
we're going to store an

00:46:06.380 --> 00:46:07.620
instance to that movie player.

00:46:07.620 --> 00:46:10.970
And we'll just call it movie player here.

00:46:12.100 --> 00:46:14.800
And when the user
presses that play button,

00:46:14.840 --> 00:46:17.490
we want it to call one of
our action methods to have it

00:46:17.520 --> 00:46:18.960
actually start playing that movie.

00:46:18.960 --> 00:46:21.440
We want it to load that movie
and start playing that movie.

00:46:21.440 --> 00:46:24.210
So as you can see here,
this IB action keyword again will

00:46:24.220 --> 00:46:27.360
be parsed from interface builder
so it understands that this is

00:46:27.360 --> 00:46:28.940
a method that can be called.

00:46:32.090 --> 00:46:33.940
So now that we've added
this header file here,

00:46:33.940 --> 00:46:36.400
we also have to add the library.

00:46:36.490 --> 00:46:38.770
So let me open up my frameworks.

00:46:38.890 --> 00:46:41.640
I'm just going to go ahead
and find the UI kit framework,

00:46:41.640 --> 00:46:44.240
and right above it is our
media player framework.

00:46:44.240 --> 00:46:46.520
We'll go ahead and drag that in.

00:46:47.450 --> 00:46:51.470
Okay, so now we've added the path
into our Xcode build settings.

00:46:51.470 --> 00:46:53.980
And while we're adding
things into our project file,

00:46:54.030 --> 00:46:59.270
let's go ahead and add our movie and a
special icon that an artist made for us.

00:46:59.400 --> 00:47:01.520
And we'll go ahead and drag
that into the resources folder.

00:47:03.330 --> 00:47:06.360
and we'll make sure that they're
copied into the application itself.

00:47:06.360 --> 00:47:08.550
Okay, so now we've copied the
application icon in there,

00:47:08.550 --> 00:47:11.010
but we still have to kind of say
that this is the picture we want

00:47:11.010 --> 00:47:12.540
to use for our application icon.

00:47:12.570 --> 00:47:20.080
And you do that by specifying
it in your property list.

00:47:20.080 --> 00:47:20.190
You can see that there's a
key there called icon file.

00:47:20.190 --> 00:47:20.190
We'll go ahead and
tell it the name of it.

00:47:24.800 --> 00:47:25.780
Appicon.png.

00:47:25.820 --> 00:47:27.640
Looks like I spelled it correctly.

00:47:27.650 --> 00:47:29.200
Let's save that.

00:47:29.200 --> 00:47:33.210
And you'll also notice that
we have two interface builder

00:47:33.210 --> 00:47:34.540
files associated in our project.

00:47:34.540 --> 00:47:37.640
We've got the main window,
which is going to create the main window,

00:47:37.640 --> 00:47:39.680
and our two-player view controller nib.

00:47:39.710 --> 00:47:45.400
So this is the one that's
going to be responsible for

00:47:45.400 --> 00:47:45.400
that white screen that we saw.

00:47:45.400 --> 00:47:45.400
So let's go ahead and open this one up.

00:47:45.780 --> 00:47:47.700
And we see,
we just see this white screen here.

00:47:47.910 --> 00:47:48.310
Great.

00:47:48.450 --> 00:47:50.490
So far things are as we expected.

00:47:50.650 --> 00:47:54.080
So in my design, I had a label up on top.

00:47:54.430 --> 00:47:55.540
Go ahead and parse that.

00:47:55.600 --> 00:47:56.740
Drag our label in there.

00:47:56.770 --> 00:47:58.160
One of the nice things
about Interface Builder,

00:47:58.160 --> 00:48:00.460
as you can see,
as I drag it from side to side,

00:48:00.500 --> 00:48:03.460
it'll present these blue guides for me.

00:48:03.470 --> 00:48:08.500
And these guides are created according
to the user interface guidelines.

00:48:08.580 --> 00:48:10.910
So it knows which controls
are next to which controls and

00:48:10.920 --> 00:48:12.380
how far they should be apart.

00:48:12.510 --> 00:48:15.070
So we'll go ahead and
label this Tutor Player.

00:48:16.660 --> 00:48:19.610
Great, but I want to make it kind of
center justified so we can do

00:48:19.610 --> 00:48:20.950
all this from Interface Builder.

00:48:21.080 --> 00:48:23.330
The font's a little small,
so let's go ahead and bump

00:48:23.510 --> 00:48:25.200
it up to about 46 points.

00:48:25.260 --> 00:48:25.720
That looks better.

00:48:25.720 --> 00:48:28.970
And the other thing we had down
on our storyboard was a button.

00:48:28.970 --> 00:48:33.110
So let me go ahead and find a button.

00:48:33.560 --> 00:48:37.480
We'll just go ahead and drag a standard
round button into our application.

00:48:37.760 --> 00:48:40.640
I'm going to make it nice and
big so the user can't miss it.

00:48:40.690 --> 00:48:42.160
And we'll call it Play.

00:48:42.410 --> 00:48:44.480
And again, as we drag this around,
you'll see a blue guide

00:48:44.480 --> 00:48:45.840
appear when it's centered.

00:48:45.870 --> 00:48:47.510
Perfect.

00:48:47.740 --> 00:48:51.280
But myself, my phone is black,
at least this phone,

00:48:51.280 --> 00:48:53.220
until maybe my boss buys me
one of those new white ones.

00:48:53.220 --> 00:48:55.740
But the phone is black,
so I kind of like my applications to

00:48:55.810 --> 00:48:57.100
blend in with the rest of the phone.

00:48:57.100 --> 00:48:59.680
So we'll go ahead and change
the color of our background,

00:48:59.680 --> 00:49:02.160
of our main screen,
and make it black here.

00:49:02.160 --> 00:49:03.910
But now all of a sudden
we can't see our text,

00:49:03.920 --> 00:49:08.050
so let's change the color of our text,
and we'll make it kind of a gray color.

00:49:08.060 --> 00:49:11.170
But now the button stands out,
so we'll set the button color

00:49:11.210 --> 00:49:12.480
a different way in this case.

00:49:12.480 --> 00:49:15.640
Just for fun, we're going to go ahead and
set the alpha of the button,

00:49:15.640 --> 00:49:17.810
so it's going to blend in with
whatever background we have.

00:49:17.860 --> 00:49:20.790
Okay,
so the user interface looks pretty good,

00:49:20.850 --> 00:49:22.220
but there's still one
more thing we have to do.

00:49:22.220 --> 00:49:25.830
When the user clicks the play button,
we want it to call that start

00:49:25.860 --> 00:49:28.530
action method that we defined in
our view controller's header file.

00:49:28.540 --> 00:49:33.000
So in order to do that,
we can drag a connection from the

00:49:33.130 --> 00:49:34.520
play button to our controller.

00:49:34.520 --> 00:49:38.260
So by holding down the control key,
we'll drag the connection to the file's

00:49:38.330 --> 00:49:40.410
owner and click on the start action.

00:49:40.420 --> 00:49:43.680
Now file's owner really just
represents the object that

00:49:43.760 --> 00:49:45.520
loaded this interface file,
and in this case,

00:49:45.590 --> 00:49:46.520
it's our view controller.

00:49:46.520 --> 00:49:48.960
So let's go ahead and save this.

00:49:48.980 --> 00:49:55.960
Go back to Xcode,
and let's find our files.

00:49:58.680 --> 00:50:04.330
Okay, so we have already updated our
header file to contain the correct

00:50:04.460 --> 00:50:06.160
instance variables and methods here.

00:50:06.160 --> 00:50:08.600
Now let's go ahead and write
the methods that we need to

00:50:08.600 --> 00:50:10.880
go ahead and find this movie,
load it into memory,

00:50:10.880 --> 00:50:12.840
maybe we want to play the
movie in landscape mode,

00:50:12.840 --> 00:50:14.120
and add all those controls.

00:50:14.120 --> 00:50:17.800
So let's see what's involved with adding
a new technology to our application.

00:50:17.800 --> 00:50:19.070
Deric Horn, Larry Coopet

00:50:19.800 --> 00:50:21.840
Well, again,
it's just one short little method here.

00:50:21.840 --> 00:50:26.040
All we're going to do in the first
line is get the path to our movie file.

00:50:26.040 --> 00:50:27.300
It's an MPEG-4 file.

00:50:27.300 --> 00:50:32.110
Convert that file path into a URL.

00:50:32.280 --> 00:50:34.490
And because movie player
is an instance variable,

00:50:34.640 --> 00:50:37.640
the first time we run through
this start action method,

00:50:37.650 --> 00:50:39.000
we have to initialize it.

00:50:39.100 --> 00:50:42.750
So we'll go ahead and ask it to
allocate itself and initialize itself.

00:50:42.770 --> 00:50:46.330
And then once we've done that,
all we do is ask the

00:50:46.330 --> 00:50:48.200
movie player to play.

00:50:48.200 --> 00:50:48.800
It's that easy.

00:50:48.800 --> 00:50:52.900
So now let's go ahead and build and go.

00:50:55.310 --> 00:50:56.340
The build happened pretty quick.

00:50:56.400 --> 00:50:58.240
It takes just a minute to
copy all those resources,

00:50:58.340 --> 00:50:59.480
and it's a pretty big movie.

00:50:59.480 --> 00:51:03.660
So it takes a little bit of time to
copy it over the tether onto the iPhone,

00:51:03.660 --> 00:51:07.390
but let's go ahead and look
at the iPhone at this point.

00:51:09.700 --> 00:51:11.170
Okay.

00:51:11.340 --> 00:51:14.940
It's launching our application.

00:51:15.000 --> 00:51:16.460
And there we go.

00:51:16.480 --> 00:51:19.740
A little bit out of focus,
but there you go.

00:51:19.830 --> 00:51:21.740
We see the user interface
that we designed here,

00:51:21.870 --> 00:51:26.850
the title along with the play button,
and when we go ahead and

00:51:26.850 --> 00:51:26.850
touch on the play button,

00:51:30.260 --> 00:51:32.660
We can now see the movie that's playing.

00:51:32.770 --> 00:51:34.900
If we tap again,
all those standard controls

00:51:34.900 --> 00:51:35.750
come up that we'd expect.

00:51:35.840 --> 00:51:37.690
We'll hit the pause button to pause it.

00:51:37.790 --> 00:51:40.890
When we're done,
we click the done button and it

00:51:40.890 --> 00:51:42.990
goes back to our main screen.

00:51:46.100 --> 00:51:46.460
Thank you.

00:51:46.460 --> 00:51:52.080
And finally,
when we quit the application,

00:51:52.080 --> 00:51:55.420
you can see we now have a nice
little icon over there for

00:51:55.590 --> 00:51:57.000
the Tutor Player application.

00:52:06.500 --> 00:52:08.560
So again,
the sample code for this application,

00:52:08.560 --> 00:52:11.040
it was pretty simple,
but it is available for you and

00:52:11.060 --> 00:52:13.050
associated with this session.

00:52:13.190 --> 00:52:14.880
So as you saw,
adding new technologies to your

00:52:14.890 --> 00:52:17.780
applications is really pretty easy,
but you are inevitably

00:52:17.780 --> 00:52:19.630
going to run into problems.

00:52:19.630 --> 00:52:22.950
And when you do,
here's some good advice for you.

00:52:22.960 --> 00:52:25.540
One of them is when you run into
something in source code that

00:52:25.540 --> 00:52:28.880
you don't completely understand,
you can always option double-click on it,

00:52:28.880 --> 00:52:30.780
and that will bring up
the reference library.

00:52:30.780 --> 00:52:33.500
So that will tell you detailed
information about that method call,

00:52:33.570 --> 00:52:35.950
as well as kind of the broader
picture of the technology.

00:52:35.960 --> 00:52:37.940
If you're feeling a
little bit more confident,

00:52:38.010 --> 00:52:40.830
you can command double-click on it,
and it will bring up the header

00:52:40.830 --> 00:52:42.520
file with that exact definition.

00:52:44.710 --> 00:52:47.020
So I always learn through
looking at sample code,

00:52:47.020 --> 00:52:49.750
and we have some sample code
associated with this session and

00:52:49.890 --> 00:52:52.660
also associated with a number
of other sessions here at WWDC,

00:52:52.660 --> 00:52:58.290
but there's really a wealth of sample
code available at developer.apple.com.

00:52:59.860 --> 00:53:01.510
So like I said,
whether you're doing iPhone

00:53:01.560 --> 00:53:05.000
Development or Mac OS X Development,
about 90% of those concepts

00:53:05.060 --> 00:53:06.480
are exactly the same.

00:53:06.500 --> 00:53:09.320
And the book that has really become
almost the textbook and set the

00:53:09.390 --> 00:53:12.490
standard for Mac OS X Development is
Cocoa Programming for

00:53:12.490 --> 00:53:14.570
Mac OS X by Aaron Hillegas.

00:53:14.750 --> 00:53:17.830
The third edition just
came out a few weeks ago,

00:53:18.020 --> 00:53:20.470
and it also includes the
latest Leopard technologies

00:53:20.530 --> 00:53:21.820
and tools involved with that.

00:53:21.870 --> 00:53:24.120
So I highly encourage
you to buy this book,

00:53:24.330 --> 00:53:26.480
read it, and go through the examples.

00:53:27.350 --> 00:53:29.860
And lastly, WWDC.

00:53:29.860 --> 00:53:32.300
We've got a number of
great technical sessions,

00:53:32.410 --> 00:53:35.400
but what you may not have heard so much
about are the labs on the first floor.

00:53:35.400 --> 00:53:39.340
The labs are really valuable
to help you get up and started.

00:53:39.340 --> 00:53:41.600
And a lot of the time,
you're going to be working

00:53:41.600 --> 00:53:44.480
one-on-one with an engineer,
and that could be the engineer

00:53:44.510 --> 00:53:46.170
that wrote this technology.

00:53:46.480 --> 00:53:49.680
and I also encourage you to take
advantage of the social aspects of WWDC.

00:53:49.960 --> 00:53:51.970
It's a great place to
match names with faces,

00:53:52.020 --> 00:53:53.070
do some networking.

00:53:53.300 --> 00:53:54.790
We have a few events planned.

00:53:54.860 --> 00:53:58.800
I know in a few minutes we've got an
event upstairs for the WWDC reception.

00:53:58.800 --> 00:54:05.270
We've got the WWDC bash on Thursday,
which is a lot of fun.

00:54:05.270 --> 00:54:05.270
We always get a good band out there.

00:54:05.670 --> 00:54:07.470
So for those of you that
are new to the platform,

00:54:07.470 --> 00:54:09.320
I encourage you to go
to a couple sessions.

00:54:09.320 --> 00:54:12.880
Again, the iPhone
Application Development Fundamentals

00:54:12.880 --> 00:54:15.100
session is
tomorrow at 9:00 in the morning.

00:54:15.190 --> 00:54:18.020
Getting Started with Objective C:
Migrating from Other Languages

00:54:18.150 --> 00:54:19.250
is tomorrow at 2:00.

00:54:19.500 --> 00:54:22.360
And Cocoa Fundamentals
is tomorrow at 5:00.

00:54:22.400 --> 00:54:29.300
And we also have a couple labs associated
with this session that we gave today,

00:54:29.300 --> 00:54:30.490
and those are Tuesday at
2:00 and Thursday at 2:00.

00:54:30.780 --> 00:54:34.380
So in summary, I just have a few
takeaway points for you.

00:54:34.410 --> 00:54:39.530
One, view controllers are a fundamental
concept in your iPhone development.

00:54:39.810 --> 00:54:43.260
Integrating new technologies into your
application really is as easy as one,

00:54:43.260 --> 00:54:44.040
two, three.

00:54:44.040 --> 00:54:47.470
And finally, this stuff is fun.

00:54:47.500 --> 00:54:50.030
I mean, I want you guys to go back
to your hotel rooms and write

00:54:50.030 --> 00:54:52.390
a little iPhone application,
and I challenge you that

00:54:52.390 --> 00:54:54.740
when your own user interface
comes up on your own iPhone,

00:54:54.810 --> 00:54:56.970
I challenge you not to
crack a smile at that point.

00:54:56.970 --> 00:54:58.050
It really is fun.

00:54:58.050 --> 00:55:02.170
So thank you very much.

00:55:02.170 --> 00:55:04.780
If you guys have any questions,
thank you.