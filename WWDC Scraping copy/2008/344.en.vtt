WEBVTT

00:00:20.520 --> 00:00:24.450
Welcome to session 344,
Adding Rich Graphics and

00:00:24.450 --> 00:00:27.630
Media to Web Content in Safari.

00:00:29.800 --> 00:00:32.980
Everyone loves the rich media.

00:00:32.980 --> 00:00:34.140
I'm Adele Peterson.

00:00:34.140 --> 00:00:37.400
I'm an engineer on the
Safari and WebKit team.

00:00:37.500 --> 00:00:40.470
So before we get started,
I just want to do a quick

00:00:40.470 --> 00:00:42.720
survey of the crowd.

00:00:43.260 --> 00:00:48.630
Okay, who here has ever created any
web content using the image tag?

00:00:49.330 --> 00:00:50.800
All right, so we're all awake here.

00:00:50.800 --> 00:00:51.250
That's good.

00:00:51.400 --> 00:00:52.640
That's good.

00:00:52.800 --> 00:00:56.090
All right, for those images,
who here has ever used an image

00:00:56.090 --> 00:01:00.160
editor like Photoshop to get just the
right visual effect for those images?

00:01:00.160 --> 00:01:02.720
Okay, actually, still a lot of people.

00:01:02.720 --> 00:01:09.970
Who here has ever used a plug-in to add
video or audio to their web content?

00:01:09.970 --> 00:01:11.540
Wow, a lot.

00:01:11.540 --> 00:01:13.360
Okay, great.

00:01:13.680 --> 00:01:16.310
Well,
today we're going to be talking about

00:01:16.400 --> 00:01:21.160
some new ways to integrate those
rich media and graphics into your

00:01:21.190 --> 00:01:27.910
web content using some technologies
that are built right into Safari.

00:01:28.990 --> 00:01:32.720
So a lot of the things I'm going
to talk about today are actually

00:01:32.730 --> 00:01:37.800
already available in Safari 3.1,
which is out there in the wild.

00:01:37.800 --> 00:01:39.500
Everyone's using it.

00:01:39.530 --> 00:01:42.140
But a lot of the things I'm
going to talk about are new to

00:01:42.140 --> 00:01:45.080
the Safari 4 developer preview.

00:01:45.080 --> 00:01:48.350
And that was actually announced
this morning in the Safari and

00:01:48.350 --> 00:01:49.920
WebKit overview session.

00:01:49.920 --> 00:01:54.300
And it is available in your
Snow Leopard seats and on Leopard,

00:01:54.360 --> 00:01:56.350
Tiger, and Windows.

00:01:58.110 --> 00:02:00.900
So let's get started.

00:02:00.920 --> 00:02:04.290
The three main topics that we're
going to talk about today are media,

00:02:04.480 --> 00:02:06.600
graphics, and effects.

00:02:06.600 --> 00:02:09.710
And let's just dig right
in and start with media.

00:02:13.540 --> 00:02:18.000
So video and audio are becoming
more and more important on the web.

00:02:18.120 --> 00:02:23.500
Sites like YouTube have become part
of our day-to-day internet culture.

00:02:23.550 --> 00:02:25.840
I don't know about you,
but I don't know how I would be able

00:02:25.840 --> 00:02:30.540
to live without Harry Potter puppet
pals as constant entertainment.

00:02:30.680 --> 00:02:34.760
So this is becoming
more and more important.

00:02:34.830 --> 00:02:40.690
But all of these sites listed right
here actually accomplish that video and

00:02:40.690 --> 00:02:43.400
audio integration by using plug-ins.

00:02:43.400 --> 00:02:44.360
And plug-ins are great.

00:02:44.490 --> 00:02:46.200
They're really powerful.

00:02:46.200 --> 00:02:50.560
It's like having a separate little
application as a box inside your page.

00:02:50.580 --> 00:02:53.580
But it's not standard web technology.

00:02:54.570 --> 00:02:57.620
Video and audio should be just
as easy to integrate into your

00:02:57.620 --> 00:02:59.580
page as images and text are.

00:02:59.650 --> 00:03:04.180
Just imagine for a second if you
required your users to download a plug-in

00:03:04.240 --> 00:03:06.700
just to view an image on your site.

00:03:06.750 --> 00:03:09.030
A lot of them might just
throw up their hands and say,

00:03:09.030 --> 00:03:10.300
no, I'm not doing that.

00:03:10.300 --> 00:03:15.420
I'll go find some other
content out there.

00:03:15.610 --> 00:03:17.730
In the future,
we want to start making video and

00:03:17.730 --> 00:03:19.890
audio first-class citizens on the web.

00:03:20.020 --> 00:03:22.360
We want them to be just as easy
as that other content that's

00:03:22.490 --> 00:03:23.420
built right into the browser.

00:03:23.420 --> 00:03:28.340
The way we're going to do that
is by using the next evolutionary

00:03:28.470 --> 00:03:31.660
step for HTML called HTML5.

00:03:33.330 --> 00:03:37.890
HTML5 is the new specification
being developed by both the W3C,

00:03:37.890 --> 00:03:41.380
which is the World Wide Web Consortium,
and the What Working Group together.

00:03:41.380 --> 00:03:44.330
And Apple has actually been
participating with both these groups

00:03:44.330 --> 00:03:46.100
in developing the specification.

00:03:46.100 --> 00:03:49.540
Specifically,
we've been working on something

00:03:49.620 --> 00:03:51.970
called HTML5 Media Elements.

00:03:54.450 --> 00:03:58.340
And that is both the video
tag and the audio tag,

00:03:58.390 --> 00:04:01.910
just as simple as adding
an image into your page.

00:04:02.220 --> 00:04:07.100
So let me show a quick example of
how you might have achieved this

00:04:07.100 --> 00:04:09.840
media integration in the past.

00:04:10.040 --> 00:04:12.500
Here we have a video,
and in this example,

00:04:12.500 --> 00:04:17.960
we use the embed tag to use
a plug-in to play the media.

00:04:18.010 --> 00:04:20.110
And moving forward,

00:04:20.800 --> 00:04:22.930
We want it to look like this.

00:04:23.170 --> 00:04:26.540
Simple and clean and easy
to just put up there.

00:04:26.600 --> 00:04:29.010
Get that content on the web.

00:04:32.550 --> 00:04:36.680
So using the embed tag or an object tag,
if that's the past and the

00:04:36.680 --> 00:04:40.210
video tag is the future,
many of you are probably wondering, well,

00:04:40.210 --> 00:04:41.440
what about right now?

00:04:41.440 --> 00:04:45.210
So there's actually a pretty
good solution for that.

00:04:45.300 --> 00:04:47.970
In HTML, you can have content fallback.

00:04:48.040 --> 00:04:51.920
So here's an example of how you
can use the video tag or the

00:04:51.920 --> 00:04:55.220
audio tag right now in conjunction
with your existing solution.

00:04:55.380 --> 00:04:59.540
So you can try out this new technology
and start seeing what it can do

00:04:59.540 --> 00:05:02.720
while not completely abandoning
the code that works in other browsers

00:05:02.720 --> 00:05:04.110
that don't have this new support.

00:05:07.720 --> 00:05:14.500
So another type of fallback that you
might want to use is source fallback.

00:05:14.520 --> 00:05:18.580
HTML5 specifies a way to
have these source elements,

00:05:18.650 --> 00:05:22.220
which are actually children
elements of both video and audio.

00:05:22.220 --> 00:05:26.740
And this is how you can specify
different types of media.

00:05:26.740 --> 00:05:30.140
So in this example,
I've used media queries

00:05:30.140 --> 00:05:34.180
for each source element,
which specify different

00:05:34.270 --> 00:05:38.220
things about the screen size,
you know, for the device the media

00:05:38.220 --> 00:05:39.660
is being played on.

00:05:39.720 --> 00:05:44.980
And in the last example there,
there's a media rule for print.

00:05:44.980 --> 00:05:47.520
So this is just one example about
the browser will see all these

00:05:47.520 --> 00:05:50.780
different media resources and
choose the best one that fits.

00:05:50.780 --> 00:05:54.050
There's also a way to
specify different codecs.

00:05:54.130 --> 00:05:56.560
And actually in the
session tomorrow night,

00:05:56.560 --> 00:05:59.980
preparing and delivering video
for iPhone Safari and Apple TV,

00:05:59.980 --> 00:06:04.120
they'll give lots of great examples
of how to do this source fallback.

00:06:04.280 --> 00:06:06.600
So definitely check it out.

00:06:08.520 --> 00:06:12.660
So most of the things that I'm going
to talk about will apply to both the

00:06:12.660 --> 00:06:15.040
video element and the audio element.

00:06:15.080 --> 00:06:17.600
But I just wanted to make a quick
mention of some things that are

00:06:17.610 --> 00:06:18.600
special about each of those.

00:06:18.600 --> 00:06:21.030
For the video element,
there's a special attribute

00:06:21.030 --> 00:06:24.250
called the poster attribute,
which allows you to specify the

00:06:24.250 --> 00:06:27.870
URL of an image to show up while
the video is preparing to play.

00:06:27.880 --> 00:06:30.880
So that's something handy
to keep in mind for video.

00:06:30.880 --> 00:06:33.900
And for audio, well,
audio is kind of special because

00:06:33.900 --> 00:06:37.650
it doesn't usually actually have
a visual presence in the page.

00:06:38.000 --> 00:06:40.570
So most of the time,
you're going to want to use the audio

00:06:40.570 --> 00:06:44.810
element by creating it from JavaScript,
you know, creating an audio, you know,

00:06:44.810 --> 00:06:45.550
new audio.

00:06:45.560 --> 00:06:49.160
And you'll have that audio element
to manipulate in all the ways I'm

00:06:49.160 --> 00:06:50.970
going to talk about right now.

00:06:50.980 --> 00:06:53.740
So just a few quick notes
about this individually.

00:06:53.740 --> 00:06:56.360
But for the rest of the talk,
I'm going to talk about things that

00:06:56.430 --> 00:06:57.910
apply to both of those elements.

00:07:00.880 --> 00:07:06.650
So the HTML5 specification for media
elements supplies a lot of different

00:07:07.070 --> 00:07:11.920
attributes and functionality that
gives you as a developer a lot of

00:07:11.920 --> 00:07:13.560
fine-grained control over your media.

00:07:13.560 --> 00:07:15.900
So we're going to go through
a few of those examples.

00:07:15.900 --> 00:07:17.270
All right.

00:07:17.970 --> 00:07:21.680
Here I have an example of
the controls attribute.

00:07:21.680 --> 00:07:24.200
At the bottom,
you'll see a set of controls that

00:07:24.200 --> 00:07:27.020
are actually pretty similar to what
you see in the QuickTime plugin,

00:07:27.030 --> 00:07:29.940
and they'll appear and
disappear as necessary.

00:07:30.230 --> 00:07:33.260
They have some of the default behavior
that you'll probably want just to get

00:07:33.260 --> 00:07:35.900
your video up and going on your web page.

00:07:35.900 --> 00:07:42.420
So it has play, pause, mute,
slider timeline, and seek buttons.

00:07:42.420 --> 00:07:45.450
And you don't have to worry about
leaving room for it when you're

00:07:45.810 --> 00:07:50.150
specifying the size of your media,
which is really great.

00:07:50.250 --> 00:07:55.760
So this is the easiest way to just get
your content up and running on your page.

00:07:55.760 --> 00:08:01.480
When I think of this example,
I think of a novice user for HTML who can

00:08:01.480 --> 00:08:07.120
maybe put up a web page and have a few
image tags with pictures of their family.

00:08:07.120 --> 00:08:10.860
Maybe they want to put a video
of their kid on their web page.

00:08:10.860 --> 00:08:15.800
If they do this, it's just as simple as
anything else on the web.

00:08:16.160 --> 00:08:18.680
So I see this as a great way
to just get people up and

00:08:18.680 --> 00:08:21.060
running with video and audio.

00:08:21.060 --> 00:08:23.540
And actually,
the controls attribute will give the

00:08:23.550 --> 00:08:27.170
audio element a physical presence
on your page and have it just show

00:08:27.240 --> 00:08:29.000
up with those default controls.

00:08:29.160 --> 00:08:33.910
But the great thing about video is that
it's just another element on your page.

00:08:34.020 --> 00:08:39.780
So it's going to integrate and work with
different styles and layers on your page,

00:08:39.830 --> 00:08:41.320
just like any other element.

00:08:41.480 --> 00:08:45.170
So you can do a lot more
than you can with just a box

00:08:45.480 --> 00:08:46.640
for your media on the page.

00:08:46.840 --> 00:08:50.720
So many of you may want to get creative
and create your own custom controls.

00:08:50.770 --> 00:08:52.830
So we're going to go through
some examples of how you

00:08:52.830 --> 00:08:55.650
create those custom controls,
which will sort of

00:08:55.760 --> 00:08:58.020
illustrate the different--

00:08:58.190 --> 00:09:02.250
The different ways that you can have
that fine-grained control when you're

00:09:02.500 --> 00:09:04.290
programming with these elements.

00:09:04.300 --> 00:09:07.840
So the first example would
be a play-pause button.

00:09:07.860 --> 00:09:10.240
The code here is actually
pretty straightforward.

00:09:10.240 --> 00:09:14.260
You have access to a paused attribute,
and you can call play and pause

00:09:14.360 --> 00:09:15.980
directly on your video or audio.

00:09:15.980 --> 00:09:19.210
You can also listen for
events in JavaScript,

00:09:19.210 --> 00:09:20.890
like the ended event.

00:09:21.020 --> 00:09:23.820
So maybe when one video ends,
you want to start another.

00:09:24.470 --> 00:09:26.610
Maybe you want to wait until the video
is loaded enough that it's ready to

00:09:26.730 --> 00:09:28.180
play before displaying a certain image.

00:09:31.190 --> 00:09:34.560
Another example of a custom control
would be a special timeline.

00:09:34.560 --> 00:09:39.100
Maybe you would actually have
a clock displaying it or,

00:09:39.100 --> 00:09:43.500
like in the default controls,
a slider that you can scrub the media.

00:09:43.500 --> 00:09:47.400
So you have access to the
current time and the duration,

00:09:47.400 --> 00:09:50.210
the playback rate,
and also to many events

00:09:50.700 --> 00:09:52.350
like progress and load.

00:09:52.380 --> 00:09:54.970
And time update is a great one
because you get that event any

00:09:54.980 --> 00:09:56.520
time the actual time changes.

00:09:56.650 --> 00:09:59.600
So if you want to design a
counter control and every

00:10:00.040 --> 00:10:02.980
time the seconds change,
display the seconds,

00:10:02.980 --> 00:10:07.180
then you just listen for that time
update event and you've got it.

00:10:10.290 --> 00:10:13.560
and the You can check to
see if the video is muted.

00:10:13.560 --> 00:10:16.060
You can make it muted if you want.

00:10:16.140 --> 00:10:19.440
And you have access to the current volume
that you can get and set and listen

00:10:19.440 --> 00:10:22.480
for volume changes in the media itself.

00:10:23.340 --> 00:10:29.510
and the last example here is that you can
control loop properties on your media.

00:10:29.700 --> 00:10:32.540
So setting a loop start time
and end time and the number of

00:10:32.620 --> 00:10:34.760
times you want something to loop.

00:10:34.870 --> 00:10:38.260
So that's all pretty straightforward,
and I think now is a great

00:10:38.260 --> 00:10:41.950
time for a demo to show you
some of these things in action.

00:10:42.300 --> 00:10:45.940
So I'd like to invite my colleague
Stephanie Lewis up on stage to show

00:10:45.940 --> 00:10:51.130
you a little bit of the power of video
as a first-class citizen on the web.

00:10:57.960 --> 00:10:58.840
Hello.

00:10:58.840 --> 00:11:00.210
Everybody hear me?

00:11:00.250 --> 00:11:02.540
So my name is Stephanie Lewis,
and I'm going to show

00:11:02.540 --> 00:11:04.990
you some cool video.

00:11:06.180 --> 00:11:12.910
So you may have seen this earlier
in the Graphics Day of the Union.

00:11:12.910 --> 00:11:17.400
It's a pretty prototype thought
together by our team over at Apple.com.

00:11:17.400 --> 00:11:21.420
The entire page is made solely
of CSS and JavaScript and HTML,

00:11:21.430 --> 00:11:22.830
no plugins at all.

00:11:23.090 --> 00:11:25.540
And I guess,
given we have our pretty nanos,

00:11:25.680 --> 00:11:27.100
they can now play video.

00:11:27.100 --> 00:11:29.070
We want to highlight that.

00:11:30.100 --> 00:11:33.450
And what's kind of cool about this
demo is you can move things forward,

00:11:33.450 --> 00:11:37.270
move things backwards,
stop it so you can actually hear

00:11:37.390 --> 00:11:39.690
me and not listen to the ad.

00:11:40.460 --> 00:11:42.740
And it's all integrated
right into the page.

00:11:43.070 --> 00:11:47.500
And then what's even more fun is nano's,
of course, come in multiple colors.

00:11:47.570 --> 00:11:50.560
So you can have multiple videos going.

00:11:50.660 --> 00:11:52.820
Because it's integrated
directly into the page,

00:11:52.840 --> 00:11:55.920
you can have more than
one going at any time.

00:11:55.980 --> 00:11:58.410
You can fade the video in and out.

00:11:58.440 --> 00:12:00.560
Listen to exactly what
you want to listen to.

00:12:00.570 --> 00:12:03.160
If you're curious about these
animations and transitions,

00:12:03.170 --> 00:12:07.500
I recommend you stick
around for the rich UI talk.

00:12:07.520 --> 00:12:10.920
And then I'm going to show you
how we put some of this together.

00:12:15.120 --> 00:12:17.100
So going to Xcode.

00:12:17.100 --> 00:12:23.040
Actually, not going to Xcode yet.

00:12:23.200 --> 00:12:25.890
So I'm going to start off with
our basic-- we used to use

00:12:25.890 --> 00:12:28.080
the ad and we'd have the nano,
and it's kind of boring and

00:12:28.080 --> 00:12:30.100
we want to spice that up,
right?

00:12:30.100 --> 00:12:33.100
So I'm going to edit video.

00:12:33.100 --> 00:12:35.080
It's a one-line change,
as she showed you.

00:12:35.100 --> 00:12:36.100
I've listed my source.

00:12:36.100 --> 00:12:38.100
I'm going to throw controls in there.

00:12:38.100 --> 00:12:40.060
Quick deploy.

00:12:40.110 --> 00:12:42.100
Had to do it the night before.

00:12:42.840 --> 00:12:46.090
If it loads, oops, sorry, wrong step.

00:12:46.170 --> 00:12:51.680
Okay, so we've got the controls,
it plays it, I can brush through,

00:12:52.040 --> 00:12:54.180
skip back, mute it.

00:12:54.230 --> 00:12:56.550
But what we really want to do is
because Nano has these beautiful

00:12:56.630 --> 00:12:58.990
controls already built in,
we'd rather use those.

00:12:59.060 --> 00:13:01.480
So I'm going to show
you how we added that.

00:13:07.400 --> 00:13:10.350
So down here at the bottom,
I've added three anchor classes.

00:13:10.530 --> 00:13:12.470
Using CSS,
I was able to place the buttons

00:13:12.570 --> 00:13:15.100
directly over the image of the nano.

00:13:15.140 --> 00:13:18.790
And then I've called in some
simple JavaScript functions.

00:13:20.670 --> 00:13:23.610
At the top, I'm doing a little bit of
initialization just so that

00:13:23.640 --> 00:13:26.610
everything can work together.

00:13:27.000 --> 00:13:29.300
But the important part here
are these new functions.

00:13:29.370 --> 00:13:29.980
Play/Pause.

00:13:30.210 --> 00:13:32.900
It just checks to see the video's
pause and it's going to play it.

00:13:32.900 --> 00:13:37.180
And skipping backward and forward is
doing nothing more than adding to the

00:13:37.300 --> 00:13:39.900
current time or subtracting from it.

00:13:39.900 --> 00:13:43.020
And then I'm going to show you
again what that looks like.

00:13:47.660 --> 00:13:51.690
So again,
I can skip forward and pause it.

00:13:51.970 --> 00:13:55.150
And then one of the things that
I like about the Video Tag is that it

00:13:55.160 --> 00:13:57.500
integrates so easily with JavaScript.

00:13:57.520 --> 00:13:59.770
And so you can obviously
listen for events.

00:13:59.820 --> 00:14:02.660
What I want to do is I want the Nano to
be able to play more than one video.

00:14:02.830 --> 00:14:08.590
So I'm going to listen for the video
to end and then switch to a new video.

00:14:08.620 --> 00:14:11.300
And so I'm going to show
you the code for that.

00:14:15.720 --> 00:14:18.940
So again, I've added a listener in
my notification function.

00:14:18.940 --> 00:14:21.040
It's going to listen
for the video to end,

00:14:21.040 --> 00:14:22.940
and what it's doing is it's
going to call a few functions.

00:14:22.940 --> 00:14:25.070
The first function it
calls is fade audio.

00:14:25.070 --> 00:14:27.260
I want to fade it out
to fade the new one in.

00:14:27.260 --> 00:14:31.400
The only thing that's really
new here is the video volume.

00:14:31.400 --> 00:14:35.290
I'm adding and subtracting from that,
but I'm doing this by setting

00:14:35.290 --> 00:14:38.680
an interval at a regular time
so that it slowly degrades.

00:14:38.720 --> 00:14:41.260
And then, of course, when I'm done,
I want to clear the interval.

00:14:41.260 --> 00:14:44.540
And then what that does is
then it calls start next movie.

00:14:46.820 --> 00:14:49.980
All that does is it finds the
next movie that I want to use,

00:14:50.180 --> 00:14:53.830
kind of loops through an array,
loads the source, loads it,

00:14:54.100 --> 00:14:55.640
and then starts it playing.

00:14:55.640 --> 00:14:58.510
And so now let me show you that.

00:15:03.350 --> 00:15:04.300
Back to Safari.

00:15:04.300 --> 00:15:09.200
And so, again,
I can skip all the way through

00:15:09.200 --> 00:15:10.300
so we can get to the end.

00:15:10.300 --> 00:15:14.290
And it'll finish up the video.

00:15:14.300 --> 00:15:19.300
And then I'm going to start
playing something different.

00:15:27.700 --> 00:15:28.920
So that's it for that demo.

00:15:29.010 --> 00:15:31.270
So I'm going to give you back to Adele,
and she's going to tell you

00:15:31.270 --> 00:15:32.750
about some pretty graphics.

00:15:39.800 --> 00:15:44.700
I love that demo because it really
illustrates how the video fits in

00:15:44.700 --> 00:15:46.800
with the rest of the page so well.

00:15:46.930 --> 00:15:50.090
Actually,
there's a version of that demo as sample

00:15:50.120 --> 00:15:53.640
code that's associated with the session,
so definitely check it out and

00:15:53.670 --> 00:15:55.710
see how we made all that work.

00:15:55.800 --> 00:15:59.800
There's actually also another
piece of sample code that shows the

00:15:59.940 --> 00:16:04.770
content fallback technique using
the plug-in solution for browsers

00:16:04.800 --> 00:16:07.700
that don't support audio and video.

00:16:11.300 --> 00:16:13.950
Okay, graphics.

00:16:14.190 --> 00:16:19.440
So the simplest meaning of
graphics would be the image tag,

00:16:19.450 --> 00:16:21.780
like we talked about before.

00:16:21.800 --> 00:16:25.090
We're gonna go beyond the
image tag and talk about some

00:16:25.210 --> 00:16:27.100
more advanced technologies.

00:16:27.350 --> 00:16:30.540
Specifically,
we're going to talk about the canvas

00:16:30.540 --> 00:16:35.320
element and scalable vector graphics,
SVG.

00:16:36.130 --> 00:16:38.560
So first, the canvas element.

00:16:38.570 --> 00:16:41.500
The canvas element was first
introduced in Safari 2.

00:16:41.550 --> 00:16:44.700
And the best way to describe it
is to call it a scriptable bitmap,

00:16:44.730 --> 00:16:48.200
an element in your page that you
can draw into with JavaScript.

00:16:48.290 --> 00:16:53.160
So when Safari 2 shipped,
it shipped along with OS X Tiger.

00:16:53.190 --> 00:16:57.400
And Tiger was the first
OS that had Dashboard.

00:16:57.430 --> 00:17:01.510
And Dashboard widgets actually are
great examples of how Canvas is useful.

00:17:01.680 --> 00:17:06.080
The stocks widget has the dynamic
graph that is drawn with Canvas.

00:17:06.100 --> 00:17:08.700
The hands of the World Clock widget.

00:17:08.720 --> 00:17:12.770
And some of the other
animations are done with Canvas.

00:17:13.800 --> 00:17:18.800
So after we shipped that in Safari 2,
other browser vendors thought, hey,

00:17:18.800 --> 00:17:20.500
this is really cool.

00:17:20.550 --> 00:17:21.710
We all want to use this.

00:17:21.860 --> 00:17:25.500
So it is actually now included
in the HTML5 specification,

00:17:25.530 --> 00:17:29.570
and it's also implemented
in Firefox and Opera.

00:17:31.090 --> 00:17:33.100
So let's start with a
basic example of canvas.

00:17:33.120 --> 00:17:34.960
So here I have the canvas element.

00:17:34.970 --> 00:17:37.010
I've given it a width and a height.

00:17:37.230 --> 00:17:40.530
So now we're ready to draw into it.

00:17:40.690 --> 00:17:43.320
Here's a basic example of how that works.

00:17:43.320 --> 00:17:48.440
You get a 2D context for your canvas
and then you call graphics functions

00:17:48.570 --> 00:17:51.270
like fill rect here to draw into it.

00:17:51.360 --> 00:17:54.410
Now, for those of you who are familiar
with graphics programming,

00:17:54.500 --> 00:17:56.500
there's actually a lot you can do here.

00:17:56.500 --> 00:17:59.100
But we're not going to
go into all that detail.

00:17:59.100 --> 00:18:03.330
Actually, let me show you an advanced
example that uses some of these

00:18:03.330 --> 00:18:05.380
other graphics techniques.

00:18:06.440 --> 00:18:09.890
So, one of my colleagues, Oliver Hunt,
actually made this in

00:18:09.890 --> 00:18:11.420
a short amount of time.

00:18:11.420 --> 00:18:17.180
It's a particle generator and
it uses things just like fill

00:18:17.180 --> 00:18:18.740
rect to get this motion effect.

00:18:18.740 --> 00:18:23.920
So, it's kind of a pretty
little animation there.

00:18:29.070 --> 00:18:31.260
So mostly I want to talk about
some new features we've added in

00:18:31.440 --> 00:18:33.200
the Safari 4 developer preview.

00:18:33.230 --> 00:18:38.660
Mostly they're all about setting and
getting image data from a canvas element.

00:18:39.370 --> 00:18:41.720
For these functions that
I have listed up here,

00:18:41.740 --> 00:18:44.900
there's really a few different steps.

00:18:44.900 --> 00:18:49.080
And we're actually going to use an
example of image processing to illustrate

00:18:49.080 --> 00:18:51.120
how these new functions are useful.

00:18:51.120 --> 00:18:53.880
So we want to get image
data from a canvas.

00:18:53.880 --> 00:18:56.360
We want to know how to
create that image data,

00:18:56.440 --> 00:19:00.380
how to process it,
how to put image data back into a canvas,

00:19:00.390 --> 00:19:02.300
and how to save it.

00:19:02.300 --> 00:19:04.570
So let's start with get image data.

00:19:04.860 --> 00:19:06.590
Well, first let's talk about
the image processing.

00:19:06.710 --> 00:19:10.180
So we have Bentley the dog here.

00:19:10.210 --> 00:19:13.020
I know, everyone's a sucker for puppies.

00:19:13.040 --> 00:19:16.870
So we have Bentley the dog here,
and there's a really easy way to get

00:19:16.870 --> 00:19:18.650
that image into a canvas element.

00:19:18.970 --> 00:19:20.320
There's a drawImage method.

00:19:20.430 --> 00:19:22.970
So using drawImage,
we have Bentley the dog

00:19:23.040 --> 00:19:25.210
in our canvas element.

00:19:25.910 --> 00:19:27.670
So now let's start with Get Image Data.

00:19:27.740 --> 00:19:29.320
It's a pretty simple syntax.

00:19:29.350 --> 00:19:32.620
And what you get out of that
is an image data object.

00:19:32.630 --> 00:19:36.920
Image data has a width and a height,
and most importantly, a data member.

00:19:36.960 --> 00:19:39.680
And that data member
is just a pixel array.

00:19:40.300 --> 00:19:44.680
Let's say you want to create
your image data from scratch.

00:19:44.680 --> 00:19:47.400
We have a create image data function.

00:19:47.400 --> 00:19:51.140
In this example,
we're using it to create what is going

00:19:51.140 --> 00:19:54.200
to be the output of our image processing.

00:19:54.200 --> 00:19:57.660
So, actually, if I step back a slide,
in this example,

00:19:57.800 --> 00:20:01.000
we have an image data object
input and that's going to be

00:20:01.000 --> 00:20:03.170
Bentley the dog's image data.

00:20:03.430 --> 00:20:05.080
and now we're creating output.

00:20:05.080 --> 00:20:10.200
OK, so now let me show you an example
of some simple image processing.

00:20:10.290 --> 00:20:19.160
This is actually how you would do
the invert effect for image data.

00:20:19.160 --> 00:20:21.870
You can see here there are a few
different for loops that are going

00:20:22.070 --> 00:20:23.720
to loop through the data structures.

00:20:23.720 --> 00:20:28.660
And we take the input data, do some math,
and compute what we want

00:20:28.660 --> 00:20:30.500
our output data to be.

00:20:30.630 --> 00:20:34.080
And so for input and output,
which are image data objects,

00:20:34.190 --> 00:20:39.240
we use the data member as an array
to manipulate that image data.

00:20:39.560 --> 00:20:42.550
So we've done all this fancy math,
and now we want to see

00:20:42.550 --> 00:20:43.920
what it looks like.

00:20:43.920 --> 00:20:47.080
So we're going to put that image data,
the output image data,

00:20:47.110 --> 00:20:49.540
back into our canvas element.

00:20:49.750 --> 00:20:51.400
It's pretty simple.

00:20:51.460 --> 00:20:53.700
Just use put image data.

00:20:53.700 --> 00:20:57.690
And now this is what would show up
in your page in the canvas element.

00:20:58.790 --> 00:20:59.690
Okay.

00:20:59.690 --> 00:21:05.020
So now let's say you
want to save that image.

00:21:05.020 --> 00:21:08.140
Use it on the client side, maybe without,
you know,

00:21:08.140 --> 00:21:10.070
making a server round trip or maybe with.

00:21:10.150 --> 00:21:15.570
So here are some ways to use this new
function to data URL to have more control

00:21:15.650 --> 00:21:18.520
over what happens to that new image.

00:21:18.970 --> 00:21:23.360
So in the first example here, well,
so to data URL has an optional parameter.

00:21:23.360 --> 00:21:26.100
You can pass it a
MIME type or you can not.

00:21:26.170 --> 00:21:29.260
I think the default is
actually image ping.

00:21:29.260 --> 00:21:34.560
And what you'll get is
data colon as your URL.

00:21:34.560 --> 00:21:37.420
You'll actually see this
in an upcoming demo.

00:21:37.420 --> 00:21:39.550
But so there's three examples here.

00:21:39.550 --> 00:21:43.180
The first one is setting
window.location to your data URL.

00:21:43.180 --> 00:21:48.820
And this will just load as the main
document of your page the canvas.

00:21:48.840 --> 00:21:52.780
And the second example,
we're setting the text

00:21:52.930 --> 00:21:55.430
area's value to the data URL.

00:21:55.540 --> 00:21:58.750
And that way you could upload it in a
form if you wanted to let the server

00:21:58.750 --> 00:22:00.650
have some information about that.

00:22:00.990 --> 00:22:05.570
And the third example is to
save it with local storage.

00:22:05.680 --> 00:22:07.420
And actually,
this is just a little preview

00:22:07.420 --> 00:22:11.770
of the offline data session that
you'll see later in the week.

00:22:11.810 --> 00:22:14.010
So definitely check that out if
you're interested in learning

00:22:14.010 --> 00:22:15.930
more about local storage.

00:22:17.150 --> 00:22:20.670
There are a few safety measures to
keep in mind for getting image data.

00:22:20.780 --> 00:22:24.300
If you draw into your canvas with
an image from another domain,

00:22:24.440 --> 00:22:27.190
we're going to consider
that canvas context to be

00:22:27.190 --> 00:22:29.000
unsafe for getting data out.

00:22:29.180 --> 00:22:31.850
So, two-data URL and get image data
aren't going to work in that case.

00:22:32.140 --> 00:22:34.440
And the same is true if you
draw from another unsafe canvas

00:22:34.480 --> 00:22:35.710
into your current canvas.

00:22:35.780 --> 00:22:38.980
So,
that's just something to keep in mind.

00:22:40.640 --> 00:22:43.820
The last new feature I want to
tell you about is the new ability

00:22:43.820 --> 00:22:46.340
to use Canvas as a CSS image.

00:22:46.340 --> 00:22:49.480
Anywhere in CSS that you
currently use an image URL,

00:22:49.810 --> 00:22:51.500
you can use a Canvas image.

00:22:51.610 --> 00:22:56.790
In this example,
we've specified an identifier when

00:22:57.000 --> 00:23:02.640
you get the 2D Canvas context,
and then you can use that

00:23:02.640 --> 00:23:05.390
identifier later from CSS.

00:23:05.750 --> 00:23:08.800
Here in this example, it's backgrounds,
but you can use it for borders and pretty

00:23:08.800 --> 00:23:11.700
much anywhere else that you use an image.

00:23:11.950 --> 00:23:14.780
So now is a great time for another demo
to show you some of the power of what

00:23:14.860 --> 00:23:17.680
these new functions can do for you.

00:23:17.680 --> 00:23:19.800
So, Stephanie.

00:23:25.210 --> 00:23:26.730
Hello again.

00:23:26.860 --> 00:23:30.550
So what I'm going to show you
is the new features we've added,

00:23:30.550 --> 00:23:34.300
so specifically get image data,
implements data, and two data URL.

00:23:34.300 --> 00:23:38.620
I've written up a quick
little image processing app.

00:23:38.850 --> 00:23:41.840
As you can see,
we have our beautiful Safari icon.

00:23:41.840 --> 00:23:47.530
And with the code that I've talked about,
I can easily add effects,

00:23:47.620 --> 00:23:50.190
say like grayscale or something
a little more exciting,

00:23:50.350 --> 00:23:54.580
use some displacement maps and ripples,
easily stack them together

00:23:54.580 --> 00:23:59.200
so I can say do an inversion.

00:23:59.200 --> 00:24:03.200
They make it kind of big.

00:24:03.200 --> 00:24:08.210
And then when I'm ready, I can decide,
when I've decided on what

00:24:08.210 --> 00:24:10.820
I'm going to look at,
I can easily pick what

00:24:10.920 --> 00:24:12.140
kind of output I want.

00:24:12.200 --> 00:24:15.060
In this case, I'm going to just take a
ping and export the file.

00:24:15.730 --> 00:24:18.430
Up at the above,
you can see we have a dated image URL.

00:24:18.430 --> 00:24:24.460
It specifies the MIME type and
then goes on for quite some time.

00:24:24.940 --> 00:24:31.300
And then I can easily just
save the image to my downloads,

00:24:31.300 --> 00:24:37.690
open up in preview,
do whatever I want with it.

00:24:42.200 --> 00:24:46.140
Do you think they'll let me
replace the default icon?

00:24:46.310 --> 00:24:49.580
And so now I'm going to show you
what I did to get to that code.

00:24:50.880 --> 00:24:53.090
For HTML, all I have is a canvas.

00:24:53.200 --> 00:24:55.660
I didn't have to add any
special processing there.

00:24:56.090 --> 00:24:58.990
Most of the work is done in JavaScript.

00:24:59.230 --> 00:25:04.280
At the beginning, I have a new image,
draw my compass image so

00:25:04.280 --> 00:25:05.200
it's up there and pretty.

00:25:05.200 --> 00:25:10.910
Get the canvas, get its context.

00:25:11.250 --> 00:25:15.680
Clear any previous effects out
because who wants to have multiple

00:25:15.730 --> 00:25:18.490
effects on top of each other?

00:25:19.970 --> 00:25:24.300
Then I draw the image out,
get the pixel data,

00:25:24.300 --> 00:25:26.490
this gives me the pixel array.

00:25:26.820 --> 00:25:29.540
At which point I can do whatever
fancy math I want to do.

00:25:29.540 --> 00:25:32.700
Go see Graphics 101 if you
want to know how I'm doing it.

00:25:32.700 --> 00:25:36.420
And then I can just put
the image data back.

00:25:36.630 --> 00:25:38.400
And then finally,
when I want to export the image,

00:25:38.730 --> 00:25:41.170
most of this is dealing
with choosing the mind type,

00:25:41.280 --> 00:25:42.420
but I'm just saying the window location.

00:25:42.490 --> 00:25:44.490
So, what, three lines of code?

00:25:44.510 --> 00:25:49.270
And so then before I finish,
I'll show you one more effect.

00:25:49.440 --> 00:25:52.490
This one's my favorite.

00:25:53.500 --> 00:25:57.300
Oops,
didn't quite work with both of them.

00:25:57.300 --> 00:25:59.770
And then I'll give you back to Adele.

00:26:07.040 --> 00:26:08.640
Thanks, Stephanie.

00:26:08.640 --> 00:26:13.100
I love the glass boxes.

00:26:13.100 --> 00:26:15.350
So that was a quick
run-through of Canvas.

00:26:15.540 --> 00:26:19.150
Definitely check out these new methods
and see what you can do with them.

00:26:22.700 --> 00:26:27.650
Scalable Vector Graphics, SVG.

00:26:27.800 --> 00:26:31.420
SVG is an XML graphics language.

00:26:31.420 --> 00:26:36.550
And it's kind of a bigger fish in
some ways than the canvas element.

00:26:36.560 --> 00:26:39.590
A canvas element,
you have this element on the page and

00:26:39.590 --> 00:26:44.030
you draw into it and what you've drawn
is just part of that one element.

00:26:44.030 --> 00:26:50.250
But SVG is a whole XML document
that you can navigate using

00:26:50.250 --> 00:26:51.790
normal DOM traversal methods.

00:26:51.790 --> 00:26:55.370
And also, it's scalable.

00:26:55.410 --> 00:26:57.440
That's one way it's
different from canvas.

00:26:57.920 --> 00:27:04.260
So, when you have an image made in SVG,
you know, it can scale up in your page

00:27:04.260 --> 00:27:05.360
and look beautiful at any size.

00:27:05.860 --> 00:27:09.410
So here's a basic example
of an SVG document.

00:27:09.730 --> 00:27:14.260
Now, this is what you would load as
the main document in your page.

00:27:14.260 --> 00:27:17.320
SVG content can also be
mixed with HTML and-- well,

00:27:17.320 --> 00:27:19.000
XHTML.

00:27:19.150 --> 00:27:22.690
But a document like this could
be the source of an iframe.

00:27:22.940 --> 00:27:27.940
With this basic example,
you have different elements

00:27:28.070 --> 00:27:30.940
for all the graphical things
that show up in your page,

00:27:30.940 --> 00:27:33.990
so you can get to them
later and manipulate them.

00:27:36.900 --> 00:27:40.120
One of the new features in
Safari 3.1 was the ability to

00:27:40.120 --> 00:27:43.800
reference SVG from HTML and CSS.

00:27:43.800 --> 00:27:47.770
So here we have an example of it
as the source of an image tag and

00:27:47.830 --> 00:27:53.730
also as a URL that can be used
anywhere an image can be used in CSS.

00:27:53.960 --> 00:27:59.790
So these are really handy for reusing
your SVG artwork in beautiful,

00:27:59.880 --> 00:28:03.800
awesome ways within your
normal HTML content.

00:28:05.270 --> 00:28:08.990
Another way to use SVG from
HTML is to use SVG fonts.

00:28:09.100 --> 00:28:14.070
Well, here's an example of how you would
draw a glyph for a font in SVG.

00:28:14.070 --> 00:28:16.050
But that's not really the point.

00:28:16.050 --> 00:28:18.740
The point is that once
you do have this awesome,

00:28:18.820 --> 00:28:22.900
beautiful, scalable font in SVG,
it's really easy to use from HTML.

00:28:22.900 --> 00:28:26.840
And here's an example of how we've
used font face and defined a font

00:28:26.950 --> 00:28:30.740
family name that can be used later
that references that SVG font.

00:28:30.850 --> 00:28:35.640
This is actually kind of part of
the new web fonts feature that will

00:28:35.640 --> 00:28:39.970
be talked about a little bit more
in the Creating Rich User Interface

00:28:39.970 --> 00:28:41.750
session coming up at 5 p.m.

00:28:41.760 --> 00:28:44.750
That's sort of the same
technique with TrueType fonts.

00:28:45.170 --> 00:28:47.630
There are a lot of benefits
to doing this with,

00:28:47.630 --> 00:28:51.240
you know, referencing a font,
a custom font from HTML.

00:28:51.240 --> 00:28:52.880
Usually, this type of font is not
going to be used in SVG.

00:28:52.880 --> 00:29:03.210
So, this is really handy.

00:29:05.860 --> 00:29:10.430
Another new feature in
Safari 3.1 is SVG text on a path.

00:29:10.880 --> 00:29:11.800
So this is kind of cool.

00:29:11.800 --> 00:29:15.580
You can define paths in SVG,
as you can see here with

00:29:15.580 --> 00:29:17.220
some arcs and lines.

00:29:17.250 --> 00:29:22.370
And then it's really easy to just tell
your text path to use the path that

00:29:22.370 --> 00:29:25.380
you specified earlier in your document.

00:29:29.200 --> 00:29:35.880
And another big feature in Safari for
developer preview is SVG animation.

00:29:35.880 --> 00:29:37.780
Again,
here's a very simple example of how

00:29:37.780 --> 00:29:40.190
I move that box across the screen.

00:29:40.210 --> 00:29:44.640
I just have a rectangle and I use
that animate motion tag to tell it

00:29:44.690 --> 00:29:47.740
where to move and how long to move to.

00:29:47.740 --> 00:29:51.240
And there are a few different
things that you can tweak here.

00:29:51.240 --> 00:29:55.770
We actually have support for
a bunch of different advanced

00:29:55.890 --> 00:29:57.750
features for animation here.

00:29:57.750 --> 00:30:02.460
And I actually want to show you a quick
example of something I came up with a

00:30:02.460 --> 00:30:05.300
few days ago to illustrate some of this.

00:30:06.800 --> 00:30:09.020
So here we have the funny bee.

00:30:09.030 --> 00:30:13.580
I actually got the funny
bee from openclipart.org,

00:30:13.590 --> 00:30:16.400
which has a bunch of SVG images
that are in the public domain.

00:30:16.400 --> 00:30:20.780
I myself am not artistically talented,
so it's a good thing they

00:30:21.240 --> 00:30:23.220
had this library out there.

00:30:23.220 --> 00:30:26.340
Basically, what I did is I went in and
I found the different elements

00:30:26.340 --> 00:30:30.360
that represented the bee's wings,
and I animated those.

00:30:30.360 --> 00:30:34.760
And they also defined a path and
had the bee move around that path.

00:30:34.760 --> 00:30:38.440
So here in the code example,
we have the animate motion tag,

00:30:38.440 --> 00:30:41.590
and it just references this
path that I called Bee Motion.

00:30:41.600 --> 00:30:45.610
So that's how the bee is
moving around the page.

00:30:46.670 --> 00:30:48.730
Here's the example of how
I made the wings animate.

00:30:48.910 --> 00:30:53.020
I used this animate transform
tag and told it to rotate,

00:30:53.020 --> 00:30:55.890
at certain times,
a certain number of degrees.

00:30:56.100 --> 00:30:58.820
Some of them go from 0
to negative 15 degrees,

00:30:58.820 --> 00:31:02.790
back to 0, and some from 0 to 15 to 0.

00:31:02.890 --> 00:31:06.780
And this actually uses an
additive animation because the

00:31:06.980 --> 00:31:10.240
bee itself is already scaled
and transformed in other ways.

00:31:10.480 --> 00:31:14.020
So this is just a short example
of some of the powerful things

00:31:14.020 --> 00:31:16.100
you can do with SVG animation.

00:31:16.940 --> 00:31:18.890
Some of the references that you
should probably check out if

00:31:18.890 --> 00:31:22.420
you're interested in this is,
of course, the W3C site about SVG,

00:31:22.420 --> 00:31:26.660
their animation spec,
and I'm a big fan of openclipart.org,

00:31:26.820 --> 00:31:32.220
so I wanted to just tell you about that
as a quick way to get started with SVG.

00:31:33.660 --> 00:31:38.000
That was an overview of some of the
more advanced graphic techniques.

00:31:38.050 --> 00:31:41.620
Now we're going to talk about effects.

00:31:42.230 --> 00:31:44.390
When I talk about effects,
I mean all the things that

00:31:44.430 --> 00:31:49.070
you might do to your image
beforehand in an image editor.

00:31:49.140 --> 00:31:51.740
So a few examples of those
types of effects that are now

00:31:51.740 --> 00:31:54.860
included in CSS and have been,
some of them for a while,

00:31:54.930 --> 00:31:58.310
are things like rounded
corners or drop shadows.

00:31:59.060 --> 00:32:05.110
So these are all things that are
all over web UI and desktop UI.

00:32:05.640 --> 00:32:10.340
And for some of them-- for example,
rounded corners.

00:32:10.360 --> 00:32:14.590
Before border radius was added
to the CSS3 spec and browsers

00:32:14.650 --> 00:32:17.000
started to implement that,
people had all kinds of

00:32:17.030 --> 00:32:20.320
complicated techniques for
coming up with this effect.

00:32:20.420 --> 00:32:24.600
Some of it used different images
stitched together in just the right way.

00:32:24.610 --> 00:32:27.300
And I know for some
of box shadow effects,

00:32:27.370 --> 00:32:31.240
people either had to pre-process the
image and add the shadow beforehand.

00:32:31.270 --> 00:32:34.470
Or some people even wrote
complicated canvas libraries

00:32:34.950 --> 00:32:38.100
to add the shadow on the fly,
which is great.

00:32:38.120 --> 00:32:40.590
It just is a lot of code.

00:32:40.950 --> 00:32:46.110
So some of the new CSS effects
that I want to show you will

00:32:46.120 --> 00:32:49.460
take something like this,
which is an example of how you

00:32:49.460 --> 00:32:55.370
used to do rounded corners,
to this, which is how we now do rounded

00:32:55.420 --> 00:32:58.990
corners with border radius in WebKit.

00:33:00.480 --> 00:33:03.370
So that's all great, but of course,
you're probably wondering again,

00:33:03.370 --> 00:33:06.020
what about the other browsers that
don't support these new properties?

00:33:06.040 --> 00:33:09.320
Well, the great thing about CSS is
that it does degrade gracefully.

00:33:09.320 --> 00:33:12.440
If there's a CSS property that
a browser doesn't understand,

00:33:12.440 --> 00:33:13.570
they just ignore it.

00:33:13.600 --> 00:33:16.870
So you can either choose to
specify simpler properties

00:33:16.870 --> 00:33:20.030
for those other browsers,
or you can just rely on the

00:33:20.030 --> 00:33:24.030
fact that they'll not react
crazily to these new properties.

00:33:25.300 --> 00:33:30.760
So going forward, just a quick note about
the dash-webkit CSS prefix.

00:33:30.760 --> 00:33:34.240
This is a standard thing that
we do for things that aren't in,

00:33:34.240 --> 00:33:36.220
properties that aren't
in a final specification.

00:33:36.220 --> 00:33:40.770
So other browser vendors do this too,
and this allows us to prevent any

00:33:40.770 --> 00:33:43.350
future conflicts as the spec is in flux.

00:33:43.500 --> 00:33:46.640
You know,
so the dash-webkit border radius,

00:33:46.740 --> 00:33:48.590
if it ends up being
different from border radius,

00:33:48.730 --> 00:33:50.400
the final version,
there's no conflict with the

00:33:50.470 --> 00:33:51.860
content that's already out there.

00:33:51.860 --> 00:33:54.390
So that's just something to keep in mind.

00:33:56.110 --> 00:33:58.740
So the first effect I want
to talk about is gradients.

00:33:58.770 --> 00:33:59.890
These are all over the place.

00:33:59.970 --> 00:34:02.120
We use them in webkit.org.

00:34:02.130 --> 00:34:05.780
And this is actually achieved
on our website using images.

00:34:05.800 --> 00:34:10.580
And if we wanted to have our
site be pink instead of green,

00:34:10.580 --> 00:34:12.210
we'd have to use a different image.

00:34:12.310 --> 00:34:14.650
We'd have to do that work beforehand.

00:34:14.840 --> 00:34:18.700
So there's a lot of benefits
to doing that work on the fly.

00:34:18.820 --> 00:34:20.090
Simpler code.

00:34:20.110 --> 00:34:24.220
And why shouldn't it be as easy
as adding a background color?

00:34:24.600 --> 00:34:28.920
You can now use CSS Gradients
for backgrounds and borders and

00:34:28.920 --> 00:34:32.390
pretty much anywhere that you
would currently use an image.

00:34:32.650 --> 00:34:35.900
and this is new in the
Safari 4 developer preview.

00:34:35.920 --> 00:34:40.680
So here's a simple example of how
you would do a linear gradient.

00:34:40.710 --> 00:34:44.960
We specify that is linear,
a beginning point using some keywords.

00:34:45.110 --> 00:34:47.750
There are also some other
syntax that you can use,

00:34:47.790 --> 00:34:50.080
an endpoint,
and a beginning point for your color

00:34:50.080 --> 00:34:52.310
and an endpoint for your color.

00:34:52.940 --> 00:34:55.260
Now, that looks pretty simple,
but you can imagine if it were

00:34:55.260 --> 00:34:59.130
the background of a button that
it might look a little fancier.

00:34:59.670 --> 00:35:02.000
Here's an example of a radial gradient.

00:35:02.020 --> 00:35:06.480
Again, it's a pretty simple example,
but when it's used with the power of

00:35:06.480 --> 00:35:10.940
CSS and applied in different places,
I think you'll find that

00:35:10.940 --> 00:35:12.460
it can be really useful.

00:35:14.030 --> 00:35:15.240
Okay.

00:35:15.270 --> 00:35:18.240
The next example I want to
talk about is CSS masks.

00:35:18.240 --> 00:35:21.760
Aw, Kate Hyatt.

00:35:21.760 --> 00:35:25.300
So here we've used an SVG image
as our mask image and a picture

00:35:25.800 --> 00:35:28.230
of Kate Hyatt as our main image.

00:35:28.230 --> 00:35:31.070
And CSS masks allow us to do this effect.

00:35:31.160 --> 00:35:34.800
I've actually seen, I mean,
let's take the example

00:35:34.800 --> 00:35:36.400
of a photo gallery.

00:35:36.400 --> 00:35:41.070
Let's say you want all the photos in your
photo library to have a certain shape.

00:35:41.140 --> 00:35:43.980
And you don't want to have
to do it in Photoshop.

00:35:44.000 --> 00:35:49.630
So this is an easy way to say, you know,
all images with the class, you know,

00:35:49.740 --> 00:35:52.550
circle are going to get this effect.

00:35:55.640 --> 00:36:01.720
And here's just a quick rundown
of the different versions of that

00:36:01.830 --> 00:36:04.680
property for backgrounds and borders.

00:36:08.230 --> 00:36:14.740
Okay, the last and I think the coolest
effect is CSS reflections.

00:36:14.740 --> 00:36:19.850
Here I have a really simple example,
dash webkit dash box reflect below.

00:36:19.850 --> 00:36:21.010
Just one word.

00:36:21.040 --> 00:36:24.620
There are actually two other
parameters that you can pass,

00:36:24.620 --> 00:36:25.760
but they're optional.

00:36:25.760 --> 00:36:29.610
So you can tell it to reflect
below or above or left or right,

00:36:29.610 --> 00:36:32.740
and you get this really
simple reflection.

00:36:32.900 --> 00:36:36.360
This is another one that I've
actually seen a cool canvas library

00:36:36.400 --> 00:36:39.470
that people have included to get
those reflections on the fly.

00:36:39.490 --> 00:36:42.520
But again, it's a lot of code.

00:36:42.520 --> 00:36:45.700
And this is also something
that's really common.

00:36:45.700 --> 00:36:48.200
You see all over the place
in different kinds of UI.

00:36:48.200 --> 00:36:52.820
So people do a lot of preprocessing for
this type of thing to get that effect.

00:36:52.920 --> 00:36:56.860
And here's a slightly more advanced
example where I've actually

00:36:56.860 --> 00:36:58.970
used as a mask image a gradient.

00:36:58.970 --> 00:37:01.120
So now we're kind of tying
things together here.

00:37:01.120 --> 00:37:02.800
And this to me is a
really cool thing to do.

00:37:02.800 --> 00:37:02.800
So I'm going to go ahead and
show you a little bit of a

00:37:02.800 --> 00:37:02.880
preview of what I've done.

00:37:02.880 --> 00:37:04.610
So this to me looks like
something I would see,

00:37:04.610 --> 00:37:09.870
you know,
on a professional desktop application.

00:37:09.880 --> 00:37:14.760
So I wouldn't be surprised if
this were all over the place

00:37:14.760 --> 00:37:17.210
in a short amount of time.

00:37:20.790 --> 00:37:26.360
So we talked about effects
and graphics and media.

00:37:26.390 --> 00:37:30.050
And when you put them all together,
you get something pretty special.

00:37:30.140 --> 00:37:33.260
Safari ties that all up
for you and gives you,

00:37:33.260 --> 00:37:36.180
I think, a pretty powerful set of
tools to create this rich,

00:37:36.260 --> 00:37:37.460
beautiful content.

00:37:37.560 --> 00:37:40.780
So now I'm going to do
a quick demo for you,

00:37:40.880 --> 00:37:43.030
showing you how to put it all together.

00:37:50.470 --> 00:37:53.960
I have to be on my
tiptoes to see everyone.

00:37:53.960 --> 00:38:00.120
OK, so actually,
let's go back to the nano example that

00:38:00.120 --> 00:38:02.940
Stephanie showed you at the beginning.

00:38:05.980 --> 00:38:07.560
Let's pause it just for a sec.

00:38:07.560 --> 00:38:10.400
All right,
so here we have two iPods side by side.

00:38:10.420 --> 00:38:15.400
And the one on the right has
a little reflection built in.

00:38:15.400 --> 00:38:18.360
And actually, that's something that was
added to the image beforehand.

00:38:18.420 --> 00:38:22.330
Somebody probably spent a little
bit of time doing that effect

00:38:22.330 --> 00:38:23.750
on each image for each nano.

00:38:23.920 --> 00:38:28.330
So let's use the new
CSS reflections to add that same

00:38:28.730 --> 00:38:31.560
reflection on the other nano.

00:38:31.900 --> 00:38:36.860
. Let me show you some
CSS that I've written.

00:38:36.860 --> 00:38:41.700
I've cut two different
reflection classes.

00:38:41.700 --> 00:38:49.660
The only difference between these is
where the color stop begins and ends.

00:38:49.660 --> 00:38:52.110
Let's try this out.

00:38:55.850 --> 00:39:00.490
So here I've got a div that
actually contains all the different,

00:39:00.580 --> 00:39:02.990
you know, nano images.

00:39:03.070 --> 00:39:06.930
And I'm just going to go ahead
and add this reflect class.

00:39:09.110 --> 00:39:12.140
Save it.

00:39:12.140 --> 00:39:14.240
And here we go.

00:39:14.240 --> 00:39:17.260
So now,
hopefully you can see it from there,

00:39:17.310 --> 00:39:21.560
but the nano on the left
also has a reflection.

00:39:21.620 --> 00:39:23.380
But this reflection is live.

00:39:23.430 --> 00:39:26.780
So you can actually
see that when I pause,

00:39:26.810 --> 00:39:29.380
that highlight is live.

00:39:37.250 --> 00:39:38.310
Oh, it just gets better.

00:39:38.330 --> 00:39:40.050
All right.

00:39:40.370 --> 00:39:42.860
So OK, we'll come back to that.

00:39:43.030 --> 00:39:46.640
OK,
so now let's try that other reflection.

00:39:46.790 --> 00:39:52.490
I think it'll show a
little more of the nano.

00:39:56.100 --> 00:40:01.100
I think you'll see there that the
video is reflected live as well.

00:40:01.100 --> 00:40:04.650
You know,
I think an even better way to illustrate

00:40:04.660 --> 00:40:08.400
how this all fits in would be to
give you a little preview of the

00:40:08.400 --> 00:40:11.600
new CSS transitions and transforms.

00:40:11.710 --> 00:40:16.250
So we actually built in
some of those to this demo.

00:40:16.470 --> 00:40:18.900
I'm going to hit this menu button.

00:40:18.900 --> 00:40:20.960
I'll just give you a little show.

00:40:20.990 --> 00:40:24.300
And as it tilts,
you'll see the video is reflected.

00:40:24.300 --> 00:40:25.440
And it starts up again.

00:40:25.440 --> 00:40:27.640
And it's just part of the page.

00:40:27.670 --> 00:40:30.880
The CSS reflection is working
with all those elements.

00:40:30.880 --> 00:40:33.640
And it's just another
element on your page.

00:40:33.640 --> 00:40:36.020
Let's have it rejoin its friends here.

00:40:36.070 --> 00:40:39.580
So now you can see all
five videos are playing.

00:40:39.650 --> 00:40:42.020
And they're all reflected live.

00:40:42.060 --> 00:40:45.180
And as each nano moves around,
the video follows it.

00:40:46.400 --> 00:40:51.790
It all just fits together beautifully.

00:41:00.300 --> 00:41:07.780
Next slide.

00:41:07.780 --> 00:41:10.720
So that just gave you a taste of
how putting all these different

00:41:10.720 --> 00:41:15.290
techniques together can give
you something pretty awesome.

00:41:15.310 --> 00:41:18.440
Those are the kinds of things that
you can do with web technology

00:41:18.690 --> 00:41:20.160
before all this new stuff.

00:41:20.500 --> 00:41:22.240
I mean,
you probably have to use a plug-in.

00:41:22.450 --> 00:41:24.730
So this is all built right into Safari.

00:41:24.740 --> 00:41:27.350
It's using the technologies
you know and love.

00:41:27.640 --> 00:41:30.660
And I just think it's pretty cool.

00:41:30.660 --> 00:41:31.660
I hope you will, too.

00:41:31.660 --> 00:41:35.300
So definitely check out the
Safari 4 developer preview.

00:41:35.360 --> 00:41:38.180
And I can't wait to see
what you guys come up with.

00:41:39.400 --> 00:41:42.300
For more information,
you can contact Vicki Murley,

00:41:42.350 --> 00:41:44.700
the Safari Technologies Evangelist.

00:41:44.760 --> 00:41:47.370
And I have a few links up
here to the WebKit open source

00:41:47.540 --> 00:41:51.490
project and a few specifications
that might be useful to you.

00:41:51.550 --> 00:41:54.140
I'll just give you a second
if you need to make any notes.

00:41:54.360 --> 00:41:56.700
We can also come back to this.

00:41:59.710 --> 00:42:02.850
and some related sessions
right after this at 5:00 p.m.

00:42:02.910 --> 00:42:04.040
in North Beach.

00:42:04.080 --> 00:42:06.470
Definitely check out
Creating Rich User Interfaces

00:42:06.580 --> 00:42:08.280
for Web Content in Safari.

00:42:08.320 --> 00:42:12.980
They're going to talk about web fonts
and CSS transitions and transforms.

00:42:13.060 --> 00:42:15.880
It's going to be pretty -- it's actually
kind of related to this session,

00:42:15.900 --> 00:42:17.360
so definitely check it out.

00:42:17.390 --> 00:42:19.840
And also the Preparing and
Delivering Video for iPhone,

00:42:19.880 --> 00:42:22.660
Safari and Apple TV session,
especially if you're interested in,

00:42:22.660 --> 00:42:26.410
you know,
what kind of encoding you want to apply.

00:42:27.570 --> 00:42:31.470
And we have two labs,
the Rich Graphics and Safari Lab tomorrow

00:42:31.470 --> 00:42:34.640
at 5:00 and the Safari Compatibility
Lab on Thursday night.