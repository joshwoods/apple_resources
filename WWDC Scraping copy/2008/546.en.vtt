WEBVTT

00:00:21.100 --> 00:00:22.800
So, howdy everybody.

00:00:22.830 --> 00:00:23.530
I'm Scott Herz.

00:00:23.540 --> 00:00:26.200
I'm an engineering
manager for the iPhone.

00:00:26.260 --> 00:00:31.380
And today we're going to talk about
some of the hardware APIs that we have,

00:00:31.470 --> 00:00:34.820
specifically our location,
location frameworks,

00:00:34.940 --> 00:00:36.280
the accelerometer and the camera.

00:00:36.420 --> 00:00:40.960
So, I'm sorry if I feel like I,
it sounds like I'm talking quickly.

00:00:41.060 --> 00:00:42.420
It's not because I'm nervous.

00:00:42.490 --> 00:00:49.520
Well, I'm nervous, but more importantly,
there's 90 minutes until beer.

00:00:49.520 --> 00:00:51.270
So.

00:00:53.490 --> 00:00:56.260
So we're going to get through this fast.

00:00:56.350 --> 00:00:57.960
So yeah,
we've got a lot of cool features,

00:00:57.970 --> 00:01:00.560
and we want you guys to use them.

00:01:00.650 --> 00:01:02.480
So specifically, we've got our camera,
right?

00:01:02.630 --> 00:01:04.660
Two megapixel camera.

00:01:04.750 --> 00:01:07.300
We've got our core location.

00:01:07.370 --> 00:01:11.380
Got our radios that we can use to
figure out where the device is.

00:01:13.220 --> 00:01:18.140
We have our accelerometers,
which we use to do all

00:01:18.140 --> 00:01:19.460
sorts of cool stuff.

00:01:19.500 --> 00:01:23.420
And we've already seen-- I've been here,
what, four days now?

00:01:23.500 --> 00:01:25.540
Seen all sorts of cool stuff
that you guys are doing,

00:01:25.600 --> 00:01:28.070
so pretty excited about that.

00:01:28.750 --> 00:01:33.740
So because some of these
are sort of hardware APIs,

00:01:34.360 --> 00:01:39.560
sometimes the support for them in
the simulator is a little spotty.

00:01:39.990 --> 00:01:44.470
So when we come to situations like that,
we'll sort of let you know.

00:01:44.810 --> 00:01:47.160
So first up, our image picker.

00:01:47.300 --> 00:01:57.310
So our image picker lets you allow the
user to choose from a number of sources.

00:01:57.520 --> 00:02:00.080
So what are some of
these sources of images?

00:02:00.220 --> 00:02:02.660
So one source of images is the camera.

00:02:02.800 --> 00:02:05.770
So if you were to set up a
picker as a camera source,

00:02:05.770 --> 00:02:06.770
it'd look like this.

00:02:06.860 --> 00:02:08.460
It probably looks a little familiar.

00:02:08.520 --> 00:02:10.810
This is what the address book uses.

00:02:11.660 --> 00:02:15.070
Another source is the Save Photos album.

00:02:15.230 --> 00:02:18.260
So if you've-- maybe you
remember from the keynote,

00:02:18.360 --> 00:02:22.560
Steve mentioned that today with
the new-- with the 2.0 software,

00:02:22.600 --> 00:02:26.040
you can save photos from
Safari or from Mail.

00:02:26.040 --> 00:02:27.580
And your applications can do that too.

00:02:27.620 --> 00:02:30.600
And when you do,
they'll go into the Save Photos role.

00:02:30.770 --> 00:02:32.620
So that's another source.

00:02:32.720 --> 00:02:35.930
So the last source we have
is the photo library source.

00:02:36.070 --> 00:02:41.900
So if the user synced down a bunch of
photo albums from iTunes or iPhoto,

00:02:41.900 --> 00:02:43.480
that would be a source.

00:02:43.480 --> 00:02:46.120
They could go and pick
something from there.

00:02:46.600 --> 00:02:50.160
So how do you use this thing?

00:02:50.320 --> 00:02:51.660
What are the classes that you use?

00:02:51.720 --> 00:02:52.610
It's pretty straightforward.

00:02:52.650 --> 00:02:55.720
There's one class,
UI Image Picker Controller.

00:02:55.720 --> 00:02:58.150
It's built on top of all this
cool UI view controller stuff

00:02:58.230 --> 00:03:00.560
you've been hearing about,
and I hope you've been

00:03:00.560 --> 00:03:02.260
going to those sessions.

00:03:02.260 --> 00:03:04.890
As it is, as such,
it's kind of designed to be used as is.

00:03:04.940 --> 00:03:07.180
You really don't have to screw
with it that much at all,

00:03:07.180 --> 00:03:08.220
really.

00:03:08.220 --> 00:03:11.450
All you really need to do
is define an object that

00:03:11.510 --> 00:03:16.080
conforms to the UI Image Picker
Controller delegate protocol.

00:03:16.090 --> 00:03:18.840
And then with that delegate,
we'll send any kind of messages

00:03:19.310 --> 00:03:22.570
when interesting things happen,
like when a user chooses

00:03:22.570 --> 00:03:24.570
an image or hits cancel.

00:03:26.020 --> 00:03:31.110
So when you're using this thing,
you'll find yourself kind

00:03:31.140 --> 00:03:32.720
of doing three things.

00:03:32.910 --> 00:03:36.020
The first thing you'll do,
that you'll definitely want to do,

00:03:36.020 --> 00:03:37.660
is check the source availability.

00:03:37.750 --> 00:03:38.700
So what does that mean?

00:03:38.780 --> 00:03:45.510
Well, so say you're an application and
it has some use for the camera.

00:03:45.650 --> 00:03:47.010
You've got to keep in mind, though,
that you might not be

00:03:47.010 --> 00:03:48.410
installed on just iPhones.

00:03:48.520 --> 00:03:50.840
You might also be installed on iPods.

00:03:51.000 --> 00:03:55.390
So what you need to do before you
try to put up a camera picker,

00:03:55.490 --> 00:03:58.930
or maybe even show like any sort of
other user interface that you may have

00:03:58.930 --> 00:04:02.810
that implies that there's a camera,
check the source availability.

00:04:02.840 --> 00:04:05.280
So we'll show you how to
do that in a little bit.

00:04:05.280 --> 00:04:09.060
So next you'll assign a delegate object,
which I just alluded to

00:04:09.060 --> 00:04:10.480
a little bit earlier.

00:04:10.480 --> 00:04:13.640
And then using the UI view
controller mechanisms there,

00:04:13.710 --> 00:04:17.180
you'll present the controller
modally so it slides up from

00:04:17.190 --> 00:04:19.140
the bottom all nice like.

00:04:21.300 --> 00:04:23.700
So here's some sample
code on how to do this.

00:04:23.880 --> 00:04:26.240
It's pretty straightforward.

00:04:26.340 --> 00:04:28.550
You will, as I mentioned,
you'll check your source

00:04:28.630 --> 00:04:30.670
availability first.

00:04:31.020 --> 00:04:33.500
So in this case,
we want to present a camera picker.

00:04:33.590 --> 00:04:35.380
So we're going to look
and make sure that-- oh,

00:04:35.380 --> 00:04:37.290
yeah, there's a camera here.

00:04:38.410 --> 00:04:42.290
So once we've passed that check,
we can go ahead and alloc init

00:04:42.370 --> 00:04:43.790
our image picker controller.

00:04:44.050 --> 00:04:47.980
So keep in mind, you know,
standard Cocoa rules apply, right?

00:04:48.110 --> 00:04:54.360
So we've alloc init-ed this object,
so it's up to us to release that

00:04:54.360 --> 00:04:55.480
object after we're done with it.

00:04:55.490 --> 00:04:59.090
And I'll show you a good place
to do that in a little bit.

00:05:00.750 --> 00:05:03.430
So now we set our source type.

00:05:03.630 --> 00:05:05.490
So in this case,
we want to set the source

00:05:05.570 --> 00:05:07.240
type as being camera.

00:05:07.300 --> 00:05:08.800
We'll put up a camera picker.

00:05:08.870 --> 00:05:11.140
And we'll specify the
delegate as being self.

00:05:11.260 --> 00:05:16.480
So what this means here is that we're
saying that this-- in this example,

00:05:16.480 --> 00:05:19.140
I'm saying that we're doing this
from a UI View Controller object,

00:05:19.380 --> 00:05:20.290
which makes sense, right?

00:05:20.300 --> 00:05:22.960
It's typically how you would
kind of build your application.

00:05:22.960 --> 00:05:26.620
We want to have maybe a button,
and when you press it,

00:05:26.660 --> 00:05:27.870
this camera picker pops up.

00:05:27.970 --> 00:05:31.420
And so a great way to do that is
from your own View Controller.

00:05:31.420 --> 00:05:34.130
So what we're saying is, though,
that this View Controller that you

00:05:34.250 --> 00:05:39.120
have has implemented the delegate
protocol that I mentioned earlier.

00:05:40.520 --> 00:05:43.810
So once you've done all that,
you're good to go,

00:05:43.810 --> 00:05:46.200
and you can present the view controller.

00:05:46.240 --> 00:05:48.400
And here again, like I say,
we use the standard view controller

00:05:48.400 --> 00:05:50.320
way of kind of doing that.

00:05:50.450 --> 00:05:55.520
So we're presenting the picker,
and we're doing it in a nice animated

00:05:55.520 --> 00:05:58.700
way so it slides up from the bottom.

00:05:59.960 --> 00:06:04.680
So that'll happen,
and the user will pick an image.

00:06:04.680 --> 00:06:06.220
And because there's a
few different sources,

00:06:06.290 --> 00:06:08.600
there's a few different UIs,
like I showed you earlier,

00:06:08.640 --> 00:06:10.840
one thing that is common among them,
however,

00:06:10.840 --> 00:06:14.070
is that they will be given-- the user
will be given an opportunity to either

00:06:14.150 --> 00:06:18.920
cancel and tear down the picker,
or actually choose the image.

00:06:19.050 --> 00:06:21.680
So in this case,
we've got these buttons here.

00:06:21.730 --> 00:06:23.080
What happens when you hit those buttons?

00:06:23.130 --> 00:06:25.390
Well, then your delegate gets involved.

00:06:25.480 --> 00:06:27.160
So there are these two
methods in the delegate.

00:06:27.160 --> 00:06:28.480
It's pretty straightforward.

00:06:28.530 --> 00:06:30.810
There's either the top one,
which covers the case where

00:06:30.820 --> 00:06:34.840
they actually chose the image,
or there's the bottom one,

00:06:34.840 --> 00:06:36.720
where they just hit Cancel.

00:06:37.640 --> 00:06:40.620
So let's look at the first case,
the Accept case.

00:06:40.750 --> 00:06:44.330
So in the Accept case,
you're going to do something

00:06:44.430 --> 00:06:46.260
with the image that came in.

00:06:46.430 --> 00:06:49.850
So see that didFinishPickingImage?

00:06:49.930 --> 00:06:54.150
So that image will contain the full
resolution of the image that we have.

00:06:54.350 --> 00:06:57.410
So if it was a camera picker,
it'll be that full

00:06:57.420 --> 00:07:00.240
giant 2 megapixel image.

00:07:00.350 --> 00:07:02.660
So at this point,
it's kind of up to you to-- you

00:07:02.660 --> 00:07:05.890
want to do something with the image,
but you need to keep in mind

00:07:05.890 --> 00:07:07.720
that the picker's still up there.

00:07:07.770 --> 00:07:11.990
And so if you do something too long,
then your image picker is

00:07:12.050 --> 00:07:13.820
going to feel kind of sluggish.

00:07:14.060 --> 00:07:17.240
So it's best to-- if
it's a quick operation,

00:07:17.300 --> 00:07:20.220
do it, or get ready to do it later.

00:07:20.250 --> 00:07:23.870
And once you've done that,
go ahead and dismiss the view

00:07:23.930 --> 00:07:26.900
controller and slide it back down.

00:07:27.200 --> 00:07:29.940
And then as I mentioned earlier,
since we alect and anited

00:07:29.940 --> 00:07:33.080
this view controller,
it's up to us to go ahead and release it.

00:07:33.220 --> 00:07:34.900
So do that here.

00:07:36.470 --> 00:07:39.040
So in the cancel case, it's even easier,
right?

00:07:39.140 --> 00:07:40.260
There's no image to deal with.

00:07:40.290 --> 00:07:43.600
So all you got to do is
basically tear down the picker,

00:07:43.600 --> 00:07:46.280
and then go ahead and release it,
because we're done.

00:07:48.160 --> 00:07:54.920
So there's an interesting kind
of property on the image picker.

00:07:54.940 --> 00:07:56.420
This allows image editing.

00:07:56.480 --> 00:08:00.180
So if you turn that on, set it to true,
what that does is kind of enable

00:08:00.390 --> 00:08:02.260
this crop UI that we have.

00:08:02.280 --> 00:08:06.820
And with the crop UI enabled,
the user is able to pinch and

00:08:06.820 --> 00:08:11.480
zoom and scan around and do all
the kind of cool iPhone-y stuff.

00:08:11.540 --> 00:08:16.020
So if they've done that,
and then they hit choose,

00:08:16.300 --> 00:08:21.020
the image delegate that you'll get,
the method of your delegate

00:08:21.540 --> 00:08:24.700
that it will be called,
is the same as you saw before.

00:08:24.760 --> 00:08:27.580
But this image editing info
dictionary that I kind of glossed

00:08:27.890 --> 00:08:29.960
over is a bit more interesting now.

00:08:29.980 --> 00:08:32.100
In addition to that,
the image that you'll receive in

00:08:32.100 --> 00:08:37.860
this case is the cropped image,
the one that fit in the little box.

00:08:37.920 --> 00:08:40.860
So let's say, though, that, well,
the cropped image is cool,

00:08:40.860 --> 00:08:43.330
and I'm definitely going to do
something with the cropped image,

00:08:43.360 --> 00:08:45.960
but I'm also interested
in that great big image.

00:08:46.020 --> 00:08:47.400
So you can still get at that stuff.

00:08:47.440 --> 00:08:49.490
This editing info has these two keys.

00:08:49.700 --> 00:08:52.100
And one of them contains
the original image,

00:08:52.130 --> 00:08:55.960
and the other one contains the
actual crop rec that the user-- where

00:08:55.960 --> 00:08:57.110
they finally kind of landed there.

00:08:57.310 --> 00:08:59.130
So you can use that.

00:09:01.210 --> 00:09:03.860
So I mentioned before when we
were talking about the image,

00:09:03.860 --> 00:09:07.190
get your image,
do something cool with your image,

00:09:07.190 --> 00:09:08.160
and then get done with it.

00:09:08.300 --> 00:09:09.760
That's very, very, very important.

00:09:09.830 --> 00:09:12.570
I don't know if you were here
for the previous talk when they

00:09:12.570 --> 00:09:16.000
were talking about performance,
but these images are quite possibly

00:09:16.000 --> 00:09:19.040
some of the biggest pieces of
data you're going to come across,

00:09:19.320 --> 00:09:20.930
especially the camera images.

00:09:21.200 --> 00:09:23.290
You can't really,
there's no room on the system to have

00:09:23.290 --> 00:09:25.200
just lots of them kind of hanging around.

00:09:25.330 --> 00:09:28.170
So definitely get the image in,
do whatever it is you're

00:09:28.170 --> 00:09:30.900
going to do with it,
you know, find all the faces and

00:09:30.900 --> 00:09:33.100
put mustaches on them,
something like that,

00:09:33.160 --> 00:09:34.790
and then release them.

00:09:35.070 --> 00:09:37.090
Get them out of the way.

00:09:37.400 --> 00:09:41.210
Otherwise, as was put very politely,
like you will be asked

00:09:41.210 --> 00:09:42.980
to like leave the party.

00:09:43.000 --> 00:09:45.350
We don't want that.

00:09:47.350 --> 00:09:53.050
So as was mentioned in the keynote,
your applications can save photos

00:09:53.280 --> 00:09:57.930
or images to the Save Photos album,
just like Safari and Mailcam.

00:09:58.150 --> 00:10:01.840
As a matter of fact,
this is the same function they use.

00:10:02.020 --> 00:10:06.170
So all it does is it takes an image
and writes it to the photo album.

00:10:06.220 --> 00:10:08.980
And what's cool about that
is then it's in this album,

00:10:08.980 --> 00:10:11.720
and then when the user goes
ahead and syncs their device,

00:10:11.760 --> 00:10:15.340
it will get pushed back up either
through Image Capture or iTunes,

00:10:15.390 --> 00:10:16.910
iPhoto.

00:10:17.350 --> 00:10:18.530
And it's on their desktop.

00:10:18.610 --> 00:10:23.510
So it's kind of a neat way to get
images from the device to the desktop.

00:10:23.710 --> 00:10:26.540
If you're interested,
there's a completion callback,

00:10:26.620 --> 00:10:28.040
so you can hear when it's actually done.

00:10:28.100 --> 00:10:31.100
Because sometimes it
can take a few seconds.

00:10:32.180 --> 00:10:34.740
So this is available in the simulator.

00:10:34.780 --> 00:10:39.500
You can bring up a few of the sources,
not the camera source.

00:10:39.830 --> 00:10:42.180
There's some-- I don't know
if you've played with it yet.

00:10:42.260 --> 00:10:45.330
There's somebody's pictures of
somebody's graduation in there.

00:10:45.340 --> 00:10:48.800
I don't know where it came from,
but you can play with them.

00:10:50.750 --> 00:10:54.240
So what did we learn
about the image stuff?

00:10:54.540 --> 00:10:56.190
It's pretty straightforward.

00:10:56.260 --> 00:10:59.160
The really thing-- two couple things
you really need to think about are

00:10:59.160 --> 00:11:00.900
always check your source availability.

00:11:00.970 --> 00:11:03.350
So don't sort of give the
illusion that you can bring up a

00:11:03.380 --> 00:11:04.830
camera picker on an iPod touch.

00:11:05.060 --> 00:11:06.320
That'd be wrong.

00:11:06.320 --> 00:11:10.500
Make sure that if your
delegate used any resources,

00:11:10.500 --> 00:11:13.340
like the image picker itself,
that it cleans them up.

00:11:13.360 --> 00:11:15.650
And please, please, please,
please don't hold all

00:11:15.690 --> 00:11:16.860
these images around.

00:11:16.860 --> 00:11:19.560
It's a recipe for disaster.

00:11:21.740 --> 00:11:27.550
So up next, Ron's going to tell us a
bunch about Core Location.

00:11:29.300 --> 00:11:32.590
Thank you, Scott.

00:11:32.780 --> 00:11:33.590
Hi.

00:11:33.620 --> 00:11:35.290
So just about now,
it's only about an hour

00:11:35.290 --> 00:11:36.590
until the beer bash.

00:11:36.710 --> 00:11:38.800
So for now,
let me help you kill some time.

00:11:38.940 --> 00:11:40.940
My name is Ron Huang,
and I'm a software engineer

00:11:40.940 --> 00:11:42.520
on the iPhone team.

00:11:42.670 --> 00:11:44.520
Today, I'm here to talk to you
about Core Location,

00:11:44.660 --> 00:11:48.690
and together, we can learn how to make
applications location-aware.

00:11:49.000 --> 00:11:51.380
Let's say after tonight's beer bash,
you still want to go

00:11:51.380 --> 00:11:52.690
outside and party some more.

00:11:52.800 --> 00:11:55.530
Wouldn't it be nice if when you
pull the iPhone out of your pocket,

00:11:55.590 --> 00:11:57.130
we just know where you are?

00:11:57.230 --> 00:12:00.460
So instead of entering a zip code,
we automatically list all the

00:12:00.460 --> 00:12:02.320
coolest hangouts that are near you.

00:12:02.580 --> 00:12:04.520
Or let's say you want
to go watch a movie.

00:12:04.580 --> 00:12:07.970
Wouldn't it be nice if the iPhone
just knows where you are again and

00:12:07.970 --> 00:12:10.690
lists all the local movie theaters,
sort them based on their

00:12:10.700 --> 00:12:14.360
distances away from you,
and show the corresponding show times?

00:12:14.420 --> 00:12:15.850
That would be really cool.

00:12:16.080 --> 00:12:17.760
Or let's go even one step further.

00:12:17.800 --> 00:12:20.870
Let's say you have an app,
and you want it to behave differently

00:12:20.870 --> 00:12:22.720
depending on where the user is.

00:12:22.840 --> 00:12:25.420
For example,
if the user has left work and gone home,

00:12:25.490 --> 00:12:27.600
maybe you want to change
ringtone automatically.

00:12:27.660 --> 00:12:31.140
Or maybe you want to change
wallpaper to a family picture of his.

00:12:31.220 --> 00:12:32.400
That would be really cool.

00:12:32.510 --> 00:12:36.190
So with Core Location,
you can do all of this very easily now.

00:12:36.310 --> 00:12:38.690
And I think there are a lot of
apps where location is going to

00:12:38.690 --> 00:12:39.800
be a very central part of it.

00:12:40.090 --> 00:12:42.720
You know, it's going to be its feature
number one or feature number two.

00:12:42.840 --> 00:12:46.010
But I think there are also a lot of other
apps where simple touches of location

00:12:46.020 --> 00:12:51.190
can make your app a lot more polished,
a lot smarter to the user,

00:12:51.200 --> 00:12:54.400
and overall just helps
the user type less.

00:12:54.400 --> 00:12:56.670
So let's get started.

00:12:57.220 --> 00:12:58.900
What exactly is Core Location?

00:12:59.030 --> 00:13:01.630
Well, many of you may have actually
seen it working already,

00:13:01.630 --> 00:13:04.590
and that's because
Core Location is used by Maps.

00:13:04.690 --> 00:13:06.740
When the user hits the
bottom left button,

00:13:06.810 --> 00:13:10.200
Maps uses Core Location
to find out where you are.

00:13:10.310 --> 00:13:15.390
Maps takes the raw latitude and longitude
info and paints a circle or a ring on

00:13:15.390 --> 00:13:17.760
the map indicating to you where you are.

00:13:17.880 --> 00:13:21.580
So in addition to latitude and longitude,
Core Location also serves

00:13:21.820 --> 00:13:23.300
up an accuracy value.

00:13:23.420 --> 00:13:26.630
This accuracy value is basically
the way we convey how confident

00:13:26.630 --> 00:13:28.500
we are in the location provided.

00:13:28.630 --> 00:13:31.960
So Maps takes this value and
uses it to determine the size

00:13:31.960 --> 00:13:33.890
of the ring drawn on the map.

00:13:34.390 --> 00:13:37.310
Well, now you're going to ask,
how does Core Location

00:13:37.310 --> 00:13:38.300
know where you are?

00:13:38.410 --> 00:13:39.860
Well, we do several things.

00:13:40.040 --> 00:13:43.770
The first thing we do is that we
look around for cell phone towers.

00:13:44.000 --> 00:13:45.940
We find out what cell
phone towers are near you,

00:13:46.180 --> 00:13:48.940
we look them up in a database,
and we triangulate your

00:13:48.940 --> 00:13:50.490
current location that way.

00:13:50.690 --> 00:13:53.650
So these kind of locations are very
good to tell you and give you a

00:13:53.650 --> 00:13:55.540
general idea of where the user is.

00:13:55.600 --> 00:13:59.380
They're usually within one to two
kilometers of the user's actual location.

00:13:59.450 --> 00:14:01.390
But we can do better than that.

00:14:01.560 --> 00:14:03.830
We also look around for
Wi-Fi access points,

00:14:03.830 --> 00:14:07.310
and using that again,
we triangulate your current location.

00:14:07.420 --> 00:14:09.280
These locations are much more accurate.

00:14:09.350 --> 00:14:13.250
They're usually about 100 meters
away from the user at most.

00:14:13.800 --> 00:14:18.090
So of course, using Core Location,
you now have access to the GPS.

00:14:18.190 --> 00:14:20.780
Steve announced on Monday in
their keynote that the new iPhone

00:14:20.780 --> 00:14:23.090
3G will have GPS built into it.

00:14:23.170 --> 00:14:25.840
So of course, using Core Location,
you have access to that.

00:14:25.900 --> 00:14:29.320
And so now, via this location framework,
you can get very,

00:14:29.320 --> 00:14:31.290
very accurate positioning.

00:14:31.970 --> 00:14:35.100
All these cool technologies
work very closely with each

00:14:35.100 --> 00:14:37.180
other inside Quill Location.

00:14:37.400 --> 00:14:40.360
We definitely use them to bootstrap
each other so that we get you

00:14:40.470 --> 00:14:42.580
a location as fast as possible.

00:14:42.630 --> 00:14:45.060
We also use them to cross-check
each other so that all the

00:14:45.060 --> 00:14:49.130
locations we provide you can
be as reliable as possible.

00:14:49.240 --> 00:14:52.760
Of course, they also complement
each other very well.

00:14:52.810 --> 00:14:56.050
And imagine if you were outdoors
with a great open view to

00:14:56.050 --> 00:14:59.760
the sky and getting satellite
signals and having GPS locations.

00:14:59.840 --> 00:15:01.520
Then you start walking indoors.

00:15:01.580 --> 00:15:05.000
Well, as you start walking indoors,
you may lose the satellite signals.

00:15:05.060 --> 00:15:08.050
In which case, Quill Location will
automatically transition into

00:15:08.060 --> 00:15:10.070
positioning using Wi-Fi or Cell.

00:15:10.160 --> 00:15:11.540
So your app doesn't have to do anything.

00:15:11.630 --> 00:15:12.690
It doesn't have to worry about anything.

00:15:12.700 --> 00:15:15.090
It's all handled by Quill Location.

00:15:16.370 --> 00:15:21.660
So all these new exciting features
are now put together into the

00:15:21.660 --> 00:15:24.770
new Core Location Framework,
the same API that is used by

00:15:24.770 --> 00:15:28.980
Maps and also by the Camera app,
which geotags your photos automatically.

00:15:28.990 --> 00:15:31.880
The same API is now put into
Core Location Framework,

00:15:31.880 --> 00:15:34.980
and it's available to you
in the iPhone SDK today.

00:15:35.290 --> 00:15:38.920
So now I want to show you this SDK,
I mean this API.

00:15:38.980 --> 00:15:41.520
Core Location is something we've
designed to be very simple and very

00:15:41.520 --> 00:15:43.520
easy to use right from the get-go.

00:15:43.590 --> 00:15:45.350
So as such,
there are just three core things

00:15:45.390 --> 00:15:47.180
that you need to watch out for.

00:15:47.320 --> 00:15:50.420
First,
we have the CL Location Manager class.

00:15:50.460 --> 00:15:52.590
As the name suggests,
you'll be using this class

00:15:52.780 --> 00:15:55.090
to manage how you want to
receive your location updates,

00:15:55.090 --> 00:15:58.110
and also set up your quality
of service parameters.

00:15:58.430 --> 00:16:01.300
Second, we have the CL Location class.

00:16:01.340 --> 00:16:03.940
This class is really more
of a data wrapper class,

00:16:03.980 --> 00:16:06.720
and it has a bunch of properties on it,
so you have direct access to

00:16:06.830 --> 00:16:10.440
the latitude and longitude info,
and also accuracy and timestamp

00:16:10.440 --> 00:16:12.310
and those kind of data.

00:16:12.480 --> 00:16:14.500
Finally, we also define a protocol.

00:16:14.540 --> 00:16:17.220
This is a CL Location Manager Delegate.

00:16:17.310 --> 00:16:19.680
For those of you unfamiliar
with OS X development,

00:16:19.690 --> 00:16:22.220
a delegate is simply a
set of callback functions.

00:16:22.230 --> 00:16:25.300
And a call location is going to invoke
these callback functions when there

00:16:25.440 --> 00:16:27.310
are events to be delivered to you.

00:16:27.690 --> 00:16:29.760
Now let's take a look
at some of these events.

00:16:29.840 --> 00:16:32.990
Inside our delegate protocol,
we define two optional methods

00:16:33.000 --> 00:16:34.600
you can choose to implement.

00:16:34.670 --> 00:16:40.000
The first one we have is
LocationManagerDidUpdateToLocationFromL

00:16:40.000 --> 00:16:40.780
ocation.

00:16:40.850 --> 00:16:42.880
So of course,
we're going to invoke this callback

00:16:43.080 --> 00:16:45.320
when we have a new location for you.

00:16:45.390 --> 00:16:48.250
As you can see in the API,
we pass you an instance

00:16:48.250 --> 00:16:51.700
of CLLocationObject,
which represents your current location,

00:16:51.780 --> 00:16:55.650
and we also pass you another instance
that says where you last were.

00:16:55.710 --> 00:16:58.390
So together,
you can very conveniently do any

00:16:58.410 --> 00:17:00.880
differential checks if you wanted to.

00:17:00.950 --> 00:17:05.200
The second callback we have is
LocationManagerDidFailWithError.

00:17:05.270 --> 00:17:07.230
And of course,
this callback is used to handle any

00:17:07.230 --> 00:17:09.260
error conditions we may encounter.

00:17:09.320 --> 00:17:12.190
And we also pass along to you
an error code when this happens.

00:17:12.290 --> 00:17:14.030
So I'll get back to the error
codes and how you should

00:17:14.030 --> 00:17:15.270
handle them a little bit later.

00:17:15.480 --> 00:17:19.340
But for now, just notice the asynchronous
nature of these callback functions.

00:17:19.400 --> 00:17:23.120
And that is because it takes time
for us to find out where you are.

00:17:23.220 --> 00:17:25.640
It takes time for us to scan
and look up the cell phone

00:17:25.640 --> 00:17:27.680
towers or Wi-Fi access points.

00:17:27.710 --> 00:17:30.180
And it definitely takes us
time to fire up the GPS,

00:17:30.200 --> 00:17:33.340
lock in satellites,
and determine where you are.

00:17:33.370 --> 00:17:35.900
Therefore, we do this for you in
a background thread.

00:17:35.920 --> 00:17:38.540
And when we have location
available for you,

00:17:38.560 --> 00:17:42.150
we're going to invoke your callback
function on your main thread.

00:17:42.690 --> 00:17:45.700
Second thing I want to point out
is that Core Location doesn't

00:17:45.700 --> 00:17:49.710
necessarily update you with locations
periodically on a set interval.

00:17:49.820 --> 00:17:53.350
Now I know many applications out there
are very used to the GPS spitting out

00:17:53.430 --> 00:17:56.100
a location every once in a second.

00:17:56.250 --> 00:17:58.960
But Core Location doesn't work that way,
so you don't want to be using

00:17:58.960 --> 00:18:02.910
our Location updates as a
central heartbeat to your apps.

00:18:03.600 --> 00:18:05.200
So that's how you receive locations.

00:18:05.280 --> 00:18:06.900
How do you start them, though?

00:18:06.950 --> 00:18:08.450
Well, it's very, very simple.

00:18:08.650 --> 00:18:13.300
You allocate and initialize an instance
of the CLLocationManager class.

00:18:13.350 --> 00:18:17.130
You do this just like you would
with any other Cocoa class.

00:18:17.130 --> 00:18:21.200
The second thing you do is you assign
a delegate property to yourself,

00:18:21.230 --> 00:18:23.540
simply because you will be the
one implementing two functions

00:18:23.600 --> 00:18:25.540
that we just looked at.

00:18:25.700 --> 00:18:27.660
Finally, you just call one single API.

00:18:27.890 --> 00:18:29.540
Start updating location.

00:18:29.570 --> 00:18:32.600
Once you do that, CoreLocation will begin
invoking your callbacks from

00:18:32.600 --> 00:18:34.750
their events to be delivered.

00:18:35.100 --> 00:18:38.510
Now the event we all care about is,
of course, location updates.

00:18:38.510 --> 00:18:41.040
And again, when this happens,
we're going to invoke the callback,

00:18:41.150 --> 00:18:46.330
"Location Manager did update to location
from location." So now I want to show you

00:18:46.330 --> 00:18:49.010
a sample implementation of this callback.

00:18:50.120 --> 00:18:53.110
As you can see in the code
behind me at the bottom,

00:18:53.110 --> 00:18:56.720
we just have direct access to the
latitude and longitude information.

00:18:56.850 --> 00:19:01.680
We do so by accessing the coordinate
property on the CLLocation class.

00:19:01.760 --> 00:19:02.640
So it's all very simple.

00:19:02.640 --> 00:19:04.880
There are a couple of
things I want to point out.

00:19:04.880 --> 00:19:09.960
First is that CoreLocation can
and will send you cache locations.

00:19:10.020 --> 00:19:13.350
These cache locations can be
anywhere from a few minutes old,

00:19:13.460 --> 00:19:16.460
a few hours old,
or maybe even a few days old.

00:19:16.460 --> 00:19:18.770
So of course,
depending on the type of your app,

00:19:19.190 --> 00:19:20.920
this may or may not be very helpful.

00:19:20.920 --> 00:19:24.480
Let's say you just have a widget and
you want to show the local weather

00:19:24.480 --> 00:19:26.400
automatically based on where the user is.

00:19:26.400 --> 00:19:28.610
And of course,
locations determined within

00:19:28.670 --> 00:19:34.790
the past hour or so is probably
good enough for such a use case.

00:19:35.060 --> 00:19:37.720
But let's say if you have a
cool social app and you want

00:19:37.840 --> 00:19:40.330
to track all your friends,
show where they are real time,

00:19:40.370 --> 00:19:41.680
display them on the map.

00:19:41.750 --> 00:19:44.400
Well, for such kind of apps,
you probably need more real time

00:19:44.400 --> 00:19:47.510
and more up-to-date locations,
in which case you can use a

00:19:47.640 --> 00:19:52.230
CLLocations property timestamp and
filter out anything that's too old.

00:19:52.350 --> 00:19:56.720
So as you can see in my sample code here,
I'm simply discarding anything that

00:19:56.720 --> 00:19:59.310
was determined over 10 seconds ago.

00:20:00.160 --> 00:20:02.720
The next thing I want to point
out is the horizontal accuracy

00:20:02.810 --> 00:20:05.590
property on the CL Location class.

00:20:05.670 --> 00:20:06.930
So as you know,
we have all these different

00:20:06.930 --> 00:20:10.480
technologies that combine together
and find out where you are.

00:20:10.540 --> 00:20:13.920
Now the accuracy levels of these
different technologies vary.

00:20:13.980 --> 00:20:16.910
So if your app requires very
accurate locations only,

00:20:17.040 --> 00:20:19.830
you want to check this property
and use it to filter out anything

00:20:20.090 --> 00:20:22.170
that's not good enough for you.

00:20:22.520 --> 00:20:25.340
We report the accuracy to you in meters.

00:20:25.480 --> 00:20:29.650
Think of it as the radius to a circle,
you know, centered at the coordinate

00:20:29.870 --> 00:20:32.180
that we specified,
the latitude and longitude.

00:20:32.360 --> 00:20:33.480
And basically,
we're saying that a user is

00:20:33.480 --> 00:20:35.830
somewhere within that circle.

00:20:36.010 --> 00:20:38.140
So,
as you can see in my sample code here,

00:20:38.190 --> 00:20:42.550
I'm discarding anything where
we're less certain than 100 meters.

00:20:42.700 --> 00:20:45.340
So that's how you receive
and handle your locations.

00:20:45.510 --> 00:20:48.710
Now I want to circle back and
talk about CL Location Manager,

00:20:48.890 --> 00:20:50.800
that class itself.

00:20:50.870 --> 00:20:53.870
As you know,
Core Location runs on the iPhone,

00:20:53.870 --> 00:20:57.570
and so in contrast to a desktop system,
you have very different power constraints

00:20:57.640 --> 00:20:59.640
and of course battery limitations.

00:20:59.740 --> 00:21:03.760
So we've added a few properties on
the CL Location Manager class to help

00:21:03.760 --> 00:21:06.000
make your app more power friendly.

00:21:06.050 --> 00:21:08.020
Now I want to show this to you.

00:21:08.080 --> 00:21:11.710
The first property we
have is desired accuracy.

00:21:11.930 --> 00:21:14.020
So again,
all these different technologies

00:21:14.410 --> 00:21:17.670
have different accuracy levels,
but more importantly,

00:21:17.860 --> 00:21:21.180
they have different power
consumption characteristics.

00:21:21.290 --> 00:21:25.460
Whereas a cell or Wi-Fi location
is basically a scan followed

00:21:25.550 --> 00:21:28.620
by a database lookup,
it definitely eats a lot more

00:21:28.620 --> 00:21:32.070
battery for us to power up the GPS,
sync up with the satellites,

00:21:32.210 --> 00:21:35.540
and do the advanced math
to find out where you are.

00:21:35.720 --> 00:21:38.000
So by setting the desired
accuracy property,

00:21:38.040 --> 00:21:43.590
you're allowing CoreLocation to
strike the best balance between

00:21:43.660 --> 00:21:48.140
accuracy and power consumption
for your particular use case.

00:21:48.770 --> 00:21:52.480
Now, I think that many apps actually
don't need pinpoint accuracy.

00:21:52.610 --> 00:21:54.540
For instance,
the weather widget I talked about,

00:21:54.610 --> 00:21:58.040
or if you want to show different things
if the user's at work versus at home.

00:21:58.110 --> 00:22:03.610
Those things only need
very general locations.

00:22:04.160 --> 00:22:07.820
But,
so they just need very general locations.

00:22:07.870 --> 00:22:11.480
And I think even apps that really
need pinpoint accuracy don't

00:22:11.500 --> 00:22:13.660
actually need it all the time.

00:22:13.710 --> 00:22:16.330
Let's say you have a mapping application,
and you have several different

00:22:16.330 --> 00:22:18.220
zoom levels for the user.

00:22:18.260 --> 00:22:20.330
Now imagine that the user
is zoomed all the way out.

00:22:20.510 --> 00:22:23.800
So basically, we're looking at the
entire United States.

00:22:23.850 --> 00:22:27.820
At that time, a very approximate location
is probably good enough.

00:22:27.890 --> 00:22:30.920
Then as the user begins zooming in,
when you start seeing

00:22:30.960 --> 00:22:33.010
the different states,
and then the cities,

00:22:33.010 --> 00:22:36.020
and then finally the streets,
you can adjust the desired

00:22:36.020 --> 00:22:40.040
accuracy property on the fly to
match up with your zoom level.

00:22:40.100 --> 00:22:41.740
This will allow us to
save a lot of power,

00:22:41.950 --> 00:22:44.220
so please use this wisely.

00:22:44.270 --> 00:22:47.570
One thing I do want to point out, though,
is that you're setting

00:22:47.570 --> 00:22:49.100
the desired accuracy here.

00:22:49.170 --> 00:22:52.720
The actual accuracy is reported
to you with each CL location

00:22:53.030 --> 00:22:55.040
object inside the callbacks.

00:22:55.680 --> 00:22:57.270
We have another property for you.

00:22:57.410 --> 00:22:59.670
That is the distance filter.

00:22:59.860 --> 00:23:02.470
Let's say you have an app,
and you want to show the local

00:23:02.870 --> 00:23:05.190
news based on where the user is.

00:23:05.410 --> 00:23:07.940
Now for something like this,
you don't really care if the user

00:23:07.940 --> 00:23:11.330
is moving from one block to another,
but really if the user is moving

00:23:11.440 --> 00:23:13.140
from one city to the next.

00:23:13.270 --> 00:23:16.370
In which case,
you can use distance filter and

00:23:16.530 --> 00:23:20.020
set a movement threshold in meters,
and by doing so,

00:23:20.020 --> 00:23:22.940
you'll prevent crow location
from poking at your app over and

00:23:22.940 --> 00:23:26.610
over when you don't really care
about these very fine movements.

00:23:27.180 --> 00:23:30.130
And also, more importantly,
you're allowing Core Location to throttle

00:23:30.140 --> 00:23:34.500
the underlying technologies so that
we can save power whenever possible.

00:23:34.520 --> 00:23:37.250
Of course,
the biggest power saver is definitely

00:23:37.250 --> 00:23:40.780
remembering to stop the service
when you don't need it anymore.

00:23:40.910 --> 00:23:43.580
To do so,
you simply call the API "Stop Updating

00:23:43.580 --> 00:23:47.890
Location." You can always restart
it later when you do need it.

00:23:48.580 --> 00:23:51.060
So those are the fun
parts of Core Location.

00:23:51.100 --> 00:23:52.970
Now, as I promised,
I'm going to circle back and

00:23:53.040 --> 00:23:55.280
talk about the error cases.

00:23:55.880 --> 00:23:58.400
When there's an error condition,
we're going to trigger a callback,

00:23:58.420 --> 00:24:02.030
"Location Manager did fail with
error." And we're going to pass

00:24:02.030 --> 00:24:03.340
along to you an error code.

00:24:03.410 --> 00:24:05.720
The first error code I want to
talk to you about is something

00:24:05.720 --> 00:24:09.870
many of you may have actually
seen screenshots of on the web.

00:24:10.250 --> 00:24:14.100
When an app tries to use Quill Location
API to find out where the user is,

00:24:14.100 --> 00:24:18.040
we're going to pop up a dialog on the
screen to let the user know about it.

00:24:18.180 --> 00:24:21.620
Now the user can hit OK,
in which case they'll acknowledge

00:24:21.660 --> 00:24:24.090
the fact that your app is
going to know where they are,

00:24:24.090 --> 00:24:27.440
and they'll get enhanced
experience out of that.

00:24:27.600 --> 00:24:30.860
So you start getting location updates,
just like you normally do.

00:24:30.940 --> 00:24:33.540
But the user can, of course,
hit Don't Allow.

00:24:33.590 --> 00:24:36.840
If they do that,
we're going to send you an error code,

00:24:36.840 --> 00:24:38.180
KCL Error Denied.

00:24:38.230 --> 00:24:41.050
Once you get this error code,
Chrome Location will not send

00:24:41.050 --> 00:24:42.580
you any location updates.

00:24:42.630 --> 00:24:45.900
Of course, we're doing this to
protect our users' privacy.

00:24:45.980 --> 00:24:51.550
And it's important to know that we're
tracking each application individually,

00:24:51.550 --> 00:24:54.550
and that every single application
on the system is subject to

00:24:54.550 --> 00:24:56.620
the same user approval process.

00:24:56.670 --> 00:24:59.160
As you can see in the
screenshot behind me,

00:24:59.350 --> 00:25:01.410
even Maps pops us the same dialog.

00:25:01.510 --> 00:25:03.730
So we're going to show this dialog
each and every time your app

00:25:03.800 --> 00:25:08.390
calls the Chrome Location API,
unless the user has hit OK twice

00:25:08.400 --> 00:25:11.210
in a row for your particular app.

00:25:12.650 --> 00:25:16.550
The second error code I want to
point out is not really an error,

00:25:16.820 --> 00:25:20.110
but more like a warning
or progress indicator.

00:25:20.200 --> 00:25:22.640
If core location cannot
determine your current location,

00:25:22.810 --> 00:25:27.860
we're going to send you the error
code KCL_error_location_unknown.

00:25:27.910 --> 00:25:30.520
Now, this is most likely just
a temporal situation.

00:25:30.560 --> 00:25:33.280
It could be because the user is indoors,
and therefore we can't get

00:25:33.280 --> 00:25:37.730
a lock on the satellites,
or maybe because the cell phone towers

00:25:37.780 --> 00:25:42.260
and Wi-Fi access points nearby are
simply not known in our database.

00:25:42.310 --> 00:25:43.910
It's important to know
that when this happens,

00:25:44.040 --> 00:25:46.680
core location will still keep
trying for you in the background,

00:25:46.740 --> 00:25:49.340
and when the user moves
to a more favorable spot,

00:25:49.390 --> 00:25:52.220
we will update you with a new location.

00:25:52.470 --> 00:25:54.720
There's one case I want
to point out though.

00:25:54.760 --> 00:25:57.400
On the iPhone, we have this thing
called the airplane mode.

00:25:57.450 --> 00:26:00.940
When the user puts the iPhone
into airplane mode in flight,

00:26:00.980 --> 00:26:04.220
we are going to turn off all
our RF interference things,

00:26:04.290 --> 00:26:06.230
but user can still use
the phone as an iPod,

00:26:06.240 --> 00:26:07.970
as a game player or whatever.

00:26:08.120 --> 00:26:12.130
When under airplane mode,
we're not going to be

00:26:12.510 --> 00:26:14.970
registered to the cell network.

00:26:15.110 --> 00:26:17.530
We're going to have
Wi-Fi turn off by default.

00:26:17.620 --> 00:26:20.070
We're also going to disable
the GPS in airplane mode.

00:26:20.200 --> 00:26:23.470
So under this situation,
you probably will not get a location,

00:26:23.480 --> 00:26:26.570
and it's probably something you
want to watch out for and keep

00:26:26.800 --> 00:26:28.490
an eye out for in your app.

00:26:30.200 --> 00:26:33.860
So that's a quick overview on
a new Core Location framework.

00:26:33.860 --> 00:26:36.510
We hope you're all very excited,
and we'll begin experimenting

00:26:36.510 --> 00:26:41.350
and incorporating
Core Location into your apps.

00:26:42.010 --> 00:26:45.520
Since location is so intrinsic
to the actual hardware,

00:26:45.540 --> 00:26:47.980
we have limited support
for it on the simulator.

00:26:48.060 --> 00:26:50.860
So we encourage you guys
to load up your app,

00:26:50.920 --> 00:26:54.160
put it on your iPhone,
and go outside and run around with it.

00:26:54.690 --> 00:26:57.290
As you start adding location
into your app though,

00:26:57.390 --> 00:27:00.600
if for some reason you're not
getting any location updates,

00:27:00.600 --> 00:27:02.790
you should go online to the
iPhone developer website

00:27:02.930 --> 00:27:06.340
and download our sample app,
and just do a quick sanity check and

00:27:06.340 --> 00:27:11.750
make sure that your current location
is actually known in our database.

00:27:12.530 --> 00:27:14.990
So with that said,
tomorrow we have a lab session

00:27:15.020 --> 00:27:16.210
at 10:30 in the morning.

00:27:16.460 --> 00:27:18.480
Myself and other framework
developers will be there to answer

00:27:18.480 --> 00:27:19.840
any of the questions you have.

00:27:19.900 --> 00:27:22.430
And even better,
the iPhone Maps application

00:27:22.580 --> 00:27:24.800
engineers will be on site as well.

00:27:24.870 --> 00:27:27.160
They were really the
first ones to use our API,

00:27:27.170 --> 00:27:29.770
and they worked very closely with
us to come up with the current

00:27:29.800 --> 00:27:31.380
set of behaviors and feature set.

00:27:31.480 --> 00:27:34.880
So I think it will be very invaluable
for you to be able to talk to them and

00:27:34.900 --> 00:27:38.440
share their experiences when they develop
the first Maps tracking application

00:27:38.710 --> 00:27:40.720
using the new Co-Location API.

00:27:40.810 --> 00:27:43.190
So with that said,
I'll hand you back to Scott to

00:27:43.190 --> 00:27:45.010
finish you up with accelerometers.

00:27:45.330 --> 00:27:45.640
Thank you.

00:27:56.160 --> 00:27:59.430
Accelerometers.

00:27:59.530 --> 00:28:03.780
So first off, before we get too in-depth
into accelerometers,

00:28:03.850 --> 00:28:05.630
what is an accelerometer?

00:28:05.890 --> 00:28:08.910
Well, very simply,
it's this little tiny piece of

00:28:08.910 --> 00:28:12.500
silicon that sits inside your phone,
your iPod touch.

00:28:12.530 --> 00:28:16.750
And what it does is it sits
there and it experiences force.

00:28:16.860 --> 00:28:19.760
So let's take a look at this
example here that we have up.

00:28:19.790 --> 00:28:23.400
Let's say that it's an iPhone,
and it's docked.

00:28:23.400 --> 00:28:24.480
It's sitting straight up.

00:28:24.600 --> 00:28:31.040
So what's happening is it's
experiencing gravity along an axis here.

00:28:31.960 --> 00:28:37.690
If we sort of tilt the device,
then gravity is going to be

00:28:37.860 --> 00:28:40.550
experienced along two axes.

00:28:40.620 --> 00:28:44.320
And so what the accelerometer does is
take that information and just package it

00:28:44.320 --> 00:28:47.020
up and send it on up through the stack.

00:28:47.090 --> 00:28:50.040
And so that's where we get
to do cool stuff with it.

00:28:50.130 --> 00:28:54.050
For example,
we use it to figure out what is the

00:28:54.050 --> 00:28:57.610
overall orientation of the device.

00:28:57.660 --> 00:28:58.360
Is it portrait?

00:28:58.420 --> 00:28:59.640
Is it landscape?

00:28:59.710 --> 00:29:03.560
And then given that information,
the applications like Safari here

00:29:03.980 --> 00:29:06.250
do things like reorient themselves,
right?

00:29:06.340 --> 00:29:08.490
They'll rotate their window,
get a little wider.

00:29:08.710 --> 00:29:12.670
Or maybe in the case of our
music player application,

00:29:12.740 --> 00:29:15.520
maybe you're in portrait mode,
you're in a nice sort of

00:29:15.520 --> 00:29:18.510
traditional now playing screen,
right?

00:29:18.840 --> 00:29:20.830
And then when you rotate it,
we go to this crazy

00:29:20.830 --> 00:29:22.520
cool cover flow thing.

00:29:23.000 --> 00:29:26.930
So that brings up kind of an
interesting point in the sense that

00:29:27.240 --> 00:29:30.520
there really are sort of two different
types of orientation on the device,

00:29:30.560 --> 00:29:33.560
or on the iPhone, in the SDK.

00:29:33.630 --> 00:29:38.150
There's the physical device orientation,
which is, you know,

00:29:38.160 --> 00:29:38.810
it's tied to the device.

00:29:38.910 --> 00:29:40.880
Is the device pointing straight up?

00:29:40.980 --> 00:29:41.940
Is it landscape?

00:29:42.010 --> 00:29:43.980
Is it sitting up on a table?

00:29:44.040 --> 00:29:47.920
And then there's the
interface orientation.

00:29:47.960 --> 00:29:49.110
You know, what is the status bar doing?

00:29:49.120 --> 00:29:50.120
What is the nav bar doing?

00:29:50.120 --> 00:29:51.540
What are the button bars doing?

00:29:51.590 --> 00:29:53.120
And that's kind of different.

00:29:53.230 --> 00:29:56.560
So a way to kind of think about this,
or a place where you can

00:29:56.580 --> 00:30:00.210
kind of see this in the wild,
is the photos application.

00:30:00.330 --> 00:30:03.280
So if you bring up photos
and you go to a photo,

00:30:03.280 --> 00:30:04.840
and you sit there and you
spin your device around,

00:30:04.840 --> 00:30:09.390
you'll notice that the photo
reorients itself to match,

00:30:09.430 --> 00:30:12.000
you know, which way you're looking at it,
which way is up.

00:30:12.050 --> 00:30:14.970
But if you tap it and then
bring up the user interface,

00:30:14.970 --> 00:30:18.460
you'll notice that the user
interface is always portrait.

00:30:18.500 --> 00:30:21.540
We don't change the interface
orientation in that case.

00:30:21.540 --> 00:30:24.580
So that kind of shows that there's a,
you know, even though the device

00:30:24.580 --> 00:30:26.510
may be doing one thing,
the user interface may be

00:30:26.510 --> 00:30:27.790
doing kind of something else.

00:30:27.850 --> 00:30:30.800
And you can -- your
application can use both.

00:30:32.240 --> 00:30:36.700
So to get at the physical
orientation of the device,

00:30:36.800 --> 00:30:38.440
you'll of course use UI Device, right?

00:30:38.460 --> 00:30:42.500
It's our one-stop shop
for all things device.

00:30:42.630 --> 00:30:46.400
So the first thing you'll need to
do is start to tell it that you're

00:30:46.480 --> 00:30:50.290
interested in accelerometer events,
you're interested in orientation changes.

00:30:50.400 --> 00:30:53.620
So what you'll do is you'll
begin generating device

00:30:53.620 --> 00:30:55.690
orientation notifications.

00:30:55.850 --> 00:30:58.860
And what that does is tells us, okay,
someone's interested.

00:30:58.860 --> 00:31:03.010
We can go and power up the
accelerometer hardware.

00:31:03.210 --> 00:31:05.590
And then once you've done that,
you can either register

00:31:05.620 --> 00:31:08.410
for the notification,
or you can poll and say, OK,

00:31:08.410 --> 00:31:10.980
I'm going to do something
kind of interesting here.

00:31:10.980 --> 00:31:13.200
What is the orientation of the device?

00:31:13.270 --> 00:31:16.400
Now, if you hadn't started it,
if you hadn't called that

00:31:16.460 --> 00:31:19.380
Begin Generating Device Orientation
Notifications call,

00:31:19.470 --> 00:31:21.270
then you'd get a known back,
because we don't know yet.

00:31:21.360 --> 00:31:24.210
Chances are that we've not
powered on the hardware yet.

00:31:24.300 --> 00:31:26.280
So it's important that you do that.

00:31:26.330 --> 00:31:30.010
Now, just as important as stopping it,
when you're not interested in

00:31:30.010 --> 00:31:34.240
getting these notifications anymore,
the accelerometer takes power.

00:31:34.260 --> 00:31:36.700
It doesn't take a ton of power,
but it takes some power.

00:31:36.820 --> 00:31:42.130
So we encourage you to end generating
these device notifications when

00:31:42.130 --> 00:31:44.950
you're not interested in them anymore.

00:31:46.840 --> 00:31:51.040
So for the user interface side,
it's a little bit different.

00:31:51.090 --> 00:31:52.740
There's a couple classes you can use.

00:31:52.740 --> 00:31:54.820
If you're interested in
the status bar orientation,

00:31:54.820 --> 00:31:57.460
which kind of reflects what
the interface is doing,

00:31:57.460 --> 00:32:01.080
you can get the shared
UI application class,

00:32:01.130 --> 00:32:03.610
and then get the status bar orientation.

00:32:03.800 --> 00:32:07.820
And like I said, this really defines what
the user interface is doing,

00:32:07.820 --> 00:32:11.000
not so much what the
physical device may be doing.

00:32:11.120 --> 00:32:13.640
So what I think people
are mostly going to do,

00:32:13.640 --> 00:32:16.780
though,
to incorporate orientation into their

00:32:16.860 --> 00:32:22.500
applications is use the awesome support
we have for it in UIViewController.

00:32:22.530 --> 00:32:24.120
They've made it very, very simple.

00:32:24.190 --> 00:32:28.810
All your view controllers need
to do is override this very,

00:32:28.810 --> 00:32:34.020
very tiny looking-- this very,
very small looking delegate message.

00:32:34.130 --> 00:32:36.130
Should auto rotate to
interface orientation.

00:32:36.140 --> 00:32:38.110
And what that's going to do,
it's going to pass you an orientation.

00:32:38.140 --> 00:32:40.820
And it's going to say, hey, like,
do you do landscape?

00:32:40.820 --> 00:32:42.440
And you're going to go yes or no.

00:32:43.640 --> 00:32:46.960
And then if you set up your
resize flags on your views,

00:32:46.960 --> 00:32:49.460
and all your other view controllers
are kind of on board with this,

00:32:49.460 --> 00:32:53.480
because they'll get asked the same thing,
it'll go ahead and take care of

00:32:53.480 --> 00:32:57.160
rotating your windows and resizing
your views and all that other stuff.

00:32:57.310 --> 00:32:59.620
It's very cool,
and I encourage you to do it this way

00:32:59.620 --> 00:33:01.770
instead of trying to roll your own.

00:33:03.020 --> 00:33:07.540
So, we've definitely done a lot of cool
stuff with general device orientation,

00:33:07.580 --> 00:33:09.880
portrait versus landscape.

00:33:10.110 --> 00:33:12.960
But we're definitely doing
lots of other cool stuff,

00:33:13.100 --> 00:33:16.570
and you guys are definitely doing
lots of cool stuff with the raw data.

00:33:16.800 --> 00:33:21.130
So we definitely want to show
you how to get at the raw data.

00:33:21.750 --> 00:33:24.650
Again, it's all built into UIKit.

00:33:24.940 --> 00:33:26.000
We don't hold anything back.

00:33:26.100 --> 00:33:28.240
We give you all three axes of data.

00:33:28.290 --> 00:33:30.630
We let you set the sample rate.

00:33:30.660 --> 00:33:34.350
And as these events come in,
we deliver them to a

00:33:34.360 --> 00:33:36.780
delegate of your choosing.

00:33:36.890 --> 00:33:39.810
So we'll show you how
to do that in a minute.

00:33:40.710 --> 00:33:42.510
Before I do though,
I want to give you kind

00:33:42.520 --> 00:33:46.640
of a little picture of how
the iPhone feels its world.

00:33:46.640 --> 00:33:50.980
The iPhone, in this case let's say it's
sitting up in its dock again,

00:33:51.020 --> 00:33:55.480
would experience gravity
along the negative y-axis.

00:33:55.570 --> 00:33:59.350
If I took the same iPhone and
I put it face up on a table,

00:33:59.430 --> 00:34:03.190
gravity would then be felt
along the negative z-axis.

00:34:03.290 --> 00:34:05.690
So as we kind of go on here,
I'm going to do a few little scenarios,

00:34:05.740 --> 00:34:11.310
and so kind of keep in mind that,
you know, plus y is up.

00:34:12.840 --> 00:34:16.770
So the classes that you'll
use are UI Accelerometer,

00:34:16.770 --> 00:34:22.460
which is the shared object,
which represents the hardware.

00:34:22.560 --> 00:34:26.640
And what that will do is that will be
generating UI acceleration objects,

00:34:26.680 --> 00:34:30.680
which will send to your
UI Accelerometer delegate.

00:34:33.010 --> 00:34:37.600
So to start the flow of these things,
what you'll do is grab

00:34:37.610 --> 00:34:39.740
the shared accelerometer,

00:34:40.310 --> 00:34:41.900
Specify an update interval.

00:34:41.910 --> 00:34:44.310
So in this case,
I'm saying I want an event

00:34:44.320 --> 00:34:46.590
about every 50th of a second.

00:34:47.000 --> 00:34:49.510
And then you'll specify a delegate,
just like we've done in all

00:34:49.510 --> 00:34:50.910
these other cases of delegates.

00:34:51.010 --> 00:34:55.820
This is an object that you say is
going to implement this protocol.

00:34:55.860 --> 00:35:01.490
And when we get at an event,
we're going to call a message on it.

00:35:02.380 --> 00:35:07.700
So, just as before, when we said,
you know, we told the UI device to

00:35:07.700 --> 00:35:12.500
begin that giant name,
you will,

00:35:12.880 --> 00:35:16.090
this is a hint to the system to say, oh,
someone is interested in

00:35:16.090 --> 00:35:17.090
accelerometer information.

00:35:17.120 --> 00:35:19.580
And if it's not already on,
it'll go ahead and turn on the hardware.

00:35:19.580 --> 00:35:22.720
And as soon as the hardware's on,
we're going to start sending

00:35:22.720 --> 00:35:24.210
events to your delegate.

00:35:25.200 --> 00:35:27.780
And when we do,
it's going to look like this.

00:35:27.830 --> 00:35:32.400
They're going to come in on
your delegate message here,

00:35:32.460 --> 00:35:33.450
method.

00:35:33.510 --> 00:35:36.490
Accelerometer did accelerate.

00:35:36.730 --> 00:35:41.710
So the acceleration object that you'll
get handed back is very straightforward.

00:35:41.820 --> 00:35:48.400
It's basically a carrier
for the XYZ access data,

00:35:48.400 --> 00:35:53.240
and here's where you would go off and do
something very cool with these numbers.

00:35:53.320 --> 00:35:56.370
So it's pretty simple, that part of it.

00:35:57.310 --> 00:35:59.430
So are there any caveats?

00:35:59.720 --> 00:36:02.160
There's kind of two.

00:36:02.160 --> 00:36:04.220
There's only one
delegate per application.

00:36:04.290 --> 00:36:07.840
So if you find that your
application has-- one part of your

00:36:07.860 --> 00:36:10.620
app needs accelerometer stuff,
and another part needs it,

00:36:10.670 --> 00:36:13.720
it's up to you to fan
it out to those places.

00:36:13.860 --> 00:36:18.190
The other kind of interesting thing is
these are delivered on the main thread.

00:36:22.870 --> 00:36:27.760
I mentioned a little bit earlier
that you can set the update,

00:36:27.820 --> 00:36:30.300
the sample rate.

00:36:30.300 --> 00:36:32.330
We've learned,
while kind of playing with the

00:36:32.330 --> 00:36:35.390
stuff and implementing it for the
rotation case and doing a lot of

00:36:35.390 --> 00:36:38.370
sample code and talking to folks,
that it's best to really

00:36:38.370 --> 00:36:40.660
only ask for what you need.

00:36:40.660 --> 00:36:43.770
In the case of trying to detect the
overall orientation of the device,

00:36:43.910 --> 00:36:46.180
you can do that in 10 to 20 hertz.

00:36:46.180 --> 00:36:48.670
There's no real point in
asking for anything more.

00:36:48.680 --> 00:36:51.040
If you're trying to maybe
simulate like an analog pad,

00:36:51.040 --> 00:36:53.480
where we've seen a lot of
game developers doing that,

00:36:53.490 --> 00:36:55.400
maybe do it a little
closer to frame rate.

00:36:55.490 --> 00:36:58.460
However,
if you're looking for things like

00:36:58.640 --> 00:37:02.680
very sudden taps or like a pedometer
kind of thing or things where

00:37:02.680 --> 00:37:06.410
it's like the event is very quick,
then it makes sense maybe to try

00:37:06.410 --> 00:37:10.660
to kind of walk up the scale and
ask for events a little quicker.

00:37:12.900 --> 00:37:19.070
So lastly, just like starting the event
delivery is obviously important,

00:37:19.180 --> 00:37:20.630
stopping it is just as important.

00:37:20.720 --> 00:37:23.810
Because if you're not using these events,
there's no point in us generating them

00:37:23.890 --> 00:37:27.740
and sending them to you and keeping
the accelerometer hardware active.

00:37:27.860 --> 00:37:30.240
So if you're in a part of your
application that doesn't need them,

00:37:30.290 --> 00:37:32.560
or you're done,
definitely nail out your delegate.

00:37:32.570 --> 00:37:36.470
And that'll be a hint to the system
that it can turn all this stuff off.

00:37:37.740 --> 00:37:40.700
So that's how you get the data.

00:37:40.810 --> 00:37:45.400
So now I want to spend a little
bit of time talking about what

00:37:45.510 --> 00:37:48.000
you might do with the data.

00:37:48.110 --> 00:37:50.280
So we're going to cover
a few simple filters.

00:37:50.280 --> 00:37:53.130
And they're actually kind of more
accurately described maybe as sort of

00:37:53.130 --> 00:37:55.360
simple approximations of these filters.

00:37:55.360 --> 00:37:58.080
We've learned that you can do
some very powerful things with

00:37:58.080 --> 00:38:01.860
some very simple techniques,
and we're going to share those today.

00:38:02.240 --> 00:38:03.860
But definitely,
if you find yourself needing

00:38:04.280 --> 00:38:07.870
something a little more sophisticated,
like we recommend Wikipedia,

00:38:07.870 --> 00:38:12.290
they've got a pretty cool signal
processing site going right now.

00:38:12.330 --> 00:38:14.560
You can definitely
learn a lot more there.

00:38:14.660 --> 00:38:18.530
So the two filters that we want
to show you are a simple low-pass

00:38:18.590 --> 00:38:21.630
filter and a simple high-pass filter.

00:38:21.750 --> 00:38:27.280
So the low-pass filter is great
for just limiting the signal

00:38:27.280 --> 00:38:30.180
to the constant parts of it.

00:38:30.370 --> 00:38:33.240
So for example,
if you want to isolate gravity,

00:38:33.290 --> 00:38:38.040
or maybe sort of slow constant movements,
a low-pass filter works well for that.

00:38:38.280 --> 00:38:42.780
If you are instead trying to--
you're interested in maybe what a

00:38:42.780 --> 00:38:46.440
low-pass filter would consider noise,
you're looking in a high-pass filter,

00:38:46.440 --> 00:38:51.900
maybe you want to isolate
like taps or quick shakes,

00:38:51.900 --> 00:38:55.090
you would use a high-pass filter
to kind of focus on just those

00:38:55.230 --> 00:38:59.440
parts of the signal and kind of
cancel out the other effects,

00:38:59.440 --> 00:39:01.950
maybe the effects of gravity.

00:39:03.700 --> 00:39:06.150
So we have this neat application,
I hope you've all had a

00:39:06.150 --> 00:39:08.420
chance to play with it,
where it shows you the raw data

00:39:08.480 --> 00:39:09.930
coming off the accelerometer.

00:39:09.950 --> 00:39:13.020
It can be a great tool to work
through these kinds of things.

00:39:13.140 --> 00:39:17.840
So this device here is
sitting face up on a table.

00:39:17.980 --> 00:39:23.590
So as expected, gravity is pulling on it,
and the accelerometer is experiencing a

00:39:23.590 --> 00:39:28.300
force of negative 1g along the z-axis.

00:39:28.940 --> 00:39:32.650
So we're doing this in the time domain,
right?

00:39:32.790 --> 00:39:37.880
So as time progresses,
the samples move from right to left.

00:39:37.930 --> 00:39:43.210
But when we're applying these filters,
we want to move into

00:39:43.210 --> 00:39:44.570
the frequency domain.

00:39:44.920 --> 00:39:47.080
And so we do that through
a Fourier transform,

00:39:47.160 --> 00:39:48.800
traditionally.

00:39:48.830 --> 00:39:52.880
And when we do that,
this graph kind of changes, right?

00:39:52.880 --> 00:39:55.880
Instead of it looking like this,
it starts to look like

00:39:55.940 --> 00:39:57.140
it looks like this.

00:39:57.190 --> 00:39:59.580
So what does this mean?

00:40:00.010 --> 00:40:02.520
In the frequency,
the frequency of this graph,

00:40:02.520 --> 00:40:03.330
it's kind of a trick question.

00:40:03.330 --> 00:40:05.000
There is no frequency of it, right?

00:40:05.050 --> 00:40:06.390
It's constant, fortunately.

00:40:06.400 --> 00:40:08.830
Otherwise,
we'd all be floating around the room.

00:40:08.840 --> 00:40:12.980
So, it's just there, and as a result,
all the energy that we're

00:40:12.980 --> 00:40:17.000
feeling in the accelerometer,
it's all piled up at zero.

00:40:17.000 --> 00:40:23.520
Now, if we were going to take the same
device and shake it like crazy,

00:40:23.520 --> 00:40:29.250
we would see a different set of signals,
a different graph.

00:40:29.720 --> 00:40:31.150
We'd see something with
a lot more cycles in it,

00:40:31.230 --> 00:40:32.820
a lot more frequency in it.

00:40:32.840 --> 00:40:39.380
And when we do this
same kind of analysis,

00:40:39.380 --> 00:40:39.380
we would see...

00:40:39.540 --> 00:40:41.480
Something kind of the same,
but something kind of different.

00:40:41.520 --> 00:40:44.360
Gravity's still there,
still piled up at the middle.

00:40:44.370 --> 00:40:48.060
And if you look at this graph,
if I get out of your way,

00:40:48.060 --> 00:40:53.820
you can see that along the z-axis,
all in all, it's still very shaky,

00:40:53.990 --> 00:40:56.250
but it's kind of shifted
down by about a g,

00:40:56.250 --> 00:40:58.350
which makes sense,
because gravity hasn't gone away

00:40:58.360 --> 00:41:00.140
just because we shook the phone.

00:41:00.180 --> 00:41:04.330
But what is there, what's new,
are these sort of outlier frequencies,

00:41:04.330 --> 00:41:06.240
these new higher frequency instances.

00:41:06.330 --> 00:41:08.400
So what are those?

00:41:08.520 --> 00:41:12.060
Well, those correlate directly to how
quickly you were shaking the device.

00:41:12.080 --> 00:41:13.800
That's where those show up.

00:41:14.960 --> 00:41:17.530
So to go back to our filters,
let's say we want to

00:41:17.530 --> 00:41:18.560
apply a low-pass filter.

00:41:18.690 --> 00:41:21.690
Let's say we're working
on our analog pad,

00:41:21.690 --> 00:41:24.150
and we think these higher frequency
kind of instances are just the

00:41:24.200 --> 00:41:27.980
fact that the guy had too much
coffee today and is a little tweaky.

00:41:29.580 --> 00:41:33.360
So we want to focus on just this part,
and we want to ignore the other parts.

00:41:33.360 --> 00:41:35.510
We want just this yellow part.

00:41:36.100 --> 00:41:36.960
So how do we do that?

00:41:36.990 --> 00:41:39.870
So here's a very simple kind
of approximate way to do it.

00:41:40.000 --> 00:41:44.000
The math is fairly straightforward.

00:41:44.000 --> 00:41:49.080
The idea is that we're going to weight
sort of older values that we've seen,

00:41:49.080 --> 00:41:52.040
we're going to give those greater
weight than necessarily the

00:41:52.040 --> 00:41:54.000
newer signals that we're getting.

00:41:54.000 --> 00:42:08.110
Right?

00:42:09.210 --> 00:42:09.210
And so what that's going to do
is the constant parts of the feed

00:42:09.210 --> 00:42:09.210
are going to kind of accumulate,
and maybe the more like, you know,

00:42:09.210 --> 00:42:09.210
outliers,
sort of the jittery parts are going to

00:42:09.210 --> 00:42:09.210
overall sort of cancel each other out.

00:42:11.370 --> 00:42:13.480
So that was kind of a
cheap low-pass filter.

00:42:13.580 --> 00:42:17.400
So say you're interested
in that tweakiness.

00:42:17.400 --> 00:42:22.400
You're interested in looking for
hand claps or pedometer-type stuff.

00:42:22.470 --> 00:42:26.080
Then what we want is
probably these outer--

00:42:26.200 --> 00:42:42.700
[Transcript missing]

00:42:44.330 --> 00:42:49.580
So we have a couple pieces of sample
code that actually use all this stuff.

00:42:49.660 --> 00:42:53.570
One of them is the bubble level sample,
which I encourage you to kind

00:42:53.570 --> 00:42:55.970
of go check out to look at.

00:42:56.180 --> 00:43:00.310
How all that stuff, you can actually see
the kind of code in use.

00:43:00.870 --> 00:43:02.000
Here's a little snippet of it.

00:43:02.050 --> 00:43:04.910
What it does is there's two
low-pass filters that we've

00:43:04.910 --> 00:43:07.420
applied to the X and the Y axis.

00:43:07.460 --> 00:43:09.740
And so from that,
we're able to make an angle.

00:43:09.740 --> 00:43:11.730
And from the angle then,
we're able to update the

00:43:11.730 --> 00:43:14.490
cute little bubble thing.

00:43:16.990 --> 00:43:21.400
So I put together a quick
little demo that uses the same,

00:43:21.410 --> 00:43:24.090
a single accelerometer feed,
and then we run it through two filters,

00:43:24.140 --> 00:43:28.540
a low pass filter and a high pass filter.

00:43:28.540 --> 00:43:34.490
And while I walk over here,
we can cut to the demo.

00:43:37.410 --> 00:43:40.700
So, as I mentioned,
we've got two filters going,

00:43:40.700 --> 00:43:43.300
a low-pass filter and a high-pass filter.

00:43:43.360 --> 00:43:45.760
And the low-pass filters,
we have a little physics

00:43:45.760 --> 00:43:46.940
simulation in here.

00:43:46.940 --> 00:43:48.300
I'm using, what is that, Box2D.

00:43:48.300 --> 00:43:48.800
It's very cool.

00:43:48.800 --> 00:43:50.220
You should, like, check that out.

00:43:50.260 --> 00:43:51.080
There's a whole other thing.

00:43:51.080 --> 00:43:54.540
So, the low-pass,
the results of the low-pass

00:43:54.540 --> 00:43:57.000
filter I have going to gravity.

00:43:57.000 --> 00:44:01.530
So, as I'm tilting the device sideways,
and so I'm feeding my

00:44:01.530 --> 00:44:04.290
low-pass filter into gravity.

00:44:05.350 --> 00:44:07.680
Now, if I, you know,
flip it the other way, then, you know,

00:44:07.680 --> 00:44:08.980
gravity goes the other way.

00:44:09.060 --> 00:44:12.150
And it's got a little bounce into it,
just because that's how

00:44:12.150 --> 00:44:13.450
I have the stem set up.

00:44:13.470 --> 00:44:18.300
But I have this other filter looking
for higher frequency instances.

00:44:18.300 --> 00:44:23.100
So, if I give it a shake, then, like,
you know, it's kind of a "she loves me,

00:44:23.100 --> 00:44:24.300
she loves me not" simulator.

00:44:24.300 --> 00:44:27.410
But...

00:44:29.630 --> 00:44:35.160
So, and now it's kind of sad looking,
so I'll close that up.

00:44:38.370 --> 00:44:40.520
So we'll go back to slides.

00:44:40.620 --> 00:44:42.610
So again,
that was two filters kind of looking

00:44:43.050 --> 00:44:45.500
at the same raw general feed,
but tuned for two

00:44:45.600 --> 00:44:48.820
different kinds of motions.

00:44:51.020 --> 00:44:54.410
So unfortunately,
there's no real simulator

00:44:54.490 --> 00:44:57.660
support for the accelerometer.

00:44:57.690 --> 00:45:01.500
I wanted you guys to be able to pick
up your MacBooks and shake them around,

00:45:01.500 --> 00:45:03.200
but they were like, that's dangerous.

00:45:03.200 --> 00:45:05.140
You shouldn't do that.

00:45:05.140 --> 00:45:07.040
But one thing you can
do in the simulator,

00:45:07.040 --> 00:45:09.560
if you are playing with
the view controller stuff,

00:45:09.560 --> 00:45:11.320
you can reorient the device.

00:45:11.320 --> 00:45:12.500
There's some menu items there.

00:45:12.500 --> 00:45:15.610
And so that's a great way to test out
whether or not all your auto-resize

00:45:15.680 --> 00:45:17.770
flags and things like that are set up.

00:45:19.920 --> 00:45:22.540
So all in all,
an accelerometer is what we learn.

00:45:22.540 --> 00:45:23.970
Definitely use UI view controllers.

00:45:24.070 --> 00:45:25.750
They're great.

00:45:25.920 --> 00:45:29.700
Definitely use filters to kind of
hone in on the pieces of motion

00:45:29.700 --> 00:45:31.980
that you're trying to isolate.

00:45:31.980 --> 00:45:34.140
And like all the hardware
we've talked about,

00:45:34.220 --> 00:45:38.170
if you're not using it,
please let the system know so we can turn

00:45:38.170 --> 00:45:41.300
that stuff off and save some battery.

00:45:42.620 --> 00:45:45.940
So all in all, what did we learn?

00:45:45.970 --> 00:45:49.850
We learned, I hope,
a bunch about our hardware APIs.

00:45:50.030 --> 00:45:53.020
And I hope you guys will
just-- I know you will.

00:45:53.170 --> 00:45:56.390
You'll run off and just do all
sorts of crazy cool stuff with them.

00:45:56.870 --> 00:46:00.080
Specifically, for the image picker,
definitely check your

00:46:00.100 --> 00:46:03.640
source before you go,
just assuming that there's a camera,

00:46:03.640 --> 00:46:04.640
something like that.

00:46:04.650 --> 00:46:08.660
And for the other hardware stuff,
by all means, for core location,

00:46:08.660 --> 00:46:12.640
for the accelerometer,
If you're not using it actively,

00:46:12.640 --> 00:46:14.300
please turn it off.

00:46:15.330 --> 00:46:16.860
So we've got a lab tomorrow.

00:46:16.860 --> 00:46:17.850
A bunch of us are going to be down there.

00:46:17.860 --> 00:46:20.570
Ron's going to be down there.

00:46:20.590 --> 00:46:25.900
We hope to see the creations that
you guys have put together so far.

00:46:25.900 --> 00:46:29.050
That's tomorrow at 10:30.

00:46:30.050 --> 00:46:32.920
We've got Matt Drance,
so if you have any general

00:46:32.920 --> 00:46:36.500
questions or feedback,
he's a great guy to send that stuff to.

00:46:36.560 --> 00:46:39.240
And please keep reading
our documentation,

00:46:39.240 --> 00:46:42.200
keep sending feedback on it,
it's pretty good.

00:46:42.370 --> 00:46:43.960
So check that out.