---
Title:  Integrating iTunes U into Your Workflows and Infrastructure
Year:   2008
Web:    https://nonstrict.eu/wwdcindex/wwdc2008/505/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

How are you doing? I'm Eric Bailey. I am engineering manager for the iTunes U team, and we're going to talk about -- this session is all about iTunes U. We're going to cover -- What's new with iTunes U between '07 and '08? We're going to go through what we've added in the last year. We've broken it up into things that affect your private sites first, and then we'll talk about things that we've done to improve public sites. A lot of those things overlap, but we've organized it that way. Here's our agenda.

We'll get into iTunes U Web Services, talk about some things we're doing with Podcast Producer, and finish up with some cool things that the community is developing with iTunes U. So, first thing I want to talk about is international expansion. Before last week, iTunes U was available only in the US and Canada, and we're excited to announce that we're now available in Australia, New Zealand, UK, and Ireland.

So we'll get to the iTunes U and the iTunes Store. We'll talk about some of the new stuff that's coming from those countries there. But that's something we just announced last week. One of the things we added in last year was a change in policy so that each institution can have more than one site.

And the reason we did this is through feedback and through working with a lot of you just kind of hands-on getting into it, it was kind of difficult in some cases to do all that you want to do with one site. And with there being a public-facing set of content and private access for academic technology purposes, it was really more practical to get into it. So we decided to give two sites. So that was a change we made.

And this makes it better for those involved because a lot of the problems with -- you want to do with a private access site with credentials and controlling access, you don't want to mess that up and have stuff show up on your public site. So it makes a lot of sense to split these two. It's often different groups on campus working on these as well. And we also wanted to be able to expand iTunes U in the store and give a lot of the information that we could. So we made these changes.

And we want to make it clear that if you need a second site for your institution, send an e-mail to us and we'll get that set up. They are linked by the service agreement and they're linked by quota. Otherwise, they are completely distinct and separate sites. So you'll get separate reports. You can have separate administrators. Like I said, the only linkage is between the quota.

Another thing that we did is we added Apple ID, support for Apple ID, so you could log in as an administrator using an Apple ID or an iTunes store account. So you can have a separate site that's on your public site of your site. This makes it easy. You don't have to write a transfer script. The settings on access control are pretty simple at that point. You just want to make pages either private, still being constructed, or publicly available.

Another big change this year for us was being able to allow you to locally host your content. And we're doing this with feeds, RSS feeds. So why did we do this? Again, we took a lot of feedback from the community here, and we said, let's kind of follow what we're doing with the iTunes Store and the podcast directory and be able to consume your feeds, list it, index it, and make it accessible through the iTunes U interface.

We heard that bandwidth usage is a problem depending upon kind of the shape of your network and the way that you want traffic to go in and out. And it didn't make a sense to have all these sort of long-distance calls going back to Apple to upload and download all this content.

So if you want to be able to put video, and you know the consumption of that is going to be mainly on your own local area network, it makes a lot of sense to keep that hosted on a server inside your network for the best experience. So that's one reason. There are other reasons, too, simply for control, and maybe you're already doing things with other feeds, and this is an easier way to get content into the iTunes U system.

So RSS and locally hosting content was a feature we added almost a year ago, and we've seen a lot of people take advantage of this, and it's growing, and it's really, you'll see as we get through other things and other presentations this week about how important feeds are that this is kind of, as we see it, the way that a lot of sites are going to get built in the future.

So this is an opportune time to announce this. We've been working on this for a while, but at a development, it seems appropriate to talk about these two technologies. We joined the InCommon Federation last year for identity management. That's a federation in the United States that a lot of higher ed institutions are using for identity management.

And on top of that, we are running the Shibboleth Service Provider, which enables you to use this as an alternative to authorizing your users with a transfer script into iTunes U. So we've been beta testing this with a lot of help from Penn State and Washington and Ohio State and a couple other institutions.

And with their help, we're ready to take the testing phase and make this available this summer. So you'll see some more information from this on our iTunes U support site in the coming weeks. But we want to just announce here today that we're going to be doing a lot of work on this. We're ready for this, and we heard a lot of feedback from you that this was desired, and so we're happy to say it's available.

You can migrate to this on your own speed because this can act as an alternative to a credential transfer script. You can use them in parallel. So as you get to implementing this, you can use one or the other and migrate away from the transfer script if you wish.

So those are some of the important features that we brought to kind of the private sites for iTunes U. I'm going to jump into some of the things that we've done for public sites. And the first one is the public feature page template. As we started to see more and more institutions interested in creating a public presence, we wanted to create a template that served their needs best.

And Brent, who's sitting up here in the front row, is one of the people that helped us with that. In developing the Stanford site, they gave us a lot of feedback for what they were looking for. What we wanted to do is create a main page for the site that really linked to all the content, but allowed that content to be changed and linked to and stay fresh so that it supports a good home base for the institution and is easier to keep fresh.

And we really encourage people to ask for this and upgrade to this when they have hundreds of assets across multiple interests because otherwise it can look sort of thin. So let's take a look at it. This is a screenshot from over a year ago of Stanford's site with our original template. And it was nice. It was simple. It had just six categories.

But it really required you to browse and kind of drill down and figure out where all these things are. But take a look at this today. It's a lot prettier. And it draws on some of the things that we can do in iTunes U and the iTunes store that make this a better destination for the Stanford community and other public visitors. So let's take a look. I want to highlight categories. So the structure of this site and all sites based on public feature page template is going to be rooted up in the left-hand corner.

These are the sub welcome pages. So you can create different pages based on however many people are watching. And you can create a page based on whatever you want to organize the content. Everything else on the page becomes a link to the content down within that structure. So for instance, this courses section that they've put at the top has multiple courses in it.

They've chosen to feature three on the public feature page template. And you can see in the top right there's a link for see all which allows you as a visitor to go see all the courses that have been added to this section. So I'll go into that in a second.

They have a top downloads along the right, which is something they've chose to add to this page, which is something that the template automatically generates from data that we're collecting on behalf of Stanford and iTunes U. So they, as a visitor, you can see sort of what the most popular content is, and this is something they don't have to maintain.

So let's jump in as an admin and kind of see what this looks like. If you log into one of these templates as an administrator, you can go in, edit a section, and you'll see here that all we're doing here is copying and pasting the URL to a page to get the handle for the item that you want to link to into that text field there. And then iTunes U will go get the appropriate artwork and titles and everything and display it on this page. And what you can do is add many things to this page.

[Transcript missing]

As an admin, I talked about top downloads. You can go in here and you can set how many you want to display. Okay, you can do 5, 10, 15, 20. There's also an RSS feed here, which you can get the URL to a feed which mirrors these top downloads. So if you want to create a widget or mirror this somewhere else on your website, you can take that RSS feed and you'll have a replica of the top downloads.

[Transcript missing]

So if you haven't checked it out, check it out. There's a lot of great content there. So let's talk about the new category pages in the iTunes store. We feel this is a really great way to discover and browse new content. Search is still king, so the main way people find content is search, so it's very important to update your metadata and have rich metadata that describes all the tracks and content in your site. But with categories, you can get a new way for people to discover categories, so let's talk about that.

For content that is uploaded to Apple, we have a web interface for categorization, and I'll go through that in a second. For content that you host through an RSS feed, we have documented ways to add categories to those feeds so that all the content that comes in through those feeds is now categorized and shows up in those places in the store. And then last but not least, you can use web services. So we've got a web service called Category Metadata, which is our web services, which I'll talk about in a little bit, to update the category courses.

So those are the three ways you can manage the category metadata. Here is a category page on science. So we've got science highlighted. So this page being dedicated to science, we're going to have content listed that is new and notable. So that's content that tracks that were recently added to iTunes U that were categorized as science. We've got content in the middle that's collections of content in science, where the majority of the content is science content and is popular from a download perspective, and then we have top downloads just within the science category.

So if you're really interested in science, it's a great destination to find more information here. We have published a taxonomy of these different categories. We have 13 top-level categories, and there are subcategories within science. And as we see those buckets fill up, we'll expand this interface to be even richer for discovering content in those subcategories.

So let's take a look at the editing interface that I mentioned for categorizing content. When you log in as an administrator to your iTunes U site, you'll see a new link called Categorize Tracks, which will take you to a page which looks like this. So it's not only helpful for categorizing tracks, but it's also a nice way to look at kind of an inventory of your site. This gives you a sense of how many tracks are in different areas, and it shows it all the way down to the tab or group level. And you can see a lot of these are feed-based in this site.

So you can click on the button Categorize for that particular section, and you get a new page that looks like this. You can look at these side-by-side as you go through to kind of see where your content lines up in terms of category. So it's important to categorize these tracks individually if you can, but you can also set up your collection, a group, within iTunes U and set an initial category so that all the content you add to that group automatically gets assigned a category.

If you know it's all going to be on one subject. So if you're doing a course on physics, it's obvious, you know, where to categorize that content. But if you've got a mixture of lectures from different speaker series on campus, it's important to tag those individual tracks with the appropriate category so that people can find those on those pages, and we will highlight those. So you can end up having groups that have a mixture of content from different categories, and you'll have, you know, groups that are, you know, all about one subject, and that's fine.

If you don't find a category in our taxonomy that matches your content, we recommend do not pick one. We'll discover that we have some holes in our taxonomy, and we'll fill those up by noticing that some of the content isn't getting categorized. So that's an interface for managing and kind of getting an inventory of all the category data for your iTunes U site. I won't go into the RSS feed. We've posted that on our support site, and you can figure out how to categorize tracks using feeds and web services.

So with that, let's kind of jump back out. We'll go into web services next and take a look at the things that we've changed in web services in the last year. If you haven't worked with iTunes U web services before, I'm just going to do a brief basic overview. In the last year, we introduced it a year ago and talked a lot about it at last year's session. We've added things to it.

I want to cover a few key changes and point on versioning that we want to get across today. If I get nothing else across, hopefully it's about using XSDs and versioning on web services. So the web services provide a, you know, programmatic interface for manipulating the structure and layout and content within your site. So what we have is a set of tools. We have a set of tools. We have a set of operations.

I'm not going to go through each one, but these are operations that you can put into an XML document and request the server to change something about your site. So in the top left, we've got ShowTree, which allows you to get an XML description of your iTunes U site. And then beyond that, you can do operations like add course, delete course, add a track or delete a track.

So this is a great way for you to automate the addition of content, manipulate content. If you've got a -- a capture and record and delivery system, like podcast producer, which we'll talk about in a second, this is a way to interact with your iTunes U site and get a lot of content in there quickly.

So here's an example of how we describe the format of how you send these to iTunes U. An XSD is an XML schema. It describes how you post stuff to us. And it also describes how we are going to respond to those requests. And we introduced this in the last year, and there was a version one, and we've been continually adding to it. And the XSD itself is an XML document. Here's a snippet of just the very beginning of that document, which describes the different operations and the different data you're going to get back and sort of how it's going to be structured.

This is our contract with you if you're using Web Services to know how to express and receive the data. So last year, we announced Web Services. We didn't have any kind of versioning scheme. We've added that. So I'm going to call what we did last year pre-1.0. We're trying to end of life that. And ask that all of your requests that use Web Services include a version string.

And this is important because we don't want to break your code, and we want to be able to respond to you in exactly the way that you would expect. And so this is a list of the different versions we've done in the last year, and we're planning to continue to support those so that if you send a 1.02 request, you're going to get a response in the same format.

So like I said, this is the one thing I want to get across because I've heard reports where we, Apple, updated the iTunes use server, and something on your side broke. We don't want that to happen. So we want you to upgrade to newer versions on your own time.

And so when we update our side, we're going to rev the version so that if we're going to change the format of how we respond, that's clear to you. And by sending us that request with a version string, you'll be given the opportunity to upgrade on your own time. and we won't break you.

That's my spiel on web services versions. One of the other changes we made this year is we removed credential operations, add credential and delete credential. They were really -- the way to interact with this was -- is to use permission. So a credential is really a piece of a permission, so we removed that, and I think that cleared up some confusion.

And then we want to make sure that all of you that are building sites with feeds have a great experience, and so we made sure that web services have operations to add, remove, and refresh feeds. So our other operations tend to have add, delete, and merge. That doesn't make sense with feeds. It's really just add and remove. We want the feed to be the master system of record of that data, so we don't want to be trying to merge information. So it's really add the feed to populate this tab or remove it.

And then we've added a refresh request so that if you're... Capturing and uploading in an automated way, you can tell our server, "Hey, we just posted new content. Go fetch our feed again, and we'll update the interface and re-index the content." So we automatically do that on a daily basis, but if you just posted something and updated your feed and you want to get that immediately in there, you'd want to send one of these requests to iTunes U Server.

So, covered web services, podcast producer. Podcast producer is a part of Leopard Server, and it is a new feature in the last year. And we want to talk about it, and there's some other sessions that talk about it, because it's got a great iTunes U integration story. And if you haven't seen it, I recommend you check out some of the other sessions on this, which I'll highlight later. But it's a way to automate the capture, the encoding, and delivery. And we're going to do a demo in this session, but it's going to be in another session on podcast producer for Leopard, the new version, Snow Leopard.

So I recommend you check that out because there's an interesting way of looking at how iTunes U will integrate with Podcast Producer. So the idea with Podcast Producer and Leopard Server was you could take a piece of content, capture it, add some other information to it, tag it, put a header and footer on it, and then tell iTunes U about it, post it to iTunes U. And that's great. But we've done a lot to add feeds and other services to iTunes U.

So what we're talking about with Snow Leopard, the version Snow Leopard and the new features they're adding, is to be able to have their system produce feeds that we synchronize with so that as soon as you upload the content you can manage with the web service I just mentioned, we would be able to have iTunes U be updated.

And the other idea that you will see in the demonstration that they do with Podcast Library is the idea that we could populate everything we need for an entire course from a feed. So you wouldn't have to go and provision the course, add the feed, add different tabs for the different types of media.

One thing that Podcast Library does a great job of is it gives you the ability to encode different versions of the same content. So you could encode iPod video, quality video. You could encode an audio version. You could encode a set track. And you could do a high def version of that track, put it all in one feed, tell iTunes U about it, and a course page gets created.

So that was what we were going to do here. We don't have that available. So I want to move on to our community development and ask two people to come up here and talk about what they've been doing with iTunes U and give you a flavor for how they're using web services and some of the other things that they're doing with iTunes U. So first I'd like to ask Rich Wolfe from University of Illinois. Chicago to join us.

I think I need the clicker thing. There you go. Okay. Hi, I'm Rich Wolf from UIC, and I'm here to talk about a little application that I have called Woolloomloo. Okay, how did it all start? Well, if you don't follow iTunes U admin forums, basically it started like this.

We got our iTunes U site in August of 2006, and just like you guys, we get our credentials and our admin string and stuff like that, and we plug it in, and then all of a sudden we realize, whoa, wait a minute, there's some extra work that you have to do here. If you have a private site, you have to come up with a transfer script and a portal website and so on and so forth.

And, you know, we basically, we figured it out, but there came a point at which I said, well, you know, someone ought to write an application that makes this a little simpler for the first-time user. You can just go in and put in your strings, and it'll just work.

And I looked for that app, and I didn't see it, so I thought, well, I'll just make it. Okay, so let me talk about the problem that Willamaloo basically solves for you. You get your site activation key from Apple, and you click on it, and you get these four colored strings on top.

And you can see that they're basically, you know, they're your base URL, your site shared secret, your administrator credential, and your debug suffix. And what you have to do is you have to come up with this big, long, monster, white URL on the bottom that basically describes what your, you know, what your iTunes view request is.

And the problem that you have is that you have to do this, and you have to come up with a credentialing scheme at the same time. So you have this problem where you're trying to figure out your credentials and how you're going to, you know, authorize people to get into iTunes view.

And you want to actually get in your site to do things. And so that's the problem that Willamaloo basically solves, right? It basically lets you get into your site from the desktop so that you can start playing with your credentials, and you can see how they work, and you can see what URLs should be generated so you can compare with what your transfer CGI is doing. So basically, it's really what I think is basically the basic administration tool that you have to have when you're dealing with iTunes view.

So when I looked at this, I said, when I got the basic app out there, I thought, well, can I do more with it? Once I got past the point of figuring out how your credentials ought to look, I thought, well, is there more that I can do with this?

And when the web services came out, and all of a sudden it became obvious that, well, there's all these great things that you can do. Like you can batch create courses, or batch delete courses, or do things that typically you'd do as an administrator, but are kind of tough to do sometimes from the iTunes U interface. So actually, the XML schema and the XSDs, these are really cool things, I think, in the web service API.

So, okay, so I want to talk a little bit about why I think the XML schema is a great thing, right? And the first thing is the obvious thing. When you use the XML schema in the web services, basically they make sure that the data that you send to Apple using the web services are, you know, the obvious thing is that you're going to get data validation. The XSDs do this for you, right? They validate your data. And that's a really cool thing.

But the other cool thing that I think is sometimes not really well understood is that the XSDs are this really great set of documentation. Even if the iTunes U admin guide doesn't really explain what a web service does, if you look at the XSDs, it's kind of like a little header file. It really does describe what the web service does in a pretty good way. So I look at the XSDs. I mean, a lot of times I'll turn to them first even before I look at the iTunes U admin guide to figure out what a web service does.

Okay. The other thing that they do is they're actually information for applications that you might write. And that might not seem really obvious, but when you think about it, XML is just like this big, long bag of UTF-8 characters usually. And what the XSDs bring to it is they kind of bring a little typing system to it.

So if the XSDs say that something is an XSD date, then your application is going to know that it's an XSD date, right? And since it validates the data, your application can just know that something is going to be a date or a Boolean or an integer with values from 2 to 10 or something like that.

So that's a really cool thing that it adds to XML. And the last thing I want to mention is this thing that Eric was talking about, which is the API contract with Apple, which I think is really, really important. Because you have an application that you do, and then Eric and his team, they go in and they make some changes to iTunes U. But as long as your application versions and says that it's using, say, the 103 XSD file, the information that you're going to get back from Apple is always going to be the 103 response.

So as long as you're versioning correctly, the API contract exists and the application that you have still works. And an example of that is the – we'll move. The desktop application still uses the 103 XSDs, but the automator actions, which I'm going to talk about, actually use the new 111. So that still works.

Okay, if you want to get these tools, I actually have them on a website, itunes.uic.edu/willamaloo.html, and all the tools and documentation are up there for you to grab if you want to do it. And I just basically give this stuff away for free, so you can just grab it. And with that, I think I'm going to try and do a little demo of how these things all operate.

I think this is where I have to ask for the laptop demo. There we go. Okay, so let's say that I just got my-- oops, wrong one. Say that I just got my iTunes U site and I've clicked on my site activation link. And these are the kind of strings that Apple sends you, your base URL, your shared secret, and so on. So what I wanna do is I wanna get into my iTunes U site directly. So what I'll do is I'll open up my applications.

And I'll go to Woolloomooloo, which is way on the bottom, because it starts with a W. And when you fire up Woolloomooloo, the first thing that does is it says, "Oh, I know you've gotten these three strings from Apple, your base URL, your shared secret, and your debug suffix, so can you just paste them in here?" So let me do that.

Okay, I got him in there. And then when you do that, willamaloo does some things behind the scenes and it figures out a few things and it basically sets up a little bit. And what I wanna do is I wanna grab a copy of my site XML. So to do that, I'm just gonna click on this little refresh button. And what that does is it goes off and it grabs a copy of my site XML and it should display hopefully in a second.

There it goes. Okay, so you can see that my site's come up, and Willa Maloo knows that's the site, and you can do things like you can drill down and see, you know, if there's things inside your site, and you have these forward and back arrows that do different things.

But let's say that I want to, just now, I just want to go straight to my site and see how this is going to look. So what I can do is I can click on this little reveal button, and what it does is it generates that big, long, white URL that we saw in an earlier slide, and it opens to your site as an admin. So that's how that works. Okay, thanks.

Okay, so just in order to save time, what I've done is I've created a pre-baked set of settings here so that we can do this real quick, and I will refresh again as a site administrator. Okay, and what you can do is you can become different roles at your site.

So you can see here that I have different roles set up. I can have a student role, an instructor role, different things. And you can see in the little drawer that it basically shows what credentials each person has. So I can, you know, if I want to be a site administrator, it has a certain credential and others. So what I'm going to do here is I'm going to access my site as a student.

So I'm just going to become a student just so that you can see what this looks like. And when I do that, it basically goes off and it should, with any luck, re-access my site as a student. And now you can see all those edit links have gone away. So now I know my student credentials are going to work. I can see that that's going to look good. Now, you can also use the tool to do a lot of other fun things. Let me switch back to a site administrator.

And what I can do is, if you want, I can open the site using Apple's debug webpage. This is something that you see, so if you need to generate these credentials and send them to Apple, you can. You can also do things like look at site logs. So what I'll do is I'll set here and I'll scroll back a couple days to make sure I got something good, and we'll get our logs.

and you can see that it generates all the site logs for a set of days that you specify. You can go back 60 days. You can use these little tables to sort on the type of log or you can search for things and you can do all kinds of fun stuff.

One of the tools that I really like that I'm hoping you guys will find useful is this thing called the URL Composer. And what this does is it basically allows you to generate any valid URL that you would normally send to Apple's iTunes U. So, just as a little fun trick, what I can do is I can say, well, I want to use my site administrator role. And what I'm going to do is I'm going to enable that and I'm going to change the basic command from browse to show tree.

And you can see that it basically generates a showtree command, but this URL is actually live, so what I can do is I can cut and copy it, go off into Safari, bring up a new window. Oops, I can close this window now. I don't need it. Paste in there. And it's an instant showtree, so you can see your site URL that way. Thanks.

Okay, so, and then there's other things that the tool lets you do, too. Like, there's a bunch of inspectors. Oops, sorry, let me go back in the tool. There's inspectors that you can use. So, you can see a themes inspector here, so you can look at your themes. And I'll make this so that you can change your themes and re-upload them to Apple. And there's also a permissions inspector, so you can see what permissions your site actually has for this level. So, that's kind of neat.

And then, hopefully, I'm thinking about ways that you can actually use this tool to change these things. So, let me close up these little windows, and then let me mention something that I get asked about a billion, zillion times, and that is, this is really great, but my basic problem is that I'm a Windows user, and I don't have a Mac.

So what I've done is I've actually taken the time to-- I've bitten the bullet and I've learned enough about .NET 2 to actually create a Windows application for you guys that does the basic stuff that the Mac does. So for example, I can use this and say that I want to open my site settings. I'll open them up here. And you can see that basically it has the same concept of that. You can have different roles, and you can have different credentials and so on. And I'll just tell it to open my site.

Hopefully, if Explorer can figure this out. There we go. And we'll agree. Hi, Explorer. Stupid. But basically, this uses your default browser, whatever it is, and then it goes in and you can see that it accesses your site as an admin. And you can use the same tool in Windows to basically verify that your credentials are going to work. So now let me talk about the web services side of this. And, you know, you've basically seen how this tool works.

But what I want to do is I want to say, well, you know, now I can do more stuff. So what I've done is, let me shrink this, and I will close this window because I don't need it. I'll just close you just to not be confusing. Okay, so what I've done is I said, well, you know, maybe what you want to do is you want to -- where's my cursor? There it is.

What you want to do is you want to do a little bit more. So I thought, well, what are typical things that you need to do? You need to delete 20 courses or you need to change tracks for 52 courses or something like that. So what I've done is I've created a set of Willamaloo Automator actions that you can use with Automator.

You can see here that there's a whole bunch. You can do things like find tracks in the site or generate site logs or get XML or whatever. So what I do is I have a little automator action here that what it does is it allows you, it basically looks at the contents of a currently open text document and it basically will look at that file. Let's see what it is. I have a... - So I have a site here with my courses in it. So these are maybe four courses that I want to create on my site because when I look at my site, I see that, well, sorry.

I see that, you know, I have this new and noteworthy section on top, and I'd like to add a couple of courses to it. So that's what I'm going to do. I'm going to use this automated interaction, and what it does is it looks at the currently open text of the document, and it pulls the data that's in there.

And then what it'll do is it'll send it to the add courses to, basically it adds courses to parent handle, whatever you have. And if you don't know how the web service works, parent handle is kind of this thing that you get from iTunes U that says basically it's a container that you want to put courses in. So it's like a group or a division or something like that. So I've already pre-populated mine with this, and let me run this script and see if it actually works, and hopefully it does. Okay, so it grabs a file, and it goes off.

With any kind of luck, it'll do the right thing. Okay. So what I'll do is I'll go back to iTunes, and I'll refresh my site. And you can see that it created all four of these courses. So if you need to do this, you can imagine that you might have like a million courses that you want to create, and it'll do that. So that's basically my demo, and I'm done. Thanks. Thanks, Rich.

Very cool stuff. One thing I forgot to mention I want to point out, we talked about web services a bit. If you don't send version, it's still going to work, but you're going to get locked into version 1.1 of the XSD. So we had communicated to our site admins that we were trying to end versioning, and we really want you to use the version strings, but if you don't, you're going to get locked into the 1.1 XSD. So with that, I want to bring up Cindy Franco from Vanderbilt University. A lot of you use Blackboard, and they've been gracious enough to share their solution in Blackboard, and Cindy's going to talk about that.

Good morning. One of the things that we did at Vanderbilt was we created a building block for Blackboard. We had a hard time trying to figure out How are we going to get all these students to connect to iTunes U? We have audio, video, we want to organize courses, we want to add organizations, but we also wanted to share the building block with others. And one of the things that I do is maintain relationships with our users and provide some high-level implementation support.

We had a lot of content that we wanted to get out. That was probably the most important reason why we went iTunes U. But we also wanted to expand the course use of audio and video. We needed secure course content and user information, so it was real important, whatever we chose, that our user information was secure. And we wanted to expand the use of new media.

We looked at Blackboard, and Blackboard's not a streaming server. We've had some issues with people uploading some really large audio/video files, slowing down our server. We have dedicated servers, we have clustered servers. We've tried to do everything on the Blackboard side, but it just wasn't working out for us.

We had some other campus servers. They didn't quite work. iTunes U out of the box was great, but it didn't connect Blackboard. And we wanted our students to go to Blackboard to, we wanted them to know that if they needed something for their course, they could go to Blackboard.

We had some other campus servers. They didn't quite work. iTunes U out of the box was great, but it didn't connect Blackboard. And we wanted our students to go to Blackboard to, we wanted them to know that if they needed something for their course, they could go to Blackboard.

And we wanted our students to go to Blackboard to, we wanted them to know that if they needed something for their course, they could go to Blackboard. And they don't have to think about, oh, I have to log into iTunes U now. We wanted it simple and streamlined. We did look at some other Blackboard solutions, but it just didn't quite work for us.

So what we did, we created a building block. This was pre-web services, and we started in spring of '07. And we took a look at what we had, what we were doing with Blackboard, and this is the workflow right now as it stands. Faculty logs into Blackboard. They don't have to know that it's iTunes U. They request iTunes U building block.

An email is automatically generated to the iTunes U administrator. They get an email notice, they set up the iTunes U space, they map the course in Blackboard manually. You have to go in and tell it this is the map. An email is automatically generated to the faculty member, and then they can go in and upload content. In between, there's this place. Do you want it public? Do you want it private? There's no easy way to do it. This is manual between the iTunes U administrator and the faculty member. There are some email exchanges going on.

After the content's uploaded, the faculty member then has to go back and create a link in Blackboard to tell, so the students can access the iTunes U site. With web services, this is what we're planning to do this summer in conjunction with a couple of other schools, is to streamline this. Yes.

So just three steps. The only manual place would be the public or private. And the way we see it is that that was difficult. We were losing a lot of faculty with all those steps. After the second email, they just say, "Forget it. I'm just not going to use iTunes U." We came to this place after talking to some of the schools and our users.

You know, just figure out what was best. So when we were talking about on-campus implementation, we did a lot of campus promotion. We had training sessions. There's RSS feeds, university websites, blogs. With other users, I do maintain A list of our users. People get this from word of mouth. I just found out that someone's distributing one version of our building block. I just stumbled upon it. I didn't even know that was happening, but that was great.

We go to a university website, you can get this, but it is free. Web services is not enabled, which is why I didn't want to do a demo. Not until we get it all streamlined. But what it does is it passes user student role in a course and their enrollments, all their enrollments. No student data is transferred. That was very important to us. No IDs, no Blackboard IDs. They don't need a separate Apple ID. Same thing with our instructors.

If an instructor is a graduate student, say, and is also taking courses, All that information is passed to iTunes U. Student logs in. They can either go directly to their course or they can back up a little bit, and they can actually access all of their courses with appropriate permissions.

One of the things with our building block, though, is when we, what I tell people is it's beautiful once it's working. Not just that it's our building block, but it's beautiful. But the hardest part is getting it set up. But once you get it set up, it works great.

So, which is why it is important to me to maintain a list of those users and make sure that everybody does have a good, successful implementation of our building block and iTunes U. And that's just my brief talk about what we did at Vanderbilt and Blackboard. Thanks, Cindy.

So to wrap things up before we get into Q&A, a couple of things I want to make you aware of. If you don't know where our documentation is and our support services, that's the URL. Mark Malone. Hey, Mark. He's our technology evangelist for iTunes U. And this is important, some of the related sessions. We have a lab this afternoon for iTunes U on the first floor.

And if you have some real detailed questions, we encourage you to stop by and take a look and ask those questions of us. There are several sessions I mentioned earlier on Podcast Producer, and these are those. So if you want to learn more about the integration of Podcast Producer with iTunes U, all of those, I think we'll mention it. And I think the last one goes into the greatest depth.
