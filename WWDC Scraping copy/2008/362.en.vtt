WEBVTT

00:00:20.590 --> 00:00:23.890
Good morning.

00:00:23.890 --> 00:00:25.340
My name is Dan Keen.

00:00:25.420 --> 00:00:29.040
I am an iPhone software engineer,
and I'd like to start out by

00:00:29.120 --> 00:00:32.580
actually showing you a demo of
what you're going to be able to

00:00:32.580 --> 00:00:34.940
do when you have finished here.

00:00:35.060 --> 00:00:37.770
So if we could go to the wolf, please.

00:00:42.480 --> 00:00:45.240
So the product that I'm actually
trying to show you here is--

00:00:45.240 --> 00:00:46.760
it's called Restaurant Viewer.

00:00:46.820 --> 00:00:49.980
It's a sample code that
you'll be able to download.

00:00:50.030 --> 00:00:52.160
And it's pretty straightforward.

00:00:52.390 --> 00:00:53.380
Here we have Lebec Fin.

00:00:53.380 --> 00:00:55.380
It's a restaurant in Philadelphia.

00:00:55.380 --> 00:00:58.280
And the first thing I'm going
to show you is that this app

00:00:58.280 --> 00:01:00.810
supports rotation natively.

00:01:00.820 --> 00:01:04.830
I've slowed down the rotation
animation on this phone.

00:01:04.970 --> 00:01:10.170
So you'll find that when
I rotate it-- when I rotate it--

00:01:12.640 --> 00:01:15.940
that the stars are moving to a
different location underneath the title,

00:01:15.940 --> 00:01:17.750
the descriptions moving
over to the right,

00:01:17.830 --> 00:01:20.980
and everything is animating very nicely.

00:01:24.140 --> 00:01:31.390
If we rotate it back,
you'll see that again,

00:01:31.390 --> 00:01:31.390
everything animates very nicely.

00:01:31.710 --> 00:01:35.260
In addition,
there's a nice Categorize button here.

00:01:35.370 --> 00:01:37.100
If we click it,
a sheet is going to pop up,

00:01:37.150 --> 00:01:39.830
and Lebec Fin happens to
be a French restaurant,

00:01:39.910 --> 00:01:42.600
so let's categorize it as French.

00:01:42.730 --> 00:01:45.250
So you touch French,
and the restaurant name animates

00:01:45.390 --> 00:01:48.760
there very nicely and disappears.

00:01:48.850 --> 00:01:51.330
So at the end of this talk,
I'm going to actually walk you through

00:01:51.420 --> 00:01:54.300
setting up all the code to do that.

00:01:54.420 --> 00:01:56.360
So if we go back to slides.

00:01:59.210 --> 00:02:02.540
So as you know, we're here to talk about
three things today.

00:02:02.700 --> 00:02:06.010
Controls-- no, hang on.

00:02:07.500 --> 00:02:08.760
hitting the backwards button.

00:02:08.760 --> 00:02:11.420
Awesome.

00:02:11.530 --> 00:02:15.440
We're here to talk about controls, views,
and animation.

00:02:15.440 --> 00:02:16.850
So the first thing is controls.

00:02:16.860 --> 00:02:17.510
What are controls?

00:02:17.590 --> 00:02:21.020
Well, we're going to go through
some sample controls to use,

00:02:21.140 --> 00:02:24.740
and how exactly to use these controls.

00:02:24.850 --> 00:02:27.580
We're also going to talk about views.

00:02:27.710 --> 00:02:30.140
We're going to say how
do views actually work,

00:02:30.210 --> 00:02:33.480
and we're going to give you some
examples of nesting and translation.

00:02:33.480 --> 00:02:36.970
You'll see here that the control
that's above is actually a

00:02:36.970 --> 00:02:39.920
combination of several sub views.

00:02:40.090 --> 00:02:42.820
And finally, we'll talk about animation.

00:02:42.900 --> 00:02:45.490
So here we're going to
talk about some flexible,

00:02:45.620 --> 00:02:50.240
fast techniques to use for animation
to give your apps impressive,

00:02:50.240 --> 00:02:51.860
yet useful bling.

00:02:51.960 --> 00:02:54.480
So here I just want to say, well,
what does that mean exactly?

00:02:54.480 --> 00:02:55.510
Useful bling?

00:02:55.520 --> 00:02:56.750
Bling isn't useful.

00:02:56.760 --> 00:02:59.440
It's just pretty.

00:02:59.570 --> 00:03:02.520
Here we have an example movie where
you're clicking on the Groups button,

00:03:02.520 --> 00:03:04.230
and everything's animating
out to the right.

00:03:04.240 --> 00:03:06.460
If we actually were to
look at this closely,

00:03:06.460 --> 00:03:10.280
the All Contacts is moving
out to the right and fading.

00:03:10.340 --> 00:03:11.770
The Plus button actually doesn't move.

00:03:11.780 --> 00:03:13.200
It just fades.

00:03:13.260 --> 00:03:16.170
And the Groups button is
actually moving over and cross

00:03:16.170 --> 00:03:18.260
fading into the Groups title.

00:03:18.380 --> 00:03:21.260
So those three different
animations are actually providing

00:03:21.370 --> 00:03:23.880
a lot of context to your user,
and giving them an idea of

00:03:23.880 --> 00:03:25.080
what's exactly happening.

00:03:25.080 --> 00:03:28.110
It keeps them focused
on the content itself.

00:03:28.250 --> 00:03:30.890
It's not really superfluous.

00:03:31.150 --> 00:03:33.470
But before we get into
controls or animations,

00:03:33.570 --> 00:03:35.000
we first need to talk about views.

00:03:35.000 --> 00:03:38.110
Some of this might be a review for some
people that have attended other sessions,

00:03:38.110 --> 00:03:39.230
but let's still go through it.

00:03:39.630 --> 00:03:41.520
So what is a view?

00:03:41.650 --> 00:03:46.930
Well, a UI view inherits from NSObject,
which is our base class.

00:03:47.300 --> 00:03:50.360
From there, inherits from UI Responder.

00:03:50.400 --> 00:03:56.220
UI Responder actually deals with
handling the event forwarding chains.

00:03:56.360 --> 00:03:59.350
And then from there, we get UIView.

00:03:59.400 --> 00:04:05.190
OK, so a UIView is a UI responder,
which is an NSObject.

00:04:05.290 --> 00:04:05.700
Awesome.

00:04:05.700 --> 00:04:07.200
What does that actually mean?

00:04:07.300 --> 00:04:10.430
Well, a UI view,
before we actually talk about

00:04:11.160 --> 00:04:13.470
the UI views and how they
handle the drawing contents,

00:04:13.530 --> 00:04:16.610
we first need to say,
where is it actually going to

00:04:16.610 --> 00:04:18.800
draw the content on the screen?

00:04:18.930 --> 00:04:22.870
So most of you are probably
familiar with the coordinate system.

00:04:22.870 --> 00:04:27.220
In our case, the coordinate origin is up
in the top left of the device.

00:04:27.220 --> 00:04:30.830
If you're familiar with AppKit,
it's on the bottom left.

00:04:30.870 --> 00:04:33.800
So this is going to be a difference
for you if you're used to AppKit.

00:04:34.150 --> 00:04:36.020
All right,
so now we have a coordinate system.

00:04:36.020 --> 00:04:37.710
So how do we actually lay out our views?

00:04:37.860 --> 00:04:39.540
So what is a view, again?

00:04:39.550 --> 00:04:42.140
A view is just a rectangle in space.

00:04:42.180 --> 00:04:44.360
It occupies a quadrilateral region.

00:04:44.400 --> 00:04:46.040
That's pretty straightforward.

00:04:46.070 --> 00:04:49.400
How do you define this region in space?

00:04:49.420 --> 00:04:52.860
Well, the way we do it is we
use a CGRect struct.

00:04:52.980 --> 00:04:56.880
A CGRect struct has an origin and a size.

00:04:56.950 --> 00:05:00.240
So in this example,
the origin of this view is at 20, 0.

00:05:00.350 --> 00:05:03.480
So it's over 20 units and down 0.

00:05:03.800 --> 00:05:08.060
And the size of this rectangle is
actually 200 in width and 100 in height.

00:05:08.120 --> 00:05:11.780
So the second parameter to a CGRect is
not actually where the lower point is.

00:05:11.780 --> 00:05:14.360
It's the size offset from the origin.

00:05:14.400 --> 00:05:16.780
It's just a nice thing to keep in mind.

00:05:17.190 --> 00:05:20.860
All right,
so that's some basic UI view stuff.

00:05:20.860 --> 00:05:23.270
Pretty straightforward where
you are going to put your views,

00:05:23.400 --> 00:05:25.120
how you do with that stuff.

00:05:25.200 --> 00:05:26.840
What about a control?

00:05:26.930 --> 00:05:30.760
Well,
we saw this inheritance chain already.

00:05:30.890 --> 00:05:31.980
How does control fit into here?

00:05:31.980 --> 00:05:36.220
A control actually just
inherits from UIView.

00:05:36.310 --> 00:05:37.560
So what does control give you?

00:05:37.560 --> 00:05:38.900
I mean, it's just a view, right?

00:05:38.900 --> 00:05:41.600
Well, actually,
a control already sets up a bunch

00:05:41.600 --> 00:05:44.800
of the handling of events for you.

00:05:44.950 --> 00:05:48.100
For instance,
let's say that you wanted to handle

00:05:48.100 --> 00:05:51.080
a button up press in your control.

00:05:51.760 --> 00:05:55.580
There's a way to set the
target for an action.

00:05:55.720 --> 00:06:00.810
So we have this Add Target action
for Control Events call.

00:06:00.950 --> 00:06:06.750
In this example, we have a Dismiss button
in the top left here,

00:06:07.020 --> 00:06:11.450
and we're going to do the
action on the target down here.

00:06:11.810 --> 00:06:15.570
So the way you're going to do this
with the Add Target action for control

00:06:15.570 --> 00:06:22.820
events is the control event that we
care about here is a UI touch up inside.

00:06:23.030 --> 00:06:31.270
This is your equivalent to a mouse
up inside that you might be more

00:06:31.270 --> 00:06:33.710
familiar with other things like AppKit.

00:06:33.710 --> 00:06:33.710
So we pass this for control events.

00:06:34.200 --> 00:06:37.370
We set the action to be
dismiss on the target,

00:06:37.370 --> 00:06:39.430
because that's actually what
we're going to be doing.

00:06:39.590 --> 00:06:42.290
And then we call add target
action for control events.

00:06:42.570 --> 00:06:43.340
That's all you have to do.

00:06:43.340 --> 00:06:46.150
And then when you
actually touch up inside,

00:06:46.260 --> 00:06:50.890
the UI control will automatically
send the dismiss call to your target.

00:06:51.070 --> 00:06:53.610
So this is very easy to use.

00:06:53.910 --> 00:06:57.020
Now, if you're more familiar
with things like mouse down,

00:06:57.020 --> 00:07:00.900
mouse up, mouse dragged, stuff like that,
there's actually a pretty

00:07:00.900 --> 00:07:03.260
easy correlation between that
and what we're doing here.

00:07:03.260 --> 00:07:06.370
You replace the word mouse with touch,
and you're pretty much done.

00:07:06.370 --> 00:07:09.260
UI mouse up inside would
become UI touch up inside.

00:07:09.260 --> 00:07:13.770
Some commonly used UI control
events that you might care about.

00:07:13.810 --> 00:07:17.700
UI control event touch up inside,
as we were just saying.

00:07:17.700 --> 00:07:20.040
That's equivalent to a
mouse up inside the button.

00:07:21.010 --> 00:07:22.640
UI control event touch down.

00:07:22.640 --> 00:07:25.870
That would be your initial mouse down
in case you wanted to change your state.

00:07:25.900 --> 00:07:29.560
And if you were really fancy and
you were supporting multi-touch,

00:07:29.560 --> 00:07:32.960
there's also UI control
event touch down repeat.

00:07:34.860 --> 00:07:39.000
And I want to point out that
UI control events is a bit mask.

00:07:39.050 --> 00:07:43.210
So if you wanted to do the same
action on multiple control events,

00:07:43.350 --> 00:07:46.680
all you have to do is bit
or these values together,

00:07:46.730 --> 00:07:48.360
and you do it.

00:07:49.330 --> 00:07:51.450
So that's how to use controls.

00:07:51.550 --> 00:07:54.180
How about some example controls?

00:07:54.320 --> 00:07:57.340
Well, here I have three very
commonly used controls.

00:07:57.420 --> 00:08:00.320
The first one is UIButton.

00:08:00.320 --> 00:08:04.360
In this example, it's a UIButton of the
style rounded rect.

00:08:04.360 --> 00:08:05.880
This is all provided for you.

00:08:05.880 --> 00:08:11.270
The second one is UISegmentedControl.

00:08:11.270 --> 00:08:11.270
And the third one is UISlider.

00:08:11.610 --> 00:08:14.140
The nice things about things
like segmented control and slider

00:08:14.140 --> 00:08:18.150
is that all the logic about how
to highlight certain segments,

00:08:18.270 --> 00:08:22.190
how to respond to sliders,
callbacks for you, and all that stuff is

00:08:22.190 --> 00:08:23.480
already done for you.

00:08:23.740 --> 00:08:25.990
So all you have to do is
actually implement one of those,

00:08:26.150 --> 00:08:30.130
and you get the proper callbacks
for what you're trying to do.

00:08:30.250 --> 00:08:32.430
Now, this is just three examples.

00:08:32.680 --> 00:08:34.740
There are a lot more.

00:08:34.870 --> 00:08:38.500
I highly recommend you download
the UI Catalog example from

00:08:38.500 --> 00:08:40.800
developer.apple.com/iphone.

00:08:41.160 --> 00:08:45.810
It will show you all of-- well,
maybe not all, but pretty much all of the

00:08:45.810 --> 00:08:50.100
controls that are built into UIKit.

00:08:50.240 --> 00:08:51.950
And it'll also,
because they're all there,

00:08:51.950 --> 00:08:53.360
it'll show you how to use them.

00:08:53.360 --> 00:08:56.520
The sample code shows
you how to wire them up,

00:08:56.520 --> 00:08:57.510
et cetera.

00:08:57.850 --> 00:08:59.540
All right,
so now we've talked about controls.

00:08:59.670 --> 00:09:01.740
But before, we were talking about views.

00:09:01.820 --> 00:09:07.880
And you saw in my first overview slide
that we had these subviews within Views.

00:09:07.990 --> 00:09:12.020
And they expanded out nicely for that
navigation bar that we were showing you.

00:09:12.110 --> 00:09:13.990
Well, how does that work?

00:09:14.440 --> 00:09:17.290
So views can contain subviews.

00:09:17.580 --> 00:09:21.300
Here we have that navigation
bar again split out.

00:09:21.410 --> 00:09:24.360
And we'll see that they all
go back into the subview.

00:09:24.530 --> 00:09:26.730
Well, how does this work?

00:09:26.870 --> 00:09:29.670
When you add a view as a
subview of another view,

00:09:29.770 --> 00:09:31.180
let's say you have
this coordinate system,

00:09:31.250 --> 00:09:31.600
right?

00:09:31.600 --> 00:09:34.410
And your origin is here,
and then the view that

00:09:34.420 --> 00:09:36.040
you're adding to is up here.

00:09:36.150 --> 00:09:39.180
What happens when that
view's origin moves?

00:09:39.270 --> 00:09:41.940
You don't want to be paying
attention to that as a subview,

00:09:41.940 --> 00:09:42.540
right?

00:09:42.830 --> 00:09:48.910
So what we do is the coordinate system
translates as you add into subviews.

00:09:49.060 --> 00:09:52.620
So when you call a frame,
which you might have seen

00:09:52.620 --> 00:09:55.480
in other presentations,
what does that actually mean?

00:09:55.570 --> 00:09:59.920
So frame gives you your coordinate
system in the superview's coordinates.

00:10:00.020 --> 00:10:03.850
So in this case,
the all contacts would be offset by 40,

00:10:03.880 --> 00:10:06.960
50 pixels here in the x direction.

00:10:07.090 --> 00:10:10.280
So that would be the origin
of the frame for that.

00:10:10.320 --> 00:10:11.610
Bounds is a different call.

00:10:11.730 --> 00:10:18.440
Bounds tries-- it tries to give you
your frame in your coordinate system.

00:10:18.490 --> 00:10:20.520
So in that case,
if you call bounds on all contacts,

00:10:20.520 --> 00:10:23.960
the origin will actually be at 0, 0.

00:10:23.960 --> 00:10:27.540
Now, there are some special cases
where bounds is not at 0,

00:10:27.540 --> 00:10:28.770
0 in the origin.

00:10:28.840 --> 00:10:32.180
For instance, you see why scroll view.

00:10:32.300 --> 00:10:33.260
That's a very special case.

00:10:33.350 --> 00:10:35.680
For the most part,
you will not have to worry about that.

00:10:35.680 --> 00:10:37.980
So you can assume that bounds is 0, 0.

00:10:37.980 --> 00:10:41.630
Bounds is very nice to be used when
you're laying out your subviews,

00:10:42.100 --> 00:10:43.680
because frame is-- is
superview coordinates,

00:10:43.680 --> 00:10:44.100
right?

00:10:44.150 --> 00:10:47.520
So if you get your own bounds,
that's corresponding to what

00:10:47.760 --> 00:10:50.760
this subviews frame relates to,
right?

00:10:50.760 --> 00:10:52.910
So if you get your bounds,
then you lay out the

00:10:52.910 --> 00:10:55.690
subviews within those bounds,
everything works really nicely.

00:10:55.840 --> 00:10:58.550
And we'll see that in later demos.

00:10:59.010 --> 00:11:01.820
All right, so I've been talking
about controls and views,

00:11:02.010 --> 00:11:04.840
coordinate systems,
all this awesome stuff.

00:11:04.880 --> 00:11:06.450
It's pretty boring, right?

00:11:06.510 --> 00:11:07.860
You've fallen asleep.

00:11:07.920 --> 00:11:10.250
Let's talk about animations instead.

00:11:10.350 --> 00:11:13.100
So how do we do animations on the iPhone?

00:11:13.310 --> 00:11:17.280
We have a UIView animation
category on UIView.

00:11:17.280 --> 00:11:19.570
This is how we do almost
all the animations that

00:11:19.570 --> 00:11:22.500
you've seen on the iPhone.

00:11:22.640 --> 00:11:23.540
There are no animators.

00:11:23.540 --> 00:11:26.120
There's no callback-based
animation on the iPhone.

00:11:26.120 --> 00:11:28.920
We're not going to call you
back every single frame to say,

00:11:28.920 --> 00:11:30.980
all right, where is your position now?

00:11:31.100 --> 00:11:33.050
Because of this,
the animations are very fast.

00:11:33.160 --> 00:11:36.110
You're not having to
recalculate every time.

00:11:37.640 --> 00:11:40.870
We're not doing this because we actually
use core animation for all of the

00:11:40.870 --> 00:11:44.160
animations that you're going to be doing
using the UIView animation category.

00:11:44.160 --> 00:11:46.750
It's a transparent usage of it for you.

00:11:47.010 --> 00:11:49.350
As we all know,
core animation is very fast.

00:11:49.410 --> 00:11:51.900
Why is core animation fast?

00:11:51.940 --> 00:11:55.840
That's because core animation
uses the hardware render.

00:11:55.930 --> 00:11:58.060
So it's automatically
hardware accelerated for you.

00:11:58.060 --> 00:12:00.760
You don't have to think about,
is this going to be able

00:12:00.760 --> 00:12:01.850
to be accelerated or not?

00:12:01.860 --> 00:12:04.070
If you're using UIView animations, it is.

00:12:04.350 --> 00:12:05.820
You're done.

00:12:05.930 --> 00:12:08.230
All right, so how do we actually do this?

00:12:08.310 --> 00:12:13.180
The first thing I'm going to note is
that UI view animations are asynchronous.

00:12:13.240 --> 00:12:16.190
You set up a delegate and callback
for when the animation is done.

00:12:16.450 --> 00:12:19.510
But while the animation is happening,
you actually-- it's not a

00:12:19.700 --> 00:12:21.040
callback based animation.

00:12:21.040 --> 00:12:23.760
You're not getting callbacks every frame,
so you don't really have

00:12:23.760 --> 00:12:25.080
control during that time.

00:12:25.290 --> 00:12:26.820
Unfortunately,
your app does have control.

00:12:26.820 --> 00:12:30.280
As soon as you finish the animation,
control is going to return back

00:12:30.300 --> 00:12:32.900
to the main thread of your app.

00:12:33.130 --> 00:12:36.060
So basically,
you're going to set up animation.

00:12:36.140 --> 00:12:38.690
Then once you've done that,
you're going to commit the

00:12:38.710 --> 00:12:40.720
animations to be rendered.

00:12:40.780 --> 00:12:44.920
That information is going to then be
off-laid to the hardware renderer.

00:12:44.920 --> 00:12:47.590
And during the animation time,
the hardware renderer is going to

00:12:47.590 --> 00:12:49.110
be taking care of that for you.

00:12:49.360 --> 00:12:53.320
And then when it's done,
it's going to give you your callback.

00:12:53.490 --> 00:12:55.300
All right, easy enough.

00:12:55.680 --> 00:12:59.800
However, during this block of time here,
your app still has control, right?

00:12:59.860 --> 00:13:01.420
You can still do whatever you want.

00:13:01.420 --> 00:13:03.170
In fact,
you might decide that you want to

00:13:03.170 --> 00:13:06.820
calculate what the thousandth prime is,
because that's going to be what

00:13:06.820 --> 00:13:08.980
your user actually cares about next.

00:13:09.040 --> 00:13:12.520
If you do that,
you are going to slow down the animation.

00:13:12.590 --> 00:13:15.040
The animation does run
in the hardware renderer,

00:13:15.090 --> 00:13:16.590
but there's shared resources.

00:13:16.600 --> 00:13:17.810
There's a shared memory buffer.

00:13:17.890 --> 00:13:20.140
It's going to be asking to
pass information over to it,

00:13:20.140 --> 00:13:21.100
et cetera.

00:13:21.220 --> 00:13:25.160
So even though Flow is going
to return to your program,

00:13:25.210 --> 00:13:27.380
don't do stuff here.

00:13:27.380 --> 00:13:30.640
This is how we try to make our
animations as fast as possible.

00:13:30.730 --> 00:13:32.770
Just consider it dead time.

00:13:32.950 --> 00:13:35.780
You're not supposed to be doing
anything during that time.

00:13:36.990 --> 00:13:42.010
So how about some common things that you
might want to do with a UIView animation?

00:13:42.380 --> 00:13:45.340
All the animations by default
have a certain duration.

00:13:45.360 --> 00:13:48.620
If you want to change that duration,
for instance, if you want to slow down

00:13:48.620 --> 00:13:52.010
the rotation animation,
you call setAnimationDuration

00:13:52.420 --> 00:13:54.370
with the time interval.

00:13:54.740 --> 00:13:57.350
Let's say you wanted to change
the curve of the animation.

00:13:57.420 --> 00:14:01.460
By default, these curves are ease in,
ease out.

00:14:01.460 --> 00:14:03.660
What this means is that
they accelerate up to speed,

00:14:03.660 --> 00:14:05.660
and then when they get
to the end of the curve,

00:14:05.660 --> 00:14:07.570
they decelerate.

00:14:07.600 --> 00:14:09.790
If you wanted to set
this to ease in only,

00:14:09.800 --> 00:14:12.030
or ease out only,
or even just linear animation,

00:14:12.030 --> 00:14:15.050
you do that by calling setAnimationCurve.

00:14:15.400 --> 00:14:19.380
Finally, as we've all said,
there are these callbacks at the end.

00:14:19.380 --> 00:14:22.450
You can change what the callback is,
who gets called back.

00:14:22.540 --> 00:14:25.510
So you do that by calling
setAnimationDelegate and

00:14:25.510 --> 00:14:28.290
setAnimationDidStopSelector.

00:14:28.530 --> 00:14:30.780
You might want to do this if
you have different selectors for

00:14:30.780 --> 00:14:32.640
different animation finishing.

00:14:32.680 --> 00:14:34.690
All right,
so that's all pretty straightforward,

00:14:34.690 --> 00:14:35.120
right?

00:14:35.190 --> 00:14:37.610
How do we actually use this stuff?

00:14:37.990 --> 00:14:41.200
So a little slide demo here.

00:14:41.300 --> 00:14:43.840
Let's say we just wanted
to fade a view out.

00:14:43.960 --> 00:14:48.920
So the first thing we need to do is
we need to create a UIView animation.

00:14:49.040 --> 00:14:52.020
So we do that by calling
UIView begin animations,

00:14:52.120 --> 00:14:54.070
my animation, context nil.

00:14:54.180 --> 00:14:56.220
All right,
so there are two parameters here.

00:14:56.220 --> 00:14:57.510
The first one is my animation.

00:14:57.520 --> 00:14:59.780
The second one is context.

00:14:59.920 --> 00:15:01.520
What do these actually mean?

00:15:01.640 --> 00:15:05.800
The first one names your animation so
that when the animation is finished and

00:15:05.800 --> 00:15:10.480
you get your did stop selector callback,
it actually passes back the

00:15:10.480 --> 00:15:12.050
name of the animation to you.

00:15:12.190 --> 00:15:15.230
And you can use this to decide, OK,
which animation actually finished,

00:15:15.230 --> 00:15:17.950
because you could have multiple
animations going on at once.

00:15:18.130 --> 00:15:19.980
As we showed in the navigation
bar in the beginning,

00:15:19.980 --> 00:15:22.250
when you clicked on the Groups button,
there are actually

00:15:22.250 --> 00:15:23.140
three animations there.

00:15:23.140 --> 00:15:26.510
And each one of them is probably named
a little bit differently so that you can

00:15:26.510 --> 00:15:29.120
respond to its did finish differently.

00:15:30.690 --> 00:15:34.850
The context is what gets passed back
to your desktop selector as well in

00:15:34.850 --> 00:15:40.600
case you need to use it for anything,
such as removing buttons or whatever.

00:15:40.600 --> 00:15:44.600
All right, so now we're actually going
to fade out the view itself.

00:15:44.600 --> 00:15:45.600
How do we do this?

00:15:45.600 --> 00:15:47.600
Well, we get our view and we
set its alpha to zero.

00:15:47.600 --> 00:15:51.480
So we already have the view, you know,
this is slide code, my view,

00:15:51.580 --> 00:15:54.590
and we call setAlpha to zero.

00:15:54.810 --> 00:15:55.640
That's it.

00:15:55.720 --> 00:15:57.100
We're done for that.

00:15:57.240 --> 00:16:00.300
And then we have to commit
the animation to the renderer.

00:16:00.360 --> 00:16:04.570
And so we call UIViewCommitAnimations.

00:16:04.670 --> 00:16:05.660
That's it.

00:16:05.720 --> 00:16:07.040
That's all you have to
do to fade out a view.

00:16:07.040 --> 00:16:09.880
This is very, very easy to do.

00:16:10.070 --> 00:16:14.600
Now, what I want to point out is that we
set this alpha property on the view,

00:16:14.650 --> 00:16:16.260
right?

00:16:16.620 --> 00:16:18.860
You can set as many
properties as you want.

00:16:18.860 --> 00:16:19.950
You can set the frame.

00:16:20.100 --> 00:16:22.600
You can set the bounds.

00:16:22.600 --> 00:16:25.690
You can set all kinds of things.

00:16:25.930 --> 00:16:30.100
What I want to point out is that
this is a stacked animation.

00:16:30.240 --> 00:16:34.450
So if we call setAlpha within this block,
and then we call setAlpha again,

00:16:34.680 --> 00:16:38.750
let's say we call setAlpha
0.5 first and then 0 second,

00:16:38.990 --> 00:16:42.900
you might all expect it to go from
where it currently is at 1 to 0.

00:16:42.980 --> 00:16:45.300
But that's not actually what happens.

00:16:45.420 --> 00:16:50.620
Because it's a stacked animation,
the animation takes the previous value

00:16:50.730 --> 00:16:52.600
and then just animates to the last value.

00:16:52.600 --> 00:16:55.060
So in that case,
at the beginning of the animation,

00:16:55.150 --> 00:17:01.590
it's going to jump immediately to 0.5,
and then it will animate nicely to 0.

00:17:01.610 --> 00:17:03.600
This is a side effect
you might not expect.

00:17:03.600 --> 00:17:06.600
It can actually be used to your
advantage in certain circumstances.

00:17:06.730 --> 00:17:10.100
The easiest takeaway from this
is only set a property once.

00:17:10.480 --> 00:17:12.600
Otherwise, you're going to end
up confusing yourself.

00:17:12.600 --> 00:17:16.600
So with that,
I'd like to take you to a demo.

00:17:16.600 --> 00:17:18.980
So if we go to the laptop.

00:17:24.800 --> 00:17:28.280
All right, so basically what I was just
showing you with that slide code,

00:17:28.280 --> 00:17:30.940
we're going to do the same thing again.

00:17:31.350 --> 00:17:36.050
But I'm going to actually set
up a few views for you as well,

00:17:36.050 --> 00:17:39.120
and a control,
so that we can go through all that stuff.

00:17:39.230 --> 00:17:42.000
So here, this is called Simple Animation.

00:17:42.060 --> 00:17:46.160
This is also available as a
download from the sample site.

00:17:46.250 --> 00:17:49.940
This actually is not going to
be exactly the same as what

00:17:49.940 --> 00:17:50.750
you'll see on the sample site.

00:17:50.760 --> 00:17:53.010
On the sample site,
we set up all the UI through

00:17:53.010 --> 00:17:55.060
Interface Builder,
because that's much more common.

00:17:55.060 --> 00:17:56.680
That's what you're
probably going to be doing.

00:17:56.750 --> 00:18:01.520
But here, for the example of this talk,
we're actually going to be

00:18:01.520 --> 00:18:04.510
doing it all manually ourselves.

00:18:04.990 --> 00:18:06.900
So the first thing we're going
to be doing is application

00:18:06.900 --> 00:18:08.080
did finish launching.

00:18:08.140 --> 00:18:09.630
We're just going to be doing
everything in the delegate.

00:18:09.640 --> 00:18:10.840
Again, this is a sample code.

00:18:10.840 --> 00:18:12.880
This is not how a real app would behave.

00:18:12.880 --> 00:18:15.620
What we're going to do is we're
going to create a rectangle

00:18:15.620 --> 00:18:17.360
in the middle of our view.

00:18:17.460 --> 00:18:20.060
So we get the bounds of the window.

00:18:20.120 --> 00:18:22.380
As I was saying before,
the bounds is the coordinate

00:18:22.380 --> 00:18:24.100
system in your own coordinates.

00:18:24.180 --> 00:18:27.350
And then we're going to set up
a rectangle within these bounds.

00:18:27.470 --> 00:18:31.010
So we set the width of the
rectangle to rectangle width and

00:18:31.010 --> 00:18:32.850
the height to rectangle height.

00:18:32.960 --> 00:18:36.900
And then we're actually going to center
this rectangle within the bounds.

00:18:37.010 --> 00:18:39.440
So we do that by subtracting
from the width of the bounds,

00:18:39.510 --> 00:18:41.700
the rectangle's width, and dividing by 2.

00:18:41.770 --> 00:18:44.000
And the same with the height.

00:18:44.980 --> 00:18:46.190
Pretty easy.

00:18:46.290 --> 00:18:49.900
So now we have where the frame
of the rectangle is going to be.

00:18:50.010 --> 00:18:53.250
The next thing we do is we create
a UI view to be this rectangle.

00:18:53.460 --> 00:18:55.780
And we're going to make it
blue because it's pretty.

00:18:55.880 --> 00:18:58.460
So we init with frame rectangle frame.

00:18:58.720 --> 00:19:06.030
We set the background color of this
rectangle to be UI color blue color.

00:19:06.030 --> 00:19:08.890
And then we add that
rectangle to our subview.

00:19:08.890 --> 00:19:08.890
So what happens when we run this now?

00:19:13.900 --> 00:19:16.280
As expected,
we get a nice rectangle centered

00:19:16.280 --> 00:19:18.660
in the middle of the frame,
and it's blue.

00:19:18.670 --> 00:19:20.290
Pretty straightforward.

00:19:21.490 --> 00:19:23.560
We also are going to want to
have a button so we can do

00:19:23.560 --> 00:19:25.000
something with this rectangle.

00:19:25.000 --> 00:19:28.600
So the first thing we need to do is
we need to create this buttons frame.

00:19:28.610 --> 00:19:30.300
So we're going to base that
on the rectangles frame.

00:19:30.300 --> 00:19:32.170
We want the button to look
similar to the rectangle,

00:19:32.170 --> 00:19:34.140
but we're going to move it down a bit.

00:19:34.260 --> 00:19:37.520
And we're going to change the
height of the button a bit.

00:19:38.220 --> 00:19:40.640
We then create the button itself.

00:19:40.750 --> 00:19:42.860
So now we're calling
UIButtonButtonWithType

00:19:42.910 --> 00:19:45.540
UIButtonTypeRoundedRect.

00:19:45.570 --> 00:19:50.140
This is the same button type as
I showed you on this slide a while ago.

00:19:50.190 --> 00:19:53.090
We're going to set the frame of
the button to the button frame.

00:19:53.300 --> 00:19:56.370
We're going to set its title to
dismiss for the control state normal.

00:19:56.530 --> 00:19:59.250
So as normal, it'll be dismissed.

00:19:59.440 --> 00:20:02.220
And we're also going to
add that to our subview.

00:20:02.580 --> 00:20:05.500
So now when we run this, as expected,
we now have a button here.

00:20:05.700 --> 00:20:07.100
This button behaves nicely.

00:20:07.150 --> 00:20:08.940
It highlights.

00:20:08.940 --> 00:20:12.460
If you were to drag your finger,
it'll unhighlight,

00:20:12.490 --> 00:20:14.880
because you're far enough away
that they expect it not to

00:20:14.880 --> 00:20:16.620
be a touch up on the button.

00:20:16.730 --> 00:20:18.450
But it doesn't do anything.

00:20:18.560 --> 00:20:19.330
Well, how do we fix that?

00:20:19.480 --> 00:20:26.150
Well,
we were talking earlier about how we call

00:20:26.150 --> 00:20:26.690
the add target action for control events.

00:20:26.920 --> 00:20:29.680
So we do that for this button here.

00:20:29.740 --> 00:20:35.350
We're going to call addTargetSelf with
the action change for the control events,

00:20:35.350 --> 00:20:38.190
UI control event, touch up inside.

00:20:39.760 --> 00:20:44.480
And then we need to have, obviously,
that change.

00:20:44.500 --> 00:20:47.700
OK, well, that's not really doing
anything right now.

00:20:47.780 --> 00:20:48.650
What do we want this to do?

00:20:48.840 --> 00:20:52.420
Well, if we were to look at the demo,
the button says Dismiss, right?

00:20:52.570 --> 00:21:00.520
So we probably want to dismiss that
rectangle when we get the change call.

00:21:00.520 --> 00:21:00.520
So the first thing we do

00:21:00.910 --> 00:21:05.640
is we figure out where are we right
now when this button got clicked.

00:21:05.690 --> 00:21:08.160
This way you don't have to keep state,
you can just look up

00:21:08.160 --> 00:21:09.380
state when you need to.

00:21:09.400 --> 00:21:11.220
So where is the rectangle right now?

00:21:11.300 --> 00:21:12.380
What's its frame?

00:21:12.380 --> 00:21:13.500
And what are the window bounds?

00:21:13.580 --> 00:21:16.480
What's, you know, my canvas,
what am I laying this out in?

00:21:16.480 --> 00:21:19.770
And then we need to figure out are
we sliding this rectangle off screen

00:21:19.770 --> 00:21:22.620
or are we bringing it back on screen.

00:21:22.620 --> 00:21:26.640
Easy way to do that is to look at
the origin of the rectangle's frame.

00:21:26.640 --> 00:21:29.340
If it's outside of the
bounds of the window,

00:21:29.340 --> 00:21:32.280
then it's already off screen, right?

00:21:32.280 --> 00:21:34.570
Because it's all the way over there.

00:21:34.580 --> 00:21:37.000
So we're sliding out if
it's still on screen,

00:21:37.000 --> 00:21:38.840
otherwise we'll be sliding in.

00:21:40.920 --> 00:21:42.160
So now we have our state.

00:21:42.170 --> 00:21:43.770
We know what we're going to be doing.

00:21:43.890 --> 00:21:45.640
How do we actually handle it from here?

00:21:45.640 --> 00:21:49.230
Well, the first thing that we want
to do is we want to call

00:21:49.420 --> 00:21:54.300
UI application shared application
beginIgnoringInteractionEvents.

00:21:54.450 --> 00:21:55.670
Why do we do this?

00:21:56.020 --> 00:21:57.620
We're going to be doing an animation.

00:21:57.690 --> 00:21:59.860
This animation is going to take time.

00:21:59.910 --> 00:22:04.810
During that time, as we said before,
control returns back to your application.

00:22:04.880 --> 00:22:05.710
OK?

00:22:05.890 --> 00:22:07.100
So control returns to your application.

00:22:07.100 --> 00:22:08.000
You've started this animation.

00:22:08.000 --> 00:22:08.780
It's running.

00:22:08.830 --> 00:22:11.170
The user goes ahead and clicks a button.

00:22:11.250 --> 00:22:13.120
Were you expecting a
button press at this time?

00:22:13.120 --> 00:22:13.700
Probably not.

00:22:13.700 --> 00:22:17.120
You were probably changing state
of your application in some way.

00:22:17.170 --> 00:22:21.570
And so a button press now has
perhaps unforeseen effects.

00:22:21.730 --> 00:22:23.900
So during this time,
it's best to just ignore

00:22:24.000 --> 00:22:25.060
interaction events.

00:22:25.110 --> 00:22:29.720
This means any taps that the user does
will not translate to your application.

00:22:30.550 --> 00:22:33.860
All right,
so we're now ignoring interaction events.

00:22:33.980 --> 00:22:35.860
So now we set up the animation itself.

00:22:36.000 --> 00:22:38.520
So we call UIView BeginAnimations.

00:22:38.570 --> 00:22:40.380
We're going to be passing
a nil context here,

00:22:40.380 --> 00:22:42.620
because we're not actually
going to be using it.

00:22:42.680 --> 00:22:45.790
But we are going to pass two
different names for the animation,

00:22:45.850 --> 00:22:49.500
depending on whether we're
sliding out or sliding back in.

00:22:50.000 --> 00:22:53.900
These names are all defined up
here with these nice defines.

00:22:53.970 --> 00:22:56.130
We're going to set the
duration to one second,

00:22:56.140 --> 00:22:58.130
again, defined up above.

00:22:58.210 --> 00:23:01.400
And then we're actually going to
change the animation curve here.

00:23:01.570 --> 00:23:04.580
If we're sliding out,
we want to say ease in.

00:23:04.660 --> 00:23:06.850
And if we're sliding in,
we want to say ease out.

00:23:06.870 --> 00:23:08.280
Why do we do this?

00:23:08.360 --> 00:23:11.660
Well,
this view is going completely off screen.

00:23:11.680 --> 00:23:14.940
So if we say ease in,
then we're going to watch the view

00:23:14.940 --> 00:23:18.500
accelerate off screen and seem like
it's going off screen very quickly.

00:23:18.630 --> 00:23:22.110
And if we say ease out,
it's going to gradually slow to a stop.

00:23:22.120 --> 00:23:25.080
If we were to leave the default curve,
it would seem to accelerate off screen.

00:23:25.080 --> 00:23:27.760
And then as it got off screen,
it would slow down a little bit.

00:23:27.820 --> 00:23:31.190
You can also change this by changing
even where it goes off screen

00:23:31.190 --> 00:23:34.620
so that when it gets off screen,
it's only halfway through your animation.

00:23:34.690 --> 00:23:37.880
But it kind of makes more sense to
just change the animation curve itself.

00:23:37.880 --> 00:23:39.740
And then finally,
we want to set the animations

00:23:39.740 --> 00:23:42.890
delegate to ourselves so
that we know when we're done.

00:23:44.590 --> 00:23:46.620
Then we need to actually do something,
right?

00:23:46.620 --> 00:23:48.260
We've been setting up this animation.

00:23:48.260 --> 00:23:51.140
Now we actually need to do
something with the animation.

00:23:51.350 --> 00:23:54.160
If we're sliding out,
we can just set the rectangle's

00:23:54.160 --> 00:23:57.060
origin to be the width of our bounds.

00:23:57.160 --> 00:24:00.300
That means it will be
completely off screen.

00:24:00.470 --> 00:24:02.710
If we're sliding back in,
we're going to do the same thing that

00:24:02.710 --> 00:24:07.460
we did up here to calculate the origin
of the X so that it will return to

00:24:07.460 --> 00:24:10.060
be exactly centered on the screen.

00:24:10.190 --> 00:24:11.590
So now we calculated the new frame.

00:24:11.600 --> 00:24:13.340
We need to set the
frame on the rectangle,

00:24:13.410 --> 00:24:14.900
so we're setting that property.

00:24:14.930 --> 00:24:17.860
In addition,
we're going to fade out the view.

00:24:17.950 --> 00:24:21.160
So we call setAlphaSlideOut.

00:24:21.160 --> 00:24:22.970
Whether we're sliding out,
we call it 0 or 1.

00:24:23.200 --> 00:24:24.700
So that as it slides out, it fades out.

00:24:24.900 --> 00:24:27.440
As it slides in, it fades in.

00:24:27.750 --> 00:24:30.130
We then need to commit the animation.

00:24:30.600 --> 00:24:45.000
[Transcript missing]

00:24:45.250 --> 00:24:47.160
It automatically slides out.

00:24:47.230 --> 00:24:48.760
Click the button again.

00:24:48.810 --> 00:24:52.110
Oh, we can't click the button again.

00:24:52.270 --> 00:24:53.820
Hmm, right.

00:24:54.300 --> 00:24:56.800
See, up here we began ignoring
interaction events,

00:24:56.840 --> 00:24:59.370
but we never stopped
ignoring interaction events.

00:24:59.490 --> 00:25:02.780
So now the app does not
respond to you at all.

00:25:02.810 --> 00:25:03.980
Not ideal.

00:25:04.100 --> 00:25:10.230
So what we need to do is we
need to resume the interaction.

00:25:10.330 --> 00:25:14.220
So here we had set our
delegate to ourself.

00:25:14.270 --> 00:25:16.800
When the animation finishes,
it will call by default,

00:25:16.810 --> 00:25:19.760
the animationDidStopedFinished
context selector.

00:25:19.760 --> 00:25:22.180
You can change this yourself
by setting what the selector

00:25:22.190 --> 00:25:23.440
is going to be that's called.

00:25:23.470 --> 00:25:24.880
In this case, we didn't.

00:25:24.910 --> 00:25:28.520
When that happens, we want to call
endIgnoringInteractionEvents.

00:25:28.520 --> 00:25:30.350
All right.

00:25:30.470 --> 00:25:32.320
So if we do that--

00:25:35.030 --> 00:25:39.550
You dismiss, leave return,
everything behaves nicely.

00:25:39.620 --> 00:25:45.330
If you were to tap like crazy,
nothing behaves badly.

00:25:46.020 --> 00:25:48.190
So that's a nice,
simple demo of how to use

00:25:48.480 --> 00:25:51.400
animations and controls.

00:25:56.500 --> 00:25:58.650
Can you go back to slides?

00:25:58.740 --> 00:26:00.000
Thanks.

00:26:00.190 --> 00:26:02.260
So that's pretty simple animations.

00:26:02.260 --> 00:26:04.660
We're moving a view,
we're fading the view,

00:26:04.720 --> 00:26:07.520
we're responding to controls,
pretty straightforward.

00:26:07.520 --> 00:26:10.760
What if you wanted to
do fancier animations?

00:26:10.800 --> 00:26:13.140
For instance,
in the demo that I showed you originally,

00:26:13.160 --> 00:26:14.380
we supported rotation.

00:26:14.400 --> 00:26:15.130
That's really cool.

00:26:15.220 --> 00:26:17.060
That's one of the nice
features of the phone,

00:26:17.060 --> 00:26:19.660
is this nice inherent rotation support.

00:26:19.700 --> 00:26:20.850
How do we do this?

00:26:20.980 --> 00:26:25.180
So that demo actually
uses a UIViewController.

00:26:25.200 --> 00:26:28.720
UIViewControllers are the way to
create your app on the iPhone.

00:26:28.760 --> 00:26:32.130
There is so much support built
into UIViewControllers that

00:26:32.130 --> 00:26:33.480
you're going to want to use.

00:26:33.520 --> 00:26:37.690
There's a category on UIViewController
called UIViewRotationCategory.

00:26:37.740 --> 00:26:39.200
How does this work?

00:26:39.250 --> 00:26:41.580
Well,
the first thing you have to do is you

00:26:41.750 --> 00:26:45.990
need to tell that you support rotation.

00:26:46.110 --> 00:26:50.400
So when the device gets rotated,
your controller will actually be called

00:26:50.400 --> 00:26:53.700
shouldAutoRotateToInterface Orientation.

00:26:53.700 --> 00:26:56.280
By default,
this only returns yes for portrait mode.

00:26:56.280 --> 00:26:59.840
If you want to support other
orientations in your controller,

00:26:59.840 --> 00:27:02.090
you need to return yes here.

00:27:02.410 --> 00:27:06.820
Now, there are three parts to
this actual animation.

00:27:06.980 --> 00:27:11.570
There's a header view, a footer view,
and the content view.

00:27:11.990 --> 00:27:13.060
What do you mean?

00:27:13.060 --> 00:27:14.390
All I have is my app, right?

00:27:14.400 --> 00:27:16.980
What's a header view, a footer view,
and a content view?

00:27:17.020 --> 00:27:20.090
This is actually fairly
common in our apps.

00:27:20.400 --> 00:27:22.340
You'll see this all the time.

00:27:22.340 --> 00:27:27.580
We have a header view, like a nav bar,
and a footer view here, like in Mail,

00:27:27.660 --> 00:27:30.600
there's the buttons at the bottom,
or in iPod,

00:27:30.600 --> 00:27:32.190
there's the tabs at the bottom,
for instance.

00:27:32.220 --> 00:27:35.920
So how does this actually
play into the animation?

00:27:35.920 --> 00:27:38.540
Oftentimes,
these are going to be changing

00:27:38.540 --> 00:27:41.220
their complete styles when you
go to a different landscape.

00:27:41.220 --> 00:27:44.220
For instance, the bar at the bottom has
a much different look when

00:27:44.220 --> 00:27:45.640
you're in landscape mode.

00:27:45.640 --> 00:27:47.510
It becomes shorter,
the buttons actually change

00:27:47.510 --> 00:27:48.740
their types and all that stuff.

00:27:48.930 --> 00:27:52.350
So actually animating that would
be pretty hard and cumbersome,

00:27:52.350 --> 00:27:54.320
and it might not even look right.

00:27:54.320 --> 00:27:57.430
You might want to have a completely
different layout in that case.

00:27:57.440 --> 00:28:01.200
So what happens when the animation
happens is that the footer and

00:28:01.330 --> 00:28:05.320
the header are going to slide off
screen while your content rotates.

00:28:05.380 --> 00:28:08.340
And then when the content
has rotated 45 degrees,

00:28:08.340 --> 00:28:11.240
they're going to start sliding
back on screen in their

00:28:11.240 --> 00:28:14.620
new layout configurations,
so that they can change their look

00:28:14.620 --> 00:28:16.680
when they're completely off screen.

00:28:16.680 --> 00:28:17.880
This provides a very seamless experience.

00:28:19.020 --> 00:28:23.910
So we'll see somewhat of a demo here.

00:28:27.750 --> 00:28:29.860
So you can see that they're
going to be changing while

00:28:29.860 --> 00:28:31.860
they're completely off screen.

00:28:32.150 --> 00:28:34.930
Now because of this,
the animation actually happens

00:28:35.100 --> 00:28:36.960
in two different stages.

00:28:37.050 --> 00:28:40.120
The first is the first 45
degrees when they're sliding off.

00:28:40.220 --> 00:28:44.390
The second is the next 45 degrees
when they're sliding back on.

00:28:44.660 --> 00:28:47.480
Because of this, there are actually two
different calls that you get.

00:28:47.480 --> 00:28:50.480
Once you say that, yes,
I support this interface orientation,

00:28:50.480 --> 00:28:54.020
please rotate to it,
you will animate first half of

00:28:54.180 --> 00:28:59.360
rotation to interface orientation
and the duration of this rotation.

00:28:59.470 --> 00:29:01.490
And then you will get,
will animate second half of

00:29:01.520 --> 00:29:04.390
rotation from interface orientation.

00:29:04.490 --> 00:29:06.760
Note that the parameters
here are slightly different.

00:29:06.870 --> 00:29:08.890
In the first one,
it's saying where you're

00:29:08.890 --> 00:29:11.380
going to be animating to,
because by default,

00:29:11.380 --> 00:29:15.330
your UI is currently in this
current interface orientation.

00:29:15.440 --> 00:29:18.520
When the second one gets called,
the interface orientation for this

00:29:18.580 --> 00:29:20.140
application has already been changed.

00:29:20.200 --> 00:29:22.610
So it tells you where
you were coming from.

00:29:22.780 --> 00:29:25.950
Both of them provide durations so
that you can do whatever you'd like.

00:29:26.200 --> 00:29:29.480
You know how long this
animation is going to take.

00:29:29.710 --> 00:29:31.470
So we need to do our
animation in two steps.

00:29:31.720 --> 00:29:34.300
Each step will animate
our subviews halfway.

00:29:34.420 --> 00:29:36.350
So in the demo earlier, when,
for instance,

00:29:36.360 --> 00:29:40.410
the stars were moving from the top
right down into the bottom left,

00:29:40.510 --> 00:29:45.340
they need to only move halfway
each time this callback happens.

00:29:45.550 --> 00:29:47.270
Okay, so that's a little complex.

00:29:47.340 --> 00:29:48.830
It's kind of hard to describe on slides.

00:29:48.990 --> 00:29:51.100
Luckily, we'll walk through it in a bit.

00:29:51.220 --> 00:29:54.220
But before we do that,
I want to talk a bit about

00:29:54.720 --> 00:29:56.390
lower level animations.

00:29:56.520 --> 00:29:59.540
So UI view animations give
you this capability to change

00:29:59.540 --> 00:30:05.720
inherent properties on the view,
like its frame, its bounds, its alpha,

00:30:05.770 --> 00:30:08.720
you know, pretty,
pretty -- there's a fair number of

00:30:08.720 --> 00:30:10.970
properties that you can use there.

00:30:11.590 --> 00:30:13.500
But what if you wanted
to do fancier animations?

00:30:13.500 --> 00:30:16.650
What if you wanted to do-- you wanted
to move this view along a path.

00:30:16.770 --> 00:30:18.720
You don't want to just say, well,
it goes from here to here.

00:30:18.720 --> 00:30:22.660
You want to say, well,
it actually goes like this and back.

00:30:22.690 --> 00:30:23.800
How do you do that?

00:30:23.830 --> 00:30:26.660
Well, for that, you're going to want
to use core animation.

00:30:26.720 --> 00:30:30.580
So lower level animations are
possible with core animation.

00:30:30.610 --> 00:30:32.990
And this works incredibly
well with UI views.

00:30:33.080 --> 00:30:36.100
For the most part, you can just say,
all right, I'm a UI view.

00:30:36.330 --> 00:30:38.160
Let's do a core animation.

00:30:38.170 --> 00:30:38.850
How do you do this?

00:30:38.970 --> 00:30:42.720
Well, let's say that we have this path
that we want to move the view along,

00:30:42.720 --> 00:30:44.900
and we have a view already.

00:30:44.920 --> 00:30:48.580
The first thing we need to do is we
need to set up a keyframe animation by

00:30:48.760 --> 00:30:52.520
calling ca_keyframe_animation_animation.

00:30:52.930 --> 00:30:57.960
We then want to say that this animation
is changing the position property.

00:30:58.080 --> 00:31:02.520
We want to set its path to this
CGPathRef that we were already given.

00:31:02.990 --> 00:31:05.510
We want to set the delegate to ourself,
because it's good to set

00:31:05.510 --> 00:31:06.300
the delegate to ourself.

00:31:06.340 --> 00:31:09.290
That way,
we always get the callbacks we expect.

00:31:10.150 --> 00:31:13.760
Then we want to set the Fill Mode to
Frozen and Removed on Completion to No.

00:31:13.880 --> 00:31:18.800
And the reason we do this is so that the
animation remains after it has completed.

00:31:19.310 --> 00:31:22.390
And then we say,
"View Layer Add Animation for

00:31:22.390 --> 00:31:26.940
Key." So Layer gets the
CA Layer Banking Store for the view.

00:31:27.060 --> 00:31:30.400
We say,
"Add Animation for Key," and you're done.

00:31:30.520 --> 00:31:31.190
That's it.

00:31:31.300 --> 00:31:34.870
Your animation will automatically
happen at the end of the run loop.

00:31:35.340 --> 00:31:37.740
So that's pretty easy to do.

00:31:37.740 --> 00:31:41.380
Now I want to actually show
you how to do that and also

00:31:41.650 --> 00:31:45.380
support rotation in your apps.

00:31:45.510 --> 00:31:48.570
So if we could go back
to the demo machine.

00:32:06.330 --> 00:32:10.150
So now we're going to be looking
at the Restaurant Viewer app that

00:32:10.150 --> 00:32:12.140
I showed you in the beginning.

00:32:12.290 --> 00:32:14.960
A bunch of the code is
already written here.

00:32:14.960 --> 00:32:17.640
It would take too much time
to go through all of it.

00:32:17.640 --> 00:32:21.700
Luckily, the Restaurant Viewer is
also available for download.

00:32:21.700 --> 00:32:24.060
It's associated with this session.

00:32:24.150 --> 00:32:27.310
So if you go to your attendee site,
you will easily find it.

00:32:27.820 --> 00:32:31.000
So the first thing we need to do
when the app finishes launching,

00:32:31.010 --> 00:32:33.540
because this is now a
UI view controller app,

00:32:33.610 --> 00:32:36.540
is we need to actually set
up the view controller.

00:32:36.630 --> 00:32:40.300
So we do this, and application did finish
launching in our delegate.

00:32:42.470 --> 00:32:45.460
So what we're going to do is we're
going to create a new restaurant,

00:32:45.470 --> 00:32:46.540
new demo restaurant.

00:32:46.560 --> 00:32:49.720
Ideally, you would have a much more
complex backing model.

00:32:49.720 --> 00:32:51.800
In our case, we don't need it.

00:32:52.070 --> 00:32:55.370
We then set the ViewController's
restaurant to be that restaurant.

00:32:55.470 --> 00:32:58.790
We're going to release the restaurant,
and we're going to add the

00:32:58.790 --> 00:33:01.660
ViewController to the restaurant.

00:33:01.720 --> 00:33:04.990
I'm sorry,
the ViewController's view to our window.

00:33:06.770 --> 00:33:11.120
So when we do that--
does this actually work?

00:33:11.370 --> 00:33:12.200
Nothing, right?

00:33:12.210 --> 00:33:13.200
OK.

00:33:13.200 --> 00:33:14.400
We've created a view controller.

00:33:14.400 --> 00:33:16.040
We've added its view to our view.

00:33:16.130 --> 00:33:19.370
But the view controller
doesn't actually do anything.

00:33:19.590 --> 00:33:22.140
So, oh, well, that's because we have
nothing in LoadView.

00:33:22.440 --> 00:33:23.640
So what do we want to do in LoadView?

00:33:23.640 --> 00:33:27.560
The first thing we want to do is we
want to create this restaurant view.

00:33:27.640 --> 00:33:30.260
So we do that by calling restaurantView
alloc and it with restaurant,

00:33:30.260 --> 00:33:32.740
the restaurant that we already have.

00:33:32.890 --> 00:33:34.370
And then we call size to fit.

00:33:34.660 --> 00:33:40.030
So the restaurant view will automatically
size to fit properly in our display.

00:33:40.380 --> 00:33:42.870
We had that Categorizer
button below this,

00:33:42.900 --> 00:33:44.120
so we want to create that.

00:33:44.190 --> 00:33:47.080
Again,
it's just a UI button type rounded rect.

00:33:47.200 --> 00:33:49.670
We're going to set its
title to Categorize.

00:33:49.780 --> 00:33:56.830
We're going to add a target of
ourself for the action Categorize,

00:33:56.830 --> 00:33:58.850
and again,
for UI control event touch up inside.

00:33:58.850 --> 00:33:58.850
And then we're going to tell
it as well to size to fit.

00:34:00.130 --> 00:34:03.600
But actually,
we want to tweak its size a bit.

00:34:03.720 --> 00:34:07.340
We want its height to be
whatever it expects it to be,

00:34:07.340 --> 00:34:09.000
by calling size to fit.

00:34:09.130 --> 00:34:12.580
But we want to make its width as
wide as our restaurant viewer is.

00:34:12.730 --> 00:34:16.910
So we get the frame of the button,
and we then forcibly set its width

00:34:17.280 --> 00:34:19.640
to be our restaurant view's width.

00:34:20.060 --> 00:34:21.570
The next line you can ignore for now.

00:34:21.690 --> 00:34:22.340
I'll come back to it.

00:34:22.530 --> 00:34:24.000
It's a little confusing.

00:34:24.040 --> 00:34:27.670
And finally, we set the frame on
the Categorizer button.

00:34:28.990 --> 00:34:30.600
We then need to add
these views somewhere.

00:34:30.600 --> 00:34:34.580
Well, let's add them to our
custom centering view class.

00:34:34.580 --> 00:34:37.290
The centering view basically
lays things all out nicely and

00:34:37.290 --> 00:34:39.520
vertically on a center line.

00:34:40.040 --> 00:34:42.550
And we're going to set up
that centering view's width

00:34:42.760 --> 00:34:46.300
to be the main screen's width.

00:34:46.300 --> 00:34:49.880
We set the view controller's
view to be that centering view.

00:34:49.880 --> 00:34:52.180
We don't need to retain it anymore.

00:34:53.260 --> 00:34:55.270
And then we add our restaurant
view and our categorize

00:34:55.270 --> 00:34:57.400
button to the center in view.

00:34:57.520 --> 00:34:59.270
So what do we get now?

00:35:02.700 --> 00:35:05.080
That looks a lot nicer.

00:35:05.080 --> 00:35:07.000
Unfortunately,
it doesn't really do anything.

00:35:07.010 --> 00:35:08.580
We rotate.

00:35:08.700 --> 00:35:09.730
It doesn't.

00:35:09.820 --> 00:35:11.750
If we click the Categorize button,
I'm not actually going

00:35:11.750 --> 00:35:13.810
to because it will crash.

00:35:14.040 --> 00:35:17.440
The reason it crashes is because
we did set up this selector before,

00:35:17.480 --> 00:35:21.800
but we didn't actually implement
a categorized selector on here.

00:35:21.900 --> 00:35:25.730
So it will try to call that,
and it will throw an exception.

00:35:25.860 --> 00:35:29.800
So the first thing I want to show you
how to do is how to support rotation.

00:35:30.970 --> 00:35:36.920
So we said earlier, should auto rotate to
interface orientation?

00:35:37.110 --> 00:35:39.520
In our case,
the only interface orientation we do

00:35:39.520 --> 00:35:44.960
not natively support is UI interface
orientation portrait upside down.

00:35:44.960 --> 00:35:46.780
By default,
apps on the phone that you see rotate

00:35:46.860 --> 00:35:49.100
will not support portrait upside down.

00:35:49.100 --> 00:35:50.670
It's kind of a weird thing.

00:35:50.810 --> 00:35:53.610
When you do that,
the user then loses their spatial

00:35:53.670 --> 00:35:55.390
relation to where the phone is.

00:35:55.690 --> 00:35:57.440
So it's best to, you know,
if you're going to be

00:35:57.440 --> 00:36:00.370
doing a portrait mode,
only do it in the normal portrait mode,

00:36:00.510 --> 00:36:03.470
unless you have a reason
to flip it upside down.

00:36:04.090 --> 00:36:07.150
We then have the will animate first half
of rotation to interface orientation

00:36:07.200 --> 00:36:11.220
and will animate second half of
rotation from interface orientation.

00:36:11.300 --> 00:36:14.120
Both of these are going to tell
the restaurant view size to

00:36:14.220 --> 00:36:16.330
fit to interface orientation.

00:36:16.560 --> 00:36:18.540
First stage, yes, and first stage, no.

00:36:18.770 --> 00:36:23.140
So first stage is just a parameter we're
passing down to the restaurant view.

00:36:23.230 --> 00:36:24.010
So how does this work?

00:36:24.170 --> 00:36:26.910
Well, if we were to look at
the restaurant view,

00:36:31.530 --> 00:36:36.180
So we have our basic setup stuff here.

00:36:36.250 --> 00:36:40.060
If we scroll down to
size the fit first stage,

00:36:40.130 --> 00:36:41.630
the restaurant view is pretty smart.

00:36:41.710 --> 00:36:44.090
It knows to change its width
depending on whether it's in

00:36:44.090 --> 00:36:48.670
portrait or landscape mode by calling
UI interface orientation is portrait.

00:36:49.220 --> 00:36:53.820
It then does some nice layout
for all of its subviews as well.

00:36:53.820 --> 00:36:55.560
It says, OK, well, actually,
you want to be this

00:36:55.680 --> 00:36:58.980
width and this height,
and you want to be over here and whatnot.

00:36:59.020 --> 00:37:04.180
All right, so you would think we're done,
right?

00:37:04.280 --> 00:37:06.250
And when you rotated,

00:37:07.500 --> 00:37:10.160
Things look pretty good, right?

00:37:10.230 --> 00:37:12.540
Except for that you'll note
that everything moved in the

00:37:12.540 --> 00:37:15.650
first half of the rotation.

00:37:16.570 --> 00:37:19.560
By this 45 degree mark, they're done.

00:37:19.610 --> 00:37:22.000
There's nothing more for them to do.

00:37:22.280 --> 00:37:24.900
This actually looks a little weird
to the user because things are

00:37:24.900 --> 00:37:27.700
moving not together with each other.

00:37:27.830 --> 00:37:31.030
So the way we need to handle this is we
need to actually handle the first stage

00:37:31.170 --> 00:37:33.460
parameter that we've passed in here.

00:37:33.920 --> 00:37:37.000
We do that by saying, well,
if we're in the first stage,

00:37:37.040 --> 00:37:41.890
then we actually only want to go
halfway to where we want to go.

00:37:42.530 --> 00:37:44.510
All right, well, what does that mean,
really?

00:37:44.620 --> 00:37:48.350
Halfway is going to be this
nice little function here.

00:37:51.130 --> 00:37:55.510
takes an old rect and a new rect and
goes halfway for each of the points,

00:37:55.580 --> 00:37:58.520
for the origin and for the size.

00:37:59.040 --> 00:38:00.980
So when we do this now,

00:38:05.000 --> 00:38:10.750
We will not be able to because
I need to uncomment that.

00:38:13.860 --> 00:38:17.410
So now when we rotate, well,
the subviews still aren't

00:38:17.410 --> 00:38:18.280
responding to that.

00:38:18.280 --> 00:38:23.390
But you'll notice that the main view
animated very nicely between the two.

00:38:24.380 --> 00:38:26.760
So what we need to do is we need
to make sure that our subviews

00:38:26.790 --> 00:38:30.520
also respect this first stage,
second stage.

00:38:30.640 --> 00:38:33.830
So for the description view,
before we set the frame,

00:38:33.830 --> 00:38:35.380
we need to call that.

00:38:35.430 --> 00:38:38.180
And for the title view--

00:38:40.300 --> 00:38:44.540
And then finally,
for the rating view for the stars,

00:38:44.550 --> 00:38:46.370
we want to change that.

00:38:50.680 --> 00:38:56.320
So now, when we rotate,
everything is moving very nicely

00:38:56.600 --> 00:38:59.170
from one orientation to another.

00:39:01.460 --> 00:39:08.690
But if you look really closely,
I don't know if you can tell up there,

00:39:08.690 --> 00:39:08.690
everything's a little blurry.

00:39:08.940 --> 00:39:12.820
The description's a little blurry,
the stars are a little blurry,

00:39:12.870 --> 00:39:14.990
and the title of the
restaurant got blurry.

00:39:15.110 --> 00:39:16.650
Why did that happen?

00:39:16.730 --> 00:39:19.770
We didn't really change much, right?

00:39:20.090 --> 00:39:24.260
Well, actually what happens is that
when it's animating through,

00:39:24.360 --> 00:39:26.450
at that 45 degree mark,
there are transforms

00:39:26.450 --> 00:39:27.570
applied to all your points.

00:39:27.570 --> 00:39:29.370
Your points are at 45 degrees.

00:39:29.450 --> 00:39:31.190
You're trying to set these points.

00:39:31.350 --> 00:39:33.590
All these points are
floating point numbers,

00:39:33.590 --> 00:39:34.650
and things mess up.

00:39:34.710 --> 00:39:37.470
So why do things mess up?

00:39:37.550 --> 00:39:40.100
Well, in the centering view,
the way we've been centering is

00:39:40.100 --> 00:39:41.620
by setting the frame of the views.

00:39:41.620 --> 00:39:46.130
But the frame of the view
at a 45 degree angle,

00:39:46.130 --> 00:39:49.970
where that origin is,
it's not exactly precise.

00:39:50.010 --> 00:39:55.130
So the way we actually do this is
we get rid of all of this stuff.

00:39:58.030 --> 00:40:00.500
And we actually want to
set the center of the view.

00:40:00.560 --> 00:40:02.760
We're rotating around
the center of the view.

00:40:02.860 --> 00:40:04.920
So the center is going
to stay a constant point,

00:40:04.920 --> 00:40:07.790
no matter what that transform is.

00:40:08.010 --> 00:40:08.930
So we grab the center.

00:40:09.090 --> 00:40:11.900
We make sure that the center
is in the right place.

00:40:11.900 --> 00:40:15.190
And then we set the center
of the subview to be that.

00:40:19.370 --> 00:40:25.420
Now when we rotate,
you'll see that everything

00:40:25.420 --> 00:40:28.350
remains nice and crisp,
no matter how many times you rotate,

00:40:28.420 --> 00:40:31.580
because you are moving
from a solid point.

00:40:32.690 --> 00:40:36.300
All right,
so now this app supports rotation.

00:40:36.300 --> 00:40:37.480
That was pretty easy, right?

00:40:37.480 --> 00:40:39.290
There wasn't that much to it.

00:40:39.360 --> 00:40:42.000
A couple tips and tricks here and there.

00:40:42.790 --> 00:40:44.860
What about the actual button?

00:40:45.000 --> 00:40:50.300
So before I showed you
how to add the target,

00:40:50.440 --> 00:40:52.260
so now we actually want
to respond to that target.

00:40:52.260 --> 00:40:55.050
We don't want to crash when
the user clicks on the button.

00:40:55.740 --> 00:40:59.500
So we need to implement the
selector that we had set up,

00:40:59.550 --> 00:41:00.700
Categorize.

00:41:00.900 --> 00:41:03.170
And for that,
we're going to create another view

00:41:03.170 --> 00:41:05.200
controller called Categorizer here.

00:41:05.240 --> 00:41:10.680
And then we want to present modal view
controller Categorizer animated yes.

00:41:10.790 --> 00:41:12.680
So when we do this--

00:41:16.830 --> 00:41:19.700
It nicely pops up a sheet.

00:41:19.860 --> 00:41:23.040
The sheet doesn't do anything,
but it does dismiss nicely, so hey,

00:41:23.040 --> 00:41:24.700
that looks cool.

00:41:24.700 --> 00:41:30.200
What does the categorizer actually do?

00:41:31.210 --> 00:41:33.570
When you actually click on
any one of those buttons,

00:41:33.660 --> 00:41:35.520
the categorizer is actually
set in the interface builder.

00:41:35.520 --> 00:41:37.330
And when you click on
any one of those buttons,

00:41:37.360 --> 00:41:38.770
it sends the categorize action.

00:41:38.780 --> 00:41:41.470
So the first thing we
want to do is we want to,

00:41:41.760 --> 00:41:45.200
you know, we're not actually going to be
changing the model here at all.

00:41:45.200 --> 00:41:45.920
This is just a demo.

00:41:45.920 --> 00:41:48.820
But we want to animate this nicely.

00:41:48.820 --> 00:41:51.170
So the first thing we're
going to do is track all the

00:41:51.170 --> 00:41:52.690
buttons that this one is not.

00:41:52.700 --> 00:41:55.830
So Japanese, Chinese, Italian, French,
which one isn't the sender

00:41:55.830 --> 00:41:59.240
that was actually passed along,
and add it to this other button's IVAR.

00:42:00.090 --> 00:42:03.240
And then we're actually going
to animate the view of the

00:42:03.240 --> 00:42:05.400
restaurant label to the button.

00:42:06.370 --> 00:42:06.970
So what does that do?

00:42:07.150 --> 00:42:11.460
Well, first thing it does is it
grabs the destination rect.

00:42:11.480 --> 00:42:13.440
It then sees whether
the rect is equal to 0,

00:42:13.440 --> 00:42:17.380
just to make sure that we are
animating to someplace sane.

00:42:17.400 --> 00:42:19.360
We're going to begin
ignoring interaction events,

00:42:19.370 --> 00:42:21.270
like we saw earlier.

00:42:22.090 --> 00:42:24.340
And then we're going to
have a little trick here.

00:42:24.390 --> 00:42:27.940
We're going to be animating this
restaurant label view down to the button,

00:42:28.040 --> 00:42:30.190
as you saw in the original demo.

00:42:30.830 --> 00:42:32.980
When we do that,
it's possible for the other buttons

00:42:33.070 --> 00:42:36.780
to be higher up in the view hierarchy
than the label that we're animating.

00:42:36.780 --> 00:42:40.410
And so it might seem to pass behind
some buttons and in front of others.

00:42:40.580 --> 00:42:42.600
You would expect it to always be on top.

00:42:42.720 --> 00:42:46.280
So what we do is we get
all of our subviews,

00:42:46.300 --> 00:42:50.950
and we make sure to exchange
the view that we're moving.

00:42:51.070 --> 00:42:54.820
So exchange subview at index,
sublayers index of object view,

00:42:54.890 --> 00:42:56.820
with subview at index, sublayers count,
minus 1.

00:42:56.820 --> 00:42:59.490
This basically just
moves us to the front.

00:43:00.800 --> 00:43:03.050
We're then going to create
a keyframe animation,

00:43:03.050 --> 00:43:05.540
like we saw in that earlier slide.

00:43:05.820 --> 00:43:09.020
We need to find where we're
actually moving this label to.

00:43:09.550 --> 00:43:14.290
So that would be the center
of the button that we clicked,

00:43:14.640 --> 00:43:17.010
which we grabbed here.

00:43:20.830 --> 00:43:23.880
Next,
we're going to create a ballistic path,

00:43:23.880 --> 00:43:24.600
as I like to call it.

00:43:24.750 --> 00:43:26.920
So a CG path create mutable.

00:43:27.120 --> 00:43:28.680
We get the view's frame.

00:43:28.730 --> 00:43:30.100
We do some nice little math here.

00:43:30.100 --> 00:43:32.560
I'm not going to really go
through how to create CG paths.

00:43:32.630 --> 00:43:37.330
Basically, this is going to make the view
animate up and then back down again,

00:43:37.400 --> 00:43:40.190
as if you were throwing
a ball into the hole.

00:43:43.920 --> 00:43:49.250
We then need to add this ballistic
path to our keyframe animation.

00:43:49.500 --> 00:43:51.790
So we set the path, we set the duration,
we set the delegate,

00:43:51.790 --> 00:43:55.960
we set the fill mode and
removed on completion,

00:43:56.120 --> 00:44:03.100
and then we add animation for key,
and we release, and that's it.

00:44:03.240 --> 00:44:05.430
So what does this look like now?

00:44:08.860 --> 00:44:12.640
Now when I click on French,
it goes very nicely there.

00:44:12.660 --> 00:44:15.390
Well, that was exciting, but--

00:44:15.520 --> 00:44:16.420
Right, two things here.

00:44:16.420 --> 00:44:18.370
One, we ignored interaction events again.

00:44:18.460 --> 00:44:20.830
And two,
that didn't really look like the demo.

00:44:20.840 --> 00:44:23.880
In the demo,
it kind of rotated and it shrank.

00:44:23.920 --> 00:44:26.800
The other buttons faded out, et cetera,
et cetera.

00:44:26.880 --> 00:44:27.670
So how do we do that?

00:44:27.680 --> 00:44:30.580
Well, we've already set up
this one animation here.

00:44:30.580 --> 00:44:32.610
You can set up multiple animations.

00:44:32.610 --> 00:44:35.580
And you can have the animations
behave on the same layers

00:44:35.760 --> 00:44:37.360
that you've already animated.

00:44:37.360 --> 00:44:41.050
So what we're going to do now,
so we've added this keyframe animation,

00:44:41.110 --> 00:44:43.390
we're going to do the
Rotate Restaurant and

00:44:43.390 --> 00:44:45.500
Dim Other Buttons animation.

00:44:46.390 --> 00:44:49.000
So we're going to make sure that
it has the same duration as the

00:44:49.100 --> 00:44:52.800
keyframe animation that we had up
here so that they behave together.

00:44:52.850 --> 00:44:55.960
We're going to set the animation
delegate to ourself again.

00:44:58.450 --> 00:45:01.040
We're then going to
rotate the label view.

00:45:01.320 --> 00:45:04.380
We do this by getting
the view's transform,

00:45:04.510 --> 00:45:06.640
and then applying a
rotation and also a scale,

00:45:06.640 --> 00:45:09.740
because we want it to kind
of shrink down as it rotates.

00:45:09.870 --> 00:45:12.060
And then we're going to
set the view's transform.

00:45:12.180 --> 00:45:15.270
This is another animatable
property on the view.

00:45:15.270 --> 00:45:18.390
It will automatically
animate nicely to this.

00:45:19.490 --> 00:45:22.610
Finally, we want to take the other
buttons and fade them out.

00:45:22.850 --> 00:45:26.900
So we saved off the other buttons before
when we initially clicked Categorize.

00:45:27.020 --> 00:45:29.560
So we say button set alpha 0.

00:45:29.620 --> 00:45:33.440
And then we want to commit animations.

00:45:33.530 --> 00:45:35.520
Now when we run this--

00:45:41.300 --> 00:45:59.400
[Transcript missing]

00:45:59.880 --> 00:46:01.650
So the first thing we're going
to do is we're going to say,

00:46:01.650 --> 00:46:04.510
all right, well,
was this our Rotate Restaurant and

00:46:04.510 --> 00:46:06.700
Dim Other Buttons animation?

00:46:06.750 --> 00:46:09.940
If so, let's begin another animation.

00:46:10.110 --> 00:46:11.760
Let's call it Fade to Black.

00:46:11.800 --> 00:46:13.830
Delegate to ourself,
same duration to keep

00:46:13.830 --> 00:46:15.320
things nicely balanced.

00:46:15.390 --> 00:46:19.310
And we're actually going to fade
out the name of the restaurant.

00:46:23.350 --> 00:46:29.340
So now when we run this, awesome,
we can see French.

00:46:29.380 --> 00:46:32.840
This was a great example of stacking
animations on top of each other.

00:46:32.840 --> 00:46:37.340
As soon as the first animation finished,
the next animation fired off.

00:46:37.360 --> 00:46:40.880
Of course, we are still blocking user
interface interaction stuff,

00:46:41.000 --> 00:46:46.080
so we need to handle
this finished as well.

00:46:47.740 --> 00:46:51.040
So first we check, you know,
is it equal to this string?

00:46:51.280 --> 00:46:52.090
Well, it's not.

00:46:52.160 --> 00:46:53.840
So is it equal to fade to black?

00:46:53.860 --> 00:46:57.500
OK, well, then we want to end
ignoring interaction events.

00:46:57.550 --> 00:47:00.100
And it would be nice to also--
we've already categorized this,

00:47:00.120 --> 00:47:03.590
so call self-cancel on
this view controller.

00:47:12.140 --> 00:47:14.180
And that makes the view
controller slide out,

00:47:14.180 --> 00:47:16.960
and we have control again.

00:47:17.190 --> 00:47:20.610
So that is the Restaurant Viewer demo.

00:47:27.770 --> 00:47:30.160
So pretty simple, right?

00:47:30.310 --> 00:47:33.920
For more information,
Derek Horn is our application

00:47:33.920 --> 00:47:35.440
frameworks evangelist.

00:47:35.440 --> 00:47:38.100
His email is there, derek@apple.com.

00:47:38.160 --> 00:47:40.640
In addition,
documentation from the iPhone Dev Center,

00:47:40.690 --> 00:47:42.700
as I'm sure you're all familiar with.

00:47:42.780 --> 00:47:45.970
Both of the samples that I used
here are available to be downloaded,

00:47:46.130 --> 00:47:50.020
the simple animation sample and
the restaurant viewer sample.

00:47:50.100 --> 00:47:53.360
There's some related sessions
that you might want to see.

00:47:53.420 --> 00:47:56.720
The first one is optimizing
performance in iPhone applications.

00:47:56.720 --> 00:47:58.520
Now,
one of the things I talked about here

00:47:58.520 --> 00:48:01.440
was set up all these different subviews.

00:48:01.490 --> 00:48:03.970
None of these examples really
use drawRect very much.

00:48:04.120 --> 00:48:06.820
The restaurant view did a bit
to do that nice rounded rect,

00:48:06.870 --> 00:48:09.800
but pretty much everything
was done with subviews.

00:48:09.860 --> 00:48:11.580
That's awesome for animations.

00:48:11.580 --> 00:48:13.440
It's awesome for
maintainability of your apps.

00:48:13.440 --> 00:48:16.440
It can be not so awesome for performance.

00:48:16.440 --> 00:48:21.700
So sometimes you may actually want to
do a drawRect versus using subviews.

00:48:21.700 --> 00:48:24.660
Sometimes it's actually more
performant to use subviews.

00:48:24.660 --> 00:48:29.340
This talk will actually really give you
a good idea of when to use this or that.

00:48:29.390 --> 00:48:32.300
Another example talk to go
to is the How Do I Do That?

00:48:32.340 --> 00:48:35.280
Tips and Tricks for iPhone
Application Development.

00:48:35.300 --> 00:48:38.810
This will go into this stuff
in more detail and present tons

00:48:38.810 --> 00:48:41.390
of other really awesome tricks.

00:48:41.540 --> 00:48:43.120
There are a couple of labs to attend.

00:48:43.170 --> 00:48:47.200
The iPhone Controls, Views,
and Animation lab is today at 2:00 PM.

00:48:47.250 --> 00:48:50.900
And there's also a generic
UIKit lab today at 3:30 PM,

00:48:50.950 --> 00:48:52.890
both in the iPhone lab.

00:48:53.420 --> 00:48:56.790
In summary, use the built-in controls
that we provide you.

00:48:56.840 --> 00:48:57.800
There's a lot of them.

00:48:57.800 --> 00:48:59.640
Look at the UI Catalog example.

00:48:59.640 --> 00:49:03.300
There's tons of examples of
different controls that you can use.

00:49:03.380 --> 00:49:04.940
I only gave you three.

00:49:05.070 --> 00:49:08.900
Use multiple views to place
your content efficiently.

00:49:09.020 --> 00:49:11.920
Use UI view animations to
move content around as needed

00:49:11.920 --> 00:49:13.280
because they're very fast.

00:49:13.420 --> 00:49:15.490
They use core animation
for you automatically.

00:49:15.610 --> 00:49:17.860
You don't have to worry about them.

00:49:17.970 --> 00:49:20.190
And finally,
I talked about this in the beginning,

00:49:20.190 --> 00:49:21.770
I want to bring this home again.

00:49:21.870 --> 00:49:24.550
Animations are not just nice candy.

00:49:24.900 --> 00:49:28.900
You really want to use them to
present context to your users,

00:49:29.030 --> 00:49:32.050
so users know when you're moving
from one thing to another.

00:49:32.170 --> 00:49:35.250
They keep a solid frame of
reference via the animations.