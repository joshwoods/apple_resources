WEBVTT

00:00:21.300 --> 00:00:22.600
Welcome to WWDC.

00:00:22.600 --> 00:00:26.600
This is session 711,
a very auspiciously numbered session.

00:00:26.600 --> 00:00:29.350
I'm sure you're all
eagerly waiting for 711,

00:00:29.490 --> 00:00:30.790
just like I am.

00:00:30.910 --> 00:00:35.720
Today I'm going to talk about 2D
graphics and animation on iPhone and Mac,

00:00:35.830 --> 00:00:38.350
along with my colleague Joel Kraut.

00:00:39.460 --> 00:00:40.900
to get started.

00:00:40.900 --> 00:00:44.830
My name is Derek Clegg,
and I'm going to ask you

00:00:44.830 --> 00:00:45.990
first why you're here.

00:00:46.000 --> 00:00:49.790
The key thing about this session is we're
going to talk about stuff that's a little

00:00:49.790 --> 00:00:52.400
bit at a different level than some of
the other sessions you may have seen.

00:00:52.400 --> 00:00:55.980
So just to set the stage,
one reason you might be here, of course,

00:00:55.980 --> 00:00:58.350
is because you want to use
Core Graphics to draw some really

00:00:58.350 --> 00:00:59.870
beautiful things in your applications.

00:00:59.900 --> 00:01:04.340
Here's an example of some of the things
that you can draw with Core Graphics.

00:01:04.340 --> 00:01:06.560
Of course, there's the text,
there's the guitar,

00:01:06.560 --> 00:01:08.990
sort of faded out a little bit,
a little translucent.

00:01:09.000 --> 00:01:10.990
Various patterns and so on.

00:01:11.000 --> 00:01:14.720
You've got some interesting non-Roman
text in the bottom left-hand corner,

00:01:14.720 --> 00:01:18.510
some line art, some little funky
oscilloscope-type diagram,

00:01:18.520 --> 00:01:19.700
the pie chart.

00:01:19.700 --> 00:01:21.760
All those things are
drawn in Core Graphics.

00:01:21.760 --> 00:01:24.790
All of those are sort of,
you use the power of Core Graphics

00:01:24.820 --> 00:01:28.170
to get really interesting look
and feel for an application.

00:01:28.180 --> 00:01:30.760
Of course, that's just part of the story.

00:01:30.760 --> 00:01:35.280
Core Graphics lets you draw stuff,
but once you have drawn it,

00:01:35.300 --> 00:01:38.130
you might want to use it
to move things around.

00:01:38.140 --> 00:01:40.870
That, you'd use Core Graphics to
do the cool core animation.

00:01:40.880 --> 00:01:44.240
Of course, most of you have seen the
Cover Flow demos that we have.

00:01:44.380 --> 00:01:47.480
Here we're using Core Graphics
to do all the artwork drawing,

00:01:47.480 --> 00:01:51.010
but of course, Core Animation to do the
cool Cover Flow motion.

00:01:51.770 --> 00:01:55.080
And the important part of why
you might be here is that you

00:01:55.170 --> 00:01:59.190
have requirements that you really
can't get met at a higher level.

00:01:59.420 --> 00:02:02.280
The higher-level frameworks do a
great job at tons and tons of stuff.

00:02:02.400 --> 00:02:03.880
They're really powerful.

00:02:04.100 --> 00:02:05.510
They're great to use.

00:02:05.510 --> 00:02:08.990
And a lot of times,
using those frameworks, UIKit, Cocoa,

00:02:08.990 --> 00:02:11.080
is exactly the right place to be.

00:02:11.480 --> 00:02:13.540
There are times, though,
when you need to drop down a level,

00:02:13.540 --> 00:02:16.010
and when you need to drop down a
level and do something that maybe

00:02:16.050 --> 00:02:18.990
requires a little bit more power,
maybe you're at the limits of some

00:02:18.990 --> 00:02:21.500
of the higher-level frameworks,
you want to drop down to

00:02:21.560 --> 00:02:23.660
using Core Animation and
Core Graphics natively.

00:02:23.660 --> 00:02:26.930
So I'm going to talk about those two
things today and give you some idea

00:02:26.960 --> 00:02:29.860
of when you might want to switch
to those parts of the system and

00:02:29.860 --> 00:02:31.660
also what we can do at that level.

00:02:33.900 --> 00:02:35.040
So what is Core Graphics?

00:02:35.070 --> 00:02:36.540
It's also called Quartz 2D.

00:02:36.540 --> 00:02:40.590
You'll see that in a lot of the
literature that we make available.

00:02:40.780 --> 00:02:44.180
The key thing is that, you know,
it's really sort of the fundamental

00:02:44.270 --> 00:02:50.760
lowest-level part of the system that
does drawing for both MacÂ OS and iPhone.

00:02:50.770 --> 00:02:52.380
So it's the heart of what we call Quartz.

00:02:52.510 --> 00:02:55.590
Quartz is a larger umbrella
that contains a lot of pieces,

00:02:55.590 --> 00:02:59.780
but it's really at the bottom level,
the heart of the whole thing.

00:03:00.310 --> 00:03:02.000
It's a 2D drawing engine.

00:03:02.000 --> 00:03:03.600
You know,
because it's a 2D drawing engine,

00:03:03.600 --> 00:03:06.380
it has the standard things you'd expect,
vector geometry,

00:03:06.380 --> 00:03:08.140
so path-based lines and strokes.

00:03:08.220 --> 00:03:10.760
Once you've drawn a path,
you can fill them with

00:03:10.930 --> 00:03:14.660
various solid colors,
patterns, gradients, that type of thing.

00:03:14.660 --> 00:03:16.370
Of course, it has support for text.

00:03:16.440 --> 00:03:19.340
It's the native text drawing engine,
images naturally.

00:03:19.340 --> 00:03:24.040
And unlike some other platforms,
Core Graphics has built-in full

00:03:24.040 --> 00:03:27.980
fundamental support for PDF,
so that gives you a lot of

00:03:27.980 --> 00:03:30.560
power that you don't have
necessarily in other platforms.

00:03:30.560 --> 00:03:33.100
Of course, it's used by the higher-level
parts of the system,

00:03:33.100 --> 00:03:37.300
both AppKit, Cocoa, of course, and UIKit,
and it's available through

00:03:37.320 --> 00:03:38.780
the Core Graphics framework.

00:03:41.080 --> 00:03:44.750
Core Animation, of course, though,
gives you more of the full

00:03:44.950 --> 00:03:49.600
animation experience that you
would want in your application.

00:03:49.620 --> 00:03:51.140
It's super easy to use.

00:03:51.170 --> 00:03:54.550
It's an amazingly powerful system
that does a lot of complicated

00:03:54.550 --> 00:03:57.150
stuff that doesn't require you
to do too much work at all.

00:03:57.160 --> 00:03:58.930
So in that sense, it's fantastic.

00:03:58.930 --> 00:04:00.610
It's an amazing piece of work.

00:04:01.280 --> 00:04:06.360
And it really allows you to use
animation to do interesting things in

00:04:06.590 --> 00:04:09.340
terms of the way your app responds.

00:04:09.340 --> 00:04:13.360
In fact, I remember when I first saw the
iPhone with the little scroll thing

00:04:13.450 --> 00:04:17.250
that you thumb down to do motion,
I was blown away because

00:04:17.250 --> 00:04:18.740
it's so powerful.

00:04:18.740 --> 00:04:20.990
It's such a simple idea,
but it gives you a real feel that you're

00:04:20.990 --> 00:04:23.800
actually working with something real,
not just something animated.

00:04:23.800 --> 00:04:25.670
That's all Core Animation doing
that work for you.

00:04:25.750 --> 00:04:28.230
Of course,
on a slightly more mundane level,

00:04:28.240 --> 00:04:31.700
you can use animation to do state
changes and just maybe pop up the

00:04:31.700 --> 00:04:36.110
visual presentation of your application
so it really stands out and shines.

00:04:39.950 --> 00:04:43.280
And the important point though,
I can't emphasize this enough,

00:04:43.280 --> 00:04:45.930
you use Core Graphics and
Core Animation when you're

00:04:46.090 --> 00:04:49.760
willing to trade the flexibility
you get for the power,

00:04:49.760 --> 00:04:52.190
the flexibility and power you
get from this lower-level part,

00:04:52.190 --> 00:04:54.720
from the simplicity you get at
the higher-level frameworks.

00:04:54.860 --> 00:04:57.380
High-level frameworks
are even easier to use,

00:04:57.420 --> 00:05:00.730
have lots of support using the
Cocoa APIs and the UIKit APIs to

00:05:00.730 --> 00:05:02.730
do almost everything you need.

00:05:02.800 --> 00:05:05.040
So there really is this point
where you need to decide,

00:05:05.040 --> 00:05:07.500
well, do I really want to have
something complicated?

00:05:08.200 --> 00:05:09.840
That's when you want to go
down to the lower levels,

00:05:09.840 --> 00:05:12.760
when you've reached the limits of
what you can do at that high level.

00:05:12.760 --> 00:05:14.870
In fact,
the usual thing that we say is stick

00:05:14.870 --> 00:05:18.200
there until you find you really
can't do the thing you want to do,

00:05:18.200 --> 00:05:20.030
the cool thing you want to do,
and then see if you can

00:05:20.030 --> 00:05:21.740
do it in Core Graphics,
Core Animation.

00:05:21.800 --> 00:05:22.500
Probably you can.

00:05:26.300 --> 00:05:28.150
So today I'm going to
focus on Core Graphics.

00:05:28.150 --> 00:05:31.000
My colleague will come up later
to talk about Core Animation.

00:05:31.160 --> 00:05:34.830
So let's just go through a
little bit of some of what

00:05:35.760 --> 00:05:37.600
Core Graphics has available for you.

00:05:37.870 --> 00:05:39.350
Get an overview.

00:05:39.440 --> 00:05:43.400
Of course, you know,
like a normal graphic system,

00:05:43.400 --> 00:05:46.810
there's standard support
for basic primitives,

00:05:46.810 --> 00:05:52.320
points, lines, arcs, curves, rectangles,
grids, filled and stroke types

00:05:52.320 --> 00:05:53.900
of shapes and so on.

00:05:53.900 --> 00:05:55.910
All sorts of standard
things you'd expect.

00:05:57.160 --> 00:05:59.960
Paths can be complicated or simple.

00:05:59.960 --> 00:06:03.120
Here you see a dotted path, for example,
on the upper left-hand corner.

00:06:03.120 --> 00:06:06.150
Just a regular stroke path,
plain old thing, not closed, not filled,

00:06:06.280 --> 00:06:06.980
just stroked.

00:06:07.060 --> 00:06:09.430
On the right,
the two circles are actually a

00:06:09.430 --> 00:06:13.220
path constructed from two circles
where we just filled the interior.

00:06:13.380 --> 00:06:16.170
So there's a path that's
made up of two sub-paths.

00:06:16.240 --> 00:06:19.250
The state of California,
relatively complicated path,

00:06:19.250 --> 00:06:21.310
no problem in Quartz, Core Graphics.

00:06:21.470 --> 00:06:23.660
You just, you know,
build the path up from the

00:06:23.790 --> 00:06:27.060
outline and then you can fill
and stroke it the ordinary way.

00:06:27.060 --> 00:06:30.990
Paths can self-intersect, as with a star,
they have complicated

00:06:30.990 --> 00:06:32.620
shapes like the spiral.

00:06:33.050 --> 00:06:35.560
Of course,
paths give you a lot of what you want,

00:06:35.560 --> 00:06:39.210
but really, in most applications,
images are the primary thing

00:06:39.220 --> 00:06:42.590
that really convey your user
experience in effective ways.

00:06:42.620 --> 00:06:47.180
So Core Graphics builds in native
support for all the standard image

00:06:47.180 --> 00:06:51.340
types on the desktop and most of the
standard image types on the phone.

00:06:51.340 --> 00:06:54.890
But of course, the ones that matter for
most people in terms of web

00:06:54.890 --> 00:06:59.020
development and stuff like that,
PNG, JPEG, GIF, TIFF as well sometimes

00:06:59.030 --> 00:07:00.370
shows up on the web.

00:07:00.730 --> 00:07:04.500
So those are the primary formats
that we have super optimized,

00:07:04.500 --> 00:07:06.180
very high performance.

00:07:06.180 --> 00:07:09.920
Other formats are also supported,
but we expect most people will want

00:07:09.920 --> 00:07:12.080
to stick with those standard types.

00:07:14.540 --> 00:07:18.310
As I mentioned, PDF is built in,
both support for single-page documents,

00:07:18.400 --> 00:07:20.960
multi-page documents,
really the same thing.

00:07:20.960 --> 00:07:24.560
You can use Core Graphics
to draw your PDF content.

00:07:24.560 --> 00:07:27.260
Some people, in fact,
rather than using images

00:07:27.260 --> 00:07:30.030
specifically for their UI,
will build a PDF and that

00:07:30.150 --> 00:07:33.090
PDF may contain images,
it may contain vector art,

00:07:33.090 --> 00:07:35.680
but they'll use that for their UI pieces.

00:07:35.760 --> 00:07:39.790
For example, you may not know it,
but on Dashboard, the little clock,

00:07:39.790 --> 00:07:43.090
all of those little hands and everything,
all of those are small,

00:07:43.150 --> 00:07:46.460
tiny PDF files that are rendered
once per second to sort of

00:07:46.480 --> 00:07:49.020
change the time as you go around.

00:07:49.020 --> 00:07:53.820
And that's a really effective way to get
resolution-independent type of drawing

00:07:53.820 --> 00:07:57.560
using something other than just an image,
but using a PDF.

00:07:57.560 --> 00:08:01.270
So that's something to consider,
since we do have it built into

00:08:01.270 --> 00:08:03.580
Core Graphics as a fundamental type.

00:08:03.660 --> 00:08:05.420
It gives you a lot more flexibility.

00:08:05.760 --> 00:08:12.190
Text, I'm not going to focus on too much,
but on both the Mac and iPhone OS,

00:08:12.190 --> 00:08:16.880
text is at the bottom level
drawn by Core Graphics.

00:08:16.880 --> 00:08:20.470
We do a lot of, we have a lot of support
for complicated text,

00:08:20.470 --> 00:08:24.390
sorry, complicated scripts, colors,
any of the sort of things

00:08:24.390 --> 00:08:27.300
you can do with paths,
you can do with text.

00:08:27.300 --> 00:08:30.120
But really, in most cases,
you're going to stick,

00:08:30.210 --> 00:08:33.090
in terms of drawing the text,
stick with a higher level

00:08:33.190 --> 00:08:35.240
framework such as Core Text on Mac.

00:08:35.760 --> 00:08:39.200
And on iPhone, you would use UI kits,
text support.

00:08:39.200 --> 00:08:41.490
Those are really the right
level of working with text,

00:08:41.490 --> 00:08:43.330
because text is a complicated problem.

00:08:43.340 --> 00:08:46.020
It's really hard to go from
Unicode to Glyphs unless you

00:08:46.020 --> 00:08:47.550
know a lot about typography.

00:08:49.690 --> 00:08:51.650
So to give you an idea of
how the architecture works,

00:08:51.650 --> 00:08:53.710
it's a little different
on the iPhone and the Mac.

00:08:53.760 --> 00:08:56.250
There's two slightly different models.

00:08:56.280 --> 00:08:57.980
Same basic idea though.

00:08:57.980 --> 00:09:02.940
On Mac, we have Cocoa at the top,
which sort of cuts across everything.

00:09:02.940 --> 00:09:05.830
It's a framework you use to
do most of your app work.

00:09:05.830 --> 00:09:07.820
That lives directly on top of Quartz.

00:09:07.910 --> 00:09:09.390
And Quartz is sort of a big package.

00:09:09.390 --> 00:09:10.680
It's not just Core Graphics.

00:09:10.690 --> 00:09:11.680
It's a lot of pieces.

00:09:11.680 --> 00:09:16.600
That whole wad lives on top of OpenGL,
lives on top of the graphics hardware.

00:09:17.980 --> 00:09:20.380
And so Quartz really breaks down
into a lot of different pieces.

00:09:20.380 --> 00:09:22.470
We have sessions about
a number of these areas.

00:09:22.480 --> 00:09:27.000
In this, on the Mac architecture,
Core Animation sort of lives

00:09:27.030 --> 00:09:28.930
on top of Core Graphics.

00:09:28.930 --> 00:09:31.180
Core Animation is really like
a peer of Quartz Composer.

00:09:31.180 --> 00:09:33.750
PDF Kit, there was an interesting
yesterday about PDF Kit,

00:09:33.750 --> 00:09:34.350
Image Kit.

00:09:34.360 --> 00:09:37.520
All of those pieces live
right on top of Core Graphics,

00:09:37.520 --> 00:09:40.650
Core Image, Core Video,
which are a little lower

00:09:40.730 --> 00:09:42.220
level in that sense.

00:09:42.220 --> 00:09:43.880
And then that lives on top of OpenGL.

00:09:43.880 --> 00:09:47.380
iPhone, slightly different model.

00:09:47.980 --> 00:09:51.740
Of course, at the top,
the analog to Cocoa is UI Kit.

00:09:51.770 --> 00:09:54.030
Lives right on top of Quartz,
which lives on top of

00:09:54.110 --> 00:09:54.950
the graphics hardware.

00:09:54.980 --> 00:09:58.030
And here, there's a bit of an inversion.

00:09:58.140 --> 00:10:01.360
Core Animation is really sort of
on top of Core Graphics as a client

00:10:01.360 --> 00:10:03.080
of Core Graphics on the iPhone.

00:10:03.130 --> 00:10:06.040
This doesn't really make much difference
to you in terms of your application.

00:10:06.040 --> 00:10:08.530
You'll do the same types of things,
but it gives you sort of an idea

00:10:08.720 --> 00:10:10.750
of how we sort of stack things up.

00:10:12.560 --> 00:10:14.810
So the key features of Core Graphics
and some of the reasons why

00:10:14.900 --> 00:10:15.940
we think it's really cool.

00:10:15.940 --> 00:10:19.940
Of course, it's a modern 2D graphics API.

00:10:19.940 --> 00:10:20.990
I mean, it was modern.

00:10:20.990 --> 00:10:25.400
It's been around for now many,
many years, but we designed it up front

00:10:25.400 --> 00:10:28.310
to be high-performance,
modern, and so on,

00:10:28.310 --> 00:10:29.950
and it stayed that way.

00:10:29.950 --> 00:10:31.120
We keep extending it.

00:10:31.540 --> 00:10:35.770
So, as device independent up front,
the reason that's so important,

00:10:35.880 --> 00:10:39.090
you now see when you have
your desktop and your phone,

00:10:39.230 --> 00:10:42.030
you write the same code
using Core Graphics.

00:10:42.100 --> 00:10:45.170
You don't have to do something special
because the device is a different

00:10:45.170 --> 00:10:48.250
device in terms of what you actually
write for Core Graphics code because

00:10:48.270 --> 00:10:51.150
we handle sort of things on the
back end so that we make that work.

00:10:51.230 --> 00:10:54.240
So, you don't have to think about what
your end device is going to be.

00:10:54.240 --> 00:10:58.120
Clearly important in this type of market.

00:10:58.810 --> 00:11:01.340
Resolution independence,
also built in from the very beginning.

00:11:01.430 --> 00:11:04.490
For many, many years, people didn't quite
understand what the point was.

00:11:04.490 --> 00:11:05.540
Now, it's pretty clear.

00:11:05.540 --> 00:11:09.280
We have two different devices, Mac,
desktops, for example, and iPhones,

00:11:09.280 --> 00:11:10.590
different resolutions.

00:11:10.700 --> 00:11:13.150
If you had to worry about, oh,
the phone is this resolution,

00:11:13.150 --> 00:11:15.170
the Mac is this resolution,
that would be a pain.

00:11:15.260 --> 00:11:15.980
We do that for you.

00:11:15.980 --> 00:11:17.740
So, you just write the same code.

00:11:17.870 --> 00:11:21.100
It's resolution because Core Graphics
is built to be resolution independent.

00:11:21.100 --> 00:11:23.160
You don't have to do anything
special to handle that.

00:11:23.220 --> 00:11:25.900
Of course,
high performance necessarily these days.

00:11:25.920 --> 00:11:28.750
The anti-alias graphics and text.

00:11:28.770 --> 00:11:32.250
It's what makes things really beautiful
when you look at the small screen of the

00:11:32.250 --> 00:11:34.140
iPhone or the big screen of the desktop.

00:11:34.230 --> 00:11:37.010
The anti-aliasing makes things,
gives you those smooth edges.

00:11:37.020 --> 00:11:39.570
You don't get those blocky, chunky,
ugly stuff that you see

00:11:39.570 --> 00:11:40.730
on some other devices.

00:11:40.760 --> 00:11:45.150
Wide supported image format array,
just as I mentioned earlier.

00:11:45.160 --> 00:11:48.030
Built-in color management,
very important for people who

00:11:48.200 --> 00:11:51.080
are concerned about the way
colors appear on the devices.

00:11:51.100 --> 00:11:55.160
And, of course, built-in PDF support,
fundamental part of Core Graphics,

00:11:55.160 --> 00:11:56.690
really, really useful.

00:11:58.120 --> 00:12:01.260
So that's sort of the big
picture of Core Graphics.

00:12:01.260 --> 00:12:04.040
It's built up of a
number of smaller pieces.

00:12:04.040 --> 00:12:11.040
And what we do in Core Graphics,
because I have an Objective-C background,

00:12:11.040 --> 00:12:13.760
and because object-oriented
programming is obviously the

00:12:13.760 --> 00:12:16.740
right thing to do in the future,
we build up Core Graphics,

00:12:16.740 --> 00:12:19.900
even though it's a C API,
as though conceptually we sort

00:12:19.900 --> 00:12:22.540
of model it as though it were
an object-oriented type thing.

00:12:22.540 --> 00:12:24.750
So we do have what we
call them primitives,

00:12:24.760 --> 00:12:28.660
but they sort of have analogs to
objects on the other frameworks.

00:12:28.660 --> 00:12:32.020
So, for example,
CG Image Ref is the primitive,

00:12:32.020 --> 00:12:34.900
the object, if you will,
that represents an

00:12:34.900 --> 00:12:36.420
image in Core Graphics.

00:12:36.420 --> 00:12:40.150
It sort of parallels
UI image or NS image on Mac.

00:12:40.220 --> 00:12:44.230
Colors are represented by an
abstract type called CG Color Ref,

00:12:44.320 --> 00:12:48.920
which has its parallel to UI color
and NS color on the other platforms.

00:12:48.920 --> 00:12:51.180
Interestingly,
paths are a little different.

00:12:52.490 --> 00:12:55.470
The Core Graphics primitive
is the CG Path Ref on iPhone.

00:12:55.480 --> 00:12:56.620
They said, well, that's good enough.

00:12:56.770 --> 00:12:58.930
So that's their primitive
for paths there too.

00:12:59.070 --> 00:13:02.200
Mac, for historical reasons,
Cocoa has always had an NS Bezier path.

00:13:02.200 --> 00:13:04.550
And so that's sort of the
type you use at that point.

00:13:04.630 --> 00:13:05.700
But you sort of get the idea.

00:13:05.700 --> 00:13:09.250
They're all object-like,
real objects that are used as

00:13:09.250 --> 00:13:10.900
sort of in an object style.

00:13:10.950 --> 00:13:13.180
For getting information in
and out of Core Graphics,

00:13:13.180 --> 00:13:14.440
use a CG data provider.

00:13:14.440 --> 00:13:17.700
That's common across
all three frameworks.

00:13:17.860 --> 00:13:20.760
And for working with document,
for PDF documents,

00:13:20.790 --> 00:13:23.840
the Core Graphics level,
there's a CG PDF document type.

00:13:23.900 --> 00:13:26.330
iPhone has the same thing.

00:13:26.340 --> 00:13:29.370
Mac, interestingly,
has a whole kit that's

00:13:29.390 --> 00:13:32.310
devoted to PDF support,
PDF kit.

00:13:32.360 --> 00:13:33.620
There was a session yesterday about that.

00:13:33.760 --> 00:13:35.570
And there you have a PDF document.

00:13:35.630 --> 00:13:38.030
But not only that,
you have a lot of additional classes that

00:13:38.140 --> 00:13:39.530
let you do lots of interesting things.

00:13:39.550 --> 00:13:44.490
So that's a very cool thing to check out
on Mac if you're not familiar with it.

00:13:45.100 --> 00:13:49.180
So as I said,
it's object-like in that we have sort of

00:13:49.180 --> 00:13:52.090
the same style of working with the types.

00:13:52.200 --> 00:13:54.510
So for example,
the same way in Cocoa you do an

00:13:54.520 --> 00:13:56.270
alloc init to create an object.

00:13:56.340 --> 00:14:00.950
In Core Graphics, you use CG image create
to create the object.

00:14:01.170 --> 00:14:03.950
There's accessors,
conceptually accessors.

00:14:03.990 --> 00:14:05.440
Their functions, of course,
are not methods.

00:14:05.460 --> 00:14:08.050
But, you know, CG image get width,
get height returns the width

00:14:08.050 --> 00:14:09.110
and height of an image.

00:14:09.140 --> 00:14:11.120
And then you can do things to the object.

00:14:11.120 --> 00:14:13.360
You can, in this case,
we're going to draw an image.

00:14:13.480 --> 00:14:16.070
CG context draw image lets you
draw an image into a destination.

00:14:16.080 --> 00:14:18.820
Similar types of things with colors.

00:14:18.820 --> 00:14:22.300
Paths, there you can create a mutable
path that can be modified.

00:14:22.300 --> 00:14:24.990
And you have sort of
the analog of a setter,

00:14:25.020 --> 00:14:26.150
CG path ad rect.

00:14:26.270 --> 00:14:28.570
It's not quite a setter,
but sort of the idea is the same.

00:14:28.580 --> 00:14:30.280
So we really follow that same style.

00:14:30.280 --> 00:14:34.200
And that allows you to maybe not
think so much about how you work with

00:14:34.200 --> 00:14:38.160
the Core Graphics APIs because it
really fits into the same style of the

00:14:38.270 --> 00:14:40.210
APIs you've used at a higher level.

00:14:42.360 --> 00:14:44.300
Of course,
the important thing about objects

00:14:44.300 --> 00:14:48.010
is once you have them around,
you've got to make sure

00:14:48.010 --> 00:14:48.700
you don't leak them.

00:14:48.700 --> 00:14:50.510
You don't want to lose track of them,
otherwise your app will crash

00:14:50.560 --> 00:14:51.840
because you're using too much memory.

00:14:51.840 --> 00:14:54.140
So object ownership is really important.

00:14:54.140 --> 00:14:57.710
The nice thing is, though,
is that we follow the Core Foundation,

00:14:57.740 --> 00:15:01.020
the Cocoa, the UIKit,
the same model that they follow.

00:15:01.020 --> 00:15:03.940
If you create an object,
you're an owner of it.

00:15:03.960 --> 00:15:05.740
You may not be the only owner.

00:15:05.740 --> 00:15:09.310
There's ways to have multiple owners,
but if you create it, you are an owner.

00:15:09.320 --> 00:15:12.100
So you need to do something
about it since you're the owner.

00:15:12.180 --> 00:15:12.960
You have responsibility.

00:15:12.960 --> 00:15:15.970
You must release the object
when you're done with it.

00:15:16.000 --> 00:15:18.050
So the key thing is
that when you create it,

00:15:18.050 --> 00:15:18.780
you own it.

00:15:18.810 --> 00:15:20.230
You release it to get rid of it.

00:15:20.340 --> 00:15:21.320
Say, I don't want it anymore.

00:15:21.320 --> 00:15:22.650
Eventually, it will go away.

00:15:22.680 --> 00:15:28.100
The way you release it is the
standard Core Foundation style.

00:15:28.100 --> 00:15:30.380
If you're familiar with Core Foundation,
CF release.

00:15:30.380 --> 00:15:34.000
For historical reasons,
we have type-specific release functions,

00:15:34.000 --> 00:15:35.700
CG image release, for example,
in this case.

00:15:35.700 --> 00:15:42.160
So that's an important part of
creation is that you're an owner.

00:15:42.160 --> 00:15:42.980
You must release it.

00:15:43.040 --> 00:15:45.860
On the other hand,
if you're not the owner,

00:15:45.860 --> 00:15:49.910
usually the style in Cocoa and
UIKit and for us is when the method

00:15:49.910 --> 00:15:53.620
has a get as opposed to a create in it,
create or copy.

00:15:53.620 --> 00:15:57.070
If it has a get in the name
of the function of the method,

00:15:57.160 --> 00:15:59.080
you're not really an owner.

00:15:59.080 --> 00:16:00.440
So that means that since
you're not the owner,

00:16:00.440 --> 00:16:02.110
you're just sort of hanging
on to it for a little bit.

00:16:02.120 --> 00:16:03.130
You shouldn't release it.

00:16:03.140 --> 00:16:06.860
There are times, though,
when you want to hang on to it for

00:16:06.990 --> 00:16:11.400
a period of time longer than you
might allow for it to disappear.

00:16:12.070 --> 00:16:13.100
Because someone else might release it.

00:16:13.140 --> 00:16:15.940
So you need to retain it if you
want to keep it around for a while.

00:16:15.940 --> 00:16:18.950
So to retain, similarly,
in the way that you may be

00:16:18.950 --> 00:16:21.980
familiar with Core Foundation,
call CF retain.

00:16:21.980 --> 00:16:23.690
We'll retain the object.

00:16:23.740 --> 00:16:26.070
For historical reasons,
we have the object-specific

00:16:26.200 --> 00:16:28.580
retain function,
CG image retain, for example.

00:16:28.580 --> 00:16:34.080
So this is sort of the standard
model that's used throughout

00:16:34.080 --> 00:16:37.670
Cocoa and UIKit to work with objects.

00:16:37.760 --> 00:16:39.550
And assuming you're not
using garbage collection,

00:16:39.550 --> 00:16:40.040
of course.

00:16:40.040 --> 00:16:41.990
And we follow that pretty closely.

00:16:42.050 --> 00:16:45.030
So again, you don't have to think too
much about Core Graphics isn't

00:16:45.030 --> 00:16:46.720
special in any way in that sense.

00:16:46.720 --> 00:16:49.430
Now, another thing that's important
about Core Graphics is the way

00:16:49.430 --> 00:16:51.000
we work with coordinate systems.

00:16:51.020 --> 00:16:54.450
Coordinate system in Core Graphics
may be different from other

00:16:54.450 --> 00:16:56.280
platforms you're familiar with.

00:16:56.330 --> 00:17:00.500
Because what we do is we say, well, look,
you know, we often want to draw the

00:17:00.500 --> 00:17:02.350
same object in multiple ways.

00:17:02.360 --> 00:17:05.400
We want to rotate it or we want
to do something special to it.

00:17:05.490 --> 00:17:08.400
But it's really expensive to create
the object in a different form.

00:17:08.400 --> 00:17:11.900
One approach is to change
your way of thinking from.

00:17:11.900 --> 00:17:14.900
Let's change the object to let's
change the coordinate system.

00:17:14.900 --> 00:17:18.400
So we have a model where the
objects tend to stay static.

00:17:18.400 --> 00:17:19.300
They're immutable.

00:17:19.350 --> 00:17:20.170
They don't change.

00:17:20.180 --> 00:17:23.380
But the coordinate system changes to
allow you to do interesting effects.

00:17:23.480 --> 00:17:25.840
So here we have an image that we draw.

00:17:25.840 --> 00:17:27.730
Origins lower left.

00:17:27.830 --> 00:17:28.770
We just draw the image.

00:17:28.800 --> 00:17:31.860
What can you do to a coordinate system
to change things so it looks different?

00:17:31.880 --> 00:17:33.940
Well, there's some standard things.

00:17:33.940 --> 00:17:34.930
There's more than this.

00:17:35.030 --> 00:17:36.160
But this is some of the standard stuff.

00:17:36.240 --> 00:17:37.400
You can scale the coordinate system.

00:17:37.400 --> 00:17:38.700
You can make the
coordinate system larger.

00:17:38.700 --> 00:17:41.140
You imagine you're drawing
on a piece of plastic.

00:17:41.140 --> 00:17:41.750
You stretch the plastic.

00:17:41.850 --> 00:17:42.620
You stretch the plastic out.

00:17:42.620 --> 00:17:43.660
The coordinate system gets bigger.

00:17:43.660 --> 00:17:45.900
And that makes the content
drawn in it larger.

00:17:45.960 --> 00:17:46.840
You could rotate it.

00:17:47.180 --> 00:17:48.730
You can translate it, move it around.

00:17:48.850 --> 00:17:51.530
Those are some of the standard things
you can do to a coordinate system.

00:17:51.840 --> 00:17:55.270
That's sort of built into
the way core graphics works.

00:17:55.340 --> 00:18:00.330
And it's part of the whole model
of how we work with coordinates.

00:18:00.380 --> 00:18:02.360
So, for example, scaling.

00:18:02.480 --> 00:18:04.220
Here's the same image we drew before.

00:18:04.220 --> 00:18:06.500
But what we're doing now is we
just imagine we're squashing

00:18:06.870 --> 00:18:10.650
in the vertical direction,
maybe by a factor of two.

00:18:10.660 --> 00:18:11.620
So now the image.

00:18:11.660 --> 00:18:13.620
When it's drawn will be squashed down.

00:18:13.620 --> 00:18:16.180
Even though it may be the same
image that we started with,

00:18:16.380 --> 00:18:18.980
it will appear squashed down.

00:18:19.180 --> 00:18:20.700
Same thing with rotation.

00:18:20.720 --> 00:18:22.100
We're just going to rotate
the coordinate system,

00:18:22.100 --> 00:18:23.340
draw the same image the same way.

00:18:23.340 --> 00:18:25.290
And now because the
coordinate system is rotated,

00:18:25.530 --> 00:18:27.220
the image is rotated.

00:18:27.220 --> 00:18:30.860
Flipping, you know,
sort of inverting is a little trickier.

00:18:30.860 --> 00:18:34.980
It requires both a
flip and a translation.

00:18:34.980 --> 00:18:36.460
Because, you know,
if you just flip something here,

00:18:36.460 --> 00:18:37.420
it ends up in the wrong place.

00:18:37.420 --> 00:18:39.100
You've got to slide it back over.

00:18:39.210 --> 00:18:41.500
So that's a little bit
of a trickier operation.

00:18:42.960 --> 00:18:45.940
Now, one thing that's important
about the coordinate systems set

00:18:45.940 --> 00:18:49.530
up for you when you use them,
often you don't end up with a

00:18:49.530 --> 00:18:53.010
coordinate system that you've
created using Core Graphics.

00:18:53.060 --> 00:18:54.950
It's sort of given to you,
provided to you through the

00:18:54.950 --> 00:18:56.080
higher-level frameworks.

00:18:56.130 --> 00:18:56.860
That's pretty typical.

00:18:56.860 --> 00:18:59.760
The default coordinate
system in Cocoa is,

00:18:59.760 --> 00:19:03.230
as Descartes intended,
on the lower left-hand side

00:19:03.230 --> 00:19:05.500
with the y-axis going upward.

00:19:06.070 --> 00:19:10.100
On the other hand, as many people prefer,
on UIKit, it's opposite the upper

00:19:10.100 --> 00:19:13.140
left-hand corner is the origin
and the y-axis goes downward.

00:19:13.140 --> 00:19:15.620
So those are two things that
are different about the systems

00:19:15.750 --> 00:19:16.860
by default that's set up.

00:19:16.950 --> 00:19:19.820
Because Core Graphics is pretty
flexible with the coordinate system,

00:19:19.820 --> 00:19:20.840
you can modify that.

00:19:20.860 --> 00:19:23.120
But you need to know that
if you just start playing

00:19:23.300 --> 00:19:26.440
around with things up front,
trying to do Core Graphics drawing.

00:19:28.260 --> 00:19:31.390
And so, as I mentioned,
the important concept here is that

00:19:31.390 --> 00:19:35.060
we are working not on the object,
but on the coordinate system

00:19:35.060 --> 00:19:35.950
in order to change it.

00:19:36.010 --> 00:19:37.540
So here, for example,
we have a trivial example.

00:19:37.540 --> 00:19:39.260
We have two rectangles.

00:19:39.320 --> 00:19:41.810
Someone said,
I want you to draw the blue rectangle

00:19:41.810 --> 00:19:44.150
and then draw the same rectangle green,
or larger rectangle green

00:19:44.270 --> 00:19:45.360
in a different position.

00:19:45.360 --> 00:19:48.540
Well, you could create two
different rectangles and,

00:19:48.540 --> 00:19:50.290
you know, work with that.

00:19:50.300 --> 00:19:54.260
But, you know, if it's not a rectangle,
but an image or a PDF page and like that,

00:19:54.320 --> 00:19:56.760
that's going to be a lot of
work to create two different

00:19:56.850 --> 00:19:59.930
forms of the same thing,
excuse me, at different sizes.

00:19:59.940 --> 00:20:02.950
The nice thing about Core Graphics
is that you don't have to

00:20:02.990 --> 00:20:04.520
create different objects.

00:20:04.580 --> 00:20:07.530
In this case, we imagine that, you know,
we're going to draw

00:20:07.530 --> 00:20:11.600
the object first at 0,
0 and 100, 100 is the width and height.

00:20:11.620 --> 00:20:15.730
So how might we draw it at this
other position at this other size?

00:20:15.760 --> 00:20:17.360
Well,
we just change the coordinate system.

00:20:17.360 --> 00:20:20.300
We translate the coordinate
system over by a certain amount.

00:20:20.300 --> 00:20:23.170
We scale it up and then we
draw the same exact rectangle.

00:20:23.200 --> 00:20:26.380
So that translation and scale
has ended up drawing the result

00:20:26.380 --> 00:20:29.590
that we want without actually
creating a brand new object.

00:20:29.720 --> 00:20:33.580
So this is a really powerful mechanism
for doing drawing in Core Graphics

00:20:33.580 --> 00:20:37.330
that lets you do a lot of complicated
things without really using a lot

00:20:37.330 --> 00:20:39.270
of system resources to do them.

00:20:39.530 --> 00:20:41.760
Because, again, on our side,
we'll take care of all the magic

00:20:41.810 --> 00:20:44.010
to get to the right size and
the right scale factor and the

00:20:44.010 --> 00:20:45.570
right position and everything.

00:20:45.650 --> 00:20:49.350
But your objects sort of stay the same.

00:20:49.950 --> 00:20:50.300
So that's good.

00:20:50.350 --> 00:20:55.060
That's sort of a big picture, you know,
abstraction of what goes

00:20:55.060 --> 00:20:56.040
on in Core Graphics.

00:20:56.100 --> 00:20:57.950
So let's talk about some of
the primitives and some of

00:20:57.950 --> 00:20:59.130
the primitive ideas as well.

00:20:59.140 --> 00:21:01.570
The first thing is that
Core Graphics uses,

00:21:01.570 --> 00:21:06.040
from a very old PostScript model,
it's a great model, the painter's model.

00:21:06.040 --> 00:21:08.320
The idea there is we build
up from back to front.

00:21:08.320 --> 00:21:11.150
So you sort of draw content from the
back of the thing to the front of

00:21:11.150 --> 00:21:14.840
the thing and anything that's opaque,
obscure, anything that's translucent will

00:21:14.840 --> 00:21:16.510
have some stuff shown through it.

00:21:17.020 --> 00:21:19.680
So, you know,
you might imagine a blank canvas,

00:21:19.680 --> 00:21:22.550
you put on a gradient,
you put another image on top of it,

00:21:22.590 --> 00:21:24.240
it's going to obscure
the stuff behind it.

00:21:24.420 --> 00:21:26.280
You put this little logo up
in the upper right-hand corner

00:21:26.290 --> 00:21:28.880
because it's translucent,
some of the content will show through.

00:21:28.880 --> 00:21:31.170
Maybe you put a little
PDF file on top of that.

00:21:31.290 --> 00:21:34.020
So you're building up from back
to front and that's sort of,

00:21:34.020 --> 00:21:36.980
that's a fundamental way
Core Graphics does its drawing,

00:21:36.980 --> 00:21:38.530
handles its drawing model.

00:21:40.060 --> 00:21:42.540
Well, that's good,
but then you might think, well, okay,

00:21:42.540 --> 00:21:46.340
so I can draw, but where can I draw to?

00:21:47.980 --> 00:21:49.280
There's a bunch of different
drawing destinations.

00:21:49.310 --> 00:21:53.300
As I mentioned before,
we're device independent.

00:21:53.300 --> 00:21:58.130
So you use the same type of
code to draw to different

00:21:58.130 --> 00:22:00.820
destinations for your application.

00:22:00.840 --> 00:22:05.700
Of course, obviously,
drawing to a window, NSVU type thing on

00:22:05.700 --> 00:22:07.720
Mac is pretty standard.

00:22:07.720 --> 00:22:10.320
You can draw to a Core Animation layer
if you're interested in using

00:22:10.320 --> 00:22:11.540
Core Animation directly.

00:22:11.540 --> 00:22:14.460
Bitmap context,
good for off-screen rendering.

00:22:15.030 --> 00:22:17.940
PDF, very important for preserving
your drawing content.

00:22:17.940 --> 00:22:20.720
Of course, naturally,
you're going to be printing occasionally.

00:22:20.720 --> 00:22:24.220
So a printer would be one destination.

00:22:24.240 --> 00:22:26.870
On the iPhone, a little different.

00:22:26.880 --> 00:22:30.210
Instead of NSVU, of course,
you have a UI view, different model,

00:22:30.570 --> 00:22:31.800
different framework.

00:22:31.800 --> 00:22:33.870
Of course, Core Animation is the same,
so you can draw to a

00:22:33.870 --> 00:22:34.900
Core Animation layer.

00:22:34.900 --> 00:22:36.140
Bitmap context, PDF.

00:22:36.140 --> 00:22:39.060
None of the other destinations
make sense right now.

00:22:39.060 --> 00:22:41.770
So that's basically
what you have on iPhone.

00:22:42.860 --> 00:22:49.090
And in order to allow you to think
about or write your code that will end

00:22:49.090 --> 00:22:51.820
up at these different destinations,
we don't necessarily want you to say,

00:22:51.820 --> 00:22:53.930
well, I'm going to draw to a printer,
so let me create a printer

00:22:54.030 --> 00:22:55.050
thing and draw to that.

00:22:55.110 --> 00:22:58.550
No, we sort of abstract all of those
different destinations in a

00:22:58.720 --> 00:23:00.450
single type called a CG context.

00:23:00.480 --> 00:23:05.580
CG context is the abstraction of any
destination you might be going to.

00:23:05.580 --> 00:23:09.050
So again,
your code is not changing because you

00:23:09.050 --> 00:23:12.840
happen to be printing or you happen
to be going to a Core Animation.

00:23:12.860 --> 00:23:15.720
You happen to be drawing to a
UI view or something like that.

00:23:15.720 --> 00:23:16.600
Your code's the same.

00:23:16.600 --> 00:23:22.250
We handle behind the API boundary
all the work that's necessary to

00:23:22.250 --> 00:23:25.580
make the destination match up with
where you want it to end up going.

00:23:25.580 --> 00:23:29.330
So you write the same type of code
using the CG context as your abstract

00:23:29.350 --> 00:23:32.230
data type for the destination,
and we'll do the work to

00:23:32.230 --> 00:23:33.800
send it to the right place.

00:23:38.910 --> 00:23:43.030
So if you were using Cocoa and
you want to get a CG context,

00:23:43.030 --> 00:23:45.700
use this slightly Baroque method.

00:23:45.700 --> 00:23:47.440
It's more historical than anything else.

00:23:47.440 --> 00:23:50.440
Of course,
I'm sure most of you know in Cocoa you're

00:23:50.540 --> 00:23:53.340
going to have an NSView for your drawing.

00:23:53.340 --> 00:23:55.200
Your NSView will have a draw rect.

00:23:55.300 --> 00:23:56.910
In your draw rect you'll do your drawing.

00:23:56.920 --> 00:23:58.880
Core Graphics is what you use to draw.

00:23:58.880 --> 00:24:01.280
Of course you can use the higher-level
frameworks to draw as well,

00:24:01.380 --> 00:24:01.960
obviously.

00:24:01.960 --> 00:24:04.910
But if you were using Core Graphics,
you'd want to get a

00:24:04.910 --> 00:24:06.910
Core Graphics context to draw to.

00:24:07.940 --> 00:24:12.260
So the way you do that is you first
call NSGraphicsContext currentContext.

00:24:12.320 --> 00:24:15.340
That's going to return the
current NSGraphicsContext.

00:24:15.340 --> 00:24:17.150
You might think that's
the same as a CG context.

00:24:17.200 --> 00:24:19.240
No, not at all.

00:24:19.240 --> 00:24:22.190
For historical reasons,
you need to then ask that

00:24:22.190 --> 00:24:27.040
context for its graphics port,
which is the actual real CG context.

00:24:27.040 --> 00:24:30.980
And from that, you can then use all the
CG APIs you're going to see today.

00:24:33.300 --> 00:24:35.460
On the phone, on UIKit, a little simpler.

00:24:35.460 --> 00:24:38.520
There's a function, UIGraphics,
getCurrentContext that just

00:24:38.560 --> 00:24:40.120
does the right work for you.

00:24:40.120 --> 00:24:42.480
And so you don't have to
worry too much about that.

00:24:42.540 --> 00:24:44.710
That's very straightforward.

00:24:46.280 --> 00:24:52.220
Okay, so CG Context is this abstraction
of the drawing destination,

00:24:52.220 --> 00:24:53.190
but it's more than that.

00:24:53.200 --> 00:24:55.260
It's not just sort of that one piece.

00:24:55.260 --> 00:24:58.560
In addition,
there's a set of state parameters

00:24:59.070 --> 00:25:01.890
that you use when you are drawing.

00:25:01.900 --> 00:25:04.840
So some APIs might say in
order to fill a rectangle,

00:25:04.950 --> 00:25:08.470
you call some function that you
specify the rectangle and its

00:25:08.530 --> 00:25:11.650
color and whether it's bordered
and what the border color is.

00:25:11.660 --> 00:25:14.580
You know, a whole slew of parameters
in the one function.

00:25:15.020 --> 00:25:16.550
Core Graphics is different.

00:25:16.560 --> 00:25:20.090
In the context itself,
we keep a current state of all the

00:25:20.210 --> 00:25:23.380
parameters that are used to affect
drawing operations like the fill color,

00:25:23.380 --> 00:25:24.960
obviously, the stroking color.

00:25:24.960 --> 00:25:27.130
The transformation matrix,
as you saw before,

00:25:27.130 --> 00:25:29.630
that's very important in
terms of how things show up.

00:25:29.710 --> 00:25:32.210
Other parameters affect
line drawing and so on.

00:25:32.220 --> 00:25:34.100
So all these things are
part of the graphic state.

00:25:34.160 --> 00:25:38.400
So you set those in the context
and then you can sort of reuse that

00:25:38.410 --> 00:25:41.260
state implicitly each time you draw.

00:25:41.260 --> 00:25:44.120
And when you want to change things,
you just change that state.

00:25:44.310 --> 00:25:46.290
the one parameter of the state,
you don't necessarily

00:25:46.300 --> 00:25:48.020
change everything else.

00:25:48.340 --> 00:25:51.720
So that's really good and that's
a powerful model because you're

00:25:51.720 --> 00:25:55.600
not always setting state just to
draw a single line or a rectangle.

00:25:55.600 --> 00:26:00.540
But the problem is that sometimes you
want to just change one thing and then

00:26:00.540 --> 00:26:03.230
return back to what you had before.

00:26:03.240 --> 00:26:05.420
You're sort of temporarily
changing the color of something,

00:26:05.490 --> 00:26:06.380
for example.

00:26:06.390 --> 00:26:08.820
And then you want to return
back to the state you had before

00:26:08.820 --> 00:26:11.560
because you're done with that.

00:26:11.930 --> 00:26:16.300
So in addition to the state itself,
we have a stack of graphic state,

00:26:16.400 --> 00:26:18.000
the graphic state stack.

00:26:18.010 --> 00:26:23.250
And that works by allowing us to
sort of push and pop graphic states

00:26:23.330 --> 00:26:25.740
on the stack inside the context.

00:26:25.810 --> 00:26:30.230
So here's a sort of a trivial example
where we have a graphic state,

00:26:30.230 --> 00:26:33.740
let's imagine, with just two things,
a stroking color and a filling color.

00:26:33.760 --> 00:26:34.640
And that's our current state.

00:26:34.640 --> 00:26:39.470
And suppose we want to draw a rectangle,
but we want to make it green, not blue.

00:26:39.480 --> 00:26:42.160
You sort of saw that
example a little earlier.

00:26:42.220 --> 00:26:44.650
So the first thing you do is
call CGContext saveGState,

00:26:44.660 --> 00:26:49.490
which will copy the current state
and push it on the graphic stack,

00:26:49.490 --> 00:26:50.780
just like here.

00:26:51.010 --> 00:26:54.700
Now we have two states
that are hanging around,

00:26:54.700 --> 00:26:58.880
and we can change the current one,
change its fill color to green.

00:26:58.880 --> 00:27:02.940
So now we change the fill color to green,
and we can draw our rectangle,

00:27:02.940 --> 00:27:04.360
the rectangle will be green now.

00:27:04.470 --> 00:27:05.760
And now we say, okay, well,
we're done with that.

00:27:05.760 --> 00:27:06.920
We don't want to do that anymore.

00:27:06.920 --> 00:27:09.420
So let's revert back
to what we had before.

00:27:09.680 --> 00:27:12.780
So CGContext restoreGState
will take the current state,

00:27:12.810 --> 00:27:17.400
pop it off the stack and discard it,
and return us back to the original state.

00:27:17.400 --> 00:27:20.870
So in this simple example,
you may not get a real sense

00:27:20.870 --> 00:27:23.390
of why that's so powerful,
but it turns out it's

00:27:23.410 --> 00:27:24.640
incredibly powerful.

00:27:24.640 --> 00:27:27.620
And you're using it, for those of you who
do Cocoa programming,

00:27:27.680 --> 00:27:30.120
all the time, implicitly,
you may not realize it.

00:27:30.130 --> 00:27:32.630
Every time your drawRect
method is called,

00:27:32.670 --> 00:27:38.120
Cocoa will call CGContext saveGState
in order to save the current state,

00:27:38.240 --> 00:27:40.330
call your drawRect method,
and allow you to do anything you

00:27:40.340 --> 00:27:41.610
want to to the graphic state.

00:27:41.620 --> 00:27:44.260
You can make, you know,
crazy decisions and do

00:27:44.260 --> 00:27:47.100
really interesting things,
and when you're done and returned,

00:27:47.100 --> 00:27:50.600
Cocoa doesn't have to sort of
track all the changes you made.

00:27:50.600 --> 00:27:53.040
It doesn't have to worry about, you know,
remembering what was

00:27:53.040 --> 00:27:54.190
there before or anything.

00:27:54.200 --> 00:27:56.030
Instead,
it just calls CGContext restoreGState,

00:27:56.130 --> 00:27:57.390
and we're back to where it was.

00:27:57.570 --> 00:28:02.590
So this is used all the time in Cocoa,
and it's a really powerful mechanism for

00:28:02.890 --> 00:28:06.900
sort of temporarily modifying content
of drawing to get a different effect,

00:28:06.930 --> 00:28:09.760
and then returning back
to what you had before.

00:28:10.590 --> 00:28:12.450
Okay, so, so far, so good.

00:28:12.460 --> 00:28:15.050
We've talked a lot about
Core Graphics and we haven't done a

00:28:15.070 --> 00:28:16.690
thing in terms of actually drawing.

00:28:16.840 --> 00:28:20.900
So now we need to really
put something on the page.

00:28:21.030 --> 00:28:23.690
So let's look at a really simple thing.

00:28:23.950 --> 00:28:26.620
Suppose we just want to fill a rectangle.

00:28:26.780 --> 00:28:28.410
Turns out that's so simple I'm
actually going to cheat and

00:28:28.410 --> 00:28:33.280
have another thing as well,
which is filling an ellipse or a circle.

00:28:33.420 --> 00:28:35.090
The context is, as I said,
the abstraction of the

00:28:35.090 --> 00:28:36.090
drawing destination.

00:28:36.090 --> 00:28:38.560
So you tell the context
you want to draw things.

00:28:38.560 --> 00:28:39.980
You tell the context what to draw.

00:28:39.980 --> 00:28:43.450
Here we have an example of two
APIs for filling a rectangle

00:28:43.720 --> 00:28:45.490
and stroking a rectangle.

00:28:45.500 --> 00:28:47.980
CG Context Fill Rect,
CG Context Stroke Rect.

00:28:48.060 --> 00:28:48.780
So pretty simple.

00:28:48.780 --> 00:28:50.770
Those will take the
rectangle you provide,

00:28:50.850 --> 00:28:53.340
CG Rect is the type that we
use to represent a rectangle,

00:28:53.340 --> 00:28:54.570
and fill it or stroke it.

00:28:54.990 --> 00:28:59.120
Same way, if you think about it,
an ellipse is just a curvy rectangle.

00:28:59.530 --> 00:29:03.600
So there we take an ellipse
and we can fill the ellipse.

00:29:03.600 --> 00:29:05.840
And of course it's going to be
tangent to the sides of the rectangle.

00:29:05.840 --> 00:29:08.990
So we have a Fill Ellipse in Rect,
Stroke Ellipse in Rect.

00:29:09.140 --> 00:29:11.680
Two very simple functions
that let you do,

00:29:11.790 --> 00:29:13.680
you know, boxes, circles.

00:29:14.180 --> 00:29:16.590
To sort of walk you through
some of the code that you might

00:29:16.590 --> 00:29:19.310
write if you were-- and again,
this is a really simple example.

00:29:19.390 --> 00:29:22.300
We're going to draw two rectangles,
but just give you a flavor of

00:29:22.300 --> 00:29:25.970
what the code looks like to
use Core Graphics directly.

00:29:26.080 --> 00:29:29.320
Here we have a function with-- let's
imagine we've gotten a context from,

00:29:29.350 --> 00:29:34.320
you know, UI Kit or Cocoa Somehow in
your draw routine.

00:29:34.550 --> 00:29:37.390
And we have a function, CG-- sorry,
do stroke and fill directs.

00:29:37.550 --> 00:29:40.140
It's going to fill and
stroke some rectangles.

00:29:40.360 --> 00:29:42.160
So the first thing we do,
we're going to make the rectangle

00:29:42.220 --> 00:29:44.050
that we want to fill our stroke.

00:29:44.140 --> 00:29:48.790
And CG Rect Make takes the origin 1010,
width and height 130, 100.

00:29:48.800 --> 00:29:53.020
And we imagine there's some
function that returns a CG color,

00:29:53.020 --> 00:29:54.780
we mentioned that earlier, that's blue.

00:29:54.780 --> 00:29:56.980
My get blue color will return a CG color.

00:29:56.980 --> 00:29:59.460
Because it's a get function,
we're sort of following the naming

00:29:59.460 --> 00:30:00.880
conventions that are standard.

00:30:00.880 --> 00:30:02.930
We're not going to have to
release it or worry about that.

00:30:02.960 --> 00:30:03.700
We're not really the owner.

00:30:03.700 --> 00:30:07.330
We're just going to get the blue color,
set it in the context as the fill color.

00:30:07.340 --> 00:30:09.990
That's going to set the fill color
in the graphic state to blue.

00:30:10.300 --> 00:30:12.180
Now we're going to fill the rectangle.

00:30:12.180 --> 00:30:13.920
Pretty simple.

00:30:13.920 --> 00:30:16.040
There's our filled rectangle,
the right position,

00:30:16.040 --> 00:30:17.110
right width and height.

00:30:19.870 --> 00:30:22.640
Now we're going to stroke
it with a different color,

00:30:22.640 --> 00:30:25.900
in this case, my get green color,
we imagine, returns a green color.

00:30:26.010 --> 00:30:28.740
And we're going to set
that in the graphic state.

00:30:28.800 --> 00:30:32.100
And now we're going to call
CGContact stroke rect with width.

00:30:32.240 --> 00:30:36.460
The width is going to be the border
of the stroking around the rectangle.

00:30:36.490 --> 00:30:38.170
In this case, it's going to be 10 units.

00:30:38.380 --> 00:30:40.910
And here's our stroked rectangle.

00:30:41.070 --> 00:30:43.160
Now one of the subtleties,
or at least something

00:30:43.160 --> 00:30:46.340
that's worth being aware of,
when you stroke paths in Core Graphics,

00:30:46.390 --> 00:30:50.530
the stroke appears on
both sides of the path.

00:30:50.600 --> 00:30:52.700
So we put half of it,
in this case five units on one

00:30:52.700 --> 00:30:55.960
side and half on the other side,
so it sort of straddles the whole path.

00:30:56.050 --> 00:30:59.110
So that's a key thing to know about,
and sometimes people get confused

00:30:59.120 --> 00:31:03.420
about what goes on when we're stroking,
and that's the basic idea there.

00:31:03.420 --> 00:31:05.300
So now we're going to
do the same thing again,

00:31:05.310 --> 00:31:07.000
but we're going to switch the order.

00:31:07.000 --> 00:31:08.440
This will illustrate two things.

00:31:08.540 --> 00:31:09.890
First,
we're going to save the graphic state,

00:31:09.970 --> 00:31:12.440
because what we want to do
is draw the same rectangle,

00:31:12.440 --> 00:31:13.850
but we're going to shift it over.

00:31:13.860 --> 00:31:17.240
This next line moves,
translates the coordinate system

00:31:17.240 --> 00:31:19.980
over by 200 units in the X direction.

00:31:19.980 --> 00:31:22.070
So we just move things over.

00:31:22.340 --> 00:31:26.770
Because we don't want to worry about,
because we don't want to essentially

00:31:26.770 --> 00:31:30.050
undo that operation ourselves,
that's what we're going to

00:31:30.090 --> 00:31:32.670
call save G state in order to
save the graphic state for us.

00:31:32.700 --> 00:31:35.120
Next,
we're going to stroke the rectangle,

00:31:35.120 --> 00:31:35.820
same way.

00:31:35.820 --> 00:31:38.370
Now, notice that because we
have a graphic state,

00:31:38.500 --> 00:31:43.260
the fact that we've set the fill color
and the stroking color before persists.

00:31:43.260 --> 00:31:46.740
It's now using the same things
because we haven't changed it.

00:31:46.800 --> 00:31:50.880
And so we're going to get a
green rectangle stroked at

00:31:50.900 --> 00:31:53.510
the position that we specify.

00:31:54.080 --> 00:31:55.410
and now we're going to call fill rect.

00:31:55.550 --> 00:31:59.060
This is going to take the rectangle and
it's going to fill it with blue because

00:31:59.060 --> 00:32:01.160
that was a fill color we set before.

00:32:01.570 --> 00:32:06.570
And notice in this case,
it's now on top of part of the

00:32:06.580 --> 00:32:10.350
stroked path because as I said,
the stroke path is inside and outside,

00:32:10.410 --> 00:32:11.820
so we're covering part
of the stroke path.

00:32:11.950 --> 00:32:15.910
So that sort of illustrates
how the stroking path works.

00:32:15.990 --> 00:32:19.240
And now we're going to recall
CG Context Restore's G-State because

00:32:19.240 --> 00:32:23.050
we want to undo the change to the
coordinate system that we did before.

00:32:23.220 --> 00:32:27.630
Now the coordinate system is going to
move back over to the original position.

00:32:27.850 --> 00:32:31.460
And then we can keep drawing
anything else we want to.

00:32:31.460 --> 00:32:34.300
Paths are,
as I mentioned at the very beginning,

00:32:34.300 --> 00:32:37.590
paths can be both simple and complex.

00:32:37.600 --> 00:32:41.500
The basic idea is that you begin a path,
you can add some primitives to it.

00:32:41.680 --> 00:32:44.940
We support obviously line
segments but also Bezier cubic

00:32:44.940 --> 00:32:46.440
and Bezier quadratic curves.

00:32:46.500 --> 00:32:50.580
We have some convenience functions that
let you add an entire shape to a path,

00:32:50.620 --> 00:32:52.600
such as a rectangle or a circle.

00:32:52.600 --> 00:32:54.940
If you want to,
you can close the path if you're going

00:32:55.050 --> 00:32:56.700
to fill it or something like that.

00:32:56.700 --> 00:32:58.120
And then you can paint it,
you can either stroke

00:32:58.200 --> 00:32:58.880
it or you can fill it.

00:32:59.090 --> 00:33:02.160
And you'll notice that in the
illustration we have a couple of

00:33:02.170 --> 00:33:04.100
examples of open paths and closed paths,
which are simple.

00:33:04.100 --> 00:33:07.060
But the multiple subpath
case where we have,

00:33:07.080 --> 00:33:11.500
in that case we have four subpaths
that make up a single path,

00:33:11.550 --> 00:33:13.160
they don't all have to be open,
they don't all have to be closed.

00:33:13.280 --> 00:33:17.380
So you can make paths that are
pretty complex to work with in

00:33:17.380 --> 00:33:20.620
Core Graphics depending on your needs.

00:33:21.590 --> 00:33:26.610
So the next thing we want to do is
perhaps draw some image content.

00:33:29.570 --> 00:33:32.530
Images are interesting.

00:33:32.670 --> 00:33:35.380
There's two pretty distinct
ways of working with images.

00:33:35.380 --> 00:33:42.190
This is one of the places where there is
a dissimilar feel on iPhone and on Mac.

00:33:42.280 --> 00:33:47.140
On Mac, there's the Image.io framework,
which you use to do most of your

00:33:47.140 --> 00:33:49.330
input-output of image content.

00:33:49.390 --> 00:33:54.940
That's the C API that's sort of the
peer of the standard Core Graphics API.

00:33:54.940 --> 00:33:57.610
At the higher level,
you have Cocoa and you have

00:33:57.610 --> 00:34:00.300
the native NSImage type,
which you can use to do

00:34:00.300 --> 00:34:02.460
object-oriented image manipulation.

00:34:02.460 --> 00:34:04.070
iPhone, it's a little different.

00:34:04.100 --> 00:34:09.100
The type there is UIImage and
it's built on top of CGImage,

00:34:09.100 --> 00:34:12.740
but you don't have quite the same
direct interaction with Image.io,

00:34:12.740 --> 00:34:16.240
certainly not NSImage,
that you do on Mac.

00:34:16.570 --> 00:34:17.350
So it's a little different.

00:34:17.420 --> 00:34:20.590
But I'm not going to talk so
much about the iPhone case.

00:34:20.680 --> 00:34:23.040
The interesting case in
this talk will be Mac,

00:34:23.100 --> 00:34:27.860
because that's closer to what
Core Graphics directly uses.

00:34:28.340 --> 00:34:33.840
So in Mac, with Image.io,
the important part about drawing an

00:34:33.840 --> 00:34:40.200
image is that there's a basic type,
CG image source, which is effectively the

00:34:40.270 --> 00:34:42.230
abstraction of the file on disk.

00:34:42.290 --> 00:34:45.760
So you can think about an
image source as like there's,

00:34:45.880 --> 00:34:49.810
you know, foo.tiff or, you know,
mybestfriend.jpg,

00:34:49.810 --> 00:34:52.780
some file on disk that you can work with.

00:34:53.440 --> 00:34:57.740
And you create an image source using
CG image source create with URL.

00:34:57.790 --> 00:35:01.380
There's a couple of other
APIs that also let you do this.

00:35:01.790 --> 00:35:05.510
And then once you have the image source,
you can get the images out of it.

00:35:05.660 --> 00:35:10.290
Now, the API, a CG image source,
create image at index,

00:35:10.290 --> 00:35:12.510
which is a little odd because if
you think about a file and disk,

00:35:12.510 --> 00:35:14.530
you don't always think, oh, well,
there's multiple images in it.

00:35:14.850 --> 00:35:17.240
Turns out some formats are special.

00:35:17.240 --> 00:35:20.220
They can have multiple images in them.

00:35:20.220 --> 00:35:23.150
So we do need a function that lets you
ask for the image at a particular index.

00:35:24.450 --> 00:35:26.200
Normally, though,
lots and lots of the time,

00:35:26.200 --> 00:35:29.570
the index will be zero
because it's the very first,

00:35:29.690 --> 00:35:33.690
the only,
the very first image in the file.

00:35:35.100 --> 00:38:14.000
[Transcript missing]

00:38:15.100 --> 00:38:18.750
The other type that we have built in,
of course, is PDF.

00:38:18.920 --> 00:38:23.560
In this case, it follows the same model
that we follow with images,

00:38:23.560 --> 00:38:28.740
slightly different variation because
it's up front a little different.

00:38:28.740 --> 00:38:32.200
A PDF document is the
abstraction of a PDF file.

00:38:32.200 --> 00:38:35.100
Of course, PDF documents normally
contain multiple pages,

00:38:35.100 --> 00:38:40.370
so there's a PDF page, CG PDF page,
which is the abstraction of the page in

00:38:40.370 --> 00:38:45.560
the document for historical reasons and
I guess because print books do this,

00:38:45.590 --> 00:38:46.990
pages start at one.

00:38:47.000 --> 00:38:48.000
It's a small difference.

00:38:48.000 --> 00:38:54.350
There's a number of functions
that let you work with PDFs.

00:38:54.450 --> 00:38:58.800
I'm not going to go into them too much,
but basically, same way you create a

00:38:58.920 --> 00:39:01.550
PDF document with URL,
like you create an image.

00:39:01.560 --> 00:39:05.780
Once you have a document,
you can get the number of pages from it.

00:39:05.830 --> 00:39:08.810
You can, of course,
get a page from the document to

00:39:08.810 --> 00:39:10.990
draw and then you can draw the page.

00:39:11.090 --> 00:39:17.960
CG Context PDF draw a PDF page will
let you draw the page in your context.

00:39:18.030 --> 00:39:20.940
So that sort of gives you a
flavor of the way PDF stuff works.

00:39:21.000 --> 00:39:26.970
So that's sort of a broad and
quick overview of Core Graphics,

00:39:27.110 --> 00:39:30.990
give you a flavor of what's available.

00:39:31.000 --> 00:39:34.990
As I mentioned earlier at the beginning,
and because I've worked on

00:39:34.990 --> 00:39:39.000
Core Graphics from the beginning
when we first created it in MacÂ OSÂ X,

00:39:39.000 --> 00:39:42.680
we designed it up front to be
very sophisticated and do a

00:39:42.680 --> 00:39:45.860
lot of stuff for you without
you having to do too much work.

00:39:46.000 --> 00:39:49.140
So we built it to make
things easy for you guys.

00:39:49.140 --> 00:39:51.650
And you guys also includes
all the developers internal to

00:39:51.660 --> 00:39:55.000
Apple who really do come to my
office and complain about things.

00:39:55.000 --> 00:39:57.980
So we try to keep the complaints down.

00:39:57.980 --> 00:40:01.090
So we built it from the beginning
to be sophisticated and powerful,

00:40:01.090 --> 00:40:03.000
naturally device and
resolution independent.

00:40:03.010 --> 00:40:05.000
That's fundamental in today's world.

00:40:05.000 --> 00:40:07.000
We can't get away from performance.

00:40:07.000 --> 00:40:10.000
That's critical for the
phone in particular,

00:40:10.000 --> 00:40:13.000
but also critical for every other
system that we have available.

00:40:13.000 --> 00:40:16.900
We wanted to have really rich
and complicated and powerful

00:40:17.320 --> 00:40:22.010
support for obviously images,
but PDFs very fundamental to our system,

00:40:22.440 --> 00:40:24.000
naturally text and so on.

00:40:24.000 --> 00:40:27.000
And it gives you really beautiful
results with the anti-alias rendering.

00:40:27.000 --> 00:40:33.940
Just the way we spent a lot of time
getting things looking superb because in

00:40:33.940 --> 00:40:35.000
the long run you're going to be looking
at it on something like your phone.

00:40:35.000 --> 00:40:37.970
And you want it to look great.

00:40:38.020 --> 00:40:41.000
So we spent a lot of effort
making sure that that's true.

00:40:41.060 --> 00:40:42.000
So that's sort of Core Graphics.

00:40:42.000 --> 00:40:43.000
Now I'm going to turn
things over to my colleague,

00:40:43.000 --> 00:40:47.000
Joel Kraut, who's going to talk to
you about Core Animation.

00:40:53.150 --> 00:40:54.290
Thanks, Derek.

00:40:54.380 --> 00:40:54.910
Hi, everyone.

00:40:55.070 --> 00:40:55.640
I'm Joel Kraut.

00:40:55.770 --> 00:40:57.190
We're going to talk about Core Animation.

00:40:57.340 --> 00:40:59.770
We're just going to get
our toes wet a little bit.

00:41:00.000 --> 00:41:01.240
We've just heard a lot of talking.

00:41:01.340 --> 00:41:02.700
I'm going to talk a lot more.

00:41:02.700 --> 00:41:08.770
So let's start things off with
a demo to keep you interested.

00:41:08.770 --> 00:41:08.770
So if I could get the demo machine.

00:41:12.860 --> 00:41:16.000
I'm just going to show you
what Core Animation can do,

00:41:16.180 --> 00:41:17.730
a little bit of what
Core Animation can do.

00:41:17.860 --> 00:41:19.190
Here we see a grid of images.

00:41:19.200 --> 00:41:21.600
Each one of these is a
Core Animation layer.

00:41:21.600 --> 00:41:26.520
We see that they have some nice
pseudo-3D transform effects.

00:41:26.590 --> 00:41:31.480
And we can actually move
them around in 3D space.

00:41:32.390 --> 00:41:37.400
We can do real 3D
transforms on these layers.

00:41:37.410 --> 00:41:38.510
We can do fog effects.

00:41:38.570 --> 00:41:42.150
We can make them big,
do nice swooping transitions,

00:41:42.280 --> 00:41:43.270
bring that out.

00:41:43.470 --> 00:41:47.700
And if you've been to previous WWDCs,
you might have seen this before,

00:41:47.780 --> 00:41:51.970
but we can do actually fairly
sophisticated 3D effects with these guys.

00:41:52.130 --> 00:41:55.340
And we can have a fairly
enormous number of them on the

00:41:55.340 --> 00:41:59.800
screen with no degradation,
lots of really smooth animation going on.

00:41:59.840 --> 00:42:02.190
And of course,
all the images are preserved

00:42:02.200 --> 00:42:04.290
and looking beautiful.

00:42:10.010 --> 00:42:10.960
So there we have it.

00:42:11.010 --> 00:42:12.140
That's Core Animation.

00:42:12.180 --> 00:42:17.190
Can we go back to the slides, please?

00:42:17.300 --> 00:42:21.760
So you probably want
to know how to do that.

00:42:26.680 --> 00:42:29.030
So we're not going to do exactly that,
but we're going to talk on a high

00:42:29.030 --> 00:42:30.760
level about what core animation is.

00:42:30.850 --> 00:42:32.760
So here's exactly what
we're going to do today.

00:42:32.760 --> 00:42:34.580
We're going to talk about
what core animation is,

00:42:34.600 --> 00:42:38.130
what it can do for you, and in fact,
how we use it in our system with

00:42:38.130 --> 00:42:40.240
some examples and why we use it.

00:42:40.250 --> 00:42:43.330
Then we're going to move on to the
basic element of core animation,

00:42:43.330 --> 00:42:44.270
which is the CA layer.

00:42:44.540 --> 00:42:46.240
We're going to talk
about how you make them,

00:42:46.240 --> 00:42:48.240
how you use them,
what you can do with them.

00:42:48.280 --> 00:42:51.020
And then, of course,
animation is a big part of the API.

00:42:51.020 --> 00:42:54.330
We're going to talk about the
animation aspect of core animation.

00:42:54.510 --> 00:42:56.340
And lastly,
we're going to touch on why you might

00:42:56.380 --> 00:42:59.680
not want to use core animation at all,
because it turns out that 90%

00:42:59.740 --> 00:43:02.930
of what you're going to want to
do with core animation layers,

00:43:02.930 --> 00:43:06.280
you can do with NSViews
via the animator proxy.

00:43:06.380 --> 00:43:09.330
And during the course of this talk,
I'm going to use NSViews

00:43:09.350 --> 00:43:10.910
and UIViews interchangeably.

00:43:11.240 --> 00:43:13.080
Everything I'm going to say
applies to both of them.

00:43:13.080 --> 00:43:16.510
So this is both on the
desktop and on the phone.

00:43:17.420 --> 00:43:22.690
So Core Animation on a high level is a
foundation for compositing animation.

00:43:22.690 --> 00:43:24.100
We'll talk about what that means.

00:43:24.160 --> 00:43:25.650
If you know Objective-C,
you're in luck because

00:43:25.910 --> 00:43:27.020
that's the native language.

00:43:27.100 --> 00:43:29.650
If you don't,
this is a very good reason to learn it.

00:43:29.960 --> 00:43:31.630
We're going to talk about
all these things later.

00:43:31.680 --> 00:43:36.080
I will point out here that
although the API is mainly shared

00:43:36.170 --> 00:43:40.520
between the desktop and the phone,
there are some things

00:43:40.520 --> 00:43:42.520
that are on the Mac only.

00:43:42.520 --> 00:43:44.620
Those will be called out with
a little purple icon like so.

00:43:45.380 --> 00:43:47.990
So going down a little bit deeper,
Core Animation is an

00:43:47.990 --> 00:43:49.450
engine for compositing.

00:43:49.490 --> 00:43:52.150
And if you don't know,
compositing just means slapping

00:43:52.150 --> 00:43:56.240
together a bunch of graphics and getting
rendered on the screen what you expect.

00:43:56.300 --> 00:43:59.310
So that means if you have some
stuff with transparency in it,

00:43:59.310 --> 00:44:02.270
if you want to do some
sophisticated layering and masking,

00:44:02.400 --> 00:44:05.370
you can put all of that together
and you'll get what you want with

00:44:05.710 --> 00:44:07.840
Core Animation with a minimum of effort.

00:44:09.560 --> 00:44:11.580
So it's also an engine to bring
together all of the graphics

00:44:11.680 --> 00:44:12.830
technologies on the system.

00:44:12.830 --> 00:44:15.290
So that means you can have a
layer with QuickTime content,

00:44:15.290 --> 00:44:16.540
even QuickTime capture.

00:44:16.540 --> 00:44:18.490
You can have a layer
with Quartz 2D drawing,

00:44:18.490 --> 00:44:21.250
leveraging all of the power that
Derek just talked to you about.

00:44:21.280 --> 00:44:26.570
And you can even have layers with
Core Image content and filters on them.

00:44:27.560 --> 00:44:30.110
And on top of that, of course,
there's the animation aspect.

00:44:30.240 --> 00:44:32.640
So I'm going to talk more about
these things in a little bit.

00:44:32.640 --> 00:44:36.360
What you need to know is that all of
the animation in Core Animation follows

00:44:36.360 --> 00:44:38.180
a set-it-and-forget-it model.

00:44:38.240 --> 00:44:39.440
There's explicit and implicit.

00:44:39.620 --> 00:44:40.650
They're both really simple.

00:44:40.700 --> 00:44:45.000
The key part of all of them is that
you never have to write code that's

00:44:45.010 --> 00:44:48.610
going to run at the frame rate,
moving your layer along or

00:44:49.050 --> 00:44:51.060
changing your background color.

00:44:51.060 --> 00:44:53.380
All that stuff is handled for you.

00:44:53.380 --> 00:44:54.180
You never have to worry about
the hard part of animation.

00:44:55.700 --> 00:44:57.420
So why do you want to use Core Animation?

00:44:57.510 --> 00:45:00.680
Well, we know already that animation
gives you these nice benefits

00:45:00.680 --> 00:45:01.850
in the user interface.

00:45:02.080 --> 00:45:04.850
But animation can be a real time hog.

00:45:05.220 --> 00:45:10.380
And if you're going to animate your
entire user interface yourself,

00:45:10.380 --> 00:45:12.900
it can turn out to be a huge pain.

00:45:12.900 --> 00:45:17.740
But of course, you want to do it because
you get these benefits.

00:45:17.740 --> 00:45:17.740
So you might as well use
Core Animation that makes all

00:45:17.740 --> 00:45:17.740
of this stuff easy for you,
as shown here.

00:45:19.090 --> 00:45:21.700
So Core Animation makes it
easy to do interfaces like,

00:45:21.850 --> 00:45:25.430
for instance, iChat,
where animation is used to seamlessly

00:45:25.540 --> 00:45:30.930
transition between states without
a jarring visual jump that you

00:45:30.930 --> 00:45:34.160
might expect in kind of a more
traditional UI for this kind of thing.

00:45:34.570 --> 00:45:37.690
Also Cover Flow,
in which animation is used to give a

00:45:37.690 --> 00:45:43.390
sense of tactile feel to moving around
in this list and also help the user

00:45:43.460 --> 00:45:46.210
keep track of where he is in the list.

00:45:47.460 --> 00:45:50.160
Time Machine,
where animation and Core Animation in

00:45:50.180 --> 00:45:57.890
particular are used to denote
an actual time-based interface,

00:45:57.890 --> 00:45:57.890
which if you think about it is a
pretty natural fit for animation.

00:45:58.560 --> 00:46:02.100
And of course the iPhone UI itself is
entirely built on Core Animation and

00:46:02.100 --> 00:46:06.420
this is vital to having the
user feel that the interface

00:46:06.420 --> 00:46:09.590
is responding directly to his touch.

00:46:09.900 --> 00:46:12.960
So let's look at that one
in a little bit more detail.

00:46:12.960 --> 00:46:15.990
What we see here is a piece
of the iPhone interface.

00:46:16.000 --> 00:46:17.450
Now the important thing here
is that everything you're

00:46:17.470 --> 00:46:18.700
seeing on the screen is layers.

00:46:18.700 --> 00:46:20.650
All of these interface
elements are layers.

00:46:20.800 --> 00:46:23.840
The picture itself is a layer,
and this little alert

00:46:23.840 --> 00:46:25.510
that comes up is a layer.

00:46:25.580 --> 00:46:27.800
And what does that give us?

00:46:27.820 --> 00:46:31.100
That lets us get all these really nice,
smooth transitions between

00:46:31.100 --> 00:46:33.760
interface elements,
which is what you're seeing here.

00:46:33.780 --> 00:46:37.030
Everything slides up, slides down,
fades in, fades out.

00:46:37.370 --> 00:46:39.980
So nothing is abrupt,
and everything kind of feels nice

00:46:40.060 --> 00:46:42.690
and smooth and good to the user.

00:46:43.150 --> 00:46:45.360
If you look at that in a
little bit more detail still,

00:46:45.360 --> 00:46:52.180
what we're going to see here
is two different pieces of UI,

00:46:52.180 --> 00:46:52.180
one big, one small, different shapes,
different sizes.

00:46:52.920 --> 00:46:55.840
But the transition between
them is absolutely seamless.

00:46:55.880 --> 00:46:57.170
Let's look at that again.

00:46:57.290 --> 00:47:00.770
Seamless transition because they're
animated in and out rather than

00:47:00.770 --> 00:47:02.800
just appearing and disappearing.

00:47:02.800 --> 00:47:05.300
So that's the kind of thing that we
can easily do with Core Animation.

00:47:05.300 --> 00:47:09.930
So in general, we're using animation and
Core Animation in particular

00:47:09.930 --> 00:47:12.730
to make it easy for the user
to figure out what's going on,

00:47:12.730 --> 00:47:14.280
to track the action on the screen.

00:47:14.940 --> 00:47:16.890
So you might not want
to use animation if,

00:47:17.080 --> 00:47:19.550
for instance, you find that it's not
adding any more data,

00:47:19.550 --> 00:47:22.220
if it's not giving the user anything,
if it's not helping the

00:47:22.220 --> 00:47:25.820
user do what he wants to do,
or if it's repetitive or distracting,

00:47:25.820 --> 00:47:26.730
it's probably not helping.

00:47:26.740 --> 00:47:30.670
So there's been a lot of research on
why you might want to or might not

00:47:30.670 --> 00:47:33.180
want to use animation in an interface.

00:47:33.180 --> 00:47:34.980
I encourage you to
check some of these out.

00:47:35.030 --> 00:47:36.630
I think these are listed
in the session notes.

00:47:36.640 --> 00:47:38.930
And of course,
start with the Apple Human Interface

00:47:39.000 --> 00:47:41.760
Guidelines as that's the
canonical source for anything.

00:47:44.090 --> 00:47:46.300
So now we kind of have an idea
of what Core Animation is.

00:47:46.300 --> 00:47:50.120
We're going to move on to, as I said,
the basic element of Core Animation,

00:47:50.120 --> 00:47:51.690
which is the CA layer itself.

00:47:51.820 --> 00:47:55.370
We're going to talk about what it is,
what you can do with it,

00:47:55.370 --> 00:47:56.790
and how you can use it.

00:47:57.530 --> 00:48:03.230
So on a low level, animation, I mean,
layers, sorry, are basically 2D planes,

00:48:03.270 --> 00:48:06.460
pieces of geometry that have
no depth themselves but can be

00:48:06.470 --> 00:48:09.540
stacked up and arranged with
depth and kind of a 3D space.

00:48:09.540 --> 00:48:12.500
So here we have a conceptual
illustration of three layers.

00:48:12.500 --> 00:48:16.170
This is what we, the programmer,
know to be the case, that we have these

00:48:16.170 --> 00:48:17.660
three layers stacked up.

00:48:17.790 --> 00:48:20.680
What the user is going to see
is something more like this,

00:48:20.680 --> 00:48:24.460
where they flatten to an image
that appears to be two-dimensional.

00:48:24.780 --> 00:48:27.000
And this is one of the things
that you can do with layers,

00:48:27.110 --> 00:48:29.390
stacking them up like this.

00:48:30.680 --> 00:48:33.240
So in a little bit more depth,
you can think of a layer as

00:48:33.240 --> 00:48:37.280
a two-dimensional piece of
geometry that you fill with stuff.

00:48:37.400 --> 00:48:39.200
So here's the most basic layer, right?

00:48:39.200 --> 00:48:41.870
It's a white square and nothing in it,
not really doing anything.

00:48:41.950 --> 00:48:43.200
But we can mess with this a lot.

00:48:43.200 --> 00:48:44.900
We can change its geometry.

00:48:44.900 --> 00:48:45.500
We can rotate it.

00:48:45.500 --> 00:48:46.870
We can put a little border on it.

00:48:47.020 --> 00:48:48.910
We can put a drop shadow,
although you can't see

00:48:48.910 --> 00:48:52.300
it because it's on black,
but I assure you it's there.

00:48:52.300 --> 00:48:56.000
We can fill it with some
visual content if we want.

00:48:56.000 --> 00:48:59.600
And we can put a
Core Image filter on top of that.

00:48:59.600 --> 00:49:00.730
Of course, that's Mac only.

00:49:00.840 --> 00:49:05.300
And I should also say that each layer
potentially has a tree of child layers

00:49:05.300 --> 00:49:07.780
because Core Image is a -- I mean,
Core Animation, sorry,

00:49:07.870 --> 00:49:09.580
is a tree-based API.

00:49:09.680 --> 00:49:13.440
And some things that you do to the
parent layer will affect the children,

00:49:13.460 --> 00:49:16.670
like position, transformation,
that kind of thing.

00:49:17.590 --> 00:49:19.690
So although the layers
themselves are two-dimensional,

00:49:19.770 --> 00:49:22.740
they can be transformed in 3D,
as you saw with the demo.

00:49:22.780 --> 00:49:26.100
And depth sorting, of course,
is supported automatically.

00:49:26.100 --> 00:49:30.500
Intersections, as you can see here,
happen as you would expect.

00:49:30.520 --> 00:49:33.600
And we recommend not using layer
intersections if you don't need them

00:49:33.600 --> 00:49:35.250
because it increases render time.

00:49:35.340 --> 00:49:38.050
But if it's necessary for your UI,
you can put that in,

00:49:38.070 --> 00:49:40.600
and it'll work as you would like.

00:49:41.920 --> 00:49:45.080
So where do you get the
contents of the layer?

00:49:45.080 --> 00:49:47.560
You can use a Quartz image,
which is what you were just seeing,

00:49:47.610 --> 00:49:50.430
and I should say, by the way,
that all of the demos you're going

00:49:50.430 --> 00:49:54.040
to see inside of this presentation
are actually Core Animation.

00:49:54.090 --> 00:49:56.640
I just rendered out a movie of
Core Animation stuff running.

00:49:56.780 --> 00:49:59.710
So that's the kind of
visual quality you can get.

00:49:59.860 --> 00:50:01.980
And of course,
they were running real time.

00:50:02.100 --> 00:50:04.000
So you can get images, as you just saw.

00:50:04.070 --> 00:50:06.300
You can get Quartz drawing in your layer.

00:50:06.520 --> 00:50:08.570
So you're just given a
CG context in which to draw,

00:50:08.630 --> 00:50:11.250
and then you can do all the stuff
that Derek just told you about.

00:50:11.330 --> 00:50:15.160
You can opt to be notified of layer
bounds change and redraw on that.

00:50:15.230 --> 00:50:17.280
And you can even do this
drawing with a delegate,

00:50:17.420 --> 00:50:19.110
so you don't even need
to subclass anything.

00:50:19.140 --> 00:50:21.570
You just set a delegate
to do the drawing for you.

00:50:21.770 --> 00:50:24.400
And of course,
this is just the basic CA layer.

00:50:24.450 --> 00:50:26.790
You also have these various
sublayers that you can fill

00:50:26.810 --> 00:50:28.220
with other kinds of content.

00:50:28.240 --> 00:50:31.020
You can fill it with a
rendered attributed string.

00:50:31.200 --> 00:50:34.070
You can get a callback to do
OpenGL drawing in a layer.

00:50:34.220 --> 00:50:36.550
You can put a Quartz
Composer project in there,

00:50:36.550 --> 00:50:37.560
and many more things.

00:50:37.560 --> 00:50:39.720
And of course,
the OpenGL layer in particular is

00:50:39.820 --> 00:50:40.720
supported on the phone as well.

00:50:40.720 --> 00:50:42.080
as well.

00:50:43.130 --> 00:50:46.110
So in a little bit more depth,
on a layer you can change

00:50:46.110 --> 00:50:47.520
various geometry aspects.

00:50:47.610 --> 00:50:50.600
This is what happens if you
change the bounds of the layer.

00:50:50.600 --> 00:50:53.480
And of course you get nice smooth
animation no matter what you do.

00:50:53.480 --> 00:50:55.540
You can change the 3D
position of a layer.

00:50:55.620 --> 00:50:58.500
And I should say here what's happening,
you see the red layer

00:50:58.500 --> 00:51:00.140
popping on top of the yellow.

00:51:00.140 --> 00:51:02.540
That's because layers
themselves are two-dimensional.

00:51:03.920 --> 00:51:06.400
Neither of these is
rotated in space at all.

00:51:06.730 --> 00:51:09.750
So the red layer is moving up to
the front and back to the back.

00:51:10.030 --> 00:51:13.220
There's one frame when the red layer is
completely behind the yellow and then

00:51:13.220 --> 00:51:15.040
one frame when it's completely on top.

00:51:15.040 --> 00:51:17.910
And if they had depth to them,
then you would see a

00:51:17.910 --> 00:51:19.560
more gradual transition.

00:51:19.800 --> 00:51:21.820
But because they are in
fact two-dimensional,

00:51:21.820 --> 00:51:23.810
there's no gradual
transition there at all.

00:51:23.810 --> 00:51:25.640
So that's important to note.

00:51:25.810 --> 00:51:29.240
And of course you can change
the 3D transform of a layer

00:51:29.240 --> 00:51:31.190
and do fun stuff like this.

00:51:33.030 --> 00:51:34.240
And perfect.

00:51:34.260 --> 00:51:34.930
Yes.

00:51:35.070 --> 00:51:39.390
So there's a bevy of stylistic properties
that you can set on layers as well.

00:51:39.530 --> 00:51:43.440
So here we can change the opacity,
for instance, of a layer.

00:51:43.440 --> 00:51:44.960
We can change the background color.

00:51:45.210 --> 00:51:49.940
And even when you're changing
something that's kind of semi-abstract,

00:51:50.000 --> 00:51:53.130
like color,
you still get this nice animation

00:51:53.130 --> 00:51:57.540
between the two properties,
between the two values, rather.

00:51:57.540 --> 00:51:58.850
And if we wanted to,
we could change something

00:51:58.850 --> 00:51:58.850
like the width of the border.

00:52:00.090 --> 00:52:04.920
And as well, there's the option to do
Core Image filters on the content

00:52:04.960 --> 00:52:06.250
or the background of a layer.

00:52:06.410 --> 00:52:09.820
So here we have a Core Image filter
running on the content of the layer.

00:52:09.940 --> 00:52:11.530
And of course, this is not masked out.

00:52:11.560 --> 00:52:13.910
You can opt, if you wish,
to mask a layer to its

00:52:14.040 --> 00:52:16.170
boundary rectangle,
in which case here you

00:52:16.350 --> 00:52:17.590
wouldn't see anything.

00:52:17.830 --> 00:52:20.150
But that's what's going on here.

00:52:20.690 --> 00:52:22.480
In addition to these,
there's the option to

00:52:22.480 --> 00:52:24.460
use a compositing filter.

00:52:24.460 --> 00:52:26.960
If you don't know what this means,
you can think of compositing

00:52:26.960 --> 00:52:28.100
as providing a recipe.

00:52:28.100 --> 00:52:32.860
So given the color of the layer and the
color of the background it's on top of,

00:52:32.900 --> 00:52:36.100
the compositing filter provides
what color you're going to get

00:52:36.100 --> 00:52:37.900
on the screen in that place.

00:52:37.900 --> 00:52:41.750
And you can use these CI compositing
filters as you would expect.

00:52:41.850 --> 00:52:45.500
In general,
the default filter is source over.

00:52:45.500 --> 00:52:48.450
If you don't know what I'm talking about,
that's fine.

00:52:48.460 --> 00:52:49.310
This is what you want.

00:52:49.400 --> 00:52:50.340
It's going to do the right thing.

00:52:50.600 --> 00:52:52.850
If you do know what I'm talking
about and you want to know more,

00:52:53.130 --> 00:52:54.760
there's another
Core Animation session that goes

00:52:54.800 --> 00:52:56.220
into much more detail later today.

00:52:56.440 --> 00:52:58.290
Please check that out.

00:52:59.110 --> 00:53:01.280
So now we have kind of an
idea of what the layers are,

00:53:01.490 --> 00:53:03.630
what you can do with them,
what you can put in them and on them,

00:53:03.630 --> 00:53:05.090
and what you can change about them.

00:53:05.200 --> 00:53:07.470
So that brings us to doing
something with those layers,

00:53:07.610 --> 00:53:09.810
which is to say animation.

00:53:10.060 --> 00:53:13.920
Now the thing to remember about
animation in Core Animation is that you

00:53:13.920 --> 00:53:15.860
never have to do any of the hard work.

00:53:16.110 --> 00:53:18.600
What that means is you never
have to write code that's

00:53:18.600 --> 00:53:21.570
going to run at the frame rate,
that's going to move your

00:53:21.570 --> 00:53:23.490
layer or change properties,
you know,

00:53:23.490 --> 00:53:25.470
interpolating or anything like that.

00:53:25.580 --> 00:53:27.670
If you're using implicit
animation or explicit,

00:53:27.670 --> 00:53:29.570
you don't have to do
any of the hard work.

00:53:30.400 --> 00:53:32.840
So implicit animation,
we'll talk about that first.

00:53:32.900 --> 00:53:34.730
This is as simple as could be.

00:53:34.990 --> 00:53:36.220
You just change a property.

00:53:36.490 --> 00:53:38.760
And here we changed the opacity to zero.

00:53:38.760 --> 00:53:42.740
So if we were in our code to
reference that opacity later,

00:53:42.740 --> 00:53:46.030
even in the next line,
we would see it to be zero in the code.

00:53:46.030 --> 00:53:48.600
As far as your program is concerned,
it's changed instantaneously.

00:53:48.600 --> 00:53:51.810
However, what we see on the screen
is a smooth interpolation

00:53:51.810 --> 00:53:53.680
between the old and new values.

00:53:53.680 --> 00:53:56.850
And this happens because
Core Animation keeps a render

00:53:56.850 --> 00:53:58.400
tree which is shadowed.

00:53:58.470 --> 00:54:00.270
It shadows all of your objects.

00:54:00.340 --> 00:54:01.820
You never have to deal with it.

00:54:01.820 --> 00:54:03.620
That's where all of the work happens.

00:54:03.620 --> 00:54:05.820
So we do everything for
you behind the scenes.

00:54:05.820 --> 00:54:09.570
All you see is the clean front-facing
thing where values change instantaneously

00:54:09.570 --> 00:54:11.860
just like your code would expect them to.

00:54:13.660 --> 00:54:14.600
That's implicit animation.

00:54:14.600 --> 00:54:17.720
Explicit animation is only a
little bit more complicated.

00:54:18.030 --> 00:54:21.180
Still, everything happens over
in the render tree.

00:54:21.490 --> 00:54:23.440
You don't have to do anything hard.

00:54:23.440 --> 00:54:25.370
You just have to create
an animation object.

00:54:25.420 --> 00:54:27.580
And you're going to do this when you
want a little bit more control than

00:54:27.650 --> 00:54:29.610
you can get with an implicit animation.

00:54:29.730 --> 00:54:33.580
So you can create one of a
list of kinds of animation.

00:54:33.580 --> 00:54:35.880
For instance,
keyframe lets you specify different

00:54:35.930 --> 00:54:37.580
values at different times.

00:54:37.580 --> 00:54:40.520
Transition is when you change
the entire content of an object,

00:54:40.650 --> 00:54:41.920
that kind of thing.

00:54:41.920 --> 00:54:44.700
So this is an example of
an explicit animation.

00:54:44.700 --> 00:54:49.860
This is just a keyframe animation with,
I think, three keys, three keyframes.

00:54:49.860 --> 00:54:53.200
I just set them up, and I attached the
animation to the object,

00:54:53.320 --> 00:54:54.040
and I let it run.

00:54:54.290 --> 00:54:58.420
Again, I didn't have to tell it,
now do this, now do this, now do this.

00:54:58.440 --> 00:55:01.390
I just set up the object,
configured it with what

00:55:01.510 --> 00:55:04.390
property it was going to affect,
in this case, the position.

00:55:04.550 --> 00:55:08.560
I told it to repeat, and then I added it,
and I forgot about it.

00:55:08.590 --> 00:55:11.580
Everything works as you would expect.

00:55:12.200 --> 00:56:28.500
[Transcript missing]

00:56:39.220 --> 00:56:42.000
Anyone remember this?

00:56:42.030 --> 00:56:45.340
What we're seeing is that very
same demo I just showed you,

00:56:45.360 --> 00:56:47.170
almost in unchanged form.

00:56:47.180 --> 00:56:48.900
The code really just
has a very few changes,

00:56:48.900 --> 00:56:53.080
mostly relating to the number
of squares we're showing.

00:56:53.330 --> 00:56:54.550
Running perfectly on the phone.

00:56:54.660 --> 00:56:58.000
So we can do the same
sort of 3D transition.

00:56:58.210 --> 00:57:01.450
We can do the same full 3D rotation.

00:57:03.520 --> 00:57:07.720
We can do the same fog effect and
big scaling up and transition,

00:57:07.720 --> 00:57:09.570
all that stuff.

00:57:09.930 --> 00:57:13.100
And we can even do this
animation that you would expect

00:57:13.160 --> 00:57:15.230
is really pretty intensive.

00:57:15.230 --> 00:57:19.300
And we have around 300 layers flying
around on the phone right now.

00:57:19.350 --> 00:57:24.960
It's all handled pretty much seamlessly,
flawlessly, no problems whatsoever.

00:57:25.230 --> 00:57:27.930
That's the kind of power that you
get with Core Animation running

00:57:27.930 --> 00:57:29.530
on the desktop or on the phone.

00:57:29.840 --> 00:57:31.850
Can you go back to slides, please?

00:57:37.600 --> 00:57:38.680
Thanks.

00:57:38.800 --> 00:57:42.910
So to sum up the Core Animation section,
Core Animation is what you want to use

00:57:43.000 --> 00:57:46.280
if you have complex composited scenes,
if you want to bring together a

00:57:46.280 --> 00:57:49.440
bunch of graphics technologies on
the platform you're working on,

00:57:49.510 --> 00:57:51.980
if you want to have a nice
animated UI that provides

00:57:52.040 --> 00:57:55.180
various benefits to the user,
that you all know about and of course,

00:57:55.180 --> 00:57:56.760
you're going to read more about.

00:57:56.760 --> 00:58:00.390
But you don't necessarily need to use
Core Animation to get all this stuff.

00:58:00.460 --> 00:58:03.400
In general,
you can use NS View or UI View.

00:58:03.770 --> 00:58:06.830
It's just use them first,
and if you find that there's something

00:58:06.830 --> 00:58:09.270
you need to do that you can't with them,
that's the time to

00:58:09.270 --> 00:58:11.190
investigate core animation.

00:58:12.330 --> 00:58:15.590
So we have been having a lot of
fun giving this presentation.

00:58:15.600 --> 00:58:19.370
We hope that you will have a lot of
fun applying what we have taught you.

00:58:19.440 --> 00:58:23.260
We are really excited to see what's going
to come out of this and what this new

00:58:23.260 --> 00:58:27.490
crop of developers is going to bring to
us both on the phone and on the desktop.

00:58:28.690 --> 00:58:31.060
For more information,
you can contact these people,

00:58:31.140 --> 00:58:33.470
especially Alan Schaffer,
who knows everything you'll

00:58:33.470 --> 00:58:34.360
need to know about anything.