WEBVTT

00:00:20.810 --> 00:00:23.540
So what I'm going to cover today
is I'm going to give you kind of an

00:00:23.610 --> 00:00:27.540
overview of the PDFKit framework,
and then I'm going to spend the last

00:00:27.700 --> 00:00:31.560
three parts of the session talking
about how you would use PDFKit.

00:00:31.560 --> 00:00:35.570
First, I'll show you how you would
use PDFKit to display a PDF,

00:00:35.590 --> 00:00:39.910
which is what probably most people
would like to do with PDFKit.

00:00:40.500 --> 00:00:46.160
And then I'll show you kind of, I guess,
a little more esoteric uses of PDFKit,

00:00:46.160 --> 00:00:51.280
how to create your own PDF content,
and then how to use annotations.

00:00:51.340 --> 00:00:53.870
And annotations are kind of fun.

00:00:53.950 --> 00:00:57.050
I think if you came up with
a list of fun things in PDFs,

00:00:57.050 --> 00:01:00.100
I think annotations would
be on your short list.

00:01:02.080 --> 00:01:03.740
It's an attempt at humor.

00:01:03.740 --> 00:01:05.520
OK, so let's get started.

00:01:05.550 --> 00:01:07.920
PDFKit framework-- so what is it?

00:01:07.920 --> 00:01:12.200
PDFKit is a suite of Cocoa classes,
so if your application uses

00:01:12.280 --> 00:01:15.410
Cocoa or AppKit already,
and you're familiar with

00:01:15.410 --> 00:01:18.540
NSWindow and NSView,
PDFKit adds a whole bunch of

00:01:18.740 --> 00:01:22.640
more Objective-C classes that
obviously are tailored towards PDF.

00:01:22.640 --> 00:01:26.400
And they work really well
with the rest of AppKit.

00:01:26.400 --> 00:01:28.310
It sits on top of Quartz 2D.

00:01:28.470 --> 00:01:32.630
So if you're familiar at all
with the sort of PDF kind of

00:01:32.740 --> 00:01:37.140
underpinnings of Mac OS X,
then you know that PDFKit sort of sits

00:01:37.140 --> 00:01:41.540
on top and leverages and extends that.

00:01:41.540 --> 00:01:46.440
If you've opened a PDF in Preview
or opened up a PDF in Safari with

00:01:46.540 --> 00:01:50.200
the built-in PDF plugin,
then you've seen PDFKit.

00:01:50.200 --> 00:01:57.500
All of the PDF displaying applications
on the Mac OS X are using PDFKit.

00:01:57.560 --> 00:02:01.350
So it's-- it's actually a subframework
part of the Quartz framework.

00:02:01.570 --> 00:02:03.900
So if you go into
System Library Frameworks,

00:02:03.900 --> 00:02:06.420
you'll have to add Quartz
framework to your application.

00:02:06.420 --> 00:02:09.180
And then Quartz framework
is sort of an umbrella.

00:02:09.180 --> 00:02:11.250
There are several
subframeworks within it.

00:02:11.330 --> 00:02:12.720
PDFKit is one of them.

00:02:12.920 --> 00:02:15.860
It's been around since Tiger,
and since we're talking

00:02:15.860 --> 00:02:20.850
about Snow Leopard now,
that it seems like PDFKit has

00:02:20.920 --> 00:02:23.340
been around for quite a while.

00:02:23.790 --> 00:02:25.690
So here are the classes.

00:02:25.890 --> 00:02:27.760
I'm not going to go into
detail on all of them,

00:02:27.760 --> 00:02:29.860
but I just kind of wanted
to throw them on one slide.

00:02:30.040 --> 00:02:33.670
I actually couldn't get them all on
one slide because PDF annotation,

00:02:33.860 --> 00:02:37.040
the fifth one down,
it has a whole number of subclasses.

00:02:37.050 --> 00:02:40.420
And I could, I gave you a couple of them
kind of to be representative,

00:02:40.460 --> 00:02:42.040
but I couldn't show them all.

00:02:42.040 --> 00:02:44.040
And PDF Action also has subclasses.

00:02:44.040 --> 00:02:47.910
But here's basically, you know,
the classes that you get with PDF Kit.

00:02:48.410 --> 00:02:50.960
But to sort of kind of...

00:02:51.160 --> 00:02:56.970
PDF Kit is a great way to categorize
PDF view and PDF thumbnail view.

00:02:56.970 --> 00:03:03.570
It's probably best to pull the first
two out and call these the view classes.

00:03:03.570 --> 00:03:10.920
They have the word "view" in their name,
but they're also both subclass of NSView.

00:03:11.210 --> 00:03:14.460
So all the kinds of things,
if you're familiar with NSView, you know,

00:03:14.490 --> 00:03:18.100
it takes events, mouse clicks,
has a draw routine,

00:03:18.100 --> 00:03:20.100
you add these things into Windows.

00:03:20.100 --> 00:03:23.200
These are the sorts of kind
of properties that PDF view

00:03:23.320 --> 00:03:24.990
and PDF thumbnail view have.

00:03:25.100 --> 00:03:29.100
PDF view, in fact,
if you do open up a PDF in preview,

00:03:29.100 --> 00:03:33.600
the sort of main content area
where the PDF is displayed is,

00:03:33.600 --> 00:03:35.100
in fact, a PDF view.

00:03:35.210 --> 00:03:38.110
And you probably guessed that
the thumbnail view is sort of

00:03:38.110 --> 00:03:41.100
an accessory view for displaying
thumbnails for that document.

00:03:41.100 --> 00:03:46.100
And the two view classes
really integrate well together.

00:03:46.100 --> 00:03:49.780
And I'll show you an example
of that in a few minutes.

00:03:50.060 --> 00:03:52.910
The rest of the classes I'm
just calling base classes.

00:03:53.150 --> 00:03:56.520
They're not subclass of NSView,
they're subclass of NSObject.

00:03:56.710 --> 00:04:01.690
So in that way they are sort of
more basic or more low level.

00:04:01.730 --> 00:04:05.250
And in fact the PDFView and
ThumbnailView classes are really

00:04:05.250 --> 00:04:09.390
built on top of these sort
of foundation-like classes.

00:04:09.400 --> 00:04:14.310
That's not to say though that,
I mean you could just use PDFView,

00:04:14.440 --> 00:04:16.920
but it actually turns out there are a
lot of kind of interesting things that

00:04:16.960 --> 00:04:19.870
your application can do by directly,
not indirectly,

00:04:19.990 --> 00:04:21.860
calling some of these base classes.

00:04:21.900 --> 00:04:25.880
And I want to just kind of highlight
four of these base classes.

00:04:25.880 --> 00:04:29.870
And I'll call these
the core base classes.

00:04:30.200 --> 00:04:34.250
They're PDF Document, PDF Page,
PDF Annotation and PDF Outline.

00:04:34.400 --> 00:04:39.030
PDF Document is going to be the
object that represents a PDF file.

00:04:39.460 --> 00:04:41.540
Whether it's a file on
disk or a file in memory,

00:04:41.700 --> 00:04:44.690
PDF Document is the
representation of that.

00:04:44.700 --> 00:04:48.680
Now PDFs are comprised of pages,
usually more than one.

00:04:48.780 --> 00:04:53.380
And so for each page
within that PDF document,

00:04:53.400 --> 00:04:56.200
there's going to be a PDF page object.

00:04:56.460 --> 00:05:01.560
And PDF Document's going to create
these page objects and retain them

00:05:01.680 --> 00:05:04.700
for each page in that PDF file.

00:05:05.040 --> 00:05:07.400
Some pages have outlines on them.

00:05:07.690 --> 00:05:09.000
Here's a sample.

00:05:09.000 --> 00:05:13.160
It looks like there's a yellow highlight
on the text at the top of that page and

00:05:13.190 --> 00:05:15.500
then there's a red ellipse at the bottom.

00:05:15.500 --> 00:05:20.370
These might be annotations and for each
annotation that there is on a page,

00:05:20.790 --> 00:05:24.500
PDF Page will create a
PDF annotation object.

00:05:24.670 --> 00:05:28.500
And then finally,
if a PDF has an outline,

00:05:28.500 --> 00:05:32.930
then there will be PDF outline objects
to represent that outline tree.

00:05:33.000 --> 00:05:38.800
Now an outline, this is what Adobe Reader
calls bookmarks.

00:05:38.800 --> 00:05:40.800
This is what Preview
calls a table of contents.

00:05:40.920 --> 00:05:42.800
It's not all PDFs have the outline.

00:05:42.800 --> 00:05:43.800
When they do, it's nice.

00:05:43.800 --> 00:05:45.730
It's kind of this tree structure that,
you know,

00:05:45.990 --> 00:05:49.790
might list chapters or have some
kind of way that allows the user

00:05:49.790 --> 00:05:53.800
to easily navigate the PDF file.

00:05:53.800 --> 00:05:57.490
So if it wasn't clear,
I want to kind of summarize

00:05:57.490 --> 00:06:00.750
on this one slide that there
is a kind of hierarchy here.

00:06:00.800 --> 00:06:02.300
There's a kind of nestedness.

00:06:02.300 --> 00:06:05.540
You'll have a single PDF document
object and that's the green box

00:06:05.540 --> 00:06:08.600
here and for each page on that,
and that's going to represent this PDF.

00:06:08.600 --> 00:06:12.600
And each page in that file,
there's going to be a PDF page object.

00:06:12.650 --> 00:06:16.600
And for each annotation on the page,
the page will create annotation objects.

00:06:16.600 --> 00:06:20.580
And then sort of parallel to that,
like page array,

00:06:20.580 --> 00:06:22.600
there's the outline tree.

00:06:22.600 --> 00:06:26.210
And the document is going to
own the root object and then

00:06:26.320 --> 00:06:30.600
each of those outline elements,
if they have children,

00:06:30.600 --> 00:06:31.600
will own and retain those.

00:06:31.600 --> 00:06:34.900
So I've got kind of an example
here of the outline root,

00:06:35.010 --> 00:06:38.320
which is the larger purple box,
has two children.

00:06:38.570 --> 00:06:42.400
The first of which also has a child,
just to give you an example.

00:06:42.540 --> 00:06:46.400
So anyway, that's more or less the
framework kind of summary.

00:06:46.400 --> 00:06:51.400
So let's go ahead and start
how we would use PDFKit.

00:06:51.400 --> 00:06:55.400
So let's imagine that we want to write
a kind of a lightweight PDF viewer.

00:06:55.400 --> 00:06:58.400
And obviously we want to be
able to display PDF files,

00:06:58.400 --> 00:07:01.690
but we want to be able to,
we want the user to be able

00:07:01.690 --> 00:07:03.270
to interact with these files.

00:07:03.400 --> 00:07:04.400
They should be able to select text.

00:07:04.400 --> 00:07:06.430
If there's a link or
something in the document,

00:07:06.430 --> 00:07:08.200
they should be able
to click on that link.

00:07:08.240 --> 00:07:10.200
And it works.

00:07:10.200 --> 00:07:12.960
If there's an outline for the PDF file,
we should be able to

00:07:12.960 --> 00:07:14.120
display that as well.

00:07:14.200 --> 00:07:18.200
Especially for the larger documents
that tend to have the outline.

00:07:18.200 --> 00:07:20.200
I mean, that helps the user navigate.

00:07:20.200 --> 00:07:22.200
So we'll want to support that.

00:07:22.200 --> 00:07:24.080
And while we're, you know,
making it easier to

00:07:24.160 --> 00:07:26.120
find things in the PDF,
let's go ahead and allow

00:07:26.120 --> 00:07:27.200
text searching as well.

00:07:27.200 --> 00:07:31.090
So these are kind of the criteria,
or rather the things we want

00:07:31.230 --> 00:07:33.110
to cover in our application.

00:07:33.200 --> 00:07:35.130
So how would we do that?

00:07:35.400 --> 00:07:37.950
Well, first we want to display text.

00:07:38.050 --> 00:07:40.000
So we want to display a PDF.

00:07:40.000 --> 00:07:44.500
And the way we're going to do that is,
I'm going to assume that you fire up

00:07:44.580 --> 00:07:46.000
Xcode and you create a new project.

00:07:46.000 --> 00:07:49.000
And if you use one of
the Xcode templates,

00:07:49.000 --> 00:07:51.880
you'll probably want to
use the document-based

00:07:51.950 --> 00:07:54.000
Cocoa application template.

00:07:54.000 --> 00:07:57.950
And so Xcode will create, you know,
a nib file for you and a few classes.

00:07:58.030 --> 00:08:02.020
And so what we'll probably do then
is go into Interface Builder with

00:08:02.130 --> 00:08:06.000
that nib file and add some of these
view classes that I mentioned,

00:08:06.000 --> 00:08:07.800
these PDF views.

00:08:07.800 --> 00:08:10.410
And then basically for
displaying the PDF,

00:08:10.430 --> 00:08:11.800
we're using PDFKit.

00:08:12.030 --> 00:08:19.430
So let me go ahead and show you how
you would use Interface Builder.

00:08:22.810 --> 00:08:23.300
Just making sure I was on
the right machine here.

00:08:23.300 --> 00:08:28.800
So here's Interface Builder and I'm going
to create an application template here.

00:08:28.870 --> 00:08:30.980
Generally, like I said,
if you've used Xcode to

00:08:31.120 --> 00:08:34.800
create your template,
you'll already have this interface.

00:08:34.800 --> 00:08:37.800
And the important thing
is that is this window,

00:08:37.800 --> 00:08:40.690
this NSWindow object
that is created for you.

00:08:40.880 --> 00:08:43.840
So here's our window
and let me go into the,

00:08:43.840 --> 00:08:48.540
let me close the inspector
here and bring up the library.

00:08:48.540 --> 00:08:50.800
And here are all your classes.

00:08:50.800 --> 00:08:54.230
Now, I could scroll through and
try to find the PDF classes,

00:08:54.300 --> 00:08:58.800
but I'll just type PDF and
it narrows the field down.

00:08:58.800 --> 00:09:00.680
And here, in fact,
here are the view classes.

00:09:00.820 --> 00:09:02.800
Here's the PDF view,
the PDF thumbnail view.

00:09:02.800 --> 00:09:05.800
So I'll start by dragging a
PDF view in to the window.

00:09:05.920 --> 00:09:08.800
And you'll notice that, you know,
even as I drag it in

00:09:08.800 --> 00:09:09.800
and start to resize it,
that there's already PDF view.

00:09:10.830 --> 00:09:16.070
Now, this is kind of just a trick
of an interface builder.

00:09:16.070 --> 00:09:22.410
Obviously, your application will have
to load your own PDF content.

00:09:22.700 --> 00:09:27.350
And I'll drag a thumbnail
view over here and size it.

00:09:27.350 --> 00:09:27.350
And what I'm going to do is I'm going
to go to the window that I'm in and I'm

00:09:27.350 --> 00:09:27.350
going to go to the interface builder and
I'm going to go to the interface builder.

00:09:27.490 --> 00:09:29.440
Let me hold down,
I'm going to hold the control key

00:09:29.440 --> 00:09:33.090
down and I'm going to drag over from
the thumbnail view to the PDF view.

00:09:33.200 --> 00:09:36.550
Now in Interface Builder this
is how you can wire up outlets.

00:09:36.670 --> 00:09:40.400
And you'll see that one of the outlets,
the second one here is PDF view.

00:09:40.400 --> 00:09:45.070
So by selecting that I've essentially
wired the PDF view outlet from the

00:09:45.070 --> 00:09:47.400
thumbnail view to the PDF view.

00:09:47.400 --> 00:09:49.320
So now they kind of have a relationship.

00:09:49.430 --> 00:09:54.400
The thumbnail view knows from which
PDF view to get its thumbnails basically.

00:09:54.450 --> 00:09:58.400
So I've got my view classes added.

00:09:58.590 --> 00:10:00.310
Let me set some springs.

00:10:00.310 --> 00:10:03.510
You know while I'm at it,
if I go into the inspector here

00:10:03.510 --> 00:10:07.660
you can see for the example
for the PDF view I can turn on,

00:10:07.660 --> 00:10:10.400
I can set some attributes
just from Interface Builder.

00:10:10.400 --> 00:10:13.080
I can turn on automatic scaling.

00:10:13.130 --> 00:10:18.230
I can have it default to two up mode
or single page mode or I'll just

00:10:18.230 --> 00:10:21.210
leave it in single page continuous.

00:10:21.400 --> 00:10:21.400
Thumbnail view I've
got set to two up mode.

00:10:21.400 --> 00:10:21.400
I can turn on automatic scaling.

00:10:21.400 --> 00:10:21.400
I can have it default to two up mode
or single page mode or I'll just

00:10:21.400 --> 00:10:21.400
leave it in single page continuous.

00:10:21.400 --> 00:10:21.400
Thumbnail view I've got set to
two up mode or I'll just leave

00:10:21.400 --> 00:10:21.400
it in single page continuous.

00:10:21.400 --> 00:10:21.400
Thumbnail view I've got set to
two up mode or I'll just leave

00:10:21.400 --> 00:10:21.400
it in single page continuous.

00:10:21.400 --> 00:10:27.060
Um, thumbnail view I've got some
attributes I can set from within

00:10:27.170 --> 00:10:28.400
Interface Builder as well.

00:10:28.400 --> 00:10:30.360
I'll just leave the defaults, though.

00:10:30.410 --> 00:10:33.370
So, I've got the thumbnail view,
the PDF view,

00:10:33.460 --> 00:10:37.400
I'm gonna select both of those and
then embed these inside a split view,

00:10:37.400 --> 00:10:39.400
and set the springs on that.

00:10:39.400 --> 00:10:43.330
That way, uh, when the window resizes,
the split view will also resize.

00:10:43.410 --> 00:10:47.390
And, um,
now I've got everything kind of wired up,

00:10:47.400 --> 00:10:49.400
let me go ahead and try it out.

00:10:49.400 --> 00:10:53.400
If I go into the file menu
and run simulate interface,

00:10:53.450 --> 00:10:56.400
Interface Builder
launches this simulator,

00:10:56.400 --> 00:11:01.290
and here's our window, it's opened up,
and this time, uh,

00:11:01.400 --> 00:11:04.400
the thumbnail view has been told
that there's a new document,

00:11:04.400 --> 00:11:09.400
and so the thumbnail view has gone off
and fetched all the thumbnails here.

00:11:09.400 --> 00:11:14.380
And as I'm scrolling the PDF view,
I'm using the scroll wheel, by the way,

00:11:14.380 --> 00:11:17.400
on the mouse,
as I'm scrolling the PDF view here,

00:11:17.460 --> 00:11:21.400
what it's doing is, it's sending out, um,
page change notifications.

00:11:21.400 --> 00:11:25.720
And because we wired the, uh,
outlet from the PDF thumbnail

00:11:25.720 --> 00:11:28.170
view to this PDF view,
the thumbnail view knows which

00:11:28.170 --> 00:11:32.110
PDF view to listen to for these
page change notifications.

00:11:32.490 --> 00:11:35.400
And as the page is changing,
the thumbnail view, um,

00:11:35.400 --> 00:11:37.270
is selecting the current page.

00:11:37.400 --> 00:11:41.400
And then similarly, I can click on pages
inside the thumbnail view,

00:11:41.400 --> 00:11:46.400
and it does the hit detection
and knows which PDF view to say,

00:11:46.400 --> 00:11:48.400
you know,
go to page three or go to page four,

00:11:48.440 --> 00:11:50.360
or page five.

00:11:50.400 --> 00:11:53.400
I can select text in the PDF view.

00:11:53.490 --> 00:11:56.310
I could copy and paste
into text edit if I wanted.

00:11:56.410 --> 00:11:59.400
If there's a link, for example,
here's a link annotation,

00:11:59.400 --> 00:12:03.400
the cursor turns into a hand,
and I get a tool tip.

00:12:03.400 --> 00:12:07.020
I can click on that link, let go,
and it takes me to that

00:12:07.020 --> 00:12:09.400
destination in the PDF view.

00:12:09.440 --> 00:12:12.400
Um,
I can even do some kind of crude editing.

00:12:12.400 --> 00:12:17.320
There's some drag and drop functionality
built into the thumbnail view.

00:12:17.400 --> 00:12:22.400
Let's see, if I want to, for example, um,
rearrange page one and two,

00:12:22.400 --> 00:12:26.330
I can just drag it like that,
and now I've, I've reordered the,

00:12:26.400 --> 00:12:28.400
the PDF document.

00:12:28.400 --> 00:12:30.360
I can even drag in, uh, content.

00:12:30.400 --> 00:12:34.390
Here's an image, and the thumbnail view
accepts image dragging,

00:12:34.480 --> 00:12:36.400
so, uh, dragging images in.

00:12:36.400 --> 00:12:40.400
I could even drag pages from
one PDF document over to,

00:12:40.400 --> 00:12:42.400
to another PDF document.

00:12:43.000 --> 00:12:44.510
So, um,

00:12:44.770 --> 00:12:46.700
That's about it.

00:12:46.700 --> 00:12:48.020
I'll switch back to my slides.

00:12:53.690 --> 00:12:57.700
So the first step there,
kind of laying out the nib we did,

00:12:57.700 --> 00:13:00.040
and that turned out to be
fairly straightforward.

00:13:00.040 --> 00:13:03.360
We added the PDF view,
the thumbnail view,

00:13:03.360 --> 00:13:07.240
we wired up that outlet,
and you saw all the text selection,

00:13:07.240 --> 00:13:10.640
the hit detection, the link traversal,
that kind of stuff.

00:13:10.830 --> 00:13:14.050
We can check both of the first
two items off of our list.

00:13:14.160 --> 00:13:18.580
So I showed you PDF view and I did
want to spend one slide kind of

00:13:19.040 --> 00:13:23.160
giving you a rundown of some of the
methods that you'll find for PDF view.

00:13:23.160 --> 00:13:26.460
I mean, you can look in PDF view
dot h and I think the header

00:13:26.460 --> 00:13:27.660
is fairly well documented.

00:13:27.660 --> 00:13:30.800
There's at least a line or two,
a comment for each method and

00:13:30.800 --> 00:13:33.160
I think it's fairly self-explanatory.

00:13:33.160 --> 00:13:36.310
But just to kind of give you
just an overview of the kinds of

00:13:36.310 --> 00:13:40.160
methods you'll see in PDF view,
there's methods for navigation.

00:13:40.160 --> 00:13:44.160
So go to page, in, go to preview.

00:13:44.160 --> 00:13:46.160
Go to previous page, go to next page.

00:13:46.210 --> 00:13:50.060
In fact, when I clicked on a thumbnail
in the thumbnail view,

00:13:50.170 --> 00:13:53.160
the thumbnail view itself was calling
one of these methods on the PDF view.

00:13:53.600 --> 00:13:59.140
There are methods for changing the way
the PDF view displays the PDF content.

00:13:59.300 --> 00:14:03.160
And you saw in interface builder
I changed it from one up to up.

00:14:03.200 --> 00:14:07.800
There's a lot of other methods where
you can turn on and off anti-aliasing,

00:14:07.800 --> 00:14:09.160
things like that.

00:14:09.490 --> 00:14:13.160
There are methods for
zooming in and zooming out.

00:14:13.160 --> 00:14:14.160
If you want to put some, you know,
some text in there, you can do that.

00:14:14.160 --> 00:14:15.930
There are methods for,
toolbar items in your

00:14:16.040 --> 00:14:17.160
application for zooming.

00:14:17.200 --> 00:14:22.140
There are methods for select,
you saw that I could select text.

00:14:22.210 --> 00:14:24.800
There's methods for programmatically
selecting text as well or

00:14:24.810 --> 00:14:26.160
getting the current selection.

00:14:26.160 --> 00:14:29.740
And then there's print
methods if you want to wire

00:14:29.740 --> 00:14:32.160
up printing to your PDF view.

00:14:32.160 --> 00:14:35.640
There's conversion routines for
mapping between like a mouse click in

00:14:35.730 --> 00:14:39.430
the view and determining which page
that mouse click was on and where

00:14:39.530 --> 00:14:43.160
sort of in the page's coordinate
system that mouse click happened.

00:14:43.340 --> 00:14:45.100
And there are notifications as well.

00:14:45.180 --> 00:14:48.050
And I showed you the one
notification or I told you about it,

00:14:48.190 --> 00:14:51.160
the page changed notification.

00:14:51.160 --> 00:14:54.160
And your application can
listen to that as well.

00:14:54.160 --> 00:14:57.340
And then there's like, I don't know,
a whole host of other

00:14:57.610 --> 00:14:59.160
notifications as well.

00:14:59.170 --> 00:15:01.150
And there are other methods
as well in the header,

00:15:01.150 --> 00:15:05.160
but I just kind of wanted to summarize,
you know, the bulk of them here.

00:15:05.160 --> 00:15:07.140
So let's get back to our application.

00:15:07.250 --> 00:15:10.070
Like I said, in interface builder,
we cheat.

00:15:10.160 --> 00:15:12.120
I kind of, you know,
conjure up some PDF files.

00:15:12.210 --> 00:15:15.410
I conjure up some PDF content just
to make interface builder more

00:15:15.690 --> 00:15:19.160
interesting so you can see the effect
of changing some of these attributes.

00:15:19.160 --> 00:15:23.220
But in your application, obviously,
you've got to provide your own

00:15:23.220 --> 00:15:25.160
PDF content for your PDF view.

00:15:25.160 --> 00:15:30.140
Now, this is the line of code that you do
that with or the couple lines of code.

00:15:30.190 --> 00:15:33.160
Essentially, you're going to create
a PDF document object.

00:15:33.160 --> 00:15:37.220
And I'm going to assume that you've
already brought up the NSOpenPanel,

00:15:37.220 --> 00:15:40.160
for example,
and the user has selected a PDF file.

00:15:40.160 --> 00:15:41.160
So you've got a URL for that PDF file.

00:15:41.160 --> 00:15:43.980
So to create a
PDF document from that URL,

00:15:43.980 --> 00:15:47.160
you call this initializer
on PDF document.

00:15:47.160 --> 00:15:51.300
So I've got document equals
PDF document alloc init with URL,

00:15:51.300 --> 00:15:55.110
and I pass in that URL that the
user has presumably selected.

00:15:55.190 --> 00:15:59.150
And if it is a legitimate PDF file,
you'll get back a PDF document object.

00:15:59.160 --> 00:16:02.160
So then the next line of code,
my PDF view,

00:16:02.160 --> 00:16:06.160
I'm going to assume that you've
got an outlet to that PDF view

00:16:06.160 --> 00:16:08.070
in your nib called my PDF view.

00:16:08.180 --> 00:16:10.160
So my PDF view is just
an instance of PDF view.

00:16:10.160 --> 00:16:13.960
So the method on PDF view we're
going to call is set document.

00:16:14.160 --> 00:16:17.950
And we pass it that PDF document,
and just that one line of code

00:16:17.950 --> 00:16:22.160
there kind of triggers off this
whole kind of cascade of events.

00:16:22.160 --> 00:16:24.160
The PDF view now has a document.

00:16:24.160 --> 00:16:26.160
It actually sends out a
document change notification.

00:16:26.160 --> 00:16:28.150
That's what the thumbnail
view listens to.

00:16:28.160 --> 00:16:31.160
So the thumbnail view starts
getting busy fetching thumbnails.

00:16:31.160 --> 00:16:37.070
The PDF view gets busy laying out its
subviews and displaying the PDF content.

00:16:37.160 --> 00:16:39.160
And so the other thing that
the PDF view does is it reads.

00:16:39.160 --> 00:16:41.650
So that last line of code,
I can go ahead and just

00:16:41.650 --> 00:16:45.160
release that PDF document.

00:16:45.160 --> 00:16:48.110
And if at any point in my application
I need access to that document,

00:16:48.230 --> 00:16:51.090
I can just ask the
PDF view for its document.

00:16:51.180 --> 00:16:54.160
Just as there's a set document,
there's a getter as well.

00:16:54.160 --> 00:16:57.500
And I'll show you an example of that.

00:16:57.850 --> 00:17:02.540
So PDF document,
that's kind of the big base class.

00:17:02.540 --> 00:17:07.290
That's kind of the wellspring of
all the other classes in PDF Kit.

00:17:07.430 --> 00:17:09.630
So I'll spend a slide on PDF document.

00:17:09.790 --> 00:17:12.750
If you look at PDF document
dot H and look at what kinds of

00:17:12.820 --> 00:17:16.340
methods there are in that class,
they kind of fall into these categories.

00:17:16.340 --> 00:17:20.310
You can find out the number
of pages of a document and,

00:17:20.460 --> 00:17:23.040
for example,
the thumbnail view calls that method to

00:17:23.470 --> 00:17:26.540
determine how many thumbnails to lay out.

00:17:26.580 --> 00:17:29.870
You can, given that now you know
how many pages there are,

00:17:29.870 --> 00:17:31.810
you can ask for a specific page.

00:17:31.830 --> 00:17:34.530
So you can say,
give me the page at index zero,

00:17:34.640 --> 00:17:35.840
for example, to get the first page.

00:17:35.840 --> 00:17:40.540
And then you'll get back that
PDF page object that the document

00:17:40.540 --> 00:17:42.840
has created for that page.

00:17:42.840 --> 00:17:45.840
There are methods for adding, removing,
removing, and re-adding PDF documents.

00:17:45.840 --> 00:17:45.840
So PDF document,
that's kind of the big base class.

00:17:45.840 --> 00:17:45.840
That's kind of the big base class.

00:17:45.840 --> 00:17:45.840
A great session for
any Cocoa application.

00:17:45.840 --> 00:17:45.840
Learn the simple steps for adding,
removing, and annotation.

00:17:45.840 --> 00:17:45.840
A great session for
any Cocoa application.

00:17:45.840 --> 00:17:45.840
Learn the simple steps for adding,
removing, and annotation.

00:17:45.840 --> 00:17:47.980
removing,
reordering pages in the document,

00:17:47.980 --> 00:17:51.260
and obviously the PDF thumbnail
view is calling these methods.

00:17:51.280 --> 00:17:56.880
There are, um, there's, like,
metadata information about the document,

00:17:56.880 --> 00:18:00.220
so, um, modification date, um, author,
creator.

00:18:00.220 --> 00:18:03.800
You can get that kind of information
from the PDF document class as well.

00:18:03.800 --> 00:18:05.800
Um, searching.

00:18:05.800 --> 00:18:07.860
Since we're going to do
searching in our application,

00:18:07.860 --> 00:18:11.870
um, I'll be coming back to this one,
but this is where you would

00:18:11.870 --> 00:18:14.760
do the perform searching is
at the PDF document level.

00:18:15.950 --> 00:18:16.820
Um, the outline.

00:18:16.820 --> 00:18:19.320
Um, I kind of hinted at that earlier.

00:18:19.320 --> 00:18:21.750
Uh, that's where the outline root is,
and again,

00:18:21.810 --> 00:18:23.320
we'll be using this in our application.

00:18:23.320 --> 00:18:25.920
I'll show you the,
I'll show you this API specifically.

00:18:25.920 --> 00:18:28.560
And then finally, you know,
if there have been editing,

00:18:28.560 --> 00:18:32.510
if pages have been added, removed,
reordered, or if pages have been cropped

00:18:32.630 --> 00:18:35.990
or annotations added or removed,
there's methods in PDF document for

00:18:36.210 --> 00:18:40.890
saving out a new PDF file that represents
all those edits and those changes.

00:18:42.800 --> 00:24:36.800
[Transcript missing]

00:24:37.000 --> 00:24:43.960
It's called PDF Kit Viewer and
I'm going to go ahead and open up,

00:24:43.960 --> 00:24:48.670
I'll open up the PDF spec 1.6.

00:24:53.680 --> 00:25:00.360
And here's our PDF view and the
split view more or less the same way

00:25:00.360 --> 00:25:02.530
I laid it out in Interface Builder.

00:25:02.530 --> 00:25:06.700
But over here on the left side,
I kind of, to save screen real estate,

00:25:06.700 --> 00:25:10.610
I kind of nested the thumbnail
view and the NS outline view

00:25:10.620 --> 00:25:12.990
under inside a tab view.

00:25:13.000 --> 00:25:17.000
But you'll see here that
this particular PDF,

00:25:17.000 --> 00:25:20.620
it has an outline,
but the root only has a single

00:25:20.700 --> 00:25:22.560
child called PDF reference.

00:25:22.590 --> 00:25:24.410
That's the label.

00:25:24.500 --> 00:25:26.490
But if I twist down the
disclosure triangle,

00:25:26.490 --> 00:25:28.500
you'll see that it has
plenty of children.

00:25:28.500 --> 00:25:33.000
And as I'm clicking on these NS,
as I'm clicking on these

00:25:33.000 --> 00:25:36.060
outline items here,
you'll see that I'm getting the

00:25:36.060 --> 00:25:39.540
action and I'm telling the PDF view
to perform that action and then the

00:25:39.540 --> 00:25:41.500
right thing is happening over here.

00:25:41.500 --> 00:25:42.500
Here's our search view.

00:25:42.500 --> 00:25:47.430
I'll type in a word, color, say,
for example.

00:25:47.500 --> 00:25:51.410
And I've got this kind of
split view within a split view,

00:25:51.580 --> 00:25:54.500
kind of Bento application.

00:25:54.500 --> 00:25:58.490
You'll see that I,
I'm going to go ahead and

00:25:58.490 --> 00:25:58.490
do a little bit of a test.

00:25:59.060 --> 00:26:01.370
I'm able to,
from that PDF selection object,

00:26:01.370 --> 00:26:05.150
I'm able to tell them what page it's on,
what section it's under,

00:26:05.150 --> 00:26:10.320
and as the user clicks on this,
I can highlight in the PDF view

00:26:10.350 --> 00:26:16.000
where that instance is and I can
scroll to that page as well.

00:26:16.070 --> 00:26:20.240
So if you want to download the
sample code for PDF Kit Viewer

00:26:20.640 --> 00:26:24.970
and kind of comb through it and
look at how all this is wired up,

00:26:25.090 --> 00:26:25.940
feel free to.

00:26:26.060 --> 00:26:28.820
I think you'll be surprised
at how little code there is.

00:26:29.000 --> 00:26:31.950
Let's go back to my slides.

00:26:32.440 --> 00:26:36.000
So that was the first kind
of example of using PDF Kit.

00:26:36.100 --> 00:26:38.330
So now we're going to get
into some slightly more,

00:26:38.530 --> 00:26:40.760
like I said, kind of esoteric stuff.

00:26:40.920 --> 00:26:46.120
I'll show you how you would
create some new PDF content.

00:26:46.440 --> 00:26:51.250
So what I want to do for this
part is create an application

00:26:51.260 --> 00:26:52.840
that will do watermarking.

00:26:52.880 --> 00:26:56.220
I want to be able to take some
string and plaster it on every

00:26:56.280 --> 00:26:58.300
single page in the PDF document.

00:26:58.300 --> 00:27:01.450
And I want this to,
I guess I want to do it low enough

00:27:02.070 --> 00:27:06.790
level inside PDF Kit that all the
sort of higher level things like the

00:27:06.790 --> 00:27:10.840
PDF view and the thumbnail view and the
printing and the saving and all that

00:27:10.900 --> 00:27:14.290
stuff kind of picks up that overlay,
that watermark.

00:27:14.300 --> 00:27:20.910
So the way I'm going to do that is
to go down to one of the base classes

00:27:21.230 --> 00:27:24.880
in PDF Kit and subclass PDF Page.

00:27:25.440 --> 00:27:30.430
So let me show you first over on the demo
machine here what the application does,

00:27:30.560 --> 00:27:31.490
what it looks like.

00:27:31.490 --> 00:27:34.300
And then I'll explain to
you how you would do that.

00:27:34.380 --> 00:27:38.590
So this also, PDF Watermarker,
this also is an application

00:27:38.700 --> 00:27:40.670
that you can download.

00:27:40.950 --> 00:27:44.300
And this has even less code in it.

00:27:44.300 --> 00:27:46.080
So it's got a fairly simple window.

00:27:46.080 --> 00:27:48.210
It's got a string here for the watermark.

00:27:48.600 --> 00:27:52.300
And I've got a button
here for selecting a PDF.

00:27:52.420 --> 00:27:58.700
So let me find a small PDF.

00:28:00.120 --> 00:28:04.100
So we've opened up a PDF and
the PDF view has populated now

00:28:04.100 --> 00:28:05.540
and the thumbnail view as well.

00:28:05.620 --> 00:28:08.440
And you'll see that our string,
confidential,

00:28:08.510 --> 00:28:11.370
has been plastered on every single page.

00:28:11.500 --> 00:28:12.720
It's probably hard to see.

00:28:12.990 --> 00:28:14.720
I guess you can kind of make out.

00:28:14.910 --> 00:28:19.440
The thumbnails also picked
up that string as well.

00:28:19.440 --> 00:28:24.690
And if I change the string, say draft,
you'll see that the view is

00:28:24.690 --> 00:28:29.160
told to redraw and this time,
you know, the word draft is superimposed

00:28:29.300 --> 00:28:31.410
or overlaid on every single page.

00:28:31.750 --> 00:28:34.230
And if I save this PDF,

00:28:35.180 --> 00:28:37.810
I'll call it draft.

00:28:37.810 --> 00:28:41.150
I get this new PDF file and this
is calling the PDF documents

00:28:41.490 --> 00:28:43.030
routine to write out that.

00:28:43.030 --> 00:28:48.580
Let me go ahead and open Adobe Reader
and I'm going to by the way launch

00:28:48.580 --> 00:28:52.840
Adobe Reader a few times today just
I guess to show you that you know

00:28:52.920 --> 00:28:55.560
there's no smoke and mirrors here.

00:28:55.710 --> 00:29:01.430
So here's real PDF content
now and sure enough there's

00:29:01.430 --> 00:29:04.470
our watermark on every page.

00:29:04.470 --> 00:29:04.470
So

00:29:05.380 --> 00:29:08.400
I'll go back to the slides.

00:29:08.540 --> 00:29:13.800
So the way we did that
was subclassing PDF page.

00:29:13.860 --> 00:29:17.230
Because if you go back to-- if
you go down to the PDF page level

00:29:17.230 --> 00:29:19.760
and can overlay your content,
then as I say,

00:29:19.760 --> 00:29:25.660
every sort of class that sits on top of
that is going to reflect that overlay.

00:29:25.750 --> 00:29:29.040
The problem is,
and this kind of goes back to that slide

00:29:29.040 --> 00:29:34.050
where I showed the sort of hierarchy
or the nestedness of the base classes.

00:29:34.130 --> 00:29:38.070
The problem is that when I initialize
a PDF document with a PDF file,

00:29:38.100 --> 00:29:41.350
it's going to go ahead and start
creating these PDF page objects.

00:29:41.660 --> 00:29:43.820
And we're trying to subclass PDF page.

00:29:43.820 --> 00:29:48.440
So we need a way to tell PDF document,
don't create PDF page objects.

00:29:48.440 --> 00:29:52.730
Create, let's say,
PDF page watermark classes.

00:29:52.940 --> 00:29:56.940
So the bad news is,
in order to get PDF document to

00:29:57.250 --> 00:30:01.630
use our subclass of PDF page,
we've got a subclass PDF document.

00:30:01.720 --> 00:30:04.250
But the good news is,
there's really only one method

00:30:04.440 --> 00:30:08.160
that we have to override in
our PDF document subclass.

00:30:08.170 --> 00:30:10.140
And that's this method, page class.

00:30:10.170 --> 00:30:14.210
Now, this is the class that PDF document
calls when it's creating pages.

00:30:14.310 --> 00:30:19.620
Now, the default implementation of page
class is just to return PDF page class.

00:30:19.740 --> 00:30:23.630
So we override this one method
and instead return our own class,

00:30:23.800 --> 00:30:25.760
PDF page watermark class.

00:30:25.890 --> 00:30:29.660
So with this one kind of override,
now the PDF document,

00:30:29.660 --> 00:30:32.180
when we initialize it with a file,
will create several

00:30:32.300 --> 00:30:33.580
PDF page watermark classes.

00:30:33.580 --> 00:30:37.070
So what do we do?

00:30:37.220 --> 00:30:41.940
With the PDF Page Watermark class,
we override this one method,

00:30:42.040 --> 00:30:43.400
Draw With Box.

00:30:43.530 --> 00:30:46.540
But before I show you that code,
PDF Page is kind of an

00:30:46.540 --> 00:30:49.400
important base class,
so I'll give you kind of the one

00:30:49.530 --> 00:30:53.040
slide summary of the kinds of
methods that you'll see in PDF Page.

00:30:53.100 --> 00:30:57.830
Because of that sort of nested nature,
a page is owned by a document,

00:30:57.830 --> 00:31:03.100
so there's a method to find the parent
or the owning document of that page.

00:31:03.100 --> 00:31:05.930
You can get the bounds from a PDF page.

00:31:06.300 --> 00:31:11.010
Adobe's PDF spec defines all the
coordinates in a PDF in points.

00:31:11.280 --> 00:31:12.960
That's 72 points to the inch.

00:31:13.040 --> 00:31:16.070
So the width and height,
the bounds that you get back from a

00:31:16.100 --> 00:31:19.100
PDF page are going to be in points,
as are, frankly,

00:31:19.100 --> 00:31:22.100
all the geometry in PDF Kit.

00:31:22.100 --> 00:31:25.880
If the page has a rotation,
you can find that out.

00:31:26.450 --> 00:31:29.090
Generally it doesn't,
so you'll get back zero,

00:31:29.190 --> 00:31:31.100
but you can set that as well.

00:31:31.100 --> 00:31:34.520
The page creates annotations,
so there are methods on

00:31:34.520 --> 00:31:35.100
PDF Page to get those annotations.

00:31:35.210 --> 00:31:41.100
There's methods for deleting,
for adding annotations as well.

00:31:41.120 --> 00:31:46.040
The page is where you get
the text of that PDF page.

00:31:46.100 --> 00:31:49.070
So you can call a method on
the page to get the text.

00:31:49.150 --> 00:31:52.270
And in fact,
it's this method that PDF Document calls

00:31:52.350 --> 00:31:54.090
when you perform a search.

00:31:54.190 --> 00:31:56.350
It goes through each
page of the document,

00:31:56.350 --> 00:31:59.100
gets its text,
and searches through that text.

00:31:59.230 --> 00:32:04.100
And then finally,
there's Draw Method for the page.

00:32:04.100 --> 00:32:04.100
And this is important.

00:32:04.100 --> 00:32:04.100
This is how the page is created.

00:32:04.100 --> 00:32:07.760
This is how the PDF content
gets displayed in a PDF view,

00:32:07.900 --> 00:32:10.070
as each PDF page is told to draw.

00:32:10.240 --> 00:32:12.910
And this is also important
because this is the class,

00:32:12.910 --> 00:32:16.890
or rather, this is the method that we're
going to override in our subclass,

00:32:16.890 --> 00:32:18.050
the Draw Method.

00:32:18.100 --> 00:32:21.090
And here it is, PDF Page Draw With Box.

00:32:21.090 --> 00:32:24.100
So here's our override.

00:32:24.100 --> 00:32:27.840
And the first line of code
inside our Draw With Box is

00:32:27.840 --> 00:32:30.100
to call Super Draw With Box.

00:32:30.100 --> 00:32:32.660
And the reason we call Super is
because we're going to just let

00:32:32.670 --> 00:32:33.100
PDF Page go ahead and do that.

00:32:33.100 --> 00:32:36.170
So we'll let PDF Page go ahead
and draw the PDF content,

00:32:36.170 --> 00:32:38.100
the basic PDF content itself.

00:32:38.100 --> 00:32:40.990
So we'll let PDF Page do
the heavy lifting.

00:32:41.100 --> 00:32:44.080
But when this function returns,
or when this method returns,

00:32:44.080 --> 00:32:47.100
then we can kind of add any additional
content that we want to overlay.

00:32:47.100 --> 00:32:52.020
So I'm going to assume you have that
NSString that the user typed in as

00:32:52.020 --> 00:32:55.080
an instance called WatermarkString.

00:32:55.150 --> 00:32:57.960
And so I'm calling an
NSString method there,

00:32:58.050 --> 00:32:58.970
Draw and Rect.

00:32:59.150 --> 00:33:02.100
And I assume that I've already
calculated the destination rectangle.

00:33:02.100 --> 00:33:04.870
That'll be endpoints, by the way.

00:33:05.100 --> 00:33:08.850
And then an attributes dictionary,
the font, the size, the color,

00:33:08.930 --> 00:33:10.070
that sort of thing.

00:33:10.100 --> 00:33:12.080
So really a few lines of code.

00:33:12.290 --> 00:33:15.100
And that's why I say if you go
and look at the sample code,

00:33:15.100 --> 00:33:17.090
there's very little code there.

00:33:17.340 --> 00:33:20.100
But because we did it
at that PDF Page level,

00:33:20.100 --> 00:33:23.550
all the other kind of the view,
the thumbnail view, the saving,

00:33:23.550 --> 00:33:25.100
the printing,
we didn't have to touch any of that.

00:33:25.100 --> 00:33:28.100
It just, it kind of just percolates up.

00:33:28.780 --> 00:33:30.600
So...

00:33:31.170 --> 00:33:35.640
Last part, I'm going through this a lot
quicker than I thought I would.

00:33:35.650 --> 00:33:37.500
The last part has to do with annotations.

00:33:37.650 --> 00:33:39.000
Well,
we'll have some fun with this section.

00:33:39.000 --> 00:33:41.750
So here's an interesting
screen that shows you,

00:33:41.770 --> 00:33:43.990
by the way, a bunch of annotations.

00:33:43.990 --> 00:33:46.600
And, you know,
I told you earlier I couldn't fit all

00:33:46.760 --> 00:33:51.000
of the PDF Kit classes on one slide
because of all the annotation subclasses.

00:33:51.000 --> 00:33:53.980
Well,
here are those annotation subclasses.

00:33:54.000 --> 00:33:56.500
And if you look at them,
I think most of them,

00:33:56.500 --> 00:33:58.820
just the name itself
is fairly descriptive.

00:33:58.910 --> 00:34:02.000
I mean, I won't go into all of them,
but I think, you know,

00:34:02.000 --> 00:34:04.490
a line annotation is a line, a circle.

00:34:04.570 --> 00:34:06.000
We've seen one of those already.

00:34:06.000 --> 00:34:09.950
A link annotation, that's when you,
you know, those don't actually

00:34:09.950 --> 00:34:13.710
necessarily draw any content,
but when the user clicks on a link,

00:34:13.740 --> 00:34:15.780
there's some action that happens.

00:34:16.000 --> 00:34:21.000
So the PDF annotation class,
that was that last base class.

00:34:21.000 --> 00:34:24.000
Let me just give you a one slide summary
of some of the things that we've done.

00:34:24.000 --> 00:34:26.910
So, you can see here,
you can see the methods that you'll

00:34:26.910 --> 00:34:29.000
find on PDF annotations in general.

00:34:29.000 --> 00:34:32.000
You can ask the annotation for its type.

00:34:32.000 --> 00:34:36.000
So, for example, a circle annotation will
tell you its type is circle.

00:34:36.190 --> 00:34:40.990
You can get the page that
the annotation belongs to,

00:34:41.080 --> 00:34:43.990
get its kind of containing page.

00:34:44.170 --> 00:34:47.000
You can also get the
bounds of the annotation.

00:34:47.060 --> 00:34:49.000
That's going to be in points, of course.

00:34:49.000 --> 00:34:52.000
And not only that,
but combined with its parent, the page,

00:34:52.030 --> 00:34:54.910
you can kind of tell, based on the type,
based on the parent's bounds

00:34:54.920 --> 00:34:58.000
and the annotation's bounds,
you can determine where on that page

00:34:58.000 --> 00:35:00.720
that it's going to be displayed.

00:35:00.800 --> 00:39:42.000
[Transcript missing]

00:39:42.400 --> 00:39:50.290
So rather than talk
more about annotations,

00:39:50.290 --> 00:39:50.290
I'll show you them on demo machine.

00:39:50.490 --> 00:39:54.030
Annotations are probably one of those
things that lend themselves better to

00:39:54.640 --> 00:39:56.900
kind of showing than talking about.

00:39:57.060 --> 00:40:01.720
So the application is called
PDF Annotation Editor and once again you

00:40:01.860 --> 00:40:05.140
can download the sample code for this.

00:40:05.670 --> 00:40:12.350
Here's that PDF that I had on my slide
that has all those annotations on it.

00:40:12.410 --> 00:40:15.400
I've just opened that up in a PDF view.

00:40:15.400 --> 00:40:18.790
If I select the text, by the way,
you can see that very little of the

00:40:18.870 --> 00:40:23.370
content of this PDF is actually,
you know, part of the PDF page itself.

00:40:23.440 --> 00:40:26.630
Most of it is our annotations.

00:40:26.630 --> 00:40:31.050
And for each annotation,
I've got this kind of edit and

00:40:31.170 --> 00:40:32.400
test mode button down here.

00:40:32.400 --> 00:40:35.190
And suffice it to say,
I mean I didn't really talk

00:40:35.350 --> 00:40:39.390
about this in the session,
but you can look at the sample code.

00:40:39.400 --> 00:40:42.400
What I'm doing is I'm subclassing
PDF view in this case.

00:40:42.400 --> 00:40:45.660
And when we're in edit mode,
I draw little gray boxes

00:40:45.660 --> 00:40:48.400
around all the annotations and
I intercept all the mouse data.

00:40:48.400 --> 00:40:53.240
So that if I click on an annotation
like this circle over here,

00:40:53.390 --> 00:40:59.400
I can intercept that mouse down and now
I note which annotation is selected.

00:40:59.410 --> 00:41:03.400
And this is kind of the interesting
part of the application is over here

00:41:03.520 --> 00:41:06.340
I've got this annotation inspector,
I guess.

00:41:06.400 --> 00:41:09.380
And depending on what kind
of annotation you click on,

00:41:09.380 --> 00:41:12.400
I populate this palette
with some of the attributes,

00:41:12.400 --> 00:41:14.350
some of the parameters
for that annotation.

00:41:14.410 --> 00:41:17.390
So this is a circle annotation.

00:41:17.560 --> 00:41:19.050
It's got a border color.

00:41:19.180 --> 00:41:21.040
It's got an interior color.

00:41:21.210 --> 00:41:26.400
It's got flags set to both display and
also be printed if the user prints.

00:41:26.400 --> 00:41:29.380
It doesn't have an action
associated with it.

00:41:29.550 --> 00:41:34.400
It does have a border with four points
thickness and it's set to be dashed.

00:41:34.530 --> 00:41:36.810
This is a square annotation.

00:41:36.810 --> 00:41:40.300
It has a border color
but no interior color.

00:41:40.510 --> 00:41:44.280
So I'm just calling in this application,
I'm just calling these getters and

00:41:44.410 --> 00:41:46.310
setters to get these parameters.

00:41:46.400 --> 00:41:52.950
And I'm populating this
inspector over here with that.

00:41:53.050 --> 00:41:58.500
Let me open up a PDF that doesn't
have any annotations on it though.

00:41:58.560 --> 00:42:00.240
It's that small one again.

00:42:00.400 --> 00:42:02.900
And I'll show you the other kind
of fun thing about this app.

00:42:02.930 --> 00:42:07.360
I can go into the annotation menu
and create any of those annotations.

00:42:07.520 --> 00:42:10.540
So let's go ahead and
create a circle annotation.

00:42:10.540 --> 00:42:15.080
So if I go into the
inspector I can change,

00:42:15.080 --> 00:42:18.540
it's got some kind of default values,
but I can go and enter in like

00:42:18.540 --> 00:42:24.750
here's the line width for this
annotation and I can bring up the

00:42:24.750 --> 00:42:29.790
color picker and I'll make it red.

00:42:29.790 --> 00:42:29.790
Why not?

00:42:29.940 --> 00:42:36.140
Set the red, I can make it dashed,
I can give it an interior color or not.

00:42:36.140 --> 00:42:37.400
So there's our circle annotation.

00:42:37.400 --> 00:42:40.340
It was all created programmatically
just calling these classes

00:42:40.340 --> 00:42:41.900
or these methods in PDF Kit.

00:42:41.900 --> 00:42:45.900
I can add, let me add a stamp annotation.

00:42:45.900 --> 00:42:50.510
This is that one annotation, by the way,
that I said doesn't really have any

00:42:50.510 --> 00:42:52.900
parameters that describe how to draw it.

00:42:52.900 --> 00:42:57.880
So a stamp annotation really pretty
much requires an appearance stream.

00:42:58.000 --> 00:43:00.990
If you create a stamp annotation
with no appearance stream,

00:43:01.000 --> 00:43:02.900
even Adobe Reader doesn't
really know what to do with it.

00:43:02.900 --> 00:43:04.860
It'll just kind of give you a box.

00:43:04.910 --> 00:43:07.890
So what I've done,
and you can see how I've done this if

00:43:07.890 --> 00:43:11.650
you take a look at the sample code,
is I've subclassed the

00:43:11.650 --> 00:43:14.900
stamp annotation in PDF Kit.

00:43:14.900 --> 00:43:18.720
And I overrode the draw method and I'm
just drawing the string Apple here.

00:43:19.300 --> 00:43:20.900
Actually, I think it's a PDF.

00:43:21.050 --> 00:43:22.900
So I'm scaling it to fit.

00:43:22.900 --> 00:43:25.870
I'm going to hit the
bounds of the annotation.

00:43:25.960 --> 00:43:29.350
And if I save this,
let me go ahead and place

00:43:29.420 --> 00:43:32.900
it here and hit save.

00:43:32.900 --> 00:43:37.860
If I save this PDF,
and I'll call it annotated.

00:43:39.630 --> 00:43:45.130
And now go into
Adobe Reader and open it up.

00:43:46.970 --> 00:43:49.960
Again,
this is kind of my showing you that

00:43:50.290 --> 00:43:55.460
there's my Apple stamp annotation
being rendered from its appearance

00:43:55.490 --> 00:43:59.800
stream and the circle as well as
even though it does have parameters.

00:43:59.970 --> 00:44:03.080
And in fact,
let me just show you that one kind of

00:44:03.090 --> 00:44:05.800
conundrum since I do have time here.

00:44:05.800 --> 00:44:08.800
Let me go ahead and open up
that annotated PDF again.

00:44:08.800 --> 00:44:12.430
One of the problems is since
that PDF was written out,

00:44:12.450 --> 00:44:14.830
now there's an appearance stream.

00:44:14.980 --> 00:44:17.940
And since the appearance
stream wins when there's both

00:44:17.940 --> 00:44:21.270
parameters and appearance stream,
I can go here and uncheck the dashed

00:44:21.270 --> 00:44:26.320
on the circle for example or change
its thickness to one point and you

00:44:26.320 --> 00:44:30.800
don't see any change because we're
still rendering the appearance stream.

00:44:30.800 --> 00:44:32.980
This is where you get kind of into
a schism where like I said the

00:44:32.980 --> 00:44:35.800
parameters and the appearance stream
don't necessarily have to match.

00:44:35.800 --> 00:44:40.210
In fact, if I do, if I resize this,
you'll see that what's really happening

00:44:40.330 --> 00:44:43.660
is just the appearance stream itself
is just being scaled to its bounds.

00:44:44.240 --> 00:44:49.800
There's a method in PDFKit for basically
stripping off the appearance stream

00:44:49.800 --> 00:44:52.200
and that's the kind of thing in this
application I should probably add a

00:44:52.200 --> 00:44:55.910
button or something like that so that you
could click a button and strip off that

00:44:55.910 --> 00:45:01.610
appearance stream and then you would see
it rendered with its parameters instead.

00:45:02.500 --> 00:45:08.350
So let me go back to the slides just for
one last little tour through annotations.

00:45:08.700 --> 00:45:17.160
I was told by the way that this WWDC is
kind of going to be geared towards,

00:45:17.160 --> 00:45:20.250
at least for the Mac OS X content,
kind of geared slightly

00:45:20.250 --> 00:45:23.100
toward power user,
power developer.

00:45:23.100 --> 00:45:27.440
So I thought I'd spend a couple of
slides on widget annotations because

00:45:27.440 --> 00:45:34.100
these are by far the most kind of loaded
annotations that the PDF spec defines.

00:45:34.100 --> 00:45:37.790
So a widget annotation is
what most people think of

00:45:37.790 --> 00:45:40.100
when they talk about forms.

00:45:40.100 --> 00:45:44.940
These are the text fields, check boxes,
radio buttons, the kinds of annotations

00:45:44.940 --> 00:45:48.100
that you see in a tax form,
for example.

00:45:48.350 --> 00:45:51.100
The type is actually widget.

00:45:51.280 --> 00:45:54.320
And why these kind of
complicate things is,

00:45:54.320 --> 00:45:57.100
or why they're kind of the
most loaded annotation is,

00:45:57.100 --> 00:46:00.250
that they kind of introduce
a kind of like database-like

00:46:00.250 --> 00:46:02.100
quality to the PDF document.

00:46:02.100 --> 00:46:06.100
So if you have a text field,
and the user types in a name,

00:46:06.100 --> 00:46:08.100
now there's kind of a name
associated with that text field.

00:46:08.220 --> 00:46:12.100
So it kind of gets kind of
database-like real quick.

00:46:12.100 --> 00:46:18.100
The annotations that PDFKit exposes for
those widget annotations are these three:

00:46:18.100 --> 00:46:21.090
the button widget, choice widget,
and text widget.

00:46:21.100 --> 00:46:25.100
And one thing that all three
of these have in common is,

00:46:25.100 --> 00:46:28.100
and this kind of alludes to that
sort of database-like nature,

00:46:28.100 --> 00:46:31.100
is they all have a field
name associated with them.

00:46:31.260 --> 00:46:35.100
So, you know, text widget, button widget,
there's going to be a field name.

00:46:35.100 --> 00:46:39.090
And that name, even though the user never
sees what this field name is,

00:46:39.100 --> 00:46:46.100
that essentially is the key into,
or the field of that internal database.

00:46:46.100 --> 00:46:52.620
So in global to the PDF document,
there's going to be a field for whatever

00:46:52.710 --> 00:46:54.100
that field name is in that widget.

00:46:54.100 --> 00:46:56.320
And this is also a bit
of a schism here as well,

00:46:56.320 --> 00:46:59.100
because, you know,
while I kind of was implying that,

00:46:59.100 --> 00:47:02.070
you know, the document owns the pages,
the pages own the annotations,

00:47:02.070 --> 00:47:04.100
that there's this kind of nestedness.

00:47:04.100 --> 00:47:08.100
For widget annotations,
they kind of break outside their page,

00:47:08.100 --> 00:47:12.820
and the field name, at least,
is document-wide.

00:47:13.180 --> 00:47:16.100
And I'll show you the importance
of that here on the next slide.

00:47:16.100 --> 00:47:17.100
So here's an example.

00:47:17.100 --> 00:47:18.050
Here's a text widget.

00:47:18.100 --> 00:47:22.100
And I've got a little
screenshot there of a tax form,

00:47:22.100 --> 00:47:24.100
and I've highlighted one of the fields.

00:47:24.100 --> 00:47:30.280
And what you don't see is that there
is a widget annotation that's laid

00:47:30.720 --> 00:47:35.100
basically just inside that box.

00:47:35.100 --> 00:47:38.950
I've typed in the string public,
for example.

00:47:39.100 --> 00:47:43.210
Now, internal in this document,
I don't know what the field name is,

00:47:43.420 --> 00:47:44.100
unless I looked.

00:47:44.100 --> 00:47:47.090
I mean, the user actually doesn't see
what the actual field name is.

00:47:47.100 --> 00:47:49.100
But I'm going to assume
it's something obvious,

00:47:49.100 --> 00:47:50.830
like last name.

00:47:51.190 --> 00:47:56.100
So when I typed in the word public,
then internal to the PDF document,

00:47:56.140 --> 00:47:58.100
it kind of goes to the
field named public.

00:47:58.200 --> 00:48:03.100
So it's a field named last name
and assigns it the value public.

00:48:03.120 --> 00:48:05.090
And now,
anywhere else in that PDF document,

00:48:05.090 --> 00:48:08.200
if there's a text widget,
it doesn't matter what page it's on,

00:48:08.200 --> 00:48:10.100
you can have multiple on the same pages.

00:48:10.100 --> 00:48:13.100
If you have a text widget
that has the same field name,

00:48:13.100 --> 00:48:15.100
it's going to be updated as well.

00:48:15.150 --> 00:48:18.800
So you change it in one place,
it's going to be changed everywhere.

00:48:19.900 --> 00:50:44.500
[Transcript missing]

00:50:44.690 --> 00:50:47.360
There are on and off appearance streams.

00:50:47.490 --> 00:50:51.600
So depending on whether a button
is in its on state or off state,

00:50:51.670 --> 00:50:54.420
its on or off appearance
stream is rendered.

00:50:54.490 --> 00:50:59.280
So the widgets are told to redraw
and based on their current state,

00:50:59.280 --> 00:51:02.110
the correct appearance
stream is rendered.

00:51:02.350 --> 00:51:05.910
So again, let me just show you that.

00:51:06.450 --> 00:51:12.940
I'm going to use the same application,
PDF Annotation Editor.

00:51:13.020 --> 00:51:17.980
Except this time I prepared a PDF.

00:51:18.160 --> 00:51:21.290
I don't know what application
you might be creating here,

00:51:22.100 --> 00:51:24.970
but here's a PDF that's got
some nice rectangles in it.

00:51:25.030 --> 00:51:31.080
Here's name and a nice little box
that's just begging for a text widget.

00:51:31.100 --> 00:51:35.470
So I'll go into the annotation
menu and I'll go down to the text

00:51:35.560 --> 00:51:40.290
widget and we just created a text
widget here and I'll try to place

00:51:40.290 --> 00:51:42.100
it more or less inside this box.

00:51:42.100 --> 00:51:48.100
And over here on the inspector now,
here's the text widget's field name.

00:51:48.100 --> 00:51:49.100
So I'll give it something meaningful.

00:51:49.100 --> 00:51:51.070
I'll call it name for example.

00:51:51.120 --> 00:51:54.410
Here's some other attributes
we can set for that widget.

00:51:54.410 --> 00:51:57.100
I'll just leave them at
their default values.

00:51:57.100 --> 00:52:01.120
But in order to show you kind of
the way two widget annotations

00:52:01.120 --> 00:52:04.770
can share the same field name,
I'll go ahead and create

00:52:04.770 --> 00:52:06.100
another text widget.

00:52:06.100 --> 00:52:08.410
And I'll just,
I've only got a one page PDF so

00:52:08.410 --> 00:52:10.100
I'll just leave it on this page.

00:52:10.100 --> 00:52:11.100
And I'll give it the same name.

00:52:11.100 --> 00:52:12.100
I'll go ahead and create
another text widget.

00:52:12.100 --> 00:52:13.900
field name.

00:52:14.630 --> 00:52:18.350
This one, just to be different though,
I'll change its alignment.

00:52:18.760 --> 00:52:23.190
So if I go back to my test mode here,
now all the mouse events are

00:52:23.190 --> 00:52:26.180
being passed on to PDF view,
you'll see already that the

00:52:26.310 --> 00:52:28.030
cursor has turned into an I-beam.

00:52:28.030 --> 00:52:31.340
So PDF view recognized that
there's a text widget and has

00:52:31.540 --> 00:52:33.460
changed the cursor to an I-beam.

00:52:33.460 --> 00:52:36.520
If I click,
an NS text field is created in the

00:52:36.650 --> 00:52:39.740
same place where that text widget was.

00:52:39.740 --> 00:52:42.540
And I can type a value here.

00:52:42.540 --> 00:52:43.440
I'll type Conan.

00:52:45.280 --> 00:52:49.060
As I'm typing this value,
you'll see that internally again the

00:52:49.060 --> 00:52:53.700
database value for the field name
is being set to the string I typed,

00:52:53.830 --> 00:52:57.610
in this case Conan, the Barbarian,
and then elsewhere in the document where

00:52:58.050 --> 00:53:01.590
there's the same field name shared,
it's updated there as well.

00:53:01.600 --> 00:53:07.860
And I can come here and make changes
and it just is reflected in both places.

00:53:08.000 --> 00:53:10.750
So I'll show you an
example of button widget.

00:53:11.010 --> 00:53:14.590
Here's gender, male, female,
might be nice to have

00:53:14.590 --> 00:53:16.190
a button widget there.

00:53:16.290 --> 00:53:20.790
So I need to go back
to my edit mode here.

00:53:20.930 --> 00:53:23.000
Let me make this,
turn off the background,

00:53:23.000 --> 00:53:26.150
make it a radio button and I'll,

00:53:26.500 --> 00:53:28.840
I'm going to try to
size it as best I can.

00:53:28.920 --> 00:53:30.700
So what do we want for a field name?

00:53:30.730 --> 00:53:32.390
Well,
we're going to have two buttons and we

00:53:32.390 --> 00:53:34.100
want them to share the same field name.

00:53:34.100 --> 00:53:35.360
We want to link these buttons.

00:53:35.480 --> 00:53:38.840
So I'll give it the name gender.

00:53:38.840 --> 00:53:43.500
But what I'm going to set for its
on state value is male in this case.

00:53:43.740 --> 00:53:49.710
And then let me try to create another
button widget and I'll try to make it

00:53:49.710 --> 00:53:54.210
more or less look like the other one and
I'll try to position it as best I can.

00:53:55.370 --> 00:53:57.350
Something like that.

00:53:57.350 --> 00:53:58.760
That's close.

00:53:58.880 --> 00:54:05.090
So this one,
we also want the same field name, gender,

00:54:05.090 --> 00:54:10.140
but obviously, gender,
but obviously we want a

00:54:10.140 --> 00:54:12.650
different on state value,
so I'll set this one to female.

00:54:12.650 --> 00:54:16.610
So now when I go to test this,
I'm going to go to the

00:54:17.050 --> 00:54:22.670
I can click in the male and we've
just set the field gender to the

00:54:22.670 --> 00:54:28.010
string male and female doesn't match
so it is not redrawn with its on

00:54:28.010 --> 00:54:34.490
appearance until I click on it and
now male is redrawn and doesn't match

00:54:35.110 --> 00:54:37.790
so it's drawn with its off appearance
and then here's my kind of last

00:54:37.940 --> 00:54:40.320
The proof is in Adobe.

00:54:40.400 --> 00:54:45.000
I'll call it widget.

00:54:46.220 --> 00:54:53.620
Save that PDF out, go into Adobe Reader,
open up widget,

00:54:53.620 --> 00:54:56.590
and here's our text field.

00:54:59.700 --> 00:55:01.700
"I'm going to try to type this correctly.

00:55:01.700 --> 00:55:04.540
And you see that it's
reflected in both places.

00:55:04.540 --> 00:55:06.700
The buttons work as you would expect.

00:55:06.700 --> 00:55:09.040
So there you go."

00:55:14.040 --> 00:55:17.000
So that's it.

00:55:17.000 --> 00:55:21.600
Alan Schaffer is the man to contact if
you want to email someone about anything,

00:55:21.610 --> 00:55:23.000
any questions.

00:55:23.000 --> 00:55:25.000
There's a lot of documentation online.

00:55:25.000 --> 00:55:28.020
Like I said, you can look in the headers,
but if you want more of

00:55:28.020 --> 00:55:31.300
an overview of PDF Kit,
there are documents you can download.

00:55:31.300 --> 00:55:32.680
Obviously, they're PDFs.

00:55:33.580 --> 00:55:34.900
There's a bunch of sample code.

00:55:34.900 --> 00:55:36.880
I showed you three today
that you can download,

00:55:36.880 --> 00:55:40.810
but there's other sample code I've done
for previous WWCs you can download that

00:55:41.140 --> 00:55:43.150
cover different aspects of PDF Kit.

00:55:43.160 --> 00:55:46.250
And I think we've got a
lab today at 2 o'clock,

00:55:46.390 --> 00:55:51.410
so if you have any questions or want to
come down and see more of this stuff,

00:55:51.530 --> 00:55:55.920
I'll be here from about 2 o'clock
until the end of the show today.