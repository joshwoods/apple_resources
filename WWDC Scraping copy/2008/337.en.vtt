WEBVTT

00:00:14.390 --> 00:00:16.140
Good afternoon.

00:00:16.220 --> 00:00:18.140
Yeah, yeah, whoo!

00:00:18.140 --> 00:00:23.730
Welcome to Understanding iPhone
View Controllers.

00:00:24.190 --> 00:00:26.340
My name is Evan Doll,
and I'm going to be joined shortly on

00:00:26.340 --> 00:00:29.140
stage for some demos by Alex Aybes.

00:00:29.280 --> 00:00:32.140
And we're both members of the
iPhone software engineering team.

00:00:32.140 --> 00:00:36.300
Many of you in the audience have decided
to take the plunge and start developing

00:00:36.380 --> 00:00:40.140
an application for the iPhone that you're
eventually going to ship to end users.

00:00:40.170 --> 00:00:42.130
And even if you haven't,
you're probably thinking about it.

00:00:42.140 --> 00:00:44.140
I mean, that's why you're here, right?

00:00:44.140 --> 00:00:48.010
So your first priority, I'm guessing,
is to create a great iPhone

00:00:48.010 --> 00:00:52.800
application with a native look and
feel and a fantastic user experience.

00:00:52.980 --> 00:00:56.980
In addition, you've got a limited amount
of time and resources.

00:00:57.090 --> 00:00:59.950
So you want to spend time writing
the code that you care about

00:00:59.990 --> 00:01:02.980
that helps to differentiate
your app from everyone else's.

00:01:02.980 --> 00:01:04.980
So if you can avoid
reinventing the wheel,

00:01:04.980 --> 00:01:05.980
that's a big win.

00:01:05.980 --> 00:01:08.980
On top of that,
it's never too early to start thinking

00:01:08.980 --> 00:01:13.980
about version 2.0 and adding features and
extending your application in the future.

00:01:13.980 --> 00:01:16.980
So if you can set yourself up for
that with work that you can do now,

00:01:16.980 --> 00:01:19.980
that's also a very big win.

00:01:19.980 --> 00:01:21.330
So...

00:01:22.960 --> 00:01:24.560
What I'm going to cover today,
first of all,

00:01:24.560 --> 00:01:28.060
is we're going to talk about
designing an iPhone application.

00:01:28.130 --> 00:01:30.530
And we're going to talk about some
ways that you can organize and

00:01:30.630 --> 00:01:35.130
present content on the iPhone,
and specifically what the motivation is

00:01:35.200 --> 00:01:38.000
for using view controllers in your app.

00:01:38.050 --> 00:01:39.660
And from there,
we're going to dive into building

00:01:39.840 --> 00:01:41.740
a real live iPhone application.

00:01:41.780 --> 00:01:44.200
And again,
we're going to focus on using view

00:01:44.270 --> 00:01:46.250
controllers to your advantage.

00:01:46.330 --> 00:01:50.430
So let's get right into it and
start talking about designing

00:01:50.620 --> 00:01:52.720
an iPhone application.

00:01:52.840 --> 00:01:54.920
Many of you in the audience
may have developed for other

00:01:54.920 --> 00:01:57.680
mobile platforms in the past,
and you're familiar with how

00:01:57.680 --> 00:02:00.820
the constraints of a small
screen can shape how you choose

00:02:00.970 --> 00:02:03.140
to design your application.

00:02:03.170 --> 00:02:04.770
And others of you may
come from a desktop,

00:02:04.900 --> 00:02:08.190
perhaps a Mac OS X, Cocoa background,
and you've got a pretty good

00:02:08.190 --> 00:02:12.080
handle on application development,
and you want to know how your design

00:02:12.080 --> 00:02:14.510
skills translate for the iPhone.

00:02:14.830 --> 00:02:16.700
So whichever perspective
you're coming from,

00:02:16.710 --> 00:02:20.410
I think it's helpful to look at
an application that exists on

00:02:20.600 --> 00:02:24.780
both the Mac platform and on the
iPhone and sort of see what some

00:02:24.870 --> 00:02:26.900
similarities and differences are.

00:02:26.950 --> 00:02:29.500
So the application that we're
going to look at is Mail,

00:02:29.500 --> 00:02:33.060
an application that we all know and
love and use probably every day.

00:02:33.130 --> 00:02:39.700
So Mail on Mac OS X presents a lot of
information to the user all at once.

00:02:39.710 --> 00:02:43.100
We've got lists of mailboxes,
lists of messages,

00:02:43.120 --> 00:02:46.580
maybe a message detail,
and a message composition all

00:02:46.730 --> 00:02:48.700
on the screen at the same time.

00:02:48.700 --> 00:02:52.600
And these different types of
content are divided by size.

00:02:52.600 --> 00:02:54.820
So we've got a lot of
different types of content.

00:02:54.900 --> 00:02:56.900
We've got a lot of
different types of content.

00:02:56.900 --> 00:02:58.900
We've got a lot of
different types of content.

00:03:00.070 --> 00:03:04.710
Meanwhile, in the iPhone version of Mail,
it has the same responsibilities

00:03:04.710 --> 00:03:08.200
and goals as an application,
and it shares a lot of DNA,

00:03:08.280 --> 00:03:12.220
but really it's a much simpler,
more streamlined application.

00:03:12.320 --> 00:03:16.370
So let's look in a little bit more depth
at what some of the design motivations

00:03:16.370 --> 00:03:18.620
have been for Mail on the iPhone.

00:03:18.880 --> 00:03:24.170
One big point is that we try to focus our
user on the data that they're viewing.

00:03:24.300 --> 00:03:26.790
If you think about applications
like Safari and Maps,

00:03:26.940 --> 00:03:31.000
we try to fill the screen with the web
page or the map that's being viewed.

00:03:31.230 --> 00:03:34.120
We avoid unnecessary
adornments or controls.

00:03:34.470 --> 00:03:36.530
Even in Safari,
we scroll the location bar,

00:03:36.660 --> 00:03:39.810
which is a pretty essential part of UI,
out of the way when

00:03:39.810 --> 00:03:41.520
you're viewing a web page.

00:03:41.690 --> 00:03:44.800
In Mail, since we have so many
different types of content,

00:03:44.900 --> 00:03:48.700
we accomplish this by showing
one type of content at a time.

00:03:48.790 --> 00:03:52.700
So if you've got a hierarchy of data,
it's really effective to just show

00:03:52.700 --> 00:03:55.150
one type of content on the screen.

00:03:55.460 --> 00:03:59.400
And sort of tying these concepts
together is a phrase that we like to

00:03:59.400 --> 00:04:02.730
use a lot internally when we're talking
about the design of an iPhone app.

00:04:03.120 --> 00:04:05.630
And that's the idea of a
screen full of content.

00:04:05.740 --> 00:04:07.300
And we're going to talk about
that a little bit more later,

00:04:07.360 --> 00:04:10.910
but I wanted to get the phrase in your
head so you start thinking about it.

00:04:11.020 --> 00:04:14.620
So what are some different ways that
you can connect screenfuls of content

00:04:15.050 --> 00:04:17.440
when you're designing an application?

00:04:17.500 --> 00:04:21.930
There are two very common patterns in
iPhone applications for doing this.

00:04:22.020 --> 00:04:24.760
The first one is to use a navigation bar.

00:04:24.850 --> 00:04:28.550
The navigation bar appears
always at the top of the screen.

00:04:28.840 --> 00:04:31.860
A second very common pattern
is to use the tab bar,

00:04:31.860 --> 00:04:33.720
which appears at the
bottom of the screen.

00:04:34.010 --> 00:04:37.890
So let's go into a little bit more depth
on each of these topics and see how

00:04:37.980 --> 00:04:40.830
they're used in an iPhone application.

00:04:41.710 --> 00:04:44.810
In an application with a navigation bar,
you're generally presenting a

00:04:44.810 --> 00:04:49.800
hierarchy of content with parent-child
or master-detail relationships.

00:04:49.900 --> 00:04:53.890
And as the user performs actions,
we navigate into that hierarchy with

00:04:53.890 --> 00:04:58.360
the current context always reflected
in the title of the navigation bar.

00:04:58.460 --> 00:05:01.430
And we also give the user some context
about where they've been and what's

00:05:01.520 --> 00:05:05.140
going to happen when they press the
back button by putting a title in the

00:05:05.140 --> 00:05:07.510
back button of the navigation bar.

00:05:08.330 --> 00:05:10.900
In a TabBar app,
there are several self-contained

00:05:10.900 --> 00:05:15.440
modes which live in parallel
at the top level of the app.

00:05:15.500 --> 00:05:17.940
And the user is able to toggle
between these modes by pressing

00:05:17.940 --> 00:05:21.350
on the TabBar buttons down
at the bottom of the screen.

00:05:21.800 --> 00:07:03.700
[Transcript missing]

00:07:04.190 --> 00:07:08.110
So with this design concept in mind,
let's jump in and start

00:07:08.110 --> 00:07:10.660
building an iPhone application.

00:07:10.660 --> 00:07:13.360
And the application that we're
going to build is a very popular

00:07:13.570 --> 00:07:17.300
one here at Apple when we're trying
to show off some new technologies.

00:07:17.390 --> 00:07:19.260
It's going to be a recipes application.

00:07:19.370 --> 00:07:22.140
Apologies if you're already developing
a recipes app for the iPhone.

00:07:22.140 --> 00:07:25.880
Maybe you can take some
inspiration or not.

00:07:25.880 --> 00:07:28.860
Our recipes app is going to have
three screenfuls of content.

00:07:28.940 --> 00:07:31.710
And the first one is
going to be a recipe list.

00:07:31.710 --> 00:07:35.420
In this case, we're starting out with a
single recipe in the list.

00:07:35.490 --> 00:07:39.780
We're actually going to extend this
app later in the sessions here at WWDC.

00:07:39.780 --> 00:07:45.320
But for right now,
it just has chocolate cake, which is OK.

00:07:45.320 --> 00:07:48.890
We're then going to navigate
into a recipe detail view that

00:07:48.890 --> 00:07:51.700
has a list of ingredients,
some instructions,

00:07:51.810 --> 00:07:55.260
and a button which allows the user
to go into a third screen which shows

00:07:55.260 --> 00:07:56.880
a photo of the finished product.

00:07:56.880 --> 00:08:00.280
So we've got three
screenfuls of content here.

00:08:00.280 --> 00:08:03.850
And the way we're going to build
this under the hood is to have

00:08:04.070 --> 00:08:08.160
three controllers in our application
to manage those three screenfuls.

00:08:08.390 --> 00:08:10.830
So we'll have a list controller,
a detail controller,

00:08:10.860 --> 00:08:12.080
and a photo controller.

00:08:12.080 --> 00:08:16.040
And this might seem kind
of innocuous or obvious,

00:08:16.040 --> 00:08:20.330
but it actually represents a lot of
trial and error and experimentation

00:08:20.330 --> 00:08:22.380
in application development.

00:08:22.380 --> 00:08:24.770
On the iPhone application team,
we tried writing apps in

00:08:24.840 --> 00:08:25.960
a lot of different ways.

00:08:25.960 --> 00:08:28.180
And we found that the most effective
and extendable way to write an app

00:08:28.180 --> 00:08:29.340
is to think about the application.

00:08:29.340 --> 00:08:29.340
And we found that the most effective
and extendable way to write an app is to

00:08:29.340 --> 00:08:29.340
think about the application development.

00:08:29.340 --> 00:08:29.340
And we found that the most effective
and extendable way to write an app is to

00:08:29.340 --> 00:08:29.340
think about the application development.

00:08:29.340 --> 00:08:29.340
And we found that the most effective
and extendable way to write an app is to

00:08:29.340 --> 00:08:29.340
think about the application development.

00:08:29.340 --> 00:08:33.000
is to think of it in terms of these
self-contained controllers that you

00:08:33.000 --> 00:08:34.730
can extend and work on individually.

00:08:34.740 --> 00:08:39.680
It makes it a lot easier to find and
fix bugs as well as add new features.

00:08:39.800 --> 00:08:43.680
So we wanted to make it really
easy for you to use this type

00:08:43.680 --> 00:08:45.920
of pattern in your iPhone app.

00:08:45.920 --> 00:08:49.000
So we crystallized some of the
aspects of this into a set of

00:08:49.160 --> 00:08:52.450
classes in the UIKit framework,
and the first one that we're going

00:08:52.450 --> 00:08:57.180
to talk about is your starting point,
and it's called the UIViewController.

00:08:57.370 --> 00:09:00.570
UI View Controller is the
basic building block for your

00:09:00.650 --> 00:09:02.800
application at the controller level.

00:09:02.930 --> 00:09:06.290
And it's responsible for managing
a screenful of content and

00:09:06.290 --> 00:09:08.300
everything about that screenful.

00:09:08.480 --> 00:09:11.260
And generally,
the way it'll work in your application

00:09:11.260 --> 00:09:15.400
is that you'll create a subclass of
UI View Controller and fill in your

00:09:15.400 --> 00:09:19.900
application logic and behavior and
anything specific to that screenful.

00:09:20.050 --> 00:09:24.310
And it'll wrap up the views, data,
and the logic all in one

00:09:24.310 --> 00:09:26.350
self-contained piece.

00:09:26.640 --> 00:09:30.040
So the first obvious responsibility
of a view controller is that

00:09:30.040 --> 00:09:32.400
it needs to manage a view,
right?

00:09:32.550 --> 00:09:36.580
So how do you hook up a
view controller with a view?

00:09:36.620 --> 00:09:38.200
There are two ways to do this.

00:09:38.410 --> 00:09:42.240
And the first one that we're going to
talk about is to use Interface Builder.

00:09:42.340 --> 00:09:47.060
Interface Builder is our visual,
you know, view layout and design tool for

00:09:47.120 --> 00:09:49.600
Cocoa and iPhone applications.

00:09:49.680 --> 00:09:53.380
And the way view controllers fit
with Interface Builder is that

00:09:53.380 --> 00:09:57.600
you'll create a new Interface Builder
document and you'll lay out your view.

00:09:57.600 --> 00:09:59.980
It may be a single view,
it may be a really complex

00:10:00.200 --> 00:10:03.300
hierarchy of views,
and you'll set up the properties and the

00:10:03.300 --> 00:10:06.600
connections between those views in IB.

00:10:06.790 --> 00:10:10.130
And once you've done this,
you'll then take your view controller

00:10:10.130 --> 00:10:12.600
subclass and set it as the file's owner.

00:10:12.600 --> 00:10:15.580
You can do this via the pop-up in
the Interface Builder inspector.

00:10:15.600 --> 00:10:18.750
And this is basically saying
that your view controller is

00:10:18.810 --> 00:10:19.600
responsible for managing your view.

00:10:19.600 --> 00:10:21.850
You're managing the entire
contents of the nib,

00:10:21.850 --> 00:10:23.600
the Interface Builder document.

00:10:23.600 --> 00:10:24.600
That's what the file's owner is.

00:10:24.600 --> 00:10:29.600
It's sort of a special object which
is responsible for the whole nib.

00:10:29.600 --> 00:10:32.220
And once you've done this,
you can hook up the view

00:10:32.530 --> 00:10:34.600
controller to its top-level view.

00:10:34.600 --> 00:10:37.590
And you do this by setting
the view outlet from the

00:10:37.590 --> 00:10:39.590
view controller to the view.

00:10:39.600 --> 00:10:42.030
And at this point,
your view controller and

00:10:42.050 --> 00:10:43.600
the nib are ready to roll.

00:10:43.600 --> 00:10:47.230
You can instantiate a view controller
by calling initWithNibName and bundle

00:10:47.650 --> 00:10:49.600
and passing the name of the nib.

00:10:49.600 --> 00:10:52.590
And at this point, you can use the view
controller in your app.

00:10:52.680 --> 00:10:53.550
Somebody can ask it for its view.

00:10:53.610 --> 00:10:56.300
And that view will be loaded lazily.

00:10:56.640 --> 00:11:00.540
So the view and the nib don't get
loaded when you call initWithNibName.

00:11:00.600 --> 00:11:03.180
It gets loaded on demand,
which is a big advantage for your

00:11:03.200 --> 00:11:07.600
application's launch time and
other aspects of the performance.

00:11:08.260 --> 00:11:13.880
The second way to get a view for a view
controller to manage is to do it in code.

00:11:14.110 --> 00:11:17.640
So to do this,
in your subclass of UIViewController,

00:11:17.640 --> 00:11:21.320
you're going to override a
special method called loadView.

00:11:21.340 --> 00:11:25.120
And this method gets called as needed,
sort of on demand,

00:11:25.180 --> 00:11:29.800
whenever the view controller's view is
requested and hasn't yet been created.

00:11:30.110 --> 00:11:32.480
And within your
implementation of loadView,

00:11:32.560 --> 00:11:34.150
you'll create your views in code.

00:11:34.490 --> 00:11:36.580
So you can set up--it
might be a single view.

00:11:36.600 --> 00:11:39.960
It might be a whole bunch of views
that are all related together.

00:11:40.010 --> 00:11:43.040
Whatever the case, you're then going to
set the view property.

00:11:43.080 --> 00:11:47.140
In the same way that we set the view
outlet in the interface builder case,

00:11:47.170 --> 00:11:50.480
we're going to set the view
property on the view controller.

00:11:50.520 --> 00:11:53.630
So the way this would actually
look in code is that we would

00:11:53.630 --> 00:11:55.860
override loadView in our subclass.

00:11:55.890 --> 00:11:59.540
We would set up our views--in this case,
some class called myView--and

00:11:59.540 --> 00:12:00.980
then we set the view property.

00:12:01.200 --> 00:12:04.970
And from here,
the view controller is managing the view.

00:12:05.160 --> 00:12:09.870
So you can release it because the view
controller is the one responsible for it.

00:12:11.030 --> 00:12:15.340
So we know how to give a view
controller a view to manage.

00:12:15.400 --> 00:12:19.000
What other interesting things
are there about UIViewController?

00:12:19.040 --> 00:12:21.900
There are a few--whoa,
whoa--and we create it within it.

00:12:22.010 --> 00:12:24.150
In this case,
we don't need to pass in a Nib

00:12:24.150 --> 00:12:26.610
name because we're not using a Nib.

00:12:31.090 --> 00:12:35.570
There are some interesting hooks for
application events that you can hook

00:12:35.630 --> 00:12:38.000
into with UI View Controller as well.

00:12:38.110 --> 00:12:41.240
And the biggest one is that when your
view is about to appear on the screen,

00:12:41.240 --> 00:12:45.150
you'll get a callback in your
UI View Controller subclass,

00:12:45.250 --> 00:12:49.000
where you can load your data from
disk and prepare it for display.

00:12:49.000 --> 00:12:51.860
So this is another
example of lazy loading.

00:12:52.390 --> 00:12:54.760
Rather than, say,
loading your data from a database

00:12:55.000 --> 00:12:58.650
when your view controller is created,
do it on demand when it's about

00:12:58.710 --> 00:13:00.000
to be displayed on the screen.

00:13:00.000 --> 00:13:02.000
And this will help your
performance out a lot.

00:13:02.000 --> 00:13:04.500
On the flip side,
when your view is about to

00:13:04.500 --> 00:13:07.740
disappear from the screen,
this is a great opportunity

00:13:07.740 --> 00:13:08.990
to save your data.

00:13:09.000 --> 00:13:11.740
So in most iPhone apps,
there aren't explicit save/cancel

00:13:12.050 --> 00:13:14.350
buttons or pop-ups saying,
"Are you sure you want to

00:13:14.350 --> 00:13:17.040
save?" A lot of the time,
if your user has edited

00:13:17.040 --> 00:13:19.600
the data in some way,
you'll just want to save it out

00:13:19.640 --> 00:13:22.000
automatically when the view disappears.

00:13:22.000 --> 00:13:25.270
And this is also a good place to
persist things like the user's scroll

00:13:25.270 --> 00:13:29.000
position or other aspects of the view
which they might have customized.

00:13:29.000 --> 00:13:32.300
On top of all that,
there are hooks in UI View Controller for

00:13:32.300 --> 00:13:36.690
supporting some more advanced
features in iPhone applications,

00:13:37.220 --> 00:13:40.070
such as interface rotation
and memory warnings,

00:13:40.070 --> 00:13:41.960
both of which are essential
to iPhone app development.

00:13:42.060 --> 00:13:45.630
And those are going to be discussed
in greater detail in the Controls,

00:13:45.630 --> 00:13:49.000
Views, and Animation session,
which is tomorrow morning,

00:13:49.000 --> 00:13:52.000
as well as the Mastering iPhone
View Controllers session,

00:13:52.000 --> 00:13:52.980
which is on Thursday afternoon.

00:13:53.070 --> 00:13:54.940
So I encourage you to
come and check those out.

00:13:55.020 --> 00:13:58.000
So we know how to use an
individual view controller.

00:13:58.000 --> 00:14:03.010
But what we really want to do is link
several view controllers together

00:14:03.060 --> 00:14:05.990
to make a full-featured application.

00:14:06.180 --> 00:14:09.000
That's the most interesting
application of view controllers.

00:14:09.000 --> 00:14:11.000
So how do we do that?

00:14:11.000 --> 00:14:13.090
If you remember,
we talked about a couple of really

00:14:13.090 --> 00:14:15.000
common application flows in iPhone apps.

00:14:15.000 --> 00:14:19.000
And we wanted to make that really,
really easy for you to adopt.

00:14:19.120 --> 00:14:21.950
So there are a couple of classes
in UIKit that you can use.

00:14:22.000 --> 00:14:27.000
The first one is for creating
navigation bar applications.

00:14:27.000 --> 00:14:29.970
is called UI Navigation Controller.

00:14:30.340 --> 00:14:33.100
And the idea with UI Navigation
Controller is that it manages

00:14:33.270 --> 00:14:36.730
a stack of view controllers,
as well as a nav bar at

00:14:36.730 --> 00:14:38.200
the top of the screen.

00:14:38.380 --> 00:14:41.900
And the Navigation Controller takes
care of transitioning,

00:14:42.040 --> 00:14:45.520
positioning,
sizing the views to fit the content area,

00:14:45.550 --> 00:14:48.200
as well as updating the
navigation bar to match.

00:14:48.200 --> 00:14:52.200
So the way this fits together is that
the top view controller in the stack

00:14:52.200 --> 00:14:57.800
has its view displayed in the main
content area between the navigation

00:14:57.800 --> 00:15:00.150
bar and the bottom of the screen.

00:15:00.310 --> 00:15:03.270
Additionally,
the top view controller's view--or

00:15:03.360 --> 00:15:06.090
title--is displayed in the nav
bar at the top of the screen.

00:15:06.210 --> 00:15:08.780
So this gives the user some
context about where they are.

00:15:08.850 --> 00:15:10.440
And you don't need to set this yourself.

00:15:10.480 --> 00:15:12.220
As long as the view
controller has a title,

00:15:12.280 --> 00:15:15.220
it's displayed in the
correct way automatically.

00:15:15.260 --> 00:15:17.630
And finally,
the previous view controller's title

00:15:17.950 --> 00:15:21.990
is displayed as a back button on
the left-hand side of the screen.

00:15:22.470 --> 00:15:27.460
So how do you actually get view
controllers into a navigation controller?

00:15:27.550 --> 00:15:29.640
There are two main
operations for doing this.

00:15:29.680 --> 00:15:33.840
And if you're familiar with some
computer science terminology,

00:15:33.860 --> 00:15:35.120
you'll know what they are.

00:15:35.350 --> 00:15:36.830
The first one is to push.

00:15:37.080 --> 00:15:39.300
So if you want to add a view
controller to the stack,

00:15:39.370 --> 00:15:42.890
you'll call pushViewController with the
view controller that you want to add.

00:15:42.980 --> 00:15:44.490
And you can tell it
whether or not to animate.

00:15:44.700 --> 00:15:48.570
There are some cases where you want to
animate and other cases where you don't.

00:15:48.910 --> 00:15:51.850
To remove a view controller from
the stack and do the corresponding

00:15:51.850 --> 00:15:55.410
animation to animate it off the screen,
you'll call popViewController,

00:15:55.410 --> 00:15:57.800
and you can tell it whether
or not to animate it.

00:15:57.880 --> 00:15:59.920
And you'll notice here,
we don't pass a parameter

00:15:59.920 --> 00:16:01.090
to popViewController.

00:16:01.230 --> 00:16:05.790
It always operates on the top
view controller on the stack.

00:16:05.890 --> 00:16:08.050
There are some other
methods for manipulating the

00:16:08.190 --> 00:16:11.000
navigation controller's stack,
but these are the two

00:16:11.000 --> 00:16:12.500
most important ones.

00:16:12.620 --> 00:16:18.230
So when exactly do we call push
and pop in our application flow?

00:16:18.900 --> 00:16:21.840
First of all, when you're setting up your
initial navigation state,

00:16:21.900 --> 00:16:24.470
most often in your application
didFinishLaunching method

00:16:24.650 --> 00:16:27.440
in your app delegate,
you're going to create

00:16:27.440 --> 00:16:29.000
a navigation controller.

00:16:29.040 --> 00:16:32.060
You can do this in IB,
or you can just call

00:16:32.060 --> 00:16:35.180
UINavigationControllerAlecInit.

00:16:35.370 --> 00:16:37.190
Once you have your navigation
controller created,

00:16:37.350 --> 00:16:40.300
you can then begin pushing view
controllers onto its stack.

00:16:40.300 --> 00:16:44.300
So, for our first view controller,
we're going to call pushViewController,

00:16:44.300 --> 00:16:47.300
pass it,
and we're going to say no for animating,

00:16:47.300 --> 00:16:49.820
because when we first launch our app,
we don't want the user to be seeing

00:16:49.890 --> 00:16:51.300
some side-to-side transitions.

00:16:51.300 --> 00:16:53.300
We just want it to
launch to our first view.

00:16:53.300 --> 00:16:56.910
And you can actually push multiple
view controllers here if you want your

00:16:56.910 --> 00:17:01.300
user to start several levels deep when
you first bring up the navigation.

00:17:01.300 --> 00:17:04.030
And finally,
we need to display it on the screen.

00:17:04.300 --> 00:17:08.430
So, a navigation controller is actually
a subclass of UIViewController,

00:17:08.430 --> 00:17:11.620
so you can use it anywhere
that you would normally be

00:17:11.620 --> 00:17:13.300
able to use a view controller.

00:17:13.440 --> 00:17:16.600
So, most commonly,
you'll call addSubView,

00:17:17.060 --> 00:17:21.300
passing the navigation
controller's view as the parameter.

00:17:21.300 --> 00:17:24.400
And the navigation controller's
view is a special container view,

00:17:24.530 --> 00:17:28.300
which includes both the navbar at the
top of the screen and the content area

00:17:28.300 --> 00:17:30.910
for the top view controller's view.

00:17:31.730 --> 00:17:35.150
So your app is up and running,
and your user is interacting with it,

00:17:35.280 --> 00:17:37.800
pressing buttons and
selecting table rows.

00:17:37.820 --> 00:17:42.640
How do you push and pop in response
to those types of user actions?

00:17:42.770 --> 00:17:45.750
The most common place that you're
going to push in your application

00:17:46.210 --> 00:17:49.820
is going to be from within one of
your view controllers on the stack.

00:17:49.900 --> 00:17:53.360
So for example,
within our recipe list controller,

00:17:53.420 --> 00:17:55.770
the user may press the button
that says chocolate cake.

00:17:55.930 --> 00:17:59.500
And so we want to transition the
chocolate cake detail onto the screen.

00:17:59.580 --> 00:18:02.900
So what we're going to do from
within the navigation controller is

00:18:03.100 --> 00:18:07.580
get a reference to our parent--from
within the list controller,

00:18:07.600 --> 00:18:09.560
we're going to talk to our
parent navigation controller

00:18:09.700 --> 00:18:11.520
and tell it to push.

00:18:11.600 --> 00:18:14.040
So what we'll do is call
self.navigationController,

00:18:14.140 --> 00:18:16.270
which gets our parent,
and then we're going to push

00:18:16.270 --> 00:18:17.520
some other view controller.

00:18:17.630 --> 00:18:19.630
In this case,
we want to do it with animation

00:18:19.630 --> 00:18:22.490
because that gives the user a
better feel for what's actually

00:18:22.570 --> 00:18:24.510
happening in their application.

00:18:24.520 --> 00:18:27.520
Now, popping is a little bit different.

00:18:27.520 --> 00:18:30.520
You're actually rarely
going to call pop directly.

00:18:30.550 --> 00:18:33.240
In fact,
don't be surprised if you never actually

00:18:33.240 --> 00:18:35.460
call popViewController in your code.

00:18:35.520 --> 00:18:39.670
And the reason for that is that
it's automatically invoked by the

00:18:39.670 --> 00:18:41.520
back button in a navigation bar.

00:18:41.520 --> 00:18:45.520
So this is such a common thing,
we wanted it to behave consistently

00:18:45.520 --> 00:18:47.520
in navigation-based apps,
so you don't have to

00:18:47.520 --> 00:18:47.520
write the code for this.

00:18:47.520 --> 00:18:48.520
It'll just work.

00:18:48.520 --> 00:18:51.880
So we're going to go ahead and do that.

00:18:52.130 --> 00:18:54.100
With all this in mind,
let's start building

00:18:54.300 --> 00:18:55.860
the Recipes application.

00:18:55.940 --> 00:19:01.690
So I'm going to ask Alex to come on
stage and we're going to start doing it.

00:19:04.900 --> 00:19:06.340
Good afternoon.

00:19:06.460 --> 00:19:08.820
My name is Alex Aybes,
and I work with Evan on the

00:19:08.820 --> 00:19:10.640
iPhone Software Engineering team.

00:19:10.870 --> 00:19:14.460
So let's actually go ahead and
build this Recipes application.

00:19:14.790 --> 00:19:17.000
What I have here is an Xcode project.

00:19:17.010 --> 00:19:22.040
It is basically the Navigation
Controller application template,

00:19:22.080 --> 00:19:24.230
with a couple of things
I changed and actually removed

00:19:24.470 --> 00:19:26.450
for the purpose of the demo.

00:19:26.660 --> 00:19:30.760
So the first thing we're looking at here
is the Recipes application delegate.

00:19:30.910 --> 00:19:34.750
As you can see,
it has a couple of outlets to a

00:19:34.930 --> 00:19:36.540
window and a navigation controller.

00:19:36.540 --> 00:19:40.480
Again, this is pretty much the template.

00:19:41.010 --> 00:19:44.700
As you can see on the side here,
we have a few additional

00:19:44.700 --> 00:19:46.270
view controllers.

00:19:46.390 --> 00:19:50.500
And we're going to cover
those in a few minutes.

00:19:50.620 --> 00:19:54.510
So I'm actually just going to go ahead
and run this application to show you.

00:19:54.680 --> 00:19:56.920
There's nothing in my sleeves.

00:19:57.190 --> 00:20:01.100
So as you can see,
just a blank window in there.

00:20:01.200 --> 00:20:05.030
So let's go ahead and build
this navigation controller,

00:20:05.030 --> 00:20:07.570
the first step of the application.

00:20:07.930 --> 00:20:12.060
So when the application did finish
launching method of the delegate,

00:20:12.110 --> 00:20:17.080
we're going to create our
navigation controller,

00:20:17.150 --> 00:20:19.810
the basic step in there.

00:20:19.990 --> 00:20:26.580
So we're going to go ahead,
call allocate the navigation controller,

00:20:26.580 --> 00:20:33.210
and then add the navigation controller's
view as a subview of the window.

00:20:33.800 --> 00:20:36.400
So let's build and run this.

00:20:36.460 --> 00:20:40.790
And as you can see on screen now,
we have a navigation bar at the top and,

00:20:40.990 --> 00:20:45.880
again, a blank window because we haven't
added any view controllers.

00:20:45.920 --> 00:20:48.180
So let's go ahead and add
the first view controller.

00:20:48.270 --> 00:20:50.530
If you remember,
this is the list of recipes

00:20:50.620 --> 00:20:53.140
we're going to add there.

00:20:53.260 --> 00:20:55.200
Let's go back to Xcode.

00:20:56.380 --> 00:20:59.970
I have already created the
RecipeList View Controller.

00:20:59.990 --> 00:21:01.300
Let's take a look at that.

00:21:01.370 --> 00:21:05.830
It is a simple subclass of
UI View Controller that has one action,

00:21:06.000 --> 00:21:09.480
the View Chocolate Cake action,
which is going to be called when

00:21:09.710 --> 00:21:12.680
we press the Chocolate Cake button.

00:21:13.180 --> 00:21:15.640
So this view controller,
we're actually going to

00:21:15.660 --> 00:21:17.860
create an interface builder.

00:21:18.050 --> 00:21:21.540
So I'm going to select
the recipe symbol list.

00:21:21.810 --> 00:21:25.500
Neb and Openit and edit it in Xcode.

00:21:25.670 --> 00:21:27.040
Let me hide the back.

00:21:27.220 --> 00:21:30.940
So, again,
we have the files owner and the view.

00:21:31.160 --> 00:21:34.460
First thing we're going to do
is actually set up the view.

00:21:34.530 --> 00:21:37.660
I cheated a little and
actually set it up already.

00:21:37.750 --> 00:21:39.740
It's got a single button in there.

00:21:39.870 --> 00:21:41.550
Really complex for now.

00:21:42.610 --> 00:21:47.210
So once you've laid out the view,
you can close this.

00:21:47.340 --> 00:21:51.500
And the next thing we're going to do
is set the class of the file zone.

00:21:51.700 --> 00:21:54.160
Again, from the slides earlier,
we're going to set this

00:21:54.370 --> 00:21:56.340
to be the view controller.

00:21:56.340 --> 00:22:01.340
So we're going to go to the Tools menu,
to the Identity Inspector.

00:22:01.590 --> 00:22:06.700
and said the class of the files owner
to be the recipe list view controller.

00:22:06.750 --> 00:22:09.400
As you notice here,
Interface Builder picks up on

00:22:09.400 --> 00:22:13.720
the fact that this particular
view controller has one action.

00:22:14.830 --> 00:22:20.100
Once we've done this,
we're going to wire the view controller,

00:22:20.120 --> 00:22:22.940
which is the files owner in this case,
to our view.

00:22:23.060 --> 00:22:26.600
For this, we're going to go to the
connections inspector.

00:22:26.890 --> 00:22:31.190
and drag the view outlet to our view.

00:22:31.570 --> 00:22:33.550
All right, we've connected the view.

00:22:33.780 --> 00:22:38.280
The next step,
we have an action in our view--a button,

00:22:38.410 --> 00:22:39.130
rather.

00:22:39.300 --> 00:22:47.400
So we need to wire that to the view
controller's view chocolate cake method.

00:22:47.720 --> 00:22:51.950
So in the chocolate cake method,
I'm going to select the touch-up inside

00:22:53.120 --> 00:22:55.800
here and drag it to the files owner.

00:22:55.820 --> 00:22:59.840
Again, it knows that about the
view chocolate cake method,

00:22:59.880 --> 00:23:02.310
so I'm going to wire it to that.

00:23:02.580 --> 00:23:04.890
All right, that's all we need to
do in Interface Builder.

00:23:05.030 --> 00:23:08.190
So I'm going to close that
Interface Builder document,

00:23:08.190 --> 00:23:09.730
go back to Xcode.

00:23:10.750 --> 00:23:13.100
Now,
this is the very first view controller

00:23:13.100 --> 00:23:14.270
we're going to push on the stack.

00:23:14.550 --> 00:23:18.050
So I'm going to do this in
the recipes app delegate.

00:23:18.280 --> 00:23:21.160
Again, in the application
definition launching method,

00:23:21.200 --> 00:23:23.500
we created the navigation controller.

00:23:23.520 --> 00:23:27.390
Next step is to actually create
this first view controller.

00:23:28.000 --> 00:23:33.060
So we create the first view controller,
the recipe list view controller,

00:23:33.110 --> 00:23:35.240
by calling alec, init with name name.

00:23:35.270 --> 00:23:39.080
This is the name we just
edited in Interface Builder.

00:23:39.110 --> 00:23:42.100
And we're going to find that
name in the main bundle.

00:23:43.140 --> 00:23:45.680
Once we've instantiated
this view controller,

00:23:45.960 --> 00:23:49.930
we need to push it onto the stack
by just calling pushViewController

00:23:49.930 --> 00:23:51.690
on the navigation controller.

00:23:51.800 --> 00:23:55.840
Again, as Evan mentioned earlier,
we do not want to animate this first one

00:23:55.840 --> 00:23:59.680
because this is before the application
is actually shown to the user.

00:23:59.880 --> 00:24:02.710
This is the initial
load of the application.

00:24:02.900 --> 00:24:06.200
Once we've pushed the view controller
onto the navigation controller stack,

00:24:06.280 --> 00:24:07.800
we don't need to hold onto it.

00:24:07.880 --> 00:24:09.280
So we're actually going to release it.

00:24:09.390 --> 00:24:12.390
This is now owned by the
navigation controller.

00:24:13.440 --> 00:24:16.290
Once we've done this,
let's build and run.

00:24:16.450 --> 00:24:17.130
And there we go.

00:24:17.220 --> 00:24:18.490
We have our view.

00:24:18.620 --> 00:24:22.600
The view we just set up in Interface
Builder is now in our navigation stack.

00:24:22.720 --> 00:24:25.600
As you notice here,
we don't actually have a title.

00:24:25.750 --> 00:24:27.600
Probably want to update that next.

00:24:27.700 --> 00:24:29.590
Let's go ahead and do that.

00:24:29.710 --> 00:24:31.700
Back to Xcode.

00:24:31.850 --> 00:24:35.890
This time we're going to modify
the Recipe List View Controller.

00:24:36.640 --> 00:24:39.460
So, as I mentioned earlier,
this is just a simple

00:24:39.660 --> 00:24:41.850
subclass of UIViewController.

00:24:41.850 --> 00:24:45.700
So, in the implementation file,
in the initWithNameName method,

00:24:45.890 --> 00:24:49.490
nameName and bundle,
we're going to actually

00:24:49.650 --> 00:24:51.470
set the title property.

00:24:53.220 --> 00:24:54.360
Set it to recipes.

00:24:54.660 --> 00:24:56.580
Again, this is our recipe list.

00:24:56.880 --> 00:24:58.790
And build and run again.

00:24:59.200 --> 00:25:00.100
And there we go.

00:25:00.100 --> 00:25:01.750
We have recipes, the title.

00:25:02.020 --> 00:25:07.610
All we had to do, set the title property
on that view controller.

00:25:07.620 --> 00:25:12.200
The next step is to actually hook up
this chocolate cake button in there.

00:25:12.230 --> 00:25:16.320
Right now it doesn't do anything
because we have not done anything

00:25:16.320 --> 00:25:18.400
in the view chocolate cake method.

00:25:18.470 --> 00:25:21.160
So let's implement the
view chocolate cake method.

00:25:22.040 --> 00:25:27.080
back in the recipe list view controller,
the view chocolate cake method.

00:25:27.280 --> 00:25:30.970
We're going to create
the next view controller.

00:25:31.280 --> 00:25:33.550
In this case,
we have a view controller called the

00:25:33.550 --> 00:25:38.070
RecipeSimpleDetailViewController that
I'm going to show you in a moment.

00:25:40.140 --> 00:25:44.990
This view controller, again,
uses a nib to define the interface.

00:25:45.130 --> 00:25:49.090
So all we need to do is call recipe
simple detail view controller,

00:25:49.090 --> 00:25:49.810
and it will name.

00:25:50.050 --> 00:25:53.980
This is the nib it uses
to define its interface,

00:25:54.010 --> 00:25:56.540
and find it in the main bundle.

00:25:57.860 --> 00:26:00.110
This name has already been set up,
and I'm not going to cover that

00:26:00.130 --> 00:26:03.680
right now since it's essentially
the same thing as the previous one.

00:26:04.110 --> 00:26:09.380
The important thing here is how we push
it onto the navigation controller stack.

00:26:09.640 --> 00:26:12.660
For this, remember,
we're in the recipe list view controller.

00:26:12.740 --> 00:26:16.000
So we're going to get the recipe
list view controller's navigation

00:26:16.000 --> 00:26:21.060
controller and push the detail view
controller--the next one in the

00:26:21.310 --> 00:26:24.220
stack--onto this navigation controller.

00:26:24.700 --> 00:26:27.350
In this case,
we do want to animate because

00:26:27.900 --> 00:26:30.810
this way the user is actually
going to see what happens.

00:26:30.930 --> 00:26:33.440
Once we've done that, again,
no need to hold onto it,

00:26:33.570 --> 00:26:35.670
so we're going to release it.

00:26:36.710 --> 00:26:41.310
So with that, we're going to actually
run the application again.

00:26:41.540 --> 00:26:44.130
And now,
when I press the chocolate cake button,

00:26:44.310 --> 00:26:46.000
I see the recipe.

00:26:46.050 --> 00:26:46.980
This is the default nib.

00:26:47.120 --> 00:26:51.700
It's got a text view in it,
and it has the default text right now.

00:26:51.850 --> 00:26:55.790
So let's go ahead and
update the text in there.

00:26:56.660 --> 00:26:59.940
Back in Xcode, now we're going to edit
the next view controller,

00:26:59.940 --> 00:27:04.080
the Recipe Simple Detail View Controller,
the one we just saw on screen.

00:27:04.510 --> 00:27:07.400
Here, again, as you can see,
it says the title.

00:27:07.400 --> 00:27:09.400
There's a couple other things.

00:27:09.480 --> 00:27:11.180
Here we have this viewDidLoad method.

00:27:11.250 --> 00:27:14.280
This is a special method
on UI View Controller that

00:27:14.360 --> 00:27:15.200
you can overwrite.

00:27:15.220 --> 00:27:19.310
It is called once the
nib has been loaded,

00:27:19.600 --> 00:27:22.160
once all the outlets have been connected.

00:27:22.250 --> 00:27:26.670
So at that point, you're good to go and
you're good to set up.

00:27:26.890 --> 00:27:40.230
The recipe simple detail view controller
is a simple subclass of UI view

00:27:40.250 --> 00:27:45.260
controller that has one outlet,
the description view.

00:27:45.260 --> 00:27:50.790
And that's the UI text view we
saw when running the application.

00:27:51.510 --> 00:27:54.590
So back in the implementation,
in the viewDidLoad method,

00:27:54.590 --> 00:27:57.990
we're going to actually set
the text of that text view.

00:27:58.840 --> 00:28:00.930
So all we need to do,
since the outlets have been

00:28:00.940 --> 00:28:04.800
connected at this point,
is set the text to be the actual recipe.

00:28:05.060 --> 00:28:08.290
I don't necessarily recommend
trying out that recipe.

00:28:10.290 --> 00:28:13.170
So, view the chocolate cake,
and there we go.

00:28:13.250 --> 00:28:15.700
We have the recipe actually displayed.

00:28:16.710 --> 00:28:19.340
Next step in here is to
actually view the picture.

00:28:19.570 --> 00:28:24.200
Again, we haven't done anything there,
so that button doesn't work.

00:28:24.390 --> 00:28:29.200
So let's actually go back
to Xcode and implement this.

00:28:29.400 --> 00:28:31.440
As you can see,
there's a show photo method.

00:28:31.440 --> 00:28:34.590
It's been wired in Interface Builder,
same way the view chocolate

00:28:34.590 --> 00:28:37.420
cake method was wired earlier.

00:28:38.130 --> 00:28:41.230
Just for a little change,
we're actually going to build this third

00:28:41.440 --> 00:28:45.740
view controller and entire lane code,
just to show you how that works.

00:28:46.300 --> 00:28:48.190
Before that,
we're going to actually push it,

00:28:48.340 --> 00:28:48.690
create it.

00:28:48.830 --> 00:28:52.220
We have this recipe for the
view controller that is,

00:28:52.220 --> 00:28:55.540
again, a very simple subclass
of UIViewController,

00:28:55.570 --> 00:28:58.740
not even any instance variable.

00:28:58.980 --> 00:29:03.580
So back in the recipe simple detail view
controller in the show photo method,

00:29:03.580 --> 00:29:06.500
we're actually going to,
same way as before,

00:29:06.500 --> 00:29:08.840
instantiate the recipe
for the view controller.

00:29:08.850 --> 00:29:12.210
This time, you notice we don't need to
pass in a nib since we're

00:29:12.580 --> 00:29:14.570
creating this from code entirely.

00:29:15.320 --> 00:29:19.830
And again,
get our navigation controller and push

00:29:19.900 --> 00:29:24.000
the photo view controller onto the
stack of the navigation controller.

00:29:24.020 --> 00:29:28.900
Again, we animate since the user
needs to know what's going on.

00:29:28.910 --> 00:29:32.060
And we release the photo view
controller once we don't need it,

00:29:32.070 --> 00:29:35.070
since we don't need it anymore,
since it's on the stack.

00:29:36.220 --> 00:29:39.290
Now, let's take a look at the actual
recipe for the view controller.

00:29:39.470 --> 00:29:41.750
Again,
I mentioned we're doing this all in code.

00:29:41.940 --> 00:29:45.840
So here,
in the recipe for the view controller,

00:29:45.860 --> 00:29:48.480
we're going to implement
the load view method.

00:29:48.890 --> 00:29:52.600
This is a method that will be called
appropriately at the right time.

00:29:52.760 --> 00:29:54.800
You just need to create
your view in there.

00:29:54.990 --> 00:29:58.010
So what we're going to do here

00:29:58.620 --> 00:30:03.590
is create a UI image with the
chocolate cake resource that

00:30:03.590 --> 00:30:07.240
we have in our application,
and then create a

00:30:07.240 --> 00:30:08.990
UI image view from that.

00:30:10.140 --> 00:30:11.900
And here comes the important part.

00:30:11.930 --> 00:30:16.130
We're going to set the view property
of our Recipe Photo View Controller to

00:30:16.130 --> 00:30:17.900
be that image view.

00:30:18.120 --> 00:30:21.660
Again, we release it since we
don't need to hold onto it.

00:30:21.660 --> 00:30:24.960
The view controller is
already holding onto it.

00:30:25.040 --> 00:30:29.070
All right, once we have that,
we're actually going to run it.

00:30:30.600 --> 00:30:31.600
And there we go.

00:30:31.600 --> 00:30:35.690
We have the chocolate cake,
the actual recipe, and voila,

00:30:35.720 --> 00:30:39.840
a beautiful photo of the final product.

00:30:39.840 --> 00:30:42.360
And that's it for our demo.

00:30:42.520 --> 00:30:44.480
Back to you, Evan.

00:30:48.300 --> 00:32:54.600
[Transcript missing]

00:32:54.700 --> 00:32:58.070
TabBar Controller manages an
array of view controllers,

00:32:58.070 --> 00:33:01.320
as well as the tab bar down
at the bottom of the screen.

00:33:01.410 --> 00:33:04.840
So the way this actually all fits
together on the screen is that

00:33:04.840 --> 00:33:08.480
the selected view controller's
view is displayed in the main

00:33:08.480 --> 00:33:12.390
content area between the tab bar
at the bottom and the iPhone status

00:33:12.390 --> 00:33:14.050
bar at the top of the screen.

00:33:14.180 --> 00:33:17.060
It's automatically positioned and sized.

00:33:17.350 --> 00:33:20.020
Some attributes of all of your
view controllers which are being

00:33:20.020 --> 00:33:23.120
managed are displayed in the tab
bar at the bottom of the screen.

00:33:23.320 --> 00:33:26.180
So as you can see here,
the titles and some other properties of

00:33:26.180 --> 00:33:28.190
those view controllers are being shown.

00:33:28.200 --> 00:33:30.100
And this gets done for you automatically.

00:33:30.340 --> 00:33:34.200
You don't need to tweak
the tab bar yourself.

00:33:34.280 --> 00:33:37.200
So UI Tab Bar Controller is
actually a pretty simple class.

00:33:37.250 --> 00:33:40.920
And I think we're just going to
jump in and show you how to build

00:33:40.920 --> 00:33:43.200
a tab bar-based app using it.

00:33:43.200 --> 00:33:45.200
So, Alex.

00:33:45.390 --> 00:33:46.890
Thank you.

00:33:47.320 --> 00:33:49.830
All right, for this one,
we're going to open a

00:33:49.830 --> 00:33:52.200
slightly different project.

00:33:52.230 --> 00:33:57.860
I'm going to hide this one,
pick the next--the tab bar demo.

00:33:58.050 --> 00:34:01.350
This particular project is
also a modified version of the

00:34:01.490 --> 00:34:03.760
template for the sake of the demo.

00:34:03.860 --> 00:34:09.160
We have our application delegate that
has a UI tab bar controller in it,

00:34:09.240 --> 00:34:13.950
and all the application delegate
really does is--let me--

00:34:14.580 --> 00:34:15.940
Resize this.

00:34:16.010 --> 00:34:19.120
All it really does is set
the tab bar controller's view

00:34:19.200 --> 00:34:21.060
as a subview of the window.

00:34:21.120 --> 00:34:24.600
Then we have a few subclasses
of the UI View Controller--a

00:34:24.600 --> 00:34:27.890
chocolate View Controller,
a cobbler View Controller,

00:34:28.090 --> 00:34:30.350
and a French macaron View Controller.

00:34:30.480 --> 00:34:31.970
The best one.

00:34:34.260 --> 00:34:36.700
For a little change,
we're actually going to do the

00:34:36.700 --> 00:34:39.910
rest of this entirely in IB.

00:34:40.060 --> 00:34:43.100
So let's open the main window
interface builder document.

00:34:43.120 --> 00:34:45.640
I'm going to hide the Xcode in there.

00:34:45.680 --> 00:34:47.080
And there we go.

00:34:47.170 --> 00:34:50.900
This is pretty much the
template main window.

00:34:51.090 --> 00:34:54.480
You've got a file owner, a files owner.

00:34:55.110 --> 00:34:57.260
That is actually in the identity class.

00:34:57.360 --> 00:34:59.750
It's just a UI application.

00:34:59.860 --> 00:35:04.760
You've got an application delegate,
in this case, our TabBarDemoAppDelegate,

00:35:05.020 --> 00:35:06.710
and a window.

00:35:08.730 --> 00:35:11.500
This tab bar demo app delegate,
as you notice,

00:35:11.500 --> 00:35:16.530
has one outlet to the window and one
outlet to the tab bar controller.

00:35:17.010 --> 00:35:20.780
So we want a tab bar application,
so let's actually build it.

00:35:20.830 --> 00:35:23.610
We're going to go to the
library in the objects,

00:35:23.810 --> 00:35:28.660
select the tab bar controller,
and drag this into our main window,

00:35:28.680 --> 00:35:30.210
nib file.

00:35:30.800 --> 00:35:34.040
So as you can see,
we get a little window here with

00:35:34.040 --> 00:35:36.650
a couple of items in the tab bar.

00:35:37.390 --> 00:35:41.430
So we want three different tabs in there.

00:35:41.560 --> 00:35:46.740
So the first one we're going to set
to the Chocolate View Controller.

00:35:46.820 --> 00:35:50.910
For this,
we go to the Identity Inspector, again,

00:35:50.910 --> 00:35:53.930
in the Tools menu, and set the class.

00:35:54.010 --> 00:35:56.840
You can notice that Interface
Builder actually auto-completes.

00:35:56.840 --> 00:35:59.180
It's quite nice and easy.

00:35:59.740 --> 00:36:03.750
The second item we're going to
set is the second view controller.

00:36:03.970 --> 00:36:07.760
We're going to use the
Cobbler view controller class.

00:36:09.130 --> 00:36:11.900
And I mentioned we need three,
so let's actually add

00:36:11.900 --> 00:36:13.240
a third one in there.

00:36:13.280 --> 00:36:17.690
For this, we go back to the library in
Interface Builder and the objects,

00:36:17.720 --> 00:36:22.570
pick a view controller,
and simply drag it into the tab bar.

00:36:22.870 --> 00:36:26.250
This will create a third
item in the tab bar.

00:36:26.720 --> 00:36:32.430
And again, I'm going to go back to the
View Controller Identity Inspector and

00:36:32.630 --> 00:36:36.600
make this the Macaron View Controller.

00:36:36.760 --> 00:36:38.310
There we go.

00:36:39.050 --> 00:36:43.600
Next thing we need to do is customize
those titles down here at the bottom.

00:36:43.600 --> 00:36:45.700
So for this,
I'm just going to double-click

00:36:45.700 --> 00:36:49.300
in there and make this Macaron.

00:36:49.480 --> 00:36:54.300
And yes, this is the French spelling,
if I can still remember it.

00:36:54.460 --> 00:36:58.000
The second one was Cobbler.

00:36:58.150 --> 00:37:02.190
And the first one was Chocolate,
of course.

00:37:03.400 --> 00:37:04.820
Excuse me.

00:37:04.850 --> 00:37:06.820
There we go.

00:37:06.980 --> 00:37:09.870
Last step in here, we need to customize
those little icons there.

00:37:09.960 --> 00:37:11.890
Question marks aren't that great.

00:37:12.040 --> 00:37:16.290
So we're going to go to the Media tab,
and this is our really artistic way

00:37:16.400 --> 00:37:19.400
of representing a chocolate cake.

00:37:19.420 --> 00:37:21.380
And then the cobbler.

00:37:22.760 --> 00:37:25.700
And then we need the Mac run.

00:37:25.820 --> 00:37:27.700
Oh, we probably don't want that one.

00:37:27.700 --> 00:37:30.950
Let's actually use that one.

00:37:31.550 --> 00:37:33.060
All right.

00:37:33.110 --> 00:37:38.760
Last thing I need to do is wire
the-- in the application delegate,

00:37:38.890 --> 00:37:41.650
remember we have a tab
bar controller outlet.

00:37:41.830 --> 00:37:46.090
So I'm going to go to the connections
inspector and actually wire this tab bar

00:37:46.090 --> 00:37:49.290
controller to our tab bar controller.

00:37:51.820 --> 00:37:55.800
Yes,
now you see we have a connection there.

00:37:55.800 --> 00:37:57.800
Let's close this.

00:37:57.800 --> 00:37:59.760
This is all we need to
do in Interface Builder.

00:37:59.800 --> 00:38:05.100
So close, go back to Xcode,
and build and run.

00:38:05.750 --> 00:38:08.660
And now we have a tab
bar-based application.

00:38:08.690 --> 00:38:11.020
And if I select the different items,
I see the different

00:38:11.670 --> 00:38:13.120
photos and the macaroons.

00:38:13.140 --> 00:38:13.940
All right.

00:38:14.100 --> 00:38:17.200
That's it for building a tab bar
application in Interface Builder.

00:38:17.240 --> 00:38:19.070
Back to you, Evan.

00:38:27.300 --> 00:38:28.860
So what did we just see?

00:38:28.860 --> 00:38:32.960
Again, we created several subclasses
of UI View Controller and then

00:38:33.120 --> 00:38:36.990
plugged them into a plain,
vanilla UI Tab Bar Controller to manage

00:38:36.990 --> 00:38:39.740
the transitions between each one's view.

00:38:39.910 --> 00:38:43.550
And then we customized the titles
and the images to give our users a

00:38:43.560 --> 00:38:45.450
better idea of what was going on.

00:38:45.770 --> 00:38:49.100
And again, we didn't have to manage
any of this stuff ourselves.

00:38:49.170 --> 00:38:52.360
This is really common code
in many iPhone applications,

00:38:52.400 --> 00:38:54.700
so we wanted to make it
really easy to adopt.

00:38:54.810 --> 00:38:58.340
So you don't have to worry about
sizing your view to fit in the space

00:38:58.350 --> 00:39:02.200
between the tab bar and the status
bar or any of that sort of stuff.

00:39:02.250 --> 00:39:06.540
If you find yourself wanting to roll
your own tab bar application flow,

00:39:06.590 --> 00:39:09.540
I really encourage you to take a
step back and see if you can use the

00:39:09.600 --> 00:39:13.400
pieces that we've already created,
because it'll save you a lot of time.

00:39:13.980 --> 00:39:19.290
Next, so we've seen how to build a
navigation and a tab bar-based app.

00:39:19.700 --> 00:39:22.130
But there is one more thing
which I'd like to cover.

00:39:22.260 --> 00:39:23.320
Am I allowed to say that?

00:39:23.540 --> 00:39:25.890
Probably not.

00:39:26.050 --> 00:39:29.900
Think back to the first time
you saw the iPhone demonstrated.

00:39:29.900 --> 00:39:32.890
And for me at least,
the applications which really jumped out,

00:39:32.900 --> 00:39:36.530
which really amazed me,
were the apps like Safari and Photos,

00:39:36.530 --> 00:39:39.830
which rotate their UI in
response to user interaction.

00:39:39.900 --> 00:39:43.900
You know, this is a really eye-catching
feature that creates a lot of buzz.

00:39:43.900 --> 00:39:47.240
And wouldn't it be great if you
could adopt rotation really easily

00:39:47.240 --> 00:39:48.870
in your application as well?

00:39:48.900 --> 00:39:52.020
One big advantage of this is that
your users are going to want to

00:39:52.020 --> 00:39:53.780
show your app off to their friends.

00:39:53.900 --> 00:39:56.900
When it's time to whip out the
iPhone and show it off at a party,

00:39:56.900 --> 00:39:58.890
they're going to say,
"Check out this app.

00:39:58.890 --> 00:40:01.440
It rotates." And you're going
to build a lot of word of

00:40:01.440 --> 00:40:02.790
mouth about your application.

00:40:02.880 --> 00:40:05.690
Additionally,
there are some more concrete reasons for

00:40:05.690 --> 00:40:07.840
supporting rotation in your iPhone app.

00:40:07.900 --> 00:40:08.900
Some types of content
are not always the same.

00:40:08.900 --> 00:40:08.900
For example,
if you're using a mobile phone,

00:40:08.900 --> 00:40:08.900
you're going to want to make sure
that you're not using a mobile phone.

00:40:08.900 --> 00:40:08.900
You're going to want to make sure
that you're not using a mobile phone.

00:40:08.900 --> 00:40:08.900
You're going to want to make sure
that you're not using a mobile phone.

00:40:08.900 --> 00:40:11.900
Some types of content just
fit better in landscape.

00:40:12.110 --> 00:40:14.890
Photos, maybe some web pages.

00:40:15.030 --> 00:40:17.900
The keyboard, a lot of users prefer
typing in landscape.

00:40:17.900 --> 00:40:21.900
So we wanted to make it easy for
you to support this in your app.

00:40:22.220 --> 00:40:26.600
So there are two steps to supporting
this with view controllers.

00:40:26.670 --> 00:40:30.440
The first step is to decide
whether or not to rotate.

00:40:30.700 --> 00:40:33.160
So in each of your view
controller subclasses,

00:40:33.160 --> 00:40:36.060
if you want it to be rotatable,
you're going to override

00:40:36.060 --> 00:40:40.540
a special method called
shouldAutorotateToInterfaceOrientation.

00:40:40.580 --> 00:40:45.870
And the default implementation of this
method just returns yes for the portrait

00:40:46.040 --> 00:40:48.740
right-side-up interface orientation.

00:40:48.800 --> 00:40:52.040
So if you'd like to support more
orientations in your view controller,

00:40:52.060 --> 00:40:53.040
you're going to override this.

00:40:53.090 --> 00:40:56.480
And here, we're just going to return yes
because we want to support any

00:40:56.480 --> 00:40:58.790
interface orientation out there.

00:40:59.050 --> 00:41:02.120
And now, one thing worth noting here
is that if you're writing a

00:41:02.120 --> 00:41:05.770
navigation or a tab-bar-based app,
you need to make sure that all

00:41:05.770 --> 00:41:08.970
of your view controllers support
the same set of orientations.

00:41:09.100 --> 00:41:12.870
This is currently a limitation
of those container controllers.

00:41:13.060 --> 00:41:16.760
If you have some view controllers which
support landscape and some that don't,

00:41:17.050 --> 00:41:18.500
the results currently are
going to be kind of unexpected.

00:41:18.500 --> 00:41:18.500
So if you have a view controller that
supports landscape and some that don't,

00:41:18.500 --> 00:41:18.500
the results currently are
going to be kind of unexpected.

00:41:18.500 --> 00:41:18.500
So if you have a view controller that
supports landscape and some that don't,

00:41:18.500 --> 00:41:18.500
the results currently are
going to be kind of unexpected.

00:41:18.500 --> 00:41:22.960
So you need to make sure that
you're consistent in your support.

00:41:23.440 --> 00:41:26.870
Once you've decided whether to rotate,
there's a second step,

00:41:26.870 --> 00:41:29.850
and that's to make sure that
your views resize to fit the

00:41:29.850 --> 00:41:31.540
available space on the screen.

00:41:31.590 --> 00:41:33.780
Because when you go from
portrait to landscape,

00:41:33.820 --> 00:41:37.020
the available bounds of the
content area will change.

00:41:37.230 --> 00:41:41.460
So there's a really easy way to do this,
and it's by using auto-resizing

00:41:41.460 --> 00:41:43.410
masks on your UI views.

00:41:43.550 --> 00:41:47.730
So the way to do this in code--here,
we want our view to grow and shrink

00:41:48.150 --> 00:41:51.370
both vertically and horizontally
to fit the available space,

00:41:51.370 --> 00:41:53.100
as defined by its super view.

00:41:53.230 --> 00:41:55.960
So we're going to set the
auto-resizing mask to flexible

00:41:56.400 --> 00:41:58.200
width and flexible height.

00:41:58.250 --> 00:42:00.700
Now, if you're setting up your
view in Interface Builder,

00:42:00.700 --> 00:42:02.000
you can do it there as well.

00:42:02.040 --> 00:42:07.210
And you use what we call springs and
struts in the Interface Builder UI.

00:42:07.370 --> 00:42:09.210
And here,
we're doing the exact same thing

00:42:09.210 --> 00:42:10.550
via those springs and struts.

00:42:10.760 --> 00:42:13.960
So our view has a flexible
height and width and is pinned

00:42:13.960 --> 00:42:16.040
to all four edges of the screen.

00:42:16.080 --> 00:42:19.740
Now, let's say we wanted to create a view
that was flexible in terms of width,

00:42:19.750 --> 00:42:21.800
but was actually pinned to the
bottom of the screen and didn't

00:42:21.960 --> 00:42:22.750
grow and shrink vertically.

00:42:22.810 --> 00:42:26.960
The way we would do that via the
auto-resizing masks would be to use

00:42:26.960 --> 00:42:29.540
flexible width and a flexible top margin.

00:42:29.700 --> 00:42:34.210
So the equivalent setup in Interface
Builder would be this one right here.

00:42:34.300 --> 00:42:37.150
And sometimes this can take a
little trial and error to get right.

00:42:37.200 --> 00:42:39.200
But the nice thing about
doing it in IB is that,

00:42:39.200 --> 00:42:42.770
as you can see, on the right side,
there's a square which grows and shrinks

00:42:42.770 --> 00:42:45.590
as the containing view grows and shrinks.

00:42:45.600 --> 00:42:49.450
So you can sort of simulate what's going
to happen in terms of your view sizing.

00:42:49.500 --> 00:42:52.490
This makes it easier to figure
out what the right settings are.

00:42:52.500 --> 00:42:56.140
So once you've done both of these things,
you're pretty much ready to

00:42:56.260 --> 00:42:57.900
go as far as rotation goes.

00:42:57.940 --> 00:43:00.200
There are some more advanced ways
in which you can customize it,

00:43:00.240 --> 00:43:02.390
which are going to be covered
in the talk I mentioned earlier,

00:43:02.440 --> 00:43:05.350
controls, views, and animation,
tomorrow morning.

00:43:05.610 --> 00:43:08.080
So let's see this in action
with the Recipes app.

00:43:08.150 --> 00:43:09.100
Let's make it rotate.

00:43:09.210 --> 00:43:11.160
So, Alex, one more time.

00:43:11.420 --> 00:43:12.900
One more time.

00:43:13.180 --> 00:43:16.000
All right,
we have the recipes application.

00:43:16.040 --> 00:43:17.940
Let's actually go back to Xcode.

00:43:18.090 --> 00:43:20.370
I'm going to close the tab bar demo.

00:43:20.690 --> 00:43:24.100
Reopen our recipes application.

00:43:24.880 --> 00:43:29.760
And I'm going to run it just to
show you where we're at right now.

00:43:30.010 --> 00:43:34.840
Again, we have the chocolate cake,
the actual recipe, and the photo.

00:43:34.900 --> 00:43:37.150
What happens when I rotate?

00:43:37.260 --> 00:43:40.970
I'm going to go to hardware in
the simulator and rotate left.

00:43:41.090 --> 00:43:44.200
Well, nothing actually happens.

00:43:44.260 --> 00:43:47.500
If I rotate the other way, nope, nothing.

00:43:47.550 --> 00:43:50.900
And none of our actual view
controllers support rotation,

00:43:50.900 --> 00:43:54.580
so rotation is just not going
to do anything at this point.

00:43:54.790 --> 00:43:57.800
Let's go to Xcode and

00:43:58.040 --> 00:43:59.080
Implement rotation.

00:43:59.280 --> 00:44:01.700
Let's make our view controllers rotate.

00:44:01.760 --> 00:44:04.340
As Evan mentioned,
just one method to override in

00:44:04.340 --> 00:44:07.100
the view controller subclass.

00:44:07.140 --> 00:44:10.730
That's the "should auto-rotate
to interface" orientation.

00:44:10.810 --> 00:44:13.200
Another thing Evan mentioned,
do it in every single one

00:44:13.200 --> 00:44:14.430
of your view controllers.

00:44:14.550 --> 00:44:16.200
So we're going to do that.

00:44:16.310 --> 00:44:19.270
In the detail view controller,

00:44:19.680 --> 00:44:20.860
You can do the same thing.

00:44:20.970 --> 00:44:22.640
Should it auto-rotate?

00:44:22.670 --> 00:44:26.140
And in the recipe list, again,
should it auto-rotate?

00:44:26.160 --> 00:44:27.330
Yes, absolutely.

00:44:27.550 --> 00:44:29.940
It should auto-rotate.

00:44:29.960 --> 00:44:31.690
Let's run this.

00:44:31.790 --> 00:44:33.700
Now we're in the recipe list.

00:44:33.770 --> 00:44:35.930
We're going to rotate left,
and there we go.

00:44:36.090 --> 00:44:37.700
We have rotation.

00:44:37.740 --> 00:44:41.690
If I rotate right, and again, it rotates.

00:44:41.880 --> 00:44:43.470
Fantastic.

00:44:43.710 --> 00:44:50.570
The next view, the detail view,
let's try to see how this one rotates.

00:44:51.270 --> 00:44:53.740
As you can see, not quite right.

00:44:53.740 --> 00:44:57.890
This doesn't look quite
the way we want it to look.

00:44:58.100 --> 00:45:01.860
So this is because we haven't
actually set up the springs

00:45:01.860 --> 00:45:03.940
and struts yet for this view.

00:45:04.180 --> 00:45:08.200
Let's go back to Xcode,
or rather actually,

00:45:08.230 --> 00:45:09.180
let's go to Interface Builder.

00:45:09.360 --> 00:45:13.470
We're going to open the Nib file
for this particular view controller.

00:45:13.750 --> 00:45:15.440
And here's the view.

00:45:15.490 --> 00:45:18.660
The first thing we're going to
do is make sure the background

00:45:18.820 --> 00:45:20.380
view is actually set up properly.

00:45:20.610 --> 00:45:25.240
So we're going to go to the Tools menu,
the Size Inspector.

00:45:25.440 --> 00:45:26.680
And this is the background view.

00:45:26.870 --> 00:45:30.610
As we can see, it's pinned to all four
corners-- to all four sides,

00:45:30.610 --> 00:45:34.800
rather-- and flexible height,
flexible width, so we're good.

00:45:34.950 --> 00:45:38.930
Next on the list is the actual text view.

00:45:39.870 --> 00:45:42.840
So this one is not actually
set to size in any kind of way.

00:45:43.000 --> 00:45:48.190
So we're going to pin it to the top,
the left, the bottom, and the right,

00:45:48.400 --> 00:45:52.180
and again,
make it grow in both directions.

00:45:52.190 --> 00:45:54.450
As you can see in the little preview,
great.

00:45:54.470 --> 00:45:57.160
This is actually going to
expand as the view changes size.

00:45:57.420 --> 00:45:58.800
Perfect.

00:45:58.830 --> 00:46:02.660
The button, it is pinned to the
right for some reason.

00:46:02.920 --> 00:46:04.540
We don't really want that.

00:46:04.560 --> 00:46:09.550
All we want to do is to pin it
to the bottom and make it grow.

00:46:10.270 --> 00:46:11.560
Actually, no.

00:46:11.630 --> 00:46:12.960
We don't want to make it grow.

00:46:13.110 --> 00:46:14.690
All we want to do is
pin it to the bottom.

00:46:14.770 --> 00:46:17.110
It's going to stay the same size.

00:46:17.730 --> 00:46:18.360
All right.

00:46:18.400 --> 00:46:20.360
With this, save it.

00:46:20.360 --> 00:46:21.560
That's all we really need to do.

00:46:21.860 --> 00:46:23.600
Let's go back to Xcode.

00:46:23.660 --> 00:46:25.340
Run again.

00:46:26.450 --> 00:46:29.290
And again, this one rotates nicely.

00:46:29.330 --> 00:46:31.900
Still, I haven't broken it yet.

00:46:32.410 --> 00:46:35.640
Press chocolate cake and rotate this one.

00:46:35.720 --> 00:46:39.210
As we can see,
much better layout in here.

00:46:41.140 --> 00:46:44.320
So let's take a look at the next one.

00:46:44.710 --> 00:46:46.600
Except apparently I--

00:46:47.000 --> 00:46:48.970
I made it a little too small.

00:46:49.030 --> 00:46:53.000
Let's actually go ahead and fix it,
'cause this isn't right.

00:46:53.200 --> 00:46:58.290
Let's go back to Interface Builder,
and let's just actually just

00:46:58.340 --> 00:47:00.180
make this a little bigger.

00:47:07.200 --> 00:47:08.560
Let's rotate.

00:47:08.560 --> 00:47:11.200
Yeah, better this time.

00:47:11.200 --> 00:47:12.940
All right.

00:47:13.260 --> 00:47:14.050
Rotating back.

00:47:14.260 --> 00:47:17.950
Let's take a look at the
photo view controller.

00:47:18.190 --> 00:47:19.860
Let's view the picture.

00:47:19.890 --> 00:47:22.240
Looks pretty good in this orientation.

00:47:22.310 --> 00:47:23.960
Let's rotate it.

00:47:24.040 --> 00:47:26.350
Again, not quite right.

00:47:26.540 --> 00:47:28.620
Let's go ahead and fix it.

00:47:29.000 --> 00:47:31.830
Again, this is the one view controller
we set up entirely in code,

00:47:31.920 --> 00:47:33.890
so this is going to be
a little bit different.

00:47:34.010 --> 00:47:36.450
In the recipe for the view controller,

00:47:36.890 --> 00:47:40.360
Again, in the load view method,
we're creating this view.

00:47:40.430 --> 00:47:43.750
What we need to do here is
set the autoresizing masks.

00:47:43.940 --> 00:47:47.840
So we're going to set the
autoresizing masks to flexible height,

00:47:47.890 --> 00:47:52.010
flexible width,
so that it grows with its container view,

00:47:52.010 --> 00:47:53.550
its super view.

00:47:54.270 --> 00:47:57.670
Next thing we're going to do in
addition to that is actually set the

00:47:57.720 --> 00:47:59.340
content mode for the UI image view.

00:47:59.340 --> 00:48:01.900
This is the property of the--

00:48:02.000 --> 00:48:27.400
[Transcript missing]

00:48:28.480 --> 00:48:28.900
There we go.

00:48:28.900 --> 00:48:29.610
We have the image.

00:48:29.750 --> 00:48:32.650
When we rotate, there we go.

00:48:32.830 --> 00:48:36.200
It rotates, scales properly,
and everything.

00:48:36.350 --> 00:48:38.190
And when I go back,

00:48:39.310 --> 00:48:41.940
Everything's there in
the right orientation.

00:48:41.940 --> 00:48:42.680
All right.

00:48:42.690 --> 00:48:47.900
And that's all you need to do to get
rotation in the recipes application.

00:48:47.900 --> 00:48:49.660
Back to you, Evan.

00:48:55.030 --> 00:48:57.700
So as you can see,
using view controllers in your

00:48:57.740 --> 00:49:01.830
application makes it really
easy to support rotation.

00:49:01.870 --> 00:49:04.980
Trust me,
there's a lot of nasty geometry that

00:49:05.110 --> 00:49:08.840
goes into making rotation work nicely,
and if you can avoid writing that code,

00:49:08.840 --> 00:49:12.790
that's a big advantage.

00:49:14.440 --> 00:49:17.530
We'd like to continue extending
the Recipes application.

00:49:17.680 --> 00:49:19.960
So in the session after this one,
in this same room,

00:49:20.010 --> 00:49:22.610
we're going to add some table
views to the Recipes app.

00:49:22.740 --> 00:49:25.800
So at the top level,
we're going to have a list of recipes.

00:49:25.860 --> 00:49:29.690
And at the recipe detail level,
we're going to add a different type of

00:49:29.810 --> 00:49:33.170
table view that allows us to display
the ingredients and other types of

00:49:33.170 --> 00:49:35.300
data more effectively to the user.

00:49:35.390 --> 00:49:38.840
So I'd really encourage you to stick
around and check this session out.

00:49:38.890 --> 00:49:41.060
And then on Thursday,
in the Mastering iPhone

00:49:41.060 --> 00:49:43.520
View Controller session,
we're going to cover some more

00:49:43.520 --> 00:49:45.280
advanced topics with view controllers.

00:49:45.370 --> 00:49:47.340
Specifically,
we're going to customize the navigation

00:49:47.340 --> 00:49:50.610
bar at the top of the screen,
and we're going to combine the

00:49:50.610 --> 00:49:53.790
navigation and tab bar application flows.

00:49:53.900 --> 00:49:56.400
So this is a really common
way to build a really complex,

00:49:56.580 --> 00:49:58.380
full-featured application.

00:49:58.430 --> 00:50:00.090
And there are some other features
which we're going to add,

00:50:00.090 --> 00:50:03.000
which you can't currently see here,
but I really encourage you

00:50:03.000 --> 00:50:04.760
to all come and check it out.

00:50:05.260 --> 00:50:08.340
So that just about wraps things up.

00:50:08.390 --> 00:50:13.200
I'd really like to encourage you all
to embrace the concept of a screenful.

00:50:13.200 --> 00:50:15.940
If you do this,
it's really going to help you to craft a

00:50:15.940 --> 00:50:18.690
great iPhone application user experience.

00:50:18.820 --> 00:50:23.000
And remember, view controllers are your
building blocks for your app.

00:50:23.080 --> 00:50:26.170
Using view controllers to
manage a screenful of content is

00:50:26.170 --> 00:50:29.900
much easier than just figuring
out a way to do it yourself.

00:50:30.020 --> 00:50:34.700
And it makes it much easier to maintain
and manage and extend your code.

00:50:34.810 --> 00:50:37.360
And finally,
it allows you to adopt common application

00:50:37.360 --> 00:50:39.400
flows without needing to roll your own.

00:50:39.590 --> 00:50:42.900
And this isn't just for, you know,
simple demo test apps.

00:50:43.040 --> 00:50:46.100
You know, we actually use this in the
applications that we ship at Apple.

00:50:46.270 --> 00:50:48.340
The iTunes Music Store is
one example of this.

00:50:48.460 --> 00:50:50.720
It's an application that
was developed using view

00:50:50.720 --> 00:50:52.390
controllers from the ground up.

00:50:52.390 --> 00:50:55.940
And this app was developed by
a single engineer in a really

00:50:55.940 --> 00:50:58.400
ridiculously short amount of time.

00:50:58.460 --> 00:51:00.560
And to be fair,
he's a really smart engineer,

00:51:00.790 --> 00:51:02.840
and he was working like 32 hours a day.

00:51:03.070 --> 00:51:07.190
But he was able to focus on what
made that application unique

00:51:07.720 --> 00:51:09.900
rather than reinventing the wheel.

00:51:10.150 --> 00:51:15.790
And you can reap the same benefit in your
application by using view controllers.

00:51:16.310 --> 00:51:19.240
So I'd encourage you to,
if you have more questions that you

00:51:19.240 --> 00:51:22.690
can't get answered here at WWDC,
to talk to Derek Horn.

00:51:22.840 --> 00:51:24.700
I wanted to include a
map to his house here,

00:51:24.700 --> 00:51:26.340
but he wouldn't let me.

00:51:26.550 --> 00:51:28.720
You can send him an email,
or you can also check out the

00:51:28.720 --> 00:51:32.150
view controller documentation
on the iPhone developer website,

00:51:32.260 --> 00:51:36.300
and that has some really great info on
the topics which we just talked about,

00:51:36.300 --> 00:51:40.000
as well as some more advanced
areas of view controllers.

00:51:40.020 --> 00:51:42.100
And again,
I'd like to plug some sessions.

00:51:42.100 --> 00:51:45.500
The table view sessions,
the understanding one is this afternoon,

00:51:45.650 --> 00:51:48.100
and the mastering table view
session is on Friday morning.

00:51:48.120 --> 00:51:50.830
And also,
mastering iPhone view controllers,

00:51:50.950 --> 00:51:55.490
we're going to cover some really cool
topics with view controllers in your app.

00:51:56.100 --> 00:51:57.710
And on top of all that,
we've got a couple of view

00:51:57.780 --> 00:51:59.240
controller-specific labs.

00:51:59.500 --> 00:52:01.610
So if you've got code and you're
using view controllers in your

00:52:01.610 --> 00:52:04.800
app and you've got questions,
drop by, bring your code.

00:52:04.840 --> 00:52:07.430
Alex and I are going to be there
along with a bunch of other engineers,

00:52:07.650 --> 00:52:10.430
and we can help answer your questions.

00:52:10.580 --> 00:52:12.620
So looking forward to see you there.