WEBVTT

00:00:00.506 --> 00:00:05.516
[ Music ]

00:00:06.516 --> 00:00:11.566
[ Cheering and Applause ]

00:00:12.066 --> 00:00:12.836
>> Good afternoon.

00:00:13.916 --> 00:00:15.856
My name is Luke Spicer and today

00:00:15.926 --> 00:00:17.706
my teammate Divya and I are very

00:00:17.706 --> 00:00:19.326
excited to show you how

00:00:19.326 --> 00:00:20.956
HealthKit has expanded our data

00:00:20.956 --> 00:00:22.956
representations in iOS 13.

00:00:23.446 --> 00:00:26.636
As many of you already know,

00:00:26.866 --> 00:00:29.166
HealthKit provides a centralized

00:00:29.206 --> 00:00:30.336
data store for health and

00:00:30.376 --> 00:00:31.936
fitness data while also

00:00:31.936 --> 00:00:33.466
providing interoperability for

00:00:33.466 --> 00:00:34.566
health and fitness apps and

00:00:34.566 --> 00:00:35.396
experiences.

00:00:36.296 --> 00:00:37.576
If you're not already excited

00:00:37.646 --> 00:00:39.366
about using HealthKit, let me

00:00:39.366 --> 00:00:40.786
remind you that there are over

00:00:40.786 --> 00:00:42.936
70,000 apps in the health and

00:00:42.936 --> 00:00:44.116
fitness category on the App

00:00:44.116 --> 00:00:45.876
Store and all of them can

00:00:45.876 --> 00:00:46.926
benefit from the

00:00:46.926 --> 00:00:48.336
interoperability and

00:00:48.336 --> 00:00:49.666
functionality provided by

00:00:49.666 --> 00:00:50.126
HealthKit.

00:00:51.526 --> 00:00:52.686
Today, we're going to show you a

00:00:52.686 --> 00:00:54.046
few things related to data

00:00:54.046 --> 00:00:55.256
representations in HealthKit,

00:00:55.776 --> 00:00:57.286
starting with a review of the

00:00:57.286 --> 00:00:58.206
HealthKit data model.

00:00:58.986 --> 00:01:00.706
Then I'll go into some specific

00:01:00.706 --> 00:01:02.386
APIs focused on quantity data.

00:01:03.656 --> 00:01:04.936
Later, Divya will come out to

00:01:04.936 --> 00:01:05.866
show you beat-to-beat

00:01:05.866 --> 00:01:07.656
measurements, heart rate events,

00:01:08.246 --> 00:01:10.776
and the brand new API's focused

00:01:10.776 --> 00:01:13.026
on hearing health.

00:01:13.206 --> 00:01:15.226
Let's jump right in and start

00:01:15.386 --> 00:01:16.376
with the HealthKit data model.

00:01:17.026 --> 00:01:19.206
In HealthKit, we represent our

00:01:19.206 --> 00:01:22.056
data-- in HealthKit we represent

00:01:22.056 --> 00:01:23.986
our data with samples, which are

00:01:23.986 --> 00:01:25.226
measurements taken at a

00:01:25.226 --> 00:01:27.536
particular time that span some

00:01:27.536 --> 00:01:28.146
time interval.

00:01:29.586 --> 00:01:30.916
Most of these measurements are

00:01:30.916 --> 00:01:33.336
simple measurements, like the

00:01:33.336 --> 00:01:34.906
heart rates measured with Apple

00:01:34.956 --> 00:01:38.576
Watch or body mass measurements

00:01:38.576 --> 00:01:40.906
taken with a connected Bluetooth

00:01:41.996 --> 00:01:42.126
scale.

00:01:42.516 --> 00:01:43.926
Other measurements are more rich

00:01:43.926 --> 00:01:46.106
and complex, like workouts or

00:01:46.106 --> 00:01:47.256
the clinical health records that

00:01:47.256 --> 00:01:48.826
can be downloaded directly to

00:01:48.866 --> 00:01:49.330
iPhone.

00:01:51.656 --> 00:01:54.026
All of these rich complex data

00:01:54.396 --> 00:01:55.716
representations share a common

00:01:55.716 --> 00:01:57.716
structure; a top-level sample

00:01:57.716 --> 00:01:58.576
that's backed by some

00:01:58.576 --> 00:02:00.156
specialized data representation.

00:02:01.076 --> 00:02:04.406
For example, a blood pressure

00:02:04.406 --> 00:02:05.776
measurement can be represented

00:02:05.776 --> 00:02:07.616
with a correlation sample, an

00:02:07.616 --> 00:02:09.346
allergy resource by clinical

00:02:09.346 --> 00:02:12.886
record, and a workout route by a

00:02:12.886 --> 00:02:13.646
series sample.

00:02:14.146 --> 00:02:15.256
All of these are examples of

00:02:15.256 --> 00:02:17.206
specialized sample types that

00:02:17.206 --> 00:02:18.546
all have their own unique

00:02:18.546 --> 00:02:19.666
backing data format.

00:02:20.306 --> 00:02:21.906
For example, the blood pressure

00:02:21.906 --> 00:02:23.276
correlation is a set of blood

00:02:23.276 --> 00:02:24.066
pressure measurements.

00:02:24.526 --> 00:02:25.786
The allergy resource is backed

00:02:25.886 --> 00:02:28.346
by a file resource, and the

00:02:28.346 --> 00:02:30.146
workout route is an array of CL

00:02:30.146 --> 00:02:30.816
location data.

00:02:31.606 --> 00:02:33.226
And just as HealthKit provides

00:02:33.276 --> 00:02:34.166
these specialized data

00:02:34.166 --> 00:02:35.396
representations for these

00:02:35.396 --> 00:02:36.566
special types of measurements,

00:02:37.196 --> 00:02:39.036
we've also expanded our data

00:02:39.036 --> 00:02:40.416
representations for our most

00:02:40.416 --> 00:02:41.556
common type of measurement,

00:02:41.826 --> 00:02:42.806
which are for quantity data.

00:02:43.416 --> 00:02:44.736
So, let's continue by talking

00:02:44.736 --> 00:02:46.486
about quantity data.

00:02:48.076 --> 00:02:50.616
To quickly review, quantity data

00:02:50.616 --> 00:02:51.866
in HealthKit applies to some

00:02:51.866 --> 00:02:53.666
very commonly-measured concepts,

00:02:54.896 --> 00:02:56.706
like walking distance, body

00:02:56.706 --> 00:02:58.166
mass, and heart rate.

00:02:59.036 --> 00:03:00.546
All of these concepts we refer

00:03:00.546 --> 00:03:02.976
to as quantity types and they

00:03:02.976 --> 00:03:03.876
have measurements that look

00:03:03.876 --> 00:03:07.056
something like this, where each

00:03:07.056 --> 00:03:08.596
of these measurements consists

00:03:08.596 --> 00:03:10.346
of a quantity that is a value

00:03:10.596 --> 00:03:12.676
and a unit as well as a date

00:03:12.676 --> 00:03:13.696
interval that tells us the

00:03:13.696 --> 00:03:14.636
interval over which the

00:03:14.636 --> 00:03:15.456
measurement was taken.

00:03:16.446 --> 00:03:17.376
We call each of these

00:03:17.376 --> 00:03:18.726
measurements a quantity sample.

00:03:20.046 --> 00:03:21.386
Throughout this presentation,

00:03:21.596 --> 00:03:22.536
we're going to talk about

00:03:23.216 --> 00:03:24.546
quantity types and quantity

00:03:24.546 --> 00:03:26.496
samples specifically focused on

00:03:26.496 --> 00:03:27.896
how we can efficiently represent

00:03:27.896 --> 00:03:29.706
large numbers of quantities, but

00:03:29.706 --> 00:03:30.476
if you'd like more of an

00:03:30.476 --> 00:03:31.836
introduction to these concepts,

00:03:31.906 --> 00:03:33.056
you can always refer back to our

00:03:33.056 --> 00:03:35.496
2014 presentation, Introducing

00:03:35.496 --> 00:03:35.866
HealthKit.

00:03:37.126 --> 00:03:38.126
To forward our discussion of

00:03:38.126 --> 00:03:39.146
quantity data, I'd like to

00:03:39.146 --> 00:03:40.016
describe a scenario.

00:03:40.956 --> 00:03:42.326
If you would, please imagine

00:03:42.436 --> 00:03:44.276
that together we're working on a

00:03:44.276 --> 00:03:45.086
brand-new app.

00:03:45.906 --> 00:03:47.096
This app connects to a

00:03:47.096 --> 00:03:48.416
never-before-seen heart rate

00:03:48.416 --> 00:03:49.916
sensor that's been built right

00:03:49.916 --> 00:03:51.236
into a video game controller.

00:03:51.956 --> 00:03:53.686
Our task is to take measurements

00:03:53.686 --> 00:03:55.286
from this heart sensor and save

00:03:55.286 --> 00:03:56.366
them to HealthKit so that our

00:03:56.366 --> 00:03:57.586
users can see what their heart

00:03:57.586 --> 00:03:58.956
rate was when they play any

00:03:58.956 --> 00:03:59.726
particular game.

00:04:00.276 --> 00:04:02.576
The heart rates that we're

00:04:02.576 --> 00:04:03.856
receiving from the sensor might

00:04:03.856 --> 00:04:05.276
look something like this; a

00:04:05.276 --> 00:04:06.436
sequence of measurements that

00:04:06.436 --> 00:04:07.956
are coming into our app over

00:04:07.956 --> 00:04:09.206
time while the user plays.

00:04:09.696 --> 00:04:10.746
And we have to decide how we

00:04:10.746 --> 00:04:12.076
want to represent this data so

00:04:12.076 --> 00:04:12.936
that we can save it to

00:04:12.936 --> 00:04:13.346
HealthKit.

00:04:14.656 --> 00:04:15.816
One approach that we could take

00:04:16.005 --> 00:04:17.286
would be to use a single

00:04:17.315 --> 00:04:19.156
quantity sample and that might

00:04:19.156 --> 00:04:20.336
look something like this.

00:04:21.326 --> 00:04:22.516
This single quantity sample

00:04:22.516 --> 00:04:23.866
spans the entire measurement

00:04:23.866 --> 00:04:25.546
interval, that is the entire

00:04:25.646 --> 00:04:27.156
duration of the game, and

00:04:27.156 --> 00:04:28.056
represents all of the

00:04:28.056 --> 00:04:29.116
measurements we received from

00:04:29.116 --> 00:04:30.246
our sensor with a single

00:04:30.246 --> 00:04:30.606
quantity.

00:04:30.936 --> 00:04:31.776
Maybe an average.

00:04:32.856 --> 00:04:34.606
This representation gives us an

00:04:34.606 --> 00:04:36.456
object to represent the

00:04:36.456 --> 00:04:37.456
measurement we took, which was

00:04:37.456 --> 00:04:38.546
the heart rate during this game,

00:04:39.206 --> 00:04:40.666
but if later we want to see

00:04:40.666 --> 00:04:41.826
changes in heart rate over the

00:04:41.826 --> 00:04:42.846
game, we won't have the

00:04:42.846 --> 00:04:44.166
resolution to do that with this

00:04:44.166 --> 00:04:44.856
representation.

00:04:46.436 --> 00:04:47.646
Another representation we could

00:04:47.646 --> 00:04:49.506
take is to use multiple quantity

00:04:49.506 --> 00:04:50.746
samples and that might look

00:04:50.746 --> 00:04:52.816
something like this, where every

00:04:52.816 --> 00:04:54.416
measurement is represented by a

00:04:54.416 --> 00:04:55.646
different quantity sample.

00:04:56.586 --> 00:04:57.996
This representation will allow

00:04:57.996 --> 00:04:59.536
us to keep the full resolution

00:04:59.536 --> 00:05:01.396
measured by our sensor, but it

00:05:01.396 --> 00:05:02.836
is not an efficient

00:05:02.836 --> 00:05:03.996
representation of this data

00:05:04.086 --> 00:05:05.336
because we have redundancy.

00:05:05.976 --> 00:05:07.276
All of these quantity samples

00:05:07.456 --> 00:05:08.786
have identical metadata and

00:05:08.786 --> 00:05:11.536
device information and we no

00:05:11.536 --> 00:05:12.606
longer have that single

00:05:12.606 --> 00:05:13.596
convenient object that

00:05:13.596 --> 00:05:14.716
represents the measurement that

00:05:14.716 --> 00:05:15.986
we actually took, which was the

00:05:15.986 --> 00:05:17.406
heart rate during the game.

00:05:18.476 --> 00:05:20.186
Thankfully, we have a third

00:05:20.186 --> 00:05:21.466
approach that we can take that

00:05:21.466 --> 00:05:23.146
we call quantity series.

00:05:23.926 --> 00:05:24.676
The quantity series

00:05:24.676 --> 00:05:26.436
representation looks something

00:05:26.436 --> 00:05:27.016
like this.

00:05:27.976 --> 00:05:29.736
Again, a single quantity sample

00:05:29.736 --> 00:05:30.816
that spans our entire

00:05:30.816 --> 00:05:32.606
measurement interval, but in

00:05:32.606 --> 00:05:33.936
this case, instead of holding a

00:05:34.006 --> 00:05:35.206
single quantity, it can be

00:05:35.206 --> 00:05:36.876
backed by multiple quantities.

00:05:37.926 --> 00:05:40.026
This representation gives us the

00:05:40.026 --> 00:05:41.236
best of both of the previous

00:05:41.236 --> 00:05:42.946
approaches; a single object to

00:05:42.946 --> 00:05:44.746
represent our measurement that

00:05:44.746 --> 00:05:46.076
keeps the full resolution

00:05:46.436 --> 00:05:47.606
measure-- taken by our sensor.

00:05:48.626 --> 00:05:50.116
And notice that we've moved

00:05:50.326 --> 00:05:51.396
those redundant pieces of

00:05:51.396 --> 00:05:53.006
information that were previously

00:05:53.006 --> 00:05:54.086
on the individual quantity

00:05:54.086 --> 00:05:55.276
samples, so we only store a

00:05:55.276 --> 00:05:56.896
single copy at the quantity

00:05:56.956 --> 00:05:57.836
series sample level.

00:05:58.626 --> 00:05:59.886
We all want to be respectful of

00:05:59.886 --> 00:06:01.956
our users' device storage and

00:06:01.956 --> 00:06:03.446
device performance and this

00:06:03.446 --> 00:06:04.886
representation allows us to do

00:06:05.526 --> 00:06:05.626
that.

00:06:06.536 --> 00:06:08.256
Because a quantity series sample

00:06:08.286 --> 00:06:10.316
is a quantity sample, we need a

00:06:10.316 --> 00:06:13.016
way to represent the sequence of

00:06:13.016 --> 00:06:14.636
quantities with a single value

00:06:15.116 --> 00:06:16.246
and in HealthKit we do that

00:06:16.246 --> 00:06:17.206
through a technique called

00:06:17.206 --> 00:06:17.866
aggregation.

00:06:19.076 --> 00:06:20.416
We have two primary aggregation

00:06:20.416 --> 00:06:22.726
styles; cumulative and discrete.

00:06:23.416 --> 00:06:24.826
The cumulative aggregation style

00:06:25.026 --> 00:06:26.206
applies to some very common

00:06:26.206 --> 00:06:27.886
quantity types, like distances,

00:06:28.016 --> 00:06:29.146
calories, and steps.

00:06:30.026 --> 00:06:31.326
All of these quantity types are

00:06:31.326 --> 00:06:32.916
constantly being accumulated by

00:06:32.916 --> 00:06:34.106
our users who are taking more

00:06:34.106 --> 00:06:35.676
steps and burning more calories

00:06:35.676 --> 00:06:37.966
and moving more distance and a

00:06:37.966 --> 00:06:39.836
natural way to accumulate-- to

00:06:39.836 --> 00:06:41.206
aggregate multiple quantities

00:06:41.206 --> 00:06:42.986
for these types is with a sum.

00:06:44.856 --> 00:06:46.546
On the other hand, we have some

00:06:46.576 --> 00:06:48.096
other common quantity types for

00:06:48.096 --> 00:06:49.456
which a sum doesn't make sense.

00:06:50.126 --> 00:06:51.976
For example, heart rate, body

00:06:51.976 --> 00:06:54.506
mass, and height won't mean

00:06:54.506 --> 00:06:55.796
anything when summed together.

00:06:55.876 --> 00:06:57.056
If you take multiple heart rates

00:06:57.056 --> 00:06:58.206
over a day and add them up,

00:06:58.806 --> 00:07:00.026
you'll get a nonsense value.

00:07:00.546 --> 00:07:01.616
It's much more natural to

00:07:01.616 --> 00:07:03.856
aggregate quantity types like

00:07:03.856 --> 00:07:05.396
this with an average and maybe

00:07:05.396 --> 00:07:06.786
some other aggregating

00:07:06.786 --> 00:07:08.606
statistics, like minimum,

00:07:08.606 --> 00:07:10.116
maximum, and most recent value.

00:07:10.686 --> 00:07:14.296
Again, we can see that a

00:07:14.296 --> 00:07:16.326
sequence of cumulative

00:07:16.326 --> 00:07:18.166
quantities can be represented

00:07:18.166 --> 00:07:20.316
and aggregated by a sum and a

00:07:20.316 --> 00:07:21.886
series of discrete quantities

00:07:21.976 --> 00:07:23.566
like heart rates are going to be

00:07:23.566 --> 00:07:25.606
aggregated to produce some

00:07:25.606 --> 00:07:27.196
rising statistics, like minimum,

00:07:27.536 --> 00:07:28.846
maximum, average, and most

00:07:28.846 --> 00:07:29.366
recent value.

00:07:29.956 --> 00:07:32.826
In HealthKit, we use quantity

00:07:32.826 --> 00:07:34.246
aggregation style to tell us the

00:07:34.246 --> 00:07:35.386
aggregation style for a

00:07:35.386 --> 00:07:36.456
particular quantity type.

00:07:37.156 --> 00:07:39.586
And in iOS 13, we've decided to

00:07:39.586 --> 00:07:40.716
deprecate the discrete

00:07:40.716 --> 00:07:43.716
aggregation style in favor of a

00:07:43.716 --> 00:07:45.216
new discrete arithmetic

00:07:45.276 --> 00:07:46.396
aggregation style.

00:07:46.786 --> 00:07:48.226
We've done this to make clear

00:07:48.226 --> 00:07:49.726
that the average calculated for

00:07:49.726 --> 00:07:51.476
this aggregation style is the

00:07:51.476 --> 00:07:52.646
simple arithmetic mean.

00:07:53.566 --> 00:07:55.356
We've also introduced a couple

00:07:55.356 --> 00:07:56.636
of new aggregation styles,

00:07:56.856 --> 00:07:57.526
starting with

00:07:57.846 --> 00:07:59.636
discreteTemporallyWeighted, a

00:07:59.636 --> 00:08:01.186
special aggregation style that

00:08:01.186 --> 00:08:02.726
uses a time-weighted average

00:08:02.906 --> 00:08:04.296
that we apply when aggregating

00:08:04.296 --> 00:08:05.146
heart rate quantities.

00:08:06.426 --> 00:08:07.266
We've also added

00:08:07.356 --> 00:08:08.526
discreteEquivalent

00:08:08.526 --> 00:08:10.546
ContinuousLevel, a special

00:08:10.546 --> 00:08:11.666
aggregation style that gets

00:08:11.666 --> 00:08:13.196
applied to audio exposure

00:08:13.196 --> 00:08:13.636
quantities.

00:08:14.346 --> 00:08:15.446
Divya's going to go into more

00:08:15.446 --> 00:08:16.776
detail about audio exposure

00:08:16.776 --> 00:08:17.256
later on.

00:08:17.846 --> 00:08:20.976
Now that we know how to

00:08:20.976 --> 00:08:23.176
aggregate multiple quantities to

00:08:23.176 --> 00:08:24.656
produce some rising statistics,

00:08:24.946 --> 00:08:26.226
we need somewhere to store this

00:08:26.226 --> 00:08:27.416
information on our quantity

00:08:27.416 --> 00:08:27.826
sample.

00:08:28.746 --> 00:08:30.346
And we've done this in iOS 13 by

00:08:30.346 --> 00:08:31.686
introducing two new quantity

00:08:31.686 --> 00:08:33.626
sample subclasses, starting with

00:08:33.626 --> 00:08:34.856
cumulative quantity sample,

00:08:34.936 --> 00:08:36.706
which has a sum property, and

00:08:36.706 --> 00:08:38.456
discrete quantity sample, which

00:08:38.456 --> 00:08:41.525
has a average, minimum, maximum,

00:08:41.525 --> 00:08:42.515
and most recent quantity

00:08:42.515 --> 00:08:42.956
properties.

00:08:43.926 --> 00:08:45.936
We've also made quantity sample

00:08:46.156 --> 00:08:48.006
an abstract base class, which

00:08:48.006 --> 00:08:49.476
means that from now on all

00:08:49.476 --> 00:08:50.966
instances of quantity sample

00:08:50.966 --> 00:08:52.486
that you interact with will be

00:08:52.486 --> 00:08:54.476
one of these two quantity sample

00:08:54.476 --> 00:08:56.156
subclasses, depending on the

00:08:56.156 --> 00:08:57.396
quantity type's aggregation

00:08:57.396 --> 00:08:57.746
style.

00:08:58.966 --> 00:09:01.056
And also I want to note that all

00:09:01.056 --> 00:09:02.296
quantity samples can be thought

00:09:02.296 --> 00:09:04.176
of as quantity series, some of

00:09:04.176 --> 00:09:05.686
which just happen to have a

00:09:05.686 --> 00:09:07.756
count of 1.

00:09:07.956 --> 00:09:09.096
We've also introduced

00:09:09.096 --> 00:09:10.786
corresponding predicate keypaths

00:09:10.946 --> 00:09:12.016
for both of these new sample

00:09:12.016 --> 00:09:15.156
types so that you can query for

00:09:15.156 --> 00:09:16.696
corresponding properties of both

00:09:16.696 --> 00:09:17.426
of these samples.

00:09:18.836 --> 00:09:19.766
Going back to our quantity

00:09:19.766 --> 00:09:21.876
series sample example, we can

00:09:21.946 --> 00:09:23.716
see that quantity series sample

00:09:23.776 --> 00:09:24.766
can be summarized with our

00:09:24.766 --> 00:09:26.476
aggregating statistics, average,

00:09:26.476 --> 00:09:27.776
min, max, and most recent value.

00:09:29.186 --> 00:09:30.236
Now I'd like to show you how we

00:09:30.236 --> 00:09:31.756
go about building this quantity

00:09:31.756 --> 00:09:32.106
series.

00:09:32.746 --> 00:09:35.026
We're going to start our

00:09:35.026 --> 00:09:36.406
quantity series at the time that

00:09:36.406 --> 00:09:37.346
our measurement starts.

00:09:37.806 --> 00:09:38.906
In this scenario, it's at the

00:09:38.906 --> 00:09:39.576
start of a game.

00:09:40.716 --> 00:09:42.426
Then, we'll receive measurements

00:09:42.426 --> 00:09:43.536
from our sensor which we can

00:09:43.536 --> 00:09:45.126
insert into this quantity series

00:09:45.276 --> 00:09:46.686
and we can continue to take

00:09:46.686 --> 00:09:47.836
measurements from our sensor and

00:09:47.836 --> 00:09:48.846
insert them into the quantity

00:09:48.846 --> 00:09:50.756
series as long as the game is

00:09:50.756 --> 00:09:51.256
being played.

00:09:52.506 --> 00:09:53.486
Finally, when we're done

00:09:53.486 --> 00:09:55.006
measuring, we can end the

00:09:55.006 --> 00:09:57.116
quantity series and get back the

00:09:57.116 --> 00:09:58.426
summarizing quantity series

00:09:58.426 --> 00:09:59.000
sample.

00:10:01.546 --> 00:10:02.446
Now let's see what this looks

00:10:02.446 --> 00:10:02.986
like in code.

00:10:03.576 --> 00:10:07.006
Our first step, as with all

00:10:07.006 --> 00:10:08.706
HealthKit interaction is to

00:10:08.706 --> 00:10:09.946
request authorization for the

00:10:09.946 --> 00:10:11.686
data types that we plan to read

00:10:11.686 --> 00:10:12.096
and write.

00:10:12.366 --> 00:10:13.416
In this case, we're going to

00:10:13.416 --> 00:10:14.836
request authorization for heart

00:10:14.836 --> 00:10:15.056
rate.

00:10:16.096 --> 00:10:16.736
Once we've requested

00:10:16.736 --> 00:10:19.096
authorization, we can create our

00:10:19.096 --> 00:10:20.496
quantity series sample builder

00:10:20.566 --> 00:10:21.866
with our healthStore, the data

00:10:21.866 --> 00:10:23.366
type, the start date of

00:10:23.366 --> 00:10:25.296
measurement, and an optional HK

00:10:25.856 --> 00:10:26.000
device.

00:10:27.376 --> 00:10:29.096
Then, as long as we're receiving

00:10:29.096 --> 00:10:30.376
measurements from our sensor, we

00:10:30.456 --> 00:10:31.756
can insert those into our

00:10:31.756 --> 00:10:33.036
quantity series sample builder.

00:10:33.536 --> 00:10:35.156
And, finally, at the end of the

00:10:35.156 --> 00:10:36.736
game, we can finish our quantity

00:10:36.736 --> 00:10:38.516
series sample builder with

00:10:38.516 --> 00:10:39.986
optional metadata and the end

00:10:39.986 --> 00:10:40.816
date for our measurement.

00:10:41.326 --> 00:10:44.276
Now that we've thought about how

00:10:44.276 --> 00:10:45.396
we can efficiently represent

00:10:45.396 --> 00:10:46.576
quantity data and save it to

00:10:46.576 --> 00:10:47.886
HealthKit as a quantity series,

00:10:48.156 --> 00:10:49.086
we can think about the

00:10:49.086 --> 00:10:50.776
experiences we can bring to our

00:10:50.776 --> 00:10:52.086
app with the data once it's

00:10:52.086 --> 00:10:52.806
saved to HealthKit.

00:10:53.836 --> 00:10:55.016
Maybe we want to give our app

00:10:55.016 --> 00:10:56.846
the ability to record calorie

00:10:56.846 --> 00:10:58.026
information in addition to heart

00:10:58.026 --> 00:10:59.706
rate so that we can show our

00:10:59.706 --> 00:11:01.806
users the total calories that

00:11:01.806 --> 00:11:02.766
they burned in some time

00:11:02.766 --> 00:11:04.746
interval or just present some

00:11:04.746 --> 00:11:06.276
amazing graphs and charts that

00:11:06.276 --> 00:11:07.346
highlight and help them

00:11:07.346 --> 00:11:08.156
visualize their data.

00:11:08.156 --> 00:11:10.406
Or we want to point out averages

00:11:10.406 --> 00:11:11.676
that have been recorded over a

00:11:11.676 --> 00:11:12.316
time period.

00:11:12.896 --> 00:11:15.736
Or help users see the minimum

00:11:15.736 --> 00:11:16.966
and maximum value that they hit

00:11:16.966 --> 00:11:17.916
during a particular game.

00:11:19.096 --> 00:11:20.786
Or we just want to keep our UI

00:11:20.926 --> 00:11:23.036
live and up to date as new data

00:11:23.036 --> 00:11:24.716
is being recorded as it's

00:11:24.716 --> 00:11:25.606
received from our sensor.

00:11:26.216 --> 00:11:29.526
We can do all of this and more

00:11:29.586 --> 00:11:30.966
with a single HealthKit query.

00:11:33.036 --> 00:11:35.156
HKStatisticsCollectionQuery.

00:11:36.586 --> 00:11:37.946
Many of you are already familiar

00:11:37.946 --> 00:11:39.276
with StatisticsCollectionQuery,

00:11:39.806 --> 00:11:41.576
but it's pretty amazing, so I

00:11:41.576 --> 00:11:43.196
just wanted to reiterate what

00:11:43.196 --> 00:11:43.836
it's capable of.

00:11:44.616 --> 00:11:46.336
StatisticsCollectionQuery can

00:11:46.336 --> 00:11:48.096
help you calculate multiple

00:11:48.096 --> 00:11:49.986
statistics that can be separated

00:11:49.986 --> 00:11:51.776
by the source of data and you

00:11:51.776 --> 00:11:53.296
can receive updates to those

00:11:53.296 --> 00:11:55.186
statistics as new data is saved

00:11:55.186 --> 00:11:55.636
to HealthKit.

00:11:56.956 --> 00:11:58.946
And if that wasn't enough, we've

00:11:58.946 --> 00:11:59.846
also updated

00:11:59.846 --> 00:12:01.236
StatisticsCollectionQuery to

00:12:01.236 --> 00:12:02.566
support all of our new

00:12:02.566 --> 00:12:04.346
aggregation styles and to

00:12:04.416 --> 00:12:06.126
automatically include all of the

00:12:06.126 --> 00:12:08.896
backing quantity data that is

00:12:09.066 --> 00:12:10.486
stored in quantity series

00:12:10.486 --> 00:12:10.896
samples.

00:12:11.886 --> 00:12:13.796
If you want more information on

00:12:13.896 --> 00:12:15.466
StatisticsCollectionQuery and

00:12:15.466 --> 00:12:17.136
HKStatistics, you can always

00:12:17.136 --> 00:12:18.556
refer back to Introducing

00:12:18.556 --> 00:12:18.936
HealthKit.

00:12:19.426 --> 00:12:21.066
Even though

00:12:21.756 --> 00:12:24.116
StatisticsCollectionQuery should

00:12:24.116 --> 00:12:25.996
be our go-to tool to efficiently

00:12:25.996 --> 00:12:27.166
interact with quantity data

00:12:27.166 --> 00:12:28.326
that's been saved to HealthKit,

00:12:29.546 --> 00:12:31.496
sometimes we really do want to

00:12:31.496 --> 00:12:33.076
enumerate every single quantity

00:12:33.256 --> 00:12:34.356
that are stored in quantity

00:12:34.356 --> 00:12:34.726
series.

00:12:35.516 --> 00:12:36.846
For example, if we want to do

00:12:36.846 --> 00:12:38.906
something like plot every single

00:12:38.906 --> 00:12:40.236
heart rate that was measured by

00:12:40.236 --> 00:12:41.316
our application while a user

00:12:41.316 --> 00:12:41.896
played the game.

00:12:43.046 --> 00:12:44.696
We can do this with

00:12:45.216 --> 00:12:46.926
QuantitySeriesSampleQuery.

00:12:48.056 --> 00:12:49.536
In iOS 13, we've enhanced

00:12:49.536 --> 00:12:51.156
QuantitySeriesSampleQuery by

00:12:51.156 --> 00:12:52.836
replacing the quantity sample

00:12:52.836 --> 00:12:55.026
argument with a quantity type in

00:12:55.636 --> 00:12:56.316
NSPredicate.

00:12:58.056 --> 00:12:59.356
Now, instead of simply

00:12:59.356 --> 00:13:00.876
enumerating the quantities for a

00:13:00.876 --> 00:13:02.406
single quantity sample, you can

00:13:02.406 --> 00:13:03.806
enumerate multiple quantity

00:13:03.806 --> 00:13:05.366
samples and all of their backing

00:13:05.366 --> 00:13:05.966
quantity data.

00:13:07.466 --> 00:13:08.976
We've also updated the date

00:13:08.976 --> 00:13:10.246
parameter with a date interval,

00:13:10.436 --> 00:13:11.356
so you get the full date

00:13:11.356 --> 00:13:12.446
interval for every single

00:13:12.446 --> 00:13:13.386
quantity while it's being

00:13:13.386 --> 00:13:13.856
enumerated.

00:13:14.426 --> 00:13:16.026
And we also have an optional

00:13:16.096 --> 00:13:17.746
quantity sample parameter which

00:13:17.746 --> 00:13:19.806
can give you the quantity series

00:13:19.836 --> 00:13:21.036
sample that is currently being

00:13:21.036 --> 00:13:21.506
enumerated.

00:13:22.006 --> 00:13:25.536
This query is best explained

00:13:25.536 --> 00:13:26.916
visually, so I'd like to show

00:13:26.916 --> 00:13:27.456
you this.

00:13:28.306 --> 00:13:30.096
Here we have two quantity series

00:13:30.126 --> 00:13:30.496
samples.

00:13:31.076 --> 00:13:32.636
The first quantity series sample

00:13:32.666 --> 00:13:33.846
consists of quantities that were

00:13:33.846 --> 00:13:35.346
measured with the heart sensor

00:13:35.466 --> 00:13:36.516
built into our video game

00:13:36.516 --> 00:13:36.976
controller.

00:13:38.206 --> 00:13:39.966
And the second series consists

00:13:39.966 --> 00:13:41.196
of quantities measured on Apple

00:13:41.196 --> 00:13:41.596
Watch.

00:13:42.126 --> 00:13:43.316
Because our user happened to be

00:13:43.316 --> 00:13:44.306
using both devices

00:13:44.306 --> 00:13:46.436
simultaneously, these series

00:13:46.436 --> 00:13:48.946
overlap each other in time.

00:13:49.006 --> 00:13:49.746
By default, the

00:13:49.746 --> 00:13:51.136
QuantitySeriesSampleQuery is

00:13:51.136 --> 00:13:52.346
going to enumerate all of the

00:13:52.346 --> 00:13:53.936
quantities from both of these

00:13:53.936 --> 00:13:55.026
quantity series in the

00:13:55.026 --> 00:13:56.326
quantity's start date order.

00:13:56.686 --> 00:13:57.226
Like this.

00:13:58.176 --> 00:13:59.616
And note that at the end of the

00:13:59.616 --> 00:14:02.036
quantity series, the done

00:14:02.036 --> 00:14:04.696
parameter is set to true.

00:14:04.846 --> 00:14:06.736
If you need access to properties

00:14:06.946 --> 00:14:08.306
on the quantity series samples

00:14:08.306 --> 00:14:09.656
themselves, like device

00:14:09.656 --> 00:14:10.866
information, source, revision,

00:14:10.866 --> 00:14:12.826
or metadata, you can set include

00:14:12.866 --> 00:14:14.676
sample to true on the query

00:14:14.676 --> 00:14:15.556
before executing it.

00:14:16.156 --> 00:14:17.296
And notice that, in this case,

00:14:17.406 --> 00:14:18.676
while enumerating these quantity

00:14:18.676 --> 00:14:20.266
series you can get the

00:14:20.266 --> 00:14:21.656
corresponding quantity series

00:14:21.696 --> 00:14:22.866
sample in the quantities

00:14:22.866 --> 00:14:23.186
handler.

00:14:26.966 --> 00:14:28.326
Now that we've seen how we can

00:14:28.326 --> 00:14:29.406
efficiently interact with

00:14:29.406 --> 00:14:30.696
quantity data using quantity

00:14:30.696 --> 00:14:31.966
series, I'd like to show you how

00:14:31.966 --> 00:14:33.236
easy it is to add support for

00:14:33.236 --> 00:14:34.586
this to the game that we've been

00:14:34.586 --> 00:14:35.426
talking about in this

00:14:35.426 --> 00:14:35.996
presentation.

00:14:36.836 --> 00:14:38.036
Follow me over to Xcode and I'll

00:14:38.036 --> 00:14:38.816
show you a brief demo.

00:14:44.486 --> 00:14:46.146
What I have here is our game in

00:14:46.146 --> 00:14:47.576
its current form.

00:14:48.136 --> 00:14:49.776
I don't actually have a heart

00:14:49.776 --> 00:14:51.506
rate sensor that's been built

00:14:51.506 --> 00:14:52.746
into a video game controller,

00:14:52.826 --> 00:14:53.746
but if any of you want to make

00:14:53.746 --> 00:14:55.006
one, come find me after.

00:14:55.696 --> 00:14:57.656
I do have another external heart

00:14:57.656 --> 00:14:59.186
sensor that I can use to get

00:14:59.186 --> 00:15:00.966
information into this app.

00:15:00.966 --> 00:15:02.486
And remember the quantity series

00:15:02.486 --> 00:15:04.106
can be applied to any quantity

00:15:04.106 --> 00:15:05.396
type, not just heart rate, and

00:15:05.766 --> 00:15:06.816
the data can come from an

00:15:06.816 --> 00:15:08.206
external sensor, an external

00:15:08.206 --> 00:15:10.796
database, a file on disk, or

00:15:11.296 --> 00:15:12.736
just be directly entered by your

00:15:13.906 --> 00:15:14.016
app.

00:15:14.376 --> 00:15:15.916
In this game, we have two tabs.

00:15:16.916 --> 00:15:18.346
First, the Play tab brings up

00:15:18.346 --> 00:15:19.536
the PlayViewController where we

00:15:19.536 --> 00:15:20.196
can play our game.

00:15:20.196 --> 00:15:22.446
And the second tab, the Last

00:15:22.446 --> 00:15:23.816
Game tab, brings up the

00:15:23.816 --> 00:15:24.886
ResultsViewController, which

00:15:24.886 --> 00:15:25.946
will show us the heart rates

00:15:25.946 --> 00:15:26.776
that were measured during the

00:15:26.776 --> 00:15:28.686
most recently played game.

00:15:30.786 --> 00:15:31.946
I'm going to go ahead and switch

00:15:31.946 --> 00:15:33.076
back to the PlayViewController

00:15:33.076 --> 00:15:34.446
to show you what a round of the

00:15:34.446 --> 00:15:35.116
game looks like.

00:15:35.716 --> 00:15:38.376
In this game, I'm trying to

00:15:38.376 --> 00:15:40.046
click these hot dogs and not hit

00:15:40.046 --> 00:15:40.516
the broccoli.

00:15:41.136 --> 00:15:42.266
Might seem a bit backwards for a

00:15:42.266 --> 00:15:43.796
health app, but this is what I

00:15:43.796 --> 00:15:44.000
have.

00:15:45.486 --> 00:15:47.226
Every hot dog that I get scores

00:15:47.226 --> 00:15:48.626
another point and my heart rate

00:15:48.626 --> 00:15:50.116
has a tendency to increase while

00:15:50.116 --> 00:15:51.236
I play.

00:15:51.426 --> 00:15:52.606
If I switch back to the Last

00:15:52.606 --> 00:15:53.776
Game tab, I can see we don't yet

00:15:53.776 --> 00:15:54.946
have any heart rate data being

00:15:54.946 --> 00:15:55.956
measured while I played that

00:15:55.956 --> 00:15:56.466
last game.

00:15:56.856 --> 00:15:57.916
We'd like to add that support to

00:15:57.916 --> 00:15:58.456
our app now.

00:15:59.626 --> 00:16:01.006
Our first step is going to

00:16:01.006 --> 00:16:02.646
have-- be to have our app

00:16:02.646 --> 00:16:04.136
request authorization, just like

00:16:04.136 --> 00:16:05.296
we saw in the presentation.

00:16:05.916 --> 00:16:07.666
And because our app is all about

00:16:08.126 --> 00:16:09.356
writing and reading heart rate

00:16:09.356 --> 00:16:11.026
data while users play, I want to

00:16:11.026 --> 00:16:12.096
do this request for

00:16:12.096 --> 00:16:14.396
authorization as soon as my app

00:16:14.436 --> 00:16:15.476
finishes launching, so I'm going

00:16:15.476 --> 00:16:17.086
to add this in application

00:16:17.086 --> 00:16:18.776
didFinishLaunchingWithOptions in

00:16:18.776 --> 00:16:19.500
my app delegate.

00:16:22.516 --> 00:16:24.646
Here I'm requesting-- I'm

00:16:24.646 --> 00:16:26.146
creating a set of quantity types

00:16:26.146 --> 00:16:28.026
specifically for heart rate so

00:16:28.026 --> 00:16:29.576
that I can request authorization

00:16:29.576 --> 00:16:31.256
within HK healthStore for these

00:16:31.256 --> 00:16:31.886
sample types.

00:16:32.426 --> 00:16:35.176
After we request authorization,

00:16:35.266 --> 00:16:36.426
we can get measurements from our

00:16:36.426 --> 00:16:38.466
sensor and save that data to a

00:16:38.466 --> 00:16:39.136
quantity series.

00:16:40.046 --> 00:16:41.246
I've already created a class

00:16:41.246 --> 00:16:42.726
that encapsulates the connection

00:16:42.996 --> 00:16:44.316
to my external sensor and, if

00:16:44.316 --> 00:16:45.416
you want to see how that works,

00:16:45.586 --> 00:16:46.496
you can always check out the

00:16:46.496 --> 00:16:47.976
sample project associated with

00:16:47.976 --> 00:16:48.436
this session.

00:16:49.396 --> 00:16:50.806
I'm going to switch over to the

00:16:50.806 --> 00:16:52.396
PlayViewController now because

00:16:52.396 --> 00:16:53.826
we want to add the connection to

00:16:53.826 --> 00:16:55.406
record heart rate while the user

00:16:55.406 --> 00:16:55.956
plays a game.

00:16:55.956 --> 00:16:57.446
I'm going to open the project

00:16:57.446 --> 00:16:58.956
navigator and switch over to our

00:16:58.956 --> 00:16:59.736
PlayViewController.

00:17:01.256 --> 00:17:02.216
In the PlayViewController, I

00:17:02.216 --> 00:17:03.566
have a function, startNewGame,

00:17:03.566 --> 00:17:04.536
that's called whenever that

00:17:04.536 --> 00:17:06.096
Start Game button is pressed in

00:17:06.096 --> 00:17:06.316
our app.

00:17:06.816 --> 00:17:08.146
This is a great place for us to

00:17:08.146 --> 00:17:09.076
create a connection to our

00:17:09.076 --> 00:17:11.165
external heart sensor and start

00:17:11.165 --> 00:17:12.406
our quantity series-- our

00:17:12.406 --> 00:17:13.806
quantity series sample builder.

00:17:14.606 --> 00:17:15.506
First, I'm going to create the

00:17:15.506 --> 00:17:17.000
connection to my sensor.

00:17:20.195 --> 00:17:21.915
This HeartSensorSession is the

00:17:21.915 --> 00:17:23.036
class that I mentioned earlier

00:17:23.036 --> 00:17:24.425
that I wrote that encapsulates

00:17:24.425 --> 00:17:25.816
the connection to my sensor and

00:17:25.816 --> 00:17:26.336
I'm setting the

00:17:26.336 --> 00:17:28.076
PlayViewController itself as the

00:17:28.076 --> 00:17:28.736
delegate of the

00:17:28.736 --> 00:17:30.000
HeartSensorSession.

00:17:31.046 --> 00:17:32.716
Now I can start my quantity

00:17:32.716 --> 00:17:34.356
series sample builder for heart

00:17:34.806 --> 00:17:35.000
rate.

00:17:36.636 --> 00:17:38.106
Here I'm creating a quantity

00:17:38.106 --> 00:17:39.296
series sample builder with my

00:17:39.296 --> 00:17:40.606
healthStore for the heart rate

00:17:40.606 --> 00:17:41.896
type where the start date of

00:17:41.896 --> 00:17:43.076
measurement is the current date

00:17:43.386 --> 00:17:44.906
and I'm getting my HK device

00:17:44.906 --> 00:17:45.706
information from the

00:17:45.706 --> 00:17:46.436
HeartSensorSession.

00:17:47.726 --> 00:17:48.626
The HeartSensorSession

00:17:48.626 --> 00:17:49.446
communicates to the

00:17:49.446 --> 00:17:50.486
PlayViewController through its

00:17:50.486 --> 00:17:52.216
delegate protocol,

00:17:53.216 --> 00:17:54.366
HeartSensorSessionDelegate,

00:17:54.606 --> 00:17:56.056
which has these two methods;

00:17:56.586 --> 00:17:57.916
sessionDidReceiveHeartRate and

00:17:57.916 --> 00:17:58.766
sessionDidEnd.

00:18:00.036 --> 00:18:01.026
With sessionDidEnd--

00:18:01.126 --> 00:18:02.006
DidReceiveHeartRate,

00:18:02.226 --> 00:18:03.826
HeartSensorSession provides

00:18:03.826 --> 00:18:05.516
heart rate measurements to its

00:18:05.516 --> 00:18:06.796
delegate and this is a great

00:18:06.796 --> 00:18:07.576
place for us to take these

00:18:07.576 --> 00:18:08.746
measurements and insert them

00:18:08.746 --> 00:18:09.976
into our quantity series sample

00:18:09.976 --> 00:18:10.330
builder.

00:18:16.536 --> 00:18:18.626
Here I'm inserting the heart

00:18:18.626 --> 00:18:19.926
rates and date intervals that

00:18:19.926 --> 00:18:20.696
I've received from the

00:18:20.696 --> 00:18:21.686
HeartSensorSession into my

00:18:21.686 --> 00:18:22.916
quantity series sample builder.

00:18:24.746 --> 00:18:26.626
And, finally, sessionDidEnd is

00:18:26.626 --> 00:18:28.616
called by the HeartSensorSession

00:18:28.866 --> 00:18:30.166
when a HeartSensorSession ends

00:18:30.166 --> 00:18:30.896
at the end of a game.

00:18:31.296 --> 00:18:32.646
This is the perfect place for us

00:18:32.646 --> 00:18:33.816
to end our quantity series

00:18:33.816 --> 00:18:35.826
sample builder to persist the

00:18:35.826 --> 00:18:36.966
heart rate quantities that we've

00:18:36.966 --> 00:18:37.796
inserted to HealthKit.

00:18:37.796 --> 00:18:40.056
And we can also associate the

00:18:40.056 --> 00:18:40.996
quantity series that we've

00:18:40.996 --> 00:18:42.366
created with metadata.

00:18:42.716 --> 00:18:43.886
In this case, I'd like to use

00:18:43.886 --> 00:18:45.326
metadata to associate these

00:18:45.326 --> 00:18:46.406
heart rates with the game

00:18:46.406 --> 00:18:48.006
session that we just played, so

00:18:48.006 --> 00:18:48.756
that in the

00:18:48.756 --> 00:18:50.036
ResultsViewController we can

00:18:50.036 --> 00:18:51.326
query for the heart data

00:18:51.546 --> 00:18:52.806
associated with the most recent

00:18:52.806 --> 00:18:53.000
game.

00:18:57.546 --> 00:18:58.976
Here I'm creating a metadata

00:18:58.976 --> 00:19:00.216
dictionary using the

00:19:00.216 --> 00:19:02.546
MetadataKeyExternalUUID, which I

00:19:02.546 --> 00:19:03.936
am setting to the heart sensor's

00:19:04.166 --> 00:19:04.896
UUID string.

00:19:05.506 --> 00:19:07.016
And finally, I am finishing my

00:19:07.016 --> 00:19:08.236
quantity series with that

00:19:08.236 --> 00:19:09.486
metadata and the end date of

00:19:09.486 --> 00:19:10.756
measurement that we receive from

00:19:10.756 --> 00:19:11.576
the HeartSensorSession.

00:19:12.186 --> 00:19:15.146
Now that we've saved our heart

00:19:15.146 --> 00:19:17.266
rate data to HealthKit, we want

00:19:17.266 --> 00:19:19.026
to-- we want to display that

00:19:19.026 --> 00:19:20.166
data to the users in the

00:19:20.166 --> 00:19:21.016
ResultsViewController.

00:19:21.126 --> 00:19:21.936
So, let's move over to the

00:19:21.936 --> 00:19:22.976
ResultsViewController now.

00:19:28.356 --> 00:19:29.946
In the ResultsViewController

00:19:29.946 --> 00:19:31.476
viewDidLoad function, I have a

00:19:31.476 --> 00:19:32.256
utility function,

00:19:32.786 --> 00:19:34.276
loadHeartRateQuanitites, that's

00:19:34.276 --> 00:19:35.416
going to query for the heart

00:19:35.416 --> 00:19:36.936
rate data associated with the

00:19:36.936 --> 00:19:39.136
most recent game session and

00:19:39.136 --> 00:19:40.946
generate a string representation

00:19:40.946 --> 00:19:42.086
of each of these quantities that

00:19:42.086 --> 00:19:43.326
can be displayed in a table

00:19:43.326 --> 00:19:43.536
view.

00:19:44.866 --> 00:19:46.916
Let's go ahead and start this by

00:19:46.916 --> 00:19:48.636
adding a quantity series sample

00:19:48.636 --> 00:19:50.406
query for heart rate associated

00:19:50.406 --> 00:19:51.966
with our most recent game, if we

00:19:51.966 --> 00:19:53.000
have one.

00:19:56.336 --> 00:19:57.536
Here I'm guarding against the

00:19:57.536 --> 00:19:59.006
case that no game has yet been

00:19:59.006 --> 00:19:59.266
played.

00:20:00.286 --> 00:20:01.806
If we have a game identifier, we

00:20:01.806 --> 00:20:03.706
can go ahead and create a query

00:20:03.706 --> 00:20:04.646
predicate for the

00:20:04.646 --> 00:20:07.376
MetadataExternalKeyUUID using

00:20:07.376 --> 00:20:08.156
that game identifier.

00:20:08.646 --> 00:20:10.136
Remember, we use this metadata

00:20:10.136 --> 00:20:11.286
so that we would later be able

00:20:11.286 --> 00:20:12.626
to query for the heart rate data

00:20:12.626 --> 00:20:13.916
associated with our most recent

00:20:13.916 --> 00:20:14.000
game.

00:20:16.416 --> 00:20:18.056
Then, I can create my quantity

00:20:18.056 --> 00:20:19.236
series sample query for the

00:20:19.236 --> 00:20:20.326
heart rate type using the

00:20:20.326 --> 00:20:21.476
predicate we created above.

00:20:22.886 --> 00:20:24.146
Inside of the query's handler,

00:20:24.336 --> 00:20:25.426
I'm going to be enumerating the

00:20:25.426 --> 00:20:26.566
quantities and date intervals

00:20:26.636 --> 00:20:29.446
associated with this-- with this

00:20:29.546 --> 00:20:30.796
latest game and I'm going to

00:20:31.146 --> 00:20:32.416
create a string representation

00:20:32.416 --> 00:20:32.916
for each of them.

00:20:33.326 --> 00:20:34.356
Let's go ahead and create an

00:20:34.356 --> 00:20:35.846
array of strings we can use to

00:20:36.556 --> 00:20:38.000
store these result strings.

00:20:41.066 --> 00:20:43.526
And then we can use this in our

00:20:43.916 --> 00:20:44.626
query handler.

00:20:45.116 --> 00:20:48.996
First, I'm going to guard

00:20:48.996 --> 00:20:50.226
against errors that might have

00:20:50.226 --> 00:20:51.306
been returned during

00:20:51.306 --> 00:20:51.936
enumeration.

00:20:52.406 --> 00:20:53.646
And if I don't have any errors,

00:20:53.826 --> 00:20:54.996
I can go ahead and create a

00:20:54.996 --> 00:20:56.916
heartRateDetailsStrings using

00:20:56.916 --> 00:20:58.236
the enumerated quantities and

00:20:58.236 --> 00:20:59.956
date intervals and I'll append

00:20:59.956 --> 00:21:01.326
these detail strings to my

00:21:01.326 --> 00:21:02.346
heartRateStrings array.

00:21:03.556 --> 00:21:05.616
Finally, when enumeration is

00:21:05.616 --> 00:21:07.026
complete, the done parameter

00:21:07.026 --> 00:21:08.596
will be set to true and this is

00:21:08.596 --> 00:21:09.956
the perfect place for me to

00:21:09.956 --> 00:21:11.366
dispatch back to the main queue

00:21:11.626 --> 00:21:12.496
to reload our

00:21:12.496 --> 00:21:14.056
ResultsViewController to display

00:21:14.226 --> 00:21:14.646
these strings.

00:21:16.986 --> 00:21:18.296
Now I'd like to re-run the app

00:21:18.416 --> 00:21:19.586
to show you what this looks like

00:21:19.586 --> 00:21:21.246
now that we've added support for

00:21:21.326 --> 00:21:22.606
writing and reading heart rate

00:21:22.606 --> 00:21:22.766
data.

00:21:24.066 --> 00:21:25.106
Remember, the first thing we're

00:21:25.106 --> 00:21:26.006
going to see when our app

00:21:26.006 --> 00:21:27.286
launches is that request for

00:21:27.286 --> 00:21:27.966
authorization.

00:21:28.536 --> 00:21:31.846
I'm going to go ahead and turn

00:21:31.846 --> 00:21:33.636
on authorization to read and

00:21:33.636 --> 00:21:34.296
write heart rate data.

00:21:35.596 --> 00:21:37.036
And now I'll play another round

00:21:37.036 --> 00:21:37.436
of our game.

00:21:38.826 --> 00:21:39.856
Remember, I'm trying to hit the

00:21:39.856 --> 00:21:41.306
hot dogs and miss the broccoli.

00:21:41.886 --> 00:21:42.786
Oh, scored zero.

00:21:42.786 --> 00:21:43.776
Let me play another round.

00:21:49.486 --> 00:21:50.906
Oh, scored two, but we can still

00:21:50.906 --> 00:21:51.936
see what my heart rate looked

00:21:51.936 --> 00:21:52.126
like.

00:21:52.756 --> 00:21:53.216
There we go.

00:21:53.216 --> 00:21:54.506
We have some heart rates that

00:21:54.506 --> 00:21:55.636
were measured during this most

00:21:55.636 --> 00:21:56.776
recent game.

00:21:58.516 --> 00:22:04.676
[ Applause ]

00:22:05.176 --> 00:22:06.936
What we just saw was how easy it

00:22:06.936 --> 00:22:09.606
is to efficiently save quantity

00:22:09.606 --> 00:22:10.896
data with a quantity series

00:22:10.896 --> 00:22:12.966
sample builder and how we can

00:22:12.966 --> 00:22:14.396
query for that data using

00:22:14.446 --> 00:22:15.746
QuantitySeriesSampleQuery.

00:22:16.536 --> 00:22:18.006
Now I'd like to invite up my

00:22:18.006 --> 00:22:19.736
teammate Divya, who is going to

00:22:20.016 --> 00:22:21.266
show you how HealthKit has

00:22:21.266 --> 00:22:22.906
expanded our representations in

00:22:22.906 --> 00:22:24.836
the area of heart and how we've

00:22:24.836 --> 00:22:25.956
moved into the brand-new health

00:22:26.006 --> 00:22:27.206
domain of hearing health.

00:22:27.816 --> 00:22:28.666
Thank you.

00:22:29.516 --> 00:22:34.546
[ Applause ]

00:22:35.046 --> 00:22:36.616
>> So, my colleague Luke just

00:22:36.616 --> 00:22:37.826
described to you the new

00:22:37.826 --> 00:22:39.596
efficient way to store HK

00:22:39.596 --> 00:22:42.586
quantities now in iOS 13 and

00:22:42.586 --> 00:22:43.846
HealthKit has become a

00:22:43.846 --> 00:22:46.006
repository for more and more of

00:22:46.006 --> 00:22:47.726
our users' daily health data.

00:22:47.726 --> 00:22:50.196
And in addition to storing more

00:22:50.196 --> 00:22:51.726
and more data, we're also

00:22:51.726 --> 00:22:53.206
storing more kinds of data.

00:22:54.106 --> 00:22:55.446
This year, we're adding on to

00:22:55.446 --> 00:22:57.086
our existing support for heart

00:22:57.086 --> 00:22:58.746
health and adding new support

00:22:58.746 --> 00:22:59.556
for hearing health.

00:22:59.996 --> 00:23:03.566
Our users have been interacting

00:23:03.566 --> 00:23:04.896
with heart-related features

00:23:04.896 --> 00:23:07.036
since iOS 8, where they've been

00:23:07.036 --> 00:23:08.406
able to get heart rate from

00:23:08.406 --> 00:23:10.466
Apple Watch, or from sensors

00:23:10.466 --> 00:23:12.426
connected to apps created by

00:23:12.426 --> 00:23:14.106
developers like you, and view

00:23:14.106 --> 00:23:15.566
that data all together in the

00:23:15.566 --> 00:23:16.666
Health app.

00:23:18.016 --> 00:23:20.126
HealthKit has always had heart

00:23:20.126 --> 00:23:22.296
rate support, so if you had a

00:23:22.296 --> 00:23:23.596
heart rate reading like the one

00:23:23.706 --> 00:23:25.546
here, you could determine that

00:23:25.546 --> 00:23:27.356
over a five-second period that

00:23:27.736 --> 00:23:29.996
the average heart rate was 68

00:23:30.186 --> 00:23:30.766
beats per minute.

00:23:30.766 --> 00:23:33.516
And in HealthKit, you would save

00:23:33.736 --> 00:23:35.416
that as an HK quantity sample.

00:23:35.976 --> 00:23:40.046
In iOS 11, we introduced heart

00:23:40.046 --> 00:23:41.606
rate variability SDNN.

00:23:42.446 --> 00:23:43.976
Heart rate variability is a

00:23:43.976 --> 00:23:45.846
measurement of the variation in

00:23:45.846 --> 00:23:47.446
the time intervals between

00:23:47.446 --> 00:23:49.636
heartbeats and SDNN stands for

00:23:49.636 --> 00:23:51.506
standard deviation normal to

00:23:51.506 --> 00:23:51.856
normal.

00:23:52.586 --> 00:23:54.196
So, Apple Watch would take the

00:23:54.196 --> 00:23:56.616
same heart rate reading and take

00:23:56.616 --> 00:23:58.386
the time intervals between each

00:23:58.386 --> 00:24:00.286
beat to calculate a standard

00:24:00.286 --> 00:24:02.386
deviation and save that as a

00:24:02.386 --> 00:24:03.906
quantity sample to HealthKit.

00:24:05.076 --> 00:24:06.516
Heart rate and heart rate

00:24:06.516 --> 00:24:08.596
variability are both important

00:24:08.596 --> 00:24:10.106
metrics for cardiovascular

00:24:10.106 --> 00:24:12.076
health and our users have loved

00:24:12.076 --> 00:24:13.616
looking at these at a glance

00:24:13.616 --> 00:24:15.126
throughout the day or in more

00:24:15.126 --> 00:24:16.356
detail, like when they do a

00:24:16.356 --> 00:24:16.876
workout.

00:24:18.036 --> 00:24:20.386
So, let's take a look at this

00:24:20.386 --> 00:24:21.696
same heart rate reading one more

00:24:21.696 --> 00:24:22.106
time.

00:24:22.916 --> 00:24:24.666
Thus far, I've described to you

00:24:24.666 --> 00:24:26.566
ways in which we can summarize

00:24:26.646 --> 00:24:28.346
this heart rate data, but

00:24:28.346 --> 00:24:29.866
sometimes you want the actual

00:24:29.866 --> 00:24:31.336
underlying data itself.

00:24:31.996 --> 00:24:33.616
So, let's say that I want the

00:24:33.896 --> 00:24:35.736
time-- to know the times at

00:24:35.736 --> 00:24:37.046
which each heartbeat occurred.

00:24:37.676 --> 00:24:39.536
And returning to our scenario,

00:24:39.866 --> 00:24:40.986
let's say that our game

00:24:40.986 --> 00:24:42.906
controller has a sensor capable

00:24:42.906 --> 00:24:44.546
of telling us any time a new

00:24:44.546 --> 00:24:46.276
beat comes in while the user is

00:24:46.276 --> 00:24:46.916
playing a game.

00:24:47.356 --> 00:24:49.496
So here, the first heartbeat

00:24:49.496 --> 00:24:51.716
occurs at 0.5 seconds from the

00:24:51.716 --> 00:24:53.166
start point of data collection,

00:24:53.496 --> 00:24:56.116
the second at 1.49 seconds, and

00:24:56.346 --> 00:24:57.906
we can get-- we can continue to

00:24:57.906 --> 00:24:59.486
get the rest of the times that

00:24:59.486 --> 00:25:00.856
these beats occurred since the

00:25:00.856 --> 00:25:01.946
start of data collection.

00:25:02.846 --> 00:25:04.496
So, you'll notice that each beat

00:25:04.606 --> 00:25:05.886
happens at a certain point of

00:25:05.886 --> 00:25:08.176
time and put together they form

00:25:08.216 --> 00:25:09.786
a series of heartbeats.

00:25:10.436 --> 00:25:12.136
To save this data to HealthKit,

00:25:12.456 --> 00:25:13.076
we have an

00:25:13.076 --> 00:25:15.666
HKHeartbeatSeriesSample that

00:25:15.666 --> 00:25:17.466
stores a series of heartbeats by

00:25:17.466 --> 00:25:18.936
the time stamps at which they

00:25:18.936 --> 00:25:19.316
occurred.

00:25:20.506 --> 00:25:22.256
Now, you might notice that this

00:25:22.256 --> 00:25:24.166
feels similar to the series API

00:25:24.166 --> 00:25:25.466
that Luke showed to you before,

00:25:26.246 --> 00:25:27.936
but it's important to note that

00:25:28.066 --> 00:25:29.446
heartbeat series samples

00:25:29.446 --> 00:25:31.746
encapsulate a type of data that

00:25:31.746 --> 00:25:33.316
deviates from our other sample

00:25:33.316 --> 00:25:34.296
types in HealthKit.

00:25:34.946 --> 00:25:36.996
There are no values or units

00:25:36.996 --> 00:25:38.706
like the HK quantities that are

00:25:38.706 --> 00:25:40.146
the underlying data behind a

00:25:40.146 --> 00:25:42.266
quantity series, and therefore

00:25:42.266 --> 00:25:43.836
we can more efficiently just

00:25:43.836 --> 00:25:46.166
store a series of timestamps to

00:25:46.166 --> 00:25:47.786
represent a heartbeat series.

00:25:48.366 --> 00:25:51.736
But because we're still storing

00:25:51.736 --> 00:25:53.366
a series of data that could get

00:25:53.396 --> 00:25:55.246
potentially large, we have in--

00:25:55.526 --> 00:25:57.926
we have designed the API to be

00:25:58.076 --> 00:25:59.676
familiar to the quantity series,

00:26:00.246 --> 00:26:01.316
so we've equipped this

00:26:01.316 --> 00:26:03.086
HeartbeatSeriesSample with its

00:26:03.086 --> 00:26:04.816
own builder and custom query.

00:26:05.366 --> 00:26:08.446
Like quantity series samples,

00:26:08.696 --> 00:26:10.056
heartbeat series samples get

00:26:10.056 --> 00:26:11.496
created with a builder and

00:26:11.536 --> 00:26:12.716
finished when you're done saving

00:26:12.716 --> 00:26:12.956
data.

00:26:13.646 --> 00:26:14.906
So, let's build one in code.

00:26:16.426 --> 00:26:18.316
Our first step, as always, is to

00:26:18.316 --> 00:26:19.406
request the proper

00:26:19.406 --> 00:26:20.316
authorizations.

00:26:20.946 --> 00:26:22.946
For this, you'll need to request

00:26:22.946 --> 00:26:25.066
the new heartbeat series type as

00:26:25.066 --> 00:26:26.346
well as the quantity type

00:26:26.346 --> 00:26:28.256
heartRateVariabilitySDNN

00:26:28.386 --> 00:26:30.106
introduced back in iOS 11.

00:26:30.896 --> 00:26:31.736
You'll need to request

00:26:31.736 --> 00:26:33.396
authorization for both of these

00:26:33.396 --> 00:26:34.556
types since heart rate

00:26:34.556 --> 00:26:36.436
variability is a metric that can

00:26:36.436 --> 00:26:37.846
be directly derived from

00:26:37.846 --> 00:26:39.716
heartbeat series and this way

00:26:39.716 --> 00:26:40.846
your users have a clear

00:26:40.846 --> 00:26:42.256
understanding of exactly the

00:26:42.256 --> 00:26:43.686
kind of data they're sharing

00:26:43.686 --> 00:26:45.266
with you.

00:26:45.486 --> 00:26:46.416
Once we've requested

00:26:46.416 --> 00:26:48.526
authorization, we can initialize

00:26:48.526 --> 00:26:50.036
a heartbeat series builder with

00:26:50.036 --> 00:26:52.016
a healthStore, gameDevice, and

00:26:52.016 --> 00:26:53.196
the gameStartDate that will

00:26:53.196 --> 00:26:54.586
indicate when we're starting

00:26:54.586 --> 00:26:55.366
data collection.

00:26:55.856 --> 00:26:58.476
And while the game is ongoing

00:26:58.596 --> 00:26:59.606
and our user is playing the

00:26:59.606 --> 00:27:01.466
game, we'll add heartbeats with

00:27:01.466 --> 00:27:02.906
the time interval since the

00:27:02.906 --> 00:27:04.236
series start date to our

00:27:04.236 --> 00:27:04.596
builder.

00:27:04.976 --> 00:27:08.266
But you might enter a case like

00:27:08.326 --> 00:27:10.486
this where your sensor goes down

00:27:10.686 --> 00:27:12.096
and here we have a gap in data

00:27:12.096 --> 00:27:13.936
collection between seconds two

00:27:13.966 --> 00:27:14.466
and three.

00:27:15.366 --> 00:27:16.806
Now, it might look like there is

00:27:16.806 --> 00:27:19.286
a 1.99 second gap between beats

00:27:19.286 --> 00:27:20.876
two and three that could lead to

00:27:20.876 --> 00:27:23.516
erroneous interpretation of this

00:27:23.516 --> 00:27:24.416
user's heart data.

00:27:25.486 --> 00:27:26.846
In order to account for this,

00:27:27.056 --> 00:27:28.856
we'll set precededByGap to YES,

00:27:29.366 --> 00:27:30.936
which you can set for each beat

00:27:30.936 --> 00:27:32.566
that you add if you're aware

00:27:32.566 --> 00:27:33.636
that there was a gap in data

00:27:33.636 --> 00:27:35.076
collection from a sensor going

00:27:35.076 --> 00:27:35.326
down.

00:27:35.326 --> 00:27:39.276
Now I can add metadata to my

00:27:39.276 --> 00:27:40.736
builder like I would to any

00:27:40.736 --> 00:27:41.996
other HK sample.

00:27:42.946 --> 00:27:44.816
And when I'm done saving data,

00:27:44.906 --> 00:27:46.396
I'll finish the series, which

00:27:46.396 --> 00:27:47.696
will save the Heartbeat series

00:27:47.696 --> 00:27:51.366
sample to HealthKit.

00:27:51.366 --> 00:27:52.936
Now we've added support for

00:27:52.936 --> 00:27:54.276
beat-to-beat measurements to our

00:27:54.276 --> 00:27:55.806
game and we're ready to start

00:27:55.806 --> 00:27:57.556
querying for the underlying beat

00:27:57.686 --> 00:27:58.446
measurements.

00:27:58.986 --> 00:28:02.056
Like what Luke described to you

00:28:02.056 --> 00:28:03.906
before, we can interact with our

00:28:03.906 --> 00:28:06.666
normal HK queries to fetch the

00:28:06.866 --> 00:28:09.126
high-level samples and then use

00:28:09.126 --> 00:28:11.176
the custom queries to interact

00:28:11.176 --> 00:28:12.156
with the finer-grain data.

00:28:13.536 --> 00:28:15.306
So, my first step will be to run

00:28:15.376 --> 00:28:17.326
a normal HK sample query to

00:28:17.326 --> 00:28:18.926
fetch my heartbeat series sample

00:28:18.926 --> 00:28:19.686
of interest.

00:28:20.116 --> 00:28:22.036
And once I've done that, I'll

00:28:22.036 --> 00:28:23.336
initialize a heartbeat series

00:28:23.336 --> 00:28:25.126
query with that sample, which

00:28:25.126 --> 00:28:26.576
will let me enumerate over the

00:28:26.576 --> 00:28:27.946
times for each beat.

00:28:28.436 --> 00:28:30.866
And finally, I'll execute my

00:28:30.866 --> 00:28:31.726
query.

00:28:32.286 --> 00:28:35.136
Now, heartbeat series are a

00:28:35.136 --> 00:28:36.856
powerful addition to HealthKit,

00:28:36.976 --> 00:28:38.296
but that's not all we have

00:28:38.526 --> 00:28:39.776
related to heart features.

00:28:40.626 --> 00:28:42.696
Back in iOS 12, Apple Watch

00:28:42.696 --> 00:28:44.326
started notifying users with

00:28:44.326 --> 00:28:45.236
heart alerts.

00:28:46.436 --> 00:28:47.776
A low heart rate alert when

00:28:47.776 --> 00:28:49.806
Apple Watch detected a heart

00:28:49.806 --> 00:28:51.656
rate below a given BPM

00:28:51.656 --> 00:28:53.946
threshold, a high heart rate

00:28:53.946 --> 00:28:55.856
alert for when heart rate rose

00:28:55.856 --> 00:28:58.626
above a given BPM threshold, and

00:28:58.626 --> 00:29:00.056
an irregular heart rate alert

00:29:00.246 --> 00:29:01.776
for when Apple Watch detected a

00:29:01.776 --> 00:29:03.326
rhythm that could be indicative

00:29:03.426 --> 00:29:04.000
of AFib.

00:29:05.876 --> 00:29:07.666
Well, in HealthKit, these alerts

00:29:07.666 --> 00:29:09.086
now come in the form of three

00:29:09.086 --> 00:29:11.266
new category types that will get

00:29:11.266 --> 00:29:12.816
saved to HealthKit any time

00:29:12.816 --> 00:29:14.436
Apple Watch detects an alert.

00:29:15.006 --> 00:29:18.326
Now, in addition to all this

00:29:18.326 --> 00:29:19.816
great heart support, there's

00:29:19.816 --> 00:29:21.576
also this new area that we're

00:29:21.576 --> 00:29:23.656
exposing in iOS 13 and I'm

00:29:23.656 --> 00:29:25.846
excited to share with you that

00:29:25.906 --> 00:29:27.026
hearing health has found its

00:29:27.026 --> 00:29:28.036
place in HealthKit.

00:29:28.036 --> 00:29:31.766
At some point in your life, you

00:29:31.766 --> 00:29:33.196
might remember getting a hearing

00:29:33.196 --> 00:29:35.006
test where you put on a pair of

00:29:35.006 --> 00:29:36.696
headphones and listened to a

00:29:36.696 --> 00:29:39.086
series of sounds and would raise

00:29:39.086 --> 00:29:40.586
your hand as soon as a single

00:29:40.586 --> 00:29:41.736
sound was loud enough for you to

00:29:41.736 --> 00:29:42.056
hear it.

00:29:42.056 --> 00:29:44.066
Well, this was an example of a

00:29:44.066 --> 00:29:46.026
pure tone hearing test, where a

00:29:46.026 --> 00:29:47.496
pure tone is a sound with a

00:29:47.496 --> 00:29:48.506
single frequency.

00:29:49.026 --> 00:29:52.706
Pure tone testing helps identify

00:29:52.706 --> 00:29:54.266
the quietest sound that you can

00:29:54.316 --> 00:29:55.456
hear at a set of different

00:29:55.486 --> 00:29:57.996
frequencies and it can provide

00:29:57.996 --> 00:29:59.236
assessment on the kind of

00:29:59.236 --> 00:30:00.806
hearing impairment or loss that

00:30:00.806 --> 00:30:01.546
you might have.

00:30:03.046 --> 00:30:04.936
The results of pure tone testing

00:30:04.986 --> 00:30:06.776
most commonly get displayed in

00:30:06.776 --> 00:30:08.246
graphs called audiograms.

00:30:08.636 --> 00:30:11.656
This here is an example of an

00:30:11.656 --> 00:30:13.796
audiogram for someone with mild

00:30:13.826 --> 00:30:15.576
hearing impairment and let's

00:30:15.576 --> 00:30:17.456
just zoom into this graph to get

00:30:17.456 --> 00:30:19.106
a better idea of the kind of

00:30:19.106 --> 00:30:20.496
data that is stored in an

00:30:20.496 --> 00:30:21.096
audiogram.

00:30:21.666 --> 00:30:24.256
So, here you'll see two lines,

00:30:24.716 --> 00:30:26.206
one corresponding to the pure

00:30:26.206 --> 00:30:27.916
tone hearing test results from

00:30:27.916 --> 00:30:29.306
the left ear and one for the

00:30:29.306 --> 00:30:29.716
right ear.

00:30:29.716 --> 00:30:31.406
And let's just take a look at

00:30:31.406 --> 00:30:32.726
the first two data points at the

00:30:32.726 --> 00:30:34.076
125-hertz line.

00:30:35.456 --> 00:30:37.126
This shows that for this user to

00:30:37.126 --> 00:30:39.256
hear a sound at a 125-hertz

00:30:39.256 --> 00:30:41.466
frequency, they need around 11

00:30:41.466 --> 00:30:43.086
decibel hearing level units in

00:30:43.086 --> 00:30:45.116
their left ear and 31 in their

00:30:45.116 --> 00:30:45.336
right.

00:30:46.186 --> 00:30:47.696
The decibel hearing level unit

00:30:47.696 --> 00:30:49.226
measures the intensity of a

00:30:49.226 --> 00:30:51.016
sound relative to the quietest

00:30:51.016 --> 00:30:52.416
sound that a young, healthy

00:30:52.416 --> 00:30:53.556
individual would be able to

00:30:53.556 --> 00:30:53.766
hear.

00:30:55.156 --> 00:30:56.706
So, we can get the rest of the

00:30:56.706 --> 00:30:58.516
data points associated with this

00:30:58.516 --> 00:31:00.586
audiogram and in order to store

00:31:00.586 --> 00:31:02.206
this data in HealthKit, we're

00:31:02.206 --> 00:31:05.106
introducing an HKAudiogramSample

00:31:05.346 --> 00:31:06.926
that stores an array of hearing

00:31:06.926 --> 00:31:08.686
sensitivity points associated

00:31:08.686 --> 00:31:09.706
with a hearing test.

00:31:09.966 --> 00:31:11.576
So, let's create an audiogram

00:31:11.576 --> 00:31:14.406
sample and code.

00:31:14.406 --> 00:31:16.606
Our first step is to create an

00:31:16.606 --> 00:31:18.706
HKAudiogramSensitivityPoint that

00:31:18.706 --> 00:31:20.456
encapsulates the intensity of a

00:31:20.456 --> 00:31:22.526
sound required for both ears to

00:31:22.526 --> 00:31:23.676
hear a given frequency.

00:31:24.606 --> 00:31:26.346
So, I'll create a frequency

00:31:26.346 --> 00:31:28.646
quantity with my new HK unit

00:31:28.646 --> 00:31:31.206
hertz unit and a left-ear and

00:31:31.206 --> 00:31:32.786
right-ear sensitivity quantity

00:31:32.786 --> 00:31:34.226
with my new decibel hearing

00:31:34.226 --> 00:31:34.766
level unit.

00:31:36.226 --> 00:31:37.506
Now I'm ready to create an

00:31:37.506 --> 00:31:38.856
audiogram sensitivity point.

00:31:39.786 --> 00:31:41.736
Once you've created an array of

00:31:41.736 --> 00:31:43.336
audiogram sensitivity points,

00:31:43.676 --> 00:31:44.826
you can store that in an

00:31:44.826 --> 00:31:45.916
audiogramSample.

00:31:46.516 --> 00:31:47.586
Now, you'll need to make sure

00:31:47.586 --> 00:31:49.166
that the array of sensitivity

00:31:49.166 --> 00:31:51.036
points are all unique and in

00:31:51.086 --> 00:31:52.646
order, since that's how you

00:31:52.646 --> 00:31:54.156
should expect to interact with

00:31:54.156 --> 00:31:56.176
this data later on in analysis

00:31:56.176 --> 00:31:56.816
or charting.

00:31:58.136 --> 00:31:59.856
And finally, I'm ready to store

00:31:59.856 --> 00:32:01.206
that data to HealthKit.

00:32:02.156 --> 00:32:03.516
And that's how easy it is for

00:32:03.516 --> 00:32:04.886
you to start creating audiogram

00:32:04.886 --> 00:32:06.556
samples and to start building

00:32:06.616 --> 00:32:07.576
hearing health apps with

00:32:07.576 --> 00:32:07.996
HealthKit.

00:32:07.996 --> 00:32:10.866
But an audiogram sample only

00:32:10.866 --> 00:32:12.426
represents the health of your

00:32:12.426 --> 00:32:13.846
ears at a given point of time

00:32:13.886 --> 00:32:14.816
when you're taking a hearing

00:32:14.816 --> 00:32:15.266
test.

00:32:15.536 --> 00:32:17.906
Most of the day, we're exposed

00:32:17.906 --> 00:32:19.556
to sounds through our headphones

00:32:19.556 --> 00:32:21.036
or while we're walking down the

00:32:21.036 --> 00:32:22.906
street in the environment and

00:32:22.906 --> 00:32:24.346
all of that can impact our

00:32:24.346 --> 00:32:25.666
hearing health for life.

00:32:26.256 --> 00:32:28.456
To keep track of the audio

00:32:28.456 --> 00:32:29.966
exposure that you're exposed to

00:32:29.966 --> 00:32:31.456
through your headphones, we have

00:32:31.456 --> 00:32:32.776
a read-write quantity type,

00:32:32.926 --> 00:32:34.306
headphoneAudioExposure.

00:32:34.876 --> 00:32:37.406
And for the rest of the day,

00:32:37.526 --> 00:32:38.676
when we're walking down the

00:32:38.676 --> 00:32:40.306
street exposed to construction

00:32:40.306 --> 00:32:42.556
work sounds or traffic, Apple

00:32:42.556 --> 00:32:44.216
Watch is capable of capturing

00:32:44.216 --> 00:32:45.456
that environmental audio

00:32:45.456 --> 00:32:47.046
exposure data and saving it to

00:32:47.046 --> 00:32:48.846
HealthKit, and for that we have

00:32:48.846 --> 00:32:50.326
an analogous read-write quantity

00:32:50.326 --> 00:32:50.666
type,

00:32:50.976 --> 00:32:52.496
environmentalAudioExposure.

00:32:52.496 --> 00:32:55.516
And for times when environmental

00:32:55.516 --> 00:32:57.326
audio exposure gets too high,

00:32:57.856 --> 00:32:59.376
Apple Watch will generate an

00:32:59.376 --> 00:33:00.926
audio exposure alert to make

00:33:00.926 --> 00:33:02.226
sure that you're aware of the

00:33:02.226 --> 00:33:04.216
possible impact that can have on

00:33:04.216 --> 00:33:05.126
the health of your ears.

00:33:05.836 --> 00:33:06.986
And it will save this as a

00:33:06.986 --> 00:33:09.576
category sample using the new

00:33:09.576 --> 00:33:11.466
audioExposureEvent category type

00:33:11.466 --> 00:33:12.146
identifier.

00:33:12.696 --> 00:33:16.016
So, we've covered a lot about

00:33:16.016 --> 00:33:17.856
the new data representations now

00:33:17.856 --> 00:33:19.596
available with HealthKit and iOS

00:33:19.596 --> 00:33:22.146
13, from new efficient series

00:33:22.146 --> 00:33:23.726
representations to the new

00:33:23.726 --> 00:33:25.196
support with hearing health.

00:33:25.476 --> 00:33:28.366
Now you can officially store

00:33:28.516 --> 00:33:30.656
large numbers of HK quantities,

00:33:30.916 --> 00:33:32.616
the most abundant kind of data

00:33:32.616 --> 00:33:33.396
stored in HealthKit.

00:33:33.396 --> 00:33:36.246
And you have the opportunity to

00:33:36.246 --> 00:33:38.536
represent even more rich data

00:33:38.536 --> 00:33:40.706
representations related to heart

00:33:40.706 --> 00:33:41.406
and hearing health.

00:33:42.676 --> 00:33:44.696
For more information as well as

00:33:44.696 --> 00:33:46.096
our sample code projects you saw

00:33:46.236 --> 00:33:47.896
here, you can visit our session

00:33:47.896 --> 00:33:50.386
link listed or come talk to us

00:33:50.386 --> 00:33:51.806
right after this session at the

00:33:51.806 --> 00:33:53.076
Health and Fitness Technologies

00:33:53.836 --> 00:33:53.926
Lab.

00:33:54.496 --> 00:33:56.736
Thank you and have a great rest

00:33:56.736 --> 00:33:57.976
of your WWDC.

00:33:58.516 --> 00:34:04.500
[ Cheering and Applause ]