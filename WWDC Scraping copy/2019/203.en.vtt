WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:10.516 --> 00:00:17.556
[ Applause ]

00:00:18.056 --> 00:00:19.276
>> Good morning, everyone.

00:00:19.686 --> 00:00:21.916
Welcome to Session 203

00:00:22.246 --> 00:00:23.886
Introducing Desktop-class

00:00:23.926 --> 00:00:25.466
Browsing on iPad.

00:00:26.086 --> 00:00:28.246
My name is Charles Ying, and I'm

00:00:28.246 --> 00:00:30.816
joined today by Wenson Hsieh and

00:00:30.816 --> 00:00:32.676
Beth Dakin from the Safari

00:00:32.676 --> 00:00:33.376
WebKit teams.

00:00:35.166 --> 00:00:37.246
We are so thrilled to tell you

00:00:37.246 --> 00:00:39.566
about desktop-class browsing, a

00:00:39.566 --> 00:00:42.326
major new advancement to the web

00:00:42.326 --> 00:00:43.786
platform on iPad.

00:00:45.196 --> 00:00:46.276
As you heard in the keynote,

00:00:46.686 --> 00:00:49.076
Safari on iPadOS is now a

00:00:49.076 --> 00:00:50.296
desktop-class browser.

00:00:51.616 --> 00:00:52.616
Now, what does that mean?

00:00:53.956 --> 00:00:55.486
It means getting more done with

00:00:55.486 --> 00:00:56.016
Safari.

00:00:56.816 --> 00:00:59.016
You can now use Safari for all

00:00:59.016 --> 00:01:00.866
the great things you want to do

00:01:00.866 --> 00:01:02.916
on the web.

00:01:03.156 --> 00:01:04.376
Safari is the new download

00:01:04.376 --> 00:01:07.006
manager, so you can download and

00:01:07.006 --> 00:01:09.896
upload files while using other

00:01:09.896 --> 00:01:12.866
tabs and even other apps.

00:01:14.586 --> 00:01:16.696
Safari's new controls for

00:01:16.696 --> 00:01:18.776
full-page zoom, hiding the

00:01:18.776 --> 00:01:20.596
toolbar when you need more space

00:01:20.656 --> 00:01:22.926
to work and per-site preferences

00:01:22.926 --> 00:01:25.266
to tailor Safari to your

00:01:25.266 --> 00:01:25.706
workflow.

00:01:27.426 --> 00:01:29.946
And Safari now has all the

00:01:29.946 --> 00:01:31.926
keyboard shortcuts you expect

00:01:32.146 --> 00:01:34.146
from a desktop browser to get

00:01:34.146 --> 00:01:35.886
things done fast and stay

00:01:35.886 --> 00:01:37.526
focused on what you're doing.

00:01:37.526 --> 00:01:41.296
But at the heart of it all is

00:01:41.296 --> 00:01:42.506
browsing desktop websites.

00:01:47.616 --> 00:01:49.176
We've been working on web

00:01:49.176 --> 00:01:51.116
browsers for a long time.

00:01:52.176 --> 00:01:53.416
When the original iPhone was

00:01:53.416 --> 00:01:55.636
first introduced, all websites

00:01:55.636 --> 00:01:57.546
were big and made for mouse

00:01:57.546 --> 00:01:57.856
input.

00:01:59.606 --> 00:02:01.086
iPhone made these websites work

00:02:01.606 --> 00:02:04.196
out of the box without requiring

00:02:04.196 --> 00:02:06.296
them to change to work with a

00:02:06.296 --> 00:02:08.455
small screen and Multi-Touch.

00:02:09.916 --> 00:02:11.576
iPhone would scale websites to

00:02:11.626 --> 00:02:14.206
fit and boost text sizes so you

00:02:14.206 --> 00:02:14.726
could read them.

00:02:16.246 --> 00:02:18.836
Then you used new web APIs to

00:02:19.196 --> 00:02:21.296
make your websites take full

00:02:21.296 --> 00:02:22.696
advantage of iPhone's

00:02:22.696 --> 00:02:23.256
capabilities.

00:02:23.256 --> 00:02:26.926
And the results were fantastic.

00:02:27.676 --> 00:02:30.576
Some of you used responsive

00:02:30.576 --> 00:02:32.116
design techniques to make your

00:02:32.116 --> 00:02:34.246
websites flexible on screens of

00:02:34.246 --> 00:02:34.916
any size.

00:02:35.936 --> 00:02:38.676
Those websites look great on

00:02:39.396 --> 00:02:40.276
iPad today.

00:02:41.066 --> 00:02:43.776
But it was also common to have

00:02:43.776 --> 00:02:44.906
two different versions of the

00:02:44.906 --> 00:02:48.386
site, one for big screens and

00:02:48.386 --> 00:02:49.386
one for small screens.

00:02:49.386 --> 00:02:53.086
iPad used the mobile user agent

00:02:53.606 --> 00:02:54.966
which meant it got small screen

00:02:54.966 --> 00:02:55.416
websites.

00:02:56.906 --> 00:03:01.116
So new in iPadOS, iPad will now

00:03:01.116 --> 00:03:02.496
present itself to websites as a

00:03:02.856 --> 00:03:02.976
Mac.

00:03:05.576 --> 00:03:07.656
This is not just user agent

00:03:07.656 --> 00:03:09.676
change, but a set of deep

00:03:10.506 --> 00:03:13.116
fundamental changes to WebKit

00:03:13.666 --> 00:03:15.386
that add up to a great new

00:03:15.386 --> 00:03:15.976
experience.

00:03:16.776 --> 00:03:17.826
Let me walk you through two of

00:03:17.826 --> 00:03:18.466
these changes.

00:03:20.226 --> 00:03:21.766
Some desktop websites are

00:03:21.766 --> 00:03:23.236
designed to show lots of

00:03:23.236 --> 00:03:25.096
information on a large screen.

00:03:26.656 --> 00:03:28.206
These websites were zoomed in on

00:03:28.206 --> 00:03:29.896
big iPads, and you couldn't see

00:03:29.896 --> 00:03:31.156
as much information as the

00:03:31.156 --> 00:03:31.796
desktop browser.

00:03:32.996 --> 00:03:34.536
WebKit used a viewport to lay

00:03:34.536 --> 00:03:36.396
out websites that was the same

00:03:36.396 --> 00:03:38.626
on every iPad size, the iPad

00:03:38.626 --> 00:03:40.616
mini all the way up to the

00:03:40.616 --> 00:03:43.116
largest iPad Pro.

00:03:43.336 --> 00:03:47.136
So new in iPadOS, viewports will

00:03:47.136 --> 00:03:49.436
now match iPad screen size.

00:03:50.496 --> 00:03:52.036
Now websites can use all the

00:03:52.036 --> 00:03:53.626
space available on bigger iPads.

00:03:54.536 --> 00:03:56.456
With smaller iPads, we'll scale

00:03:56.456 --> 00:03:59.236
websites to fit everything on

00:03:59.236 --> 00:04:01.626
screen and boost text sizes for

00:04:01.626 --> 00:04:03.886
comfortable reading just like

00:04:03.886 --> 00:04:04.086
iPhone.

00:04:05.356 --> 00:04:06.746
You can now see more of the

00:04:06.746 --> 00:04:08.616
website at once just like a

00:04:08.616 --> 00:04:10.706
desktop computer, make it easier

00:04:10.706 --> 00:04:11.706
to get things done.

00:04:12.356 --> 00:04:14.886
Some desktop websites are

00:04:14.886 --> 00:04:16.636
designed for mouse input.

00:04:17.826 --> 00:04:21.206
New in iOS 13, iPad optimizes

00:04:21.346 --> 00:04:23.286
how touch input adapts to mouse

00:04:23.286 --> 00:04:23.576
input.

00:04:24.256 --> 00:04:25.986
So websites like this one using

00:04:25.986 --> 00:04:28.576
mouse hover now work out of the

00:04:28.576 --> 00:04:28.846
box.

00:04:29.676 --> 00:04:32.566
And for web apps that want full

00:04:32.566 --> 00:04:35.446
control, you can now use Pointer

00:04:35.446 --> 00:04:35.746
Events.

00:04:37.206 --> 00:04:38.786
This is just a taste of the

00:04:38.786 --> 00:04:42.026
dozens of web APIs and features

00:04:42.316 --> 00:04:46.056
new in iPadOS that you can take

00:04:46.056 --> 00:04:47.946
advantage of in your web apps.

00:04:49.006 --> 00:04:50.526
You'll hear more about them from

00:04:50.526 --> 00:04:51.676
Beth later on.

00:04:53.716 --> 00:04:55.256
All of this adds up to a

00:04:55.256 --> 00:04:56.556
powerful browsing experience

00:04:56.936 --> 00:04:58.606
that you expect from your iPad,

00:04:59.236 --> 00:05:00.896
and that's desktop-class

00:05:00.896 --> 00:05:04.986
browsing, new in iPadOS.

00:05:05.136 --> 00:05:05.476
Now --

00:05:06.516 --> 00:05:08.896
[ Applause ]

00:05:09.396 --> 00:05:11.336
Now, we want to show you how

00:05:11.336 --> 00:05:13.276
your apps and websites can take

00:05:13.406 --> 00:05:15.036
full advantage of these new

00:05:15.036 --> 00:05:15.626
capabilities.

00:05:16.696 --> 00:05:18.346
For app developers, we'll show

00:05:18.346 --> 00:05:19.826
you how to use desktop-class

00:05:19.826 --> 00:05:21.496
browsing in your app.

00:05:22.526 --> 00:05:24.136
And for web developers, we'll

00:05:24.136 --> 00:05:24.846
show you how to make your

00:05:24.846 --> 00:05:27.266
websites work even better on

00:05:27.266 --> 00:05:27.496
iPad.

00:05:28.896 --> 00:05:31.156
We'll start with apps.

00:05:33.576 --> 00:05:36.266
There are four common ways apps

00:05:36.266 --> 00:05:38.276
use web views; following links

00:05:38.276 --> 00:05:39.976
to web content and browsing

00:05:39.976 --> 00:05:42.596
within your app; web browsers,

00:05:42.936 --> 00:05:44.466
where browsing is the primary

00:05:44.466 --> 00:05:46.806
focus of your app; hybrid apps,

00:05:47.256 --> 00:05:48.646
where web technologies are a

00:05:48.646 --> 00:05:49.546
part of your app's user

00:05:49.546 --> 00:05:51.606
interface and authenticating

00:05:51.606 --> 00:05:53.076
users with a third-party

00:05:53.076 --> 00:05:54.076
services using OAuth.

00:05:55.326 --> 00:05:56.736
First up, link following.

00:05:57.376 --> 00:06:00.656
The best way to follow links and

00:06:00.656 --> 00:06:02.556
stay within your app is to use

00:06:02.556 --> 00:06:03.626
Safari View Controller.

00:06:04.496 --> 00:06:06.096
Just like Safari, Safari View

00:06:06.096 --> 00:06:07.456
Controller has great features,

00:06:07.736 --> 00:06:10.116
including Autofill and Reader.

00:06:10.936 --> 00:06:12.416
So I'm happy to say that if

00:06:12.416 --> 00:06:13.436
you're using Safari View

00:06:13.436 --> 00:06:14.656
Controller, you get

00:06:14.656 --> 00:06:16.696
desktop-class browsing for free.

00:06:17.456 --> 00:06:18.736
There's nothing for you to do.

00:06:19.806 --> 00:06:21.156
Safari and Safari View

00:06:21.156 --> 00:06:22.886
Controller automatically choose

00:06:22.886 --> 00:06:24.686
a browsing mode to give you the

00:06:24.686 --> 00:06:26.006
best experience for your

00:06:26.006 --> 00:06:26.566
situation.

00:06:27.606 --> 00:06:28.246
Let me explain.

00:06:28.896 --> 00:06:32.666
iPad is the perfect device for

00:06:32.666 --> 00:06:33.526
browsing the internet.

00:06:34.136 --> 00:06:35.456
It's like holding the web in

00:06:35.456 --> 00:06:35.916
your hands.

00:06:36.666 --> 00:06:37.496
And depending on what you're

00:06:37.496 --> 00:06:39.736
doing, iPad can be used in many

00:06:39.736 --> 00:06:41.146
different ways.

00:06:42.096 --> 00:06:44.046
For example, some desktop

00:06:44.046 --> 00:06:45.806
websites are pretty small on

00:06:45.806 --> 00:06:47.986
iPad mini and are more

00:06:47.986 --> 00:06:49.266
comfortable to read with a

00:06:49.266 --> 00:06:50.596
mobile browsing experience.

00:06:50.596 --> 00:06:53.516
When you look at a desktop

00:06:53.516 --> 00:06:55.866
website in narrow Split View or

00:06:55.866 --> 00:06:57.576
Slide Over, the same thing is

00:06:57.576 --> 00:06:57.806
true.

00:06:58.496 --> 00:07:01.226
In these cases for narrow

00:07:01.226 --> 00:07:03.706
windows, iPad mini mobile

00:07:03.706 --> 00:07:04.716
browsing can be better.

00:07:06.216 --> 00:07:06.936
Safari and Safari View

00:07:06.936 --> 00:07:08.246
Controller will automatically

00:07:08.246 --> 00:07:09.726
choose a browsing mode to give

00:07:09.926 --> 00:07:11.076
you the best experience.

00:07:11.646 --> 00:07:15.856
Safari View Controller takes

00:07:15.856 --> 00:07:17.286
care of everything you need to

00:07:17.286 --> 00:07:18.406
follow links within your app.

00:07:19.396 --> 00:07:20.396
What if your app is a web

00:07:20.396 --> 00:07:20.866
browser?

00:07:21.636 --> 00:07:22.386
Here's what you do.

00:07:23.556 --> 00:07:25.666
First, build your app with iOS

00:07:25.666 --> 00:07:28.276
13 SDK to turn on desktop-class

00:07:28.306 --> 00:07:28.696
browsing.

00:07:29.656 --> 00:07:31.806
Then look at how you're setting

00:07:31.806 --> 00:07:32.406
the user agent.

00:07:32.406 --> 00:07:35.106
If using the custom user agent

00:07:35.106 --> 00:07:37.556
property, we recommend instead

00:07:37.656 --> 00:07:39.886
to use WKWebView configurations

00:07:40.246 --> 00:07:41.916
applicationNameForUserAgent

00:07:41.916 --> 00:07:42.256
property.

00:07:43.346 --> 00:07:44.596
When you provide an application

00:07:44.596 --> 00:07:46.216
name, WebKit does the right

00:07:46.216 --> 00:07:47.536
thing to fill in the rest of the

00:07:47.536 --> 00:07:49.216
user agent for you.

00:07:51.056 --> 00:07:54.046
WKWebView also is the new

00:07:54.046 --> 00:07:55.596
WKWebpagePreferences API for

00:07:56.036 --> 00:07:57.726
setting a preferred content

00:07:57.726 --> 00:07:58.296
browsing mode.

00:07:59.646 --> 00:08:00.846
There are three modes;

00:08:01.376 --> 00:08:03.086
recommended, which does what

00:08:03.086 --> 00:08:05.496
Safari does; mobile; and desktop

00:08:05.496 --> 00:08:05.756
modes.

00:08:06.866 --> 00:08:08.686
In most cases, Safari's

00:08:08.686 --> 00:08:10.226
recommended mode is what you

00:08:10.226 --> 00:08:10.506
want.

00:08:11.166 --> 00:08:15.726
Your web browser might also want

00:08:15.726 --> 00:08:17.046
to let users switch between

00:08:17.046 --> 00:08:19.286
mobile and desktop modes or have

00:08:19.286 --> 00:08:20.416
per-site preferences.

00:08:21.126 --> 00:08:24.056
For these cases, WebKit has a

00:08:24.056 --> 00:08:26.706
new WKNavigationDelegate API to

00:08:27.686 --> 00:08:29.386
specify a content mode

00:08:29.386 --> 00:08:31.226
preference at navigation time.

00:08:34.956 --> 00:08:36.885
You'll see a demo from Wenson of

00:08:36.885 --> 00:08:40.076
these new APIs in a bit.

00:08:40.296 --> 00:08:42.116
In addition to web browsers, web

00:08:42.116 --> 00:08:43.515
technologies can be used to

00:08:43.515 --> 00:08:44.976
build parts of your app's

00:08:44.976 --> 00:08:46.346
content or user interface.

00:08:48.116 --> 00:08:49.776
If your app uses WKWebView this

00:08:49.776 --> 00:08:52.316
way, build your app with iOS 13

00:08:52.316 --> 00:08:53.856
SDK to turn on desktop-class

00:08:53.856 --> 00:08:54.266
browsing.

00:08:55.416 --> 00:08:57.336
Then test your app's use of

00:08:57.336 --> 00:08:57.936
WKWebView.

00:08:59.426 --> 00:09:00.556
In most cases, you're done.

00:09:00.556 --> 00:09:02.466
But in the rare case that you

00:09:02.466 --> 00:09:03.806
need to opt out of viewport

00:09:03.806 --> 00:09:05.016
sizing, you can set the

00:09:05.016 --> 00:09:07.356
preferred content mode to

00:09:08.096 --> 00:09:08.256
mobile.

00:09:08.416 --> 00:09:10.396
Overall, it's pretty easy.

00:09:10.956 --> 00:09:12.526
WKWebView does most of the work

00:09:12.526 --> 00:09:12.846
for you.

00:09:19.746 --> 00:09:22.416
Oops. Finally, web views are

00:09:22.416 --> 00:09:24.006
used to authenticate users with

00:09:24.006 --> 00:09:25.146
a third-party service using

00:09:25.146 --> 00:09:25.486
OAuth.

00:09:26.376 --> 00:09:27.756
If you're doing this,

00:09:27.756 --> 00:09:29.426
ASWebAuthenticationSession is

00:09:29.426 --> 00:09:30.556
the best way to authenticate.

00:09:31.906 --> 00:09:32.986
New in iPadOS,

00:09:33.486 --> 00:09:35.566
ASWebAuthenticationSession now

00:09:35.566 --> 00:09:37.726
presents a form sheet on iPad to

00:09:37.726 --> 00:09:38.616
show the authentication

00:09:38.616 --> 00:09:40.486
interface while staying within

00:09:40.486 --> 00:09:41.386
the context of your app.

00:09:42.316 --> 00:09:43.626
Given this new presentation,

00:09:44.236 --> 00:09:45.876
ASWebAuthenticationSession loads

00:09:45.876 --> 00:09:47.326
websites using a mobile content

00:09:47.326 --> 00:09:47.546
mode.

00:09:48.216 --> 00:09:48.896
Just like Safari View

00:09:48.896 --> 00:09:50.496
Controller, there's nothing for

00:09:50.496 --> 00:09:53.896
you to do if you're using this

00:09:53.896 --> 00:09:53.986
API.

00:09:54.166 --> 00:09:56.476
To recap, Safari View Controller

00:09:56.476 --> 00:09:58.196
and ASWebAuthenticationSession

00:09:58.536 --> 00:09:59.846
do the heavy lifting for you.

00:10:01.106 --> 00:10:03.256
And if using WKWebView, you have

00:10:03.256 --> 00:10:04.376
all the tools you need.

00:10:05.676 --> 00:10:06.566
And now I'd like to invite

00:10:06.566 --> 00:10:08.326
Wenson to the stage to show you

00:10:08.326 --> 00:10:09.596
a demo of how this works.

00:10:10.166 --> 00:10:10.666
That's it.

00:10:11.516 --> 00:10:16.500
[ Applause ]

00:10:20.476 --> 00:10:21.786
>> Thank you, Charles.

00:10:22.996 --> 00:10:24.816
So when I'm not busy working on

00:10:24.816 --> 00:10:26.606
a web browser, I like to take my

00:10:26.606 --> 00:10:28.126
mind off of things every now and

00:10:28.126 --> 00:10:29.886
then by writing more web

00:10:29.886 --> 00:10:30.426
browsers.

00:10:31.306 --> 00:10:33.146
So today, I'd like to introduce

00:10:33.476 --> 00:10:34.276
Shiny Browser.

00:10:34.976 --> 00:10:38.116
It's a WKWebView-based browser

00:10:38.116 --> 00:10:39.726
that I've written, and here it

00:10:39.726 --> 00:10:40.936
is on Google Docs.

00:10:41.976 --> 00:10:43.156
So sometimes I need to

00:10:43.156 --> 00:10:44.406
collaborate with my friends

00:10:44.566 --> 00:10:45.646
using Google Docs.

00:10:46.386 --> 00:10:47.816
For that, I'd like to be able to

00:10:47.816 --> 00:10:50.386
use my browser, but as you can

00:10:50.386 --> 00:10:52.016
see here, it just tells me to

00:10:52.016 --> 00:10:52.846
download the app.

00:10:53.666 --> 00:10:55.256
I'll bet that if I had requested

00:10:55.466 --> 00:10:56.656
a desktop version of this

00:10:56.656 --> 00:10:58.336
website, it would give me full

00:10:58.336 --> 00:10:58.936
access.

00:10:59.676 --> 00:11:00.716
So as I just learned from

00:11:00.716 --> 00:11:03.196
Charles a moment ago, WKWebView

00:11:03.196 --> 00:11:05.416
in iOS 13 should request the

00:11:05.416 --> 00:11:07.566
desktop version by default on my

00:11:07.566 --> 00:11:08.326
iPad Pro.

00:11:08.916 --> 00:11:10.216
So I'm going to recompile my

00:11:10.216 --> 00:11:12.476
browser against the iOS 13 SDK,

00:11:12.476 --> 00:11:14.146
and that should give me the

00:11:14.146 --> 00:11:15.006
desktop website.

00:11:15.766 --> 00:11:16.816
So I'm going to switch over to

00:11:16.816 --> 00:11:18.966
Xcode here, and I'm just going

00:11:18.966 --> 00:11:20.046
to hit Command-R to run.

00:11:20.046 --> 00:11:22.106
That's going to compile my app,

00:11:22.586 --> 00:11:24.016
and we should see the desktop

00:11:24.016 --> 00:11:24.516
website.

00:11:26.716 --> 00:11:28.196
Okay, well.

00:11:28.306 --> 00:11:29.366
Unfortunately, we're still

00:11:29.366 --> 00:11:30.326
getting the mobile version.

00:11:31.306 --> 00:11:32.276
Let's see if we can try to debug

00:11:32.276 --> 00:11:32.856
this together.

00:11:33.636 --> 00:11:35.096
Now, let's take a step back.

00:11:35.526 --> 00:11:37.226
Google Docs thinks I'm a mobile

00:11:37.226 --> 00:11:37.656
browser.

00:11:38.396 --> 00:11:39.916
It's probably using the user

00:11:39.916 --> 00:11:41.116
agent string to make that

00:11:41.116 --> 00:11:41.836
determination.

00:11:43.286 --> 00:11:44.546
What I'm going to do is connect

00:11:44.546 --> 00:11:45.706
to the web view using Web

00:11:45.706 --> 00:11:48.026
Inspector and print out the user

00:11:48.026 --> 00:11:48.556
agent string.

00:11:49.526 --> 00:11:50.926
Maybe that'll give me a hint as

00:11:50.926 --> 00:11:51.666
to what's going on.

00:11:52.626 --> 00:11:55.496
So now I'm going to launch

00:11:55.496 --> 00:11:58.626
Safari, go to Develop menu and

00:11:58.626 --> 00:11:59.726
target Shiny Browser here.

00:12:00.136 --> 00:12:02.566
So I'm going to switch over to

00:12:02.566 --> 00:12:04.776
Console tab, and I'm just going

00:12:04.776 --> 00:12:07.396
to type navigator.userAgent and

00:12:07.396 --> 00:12:07.956
hit Enter.

00:12:09.176 --> 00:12:10.406
So let's zoom in on this user

00:12:10.406 --> 00:12:10.726
agent.

00:12:12.056 --> 00:12:12.956
There's a couple of interesting

00:12:12.956 --> 00:12:14.106
things I want to point out here.

00:12:15.066 --> 00:12:16.406
First of all, the word iPad

00:12:16.406 --> 00:12:17.426
appears in the user agent

00:12:17.426 --> 00:12:19.386
string, so clearly it's not

00:12:19.386 --> 00:12:20.186
desktop-class.

00:12:20.826 --> 00:12:22.266
But what's more, there's this

00:12:22.266 --> 00:12:24.066
Version/1.0 ShinyBrowser/1.0

00:12:24.066 --> 00:12:24.156
here.

00:12:24.216 --> 00:12:25.166
It's kind of mysterious.

00:12:25.786 --> 00:12:26.826
Where is this coming from?

00:12:28.116 --> 00:12:29.886
Well, I like to know myself, so

00:12:29.886 --> 00:12:32.266
I'm going to copy and paste into

00:12:32.266 --> 00:12:33.616
the search field in Xcode.

00:12:33.616 --> 00:12:34.936
So I'm going to Command-F to

00:12:34.936 --> 00:12:38.266
find and just paste.

00:12:38.456 --> 00:12:40.606
Okay, well as it turns out, I

00:12:40.606 --> 00:12:42.496
had code to override the entire

00:12:42.496 --> 00:12:44.096
user agent string using the

00:12:44.096 --> 00:12:45.776
custom user agent property of

00:12:45.776 --> 00:12:46.516
WKWebView.

00:12:47.956 --> 00:12:49.006
I must have copied and pasted

00:12:49.006 --> 00:12:50.076
this from the internet at some

00:12:50.076 --> 00:12:52.066
point and forgot about it since.

00:12:52.866 --> 00:12:53.676
Maybe it was a reasonable

00:12:53.676 --> 00:12:56.566
solution at the time, but as

00:12:56.566 --> 00:12:57.646
I've just learned from Charles,

00:12:57.806 --> 00:12:59.106
there's an alternative.

00:12:59.866 --> 00:13:01.276
What I can use instead is the

00:13:01.306 --> 00:13:02.776
application name for user agent

00:13:02.776 --> 00:13:04.016
property on WKWebView

00:13:04.016 --> 00:13:04.756
configuration.

00:13:05.406 --> 00:13:07.516
So let's change this to use that

00:13:07.516 --> 00:13:07.996
instead.

00:13:08.826 --> 00:13:09.866
First thing I'm going to do is

00:13:09.996 --> 00:13:11.476
remove this custom user agent

00:13:11.476 --> 00:13:13.556
code and go up here where I'm

00:13:13.556 --> 00:13:14.376
creating my web view.

00:13:15.496 --> 00:13:19.206
So what I'm going to do here is

00:13:19.206 --> 00:13:20.346
first create a WKWebView

00:13:20.346 --> 00:13:22.206
configuration and then set the

00:13:22.206 --> 00:13:23.726
application name for user agent

00:13:24.256 --> 00:13:25.916
to what I want, Version/1.0

00:13:25.916 --> 00:13:26.786
ShinyBrowser/1.0.

00:13:27.196 --> 00:13:28.566
And finally, I'm going to create

00:13:28.566 --> 00:13:29.686
my web view using this

00:13:29.686 --> 00:13:30.376
configuration.

00:13:30.496 --> 00:13:32.156
So that was a very small tweak.

00:13:32.156 --> 00:13:34.086
I'm going to recompile my app

00:13:34.576 --> 00:13:39.446
and see what I get this time.

00:13:39.446 --> 00:13:40.906
All right, so as you can see,

00:13:40.906 --> 00:13:41.966
we're now getting the full

00:13:41.966 --> 00:13:43.556
version of Google Docs, and I

00:13:43.556 --> 00:13:44.776
can finally collaborate with my

00:13:44.776 --> 00:13:45.276
friends.

00:13:45.646 --> 00:13:46.856
That was pretty easy.

00:13:47.416 --> 00:13:48.436
But now let's take it one step

00:13:48.506 --> 00:13:48.816
further.

00:13:49.746 --> 00:13:50.686
One of the features that my

00:13:50.686 --> 00:13:51.986
users have been requesting for a

00:13:51.986 --> 00:13:54.166
while is the ability to switch

00:13:54.196 --> 00:13:55.766
between the desktop and mobile

00:13:55.766 --> 00:13:56.996
versions of a web page.

00:13:57.766 --> 00:14:00.316
With the new API in iOS 13, it's

00:14:00.316 --> 00:14:02.306
now fairly easy to implement, so

00:14:02.306 --> 00:14:03.026
let me show you how.

00:14:03.946 --> 00:14:05.576
First of all, notice I have this

00:14:05.636 --> 00:14:06.806
button in the top right-hand

00:14:06.806 --> 00:14:09.016
corner that contains some extra

00:14:09.016 --> 00:14:10.566
options like Add To Favorites

00:14:10.566 --> 00:14:10.956
and Share.

00:14:11.666 --> 00:14:12.706
What I'm going to do is I'm

00:14:12.706 --> 00:14:14.426
going to add a third option here

00:14:14.826 --> 00:14:16.286
to allow the user to change

00:14:16.506 --> 00:14:17.516
content modes.

00:14:18.036 --> 00:14:19.156
So that's going to either say

00:14:19.156 --> 00:14:20.766
Request Mobile Website or

00:14:20.766 --> 00:14:22.216
Request Desktop Website.

00:14:23.606 --> 00:14:25.196
Okay. So let's jump into Xcode

00:14:26.296 --> 00:14:27.006
and implement that.

00:14:27.006 --> 00:14:30.136
I'm going to go down here, add

00:14:30.136 --> 00:14:31.156
this helper function that

00:14:31.156 --> 00:14:33.206
presents a list of

00:14:33.206 --> 00:14:34.306
UIAlertActions.

00:14:34.926 --> 00:14:36.196
So far, as you can see, I've

00:14:36.196 --> 00:14:38.016
have Add to Favorites and Share.

00:14:38.756 --> 00:14:39.936
What I want to do is add a third

00:14:39.936 --> 00:14:40.476
action here.

00:14:40.836 --> 00:14:42.356
But before I do that, I'm going

00:14:42.356 --> 00:14:43.506
to make a new helper function.

00:14:43.506 --> 00:14:45.726
It's going to help me create the

00:14:45.726 --> 00:14:46.626
UIAlertAction.

00:14:47.066 --> 00:14:48.466
And of course, I'm just going to

00:14:48.466 --> 00:14:50.476
use it up here.

00:14:50.476 --> 00:14:51.736
Okay. So that should get my

00:14:51.736 --> 00:14:52.156
action.

00:14:52.696 --> 00:14:53.826
And now I want to draw your

00:14:53.826 --> 00:14:55.056
attention over to this

00:14:55.096 --> 00:14:56.366
currentContentMode instance

00:14:56.366 --> 00:14:56.796
variable.

00:14:57.526 --> 00:14:58.396
So what am I doing here?

00:14:58.816 --> 00:14:59.906
Well, I'm checking if the

00:14:59.906 --> 00:15:01.156
current content mode is equal to

00:15:01.156 --> 00:15:01.616
desktop.

00:15:02.246 --> 00:15:03.576
And if it's equal to desktop, I

00:15:03.886 --> 00:15:06.446
want the string to say "request

00:15:07.076 --> 00:15:09.616
mobile website" and vice versa.

00:15:09.616 --> 00:15:11.836
Okay, so that should make sense,

00:15:11.886 --> 00:15:13.176
but the question is "How do we

00:15:13.176 --> 00:15:14.196
keep track of

00:15:14.196 --> 00:15:15.006
currentContentMode?"

00:15:15.176 --> 00:15:16.126
How we know what it is?

00:15:17.046 --> 00:15:18.986
Well, I'm going to scroll down

00:15:18.986 --> 00:15:21.076
here where I've implemented my

00:15:21.076 --> 00:15:23.456
WKNavigation delegate, namely

00:15:23.456 --> 00:15:24.926
the didCommit navigation method,

00:15:25.646 --> 00:15:26.796
and what I'm going to do here is

00:15:27.346 --> 00:15:29.666
use a new API in iOS 13.

00:15:30.406 --> 00:15:32.716
So in iOS 13, the WKNavigation

00:15:32.966 --> 00:15:34.026
has a new property called

00:15:34.026 --> 00:15:35.366
effectiveContentMode.

00:15:36.046 --> 00:15:37.306
This is only ever going to be

00:15:37.516 --> 00:15:39.596
mobile or desktop and is perfect

00:15:39.596 --> 00:15:40.396
for my use case.

00:15:41.266 --> 00:15:42.496
What I can do is set

00:15:42.496 --> 00:15:43.976
currentContentMode equal to the

00:15:43.976 --> 00:15:45.446
navigation's effective content

00:15:45.446 --> 00:15:46.746
mode when I commit a navigation,

00:15:47.256 --> 00:15:48.076
and that should help me keep

00:15:48.076 --> 00:15:49.566
track of what content is

00:15:49.566 --> 00:15:50.386
currently being loaded.

00:15:51.436 --> 00:15:52.746
So now, I should be showing the

00:15:52.746 --> 00:15:53.226
right string.

00:15:54.556 --> 00:15:55.366
But I want to draw your

00:15:55.366 --> 00:15:56.626
attention back to this action

00:15:56.626 --> 00:15:56.986
handler.

00:15:58.146 --> 00:15:59.306
We still need a way to say,

00:15:59.456 --> 00:16:00.886
"Let's prefer to load mobile or

00:16:00.886 --> 00:16:02.456
desktop content for given host

00:16:02.456 --> 00:16:02.636
name."

00:16:03.476 --> 00:16:04.896
To do this, what we're going to

00:16:04.896 --> 00:16:07.226
do is save a dictionary of host

00:16:07.226 --> 00:16:10.346
names to content modes, be it

00:16:10.346 --> 00:16:12.216
mobile or desktop, whatever the

00:16:12.216 --> 00:16:13.396
user is tapping.

00:16:14.776 --> 00:16:15.936
So I'm going to implement the

00:16:15.936 --> 00:16:18.366
action handler now, and what I'm

00:16:18.366 --> 00:16:20.086
going to do here is simply get

00:16:20.086 --> 00:16:22.356
the host name and set that in

00:16:22.356 --> 00:16:23.536
the dictionary to either mobile

00:16:23.536 --> 00:16:24.156
or desktop.

00:16:24.826 --> 00:16:25.776
Then I'm going to tell the web

00:16:25.776 --> 00:16:26.436
view to reload.

00:16:27.406 --> 00:16:28.616
Okay, so this is where we

00:16:28.616 --> 00:16:29.246
properly are,

00:16:29.406 --> 00:16:30.866
contentModeToRequestForHost

00:16:30.996 --> 00:16:31.506
dictionary.

00:16:31.506 --> 00:16:32.716
But of course, we still have to

00:16:32.716 --> 00:16:33.336
use it somewhere.

00:16:34.036 --> 00:16:35.116
So I'm going to scroll down here

00:16:35.336 --> 00:16:36.446
back where I have the navigation

00:16:36.446 --> 00:16:38.526
delegate, and I'm going to add a

00:16:38.526 --> 00:16:39.146
new method.

00:16:40.216 --> 00:16:41.726
I'm going to implement, decide

00:16:41.726 --> 00:16:43.576
policy for navigationAction.

00:16:44.296 --> 00:16:45.586
This is very similar to the

00:16:45.786 --> 00:16:47.236
version you might be familiar

00:16:47.236 --> 00:16:49.376
with, except, in iOS 13, this

00:16:49.376 --> 00:16:50.786
one now contains web page

00:16:50.836 --> 00:16:52.186
preferences as a parameter.

00:16:52.186 --> 00:16:53.666
So this preferences right here.

00:16:54.196 --> 00:16:55.326
So what I can do with these

00:16:55.326 --> 00:16:57.166
preferences is set the preferred

00:16:57.166 --> 00:16:58.566
content mode equal to the

00:16:58.566 --> 00:16:59.836
content mode I would get by

00:16:59.836 --> 00:17:01.156
looking it up in my dictionary.

00:17:01.506 --> 00:17:03.166
And just as a refresher, this

00:17:03.166 --> 00:17:04.376
contentModeToRequestForHost

00:17:04.376 --> 00:17:06.266
dictionary is the same one that

00:17:06.266 --> 00:17:07.685
we populated up here in the

00:17:07.685 --> 00:17:09.925
action handler just a moment

00:17:09.925 --> 00:17:10.116
ago.

00:17:11.215 --> 00:17:13.496
Okay. Finally, last but not

00:17:13.496 --> 00:17:14.935
least, we have to remember to

00:17:15.286 --> 00:17:15.886
actually call our

00:17:15.886 --> 00:17:17.136
decisionHandler with these new

00:17:17.136 --> 00:17:18.756
preferences, and I should be

00:17:18.756 --> 00:17:19.146
good to go.

00:17:19.445 --> 00:17:20.866
So I'm going to recompile my

00:17:20.866 --> 00:17:22.866
app, and let's see how our

00:17:22.866 --> 00:17:23.586
feature works.

00:17:24.226 --> 00:17:26.556
I'm also going to switch it up

00:17:26.556 --> 00:17:26.935
this time.

00:17:27.435 --> 00:17:29.426
Instead of Google Docs, let's go

00:17:29.426 --> 00:17:30.456
to an image gallery.

00:17:31.476 --> 00:17:33.066
So this is the desktop version

00:17:33.066 --> 00:17:34.256
of Shiny Pics.

00:17:35.256 --> 00:17:36.646
And what I'm going to do here is

00:17:37.146 --> 00:17:39.436
use the Extras menu to request

00:17:39.436 --> 00:17:40.216
the mobile website.

00:17:41.776 --> 00:17:43.916
So this is what the mobile

00:17:43.916 --> 00:17:45.826
website looks like, the version

00:17:45.826 --> 00:17:46.676
of Shiny Pics.

00:17:47.646 --> 00:17:49.446
And, I mean, I can tell it's

00:17:49.446 --> 00:17:50.406
kind of the mobile version of

00:17:50.406 --> 00:17:51.486
the website, because it really

00:17:51.486 --> 00:17:52.556
looks like a page that was

00:17:52.556 --> 00:17:54.926
optimized for a phone, not so

00:17:54.926 --> 00:17:55.916
much my iPad Pro.

00:17:56.796 --> 00:17:58.186
I think on my iPad Pro, I

00:17:58.186 --> 00:17:59.216
actually prefer the desktop

00:17:59.256 --> 00:18:00.376
version of Shiny Pics.

00:18:01.006 --> 00:18:02.506
So I'm going to just tap Request

00:18:02.506 --> 00:18:04.486
Desktop Website, and I'm back to

00:18:04.486 --> 00:18:05.986
the desktop version of Shiny

00:18:05.986 --> 00:18:06.346
Pics.

00:18:07.286 --> 00:18:09.536
Okay, so to recap, I first

00:18:09.536 --> 00:18:10.806
ensured that my browser can load

00:18:10.806 --> 00:18:13.486
desktop content, and then I used

00:18:13.486 --> 00:18:15.536
new API to implement a Request

00:18:15.536 --> 00:18:16.806
Mobile or Desktop Website

00:18:16.856 --> 00:18:17.246
feature.

00:18:18.136 --> 00:18:19.916
But so far, we've only shown

00:18:19.916 --> 00:18:21.476
some new tools for you app

00:18:21.476 --> 00:18:22.576
developers in the crowd.

00:18:23.466 --> 00:18:25.406
Of course, we have news for web

00:18:25.406 --> 00:18:26.456
developers as well.

00:18:27.006 --> 00:18:28.076
And to tell you more about it,

00:18:28.556 --> 00:18:30.126
I'd like to invite Beth to the

00:18:30.126 --> 00:18:30.576
stage.

00:18:31.516 --> 00:18:35.406
[ Applause ]

00:18:35.906 --> 00:18:36.856
>> Thank you, Wenson.

00:18:37.416 --> 00:18:38.606
That was great.

00:18:39.706 --> 00:18:42.496
So what does all of this mean

00:18:42.586 --> 00:18:43.576
for web developers?

00:18:44.346 --> 00:18:45.666
If you have a responsive

00:18:45.666 --> 00:18:47.726
website, probably very little is

00:18:47.726 --> 00:18:48.326
different now.

00:18:48.626 --> 00:18:50.216
But we do have some new tools

00:18:50.216 --> 00:18:52.126
that you can use to maintain and

00:18:52.126 --> 00:18:53.586
improve your responsive website.

00:18:54.946 --> 00:18:56.836
I also have some best practices

00:18:56.836 --> 00:18:58.346
to share for web development on

00:18:58.496 --> 00:19:00.146
iPad so that whether your site

00:19:00.146 --> 00:19:02.016
is currently responsive or a

00:19:02.016 --> 00:19:03.436
big-screen website designed for

00:19:03.436 --> 00:19:05.396
desktop computers, you can make

00:19:05.396 --> 00:19:07.126
it a truly great experience on

00:19:08.066 --> 00:19:08.266
iPad.

00:19:08.996 --> 00:19:10.896
There are six new features I'd

00:19:10.896 --> 00:19:11.796
like to discuss.

00:19:12.376 --> 00:19:13.336
Some of these are purely

00:19:13.336 --> 00:19:14.896
developer features like pointer

00:19:14.896 --> 00:19:16.546
events, and some are more like

00:19:16.816 --> 00:19:18.266
new end user features that have

00:19:18.266 --> 00:19:19.766
developer implications like

00:19:19.766 --> 00:19:20.956
accelerated scrolling.

00:19:21.746 --> 00:19:23.556
Let's start with Pointer events.

00:19:24.926 --> 00:19:26.496
One of the biggest problems of

00:19:26.496 --> 00:19:28.196
loading desktop content on an

00:19:28.456 --> 00:19:30.596
iPad is reconciling mouse and

00:19:30.596 --> 00:19:31.286
touch input.

00:19:32.856 --> 00:19:34.406
Sometimes websites are written

00:19:34.406 --> 00:19:36.006
so that the small-screen version

00:19:36.236 --> 00:19:38.136
uses only touch events, and the

00:19:38.136 --> 00:19:39.756
big-screen version uses only

00:19:39.756 --> 00:19:40.446
mouse events.

00:19:41.086 --> 00:19:42.716
Our goal is to keep websites

00:19:42.716 --> 00:19:44.636
using only mouse events working

00:19:44.636 --> 00:19:46.576
as much as possible on iPad even

00:19:46.576 --> 00:19:47.766
though of course there's no

00:19:47.766 --> 00:19:47.996
mouse.

00:19:48.916 --> 00:19:51.136
So when a user taps, WebKit will

00:19:51.136 --> 00:19:52.686
send the mouse-down, mouse-up

00:19:52.686 --> 00:19:53.606
and click event for

00:19:53.606 --> 00:19:55.116
compatibility just like always.

00:19:55.806 --> 00:19:57.406
Most hover events get dispatched

00:19:57.406 --> 00:19:58.786
at that time too, and I'll dig

00:19:58.786 --> 00:19:59.716
into that more later.

00:20:01.386 --> 00:20:02.516
However, mouse move really

00:20:02.516 --> 00:20:04.286
doesn't make sense on iPad.

00:20:04.566 --> 00:20:06.326
The closest analogy is moving

00:20:06.326 --> 00:20:07.706
your finger on the screen, but

00:20:07.706 --> 00:20:08.796
that's how you scroll.

00:20:09.406 --> 00:20:12.116
So we did try to send mouse-move

00:20:12.116 --> 00:20:13.356
events at the same time that we

00:20:13.356 --> 00:20:15.096
send touch move, but it actually

00:20:15.096 --> 00:20:16.476
caused many more problems than

00:20:16.476 --> 00:20:18.486
it solved, so we decided not to

00:20:18.486 --> 00:20:18.996
do that.

00:20:18.996 --> 00:20:20.246
It conflicted with scrolling.

00:20:21.106 --> 00:20:23.046
If you need something like mouse

00:20:23.076 --> 00:20:24.506
move, then we have a great

00:20:24.506 --> 00:20:25.686
solution, and that's pointer

00:20:25.686 --> 00:20:26.156
events.

00:20:27.556 --> 00:20:28.696
We added support for pointer

00:20:28.696 --> 00:20:31.166
events in WebKit in iOS 13 and

00:20:31.256 --> 00:20:32.176
macOS Catalina.

00:20:32.846 --> 00:20:33.936
This is a web standard that

00:20:33.936 --> 00:20:35.556
provides a layer of abstraction

00:20:35.556 --> 00:20:37.276
between user input and your

00:20:37.276 --> 00:20:39.466
website, so the same API can be

00:20:39.466 --> 00:20:41.096
used for input that comes from a

00:20:41.096 --> 00:20:42.886
mouse, from touch, or from a

00:20:42.886 --> 00:20:43.356
pencil.

00:20:45.176 --> 00:20:46.246
Pointer Events are easy to

00:20:46.246 --> 00:20:46.656
adopt.

00:20:46.656 --> 00:20:48.136
If you have existing code to

00:20:48.136 --> 00:20:49.486
support mouse events on a

00:20:49.486 --> 00:20:50.976
desktop that looks like this,

00:20:51.406 --> 00:20:52.416
the code to support Pointer

00:20:52.416 --> 00:20:53.746
Events is really similar.

00:20:54.636 --> 00:20:55.596
Just the event name is

00:20:55.626 --> 00:20:55.946
different.

00:20:56.346 --> 00:20:57.976
But let me expand the context to

00:20:57.976 --> 00:20:59.596
show how I'll really use this.

00:20:59.596 --> 00:21:01.886
I'll actually use feature

00:21:01.886 --> 00:21:03.166
detection to determine if

00:21:03.216 --> 00:21:04.426
pointer events are supported.

00:21:04.426 --> 00:21:06.076
I'll keep the mouse-event

00:21:06.076 --> 00:21:07.696
listener in order to accommodate

00:21:07.696 --> 00:21:09.416
older clients only when pointer

00:21:09.416 --> 00:21:10.536
events aren't available.

00:21:11.756 --> 00:21:13.286
The PointerEvent object actually

00:21:13.286 --> 00:21:15.006
inherits from mouse event, so I

00:21:15.006 --> 00:21:16.206
literally don't have to change

00:21:16.206 --> 00:21:17.156
anything about my

00:21:17.286 --> 00:21:18.636
updateInteraction function to

00:21:18.636 --> 00:21:20.486
get this to work unless I want

00:21:20.486 --> 00:21:21.916
to take advantage of additional

00:21:21.966 --> 00:21:23.736
parameters on PointerEvent that

00:21:23.736 --> 00:21:25.096
are specific to mouse or pencil

00:21:25.096 --> 00:21:26.836
input, which is huge.

00:21:26.836 --> 00:21:28.946
It really is this easy to adopt

00:21:29.006 --> 00:21:30.456
pointer events.

00:21:31.456 --> 00:21:33.196
Pointer events can coexist with

00:21:33.196 --> 00:21:34.566
mouse and touch events.

00:21:34.606 --> 00:21:35.366
But be careful when

00:21:35.416 --> 00:21:37.026
intermingling event types that

00:21:37.026 --> 00:21:38.976
map to the same user action like

00:21:38.976 --> 00:21:39.266
here.

00:21:39.916 --> 00:21:41.416
There's no else clause, so both

00:21:41.416 --> 00:21:42.196
of these events will be

00:21:42.196 --> 00:21:44.156
registered, and my function will

00:21:44.156 --> 00:21:45.846
be called twice every time the

00:21:45.916 --> 00:21:47.296
pointer moves, which might mess

00:21:47.296 --> 00:21:48.266
up some of my state.

00:21:49.616 --> 00:21:51.526
Also, you don't need to register

00:21:51.526 --> 00:21:53.126
all three types of events if you

00:21:53.126 --> 00:21:54.766
want to distinguish between

00:21:54.766 --> 00:21:56.326
mouse and touch interaction on

00:21:56.326 --> 00:21:57.676
devices that support both,

00:21:58.096 --> 00:21:59.306
because pointer events allow you

00:21:59.306 --> 00:22:00.196
to know the difference.

00:22:01.576 --> 00:22:03.286
If you want to cancel default

00:22:03.286 --> 00:22:04.616
web browser behaviors like

00:22:04.686 --> 00:22:06.556
scrolling, then on Mac you'll

00:22:06.556 --> 00:22:08.246
use preventDefault just like you

00:22:08.246 --> 00:22:09.386
would for mouse events.

00:22:09.976 --> 00:22:12.836
On iOS, preventDefault won't

00:22:12.836 --> 00:22:14.896
lock all browser behaviors, so

00:22:14.896 --> 00:22:16.256
you should also use the

00:22:16.256 --> 00:22:18.086
touch-action CSS property.

00:22:18.086 --> 00:22:19.866
Touch-action is actually really

00:22:19.866 --> 00:22:20.486
awesome.

00:22:20.876 --> 00:22:22.046
It's easier than writing

00:22:22.046 --> 00:22:23.496
JavaScript and it allows you to

00:22:23.496 --> 00:22:25.136
make more granular decisions

00:22:25.136 --> 00:22:26.036
than preventDefault.

00:22:26.636 --> 00:22:28.636
Here I am using it to block all

00:22:28.636 --> 00:22:29.816
browser behaviors with the none

00:22:29.816 --> 00:22:31.566
value, but I could use it to,

00:22:31.566 --> 00:22:33.216
for example, prevent scrolling

00:22:33.356 --> 00:22:34.506
but still allow zooming.

00:22:35.436 --> 00:22:37.466
Touch-action also enables more

00:22:37.466 --> 00:22:38.786
efficient user interactions,

00:22:39.016 --> 00:22:40.576
because it's declarative, so

00:22:40.576 --> 00:22:42.446
using touch-action and pointer

00:22:42.446 --> 00:22:43.896
events on your website may

00:22:43.896 --> 00:22:45.146
actually be a performance

00:22:45.146 --> 00:22:45.506
improvement.

00:22:47.236 --> 00:22:49.716
So we have compatibility mouse

00:22:49.716 --> 00:22:51.366
events to keep desktop sites

00:22:51.366 --> 00:22:53.336
working, but that's a stopgap on

00:22:53.566 --> 00:22:54.896
the iOS, and the solution is

00:22:54.896 --> 00:22:55.466
pointer events.

00:22:56.076 --> 00:22:57.026
They're easy to adopt.

00:22:57.336 --> 00:22:58.576
They let you do everything you

00:22:58.576 --> 00:23:00.166
can do today with mouse or touch

00:23:00.166 --> 00:23:02.216
events, and they ensure quick

00:23:02.216 --> 00:23:03.636
responsive user interactions.

00:23:04.386 --> 00:23:05.866
This is a great solution to all

00:23:05.866 --> 00:23:07.506
of the problems that we face

00:23:07.506 --> 00:23:09.006
reconciling mouse and touch

00:23:09.006 --> 00:23:09.336
input.

00:23:11.276 --> 00:23:13.226
As I mentioned, WebKit also

00:23:13.226 --> 00:23:14.516
sends hover events for the sake

00:23:14.516 --> 00:23:15.376
of compatibility.

00:23:15.956 --> 00:23:17.706
Hover is tricky on touch screen

00:23:17.706 --> 00:23:19.386
since the hardware just doesn't

00:23:19.386 --> 00:23:20.496
support it.

00:23:20.586 --> 00:23:21.746
We've changed the way that mouse

00:23:21.746 --> 00:23:24.066
hover detection works in iOS 13

00:23:24.326 --> 00:23:26.846
to keep desktop sites that rely

00:23:26.846 --> 00:23:29.116
on it working well.

00:23:30.596 --> 00:23:32.306
If you tap on an element in a

00:23:32.306 --> 00:23:34.246
web page, the response to hover

00:23:34.486 --> 00:23:36.246
will perform that hover, and if

00:23:36.246 --> 00:23:37.786
a meaningful change has happened

00:23:37.786 --> 00:23:39.876
in a web page as a result of the

00:23:39.876 --> 00:23:41.196
hover, will stop there.

00:23:42.426 --> 00:23:44.426
The user can tap a second time

00:23:44.426 --> 00:23:47.416
if they wanted to click.

00:23:47.586 --> 00:23:50.286
In iOS 13, WebKit detects many

00:23:50.286 --> 00:23:52.046
more changes as meaningful than

00:23:52.216 --> 00:23:52.796
ever before.

00:23:53.206 --> 00:23:54.816
This adds critical functionality

00:23:54.816 --> 00:23:56.626
to many desktop websites that

00:23:56.626 --> 00:23:58.596
rely on hover for essential

00:23:58.596 --> 00:24:00.466
parts of the web page like this

00:24:00.466 --> 00:24:01.676
web page which uses it for

00:24:01.676 --> 00:24:02.086
menus.

00:24:02.836 --> 00:24:05.186
We're finding that this is

00:24:05.186 --> 00:24:06.626
working really well, but

00:24:06.626 --> 00:24:07.656
fundamentally this is a

00:24:07.656 --> 00:24:08.746
heuristic where the browser

00:24:08.746 --> 00:24:10.246
engine is trying to interpret

00:24:10.246 --> 00:24:11.716
design intent, so it won't

00:24:11.916 --> 00:24:12.966
always be perfect.

00:24:13.796 --> 00:24:15.116
We have some best practices to

00:24:15.116 --> 00:24:16.686
keep in mind when you're using

00:24:16.686 --> 00:24:17.096
hover.

00:24:18.486 --> 00:24:20.156
First, you should always provide

00:24:20.246 --> 00:24:22.576
another way to access meaningful

00:24:22.576 --> 00:24:24.346
content just in case WebKit

00:24:24.346 --> 00:24:25.186
misses something.

00:24:25.606 --> 00:24:26.406
This is important for

00:24:26.476 --> 00:24:27.536
accessibility too.

00:24:27.816 --> 00:24:29.286
Wenson will dig into this later

00:24:29.346 --> 00:24:31.226
with the demo.

00:24:31.636 --> 00:24:33.216
You should also avoid forcing

00:24:33.216 --> 00:24:35.026
the user to tap twice for the

00:24:35.026 --> 00:24:36.486
most common interactions.

00:24:37.346 --> 00:24:38.866
Remember, if WebKit detects that

00:24:38.866 --> 00:24:40.556
a meaningful change happened on

00:24:40.556 --> 00:24:42.106
hover, that means that the user

00:24:42.106 --> 00:24:43.876
has to tap a second time if they

00:24:43.876 --> 00:24:44.956
actually wanted to click.

00:24:45.416 --> 00:24:46.766
So if you have an element on

00:24:46.766 --> 00:24:48.576
your page where you think users

00:24:48.576 --> 00:24:50.066
will far more often want to

00:24:50.066 --> 00:24:51.406
perform that click than they

00:24:51.406 --> 00:24:53.266
will want to see or interact

00:24:53.266 --> 00:24:55.136
with the hover content, then

00:24:55.136 --> 00:24:56.776
consider making some changes to

00:24:56.776 --> 00:24:58.706
avoid that two-tap speed bump

00:24:58.746 --> 00:25:00.146
that you get from using hover on

00:25:00.146 --> 00:25:01.056
clickable elements.

00:25:02.556 --> 00:25:04.526
Speaking of efficiency, keep

00:25:04.526 --> 00:25:05.476
hover snappy.

00:25:05.766 --> 00:25:07.556
If you start timers in response

00:25:07.556 --> 00:25:09.366
to hover, WebKit will wait for

00:25:09.366 --> 00:25:11.176
those timers to fire in case

00:25:11.176 --> 00:25:12.936
meaningful content is added to

00:25:12.936 --> 00:25:14.536
the web page on a delay.

00:25:15.196 --> 00:25:16.706
In a worst-case scenario,

00:25:17.366 --> 00:25:19.386
something starts the timer, but

00:25:19.386 --> 00:25:21.116
then nothing meaningful happens,

00:25:21.286 --> 00:25:22.766
so WebKit automatically performs

00:25:22.766 --> 00:25:23.176
the click.

00:25:23.506 --> 00:25:24.676
But in the meantime, waited

00:25:24.676 --> 00:25:26.296
several 100 milliseconds longer

00:25:26.296 --> 00:25:27.676
than usual, and the tap feels

00:25:27.676 --> 00:25:28.606
slow to the user.

00:25:29.236 --> 00:25:32.596
We believe that we've made mouse

00:25:32.596 --> 00:25:34.086
hover detection better than ever

00:25:34.086 --> 00:25:34.866
on iOS.

00:25:35.186 --> 00:25:36.616
Still, we suggest that you use

00:25:36.616 --> 00:25:38.036
it only as progressive

00:25:38.036 --> 00:25:39.476
enhancement and make sure your

00:25:39.526 --> 00:25:41.006
site works great even without

00:25:41.006 --> 00:25:41.326
hover.

00:25:41.856 --> 00:25:45.666
WebKit on iOS has always had

00:25:45.666 --> 00:25:47.136
hardware accelerated scrolling

00:25:47.136 --> 00:25:48.676
for the mainframe, but I'm

00:25:48.676 --> 00:25:50.616
delighted to say that WebKit now

00:25:50.616 --> 00:25:51.806
has hardware accelerated

00:25:51.806 --> 00:25:53.636
scrolling everywhere, meaning

00:25:53.636 --> 00:25:55.136
that subframes and overflow

00:25:55.136 --> 00:25:57.286
scroll regions now have buttery

00:25:57.286 --> 00:25:59.096
smooth fast scrolling out of the

00:25:59.096 --> 00:26:00.616
box just like the mainframe.

00:26:01.516 --> 00:26:06.836
[ Applause ]

00:26:07.336 --> 00:26:07.916
That's right.

00:26:07.916 --> 00:26:09.346
Even subframes.

00:26:09.616 --> 00:26:11.676
On older versions of iOS, WebKit

00:26:11.676 --> 00:26:13.336
would force subframes to be the

00:26:13.336 --> 00:26:15.266
full size of their contents, so

00:26:15.266 --> 00:26:16.526
they didn't actually scroll

00:26:16.526 --> 00:26:18.106
individually and could end up

00:26:18.106 --> 00:26:19.516
being much larger than you

00:26:19.516 --> 00:26:21.336
defined them to be in your code.

00:26:21.766 --> 00:26:23.706
Now on iPad, frames will be the

00:26:23.776 --> 00:26:25.356
size that you specify, and

00:26:25.546 --> 00:26:27.126
they'll be able to scroll just

00:26:27.126 --> 00:26:28.566
like you expect from a desktop

00:26:28.566 --> 00:26:29.026
browser.

00:26:30.216 --> 00:26:32.286
This has been such a commonly

00:26:32.286 --> 00:26:34.076
requested feature that there

00:26:34.076 --> 00:26:35.706
were two popular ways to work

00:26:35.706 --> 00:26:37.476
around the fact that WebKit did

00:26:37.476 --> 00:26:38.856
not have support for this by

00:26:38.856 --> 00:26:39.286
default.

00:26:39.636 --> 00:26:42.056
First, we added a CSS property

00:26:42.306 --> 00:26:43.836
-webkit-overflow-scrolling:

00:26:43.906 --> 00:26:45.926
touch; that developers could opt

00:26:45.926 --> 00:26:47.506
into when fast scrolling made

00:26:47.506 --> 00:26:48.246
sense for them.

00:26:49.076 --> 00:26:51.056
We never made this the default,

00:26:51.056 --> 00:26:51.896
because it creates a CSS

00:26:51.896 --> 00:26:54.406
stacking context which affects

00:26:54.406 --> 00:26:55.896
the front to back layering of

00:26:55.896 --> 00:26:57.176
elements on your page.

00:26:57.586 --> 00:26:59.696
And second, some of you built or

00:26:59.696 --> 00:27:01.806
used JavaScript libraries that

00:27:01.806 --> 00:27:03.366
would use touch events to

00:27:03.366 --> 00:27:04.736
emulate fast scrolling.

00:27:05.406 --> 00:27:06.866
Neither of those techniques is

00:27:06.866 --> 00:27:07.526
needed now.

00:27:07.726 --> 00:27:09.236
And in fact, WebKit overflow

00:27:09.236 --> 00:27:13.166
scrolling touch a no-op on iPad.

00:27:13.376 --> 00:27:15.606
So you should test how hardware

00:27:15.606 --> 00:27:17.386
accelerated scrolling everywhere

00:27:17.386 --> 00:27:19.266
affects your content, and if you

00:27:19.266 --> 00:27:20.546
were using a technique to work

00:27:20.546 --> 00:27:21.836
around the absence of this

00:27:21.836 --> 00:27:23.526
feature in the past, you may not

00:27:23.526 --> 00:27:24.186
need it anymore.

00:27:24.416 --> 00:27:27.746
Next, I want to tell you about

00:27:27.746 --> 00:27:29.576
our new automatic viewport and

00:27:29.576 --> 00:27:31.046
text sizing behaviors.

00:27:31.776 --> 00:27:34.246
We developed our new automatic

00:27:34.246 --> 00:27:35.816
behaviors because web pages

00:27:35.816 --> 00:27:37.766
should fit with legible text on

00:27:38.626 --> 00:27:38.746
iPad.

00:27:39.076 --> 00:27:40.636
To elaborate, websites that

00:27:40.636 --> 00:27:42.036
weren't necessarily built for

00:27:42.256 --> 00:27:44.136
iPad should display to fit on

00:27:44.326 --> 00:27:45.656
iPad, meaning that they

00:27:45.656 --> 00:27:47.286
shouldn't scroll horizontally

00:27:47.286 --> 00:27:48.756
unless they were designed to do

00:27:48.756 --> 00:27:51.586
so, and all text should be

00:27:51.586 --> 00:27:53.506
comfortably legible for most

00:27:53.506 --> 00:27:54.656
people without additional

00:27:54.656 --> 00:27:55.076
zooming.

00:27:56.536 --> 00:27:58.396
We need automatic behaviors to

00:27:58.396 --> 00:27:59.906
achieve these goals, because

00:27:59.936 --> 00:28:01.466
some desktop websites are built

00:28:01.466 --> 00:28:02.956
in a fixed width that is wider

00:28:02.956 --> 00:28:03.866
than an iPad.

00:28:05.566 --> 00:28:07.056
We found that a number of sites

00:28:07.056 --> 00:28:08.506
that are very wide like this one

00:28:08.806 --> 00:28:10.966
also declare incorrectly to be

00:28:10.966 --> 00:28:12.416
responsive in the viewport meta

00:28:12.476 --> 00:28:13.796
tag, which is kind of

00:28:13.796 --> 00:28:14.296
unfortunate.

00:28:14.296 --> 00:28:16.136
Let me step back and explain

00:28:16.136 --> 00:28:17.666
what I mean by that.

00:28:18.296 --> 00:28:19.686
The viewport meta tag was

00:28:19.686 --> 00:28:21.306
originally created to address

00:28:21.516 --> 00:28:22.886
problems that can result from

00:28:22.886 --> 00:28:24.666
displaying content that was

00:28:24.786 --> 00:28:26.286
built for a desktop computer on

00:28:26.286 --> 00:28:27.036
a small screen.

00:28:27.436 --> 00:28:28.846
So it's perfect for this, right?

00:28:29.706 --> 00:28:31.476
Well, this particular viewport

00:28:31.476 --> 00:28:33.016
value is meant as a promise to

00:28:33.016 --> 00:28:34.416
the browser engine that the

00:28:34.416 --> 00:28:35.446
website was designed

00:28:35.446 --> 00:28:37.006
responsively, meaning that it

00:28:37.006 --> 00:28:39.256
will adaptively reflow as the

00:28:39.256 --> 00:28:40.446
window size changes.

00:28:41.426 --> 00:28:43.326
In previous versions of iOS, we

00:28:43.326 --> 00:28:44.416
would typically take this

00:28:44.416 --> 00:28:46.276
promise at face value, and we

00:28:46.276 --> 00:28:47.776
wouldn't apply any automatic

00:28:47.776 --> 00:28:49.786
viewport adjustments on websites

00:28:49.786 --> 00:28:51.336
with a meta tag of width equals

00:28:51.336 --> 00:28:52.816
device width and initial scale

00:28:52.816 --> 00:28:53.436
equals 1.

00:28:54.856 --> 00:28:56.546
But that led to a bad experience

00:28:56.546 --> 00:28:58.016
on many desktop websites on

00:28:58.216 --> 00:28:58.526
iPad.

00:28:59.166 --> 00:29:00.546
This site should be able to fit,

00:29:00.546 --> 00:29:01.136
but it didn't.

00:29:01.696 --> 00:29:05.906
So new in iPadOS, WebKit will

00:29:05.906 --> 00:29:07.496
ignore the meta tag if it

00:29:07.496 --> 00:29:09.316
promises to be responsive but

00:29:09.316 --> 00:29:10.646
then actually lays out to the

00:29:10.646 --> 00:29:11.886
width that is greater than the

00:29:11.886 --> 00:29:12.466
device width.

00:29:13.256 --> 00:29:14.446
We found that this results in a

00:29:14.446 --> 00:29:16.086
much better experience overall.

00:29:17.466 --> 00:29:18.836
If your website is designed to

00:29:18.836 --> 00:29:20.646
scroll horizontally and is

00:29:20.646 --> 00:29:22.236
incorrectly being scaled down,

00:29:22.466 --> 00:29:23.496
you have an easy fix.

00:29:24.686 --> 00:29:25.836
You just need to add one more

00:29:25.836 --> 00:29:27.376
value to your viewport meta tag,

00:29:27.716 --> 00:29:28.966
shrink-to-fit=no.

00:29:29.436 --> 00:29:30.806
This is not a new value.

00:29:31.016 --> 00:29:33.076
We added this in iOS 9 because

00:29:33.076 --> 00:29:34.556
we ran into the same problem

00:29:34.556 --> 00:29:35.876
with websites in Split View or

00:29:35.876 --> 00:29:36.566
Slide Over.

00:29:37.136 --> 00:29:38.976
So shrink-to-fit=no will now

00:29:38.976 --> 00:29:40.996
prevent automatic shrinking for

00:29:41.136 --> 00:29:43.066
websites in Split View, Slide

00:29:43.066 --> 00:29:44.816
Over and for wide desktop

00:29:44.816 --> 00:29:45.266
websites.

00:29:47.136 --> 00:29:48.436
You may have noticed that even

00:29:48.436 --> 00:29:50.016
though the boxes on this website

00:29:50.426 --> 00:29:51.576
shrank down to fit in the

00:29:51.576 --> 00:29:53.166
viewport, the text in the header

00:29:53.166 --> 00:29:54.866
actually got bigger, and that's

00:29:55.056 --> 00:29:56.256
because we'll automatically

00:29:56.256 --> 00:29:57.636
adjust the text size on web

00:29:57.636 --> 00:29:59.796
pages that have been shrunk down

00:29:59.796 --> 00:30:01.546
in this manner in order to keep

00:30:01.606 --> 00:30:02.826
the text legible.

00:30:04.116 --> 00:30:05.616
If you want to control the

00:30:05.616 --> 00:30:07.426
viewport and text size on your

00:30:07.426 --> 00:30:09.596
website, the very best thing you

00:30:09.596 --> 00:30:11.126
can do is to adopt responsive

00:30:11.126 --> 00:30:12.596
design and ensure that your

00:30:12.596 --> 00:30:14.676
content adaptively lays out to

00:30:14.676 --> 00:30:15.846
fit any window size.

00:30:16.476 --> 00:30:17.866
Responsive design is a dense

00:30:17.866 --> 00:30:19.456
topic, so I won't attempt to

00:30:19.456 --> 00:30:21.156
give a tutorial here, but there

00:30:21.156 --> 00:30:22.636
are lots of great ones online.

00:30:23.246 --> 00:30:26.526
So in summary, WebKit has new

00:30:26.526 --> 00:30:27.706
viewport and text sizing

00:30:27.706 --> 00:30:29.576
behaviors that make web pages

00:30:29.656 --> 00:30:30.816
fit with legible text.

00:30:31.696 --> 00:30:32.886
The best way to control this

00:30:32.886 --> 00:30:34.476
from your end is to adopt

00:30:34.476 --> 00:30:36.296
responsive design, and if you

00:30:36.296 --> 00:30:37.426
have a website that is meant to

00:30:37.426 --> 00:30:39.176
scroll horizontally, then you

00:30:39.176 --> 00:30:40.586
can get everything right with

00:30:40.586 --> 00:30:41.316
the viewport meta tag.

00:30:41.316 --> 00:30:45.336
Next, I want to tell you about

00:30:45.336 --> 00:30:46.966
the visual viewport API.

00:30:48.076 --> 00:30:49.336
To do that, I first want to make

00:30:49.336 --> 00:30:51.096
a distinction between the visual

00:30:51.096 --> 00:30:52.246
viewport and the layout

00:30:52.306 --> 00:30:52.766
viewport.

00:30:53.386 --> 00:30:54.646
We were just talking about our

00:30:54.646 --> 00:30:56.436
automatic viewport sizing

00:30:56.436 --> 00:30:58.326
behaviors and the viewport meta

00:30:58.406 --> 00:30:58.706
tag.

00:30:59.056 --> 00:31:00.366
Those are used to define the

00:31:00.366 --> 00:31:01.986
layout viewport along with the

00:31:01.986 --> 00:31:03.136
screen and window size.

00:31:04.626 --> 00:31:06.126
The window size can change when

00:31:06.126 --> 00:31:08.036
the user enters or adjusts split

00:31:08.036 --> 00:31:08.456
screen.

00:31:08.826 --> 00:31:10.646
Responsively designed websites

00:31:10.646 --> 00:31:12.486
will react to that change using

00:31:12.486 --> 00:31:14.276
media queries or perhaps by

00:31:14.276 --> 00:31:15.526
listening to the resize event

00:31:15.526 --> 00:31:16.276
and JavaScript.

00:31:16.986 --> 00:31:18.766
Max and min with media queries

00:31:18.926 --> 00:31:20.136
will be assessed whenever the

00:31:20.136 --> 00:31:22.106
layout viewport changes, and the

00:31:22.106 --> 00:31:23.476
resize event will fire then as

00:31:23.476 --> 00:31:23.716
well.

00:31:24.066 --> 00:31:25.526
So if the user rotates the

00:31:25.526 --> 00:31:27.366
device, the layout viewport

00:31:27.366 --> 00:31:29.056
changes again, and your content

00:31:29.056 --> 00:31:30.066
can react to it with one of

00:31:30.066 --> 00:31:30.706
these techniques.

00:31:32.286 --> 00:31:33.376
But then there's the keyboard.

00:31:34.136 --> 00:31:35.146
The keyboard presents us an

00:31:35.146 --> 00:31:37.016
overlay, so it doesn't change

00:31:37.016 --> 00:31:38.856
the layout viewport, and media

00:31:38.856 --> 00:31:40.186
queries and the resize event

00:31:40.276 --> 00:31:40.896
don't react.

00:31:40.896 --> 00:31:43.816
So if the user taps on the name

00:31:43.816 --> 00:31:46.576
field here, the keyboard comes

00:31:46.576 --> 00:31:46.876
up.

00:31:46.876 --> 00:31:48.526
And clearly, that's affected

00:31:48.526 --> 00:31:49.976
what's visually onscreen.

00:31:50.376 --> 00:31:51.446
That's what defined by the

00:31:51.446 --> 00:31:52.436
visual viewport.

00:31:53.376 --> 00:31:54.966
The layout viewport here is the

00:31:54.966 --> 00:31:57.086
normal window size, and the

00:31:57.086 --> 00:31:58.826
visual viewport is the section

00:31:58.896 --> 00:32:00.286
that is currently visible and

00:32:00.356 --> 00:32:01.216
unobscured.

00:32:02.206 --> 00:32:03.476
We've heard for a long time that

00:32:03.476 --> 00:32:04.806
developers want to react to

00:32:04.856 --> 00:32:06.676
changes in the visual viewport.

00:32:07.186 --> 00:32:08.526
In this sample web page, for

00:32:08.526 --> 00:32:10.326
example, the Donate button is

00:32:10.326 --> 00:32:11.756
now obscured, and the site would

00:32:11.756 --> 00:32:13.206
be more useable if it always

00:32:13.206 --> 00:32:13.996
stayed onscreen.

00:32:14.926 --> 00:32:16.996
In iOS 13, we can finally

00:32:16.996 --> 00:32:18.936
address this problem with a W3C

00:32:18.936 --> 00:32:20.756
standard visual viewport API.

00:32:21.536 --> 00:32:24.686
You can use this API to monitor

00:32:24.686 --> 00:32:25.946
the resize of the visual

00:32:25.946 --> 00:32:26.396
viewport.

00:32:26.776 --> 00:32:27.956
This event will fire when the

00:32:27.956 --> 00:32:29.736
keyboard goes on or off-screen.

00:32:29.736 --> 00:32:31.866
And it will also fire in Safari

00:32:32.076 --> 00:32:33.226
as the smart search field

00:32:33.226 --> 00:32:34.606
collapses while scrolling.

00:32:34.606 --> 00:32:38.196
Now I can keep the Donate button

00:32:38.196 --> 00:32:38.686
visible.

00:32:38.686 --> 00:32:42.626
We think the visual viewport API

00:32:42.906 --> 00:32:44.276
is a great tool for taking

00:32:44.276 --> 00:32:45.946
advantage of the big iPad

00:32:45.946 --> 00:32:46.376
screen.

00:32:46.946 --> 00:32:49.786
Let's talk about streaming

00:32:49.786 --> 00:32:50.206
video.

00:32:50.796 --> 00:32:52.496
Those of you who offer streaming

00:32:52.496 --> 00:32:54.106
premium video content in web

00:32:54.136 --> 00:32:56.496
browsers probably already know

00:32:56.826 --> 00:32:59.716
that HTTP Live Streaming or HLS

00:33:00.056 --> 00:33:03.736
is the best way to do it.

00:33:03.736 --> 00:33:05.976
HLS is available on iPhone, iPad

00:33:05.976 --> 00:33:06.456
and Mac.

00:33:06.456 --> 00:33:08.526
It's an easy solution to a hard

00:33:08.526 --> 00:33:10.036
problem, because it does all of

00:33:10.036 --> 00:33:11.056
the heavy lifting for you.

00:33:11.606 --> 00:33:13.396
It works well with CDNs, and you

00:33:13.396 --> 00:33:14.416
get things like AirPlay

00:33:14.416 --> 00:33:15.536
integration for free.

00:33:16.746 --> 00:33:18.476
However, some desktop content

00:33:18.476 --> 00:33:20.116
uses Media Source Extensions or

00:33:20.346 --> 00:33:21.076
MSE instead.

00:33:22.136 --> 00:33:24.256
MSE is an API that enables video

00:33:24.256 --> 00:33:26.356
providers to have explicit

00:33:26.356 --> 00:33:27.616
control of the data that is

00:33:27.616 --> 00:33:28.476
served to the user.

00:33:28.566 --> 00:33:30.306
For example, you can manually

00:33:30.306 --> 00:33:31.976
upgrade or downgrade video

00:33:31.976 --> 00:33:33.496
quality in response to bandwidth

00:33:33.496 --> 00:33:34.016
changes.

00:33:34.766 --> 00:33:36.076
If you have existing content

00:33:36.076 --> 00:33:38.116
that uses MSE, I have great news

00:33:38.116 --> 00:33:38.406
for you.

00:33:39.336 --> 00:33:40.946
MSE is available for desktop

00:33:40.946 --> 00:33:42.896
sites on iPad for the first time

00:33:42.936 --> 00:33:43.686
in iPadOS.

00:33:44.816 --> 00:33:46.496
If you have an existing engine

00:33:46.796 --> 00:33:48.776
that uses MSE for your desktop

00:33:48.776 --> 00:33:50.976
site, it just works on iPad.

00:33:50.976 --> 00:33:52.116
And if you use a JavaScript

00:33:52.116 --> 00:33:53.836
library that implements an MSE

00:33:53.836 --> 00:33:57.136
engine, that will work too.

00:33:57.366 --> 00:33:59.056
With both HLS and MSE as

00:33:59.056 --> 00:34:00.966
options, streaming video is more

00:34:00.966 --> 00:34:03.166
powerful than ever in Safari on

00:34:03.666 --> 00:34:03.806
iPad.

00:34:04.736 --> 00:34:06.476
These new features should help

00:34:06.476 --> 00:34:08.196
you make your web content sing

00:34:08.196 --> 00:34:08.866
on iPad.

00:34:09.126 --> 00:34:10.235
I talked about some best

00:34:10.235 --> 00:34:12.255
practices along the way, but I

00:34:12.255 --> 00:34:13.426
have a few more to share.

00:34:13.996 --> 00:34:16.926
Best practices help us zoom out.

00:34:17.206 --> 00:34:18.396
They guide this platform

00:34:18.396 --> 00:34:19.926
transition, but they take us

00:34:19.926 --> 00:34:21.456
into the future as our platforms

00:34:21.726 --> 00:34:23.126
continue to grow and evolve.

00:34:24.815 --> 00:34:26.996
First and most importantly, we

00:34:26.996 --> 00:34:28.065
believe that you should build

00:34:28.226 --> 00:34:30.456
one responsive website instead

00:34:30.456 --> 00:34:32.446
of building parallel desktop and

00:34:32.446 --> 00:34:33.216
mobile sites.

00:34:34.076 --> 00:34:35.516
I know this is easier said than

00:34:35.516 --> 00:34:37.166
done, but we really believe in

00:34:37.166 --> 00:34:38.466
using this suite of responsive

00:34:38.466 --> 00:34:40.406
design techniques to build a

00:34:40.406 --> 00:34:41.226
single site.

00:34:41.926 --> 00:34:42.806
And you should use feature

00:34:42.806 --> 00:34:44.766
detection instead of user agent

00:34:44.766 --> 00:34:45.186
sniffing.

00:34:45.186 --> 00:34:47.835
In the past, some developers

00:34:47.835 --> 00:34:49.446
have wanted to know the user

00:34:49.446 --> 00:34:51.206
agent to specifically identify

00:34:51.206 --> 00:34:53.456
iPad, but our new desktop user

00:34:53.456 --> 00:34:55.346
agent on iPad will prevent you

00:34:55.346 --> 00:34:55.976
from doing this.

00:34:55.976 --> 00:34:57.966
I want to convince you that you

00:34:57.966 --> 00:34:59.336
don't need to know your content

00:34:59.336 --> 00:35:00.256
is on an iPad.

00:35:00.496 --> 00:35:01.706
You just need to use feature

00:35:01.706 --> 00:35:02.296
detection.

00:35:03.766 --> 00:35:05.306
And the reason is that iPad is a

00:35:05.306 --> 00:35:05.986
chameleon.

00:35:06.446 --> 00:35:07.726
With all of the new content mode

00:35:07.726 --> 00:35:09.446
APIs that Charles told you

00:35:09.446 --> 00:35:11.046
about, your website could be in

00:35:11.046 --> 00:35:12.766
app that is in desktop mode or

00:35:12.766 --> 00:35:13.536
in mobile mode.

00:35:14.506 --> 00:35:15.686
Your web content could be in a

00:35:15.686 --> 00:35:17.616
Split View on either the mobile

00:35:17.616 --> 00:35:19.306
side or the desktop side.

00:35:19.686 --> 00:35:21.046
So knowing that your content is

00:35:21.046 --> 00:35:23.376
on an iPad specifically is not

00:35:23.376 --> 00:35:24.496
really that useful.

00:35:25.476 --> 00:35:26.636
And the confusion with user

00:35:26.636 --> 00:35:28.546
agent doesn't end with iPad.

00:35:28.546 --> 00:35:29.636
Anything is possible.

00:35:29.636 --> 00:35:31.636
We now have UIKit apps running

00:35:31.636 --> 00:35:34.246
on the Mac.

00:35:34.506 --> 00:35:36.406
Really, if you step back, we

00:35:36.406 --> 00:35:38.636
have web content on Apple Watch,

00:35:38.816 --> 00:35:41.286
on iPhone, on iPad and all of

00:35:41.286 --> 00:35:42.646
the different content modes and

00:35:42.646 --> 00:35:44.166
configurations we already

00:35:44.236 --> 00:35:46.596
covered, web content and UIKit

00:35:46.596 --> 00:35:48.606
apps on Mac, web content on

00:35:48.696 --> 00:35:49.756
AppKit apps on Mac.

00:35:50.516 --> 00:35:51.686
Targeting each one of these

00:35:51.686 --> 00:35:53.266
configurations and handing it

00:35:53.556 --> 00:35:55.236
big-screen site or small-screen

00:35:55.236 --> 00:35:57.256
site is going to be so much more

00:35:57.256 --> 00:35:59.166
limiting, more fragile and less

00:35:59.256 --> 00:36:01.086
future proof than using feature

00:36:01.086 --> 00:36:02.506
detection to see what each

00:36:02.636 --> 00:36:04.246
configuration is capable of.

00:36:05.646 --> 00:36:07.046
We're going to stand up here and

00:36:07.046 --> 00:36:08.546
tell you that responsive design

00:36:08.756 --> 00:36:10.376
is best practices for whatever

00:36:10.376 --> 00:36:12.136
the hot new product is year

00:36:12.136 --> 00:36:13.796
after year after year until

00:36:13.796 --> 00:36:15.296
finally we don't have to because

00:36:15.296 --> 00:36:15.976
it's the norm.

00:36:17.066 --> 00:36:18.656
Server-delivered content that's

00:36:18.746 --> 00:36:20.826
agnostic to who asked for it but

00:36:20.826 --> 00:36:22.656
adapted with responsive design

00:36:22.986 --> 00:36:25.436
is awesome on every device.

00:36:26.626 --> 00:36:28.806
And this device landscape has

00:36:28.806 --> 00:36:29.786
not been shrinking.

00:36:32.716 --> 00:36:34.156
We know this takes a lot of

00:36:34.156 --> 00:36:35.836
work, but we also know it's

00:36:35.836 --> 00:36:36.926
worth it.

00:36:38.756 --> 00:36:40.116
When we say iPad has

00:36:40.116 --> 00:36:42.056
desktop-class browsing, we mean

00:36:42.056 --> 00:36:43.986
modern desktop-class browsing,

00:36:43.986 --> 00:36:45.426
and that means no plug-ins.

00:36:45.886 --> 00:36:47.376
We've never had plug-ins on iOS,

00:36:47.636 --> 00:36:49.226
and we don't intend to add them

00:36:49.226 --> 00:36:49.496
now.

00:36:50.076 --> 00:36:51.616
Even on Mac, if you go out of

00:36:51.616 --> 00:36:53.416
your way to install Flash, it's

00:36:53.416 --> 00:36:55.126
still off by default, and we're

00:36:55.126 --> 00:36:56.436
dropping support for it in

00:36:56.436 --> 00:36:58.686
Safari altogether in 2020.

00:36:59.566 --> 00:37:01.266
So if you still haven't migrated

00:37:01.506 --> 00:37:03.806
your old video or games or

00:37:03.806 --> 00:37:05.766
restaurant menus to standard web

00:37:05.766 --> 00:37:08.176
technologies, now is the time to

00:37:08.176 --> 00:37:09.486
say goodbye to Flash.

00:37:09.486 --> 00:37:13.066
Safari on iPad is desktop-class,

00:37:13.886 --> 00:37:15.386
but iPad is still a mobile

00:37:15.386 --> 00:37:16.596
device, which means that we

00:37:16.596 --> 00:37:18.466
expect it to be used on the go,

00:37:18.606 --> 00:37:19.816
often in public places.

00:37:20.606 --> 00:37:22.416
Therefore, WebKit will prevent

00:37:22.416 --> 00:37:23.556
audio from playing

00:37:23.616 --> 00:37:24.406
automatically.

00:37:24.926 --> 00:37:26.216
We have found some desktop

00:37:26.216 --> 00:37:27.696
websites that assume that

00:37:27.696 --> 00:37:29.456
automatic playback will happen,

00:37:29.676 --> 00:37:31.226
but it's best not to assume.

00:37:31.926 --> 00:37:34.086
The standard media API allows

00:37:34.086 --> 00:37:35.476
you to know the truths of what

00:37:35.476 --> 00:37:37.106
actually happened, because the

00:37:37.186 --> 00:37:38.386
play function has a promise.

00:37:39.106 --> 00:37:40.506
You should catch that promise in

00:37:40.506 --> 00:37:42.016
case playback was rejected.

00:37:42.646 --> 00:37:43.876
But you should also consider

00:37:43.876 --> 00:37:45.526
designing your website so that

00:37:45.526 --> 00:37:47.756
all users on all devices can

00:37:47.756 --> 00:37:49.166
decide for themselves when they

00:37:49.166 --> 00:37:49.896
want audio.

00:37:51.306 --> 00:37:53.146
Next, think beyond the mouse and

00:37:53.146 --> 00:37:54.826
hardware keyboard when designing

00:37:54.826 --> 00:37:56.066
user interaction flows.

00:37:56.566 --> 00:37:58.006
Specifically, consider using

00:37:58.006 --> 00:38:00.006
pointer events, and avoid using

00:38:00.006 --> 00:38:01.486
mouse hover for anything other

00:38:01.486 --> 00:38:02.766
than decorative auxiliary

00:38:02.766 --> 00:38:03.276
changes.

00:38:05.106 --> 00:38:07.516
And finally, use built-in APIs.

00:38:07.926 --> 00:38:09.626
This is a broad topic, but I do

00:38:09.626 --> 00:38:11.096
have a specific example.

00:38:11.446 --> 00:38:13.306
We found many desktop websites

00:38:13.566 --> 00:38:15.116
that will use mouse events in

00:38:15.116 --> 00:38:16.786
order to customize text

00:38:16.786 --> 00:38:18.896
selection or text input.

00:38:19.326 --> 00:38:20.346
But there's a better tool for

00:38:20.346 --> 00:38:20.816
the job.

00:38:21.126 --> 00:38:22.666
Selection change events and

00:38:22.666 --> 00:38:23.936
input events are designed for

00:38:23.936 --> 00:38:25.016
this exact purpose.

00:38:25.786 --> 00:38:26.826
You'll always get the better

00:38:26.826 --> 00:38:28.936
behavior on every platform if

00:38:28.936 --> 00:38:30.696
you utilize built-in APIs

00:38:30.756 --> 00:38:32.356
instead of reverse engineering

00:38:32.356 --> 00:38:34.036
them with basic interaction

00:38:34.036 --> 00:38:34.396
events.

00:38:35.106 --> 00:38:37.506
So that's a lot.

00:38:38.216 --> 00:38:39.696
To help you digest all of this

00:38:39.696 --> 00:38:41.346
information, I'd like to invite

00:38:41.346 --> 00:38:43.206
Wenson back to the stage so that

00:38:43.206 --> 00:38:44.386
he can show you some of these

00:38:44.386 --> 00:38:46.166
new features and best practices

00:38:46.246 --> 00:38:46.856
in action.

00:38:48.146 --> 00:38:48.606
Wenson.

00:38:49.516 --> 00:38:54.500
[ Applause ]

00:38:57.456 --> 00:38:58.176
>> All right.

00:38:58.596 --> 00:38:59.926
Thanks, Beth.

00:39:00.556 --> 00:39:02.096
So you'll never be able to

00:39:02.096 --> 00:39:03.566
guess, but when I'm not working

00:39:03.566 --> 00:39:05.696
on web browsers in my spare time

00:39:06.016 --> 00:39:08.146
and not-so-spare time, I also

00:39:08.146 --> 00:39:09.156
like to work on web

00:39:09.156 --> 00:39:09.906
applications.

00:39:10.836 --> 00:39:11.836
Today, I'd like to share one

00:39:11.836 --> 00:39:13.036
I've been working on recently

00:39:13.726 --> 00:39:15.296
called Shiny Sketch.

00:39:15.876 --> 00:39:19.336
Now, I've only ever tested this

00:39:19.336 --> 00:39:21.186
against desktop browsers, so

00:39:21.186 --> 00:39:22.396
it'll be interesting to see how

00:39:22.396 --> 00:39:23.756
it behaves on my iPad.

00:39:24.576 --> 00:39:25.996
But first, let me give you a

00:39:25.996 --> 00:39:27.036
quick tour on my Mac.

00:39:27.796 --> 00:39:29.646
And as I do, I'll point out some

00:39:29.646 --> 00:39:31.236
potential areas that we may need

00:39:31.236 --> 00:39:32.866
to adjust in order to make it

00:39:32.866 --> 00:39:34.896
look and feel great on iPad.

00:39:35.956 --> 00:39:37.036
Okay, so here's what it looks

00:39:37.036 --> 00:39:37.966
like on macOS.

00:39:38.646 --> 00:39:40.606
And first, this website has a

00:39:40.606 --> 00:39:42.216
fixed four-column layout.

00:39:42.846 --> 00:39:44.306
What that means is as I make my

00:39:44.306 --> 00:39:45.966
window smaller, I just get

00:39:45.966 --> 00:39:48.436
horizontal scrolling, okay?

00:39:48.436 --> 00:39:49.286
So that's one thing to keep in

00:39:49.286 --> 00:39:49.636
mind.

00:39:50.916 --> 00:39:52.836
The next is that in order to

00:39:52.836 --> 00:39:54.136
access the Edit or Delete

00:39:54.136 --> 00:39:55.966
controls, I have to hover over

00:39:55.966 --> 00:39:56.516
each drawing.

00:39:57.456 --> 00:39:58.526
Of course, the Edit and Delete

00:39:58.526 --> 00:39:59.986
controls are really critical

00:39:59.986 --> 00:40:01.946
part of my web application.

00:40:03.276 --> 00:40:04.496
And lastly, I'm going to go in

00:40:04.496 --> 00:40:06.526
and try to scribble on one of

00:40:06.526 --> 00:40:07.216
these drawings.

00:40:07.826 --> 00:40:10.546
So I'm able to use my trackpad

00:40:11.086 --> 00:40:13.076
to draw here, but the code that

00:40:13.076 --> 00:40:14.796
I'm currently using to implement

00:40:14.796 --> 00:40:16.416
this only listens for mouse

00:40:16.416 --> 00:40:16.826
events.

00:40:17.176 --> 00:40:18.886
I'm probably going to need to

00:40:19.136 --> 00:40:20.846
adjust that for compatibility

00:40:20.846 --> 00:40:21.346
with iPad.

00:40:22.346 --> 00:40:23.336
Okay, so that's Mac.

00:40:24.336 --> 00:40:25.366
What does it look like on iPad?

00:40:25.366 --> 00:40:26.836
Let me show you.

00:40:27.326 --> 00:40:29.326
I happen to have the same page

00:40:29.326 --> 00:40:30.416
open in Safari.

00:40:31.046 --> 00:40:33.666
And the first thing I notice is

00:40:33.666 --> 00:40:34.766
that the four-column layout

00:40:35.056 --> 00:40:36.436
works great in landscape mode.

00:40:37.396 --> 00:40:39.996
However, once I rotate into

00:40:39.996 --> 00:40:41.586
portrait mode, let's see what

00:40:41.586 --> 00:40:42.036
happens.

00:40:42.726 --> 00:40:45.556
So I still get a four-column

00:40:45.556 --> 00:40:45.956
layout.

00:40:46.456 --> 00:40:49.756
I bet if I made my website

00:40:49.756 --> 00:40:51.426
responsive, I could avoid this

00:40:51.426 --> 00:40:51.806
scaling.

00:40:52.876 --> 00:40:54.286
What I'm going to do now is

00:40:54.286 --> 00:40:56.176
return to my Mac and see if I

00:40:56.176 --> 00:40:58.656
can figure out what's triggering

00:40:58.916 --> 00:41:01.626
this horizontal scrolling in my

00:41:01.626 --> 00:41:02.016
browser.

00:41:03.426 --> 00:41:04.696
Okay, so first things first.

00:41:05.136 --> 00:41:06.536
I'm going to resize the window

00:41:06.536 --> 00:41:07.936
so I do get horizontal scrolling

00:41:08.596 --> 00:41:09.076
like this.

00:41:09.076 --> 00:41:11.306
And then I'm going to go to the

00:41:11.306 --> 00:41:12.046
Develop menu.

00:41:12.046 --> 00:41:16.256
So I'm going to go down to Start

00:41:16.256 --> 00:41:18.606
Element Selection, and that

00:41:18.606 --> 00:41:19.906
allows me to see how big each

00:41:19.906 --> 00:41:20.506
element is.

00:41:20.936 --> 00:41:23.326
As an example, right here, this

00:41:23.326 --> 00:41:25.516
Edit button is 72 by 48 pixels.

00:41:26.096 --> 00:41:28.066
Okay, so I'm just going to start

00:41:28.066 --> 00:41:29.136
at the top of the page and try

00:41:29.136 --> 00:41:30.616
to find a really wide element.

00:41:32.056 --> 00:41:35.056
So this Shiny Sketch page banner

00:41:35.056 --> 00:41:37.806
or title is about 760 pixels.

00:41:38.666 --> 00:41:40.526
If I look at the window width

00:41:40.526 --> 00:41:42.966
itself using this ruler, it's

00:41:42.966 --> 00:41:45.166
also about 760 pixels, so this

00:41:45.166 --> 00:41:46.206
is pretty well proportioned.

00:41:47.566 --> 00:41:48.496
I'm going to move my cursor

00:41:48.496 --> 00:41:52.076
down, and as you might have

00:41:52.076 --> 00:41:53.916
guessed, the gallery section is

00:41:53.916 --> 00:41:55.656
a whopping 1,300 pixels.

00:41:56.246 --> 00:41:57.246
So I'm pretty sure this is

00:41:57.246 --> 00:41:58.416
what's triggering the horizontal

00:41:58.416 --> 00:41:59.676
scrolling in my web app.

00:41:59.676 --> 00:42:01.866
But I want to find out more it,

00:42:01.866 --> 00:42:02.816
so I'm just going to click.

00:42:03.106 --> 00:42:04.036
That's going to open Web

00:42:04.036 --> 00:42:06.416
Inspector where I can see more

00:42:06.416 --> 00:42:07.216
about the gallery.

00:42:08.286 --> 00:42:09.366
So in the Styles sidebar, there

00:42:09.366 --> 00:42:11.436
is indeed a hard-coded width of

00:42:11.526 --> 00:42:12.696
1,300 pixels.

00:42:13.496 --> 00:42:14.096
Why is this here?

00:42:14.926 --> 00:42:16.416
Well, when I added this, I think

00:42:16.416 --> 00:42:17.626
I was trying to make my website

00:42:17.966 --> 00:42:19.396
look good on really large

00:42:19.396 --> 00:42:20.956
displays, really wide displays.

00:42:21.266 --> 00:42:22.786
I didn't think that anyone would

00:42:22.786 --> 00:42:24.716
actually load my web page with a

00:42:24.716 --> 00:42:26.336
display of less than 1,300

00:42:26.336 --> 00:42:26.926
pixels width.

00:42:28.456 --> 00:42:29.246
Maybe it was a reasonable

00:42:29.246 --> 00:42:30.366
assumption to make at the time,

00:42:30.886 --> 00:42:32.606
but now I think I can do better.

00:42:33.496 --> 00:42:35.646
So what I'm going to do now is

00:42:35.886 --> 00:42:37.116
switch over and try to fix it.

00:42:37.956 --> 00:42:38.806
I'm going to make my website

00:42:38.806 --> 00:42:39.296
responsive.

00:42:40.426 --> 00:42:42.786
By the way, the entire web

00:42:42.786 --> 00:42:44.166
application is just three files,

00:42:44.516 --> 00:42:46.776
an HTML file, CSS file, and a

00:42:46.776 --> 00:42:47.386
JavaScript file.

00:42:47.386 --> 00:42:48.636
So I'm going to start in the

00:42:48.636 --> 00:42:50.836
HTML file where I'm going to add

00:42:50.836 --> 00:42:52.506
a meta viewport tag.

00:42:53.276 --> 00:42:54.876
So there's two important

00:42:54.876 --> 00:42:55.546
components to this

00:42:55.776 --> 00:42:57.296
width=device-width and

00:42:57.296 --> 00:42:58.796
initial-scale=1.0.

00:42:59.316 --> 00:43:00.366
This lets the browser know that

00:43:00.366 --> 00:43:01.746
the page is responsive at any

00:43:01.746 --> 00:43:02.326
device width.

00:43:02.326 --> 00:43:04.136
So that's important, but now

00:43:04.136 --> 00:43:05.116
let's actually make it

00:43:05.116 --> 00:43:06.786
responsive at any device width.

00:43:07.386 --> 00:43:09.266
So let's go to our CSS file.

00:43:09.796 --> 00:43:11.286
And remember that 1,300 pixel

00:43:11.286 --> 00:43:12.216
rule we saw earlier?

00:43:12.216 --> 00:43:13.666
I'm going to search for that.

00:43:15.076 --> 00:43:17.756
So here we go, width: 1300px.

00:43:17.756 --> 00:43:19.636
It is indeed on the gallery.

00:43:20.446 --> 00:43:21.866
And what I'm going to do is just

00:43:21.866 --> 00:43:22.876
change this to a max-width.

00:43:23.846 --> 00:43:25.086
What that means is that if my

00:43:25.086 --> 00:43:26.416
window is less than 1,300

00:43:26.416 --> 00:43:28.066
pixels, the drawings under my

00:43:28.066 --> 00:43:29.196
gallery should be able to

00:43:29.196 --> 00:43:29.586
reflow.

00:43:30.226 --> 00:43:31.506
They're able to reflow, because

00:43:31.756 --> 00:43:33.186
I conveniently set them as

00:43:33.186 --> 00:43:34.206
display: inline-block.

00:43:35.006 --> 00:43:38.416
Okay. So those were a couple of

00:43:38.416 --> 00:43:39.166
small changes.

00:43:39.526 --> 00:43:40.876
Let's see how it now behaves.

00:43:41.056 --> 00:43:44.846
All right, so it's now a

00:43:44.846 --> 00:43:46.026
three-column layout in portrait

00:43:46.026 --> 00:43:47.666
mode, but if I rotate back into

00:43:47.666 --> 00:43:50.746
landscape mode, it becomes four

00:43:50.746 --> 00:43:51.196
columns.

00:43:51.486 --> 00:43:52.496
That's because landscape mode is

00:43:52.496 --> 00:43:53.726
wide enough to accommodate for

00:43:53.726 --> 00:43:54.626
the four-column layout.

00:43:55.926 --> 00:43:57.186
Either way, there's no more

00:43:57.186 --> 00:43:58.576
scaling, and that's great.

00:43:59.636 --> 00:44:01.656
Okay, so next let's talk about

00:44:01.656 --> 00:44:02.016
drawing.

00:44:02.776 --> 00:44:04.036
As Beth mentioned, there's no

00:44:04.036 --> 00:44:06.116
mouse move on iPad, but luckily,

00:44:06.386 --> 00:44:08.066
I can adopt pointer events, and

00:44:08.066 --> 00:44:09.956
the touch-action CSS property to

00:44:09.956 --> 00:44:10.426
make it work.

00:44:11.426 --> 00:44:14.826
So let's return to the CSS file.

00:44:15.056 --> 00:44:16.386
So over here, I'm going to add

00:44:16.386 --> 00:44:18.426
touch-action none, or

00:44:18.426 --> 00:44:19.456
specifically, I'm going to add

00:44:19.456 --> 00:44:20.526
it to the .drawable-canvas

00:44:20.776 --> 00:44:21.716
which, as its name might

00:44:21.716 --> 00:44:23.366
suggest, is the element that I'm

00:44:23.366 --> 00:44:24.466
going to be dragging my finger

00:44:24.466 --> 00:44:25.366
over as I draw.

00:44:26.156 --> 00:44:27.876
Of course, it's important that

00:44:27.876 --> 00:44:30.376
as I drag my finger over, it

00:44:30.376 --> 00:44:31.036
doesn't scroll.

00:44:32.006 --> 00:44:32.916
That's why touch-action is

00:44:32.916 --> 00:44:33.406
important.

00:44:34.516 --> 00:44:36.196
Okay, next I'm going to go over

00:44:36.196 --> 00:44:38.286
to the JavaScript file where I'm

00:44:38.286 --> 00:44:40.816
going to look for mousemove.

00:44:41.376 --> 00:44:44.216
Okay, so this is the code that

00:44:44.216 --> 00:44:45.716
I'm currently using to listen

00:44:45.716 --> 00:44:48.026
for mouse events so I can draw

00:44:48.026 --> 00:44:48.476
on my Mac.

00:44:49.696 --> 00:44:50.686
I'm going to adjust this a

00:44:50.686 --> 00:44:51.726
little bit.

00:44:52.336 --> 00:44:55.716
So instead, what I'm going to do

00:44:55.966 --> 00:44:57.016
is check if pointer events are

00:44:57.016 --> 00:44:57.456
supported.

00:44:58.236 --> 00:44:59.506
If they are, I'm going to

00:44:59.506 --> 00:45:00.946
register pointer event listeners

00:45:00.946 --> 00:45:01.546
instead.

00:45:02.556 --> 00:45:03.716
Otherwise, I'll fall back to the

00:45:03.716 --> 00:45:04.736
mouse events that I'm currently

00:45:04.736 --> 00:45:05.076
using.

00:45:06.366 --> 00:45:09.296
Okay, so let's see these changes

00:45:09.346 --> 00:45:10.016
in action though.

00:45:10.586 --> 00:45:14.956
Let's give our canine friend

00:45:14.956 --> 00:45:15.856
Sona [phonetic] here a little

00:45:15.856 --> 00:45:15.976
hat.

00:45:22.336 --> 00:45:24.316
Well, it's not best drawn, but

00:45:24.316 --> 00:45:25.816
as you can see, I can clearly

00:45:25.996 --> 00:45:28.136
able to draw now.

00:45:28.376 --> 00:45:31.036
Okay, so one last minor detail.

00:45:32.436 --> 00:45:33.886
As Beth mentioned, iPad is

00:45:33.886 --> 00:45:36.116
compatible with mouse hover, but

00:45:36.116 --> 00:45:37.486
it's not immediately clear to me

00:45:37.736 --> 00:45:38.996
that the way to edit or delete,

00:45:38.996 --> 00:45:42.016
or drawings rather, is to first

00:45:42.296 --> 00:45:43.996
tap on each drawing in order to

00:45:43.996 --> 00:45:46.736
show the controls and then tap

00:45:46.736 --> 00:45:47.876
on the controls themselves.

00:45:47.876 --> 00:45:49.636
It means that any meaningful

00:45:49.636 --> 00:45:51.466
interaction with my app is going

00:45:51.466 --> 00:45:53.926
to require two taps on iPad.

00:45:53.926 --> 00:45:57.426
Let's make it easy to edit and

00:45:57.426 --> 00:45:58.636
delete with a single tap.

00:45:59.476 --> 00:46:00.866
What I'm going to do is add a

00:46:00.866 --> 00:46:01.786
Delete button that's always

00:46:01.786 --> 00:46:03.506
visible and just make tapping on

00:46:03.506 --> 00:46:05.426
each drawing immediately go into

00:46:05.426 --> 00:46:06.086
editing mode.

00:46:07.126 --> 00:46:07.686
So let's do that.

00:46:09.026 --> 00:46:10.546
First, I'm going to go over to

00:46:10.546 --> 00:46:12.406
the HTML file where I'm going to

00:46:12.406 --> 00:46:13.296
add a bit of markup.

00:46:13.816 --> 00:46:15.806
It's a very simple button that

00:46:15.806 --> 00:46:16.486
I'm going to add here.

00:46:17.256 --> 00:46:18.386
But note that I'm putting the

00:46:18.386 --> 00:46:19.566
class static-control here.

00:46:20.406 --> 00:46:21.346
It's going to become important

00:46:21.666 --> 00:46:22.656
very soon, because I'm going to

00:46:22.656 --> 00:46:25.736
head over to the CSS file where

00:46:25.736 --> 00:46:27.046
I'm going to add a media query.

00:46:27.046 --> 00:46:31.446
So what I'm doing here is I'm

00:46:31.446 --> 00:46:32.676
checking if hover is supported

00:46:32.766 --> 00:46:34.356
by using this media query, and

00:46:34.356 --> 00:46:35.646
if it is supported, we don't

00:46:35.646 --> 00:46:36.386
actually need that

00:46:36.386 --> 00:46:37.666
static-control, that static

00:46:37.666 --> 00:46:38.696
Delete button that I just added.

00:46:39.396 --> 00:46:41.596
So I can just set display: none

00:46:41.836 --> 00:46:44.546
on that, and it should hide it.

00:46:44.806 --> 00:46:46.016
Lastly, there's a small change

00:46:46.016 --> 00:46:46.896
we have to make to our

00:46:46.896 --> 00:46:47.546
JavaScript file.

00:46:48.556 --> 00:46:49.696
So now I'm going to look for

00:46:49.696 --> 00:46:52.326
mouseenter, and this is a code

00:46:52.326 --> 00:46:54.016
I'm using to show or hide the

00:46:54.016 --> 00:46:55.906
hover controls when the user's

00:46:55.906 --> 00:46:57.296
mouse enters or leaves each

00:46:57.296 --> 00:46:57.606
drawing.

00:46:58.436 --> 00:46:59.596
We don't need to do this if

00:46:59.596 --> 00:47:00.486
hover is not supported.

00:47:01.316 --> 00:47:02.426
So what I'm going to do is add a

00:47:02.426 --> 00:47:03.316
bit of logic up here.

00:47:04.196 --> 00:47:05.266
It's going to use the same media

00:47:05.266 --> 00:47:07.026
query as I did in the CSS file

00:47:07.186 --> 00:47:09.096
to check if hover exists, and if

00:47:09.096 --> 00:47:11.286
hover is not supported, I'm

00:47:11.286 --> 00:47:12.986
going to instead add a click

00:47:12.986 --> 00:47:14.366
event listener to the drawing

00:47:14.366 --> 00:47:15.806
itself and allow it to

00:47:15.806 --> 00:47:17.756
immediately start drawing mode.

00:47:18.866 --> 00:47:21.126
Then this early return ensures

00:47:21.126 --> 00:47:22.356
that I don't add the event

00:47:22.356 --> 00:47:24.336
listeners I don't need in the

00:47:24.336 --> 00:47:25.276
case where hover is not

00:47:25.276 --> 00:47:25.636
supported.

00:47:26.906 --> 00:47:28.176
Okay, so that was a lot of

00:47:28.176 --> 00:47:28.596
changes.

00:47:29.286 --> 00:47:30.226
But let's see it in action now.

00:47:30.226 --> 00:47:33.556
All right, first thing I notice

00:47:33.556 --> 00:47:35.636
is that Delete buttons are now

00:47:35.636 --> 00:47:36.826
always visible and ready to be

00:47:36.826 --> 00:47:37.066
tapped.

00:47:38.566 --> 00:47:39.456
But if I tap on each of the

00:47:39.456 --> 00:47:41.746
drawings, I'm able to edit them

00:47:41.966 --> 00:47:42.606
immediately.

00:47:43.886 --> 00:47:45.396
So it's one tap to do anything

00:47:45.396 --> 00:47:46.506
in my app.

00:47:48.626 --> 00:47:50.226
Okay, so with a few simple

00:47:50.226 --> 00:47:52.166
steps, I've made my desktop web

00:47:52.166 --> 00:47:54.306
app work great on iPad, and I

00:47:54.306 --> 00:47:56.276
think you web developers out

00:47:56.276 --> 00:47:57.266
there can as well.

00:47:58.396 --> 00:47:59.406
I'd like to now hand it off to

00:47:59.406 --> 00:48:01.176
Charles to summarize what we've

00:48:01.176 --> 00:48:02.686
covered today, and I'll see you

00:48:02.686 --> 00:48:03.306
at the labs.

00:48:04.516 --> 00:48:12.896
[ Applause ]

00:48:13.396 --> 00:48:14.986
>> Thanks, Wenson.

00:48:14.986 --> 00:48:18.296
Your web app looks awesome.

00:48:18.296 --> 00:48:21.066
In summary, iPad has made major

00:48:21.066 --> 00:48:23.326
new advancements to make today's

00:48:23.326 --> 00:48:25.406
desktop websites work great out

00:48:25.406 --> 00:48:26.236
of the box.

00:48:26.916 --> 00:48:28.866
We want you to take advantage of

00:48:28.866 --> 00:48:31.016
these new features to make your

00:48:31.246 --> 00:48:33.816
app or website even better on

00:48:33.816 --> 00:48:35.736
iPad just like you did for

00:48:35.736 --> 00:48:35.936
iPhone.

00:48:39.156 --> 00:48:41.756
For our web developers, consider

00:48:41.756 --> 00:48:43.736
building one responsive website

00:48:44.206 --> 00:48:46.036
using the techniques we talked

00:48:46.736 --> 00:48:47.846
about today.

00:48:48.046 --> 00:48:50.306
For app developers, let Safari

00:48:50.306 --> 00:48:51.326
View Controller and

00:48:51.326 --> 00:48:53.126
ASWebAuthenticationSession do

00:48:53.126 --> 00:48:55.076
the heavy lifting for you.

00:48:55.636 --> 00:48:58.036
If using WKWebView, please test

00:48:58.036 --> 00:48:58.406
your app.

00:48:59.926 --> 00:49:01.746
And please file bugs and send us

00:49:01.746 --> 00:49:02.216
your feedback.

00:49:02.706 --> 00:49:05.316
We'd love to hear from you.

00:49:05.536 --> 00:49:06.536
For more information about our

00:49:06.536 --> 00:49:08.386
other exciting authentication

00:49:08.526 --> 00:49:10.346
and web platform features, you

00:49:10.346 --> 00:49:11.516
should definitely check out

00:49:11.796 --> 00:49:13.856
Session 504, What's New in

00:49:13.856 --> 00:49:15.696
Authentication, Safari, and

00:49:15.696 --> 00:49:17.976
WebKit on Thursday at 11:00 am.

00:49:18.916 --> 00:49:20.556
There are also two labs related

00:49:20.556 --> 00:49:23.016
to the session today at 1:00 pm

00:49:23.466 --> 00:49:25.066
and Thursday at 12:00 pm.

00:49:25.826 --> 00:49:27.536
Please come to talk and learn

00:49:27.536 --> 00:49:28.986
more about what you heard today.

00:49:30.206 --> 00:49:31.846
Thank you and have a wonderful

00:49:32.056 --> 00:49:32.976
WWDC.

00:49:33.516 --> 00:49:38.500
[ Applause ]