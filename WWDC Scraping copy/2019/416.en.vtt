WEBVTT

00:00:01.176 --> 00:00:06.516
[ Music ]

00:00:07.516 --> 00:00:11.906
[ Applause and Cheering ]

00:00:12.406 --> 00:00:13.346
>> Good afternoon, everyone.

00:00:14.286 --> 00:00:15.266
My name is Harlan.

00:00:15.266 --> 00:00:16.966
And I am super excited to talk

00:00:16.966 --> 00:00:19.296
to you about how Xcode 11 allows

00:00:19.296 --> 00:00:20.886
you to create and distribute

00:00:21.156 --> 00:00:22.896
Binary Frameworks in Swift.

00:00:24.126 --> 00:00:25.376
Now, before I talk about binary

00:00:25.376 --> 00:00:26.856
frameworks, I actually want to

00:00:26.856 --> 00:00:28.006
take a moment to talk about

00:00:28.006 --> 00:00:29.106
Swift Packages.

00:00:30.196 --> 00:00:31.386
With the new support for Swift

00:00:31.386 --> 00:00:33.926
Packages in Xcode 11, it's easy

00:00:33.926 --> 00:00:35.616
to create and use them in your

00:00:35.616 --> 00:00:37.706
projects and distribute them to

00:00:37.706 --> 00:00:38.136
others.

00:00:38.586 --> 00:00:41.196
And Swift Packages are a great

00:00:41.196 --> 00:00:42.416
way to distribute your code,

00:00:42.756 --> 00:00:43.956
because Xcode knows how to

00:00:43.956 --> 00:00:45.746
manage their dependencies, and

00:00:45.746 --> 00:00:47.696
it will figure out which version

00:00:47.696 --> 00:00:48.866
of your Packages to use

00:00:48.866 --> 00:00:49.626
automatically.

00:00:50.236 --> 00:00:52.346
And because they are distributed

00:00:52.346 --> 00:00:54.716
in Source form, there is no

00:00:54.716 --> 00:00:56.396
requirement to maintain binary

00:00:56.396 --> 00:00:57.946
compatibility with your clients.

00:00:58.676 --> 00:01:00.536
If you have the ability to ship

00:01:00.716 --> 00:01:02.146
the source code of your project,

00:01:02.746 --> 00:01:04.775
then Swift Packages are really,

00:01:04.936 --> 00:01:06.266
really great.

00:01:07.496 --> 00:01:09.166
But not everyone has the ability

00:01:09.166 --> 00:01:10.226
to ship the source of their

00:01:10.226 --> 00:01:12.366
libraries, and if you don't,

00:01:13.376 --> 00:01:14.646
then Xcode 11 supports

00:01:14.646 --> 00:01:16.386
distributing binary libraries

00:01:16.456 --> 00:01:18.186
using the new XCFrameworks

00:01:18.186 --> 00:01:18.616
format.

00:01:19.516 --> 00:01:24.186
[ Applause ]

00:01:24.686 --> 00:01:25.766
So, in this talk, I'm going to

00:01:25.766 --> 00:01:27.766
introduce you to XCFrameworks,

00:01:28.106 --> 00:01:29.486
the new supported way to

00:01:29.486 --> 00:01:31.116
distribute binary frameworks.

00:01:31.856 --> 00:01:33.156
And I will also talk about some

00:01:33.156 --> 00:01:34.566
things that clients should

00:01:34.566 --> 00:01:36.096
consider when they're choosing

00:01:36.096 --> 00:01:38.956
to use third-party code.

00:01:39.166 --> 00:01:40.756
Next, I'll talk about what's

00:01:40.816 --> 00:01:43.026
inside an XCFramework, and how

00:01:43.026 --> 00:01:44.346
you can go about creating one

00:01:44.346 --> 00:01:45.116
for your project.

00:01:46.476 --> 00:01:48.466
And then finally, my colleague,

00:01:48.466 --> 00:01:50.126
Jordan, will come up and talk to

00:01:50.126 --> 00:01:51.106
you about some things that

00:01:51.106 --> 00:01:52.176
framework authors should

00:01:52.176 --> 00:01:53.996
consider to make using their

00:01:53.996 --> 00:01:55.926
framework as smooth as possible.

00:01:58.476 --> 00:02:02.056
So XCFrameworks are a new way to

00:02:02.056 --> 00:02:04.186
bundle up multiple variants of

00:02:04.186 --> 00:02:06.876
your framework in a way that

00:02:06.876 --> 00:02:08.786
will work across Xcode versions

00:02:08.786 --> 00:02:09.526
going forward.

00:02:10.166 --> 00:02:13.836
A single XCFramework can contain

00:02:13.836 --> 00:02:16.116
a variant for the simulator, and

00:02:16.116 --> 00:02:16.776
for the device.

00:02:17.516 --> 00:02:21.606
[ Applause ]

00:02:22.106 --> 00:02:22.666
Not done yet.

00:02:22.976 --> 00:02:24.856
Because a single XCFramework can

00:02:24.856 --> 00:02:26.866
also contain a variant for any

00:02:26.866 --> 00:02:28.366
of the platforms that Xcode

00:02:28.366 --> 00:02:28.926
supports.

00:02:29.516 --> 00:02:33.546
[ Applause ]

00:02:34.046 --> 00:02:35.376
You can also have a variant for

00:02:35.376 --> 00:02:37.676
Mac apps that use AppKit, and a

00:02:37.676 --> 00:02:38.866
variant for Mac apps that use

00:02:38.866 --> 00:02:39.406
UIKit.

00:02:39.806 --> 00:02:41.136
So, no matter which API your

00:02:41.136 --> 00:02:42.986
clients want to use, they will

00:02:42.986 --> 00:02:44.256
be able to use your framework

00:02:44.256 --> 00:02:44.876
effectively.

00:02:45.406 --> 00:02:48.396
And not only can you bundle up

00:02:48.396 --> 00:02:50.556
frameworks, but you can also use

00:02:50.556 --> 00:02:52.846
XCFrameworks to bundle up static

00:02:52.846 --> 00:02:53.656
libraries, and their

00:02:53.656 --> 00:02:54.746
corresponding headers.

00:02:54.956 --> 00:02:56.096
And Xcode will set up your

00:02:56.096 --> 00:02:57.056
client's search pads

00:02:57.056 --> 00:02:57.806
automatically.

00:02:59.046 --> 00:02:59.936
And of course--

00:03:00.516 --> 00:03:03.576
[ Applause ]

00:03:04.076 --> 00:03:05.636
XCFrameworks support binary

00:03:05.636 --> 00:03:07.356
distribution of Swift and

00:03:07.426 --> 00:03:10.306
C-based code.

00:03:10.516 --> 00:03:11.706
So, now I'd actually like to

00:03:11.706 --> 00:03:13.126
just show you how easy it is to

00:03:13.126 --> 00:03:14.286
get started using an

00:03:14.346 --> 00:03:14.926
XCFramework.

00:03:17.936 --> 00:03:19.576
So here, I've got a pretty

00:03:19.606 --> 00:03:20.646
simple iOS app.

00:03:20.646 --> 00:03:22.906
And I will go ahead and click

00:03:22.906 --> 00:03:24.916
Run to run it on the iPad

00:03:24.916 --> 00:03:25.436
Simulator.

00:03:25.616 --> 00:03:27.096
You can see, it has got a big,

00:03:27.096 --> 00:03:28.266
blue Launch button, and when you

00:03:28.296 --> 00:03:30.336
click it, it does nothing.

00:03:30.336 --> 00:03:32.516
Well, that is because it's

00:03:32.516 --> 00:03:33.956
hooked up to this launch method

00:03:33.956 --> 00:03:35.566
right here, and its body is

00:03:35.566 --> 00:03:36.246
totally empty.

00:03:37.466 --> 00:03:39.046
Well, I've actually got this

00:03:39.166 --> 00:03:40.766
awesome XCFramework I'd like to

00:03:40.766 --> 00:03:42.666
use, called FlightKit.

00:03:44.646 --> 00:03:46.106
And FlightKit gives me some UI

00:03:46.306 --> 00:03:47.416
that I'd to present in my

00:03:47.416 --> 00:03:48.156
application.

00:03:49.136 --> 00:03:50.706
So, to actually be able to use

00:03:50.736 --> 00:03:52.976
the FlightKit XCFramework, all I

00:03:52.976 --> 00:03:54.496
need to do is click on the

00:03:54.496 --> 00:03:55.566
Project in the Project

00:03:55.566 --> 00:03:58.396
Navigator, select my target, and

00:03:58.396 --> 00:03:59.456
make sure the General tab is

00:03:59.456 --> 00:04:00.006
selected.

00:04:01.286 --> 00:04:02.576
Then, I'll scroll down to

00:04:02.576 --> 00:04:04.106
Frameworks, Libraries, and

00:04:04.106 --> 00:04:04.996
Embedded Content.

00:04:07.176 --> 00:04:08.646
Then, I'll just drag in my

00:04:08.646 --> 00:04:10.916
XCFramework, and that has been

00:04:10.916 --> 00:04:12.276
wired up automatically as a

00:04:12.276 --> 00:04:13.766
dependency of my target.

00:04:15.076 --> 00:04:16.226
So let's go back to the code and

00:04:16.226 --> 00:04:17.486
start using it.

00:04:18.516 --> 00:04:20.576
Well, just like any framework

00:04:20.576 --> 00:04:21.696
you're used to using already,

00:04:21.875 --> 00:04:23.306
the first thing you'll do is

00:04:23.306 --> 00:04:23.766
Import it.

00:04:25.196 --> 00:04:26.356
And now, I'd like to go ahead

00:04:26.356 --> 00:04:27.556
and get started using some of

00:04:27.556 --> 00:04:28.816
the APIs from FlightKit.

00:04:29.366 --> 00:04:30.456
So, either I could go look at

00:04:30.456 --> 00:04:33.446
the documentation, or I can

00:04:33.446 --> 00:04:34.376
Command click the name

00:04:34.376 --> 00:04:35.546
FlightKit, and click Jump to

00:04:35.546 --> 00:04:36.166
Definition.

00:04:37.146 --> 00:04:38.106
What this will do is it will

00:04:38.106 --> 00:04:39.946
take me to the generated

00:04:39.946 --> 00:04:41.156
interface for FlightKit.

00:04:42.136 --> 00:04:43.826
And this shows all the public

00:04:43.826 --> 00:04:44.146
APIs.

00:04:44.146 --> 00:04:45.636
Every public type, public

00:04:45.636 --> 00:04:47.626
method, everything that I can

00:04:47.626 --> 00:04:49.116
use when I import FlightKit.

00:04:49.856 --> 00:04:52.006
So I can see that there is this

00:04:52.126 --> 00:04:53.606
LaunchViewController, which is a

00:04:53.606 --> 00:04:55.116
subclass of UIViewController.

00:04:55.976 --> 00:04:57.226
That seems to be some little

00:04:57.226 --> 00:04:58.486
piece of UI that I might want to

00:04:58.486 --> 00:04:58.786
show.

00:05:00.026 --> 00:05:02.386
Great. So, now I need to know

00:05:02.386 --> 00:05:03.406
actually how to create one of

00:05:03.406 --> 00:05:05.026
these, and I can see in the

00:05:05.026 --> 00:05:06.176
interface that there is an

00:05:06.176 --> 00:05:07.606
Initializer that takes a

00:05:07.606 --> 00:05:08.256
Spaceship.

00:05:08.846 --> 00:05:10.216
And that Spaceship is also part

00:05:10.216 --> 00:05:10.766
of FlightKit.

00:05:12.196 --> 00:05:13.666
So, if I jump to its definition,

00:05:13.776 --> 00:05:15.106
it will take me further down in

00:05:15.106 --> 00:05:16.816
this generated interface and

00:05:16.816 --> 00:05:17.946
show me everything that is in

00:05:17.946 --> 00:05:19.276
Spaceship that I can make use

00:05:19.276 --> 00:05:19.456
of.

00:05:20.006 --> 00:05:23.746
I can see that there is a public

00:05:23.746 --> 00:05:25.586
stored property called Name, and

00:05:25.996 --> 00:05:26.926
there is also a public

00:05:26.926 --> 00:05:28.396
initializer that takes a name.

00:05:29.836 --> 00:05:31.246
Okay, so I can create a

00:05:31.246 --> 00:05:32.766
Spaceship, and I can create a

00:05:32.766 --> 00:05:34.166
LaunchViewController, and then I

00:05:34.166 --> 00:05:34.796
can present it.

00:05:36.186 --> 00:05:37.396
So, let's go back to the code

00:05:37.396 --> 00:05:38.346
and do exactly that.

00:05:39.376 --> 00:05:40.576
So, first I'll create a ship,

00:05:41.576 --> 00:05:42.566
and I can see that auto

00:05:42.566 --> 00:05:43.886
completion is already suggesting

00:05:43.886 --> 00:05:45.446
to me all the things that were

00:05:45.446 --> 00:05:47.326
in FlightKit, again, just like

00:05:47.326 --> 00:05:48.306
any framework that you are

00:05:48.306 --> 00:05:49.336
already used to using.

00:05:50.276 --> 00:05:51.186
I can accept this auto

00:05:51.186 --> 00:05:53.086
completion, then I'll pick a

00:05:53.086 --> 00:05:53.866
name for my ship.

00:05:54.506 --> 00:05:55.456
Well, I've got this array of

00:05:55.456 --> 00:05:57.066
ship names already, and any one

00:05:57.066 --> 00:05:58.186
of them would be a great name

00:05:58.186 --> 00:05:58.696
for this ship.

00:05:59.646 --> 00:06:01.006
So I will actually go ahead and

00:06:01.006 --> 00:06:02.896
pick a random element out of the

00:06:02.896 --> 00:06:03.716
ship names array.

00:06:04.306 --> 00:06:07.206
Now, I will create a

00:06:07.206 --> 00:06:10.506
LaunchViewController, and I'll

00:06:10.676 --> 00:06:12.016
pass it the ship that I just

00:06:12.016 --> 00:06:12.416
created.

00:06:12.956 --> 00:06:15.776
And finally, I'll show the

00:06:15.776 --> 00:06:17.696
controller passing myself as the

00:06:17.696 --> 00:06:18.136
sender.

00:06:18.706 --> 00:06:21.866
So, created a ship, created some

00:06:21.866 --> 00:06:23.666
UI, and now I'll go to show it.

00:06:24.706 --> 00:06:26.266
I'll build and run my program in

00:06:26.266 --> 00:06:26.866
the Simulator.

00:06:26.866 --> 00:06:28.776
And when I click the Launch

00:06:28.776 --> 00:06:30.416
button, it picks a random name,

00:06:30.416 --> 00:06:31.466
and launches the UI.

00:06:31.466 --> 00:06:34.586
If I click it again, it will

00:06:34.586 --> 00:06:36.946
pick another name, and another.

00:06:37.336 --> 00:06:37.896
You get it.

00:06:39.186 --> 00:06:41.636
So, that's how to use an

00:06:41.636 --> 00:06:43.136
XCFramework for just one

00:06:43.136 --> 00:06:44.436
platform, but one of the great

00:06:44.546 --> 00:06:46.536
things about XCFrameworks is

00:06:46.536 --> 00:06:47.526
that you can put multiple

00:06:47.526 --> 00:06:48.916
variants in the same bundle.

00:06:49.606 --> 00:06:50.996
So just by dragging the one

00:06:50.996 --> 00:06:52.956
XCFramework in, not only am I

00:06:52.956 --> 00:06:54.036
able to build and run for the

00:06:54.036 --> 00:06:57.196
simulator, but if I select

00:06:57.196 --> 00:07:00.356
Generic iOS Device, then I can

00:07:00.356 --> 00:07:02.326
go to Product Archive, and build

00:07:02.326 --> 00:07:03.686
an archive for the App Store as

00:07:03.686 --> 00:07:04.006
well.

00:07:04.676 --> 00:07:10.036
So that is how easy it is to use

00:07:10.036 --> 00:07:11.456
an XCFramework from your code.

00:07:12.516 --> 00:07:18.546
[ Applause ]

00:07:19.046 --> 00:07:20.206
So when you are making the

00:07:20.206 --> 00:07:23.346
choice to use a framework, it's

00:07:23.386 --> 00:07:24.766
really important to be aware of

00:07:24.766 --> 00:07:26.116
what you're making available to

00:07:26.116 --> 00:07:27.046
third party code.

00:07:28.426 --> 00:07:30.196
Importantly, you want to make

00:07:30.196 --> 00:07:32.556
sure that you trust the source

00:07:32.556 --> 00:07:33.156
of the framework.

00:07:34.156 --> 00:07:35.226
You trust that they're not going

00:07:35.226 --> 00:07:36.986
to introduce bugs or instability

00:07:36.986 --> 00:07:38.946
to your app, and you trust that

00:07:38.946 --> 00:07:40.276
they'll respect your user's

00:07:40.316 --> 00:07:40.806
privacy.

00:07:41.346 --> 00:07:44.366
For example, if you've been

00:07:44.366 --> 00:07:46.006
granted Entitlements for your

00:07:46.006 --> 00:07:47.546
application, and you use a

00:07:47.546 --> 00:07:49.626
framework, that framework is

00:07:49.696 --> 00:07:51.276
also granted those entitlements.

00:07:51.806 --> 00:07:53.416
And those permissions, if your

00:07:53.416 --> 00:07:54.256
users have granted them

00:07:54.256 --> 00:07:54.766
permissions.

00:07:56.736 --> 00:07:58.716
Additionally, if you're adopting

00:07:58.716 --> 00:08:00.256
a framework that expects a

00:08:00.256 --> 00:08:01.246
certain entitlement to be

00:08:01.246 --> 00:08:02.916
available, it's your

00:08:02.916 --> 00:08:04.266
responsibility to add that

00:08:04.266 --> 00:08:06.186
entitlement to your app.

00:08:07.836 --> 00:08:09.786
Another thing to consider about

00:08:09.786 --> 00:08:11.036
using frameworks is that

00:08:11.586 --> 00:08:12.436
sometimes you will use a

00:08:12.436 --> 00:08:14.066
framework that brings its own

00:08:14.066 --> 00:08:16.466
dependencies along, and those

00:08:16.466 --> 00:08:18.076
dependencies might have their

00:08:18.076 --> 00:08:20.396
own dependencies, and it's your

00:08:20.396 --> 00:08:21.966
responsibility not only to add

00:08:21.966 --> 00:08:23.276
all of these to your project,

00:08:23.966 --> 00:08:25.836
but also to extend the same

00:08:25.836 --> 00:08:27.966
trust to each of them as well.

00:08:27.966 --> 00:08:30.896
Now, it is worth noting that

00:08:30.966 --> 00:08:34.086
this trust extends to using

00:08:34.086 --> 00:08:35.186
Swift Packages as well.

00:08:36.126 --> 00:08:37.346
One advantage of packages over

00:08:37.346 --> 00:08:38.525
binary frameworks is that you

00:08:38.525 --> 00:08:40.116
can inspect the code, and you

00:08:40.116 --> 00:08:41.285
can step into it while you're

00:08:41.285 --> 00:08:41.676
debugging.

00:08:42.285 --> 00:08:43.716
If you want more information

00:08:43.716 --> 00:08:45.006
about using Swift Packages in

00:08:45.046 --> 00:08:47.066
Xcode, I'd recommend these talks

00:08:47.066 --> 00:08:48.066
from earlier this week.

00:08:48.666 --> 00:08:52.126
But whether you're using a

00:08:52.126 --> 00:08:54.096
package or a binary framework,

00:08:54.516 --> 00:08:56.606
Xcode 11 makes it easy to use

00:08:56.606 --> 00:09:00.686
third party code that you trust.

00:09:02.206 --> 00:09:03.846
So now, I'd like to talk about

00:09:03.846 --> 00:09:05.706
how to create an XCFramework.

00:09:06.846 --> 00:09:08.226
Well, the first thing you'll

00:09:08.226 --> 00:09:10.086
want to do is have some source

00:09:10.086 --> 00:09:10.886
code that you'd like to

00:09:10.886 --> 00:09:11.386
distribute.

00:09:11.386 --> 00:09:14.196
So let's actually take a look at

00:09:14.196 --> 00:09:15.456
some of the source code from

00:09:15.456 --> 00:09:16.826
FlightKit, from earlier.

00:09:18.056 --> 00:09:19.296
This is just a subset of the

00:09:19.296 --> 00:09:21.086
objects in FlightKit, just for

00:09:21.086 --> 00:09:21.666
an example.

00:09:22.346 --> 00:09:24.886
But you can see that Spaceship

00:09:24.916 --> 00:09:26.686
type that we looked at earlier.

00:09:28.136 --> 00:09:29.806
You can also see an enum called

00:09:29.806 --> 00:09:31.606
Speed, that describes how fast

00:09:31.606 --> 00:09:32.716
something can move in space.

00:09:34.066 --> 00:09:35.296
You also see a struct called

00:09:35.296 --> 00:09:36.926
Location, that describes the

00:09:36.926 --> 00:09:38.676
location of an object in space.

00:09:40.156 --> 00:09:42.566
Great. So we have this code.

00:09:43.196 --> 00:09:44.336
Now, how do we make sure that we

00:09:44.336 --> 00:09:45.736
build this library for

00:09:45.736 --> 00:09:46.496
distribution?

00:09:47.446 --> 00:09:49.436
Well, in Xcode 11, there's a new

00:09:49.436 --> 00:09:51.046
Build setting called Build

00:09:51.046 --> 00:09:52.576
Libraries for Distribution.

00:09:53.556 --> 00:09:54.786
And it does exactly that.

00:09:54.966 --> 00:09:56.256
It turns on all the features

00:09:56.256 --> 00:09:58.116
that are necessary to build your

00:09:58.116 --> 00:09:59.636
library in such a way that it

00:09:59.636 --> 00:10:00.496
can be distributed.

00:10:02.046 --> 00:10:04.166
Now, let's talk about one of

00:10:04.166 --> 00:10:05.386
those features right now.

00:10:06.906 --> 00:10:08.536
If you've tried sending somebody

00:10:08.756 --> 00:10:10.586
a built Swift Framework before,

00:10:11.286 --> 00:10:12.716
you may have seen a variant of

00:10:12.716 --> 00:10:13.536
this error.

00:10:14.956 --> 00:10:17.126
Compiled module was created by a

00:10:17.126 --> 00:10:18.446
newer version of the compiler.

00:10:18.986 --> 00:10:21.846
What does this error actually

00:10:21.846 --> 00:10:21.976
mean?

00:10:23.506 --> 00:10:24.626
Well, when the Swift compiler

00:10:24.626 --> 00:10:26.656
goes to import a module, it

00:10:26.656 --> 00:10:27.956
looks for a file called the

00:10:27.956 --> 00:10:29.596
Compiled Module for that

00:10:29.596 --> 00:10:30.156
library.

00:10:31.676 --> 00:10:33.286
If it finds one of these files,

00:10:33.646 --> 00:10:35.206
it reads off the manifest of

00:10:35.246 --> 00:10:36.946
public APIs that you can call

00:10:36.946 --> 00:10:39.996
into, and lets you use them.

00:10:40.326 --> 00:10:42.206
Now, this Compiled Module Format

00:10:42.746 --> 00:10:45.746
is a binary format that

00:10:45.746 --> 00:10:47.876
basically contains internal

00:10:47.876 --> 00:10:49.236
compiler data structures.

00:10:50.096 --> 00:10:51.376
And since they're just internal

00:10:51.376 --> 00:10:52.996
data structures, they're subject

00:10:52.996 --> 00:10:55.116
to change with every version of

00:10:55.116 --> 00:10:55.966
the Swift Compiler.

00:10:57.096 --> 00:10:58.986
So what this means is that if

00:10:59.216 --> 00:11:00.756
one person tries to import a

00:11:00.756 --> 00:11:02.566
module using one version of

00:11:02.566 --> 00:11:04.436
Swift, and that module was

00:11:04.496 --> 00:11:05.596
created by another version of

00:11:05.596 --> 00:11:07.666
Swift, their compiler can't

00:11:07.666 --> 00:11:08.806
understand it, and they won't be

00:11:08.806 --> 00:11:10.126
able to use it.

00:11:11.176 --> 00:11:13.516
Well, in order to solve this

00:11:13.516 --> 00:11:16.406
version lock, Xcode 11

00:11:16.406 --> 00:11:17.916
introduces a new format for

00:11:17.916 --> 00:11:19.586
Swift Modules, called Swift

00:11:19.586 --> 00:11:20.746
Module Interfaces.

00:11:21.886 --> 00:11:23.186
And just like the Compiled

00:11:23.186 --> 00:11:25.376
Module Format, they list out all

00:11:25.376 --> 00:11:27.756
the public APIs of a module, but

00:11:27.756 --> 00:11:29.956
in a textual form that behaves

00:11:29.956 --> 00:11:30.966
more like source code.

00:11:32.086 --> 00:11:33.356
And since they behave like

00:11:33.356 --> 00:11:35.546
source code, then future

00:11:35.546 --> 00:11:37.006
versions of the Swift Compiler

00:11:37.436 --> 00:11:39.026
will be able to import module

00:11:39.026 --> 00:11:40.676
interfaces created with older

00:11:40.676 --> 00:11:41.066
versions.

00:11:41.716 --> 00:11:45.396
And when you enable Build

00:11:45.396 --> 00:11:46.696
Libraries for Distribution,

00:11:47.416 --> 00:11:48.606
you're telling the compiler to

00:11:48.606 --> 00:11:50.076
generate one of these stable

00:11:50.076 --> 00:11:52.316
interfaces whenever it builds

00:11:52.316 --> 00:11:52.926
your framework.

00:11:53.606 --> 00:11:57.406
So, what does one of these

00:11:57.406 --> 00:11:58.836
interfaces actually look like?

00:11:59.586 --> 00:12:01.176
Let's take a look again at the

00:12:01.176 --> 00:12:02.566
source of FlightKit.

00:12:03.716 --> 00:12:04.856
So that is the source from

00:12:04.856 --> 00:12:05.326
FlightKit.

00:12:05.326 --> 00:12:08.116
And on the right, you'll see the

00:12:08.116 --> 00:12:09.606
Module Interface for FlightKit.

00:12:10.286 --> 00:12:11.546
Now, this is a lot, and it goes

00:12:11.546 --> 00:12:12.816
off the screen, so we are going

00:12:12.816 --> 00:12:15.206
to look at it piece by piece.

00:12:15.416 --> 00:12:17.146
So first you'll see this section

00:12:17.146 --> 00:12:17.916
of meta data.

00:12:18.826 --> 00:12:20.916
So this includes the version of

00:12:20.916 --> 00:12:22.116
the compiler that produced this

00:12:22.116 --> 00:12:24.276
interface, but it also contains

00:12:24.306 --> 00:12:26.026
the subset of command line flags

00:12:26.316 --> 00:12:27.696
that the Swift Compiler needs to

00:12:27.696 --> 00:12:29.256
import this as a module.

00:12:32.156 --> 00:12:34.636
Next, you'll see all the modules

00:12:34.636 --> 00:12:36.986
that this framework imports, and

00:12:37.836 --> 00:12:39.306
then we'll start seeing the

00:12:39.306 --> 00:12:40.586
types that are part of the

00:12:40.586 --> 00:12:41.096
interface.

00:12:42.356 --> 00:12:43.976
So, here's the public API of the

00:12:43.976 --> 00:12:44.846
Spaceship class.

00:12:44.976 --> 00:12:46.926
Now, I want you to notice three

00:12:46.926 --> 00:12:48.126
things here.

00:12:48.766 --> 00:12:50.516
Number one is that the public

00:12:50.516 --> 00:12:52.706
name property is included in the

00:12:52.706 --> 00:12:54.806
interface, but the private

00:12:54.806 --> 00:12:56.266
current location property is

00:12:56.266 --> 00:12:56.706
not.

00:12:57.896 --> 00:13:00.686
It's not part of the public API.

00:13:01.426 --> 00:13:04.176
Next, notice that the public

00:13:04.216 --> 00:13:06.356
initializer and the fly method

00:13:06.496 --> 00:13:07.876
are included in the interface.

00:13:09.006 --> 00:13:10.796
But their bodies are not

00:13:10.796 --> 00:13:11.986
included, again, because they're

00:13:11.986 --> 00:13:14.116
not part of the public API.

00:13:15.276 --> 00:13:16.656
And finally, notice that the

00:13:16.656 --> 00:13:18.596
class has a de-initializer in

00:13:18.596 --> 00:13:20.286
the interface, but there wasn't

00:13:20.286 --> 00:13:21.416
one written in the original

00:13:21.416 --> 00:13:22.626
source code.

00:13:23.186 --> 00:13:26.036
Now, when you write a class in

00:13:26.036 --> 00:13:27.676
Swift, and you don't provide an

00:13:27.676 --> 00:13:29.456
explicit de-initializer, the

00:13:29.456 --> 00:13:31.086
compiler generates one for you.

00:13:31.616 --> 00:13:34.296
And this sort of highlights one

00:13:34.296 --> 00:13:35.666
of the underlying principles of

00:13:35.666 --> 00:13:36.606
Module Interfaces.

00:13:37.146 --> 00:13:38.416
If this format is supposed to be

00:13:38.416 --> 00:13:39.936
stable across versions of the

00:13:39.936 --> 00:13:42.156
compiler, then the compiler

00:13:42.156 --> 00:13:43.976
should not make any assumptions

00:13:44.196 --> 00:13:45.626
about the underlying source

00:13:45.626 --> 00:13:45.886
code.

00:13:46.786 --> 00:13:48.466
So we include it in the Module

00:13:48.466 --> 00:13:48.926
Interface.

00:13:49.506 --> 00:13:53.316
Next, let's look at that Speed

00:13:53.316 --> 00:13:53.516
enum.

00:13:54.466 --> 00:13:55.666
Well, the first thing to see is

00:13:55.666 --> 00:13:57.796
that both cases of the enum are

00:13:57.796 --> 00:13:58.316
included.

00:13:58.506 --> 00:14:01.996
Those are part of the public

00:14:01.996 --> 00:14:02.086
API.

00:14:02.086 --> 00:14:03.956
However, in the interface,

00:14:03.956 --> 00:14:05.626
there's an explicit conformance

00:14:05.626 --> 00:14:06.316
to Hashable.

00:14:07.116 --> 00:14:08.876
And we list off the methods that

00:14:08.876 --> 00:14:11.476
are required to conform to both

00:14:11.476 --> 00:14:12.566
Hashable and Equitable.

00:14:13.396 --> 00:14:14.846
Well, this is because in Swift,

00:14:15.146 --> 00:14:16.666
if you make an enum without any

00:14:16.666 --> 00:14:19.496
associated values, then the

00:14:19.496 --> 00:14:21.026
compiler implicitly makes that

00:14:21.026 --> 00:14:22.626
conform to an Equitable and

00:14:22.626 --> 00:14:24.546
Hashable, and automatically

00:14:24.546 --> 00:14:25.756
derives the methods that are

00:14:25.756 --> 00:14:26.276
required.

00:14:26.916 --> 00:14:28.166
So, in the spirit of being

00:14:28.166 --> 00:14:29.306
explicit, and not making

00:14:29.306 --> 00:14:31.696
assumptions, it's included in

00:14:31.696 --> 00:14:32.576
the Module Interface.

00:14:33.956 --> 00:14:36.476
And finally, the Location struct

00:14:36.656 --> 00:14:38.746
is included as is, because it

00:14:38.746 --> 00:14:39.876
only has public stored

00:14:39.876 --> 00:14:41.626
properties, and does not declare

00:14:41.626 --> 00:14:42.696
any conformances.

00:14:43.326 --> 00:14:45.686
So that's a quick look at the

00:14:45.686 --> 00:14:46.976
Module Interface for FlightKit.

00:14:51.496 --> 00:14:52.676
Now that you've taken a look at

00:14:52.676 --> 00:14:54.966
what's inside a framework, let's

00:14:54.966 --> 00:14:56.296
talk about how to build a

00:14:56.336 --> 00:14:58.766
distributable binary XCFramework

00:14:58.766 --> 00:14:59.156
yourself.

00:14:59.746 --> 00:15:02.246
Well, the first step to building

00:15:02.246 --> 00:15:03.936
your framework is by building an

00:15:03.936 --> 00:15:04.406
archive.

00:15:05.326 --> 00:15:06.626
Archiving Your Framework will

00:15:06.626 --> 00:15:08.656
build it in Release Mode, and it

00:15:08.656 --> 00:15:09.576
will package it up for

00:15:09.576 --> 00:15:11.186
distribution and you can see

00:15:11.186 --> 00:15:12.716
that in the Organizer window.

00:15:13.746 --> 00:15:15.636
And as an added benefit, this

00:15:15.686 --> 00:15:17.376
archive will also contain the

00:15:17.376 --> 00:15:18.776
debug information that

00:15:18.776 --> 00:15:20.196
corresponds to that build of

00:15:20.196 --> 00:15:21.906
your framework, which means if

00:15:21.906 --> 00:15:23.776
your clients have any crashes or

00:15:23.776 --> 00:15:25.116
any instability that originate

00:15:25.116 --> 00:15:26.526
in your framework, they'll be

00:15:26.526 --> 00:15:27.936
able to send it to you, and you

00:15:27.936 --> 00:15:29.056
will be able to look at the

00:15:29.146 --> 00:15:31.606
symbols and debug it.

00:15:32.336 --> 00:15:34.626
To Archive your framework, you

00:15:34.626 --> 00:15:36.336
can use the xcodebuild archive

00:15:36.336 --> 00:15:36.776
command.

00:15:37.836 --> 00:15:39.166
You'll pass in the scheme of

00:15:39.166 --> 00:15:40.596
your framework in your project,

00:15:41.606 --> 00:15:43.166
and list out the destinations

00:15:43.166 --> 00:15:44.146
that you'd like to compile it

00:15:44.146 --> 00:15:44.406
for.

00:15:45.186 --> 00:15:46.606
So if you're building for iOS,

00:15:46.976 --> 00:15:47.836
this can be one for the

00:15:47.836 --> 00:15:49.676
simulator, one for the device,

00:15:50.266 --> 00:15:51.456
and one for the Mac that's

00:15:51.456 --> 00:15:52.216
running UIKit.

00:15:52.836 --> 00:15:55.486
You will also need to pass the

00:15:55.486 --> 00:15:57.416
Skip Install build setting, and

00:15:57.416 --> 00:15:58.276
set it to No.

00:15:59.096 --> 00:16:01.316
This tells xcodebuild archive to

00:16:01.316 --> 00:16:03.256
install your framework in the

00:16:03.256 --> 00:16:04.286
resulting archive.

00:16:04.926 --> 00:16:09.276
So, by doing this, you will be

00:16:09.276 --> 00:16:11.636
building archives of each

00:16:11.636 --> 00:16:13.666
variant of your framework, and

00:16:13.666 --> 00:16:15.056
those will be available in the

00:16:15.056 --> 00:16:17.186
Archives directory in the Xcode

00:16:17.186 --> 00:16:19.226
Locations tab, in the

00:16:19.226 --> 00:16:20.096
Preferences window.

00:16:20.606 --> 00:16:24.186
Once you've built these

00:16:24.186 --> 00:16:25.966
archives, you can extract the

00:16:25.966 --> 00:16:27.456
frameworks, and bundle them up

00:16:27.456 --> 00:16:29.546
together in one XCFramework.

00:16:30.056 --> 00:16:32.486
And to do this, you'll run the

00:16:32.486 --> 00:16:34.716
xcodebuild -create-xcframework

00:16:34.926 --> 00:16:35.366
command.

00:16:36.456 --> 00:16:38.106
You'll pass in the path to each

00:16:38.106 --> 00:16:40.186
framework on disk, and then

00:16:40.186 --> 00:16:41.956
provide a path that you'd like

00:16:42.006 --> 00:16:43.836
the output XCFramework to be

00:16:43.836 --> 00:16:46.456
output to.

00:16:46.696 --> 00:16:48.906
So, that's how to build an

00:16:48.906 --> 00:16:49.526
XCFramework.

00:16:49.526 --> 00:16:51.946
And in summary, remember, you'll

00:16:51.946 --> 00:16:53.916
want to enable Build Libraries

00:16:53.916 --> 00:16:55.626
for Distribution, to make sure

00:16:55.626 --> 00:16:56.826
that your library is built to be

00:16:56.826 --> 00:16:57.356
distributed.

00:16:57.436 --> 00:17:00.996
You'll run xcodebuild archive,

00:17:01.536 --> 00:17:02.536
to build archives of your

00:17:02.536 --> 00:17:05.576
framework, and finally you'll

00:17:05.576 --> 00:17:06.536
run xcodebuild

00:17:06.566 --> 00:17:09.185
-create-xcframework, to package

00:17:09.185 --> 00:17:10.705
it up for distribution.

00:17:11.146 --> 00:17:12.165
And then you can start sending

00:17:12.165 --> 00:17:13.205
it to your clients, and they can

00:17:13.205 --> 00:17:14.586
start adopting it.

00:17:15.195 --> 00:17:16.925
So that was XCFrameworks.

00:17:18.326 --> 00:17:19.846
Now, my teammate, Jordan, will

00:17:19.846 --> 00:17:21.026
come up to talk to you about

00:17:21.026 --> 00:17:22.656
what you should consider as a

00:17:22.656 --> 00:17:24.646
framework author to make using

00:17:24.646 --> 00:17:26.185
your framework as smooth as

00:17:26.185 --> 00:17:26.685
possible.

00:17:28.516 --> 00:17:34.546
[ Applause and Cheering ]

00:17:35.046 --> 00:17:35.736
>> Thanks Harlan.

00:17:36.006 --> 00:17:36.466
All right.

00:17:36.836 --> 00:17:38.086
So we saw how easy it was to

00:17:38.376 --> 00:17:39.876
bring one of these XCFrameworks

00:17:40.066 --> 00:17:42.256
into an app that is a client of

00:17:42.256 --> 00:17:43.906
the framework, and we saw the

00:17:43.906 --> 00:17:45.556
steps required to produce an

00:17:45.586 --> 00:17:46.276
XCFramework.

00:17:47.016 --> 00:17:48.316
But that's just the first step,

00:17:48.576 --> 00:17:49.476
because you're framework

00:17:49.476 --> 00:17:51.096
authors, and you're developing

00:17:51.096 --> 00:17:53.326
new capabilities every year, and

00:17:53.326 --> 00:17:54.606
making things better and better

00:17:54.606 --> 00:17:55.446
for your clients.

00:17:56.236 --> 00:17:57.296
So, in this section, I'm going

00:17:57.296 --> 00:17:58.926
to talk about three major

00:17:58.926 --> 00:17:59.456
things.

00:18:00.386 --> 00:18:01.556
Evolving your framework from

00:18:01.556 --> 00:18:02.556
release to release.

00:18:03.366 --> 00:18:04.726
Trading some flexibility that

00:18:04.726 --> 00:18:05.936
Swift gives you for

00:18:05.936 --> 00:18:07.546
optimizability of your clients,

00:18:08.296 --> 00:18:09.536
and helping your clients have

00:18:09.536 --> 00:18:10.606
the smoothest experience

00:18:10.606 --> 00:18:11.196
possible.

00:18:11.736 --> 00:18:14.096
So, start with evolving your

00:18:14.096 --> 00:18:14.596
framework.

00:18:15.196 --> 00:18:17.186
And what do I mean when I say

00:18:17.186 --> 00:18:18.456
evolving your framework?

00:18:19.496 --> 00:18:22.966
Well, like I said, every time

00:18:22.966 --> 00:18:24.366
you release a new version of

00:18:24.366 --> 00:18:25.736
your framework, it will have new

00:18:25.736 --> 00:18:27.746
capabilities, new APIs, maybe

00:18:27.746 --> 00:18:29.936
some bug fixes, and we want to

00:18:29.936 --> 00:18:31.866
be able to do that without

00:18:31.866 --> 00:18:33.736
breaking source or binary

00:18:33.736 --> 00:18:34.726
compatibility.

00:18:35.586 --> 00:18:37.776
Now, why is binary compatibility

00:18:37.776 --> 00:18:38.686
important here?

00:18:39.876 --> 00:18:41.156
It's because you don't

00:18:41.156 --> 00:18:42.766
necessarily know who your

00:18:42.766 --> 00:18:44.256
clients are going to be.

00:18:44.746 --> 00:18:46.486
A lot of times it will just be

00:18:46.486 --> 00:18:47.266
an app target.

00:18:47.576 --> 00:18:48.526
They'll take your framework,

00:18:48.766 --> 00:18:50.466
bundle it up, and send it off to

00:18:50.466 --> 00:18:50.956
the store.

00:18:52.246 --> 00:18:53.806
But other times, you'll have

00:18:53.836 --> 00:18:55.396
clients that are themselves

00:18:55.476 --> 00:18:57.246
binary frameworks, either from

00:18:57.246 --> 00:18:59.206
your company or another company

00:18:59.206 --> 00:18:59.846
entirely.

00:18:59.896 --> 00:19:02.756
And in that case, the two of you

00:19:02.836 --> 00:19:04.396
probably have separate release

00:19:04.396 --> 00:19:04.926
schedules.

00:19:05.576 --> 00:19:06.596
They might get all the way up to

00:19:06.596 --> 00:19:08.896
version 2.1, while you're still

00:19:08.896 --> 00:19:10.816
working on your newest version.

00:19:10.816 --> 00:19:13.156
And when you finally do release

00:19:13.156 --> 00:19:16.246
that version 1.1, well, they

00:19:16.246 --> 00:19:17.566
shouldn't have to do any extra

00:19:17.566 --> 00:19:18.636
effort to adopt it.

00:19:19.116 --> 00:19:19.906
You don't want to get in a

00:19:19.906 --> 00:19:21.946
situation where two binary

00:19:21.946 --> 00:19:23.436
frameworks are version locked

00:19:23.436 --> 00:19:25.066
with one another, because then

00:19:25.066 --> 00:19:26.506
the application who is using

00:19:26.506 --> 00:19:30.766
them might decide not to update.

00:19:30.976 --> 00:19:32.266
So, I'm saying here that the

00:19:32.266 --> 00:19:33.426
version of your framework is

00:19:33.426 --> 00:19:35.366
important, and not only do you

00:19:35.366 --> 00:19:36.756
want to put that on your

00:19:36.756 --> 00:19:38.556
website, and your documentation,

00:19:38.806 --> 00:19:40.066
but you should also put it in

00:19:40.066 --> 00:19:41.686
the framework itself, and the

00:19:41.686 --> 00:19:43.736
place to do that is the Bundle

00:19:43.736 --> 00:19:45.426
version string setting in the

00:19:45.426 --> 00:19:46.636
framework's Info.plist.

00:19:47.486 --> 00:19:49.326
This is the place for a human

00:19:49.326 --> 00:19:50.906
readable version number to

00:19:50.906 --> 00:19:52.886
communicate to your clients what

00:19:52.886 --> 00:19:54.586
changes you've made since the

00:19:54.586 --> 00:19:55.396
last release.

00:19:55.986 --> 00:19:58.576
And the way that we recommend to

00:19:58.576 --> 00:20:00.356
do that is with Semantic

00:20:00.396 --> 00:20:00.966
Versioning.

00:20:01.616 --> 00:20:02.416
Now, if you weren't in the

00:20:02.416 --> 00:20:04.156
Packages talk, I'll do a quick

00:20:04.246 --> 00:20:05.446
review of what Semantic

00:20:05.446 --> 00:20:06.866
Versioning is.

00:20:07.676 --> 00:20:09.326
The smallest component is the

00:20:09.326 --> 00:20:11.306
Patch Version, and represents

00:20:11.456 --> 00:20:12.856
when you make bug fixes, or

00:20:12.856 --> 00:20:14.156
implementation changes to your

00:20:14.156 --> 00:20:15.886
framework that shouldn't affect

00:20:15.886 --> 00:20:17.266
your clients.

00:20:18.076 --> 00:20:20.216
The middle component is for

00:20:20.416 --> 00:20:22.106
backwards compatible editions,

00:20:22.466 --> 00:20:24.746
new APIs, or new capabilities.

00:20:25.386 --> 00:20:28.796
And the Major component is for

00:20:28.796 --> 00:20:30.416
any breaking changes that you

00:20:30.416 --> 00:20:32.356
have to make, whether that's

00:20:32.436 --> 00:20:34.486
source breaking, binary

00:20:34.486 --> 00:20:37.016
breaking, or semantics breaking

00:20:37.506 --> 00:20:38.986
in a way where clients will have

00:20:39.046 --> 00:20:41.916
to rebuild, and possibly redo

00:20:41.916 --> 00:20:43.606
some of their client code, in

00:20:43.606 --> 00:20:45.216
order to adopt the new version

00:20:45.216 --> 00:20:46.156
of the framework.

00:20:46.586 --> 00:20:49.036
Let's see what this looks like

00:20:49.036 --> 00:20:50.746
in practice, with the FlightKit

00:20:50.746 --> 00:20:51.676
model objects.

00:20:52.586 --> 00:20:53.826
So here is the same thing on the

00:20:53.826 --> 00:20:56.096
left that we had from before.

00:20:57.366 --> 00:20:59.136
And now, on the right, I've made

00:20:59.136 --> 00:21:00.466
a bunch of changes to this

00:21:00.466 --> 00:21:00.946
framework.

00:21:02.096 --> 00:21:03.406
Let's go through them piece by

00:21:03.476 --> 00:21:05.316
piece and see how each change

00:21:05.406 --> 00:21:06.526
can affect the framework's

00:21:06.526 --> 00:21:07.246
version number.

00:21:08.506 --> 00:21:09.446
We'll start at the top.

00:21:10.466 --> 00:21:12.286
I've added a new private

00:21:12.286 --> 00:21:13.896
property to the Spaceship class.

00:21:14.396 --> 00:21:15.966
And I'm using it in the

00:21:15.966 --> 00:21:17.226
Spaceship's initializer.

00:21:18.556 --> 00:21:20.996
Now, neither of these things are

00:21:20.996 --> 00:21:22.506
going to appear in the module

00:21:22.506 --> 00:21:23.156
interface.

00:21:23.466 --> 00:21:24.446
They're not part of your

00:21:24.446 --> 00:21:25.696
framework's public API.

00:21:26.976 --> 00:21:28.796
So this sort of change only

00:21:28.796 --> 00:21:30.556
requires updating the minor, or

00:21:30.556 --> 00:21:32.116
the Patch Version component.

00:21:33.916 --> 00:21:36.086
Keep in mind though that I did

00:21:36.146 --> 00:21:37.786
change the behavior of the

00:21:37.786 --> 00:21:39.776
initializer, and so if this was

00:21:39.776 --> 00:21:42.536
documented behavior before, then

00:21:42.536 --> 00:21:43.806
this would be a semantics

00:21:43.856 --> 00:21:45.826
breaking change, and clients

00:21:45.826 --> 00:21:46.786
would have to consider whether

00:21:46.786 --> 00:21:48.866
to update, and therefore, I

00:21:48.866 --> 00:21:50.386
should change the major version

00:21:50.386 --> 00:21:51.356
number instead.

00:21:51.986 --> 00:21:55.206
Now, the next change I've made

00:21:55.206 --> 00:21:57.376
here is to add a new method to

00:21:57.376 --> 00:21:58.496
the Spaceship class.

00:21:58.796 --> 00:22:00.616
It's a new public method, which

00:22:00.616 --> 00:22:01.926
means clients will start using

00:22:01.926 --> 00:22:02.886
it and depending on it.

00:22:03.846 --> 00:22:05.566
So, the right thing to do is to

00:22:05.566 --> 00:22:07.256
increment the Minor Version

00:22:07.256 --> 00:22:07.636
number.

00:22:08.146 --> 00:22:09.676
And you'll notice, I also reset

00:22:09.676 --> 00:22:13.846
the Patch Version to zero.

00:22:13.966 --> 00:22:16.516
Finally, I've also added a new

00:22:16.516 --> 00:22:18.406
parameter to the fly method.

00:22:19.356 --> 00:22:21.486
I've given it a default, so that

00:22:21.486 --> 00:22:23.536
most of the use sites won't have

00:22:23.586 --> 00:22:24.206
to change.

00:22:24.986 --> 00:22:27.126
But in Swift, a function is

00:22:27.126 --> 00:22:29.686
uniquely identified by its name,

00:22:30.216 --> 00:22:31.466
and its parameters.

00:22:31.466 --> 00:22:32.996
Both the argument labels, and

00:22:32.996 --> 00:22:33.616
the types.

00:22:34.286 --> 00:22:36.626
So, here I've broken both source

00:22:36.966 --> 00:22:39.726
and binary compatibility, so

00:22:39.726 --> 00:22:41.706
this requires updating the Major

00:22:41.706 --> 00:22:43.636
Version number, and asking any

00:22:43.636 --> 00:22:44.926
clients to re-compile.

00:22:45.616 --> 00:22:46.696
Maybe I should have made a new

00:22:46.696 --> 00:22:47.686
overload instead?

00:22:48.286 --> 00:22:51.426
Now, these are all changes to

00:22:51.426 --> 00:22:52.856
the Spaceship class, but I've

00:22:52.856 --> 00:22:54.266
also changed some of the value

00:22:54.266 --> 00:22:55.796
types in FlightKit as well.

00:22:55.796 --> 00:22:58.046
I've added a new case to the

00:22:58.046 --> 00:22:58.786
Speed edum.

00:23:00.256 --> 00:23:02.516
I've made locations Hashable, so

00:23:02.516 --> 00:23:03.836
that clients can have sets of

00:23:03.836 --> 00:23:06.436
them, and this is my favorite

00:23:06.436 --> 00:23:08.726
change, I've added a new stored

00:23:08.726 --> 00:23:10.626
property to the Location struct,

00:23:10.896 --> 00:23:12.516
without breaking source or

00:23:12.516 --> 00:23:13.816
binary compatibility.

00:23:14.516 --> 00:23:19.546
[ Applause ]

00:23:20.046 --> 00:23:21.706
Now, in Swift, all of these

00:23:21.706 --> 00:23:23.126
changes are backwards

00:23:23.166 --> 00:23:24.866
compatible, so I only need to

00:23:24.866 --> 00:23:26.606
bump the Minor Version number.

00:23:27.186 --> 00:23:30.266
Now, this flexibility here has

00:23:30.266 --> 00:23:31.866
some implications for how you

00:23:31.866 --> 00:23:33.186
design the API of your

00:23:33.186 --> 00:23:33.906
frameworks.

00:23:34.616 --> 00:23:36.426
The most important one is to

00:23:36.426 --> 00:23:37.536
start small.

00:23:38.086 --> 00:23:39.436
It's easy to add new

00:23:39.436 --> 00:23:41.026
capabilities if you find out

00:23:41.026 --> 00:23:42.736
that you need them, or if your

00:23:42.736 --> 00:23:44.896
clients file feedback saying

00:23:44.896 --> 00:23:46.016
that more capabilities are

00:23:46.016 --> 00:23:46.526
needed.

00:23:47.086 --> 00:23:48.576
But it's really hard to remove

00:23:48.626 --> 00:23:50.296
something, because it will most

00:23:50.296 --> 00:23:51.946
likely break source or binary

00:23:51.946 --> 00:23:53.816
compatibility for at least one

00:23:53.816 --> 00:23:55.326
of your clients.

00:23:56.316 --> 00:23:57.866
For the things that you won't be

00:23:57.866 --> 00:23:59.016
able to change after the fact,

00:23:59.526 --> 00:24:00.906
like the names of your types,

00:24:01.276 --> 00:24:02.366
make sure you consider them

00:24:02.366 --> 00:24:04.136
carefully up front, that those

00:24:04.136 --> 00:24:05.286
names are not just going to make

00:24:05.286 --> 00:24:07.666
sense in this release, but also

00:24:07.666 --> 00:24:09.076
in all future releases.

00:24:09.616 --> 00:24:13.386
And finally, don't add

00:24:13.386 --> 00:24:15.026
extensibility too early.

00:24:15.606 --> 00:24:16.556
You don't need to make your

00:24:16.556 --> 00:24:18.406
classes open, or to provide

00:24:18.406 --> 00:24:20.476
arbitrary callbacks in the first

00:24:20.476 --> 00:24:21.756
version of your framework.

00:24:22.666 --> 00:24:23.706
Why is this important?

00:24:24.386 --> 00:24:25.806
Because it makes reasoning about

00:24:25.876 --> 00:24:27.926
your framework's behavior much

00:24:27.996 --> 00:24:29.986
harder when you have to consider

00:24:29.986 --> 00:24:31.526
what your clients might be doing

00:24:31.526 --> 00:24:32.516
at the same time.

00:24:33.666 --> 00:24:35.776
So, you can always make your

00:24:35.776 --> 00:24:37.226
classes open in the future.

00:24:37.826 --> 00:24:39.196
You can always add properties

00:24:39.196 --> 00:24:40.146
that represent additional

00:24:40.146 --> 00:24:42.696
callbacks, but you can't remove

00:24:42.696 --> 00:24:44.396
the flexibility that you put in

00:24:44.396 --> 00:24:45.036
by default.

00:24:45.706 --> 00:24:49.336
So, how does this all work?

00:24:50.546 --> 00:24:51.356
Indirection.

00:24:52.546 --> 00:24:53.906
That's just a word, so let's

00:24:53.906 --> 00:24:55.226
step through an example.

00:24:55.356 --> 00:24:58.166
On the left, here again, I have

00:24:58.446 --> 00:24:59.796
the Spaceship class, stripped

00:24:59.796 --> 00:25:01.066
down to its module interface

00:25:01.116 --> 00:25:03.206
this time, and on the right, I

00:25:03.206 --> 00:25:04.806
have a use of the fly method.

00:25:06.106 --> 00:25:07.396
This is from a client code

00:25:07.516 --> 00:25:09.016
that's outside of the FlightKit

00:25:09.016 --> 00:25:09.456
framework.

00:25:10.536 --> 00:25:11.936
And what's going to happen here

00:25:11.936 --> 00:25:13.616
at runtime is that the client is

00:25:13.616 --> 00:25:15.526
going to have to ask which

00:25:15.526 --> 00:25:17.266
method is the fly method?

00:25:17.786 --> 00:25:20.176
And the framework will respond,

00:25:20.756 --> 00:25:22.326
it's the second one.

00:25:23.076 --> 00:25:25.556
This is how Swift ensures binary

00:25:25.556 --> 00:25:27.766
compatibility even when you add

00:25:27.766 --> 00:25:28.866
new methods to a class.

00:25:30.156 --> 00:25:31.826
And it's basically the same way

00:25:32.026 --> 00:25:33.526
that Objective-C does message

00:25:33.566 --> 00:25:35.776
dispatch, doing it in a call

00:25:36.046 --> 00:25:38.426
from one Library to another, but

00:25:38.426 --> 00:25:40.156
Swift only does it when you're

00:25:40.196 --> 00:25:42.986
crossing this client framework

00:25:43.196 --> 00:25:43.766
boundary.

00:25:45.716 --> 00:25:46.876
There's another form of

00:25:46.876 --> 00:25:48.396
indirection as well.

00:25:48.796 --> 00:25:50.016
And that's when clients are

00:25:50.016 --> 00:25:51.786
using the structs or enums

00:25:52.086 --> 00:25:53.466
defined in the framework.

00:25:54.536 --> 00:25:55.826
So in this case, one of the

00:25:55.826 --> 00:25:57.906
arguments to the fly method is

00:25:57.906 --> 00:25:59.696
that fast case from the Speed

00:26:00.416 --> 00:26:00.546
edum.

00:26:01.176 --> 00:26:03.506
And I said before that enums

00:26:03.506 --> 00:26:05.046
could have new cases added

00:26:05.326 --> 00:26:06.316
without breaking binary

00:26:06.316 --> 00:26:07.106
compatibility.

00:26:08.576 --> 00:26:10.296
That means that the client can't

00:26:10.296 --> 00:26:12.906
assume that it knows how big the

00:26:12.906 --> 00:26:14.936
enum is going to be in memory.

00:26:16.026 --> 00:26:18.286
So this use of the enum requires

00:26:18.286 --> 00:26:19.836
the client to ask the framework

00:26:20.586 --> 00:26:21.396
how big is it?

00:26:22.236 --> 00:26:24.096
And the framework responds, it's

00:26:24.096 --> 00:26:25.546
just one byte.

00:26:26.976 --> 00:26:29.386
The other possibility here is

00:26:29.386 --> 00:26:30.876
that one of the new cases added

00:26:30.876 --> 00:26:32.236
in the future might have

00:26:32.236 --> 00:26:33.316
associated values.

00:26:34.156 --> 00:26:35.636
And those associated values

00:26:35.636 --> 00:26:36.936
might require some kind of

00:26:36.936 --> 00:26:37.396
cleanup.

00:26:38.606 --> 00:26:40.376
And so the client will also ask

00:26:40.376 --> 00:26:41.906
the framework to cleanup the

00:26:41.906 --> 00:26:43.606
enum value when it's done with

00:26:43.606 --> 00:26:45.216
it, and the framework will do

00:26:45.216 --> 00:26:45.526
so.

00:26:46.106 --> 00:26:48.986
Now, a couple of you in the

00:26:48.986 --> 00:26:50.596
audience at this point are

00:26:50.596 --> 00:26:52.206
probably getting a little antsy

00:26:52.766 --> 00:26:54.446
because we're talking about all

00:26:54.446 --> 00:26:56.436
this extra communication between

00:26:56.436 --> 00:26:57.716
the client and the framework,

00:26:58.766 --> 00:26:59.796
and that's because you have

00:26:59.986 --> 00:27:01.076
performance sensitive

00:27:01.076 --> 00:27:02.636
frameworks, and that's why the

00:27:02.636 --> 00:27:04.086
next section is about trading

00:27:04.086 --> 00:27:05.506
the flexibility that Swift is

00:27:05.506 --> 00:27:07.206
giving you for the

00:27:07.206 --> 00:27:12.966
optimizability of your clients.

00:27:14.416 --> 00:27:16.696
Now, this really is a tradeoff.

00:27:17.386 --> 00:27:19.156
As framework authors, we want

00:27:19.156 --> 00:27:20.586
the flexibility to change

00:27:20.586 --> 00:27:22.046
things, to add things, to

00:27:22.046 --> 00:27:24.626
improve things, without breaking

00:27:24.626 --> 00:27:26.556
source or binary compatibility.

00:27:27.976 --> 00:27:29.616
But in order for the compiler to

00:27:29.616 --> 00:27:31.356
make the client code as fast as

00:27:31.356 --> 00:27:33.356
possible, it needs to make

00:27:33.356 --> 00:27:34.966
assumptions about what's in the

00:27:34.966 --> 00:27:35.556
framework.

00:27:35.996 --> 00:27:40.146
And so Swift needs to be able to

00:27:40.146 --> 00:27:41.926
handle both sides of the

00:27:41.926 --> 00:27:42.656
spectrum.

00:27:43.066 --> 00:27:45.646
And the way that this works is

00:27:45.676 --> 00:27:46.866
through the Build Libraries for

00:27:46.866 --> 00:27:48.186
Distribution build setting.

00:27:48.826 --> 00:27:50.046
Harlan said before that this has

00:27:50.046 --> 00:27:52.046
multiple effects in addition to

00:27:52.046 --> 00:27:53.426
generating the Module Interface

00:27:53.426 --> 00:27:55.576
file, and one of those effects

00:27:55.886 --> 00:27:57.446
is to set the default to the

00:27:57.446 --> 00:27:59.426
Flexibility side.

00:28:00.736 --> 00:28:02.736
But again, Swift needs to be

00:28:02.736 --> 00:28:04.576
able to handle all of these use

00:28:04.576 --> 00:28:06.646
cases, and so in this section,

00:28:06.816 --> 00:28:07.966
I'm going to talk about what you

00:28:07.966 --> 00:28:10.306
can do once you've profiled the

00:28:10.506 --> 00:28:11.906
behavior of your framework from

00:28:11.906 --> 00:28:13.466
the outside, and seen that you

00:28:13.466 --> 00:28:14.956
need additional performance.

00:28:15.046 --> 00:28:16.346
And there's three ways to do

00:28:16.346 --> 00:28:18.206
that: inlinable functions,

00:28:18.876 --> 00:28:20.756
frozen enums, and frozen

00:28:20.756 --> 00:28:21.326
structs.

00:28:21.926 --> 00:28:24.836
So, we'll start with inlinable

00:28:24.836 --> 00:28:26.576
functions, a feature introduced

00:28:26.576 --> 00:28:28.536
last year in Swift 4.2.

00:28:29.426 --> 00:28:31.526
In this case, I have a CargoShip

00:28:31.526 --> 00:28:33.326
subclass of the Spaceship class

00:28:33.326 --> 00:28:35.286
we saw earlier, and it has a

00:28:35.286 --> 00:28:37.376
method canCarry that just

00:28:37.376 --> 00:28:39.466
determines whether the CargoShip

00:28:39.826 --> 00:28:41.606
is able to carry some piece of

00:28:41.606 --> 00:28:42.076
cargo.

00:28:43.376 --> 00:28:45.046
And I've made this inlinable,

00:28:45.416 --> 00:28:46.426
because I think that this is

00:28:46.426 --> 00:28:47.726
important for the performance of

00:28:47.726 --> 00:28:48.576
my clients.

00:28:49.736 --> 00:28:51.986
What this will do is make this

00:28:51.986 --> 00:28:54.056
method part of my public

00:28:54.056 --> 00:28:55.906
interface, not just its

00:28:55.906 --> 00:28:57.806
declaration, but also its body.

00:28:58.916 --> 00:29:00.486
And the effect of that is to

00:29:00.486 --> 00:29:02.636
copy that body into the Module

00:29:02.636 --> 00:29:03.646
Interface file.

00:29:04.236 --> 00:29:07.076
If you're reading very quickly,

00:29:07.366 --> 00:29:08.876
you'll also see that this method

00:29:08.946 --> 00:29:10.836
references an internal property

00:29:11.026 --> 00:29:12.356
of the CargoShip class.

00:29:13.766 --> 00:29:15.326
And that's possible, because

00:29:15.326 --> 00:29:16.936
I've marked that property as

00:29:16.936 --> 00:29:18.296
usable from inline.

00:29:19.386 --> 00:29:20.786
This lets you get the best of

00:29:20.786 --> 00:29:21.516
both worlds.

00:29:22.246 --> 00:29:24.046
The property is available as

00:29:24.096 --> 00:29:25.446
part of your framework's public

00:29:25.446 --> 00:29:27.526
interface, but it's only

00:29:27.526 --> 00:29:29.656
available to the inlinable code.

00:29:29.956 --> 00:29:31.476
It's still protected from being

00:29:31.476 --> 00:29:33.736
arbitrarily read or written by

00:29:33.736 --> 00:29:34.866
outside clients.

00:29:35.426 --> 00:29:37.556
So it's still internal, but

00:29:37.556 --> 00:29:38.556
usable from inline.

00:29:39.876 --> 00:29:41.866
And it's important to note that

00:29:41.866 --> 00:29:43.286
this is a per declaration

00:29:43.286 --> 00:29:43.906
decision.

00:29:44.486 --> 00:29:46.016
The current cargo property here

00:29:46.016 --> 00:29:47.986
that's also internal is not

00:29:47.986 --> 00:29:48.996
included in the Module

00:29:48.996 --> 00:29:49.476
Interface.

00:29:51.936 --> 00:29:54.336
So, okay, we have the body of

00:29:54.336 --> 00:29:55.726
the canCarry method in the

00:29:55.726 --> 00:29:56.676
Module Interface.

00:29:57.366 --> 00:29:59.046
And when a client is compiling

00:29:59.046 --> 00:30:00.746
against that interface, they'll

00:30:00.746 --> 00:30:02.146
be able to copy that body

00:30:02.296 --> 00:30:03.916
directly into their own code,

00:30:04.326 --> 00:30:05.896
and possibly optimize it even

00:30:05.966 --> 00:30:07.486
further if they know something

00:30:07.486 --> 00:30:08.676
about the cargo that's being

00:30:09.706 --> 00:30:09.826
checked.

00:30:10.376 --> 00:30:12.046
But what happens if the

00:30:12.046 --> 00:30:14.126
framework owner changes the body

00:30:14.126 --> 00:30:15.926
of the method, and the clients

00:30:15.986 --> 00:30:17.136
aren't recompiled?

00:30:17.826 --> 00:30:21.466
For example, what if there's a

00:30:21.466 --> 00:30:22.756
new rule that says that

00:30:22.756 --> 00:30:24.116
CargoShips are not allowed to

00:30:24.116 --> 00:30:25.686
carry Radioactive cargo?

00:30:26.936 --> 00:30:28.556
Well, in this case, we're going

00:30:28.556 --> 00:30:29.476
to run into trouble.

00:30:29.906 --> 00:30:31.266
Because now two different parts

00:30:31.266 --> 00:30:32.516
of the program have different

00:30:32.516 --> 00:30:34.216
ideas about what this method is

00:30:34.216 --> 00:30:34.976
supposed to do.

00:30:35.946 --> 00:30:37.296
And on some inputs, they're

00:30:37.296 --> 00:30:39.766
still going to agree, for some

00:30:39.766 --> 00:30:42.196
regular cargo, both the client

00:30:42.976 --> 00:30:46.166
and the framework will say that

00:30:46.706 --> 00:30:47.076
it's okay.

00:30:47.076 --> 00:30:48.196
But if we try to test

00:30:48.196 --> 00:30:50.616
Radioactive cargo, then the

00:30:50.616 --> 00:30:52.426
client code will say that it's

00:30:52.426 --> 00:30:54.336
okay, because that's what it saw

00:30:54.336 --> 00:30:55.566
in the Module Interface when it

00:30:55.566 --> 00:30:56.326
was compiled.

00:30:57.376 --> 00:30:58.846
While the framework has the new

00:30:58.846 --> 00:31:00.706
version of the method, and will

00:31:00.706 --> 00:31:01.556
disallow it.

00:31:02.216 --> 00:31:03.946
This could indicate a serious

00:31:03.946 --> 00:31:05.456
logic error in the program.

00:31:06.526 --> 00:31:08.566
So, as a rule of thumb, if

00:31:08.566 --> 00:31:09.646
you're a framework author who

00:31:09.646 --> 00:31:11.116
has made a function inlinable,

00:31:11.666 --> 00:31:13.236
make sure not to change the

00:31:13.236 --> 00:31:14.976
output or observable behavior.

00:31:16.176 --> 00:31:17.606
It's okay to add a better

00:31:17.606 --> 00:31:19.966
algorithm, or some additional

00:31:20.036 --> 00:31:21.866
fast pads, but if you change the

00:31:21.866 --> 00:31:23.166
observable behavior of the

00:31:23.166 --> 00:31:25.286
function, then you could end up

00:31:25.286 --> 00:31:26.256
with these really subtle

00:31:26.256 --> 00:31:27.836
problems that are only visible

00:31:27.836 --> 00:31:29.776
at runtime, and possibly only

00:31:29.776 --> 00:31:30.796
under certain inputs.

00:31:31.096 --> 00:31:32.556
If you need to do this, all your

00:31:32.556 --> 00:31:34.096
clients need to recompile.

00:31:34.686 --> 00:31:39.046
So next I want to talk about

00:31:39.046 --> 00:31:39.836
enums.

00:31:40.946 --> 00:31:42.756
Swift enums are great.

00:31:43.006 --> 00:31:43.756
I love them.

00:31:44.556 --> 00:31:45.496
And one thing that we talked

00:31:45.496 --> 00:31:47.036
about here is that you can add

00:31:47.036 --> 00:31:48.946
new cases to an enum without

00:31:48.976 --> 00:31:50.236
breaking source or binary

00:31:50.236 --> 00:31:51.096
compatibility.

00:31:51.946 --> 00:31:53.796
What this means for clients is

00:31:53.796 --> 00:31:54.996
that they always have to have a

00:31:54.996 --> 00:31:56.816
default case when they switch

00:31:56.816 --> 00:31:57.566
over the enum.

00:31:58.346 --> 00:31:59.976
And in this client, they've

00:31:59.976 --> 00:32:01.536
decided to use the unknown

00:32:01.536 --> 00:32:03.276
default syntax that was also

00:32:03.276 --> 00:32:06.276
introduced in Swift 4.2.

00:32:06.516 --> 00:32:08.466
What this means is that they've

00:32:08.466 --> 00:32:10.766
handled all the known cases in

00:32:10.766 --> 00:32:13.506
the enum but will still handle

00:32:13.506 --> 00:32:15.146
any future cases that are added,

00:32:15.616 --> 00:32:16.906
and this is necessary when

00:32:16.906 --> 00:32:19.896
switching over C enums, and also

00:32:19.896 --> 00:32:22.166
enums built in binary

00:32:22.166 --> 00:32:22.906
frameworks.

00:32:23.456 --> 00:32:26.346
The other effect that this has

00:32:26.576 --> 00:32:28.026
is what I talked about earlier,

00:32:28.376 --> 00:32:30.026
this sort of handshake between

00:32:30.026 --> 00:32:31.286
the client and the framework,

00:32:31.586 --> 00:32:33.446
about how big the enum is, and

00:32:33.446 --> 00:32:34.866
whether it needs any cleanup.

00:32:35.306 --> 00:32:37.826
But the example I've picked here

00:32:37.826 --> 00:32:38.946
is a Flight Plan.

00:32:39.746 --> 00:32:41.666
You can really only have one-way

00:32:41.666 --> 00:32:43.446
flights, or round-trip flights.

00:32:44.826 --> 00:32:46.666
So by marking this enum with the

00:32:46.666 --> 00:32:49.336
frozen attribute, then I as the

00:32:49.336 --> 00:32:50.786
framework author can promise

00:32:51.906 --> 00:32:53.286
that there are no new cases

00:32:53.286 --> 00:32:55.146
added in future releases of the

00:32:55.146 --> 00:32:55.526
framework.

00:32:56.956 --> 00:32:58.796
The first effect of this is that

00:32:58.796 --> 00:33:00.436
clients no longer have to write

00:33:00.436 --> 00:33:01.406
that default case.

00:33:01.596 --> 00:33:02.686
It can just go away.

00:33:04.276 --> 00:33:07.316
And next, the compiler is able

00:33:07.316 --> 00:33:09.226
to compile it more efficiently.

00:33:09.946 --> 00:33:12.476
The clients are able to assume

00:33:12.976 --> 00:33:14.266
that this enum won't have any

00:33:14.266 --> 00:33:16.236
additional cases and won't

00:33:16.236 --> 00:33:17.436
require any cleanup.

00:33:18.756 --> 00:33:19.486
So that's great.

00:33:21.096 --> 00:33:22.346
Except I forgot something.

00:33:22.996 --> 00:33:24.416
There is another kind of Flight

00:33:24.486 --> 00:33:24.786
Plan.

00:33:24.786 --> 00:33:26.026
A multiHop flight.

00:33:27.186 --> 00:33:28.246
And now we're in trouble,

00:33:28.746 --> 00:33:30.546
because that client code no

00:33:30.546 --> 00:33:32.956
longer has a default case, so

00:33:32.956 --> 00:33:35.206
adding a new case to a frozen

00:33:35.206 --> 00:33:37.946
enum is both source and binary

00:33:37.946 --> 00:33:39.476
breaking and requires

00:33:39.476 --> 00:33:41.006
incrementing the Major Version

00:33:41.326 --> 00:33:42.706
and asking all clients to

00:33:42.706 --> 00:33:43.366
recompile.

00:33:43.986 --> 00:33:48.296
Now, after frozen enums, frozen

00:33:48.296 --> 00:33:49.946
structs are much the same.

00:33:50.516 --> 00:33:52.886
By default, a Struct in a binary

00:33:52.886 --> 00:33:54.646
framework can have new stored

00:33:54.646 --> 00:33:55.756
properties added, or the

00:33:55.756 --> 00:33:57.686
existing ones reordered without

00:33:57.686 --> 00:33:59.856
any trouble, but that does

00:33:59.916 --> 00:34:01.716
result in that same sort of

00:34:02.096 --> 00:34:03.066
handshake and extra

00:34:03.066 --> 00:34:04.856
communication between the client

00:34:05.136 --> 00:34:06.036
and the framework.

00:34:06.746 --> 00:34:10.485
So, in order to avoid this, for

00:34:10.485 --> 00:34:12.386
structs that are known to have a

00:34:12.386 --> 00:34:14.956
frozen layout, the frozen

00:34:14.956 --> 00:34:16.926
attribute can be used to promise

00:34:17.216 --> 00:34:18.525
that the stored properties will

00:34:18.525 --> 00:34:19.306
not change.

00:34:19.616 --> 00:34:20.936
They will not be added, or

00:34:20.936 --> 00:34:22.166
reordered, or removed.

00:34:22.835 --> 00:34:25.596
And the other thing that this

00:34:25.656 --> 00:34:27.726
does is require that the stored

00:34:27.726 --> 00:34:30.126
properties all have types that

00:34:30.126 --> 00:34:31.866
are public, or usable from

00:34:31.866 --> 00:34:32.315
inline.

00:34:32.876 --> 00:34:34.255
Because remember what the goal

00:34:34.255 --> 00:34:34.775
is here.

00:34:35.156 --> 00:34:37.146
We want the compiler when it's

00:34:37.146 --> 00:34:39.505
working with client code, to be

00:34:39.505 --> 00:34:40.846
able to manipulate the stored

00:34:40.846 --> 00:34:42.045
properties of this struct

00:34:42.045 --> 00:34:43.616
directly, so that it can

00:34:43.616 --> 00:34:45.396
generate more efficient code on

00:34:45.396 --> 00:34:46.926
the client side.

00:34:47.815 --> 00:34:49.966
This also has a semantic effect,

00:34:50.386 --> 00:34:51.416
which is that the framework

00:34:51.416 --> 00:34:53.156
author can now write inlinable

00:34:53.156 --> 00:34:53.936
initializers.

00:34:54.525 --> 00:34:55.996
An initializer is already

00:34:55.996 --> 00:34:57.836
required to set up all of the

00:34:57.836 --> 00:34:59.256
stored properties in the struct,

00:34:59.826 --> 00:35:01.866
but now the compiler can be sure

00:35:02.066 --> 00:35:03.726
that it will also do so in

00:35:03.726 --> 00:35:04.816
future versions of the

00:35:04.816 --> 00:35:05.236
framework.

00:35:05.326 --> 00:35:09.196
Now, I want to close up this

00:35:09.196 --> 00:35:11.156
section by reminding you that

00:35:11.156 --> 00:35:13.036
flexibility is the default for

00:35:13.036 --> 00:35:13.736
reasons.

00:35:14.536 --> 00:35:15.896
And the main one of these is

00:35:15.896 --> 00:35:17.656
that breaking changes are really

00:35:17.656 --> 00:35:19.226
inconvenient for their clients.

00:35:20.136 --> 00:35:21.926
A client is going to have-- make

00:35:21.926 --> 00:35:23.516
a second guess over whether or

00:35:23.516 --> 00:35:25.026
not to take the new version of

00:35:25.026 --> 00:35:26.606
your framework, because it might

00:35:26.606 --> 00:35:27.686
break them in some way.

00:35:28.366 --> 00:35:29.446
And you could also get into

00:35:29.446 --> 00:35:31.316
trouble when you have one binary

00:35:31.316 --> 00:35:32.706
framework depending on another.

00:35:34.136 --> 00:35:35.666
It's also worth the reminder

00:35:36.836 --> 00:35:38.076
that these attributes only

00:35:38.106 --> 00:35:39.286
affect client code.

00:35:39.696 --> 00:35:41.196
Within your framework, you still

00:35:41.196 --> 00:35:42.686
get the full power of the

00:35:42.686 --> 00:35:44.186
compiler optimizations.

00:35:45.586 --> 00:35:47.856
So, before reaching for frozen

00:35:47.856 --> 00:35:49.716
or inlinable, make sure that you

00:35:49.716 --> 00:35:51.156
have profiled the behavior of

00:35:51.156 --> 00:35:52.826
your framework form the outside,

00:35:53.256 --> 00:35:54.636
and demonstrated that you have a

00:35:54.636 --> 00:35:56.216
need for additional performance.

00:35:56.796 --> 00:35:58.936
Otherwise, keep that flexibility

00:35:58.936 --> 00:36:00.546
because you may need it.

00:36:02.696 --> 00:36:04.106
Now, the last section I want to

00:36:04.106 --> 00:36:05.836
talk about is making sure that

00:36:05.836 --> 00:36:07.606
your client's experience is the

00:36:07.606 --> 00:36:08.516
best it can be.

00:36:09.266 --> 00:36:11.086
And this is going to mirror

00:36:11.086 --> 00:36:12.826
Harlan's section a lot from the

00:36:12.826 --> 00:36:13.916
first half of the talk.

00:36:14.496 --> 00:36:15.976
And so we'll start off with

00:36:15.976 --> 00:36:16.726
Entitlements.

00:36:17.636 --> 00:36:19.036
If your framework has certain

00:36:19.036 --> 00:36:20.276
Entitlements that it needs to

00:36:20.276 --> 00:36:22.316
get its job done, well, let's

00:36:22.316 --> 00:36:23.216
start with the basics.

00:36:23.456 --> 00:36:24.636
Make sure that you document

00:36:24.636 --> 00:36:26.226
them, so that any potential

00:36:26.226 --> 00:36:28.146
client knows what it needs to do

00:36:28.456 --> 00:36:29.676
to successfully adopt your

00:36:29.676 --> 00:36:30.096
framework.

00:36:30.606 --> 00:36:34.536
And furthermore, try to minimize

00:36:34.536 --> 00:36:36.246
the entitlement requests of your

00:36:36.246 --> 00:36:38.486
particular framework, because

00:36:38.486 --> 00:36:39.676
that means that it will be

00:36:39.676 --> 00:36:41.676
applicable in more contexts.

00:36:42.126 --> 00:36:43.816
And you can get more clients

00:36:44.086 --> 00:36:45.056
using your framework.

00:36:45.516 --> 00:36:49.636
And finally, keep in mind that

00:36:49.636 --> 00:36:51.486
while both the framework and the

00:36:51.486 --> 00:36:53.036
application can request

00:36:53.096 --> 00:36:54.656
permissions from the user, it's

00:36:54.726 --> 00:36:56.686
ultimately the user's choice

00:36:57.286 --> 00:36:58.446
whether or not to grant them.

00:36:59.606 --> 00:37:00.976
So if you get denied a

00:37:00.976 --> 00:37:02.746
particular permission, make sure

00:37:02.746 --> 00:37:04.016
your framework handles that

00:37:04.016 --> 00:37:05.026
denial gracefully.

00:37:05.316 --> 00:37:07.026
It should not crash the app, it

00:37:07.026 --> 00:37:08.156
should not stop working.

00:37:08.646 --> 00:37:09.716
Make sure it still does

00:37:09.756 --> 00:37:11.456
something useful so that your

00:37:11.456 --> 00:37:12.916
clients can use the framework

00:37:13.236 --> 00:37:15.166
without having to give up.

00:37:16.996 --> 00:37:19.186
Now, Dependencies have a lot of

00:37:19.186 --> 00:37:20.416
the same concerns as

00:37:20.416 --> 00:37:21.176
Entitlements.

00:37:21.926 --> 00:37:23.506
Because like Entitlements, your

00:37:23.506 --> 00:37:25.416
framework's Dependencies become

00:37:25.416 --> 00:37:26.986
the application's Dependencies.

00:37:27.986 --> 00:37:30.136
And so again, you should start

00:37:30.136 --> 00:37:31.906
off by documenting them, so that

00:37:31.906 --> 00:37:33.816
a potential client knows what

00:37:33.816 --> 00:37:34.826
they are signing up for.

00:37:35.486 --> 00:37:36.776
And you should minimize your

00:37:36.776 --> 00:37:38.156
Dependencies, so that you're

00:37:38.156 --> 00:37:39.796
asking less of your clients.

00:37:40.106 --> 00:37:42.036
Less in extending trust, and

00:37:42.036 --> 00:37:43.986
even practical matters like the

00:37:43.986 --> 00:37:45.696
code size taken up by your

00:37:45.696 --> 00:37:46.346
Dependencies.

00:37:48.006 --> 00:37:50.046
And finally, all of your

00:37:50.046 --> 00:37:51.876
Dependencies do have to be built

00:37:52.106 --> 00:37:53.216
with the Build Libraries for

00:37:53.216 --> 00:37:55.096
Distribution build setting in

00:37:55.096 --> 00:37:56.416
order to get that binary

00:37:56.416 --> 00:37:58.516
compatibility guarantee that we

00:37:58.516 --> 00:37:59.926
talked about.

00:38:00.476 --> 00:38:02.096
This does have a particular

00:38:02.096 --> 00:38:04.156
implication that binary

00:38:04.156 --> 00:38:05.806
frameworks cannot depend on

00:38:05.806 --> 00:38:06.436
Packages.

00:38:07.446 --> 00:38:08.456
Let's look at a Dependency

00:38:08.456 --> 00:38:08.936
graph.

00:38:10.366 --> 00:38:11.946
I said just a few minutes ago

00:38:12.276 --> 00:38:13.396
that the Dependencies of the

00:38:13.396 --> 00:38:14.706
framework become the

00:38:14.706 --> 00:38:15.746
Dependencies of the app.

00:38:15.976 --> 00:38:18.326
But when an app builds a

00:38:18.326 --> 00:38:19.926
package, it has to pick a

00:38:19.926 --> 00:38:21.586
particular tag to do so.

00:38:22.416 --> 00:38:23.496
And that may not match the

00:38:23.496 --> 00:38:25.096
version that your framework was

00:38:25.096 --> 00:38:25.746
built against.

00:38:26.076 --> 00:38:27.686
It may not be compatible at all.

00:38:28.596 --> 00:38:30.806
And beyond that, not all

00:38:30.806 --> 00:38:32.666
frameworks can necessarily be

00:38:32.666 --> 00:38:34.036
built in a mode that is

00:38:34.036 --> 00:38:35.526
compatible with Build Libraries

00:38:35.526 --> 00:38:36.406
for Distribution.

00:38:37.246 --> 00:38:39.136
So this configuration is not

00:38:39.136 --> 00:38:39.626
supported.

00:38:39.626 --> 00:38:42.776
Now, the last thing I want to

00:38:42.776 --> 00:38:44.636
talk about is your Objective-C

00:38:44.636 --> 00:38:45.216
Interface.

00:38:45.986 --> 00:38:47.546
Yes, you, Swift framework

00:38:47.546 --> 00:38:49.416
authors, you have an Objective-C

00:38:49.416 --> 00:38:51.546
Interface, most likely, because

00:38:51.546 --> 00:38:53.216
Xcode's default template is set

00:38:53.216 --> 00:38:54.906
up for a mixed source framework

00:38:55.096 --> 00:38:56.346
that has both an Objective-C

00:38:56.346 --> 00:38:58.616
Umbrella Header, and a generated

00:38:58.616 --> 00:38:59.486
header containing the

00:38:59.486 --> 00:39:01.206
Objective-C parts of the Swift

00:39:01.206 --> 00:39:01.926
in your framework.

00:39:02.566 --> 00:39:05.456
But if your Swift code doesn't

00:39:05.456 --> 00:39:07.326
have any Objective-C API that

00:39:07.566 --> 00:39:09.716
it's trying to publish, well,

00:39:09.916 --> 00:39:11.216
you don't need to install that

00:39:11.216 --> 00:39:12.116
second header at all.

00:39:12.476 --> 00:39:14.066
There's an Install Objective-C

00:39:14.066 --> 00:39:15.376
Compatibility Header build

00:39:15.376 --> 00:39:17.156
setting that you can just turn

00:39:17.156 --> 00:39:17.546
off.

00:39:18.096 --> 00:39:20.686
And if your framework doesn't

00:39:20.686 --> 00:39:23.386
vend any Objective-C API, well

00:39:23.386 --> 00:39:24.216
then there's no reason to

00:39:24.216 --> 00:39:25.866
support this Objective-C Import

00:39:25.866 --> 00:39:27.596
Syntax, and you can turn that

00:39:27.596 --> 00:39:29.186
off as well, with the Defines

00:39:29.186 --> 00:39:30.186
Module Build setting.

00:39:30.846 --> 00:39:32.666
Set it to No, and that will no

00:39:32.666 --> 00:39:33.976
longer be valid Objective-C

00:39:33.976 --> 00:39:34.306
code.

00:39:35.386 --> 00:39:36.856
Once you've done that, you can

00:39:36.856 --> 00:39:38.886
delete the Umbrella Header that

00:39:38.886 --> 00:39:40.716
Xcode generated for you.

00:39:42.376 --> 00:39:43.966
So, let's wrap things up.

00:39:44.576 --> 00:39:45.756
We talked about a lot of things

00:39:45.756 --> 00:39:48.116
today, but the most important is

00:39:48.116 --> 00:39:49.046
XCFrameworks.

00:39:49.376 --> 00:39:50.516
They're the new Bundle format

00:39:50.516 --> 00:39:51.606
for distributing multiple

00:39:51.606 --> 00:39:53.496
framework variants in a way that

00:39:53.496 --> 00:39:54.906
is super easy for your users to

00:39:54.906 --> 00:39:55.376
use.

00:39:56.606 --> 00:39:57.506
In order to build an

00:39:57.506 --> 00:39:58.996
XCFramework, you'll need to turn

00:39:58.996 --> 00:40:00.076
on the Build Libraries for

00:40:00.076 --> 00:40:01.176
Distribution build setting,

00:40:01.476 --> 00:40:02.656
which activates everything that

00:40:02.656 --> 00:40:04.896
you need to get a proper binary

00:40:04.896 --> 00:40:05.886
compatible framework.

00:40:06.426 --> 00:40:08.876
And as framework owners, make

00:40:08.876 --> 00:40:09.676
sure that you know the

00:40:09.676 --> 00:40:11.186
responsibilities that you have

00:40:11.186 --> 00:40:12.676
to your clients, so that you can

00:40:12.676 --> 00:40:14.826
serve them the best.

00:40:14.996 --> 00:40:16.096
Harlan and I will be down in the

00:40:16.096 --> 00:40:17.536
Lab immediately after this

00:40:17.536 --> 00:40:19.376
session, but for everyone who

00:40:19.376 --> 00:40:20.656
came here, thank you very much,

00:40:20.716 --> 00:40:21.506
and let's see some great

00:40:21.506 --> 00:40:21.966
frameworks.

00:40:22.516 --> 00:40:25.500
[ Applause and Cheering ]