WEBVTT

00:00:00.506 --> 00:00:05.500
[ Music ]

00:00:10.516 --> 00:00:14.896
[ Applause ]

00:00:15.396 --> 00:00:16.335
>> Good morning, everyone.

00:00:16.856 --> 00:00:17.726
My name is Devin.

00:00:17.956 --> 00:00:19.526
I'm thrilled to be here today

00:00:19.526 --> 00:00:20.776
with all of you to tell you

00:00:20.776 --> 00:00:22.326
about what's new in WebKit.

00:00:23.086 --> 00:00:23.886
There's a lot we have to talk

00:00:23.886 --> 00:00:25.026
about today, so we're going to

00:00:25.026 --> 00:00:25.456
dive right in.

00:00:26.026 --> 00:00:27.746
There are a lot of things that

00:00:27.746 --> 00:00:29.256
are new and exciting for the web

00:00:29.256 --> 00:00:30.896
platform and for web developers

00:00:30.896 --> 00:00:31.336
this year.

00:00:32.125 --> 00:00:33.616
Today's talk is going to cover a

00:00:33.616 --> 00:00:34.996
variety of different topics

00:00:35.316 --> 00:00:37.756
ranging from web specific APIs

00:00:38.116 --> 00:00:39.586
to new ways that you can provide

00:00:39.586 --> 00:00:41.036
a more native experience from

00:00:41.036 --> 00:00:41.996
within your web content.

00:00:42.506 --> 00:00:44.826
We have a lot to discuss, so

00:00:44.826 --> 00:00:45.726
we're going to dive right in

00:00:46.076 --> 00:00:47.206
starting with Dark Mode.

00:00:48.686 --> 00:00:50.126
The system Dark Mode was first

00:00:50.126 --> 00:00:51.756
introduced in MacOS Mojave.

00:00:51.756 --> 00:00:54.776
But this year, it also comes to

00:00:54.776 --> 00:00:56.416
iOS as part of iOS 13.

00:00:57.776 --> 00:00:59.466
This means that the desktop

00:00:59.466 --> 00:01:01.026
experience and the mobile

00:01:01.026 --> 00:01:03.006
experience can now both adapt to

00:01:03.006 --> 00:01:03.466
Dark Mode.

00:01:03.466 --> 00:01:04.995
But don't worry.

00:01:05.236 --> 00:01:06.906
It, it's not that complicated.

00:01:07.356 --> 00:01:09.256
It's very easy to have your web

00:01:09.256 --> 00:01:11.106
content also adapt to Dark Mode.

00:01:11.816 --> 00:01:12.676
Let's take a look at it.

00:01:13.786 --> 00:01:16.396
First, adding a color scheme CSS

00:01:16.436 --> 00:01:18.866
property to any root CSS rule

00:01:18.976 --> 00:01:20.326
with a value that includes dark

00:01:21.006 --> 00:01:23.096
will tell WebKit that the entire

00:01:23.096 --> 00:01:24.546
page supports Dark Mode.

00:01:25.336 --> 00:01:26.486
And when in Dark Mode, the

00:01:26.776 --> 00:01:28.536
default text and background

00:01:28.536 --> 00:01:30.136
colors, as well as any form

00:01:30.136 --> 00:01:32.236
controls, will automatically

00:01:32.236 --> 00:01:33.286
update to match the rest of the

00:01:33.286 --> 00:01:33.836
darker theme.

00:01:34.636 --> 00:01:36.186
But as you can see, this won't

00:01:36.186 --> 00:01:37.616
do anything for custom styles.

00:01:38.126 --> 00:01:39.166
So, you'll still need to update

00:01:39.166 --> 00:01:39.666
them yourself.

00:01:40.636 --> 00:01:42.506
The way you can do that is using

00:01:42.506 --> 00:01:44.516
a prefers color scheme dark CSS

00:01:44.516 --> 00:01:45.406
media query.

00:01:46.456 --> 00:01:48.256
It behaves just like any other

00:01:48.256 --> 00:01:50.246
CSS media query, meaning that

00:01:50.246 --> 00:01:52.106
the contained styles only apply

00:01:52.106 --> 00:01:53.656
when the system is in Dark Mode.

00:01:54.016 --> 00:01:56.946
You can use this to change any

00:01:56.946 --> 00:01:58.686
other custom styles like CSS

00:01:58.686 --> 00:02:00.806
images or other colors to match

00:02:00.806 --> 00:02:01.806
the rest of the darker theme on

00:02:01.806 --> 00:02:02.276
the page.

00:02:02.996 --> 00:02:04.476
But for images that are not in

00:02:04.476 --> 00:02:06.466
CSS, you can always use the

00:02:06.466 --> 00:02:08.306
picture element through HTML.

00:02:09.036 --> 00:02:10.696
And using the exact same media

00:02:10.696 --> 00:02:12.356
query it will cause the two

00:02:12.356 --> 00:02:14.126
images to automatically switch

00:02:14.326 --> 00:02:16.776
between when the user enables

00:02:16.776 --> 00:02:17.226
Dark Mode.

00:02:18.156 --> 00:02:19.226
It's that simple.

00:02:19.226 --> 00:02:21.816
And obviously, for any other

00:02:21.816 --> 00:02:23.786
content, you can always use the

00:02:23.786 --> 00:02:25.686
JavaScript matchMedia API,

00:02:26.126 --> 00:02:27.936
again, with the exact same media

00:02:27.936 --> 00:02:29.516
query to handle any other

00:02:29.516 --> 00:02:30.906
dynamic content.

00:02:31.776 --> 00:02:33.296
All of these techniques make it

00:02:33.296 --> 00:02:35.276
really easy for you to adapt

00:02:35.276 --> 00:02:36.856
Dark Mode to support the rest of

00:02:36.856 --> 00:02:37.676
your web content.

00:02:38.006 --> 00:02:39.596
And we can't wait to see your

00:02:39.596 --> 00:02:40.876
super cool dark websites.

00:02:42.316 --> 00:02:43.676
For more information about this,

00:02:44.106 --> 00:02:45.226
there's a great post on the

00:02:45.226 --> 00:02:47.396
WebKit blog and a great video in

00:02:47.396 --> 00:02:49.366
the WWDC App that talks all

00:02:49.366 --> 00:02:51.116
about supporting Dark Mode in

00:02:51.116 --> 00:02:51.686
web content.

00:02:52.156 --> 00:02:53.106
Be sure to check it out.

00:02:53.526 --> 00:02:57.386
And that's a very quick look at

00:02:57.386 --> 00:02:58.886
how to support Dark Mode in your

00:02:58.886 --> 00:02:59.436
web content.

00:02:59.766 --> 00:03:01.796
It's very easy.

00:03:02.266 --> 00:03:04.286
Next, let's talk about a very

00:03:04.286 --> 00:03:06.036
simple API that you can use

00:03:06.036 --> 00:03:07.726
called Web Share which allows

00:03:07.726 --> 00:03:09.126
you to invoke the native share

00:03:09.126 --> 00:03:10.676
sheet from within web content.

00:03:11.296 --> 00:03:13.876
It's standardized and it works

00:03:13.936 --> 00:03:15.336
anywhere, whether that be in

00:03:15.336 --> 00:03:17.706
Safari or in WK web view in an

00:03:17.816 --> 00:03:18.076
app.

00:03:18.956 --> 00:03:20.646
It's especially great on iOS

00:03:20.646 --> 00:03:21.876
this year with all of the

00:03:21.876 --> 00:03:23.146
improvements to the native share

00:03:25.066 --> 00:03:25.166
sheet.

00:03:25.436 --> 00:03:27.186
Using it is as simple as calling

00:03:27.186 --> 00:03:28.586
navigator.share with the

00:03:28.586 --> 00:03:29.546
relevant data.

00:03:30.086 --> 00:03:31.596
It returns a promise which

00:03:31.596 --> 00:03:33.126
resolves if a share action is

00:03:33.126 --> 00:03:34.936
completed or rejects if the

00:03:34.936 --> 00:03:35.886
share sheet is dismissed.

00:03:36.656 --> 00:03:38.426
But keep in mind this API

00:03:38.786 --> 00:03:40.436
expects to be called in response

00:03:40.436 --> 00:03:43.356
to a user gesture like a tap.

00:03:43.696 --> 00:03:45.026
So, if that's not the case, it

00:03:45.026 --> 00:03:46.476
will immediately reject.

00:03:47.976 --> 00:03:48.896
One of the cool things is that

00:03:48.896 --> 00:03:50.056
you can already see the Web

00:03:50.056 --> 00:03:52.096
Share API in action as it's been

00:03:52.096 --> 00:03:53.456
adopted by some pretty major

00:03:53.456 --> 00:03:53.976
websites.

00:03:55.146 --> 00:03:56.326
A great example of this is

00:03:56.326 --> 00:03:57.886
Twitter which also has some

00:03:57.886 --> 00:03:59.246
phenomenal support for Dark

00:03:59.246 --> 00:03:59.446
Mode.

00:04:00.516 --> 00:04:02.126
Tapping any of the Share icons

00:04:02.126 --> 00:04:03.916
on the page will open the native

00:04:03.916 --> 00:04:05.446
share sheet with the title and

00:04:05.446 --> 00:04:06.216
link of that tweet.

00:04:06.906 --> 00:04:07.936
And you can try this out for

00:04:07.936 --> 00:04:09.936
yourself in iOS 12.2 or later.

00:04:10.546 --> 00:04:13.236
And that's the Web Share API.

00:04:13.826 --> 00:04:15.626
A really simple way to invoke

00:04:15.626 --> 00:04:17.076
native functionality from within

00:04:17.076 --> 00:04:17.916
your web content.

00:04:20.526 --> 00:04:22.125
Now, let's move a little bit on

00:04:22.125 --> 00:04:23.536
to some new media features.

00:04:24.306 --> 00:04:25.536
If you're developing a website

00:04:25.536 --> 00:04:27.076
that strives to display the

00:04:27.076 --> 00:04:29.036
content that is best suited for

00:04:29.036 --> 00:04:30.026
the user's device.

00:04:30.626 --> 00:04:32.316
You can now use the new Media

00:04:32.316 --> 00:04:34.556
Capabilities API to determine

00:04:34.556 --> 00:04:35.836
whether any video codec is

00:04:35.836 --> 00:04:37.456
supported as well as if that

00:04:37.456 --> 00:04:39.516
video codec will be fast enough

00:04:39.516 --> 00:04:41.306
to knock off any frames or will

00:04:41.306 --> 00:04:42.366
be power efficient during

00:04:42.366 --> 00:04:42.996
playback.

00:04:43.856 --> 00:04:45.936
This empowers you to make a more

00:04:45.936 --> 00:04:47.716
informed decision about the type

00:04:47.716 --> 00:04:49.216
of content you want to present.

00:04:50.506 --> 00:04:52.016
And speaking of video content,

00:04:52.376 --> 00:04:55.436
macOS Catalina and iOS 13 also

00:04:55.436 --> 00:04:56.966
bring support for alpha channel

00:04:56.966 --> 00:04:57.586
video.

00:04:58.906 --> 00:05:00.466
Alpha channel video allows for

00:05:00.526 --> 00:05:02.706
any HEVC encoded video content

00:05:02.896 --> 00:05:04.426
to contain transparent pixels.

00:05:04.966 --> 00:05:06.516
A very compelling use case of

00:05:06.516 --> 00:05:08.316
this is that it allows your

00:05:08.316 --> 00:05:10.226
video to seamlessly integrate

00:05:10.226 --> 00:05:11.786
with the surrounding content

00:05:11.786 --> 00:05:13.236
when the user enables Dark Mode.

00:05:14.486 --> 00:05:15.786
Instead of making two separate

00:05:15.786 --> 00:05:17.316
videos, one for use in Light

00:05:17.316 --> 00:05:18.676
Mode and one for use in Dark

00:05:18.676 --> 00:05:20.626
Mode, a single video with a

00:05:20.626 --> 00:05:22.146
transparent background would

00:05:22.146 --> 00:05:23.376
likely work for both.

00:05:24.036 --> 00:05:25.426
And alpha channel videos can be

00:05:25.426 --> 00:05:27.206
used anywhere that videos can be

00:05:27.206 --> 00:05:27.906
used today.

00:05:28.226 --> 00:05:29.576
There's no special syntax,

00:05:29.636 --> 00:05:31.556
there's no special MIME type.

00:05:31.556 --> 00:05:32.546
It just works.

00:05:33.906 --> 00:05:35.666
But before you use it, you'll

00:05:35.666 --> 00:05:36.636
want to make sure that alpha

00:05:36.636 --> 00:05:38.496
channel video is available, such

00:05:38.496 --> 00:05:40.496
as on older iOS or older macOS,

00:05:40.836 --> 00:05:42.996
which you can do by adding an

00:05:42.996 --> 00:05:44.896
alpha channel key to the, to

00:05:44.896 --> 00:05:46.356
your capabilities object when

00:05:46.356 --> 00:05:47.716
using the Media Capabilities

00:05:47.766 --> 00:05:47.976
API.

00:05:51.236 --> 00:05:52.086
If you'd like to know a little

00:05:52.086 --> 00:05:53.266
bit more about alpha channel

00:05:53.266 --> 00:05:54.976
video, including how to create

00:05:54.976 --> 00:05:56.556
those videos on macOS Catalina,

00:05:56.996 --> 00:05:58.446
be sure to check out the video

00:05:58.446 --> 00:05:59.856
about creating HEVC videos with

00:05:59.856 --> 00:05:59.976
alpha.

00:06:03.196 --> 00:06:04.516
But if instead, you're a web

00:06:04.516 --> 00:06:06.846
developer who builds a website

00:06:06.846 --> 00:06:08.166
that includes peer-to-peer chat

00:06:08.166 --> 00:06:09.836
functionality and you also want

00:06:09.836 --> 00:06:11.566
to provide screen capture, you

00:06:11.566 --> 00:06:13.086
can now use the getDisplayMedia

00:06:13.086 --> 00:06:14.826
API in Safari 13.

00:06:15.906 --> 00:06:17.336
Calling it will gain return a

00:06:17.336 --> 00:06:19.216
promise and immediately prompt

00:06:19.216 --> 00:06:20.396
the user for permission to

00:06:20.396 --> 00:06:21.156
capture their screen.

00:06:22.266 --> 00:06:24.116
If that permission is granted,

00:06:24.436 --> 00:06:25.716
the promise will return with a

00:06:25.716 --> 00:06:27.396
standard media stream of the

00:06:27.396 --> 00:06:29.326
space that contains the Safari

00:06:29.326 --> 00:06:29.806
window.

00:06:30.726 --> 00:06:32.076
The returned media stream

00:06:32.136 --> 00:06:33.616
behaves just like any other

00:06:33.616 --> 00:06:35.476
standard media stream, meaning

00:06:35.476 --> 00:06:36.876
that it can be used with WebRTC

00:06:36.876 --> 00:06:38.346
to share your screen with

00:06:38.346 --> 00:06:39.006
another person.

00:06:39.416 --> 00:06:42.596
And those are some of the new

00:06:42.596 --> 00:06:44.726
media features coming to macOS

00:06:44.726 --> 00:06:47.346
Catalina, iOS 13, and Safari 13.

00:06:47.896 --> 00:06:50.536
Now, we're going to talk a

00:06:50.536 --> 00:06:52.716
little bit about a few new tools

00:06:52.716 --> 00:06:54.436
that you can use to make your

00:06:54.436 --> 00:06:56.706
web content more responsive and

00:06:56.706 --> 00:06:59.536
performant on all platforms.

00:07:00.796 --> 00:07:02.976
As web developers, part of our

00:07:02.976 --> 00:07:04.926
job is to make sure that we

00:07:04.926 --> 00:07:06.406
provide an experience that

00:07:06.406 --> 00:07:08.036
doesn't consume too much battery

00:07:08.306 --> 00:07:09.756
or unnecessarily perform

00:07:09.756 --> 00:07:10.146
actions.

00:07:11.266 --> 00:07:13.036
To help you better understand

00:07:13.316 --> 00:07:14.386
why those things might be

00:07:14.386 --> 00:07:16.546
happening, the Web Inspector has

00:07:16.546 --> 00:07:18.266
added a new CPU Timeline.

00:07:18.956 --> 00:07:21.096
This interface is packed with

00:07:21.096 --> 00:07:22.176
actionable information.

00:07:22.646 --> 00:07:23.976
And we really want you to be

00:07:23.976 --> 00:07:25.016
able to use it effectively.

00:07:25.446 --> 00:07:27.016
So, we've created a post on the

00:07:27.016 --> 00:07:29.096
WebKit blog and a video in the

00:07:29.096 --> 00:07:31.516
WWDC App all about understanding

00:07:31.516 --> 00:07:33.046
CPU usage with Web Inspector.

00:07:33.426 --> 00:07:34.516
Definitely check it out.

00:07:34.736 --> 00:07:35.696
It'll do wonders for your

00:07:35.696 --> 00:07:36.316
website.

00:07:36.606 --> 00:07:40.296
And WebDriver is coming to iOS.

00:07:41.276 --> 00:07:42.836
The standardized test format

00:07:42.936 --> 00:07:45.456
from the W3C for automation and

00:07:45.456 --> 00:07:47.286
regression testing is available

00:07:47.286 --> 00:07:48.976
on all iOS devices running iOS

00:07:48.976 --> 00:07:49.376
13.

00:07:50.126 --> 00:07:51.426
You can use WebDriver to

00:07:51.426 --> 00:07:53.076
automate regression testing of

00:07:53.076 --> 00:07:55.466
your web content and make sure

00:07:55.606 --> 00:07:57.356
that your, all the platforms you

00:07:57.356 --> 00:07:59.626
support, whether that be desktop

00:07:59.626 --> 00:08:01.636
or mobile, keep working exactly

00:08:01.636 --> 00:08:02.406
as you would expect.

00:08:03.356 --> 00:08:05.466
WebDriver on iOS works much the

00:08:05.466 --> 00:08:06.706
same as on macOS.

00:08:06.886 --> 00:08:07.786
And we have phenomenal

00:08:07.786 --> 00:08:09.036
documentation for that on

00:08:09.036 --> 00:08:10.266
developer.apple.com.

00:08:10.266 --> 00:08:11.486
And we have some blog posts

00:08:11.486 --> 00:08:12.876
coming soon to talk more about

00:08:13.356 --> 00:08:13.426
it.

00:08:15.156 --> 00:08:16.366
Now, let's change it a little

00:08:16.366 --> 00:08:17.806
bit and talk about how to store

00:08:17.806 --> 00:08:19.336
structured data from within your

00:08:19.336 --> 00:08:19.966
web content.

00:08:20.526 --> 00:08:23.136
There have been two main ways of

00:08:23.136 --> 00:08:24.116
doing this in the past;

00:08:24.366 --> 00:08:25.996
IndexedDB and WebSQL.

00:08:26.206 --> 00:08:28.906
In Safari 13, WebSQL has been

00:08:28.906 --> 00:08:29.986
completely removed.

00:08:31.226 --> 00:08:32.496
All modern web browsers,

00:08:32.696 --> 00:08:34.596
including Safari, support

00:08:34.596 --> 00:08:35.216
IndexedDB.

00:08:35.806 --> 00:08:37.216
And over the past year, we've

00:08:37.216 --> 00:08:38.976
been hard at work making it more

00:08:38.976 --> 00:08:39.806
standards compliant.

00:08:40.626 --> 00:08:42.346
So, if you haven't already, be

00:08:42.346 --> 00:08:43.905
sure to transition to using

00:08:43.905 --> 00:08:45.636
IndexedDB as soon as possible.

00:08:49.076 --> 00:08:50.466
And finally, let's talk about

00:08:50.466 --> 00:08:52.646
Apple Pay, the easiest way to

00:08:52.646 --> 00:08:54.146
accept payments on the web.

00:08:54.676 --> 00:08:56.296
We have two main things to talk

00:08:56.296 --> 00:08:56.666
about.

00:08:57.156 --> 00:09:00.236
The first, Apple Pay, is now

00:09:00.396 --> 00:09:01.926
fully supported with all of its

00:09:01.926 --> 00:09:03.546
capabilities using the Payment

00:09:03.546 --> 00:09:04.166
Request API.

00:09:05.226 --> 00:09:07.326
Bringing the entirety of Apple

00:09:07.326 --> 00:09:10.246
Pay JS's private, secure, and

00:09:10.246 --> 00:09:11.936
streamlined experience to your

00:09:11.936 --> 00:09:12.846
web content in a more

00:09:12.846 --> 00:09:13.936
standardized way.

00:09:14.496 --> 00:09:15.916
We strongly encourage you to

00:09:15.916 --> 00:09:16.996
switch to the Payment Request

00:09:16.996 --> 00:09:19.016
API as it supports everything

00:09:19.016 --> 00:09:20.936
that Apple Pay JS can do and

00:09:20.936 --> 00:09:22.016
it's continuing to evolve.

00:09:23.076 --> 00:09:24.486
For a deeper dive into how to

00:09:24.586 --> 00:09:26.086
use the Payment Request API for

00:09:26.166 --> 00:09:27.896
Apple Pay, there's going to be a

00:09:27.896 --> 00:09:29.526
great post on the WebKit blog

00:09:29.526 --> 00:09:31.136
later today that'll do a deep

00:09:31.136 --> 00:09:31.956
dive into these new

00:09:31.956 --> 00:09:32.496
improvements.

00:09:33.786 --> 00:09:37.456
And second, in iOS 13, you can

00:09:37.456 --> 00:09:39.006
now use Apple Pay inside a

00:09:39.046 --> 00:09:39.596
WKWebView.

00:09:40.996 --> 00:09:41.266
Yeah.

00:09:42.516 --> 00:09:45.546
[ Applause ]

00:09:46.046 --> 00:09:47.526
This means that Apple Pay is now

00:09:47.526 --> 00:09:49.086
available in even more apps.

00:09:49.776 --> 00:09:50.876
But there are a few things to

00:09:50.876 --> 00:09:51.466
consider.

00:09:52.036 --> 00:09:53.636
When a user attempts to make a

00:09:53.636 --> 00:09:54.936
purchase through Apple Pay,

00:09:55.566 --> 00:09:56.936
there's an expectation that

00:09:56.936 --> 00:09:58.066
they're communicating with the

00:09:58.066 --> 00:09:59.906
page, not the containing web

00:09:59.906 --> 00:10:00.746
browser or app.

00:10:01.686 --> 00:10:04.126
Nothing should get in between

00:10:04.126 --> 00:10:06.166
the user and the webpage during

00:10:06.166 --> 00:10:08.086
the transaction or before it's

00:10:08.086 --> 00:10:08.806
even started.

00:10:09.546 --> 00:10:10.846
So, this means there are fewer

00:10:10.846 --> 00:10:12.536
restrictions about when you can

00:10:12.536 --> 00:10:13.986
use Apple Pay inside the

00:10:13.986 --> 00:10:15.756
WKWebView as well as when you

00:10:15.756 --> 00:10:17.096
can inject script into a

00:10:17.096 --> 00:10:17.656
WKWebView.

00:10:18.406 --> 00:10:20.666
Here's how it works.

00:10:20.836 --> 00:10:22.726
If any script has ever been

00:10:22.726 --> 00:10:24.496
injected to the current page of

00:10:24.496 --> 00:10:26.686
the WKWebView, we will not allow

00:10:26.686 --> 00:10:27.166
Apple Pay.

00:10:27.796 --> 00:10:30.736
If the current page has already

00:10:30.736 --> 00:10:32.556
called canMakePayments with an

00:10:32.556 --> 00:10:33.736
Apple Pay payment method, we

00:10:34.316 --> 00:10:35.986
will not allow any future script

00:10:35.986 --> 00:10:36.516
injections.

00:10:36.756 --> 00:10:37.766
They will be blocked with an

00:10:37.766 --> 00:10:38.186
error.

00:10:38.646 --> 00:10:40.916
But both of these restrictions

00:10:40.916 --> 00:10:42.406
are only limited to the current

00:10:42.406 --> 00:10:42.796
page.

00:10:43.186 --> 00:10:44.916
So, any top-level navigation

00:10:44.916 --> 00:10:46.266
will cause them to reset.

00:10:46.646 --> 00:10:48.746
So, what does all of this mean?

00:10:50.116 --> 00:10:52.026
If you're a web developer, it's

00:10:52.236 --> 00:10:54.096
really important that you call

00:10:54.096 --> 00:10:56.286
canMakePayments before you

00:10:56.286 --> 00:10:57.586
attempt to show an Apple Pay

00:10:57.586 --> 00:10:59.566
button or even start anything

00:10:59.566 --> 00:11:00.176
with Apple Pay.

00:11:01.166 --> 00:11:03.086
This way, your users will never

00:11:03.086 --> 00:11:04.716
encounter a situation where an

00:11:04.716 --> 00:11:06.616
Apple Pay button is shown and

00:11:06.616 --> 00:11:07.566
tapping on it doesn't do

00:11:07.566 --> 00:11:08.656
anything because it's been

00:11:08.656 --> 00:11:09.106
disabled.

00:11:09.676 --> 00:11:11.906
And if instead, you're an app

00:11:11.906 --> 00:11:14.416
developer, really think about

00:11:14.416 --> 00:11:15.766
whether you actually need to

00:11:15.766 --> 00:11:17.436
inject script such as through

00:11:17.436 --> 00:11:18.966
the WKUserScript API or the

00:11:18.966 --> 00:11:20.436
evaluateJavaScript with

00:11:20.436 --> 00:11:21.586
completionHandler call.

00:11:22.366 --> 00:11:23.676
We've seen some examples in the

00:11:23.676 --> 00:11:25.856
past of apps injecting script

00:11:26.196 --> 00:11:28.006
when there's a WebKit API that

00:11:28.006 --> 00:11:29.266
does the exact same thing.

00:11:29.796 --> 00:11:30.876
There's no reason for that.

00:11:31.856 --> 00:11:33.446
By injecting script, you could

00:11:33.446 --> 00:11:35.566
be preventing the loaded web

00:11:35.566 --> 00:11:37.256
content from providing its best

00:11:37.256 --> 00:11:37.806
experience.

00:11:38.336 --> 00:11:41.516
And that's what's new with Apple

00:11:42.306 --> 00:11:42.376
Pay.

00:11:43.436 --> 00:11:45.576
This was a quick look at some of

00:11:45.576 --> 00:11:47.536
the great features available

00:11:47.536 --> 00:11:48.916
that are new for web developers

00:11:48.916 --> 00:11:49.296
this year.

00:11:50.696 --> 00:11:52.326
You'll also definitely want to

00:11:52.326 --> 00:11:53.326
check out Introducing

00:11:53.326 --> 00:11:55.446
Desktop-class Browsing on iPad,

00:11:55.936 --> 00:11:57.136
which covers how to use some

00:11:57.236 --> 00:11:58.936
other new web platform features

00:11:59.116 --> 00:12:00.816
like pointer events to really

00:12:00.816 --> 00:12:03.206
make your desktop website feel

00:12:03.206 --> 00:12:05.666
right at home on iPad.

00:12:05.666 --> 00:12:06.946
I really hope you've enjoyed

00:12:06.946 --> 00:12:08.206
learning about what's new for

00:12:08.206 --> 00:12:09.006
web developers.

00:12:09.506 --> 00:12:10.856
We can't wait to see what

00:12:10.856 --> 00:12:12.616
beautiful designs and incredible

00:12:12.616 --> 00:12:14.076
experiences you craft with these

00:12:14.076 --> 00:12:15.686
new features and tools that are

00:12:15.686 --> 00:12:16.306
available to you.

00:12:16.656 --> 00:12:17.356
Have a great day.

00:12:18.016 --> 00:12:22.506
[ Applause ]