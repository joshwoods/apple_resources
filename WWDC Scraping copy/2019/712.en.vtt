WEBVTT

00:00:00.506 --> 00:00:05.500
[ Music ]

00:00:09.516 --> 00:00:16.556
[ Applause ]

00:00:17.056 --> 00:00:18.106
>> Welcome to Advances in

00:00:18.106 --> 00:00:18.706
Networking.

00:00:18.756 --> 00:00:19.976
My name is Joshua Graessley.

00:00:20.126 --> 00:00:21.416
My coworkers and I from Internet

00:00:21.416 --> 00:00:22.896
Technologies are excited to talk

00:00:22.896 --> 00:00:23.706
to you about a number of

00:00:23.706 --> 00:00:24.946
improvements we've made in the

00:00:24.946 --> 00:00:26.196
area of networking on our

00:00:26.276 --> 00:00:28.076
platforms this last year.

00:00:29.206 --> 00:00:31.666
In part one, we're going to talk

00:00:31.666 --> 00:00:32.636
about Low Data Mode.

00:00:32.706 --> 00:00:34.156
This is an exciting new feature

00:00:34.156 --> 00:00:35.286
where we can work together to

00:00:35.286 --> 00:00:36.766
help save our user's network

00:00:36.766 --> 00:00:38.116
data when it really matters.

00:00:38.406 --> 00:00:39.896
We'll talk about how you can

00:00:39.896 --> 00:00:41.466
write asynchronous-- very

00:00:41.466 --> 00:00:42.926
elegant asynchronous networking

00:00:42.926 --> 00:00:44.696
code using Combine in

00:00:44.696 --> 00:00:45.486
URLSession.

00:00:46.396 --> 00:00:48.816
We'll also cover WebSocket APIs.

00:00:49.096 --> 00:00:50.056
Last year, this was one of the

00:00:50.056 --> 00:00:51.326
number one things you requested

00:00:51.326 --> 00:00:52.896
in the labs and we're excited

00:00:52.896 --> 00:00:53.846
this year to be providing a

00:00:53.846 --> 00:00:54.426
solution.

00:00:55.506 --> 00:00:56.866
Finally, we'll talk about a

00:00:56.866 --> 00:00:58.446
number of mobility improvements

00:00:58.526 --> 00:00:59.976
and we'll talk about how we can

00:00:59.976 --> 00:01:01.346
work together to provide our

00:01:01.346 --> 00:01:03.156
users a more seamless experience

00:01:03.156 --> 00:01:04.715
as devices move from one network

00:01:04.936 --> 00:01:05.396
to another.

00:01:07.036 --> 00:01:10.606
In part two, we'll cover a bunch

00:01:10.606 --> 00:01:11.476
of additional topics.

00:01:11.526 --> 00:01:12.596
That's at 5:00 today.

00:01:12.696 --> 00:01:13.736
I encourage you to come back and

00:01:13.736 --> 00:01:15.246
check that out.

00:01:15.936 --> 00:01:17.866
Now, before we dive into Low

00:01:17.866 --> 00:01:19.016
Data Mode, I want to take a

00:01:19.016 --> 00:01:20.546
minute to talk about networking

00:01:20.546 --> 00:01:22.036
APIs on our platform.

00:01:23.046 --> 00:01:25.376
The best networking APIs to use

00:01:25.376 --> 00:01:27.226
on our platform are URLSession

00:01:27.366 --> 00:01:28.226
and Network.framework.

00:01:28.696 --> 00:01:29.676
As you'll hear about in this

00:01:29.676 --> 00:01:31.526
session and in part two, there

00:01:31.526 --> 00:01:32.226
are a number of great

00:01:32.226 --> 00:01:33.936
improvements we've made and all

00:01:33.936 --> 00:01:34.736
of those improvements are

00:01:34.736 --> 00:01:35.966
available to your applications

00:01:36.166 --> 00:01:37.016
if you're using these

00:01:37.046 --> 00:01:37.516
frameworks.

00:01:38.936 --> 00:01:40.636
If you're using sockets, you're

00:01:40.636 --> 00:01:41.456
not going to be able to take

00:01:41.456 --> 00:01:42.146
advantage of this.

00:01:42.686 --> 00:01:44.106
Unfortunately, sockets just

00:01:44.106 --> 00:01:45.266
doesn't have the richness that

00:01:45.266 --> 00:01:46.706
we require in order to provide

00:01:46.706 --> 00:01:47.786
this functionality at that

00:01:47.786 --> 00:01:48.076
layer.

00:01:48.076 --> 00:01:49.876
Now, if you're doing something

00:01:49.876 --> 00:01:52.056
like a VPN or a content filter,

00:01:52.386 --> 00:01:53.686
NetworkExtension framework is a

00:01:53.686 --> 00:01:54.916
great solution and we've made a

00:01:54.916 --> 00:01:56.146
number of improvements there as

00:01:56.146 --> 00:01:57.386
well that we'll be talking about

00:01:57.386 --> 00:02:01.226
tomorrow at 9:00 a.m. Now with

00:02:01.386 --> 00:02:02.886
that, I'd like to talk about Low

00:02:02.886 --> 00:02:03.326
Data Mode.

00:02:03.946 --> 00:02:05.486
Low Data Mode is a really

00:02:05.486 --> 00:02:07.516
exciting new feature in iOS 13.

00:02:08.876 --> 00:02:10.166
I think the best way to

00:02:10.166 --> 00:02:11.526
introduce Low Data Mode is to

00:02:11.526 --> 00:02:12.736
have you think back to how you

00:02:12.736 --> 00:02:14.086
got here to WWDC.

00:02:14.086 --> 00:02:17.326
You probably got on an airplane

00:02:17.386 --> 00:02:20.006
to fly out to sunny San Jose.

00:02:21.046 --> 00:02:22.646
And on that airplane, there was

00:02:22.736 --> 00:02:24.786
probably a Wi-Fi network and

00:02:24.786 --> 00:02:26.686
that Wi-Fi network was probably

00:02:26.796 --> 00:02:28.786
kind of expensive of it may have

00:02:28.786 --> 00:02:30.656
been very congested and you may

00:02:30.656 --> 00:02:31.706
have been finding yourself

00:02:31.706 --> 00:02:33.646
wishing that you had some way to

00:02:33.646 --> 00:02:35.036
tell the applications and the

00:02:35.036 --> 00:02:37.036
system on your device that on

00:02:37.036 --> 00:02:38.696
this particular network it's

00:02:38.696 --> 00:02:39.946
really important to be very

00:02:39.946 --> 00:02:41.506
conservative in how you use

00:02:41.506 --> 00:02:42.116
network data.

00:02:43.066 --> 00:02:44.946
Low Data is all about solving

00:02:44.946 --> 00:02:45.776
that problem.

00:02:47.226 --> 00:02:48.936
Low Data gives users an

00:02:49.216 --> 00:02:51.176
ability-- a preference to signal

00:02:51.176 --> 00:02:52.546
to your application and to the

00:02:52.606 --> 00:02:54.436
system that you really want to

00:02:54.666 --> 00:02:56.556
be very careful in how you use

00:02:56.686 --> 00:02:57.826
data on this network.

00:02:59.256 --> 00:03:01.636
This can be set on a per Wi-Fi

00:03:01.636 --> 00:03:03.856
network based on SSID and a per

00:03:03.926 --> 00:03:05.506
cellular network based on SIM.

00:03:06.876 --> 00:03:09.416
When the device is on a Low Data

00:03:09.416 --> 00:03:10.696
Mode network, this has two

00:03:10.736 --> 00:03:11.686
primary impacts.

00:03:11.876 --> 00:03:12.986
There's a change to the system

00:03:12.986 --> 00:03:14.816
policy and a change to your

00:03:14.816 --> 00:03:16.296
applications that have adopted

00:03:16.296 --> 00:03:16.976
Low Data Mode.

00:03:17.536 --> 00:03:19.866
For the system policy, we will

00:03:19.866 --> 00:03:21.206
defer any background

00:03:21.206 --> 00:03:22.796
discretionary tasks while we're

00:03:22.796 --> 00:03:24.016
on a Low Data Mode network.

00:03:24.806 --> 00:03:26.016
So, if you were on your airplane

00:03:26.016 --> 00:03:27.166
and you had Low Data Mode turned

00:03:27.166 --> 00:03:28.986
on, we would defer all of those

00:03:29.016 --> 00:03:30.336
background discretionary tasks.

00:03:30.946 --> 00:03:31.616
And when you get off the

00:03:31.616 --> 00:03:32.766
airplane and check into your

00:03:32.806 --> 00:03:34.606
hotel and you get onto the Wi-Fi

00:03:34.606 --> 00:03:35.986
network there that's potentially

00:03:35.986 --> 00:03:37.386
less congested or less

00:03:37.386 --> 00:03:39.316
expensive, then we'd let all

00:03:39.316 --> 00:03:41.046
those background tasks resume

00:03:41.046 --> 00:03:43.026
and carry on.

00:03:43.616 --> 00:03:44.976
Another change we make is that

00:03:45.126 --> 00:03:46.266
Background App Refresh is

00:03:46.266 --> 00:03:46.776
disabled.

00:03:47.166 --> 00:03:48.686
This helps us avoid allowing

00:03:48.686 --> 00:03:49.656
applications that are in the

00:03:49.656 --> 00:03:51.386
background that may have nothing

00:03:51.386 --> 00:03:52.266
to do with what the user is

00:03:52.266 --> 00:03:53.856
actually interested in from

00:03:53.856 --> 00:03:54.856
consuming network data.

00:03:55.676 --> 00:03:56.786
This gets us some pretty big

00:03:56.786 --> 00:03:58.236
wins, but we think some of the

00:03:58.236 --> 00:03:59.566
biggest wins are going to come

00:03:59.566 --> 00:04:00.486
from the changes that you're

00:04:00.486 --> 00:04:01.266
going to make in your

00:04:01.266 --> 00:04:02.976
applications to adopt Low Data

00:04:02.976 --> 00:04:03.276
Mode.

00:04:04.166 --> 00:04:05.196
So, I'd like to spend some time

00:04:05.196 --> 00:04:06.286
talking about the techniques

00:04:06.346 --> 00:04:07.016
that you can use.

00:04:07.576 --> 00:04:10.126
It all starts with looking into

00:04:10.126 --> 00:04:11.746
how your application is actually

00:04:11.746 --> 00:04:12.906
using network data.

00:04:13.816 --> 00:04:15.856
As you start to dig in, it's

00:04:15.916 --> 00:04:17.266
really important to keep in mind

00:04:18.106 --> 00:04:20.766
any time you can save data and

00:04:20.815 --> 00:04:22.256
there's no impact on the user

00:04:22.256 --> 00:04:24.136
experience, you should always do

00:04:24.136 --> 00:04:24.636
that.

00:04:25.636 --> 00:04:26.496
I know this seems kind of

00:04:26.496 --> 00:04:27.356
obvious, but you might be

00:04:27.416 --> 00:04:28.406
surprised about the ways that

00:04:28.406 --> 00:04:29.796
you can make optimizations that

00:04:30.126 --> 00:04:31.076
will reduce the amount of

00:04:31.076 --> 00:04:34.026
network data that you're using.

00:04:35.366 --> 00:04:36.666
Now, once you've gotten through

00:04:36.666 --> 00:04:38.276
all of those low-hanging fruits

00:04:38.276 --> 00:04:39.356
where you can just get a win

00:04:39.356 --> 00:04:40.536
with no impact, then you're

00:04:40.656 --> 00:04:41.766
going to have to start making

00:04:41.766 --> 00:04:43.246
some decisions about tradeoffs.

00:04:44.506 --> 00:04:46.226
In a lot of cases, you have the

00:04:46.226 --> 00:04:48.116
opportunity to use some more

00:04:48.116 --> 00:04:49.396
data and give a really great

00:04:49.396 --> 00:04:51.206
experience or use a little bit

00:04:51.206 --> 00:04:52.906
less data and give a still great

00:04:52.986 --> 00:04:54.206
but maybe not quite as great

00:04:54.206 --> 00:04:54.846
experience.

00:04:55.406 --> 00:04:57.266
And Low Data Mode is all about a

00:04:57.266 --> 00:04:58.566
way for the user to signal to

00:04:58.566 --> 00:05:00.386
your application that they'd

00:05:00.386 --> 00:05:01.876
really prefer that you save that

00:05:01.876 --> 00:05:03.596
data and go with the option that

00:05:03.596 --> 00:05:04.806
still gives a great experience,

00:05:05.146 --> 00:05:08.076
but maybe not quite as great.

00:05:08.356 --> 00:05:09.156
So, let's talk about some

00:05:09.156 --> 00:05:10.116
techniques you can use.

00:05:10.556 --> 00:05:12.536
The first one is to reduce image

00:05:12.536 --> 00:05:12.956
quality.

00:05:13.386 --> 00:05:15.856
If your application isn't all

00:05:15.856 --> 00:05:17.546
about images, by reducing image

00:05:17.546 --> 00:05:18.866
quality, you can save a lot of

00:05:18.866 --> 00:05:20.396
data and you can still let the

00:05:20.396 --> 00:05:21.716
user do what they're trying to

00:05:21.716 --> 00:05:24.136
do, but save data in the

00:05:24.136 --> 00:05:24.676
process.

00:05:26.256 --> 00:05:28.296
You can reduce pre-fetching.

00:05:28.526 --> 00:05:29.986
Prefetching is a great technique

00:05:30.116 --> 00:05:31.766
for improving performance, but

00:05:31.766 --> 00:05:33.026
it has this downside that you

00:05:33.026 --> 00:05:34.436
may end up fetching resources

00:05:34.436 --> 00:05:36.046
that the user never needs.

00:05:36.236 --> 00:05:37.406
And in the event that they're

00:05:37.406 --> 00:05:38.636
really concerned about how much

00:05:38.636 --> 00:05:39.736
network data they're using,

00:05:39.986 --> 00:05:41.096
pre-fetching can actually be

00:05:41.096 --> 00:05:41.746
counterproductive.

00:05:43.056 --> 00:05:44.656
So, when you're in Low Data

00:05:44.656 --> 00:05:46.206
Mode, you can use-- you can

00:05:46.206 --> 00:05:47.606
eliminate your pre-fetching, you

00:05:47.606 --> 00:05:48.336
can save that data.

00:05:48.336 --> 00:05:49.526
And the user may have to wait a

00:05:49.526 --> 00:05:50.646
little bit longer if they scroll

00:05:50.646 --> 00:05:52.196
that content into view to wait

00:05:52.266 --> 00:05:54.126
for it to load.

00:05:54.746 --> 00:05:56.036
You can synchronize less often.

00:05:56.206 --> 00:05:57.266
The data will be stale for a

00:05:57.266 --> 00:05:58.496
little bit longer, but you'll

00:05:58.496 --> 00:05:59.206
still have data.

00:05:59.366 --> 00:06:00.576
The user can still accomplish

00:06:00.576 --> 00:06:04.366
what they've set out to do, but

00:06:04.366 --> 00:06:05.636
over a long period of time you

00:06:05.636 --> 00:06:06.816
can actually get some pretty big

00:06:06.876 --> 00:06:09.216
savings through reduced rate of

00:06:09.216 --> 00:06:09.886
synchronization.

00:06:10.536 --> 00:06:14.436
You can mark background tasks as

00:06:14.436 --> 00:06:15.306
discretionary.

00:06:15.896 --> 00:06:16.916
You'd be surprised how many of

00:06:16.916 --> 00:06:18.076
the background tasks you're

00:06:18.076 --> 00:06:19.916
setting up don't really need to

00:06:19.916 --> 00:06:20.876
be done immediately.

00:06:21.936 --> 00:06:23.216
By marking a background task as

00:06:23.216 --> 00:06:25.176
discretionary, it gives the

00:06:25.176 --> 00:06:26.756
system a lot of flexibility in

00:06:26.756 --> 00:06:27.936
when it actually schedules that

00:06:27.936 --> 00:06:28.586
operation.

00:06:28.716 --> 00:06:30.696
As I had mentioned in--

00:06:30.926 --> 00:06:32.246
previously-- when you're on the

00:06:32.246 --> 00:06:33.886
airplane, that gives the system

00:06:33.886 --> 00:06:35.156
the opportunity to put off that

00:06:35.156 --> 00:06:36.566
task until we get to a non-Low

00:06:36.566 --> 00:06:39.066
Data Mode network.

00:06:39.536 --> 00:06:40.836
Another great solution is to

00:06:40.836 --> 00:06:41.796
disable auto-play.

00:06:42.686 --> 00:06:44.076
This is really great because it

00:06:44.076 --> 00:06:45.326
doesn't prevent the user from

00:06:45.446 --> 00:06:46.466
playing the content that they're

00:06:46.466 --> 00:06:48.046
interested in, but it means the

00:06:48.046 --> 00:06:49.226
user doesn't have to pay for

00:06:49.226 --> 00:06:50.396
content that they really don't

00:06:50.396 --> 00:06:50.836
care about.

00:06:51.726 --> 00:06:54.356
That brings me to another really

00:06:54.356 --> 00:06:55.836
important point when you're

00:06:55.836 --> 00:06:56.646
choosing how you're going to

00:06:56.646 --> 00:06:57.676
implement Low Data Mode.

00:06:58.106 --> 00:06:59.236
Please don't block

00:06:59.236 --> 00:07:00.286
user-initiated work.

00:07:00.796 --> 00:07:02.346
Low Data Mode is all about

00:07:02.986 --> 00:07:04.486
telling the system to reduce the

00:07:04.486 --> 00:07:05.446
amount of network data that it

00:07:05.446 --> 00:07:07.326
uses, but to make sure that the

00:07:07.326 --> 00:07:08.886
user can still accomplish what

00:07:08.886 --> 00:07:09.846
they're setting out to do.

00:07:10.926 --> 00:07:11.916
As you're going through your

00:07:11.916 --> 00:07:13.286
application, you may realize

00:07:13.286 --> 00:07:14.316
that some of the operations you

00:07:14.316 --> 00:07:16.206
do do take a lot of network data

00:07:16.206 --> 00:07:17.226
and there's nothing you can do

00:07:17.226 --> 00:07:17.906
about that.

00:07:18.936 --> 00:07:20.646
It's great to reduce the amount

00:07:20.646 --> 00:07:21.686
of network data you're using for

00:07:21.686 --> 00:07:22.926
those operations any way you

00:07:22.926 --> 00:07:25.166
can, but we really don't want

00:07:25.166 --> 00:07:26.876
you to pop up a dialog that says

00:07:26.926 --> 00:07:28.016
are you sure you wanted to do

00:07:28.016 --> 00:07:28.176
this.

00:07:28.336 --> 00:07:29.586
I see you're in network data and

00:07:29.586 --> 00:07:30.426
this is going to use a lot of

00:07:30.426 --> 00:07:31.106
data.

00:07:31.256 --> 00:07:32.476
Don't second-guess the user.

00:07:32.586 --> 00:07:33.696
They've turned on Low Data Mode

00:07:34.666 --> 00:07:35.436
and they've asked your

00:07:35.436 --> 00:07:36.526
application to perform that

00:07:36.526 --> 00:07:37.226
operation.

00:07:37.266 --> 00:07:40.236
Go ahead and do that.

00:07:40.316 --> 00:07:41.596
So, let's talk a little bit

00:07:41.596 --> 00:07:43.346
about the APIs that your

00:07:43.346 --> 00:07:45.216
application can use to implement

00:07:45.216 --> 00:07:45.766
Low Data Mode.

00:07:47.266 --> 00:07:49.546
We've added APIs to URLSession

00:07:49.546 --> 00:07:50.936
and Network.framework.

00:07:51.746 --> 00:07:54.966
The thing to keep in mind is

00:07:54.966 --> 00:07:55.896
that when a network is in Low

00:07:55.896 --> 00:07:57.676
Data Mode, the constrained

00:07:57.676 --> 00:07:59.046
property is going to be set on

00:07:59.046 --> 00:07:59.756
that network.

00:08:00.876 --> 00:08:02.596
So, all of the APIs that we

00:08:02.596 --> 00:08:03.846
provide are based on the

00:08:03.846 --> 00:08:04.756
constrained property.

00:08:05.156 --> 00:08:07.016
In URLSession, we've added a

00:08:07.016 --> 00:08:07.906
property called

00:08:07.906 --> 00:08:09.546
allowsConstrainedNetworkAccess.

00:08:10.326 --> 00:08:11.706
By default, this is set to true.

00:08:12.096 --> 00:08:13.246
Your applications are allowed to

00:08:13.246 --> 00:08:14.436
use Low Data Mode networks by

00:08:14.436 --> 00:08:14.886
default.

00:08:15.506 --> 00:08:17.046
You can set this to false to opt

00:08:17.046 --> 00:08:17.236
out.

00:08:17.236 --> 00:08:18.936
You can set this on URLSession

00:08:18.936 --> 00:08:20.576
requests as well as your

00:08:20.576 --> 00:08:22.026
URLSession configuration.

00:08:23.036 --> 00:08:25.006
With URLSession, we really

00:08:25.006 --> 00:08:26.536
encourage you to go ahead and

00:08:26.536 --> 00:08:28.796
try that large resource fetch or

00:08:28.796 --> 00:08:29.926
pre-fetch and set

00:08:29.926 --> 00:08:31.376
allowsConstrainedNetworkAccess

00:08:31.376 --> 00:08:31.816
to false.

00:08:32.635 --> 00:08:33.936
If you get a failure and the

00:08:33.936 --> 00:08:35.876
error has a network unavailable

00:08:35.876 --> 00:08:37.486
reason of constrained, that

00:08:37.486 --> 00:08:38.876
indicates the operation failed

00:08:38.926 --> 00:08:40.076
because you're in Low Data Mode

00:08:40.076 --> 00:08:41.756
and the right thing to do there

00:08:41.926 --> 00:08:43.436
is to turn around and perform

00:08:43.436 --> 00:08:44.776
your Low Data Mode operation.

00:08:44.776 --> 00:08:46.576
In the case of a large resource

00:08:46.696 --> 00:08:48.016
fetch, that would be fetching a

00:08:48.016 --> 00:08:49.206
smaller resource instead.

00:08:49.206 --> 00:08:51.026
In the case of a pre-fetch, just

00:08:51.026 --> 00:08:52.076
wait until the user actually

00:08:52.076 --> 00:08:52.836
needs the content.

00:08:53.916 --> 00:08:55.936
This has the added benefit of

00:08:55.936 --> 00:08:56.856
letting you take advantage of

00:08:56.856 --> 00:08:57.926
anything that may actually

00:08:57.926 --> 00:08:58.946
already be in the cache.

00:08:59.876 --> 00:09:01.366
Now, with Network.framework, you

00:09:01.366 --> 00:09:02.446
have a similar property called

00:09:02.446 --> 00:09:03.646
prohibitConstrainedPaths.

00:09:04.136 --> 00:09:05.396
You can set this to true to

00:09:05.396 --> 00:09:06.666
block your connections and other

00:09:06.666 --> 00:09:08.526
networking objects from using

00:09:08.526 --> 00:09:09.556
Low Data Mode networks.

00:09:10.796 --> 00:09:12.276
With Network.framework you have

00:09:12.276 --> 00:09:13.056
another option, though.

00:09:13.376 --> 00:09:14.216
If you're going to connect to

00:09:14.216 --> 00:09:15.566
the same host whether you're in

00:09:15.566 --> 00:09:17.046
Low Data Mode or not, you can go

00:09:17.046 --> 00:09:17.946
ahead and establish that

00:09:17.946 --> 00:09:18.426
connection.

00:09:18.776 --> 00:09:19.736
And once the connection is

00:09:19.736 --> 00:09:21.196
established, you can get the

00:09:21.196 --> 00:09:23.016
current path and on the current

00:09:23.016 --> 00:09:23.996
path you can check to see if

00:09:23.996 --> 00:09:25.516
it's constrained and this will

00:09:25.516 --> 00:09:26.396
tell you whether or not this

00:09:26.426 --> 00:09:28.056
connection is established over a

00:09:28.056 --> 00:09:29.046
Low Data Mode network.

00:09:30.296 --> 00:09:32.216
Now, if you go this route, it's

00:09:32.216 --> 00:09:33.356
really important to make sure

00:09:33.356 --> 00:09:34.526
that you handle path updates.

00:09:35.876 --> 00:09:36.896
It's very possible that the

00:09:36.896 --> 00:09:38.346
constrained property can change

00:09:38.376 --> 00:09:39.316
over the lifetime of your

00:09:39.316 --> 00:09:40.616
connection.

00:09:43.176 --> 00:09:44.106
So, I spent a lot of time

00:09:44.106 --> 00:09:45.126
talking about the constrained

00:09:45.126 --> 00:09:46.406
property and Low Data Mode.

00:09:47.066 --> 00:09:48.236
There are a few other properties

00:09:48.236 --> 00:09:49.876
that your application can use to

00:09:49.876 --> 00:09:51.306
make decisions about what to do

00:09:51.586 --> 00:09:52.336
on a given network.

00:09:53.376 --> 00:09:54.946
There is the expensive property,

00:09:55.016 --> 00:09:55.746
which we introduced in

00:09:55.746 --> 00:09:56.936
Network.framework last year and

00:09:56.936 --> 00:09:58.336
we're bringing to URLSession

00:09:58.406 --> 00:09:58.656
with the

00:09:58.656 --> 00:09:59.976
allowsExpensiveNetworkAccess

00:09:59.976 --> 00:10:02.386
property this year.

00:10:03.656 --> 00:10:06.056
There's also checks for specific

00:10:06.056 --> 00:10:07.346
interface types, such as

00:10:07.346 --> 00:10:08.526
Cellular or Wi-Fi.

00:10:09.896 --> 00:10:11.006
If you haven't adopted any of

00:10:11.006 --> 00:10:12.226
these things yet, you're in a

00:10:12.226 --> 00:10:13.606
great position to focus on

00:10:13.606 --> 00:10:14.886
adopting Low Data Mode and

00:10:14.886 --> 00:10:16.046
that's definitely the way to go.

00:10:16.846 --> 00:10:18.006
With Low Data Mode, which

00:10:18.006 --> 00:10:19.196
correlates to the constrained

00:10:19.236 --> 00:10:22.646
property, the user has control.

00:10:22.776 --> 00:10:24.396
They have a setting they control

00:10:24.396 --> 00:10:25.466
that with.

00:10:25.466 --> 00:10:26.766
Expensive, on the other hand, is

00:10:26.766 --> 00:10:27.976
a property that's set by the

00:10:27.976 --> 00:10:29.946
system and it's almost always

00:10:29.996 --> 00:10:31.386
set for cellular networks and

00:10:31.386 --> 00:10:32.976
it's also set for Wi-Fi networks

00:10:33.016 --> 00:10:34.106
when they're associated with a

00:10:34.106 --> 00:10:35.196
Personal Hotspot.

00:10:36.316 --> 00:10:37.946
You can also check for cellular,

00:10:38.286 --> 00:10:39.536
but that also is something that

00:10:39.536 --> 00:10:40.916
the user has no control over.

00:10:41.896 --> 00:10:42.766
So, if you're currently doing

00:10:42.766 --> 00:10:44.086
any checks based on cellular

00:10:44.146 --> 00:10:45.386
interfaces or expensive

00:10:45.436 --> 00:10:47.116
properties, it's a really great

00:10:47.116 --> 00:10:49.406
idea to move over to doing-- to

00:10:49.406 --> 00:10:51.166
using constrained and taking

00:10:51.166 --> 00:10:52.226
advantage of Low Data Mode.

00:10:52.886 --> 00:10:54.606
If you've looked at these

00:10:54.606 --> 00:10:55.896
options and you've decided that

00:10:55.896 --> 00:10:57.166
you still want to be making

00:10:57.166 --> 00:10:58.126
decisions based on whether

00:10:58.126 --> 00:10:59.626
something's expensive or

00:10:59.626 --> 00:11:01.636
cellular, we strongly encourage

00:11:01.636 --> 00:11:02.566
you to use expensive.

00:11:03.746 --> 00:11:05.336
Expensive is a lot more flexible

00:11:05.336 --> 00:11:07.196
and in many ways it effectively

00:11:07.196 --> 00:11:09.026
futureproofs your application.

00:11:09.676 --> 00:11:11.186
Right now, cellular networks are

00:11:11.186 --> 00:11:12.046
almost always marked as

00:11:12.046 --> 00:11:13.426
expensive, but they may not be

00:11:13.426 --> 00:11:14.726
in the future and there are

00:11:14.726 --> 00:11:16.106
other interface types that may

00:11:16.106 --> 00:11:17.476
come around that may also be

00:11:17.476 --> 00:11:17.956
expensive.

00:11:18.456 --> 00:11:19.846
By using the expensive property,

00:11:19.956 --> 00:11:21.236
your application is going to do

00:11:21.236 --> 00:11:22.346
the right thing in the future

00:11:22.346 --> 00:11:23.346
with different interfaces.

00:11:23.996 --> 00:11:24.686
If you're checking for a

00:11:24.686 --> 00:11:25.726
specific interface such as

00:11:25.726 --> 00:11:27.326
cellular, you're not going to be

00:11:27.326 --> 00:11:29.316
able to take advantage of that.

00:11:29.916 --> 00:11:31.116
I'm really excited to see what

00:11:31.116 --> 00:11:32.606
you guys do adopting Low Data

00:11:32.606 --> 00:11:32.816
Mode.

00:11:33.146 --> 00:11:34.216
Thank you so much for your time.

00:11:34.456 --> 00:11:35.426
With that, I'd like to have

00:11:35.426 --> 00:11:36.936
Guoye come up to talk about

00:11:36.936 --> 00:11:38.566
Combine in URLSession.

00:11:39.516 --> 00:11:42.636
[ Applause ]

00:11:43.136 --> 00:11:43.726
>> Thank you, Josh.

00:11:45.096 --> 00:11:45.916
Good morning.

00:11:46.206 --> 00:11:48.346
I'm Guoye Zhang.

00:11:48.696 --> 00:11:50.616
I'm excited to tell you today

00:11:50.886 --> 00:11:52.366
about how we are supporting a

00:11:52.366 --> 00:11:54.026
new Swift framework, Combine in

00:11:54.026 --> 00:11:56.466
URLSession, and how you can use

00:11:56.466 --> 00:11:57.866
Combine to streamline your

00:11:57.866 --> 00:11:59.386
networking code.

00:12:00.976 --> 00:12:03.446
Combine brings decorative

00:12:03.766 --> 00:12:04.976
asynchronous programming to

00:12:04.976 --> 00:12:05.486
Swift.

00:12:06.446 --> 00:12:09.486
To explain what it is, let me

00:12:09.586 --> 00:12:11.266
start with an example of

00:12:11.266 --> 00:12:12.806
building a responsive search

00:12:12.806 --> 00:12:13.156
field.

00:12:13.786 --> 00:12:16.826
So, search field publishes

00:12:16.826 --> 00:12:19.676
values whenever user types and

00:12:19.676 --> 00:12:21.446
sink here subscribes and

00:12:21.446 --> 00:12:23.436
receives a URL to start a

00:12:23.436 --> 00:12:24.006
search.

00:12:24.556 --> 00:12:27.326
In-between, we use the map

00:12:27.326 --> 00:12:30.416
operator to map the value into a

00:12:30.416 --> 00:12:30.626
URL.

00:12:33.526 --> 00:12:35.496
Now, let's suppose I only want

00:12:35.496 --> 00:12:37.306
to start a search when there is

00:12:37.346 --> 00:12:38.316
enough content.

00:12:38.916 --> 00:12:42.406
We can use the filter operator.

00:12:43.896 --> 00:12:45.566
The filter operator in this case

00:12:45.946 --> 00:12:47.956
drops all strings shorter than

00:12:48.026 --> 00:12:48.916
three characters.

00:12:52.406 --> 00:12:54.926
Now we've eliminated the user's

00:12:54.926 --> 00:12:57.056
queries like a single H.

00:12:57.896 --> 00:13:00.066
However, the search still

00:13:00.066 --> 00:13:01.526
happens too frequently.

00:13:02.286 --> 00:13:04.526
What if I only want to search

00:13:04.806 --> 00:13:06.356
when user stops typing for a

00:13:06.356 --> 00:13:06.756
moment.

00:13:07.396 --> 00:13:11.426
We can use debounce operator.

00:13:12.516 --> 00:13:17.776
[ Applause ]

00:13:18.276 --> 00:13:20.576
So, debounce delays the value

00:13:20.896 --> 00:13:22.566
and only forwards it when there

00:13:22.566 --> 00:13:24.686
is a significant delay, in this

00:13:24.686 --> 00:13:26.486
case 0.2 seconds.

00:13:30.316 --> 00:13:33.296
However, with debounce, if user

00:13:33.296 --> 00:13:35.186
types something and deletes it,

00:13:35.646 --> 00:13:37.176
we might end up sending the same

00:13:37.176 --> 00:13:38.766
value down the chain and

00:13:38.766 --> 00:13:40.806
starting the same search over

00:13:40.806 --> 00:13:43.136
and over again.

00:13:43.356 --> 00:13:45.786
To solve this, we can add the

00:13:45.786 --> 00:13:47.416
removeDuplicates operator.

00:13:49.036 --> 00:13:51.836
removeDuplicates remembers the

00:13:51.836 --> 00:13:54.346
last value received and only

00:13:54.346 --> 00:13:55.616
forwards a new value when it

00:13:55.616 --> 00:13:56.526
changes.

00:14:01.356 --> 00:14:03.526
Now we have the final version of

00:14:03.526 --> 00:14:05.596
the search field by changing

00:14:05.596 --> 00:14:07.696
these powerful operators, your

00:14:07.696 --> 00:14:09.806
asynchronous code be linear and

00:14:09.806 --> 00:14:10.656
composable.

00:14:16.116 --> 00:14:19.726
Combine processes values over

00:14:19.726 --> 00:14:20.196
time.

00:14:21.336 --> 00:14:23.866
It consists of publishers,

00:14:24.146 --> 00:14:26.216
operators, and subscribers.

00:14:27.596 --> 00:14:30.166
The chain is driven by the

00:14:30.166 --> 00:14:31.466
request sent from the

00:14:31.466 --> 00:14:32.526
subscriber.

00:14:34.236 --> 00:14:36.136
In response to the request,

00:14:36.676 --> 00:14:38.236
publisher sends value down the

00:14:38.236 --> 00:14:38.536
chain.

00:14:39.486 --> 00:14:41.436
This is how that pressure is

00:14:41.436 --> 00:14:42.476
handled by Combine.

00:14:43.116 --> 00:14:46.376
If you want to learn more,

00:14:47.306 --> 00:14:48.866
Introducing Combine session

00:14:48.866 --> 00:14:50.596
video will be available shortly

00:14:51.076 --> 00:14:52.536
and I encourage you to attend

00:14:52.796 --> 00:14:54.676
Combine in Practice sessions

00:14:55.426 --> 00:14:58.276
this afternoon.

00:14:58.436 --> 00:15:00.326
Networking is inherently

00:15:00.326 --> 00:15:02.006
asynchronous, that's why it's

00:15:02.006 --> 00:15:03.356
perfect to adopt Combine.

00:15:05.396 --> 00:15:07.706
This year, we're introducing

00:15:07.706 --> 00:15:10.206
DataTaskPublisher in URLSession.

00:15:10.876 --> 00:15:13.076
It is a single value publisher

00:15:13.616 --> 00:15:14.936
and it works similarly to our

00:15:14.996 --> 00:15:16.276
existing closure based

00:15:16.276 --> 00:15:18.946
convenience methods, which means

00:15:18.946 --> 00:15:20.736
you can create it from a shared

00:15:20.736 --> 00:15:23.016
URLSession or from your own

00:15:23.016 --> 00:15:24.706
URLSession and receive

00:15:24.706 --> 00:15:26.386
authentication challenges and

00:15:26.386 --> 00:15:27.986
metrics on your delegate.

00:15:28.576 --> 00:15:31.386
This is the interface of

00:15:31.386 --> 00:15:32.556
DataTaskPublisher.

00:15:33.116 --> 00:15:35.746
It conforms to the publisher

00:15:35.746 --> 00:15:37.006
protocol.

00:15:37.806 --> 00:15:39.926
On success, it sends you a true

00:15:39.926 --> 00:15:41.906
pool of data and response.

00:15:42.196 --> 00:15:44.526
On failure, it sends you an URL

00:15:44.526 --> 00:15:44.976
error.

00:15:48.416 --> 00:15:50.206
Now, let me give you a demo on

00:15:50.206 --> 00:15:51.976
how Combine works in URLSession.

00:15:59.006 --> 00:16:00.186
So, for the purpose of this

00:16:00.186 --> 00:16:02.766
demo, I've disabled URL cache,

00:16:02.966 --> 00:16:04.536
so all the resources to fetch

00:16:04.536 --> 00:16:05.456
over the network.

00:16:06.296 --> 00:16:08.126
I've also used Network Link

00:16:08.226 --> 00:16:09.866
Conditioner to simulate a

00:16:09.866 --> 00:16:10.976
realistic 3G environment.

00:16:16.426 --> 00:16:18.396
So, I am building this for a bar

00:16:18.396 --> 00:16:19.286
called PubSocket.

00:16:20.636 --> 00:16:23.536
This app shows name, image, and

00:16:23.536 --> 00:16:25.546
item price of each item in the

00:16:25.546 --> 00:16:25.956
bar.

00:16:27.956 --> 00:16:29.676
So, after listening to Josh's

00:16:29.676 --> 00:16:31.326
talk about Low Data Mode, I've

00:16:31.326 --> 00:16:32.626
decided to provide a

00:16:32.626 --> 00:16:34.346
high-resolution image and a

00:16:34.346 --> 00:16:36.206
low-resolution image for Low

00:16:36.696 --> 00:16:37.756
Data Mode.

00:16:37.976 --> 00:16:39.336
Right now I'm in Low Data Mode,

00:16:39.336 --> 00:16:40.726
so you see these black and white

00:16:40.726 --> 00:16:40.976
images.

00:16:43.686 --> 00:16:45.296
And if I switch off Low Data

00:16:49.036 --> 00:16:50.676
Mode, these images are replaced

00:16:50.676 --> 00:16:51.656
with the high-resolution

00:16:51.656 --> 00:16:51.976
variant.

00:16:55.416 --> 00:16:56.896
Let's see how this is currently

00:16:56.896 --> 00:16:57.946
implemented without Combine.

00:17:04.876 --> 00:17:06.516
So the interface is built in

00:17:06.516 --> 00:17:09.396
UITableView and here we have the

00:17:09.396 --> 00:17:11.516
data source method cellForRowAt

00:17:11.516 --> 00:17:12.236
indexPath.

00:17:13.156 --> 00:17:15.675
In this method, we dequeue a

00:17:15.675 --> 00:17:18.266
reusable cell and configure the

00:17:18.266 --> 00:17:19.866
name and price of each item on

00:17:19.866 --> 00:17:20.366
the cell.

00:17:21.596 --> 00:17:25.626
Then we start a URL request to

00:17:25.626 --> 00:17:27.386
fetch the high-resolution image

00:17:27.516 --> 00:17:29.176
and disable constrained network

00:17:29.176 --> 00:17:29.816
access.

00:17:31.116 --> 00:17:33.196
pubSession here is the shared

00:17:33.196 --> 00:17:35.066
global session we use in

00:17:35.066 --> 00:17:37.496
PubSocket app and we use the

00:17:37.496 --> 00:17:39.296
pubSession to create a data task

00:17:39.296 --> 00:17:40.226
from the request.

00:17:44.376 --> 00:17:46.826
When task finishes, we check to

00:17:46.826 --> 00:17:48.546
see if the status code is 200.

00:17:48.546 --> 00:17:50.796
OK. We convert the data into the

00:17:50.796 --> 00:17:52.496
image and put the image on the

00:17:52.496 --> 00:17:52.946
cell.

00:17:59.496 --> 00:18:01.446
When task fails due to Low Data

00:18:01.446 --> 00:18:04.256
Mode, we create a new data task

00:18:04.556 --> 00:18:05.746
to fetch the low-resolution

00:18:05.746 --> 00:18:05.976
image.

00:18:09.556 --> 00:18:10.776
And we do the same thing here.

00:18:10.776 --> 00:18:13.406
We check the status code, we

00:18:13.406 --> 00:18:14.806
convert the image, and put it on

00:18:14.806 --> 00:18:14.976
the cell.

00:18:17.576 --> 00:18:18.686
Don't forget to resume these

00:18:18.686 --> 00:18:18.916
tasks.

00:18:23.696 --> 00:18:26.056
So, as a networking engineer, I

00:18:26.056 --> 00:18:27.616
know the networking logic here

00:18:27.616 --> 00:18:28.176
is solid.

00:18:29.216 --> 00:18:30.556
I'm adhering to the best

00:18:30.556 --> 00:18:31.686
practice of not doing any

00:18:31.686 --> 00:18:32.566
pre-fetch acts.

00:18:33.236 --> 00:18:36.046
However, I'm not very happy with

00:18:36.046 --> 00:18:38.196
the current code because it has

00:18:38.196 --> 00:18:39.566
lots of duplications.

00:18:40.476 --> 00:18:42.236
We are checking the status code,

00:18:42.236 --> 00:18:46.796
converting the image twice.

00:18:46.966 --> 00:18:48.796
Also, you might have noticed

00:18:49.056 --> 00:18:50.286
I've made the very common

00:18:50.286 --> 00:18:52.436
mistake of capturing the cell

00:18:52.436 --> 00:18:53.676
and putting the image on the

00:18:53.676 --> 00:18:54.976
cell asynchronously.

00:18:57.126 --> 00:18:58.596
The cell could have already been

00:18:58.596 --> 00:19:00.516
reused at this time by UIKit.

00:19:02.446 --> 00:19:03.926
So, I'm going to show you the

00:19:03.926 --> 00:19:04.256
bug.

00:19:04.256 --> 00:19:07.026
I'm going to scroll down very

00:19:07.026 --> 00:19:07.426
quickly.

00:19:07.426 --> 00:19:08.946
Please pay attention to the last

00:19:08.946 --> 00:19:10.236
few items on the menu.

00:19:10.796 --> 00:19:13.546
As you can see, hot dog and

00:19:13.546 --> 00:19:15.086
drumstick have the wrong image

00:19:15.086 --> 00:19:15.476
being placed.

00:19:19.086 --> 00:19:20.526
Let me do it again.

00:19:20.526 --> 00:19:21.636
I'm going to scroll up to the

00:19:21.636 --> 00:19:21.986
top.

00:19:21.986 --> 00:19:23.176
Please pay attention to the

00:19:23.176 --> 00:19:24.356
first few items.

00:19:27.436 --> 00:19:28.686
Yeah, root beer and fries have

00:19:28.686 --> 00:19:30.396
the wrong image being placed on

00:19:30.396 --> 00:19:31.456
them before they are replaced

00:19:31.456 --> 00:19:31.976
with the correct one.

00:19:37.506 --> 00:19:38.886
Now let's see how we can use

00:19:38.886 --> 00:19:40.746
Combine to fix all these issues.

00:19:42.676 --> 00:19:44.666
First, let me delete this code

00:19:44.666 --> 00:19:44.976
to fetch.

00:19:49.666 --> 00:19:50.446
Here we have the

00:19:50.446 --> 00:19:52.446
MenuItemTableViewCell class

00:19:52.446 --> 00:19:52.746
here.

00:19:53.146 --> 00:19:55.816
So, cell receives an image, so

00:19:55.816 --> 00:19:57.106
it's a good place to put a

00:19:57.106 --> 00:19:58.866
subscriber on it.

00:20:00.076 --> 00:20:02.186
The subscriber here conforms to

00:20:02.186 --> 00:20:03.526
any cancelable protocol.

00:20:04.796 --> 00:20:07.096
We can cancel the subscriber in

00:20:08.676 --> 00:20:10.486
prepare for reuse method.

00:20:11.036 --> 00:20:12.326
The cancellation happens

00:20:12.326 --> 00:20:13.886
immediately, which means we

00:20:13.886 --> 00:20:15.586
won't ever get the chance of any

00:20:15.586 --> 00:20:16.736
image being placed on the wrong

00:20:16.736 --> 00:20:17.106
cell.

00:20:18.996 --> 00:20:20.556
Now let's go back to the

00:20:20.556 --> 00:20:22.196
TableView data source method,

00:20:22.196 --> 00:20:23.776
cellForRowAt indexPath.

00:20:26.256 --> 00:20:28.046
We start by doing the same

00:20:28.046 --> 00:20:30.216
thing, create a URL request and

00:20:30.386 --> 00:20:31.916
fetch the high-resolution image

00:20:32.156 --> 00:20:33.626
and disable constrained network

00:20:33.626 --> 00:20:34.116
access.

00:20:34.926 --> 00:20:36.876
But instead of a data task, we

00:20:36.876 --> 00:20:38.756
create a data task publisher for

00:20:38.756 --> 00:20:39.446
the request.

00:20:44.156 --> 00:20:46.536
Then we use the new tryCatch

00:20:46.536 --> 00:20:47.766
operator in Combine.

00:20:48.336 --> 00:20:50.446
The tryCatch operator catches

00:20:50.446 --> 00:20:51.466
the error produced by

00:20:51.466 --> 00:20:53.856
DataTaskPublisher and if the

00:20:53.856 --> 00:20:55.506
task failed because of Low Data

00:20:55.506 --> 00:20:57.856
Mode, we replace the publisher

00:20:57.856 --> 00:20:59.236
with the new publisher to fetch

00:20:59.236 --> 00:21:01.146
the low-resolution image.

00:21:02.776 --> 00:21:04.486
Otherwise, we just rethrow the

00:21:04.486 --> 00:21:05.686
same error down the chain.

00:21:10.336 --> 00:21:13.226
Next, let's use tryMap operator

00:21:13.416 --> 00:21:15.036
to handle the success case where

00:21:15.036 --> 00:21:16.206
we receive the data and the

00:21:16.206 --> 00:21:16.956
response.

00:21:17.406 --> 00:21:18.986
We check the status code and

00:21:18.986 --> 00:21:20.566
create an image from the data.

00:21:21.876 --> 00:21:23.606
This map handles both

00:21:23.936 --> 00:21:25.286
high-resolution image and

00:21:25.286 --> 00:21:26.446
low-resolution image,

00:21:26.856 --> 00:21:27.896
eliminating the code

00:21:27.896 --> 00:21:28.646
duplication.

00:21:33.556 --> 00:21:35.926
Finally, we replace the error

00:21:35.926 --> 00:21:38.776
with a placeholder image, switch

00:21:38.776 --> 00:21:40.566
the main queue, and use the

00:21:40.566 --> 00:21:42.646
assigned subscriber to put the

00:21:42.646 --> 00:21:43.596
image on the cell.

00:21:51.096 --> 00:21:52.136
Now, this is pretty good.

00:21:52.396 --> 00:21:53.976
We've implemented the same logic

00:21:53.976 --> 00:21:55.396
with much shorter code and

00:21:55.396 --> 00:21:56.076
linear code.

00:21:57.436 --> 00:21:58.756
But can we do more?

00:21:59.726 --> 00:22:01.336
There is one more operator I

00:22:01.336 --> 00:22:02.226
want to show you.

00:22:02.786 --> 00:22:04.506
It is called retry.

00:22:06.936 --> 00:22:09.446
Imagine what you have to-- what

00:22:09.446 --> 00:22:11.426
you have to do before to support

00:22:11.426 --> 00:22:11.976
retry.

00:22:12.586 --> 00:22:16.276
You have to either call the data

00:22:16.276 --> 00:22:19.686
task creator recursively or

00:22:19.686 --> 00:22:20.996
maintain a state machine.

00:22:22.486 --> 00:22:24.976
Now in Combine, I can just put

00:22:24.976 --> 00:22:28.346
retry operator right here before

00:22:28.346 --> 00:22:29.596
we replace the error.

00:22:32.516 --> 00:22:37.826
[ Applause ]

00:22:38.326 --> 00:22:40.276
So, retry catches the errors

00:22:40.276 --> 00:22:43.116
thrown here and it retries by

00:22:43.116 --> 00:22:44.406
restarting the chain of

00:22:44.406 --> 00:22:46.466
operators and fetches the image

00:22:46.466 --> 00:22:46.906
again.

00:22:46.906 --> 00:22:49.656
In this case, I'm just retrying

00:22:49.656 --> 00:22:49.856
once.

00:22:53.816 --> 00:22:55.616
So, networking APIs on all

00:22:55.616 --> 00:22:57.166
platforms are designed to be

00:22:57.166 --> 00:22:59.576
very reliable, so in general you

00:22:59.576 --> 00:23:00.646
don't need to retry.

00:23:01.306 --> 00:23:03.466
However, your app might need to

00:23:03.466 --> 00:23:05.066
connect with some flaky server

00:23:05.066 --> 00:23:07.496
or meta boxes that gives you 500

00:23:07.496 --> 00:23:09.136
server errors frequently.

00:23:09.666 --> 00:23:12.906
In this case, this tryMap

00:23:12.906 --> 00:23:14.876
operator will throw an invalid

00:23:14.876 --> 00:23:16.756
server response error, which can

00:23:16.756 --> 00:23:17.956
be caught by retry.

00:23:21.536 --> 00:23:23.296
But please be aware that

00:23:23.296 --> 00:23:24.906
networking operation is very

00:23:24.906 --> 00:23:27.336
expensive; retry is no

00:23:27.336 --> 00:23:29.666
exception, so avoid retry if

00:23:29.666 --> 00:23:30.396
possible.

00:23:30.956 --> 00:23:32.996
If you have to retry, start with

00:23:32.996 --> 00:23:34.066
a very low number.

00:23:35.916 --> 00:23:37.826
Also, please pay attention to

00:23:37.826 --> 00:23:39.686
the idempotence of your request.

00:23:40.876 --> 00:23:43.206
In my app, downloading an image

00:23:43.206 --> 00:23:45.436
twice is fine, but if your app

00:23:45.436 --> 00:23:46.856
handles transaction like

00:23:46.856 --> 00:23:49.236
payment, blindly retrying could

00:23:49.236 --> 00:23:50.286
be very dangerous.

00:23:56.286 --> 00:23:57.806
Now let me turn on Low Data Mode

00:23:57.806 --> 00:23:57.976
again.

00:24:06.266 --> 00:24:07.606
And let's see the app running

00:24:07.606 --> 00:24:07.846
again.

00:24:23.286 --> 00:24:24.676
As you can see, we fetched the

00:24:24.676 --> 00:24:25.826
low-resolution images just like

00:24:25.826 --> 00:24:25.976
before.

00:24:29.066 --> 00:24:30.616
And if I turn off Low Data Mode,

00:24:34.416 --> 00:24:36.716
the same high-resolution images

00:24:36.976 --> 00:24:38.496
and we won't get any wrong

00:24:38.496 --> 00:24:39.976
images being placed on the cell.

00:24:44.516 --> 00:24:52.206
[ Applause ]

00:24:52.706 --> 00:24:55.646
OK. Let's go back to the slides.

00:24:59.046 --> 00:25:01.086
To recap, I've just shown you

00:25:01.086 --> 00:25:02.276
how Combine can make your

00:25:02.276 --> 00:25:05.306
networking code concise, linear,

00:25:05.516 --> 00:25:07.396
and less error-prone.

00:25:08.156 --> 00:25:09.646
I've also shown you how

00:25:09.646 --> 00:25:11.146
composable these Combine

00:25:11.146 --> 00:25:12.946
operators are, that you can

00:25:12.946 --> 00:25:14.396
support retry by just adding

00:25:14.396 --> 00:25:15.346
one-off code.

00:25:16.256 --> 00:25:18.536
But please pay attention to use

00:25:18.536 --> 00:25:20.636
low retry count and only retry

00:25:20.636 --> 00:25:22.036
idempotent requests.

00:25:23.026 --> 00:25:25.576
Finally, I've shown you how you

00:25:25.936 --> 00:25:28.056
can use Combine with Low Data

00:25:28.056 --> 00:25:30.166
Mode without doing any pre-fetch

00:25:30.166 --> 00:25:30.546
checks.

00:25:34.176 --> 00:25:35.736
Here is the code I extracted

00:25:35.736 --> 00:25:37.666
from my demo to do adaptive

00:25:37.666 --> 00:25:39.026
loading for Low Data Mode.

00:25:39.636 --> 00:25:43.276
It takes a regular URL and a low

00:25:43.276 --> 00:25:45.846
data URL and gives you back a

00:25:45.846 --> 00:25:48.696
publisher of data.

00:25:48.876 --> 00:25:51.906
First, we create a-- we create a

00:25:51.906 --> 00:25:53.946
request to fetch the regular URL

00:25:54.156 --> 00:25:55.696
and disable constrained network

00:25:55.696 --> 00:25:56.186
access.

00:25:57.196 --> 00:25:58.976
We use the URL-- we use the

00:25:58.976 --> 00:26:00.676
request to create a data task

00:26:00.676 --> 00:26:01.376
publisher.

00:26:03.116 --> 00:26:05.516
Then, immediately then we handle

00:26:05.516 --> 00:26:08.106
the error caused by Low Data

00:26:08.106 --> 00:26:09.916
Mode and then we replace the

00:26:09.916 --> 00:26:11.336
publisher with a new publisher

00:26:11.516 --> 00:26:13.376
to fetch the low data URL.

00:26:13.866 --> 00:26:17.466
Next, we handle both success

00:26:17.466 --> 00:26:19.486
cases together, checking the

00:26:19.556 --> 00:26:21.346
status code and give the data

00:26:21.346 --> 00:26:21.976
back to you.

00:26:25.796 --> 00:26:27.066
You can use this code as a

00:26:27.066 --> 00:26:29.076
starting point of Combine and

00:26:29.076 --> 00:26:31.156
Low Data Mode and customize this

00:26:31.156 --> 00:26:31.936
code to your needs.

00:26:34.096 --> 00:26:35.646
I have to mention that some of

00:26:35.646 --> 00:26:37.316
the APIs are not available yet

00:26:37.406 --> 00:26:38.216
in current SDK.

00:26:38.216 --> 00:26:40.166
We are working on getting them

00:26:40.166 --> 00:26:41.816
into a future beta.

00:26:45.486 --> 00:26:46.956
Next, I want to invite my

00:26:46.956 --> 00:26:49.236
colleague Jiten to talk about

00:26:49.236 --> 00:26:49.956
WebSocket.

00:26:50.726 --> 00:26:51.946
>> Thank you, Guoye.

00:26:51.946 --> 00:26:54.166
Good morning everyone.

00:26:54.606 --> 00:26:56.946
My name is Jiten Mehta and I'm

00:26:56.946 --> 00:26:58.506
excited to talk to you about the

00:26:58.506 --> 00:27:00.516
WebSocket protocol in Apple's

00:27:00.516 --> 00:27:03.026
networking frameworks new in iOS

00:27:03.076 --> 00:27:05.026
13 and macOS Catalina.

00:27:06.726 --> 00:27:08.696
In the past years, a large

00:27:08.696 --> 00:27:09.886
number of developers have asked

00:27:09.886 --> 00:27:11.446
us for the WebSocket protocol

00:27:11.446 --> 00:27:13.216
support in Apple's frameworks.

00:27:14.096 --> 00:27:15.516
In fact, it was the number one

00:27:15.516 --> 00:27:16.666
developer request from a

00:27:16.666 --> 00:27:18.066
networking survey that we

00:27:18.066 --> 00:27:18.976
conducted last year.

00:27:22.456 --> 00:27:24.526
WebSocket allows bidirectional

00:27:24.526 --> 00:27:26.816
communication over a single HTTP

00:27:26.816 --> 00:27:27.496
connection.

00:27:28.676 --> 00:27:30.346
This enables developers to write

00:27:30.346 --> 00:27:31.966
applications like chat,

00:27:32.736 --> 00:27:34.356
multiplayer games, and other

00:27:34.356 --> 00:27:36.166
real-time applications.

00:27:36.976 --> 00:27:38.606
WebSocket works over the

00:27:38.606 --> 00:27:41.386
well-known HTTP ports and is

00:27:41.446 --> 00:27:42.816
fully compatible with the

00:27:42.816 --> 00:27:44.426
existing web infrastructure,

00:27:44.796 --> 00:27:46.176
allowing you to connect to

00:27:46.246 --> 00:27:48.886
proxies, CDNs, and firewalls.

00:27:50.256 --> 00:27:52.156
Historically, the WebSocket

00:27:52.156 --> 00:27:54.316
protocol has been available as a

00:27:54.316 --> 00:27:56.686
JavaScript API in web browsers,

00:27:57.866 --> 00:27:59.146
but looking at the benefits that

00:27:59.146 --> 00:28:00.636
WebSocket brings to web apps,

00:28:00.936 --> 00:28:03.206
we've decided to extend this API

00:28:03.426 --> 00:28:05.446
to our networking framework in

00:28:05.446 --> 00:28:07.026
addition to the existing

00:28:07.026 --> 00:28:09.176
JavaScript API already available

00:28:09.176 --> 00:28:09.906
in web views.

00:28:11.226 --> 00:28:12.746
This enables you to use your

00:28:12.746 --> 00:28:14.856
existing web infrastructure and

00:28:14.856 --> 00:28:16.166
bring it to your native apps on

00:28:16.226 --> 00:28:16.976
Apple's platforms.

00:28:20.476 --> 00:28:22.106
Before we talk about WebSocket,

00:28:22.836 --> 00:28:24.186
let's take a look at a common

00:28:24.186 --> 00:28:26.516
technique used today to enable

00:28:26.516 --> 00:28:28.056
bidirectional communication.

00:28:29.136 --> 00:28:30.856
Let's take a chat application as

00:28:30.856 --> 00:28:31.456
an example.

00:28:31.956 --> 00:28:34.726
When a client wants to receive a

00:28:34.726 --> 00:28:36.096
response from the server, it

00:28:36.096 --> 00:28:37.056
sends out a request.

00:28:38.266 --> 00:28:40.046
The server responds with a 200

00:28:40.046 --> 00:28:42.006
status code immediately, but it

00:28:42.006 --> 00:28:43.496
does not send out the response

00:28:43.496 --> 00:28:45.116
body because it doesn't have one

00:28:45.116 --> 00:28:45.706
at this point.

00:28:46.866 --> 00:28:48.536
Sometime in the future, once the

00:28:48.536 --> 00:28:50.336
server has a response ready for

00:28:50.336 --> 00:28:52.146
the client, it sends it out to

00:28:52.146 --> 00:28:52.576
the client.

00:28:53.356 --> 00:28:55.116
At which point, the client sends

00:28:55.116 --> 00:28:56.656
a new request, indicating that

00:28:56.656 --> 00:28:58.066
it wants to receive the next

00:28:58.066 --> 00:28:58.536
message.

00:28:59.916 --> 00:29:01.606
This is known as long polling,

00:29:02.206 --> 00:29:03.666
but there are some disadvantages

00:29:03.666 --> 00:29:04.976
associated with long polling.

00:29:06.436 --> 00:29:08.176
Both the end points when they

00:29:08.176 --> 00:29:09.916
want to send messages have to

00:29:09.916 --> 00:29:12.396
either send an HTTP request or

00:29:12.396 --> 00:29:14.786
an HTTP response, which is a lot

00:29:14.786 --> 00:29:15.336
of overhead.

00:29:16.836 --> 00:29:18.536
Additionally, complexity has to

00:29:18.696 --> 00:29:19.936
be maintained at the server to

00:29:19.936 --> 00:29:21.176
enable long polling.

00:29:22.726 --> 00:29:24.226
Let's see how WebSockets can

00:29:24.226 --> 00:29:25.396
solve this problem for us.

00:29:25.936 --> 00:29:29.446
As the first part of the first

00:29:29.446 --> 00:29:31.086
step of the WebSocket handshake,

00:29:31.336 --> 00:29:33.586
the client sends out a request

00:29:33.766 --> 00:29:35.416
to the server, indicating that

00:29:35.416 --> 00:29:36.696
it wants to upgrade this

00:29:36.696 --> 00:29:37.766
connection to WebSocket.

00:29:39.206 --> 00:29:41.376
The server responds with the 101

00:29:41.456 --> 00:29:42.996
switching protocol to response,

00:29:43.566 --> 00:29:45.126
at which point we have a

00:29:45.126 --> 00:29:47.076
bidirectional stream between the

00:29:47.076 --> 00:29:47.966
two end points.

00:29:48.506 --> 00:29:51.286
Both the end points are now free

00:29:51.286 --> 00:29:52.956
to send messages in either

00:29:52.956 --> 00:29:53.526
direction.

00:29:54.096 --> 00:29:56.716
They can send messages like data

00:29:57.026 --> 00:29:59.246
string or ping and pong frames

00:29:59.566 --> 00:30:03.566
without any HTTP overhead.

00:30:03.566 --> 00:30:05.426
URLSession is Apple's

00:30:05.426 --> 00:30:07.056
recommended API for HTTP.

00:30:07.056 --> 00:30:09.986
And this year we are excited to

00:30:10.046 --> 00:30:10.816
announce

00:30:10.986 --> 00:30:13.216
URLSessionWebSocketTask, a new

00:30:13.216 --> 00:30:14.976
API in the foundation framework.

00:30:15.516 --> 00:30:20.816
[ Cheering and Applause ]

00:30:21.316 --> 00:30:22.906
To create a WebSocket task, you

00:30:22.906 --> 00:30:24.626
can simply pass in the URL that

00:30:24.626 --> 00:30:26.046
you want to connect to and call

00:30:26.046 --> 00:30:26.736
resume.

00:30:27.406 --> 00:30:28.996
We will start the handshake and

00:30:28.996 --> 00:30:29.936
you need not worry about

00:30:29.936 --> 00:30:31.026
handling any of the status

00:30:31.026 --> 00:30:31.426
codes.

00:30:31.956 --> 00:30:34.866
The first part of the WebSocket

00:30:34.866 --> 00:30:37.296
handshake uses HTTP semantics,

00:30:37.666 --> 00:30:38.996
which means your

00:30:39.036 --> 00:30:42.106
URLSessionWebSocketTask will use

00:30:42.106 --> 00:30:43.816
your existing URLSession

00:30:43.816 --> 00:30:45.016
configuration objects.

00:30:46.136 --> 00:30:47.576
It will also use your network

00:30:47.576 --> 00:30:48.996
storages to do cookie and

00:30:48.996 --> 00:30:50.766
convention look ups and we will

00:30:50.766 --> 00:30:52.186
honor your delegates for any

00:30:52.186 --> 00:30:52.826
challenges.

00:30:54.156 --> 00:30:55.566
Once you're connected, you can

00:30:55.616 --> 00:30:57.776
send data or string messages on

00:30:57.776 --> 00:30:58.336
the task.

00:30:59.556 --> 00:31:01.266
You can also receive messages on

00:31:01.266 --> 00:31:03.206
the task by passing a completion

00:31:03.206 --> 00:31:04.806
handler, which will be called

00:31:04.806 --> 00:31:06.706
asynchronously once we receive

00:31:06.706 --> 00:31:08.846
the entire message from the

00:31:09.196 --> 00:31:09.336
server.

00:31:10.396 --> 00:31:12.456
The URLSession API for

00:31:12.456 --> 00:31:14.186
WebSockets is closer to the

00:31:14.186 --> 00:31:16.576
JavaScript API, which is based

00:31:16.576 --> 00:31:18.796
around complete messages and

00:31:18.796 --> 00:31:19.466
callbacks.

00:31:20.706 --> 00:31:21.936
But some developers need more

00:31:21.936 --> 00:31:24.766
than this, like sever support or

00:31:24.766 --> 00:31:26.186
reading partial messages.

00:31:26.726 --> 00:31:28.616
And for that, we are excited to

00:31:28.616 --> 00:31:31.136
announce WebSocketSupport in

00:31:31.136 --> 00:31:32.756
Network.framework through the

00:31:32.756 --> 00:31:34.816
NWConnection and NWListener

00:31:34.816 --> 00:31:36.096
objects that give you both

00:31:36.096 --> 00:31:36.976
client and server support.

00:31:39.516 --> 00:31:43.066
[ Applause ]

00:31:43.566 --> 00:31:45.646
With this, you can have a

00:31:45.646 --> 00:31:47.066
message oriented transport

00:31:47.066 --> 00:31:48.826
protocol which can be extended

00:31:48.826 --> 00:31:50.306
for peer-to-peer communication.

00:31:51.646 --> 00:31:53.166
You can also receive partial

00:31:53.166 --> 00:31:54.566
messages by specifying the

00:31:54.566 --> 00:31:56.406
minimum and maximum bytes for a

00:31:56.406 --> 00:31:57.836
give and receive operation.

00:31:58.446 --> 00:32:00.816
To add WebSockets to your

00:32:00.816 --> 00:32:02.416
network frame of objects, you

00:32:02.416 --> 00:32:04.556
can simply create a parameters

00:32:04.556 --> 00:32:06.156
object with TLS enabled on it.

00:32:07.066 --> 00:32:09.686
Next, create a websocketOptions

00:32:09.956 --> 00:32:11.766
and set it on the default

00:32:11.766 --> 00:32:12.676
protocol stack of the

00:32:12.676 --> 00:32:12.966
parameters.

00:32:15.506 --> 00:32:16.766
Once you create the parameters,

00:32:17.196 --> 00:32:18.516
next you can pass in these

00:32:18.516 --> 00:32:20.206
parameters to the NWConnection

00:32:20.206 --> 00:32:21.886
constructor to create an

00:32:21.886 --> 00:32:22.916
NWConnection object.

00:32:23.826 --> 00:32:24.836
Or if you're looking to create a

00:32:24.836 --> 00:32:26.196
listener, just pass these

00:32:26.196 --> 00:32:27.506
parameters to the constructor of

00:32:27.506 --> 00:32:28.026
the listener.

00:32:29.446 --> 00:32:31.946
The send and receive APIs remain

00:32:31.946 --> 00:32:34.156
unchanged from last year and you

00:32:34.156 --> 00:32:36.346
can continue using those to send

00:32:36.346 --> 00:32:37.976
and receive WebSocket messages.

00:32:42.046 --> 00:32:43.156
Now, let's take a look at

00:32:43.156 --> 00:32:44.366
WebSockets in action.

00:32:44.976 --> 00:32:47.166
I'm going to build upon the

00:32:47.166 --> 00:32:48.476
application that Guoye just

00:32:48.476 --> 00:32:51.276
showed you, PubSocket, but I

00:32:51.276 --> 00:32:52.496
want to change the business

00:32:52.496 --> 00:32:54.406
model of PubSocket slightly.

00:32:54.876 --> 00:32:57.836
The price of items is now going

00:32:57.836 --> 00:33:00.076
to be dynamic and will change on

00:33:00.076 --> 00:33:00.486
demand.

00:33:01.266 --> 00:33:02.686
So, think about a stock market,

00:33:02.686 --> 00:33:05.126
but for food and drinks.

00:33:05.886 --> 00:33:06.896
So, on the left-hand side you

00:33:06.896 --> 00:33:08.366
see PubServer, which is the

00:33:08.366 --> 00:33:09.936
application that the bartender

00:33:09.936 --> 00:33:11.316
sees where they can edit the

00:33:11.316 --> 00:33:12.906
items or make changes to the

00:33:12.966 --> 00:33:13.246
price.

00:33:14.286 --> 00:33:15.286
On the right-hand side is the

00:33:15.326 --> 00:33:16.396
pub menu that we've already

00:33:16.396 --> 00:33:17.886
seen, which is the application

00:33:17.886 --> 00:33:19.516
that your clients or customers

00:33:19.516 --> 00:33:20.766
walking into the bar can see.

00:33:21.316 --> 00:33:24.096
The new feature with dynamic

00:33:24.096 --> 00:33:25.716
pricing is going to be called

00:33:25.716 --> 00:33:26.826
PubSocket+.

00:33:27.246 --> 00:33:28.096
So, see-- let's see how

00:33:28.096 --> 00:33:29.336
PubSocket+ works with our

00:33:29.336 --> 00:33:30.706
current implementation of server

00:33:30.706 --> 00:33:31.136
and client.

00:33:31.726 --> 00:33:34.966
Let's suppose the bartender

00:33:34.966 --> 00:33:36.476
wants to bump the price of root

00:33:36.476 --> 00:33:39.226
beer to $6.99.

00:33:39.226 --> 00:33:41.126
I click update.

00:33:42.316 --> 00:33:43.826
And now the client has to pull

00:33:43.826 --> 00:33:44.956
down to refresh.

00:33:45.496 --> 00:33:47.836
And once they do that, they get

00:33:47.836 --> 00:33:49.796
the updated price of root beer.

00:33:50.936 --> 00:33:53.096
That's OK, but I'm sure we could

00:33:53.096 --> 00:33:53.956
do better than this.

00:33:54.806 --> 00:33:56.856
I want customers of PubSocket+

00:33:56.856 --> 00:33:58.496
to have a seamless experience

00:33:58.706 --> 00:33:59.746
where they don't have to pull

00:33:59.746 --> 00:34:01.856
down to refresh and they can get

00:34:01.856 --> 00:34:02.826
the price changes live.

00:34:03.526 --> 00:34:06.156
Let's see how WebSockets can

00:34:06.156 --> 00:34:07.496
help us achieve this.

00:34:08.025 --> 00:34:11.275
Let's head over to Xcode and

00:34:11.366 --> 00:34:13.476
first I'm going to stop the

00:34:14.525 --> 00:34:18.466
server and the client.

00:34:18.466 --> 00:34:20.775
And let's head over to our

00:34:20.775 --> 00:34:22.576
server where I have an

00:34:22.576 --> 00:34:24.916
NWListener which is acting as my

00:34:24.916 --> 00:34:25.795
TCB server.

00:34:27.156 --> 00:34:29.016
Here I have some parameters that

00:34:29.016 --> 00:34:30.565
I've created with TLS options

00:34:30.565 --> 00:34:31.096
set on them.

00:34:32.156 --> 00:34:32.966
First, I'm going to make a

00:34:32.966 --> 00:34:35.416
change here to create some

00:34:35.416 --> 00:34:37.856
WebSocket options and set it on

00:34:37.856 --> 00:34:39.226
the protocol stack of the

00:34:39.226 --> 00:34:39.966
parameters.

00:34:40.856 --> 00:34:43.876
This tells my server how to do a

00:34:43.876 --> 00:34:45.716
WebSocket handshake with clients

00:34:45.755 --> 00:34:46.876
that are trying to connect with

00:34:47.456 --> 00:34:47.525
it.

00:34:48.156 --> 00:34:49.985
The next change I would make on

00:34:49.985 --> 00:34:53.056
my server is in this function

00:34:53.056 --> 00:34:55.176
called sendPriceChanges.

00:34:56.306 --> 00:34:58.556
This function is meant to send

00:34:58.556 --> 00:35:00.686
out WebSocket messages to all

00:35:00.686 --> 00:35:01.826
the clients that are connected

00:35:01.826 --> 00:35:04.446
to it each time a price of an

00:35:04.446 --> 00:35:07.146
item changes on the server.

00:35:07.326 --> 00:35:09.216
Currently, I have a send

00:35:09.216 --> 00:35:11.386
implemented with default stream

00:35:11.386 --> 00:35:11.936
context.

00:35:13.056 --> 00:35:15.166
This means that the data that I

00:35:15.166 --> 00:35:17.086
pass to the send method is sent

00:35:17.086 --> 00:35:18.626
out as a bag of bytes on this

00:35:18.626 --> 00:35:20.416
TCB connection and it does not

00:35:20.416 --> 00:35:21.876
have any message framing.

00:35:21.876 --> 00:35:24.496
I'm going to change the context

00:35:24.496 --> 00:35:28.246
here and create a new context

00:35:28.606 --> 00:35:30.826
with some WebSocket metadata

00:35:30.826 --> 00:35:32.876
associated with it.

00:35:32.926 --> 00:35:34.946
Now, this tells my connection to

00:35:34.946 --> 00:35:37.156
send the data as WebSocket

00:35:37.216 --> 00:35:38.296
message frames.

00:35:39.376 --> 00:35:40.586
With these two changes, my

00:35:40.586 --> 00:35:42.456
server should be all set to send

00:35:42.456 --> 00:35:43.906
out WebSocket messages to my

00:35:43.906 --> 00:35:44.266
client.

00:35:45.316 --> 00:35:48.216
Now, let's see-- I can keep the

00:35:48.216 --> 00:35:49.656
server building while we head

00:35:49.656 --> 00:35:50.336
over to the client.

00:35:51.566 --> 00:35:52.956
So, on the client side, I'm

00:35:54.086 --> 00:35:55.086
going to make changes to the

00:35:55.086 --> 00:35:57.546
function connect first; connect

00:35:58.116 --> 00:35:59.086
is going to connect to a new

00:35:59.086 --> 00:36:01.936
server and for that I'm going to

00:36:02.286 --> 00:36:05.316
use URLSessionWebSocketTask I'll

00:36:05.316 --> 00:36:07.686
simply pass in the URL to the

00:36:07.686 --> 00:36:09.836
task and then call resume so I

00:36:09.836 --> 00:36:11.876
can start doing the handshake.

00:36:12.866 --> 00:36:14.266
Once I'm connected, I'm going to

00:36:14.266 --> 00:36:16.436
call readMessage, which will

00:36:16.536 --> 00:36:17.966
receive a message back from the

00:36:17.966 --> 00:36:18.196
server.

00:36:18.196 --> 00:36:20.846
Now, let's see how readMessage

00:36:20.846 --> 00:36:21.646
should be implemented.

00:36:23.156 --> 00:36:26.386
Inside readMessage, I'll call

00:36:26.386 --> 00:36:28.916
receive on the task and pass a

00:36:28.916 --> 00:36:29.866
completion block.

00:36:30.866 --> 00:36:34.276
On the success case, I'll update

00:36:34.276 --> 00:36:36.616
my UI with the price change and

00:36:36.616 --> 00:36:38.046
immediately after that I'll call

00:36:38.046 --> 00:36:39.676
readMessage again so I can read

00:36:39.676 --> 00:36:40.956
the next message coming back

00:36:40.956 --> 00:36:41.696
from the server.

00:36:42.646 --> 00:36:44.166
Once I make these two changes on

00:36:44.166 --> 00:36:45.916
the client, I should be all set

00:36:46.136 --> 00:36:47.806
to connect to my server and

00:36:47.806 --> 00:36:49.246
receive WebSocket messages.

00:36:50.576 --> 00:36:52.656
So, let's run a new server and a

00:36:52.656 --> 00:36:54.386
client to see how they work.

00:36:55.486 --> 00:36:57.406
First I'm going to run my

00:37:00.936 --> 00:37:01.086
server.

00:37:01.276 --> 00:37:02.416
And now our new client reads

00:37:02.486 --> 00:37:04.456
PubSocket+, which has the new

00:37:04.456 --> 00:37:06.836
and improved WebSocket ability.

00:37:07.606 --> 00:37:09.396
Now, let's suppose it's happy

00:37:09.396 --> 00:37:11.156
hour and the bartender wants to

00:37:11.156 --> 00:37:12.516
reduce the price of root beer

00:37:12.676 --> 00:37:14.556
down to $1.99.

00:37:14.556 --> 00:37:16.326
So, let me make that change.

00:37:20.076 --> 00:37:21.756
And I'm going to click update

00:37:22.506 --> 00:37:23.606
and then you can see on the

00:37:23.606 --> 00:37:25.296
client the price got updated

00:37:25.346 --> 00:37:26.396
without the client having to--

00:37:27.516 --> 00:37:29.586
[ Applause ]

00:37:30.086 --> 00:37:32.386
So, for those of you who missed

00:37:32.386 --> 00:37:33.306
it, I'm going to reduce the

00:37:33.306 --> 00:37:34.386
fries to go with that root

00:37:34.386 --> 00:37:35.716
beer-- now that's some happy

00:37:35.716 --> 00:37:35.886
hour.

00:37:36.556 --> 00:37:39.906
And once I click update, you'll

00:37:39.906 --> 00:37:41.586
see the price of fries change on

00:37:41.586 --> 00:37:42.886
the client without me having to

00:37:42.886 --> 00:37:43.426
pull down.

00:37:43.646 --> 00:37:45.926
And I'll do it once again and

00:37:45.926 --> 00:37:47.286
there the price of fries

00:37:47.286 --> 00:37:47.696
changes.

00:37:48.516 --> 00:37:51.746
[ Applause ]

00:37:52.246 --> 00:37:54.166
So, that is WebSockets

00:37:54.386 --> 00:37:55.726
bidirectional communication

00:37:55.726 --> 00:37:57.696
without any HTTP overhead.

00:37:58.916 --> 00:38:00.766
Some of you might be wondering

00:38:00.766 --> 00:38:02.366
what the Stats button on the top

00:38:02.366 --> 00:38:02.926
right is for.

00:38:03.376 --> 00:38:05.216
If I click that, here are some

00:38:05.216 --> 00:38:06.446
new statistics that we are

00:38:06.446 --> 00:38:07.866
collecting through our

00:38:07.866 --> 00:38:09.886
URLSession metrics API.

00:38:11.486 --> 00:38:13.216
Additionally, at the bottom, RTT

00:38:13.216 --> 00:38:15.326
is the round-trip time between

00:38:15.326 --> 00:38:17.006
my client and my server that I'm

00:38:17.006 --> 00:38:19.116
calculating using pings and

00:38:19.116 --> 00:38:20.256
pongs in WebSockets.

00:38:21.126 --> 00:38:22.806
I'm currently using Network Link

00:38:22.806 --> 00:38:24.906
Conditioner to simulate a busy

00:38:24.906 --> 00:38:25.366
bar environment.

00:38:25.366 --> 00:38:26.246
You could use something like

00:38:26.246 --> 00:38:27.396
this to monitor the health of

00:38:27.446 --> 00:38:29.126
your connection between your

00:38:29.126 --> 00:38:29.866
client and server.

00:38:30.886 --> 00:38:31.946
If you are interested in knowing

00:38:31.946 --> 00:38:33.646
more about the new properties

00:38:33.646 --> 00:38:35.966
added to the metrics API or how

00:38:35.966 --> 00:38:37.686
to use Network Link Conditioner,

00:38:37.946 --> 00:38:39.326
please join us for the second

00:38:39.326 --> 00:38:40.836
networking session at 5:00 p.m.

00:38:40.836 --> 00:38:41.116
today.

00:38:42.266 --> 00:38:43.286
Now, let's head back to our

00:38:43.286 --> 00:38:43.736
slides.

00:38:47.496 --> 00:38:49.196
Let's do a quick recap of

00:38:49.286 --> 00:38:51.706
PubSocket+.

00:38:51.886 --> 00:38:53.406
For our server, we used

00:38:53.406 --> 00:38:55.176
NWListener with WebSocket

00:38:55.176 --> 00:38:56.486
options set on the protocol

00:38:56.486 --> 00:38:56.836
stack.

00:38:57.486 --> 00:38:59.846
For a client, we used

00:38:59.846 --> 00:39:01.816
URLSessionWebSocketTask to

00:39:01.816 --> 00:39:03.396
connect to our server and read

00:39:03.396 --> 00:39:04.006
messages.

00:39:04.006 --> 00:39:07.026
For our transport, we used

00:39:07.026 --> 00:39:08.176
bidirectional WebSocket

00:39:08.176 --> 00:39:08.736
messages.

00:39:09.606 --> 00:39:11.076
And finally, the advantage of

00:39:11.106 --> 00:39:12.496
doing everything was

00:39:12.976 --> 00:39:14.556
bidirectional messaging with

00:39:14.556 --> 00:39:18.586
very little HTTP overhead.

00:39:18.706 --> 00:39:20.676
Let's review the APIs available

00:39:20.676 --> 00:39:22.186
for you to add WebSockets to

00:39:22.186 --> 00:39:23.026
your apps today.

00:39:24.256 --> 00:39:26.136
WebKit gives you the ability to

00:39:26.136 --> 00:39:28.266
add WebSockets with the existing

00:39:28.266 --> 00:39:30.556
JavaScript API in your web apps

00:39:30.556 --> 00:39:31.366
and web views.

00:39:31.916 --> 00:39:34.626
New this year,

00:39:34.626 --> 00:39:37.196
URLSessionWebSocketTask built on

00:39:37.196 --> 00:39:39.376
top of Network.framework plugs

00:39:39.376 --> 00:39:40.526
into URLSession.

00:39:41.276 --> 00:39:42.976
It works with your existing

00:39:42.976 --> 00:39:44.666
URLSession configuration objects

00:39:44.896 --> 00:39:46.796
and offers automatic cookie and

00:39:46.796 --> 00:39:47.836
authentication support.

00:39:48.656 --> 00:39:50.896
It also offers a convenient way

00:39:50.896 --> 00:39:52.736
to measure round-trip time using

00:39:52.796 --> 00:39:53.746
ping and pong handling.

00:39:55.606 --> 00:39:56.616
Also new this year,

00:39:56.846 --> 00:39:58.226
WebSocketSupport in

00:39:58.226 --> 00:39:59.686
Network.framework through the

00:39:59.686 --> 00:40:01.546
NWConnection and NWListener

00:40:01.546 --> 00:40:04.086
objects give you both client and

00:40:04.086 --> 00:40:04.836
server support.

00:40:06.046 --> 00:40:07.916
It gives you direct access to

00:40:07.966 --> 00:40:09.706
complete and partial messages,

00:40:10.006 --> 00:40:11.726
including ping and pong frames.

00:40:12.636 --> 00:40:14.076
You can optionally set custom

00:40:14.076 --> 00:40:16.226
headers like cookies or other

00:40:16.226 --> 00:40:17.846
authentication headers through

00:40:17.846 --> 00:40:19.536
the websocketOptions object.

00:40:20.806 --> 00:40:21.916
We are happy to be opening up

00:40:21.916 --> 00:40:23.056
this technology to all

00:40:23.056 --> 00:40:24.656
developers and we're excited to

00:40:24.656 --> 00:40:25.836
see what you do with this.

00:40:26.806 --> 00:40:28.116
Next, I would like to invite

00:40:28.176 --> 00:40:29.776
Christoph to talk about mobility

00:40:29.776 --> 00:40:30.456
improvements.

00:40:31.516 --> 00:40:35.826
[ Applause ]

00:40:36.326 --> 00:40:36.986
>> Thank you, Jiten.

00:40:37.606 --> 00:40:39.276
Hello everyone.

00:40:40.386 --> 00:40:41.766
I am Christoph and I am going to

00:40:41.766 --> 00:40:43.726
show you what mobility

00:40:43.726 --> 00:40:45.526
improvements we did in iOS 13.

00:40:46.986 --> 00:40:50.006
So, users are often experiencing

00:40:50.006 --> 00:40:50.276
this.

00:40:50.556 --> 00:40:51.966
When they are walking out of

00:40:51.966 --> 00:40:53.696
their home, when they are far

00:40:53.696 --> 00:40:54.976
away from their Wi-Fi access

00:40:54.976 --> 00:40:57.476
point, the signal of Wi-Fi gets

00:40:57.476 --> 00:40:59.666
worse and often the applications

00:40:59.666 --> 00:41:00.906
become slower because the

00:41:00.906 --> 00:41:02.876
networking becomes slower as

00:41:02.876 --> 00:41:03.056
well.

00:41:03.736 --> 00:41:04.826
Sometimes the applications

00:41:04.826 --> 00:41:05.576
completely fail.

00:41:06.326 --> 00:41:08.136
And so people have gotten used

00:41:08.136 --> 00:41:08.976
to this that when they are

00:41:08.976 --> 00:41:10.136
walking out of their home they

00:41:10.136 --> 00:41:11.706
just swipe up to the Control

00:41:11.706 --> 00:41:13.546
Center and turn off Wi-Fi.

00:41:14.986 --> 00:41:16.836
Now, I am sure we have all

00:41:16.836 --> 00:41:18.206
experienced this, right?

00:41:19.066 --> 00:41:21.556
So, we want to change this.

00:41:22.326 --> 00:41:23.526
We believe that users should

00:41:23.526 --> 00:41:25.116
never have to turn off Wi-Fi

00:41:25.556 --> 00:41:26.576
when they are walking out of

00:41:26.576 --> 00:41:26.976
their home.

00:41:27.416 --> 00:41:28.056
We believe that your

00:41:28.056 --> 00:41:29.576
applications should just work

00:41:29.576 --> 00:41:31.396
even when Wi-Fi is in a very bad

00:41:31.396 --> 00:41:31.906
condition.

00:41:33.106 --> 00:41:34.536
And I'm sure everybody here in

00:41:34.536 --> 00:41:36.616
this room wants to achieve the

00:41:36.616 --> 00:41:37.136
same goal.

00:41:38.026 --> 00:41:39.746
So, let me show you how we can

00:41:39.746 --> 00:41:39.976
get there.

00:41:44.536 --> 00:41:46.836
This is the way we usually

00:41:46.836 --> 00:41:47.686
represent Wi-Fi.

00:41:48.316 --> 00:41:50.016
We have the Wi-Fi access point

00:41:50.016 --> 00:41:51.586
in the middle, concentric

00:41:51.586 --> 00:41:54.096
circles around it that show how

00:41:54.096 --> 00:41:55.706
the Wi-Fi signal is gradually

00:41:55.706 --> 00:41:57.536
fading away, getting weaker and

00:41:57.536 --> 00:41:59.366
weaker as the phone gets farther

00:41:59.366 --> 00:42:00.166
and farther away.

00:42:01.216 --> 00:42:02.666
In this kind of scenario, it

00:42:02.666 --> 00:42:04.676
would be very simple for a phone

00:42:04.676 --> 00:42:06.216
to decide whether to use Wi-Fi

00:42:06.626 --> 00:42:07.886
or switch over to cell.

00:42:08.656 --> 00:42:11.846
Right? Now, the problem is that

00:42:12.166 --> 00:42:13.526
this kind of representation of

00:42:13.526 --> 00:42:15.716
how Wi-Fi looks is actually very

00:42:15.716 --> 00:42:16.986
far away from reality.

00:42:17.796 --> 00:42:20.386
In reality, it looks more like

00:42:22.216 --> 00:42:22.316
this.

00:42:22.536 --> 00:42:23.856
You have the Wi-Fi access point

00:42:23.856 --> 00:42:25.786
in the middle and then a very

00:42:25.786 --> 00:42:27.636
spotty Wi-Fi signal around it.

00:42:28.556 --> 00:42:29.826
And the spottiness is because of

00:42:29.826 --> 00:42:31.246
the objects in the room are

00:42:31.246 --> 00:42:32.656
interfering with the signal.

00:42:33.316 --> 00:42:35.546
The house, the walls, everything

00:42:35.546 --> 00:42:37.406
is making the Wi-Fi signal a

00:42:37.406 --> 00:42:40.826
very uncertain indicator of the

00:42:40.826 --> 00:42:41.366
quality.

00:42:42.216 --> 00:42:43.766
And a tiny little movement of

00:42:43.766 --> 00:42:45.186
the phone could move the phone

00:42:45.186 --> 00:42:47.046
from a good position to a bad

00:42:47.046 --> 00:42:47.566
position.

00:42:48.486 --> 00:42:49.536
So, for the phone, it's really

00:42:49.536 --> 00:42:51.296
difficult to know whether Wi-Fi

00:42:51.296 --> 00:42:53.196
is still good or bad.

00:42:53.546 --> 00:42:54.576
It might still receive the

00:42:54.576 --> 00:42:56.186
beacons from the access point,

00:42:56.756 --> 00:42:57.636
but the signal might

00:42:57.636 --> 00:42:59.196
nevertheless be too low to

00:42:59.256 --> 00:43:01.576
actually send or receive any

00:43:01.576 --> 00:43:01.916
data.

00:43:03.076 --> 00:43:04.906
So, in this kind of environment,

00:43:05.366 --> 00:43:06.656
the phone needs to decide

00:43:06.866 --> 00:43:08.676
whether to use Wi-Fi or whether

00:43:08.676 --> 00:43:09.246
to use cell.

00:43:10.236 --> 00:43:11.726
It's this uncertainty around the

00:43:11.726 --> 00:43:13.596
Wi-Fi signal that is the whole

00:43:13.596 --> 00:43:15.146
challenge around mobility.

00:43:17.696 --> 00:43:20.936
So, at Apple, we have been aware

00:43:20.936 --> 00:43:22.106
of this problem for quite a

00:43:22.106 --> 00:43:24.526
while and I will show you how in

00:43:24.526 --> 00:43:27.456
the past we have done many steps

00:43:27.456 --> 00:43:28.416
to improve this kind of

00:43:28.416 --> 00:43:28.966
scenario.

00:43:28.966 --> 00:43:32.696
All of it started back in iOS 7

00:43:33.156 --> 00:43:33.706
with Siri.

00:43:36.156 --> 00:43:38.066
In iOS 7, we introduced

00:43:38.066 --> 00:43:39.766
Multipath TCP for Siri.

00:43:40.516 --> 00:43:42.056
Multipath TCP allows to use

00:43:42.056 --> 00:43:43.996
Wi-Fi and cell at the same time.

00:43:44.496 --> 00:43:46.656
So, starting in iOS 7, whenever

00:43:46.716 --> 00:43:48.226
people are using Siri and

00:43:48.226 --> 00:43:49.366
walking out of their home,

00:43:50.276 --> 00:43:52.276
Multipath TCP will make sure

00:43:52.276 --> 00:43:53.426
that the traffic goes either

00:43:53.426 --> 00:43:56.556
Wi-Fi over cell, reducing the

00:43:56.556 --> 00:43:58.846
latency for Siri users and

00:43:58.846 --> 00:44:00.046
reducing the error rates.

00:44:01.316 --> 00:44:03.556
We are seeing great results

00:44:03.776 --> 00:44:05.136
thank to Multipath TCP.

00:44:06.346 --> 00:44:08.656
Now, a real end-to-end multipath

00:44:08.836 --> 00:44:12.376
protocol, like Multipath TCP,

00:44:12.376 --> 00:44:14.466
requires both the client and the

00:44:14.466 --> 00:44:15.896
server to be aware of it.

00:44:16.546 --> 00:44:17.986
Both need to work together,

00:44:18.646 --> 00:44:18.926
right?

00:44:19.236 --> 00:44:20.586
They need to work together to

00:44:20.586 --> 00:44:21.776
decide whether to send the

00:44:21.776 --> 00:44:23.516
traffic on Wi-Fi or on cell.

00:44:24.566 --> 00:44:26.866
And so we asked ourselves how

00:44:26.866 --> 00:44:29.436
can we improve mobility without

00:44:29.436 --> 00:44:31.896
having both the client and the

00:44:31.896 --> 00:44:33.586
server have to work together

00:44:34.436 --> 00:44:36.306
without requiring the need to

00:44:36.356 --> 00:44:37.186
modify the server

00:44:37.186 --> 00:44:38.056
configurations.

00:44:39.366 --> 00:44:41.126
And the answer came two years

00:44:41.126 --> 00:44:42.786
later in iOS 9 with Wi-Fi

00:44:42.786 --> 00:44:43.266
Assist.

00:44:43.796 --> 00:44:47.516
Wi-Fi Assist handles mobility

00:44:47.516 --> 00:44:49.536
for all applications, for all

00:44:49.536 --> 00:44:51.226
flows, talking to any server.

00:44:51.226 --> 00:44:53.986
And the way it does it is by

00:44:53.986 --> 00:44:56.216
first starting on Wi-Fi and when

00:44:56.216 --> 00:44:57.596
the signal is bad and the

00:44:57.596 --> 00:44:59.326
connection doesn't, manages to

00:44:59.326 --> 00:45:00.786
get established quickly enough,

00:45:01.256 --> 00:45:02.406
we will just raise another

00:45:02.406 --> 00:45:05.796
connection over the cellular

00:45:05.866 --> 00:45:06.306
link.

00:45:06.696 --> 00:45:08.406
Since iOS 9, since we are--

00:45:08.406 --> 00:45:09.666
since we introduced Wi-Fi

00:45:09.666 --> 00:45:11.456
Assist, all of your applications

00:45:12.176 --> 00:45:13.506
that are using the high-level

00:45:13.506 --> 00:45:14.976
APIs can benefit from Wi-Fi

00:45:14.976 --> 00:45:17.566
Assist and are having a much

00:45:17.606 --> 00:45:18.876
better experience when the user

00:45:18.876 --> 00:45:19.346
is mobile.

00:45:19.346 --> 00:45:21.916
And this works for any server

00:45:22.246 --> 00:45:24.306
talking to any servers on the

00:45:24.306 --> 00:45:24.726
internet.

00:45:26.626 --> 00:45:28.186
Now, Wi-Fi Assist might still

00:45:28.186 --> 00:45:30.276
get stuck on Wi-Fi, if for

00:45:30.276 --> 00:45:31.556
example the connection managed

00:45:31.556 --> 00:45:33.286
to get established, but then the

00:45:33.286 --> 00:45:34.966
signal degraded afterwards.

00:45:35.426 --> 00:45:37.256
And those flows would then still

00:45:37.256 --> 00:45:37.676
be stuck.

00:45:38.156 --> 00:45:39.416
In order to handle those kind of

00:45:39.416 --> 00:45:42.016
scenarios better, one still

00:45:42.016 --> 00:45:43.856
needs real end-to-end multipath,

00:45:44.306 --> 00:45:45.496
the same way as we have it for

00:45:45.496 --> 00:45:45.836
Siri.

00:45:46.766 --> 00:45:48.466
So, after four years of

00:45:48.466 --> 00:45:52.096
experience with Multipath TCP

00:45:52.096 --> 00:45:54.616
for Siri, we decided to open up

00:45:54.616 --> 00:45:55.736
the API for every one of you.

00:45:56.616 --> 00:45:58.776
So, since iOS 11, you can start

00:45:58.776 --> 00:46:00.616
using the handover or

00:46:00.616 --> 00:46:02.886
interactive mode in URLSession

00:46:03.276 --> 00:46:04.336
or the Network.framework.

00:46:05.426 --> 00:46:07.076
So, when you are able to make

00:46:07.076 --> 00:46:07.976
sure that your servers are

00:46:07.976 --> 00:46:09.946
ready, you can enable Multipath

00:46:09.946 --> 00:46:11.626
TCP and get the same benefits as

00:46:11.626 --> 00:46:11.966
Siri.

00:46:13.456 --> 00:46:15.836
So, in each of those releases,

00:46:16.036 --> 00:46:19.596
iOS 7, iOS 9, iOS 11, we focused

00:46:19.596 --> 00:46:21.786
on one specific area to improve

00:46:21.786 --> 00:46:22.366
mobility.

00:46:23.876 --> 00:46:25.736
We focused on Multipath TCP, we

00:46:25.736 --> 00:46:27.526
focused on Siri, we focused on

00:46:27.526 --> 00:46:28.416
Wi-Fi Assist.

00:46:29.356 --> 00:46:31.166
And now comes iOS 13.

00:46:32.326 --> 00:46:34.906
And in iOS 13, we improved so

00:46:34.906 --> 00:46:36.986
many things they don't even fit

00:46:36.986 --> 00:46:38.116
on this slide anymore.

00:46:40.086 --> 00:46:43.436
In iOS 13, the mobility

00:46:43.436 --> 00:46:44.976
improvements-- thank you.

00:46:45.516 --> 00:46:48.276
[ Applause ]

00:46:48.776 --> 00:46:49.146
Thank you.

00:46:49.276 --> 00:46:50.866
In iOS 13, the mobility

00:46:50.866 --> 00:46:52.276
improvements go throughout the

00:46:52.276 --> 00:46:52.966
whole system.

00:46:53.756 --> 00:46:55.206
Many different frameworks,

00:46:55.316 --> 00:46:57.626
daemons, applications, from the

00:46:57.626 --> 00:46:59.016
firmware to the driver.

00:46:59.696 --> 00:47:01.656
Everything is now improved for

00:47:01.656 --> 00:47:02.226
mobility.

00:47:02.546 --> 00:47:04.256
And in this part of the session,

00:47:04.436 --> 00:47:05.836
I am going to talk about two of

00:47:05.836 --> 00:47:08.206
them; Wi-Fi Assist and Multipath

00:47:08.206 --> 00:47:09.526
Transports.

00:47:10.816 --> 00:47:13.716
So, first up, Wi-Fi Assist.

00:47:14.636 --> 00:47:16.746
Traditionally, Wi-Fi assist has

00:47:16.746 --> 00:47:18.656
only been taking very limited

00:47:18.656 --> 00:47:20.356
amount of information into

00:47:20.356 --> 00:47:22.536
account to decide whether Wi-Fi

00:47:22.536 --> 00:47:23.266
is good enough.

00:47:24.376 --> 00:47:26.596
Now in iOS 13, we changed that.

00:47:27.946 --> 00:47:30.046
We made it such that all

00:47:30.046 --> 00:47:31.766
components in the system are

00:47:31.766 --> 00:47:33.476
providing information into Wi-Fi

00:47:33.476 --> 00:47:35.526
Assist so that Wi-Fi Assist has

00:47:35.526 --> 00:47:36.926
a full cross-layer mobility

00:47:36.926 --> 00:47:37.396
detection.

00:47:38.526 --> 00:47:40.316
The lower layers, Wi-Fi and

00:47:40.316 --> 00:47:41.716
cell, are providing information

00:47:41.716 --> 00:47:43.656
about the signal quality in a

00:47:43.656 --> 00:47:45.256
much fine-- more fine-grained

00:47:45.256 --> 00:47:47.236
way than in iOS 12.

00:47:48.306 --> 00:47:49.526
And also, the higher-layer

00:47:49.626 --> 00:47:50.476
frameworks like

00:47:50.616 --> 00:47:52.596
Network.framework, URLSession,

00:47:53.116 --> 00:47:54.516
other daemons of the system,

00:47:54.736 --> 00:47:55.596
they are all providing

00:47:55.596 --> 00:47:57.166
information into Wi-Fi Assist

00:47:57.636 --> 00:47:59.266
about how their flows are making

00:47:59.266 --> 00:47:59.826
progress.

00:48:00.666 --> 00:48:02.796
All of this information going

00:48:02.796 --> 00:48:04.206
into Wi-Fi Assist will then

00:48:04.206 --> 00:48:06.136
allow it to detect whether we

00:48:06.136 --> 00:48:08.076
are in a mobility scenario or

00:48:08.076 --> 00:48:09.526
not and whether we should maybe

00:48:09.526 --> 00:48:10.796
start trying to use cell.

00:48:11.776 --> 00:48:13.416
So, all of this information,

00:48:13.746 --> 00:48:15.086
then Wi-Fi Assist is going to

00:48:15.086 --> 00:48:17.786
take its decisions and feeds it

00:48:17.786 --> 00:48:19.106
back into the system.

00:48:19.546 --> 00:48:21.326
It tells the lower layers, Wi-Fi

00:48:21.326 --> 00:48:23.106
and cell, to make efforts to

00:48:23.106 --> 00:48:24.346
improve the signal quality.

00:48:25.246 --> 00:48:27.046
And it also communicates to the

00:48:27.046 --> 00:48:27.936
other layers like

00:48:28.406 --> 00:48:29.986
Network.framework and URLSession

00:48:30.076 --> 00:48:31.406
to start recovering flows.

00:48:31.406 --> 00:48:34.946
All of this leads to a much

00:48:34.946 --> 00:48:36.306
improved flow recovery.

00:48:37.796 --> 00:48:39.896
Now, even when a flow has

00:48:39.896 --> 00:48:40.886
already been established on

00:48:40.886 --> 00:48:42.416
Wi-Fi and has started to

00:48:42.416 --> 00:48:44.936
exchange data, if later on the

00:48:44.936 --> 00:48:47.636
signal quality is reducing, we

00:48:47.636 --> 00:48:49.466
are able to move the next

00:48:49.466 --> 00:48:50.786
request that would have been

00:48:50.786 --> 00:48:53.396
used on Wi-Fi, we are able to

00:48:53.396 --> 00:48:54.796
move that one over to cell.

00:48:55.796 --> 00:48:57.476
So, your applications should now

00:48:57.476 --> 00:48:59.246
much less be getting stuck on

00:48:59.246 --> 00:48:59.686
Wi-Fi.

00:49:00.286 --> 00:49:03.306
Now, the question for you, of

00:49:03.306 --> 00:49:04.976
course, is how can you get the

00:49:04.976 --> 00:49:06.676
benefits from Wi-Fi Assist?

00:49:07.236 --> 00:49:08.366
How can you get the benefits

00:49:08.366 --> 00:49:09.536
from all the improvements that

00:49:09.536 --> 00:49:10.886
we did in iOS 13?

00:49:12.346 --> 00:49:14.756
So, first of all, the way you

00:49:14.756 --> 00:49:16.096
can get them is by using the

00:49:16.096 --> 00:49:18.356
high-level APIs like URLSession

00:49:18.356 --> 00:49:19.306
and Network.framework.

00:49:20.206 --> 00:49:22.276
All of these APIs have been

00:49:22.276 --> 00:49:23.886
built with Wi-Fi Assist in mind

00:49:24.846 --> 00:49:25.746
and they are getting the full

00:49:25.746 --> 00:49:26.586
benefit from it.

00:49:27.396 --> 00:49:28.656
So, make sure that your

00:49:28.656 --> 00:49:30.906
applications are using those

00:49:32.526 --> 00:49:32.656
APIs.

00:49:33.706 --> 00:49:36.966
Next up, some of you are doing

00:49:36.966 --> 00:49:39.566
active interface management with

00:49:39.566 --> 00:49:41.896
APIs like SCNetworkReachability.

00:49:42.686 --> 00:49:43.996
You are maybe doing pre-flight

00:49:43.996 --> 00:49:45.896
checks to know where is your

00:49:46.016 --> 00:49:47.506
request going to end up on.

00:49:47.506 --> 00:49:49.156
Is it going to go on Wi-Fi or on

00:49:49.156 --> 00:49:49.476
cell?

00:49:50.606 --> 00:49:51.666
The problem with those

00:49:51.666 --> 00:49:53.766
pre-flight checks is that when

00:49:53.766 --> 00:49:55.906
you do it and the moment when

00:49:55.906 --> 00:49:57.326
you actually use the connection,

00:49:58.816 --> 00:49:59.716
the interface might have

00:49:59.776 --> 00:50:00.196
changed.

00:50:00.316 --> 00:50:02.136
Wi-Fi Assist might have decided

00:50:02.136 --> 00:50:03.396
to actually send your flow over

00:50:03.396 --> 00:50:05.256
to cell or Wi-Fi might have

00:50:05.346 --> 00:50:06.456
significantly improved.

00:50:06.946 --> 00:50:08.806
So, the pre-flight check is a

00:50:08.806 --> 00:50:10.636
very bad indicator of where your

00:50:10.636 --> 00:50:11.966
flow is going to end up on.

00:50:12.506 --> 00:50:14.696
So, we encourage you to rethink

00:50:14.696 --> 00:50:16.166
your usage of the pre-flight

00:50:16.166 --> 00:50:18.796
checks and come talk to us later

00:50:18.796 --> 00:50:20.326
in the labs about why you need

00:50:20.326 --> 00:50:22.286
it and we will work with you to

00:50:22.286 --> 00:50:24.246
find an alternative.

00:50:25.806 --> 00:50:28.656
Now, if you still need to steer

00:50:28.756 --> 00:50:30.316
flows, for example, away from

00:50:30.316 --> 00:50:32.216
cell because, for example, the

00:50:32.216 --> 00:50:34.936
data transfer is way too big or

00:50:34.936 --> 00:50:36.966
the traffic is not critical for

00:50:36.966 --> 00:50:39.146
the user experience, you can use

00:50:39.146 --> 00:50:40.206
helpers like

00:50:40.296 --> 00:50:42.396
allowsExpensiveNetworkAccess and

00:50:42.396 --> 00:50:43.346
set them to false.

00:50:43.946 --> 00:50:46.116
That way, your request is not

00:50:46.116 --> 00:50:47.956
going to go on the cellular

00:50:48.416 --> 00:50:48.546
link.

00:50:50.176 --> 00:50:53.076
So, this is Wi-Fi Assist and we

00:50:53.076 --> 00:50:54.486
made a lot of efforts to make it

00:50:54.486 --> 00:50:56.616
even better in iOS 13 and you

00:50:56.616 --> 00:50:59.066
can get the benefits by using

00:50:59.066 --> 00:51:01.356
the high-level APIs.

00:51:01.356 --> 00:51:02.856
This brings me to the next one,

00:51:03.186 --> 00:51:04.696
which is Multipath Transports.

00:51:07.296 --> 00:51:09.716
Siri has been using it for quite

00:51:09.716 --> 00:51:10.306
a while now.

00:51:10.676 --> 00:51:12.366
We have opened up the API two

00:51:12.366 --> 00:51:15.416
years ago and we have encouraged

00:51:15.416 --> 00:51:18.336
you to look into your apps and

00:51:18.336 --> 00:51:19.776
see which of your flows might

00:51:19.776 --> 00:51:22.966
benefit the most from Multipath

00:51:23.616 --> 00:51:23.716
TCP.

00:51:23.926 --> 00:51:26.326
So, this year in iOS 13, we ran

00:51:26.326 --> 00:51:27.946
this well and looked into our

00:51:27.946 --> 00:51:31.246
own apps and decided to see

00:51:31.556 --> 00:51:33.126
which one is going to benefit

00:51:33.126 --> 00:51:34.266
from Multipath TCP.

00:51:34.936 --> 00:51:36.196
Which one is often used when

00:51:36.196 --> 00:51:37.736
mobile and has a very critical

00:51:37.736 --> 00:51:39.046
flow for the user experience

00:51:39.046 --> 00:51:40.206
that is hard to recover?

00:51:41.256 --> 00:51:43.266
Well, one application is Apple

00:51:43.266 --> 00:51:43.796
Maps.

00:51:44.576 --> 00:51:46.306
Most users, well, when they are

00:51:46.306 --> 00:51:47.666
getting their directions, they

00:51:47.666 --> 00:51:48.816
are walking out of their home

00:51:49.336 --> 00:51:50.526
and they are using search.

00:51:50.956 --> 00:51:53.226
So, in iOS 13, we enabled

00:51:53.226 --> 00:51:54.976
Multipath TCP for Apple Maps.

00:51:55.516 --> 00:51:59.716
[ Applause ]

00:52:00.216 --> 00:52:01.806
Now, whenever you are walking

00:52:01.806 --> 00:52:03.576
out of the home and using Maps,

00:52:03.876 --> 00:52:05.846
looking up your directions,

00:52:05.916 --> 00:52:07.346
trying to search a restaurant,

00:52:08.266 --> 00:52:10.016
MP TCP will be used and move

00:52:10.016 --> 00:52:11.316
your flow over from Wi-Fi to

00:52:11.316 --> 00:52:11.616
cell.

00:52:12.456 --> 00:52:14.666
And since Monday, since the

00:52:14.666 --> 00:52:15.836
first beta, we have been

00:52:15.836 --> 00:52:17.846
enabling it and we are going to

00:52:17.846 --> 00:52:19.506
see a much better responsiveness

00:52:19.506 --> 00:52:20.286
for Apple Maps.

00:52:22.086 --> 00:52:24.386
The next one where we are having

00:52:24.386 --> 00:52:26.666
a very critical user experience

00:52:27.326 --> 00:52:29.236
and that is also often used when

00:52:29.236 --> 00:52:30.916
walking out of the home is when

00:52:30.916 --> 00:52:31.856
you are streaming music.

00:52:32.416 --> 00:52:33.616
Right? When you are streaming

00:52:33.616 --> 00:52:34.796
music, you are downloading a

00:52:34.796 --> 00:52:38.006
large file full of music content

00:52:38.326 --> 00:52:40.286
and you don't want this music to

00:52:40.286 --> 00:52:40.696
stall.

00:52:41.116 --> 00:52:42.286
Because when it stalls, the user

00:52:42.286 --> 00:52:43.646
will be disrupted.

00:52:44.616 --> 00:52:46.836
So, since iOS 13, we enabled

00:52:46.836 --> 00:52:48.716
Multipath TCP for Apple Music.

00:52:49.516 --> 00:52:53.866
[ Applause ]

00:52:54.366 --> 00:52:56.026
We are seeing much less music

00:52:56.026 --> 00:52:58.616
streaming stalls because MP TCP

00:52:58.616 --> 00:53:00.596
is now moving flows over to cell

00:53:00.846 --> 00:53:02.206
whenever we are getting close to

00:53:02.206 --> 00:53:02.806
stalling.

00:53:03.616 --> 00:53:05.466
And so the user is going to have

00:53:05.466 --> 00:53:06.666
a much better experience.

00:53:07.266 --> 00:53:09.916
Now, the thing about this, we

00:53:09.916 --> 00:53:11.816
have enabled it for Siri, Maps,

00:53:11.876 --> 00:53:14.316
and Music, and you can do this

00:53:14.316 --> 00:53:14.576
too.

00:53:15.646 --> 00:53:17.536
We recommend-- we encourage you

00:53:17.536 --> 00:53:19.146
to look into your applications.

00:53:19.286 --> 00:53:20.566
Which one is often used when

00:53:20.566 --> 00:53:21.646
walking out of the home?

00:53:22.516 --> 00:53:24.746
Which one has a very critical

00:53:24.746 --> 00:53:26.266
flow that is critical for the

00:53:26.266 --> 00:53:27.676
user experience and that is hard

00:53:27.676 --> 00:53:28.256
to recover?

00:53:29.146 --> 00:53:30.376
Those kind of flows, they are

00:53:30.376 --> 00:53:31.676
perfect for the multipath

00:53:31.676 --> 00:53:33.316
service type and you can choose

00:53:33.316 --> 00:53:35.056
them on handover or interactive

00:53:35.516 --> 00:53:36.736
in the URLSession and

00:53:36.736 --> 00:53:37.516
Network.framework.

00:53:38.696 --> 00:53:40.966
Now, don't forget, if you do

00:53:40.966 --> 00:53:42.596
enter in multipath, it still

00:53:42.596 --> 00:53:44.446
requires both the client and the

00:53:44.446 --> 00:53:47.046
server to work together, so go

00:53:47.046 --> 00:53:49.076
and visit this URL to make sure

00:53:49.076 --> 00:53:50.306
that your servers are configured

00:53:50.306 --> 00:53:50.776
correctly.

00:53:52.796 --> 00:53:56.566
So, this brings me to the end of

00:53:56.626 --> 00:53:58.136
the mobility part of this

00:53:58.136 --> 00:53:58.466
session.

00:53:59.976 --> 00:54:01.146
If there is one thing that we

00:54:01.146 --> 00:54:02.866
want you to remember, it's that

00:54:03.626 --> 00:54:05.886
whenever a user is walking out

00:54:05.886 --> 00:54:07.586
of their home, he should not

00:54:07.676 --> 00:54:09.256
have a bad experience and turn

00:54:09.256 --> 00:54:09.846
off Wi-Fi.

00:54:10.786 --> 00:54:13.416
So, when you are developing your

00:54:13.416 --> 00:54:14.666
applications, when you are

00:54:14.666 --> 00:54:16.716
testing them and you are

00:54:16.716 --> 00:54:19.336
configuring a bad Wi-Fi network

00:54:19.336 --> 00:54:20.316
and you are walking out of the

00:54:20.316 --> 00:54:22.266
home while testing it, don't

00:54:22.266 --> 00:54:23.416
expect your applications to

00:54:23.416 --> 00:54:25.556
become slow, to fail, or your

00:54:25.556 --> 00:54:28.746
flows to basically-- to take

00:54:28.746 --> 00:54:29.156
forever.

00:54:29.916 --> 00:54:31.256
It should, in principle, just

00:54:31.256 --> 00:54:31.476
work.

00:54:31.956 --> 00:54:33.996
If it doesn't, make sure that

00:54:33.996 --> 00:54:35.106
those flows that have been

00:54:35.106 --> 00:54:37.266
failing are using the high-level

00:54:37.586 --> 00:54:37.736
APIs.

00:54:38.026 --> 00:54:39.356
These APIs are getting the full

00:54:39.356 --> 00:54:41.356
benefit from Wi-Fi Assist from

00:54:41.356 --> 00:54:42.856
all the improvements that we did

00:54:42.856 --> 00:54:43.806
in iOS 13.

00:54:44.376 --> 00:54:46.576
If you are doing active

00:54:46.606 --> 00:54:48.826
interface management, come talk

00:54:48.826 --> 00:54:50.726
to us in the lab or send us an

00:54:50.726 --> 00:54:51.726
Apple Bug Report.

00:54:52.296 --> 00:54:53.846
Tell us about your use case and

00:54:53.846 --> 00:54:55.086
we will work together with you

00:54:55.086 --> 00:54:57.056
to find an alternative so that

00:54:57.516 --> 00:55:00.226
you can avoid doing this active

00:55:00.226 --> 00:55:01.736
interface management and get the

00:55:01.736 --> 00:55:03.666
full benefits from Wi-Fi assist.

00:55:04.206 --> 00:55:07.026
And, finally, if you have flows

00:55:07.026 --> 00:55:08.146
that are still getting stuck on

00:55:08.146 --> 00:55:09.826
Wi-Fi and that are hard to

00:55:09.826 --> 00:55:12.756
recover, try to see if you can

00:55:12.756 --> 00:55:14.266
start using a multipath service

00:55:14.266 --> 00:55:16.006
type, get your servers ready,

00:55:16.006 --> 00:55:17.956
and get the same benefits as

00:55:17.956 --> 00:55:20.056
Apple Music, Maps, and Siri.

00:55:20.556 --> 00:55:22.506
So, this is the end of this part

00:55:22.506 --> 00:55:23.186
of the session.

00:55:24.126 --> 00:55:25.336
We have seen that with the Low

00:55:25.336 --> 00:55:28.196
Data Mode users can now turn on

00:55:28.196 --> 00:55:29.816
marked networks so that they

00:55:29.816 --> 00:55:31.706
reduce the data usage on those

00:55:31.706 --> 00:55:32.206
networks.

00:55:32.696 --> 00:55:34.906
We have exposed a new API so

00:55:34.906 --> 00:55:36.616
that your applications can

00:55:36.616 --> 00:55:37.726
benefit from it as well.

00:55:38.276 --> 00:55:41.246
If you are building a publisher

00:55:41.246 --> 00:55:43.036
subscriber style application,

00:55:43.766 --> 00:55:45.496
Combine in URLSession allows you

00:55:45.496 --> 00:55:47.136
to build you a very elegant app,

00:55:47.746 --> 00:55:49.386
the same way as Guoye has shown

00:55:49.386 --> 00:55:49.936
you today.

00:55:50.676 --> 00:55:52.706
Finally, WebSockets.

00:55:53.106 --> 00:55:54.366
It has been the most requested

00:55:54.406 --> 00:55:57.026
feature is making it into iOS 13

00:55:57.596 --> 00:55:59.396
and so you can easily build

00:55:59.396 --> 00:56:01.066
two-way communications into your

00:56:01.066 --> 00:56:01.876
applications.

00:56:02.436 --> 00:56:05.996
And, in iOS 13, we did a huge

00:56:05.996 --> 00:56:08.486
push to improve the mobility for

00:56:08.636 --> 00:56:11.306
your applications so you can get

00:56:11.306 --> 00:56:12.986
the same benefits by using the

00:56:12.986 --> 00:56:14.746
high-level APIs.

00:56:15.816 --> 00:56:18.796
So, later this afternoon, there

00:56:18.796 --> 00:56:20.446
is a part two of the Advances in

00:56:20.446 --> 00:56:21.346
Networking session.

00:56:21.836 --> 00:56:23.216
You will be seeing more exciting

00:56:23.216 --> 00:56:25.396
new APIs that will benefit your

00:56:25.396 --> 00:56:26.016
applications.

00:56:26.836 --> 00:56:28.216
Tomorrow, for those among you

00:56:28.216 --> 00:56:30.496
that are developing on macOS,

00:56:30.906 --> 00:56:32.466
there are new APIs for network

00:56:32.466 --> 00:56:35.046
extensions, and we also have the

00:56:35.046 --> 00:56:36.636
lab at 9:00 a.m. starting at

00:56:36.636 --> 00:56:38.016
9:00 a.m. tomorrow and you can

00:56:38.016 --> 00:56:39.626
come there to ask us questions

00:56:40.086 --> 00:56:41.586
and we will be very happy to

00:56:41.586 --> 00:56:44.006
help you out.

00:56:44.286 --> 00:56:45.676
So, this is the end.

00:56:45.776 --> 00:56:46.986
I hope you had fun and you

00:56:46.986 --> 00:56:47.906
enjoyed the session.

00:56:50.046 --> 00:56:50.516
Thank you very much.

00:56:51.508 --> 00:56:53.508
[ Applause ]