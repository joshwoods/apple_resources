WEBVTT

00:00:01.516 --> 00:00:08.516
[ Music ]

00:00:09.516 --> 00:00:12.546
[ Applause ]

00:00:13.046 --> 00:00:13.886
>> Good afternoon, everyone, and

00:00:14.056 --> 00:00:15.106
thanks for joining us today.

00:00:16.065 --> 00:00:17.416
I'm Garrett, and I work on the

00:00:17.416 --> 00:00:18.656
Trust and Execution Team here at

00:00:18.656 --> 00:00:20.236
Apple and today we're here to

00:00:20.236 --> 00:00:21.756
talk All About Notarization.

00:00:22.276 --> 00:00:25.066
Here's a quick agenda for the

00:00:25.066 --> 00:00:25.346
talk.

00:00:25.346 --> 00:00:26.516
We're going to start with a

00:00:26.516 --> 00:00:27.656
brief overview of what

00:00:27.656 --> 00:00:29.046
notarization is and some of the

00:00:29.046 --> 00:00:30.006
benefits that it provides.

00:00:30.986 --> 00:00:31.776
Then we're going to talk about

00:00:31.776 --> 00:00:33.076
the application requirements to

00:00:33.076 --> 00:00:34.466
get your software notarized.

00:00:35.336 --> 00:00:36.256
And then finally we'll run

00:00:36.256 --> 00:00:38.156
through the workflows and tools

00:00:38.226 --> 00:00:40.086
you'll need to use to notarize

00:00:40.086 --> 00:00:40.656
your software.

00:00:43.616 --> 00:00:44.666
So let's get started.

00:00:45.196 --> 00:00:46.746
What exactly is notarization?

00:00:47.666 --> 00:00:50.136
Well, it's a process that we

00:00:50.136 --> 00:00:52.356
introduced last year at WWDC to

00:00:52.746 --> 00:00:54.106
help identify and block

00:00:54.366 --> 00:00:56.086
malicious software prior to

00:00:56.086 --> 00:00:56.666
distribution.

00:00:57.326 --> 00:00:59.346
Now it's an extension of the

00:00:59.346 --> 00:01:00.906
Developer ID Program, which

00:01:00.906 --> 00:01:01.676
means that you don't need to

00:01:01.676 --> 00:01:02.936
register for anything different

00:01:03.586 --> 00:01:04.796
or use different certificates

00:01:05.786 --> 00:01:07.236
which also means that you stay

00:01:07.236 --> 00:01:08.986
in control of signing and

00:01:08.986 --> 00:01:10.366
distribution of your software

00:01:10.696 --> 00:01:11.736
just like you did before

00:01:11.736 --> 00:01:12.886
notarization was introduced.

00:01:15.606 --> 00:01:17.396
The key to this is the Notary

00:01:17.396 --> 00:01:19.826
Service which performs automated

00:01:19.826 --> 00:01:22.136
security checks on Developer ID

00:01:22.136 --> 00:01:22.966
signed content.

00:01:23.546 --> 00:01:25.816
So let's run through a little

00:01:25.816 --> 00:01:26.926
bit about what the workflow

00:01:26.926 --> 00:01:28.426
looks like when you need to

00:01:28.426 --> 00:01:29.646
start notarizing your software

00:01:29.646 --> 00:01:30.306
for the first time.

00:01:32.216 --> 00:01:33.816
Here's a diagram that talks a

00:01:33.816 --> 00:01:34.706
little bit about what the

00:01:34.706 --> 00:01:35.696
development workflow can look

00:01:35.696 --> 00:01:37.636
like and local development

00:01:37.856 --> 00:01:39.266
remains completely unchanged.

00:01:39.966 --> 00:01:41.366
You build and sign at your desk

00:01:41.576 --> 00:01:42.656
using your Apple Developer

00:01:42.656 --> 00:01:44.526
Certificates until you have a

00:01:44.526 --> 00:01:45.236
release candidate.

00:01:45.776 --> 00:01:48.816
At that point you sign the

00:01:48.816 --> 00:01:50.196
software with your Developer ID

00:01:50.196 --> 00:01:52.166
Certificate and you can send a

00:01:52.166 --> 00:01:53.486
copy of it to the Apple Notary

00:01:53.486 --> 00:01:55.536
Service for notarization.

00:01:56.726 --> 00:01:58.376
When notarization is complete

00:01:58.506 --> 00:02:00.346
and successful, the Notary

00:02:00.346 --> 00:02:02.076
Service can send back a ticket

00:02:02.846 --> 00:02:03.726
which you staple to your

00:02:03.726 --> 00:02:05.696
software prior to distribution

00:02:06.266 --> 00:02:09.045
and once it's stapled, the

00:02:09.045 --> 00:02:09.806
software is ready for

00:02:09.806 --> 00:02:11.396
distribution just like you did

00:02:11.396 --> 00:02:11.746
before.

00:02:14.066 --> 00:02:15.746
Now it's worth calling out that

00:02:16.046 --> 00:02:17.256
this workflow didn't change at

00:02:17.256 --> 00:02:18.326
all from last year so this is

00:02:18.326 --> 00:02:19.296
just a bit of a refresher.

00:02:19.946 --> 00:02:22.816
Now what we didn't talk about

00:02:22.816 --> 00:02:24.446
last year was what happens when

00:02:24.446 --> 00:02:25.776
someone downloads your software

00:02:25.776 --> 00:02:26.996
and uses it for the first time.

00:02:28.426 --> 00:02:29.406
So when a user downloads your

00:02:29.406 --> 00:02:30.426
stapled software and

00:02:31.006 --> 00:02:32.096
double-click it to launch it,

00:02:32.556 --> 00:02:33.986
the gatekeeper will perform a

00:02:33.986 --> 00:02:34.716
verification.

00:02:35.966 --> 00:02:37.616
It'll check the local ticket and

00:02:37.616 --> 00:02:38.706
it will also reach out to the

00:02:38.706 --> 00:02:41.066
Notary Service via CloudKit to

00:02:41.066 --> 00:02:42.006
check for a ticket also.

00:02:42.906 --> 00:02:44.246
As long as the ticket checks out

00:02:44.246 --> 00:02:45.456
and the ticket matches the

00:02:45.456 --> 00:02:47.586
content of your app, gatekeeper

00:02:47.586 --> 00:02:48.696
will allow the application and

00:02:49.096 --> 00:02:50.076
the user will see the normal

00:02:50.076 --> 00:02:50.876
first launch prompt.

00:02:52.096 --> 00:02:53.746
Now I want to remind everyone

00:02:54.296 --> 00:02:56.466
that notarization is not an app

00:02:56.466 --> 00:02:56.746
review.

00:02:57.706 --> 00:02:59.186
The Notary Service performs a

00:02:59.186 --> 00:03:00.386
set of automated security

00:03:01.246 --> 00:03:01.366
checks.

00:03:03.016 --> 00:03:05.866
Now last year we made a goal to

00:03:05.866 --> 00:03:07.276
get most responses back from the

00:03:07.276 --> 00:03:08.586
Notary Service within an hour

00:03:10.026 --> 00:03:11.026
and it actually turns out that

00:03:11.026 --> 00:03:13.616
over the last year 99% of

00:03:13.616 --> 00:03:15.306
submissions have had an answer

00:03:15.306 --> 00:03:17.376
back within 15 minutes.

00:03:18.636 --> 00:03:20.486
Also, the status of the Notary

00:03:20.486 --> 00:03:22.046
Service is now on Apple's public

00:03:22.046 --> 00:03:22.816
status page.

00:03:23.326 --> 00:03:24.626
So you can easily check to see

00:03:24.626 --> 00:03:25.936
if there any service problems

00:03:26.246 --> 00:03:27.686
that would cause problems.

00:03:28.246 --> 00:03:31.456
Now what are the benefits to

00:03:31.456 --> 00:03:32.066
notarization?

00:03:32.866 --> 00:03:34.566
Well, there are many of them.

00:03:34.666 --> 00:03:35.786
So I'm just going to highlight a

00:03:35.786 --> 00:03:37.476
few of them today.

00:03:37.586 --> 00:03:39.236
First the Notary Service can

00:03:39.236 --> 00:03:40.646
help prevent you from

00:03:40.646 --> 00:03:41.566
inadvertently shipping a

00:03:41.566 --> 00:03:42.566
malicious dependency.

00:03:44.476 --> 00:03:47.366
Second, apps with a hardened

00:03:47.496 --> 00:03:49.476
runtime are more secure by

00:03:49.476 --> 00:03:50.986
default, and we'll talk a little

00:03:50.986 --> 00:03:51.726
more about that later.

00:03:52.256 --> 00:03:53.636
That can help prevent your app

00:03:53.636 --> 00:03:55.166
from being abused by attackers.

00:03:59.106 --> 00:04:00.906
Third, users are more likely to

00:04:00.906 --> 00:04:02.456
download and try new software

00:04:02.786 --> 00:04:04.066
knowing that Apple has scanned

00:04:04.066 --> 00:04:05.526
it for known security issues.

00:04:08.576 --> 00:04:10.666
Finally, notarization also

00:04:10.666 --> 00:04:11.806
provides an audit trail of

00:04:11.806 --> 00:04:13.096
software notarized by your

00:04:13.096 --> 00:04:14.706
Developer ID account that you

00:04:14.706 --> 00:04:15.896
can use to check the submission

00:04:15.896 --> 00:04:17.245
history and ensure that software

00:04:17.245 --> 00:04:18.026
hasn't been released that you

00:04:18.026 --> 00:04:20.315
didn't intend to release from

00:04:20.315 --> 00:04:20.886
your account.

00:04:21.625 --> 00:04:23.386
So that's a little bit of an

00:04:23.386 --> 00:04:24.556
overview of notarization.

00:04:24.926 --> 00:04:26.096
Now let's bring up Robert to

00:04:26.096 --> 00:04:27.116
talk about the application

00:04:27.116 --> 00:04:28.456
requirements to notarize your

00:04:28.456 --> 00:04:28.936
software.

00:04:29.806 --> 00:04:29.976
Robert.

00:04:30.516 --> 00:04:37.826
[ Applause ]

00:04:38.326 --> 00:04:40.016
>> So to start I want to say

00:04:40.016 --> 00:04:41.846
that for any of the software

00:04:41.846 --> 00:04:43.536
that you previously distributed

00:04:43.666 --> 00:04:44.716
it doesn't have to meet any new

00:04:44.716 --> 00:04:45.246
requirements.

00:04:45.246 --> 00:04:47.876
You can submit your existing

00:04:47.926 --> 00:04:48.896
distributed software for

00:04:48.896 --> 00:04:50.766
notarization as is without

00:04:50.766 --> 00:04:53.256
change, but for new software you

00:04:53.256 --> 00:04:54.646
need to make sure that it meets

00:04:54.646 --> 00:04:56.186
a few security requirements.

00:04:56.246 --> 00:04:57.736
In particular, it has to be

00:04:57.736 --> 00:04:59.286
completely and correctly signed

00:04:59.696 --> 00:05:00.616
and it needs to adopt the

00:05:00.616 --> 00:05:02.486
hardened runtime.

00:05:02.486 --> 00:05:03.686
And by new software I mean

00:05:03.686 --> 00:05:05.816
software signed on or after June

00:05:05.876 --> 00:05:07.696
1 of 2019.

00:05:08.806 --> 00:05:10.436
So we're going to go into detail

00:05:10.436 --> 00:05:11.916
on what we mean by both of those

00:05:11.916 --> 00:05:13.336
things, but the correct signing

00:05:13.336 --> 00:05:15.276
and the hardened runtime.

00:05:15.606 --> 00:05:19.716
So first when you, to completely

00:05:19.716 --> 00:05:20.836
sign everything you need to sign

00:05:20.836 --> 00:05:21.236
everything.

00:05:21.236 --> 00:05:22.556
That means bundles, Macho-Os,

00:05:22.586 --> 00:05:24.496
installer packages wherever they

00:05:24.496 --> 00:05:26.546
are or whether you have Mach-Os

00:05:26.546 --> 00:05:28.086
in your installer packages,

00:05:28.086 --> 00:05:29.576
installer packages in your

00:05:30.036 --> 00:05:31.456
bundles, anywhere that they're

00:05:31.456 --> 00:05:33.306
found in any place within your

00:05:33.306 --> 00:05:34.876
product they need to be signed,

00:05:34.906 --> 00:05:36.516
they need to be signed

00:05:36.516 --> 00:05:36.856
correctly.

00:05:38.166 --> 00:05:39.936
So to sign correctly that means

00:05:40.026 --> 00:05:42.756
you have to sign bundles,

00:05:42.756 --> 00:05:45.346
Macho-Os and code and I'll talk

00:05:45.346 --> 00:05:46.546
more about code in a second with

00:05:46.866 --> 00:05:50.226
your Developer ID application

00:05:50.226 --> 00:05:51.556
certificate and be sure to

00:05:51.556 --> 00:05:52.876
include a secure timestamp.

00:05:54.176 --> 00:05:56.056
For executables they need to opt

00:05:56.056 --> 00:05:57.526
into the hardened runtime.

00:05:57.526 --> 00:05:58.836
You don't need to opt into the

00:05:58.836 --> 00:06:00.196
hardened runtime for diludes or

00:06:00.196 --> 00:06:01.556
frameworks or bundles just for

00:06:01.556 --> 00:06:02.196
executables.

00:06:03.546 --> 00:06:05.386
For installer packages you need

00:06:05.386 --> 00:06:07.516
to sign them with your Developer

00:06:07.516 --> 00:06:09.316
ID Installer Certificate and

00:06:09.316 --> 00:06:10.726
this is different from your

00:06:10.726 --> 00:06:11.856
Developer ID Application

00:06:11.856 --> 00:06:12.906
Certificate so be careful.

00:06:14.236 --> 00:06:16.036
Also, if you choose to sign your

00:06:16.036 --> 00:06:17.926
disk images to avoid gatekeeper

00:06:17.926 --> 00:06:20.306
path randomization, those must

00:06:20.306 --> 00:06:21.686
be signed with your Developer ID

00:06:21.686 --> 00:06:23.086
Application Certificate and

00:06:23.086 --> 00:06:24.346
include a secure timestamp.

00:06:24.886 --> 00:06:27.926
So if you're using Xcode for

00:06:27.926 --> 00:06:29.266
building your package-- your

00:06:29.266 --> 00:06:29.986
software, this is easy.

00:06:29.986 --> 00:06:32.186
If you turn on automatic

00:06:32.286 --> 00:06:34.056
codesigning, Xcode does all of

00:06:34.056 --> 00:06:36.436
this for you, but you have to be

00:06:36.436 --> 00:06:37.016
careful.

00:06:37.016 --> 00:06:39.586
If you use script build phases

00:06:39.586 --> 00:06:41.666
or copy build phases, those

00:06:41.776 --> 00:06:43.486
might be introducing new code

00:06:43.486 --> 00:06:46.656
into your software that Xcode

00:06:46.656 --> 00:06:48.026
doesn't know about and then you

00:06:48.026 --> 00:06:49.206
have to make sure that those get

00:06:49.496 --> 00:06:50.596
correctly signed.

00:06:51.206 --> 00:06:55.176
So I mentioned code files.

00:06:55.576 --> 00:06:57.726
So when we introduced

00:06:57.726 --> 00:06:58.996
codesigning a number of years

00:06:58.996 --> 00:07:01.016
ago, we documented in the

00:07:01.016 --> 00:07:02.456
technote that these things

00:07:02.456 --> 00:07:03.396
called code places.

00:07:03.706 --> 00:07:05.336
So any files found in any of

00:07:05.336 --> 00:07:06.706
these places within their bundle

00:07:06.706 --> 00:07:07.906
are considered code by the

00:07:07.906 --> 00:07:09.376
codesigning infrastructure and

00:07:09.376 --> 00:07:10.646
that means they need to have an

00:07:10.646 --> 00:07:11.726
attached signature.

00:07:12.246 --> 00:07:15.726
Mach-Os are the best for this.

00:07:15.726 --> 00:07:16.966
You can embed the signature

00:07:16.966 --> 00:07:18.726
inside of any Mach-Os that you

00:07:18.726 --> 00:07:19.906
put in these places as well as

00:07:19.906 --> 00:07:21.536
for bundles, but if you put

00:07:21.536 --> 00:07:23.416
other types of files such as

00:07:23.666 --> 00:07:27.536
JPEGs or raw binary files, those

00:07:27.536 --> 00:07:30.116
have to be signed as well, but

00:07:30.116 --> 00:07:31.486
they don't get attached

00:07:31.486 --> 00:07:32.826
signature instead the signature

00:07:32.826 --> 00:07:34.806
ends up as an extended

00:07:34.806 --> 00:07:35.386
attribute.

00:07:35.826 --> 00:07:36.736
And that means that you have to

00:07:36.736 --> 00:07:37.886
be careful when you're packaging

00:07:37.886 --> 00:07:39.056
up your code to make sure that

00:07:39.056 --> 00:07:40.756
that extended attribute stays

00:07:40.756 --> 00:07:41.326
within those.

00:07:41.786 --> 00:07:43.316
To avoid having to be too

00:07:43.316 --> 00:07:44.686
careful with that we recommend

00:07:44.686 --> 00:07:46.236
that you put anything that isn't

00:07:46.236 --> 00:07:47.786
a Macho-O or a bundle containing

00:07:47.786 --> 00:07:49.406
a Macho-O in a place other than

00:07:49.406 --> 00:07:50.986
any of these places when you're

00:07:50.986 --> 00:07:51.946
structuring your app.

00:07:52.646 --> 00:07:55.676
So to get signing right when

00:07:55.676 --> 00:07:56.976
you're doing it outside of

00:07:56.976 --> 00:07:58.976
Xcode, we recommend what we call

00:07:58.976 --> 00:08:00.206
inside out codesigning.

00:08:00.486 --> 00:08:02.016
That means you sign the most

00:08:02.016 --> 00:08:05.096
deeply nested bundle or piece of

00:08:05.096 --> 00:08:07.826
code within your app first.

00:08:08.366 --> 00:08:10.216
In this case, it would be the

00:08:10.216 --> 00:08:11.876
updater.app inside of the

00:08:11.876 --> 00:08:13.596
Sparkle framework inside of the

00:08:13.596 --> 00:08:17.116
Watching Grass Grow app and then

00:08:17.116 --> 00:08:18.656
you move up a level and sign

00:08:18.656 --> 00:08:20.686
each of the things individually.

00:08:20.926 --> 00:08:21.966
Note that when you sign the

00:08:21.966 --> 00:08:24.046
Sparkle framework by itself-- or

00:08:24.046 --> 00:08:25.456
the Sparkle framework that grabs

00:08:25.456 --> 00:08:27.356
the Sparkle main executable as

00:08:27.356 --> 00:08:28.696
well as signing the updater.app

00:08:28.696 --> 00:08:29.086
together.

00:08:29.086 --> 00:08:31.696
And note you need to go

00:08:31.856 --> 00:08:32.966
individually to watch Grass

00:08:32.966 --> 00:08:35.846
Grow, savergrowgrass.dylib, and

00:08:35.846 --> 00:08:36.976
Watching Grass Grow Helper.

00:08:38.015 --> 00:08:39.515
And finally after you've signed

00:08:39.515 --> 00:08:40.756
all of those you sign everything

00:08:40.756 --> 00:08:42.446
together at the top bundle and

00:08:42.446 --> 00:08:44.285
again this will sign the main

00:08:44.285 --> 00:08:45.846
executable your bundle as

00:08:45.846 --> 00:08:47.786
indicated by your info plist.

00:08:48.996 --> 00:08:50.616
Some of you use the [inaudible]

00:08:50.716 --> 00:08:52.106
Deep Flag in your custom

00:08:52.106 --> 00:08:53.006
workflows, but you need to be

00:08:53.006 --> 00:08:54.406
careful.

00:08:54.586 --> 00:08:56.146
The [inaudible] Deep Flag only

00:08:56.146 --> 00:08:57.906
looks for code in code places

00:08:58.176 --> 00:09:01.346
and in this case the Grow Grass

00:09:01.346 --> 00:09:03.046
dylib, the Watching Grass Grow

00:09:03.046 --> 00:09:05.066
Saver, and the updater.app

00:09:05.526 --> 00:09:07.326
wouldn't be found as code.

00:09:07.326 --> 00:09:08.176
They would be signed in as

00:09:08.176 --> 00:09:09.876
resources, but they wouldn't be

00:09:09.876 --> 00:09:10.986
signed as code and, therefore,

00:09:10.986 --> 00:09:12.566
they would be rejected by the

00:09:12.566 --> 00:09:13.846
notarization unless you took the

00:09:13.846 --> 00:09:15.266
extra steps to do the inside out

00:09:15.266 --> 00:09:15.576
signing.

00:09:16.756 --> 00:09:19.856
And see Technote 2206 for more

00:09:19.856 --> 00:09:20.976
information on inside out

00:09:20.976 --> 00:09:24.036
signing and code places after

00:09:24.186 --> 00:09:24.686
the talk.

00:09:26.226 --> 00:09:27.796
So once you've completely and

00:09:27.796 --> 00:09:29.296
correctly signed your bundle,

00:09:29.296 --> 00:09:30.996
your software, you have to make

00:09:30.996 --> 00:09:32.046
sure that you don't invalidate

00:09:32.046 --> 00:09:32.676
your signature.

00:09:32.886 --> 00:09:33.786
That means you should never be

00:09:33.786 --> 00:09:35.396
changing files in your bundle

00:09:35.396 --> 00:09:36.856
except during installation or

00:09:36.856 --> 00:09:38.856
update and when you update make

00:09:38.856 --> 00:09:40.586
sure what is the result of that

00:09:40.586 --> 00:09:42.526
update is correctly signed and

00:09:42.606 --> 00:09:44.556
notarized on your customer

00:09:44.556 --> 00:09:44.916
system.

00:09:44.916 --> 00:09:48.356
So now we're going to dig deeper

00:09:48.356 --> 00:09:49.306
into the hardened runtime.

00:09:49.306 --> 00:09:50.476
We introduced the hardened

00:09:50.476 --> 00:09:53.696
runtime last year at WWDC and

00:09:53.696 --> 00:09:55.166
now we're going to give a bit

00:09:55.166 --> 00:09:57.076
more detail to discuss its

00:09:57.126 --> 00:09:59.316
benefits and configuration.

00:09:59.776 --> 00:10:03.346
So the hardened runtime extends

00:10:03.346 --> 00:10:04.676
many of the system integrity

00:10:04.676 --> 00:10:06.526
protections that we have on

00:10:06.526 --> 00:10:08.286
macOS to your app.

00:10:08.696 --> 00:10:10.376
This means runtime code signing

00:10:10.376 --> 00:10:12.296
enforcement, library validation,

00:10:12.646 --> 00:10:13.906
DYLD environment variable

00:10:13.906 --> 00:10:15.226
protection and debugging

00:10:15.226 --> 00:10:15.716
protection.

00:10:16.146 --> 00:10:17.126
Note that all of these

00:10:17.206 --> 00:10:19.056
protections are owned by default

00:10:19.056 --> 00:10:21.266
and not configurable on iOS but

00:10:21.266 --> 00:10:22.896
on a macOS that are configurable

00:10:22.896 --> 00:10:24.216
via entitlements that any

00:10:24.216 --> 00:10:25.656
developer can set.

00:10:26.106 --> 00:10:29.306
So if you're using Xcode,

00:10:29.306 --> 00:10:30.896
adopting the hard runtime is

00:10:30.926 --> 00:10:31.276
easy.

00:10:31.466 --> 00:10:32.376
Just go to the signing and

00:10:32.376 --> 00:10:34.096
capabilities tab and make sure

00:10:34.096 --> 00:10:35.706
that the hardened runtime

00:10:35.706 --> 00:10:37.616
capability is present on your

00:10:37.746 --> 00:10:38.026
target.

00:10:40.226 --> 00:10:41.886
Then you can select which

00:10:41.886 --> 00:10:42.866
entitlements you need to

00:10:42.866 --> 00:10:44.566
configure the hardened runtime

00:10:44.566 --> 00:10:46.226
on your project using the

00:10:46.226 --> 00:10:47.146
checkboxes provided.

00:10:47.856 --> 00:10:51.166
If you're using a custom

00:10:51.166 --> 00:10:52.836
workflow outside Xcode, you can

00:10:52.836 --> 00:10:54.126
use the codesign command to

00:10:54.126 --> 00:10:55.576
adopt the hardened runtime and

00:10:55.576 --> 00:10:57.426
to do that use the option

00:10:57.426 --> 00:11:00.416
runtime command to codesign and

00:11:00.416 --> 00:11:02.176
make sure you use the timestamp

00:11:02.176 --> 00:11:03.906
option as well to ensure that

00:11:03.906 --> 00:11:06.126
there is a secure timestamp on

00:11:06.126 --> 00:11:06.876
your application.

00:11:07.466 --> 00:11:11.076
To verify that you have adopted

00:11:11.076 --> 00:11:12.316
the hardened runtime correctly

00:11:12.616 --> 00:11:14.136
use the display option to

00:11:14.136 --> 00:11:15.526
codesign with the verbosity

00:11:15.526 --> 00:11:17.636
level of 2 and look for the

00:11:17.636 --> 00:11:19.366
runtime word in the flag

00:11:19.366 --> 00:11:19.836
section.

00:11:20.466 --> 00:11:21.566
Also note that the hardened

00:11:21.596 --> 00:11:22.346
runtime is versioned.

00:11:22.796 --> 00:11:24.076
When you sign with the hardened

00:11:24.076 --> 00:11:26.046
runtime, we record what version

00:11:26.136 --> 00:11:27.706
you were signing with so that

00:11:27.706 --> 00:11:29.496
when, if we were to add

00:11:29.496 --> 00:11:30.476
additional protections to

00:11:30.476 --> 00:11:31.656
hardened runtime in the future,

00:11:31.866 --> 00:11:33.366
we'll ensure that only the ones

00:11:33.366 --> 00:11:34.456
that your app has been tested

00:11:34.456 --> 00:11:35.876
with get applied on future

00:11:35.876 --> 00:11:36.356
systems.

00:11:39.386 --> 00:11:41.036
So what is runtime codesigning

00:11:41.036 --> 00:11:41.556
enforcement?

00:11:42.186 --> 00:11:43.546
It prevents creation of

00:11:43.546 --> 00:11:44.906
executable memory without an

00:11:44.906 --> 00:11:47.056
associated code signature within

00:11:47.056 --> 00:11:51.016
your process and it does this by

00:11:51.016 --> 00:11:52.556
ensuring first that all bytes

00:11:52.556 --> 00:11:54.196
mapped into your process match

00:11:54.196 --> 00:11:55.666
their associated code signature

00:11:55.666 --> 00:11:57.146
when they're read from disk and

00:11:57.146 --> 00:11:58.266
this includes not just

00:11:58.266 --> 00:11:59.256
executable regions of your

00:11:59.256 --> 00:12:00.976
Mach-O but also the

00:12:00.976 --> 00:12:02.436
non-executable mappings like

00:12:02.436 --> 00:12:03.476
your read-only sections.

00:12:05.476 --> 00:12:07.316
And we prevent execution for

00:12:07.316 --> 00:12:08.866
modified memory that doesn't

00:12:08.866 --> 00:12:09.786
match its signature.

00:12:10.456 --> 00:12:12.886
So by verifying that the memory

00:12:12.976 --> 00:12:14.496
is, the memory that we're

00:12:14.496 --> 00:12:15.866
reading from disk is correct as

00:12:15.866 --> 00:12:17.176
it's coming in and making sure

00:12:17.176 --> 00:12:18.186
that we can't change it we

00:12:18.186 --> 00:12:19.436
ensure the integrity of your

00:12:19.436 --> 00:12:20.386
process as it's running.

00:12:22.546 --> 00:12:24.116
Now one of the challenges that

00:12:24.116 --> 00:12:25.336
can come up with working with

00:12:25.336 --> 00:12:26.546
the runtime codesigning

00:12:26.546 --> 00:12:28.446
enforcement is if your code uses

00:12:28.446 --> 00:12:31.066
JIT to make non-native code run

00:12:31.066 --> 00:12:31.896
fast within your app.

00:12:32.526 --> 00:12:33.986
To do this we recommend that you

00:12:33.986 --> 00:12:35.486
use the allow JIT entitlement

00:12:35.886 --> 00:12:37.936
and then use the MAP JIT flag

00:12:37.936 --> 00:12:39.306
when allocating your

00:12:39.306 --> 00:12:40.926
Read/Write/Execute memory that

00:12:40.926 --> 00:12:42.976
you're compiling the code into.

00:12:43.276 --> 00:12:45.096
This allows us to keep the rest

00:12:45.096 --> 00:12:46.266
of the protections on all of

00:12:46.266 --> 00:12:47.586
your other memory within the

00:12:47.586 --> 00:12:49.556
system while giving you this

00:12:49.556 --> 00:12:51.506
scratch space memory to do what

00:12:51.506 --> 00:12:52.996
you need with respect to JIT.

00:12:54.026 --> 00:12:57.586
If you can't adopt the MAP-JIT

00:12:57.586 --> 00:12:58.686
flag because you don't have

00:12:58.776 --> 00:13:01.036
source code access to your JIT

00:13:01.036 --> 00:13:01.506
engine.

00:13:01.756 --> 00:13:02.946
You can use the allow unsigned

00:13:02.946 --> 00:13:04.466
executive memory entitlement.

00:13:04.936 --> 00:13:06.906
This will lower the security

00:13:06.906 --> 00:13:09.126
predictions provided by runtime

00:13:09.126 --> 00:13:11.796
codesigning enforcement to just

00:13:11.796 --> 00:13:13.396
verifying that for every piece

00:13:13.396 --> 00:13:14.556
of memory that does have a code

00:13:14.556 --> 00:13:16.686
signature associated all of the

00:13:16.686 --> 00:13:17.976
bytes that you read from disk

00:13:18.216 --> 00:13:20.586
are, in fact, match that, but it

00:13:20.586 --> 00:13:23.366
allows modification to any of

00:13:23.366 --> 00:13:25.256
your memory inside your process

00:13:25.426 --> 00:13:27.976
and allows the creation of

00:13:28.476 --> 00:13:29.886
unsigned executable regions.

00:13:32.606 --> 00:13:33.446
Another thing that we've seen

00:13:33.446 --> 00:13:34.636
some developers having

00:13:34.636 --> 00:13:36.746
challenges with is if they

00:13:36.746 --> 00:13:39.086
attempt to patch some system

00:13:39.086 --> 00:13:40.066
frameworks that they've loaded

00:13:40.066 --> 00:13:42.366
in after they have adopted the

00:13:42.366 --> 00:13:43.106
hardened runtime.

00:13:43.866 --> 00:13:45.656
We don't recommend that you do

00:13:45.656 --> 00:13:46.776
this and you should see whether

00:13:46.776 --> 00:13:47.666
any of the hardened runtime

00:13:47.736 --> 00:13:49.396
features actually make the,

00:13:49.686 --> 00:13:50.856
solve the reasons why you're

00:13:50.856 --> 00:13:51.846
doing this.

00:13:51.966 --> 00:13:53.746
But if you need to the allow

00:13:53.746 --> 00:13:54.916
unsigned executable memory

00:13:54.916 --> 00:13:56.676
entitlement will do what you

00:13:56.676 --> 00:13:58.166
need to allow you to modify

00:13:58.166 --> 00:13:59.646
those memory pages that you've

00:13:59.646 --> 00:14:00.636
mapped in.

00:14:01.606 --> 00:14:04.046
So another thing that we've seen

00:14:04.046 --> 00:14:05.616
come up with respect to runtime

00:14:05.616 --> 00:14:07.986
codesigning enforcement is some

00:14:07.986 --> 00:14:09.796
people have seen crashes while

00:14:09.796 --> 00:14:11.486
they're updating their app.

00:14:11.916 --> 00:14:13.806
This is because codesignatures

00:14:13.806 --> 00:14:16.066
are latched to files on first

00:14:16.066 --> 00:14:17.966
use in the kernel and that means

00:14:17.966 --> 00:14:20.206
if you modify a file that has

00:14:20.206 --> 00:14:23.006
been run and was signed, then it

00:14:23.006 --> 00:14:23.986
will no longer match the

00:14:23.986 --> 00:14:25.076
signature that's sitting in the

00:14:25.076 --> 00:14:26.296
kernel and you'll see a

00:14:26.296 --> 00:14:27.816
codesignature violation.

00:14:28.626 --> 00:14:30.216
What we recommend instead is

00:14:30.216 --> 00:14:31.916
that instead of modifying

00:14:31.916 --> 00:14:33.146
existing files on disk you

00:14:33.146 --> 00:14:35.626
always create a new file with

00:14:35.656 --> 00:14:37.306
the updated changes and move the

00:14:37.306 --> 00:14:38.376
old file out of the way.

00:14:38.696 --> 00:14:40.326
This will ensure that the new

00:14:40.326 --> 00:14:42.056
file on its first use gets its

00:14:42.056 --> 00:14:44.366
codesignature without causing

00:14:44.366 --> 00:14:45.476
the codesignature violations

00:14:45.476 --> 00:14:45.986
that you're seeing.

00:14:48.746 --> 00:14:49.796
So next we'll talk about library

00:14:49.796 --> 00:14:50.226
validation.

00:14:52.746 --> 00:14:54.156
So library validation protects

00:14:54.156 --> 00:14:55.586
your app from code injection and

00:14:55.586 --> 00:14:56.586
dylib hijacking.

00:14:57.056 --> 00:14:58.736
By making sure that your app

00:14:58.736 --> 00:15:00.406
only loads code signed by your

00:15:00.406 --> 00:15:01.806
team or signed by Apple.

00:15:01.806 --> 00:15:03.626
And some of you might ask, why

00:15:03.626 --> 00:15:05.436
does it need to load code signed

00:15:05.436 --> 00:15:05.896
by Apple?

00:15:06.036 --> 00:15:07.326
Well, remember that all the

00:15:07.326 --> 00:15:08.906
frameworks and libraries that

00:15:08.906 --> 00:15:09.676
you're loading from the

00:15:09.676 --> 00:15:10.806
operating system are Apple

00:15:10.806 --> 00:15:11.156
signed.

00:15:11.156 --> 00:15:12.486
So you have to be able to call

00:15:12.486 --> 00:15:14.616
those and load them into your

00:15:14.616 --> 00:15:15.076
process.

00:15:16.156 --> 00:15:17.956
Note that library validation

00:15:18.056 --> 00:15:19.746
prevents the loading of unsigned

00:15:19.746 --> 00:15:21.106
and ad hoc signed code.

00:15:21.706 --> 00:15:23.086
So be careful during your

00:15:23.086 --> 00:15:23.946
development process.

00:15:23.946 --> 00:15:25.396
Make sure that you use Apple

00:15:25.396 --> 00:15:26.716
development certificates rather

00:15:26.716 --> 00:15:28.416
than turning off codesigning or

00:15:28.646 --> 00:15:30.416
just using ad hoc signing.

00:15:33.946 --> 00:15:35.926
So library validation can cause

00:15:35.926 --> 00:15:38.806
challenges for apps that have an

00:15:39.066 --> 00:15:40.256
in process plug-in or an

00:15:40.256 --> 00:15:40.856
ecosystem.

00:15:41.536 --> 00:15:42.606
We recommend that you consider

00:15:42.606 --> 00:15:44.546
moving to an out of process

00:15:44.546 --> 00:15:46.056
plug-in model so that you don't

00:15:46.306 --> 00:15:48.036
have to load unknown third-party

00:15:48.036 --> 00:15:50.746
code into your app but if you

00:15:50.746 --> 00:15:52.606
can't, you can use the disable

00:15:52.606 --> 00:15:54.016
library validation entitlement

00:15:54.096 --> 00:15:55.816
and this will allow loading of

00:15:55.816 --> 00:15:57.226
unsigned and ad hoc sign

00:15:57.226 --> 00:15:57.756
plug-ins.

00:15:58.136 --> 00:15:59.336
And note you can take this by

00:15:59.336 --> 00:16:01.756
itself without taking any of the

00:16:01.996 --> 00:16:02.986
runtime code and sort

00:16:02.986 --> 00:16:04.796
enforcement related entitlements

00:16:05.036 --> 00:16:06.226
by having disabled library

00:16:06.226 --> 00:16:07.896
validation on when the system

00:16:07.896 --> 00:16:09.636
sees that you're loading a ad

00:16:09.636 --> 00:16:11.486
hoc signed or an unsigned

00:16:11.486 --> 00:16:12.546
plug-in, it will lower the

00:16:12.546 --> 00:16:14.726
security of your process to

00:16:14.726 --> 00:16:15.966
allow that because you've said

00:16:15.966 --> 00:16:17.686
you want to load unsigned

00:16:17.686 --> 00:16:18.666
plug-ins.

00:16:20.096 --> 00:16:22.536
So next is DYLD environment

00:16:22.536 --> 00:16:23.306
variable protection.

00:16:23.816 --> 00:16:26.256
DYLD environment variables can

00:16:26.256 --> 00:16:27.826
be very useful during your

00:16:27.826 --> 00:16:29.976
development process to load

00:16:29.976 --> 00:16:31.716
debug libraries into your app

00:16:31.806 --> 00:16:34.756
while you're testing or to use

00:16:34.756 --> 00:16:35.746
libraries that are, or

00:16:35.816 --> 00:16:36.856
frameworks that you're building

00:16:36.856 --> 00:16:38.176
that are in development but

00:16:38.176 --> 00:16:39.386
aren't quite ready to be built

00:16:39.386 --> 00:16:40.536
into your app just to test them,

00:16:40.956 --> 00:16:42.626
but they can be dangerous

00:16:42.676 --> 00:16:43.766
because everything that you can

00:16:43.766 --> 00:16:44.626
do during your building and

00:16:44.626 --> 00:16:46.316
testing process an attacker can

00:16:46.316 --> 00:16:48.996
do on a customer system to take

00:16:48.996 --> 00:16:51.176
advantage of privileges or data

00:16:51.176 --> 00:16:52.256
that's available to your app.

00:16:53.466 --> 00:16:54.656
So because of this the hardened

00:16:54.656 --> 00:16:56.276
runtime blocks these variables

00:16:56.276 --> 00:16:57.736
by default when you ship with

00:16:57.736 --> 00:16:57.826
it.

00:16:58.656 --> 00:17:00.026
If you need to use DYLD

00:17:00.026 --> 00:17:01.916
environment variables during

00:17:01.916 --> 00:17:03.806
your debugging process, you can

00:17:03.806 --> 00:17:04.776
use the get task allow

00:17:04.776 --> 00:17:06.256
entitlement on your debug build

00:17:06.586 --> 00:17:07.866
and note that Xcode

00:17:07.866 --> 00:17:09.236
automatically puts this on for

00:17:09.236 --> 00:17:10.906
you when you build for debug and

00:17:10.906 --> 00:17:11.796
takes it off for you

00:17:11.796 --> 00:17:14.236
automatically when you build for

00:17:14.236 --> 00:17:14.656
release.

00:17:15.296 --> 00:17:16.945
Note though that if you're using

00:17:16.945 --> 00:17:18.906
a custom workflow, the notary

00:17:18.945 --> 00:17:20.336
service in most cases doesn't

00:17:20.425 --> 00:17:21.786
accept binaries with the get

00:17:21.786 --> 00:17:22.776
task allow entitlement.

00:17:22.776 --> 00:17:23.705
So make sure you take this

00:17:23.705 --> 00:17:25.806
entitlement off before you ship

00:17:25.965 --> 00:17:27.726
your release build to the Notary

00:17:27.726 --> 00:17:27.976
Service.

00:17:30.246 --> 00:17:33.626
So in a few cases, we have seen

00:17:33.626 --> 00:17:37.066
developers needed to use the

00:17:37.066 --> 00:17:39.326
DYLD environment variables when

00:17:39.326 --> 00:17:40.696
they ship their app to customers

00:17:41.406 --> 00:17:42.886
and, again, we don't recommend

00:17:42.886 --> 00:17:43.376
you do this.

00:17:43.376 --> 00:17:45.936
This can be very dangerous for

00:17:45.936 --> 00:17:47.136
taking advantage of your app on

00:17:47.136 --> 00:17:48.716
customer systems, but if you

00:17:48.716 --> 00:17:50.256
need to there is an entitlement

00:17:50.306 --> 00:17:52.496
to allow DYLD environment

00:17:52.496 --> 00:17:53.836
variables which will allow these

00:17:53.886 --> 00:17:55.196
to be used and is accepted by

00:17:55.196 --> 00:17:55.926
the Notary Service.

00:17:56.386 --> 00:17:59.506
Next is debugging protection.

00:18:00.036 --> 00:18:03.916
So we all know that debuggers

00:18:03.916 --> 00:18:05.956
allow developers to inspect the

00:18:05.956 --> 00:18:07.596
state of registers and memory

00:18:07.916 --> 00:18:09.466
and modify process memory.

00:18:09.906 --> 00:18:11.606
That means they allow hackers to

00:18:12.476 --> 00:18:14.266
steal sensitive user data and

00:18:14.266 --> 00:18:15.306
inject malicious code.

00:18:16.006 --> 00:18:17.146
So by default the hardened

00:18:17.196 --> 00:18:19.096
runtime doesn't allow debugging

00:18:19.096 --> 00:18:21.746
of hardened processes, but if

00:18:21.746 --> 00:18:24.186
you need to use the debugger

00:18:24.186 --> 00:18:25.666
during your development flow,

00:18:25.666 --> 00:18:26.986
again, the get task allow

00:18:26.986 --> 00:18:28.646
entitlement is what you need.

00:18:28.646 --> 00:18:30.216
Along with DYLD environment

00:18:30.216 --> 00:18:31.376
variables the get task allow

00:18:31.376 --> 00:18:33.496
entitlements allows your app to

00:18:33.496 --> 00:18:34.036
be debugged.

00:18:35.226 --> 00:18:37.456
But be careful if you do all of

00:18:37.456 --> 00:18:38.856
your testing with the debugger

00:18:38.856 --> 00:18:39.426
attached.

00:18:39.426 --> 00:18:40.996
This will mask some of the other

00:18:41.086 --> 00:18:42.536
hardened runtime related issues

00:18:42.536 --> 00:18:43.556
that you could run into

00:18:43.556 --> 00:18:44.936
especially around runtime

00:18:44.936 --> 00:18:45.866
codesigning enforcement.

00:18:46.066 --> 00:18:47.426
Basically, once the debugger

00:18:47.426 --> 00:18:49.376
attaches we can't force

00:18:49.696 --> 00:18:51.036
codesigning enforcement anymore

00:18:51.656 --> 00:18:53.266
because debuggers like setting a

00:18:53.266 --> 00:18:54.886
breakpoint automatically change

00:18:54.886 --> 00:18:57.086
your data within your process

00:18:57.086 --> 00:18:58.256
and they would just crash

00:18:58.256 --> 00:18:59.616
immediately if we continue to

00:18:59.616 --> 00:19:00.146
enforce that.

00:19:00.606 --> 00:19:01.956
So make sure you test a release

00:19:01.956 --> 00:19:03.376
build to see what other effects

00:19:03.666 --> 00:19:04.626
the runtime codesigning

00:19:04.626 --> 00:19:07.216
enforcement might have and then

00:19:07.216 --> 00:19:08.806
if you need to make a debug

00:19:08.806 --> 00:19:10.676
build without get test allow

00:19:10.676 --> 00:19:12.176
through Xcode, you can use the

00:19:12.176 --> 00:19:13.716
codesign inject base

00:19:13.716 --> 00:19:15.276
entitlements equals no option in

00:19:15.276 --> 00:19:17.096
your Xcode project to get all of

00:19:17.096 --> 00:19:18.456
your debug settings except get

00:19:18.456 --> 00:19:18.856
task allow.

00:19:21.216 --> 00:19:23.526
So this can be a challenge also

00:19:23.526 --> 00:19:26.006
in the plug-in ecosystem because

00:19:26.456 --> 00:19:27.926
plug-in developers need to debug

00:19:27.926 --> 00:19:29.696
their plug-ins within the app

00:19:29.806 --> 00:19:30.716
that they're going to load.

00:19:31.436 --> 00:19:32.426
So, again, we recommend

00:19:32.586 --> 00:19:34.046
considering out of process

00:19:34.046 --> 00:19:36.576
plug-in model or consider

00:19:36.576 --> 00:19:38.666
shipping a debug version to,

00:19:39.186 --> 00:19:40.486
yeah, debug version of your app

00:19:40.486 --> 00:19:41.886
to register plug-in developers

00:19:42.096 --> 00:19:44.126
so that they have the power to

00:19:44.126 --> 00:19:45.416
debug, but you don't ship that

00:19:45.416 --> 00:19:48.166
to all of your customers, but if

00:19:48.166 --> 00:19:50.776
absolutely necessary, the Notary

00:19:50.776 --> 00:19:51.826
Service will accept the

00:19:51.826 --> 00:19:53.446
combination of get task allow

00:19:53.446 --> 00:19:55.066
entitlement and the disable

00:19:55.066 --> 00:19:56.506
library validation entitlement

00:19:56.506 --> 00:19:57.616
to allow this workflow.

00:20:00.816 --> 00:20:02.396
So we'll talk briefly about

00:20:02.396 --> 00:20:03.706
protected resource access.

00:20:05.036 --> 00:20:07.286
So we all know that your

00:20:07.286 --> 00:20:08.406
customers use their Macs to

00:20:08.406 --> 00:20:10.946
store tons of information about

00:20:10.946 --> 00:20:13.526
their lives and the Macs have

00:20:13.526 --> 00:20:15.436
access to sensors that are

00:20:15.436 --> 00:20:16.846
security sensitive.

00:20:17.746 --> 00:20:19.136
In order to or once you've

00:20:19.166 --> 00:20:20.376
adopted the hardened runtime,

00:20:20.696 --> 00:20:21.936
your app needs to declare its

00:20:21.936 --> 00:20:23.626
intent to access any of these

00:20:23.626 --> 00:20:24.626
protected resources.

00:20:25.696 --> 00:20:27.696
So we mentioned all of last

00:20:27.696 --> 00:20:30.516
year, but if you need to access

00:20:30.516 --> 00:20:32.616
any of these resources you need

00:20:32.616 --> 00:20:34.416
to take the entitlement on your

00:20:34.416 --> 00:20:37.716
main bundle and then declare the

00:20:37.716 --> 00:20:39.786
usage string that is associated

00:20:39.786 --> 00:20:41.016
with the entitlement so that

00:20:41.016 --> 00:20:43.016
when your app attempts to access

00:20:43.016 --> 00:20:44.786
one of these resources, the

00:20:44.786 --> 00:20:46.086
system can provide a dialogue

00:20:46.086 --> 00:20:47.586
saying, oh, this is why I need

00:20:47.636 --> 00:20:49.396
to have access to this resource

00:20:49.396 --> 00:20:50.586
so that you can collect the

00:20:50.586 --> 00:20:51.396
user's consent.

00:20:52.656 --> 00:20:54.826
So some recommendations a

00:20:54.826 --> 00:20:55.836
summary of this section.

00:20:55.956 --> 00:20:57.566
Take only the entitlements you

00:20:57.566 --> 00:20:57.856
need.

00:20:57.986 --> 00:20:59.786
The entitlements turn off

00:20:59.786 --> 00:21:00.996
security provided by the

00:21:00.996 --> 00:21:02.566
hardened runtime and they can be

00:21:02.566 --> 00:21:04.176
inspected by anyone looking at

00:21:04.176 --> 00:21:05.936
your app to try to see what

00:21:06.256 --> 00:21:07.476
kinds of things they can do with

00:21:07.476 --> 00:21:09.006
it once it's shipped to

00:21:09.006 --> 00:21:09.526
customers.

00:21:09.746 --> 00:21:11.106
So be careful, take only what

00:21:11.106 --> 00:21:12.596
you need, put the entitlements

00:21:12.596 --> 00:21:14.186
only on the processes that need

00:21:14.186 --> 00:21:14.416
them.

00:21:14.416 --> 00:21:17.066
If you have multiple processes,

00:21:17.066 --> 00:21:18.526
multiple executables within your

00:21:18.526 --> 00:21:20.276
app, it's unlikely that all of

00:21:20.276 --> 00:21:21.536
them need the same protections.

00:21:21.536 --> 00:21:22.656
You probably aren't doing JIT in

00:21:22.656 --> 00:21:23.446
every process.

00:21:23.446 --> 00:21:24.276
You probably aren't loading

00:21:24.276 --> 00:21:25.536
plug-ins into every process.

00:21:25.806 --> 00:21:27.306
So take only the ones you need

00:21:27.306 --> 00:21:28.806
in the processes that need them

00:21:29.726 --> 00:21:31.306
and when you're declaring

00:21:31.306 --> 00:21:32.866
resource access make sure that

00:21:32.866 --> 00:21:34.266
those entitlements are only on

00:21:34.266 --> 00:21:35.696
the main bundle of your app.

00:21:36.046 --> 00:21:38.686
Those getting inherited by any

00:21:38.686 --> 00:21:41.206
other executables within your

00:21:41.206 --> 00:21:42.516
bundles, they don't need to be

00:21:42.596 --> 00:21:43.346
all around.

00:21:43.416 --> 00:21:44.276
Just on the main bundle.

00:21:44.716 --> 00:21:46.496
Now I'm going to hand it back to

00:21:46.496 --> 00:21:48.686
Garrett to go over what you need

00:21:48.686 --> 00:21:50.426
to do to actually submit for

00:21:50.426 --> 00:21:50.976
notarization.

00:21:51.516 --> 00:21:57.206
[ Applause ]

00:21:57.706 --> 00:21:58.196
>> Thanks, Robert.

00:21:59.036 --> 00:22:00.066
So now you know everything to

00:22:00.066 --> 00:22:00.886
think about while you're

00:22:00.886 --> 00:22:02.046
building and designing your

00:22:02.046 --> 00:22:03.486
application to get it ready to

00:22:03.486 --> 00:22:05.516
be notarized, but how do you

00:22:05.516 --> 00:22:06.856
actually submit it to the Notary

00:22:06.856 --> 00:22:07.376
Service?

00:22:08.356 --> 00:22:11.276
Well, let's talk a little about

00:22:11.276 --> 00:22:12.846
the notarization workflow and

00:22:12.846 --> 00:22:13.926
regardless of whether you're

00:22:13.926 --> 00:22:15.166
using Xcode or have a

00:22:15.166 --> 00:22:17.276
custom-built workflow, the rough

00:22:17.406 --> 00:22:18.786
workflow is about the same.

00:22:19.866 --> 00:22:20.776
You submit the app for

00:22:20.776 --> 00:22:22.886
notarization, you check the

00:22:23.116 --> 00:22:25.036
status of the Notary Service.

00:22:25.336 --> 00:22:26.836
Once notarization is complete,

00:22:27.256 --> 00:22:28.936
you can staple a ticket and then

00:22:28.936 --> 00:22:29.846
when you're done you might want

00:22:29.846 --> 00:22:31.276
to verify that the stapling and

00:22:31.276 --> 00:22:32.606
notarization were successful.

00:22:32.606 --> 00:22:35.516
Before we talk a little bit more

00:22:35.516 --> 00:22:36.946
about this we should talk about

00:22:37.176 --> 00:22:39.636
what and when to submit and at a

00:22:39.636 --> 00:22:40.926
minimum you should be submitting

00:22:40.926 --> 00:22:41.776
all the software that you

00:22:41.776 --> 00:22:45.286
distribute, but really it's okay

00:22:45.286 --> 00:22:46.616
to upload more regularly so

00:22:46.616 --> 00:22:47.806
anything that runs outside of a

00:22:47.806 --> 00:22:49.586
developer's machine feel free to

00:22:49.586 --> 00:22:50.676
upload as a Notary Service.

00:22:51.076 --> 00:22:52.056
You probably don't need to

00:22:52.056 --> 00:22:54.126
upload every CI bill though and

00:22:56.456 --> 00:22:58.266
anyone on the team can submit

00:22:58.266 --> 00:22:59.766
process-- submit software for

00:22:59.766 --> 00:23:00.386
notarization.

00:23:00.926 --> 00:23:02.546
This has changed from last year

00:23:02.876 --> 00:23:03.966
when it used to be restricted to

00:23:03.966 --> 00:23:04.706
certain roles.

00:23:07.076 --> 00:23:08.606
So now you're ready to submit to

00:23:08.606 --> 00:23:09.366
the Notary Service.

00:23:09.646 --> 00:23:11.596
Well, if you use Xcode, it's

00:23:11.596 --> 00:23:12.896
quite easy and it's built into

00:23:12.896 --> 00:23:13.966
the archive and distribution

00:23:13.966 --> 00:23:14.356
workflow.

00:23:14.946 --> 00:23:16.136
So once you build an archive,

00:23:16.176 --> 00:23:17.306
you can open up the Xcode

00:23:17.306 --> 00:23:18.486
organizer like you see here and

00:23:19.306 --> 00:23:20.506
you can select distribute app

00:23:20.566 --> 00:23:21.536
just like you did before with

00:23:21.536 --> 00:23:22.236
Developer ID.

00:23:23.566 --> 00:23:27.246
Select Developer ID and then use

00:23:27.246 --> 00:23:28.536
the upload option to submit a

00:23:28.536 --> 00:23:29.836
copy to the Notary Service.

00:23:30.346 --> 00:23:33.306
You'll see a progress bar during

00:23:33.306 --> 00:23:35.626
the upload and after everything

00:23:35.626 --> 00:23:37.126
is complete, you'll get dropped

00:23:37.126 --> 00:23:38.586
back into the organizer and

00:23:38.586 --> 00:23:39.956
you'll notice that the status

00:23:40.086 --> 00:23:41.566
has changed to processing.

00:23:45.086 --> 00:23:46.216
Once the Notary Service is

00:23:46.216 --> 00:23:48.386
complete, you're going to push

00:23:48.386 --> 00:23:51.056
notification to Xcode and when

00:23:51.056 --> 00:23:52.306
you come back to the organizer,

00:23:52.656 --> 00:23:53.706
you'll note that the status is

00:23:53.706 --> 00:23:55.856
changed to ready distribute and

00:23:55.856 --> 00:23:57.446
in the lower right corner, the

00:23:57.446 --> 00:23:59.426
export notarized app is now

00:23:59.426 --> 00:23:59.826
available.

00:24:01.276 --> 00:24:02.586
When you click export notarized

00:24:02.586 --> 00:24:04.216
app, Xcode will take care of

00:24:04.216 --> 00:24:06.496
stapling the app for you and

00:24:06.496 --> 00:24:07.796
what you get is completely ready

00:24:07.796 --> 00:24:08.496
for distribution.

00:24:09.926 --> 00:24:10.766
Now we'll talk a little more

00:24:10.766 --> 00:24:12.026
about how you can verify that

00:24:12.026 --> 00:24:13.696
yourself later because that's a

00:24:13.696 --> 00:24:15.086
shared workflow between custom

00:24:15.086 --> 00:24:16.476
workflows and Xcode.

00:24:17.766 --> 00:24:20.636
Now, if you don't use Xcode,

00:24:21.266 --> 00:24:23.496
submitting with custom workflows

00:24:23.556 --> 00:24:24.316
is equally easy.

00:24:24.956 --> 00:24:25.586
The first thing you need to

00:24:25.586 --> 00:24:27.176
think about is what you want to

00:24:27.176 --> 00:24:28.296
submit to the Notary Service.

00:24:29.266 --> 00:24:31.146
Now the Notary Service accepts 3

00:24:31.146 --> 00:24:33.466
main formats; disk images,

00:24:33.726 --> 00:24:35.656
installer packages and zip

00:24:35.656 --> 00:24:36.266
archives.

00:24:36.946 --> 00:24:38.466
So if your build output is

00:24:38.466 --> 00:24:39.996
anything but one of these 3,

00:24:40.526 --> 00:24:41.706
you'll need to convert it to one

00:24:41.706 --> 00:24:42.956
of these 3 formats before you

00:24:42.956 --> 00:24:44.136
send it to the Notary Service.

00:24:44.666 --> 00:24:47.676
And remember that when you're

00:24:47.676 --> 00:24:49.196
creating a zip archive it's

00:24:49.196 --> 00:24:51.026
important to include macOS

00:24:51.026 --> 00:24:52.896
specific metadata like extended

00:24:52.896 --> 00:24:53.536
attributes.

00:24:54.126 --> 00:24:55.136
If you don't know what tools to

00:24:55.136 --> 00:24:56.456
use, there is support in ditto

00:24:56.456 --> 00:24:57.446
and Archive Utility built into

00:24:57.446 --> 00:24:57.976
the operating system.

00:25:01.776 --> 00:25:03.726
Now one other thing to think

00:25:03.726 --> 00:25:05.496
about is if you actually have a

00:25:05.496 --> 00:25:07.266
custom installer and custom

00:25:07.266 --> 00:25:08.356
installers can be a little bit

00:25:08.356 --> 00:25:10.116
trickier if they pull down

00:25:10.116 --> 00:25:11.386
content from the Internet as

00:25:11.386 --> 00:25:13.556
part of their installation or if

00:25:13.556 --> 00:25:14.806
you use custom packaging

00:25:14.856 --> 00:25:15.436
formats.

00:25:16.426 --> 00:25:17.816
If you have a custom installer

00:25:17.816 --> 00:25:19.346
that does one of these things,

00:25:19.736 --> 00:25:21.296
you may need to perform 2-step

00:25:21.296 --> 00:25:23.846
notarization where you actually

00:25:23.846 --> 00:25:25.046
take all the content as it's

00:25:25.046 --> 00:25:27.146
going to arrive on disk, submit

00:25:27.146 --> 00:25:28.546
that for notarization using one

00:25:28.546 --> 00:25:29.856
of the 3 supported formats,

00:25:30.426 --> 00:25:32.296
staple it up and then you submit

00:25:32.296 --> 00:25:33.306
your custom installer app

00:25:33.306 --> 00:25:33.736
separately.

00:25:34.346 --> 00:25:37.206
So now that you know what you

00:25:37.206 --> 00:25:38.066
want to submit to the Notary

00:25:38.066 --> 00:25:40.026
Service, how do you actually do

00:25:40.386 --> 00:25:40.453
it?

00:25:40.516 --> 00:25:42.606
Well, Xcode 10 and newer

00:25:43.106 --> 00:25:44.336
contains a command line tool

00:25:44.336 --> 00:25:45.646
called altool that's generally

00:25:45.646 --> 00:25:46.566
used for interacting with the

00:25:46.566 --> 00:25:47.336
Notary Service.

00:25:47.906 --> 00:25:49.066
If you do have multiple versions

00:25:49.066 --> 00:25:50.026
of Xcode, you'll want to use

00:25:50.026 --> 00:25:51.186
Xcode select to make sure that

00:25:51.186 --> 00:25:52.506
you've selected Xcode 10 or

00:25:52.506 --> 00:25:54.546
later and then you can use

00:25:54.726 --> 00:25:56.666
altool with the notarized app

00:25:57.106 --> 00:25:57.506
command.

00:25:58.496 --> 00:25:59.806
With that you'll need to pass in

00:25:59.806 --> 00:26:02.146
the primary bundle ID along with

00:26:02.496 --> 00:26:03.656
the file that you want upload.

00:26:04.726 --> 00:26:05.916
You will need to authenticate

00:26:05.916 --> 00:26:08.056
with your Apple ID, but if you

00:26:08.056 --> 00:26:09.096
look at the main page you'll see

00:26:09.096 --> 00:26:10.046
the options for using the

00:26:10.046 --> 00:26:11.256
keychain or environment

00:26:11.256 --> 00:26:12.476
variables so you don't need to

00:26:12.476 --> 00:26:13.446
always type in your password.

00:26:14.006 --> 00:26:16.736
When notarization upload is

00:26:16.736 --> 00:26:18.676
complete, you'll get a request

00:26:18.676 --> 00:26:19.186
to UID.

00:26:20.066 --> 00:26:21.906
This is a UID that represents

00:26:22.096 --> 00:26:24.206
your submission, which you can

00:26:24.206 --> 00:26:26.526
turn around and use with the

00:26:26.526 --> 00:26:28.636
notarization info command also

00:26:28.636 --> 00:26:30.576
as part of altool to check on

00:26:30.576 --> 00:26:32.886
the status of processing and

00:26:32.886 --> 00:26:34.006
this is how you can find out

00:26:34.286 --> 00:26:35.686
when your notarization is

00:26:35.686 --> 00:26:38.346
complete and what the status

00:26:38.346 --> 00:26:38.646
was.

00:26:39.766 --> 00:26:40.656
Here's an example of a

00:26:40.656 --> 00:26:43.566
successful notarization and one

00:26:43.566 --> 00:26:44.916
important thing in here is the

00:26:44.916 --> 00:26:46.026
log file URL.

00:26:46.676 --> 00:26:47.446
Regardless of whether

00:26:47.446 --> 00:26:49.166
notarization was successful or

00:26:49.166 --> 00:26:51.116
had issues you can take a look

00:26:51.116 --> 00:26:52.556
inside of the log file URL to

00:26:52.556 --> 00:26:53.416
learn a little bit more.

00:26:53.416 --> 00:26:56.676
Now the log file URLs are not

00:26:56.676 --> 00:26:57.376
long-lived.

00:26:58.286 --> 00:26:59.656
They only work for about a day.

00:27:00.266 --> 00:27:01.446
So really you probably want to

00:27:01.446 --> 00:27:02.636
pass around a new UID and

00:27:03.076 --> 00:27:04.456
whatever you call notarization

00:27:04.456 --> 00:27:05.916
info you'll get a new log file

00:27:05.916 --> 00:27:05.983
URL.

00:27:09.786 --> 00:27:11.646
Here's an example Json log from

00:27:11.646 --> 00:27:12.806
a successful processing.

00:27:13.726 --> 00:27:15.386
Notice that the status was

00:27:15.386 --> 00:27:15.896
accepted.

00:27:16.906 --> 00:27:18.906
Now if this had failed, the

00:27:18.906 --> 00:27:19.796
thing that you really want to

00:27:19.796 --> 00:27:21.596
look at here is the issues

00:27:22.766 --> 00:27:23.026
array.

00:27:23.026 --> 00:27:24.256
In a successful notarization,

00:27:24.256 --> 00:27:25.286
this will generally be empty,

00:27:26.186 --> 00:27:27.906
but if something failed, there

00:27:27.906 --> 00:27:29.566
will be object in here and each

00:27:29.566 --> 00:27:31.116
one represents some failure

00:27:31.316 --> 00:27:32.166
during notarization.

00:27:32.166 --> 00:27:33.976
It will indicate things like

00:27:34.176 --> 00:27:35.236
which binary may not have

00:27:35.236 --> 00:27:37.586
adopted the hardened runtime or

00:27:37.886 --> 00:27:38.916
if something wasn't signed

00:27:38.916 --> 00:27:39.396
properly.

00:27:40.356 --> 00:27:41.696
So this will be the key if

00:27:41.696 --> 00:27:42.576
anything was rejected.

00:27:43.086 --> 00:27:45.866
If it was successful, you'll

00:27:45.866 --> 00:27:47.166
probably want to look in the

00:27:47.166 --> 00:27:49.176
ticket contents especially if

00:27:49.176 --> 00:27:50.166
you do anything interesting

00:27:50.166 --> 00:27:51.316
around how you package your

00:27:51.316 --> 00:27:51.806
software.

00:27:52.656 --> 00:27:54.136
The ticket content should list

00:27:54.136 --> 00:27:55.936
every binary that was discovered

00:27:55.936 --> 00:27:57.816
by the Notary Service and,

00:27:57.816 --> 00:27:59.116
therefore, every binary whose

00:27:59.116 --> 00:28:00.816
information is included in the

00:28:00.816 --> 00:28:01.826
ticket that you'll staple.

00:28:02.826 --> 00:28:03.906
So if you notice that anything

00:28:03.906 --> 00:28:04.836
is missing in the ticket

00:28:04.836 --> 00:28:07.386
contents, you may need to try to

00:28:07.576 --> 00:28:08.896
figure out what went wrong and

00:28:08.896 --> 00:28:09.436
try it again.

00:28:10.476 --> 00:28:12.896
Now regardless of whether you

00:28:12.896 --> 00:28:14.966
use Xcode or altool when the

00:28:14.966 --> 00:28:16.006
Notary Service is done

00:28:16.006 --> 00:28:18.166
processing a submission, you'll

00:28:18.166 --> 00:28:18.716
get an email.

00:28:19.526 --> 00:28:20.746
Here's an example of a success

00:28:20.746 --> 00:28:22.646
email indicating that this

00:28:22.646 --> 00:28:24.286
software is ready for stapling.

00:28:24.876 --> 00:28:27.586
Which brings us to the next

00:28:28.336 --> 00:28:28.466
step.

00:28:30.006 --> 00:28:32.106
Stapling uses a tool also built

00:28:32.106 --> 00:28:33.946
into Xcode 10 and newer called

00:28:34.176 --> 00:28:34.606
Stapler.

00:28:35.416 --> 00:28:36.656
Here you can see an example of

00:28:36.656 --> 00:28:38.856
stapler with a staple command

00:28:39.906 --> 00:28:40.946
that can be used to staple

00:28:40.946 --> 00:28:43.356
directly to a package or a disk

00:28:43.356 --> 00:28:43.726
image.

00:28:44.206 --> 00:28:46.496
Now note that you can't staple

00:28:46.496 --> 00:28:48.156
directly to zip files so you'll

00:28:48.156 --> 00:28:49.636
need to unpack the zip file,

00:28:50.026 --> 00:28:51.376
staple the contents of the zip

00:28:51.376 --> 00:28:53.126
file and then you can package it

00:28:53.126 --> 00:28:54.156
back up for distribution.

00:28:57.486 --> 00:28:59.226
And note that stapling of

00:28:59.356 --> 00:29:01.856
command line tools and libraries

00:29:01.916 --> 00:29:03.966
is not supported right now even

00:29:03.966 --> 00:29:05.386
though these items still can and

00:29:05.386 --> 00:29:06.336
should be notarized.

00:29:10.336 --> 00:29:12.326
Now, after you staple the next

00:29:12.326 --> 00:29:13.326
step is to verify that

00:29:13.326 --> 00:29:14.226
everything was successfully

00:29:14.226 --> 00:29:16.586
notarized and this step varies a

00:29:16.586 --> 00:29:17.756
little bit based on what you

00:29:17.756 --> 00:29:19.546
want to verify, but the first

00:29:19.546 --> 00:29:20.086
thing is simple.

00:29:20.086 --> 00:29:21.226
If you really just want to check

00:29:21.226 --> 00:29:22.506
that something has been stapled,

00:29:23.136 --> 00:29:24.176
you can use the Stapler tool

00:29:24.176 --> 00:29:24.496
again.

00:29:25.106 --> 00:29:26.706
Here you can see the stapler

00:29:26.706 --> 00:29:28.546
tool with the validate command

00:29:29.046 --> 00:29:30.096
to check that an item has been

00:29:30.286 --> 00:29:33.566
properly stapled, but what about

00:29:33.566 --> 00:29:34.326
if you want to verify

00:29:34.326 --> 00:29:36.146
notarization on something that

00:29:36.596 --> 00:29:38.636
you didn't put up for stapling

00:29:38.816 --> 00:29:39.736
or that you didn't staple

00:29:39.736 --> 00:29:40.146
yourself?

00:29:40.706 --> 00:29:41.376
Well, then you will want to

00:29:41.376 --> 00:29:43.586
generally use the SPCTL command,

00:29:44.026 --> 00:29:45.716
which is a tool built into macOS

00:29:46.616 --> 00:29:47.766
that runs gatekeeper

00:29:47.766 --> 00:29:48.396
assessments.

00:29:48.936 --> 00:29:51.696
And this does vary slightly

00:29:51.696 --> 00:29:53.246
based on what you want to check

00:29:53.246 --> 00:29:55.006
for notarization, but if you

00:29:55.006 --> 00:29:56.416
want to check an application

00:29:56.416 --> 00:29:58.856
bundle, you can use the SPCTL

00:29:58.856 --> 00:30:01.466
command with the assess option

00:30:02.316 --> 00:30:04.666
and the verbose output and path

00:30:04.826 --> 00:30:06.026
to the app to the application.

00:30:07.296 --> 00:30:08.786
The source will tell you whether

00:30:08.786 --> 00:30:09.756
or not it was notarized.

00:30:10.656 --> 00:30:11.956
Notarized Developer ID means

00:30:11.956 --> 00:30:12.786
that it was successfully

00:30:12.786 --> 00:30:13.986
notarized and if it shows

00:30:13.986 --> 00:30:15.706
anything else, that mean that it

00:30:15.706 --> 00:30:16.566
wasn't notarized.

00:30:17.036 --> 00:30:20.086
If instead you want to check an

00:30:20.086 --> 00:30:21.046
installer package for

00:30:21.046 --> 00:30:24.616
notarization, you can use the

00:30:24.616 --> 00:30:26.446
SPCTL command just like before

00:30:26.446 --> 00:30:27.806
but with the additional type

00:30:27.866 --> 00:30:29.666
option and passing that it's an

00:30:29.666 --> 00:30:30.176
install.

00:30:31.446 --> 00:30:32.436
Again, this will show you the

00:30:32.436 --> 00:30:33.976
source and if it was

00:30:33.976 --> 00:30:35.066
successfully notarized you'll

00:30:35.066 --> 00:30:37.186
see notarized Developer ID.

00:30:39.856 --> 00:30:42.586
Next what if you want to check

00:30:42.586 --> 00:30:44.766
notarization on a signed disk

00:30:44.766 --> 00:30:45.186
image?

00:30:46.796 --> 00:30:48.206
Well, you can use a fairly

00:30:48.206 --> 00:30:49.766
similar command except now you

00:30:49.766 --> 00:30:52.186
want to use the type open and

00:30:52.186 --> 00:30:53.846
you need to pass in the context

00:30:54.346 --> 00:30:55.596
that's listed here on the slide.

00:30:56.726 --> 00:30:57.866
That will show you the same

00:30:57.866 --> 00:31:00.366
output as before and if it says

00:31:00.366 --> 00:31:01.586
notarized Developer ID,

00:31:01.946 --> 00:31:03.146
notarization was successful for

00:31:03.146 --> 00:31:03.966
that signed disk image.

00:31:05.546 --> 00:31:06.246
If you want to check

00:31:06.246 --> 00:31:08.006
notarization status of anything

00:31:08.006 --> 00:31:09.736
else, you'll need to fall back

00:31:09.736 --> 00:31:11.766
to using the codesign command.

00:31:13.456 --> 00:31:14.726
Here's an example of using the

00:31:14.726 --> 00:31:17.126
codesign command with the verify

00:31:17.126 --> 00:31:21.316
function verbose output, testing

00:31:21.316 --> 00:31:22.706
a very specific requirement,

00:31:23.226 --> 00:31:25.306
notarized and then a path to the

00:31:25.306 --> 00:31:26.376
binary or the thing that you're

00:31:26.376 --> 00:31:29.086
trying to check and the third

00:31:29.086 --> 00:31:30.126
line of the output will say

00:31:30.126 --> 00:31:31.896
explicit requirements satisfied

00:31:32.276 --> 00:31:33.206
indicating that the test

00:31:33.206 --> 00:31:34.506
requirement you passed in on the

00:31:34.506 --> 00:31:35.976
command line was successfully

00:31:35.976 --> 00:31:37.586
satisfied, which in this case

00:31:37.586 --> 00:31:39.406
means the binary was notarized.

00:31:40.536 --> 00:31:42.366
If it says that the explicit

00:31:42.366 --> 00:31:44.126
requirement failed, that means

00:31:44.126 --> 00:31:45.386
the binary wasn't successfully

00:31:45.386 --> 00:31:45.936
notarized.

00:31:46.546 --> 00:31:50.056
So that's everything about

00:31:50.266 --> 00:31:51.366
verifying notarization.

00:31:51.816 --> 00:31:53.176
I want to jump back and hit on

00:31:53.176 --> 00:31:55.586
one other usage of altool that I

00:31:55.586 --> 00:31:56.636
mentioned very early in the

00:31:56.636 --> 00:31:57.226
presentation.

00:31:58.636 --> 00:32:00.386
Altool is also able to give you

00:32:00.386 --> 00:32:02.506
a notarization history using the

00:32:02.506 --> 00:32:04.646
notarization history command of

00:32:04.646 --> 00:32:06.006
all of the software that's been

00:32:06.006 --> 00:32:07.706
submitted for notarization on

00:32:07.706 --> 00:32:08.226
your account.

00:32:09.406 --> 00:32:10.446
Here you can see an example of

00:32:10.446 --> 00:32:12.146
the command and an example of

00:32:12.146 --> 00:32:12.576
the output.

00:32:13.156 --> 00:32:14.546
It also accepts pagination so

00:32:14.546 --> 00:32:15.776
that you can paginate through

00:32:15.776 --> 00:32:16.716
all of the submissions that have

00:32:16.716 --> 00:32:17.666
been made.

00:32:19.906 --> 00:32:21.056
I know that that was a lot of

00:32:21.056 --> 00:32:22.386
information to digest in one

00:32:22.806 --> 00:32:26.316
short talk, but there's a few

00:32:26.316 --> 00:32:27.586
important things I really want

00:32:27.586 --> 00:32:28.356
you to take away from this

00:32:28.356 --> 00:32:28.856
conversation.

00:32:29.776 --> 00:32:31.916
First, it's really important to

00:32:31.916 --> 00:32:33.896
sign your software properly

00:32:34.286 --> 00:32:35.786
using inside out codesigning.

00:32:36.576 --> 00:32:37.846
This is important not just so

00:32:37.846 --> 00:32:39.286
that gatekeeper can verify your

00:32:39.286 --> 00:32:40.326
software hasn't been tempered

00:32:40.326 --> 00:32:42.746
with but also for notarization.

00:32:45.816 --> 00:32:48.036
Second, don't take hardened

00:32:48.036 --> 00:32:49.576
runtime entitlements that you

00:32:49.576 --> 00:32:50.126
don't need.

00:32:50.866 --> 00:32:52.266
Think about the benefit that the

00:32:52.266 --> 00:32:53.336
hardened runtime provides to

00:32:53.336 --> 00:32:55.206
your app and your users and

00:32:55.206 --> 00:32:56.546
remember that every entitlement

00:32:56.546 --> 00:32:58.476
you take reduces the security of

00:32:58.476 --> 00:32:59.246
your application.

00:32:59.746 --> 00:33:01.216
So only take those that you

00:33:01.766 --> 00:33:01.866
need.

00:33:03.646 --> 00:33:05.996
Finally notarize and staple all

00:33:05.996 --> 00:33:07.166
the software that you distribute

00:33:07.566 --> 00:33:09.386
so that it passes gatekeeper in

00:33:09.386 --> 00:33:10.146
macOS Catalina.

00:33:13.516 --> 00:33:15.296
Thanks for attending, and if

00:33:15.296 --> 00:33:16.086
you're interested in talking

00:33:16.086 --> 00:33:17.536
more about notarization, please

00:33:17.536 --> 00:33:18.796
come to the notarization lab

00:33:18.796 --> 00:33:19.596
that's going to be following

00:33:19.596 --> 00:33:20.736
this session immediately at 4

00:33:20.736 --> 00:33:21.096
o'clock.

00:33:21.586 --> 00:33:23.076
Also, there are a couple of

00:33:23.076 --> 00:33:24.666
other labs running throughout

00:33:24.666 --> 00:33:25.856
the week where we can talk more

00:33:25.856 --> 00:33:27.496
about security, notarization and

00:33:27.496 --> 00:33:27.726
signing.

00:33:28.516 --> 00:33:28.976
So thank you.

00:33:29.516 --> 00:33:36.500
[ Applause ]