WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:09.516 --> 00:00:17.276
[ Applause ]

00:00:17.776 --> 00:00:18.956
>> Good afternoon.

00:00:19.546 --> 00:00:20.826
My name is Tanu Singhal.

00:00:20.826 --> 00:00:22.466
I'm here with my colleague

00:00:22.466 --> 00:00:25.356
Raleigh, and today we'll talk

00:00:25.356 --> 00:00:26.966
about Integrating SwiftUI.

00:00:30.136 --> 00:00:32.305
Our first goal today is to help

00:00:32.336 --> 00:00:35.226
you add SwiftUI in your existing

00:00:36.716 --> 00:00:36.896
apps.

00:00:37.136 --> 00:00:39.306
Next, we'll learn to embed

00:00:39.656 --> 00:00:42.056
UIKit, AppKit and WatchKit views

00:00:42.346 --> 00:00:43.116
in SwiftUI.

00:00:44.776 --> 00:00:46.606
Later, we'll talk about

00:00:46.606 --> 00:00:48.406
strategies for setting up your

00:00:48.406 --> 00:00:50.636
data model so that works well

00:00:50.636 --> 00:00:51.226
with SwiftUI.

00:00:52.756 --> 00:00:54.966
And finally, we'll learn to use

00:00:54.966 --> 00:00:56.906
drag and drop, the paste mode,

00:00:56.906 --> 00:00:58.826
and the focus system in SwiftUI

00:00:59.476 --> 00:01:00.926
so our apps integrate better

00:01:01.136 --> 00:01:02.366
with the entire system.

00:01:04.416 --> 00:01:07.696
It is incredibly easy to host

00:01:07.806 --> 00:01:09.456
SwiftUI content in your apps.

00:01:10.486 --> 00:01:13.456
We do this with the help of

00:01:13.456 --> 00:01:14.546
hosting controllers.

00:01:15.266 --> 00:01:18.816
A hosting controller can be used

00:01:18.816 --> 00:01:21.116
to set your SwiftUI views as the

00:01:21.326 --> 00:01:24.196
content of a ViewController or

00:01:24.196 --> 00:01:25.446
InterfaceController.

00:01:25.836 --> 00:01:28.826
Hosting controllers are

00:01:28.826 --> 00:01:30.326
available on all three

00:01:30.386 --> 00:01:31.046
frameworks.

00:01:31.606 --> 00:01:35.876
Let's take a closer look at the

00:01:35.876 --> 00:01:38.426
UIHostingController first.

00:01:39.216 --> 00:01:41.226
The UIHostingController is a

00:01:41.226 --> 00:01:43.786
subclass of UIViewController.

00:01:45.196 --> 00:01:47.166
It has an initializer that takes

00:01:47.166 --> 00:01:48.646
a single parameter called

00:01:48.646 --> 00:01:49.516
rootView.

00:01:50.656 --> 00:01:52.376
This is where we pass our

00:01:52.376 --> 00:01:53.486
SwiftUI view.

00:01:54.086 --> 00:01:56.556
Once the hosting controller is

00:01:56.626 --> 00:01:59.076
initialized, it can be presented

00:01:59.076 --> 00:02:01.606
via code or storyboard just like

00:02:01.606 --> 00:02:02.916
any other view controller.

00:02:05.376 --> 00:02:08.096
For Mac, we have the

00:02:08.096 --> 00:02:10.186
NSHostingController which is

00:02:10.346 --> 00:02:12.646
used to present SwiftUI content

00:02:12.986 --> 00:02:14.436
in an NSViewController.

00:02:14.436 --> 00:02:18.236
Now, if you're a Mac developer,

00:02:18.636 --> 00:02:19.946
you may not always want to

00:02:19.946 --> 00:02:21.496
present an entire view

00:02:21.496 --> 00:02:22.156
controller.

00:02:23.106 --> 00:02:25.626
Perhaps, you want to embed a

00:02:25.626 --> 00:02:27.636
small SwiftUI view in your

00:02:27.636 --> 00:02:29.776
existing AppKit view hierarchy.

00:02:31.306 --> 00:02:33.566
For this, we have the

00:02:33.566 --> 00:02:34.306
NSHostingView.

00:02:35.356 --> 00:02:38.356
The NSHostingView is a subclass

00:02:38.356 --> 00:02:41.296
of NSView and it can be used to

00:02:41.296 --> 00:02:44.426
present SwiftUI views directly

00:02:44.486 --> 00:02:46.076
in AppKit view hierarchies.

00:02:46.756 --> 00:02:51.136
If you're using Auto Layout, we

00:02:51.136 --> 00:02:52.706
automatically respect the

00:02:52.766 --> 00:02:54.636
content size preferences of your

00:02:54.636 --> 00:02:57.176
SwiftUI views and your layout

00:02:57.176 --> 00:02:59.256
will look as you expect.

00:03:00.386 --> 00:03:03.336
Auto Layout also works well when

00:03:03.336 --> 00:03:05.696
using container views to embed

00:03:05.696 --> 00:03:07.566
UIHostingControllers or

00:03:07.956 --> 00:03:09.916
NSHostingControllers in your

00:03:09.916 --> 00:03:12.666
existing AppKit or UIKit view

00:03:12.666 --> 00:03:13.366
hierarchies.

00:03:15.826 --> 00:03:19.536
For watchOS developers, we have

00:03:19.536 --> 00:03:21.396
the WKHostingController.

00:03:22.956 --> 00:03:25.006
To use this, you first create a

00:03:25.106 --> 00:03:27.756
subclass, and in the subclass.

00:03:28.126 --> 00:03:30.506
we return the SwiftUI view from

00:03:30.506 --> 00:03:31.076
the body.

00:03:32.366 --> 00:03:35.966
Next, go to the storyboard and

00:03:35.966 --> 00:03:37.916
select any interface controller

00:03:37.916 --> 00:03:39.106
or hosting controller.

00:03:39.756 --> 00:03:43.296
From the identity inspector, set

00:03:43.296 --> 00:03:45.296
the class as your custom

00:03:45.336 --> 00:03:46.616
subclass for the

00:03:46.616 --> 00:03:47.876
WKHostingController.

00:03:49.436 --> 00:03:50.966
Now, this hosting controller can

00:03:50.966 --> 00:03:53.196
be used like any other interface

00:03:53.196 --> 00:03:53.786
controller.

00:03:54.636 --> 00:03:57.296
If you need to invalidate the

00:03:57.296 --> 00:03:58.946
body due to a change occurring

00:03:59.176 --> 00:04:01.566
on the WatchKit side, you can do

00:04:01.566 --> 00:04:02.946
that by using the

00:04:03.076 --> 00:04:05.186
setNeedsBodyUpdate and the

00:04:05.186 --> 00:04:07.826
updateBodyIfNeeded methods.

00:04:08.846 --> 00:04:12.386
It is also easy to use SwiftUI

00:04:12.556 --> 00:04:14.556
content in dynamic interactive

00:04:14.556 --> 00:04:15.406
notifications.

00:04:16.026 --> 00:04:18.366
For this, we use the

00:04:18.366 --> 00:04:20.036
WKUserNotification

00:04:20.036 --> 00:04:23.396
HostingController, and again we

00:04:23.466 --> 00:04:25.376
first return to SwiftUI View

00:04:25.426 --> 00:04:27.996
from the body and this body gets

00:04:28.246 --> 00:04:30.276
updated every time the

00:04:30.276 --> 00:04:32.146
didReceive notification method

00:04:32.186 --> 00:04:32.856
is called.

00:04:35.476 --> 00:04:37.356
To learn more about building

00:04:37.356 --> 00:04:40.026
Watch apps with SwiftUI, check

00:04:40.026 --> 00:04:41.976
out the SwiftUI on watchOS

00:04:42.936 --> 00:04:43.086
session.

00:04:45.136 --> 00:04:47.276
Now, let's take a look at an

00:04:47.276 --> 00:04:49.406
example App where we would need

00:04:49.406 --> 00:04:50.946
to use hosting controllers.

00:04:51.086 --> 00:04:54.396
I went to buy some plants the

00:04:54.396 --> 00:04:56.216
other day and I learned so much

00:04:56.276 --> 00:04:58.786
about different plants and trees

00:04:59.306 --> 00:05:00.556
that I decided to build an app

00:05:01.336 --> 00:05:02.856
to catalog these plants.

00:05:03.456 --> 00:05:06.476
I started building my app using

00:05:06.476 --> 00:05:09.566
UIKit and what you see here is a

00:05:09.636 --> 00:05:10.986
standard UIKit table view

00:05:10.986 --> 00:05:11.546
controller.

00:05:11.546 --> 00:05:15.416
Then, I learned about SwiftUI

00:05:15.416 --> 00:05:18.406
and I created a details view for

00:05:18.406 --> 00:05:20.176
my app using SwiftUI.

00:05:20.176 --> 00:05:23.806
Now, we haven't added any code

00:05:24.266 --> 00:05:25.566
to navigate from my

00:05:25.616 --> 00:05:27.176
UIKitTableViewController to

00:05:27.176 --> 00:05:27.586
SwiftUI.

00:05:27.586 --> 00:05:31.386
Let's go into a demo and see how

00:05:31.386 --> 00:05:32.386
we can set this up.

00:05:47.166 --> 00:05:49.566
Here, we have our SwiftUI view

00:05:50.086 --> 00:05:51.476
which is used to present our

00:05:51.476 --> 00:05:52.326
details view.

00:05:52.946 --> 00:05:54.316
And this is the view we want to

00:05:54.316 --> 00:05:56.396
navigate to when we tap in our

00:05:56.396 --> 00:05:56.846
table.

00:05:57.896 --> 00:05:59.406
So let's go to the storyboard

00:06:00.266 --> 00:06:05.236
and the storyboard will go into

00:06:05.236 --> 00:06:07.506
the Library and find a hosting

00:06:07.506 --> 00:06:08.306
view controller.

00:06:09.166 --> 00:06:11.016
Let's drag this in our

00:06:11.016 --> 00:06:11.696
storyboard.

00:06:12.436 --> 00:06:14.876
I'll select this cell in the

00:06:14.876 --> 00:06:17.016
table, hold down the Control

00:06:17.016 --> 00:06:19.016
key, and drag to the hosting

00:06:19.016 --> 00:06:19.566
controller.

00:06:20.536 --> 00:06:22.016
We'll select the Show segue.

00:06:23.566 --> 00:06:25.806
Now, we need to add content to

00:06:25.806 --> 00:06:26.996
this hosting controller.

00:06:27.806 --> 00:06:29.216
So let's open our table view

00:06:29.216 --> 00:06:30.446
controller on the side.

00:06:31.106 --> 00:06:34.746
Let me hide some of these panels

00:06:34.786 --> 00:06:35.856
to make more space.

00:06:39.216 --> 00:06:40.846
I'll now select the segue we

00:06:40.876 --> 00:06:43.066
just created, hold the Control

00:06:43.066 --> 00:06:44.466
key and drag into the view

00:06:44.466 --> 00:06:45.386
controller code.

00:06:46.096 --> 00:06:48.866
This creates an IBSegueAction.

00:06:50.656 --> 00:06:53.256
IBSegueActions are new in Xcode

00:06:53.256 --> 00:06:56.446
11 and they allow you to connect

00:06:56.756 --> 00:06:58.766
segues in the storyboard to your

00:06:58.766 --> 00:06:59.956
view controller's code.

00:07:00.876 --> 00:07:02.806
By using these, you can directly

00:07:02.806 --> 00:07:03.976
set properties in your

00:07:03.976 --> 00:07:05.496
destination view controllers

00:07:05.856 --> 00:07:07.016
without having to use the

00:07:07.076 --> 00:07:08.516
prepareForSegue method.

00:07:09.516 --> 00:07:12.786
[ Applause ]

00:07:13.286 --> 00:07:16.866
Thank you.

00:07:16.926 --> 00:07:18.436
Let's close the storyboard since

00:07:18.436 --> 00:07:21.406
we'll focus on the code.

00:07:21.596 --> 00:07:23.736
Here, I'll create an instance of

00:07:23.736 --> 00:07:24.836
our SwiftUI view.

00:07:26.266 --> 00:07:28.526
The rootView here is set to our

00:07:28.526 --> 00:07:30.546
PlantDetailsView which was our

00:07:30.546 --> 00:07:31.606
SwiftUI view.

00:07:32.796 --> 00:07:34.966
All we need to do is pass this

00:07:34.966 --> 00:07:36.906
rootView to the hosting

00:07:36.906 --> 00:07:38.446
controller's initializer.

00:07:38.786 --> 00:07:43.276
Now when we run our app, we'll

00:07:43.276 --> 00:07:44.816
be able to navigate from our

00:07:44.856 --> 00:07:47.976
UIKitTableViewController to our

00:07:47.976 --> 00:07:49.766
PlantDetailsView which is in

00:07:49.766 --> 00:07:50.316
SwiftUI.

00:07:54.516 --> 00:08:00.366
[ Applause ]

00:08:00.866 --> 00:08:03.916
We saw in this demo how easy it

00:08:03.916 --> 00:08:07.596
is to add SwiftUI to your apps.

00:08:08.586 --> 00:08:11.326
Next, we'll learn to embed views

00:08:11.376 --> 00:08:13.406
created with existing frameworks

00:08:13.676 --> 00:08:15.286
inside SwiftUI views.

00:08:16.046 --> 00:08:18.566
To do this, we use the

00:08:18.566 --> 00:08:20.146
representable protocol.

00:08:20.476 --> 00:08:22.696
The representable protocol

00:08:22.696 --> 00:08:25.256
allows us to present UIViews,

00:08:25.296 --> 00:08:27.696
NSViews, and WKInterfaceObject

00:08:27.946 --> 00:08:28.686
in SwiftUI.

00:08:30.646 --> 00:08:32.426
Additionally, we can also

00:08:32.426 --> 00:08:33.916
present view controllers in

00:08:33.916 --> 00:08:36.025
SwiftUI with the help of view

00:08:36.025 --> 00:08:37.166
controller representable

00:08:37.166 --> 00:08:37.826
protocols.

00:08:38.436 --> 00:08:42.236
The representable protocol has

00:08:42.366 --> 00:08:44.766
two required methods, the Make

00:08:44.766 --> 00:08:47.216
Method and the Update Method.

00:08:48.116 --> 00:08:50.876
The Make Method is where you

00:08:50.876 --> 00:08:52.426
create the view or controller

00:08:52.426 --> 00:08:53.846
that you want to present in

00:08:53.846 --> 00:08:54.376
SwiftUI.

00:08:55.646 --> 00:08:57.476
And the Update Method is where

00:08:57.476 --> 00:08:59.356
you update this view to the

00:08:59.356 --> 00:09:00.616
current configuration.

00:09:02.026 --> 00:09:04.386
During initialization, the Make

00:09:04.386 --> 00:09:06.406
Method is called first followed

00:09:06.406 --> 00:09:07.816
by the Update Method.

00:09:08.376 --> 00:09:11.136
The Update Method can be called

00:09:11.136 --> 00:09:13.426
multiple times whenever an

00:09:13.426 --> 00:09:15.396
update is requested by SwiftUI.

00:09:17.596 --> 00:09:19.786
Finally, we offer you with an

00:09:19.836 --> 00:09:22.326
optional Dismantle Method where

00:09:22.326 --> 00:09:24.196
you can put any clean up code

00:09:24.196 --> 00:09:25.946
that needs to run before your

00:09:25.946 --> 00:09:27.346
view or controller is removed.

00:09:27.346 --> 00:09:31.806
Let's now take a look at the

00:09:31.806 --> 00:09:33.726
Swift definitions of these

00:09:33.726 --> 00:09:34.256
methods.

00:09:34.856 --> 00:09:38.356
Notice that the Make, Update and

00:09:38.356 --> 00:09:40.336
Dismantle methods look and

00:09:40.336 --> 00:09:42.306
behave similarly across

00:09:42.346 --> 00:09:43.006
frameworks.

00:09:44.406 --> 00:09:47.236
For AppKit and UIKit, these

00:09:47.236 --> 00:09:49.196
protocols can be used to present

00:09:49.826 --> 00:09:51.826
views and view controllers in

00:09:51.826 --> 00:09:52.406
SwiftUI.

00:09:53.796 --> 00:09:56.336
For WatchKit, we can use the

00:09:56.336 --> 00:09:57.896
WKInterface representable

00:09:57.896 --> 00:10:00.856
protocol to present a subset of

00:10:00.856 --> 00:10:03.196
WKitInterfaceObjects in SwiftUI.

00:10:05.136 --> 00:10:06.536
You can look up the full list of

00:10:06.536 --> 00:10:08.686
supported WatchKitObjects on

00:10:08.686 --> 00:10:10.206
developer.apple.com.

00:10:10.896 --> 00:10:14.786
So as we mentioned, the Make and

00:10:14.786 --> 00:10:16.286
Update methods are the only two

00:10:16.286 --> 00:10:18.136
required methods that's all you

00:10:18.136 --> 00:10:20.746
need to use simply present your

00:10:20.746 --> 00:10:21.896
views in SwiftUI.

00:10:23.276 --> 00:10:26.256
However, views are often complex

00:10:26.666 --> 00:10:28.046
and you may want to do more than

00:10:28.046 --> 00:10:29.946
simply present them.

00:10:30.636 --> 00:10:32.986
Perhaps, you want to expose

00:10:32.986 --> 00:10:35.376
target action or delegation in

00:10:35.376 --> 00:10:39.776
SwiftUI, or you may want to read

00:10:40.236 --> 00:10:42.146
from the environment of SwiftUI

00:10:42.486 --> 00:10:43.706
and respond accordingly.

00:10:44.376 --> 00:10:47.016
It could also be useful to

00:10:47.016 --> 00:10:48.436
understand if there was an

00:10:48.436 --> 00:10:50.606
animation on your view.

00:10:51.916 --> 00:10:54.136
To enable you to create better

00:10:54.136 --> 00:10:56.256
integration between your views

00:10:56.286 --> 00:10:58.826
and SwiftUI, we have created the

00:10:58.826 --> 00:11:00.136
representable context.

00:11:00.876 --> 00:11:04.086
The representable context has

00:11:04.226 --> 00:11:05.086
three properties.

00:11:05.756 --> 00:11:07.826
The first is the coordinator

00:11:08.466 --> 00:11:10.226
which helps coordinate between

00:11:10.226 --> 00:11:11.696
your views and SwiftUI.

00:11:13.136 --> 00:11:14.826
The coordinator can be used to

00:11:14.826 --> 00:11:17.176
implement common patterns like

00:11:17.176 --> 00:11:19.116
delegation, data sources, and

00:11:19.116 --> 00:11:19.876
target action.

00:11:21.326 --> 00:11:23.366
The next property is the

00:11:23.366 --> 00:11:25.636
environment which will help you

00:11:25.636 --> 00:11:26.696
read about SwiftUI's

00:11:26.696 --> 00:11:27.826
environment.

00:11:28.546 --> 00:11:29.436
This could be the system

00:11:29.436 --> 00:11:31.736
environment like color scheme or

00:11:31.736 --> 00:11:34.306
size classes or clear direction.

00:11:35.186 --> 00:11:37.056
Or it could be app-defined

00:11:37.556 --> 00:11:39.116
custom environment properties.

00:11:40.596 --> 00:11:42.516
Finally, the transaction

00:11:42.516 --> 00:11:45.296
property let's our views know

00:11:45.296 --> 00:11:46.706
whether or not there was an

00:11:46.706 --> 00:11:48.426
animation in SwiftUI.

00:11:49.396 --> 00:11:52.516
The representable context is

00:11:52.516 --> 00:11:54.666
available for views, view

00:11:54.666 --> 00:11:56.526
controllers as well as interface

00:11:56.556 --> 00:11:57.206
controllers.

00:11:59.336 --> 00:12:02.016
Now, let's take another look at

00:12:02.016 --> 00:12:03.336
the representable protocol

00:12:03.336 --> 00:12:04.416
diagram that we saw.

00:12:05.886 --> 00:12:07.826
In the Make and Update methods,

00:12:08.286 --> 00:12:10.486
we passed a parameter for the

00:12:10.486 --> 00:12:11.836
representable contexts.

00:12:13.116 --> 00:12:14.796
This context already has

00:12:14.796 --> 00:12:16.286
information about the

00:12:16.286 --> 00:12:18.096
environment and transaction.

00:12:19.396 --> 00:12:20.416
If you wish to use the

00:12:20.416 --> 00:12:22.436
coordinator however, you would

00:12:22.436 --> 00:12:23.816
have to create that yourself.

00:12:24.256 --> 00:12:26.426
That can be done using the

00:12:26.426 --> 00:12:28.336
optional Make Coordinator

00:12:28.976 --> 00:12:29.126
method.

00:12:29.676 --> 00:12:32.216
During initialization, the Make

00:12:32.216 --> 00:12:33.516
Coordinator method is called

00:12:33.646 --> 00:12:36.086
first followed by the Make View

00:12:36.086 --> 00:12:38.436
and Update View methods so that

00:12:38.926 --> 00:12:41.146
the coordinator is available to

00:12:41.146 --> 00:12:42.336
the context when you're

00:12:42.416 --> 00:12:43.576
configuring your views.

00:12:43.676 --> 00:12:47.456
It might be easier to understand

00:12:47.456 --> 00:12:49.226
these concepts with the help of

00:12:49.226 --> 00:12:49.956
an example.

00:12:51.406 --> 00:12:53.266
We'll take another look at our

00:12:53.266 --> 00:12:54.686
plants app and here's the

00:12:54.686 --> 00:12:56.536
details view that we saw before.

00:12:57.846 --> 00:12:59.126
This is a view created in

00:12:59.126 --> 00:12:59.576
SwiftUI.

00:12:59.576 --> 00:13:04.146
I've also created another view

00:13:04.316 --> 00:13:05.186
in UIKit.

00:13:06.116 --> 00:13:07.576
This is to present the ratings.

00:13:08.036 --> 00:13:11.236
What I want to do is embed my

00:13:11.236 --> 00:13:13.476
UIKit base ratings control

00:13:13.596 --> 00:13:15.386
inside my SwiftUI view.

00:13:15.386 --> 00:13:19.576
In addition to that, I also want

00:13:19.676 --> 00:13:22.456
to add a label in SwiftUI that

00:13:22.456 --> 00:13:24.056
can read the rating from my

00:13:24.056 --> 00:13:25.006
ratings control.

00:13:25.676 --> 00:13:28.656
We can do all this with the help

00:13:28.656 --> 00:13:30.546
of a UIViewRepresentable

00:13:30.546 --> 00:13:31.096
protocol.

00:13:31.616 --> 00:13:33.646
Let's go into a demo and set

00:13:33.686 --> 00:13:33.946
this up.

00:13:39.116 --> 00:13:41.286
In this project, I've included a

00:13:41.286 --> 00:13:43.996
UIKitRatingsControl which is my

00:13:43.996 --> 00:13:46.076
UIKit base view that renders

00:13:46.076 --> 00:13:47.106
those five stars.

00:13:47.906 --> 00:13:49.886
It is this view that we want to

00:13:49.886 --> 00:13:51.086
present in SwiftUI.

00:13:53.056 --> 00:13:55.406
The RatingsControlRepresentation

00:13:55.786 --> 00:13:57.746
is simply a wrapper around our

00:13:57.786 --> 00:14:00.256
UIKit view and it will enable us

00:14:00.326 --> 00:14:03.586
to present our UI view in

00:14:04.196 --> 00:14:04.426
SwiftUI.

00:14:04.536 --> 00:14:05.876
We've also added the two

00:14:05.876 --> 00:14:07.606
required methods for the

00:14:07.606 --> 00:14:09.506
UIViewRepresentable protocol,

00:14:09.786 --> 00:14:12.026
makeUIView and updateUIView.

00:14:12.616 --> 00:14:16.786
In the makeUIView method, all I

00:14:16.786 --> 00:14:19.046
need to do is create an instance

00:14:19.446 --> 00:14:21.466
of my UI view which is the

00:14:21.466 --> 00:14:24.056
UIKitRatingsControl here and

00:14:24.056 --> 00:14:25.186
return it.

00:14:25.796 --> 00:14:27.816
And with this code, I can start

00:14:27.816 --> 00:14:28.356
using the

00:14:28.356 --> 00:14:30.016
RatingsControlRepresentation

00:14:30.406 --> 00:14:31.406
inside SwiftUI.

00:14:32.576 --> 00:14:33.656
Let's take a look at the

00:14:33.656 --> 00:14:33.976
preview.

00:14:37.896 --> 00:14:40.126
These stars are being displayed

00:14:40.126 --> 00:14:40.766
by calling the

00:14:40.766 --> 00:14:42.676
RatingsControlRepresentation in

00:14:42.676 --> 00:14:45.186
SwiftUI which in turn presents

00:14:45.416 --> 00:14:46.916
my UIKit base view.

00:14:48.236 --> 00:14:50.026
Notice, however, that all the

00:14:50.026 --> 00:14:51.226
stars are grayed out.

00:14:51.726 --> 00:14:53.526
To set the highlighting

00:14:53.586 --> 00:14:55.196
correctly based on the rating,

00:14:55.746 --> 00:14:56.906
we would need to read this

00:14:56.906 --> 00:14:59.446
rating form SwiftUI and set it

00:14:59.506 --> 00:15:00.946
on our UIKit view.

00:15:01.516 --> 00:15:04.466
In our code, I've already added

00:15:04.516 --> 00:15:06.726
a binding for the rating so we

00:15:06.726 --> 00:15:08.316
can read this from SwiftUI.

00:15:08.316 --> 00:15:11.026
Now, let's go into our

00:15:11.126 --> 00:15:14.616
updateUIView method and set the

00:15:14.616 --> 00:15:17.146
rating on the UI view.

00:15:20.536 --> 00:15:23.176
Immediately, our stars highlight

00:15:23.396 --> 00:15:26.376
as we expect and we're reading

00:15:26.376 --> 00:15:27.866
this rating from SwiftUI.

00:15:29.516 --> 00:15:34.576
[ Applause ]

00:15:35.076 --> 00:15:35.276
Thank you.

00:15:35.276 --> 00:15:36.836
We'll go into the live mode for

00:15:36.836 --> 00:15:38.006
the last preview.

00:15:38.096 --> 00:15:41.066
In this preview, I've included a

00:15:41.066 --> 00:15:43.886
Clear button in SwiftUI which

00:15:43.886 --> 00:15:45.786
updates the rating to zero.

00:15:47.116 --> 00:15:48.876
Notice when I tap this, our

00:15:49.236 --> 00:15:51.616
UpdateUIView gets-- method gets

00:15:51.616 --> 00:15:53.126
called and the rating gets

00:15:53.126 --> 00:15:55.376
updated on our UI view.

00:15:56.006 --> 00:15:58.356
We can also tap on the stars to

00:15:58.356 --> 00:15:59.236
change the rating.

00:16:00.746 --> 00:16:02.146
When I tap on these stars

00:16:02.196 --> 00:16:04.406
though, the label on the right

00:16:04.616 --> 00:16:06.416
is not getting updated properly.

00:16:07.956 --> 00:16:10.916
The reason is that our UI view

00:16:10.946 --> 00:16:13.476
is changing-- is intrinsic value

00:16:13.476 --> 00:16:15.216
for the rating and is not

00:16:15.216 --> 00:16:17.396
conveying that back to SwiftUI.

00:16:18.936 --> 00:16:20.696
To address this, you would have

00:16:20.696 --> 00:16:23.016
to use a target action pattern.

00:16:23.866 --> 00:16:25.486
So we'll go ahead and implement

00:16:26.466 --> 00:16:26.566
that.

00:16:27.316 --> 00:16:28.906
To use the target action

00:16:28.906 --> 00:16:30.526
pattern, we need to add a

00:16:30.526 --> 00:16:31.286
coordinator.

00:16:31.286 --> 00:16:33.656
Let's create a coordinator here.

00:16:34.866 --> 00:16:37.796
This is simply an NSObject where

00:16:37.796 --> 00:16:40.386
we're storing the values that

00:16:40.386 --> 00:16:41.106
we're interested in.

00:16:41.106 --> 00:16:44.036
And we have an initializer to

00:16:44.116 --> 00:16:45.606
set the values that we care

00:16:45.606 --> 00:16:47.336
about which is just the rating

00:16:47.336 --> 00:16:47.606
here.

00:16:48.376 --> 00:16:51.936
Next, we've added a selector for

00:16:51.936 --> 00:16:53.946
the rating called ratingChanged

00:16:54.726 --> 00:16:55.786
which will get called through

00:16:55.786 --> 00:16:58.196
our target action pattern.

00:16:58.846 --> 00:17:00.816
And here, we simply set the

00:17:00.816 --> 00:17:03.026
rating of the coordinator to be

00:17:03.026 --> 00:17:04.976
the rating that we get from our

00:17:04.976 --> 00:17:05.386
UI view.

00:17:05.856 --> 00:17:08.136
We can now implement the

00:17:08.136 --> 00:17:09.675
makeCoordinator method.

00:17:10.986 --> 00:17:13.486
In this method, we simply return

00:17:13.546 --> 00:17:15.445
an instance of the coordinator

00:17:15.445 --> 00:17:17.175
and we're passing the rating

00:17:17.175 --> 00:17:18.455
binding from our

00:17:18.455 --> 00:17:20.056
RatingsControlRepresentation.

00:17:22.935 --> 00:17:24.906
Finally, we can use this

00:17:25.366 --> 00:17:27.066
coordinator in our makeUIView

00:17:27.066 --> 00:17:29.826
method and add the target.

00:17:30.656 --> 00:17:33.416
With this, our coordinators

00:17:33.416 --> 00:17:35.546
ratingChanged method gets called

00:17:35.656 --> 00:17:37.626
whenever the valueChanged event

00:17:37.626 --> 00:17:39.026
is triggered in UIKit.

00:17:40.216 --> 00:17:42.036
So we are ready to add this to

00:17:42.036 --> 00:17:42.916
our app now.

00:17:43.156 --> 00:17:44.426
I'll go into the

00:17:44.466 --> 00:17:47.606
PlantDetailsView, call the

00:17:47.606 --> 00:17:49.216
RatingsControlRepresentation

00:17:49.216 --> 00:17:53.026
here, and we can also set a

00:17:53.026 --> 00:17:54.906
frame that gets respected by

00:17:54.906 --> 00:17:55.526
UIKit.

00:17:56.446 --> 00:17:58.356
So let's resume the previews.

00:17:58.956 --> 00:18:02.636
I'll go into the live mode.

00:18:03.366 --> 00:18:06.956
And now when I tap on the stars,

00:18:07.696 --> 00:18:09.176
the value and the text label

00:18:09.176 --> 00:18:10.686
gets updated as we expect.

00:18:14.516 --> 00:18:18.500
[ Applause ]

00:18:21.076 --> 00:18:22.356
We hope you're excited about

00:18:22.356 --> 00:18:24.876
using SwiftUI in your apps.

00:18:24.876 --> 00:18:27.266
As a first step, go ahead and

00:18:27.266 --> 00:18:28.756
create some hosting controllers

00:18:29.036 --> 00:18:30.496
with SwiftUI content.

00:18:31.186 --> 00:18:33.186
It's really easy to add these to

00:18:33.276 --> 00:18:35.816
your apps using IBSegueActions.

00:18:36.556 --> 00:18:39.146
If you've already created views

00:18:39.366 --> 00:18:41.236
that you want to embed in your

00:18:41.346 --> 00:18:43.596
SwiftUI view hierarchy, you can

00:18:43.596 --> 00:18:44.836
check out the representable

00:18:44.836 --> 00:18:45.496
protocol.

00:18:46.456 --> 00:18:48.696
And finally, be sure to leverage

00:18:48.816 --> 00:18:50.716
the representable context for

00:18:50.716 --> 00:18:52.116
more advanced functionality.

00:18:53.376 --> 00:18:55.276
Next up, Raleigh will talk about

00:18:55.746 --> 00:18:57.306
integrating your data model with

00:18:57.306 --> 00:18:57.796
SwiftUI.

00:18:59.516 --> 00:19:04.896
[ Applause ]

00:19:05.396 --> 00:19:06.846
>> Thank you, Tanu.

00:19:07.686 --> 00:19:09.096
My name is Raleigh Ledet.

00:19:09.196 --> 00:19:10.876
I'm an engineer on both SwiftUI

00:19:11.106 --> 00:19:11.826
and on AppKit.

00:19:13.016 --> 00:19:14.756
You've seen how easy it is for

00:19:14.756 --> 00:19:17.366
you to quickly add SwiftUI views

00:19:17.366 --> 00:19:18.766
to your existing applications.

00:19:19.126 --> 00:19:20.296
And we're already getting data

00:19:20.296 --> 00:19:20.666
in there.

00:19:21.176 --> 00:19:22.636
But I want to talk about really

00:19:22.636 --> 00:19:25.716
integrating this with your data.

00:19:25.896 --> 00:19:27.586
What you saw on Tanu's demo is

00:19:27.586 --> 00:19:28.906
we took our plants data model

00:19:29.376 --> 00:19:30.996
and we passed it to our root

00:19:30.996 --> 00:19:31.776
SwiftUI view.

00:19:32.586 --> 00:19:33.736
And this is really great because

00:19:33.736 --> 00:19:34.986
SwiftUI view was able to take

00:19:34.986 --> 00:19:36.466
out the appropriate properties

00:19:36.756 --> 00:19:37.806
and we were able to render this.

00:19:38.746 --> 00:19:40.336
However, this was more of a

00:19:40.336 --> 00:19:43.786
one-shot operation because our

00:19:43.786 --> 00:19:45.716
data model is the existing

00:19:45.716 --> 00:19:47.656
outside of our SwiftUI

00:19:47.656 --> 00:19:48.126
framework.

00:19:48.766 --> 00:19:50.846
And this means if there are any

00:19:50.846 --> 00:19:52.116
changes to our data model

00:19:52.456 --> 00:19:53.736
perhaps from the cloud or even

00:19:53.736 --> 00:19:55.756
from the user, SwiftUI doesn't

00:19:55.756 --> 00:19:57.406
know about it and it won't

00:19:57.406 --> 00:20:00.946
re-render with our data content.

00:20:01.046 --> 00:20:03.006
Our solution for this is the

00:20:03.006 --> 00:20:05.226
BindableObject data protocol.

00:20:05.946 --> 00:20:07.026
And it's a really simple

00:20:07.026 --> 00:20:07.566
protocol.

00:20:07.566 --> 00:20:09.576
All you have to do is vend one

00:20:09.876 --> 00:20:10.976
didChange publisher.

00:20:14.446 --> 00:20:16.196
Once you implement the didChange

00:20:16.616 --> 00:20:18.426
property and you are conforming

00:20:18.426 --> 00:20:19.946
to the BindableObject protocol

00:20:20.586 --> 00:20:22.166
in your SwiftUI view where

00:20:22.166 --> 00:20:23.656
previously we were just

00:20:23.656 --> 00:20:25.866
referencing our data model, we

00:20:25.866 --> 00:20:28.396
can now use the @ObjectBinding

00:20:28.516 --> 00:20:28.916
wrapper.

00:20:30.176 --> 00:20:32.016
This allows SwiftUI to see that

00:20:32.016 --> 00:20:33.356
we're referencing a

00:20:33.356 --> 00:20:35.286
BindableObject and then it knows

00:20:35.286 --> 00:20:36.506
that it can subscribe to it for

00:20:36.506 --> 00:20:37.006
this view.

00:20:37.886 --> 00:20:38.946
And now whenever your data

00:20:38.946 --> 00:20:40.976
changes, the didChange publisher

00:20:40.976 --> 00:20:42.516
will emit to all of its

00:20:43.146 --> 00:20:44.816
subscribers that something in

00:20:44.816 --> 00:20:45.876
the data has changed.

00:20:46.076 --> 00:20:47.086
And of course, one of those

00:20:47.086 --> 00:20:48.606
subscribers is SwiftUI.

00:20:49.346 --> 00:20:50.756
And now SwiftUI automatically

00:20:50.756 --> 00:20:52.056
knows which views were

00:20:52.056 --> 00:20:53.686
referencing your data model and

00:20:53.686 --> 00:20:54.576
need to be updated.

00:20:56.006 --> 00:20:59.416
In addition, we can use the

00:20:59.416 --> 00:21:02.156
dollar prefix with data and we

00:21:02.156 --> 00:21:04.806
can use a binding to our data

00:21:04.806 --> 00:21:05.136
model.

00:21:05.206 --> 00:21:06.806
And this would allow us to have

00:21:07.156 --> 00:21:09.826
rewrite access directly top our

00:21:10.406 --> 00:21:11.416
data model.

00:21:11.536 --> 00:21:12.956
So now, whenever we make changes

00:21:12.956 --> 00:21:14.796
perhaps in a text field, those

00:21:14.796 --> 00:21:16.246
changes are updated directly in

00:21:16.246 --> 00:21:16.806
our data model.

00:21:16.866 --> 00:21:20.396
So as you can see, the

00:21:20.396 --> 00:21:22.036
BindableObecject protocol is

00:21:22.036 --> 00:21:22.726
very simple.

00:21:22.936 --> 00:21:24.296
Again, just one property that

00:21:24.296 --> 00:21:25.076
you have to implement.

00:21:25.636 --> 00:21:27.036
And it's incredibly flexible.

00:21:28.036 --> 00:21:29.436
We've designed it so that there

00:21:29.436 --> 00:21:30.716
are number of publishers that

00:21:30.716 --> 00:21:32.566
will work with whatever kind of

00:21:32.566 --> 00:21:34.076
notification system you're using

00:21:34.516 --> 00:21:35.836
to note changes occurring in

00:21:35.836 --> 00:21:36.466
your data model.

00:21:37.816 --> 00:21:39.006
And the key point here is that

00:21:39.006 --> 00:21:39.866
we want to make sure that your

00:21:39.866 --> 00:21:41.346
data model remains the single

00:21:41.346 --> 00:21:43.006
source of truth for data in your

00:21:43.006 --> 00:21:43.646
application.

00:21:44.226 --> 00:21:46.326
And this is very important in

00:21:46.326 --> 00:21:46.826
SwiftUI.

00:21:48.046 --> 00:21:49.546
We always want either your data

00:21:49.546 --> 00:21:50.876
model or any state that you have

00:21:50.876 --> 00:21:52.436
in SwiftUI to only have a single

00:21:52.436 --> 00:21:53.106
source of truth.

00:21:54.476 --> 00:21:56.156
Combined with the declarative

00:21:56.156 --> 00:21:58.126
view hierarchy, this eliminates

00:21:58.126 --> 00:21:59.146
the need to write view

00:21:59.146 --> 00:22:01.326
controllers to synchronize data.

00:22:01.506 --> 00:22:06.526
Now, let's see it in a demo.

00:22:07.196 --> 00:22:10.216
When Tanu came up to me and she

00:22:10.216 --> 00:22:11.776
told me about her plants idea, I

00:22:12.346 --> 00:22:13.486
was extremely excited.

00:22:14.366 --> 00:22:15.786
And I wanted to jump onboard and

00:22:15.786 --> 00:22:17.186
help out and I wanted to start

00:22:17.186 --> 00:22:18.396
writing the Mac application

00:22:18.396 --> 00:22:18.756
version.

00:22:19.416 --> 00:22:21.316
So we started writing the

00:22:21.316 --> 00:22:21.926
application.

00:22:21.926 --> 00:22:23.756
She was working on the iOS

00:22:23.756 --> 00:22:24.856
version and I was working on the

00:22:24.856 --> 00:22:25.486
Mac version.

00:22:26.096 --> 00:22:27.376
And we got to the same point.

00:22:27.376 --> 00:22:29.206
And when we saw at SwiftUI come

00:22:29.206 --> 00:22:31.516
out and we were amazed because

00:22:31.516 --> 00:22:32.796
we were able to move so quickly

00:22:33.206 --> 00:22:35.086
with the SwiftUI and write our

00:22:35.086 --> 00:22:37.316
details view.

00:22:39.736 --> 00:22:42.566
So here we are running the same

00:22:42.566 --> 00:22:44.456
application but now on the Mac.

00:22:46.056 --> 00:22:48.356
So here I have an NSTableView on

00:22:48.356 --> 00:22:49.926
the left and we have the same

00:22:49.926 --> 00:22:51.416
details view on the right.

00:22:52.106 --> 00:22:54.966
But now we want to go a step

00:22:54.996 --> 00:22:55.946
further and really integrate

00:22:55.946 --> 00:22:57.676
this with our data model so that

00:22:57.676 --> 00:22:59.136
we can make changes in our

00:22:59.136 --> 00:23:00.336
details view and have that

00:23:00.496 --> 00:23:01.696
reflected in our data model.

00:23:03.036 --> 00:23:03.916
Here's our data model.

00:23:04.346 --> 00:23:05.446
And you can see it's a really

00:23:05.446 --> 00:23:06.306
simple data model.

00:23:10.896 --> 00:23:13.066
All we have is an array of

00:23:13.116 --> 00:23:13.536
plants.

00:23:13.706 --> 00:23:14.976
Well, what I really want to

00:23:14.976 --> 00:23:18.126
point out is that whenever the

00:23:18.356 --> 00:23:21.096
plants change, we're issuing a

00:23:21.096 --> 00:23:22.706
PlantsDidChange notification.

00:23:23.376 --> 00:23:24.896
And we're doing this so that the

00:23:24.896 --> 00:23:26.516
table view in our view

00:23:26.516 --> 00:23:27.826
controller can listen for this

00:23:27.826 --> 00:23:29.276
and know to reload data in table

00:23:29.276 --> 00:23:29.496
view.

00:23:30.376 --> 00:23:31.916
But since we're already posting

00:23:32.376 --> 00:23:34.146
a notification, we're going to

00:23:34.146 --> 00:23:36.696
use that to implement a

00:23:36.696 --> 00:23:38.406
didChange BindableOBject.

00:23:38.976 --> 00:23:42.446
So here's our implementation of

00:23:42.446 --> 00:23:42.986
didChange.

00:23:42.986 --> 00:23:44.226
We're using a NotificationCenter

00:23:44.226 --> 00:23:45.476
publisher for the

00:23:45.476 --> 00:23:46.426
PlantsDidChange.

00:23:46.426 --> 00:23:47.626
And we're using self as the

00:23:47.626 --> 00:23:48.906
object that we want to watch.

00:23:49.856 --> 00:23:50.996
Now, I do want to point out one

00:23:50.996 --> 00:23:52.646
more thing real quick, changes

00:23:53.296 --> 00:23:56.306
to your data need to be informed

00:23:56.306 --> 00:23:57.916
that a change was needed to be

00:23:57.916 --> 00:23:59.556
told to SwiftUI on the main

00:23:59.556 --> 00:23:59.906
thread.

00:24:00.056 --> 00:24:01.176
So we're using the receive(on)

00:24:01.176 --> 00:24:02.546
operator to make sure that our

00:24:02.546 --> 00:24:03.896
publisher emits to all of its

00:24:03.896 --> 00:24:05.056
subscribers on the main thread.

00:24:05.666 --> 00:24:08.016
Now that our data model us in

00:24:08.016 --> 00:24:10.006
place, we can move to a details

00:24:10.006 --> 00:24:10.306
view.

00:24:10.306 --> 00:24:12.286
And here you can see where we

00:24:12.286 --> 00:24:13.466
were referencing our

00:24:13.466 --> 00:24:14.376
PlantsDataModel.

00:24:15.476 --> 00:24:17.646
Now, we can simply add our

00:24:21.656 --> 00:24:23.086
ObjectBinding.

00:24:23.616 --> 00:24:26.786
And now that we're using the

00:24:26.786 --> 00:24:28.406
ObjectBinding wrapping, we're

00:24:28.406 --> 00:24:30.286
going to go down to where we

00:24:30.286 --> 00:24:32.076
have -- already on isEditing

00:24:32.076 --> 00:24:33.146
state but we're currently using

00:24:33.146 --> 00:24:33.836
an EmptyView.

00:24:34.406 --> 00:24:36.796
But I've already written in

00:24:36.796 --> 00:24:38.536
EditablePlantsView and what I

00:24:38.536 --> 00:24:39.736
want to point out is here we're

00:24:39.736 --> 00:24:41.606
using the dollar prefix so that

00:24:41.606 --> 00:24:43.026
we can get a binding to a

00:24:43.026 --> 00:24:45.106
specific plant index.

00:24:46.296 --> 00:24:47.346
Now, we'll rerun our

00:24:47.346 --> 00:24:48.006
application.

00:24:48.536 --> 00:24:53.216
And now with that simple change,

00:24:53.706 --> 00:24:54.556
we could -- still works as

00:24:54.556 --> 00:24:55.716
before and when we click the

00:24:55.716 --> 00:24:57.976
Edit button, we can now edit the

00:24:57.976 --> 00:24:59.286
various properties.

00:24:59.286 --> 00:25:00.156
And you can see that the table

00:25:00.156 --> 00:25:02.016
view updated right away and, you

00:25:02.016 --> 00:25:03.076
know, I really like the Hawaiian

00:25:03.076 --> 00:25:04.066
hibiscus so I'm going to set it

00:25:04.066 --> 00:25:04.816
to 5 stars.

00:25:05.106 --> 00:25:06.366
So now we've updated the data

00:25:06.566 --> 00:25:08.256
directly on our data model and

00:25:08.656 --> 00:25:09.976
we could get back to it anytime.

00:25:12.516 --> 00:25:16.500
[ Applause ]

00:25:22.376 --> 00:25:23.806
So as you saw in that demo, I

00:25:23.996 --> 00:25:24.916
was already using a

00:25:24.916 --> 00:25:26.266
NotificationCenter so I just

00:25:26.266 --> 00:25:27.146
simply used the

00:25:27.146 --> 00:25:28.476
NotificationCenter publisher.

00:25:29.326 --> 00:25:30.206
But we have other types of

00:25:30.206 --> 00:25:31.126
publishers as well.

00:25:31.336 --> 00:25:33.566
For example, key value observing

00:25:33.566 --> 00:25:34.116
publishers.

00:25:36.256 --> 00:25:38.896
Any object that is KVO compliant

00:25:39.296 --> 00:25:40.616
has a key value observing

00:25:40.786 --> 00:25:41.226
publisher.

00:25:41.326 --> 00:25:42.436
And you can acquire it by just

00:25:42.436 --> 00:25:45.016
using the publisher for key path

00:25:45.016 --> 00:25:45.386
function.

00:25:46.496 --> 00:25:47.326
But let's look at a little bit

00:25:47.326 --> 00:25:48.956
more interesting example.

00:25:49.126 --> 00:25:51.626
In this example, I have a class

00:25:51.626 --> 00:25:53.456
that's watching the user default

00:25:53.916 --> 00:25:55.526
for a couple of changes in the

00:25:55.526 --> 00:25:56.236
user defaults.

00:25:56.836 --> 00:25:59.876
And the interesting part is

00:25:59.876 --> 00:26:02.316
here, we're creating a publisher

00:26:02.316 --> 00:26:03.606
for each user default.

00:26:03.606 --> 00:26:05.006
One for userOption1 and one for

00:26:05.006 --> 00:26:07.526
userOption2, but we're merging

00:26:07.526 --> 00:26:09.136
them together into a single

00:26:09.136 --> 00:26:12.196
publisher that we apply to our

00:26:12.196 --> 00:26:13.546
didChange property.

00:26:14.816 --> 00:26:16.846
So now, whenever either

00:26:16.846 --> 00:26:18.446
userOption1 changes or

00:26:18.446 --> 00:26:21.246
userOption2 changes, our

00:26:21.246 --> 00:26:23.266
didChange combined publisher

00:26:23.966 --> 00:26:25.406
will emit the change at SwiftUI

00:26:25.406 --> 00:26:26.756
and SwiftUI will go ahead and

00:26:26.756 --> 00:26:27.546
update our views.

00:26:28.136 --> 00:26:31.196
All these publishers come

00:26:31.196 --> 00:26:32.466
courtesy of the combined

00:26:32.496 --> 00:26:33.616
framework and there are many

00:26:33.616 --> 00:26:34.606
more publishers there that you

00:26:34.606 --> 00:26:35.056
can look at.

00:26:35.056 --> 00:26:36.686
And the combined framework is a

00:26:36.686 --> 00:26:38.546
great new framework that is a

00:26:38.546 --> 00:26:39.996
unified declarative API for

00:26:39.996 --> 00:26:41.616
processing values over time.

00:26:44.246 --> 00:26:46.046
In addition to the publishers as

00:26:46.046 --> 00:26:47.316
you saw with the merge operator,

00:26:47.316 --> 00:26:48.266
there are a number of different

00:26:48.266 --> 00:26:50.966
operators to do complex merging

00:26:51.006 --> 00:26:52.296
or zipping together of various

00:26:52.296 --> 00:26:52.866
publishers.

00:26:54.326 --> 00:26:55.876
I really suggest that you watch

00:26:56.126 --> 00:26:57.926
the Combine in Practice talk.

00:26:58.496 --> 00:27:00.766
However, I do want to point out

00:27:01.166 --> 00:27:03.996
one more specific publisher and

00:27:03.996 --> 00:27:05.116
that's the PassthroughSubject.

00:27:06.666 --> 00:27:08.406
If you run into a situation with

00:27:08.406 --> 00:27:10.316
your data model that none of the

00:27:10.316 --> 00:27:11.336
other publishers from the

00:27:11.336 --> 00:27:13.896
combine framework work perfectly

00:27:13.896 --> 00:27:16.086
for your situation, you can use

00:27:16.086 --> 00:27:17.466
the PassthroughSubject like I

00:27:17.466 --> 00:27:18.896
did in this core data example.

00:27:19.966 --> 00:27:20.696
If you have a core data

00:27:20.696 --> 00:27:22.946
application, then you're already

00:27:22.946 --> 00:27:23.586
using an

00:27:23.586 --> 00:27:25.276
NSFetchedResultsController to

00:27:25.276 --> 00:27:26.806
get a slice of data out of your

00:27:26.806 --> 00:27:27.446
database.

00:27:27.576 --> 00:27:28.736
And the

00:27:28.736 --> 00:27:30.596
NSFetchedResultsController wants

00:27:30.826 --> 00:27:32.086
you to provide a delegate to

00:27:32.286 --> 00:27:33.086
help coordinate.

00:27:34.166 --> 00:27:35.586
And one of the delegate messages

00:27:35.886 --> 00:27:38.306
that you'll need to implement is

00:27:38.306 --> 00:27:40.546
the controllerDidChangeContent.

00:27:40.546 --> 00:27:42.766
And this lets you know when data

00:27:42.766 --> 00:27:43.806
in the database changes.

00:27:44.066 --> 00:27:44.986
And when that happens, we need

00:27:44.986 --> 00:27:46.606
to let SwiftUI know.

00:27:47.326 --> 00:27:48.726
So we'll simply grab our

00:27:48.726 --> 00:27:50.406
didChange PassthroughSubject

00:27:50.406 --> 00:27:52.076
publisher and we'll tell it to

00:27:52.076 --> 00:27:53.466
manually send the change.

00:27:53.626 --> 00:27:55.146
And now SwiftUI will see that as

00:27:55.146 --> 00:27:57.136
one of the subscribers and all

00:27:57.136 --> 00:27:58.536
of your views will be updated.

00:27:59.176 --> 00:28:02.646
I focused here on

00:28:02.646 --> 00:28:03.526
BindableObject.

00:28:04.446 --> 00:28:05.756
But there are number of tools to

00:28:05.756 --> 00:28:07.536
help you manage data outside and

00:28:07.536 --> 00:28:08.576
inside of SwiftUI.

00:28:09.436 --> 00:28:11.156
The Dataflow in SwiftUI is a

00:28:11.156 --> 00:28:12.456
great talk that goes on to all

00:28:12.456 --> 00:28:14.766
of these data tools into more

00:28:14.766 --> 00:28:17.096
detail and also discusses when

00:28:17.096 --> 00:28:18.486
it is appropriate to use which

00:28:18.486 --> 00:28:18.976
type of tool.

00:28:22.596 --> 00:28:25.636
Now of course, integrating with

00:28:25.636 --> 00:28:27.136
your data model isn't the only

00:28:27.136 --> 00:28:28.196
thing you need to think about

00:28:28.196 --> 00:28:29.206
when you're running a SwiftUI

00:28:29.656 --> 00:28:30.166
interface.

00:28:30.536 --> 00:28:31.456
You also need to think about

00:28:31.456 --> 00:28:32.496
integrating with the rest of the

00:28:32.496 --> 00:28:34.536
system, with drag and drop on

00:28:34.906 --> 00:28:37.246
iOS and macOS, with tvOS, and

00:28:37.246 --> 00:28:41.106
with the Digital Crown perhaps

00:28:41.106 --> 00:28:41.716
on watchOS.

00:28:44.436 --> 00:28:45.866
So let's start off this talk by

00:28:45.866 --> 00:28:47.296
talking about item providers.

00:28:48.436 --> 00:28:49.886
Item providers are a great

00:28:49.886 --> 00:28:51.246
technology that's provided by

00:28:51.246 --> 00:28:52.946
the foundation framework which

00:28:52.946 --> 00:28:54.416
provides you a means of moving

00:28:54.416 --> 00:28:56.136
data around your application in

00:28:56.136 --> 00:28:57.026
various forms.

00:28:57.326 --> 00:28:59.446
It's also a tool that we use to

00:28:59.446 --> 00:29:01.046
help transfer data across

00:29:01.076 --> 00:29:01.626
processes.

00:29:02.236 --> 00:29:05.116
Item providers are basically a

00:29:05.116 --> 00:29:06.636
collection of universal type

00:29:06.636 --> 00:29:08.326
identifiers that describe the

00:29:08.436 --> 00:29:10.276
type of data that your item can

00:29:10.276 --> 00:29:11.286
be represented as.

00:29:11.286 --> 00:29:12.606
And then of course you need to

00:29:12.606 --> 00:29:14.446
provide the data in that type

00:29:14.526 --> 00:29:15.356
upon request.

00:29:16.656 --> 00:29:18.516
And remember, earlier on in the

00:29:18.516 --> 00:29:20.196
demo, I made a point to say that

00:29:20.196 --> 00:29:21.946
we needed to have data change on

00:29:21.946 --> 00:29:23.426
the main thread, and item

00:29:23.426 --> 00:29:24.696
providers are asynchronous.

00:29:25.726 --> 00:29:27.016
So when you so get data form an

00:29:27.016 --> 00:29:28.106
item provider, you'll need to

00:29:28.106 --> 00:29:29.006
make sure that you actually

00:29:29.006 --> 00:29:30.026
change the data of have your

00:29:30.026 --> 00:29:32.306
publisher emit on the main

00:29:33.456 --> 00:29:33.686
thread.

00:29:33.766 --> 00:29:35.226
We use item providers and drag

00:29:35.226 --> 00:29:35.596
and drop.

00:29:36.326 --> 00:29:37.416
So you can use the onDrag

00:29:37.416 --> 00:29:40.746
modifier to enable your view to

00:29:40.806 --> 00:29:41.856
be a drag source.

00:29:42.236 --> 00:29:43.196
So now when a user starts to

00:29:43.196 --> 00:29:44.926
drag on your view, we will call

00:29:44.926 --> 00:29:46.276
the closure and you can provide

00:29:46.276 --> 00:29:48.276
an item provider which will

00:29:49.066 --> 00:29:50.466
provide the data associated with

00:29:50.466 --> 00:29:52.186
that view and we'll-- we will

00:29:52.186 --> 00:29:53.536
automatically take a rendering

00:29:53.536 --> 00:29:55.026
of your view and use that as the

00:29:55.026 --> 00:29:55.716
drag image.

00:29:57.076 --> 00:29:59.176
To accept a drop, you can use

00:29:59.176 --> 00:30:00.276
the onDrop modifier.

00:30:01.286 --> 00:30:03.516
With the onDrop modifier, you

00:30:03.516 --> 00:30:05.546
simply pass an array of

00:30:05.616 --> 00:30:06.866
universal type identifier

00:30:06.866 --> 00:30:08.906
strings that describe what kind

00:30:08.906 --> 00:30:10.186
of data you can accept on your

00:30:10.186 --> 00:30:10.416
view.

00:30:11.476 --> 00:30:14.106
And if the user drops data of

00:30:14.106 --> 00:30:15.466
that type on your view, we will

00:30:15.466 --> 00:30:16.826
automatically call your action

00:30:17.376 --> 00:30:19.276
closure and provide an array of

00:30:19.346 --> 00:30:21.006
item providers that can form to

00:30:21.006 --> 00:30:21.446
that type.

00:30:21.446 --> 00:30:23.456
And of course we'll also tell

00:30:23.456 --> 00:30:25.506
you exactly the point inside

00:30:25.506 --> 00:30:26.396
your view that the drop

00:30:26.396 --> 00:30:26.746
occurred.

00:30:27.896 --> 00:30:29.146
There's another variant of the

00:30:29.146 --> 00:30:31.636
onDrop modifier, one that takes

00:30:31.636 --> 00:30:33.876
a delegate instead of a drop

00:30:33.876 --> 00:30:34.286
closure.

00:30:34.906 --> 00:30:36.016
And the delegate gives you a

00:30:36.016 --> 00:30:37.516
little bit more visibility into

00:30:37.516 --> 00:30:39.326
the drop process as it's moving

00:30:39.326 --> 00:30:40.046
around in your views.

00:30:40.046 --> 00:30:41.026
For example, you can get a

00:30:41.026 --> 00:30:42.756
cursor location before the user

00:30:42.756 --> 00:30:45.086
actually lets go and commits to

00:30:45.086 --> 00:30:46.446
the drop action.

00:30:48.156 --> 00:30:50.166
We also use item providers with

00:30:50.166 --> 00:30:50.786
the pasteboard.

00:30:51.876 --> 00:30:53.976
So if you want to accept a paste

00:30:53.976 --> 00:30:55.466
command for example, you can use

00:30:55.466 --> 00:30:56.936
the onPaste command modifier.

00:30:58.486 --> 00:31:00.946
Similar to the onDrop modifier,

00:31:00.946 --> 00:31:03.306
you supply an array of universal

00:31:03.306 --> 00:31:05.136
type identifiers that you can

00:31:05.136 --> 00:31:06.706
accept and when the user paste

00:31:06.706 --> 00:31:07.916
on your view, we will go ahead

00:31:07.916 --> 00:31:09.066
and provide an array of item

00:31:09.066 --> 00:31:09.616
providers.

00:31:10.526 --> 00:31:11.516
However, I want to point out

00:31:12.376 --> 00:31:13.366
something that really makes

00:31:13.406 --> 00:31:15.856
onPaste different than onDrop.

00:31:17.446 --> 00:31:18.686
The first part is that there's

00:31:18.686 --> 00:31:20.936
no location parameter in the

00:31:20.936 --> 00:31:21.386
closure.

00:31:21.876 --> 00:31:22.946
And that's a key to what's

00:31:22.946 --> 00:31:23.786
really going on here.

00:31:24.956 --> 00:31:27.236
When you do drag and drop, user

00:31:27.236 --> 00:31:28.906
is directly targeting via the

00:31:28.906 --> 00:31:31.186
cursor or the touch location

00:31:31.186 --> 00:31:32.266
which view should accept the

00:31:32.266 --> 00:31:35.326
drop but a paste command is more

00:31:35.326 --> 00:31:35.836
indirect.

00:31:36.316 --> 00:31:37.756
The user is either choosing

00:31:37.756 --> 00:31:39.796
paste from the menu or is

00:31:40.146 --> 00:31:41.056
perhaps using a keyboard

00:31:41.056 --> 00:31:42.216
shortcut or the great new

00:31:42.216 --> 00:31:44.446
gestures that exist in iOS.

00:31:46.456 --> 00:31:47.986
The way we solve the problem of

00:31:48.086 --> 00:31:49.886
knowing which view that the

00:31:49.886 --> 00:31:51.686
paste command should go to is

00:31:51.686 --> 00:31:52.626
with the focus system.

00:31:53.556 --> 00:31:55.296
And the focus system is a very

00:31:55.296 --> 00:31:57.036
important tool that we have that

00:31:57.236 --> 00:31:59.686
the users use to navigate the

00:31:59.686 --> 00:32:01.636
various UI elements and inform

00:32:01.636 --> 00:32:04.146
us where not specifically

00:32:04.146 --> 00:32:05.896
directed actions should go.

00:32:06.576 --> 00:32:10.736
It's very useful on the Mac of

00:32:10.786 --> 00:32:13.026
course for keyboard input, menu

00:32:13.026 --> 00:32:16.026
action commands, in iOS for

00:32:16.346 --> 00:32:17.766
keyboard commands there, and

00:32:17.766 --> 00:32:19.466
additionally, the new gestures

00:32:19.696 --> 00:32:23.236
for copy-paste and undo and

00:32:24.896 --> 00:32:25.046
redo.

00:32:25.206 --> 00:32:27.706
It's extremely important on tvOS

00:32:28.226 --> 00:32:29.906
where the focus is how we can

00:32:29.906 --> 00:32:31.276
determine where the user wants

00:32:31.696 --> 00:32:33.236
the Siri Remote button actions

00:32:33.286 --> 00:32:35.036
to be performed on.

00:32:35.636 --> 00:32:38.736
And for watchOS, we use focus to

00:32:38.736 --> 00:32:40.106
determine where to send Digital

00:32:40.106 --> 00:32:41.466
Crown events.

00:32:44.076 --> 00:32:46.246
The way this works, is you have

00:32:46.246 --> 00:32:47.626
your view hierarchy and at some

00:32:47.676 --> 00:32:49.876
point one of your views is going

00:32:49.876 --> 00:32:51.146
to be the focus view.

00:32:51.896 --> 00:32:53.166
And when the user performs an

00:32:53.606 --> 00:32:55.266
indirect action like turning the

00:32:55.266 --> 00:32:58.026
Digital Crown, we check to see

00:32:58.156 --> 00:33:00.846
if the focus view has a view

00:33:00.846 --> 00:33:02.356
modifier for that kind of

00:33:02.356 --> 00:33:02.746
command.

00:33:02.746 --> 00:33:03.786
In this case, the Digital Crown

00:33:03.786 --> 00:33:04.166
command.

00:33:04.866 --> 00:33:06.286
If it does, we'll go ahead and

00:33:06.286 --> 00:33:07.356
call the appropriate closure.

00:33:08.076 --> 00:33:10.096
If not, we walk up the ancestors

00:33:10.096 --> 00:33:12.136
to try and find another-- an

00:33:12.136 --> 00:33:13.936
ancestor view that has the

00:33:14.266 --> 00:33:16.576
Digital Crown command and call

00:33:16.576 --> 00:33:18.126
the appropriate closure.

00:33:18.996 --> 00:33:20.696
SwiftUI also goes ahead and

00:33:20.696 --> 00:33:23.776
takes care of moving focus from

00:33:23.776 --> 00:33:24.916
one view to another

00:33:25.856 --> 00:33:27.486
appropriately on each platform.

00:33:28.676 --> 00:33:30.696
The only thing you need to do is

00:33:30.696 --> 00:33:32.426
let us know which of your

00:33:32.426 --> 00:33:34.106
SwiftUI views can gain focus.

00:33:34.456 --> 00:33:35.236
And you do that via the

00:33:35.236 --> 00:33:36.256
focususable modifier.

00:33:37.566 --> 00:33:40.076
With the exception of our leaf

00:33:40.076 --> 00:33:43.286
controls like text fields, UI--

00:33:44.116 --> 00:33:46.506
SwiftUI views do not gain focus

00:33:46.506 --> 00:33:47.076
by default.

00:33:47.076 --> 00:33:47.786
So you'll need to use the

00:33:47.786 --> 00:33:48.996
focususable modifier and

00:33:48.996 --> 00:33:50.196
Passthrough to let us know that

00:33:50.416 --> 00:33:51.626
this view can gain focus.

00:33:52.806 --> 00:33:54.366
You can optionally pass a

00:33:54.366 --> 00:33:56.326
closure that we will call to let

00:33:56.326 --> 00:33:57.706
you know when your view gains or

00:33:57.706 --> 00:33:59.586
loses focus and you can use this

00:33:59.896 --> 00:34:02.936
to update your UI to give visual

00:34:02.936 --> 00:34:04.206
feedback to the user to let them

00:34:04.206 --> 00:34:04.416
know.

00:34:05.016 --> 00:34:07.666
We have a number of commands

00:34:07.666 --> 00:34:09.835
like onExit and onPLayPause.

00:34:09.956 --> 00:34:12.716
These are examples from the tvOS

00:34:12.716 --> 00:34:13.806
when using the Siri Remote.

00:34:14.646 --> 00:34:15.485
But the one I really want to

00:34:15.485 --> 00:34:17.306
talk about right now is the

00:34:17.306 --> 00:34:18.946
generic onCommand modifier.

00:34:19.786 --> 00:34:23.196
This is what you use to direct

00:34:23.775 --> 00:34:26.106
actions from Objective-C-style

00:34:26.525 --> 00:34:28.846
action selectors from menus for

00:34:28.846 --> 00:34:29.846
example that are wired to the

00:34:29.846 --> 00:34:31.485
first responder or Toolbar

00:34:31.485 --> 00:34:33.315
buttons that are likewise wired

00:34:33.315 --> 00:34:34.156
to the first responder.

00:34:34.516 --> 00:34:35.956
And again, this is how you would

00:34:36.286 --> 00:34:37.626
also use this on iOS.

00:34:38.806 --> 00:34:39.996
And they're chainable.

00:34:40.235 --> 00:34:42.366
So if your view can accept three

00:34:42.366 --> 00:34:44.446
menu items for example, you

00:34:44.446 --> 00:34:46.096
would also have three onCommand

00:34:46.096 --> 00:34:47.726
modifiers attached to your view

00:34:47.726 --> 00:34:49.106
with each having the appropriate

00:34:49.106 --> 00:34:49.536
selector.

00:34:50.126 --> 00:34:53.386
Now, I know all of your

00:34:53.386 --> 00:34:54.876
applications out there already

00:34:54.876 --> 00:34:56.536
have great undo and redo

00:34:56.536 --> 00:34:56.956
support.

00:34:57.196 --> 00:34:59.636
And in SwiftUI, we use the same

00:34:59.636 --> 00:35:01.236
UndoManager that you're already

00:35:01.236 --> 00:35:01.666
using.

00:35:02.206 --> 00:35:05.786
And it turns out that in most

00:35:05.786 --> 00:35:07.296
cases when you add new SwiftUI

00:35:07.456 --> 00:35:09.136
to your application, you don't

00:35:09.136 --> 00:35:11.206
need to do anything new with the

00:35:11.206 --> 00:35:11.946
UndoManager.

00:35:12.406 --> 00:35:14.106
This is especially true if most

00:35:14.106 --> 00:35:15.416
of your undo registrations are

00:35:15.416 --> 00:35:16.686
being done at a lower level

00:35:16.686 --> 00:35:17.636
closer to your data model.

00:35:18.926 --> 00:35:21.116
However, if you do need access

00:35:21.166 --> 00:35:23.026
to the UndoManager, you can get

00:35:23.026 --> 00:35:24.886
it using the Environment

00:35:24.916 --> 00:35:26.496
property wrapper with the

00:35:26.496 --> 00:35:27.426
UndoManager key path.

00:35:32.816 --> 00:35:35.146
Now SwiftUI is obviously a Swift

00:35:35.146 --> 00:35:38.636
base API, but we know that you

00:35:38.636 --> 00:35:39.556
already have a lot of

00:35:39.556 --> 00:35:40.816
Objective-C code out there.

00:35:41.586 --> 00:35:43.726
And Objective-C in Swift already

00:35:43.726 --> 00:35:45.486
can be integrated together quite

00:35:45.486 --> 00:35:45.916
well.

00:35:46.996 --> 00:35:48.406
And likewise, you can use

00:35:48.406 --> 00:35:49.726
SwiftUI with your Objective-C

00:35:49.726 --> 00:35:50.356
code as well.

00:35:51.536 --> 00:35:53.046
The standard Objective-C/Swift

00:35:53.046 --> 00:35:55.206
integration rules apply, and

00:35:55.206 --> 00:35:56.616
basically, what that means as it

00:35:56.616 --> 00:35:59.056
concerns SwiftUI is that you'll

00:35:59.056 --> 00:36:00.166
need to wrap your hosting

00:36:00.166 --> 00:36:01.266
controllers or your hosting

00:36:01.266 --> 00:36:02.796
views in Swift.

00:36:03.416 --> 00:36:05.796
In this case, I'm going to wrap

00:36:05.796 --> 00:36:07.786
a hosting controller and I'll

00:36:07.786 --> 00:36:09.266
make a subclass of

00:36:09.266 --> 00:36:11.466
UIViewController and I give it

00:36:11.756 --> 00:36:13.676
the at Objective-C attribute.

00:36:14.096 --> 00:36:15.316
This will allow us to later

00:36:15.496 --> 00:36:17.386
instantiate these Swift class

00:36:17.636 --> 00:36:18.676
from within our Objective-C

00:36:18.676 --> 00:36:19.636
implementation file.

00:36:20.186 --> 00:36:22.896
And now, inside of our Swift

00:36:22.896 --> 00:36:24.276
implementation, we can

00:36:24.386 --> 00:36:25.256
instantiate a

00:36:25.256 --> 00:36:27.946
UIHostingController and pass it

00:36:27.946 --> 00:36:29.516
in appropriate SwiftUI RootView.

00:36:30.066 --> 00:36:32.606
Now that we have a

00:36:32.606 --> 00:36:34.246
UIViewController, we can go

00:36:34.246 --> 00:36:35.626
ahead and use it from or

00:36:35.626 --> 00:36:37.206
Objective-C implementation files

00:36:37.206 --> 00:36:38.036
like we would in the other

00:36:38.036 --> 00:36:39.046
UIViewController.

00:36:39.286 --> 00:36:40.206
In this example, we're just

00:36:40.206 --> 00:36:41.346
presenting it.

00:36:43.396 --> 00:36:44.936
Similarly, you'll need to wrap

00:36:44.936 --> 00:36:46.066
your data model as well.

00:36:47.446 --> 00:36:48.796
And we do that so that we can

00:36:48.796 --> 00:36:50.106
implement the BindabelObject

00:36:50.146 --> 00:36:50.596
protocol.

00:36:51.716 --> 00:36:52.986
So here we have a simple Swift

00:36:53.086 --> 00:36:55.186
class that we're going to

00:36:56.036 --> 00:36:57.366
implement the BindableObject

00:36:57.366 --> 00:36:59.046
protocol via a

00:36:59.046 --> 00:37:00.366
NotificationCenter publisher

00:37:00.366 --> 00:37:00.586
here.

00:37:00.756 --> 00:37:01.686
And this is an example.

00:37:01.686 --> 00:37:03.966
Let's just say ObjCDataModel is

00:37:03.966 --> 00:37:05.726
already issuing a

00:37:05.726 --> 00:37:06.646
NotificationCenter

00:37:06.956 --> 00:37:07.786
notifications.

00:37:08.246 --> 00:37:09.796
And then we'll just have a

00:37:10.456 --> 00:37:12.626
reference to our ObjCDataModel.

00:37:12.626 --> 00:37:15.166
And the way this works is, in

00:37:15.166 --> 00:37:16.576
your wrapping-- and you

00:37:16.576 --> 00:37:18.286
WrappedHostingController, you

00:37:18.286 --> 00:37:19.906
would pass a pointer to your

00:37:19.906 --> 00:37:21.656
ObjCDataModel, and in your

00:37:21.656 --> 00:37:22.676
hosting controller, you can

00:37:22.676 --> 00:37:25.046
create your WrappedDataModel and

00:37:25.246 --> 00:37:27.666
assign it your ObjCDataModel and

00:37:27.666 --> 00:37:29.456
pass your WrappedDataModel to

00:37:29.456 --> 00:37:30.896
your SwiftUI rootView.

00:37:31.866 --> 00:37:33.936
And with just those two simple

00:37:33.936 --> 00:37:36.216
wrapped classes, you would now

00:37:36.216 --> 00:37:37.396
have seamless integration with

00:37:37.396 --> 00:37:40.166
SwiftUI and your Objective-C

00:37:41.716 --> 00:37:41.826
code.

00:37:42.016 --> 00:37:44.226
So as you can see, it's really

00:37:44.226 --> 00:37:46.016
easy to start using SwiftUI in

00:37:46.016 --> 00:37:47.076
your applications today.

00:37:47.076 --> 00:37:49.906
As you're adding new UI, start

00:37:49.906 --> 00:37:50.686
using SwiftUI.

00:37:51.476 --> 00:37:55.746
We are having a lab coming up

00:37:55.946 --> 00:37:58.196
tomorrow at 11:00 a.m. Try out

00:37:58.196 --> 00:38:00.096
SwiftUI in your applications.

00:38:00.096 --> 00:38:02.036
If you have any problems, come

00:38:02.036 --> 00:38:02.896
talk to us in the lab.

00:38:03.046 --> 00:38:04.386
We're more than happy to talk to

00:38:04.386 --> 00:38:04.496
you.

00:38:04.496 --> 00:38:06.096
We're excited about this but we

00:38:06.096 --> 00:38:07.206
can't wait to see what you come

00:38:07.206 --> 00:38:07.666
up with.

00:38:08.506 --> 00:38:08.906
Thank you.

00:38:09.126 --> 00:38:10.376
Enjoy the rest of the show.

00:38:11.508 --> 00:38:13.508
[ Applause ]