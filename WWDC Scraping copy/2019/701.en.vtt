WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:12.106 --> 00:00:13.536
>> Good morning, everyone.

00:00:14.256 --> 00:00:16.175
And thanks for joining us today.

00:00:17.616 --> 00:00:19.086
My name is Garrett, and I work

00:00:19.086 --> 00:00:20.236
on the security engineering and

00:00:20.236 --> 00:00:21.446
architecture team here at Apple.

00:00:21.986 --> 00:00:22.876
And today, we're here to talk

00:00:22.876 --> 00:00:23.926
about some of the advances in

00:00:23.926 --> 00:00:25.646
security coming in macOS

00:00:25.646 --> 00:00:26.056
Catalina.

00:00:29.046 --> 00:00:29.896
Here's a quick agenda for the

00:00:29.896 --> 00:00:30.226
talk.

00:00:30.716 --> 00:00:31.606
We're going to talk a little bit

00:00:31.606 --> 00:00:32.686
about the security principle of

00:00:32.686 --> 00:00:34.156
defense in depth and how it's

00:00:34.156 --> 00:00:35.256
applied in macOS.

00:00:36.016 --> 00:00:37.666
Then we'll dig into two very

00:00:37.666 --> 00:00:38.686
different parts of the macOS

00:00:38.686 --> 00:00:40.926
security model, Gatekeeper and

00:00:40.926 --> 00:00:42.146
user privacy protection.

00:00:45.146 --> 00:00:45.966
So let's get started with

00:00:45.966 --> 00:00:46.606
Defense in Depth.

00:00:47.466 --> 00:00:50.356
Now, with a product as complex

00:00:50.356 --> 00:00:51.906
and with as many use cases as

00:00:51.906 --> 00:00:55.396
macOS, it's-- there is no single

00:00:55.396 --> 00:00:57.056
technology or feature that can

00:00:57.056 --> 00:00:58.526
deliver perfect security alone.

00:00:59.776 --> 00:01:01.976
So instead, macOS is designed

00:01:01.976 --> 00:01:03.086
with many different layers of

00:01:03.086 --> 00:01:03.706
security.

00:01:04.366 --> 00:01:05.626
Each designed with a specific

00:01:05.626 --> 00:01:06.886
purpose or goal.

00:01:08.226 --> 00:01:10.656
And every year, we improve the

00:01:10.656 --> 00:01:12.996
technologies and policies at

00:01:12.996 --> 00:01:14.796
each of these layers to help

00:01:14.796 --> 00:01:15.606
keep you safe.

00:01:16.396 --> 00:01:19.606
And this is an application of

00:01:19.606 --> 00:01:20.496
the principle of Defense in

00:01:20.496 --> 00:01:20.686
Depth.

00:01:20.686 --> 00:01:23.806
And the goal is to ensure that

00:01:23.806 --> 00:01:25.356
one layer of security failing

00:01:26.136 --> 00:01:27.736
doesn't defeat the entire

00:01:27.736 --> 00:01:31.616
security model of the system.

00:01:31.726 --> 00:01:33.666
Instead, we rely on multiple

00:01:33.666 --> 00:01:35.196
layers of protection with

00:01:35.196 --> 00:01:35.916
different properties.

00:01:36.796 --> 00:01:38.706
Some layers are designed to

00:01:38.706 --> 00:01:39.626
delay the advance of an

00:01:39.626 --> 00:01:42.566
attacker, others to reduce the

00:01:42.566 --> 00:01:43.686
attack surface of a component,

00:01:44.576 --> 00:01:46.726
and some to create choke points

00:01:46.976 --> 00:01:48.216
that make it easier to defend a

00:01:48.216 --> 00:01:48.976
specific asset.

00:01:52.546 --> 00:01:54.636
And today, we're here to talk

00:01:54.636 --> 00:01:56.186
about two very different layers

00:01:56.796 --> 00:01:57.836
of security in macOS.

00:01:59.166 --> 00:02:00.806
First, we'll talk a little bit

00:02:00.806 --> 00:02:02.676
about Gatekeeper, which is an

00:02:02.676 --> 00:02:03.916
important outer layer of

00:02:03.916 --> 00:02:05.886
security, designed to prevent

00:02:05.886 --> 00:02:07.316
malicious software from ever

00:02:07.316 --> 00:02:08.756
running on your system in the

00:02:09.455 --> 00:02:10.916
first place.

00:02:11.066 --> 00:02:12.856
Then, we'll talk about user

00:02:12.896 --> 00:02:14.796
privacy protection, which is

00:02:14.796 --> 00:02:16.236
designed to ensure that even if

00:02:16.236 --> 00:02:17.686
malicious software is able to

00:02:17.686 --> 00:02:19.376
get around Gatekeeper, it

00:02:19.376 --> 00:02:20.896
doesn't necessarily have access

00:02:20.896 --> 00:02:22.526
to your most sensitive data and

00:02:22.526 --> 00:02:23.006
resources.

00:02:23.006 --> 00:02:26.936
So let's talk about Gatekeeper.

00:02:27.986 --> 00:02:29.186
When Gatekeeper was originally

00:02:29.186 --> 00:02:30.876
introduced, along with the

00:02:30.876 --> 00:02:33.136
Developer ID program, its goal

00:02:33.136 --> 00:02:34.596
was to prevent the widespread--

00:02:35.236 --> 00:02:36.676
prevent the outbreak, a

00:02:36.676 --> 00:02:38.476
widespread outbreak of malicious

00:02:38.476 --> 00:02:38.836
software.

00:02:39.526 --> 00:02:41.426
But over the years, its goals

00:02:41.686 --> 00:02:42.576
have broadened a bit.

00:02:43.296 --> 00:02:45.126
And now, it's designed to

00:02:45.126 --> 00:02:46.626
protect users from running

00:02:46.626 --> 00:02:48.496
malicious software while leaving

00:02:48.496 --> 00:02:50.516
them in control of what they run

00:02:50.516 --> 00:02:51.946
on their Mac.

00:02:53.006 --> 00:02:55.056
Now, exactly how it does this

00:02:55.056 --> 00:02:56.676
has changed over the years too.

00:02:56.986 --> 00:02:57.736
And while there's a lot of

00:02:57.736 --> 00:03:00.316
nuances, Gatekeeper's intent can

00:03:00.316 --> 00:03:02.256
generally be boiled down to a

00:03:02.256 --> 00:03:03.516
few simple questions.

00:03:04.426 --> 00:03:05.426
So let's talk about how

00:03:05.426 --> 00:03:06.756
Gatekeeper achieves this goal

00:03:07.176 --> 00:03:08.006
today.

00:03:10.156 --> 00:03:11.456
There's four things that we

00:03:11.456 --> 00:03:15.526
think of as part of a Gatekeeper

00:03:17.436 --> 00:03:17.566
scan.

00:03:19.096 --> 00:03:22.016
The first is a malicious content

00:03:22.526 --> 00:03:24.476
scan to ensure that there's

00:03:24.476 --> 00:03:26.436
nothing known malicious in the

00:03:26.436 --> 00:03:27.726
app it's about to run.

00:03:28.156 --> 00:03:32.156
Second, there's a signature

00:03:32.156 --> 00:03:34.246
validation, to ensure that the

00:03:34.246 --> 00:03:35.476
app hasn't been tampered with

00:03:35.876 --> 00:03:37.006
since it was signed by the

00:03:37.006 --> 00:03:37.626
developer.

00:03:38.246 --> 00:03:42.276
Third, there's an identity

00:03:42.276 --> 00:03:42.886
validation.

00:03:43.456 --> 00:03:44.526
And this is what we use to

00:03:44.526 --> 00:03:45.776
enforce the computer's local

00:03:45.776 --> 00:03:46.586
security policy.

00:03:46.586 --> 00:03:48.426
If the user has selected that

00:03:48.426 --> 00:03:49.656
they only want to run software

00:03:49.656 --> 00:03:51.506
from the App Store or identify

00:03:51.506 --> 00:03:53.176
developers, then we don't want

00:03:53.176 --> 00:03:54.116
to allow something that's been

00:03:54.116 --> 00:03:55.986
signed by anyone else, or that

00:03:55.986 --> 00:03:57.196
doesn't have a signature at all.

00:03:57.196 --> 00:04:01.716
And finally, there's a first

00:04:01.716 --> 00:04:03.466
launch prompt, which is meant to

00:04:03.466 --> 00:04:05.146
ensure that the user actually

00:04:05.206 --> 00:04:09.246
wants to run this application.

00:04:09.566 --> 00:04:10.936
Now, we can't talk about what

00:04:10.936 --> 00:04:12.656
Gatekeeper checks without

00:04:12.656 --> 00:04:14.046
talking about when Gatekeeper

00:04:14.046 --> 00:04:14.486
checks it.

00:04:14.486 --> 00:04:18.755
And in macOS Mojave, Gatekeeper

00:04:18.755 --> 00:04:21.146
runs its scans on the first

00:04:21.146 --> 00:04:23.726
launch of quarantined software

00:04:24.226 --> 00:04:25.526
launched via LaunchServices.

00:04:25.526 --> 00:04:28.506
Now, to understand that a little

00:04:28.506 --> 00:04:30.046
better, we need to dig in on

00:04:30.046 --> 00:04:31.936
what quarantine means and what

00:04:31.936 --> 00:04:32.996
it means to be launched by

00:04:32.996 --> 00:04:33.966
LaunchServices.

00:04:34.616 --> 00:04:36.776
So let's jump into that.

00:04:38.956 --> 00:04:41.426
Quarantine is a technology built

00:04:41.426 --> 00:04:44.046
into macOS to mark files that

00:04:44.046 --> 00:04:46.476
have arrived from somewhere else

00:04:46.576 --> 00:04:47.416
off of the device.

00:04:48.166 --> 00:04:49.446
When you download a file in a

00:04:49.446 --> 00:04:51.646
web browser or when someone

00:04:51.646 --> 00:04:52.996
sends you something via

00:04:52.996 --> 00:04:55.546
iMessages, or if you get an

00:04:55.546 --> 00:04:57.226
AirDrop, those files all get

00:04:57.226 --> 00:04:57.816
quarantined.

00:04:59.026 --> 00:05:01.046
Additionally, macOS will add

00:05:01.046 --> 00:05:03.506
metadata to that file about

00:05:03.506 --> 00:05:04.236
where it came from.

00:05:05.146 --> 00:05:06.146
So when we present a first

00:05:06.146 --> 00:05:07.676
launch prompt, we can give you

00:05:07.676 --> 00:05:10.146
more contexts about where that

00:05:10.286 --> 00:05:10.966
file came from.

00:05:12.406 --> 00:05:14.776
Now, quarantine is an opt-in

00:05:14.776 --> 00:05:16.666
model, which means that apps

00:05:16.986 --> 00:05:18.496
have to opt in to quarantining

00:05:18.496 --> 00:05:19.496
the files that they place on

00:05:19.496 --> 00:05:19.846
disk.

00:05:19.846 --> 00:05:22.876
And that generally means that

00:05:22.876 --> 00:05:24.756
when an app downloads files in

00:05:24.756 --> 00:05:26.486
the background as part of, for

00:05:26.486 --> 00:05:28.076
example, a self-update, those

00:05:28.076 --> 00:05:29.406
files generally never get

00:05:29.456 --> 00:05:30.016
quarantined.

00:05:31.406 --> 00:05:33.336
The exception there is if the

00:05:33.336 --> 00:05:34.416
app is App Sandboxed.

00:05:35.116 --> 00:05:36.456
Because quarantining files is

00:05:36.456 --> 00:05:37.826
the default for Sandboxed

00:05:37.826 --> 00:05:38.436
applications.

00:05:39.166 --> 00:05:42.126
So that helps you understand a

00:05:42.126 --> 00:05:43.496
little bit more about what files

00:05:43.496 --> 00:05:44.286
on a system will get

00:05:44.286 --> 00:05:44.816
quarantined.

00:05:45.556 --> 00:05:47.336
Now, let's talk about Launch

00:05:47.336 --> 00:05:48.016
Services.

00:05:49.976 --> 00:05:52.916
Launch Services is a framework

00:05:52.916 --> 00:05:53.936
for finding and launching

00:05:53.936 --> 00:05:54.696
applications.

00:05:54.696 --> 00:05:57.226
And it's generally responsible

00:05:57.226 --> 00:05:58.606
for most of the ways that you

00:05:58.606 --> 00:05:59.836
think of launching applications

00:05:59.836 --> 00:06:00.226
on your Mac.

00:06:01.286 --> 00:06:02.686
For example, when you open an

00:06:02.966 --> 00:06:04.786
app in Finder or the Dock that

00:06:04.786 --> 00:06:05.846
will use Launch Services.

00:06:06.896 --> 00:06:08.906
If you use the NSWorkspace APIs,

00:06:09.346 --> 00:06:10.416
those generally go through

00:06:10.416 --> 00:06:11.366
Launch Services also.

00:06:12.656 --> 00:06:13.656
And when apps get open via

00:06:13.656 --> 00:06:15.266
document handlers or directly

00:06:15.266 --> 00:06:16.976
through URLs, that all goes

00:06:16.976 --> 00:06:17.846
through Launch Services.

00:06:18.546 --> 00:06:21.396
Now, for the rest of the

00:06:21.396 --> 00:06:23.056
presentation, I'll use this

00:06:23.056 --> 00:06:24.396
Finder icon when I'm

00:06:24.396 --> 00:06:25.476
specifically talking about

00:06:25.476 --> 00:06:26.396
something that goes through the

00:06:26.396 --> 00:06:27.976
Launch Services path.

00:06:32.756 --> 00:06:34.556
But there are also many ways of

00:06:34.556 --> 00:06:36.436
loading code that don't go

00:06:36.436 --> 00:06:37.476
through Launch Services.

00:06:38.436 --> 00:06:39.766
Some examples that are not

00:06:39.766 --> 00:06:41.896
exhaustive, include using NSTask

00:06:42.826 --> 00:06:45.336
to start a process, or the exec

00:06:45.336 --> 00:06:48.126
and posix spawn's calls or

00:06:48.126 --> 00:06:49.316
loading a library into your

00:06:49.316 --> 00:06:50.966
process using the NSBundle APIs

00:06:50.966 --> 00:06:52.916
for loading or dlopen.

00:06:53.596 --> 00:06:55.616
And for the rest of the

00:06:55.616 --> 00:06:58.166
presentation, I'll use this

00:06:58.166 --> 00:07:00.296
terminal icon when I want to

00:07:00.296 --> 00:07:02.326
refer to loading code off of the

00:07:02.326 --> 00:07:04.046
Launch Services path.

00:07:06.386 --> 00:07:07.856
Now, let's quickly summarize

00:07:07.916 --> 00:07:08.916
everything that we've learned

00:07:08.916 --> 00:07:10.686
about Gatekeeper in a format

00:07:10.686 --> 00:07:12.026
that will make it easier to talk

00:07:12.026 --> 00:07:13.636
about what's changed this year.

00:07:14.306 --> 00:07:18.886
So here, we can see Gatekeeper's

00:07:18.886 --> 00:07:21.286
behavior and macOS Mojave that

00:07:21.286 --> 00:07:22.966
on the first launch of

00:07:23.066 --> 00:07:25.096
quarantine software on the

00:07:25.096 --> 00:07:27.536
Launch Services path, Gatekeeper

00:07:27.536 --> 00:07:28.956
will perform a malicious content

00:07:28.956 --> 00:07:30.956
scan and a signature check to

00:07:30.956 --> 00:07:31.966
ensure that there's no known

00:07:31.966 --> 00:07:33.056
malicious content and that the

00:07:33.056 --> 00:07:34.396
application hasn't been tampered

00:07:34.396 --> 00:07:34.586
with.

00:07:35.206 --> 00:07:37.586
Then it will perform a local

00:07:37.586 --> 00:07:39.576
policy check where the default

00:07:39.576 --> 00:07:40.506
is that it must be signed with

00:07:40.506 --> 00:07:42.556
the Developer ID certificate or

00:07:42.556 --> 00:07:43.256
by the App Store.

00:07:44.676 --> 00:07:45.746
And finally, it will present the

00:07:45.746 --> 00:07:47.226
first launch prompt to the user,

00:07:47.436 --> 00:07:48.986
so that the user must approve

00:07:49.656 --> 00:07:50.776
the application.

00:07:50.776 --> 00:07:52.556
Now, starting with the latest

00:07:52.556 --> 00:07:56.366
release of macOS Mojave 10.14.5,

00:07:57.306 --> 00:07:59.066
the default policy was changed

00:07:59.066 --> 00:08:01.026
slightly such that new Mac

00:08:01.116 --> 00:08:03.426
developer certificates required

00:08:03.426 --> 00:08:04.836
their software to be notarized

00:08:05.166 --> 00:08:09.166
to pass Gatekeeper, which brings

00:08:09.166 --> 00:08:10.766
us to the first improvement in

00:08:10.936 --> 00:08:11.636
macOS Catalina.

00:08:12.586 --> 00:08:14.036
We're expanding on this policy

00:08:14.546 --> 00:08:16.176
such that all new software

00:08:16.586 --> 00:08:17.746
requires notarization.

00:08:18.396 --> 00:08:22.326
And in this case, new means that

00:08:22.326 --> 00:08:24.546
the software was signed or built

00:08:24.546 --> 00:08:28.736
after June 1st, 2019.

00:08:28.946 --> 00:08:30.476
This means that all existing

00:08:30.476 --> 00:08:32.265
software will continue to pass

00:08:32.265 --> 00:08:34.275
through Gatekeeper as is, with

00:08:34.275 --> 00:08:35.816
just a Developer ID certificate

00:08:35.816 --> 00:08:36.206
signature.

00:08:37.035 --> 00:08:38.916
But that all new software must

00:08:38.916 --> 00:08:40.246
be notarized to pass Gatekeeper.

00:08:44.436 --> 00:08:47.406
Now, the next improvement that

00:08:47.406 --> 00:08:49.716
we've made in macOS Catalina is

00:08:49.716 --> 00:08:50.776
that Gatekeeper is going to be

00:08:50.776 --> 00:08:53.486
expanding to enforce the same

00:08:53.486 --> 00:08:56.096
policy on all quarantine

00:08:56.096 --> 00:08:56.576
software.

00:08:58.076 --> 00:08:59.586
And that means that regardless

00:08:59.776 --> 00:09:01.256
of how the software is loaded,

00:09:01.306 --> 00:09:04.376
if it's quarantined, it must

00:09:04.876 --> 00:09:06.086
contain no known malicious

00:09:06.086 --> 00:09:08.246
content, it must not be tampered

00:09:08.246 --> 00:09:10.936
with, new software will require

00:09:10.936 --> 00:09:11.636
notarization.

00:09:11.636 --> 00:09:13.886
And the first launch policy will

00:09:13.886 --> 00:09:15.416
be slightly different, where we

00:09:15.416 --> 00:09:17.366
won't be requiring first launch

00:09:17.506 --> 00:09:20.176
user approval for standalone

00:09:20.246 --> 00:09:22.596
executables or libraries, but

00:09:22.596 --> 00:09:24.566
all bundled software will show

00:09:24.566 --> 00:09:26.046
first launch prompt.

00:09:28.776 --> 00:09:30.106
So now, Gatekeeper has been

00:09:30.106 --> 00:09:31.966
expanded to scan and enforce

00:09:31.966 --> 00:09:33.826
policy on all quarantine

00:09:33.826 --> 00:09:34.266
software.

00:09:35.746 --> 00:09:36.906
And that brings me to the final

00:09:36.906 --> 00:09:38.596
improvement in macOS Catalina,

00:09:39.706 --> 00:09:41.236
Gatekeeper will be further

00:09:41.236 --> 00:09:43.786
protecting you by ensuring that

00:09:43.786 --> 00:09:45.966
all software gets a malicious

00:09:45.966 --> 00:09:46.676
content scan.

00:09:47.316 --> 00:09:50.696
And that means that regardless

00:09:50.696 --> 00:09:51.516
of whether software is

00:09:51.516 --> 00:09:53.666
quarantined, and regardless of

00:09:53.666 --> 00:09:56.056
how that code is loaded, if any

00:09:56.056 --> 00:09:57.136
known malicious content is

00:09:57.136 --> 00:09:59.126
found, it will be blocked and

00:10:00.156 --> 00:10:03.096
the user will be alerted.

00:10:04.406 --> 00:10:06.276
So this is a summary of all the

00:10:06.276 --> 00:10:08.196
ways that Gatekeeper has been

00:10:08.196 --> 00:10:10.646
expanded to help protect you in

00:10:10.786 --> 00:10:11.396
macOS Catalina.

00:10:12.916 --> 00:10:14.816
But it's important to keep one

00:10:14.816 --> 00:10:18.116
thing in mind.

00:10:18.276 --> 00:10:19.866
Our goal is to make every Mac

00:10:19.866 --> 00:10:23.106
user safe by default, but not to

00:10:23.106 --> 00:10:24.216
prevent you from running the

00:10:24.216 --> 00:10:26.126
software that you want to run on

00:10:26.126 --> 00:10:26.436
your Mac.

00:10:28.036 --> 00:10:29.586
And that means that there will

00:10:29.586 --> 00:10:31.366
always be a way to run a

00:10:31.366 --> 00:10:33.056
specific piece of software that

00:10:33.056 --> 00:10:34.926
you want to run on your system.

00:10:39.416 --> 00:10:41.346
Now, I talked a little bit

00:10:41.346 --> 00:10:42.516
earlier about how every year

00:10:42.516 --> 00:10:44.266
we're continuously improving the

00:10:44.266 --> 00:10:46.056
technologies and policies that

00:10:46.056 --> 00:10:46.946
we have at every layer.

00:10:47.836 --> 00:10:49.186
So I'd also like to take a

00:10:49.186 --> 00:10:50.106
minute to talk a little bit

00:10:50.106 --> 00:10:52.436
about what's next for

00:10:52.436 --> 00:10:52.886
Gatekeeper.

00:10:53.586 --> 00:10:56.886
Now, we have a really big goal

00:10:57.546 --> 00:10:58.356
on the security engineering

00:10:58.356 --> 00:10:58.546
team.

00:10:58.906 --> 00:11:01.216
We want to make macOS just as

00:11:01.216 --> 00:11:04.496
secure as iOS, while still

00:11:04.496 --> 00:11:06.126
maintaining all the flexibility

00:11:06.126 --> 00:11:07.856
that you've come to expect out

00:11:07.856 --> 00:11:08.256
of your Mac.

00:11:09.566 --> 00:11:10.656
And that presents some really

00:11:10.656 --> 00:11:11.626
interesting challenges.

00:11:13.006 --> 00:11:14.176
But one thing has become really

00:11:14.176 --> 00:11:16.956
clear, the security of the

00:11:16.956 --> 00:11:18.556
platform has become increasingly

00:11:18.556 --> 00:11:20.416
reliant on the validity of code

00:11:20.416 --> 00:11:20.926
signatures.

00:11:21.576 --> 00:11:26.416
And this means that if an app

00:11:26.416 --> 00:11:29.456
has no signature, it's

00:11:29.686 --> 00:11:31.516
impossible to detect tampering.

00:11:32.256 --> 00:11:36.686
And further, if a bundle

00:11:36.686 --> 00:11:39.466
signature has become broken at

00:11:40.776 --> 00:11:42.366
runtime, it's very difficult to

00:11:42.366 --> 00:11:44.006
differentiate malicious

00:11:44.006 --> 00:11:46.356
tampering from mundane tampering

00:11:46.546 --> 00:11:47.926
when in out modifies itself at

00:11:47.926 --> 00:11:48.186
runtime.

00:11:53.076 --> 00:11:54.376
And in a future version of

00:11:54.376 --> 00:11:57.026
macOS, unsigned code will not

00:11:57.026 --> 00:11:57.976
run by default anymore.

00:12:02.056 --> 00:12:03.156
And to get there, there's a

00:12:03.156 --> 00:12:04.566
couple of things that you can do

00:12:04.566 --> 00:12:06.786
to help improve the security of

00:12:06.786 --> 00:12:07.266
the platform.

00:12:08.706 --> 00:12:12.256
First, sign and notarize all the

00:12:12.256 --> 00:12:14.006
software that you distribute,

00:12:14.516 --> 00:12:15.376
even if it doesn't get

00:12:15.376 --> 00:12:15.976
quarantined today.

00:12:20.616 --> 00:12:24.406
Second, don't break application

00:12:24.406 --> 00:12:25.816
or bundle signatures at runtime.

00:12:26.886 --> 00:12:28.176
If you do need to update an

00:12:28.176 --> 00:12:29.616
application, make sure that it

00:12:29.616 --> 00:12:31.136
results in an application on

00:12:31.136 --> 00:12:33.016
disk that is properly signed and

00:12:33.016 --> 00:12:34.546
notarized still.

00:12:37.096 --> 00:12:39.636
And finally, remember that

00:12:39.636 --> 00:12:41.126
loading code can fail.

00:12:41.656 --> 00:12:43.036
If you try to load a quarantine

00:12:43.036 --> 00:12:44.436
library or process and the user

00:12:44.436 --> 00:12:46.626
chooses not to run it, that will

00:12:46.626 --> 00:12:48.786
fail and ensure that your apps

00:12:48.896 --> 00:12:50.006
gracefully handle these

00:12:50.006 --> 00:12:50.486
failures.

00:12:56.426 --> 00:12:57.846
So these are all the ways that

00:12:57.846 --> 00:12:59.706
Gatekeeper has been expanded to

00:12:59.706 --> 00:13:00.626
try to prevent malicious

00:13:00.626 --> 00:13:01.866
software from ever running on

00:13:01.866 --> 00:13:02.116
your Mac.

00:13:03.216 --> 00:13:04.686
Now, let's bring up Kelly to

00:13:04.686 --> 00:13:06.246
talk about advancements in user

00:13:06.286 --> 00:13:07.196
privacy protection.

00:13:08.226 --> 00:13:08.536
Kelly.

00:13:09.516 --> 00:13:13.376
[ Applause ]

00:13:13.876 --> 00:13:14.666
>> Well, thank you, Garrett.

00:13:15.046 --> 00:13:16.186
Good morning, everyone.

00:13:16.386 --> 00:13:17.616
My name is Kelly Yancey.

00:13:17.616 --> 00:13:18.756
I work with Garrett in the

00:13:18.756 --> 00:13:19.606
security engineering and

00:13:19.606 --> 00:13:20.726
architecture team at Apple.

00:13:21.276 --> 00:13:24.746
And last year at WWDC 2018, it

00:13:24.746 --> 00:13:26.596
was my privilege to introduce

00:13:26.596 --> 00:13:28.306
the new privacy protections in

00:13:28.306 --> 00:13:30.416
macOS Mojave, broadly

00:13:30.416 --> 00:13:31.466
characterized-- sorry.

00:13:31.466 --> 00:13:32.766
Let's get to that.

00:13:32.766 --> 00:13:34.406
These protections were designed

00:13:34.406 --> 00:13:36.476
to improve user's transparency

00:13:36.476 --> 00:13:38.066
over their-- how their data was

00:13:38.096 --> 00:13:39.476
being accessed and give them

00:13:39.476 --> 00:13:40.966
control over those accesses.

00:13:41.226 --> 00:13:42.096
And I'm really excited to be

00:13:42.096 --> 00:13:43.606
back here today to talk about

00:13:43.606 --> 00:13:44.686
the improvements that we've made

00:13:44.926 --> 00:13:45.996
in macOS Catalina.

00:13:47.446 --> 00:13:49.046
Now, broadly characterized,

00:13:49.176 --> 00:13:51.496
their privacy protections

00:13:51.496 --> 00:13:53.396
require user consent to access

00:13:53.396 --> 00:13:54.646
hardware that could record the

00:13:54.646 --> 00:13:56.336
users, such as the camera or

00:13:56.336 --> 00:13:58.806
microphone, or to access the

00:13:58.806 --> 00:14:00.566
user's privacy sensitive files

00:14:00.566 --> 00:14:03.056
or folders, such as photos, mail

00:14:03.056 --> 00:14:03.746
or messages.

00:14:04.916 --> 00:14:07.596
In addition, they also protect

00:14:07.596 --> 00:14:08.896
the ability to automate other

00:14:08.896 --> 00:14:10.986
apps, so that the user is in

00:14:10.986 --> 00:14:12.456
control over how their data is

00:14:12.456 --> 00:14:13.586
being shared between apps.

00:14:14.666 --> 00:14:16.096
I like to start today by looking

00:14:16.096 --> 00:14:17.276
at the recording capabilities.

00:14:18.456 --> 00:14:20.766
Beginning in macOS Mojave, users

00:14:20.766 --> 00:14:22.386
have to consent before an app

00:14:22.386 --> 00:14:23.456
can access the camera or

00:14:23.456 --> 00:14:24.026
microphone.

00:14:24.796 --> 00:14:26.946
And then macOS Catalina further

00:14:26.946 --> 00:14:29.106
requires consent to record the

00:14:29.106 --> 00:14:31.166
contents of your screen or the

00:14:31.166 --> 00:14:32.056
keys that you type on your

00:14:32.056 --> 00:14:32.416
keyboard.

00:14:32.486 --> 00:14:35.566
And this is important because

00:14:35.666 --> 00:14:36.766
just like we don't want people

00:14:36.766 --> 00:14:38.136
shoulder surfing, looking over

00:14:38.136 --> 00:14:38.976
our shoulder to see what we're

00:14:38.976 --> 00:14:41.746
doing or are typing, we don't

00:14:41.746 --> 00:14:45.416
want apps to eavesdrop on our

00:14:45.416 --> 00:14:47.206
contact information, our bank

00:14:47.206 --> 00:14:49.746
details or passwords and so on,

00:14:49.746 --> 00:14:50.956
whether that's intentionally or

00:14:50.956 --> 00:14:51.606
accidentally.

00:14:52.136 --> 00:14:54.246
So how do we do that?

00:14:54.646 --> 00:14:55.796
Let's start by looking at screen

00:14:55.796 --> 00:14:56.196
recording.

00:14:56.636 --> 00:14:59.686
Here's a simple example of using

00:14:59.736 --> 00:15:01.586
CGDisplayStream to record the

00:15:01.586 --> 00:15:02.856
contents of a display in real

00:15:02.856 --> 00:15:03.166
time.

00:15:03.806 --> 00:15:05.636
On macOS Catalina, the first

00:15:05.636 --> 00:15:09.456
time this app runs and this call

00:15:09.626 --> 00:15:12.156
to create the CGDisplayStream is

00:15:12.156 --> 00:15:14.776
made that'll return nil, and a

00:15:14.776 --> 00:15:16.876
dialogue is displayed directing

00:15:16.876 --> 00:15:17.876
the user to the security and

00:15:17.876 --> 00:15:20.656
privacy preference pane, where

00:15:20.656 --> 00:15:22.226
the user can approve the app to

00:15:22.226 --> 00:15:24.076
record the screen if that's what

00:15:24.076 --> 00:15:26.786
they want to do.

00:15:26.986 --> 00:15:28.466
The same is true when reading

00:15:28.466 --> 00:15:29.896
the contents of other apps

00:15:29.896 --> 00:15:30.366
windows.

00:15:30.796 --> 00:15:32.306
For example, here's a function

00:15:32.596 --> 00:15:33.656
that saves the contents of a

00:15:33.656 --> 00:15:35.326
window to an image on disk.

00:15:36.786 --> 00:15:38.186
Now, notably, the call to

00:15:38.246 --> 00:15:41.166
CGWindowListCreateImage can

00:15:41.166 --> 00:15:43.136
return nil, if passed the window

00:15:43.276 --> 00:15:46.056
ID that does not belong to the

00:15:46.056 --> 00:15:48.846
calling app, and doesn't belong

00:15:48.846 --> 00:15:50.766
to the desktop background image

00:15:51.206 --> 00:15:52.146
or to the menu bar.

00:15:52.146 --> 00:15:53.366
And I like to emphasize, this is

00:15:53.366 --> 00:15:54.636
the background image, it doesn't

00:15:54.636 --> 00:15:56.916
include the icons or names of

00:15:56.916 --> 00:15:58.476
any files on the desktop.

00:16:00.656 --> 00:16:03.056
Again, an authorization dialog,

00:16:03.266 --> 00:16:04.816
directing the user to approve

00:16:04.816 --> 00:16:06.946
the app for screen recording,

00:16:06.946 --> 00:16:07.846
may be displayed.

00:16:08.026 --> 00:16:09.446
And I say may, because the

00:16:09.446 --> 00:16:10.746
dialog is only displayed the

00:16:10.746 --> 00:16:11.606
first time

00:16:11.606 --> 00:16:14.356
CGWindowListCreateImage or

00:16:14.356 --> 00:16:16.336
CGDisplayStream fails due to a

00:16:16.336 --> 00:16:17.946
lack of approval for screen

00:16:17.946 --> 00:16:18.316
recording.

00:16:18.786 --> 00:16:22.226
Another topic I'd like to cover

00:16:22.306 --> 00:16:23.676
that's peripherally related to

00:16:23.676 --> 00:16:25.096
screen recording is window

00:16:25.096 --> 00:16:25.586
metadata.

00:16:26.776 --> 00:16:28.376
Apps can query metadata about

00:16:28.376 --> 00:16:29.666
the windows that are on or off

00:16:29.666 --> 00:16:31.766
screen using the core graphics

00:16:31.906 --> 00:16:33.946
CGWindowListCopyWindowInfo

00:16:35.136 --> 00:16:35.796
function.

00:16:36.696 --> 00:16:39.176
The metadata returned includes

00:16:39.176 --> 00:16:40.806
the size and position of the

00:16:40.806 --> 00:16:42.576
window and the unique window

00:16:42.576 --> 00:16:44.036
identifier, as well as the name

00:16:44.036 --> 00:16:45.896
and process of identifier of the

00:16:45.896 --> 00:16:47.086
app that owns the window.

00:16:47.536 --> 00:16:50.326
However, the window name and

00:16:50.326 --> 00:16:52.176
sharing state are not available,

00:16:52.456 --> 00:16:54.196
unless the user has preapproved

00:16:54.196 --> 00:16:55.696
the app for screen recording.

00:16:56.506 --> 00:16:57.706
And this is because some apps

00:16:57.936 --> 00:16:59.166
put sensitive data such as

00:16:59.166 --> 00:17:01.736
account names or more likely web

00:17:01.736 --> 00:17:04.016
page URLs in the window's name.

00:17:05.435 --> 00:17:08.465
And CGWindowListCopyWindowInfo

00:17:08.986 --> 00:17:10.346
never triggers an authorization

00:17:10.346 --> 00:17:11.766
prompt, instead it filters the

00:17:11.766 --> 00:17:13.066
set of metadata that it returns

00:17:13.066 --> 00:17:13.606
to the caller.

00:17:14.136 --> 00:17:16.626
So, if in your app you depend on

00:17:16.626 --> 00:17:17.816
getting the window name, for

00:17:17.816 --> 00:17:19.896
example, and you find that the

00:17:19.896 --> 00:17:20.976
metadata that's being returned

00:17:20.976 --> 00:17:22.116
doesn't include the window name,

00:17:22.415 --> 00:17:24.586
you may want to alert the user

00:17:24.586 --> 00:17:26.536
and direct them to the privacy--

00:17:26.776 --> 00:17:28.096
security and privacy preference

00:17:28.596 --> 00:17:28.686
pane.

00:17:29.716 --> 00:17:32.986
So, here's an example of a

00:17:32.986 --> 00:17:34.216
function that gets the unique

00:17:34.216 --> 00:17:36.086
window identifiers for the

00:17:36.086 --> 00:17:37.426
desktop background image for

00:17:37.426 --> 00:17:38.066
each display.

00:17:38.066 --> 00:17:40.356
And once again, the background

00:17:40.356 --> 00:17:42.696
image doesn't include the icons

00:17:42.696 --> 00:17:43.426
on the desktop.

00:17:46.136 --> 00:17:48.066
This function first gets a list

00:17:48.066 --> 00:17:49.616
of all of the windows on the

00:17:49.616 --> 00:17:50.606
screen, using the

00:17:50.686 --> 00:17:52.876
CGWindowListCopyWindowInfo

00:17:52.876 --> 00:17:53.206
function.

00:17:54.436 --> 00:17:56.886
But then, it gets the window

00:17:56.886 --> 00:17:58.496
level or Z order that core

00:17:58.496 --> 00:17:59.876
graphics uses for the desktop

00:17:59.876 --> 00:18:01.276
background image window.

00:18:02.856 --> 00:18:04.636
Then it filters that whole

00:18:04.636 --> 00:18:06.626
window list to just those

00:18:06.626 --> 00:18:07.946
windows at the desktop

00:18:07.946 --> 00:18:09.126
background window level.

00:18:10.106 --> 00:18:11.396
So if you look on the internet,

00:18:11.396 --> 00:18:12.186
you'll find a lot of code

00:18:12.186 --> 00:18:14.796
samples filter by the kCG window

00:18:14.796 --> 00:18:16.806
name which, since the window

00:18:16.806 --> 00:18:17.986
names may contain privacy

00:18:17.986 --> 00:18:19.636
sensitive information, would

00:18:19.636 --> 00:18:20.636
require the app to be

00:18:20.636 --> 00:18:21.736
preapproved for screen

00:18:21.736 --> 00:18:22.166
recording.

00:18:23.146 --> 00:18:24.636
However, by identifying the

00:18:24.636 --> 00:18:26.676
desktop background windows by

00:18:26.676 --> 00:18:27.976
their window level rather than

00:18:27.976 --> 00:18:30.206
by the window name, this works

00:18:30.206 --> 00:18:31.536
regardless of whether the user

00:18:31.536 --> 00:18:32.726
has preapproved the app for

00:18:32.726 --> 00:18:33.416
screen recording.

00:18:33.756 --> 00:18:34.846
And this is an example of how a

00:18:34.846 --> 00:18:37.726
small change in your-- the

00:18:37.726 --> 00:18:40.196
design of your app can make a

00:18:40.196 --> 00:18:42.246
big difference in the user

00:18:42.246 --> 00:18:42.796
experience.

00:18:43.366 --> 00:18:46.916
So that's how macOS Catalina

00:18:46.916 --> 00:18:48.836
protects the contents of your

00:18:48.836 --> 00:18:50.026
screen from being recorded

00:18:50.026 --> 00:18:50.856
without your permission.

00:18:51.356 --> 00:18:52.606
Apps can freely record the

00:18:52.606 --> 00:18:55.016
contents of their own windows,

00:18:56.216 --> 00:18:57.786
the menu bar and the desktop

00:18:57.786 --> 00:18:58.616
background image.

00:18:59.746 --> 00:19:00.926
But the user must use the

00:19:00.926 --> 00:19:02.386
security and privacy preference

00:19:02.386 --> 00:19:04.616
pane to preapprove apps to

00:19:04.616 --> 00:19:07.746
record the entire screen or the

00:19:07.746 --> 00:19:08.826
contents of windows other than

00:19:08.826 --> 00:19:08.976
their own.

00:19:12.066 --> 00:19:13.086
Now, I'd like to present the

00:19:13.086 --> 00:19:14.316
other recording capability now

00:19:14.316 --> 00:19:15.756
protected in macOS Catalina,

00:19:15.996 --> 00:19:18.586
your keyboard.

00:19:18.586 --> 00:19:20.266
Most users have an expectation

00:19:20.636 --> 00:19:22.546
that their keystrokes are only

00:19:22.546 --> 00:19:23.436
going to the app that they're

00:19:23.436 --> 00:19:24.876
interacting with, the front most

00:19:25.076 --> 00:19:27.566
app, and most apps only require

00:19:27.566 --> 00:19:28.846
a keyboard input when the user

00:19:28.846 --> 00:19:29.796
is actively using them.

00:19:30.166 --> 00:19:31.736
And in fact, if your app uses

00:19:31.776 --> 00:19:33.536
the standard UI components, they

00:19:33.536 --> 00:19:34.586
handle those keyboard events

00:19:34.586 --> 00:19:35.556
that are being delivered to your

00:19:35.556 --> 00:19:36.426
app automatically.

00:19:36.426 --> 00:19:38.896
Now, some apps want to be able

00:19:38.896 --> 00:19:40.956
to intercept those events as

00:19:40.956 --> 00:19:41.886
they're being delivered to their

00:19:41.886 --> 00:19:42.126
app.

00:19:42.126 --> 00:19:43.636
And that's fine, they can

00:19:43.636 --> 00:19:46.436
subclass NSApplication and

00:19:46.436 --> 00:19:47.916
override the sendEvent method,

00:19:48.346 --> 00:19:50.346
or as shown here, you can use

00:19:50.346 --> 00:19:51.066
NSEvent's

00:19:51.066 --> 00:19:53.206
addLocalMonitorForEvents

00:19:56.606 --> 00:19:56.836
function.

00:19:56.936 --> 00:19:58.636
Monitoring all keyboard events,

00:19:59.076 --> 00:20:00.346
including those for other apps,

00:20:00.346 --> 00:20:02.076
however, requires user approval.

00:20:03.156 --> 00:20:04.466
And here you can see an example

00:20:04.466 --> 00:20:07.776
of using CGEventTapCreate to

00:20:07.776 --> 00:20:09.856
invoke a callback for key press

00:20:09.856 --> 00:20:10.596
and release events.

00:20:11.706 --> 00:20:12.836
Now, the first time this code

00:20:12.836 --> 00:20:14.556
runs, this call, the

00:20:14.556 --> 00:20:18.136
CGEventTapCreate will fail and

00:20:18.136 --> 00:20:21.776
return nil.

00:20:22.006 --> 00:20:24.086
Meanwhile, a dialog is displayed

00:20:24.086 --> 00:20:25.026
directing the user to the

00:20:25.026 --> 00:20:26.226
security and privacy preference

00:20:26.226 --> 00:20:28.416
pane, where the user can approve

00:20:28.416 --> 00:20:29.816
your app to monitor keyboard

00:20:29.816 --> 00:20:31.546
events in the background, if

00:20:31.546 --> 00:20:32.556
they so desire.

00:20:32.966 --> 00:20:35.906
Now, apps may check the

00:20:35.906 --> 00:20:37.636
authorization status without

00:20:37.636 --> 00:20:38.896
triggering the approval prompt,

00:20:39.976 --> 00:20:42.366
using the IOHIDCheckAccess

00:20:42.366 --> 00:20:42.946
function with the

00:20:42.946 --> 00:20:45.516
kIOHIDRequestTypeListenEvent

00:20:45.516 --> 00:20:45.936
parameter.

00:20:46.486 --> 00:20:50.576
And apps can request an approval

00:20:50.576 --> 00:20:51.986
dialog to be displayed without

00:20:51.986 --> 00:20:54.466
creating an event tab or trying

00:20:54.466 --> 00:20:56.796
to post an event by using the

00:20:56.796 --> 00:20:58.776
IOHIDRequestAccess function,

00:20:58.776 --> 00:20:59.816
again with the same parameter.

00:21:00.406 --> 00:21:03.856
So in summary, macOS Catalina

00:21:03.856 --> 00:21:05.436
now requires user consent for

00:21:05.436 --> 00:21:07.176
apps to record the contents of

00:21:07.176 --> 00:21:08.976
your screen or the keys that you

00:21:08.976 --> 00:21:09.826
type on your keyboard.

00:21:11.196 --> 00:21:12.186
Now, I'd like to turn your

00:21:12.186 --> 00:21:15.116
attention to how macOS protects

00:21:15.116 --> 00:21:16.776
access to your privacy sensitive

00:21:16.776 --> 00:21:17.126
files.

00:21:17.766 --> 00:21:20.776
So continuing the approach in

00:21:20.776 --> 00:21:24.056
Mojave, macOS Catalina offers

00:21:24.056 --> 00:21:25.606
two broad levels of privacy

00:21:25.606 --> 00:21:27.426
protection for the user's files

00:21:27.426 --> 00:21:27.976
and folders.

00:21:28.756 --> 00:21:30.496
First, user data that apps may

00:21:30.526 --> 00:21:31.696
generally access such as

00:21:31.736 --> 00:21:33.456
contacts or photos, and for

00:21:33.456 --> 00:21:35.146
these, macOS will confirm that

00:21:35.146 --> 00:21:36.916
the user consents before sharing

00:21:36.916 --> 00:21:38.476
that data with apps.

00:21:39.756 --> 00:21:41.256
But second, there's also user

00:21:41.256 --> 00:21:43.156
data which-- for which the file

00:21:43.156 --> 00:21:43.936
system is really just an

00:21:43.936 --> 00:21:45.496
implementation detail, it's not

00:21:45.496 --> 00:21:46.086
part of their API.

00:21:46.086 --> 00:21:47.896
And these are things like mail

00:21:47.896 --> 00:21:49.906
or messages and Safari browsing

00:21:49.906 --> 00:21:50.306
history.

00:21:50.976 --> 00:21:52.306
And these have a high barrier to

00:21:52.306 --> 00:21:53.656
access because the files are

00:21:53.656 --> 00:21:55.306
typically only accessed by

00:21:55.306 --> 00:21:56.666
specialized apps such as disk

00:21:56.666 --> 00:21:58.326
management or backup utilities.

00:21:59.716 --> 00:22:00.876
But first, let's talk about

00:22:00.876 --> 00:22:01.816
those files and folders that

00:22:01.816 --> 00:22:05.036
require user consent to access.

00:22:05.206 --> 00:22:06.696
Now, macOS Mojave introduced

00:22:06.696 --> 00:22:08.636
user consent requirements to

00:22:08.636 --> 00:22:10.766
access your contacts, calendars,

00:22:10.766 --> 00:22:12.106
reminders, or your photos

00:22:12.106 --> 00:22:13.746
library via the file system.

00:22:14.636 --> 00:22:15.696
And what that looks like is a

00:22:15.696 --> 00:22:18.186
prompt like this, when an app

00:22:18.186 --> 00:22:19.586
tries to access files in one of

00:22:19.586 --> 00:22:20.306
these categories.

00:22:20.906 --> 00:22:23.616
Now, this is different than the

00:22:23.616 --> 00:22:24.916
authorization dialogs that we

00:22:24.916 --> 00:22:26.386
just saw for screen recording

00:22:26.806 --> 00:22:28.426
and keyboard event recording,

00:22:29.236 --> 00:22:30.896
rather than denying the access

00:22:30.896 --> 00:22:31.956
and displaying an alert to the

00:22:31.956 --> 00:22:34.876
user, the calling thread is

00:22:34.876 --> 00:22:36.486
actually blocked, waiting for

00:22:36.486 --> 00:22:37.946
the user to approve or deny the

00:22:37.946 --> 00:22:39.156
app access to files in the

00:22:39.156 --> 00:22:39.656
category.

00:22:41.896 --> 00:22:43.776
In macOS Catalina, we

00:22:43.776 --> 00:22:45.156
complemented these categories

00:22:45.966 --> 00:22:47.876
with these additional categories

00:22:48.016 --> 00:22:49.336
for data where the file system

00:22:49.396 --> 00:22:49.966
is API.

00:22:51.356 --> 00:22:52.266
These represent various

00:22:52.266 --> 00:22:53.586
locations where the users store

00:22:53.586 --> 00:22:54.386
their documents.

00:22:55.696 --> 00:22:56.826
They double click on them in

00:22:56.826 --> 00:22:57.296
Finder.

00:22:58.256 --> 00:22:59.486
They select them via Open or

00:22:59.486 --> 00:23:01.656
Save panels, and so on.

00:23:02.536 --> 00:23:04.276
The user's desktop and document

00:23:04.276 --> 00:23:05.366
folders were prime candidates

00:23:05.366 --> 00:23:06.516
for protection since that's the

00:23:06.516 --> 00:23:07.656
default location where many

00:23:07.656 --> 00:23:08.716
users store their files.

00:23:10.126 --> 00:23:12.176
And downloads because some apps,

00:23:12.176 --> 00:23:13.756
including Safari, save

00:23:13.756 --> 00:23:14.796
downloaded files there by

00:23:14.796 --> 00:23:18.736
default, also protecting

00:23:18.736 --> 00:23:20.776
documents stored in iCloud Drive

00:23:20.906 --> 00:23:23.236
or third-party cloud storage

00:23:23.236 --> 00:23:26.246
providers or on removable volumes

00:23:26.246 --> 00:23:27.206
and if you've been around as

00:23:27.206 --> 00:23:28.116
long as I have, you may be

00:23:28.116 --> 00:23:29.276
thinking floppy disks.

00:23:29.706 --> 00:23:31.906
But here I mean any storage that

00:23:31.906 --> 00:23:33.186
can be physically removed,

00:23:33.466 --> 00:23:35.276
including USB thumb drives or

00:23:35.276 --> 00:23:36.136
external disks.

00:23:37.846 --> 00:23:39.086
And as I'm sure you

00:23:39.086 --> 00:23:40.066
photographers out there can

00:23:40.066 --> 00:23:41.416
attest, some people have their

00:23:41.416 --> 00:23:43.086
entire lives chronicled on

00:23:43.156 --> 00:23:45.466
external disks, or on

00:23:45.536 --> 00:23:46.666
network-attached storage.

00:23:48.876 --> 00:23:50.886
So, macOS Catalina is now

00:23:50.886 --> 00:23:52.876
protecting many of the most

00:23:52.876 --> 00:23:54.306
common locations where we store

00:23:54.306 --> 00:23:56.256
our files.

00:23:56.986 --> 00:24:00.186
Now, user consent is not

00:24:00.186 --> 00:24:01.976
required for an app to create

00:24:01.976 --> 00:24:03.276
new documents in any of these

00:24:03.276 --> 00:24:05.956
protected locations, just to

00:24:05.956 --> 00:24:08.086
read existing contents, the

00:24:08.536 --> 00:24:09.776
contents of files that are

00:24:09.776 --> 00:24:10.186
already there.

00:24:10.456 --> 00:24:13.416
So, for example, a file transfer

00:24:13.416 --> 00:24:15.806
app can continue to save new

00:24:15.806 --> 00:24:17.506
files to the user's downloads

00:24:17.506 --> 00:24:20.486
folder without triggering a

00:24:21.156 --> 00:24:21.896
consent prompt.

00:24:21.896 --> 00:24:23.446
And user privacy protections in

00:24:23.446 --> 00:24:26.206
macOS Catalina now support the

00:24:26.206 --> 00:24:29.126
notion of user intent, when--

00:24:29.346 --> 00:24:31.936
which is inferred when double

00:24:31.936 --> 00:24:33.336
clicking on files in Finder,

00:24:33.986 --> 00:24:35.716
when dragging and dropping from

00:24:35.716 --> 00:24:37.466
another application or when

00:24:37.466 --> 00:24:39.276
selecting files in an Open or

00:24:39.276 --> 00:24:39.806
Save panel.

00:24:41.256 --> 00:24:42.486
And when the user performs any

00:24:42.486 --> 00:24:44.656
of these actions, the file--

00:24:44.866 --> 00:24:48.066
performing any of these actions

00:24:48.066 --> 00:24:49.386
on a file protected location,

00:24:50.336 --> 00:24:52.036
your app gets access to the file

00:24:52.036 --> 00:24:54.146
or files that the user selected

00:24:54.196 --> 00:24:55.816
without the need for a consent

00:24:56.446 --> 00:24:56.626
prompt.

00:24:57.356 --> 00:24:59.976
So let's see how Catalina's

00:25:00.376 --> 00:25:02.106
inference of user intent

00:25:02.286 --> 00:25:03.666
compares with user consent.

00:25:05.536 --> 00:25:08.736
Sorry. So, first of all, user

00:25:08.736 --> 00:25:10.166
consent is reactive.

00:25:10.976 --> 00:25:13.216
Access may be granted only after

00:25:13.556 --> 00:25:15.186
your app tries to read or write

00:25:15.186 --> 00:25:17.016
a file, whereas user intent is

00:25:17.136 --> 00:25:17.716
proactive.

00:25:18.306 --> 00:25:19.696
Access is granted before the

00:25:19.696 --> 00:25:22.766
app, even tries to read or write

00:25:24.016 --> 00:25:24.326
the file.

00:25:24.326 --> 00:25:26.736
And user consent prompts to kind

00:25:26.736 --> 00:25:27.536
of interrupt the user's

00:25:27.536 --> 00:25:30.286
workflow, whereas user intent is

00:25:30.286 --> 00:25:31.526
inferred from standard UI

00:25:31.526 --> 00:25:32.126
interactions.

00:25:33.386 --> 00:25:34.346
In order to minimize those

00:25:34.346 --> 00:25:36.066
interruptions, user consent

00:25:36.066 --> 00:25:37.746
applies to an entire class of

00:25:37.746 --> 00:25:39.456
data, for example, all files on

00:25:39.456 --> 00:25:40.146
your desktop.

00:25:40.576 --> 00:25:41.926
Whereas user intent is inferred

00:25:41.926 --> 00:25:43.416
for just the file or files that

00:25:43.416 --> 00:25:44.836
the user is interacting with.

00:25:46.126 --> 00:25:47.456
Now, that said, the two are not

00:25:47.456 --> 00:25:48.356
mutually exclusive.

00:25:49.156 --> 00:25:50.426
So long as your app is accessing

00:25:50.456 --> 00:25:52.176
files it created or which the

00:25:52.176 --> 00:25:54.356
user selected, no consent

00:25:54.356 --> 00:25:55.356
prompts are necessary.

00:25:56.446 --> 00:25:57.766
But if your app accesses files

00:25:57.766 --> 00:25:59.336
in a privacy protected location,

00:25:59.756 --> 00:26:00.986
other than ones that it created

00:26:00.986 --> 00:26:03.316
itself or ones that the user has

00:26:03.316 --> 00:26:05.496
selected, the user will need to

00:26:05.496 --> 00:26:07.326
approve that access via consent

00:26:07.326 --> 00:26:07.586
prompt.

00:26:08.816 --> 00:26:10.766
Now, one common scenario where

00:26:10.766 --> 00:26:12.426
an app might need to access a

00:26:12.426 --> 00:26:14.426
file other than one that the

00:26:14.466 --> 00:26:16.686
user selected are sidecar files.

00:26:17.746 --> 00:26:19.356
For example, to automatically

00:26:19.356 --> 00:26:21.516
open a subtitle file that's--

00:26:22.216 --> 00:26:23.706
with-- of the same name but next

00:26:23.706 --> 00:26:25.656
to a movie file.

00:26:26.816 --> 00:26:28.406
So using the related items

00:26:28.506 --> 00:26:30.216
support in NSFileCoordinator,

00:26:30.736 --> 00:26:33.646
it's possible for the inferred

00:26:33.646 --> 00:26:35.176
permissions for one file to be

00:26:35.176 --> 00:26:37.426
extended to other files.

00:26:41.076 --> 00:26:43.116
To use NSFileCoordinator to open

00:26:43.166 --> 00:26:44.806
a sidecar file, you need to

00:26:44.806 --> 00:26:46.936
first declare the extension of

00:26:46.936 --> 00:26:48.546
the sidecar file in your apps,

00:26:49.546 --> 00:26:52.256
CFBundleDocumentTypes Info.plist

00:26:52.326 --> 00:26:52.486
key.

00:26:53.216 --> 00:26:57.726
And, set the NSIsRelatedItemType

00:26:58.306 --> 00:26:59.046
to Boolean true.

00:27:00.046 --> 00:27:03.146
Then in your code, you subclass

00:27:03.146 --> 00:27:05.706
NSFilePresenter, set the

00:27:05.706 --> 00:27:07.956
primaryPresentedItemURL to the

00:27:07.956 --> 00:27:09.376
file that the user selected.

00:27:09.486 --> 00:27:11.056
So that's the one that your app

00:27:11.056 --> 00:27:12.116
already has access to.

00:27:12.906 --> 00:27:14.526
And the PresentedItemURL to the

00:27:14.526 --> 00:27:15.466
sidecar file.

00:27:15.656 --> 00:27:16.596
That's the one that you want to

00:27:16.596 --> 00:27:17.076
access to.

00:27:18.316 --> 00:27:19.626
And note that the sidecar file

00:27:19.626 --> 00:27:21.136
may have a different extension

00:27:21.476 --> 00:27:23.026
as the user selected file, but

00:27:23.026 --> 00:27:25.006
all other path components must

00:27:25.006 --> 00:27:25.516
be identical.

00:27:26.896 --> 00:27:29.996
Finally, you create an

00:27:30.306 --> 00:27:32.446
NSFileCoordinator referencing

00:27:32.446 --> 00:27:33.746
the NSFilePresenter instance.

00:27:35.006 --> 00:27:36.206
And when you call the

00:27:36.206 --> 00:27:37.876
NSFileCoordinator's coordinate

00:27:37.906 --> 00:27:39.846
method, your app gets access to

00:27:39.916 --> 00:27:42.026
the sidecar file as well for the

00:27:42.026 --> 00:27:43.226
duration of that block.

00:27:43.676 --> 00:27:46.756
And that's a quick rundown of

00:27:46.756 --> 00:27:47.786
how your apps can use

00:27:47.786 --> 00:27:49.706
NSFileCoordinator to gain access

00:27:49.736 --> 00:27:51.336
to files with the same name, but

00:27:51.336 --> 00:27:52.806
a different filename extension

00:27:53.546 --> 00:27:54.646
as ones that the user has

00:27:54.646 --> 00:27:56.276
selected without triggering a

00:27:56.276 --> 00:27:57.236
user consent prompt.

00:27:58.616 --> 00:28:00.386
Now, to securely infer user

00:28:00.386 --> 00:28:02.176
intent, the Open and Save panels

00:28:02.626 --> 00:28:04.426
are now always hosted out of

00:28:04.426 --> 00:28:04.986
process.

00:28:05.936 --> 00:28:07.186
As a result, the class

00:28:07.186 --> 00:28:08.666
inheritance and view hierarchies

00:28:08.966 --> 00:28:10.906
have changed, which could affect

00:28:10.906 --> 00:28:12.436
your app if you have subclass

00:28:12.436 --> 00:28:14.126
NSOpenPanel or NSSavePanel.

00:28:14.696 --> 00:28:17.686
And apps can no longer

00:28:17.976 --> 00:28:20.136
programmatically accept the

00:28:20.136 --> 00:28:22.116
panels by calling the OK method,

00:28:22.486 --> 00:28:23.476
the user must do that

00:28:23.476 --> 00:28:23.986
themselves.

00:28:25.656 --> 00:28:27.626
There are also slight changes to

00:28:27.626 --> 00:28:29.856
the NSOpenSavePanelDelegate

00:28:29.856 --> 00:28:30.766
methods as well.

00:28:30.766 --> 00:28:33.536
Apps can no longer rewrite the

00:28:33.536 --> 00:28:35.246
user selection using this

00:28:35.246 --> 00:28:35.596
method.

00:28:36.166 --> 00:28:39.446
And accessing the files that

00:28:39.446 --> 00:28:41.126
URLs provided to these methods

00:28:41.386 --> 00:28:42.736
may trigger user consent

00:28:42.776 --> 00:28:44.416
prompts, because these methods

00:28:44.416 --> 00:28:46.946
are invoked by the panels while

00:28:46.946 --> 00:28:48.256
the user is still interacting

00:28:48.256 --> 00:28:49.446
with the panel, so they haven't

00:28:49.446 --> 00:28:50.796
selected the file yet.

00:28:51.336 --> 00:28:52.466
So therefore, your app has not

00:28:52.616 --> 00:28:53.706
yet been granted access.

00:28:54.286 --> 00:28:56.976
Now, apps can test whether a

00:28:56.976 --> 00:28:58.126
given file is readable or

00:28:58.126 --> 00:28:59.696
writable without triggering

00:28:59.696 --> 00:29:02.546
consent prompts using these

00:29:03.966 --> 00:29:04.106
APIs.

00:29:04.316 --> 00:29:06.256
And, so long as your app only

00:29:06.576 --> 00:29:08.486
accesses files that the-- that

00:29:08.486 --> 00:29:10.836
in itself creates or that the

00:29:10.836 --> 00:29:13.366
user-- that it receives via file

00:29:13.366 --> 00:29:16.256
open events or drag and drop or

00:29:16.256 --> 00:29:17.446
Open panel or Save panel

00:29:17.496 --> 00:29:19.036
selections, your app's

00:29:19.036 --> 00:29:20.436
permission to access those files

00:29:20.606 --> 00:29:22.416
is inferred and no user consent

00:29:22.456 --> 00:29:23.786
prompt is necessary.

00:29:24.616 --> 00:29:27.356
However, if a consent prompt is

00:29:27.356 --> 00:29:29.196
required, all of the new

00:29:29.196 --> 00:29:30.776
protected file system locations

00:29:31.116 --> 00:29:32.146
support purpose strings.

00:29:32.726 --> 00:29:33.626
And purpose strings can be

00:29:33.626 --> 00:29:34.916
specified in your Info.plist to

00:29:34.916 --> 00:29:36.866
explain the context of the

00:29:36.866 --> 00:29:38.396
access when a consent prompt is

00:29:38.446 --> 00:29:38.856
displayed.

00:29:43.416 --> 00:29:45.066
And while purpose strings for

00:29:45.066 --> 00:29:46.336
these categories are optional,

00:29:46.996 --> 00:29:48.326
if your app access is one of

00:29:48.326 --> 00:29:49.586
these protected locations,

00:29:50.246 --> 00:29:52.786
intentionally, a purpose string

00:29:52.866 --> 00:29:54.126
for that location is highly

00:29:54.126 --> 00:29:55.466
recommended so that the user

00:29:55.466 --> 00:29:56.946
understands why your app is

00:29:56.946 --> 00:29:58.636
accessing their documents.

00:29:59.296 --> 00:30:01.006
Now, if you find in your testing

00:30:01.196 --> 00:30:02.386
your app is triggering consent

00:30:02.416 --> 00:30:03.726
prompts that you don't expect,

00:30:04.246 --> 00:30:05.506
you can click the Don't Allow

00:30:05.506 --> 00:30:07.236
button and go to the console app

00:30:07.236 --> 00:30:08.206
and look for the resulting

00:30:08.206 --> 00:30:09.806
Sandbox violation, that'll tell

00:30:09.806 --> 00:30:11.266
you the file that your app was

00:30:11.266 --> 00:30:13.396
trying to access and the

00:30:13.396 --> 00:30:17.446
backtrace that caused to require

00:30:18.706 --> 00:30:19.726
the consent prompt.

00:30:20.286 --> 00:30:23.286
So that's how macOS Catalina is

00:30:23.316 --> 00:30:25.406
protecting user's documents and

00:30:25.406 --> 00:30:26.986
how the standard UI and how it's

00:30:26.986 --> 00:30:28.316
using standard UI interactions

00:30:28.356 --> 00:30:29.696
to infer which documents they

00:30:29.696 --> 00:30:30.846
expect apps to access.

00:30:32.186 --> 00:30:34.536
So let's look at how macOS

00:30:34.536 --> 00:30:36.216
protects user data that's

00:30:36.216 --> 00:30:37.706
managed by the system and how

00:30:37.706 --> 00:30:39.126
your apps can request access to

00:30:39.126 --> 00:30:40.076
that data if necessary.

00:30:41.836 --> 00:30:43.306
Here, we see the categories of

00:30:43.306 --> 00:30:45.616
data protected starting in macOS

00:30:45.616 --> 00:30:46.036
Mojave.

00:30:46.706 --> 00:30:49.666
Now, some software such as disk

00:30:49.666 --> 00:30:51.196
management or backup software

00:30:51.636 --> 00:30:53.086
work with all files regardless

00:30:53.086 --> 00:30:53.806
of their content.

00:30:54.636 --> 00:30:56.716
And those software-- those apps

00:30:56.716 --> 00:30:58.366
can use the same APIs that we

00:30:58.366 --> 00:31:00.986
just saw a minute ago to

00:31:00.986 --> 00:31:02.276
determine whether a given file

00:31:02.276 --> 00:31:03.176
is readable or writable.

00:31:03.176 --> 00:31:04.516
And then depending on what's

00:31:04.516 --> 00:31:05.516
appropriate for the app, they

00:31:05.566 --> 00:31:07.216
could skip inaccessible pass or

00:31:07.216 --> 00:31:08.736
they could alert the user and

00:31:08.736 --> 00:31:10.286
direct them to approve the app

00:31:10.286 --> 00:31:11.606
in the security and privacy

00:31:11.606 --> 00:31:12.706
preference pane to have full

00:31:12.706 --> 00:31:13.296
functionality.

00:31:13.926 --> 00:31:17.646
And here's where they would

00:31:17.646 --> 00:31:18.696
approve that for Full Disk

00:31:18.696 --> 00:31:19.146
Access.

00:31:19.786 --> 00:31:22.596
And while we're here, I'd like

00:31:22.596 --> 00:31:23.776
to talk about one of the

00:31:23.776 --> 00:31:25.076
enhancements that we've made in

00:31:25.226 --> 00:31:29.296
macOS Catalina to how apps are

00:31:29.296 --> 00:31:30.596
approved for Full Disk Access,

00:31:30.906 --> 00:31:32.196
while users can still manually

00:31:32.196 --> 00:31:34.076
add apps to the list using the

00:31:34.546 --> 00:31:35.376
plus button here.

00:31:36.616 --> 00:31:37.646
One piece of feedback that we've

00:31:37.646 --> 00:31:39.386
gotten from developers is that

00:31:39.386 --> 00:31:40.916
it can be awkward for users to

00:31:40.916 --> 00:31:43.196
locate their app's privileged

00:31:43.196 --> 00:31:43.646
helpers.

00:31:44.486 --> 00:31:46.666
So, now in macOS Catalina,

00:31:47.076 --> 00:31:48.466
executables that are denied

00:31:48.466 --> 00:31:50.156
access to files due to a lack of

00:31:50.226 --> 00:31:52.026
Full Disk Access approval are

00:31:52.026 --> 00:31:53.986
now prepopulated unchecked.

00:31:55.066 --> 00:31:56.266
Here, we see one such helper

00:31:56.556 --> 00:31:57.856
identified by its executable

00:31:57.856 --> 00:31:58.046
name.

00:31:58.656 --> 00:32:01.776
If that helper were embedded in

00:32:01.776 --> 00:32:03.656
a bundle, the display name in

00:32:03.656 --> 00:32:06.356
icon specifying the bundles

00:32:06.356 --> 00:32:08.046
Info.plist would be displayed

00:32:08.046 --> 00:32:09.166
instead.

00:32:12.136 --> 00:32:13.586
So, again, this data is

00:32:13.586 --> 00:32:15.096
accessible for apps that have

00:32:15.096 --> 00:32:16.406
been preapproved for Full Disk

00:32:16.406 --> 00:32:18.546
Access, apps can test for

00:32:18.546 --> 00:32:20.316
authorization using FileManager

00:32:20.316 --> 00:32:23.306
or POSIX level APIs, and if

00:32:23.306 --> 00:32:25.136
necessary, can guide the user to

00:32:25.136 --> 00:32:25.996
the security and privacy

00:32:25.996 --> 00:32:28.246
preference pane, where the user

00:32:28.246 --> 00:32:30.226
can then approve the app if

00:32:30.226 --> 00:32:33.526
that's what they want.

00:32:33.526 --> 00:32:34.716
Now, in Catalina, the universe

00:32:34.716 --> 00:32:36.186
of data that requires

00:32:36.186 --> 00:32:37.966
preapproval for Full Disk Access

00:32:38.336 --> 00:32:40.406
has been expanded to include

00:32:40.946 --> 00:32:41.456
trash.

00:32:43.316 --> 00:32:44.776
Now, a lot of people think of

00:32:44.776 --> 00:32:46.656
files as being gone when they

00:32:46.656 --> 00:32:47.786
move them to their trash.

00:32:48.206 --> 00:32:49.386
So the last thing they would

00:32:49.386 --> 00:32:51.086
expect is for something to go

00:32:51.146 --> 00:32:52.056
digging through their trash

00:32:52.056 --> 00:32:52.456
files.

00:32:53.086 --> 00:32:54.926
That's terrifying, at this size.

00:32:59.106 --> 00:33:00.786
As with these other categories,

00:33:01.166 --> 00:33:02.436
trash may contain lots of

00:33:02.436 --> 00:33:03.816
privacy sensitive data.

00:33:03.876 --> 00:33:04.956
However, unlike these other

00:33:04.956 --> 00:33:07.006
categories, trash is file

00:33:07.006 --> 00:33:08.706
centric and does have API for

00:33:08.776 --> 00:33:09.966
manipulating those files.

00:33:10.496 --> 00:33:13.006
APIs like these, which move

00:33:13.006 --> 00:33:14.296
files into the user's trash.

00:33:15.796 --> 00:33:17.216
Now, I'd like to drill down on

00:33:17.216 --> 00:33:19.216
the FileManager trash item API a

00:33:19.216 --> 00:33:19.616
little.

00:33:20.086 --> 00:33:23.076
It takes a URL of the file to

00:33:23.076 --> 00:33:23.996
move to the trash as it's

00:33:23.996 --> 00:33:24.446
argument.

00:33:25.046 --> 00:33:28.706
Now, the caller needs to already

00:33:28.706 --> 00:33:29.856
have access to that file, you

00:33:29.856 --> 00:33:31.236
can't move files to the trash

00:33:31.236 --> 00:33:32.176
that you're-- you don't have

00:33:32.176 --> 00:33:33.106
access to yourself.

00:33:34.396 --> 00:33:35.846
But when successful, it

00:33:35.846 --> 00:33:37.646
populates the out resulting URL

00:33:37.646 --> 00:33:39.336
parameter, with an NSURL for the

00:33:39.386 --> 00:33:41.866
file at its new location in the

00:33:41.866 --> 00:33:42.556
user's trash.

00:33:43.736 --> 00:33:45.656
And it still has access to that

00:33:45.656 --> 00:33:45.876
URL.

00:33:46.486 --> 00:33:47.616
To make sense, it had access to

00:33:47.616 --> 00:33:48.636
the file before it moved it.

00:33:48.746 --> 00:33:49.856
It still has access to the file

00:33:49.856 --> 00:33:50.546
after it moved it.

00:33:50.686 --> 00:33:51.696
And this allows you to use

00:33:51.936 --> 00:33:53.566
FileManager APIs, for example,

00:33:53.746 --> 00:33:55.826
to move the file back out of the

00:33:57.196 --> 00:33:57.326
trash.

00:33:57.516 --> 00:33:58.686
So in summary, while apps

00:33:58.686 --> 00:34:00.456
require Full Disk Access to

00:34:00.456 --> 00:34:01.906
enumerate the files in the trash

00:34:02.326 --> 00:34:03.786
or to see those files contents,

00:34:04.416 --> 00:34:06.016
no authorization is required to

00:34:06.016 --> 00:34:08.246
move files into the trash or to

00:34:08.246 --> 00:34:09.466
access files that they had

00:34:09.516 --> 00:34:10.786
previously put in the trash.

00:34:12.936 --> 00:34:14.606
Finally, I like to talk briefly

00:34:14.606 --> 00:34:15.366
about automation.

00:34:16.716 --> 00:34:18.755
macOS Mojave introduced consent

00:34:18.755 --> 00:34:20.686
requirements for automation of

00:34:20.686 --> 00:34:22.606
the system or of other apps.

00:34:22.856 --> 00:34:23.966
And this is important to prevent

00:34:23.966 --> 00:34:25.366
malware from abusing apps that

00:34:25.366 --> 00:34:26.406
you've trusted with your data.

00:34:31.156 --> 00:34:32.545
So, first, there's synthetic

00:34:32.545 --> 00:34:33.056
events.

00:34:33.286 --> 00:34:34.835
And synthetic input events are

00:34:34.835 --> 00:34:36.706
typically used by accessibility

00:34:36.755 --> 00:34:39.116
software in providing aid for

00:34:39.616 --> 00:34:41.996
keyboard or mouse input.

00:34:42.565 --> 00:34:46.295
But because user consent

00:34:46.295 --> 00:34:48.576
dialogs, user intent inference

00:34:48.576 --> 00:34:49.896
or various other security

00:34:49.896 --> 00:34:53.005
prompts all rely on user input,

00:34:53.835 --> 00:34:54.906
it's important that synthetic

00:34:54.906 --> 00:34:56.716
input events are only allowed

00:34:56.876 --> 00:34:58.146
from apps that the user has

00:34:58.146 --> 00:35:00.356
installed for the purpose of

00:35:00.356 --> 00:35:01.356
acting as their proxy.

00:35:01.926 --> 00:35:05.396
Here's a sample code-- Here's an

00:35:05.486 --> 00:35:09.476
example of code that simulates a

00:35:09.476 --> 00:35:10.936
key press and key release.

00:35:11.496 --> 00:35:13.716
The first time this code runs

00:35:13.716 --> 00:35:16.856
and tries to post these events

00:35:16.856 --> 00:35:17.906
as if they were actually typed

00:35:17.906 --> 00:35:20.096
by the user, the events are

00:35:20.256 --> 00:35:20.756
discarded.

00:35:20.756 --> 00:35:23.156
And a dialog like this one is

00:35:23.216 --> 00:35:25.256
displayed alerting the user that

00:35:25.256 --> 00:35:25.996
they will need to go to the

00:35:25.996 --> 00:35:27.306
security and privacy preference

00:35:27.366 --> 00:35:29.446
pane to authorize the app for

00:35:29.446 --> 00:35:30.486
accessibility features.

00:35:32.556 --> 00:35:34.796
Now, earlier, we looked at this

00:35:34.796 --> 00:35:36.186
sample code for listening to

00:35:36.186 --> 00:35:37.636
keyboard events.

00:35:38.416 --> 00:35:40.646
If I change the listenOnly

00:35:41.946 --> 00:35:44.426
parameter to defaultTap, like

00:35:45.316 --> 00:35:49.516
that, CGEventTapCreate now

00:35:49.516 --> 00:35:51.636
creates a modifying event tab,

00:35:51.636 --> 00:35:53.456
where the callback can alter the

00:35:53.456 --> 00:35:54.066
event stream.

00:35:54.186 --> 00:35:55.796
And this means now your app has

00:35:56.006 --> 00:35:57.356
a way to influence what events

00:35:57.356 --> 00:35:58.186
are delivered to the rest of the

00:35:58.186 --> 00:36:01.306
system, where a listen-only

00:36:01.306 --> 00:36:03.026
event requires authorization for

00:36:03.026 --> 00:36:04.826
input monitoring, a modifying

00:36:04.826 --> 00:36:06.266
event app requires authorization

00:36:06.266 --> 00:36:07.456
for accessibility features.

00:36:08.086 --> 00:36:10.496
Now, apps can test whether the

00:36:10.496 --> 00:36:13.026
user has approved the app to

00:36:13.026 --> 00:36:15.516
synthesize local-- synthesize

00:36:15.516 --> 00:36:16.946
input events using the

00:36:16.946 --> 00:36:18.676
IOHIDCheckAccess function.

00:36:19.266 --> 00:36:20.646
And this is the same API for

00:36:20.646 --> 00:36:22.446
checking authorization for

00:36:22.616 --> 00:36:23.686
keyboard input monitoring.

00:36:24.236 --> 00:36:25.996
But, here you can see that we're

00:36:25.996 --> 00:36:27.206
passing the

00:36:27.206 --> 00:36:29.386
kIOHIDRequestTypePostEvent

00:36:29.386 --> 00:36:30.066
instead.

00:36:30.486 --> 00:36:33.766
So, that was automation via

00:36:33.806 --> 00:36:34.576
synthetic events.

00:36:35.306 --> 00:36:36.726
Now, let's talk about automating

00:36:36.726 --> 00:36:37.946
apps via Apple Events.

00:36:39.456 --> 00:36:41.016
So, the user must consent before

00:36:41.016 --> 00:36:43.156
one app can use AppleScript or

00:36:43.156 --> 00:36:44.646
raw Apple Events to control the

00:36:44.646 --> 00:36:46.876
actions of another app.

00:36:46.876 --> 00:36:47.986
These consent prompts make it

00:36:47.986 --> 00:36:49.706
clear, which apps are acting

00:36:49.706 --> 00:36:50.626
under the influence of which

00:36:50.626 --> 00:36:52.596
other apps and give the user

00:36:52.596 --> 00:36:53.926
control over that automation.

00:36:54.676 --> 00:36:57.226
Now, there are exceptions for

00:36:57.346 --> 00:37:02.206
Apple Events that don't give the

00:37:02.526 --> 00:37:03.806
sending process access to

00:37:03.846 --> 00:37:04.906
privacy sensitive data.

00:37:04.906 --> 00:37:07.406
Many of these events are exposed

00:37:07.406 --> 00:37:09.426
via NSWorkspace APIs.

00:37:10.876 --> 00:37:10.946
The

00:37:11.176 --> 00:37:13.766
AEDeterminePermissionToAutomate

00:37:13.766 --> 00:37:16.376
Target function can be used to

00:37:16.376 --> 00:37:17.626
test whether authorization would

00:37:17.626 --> 00:37:19.356
be required to send Apple Events

00:37:19.356 --> 00:37:20.636
to a target application.

00:37:21.526 --> 00:37:23.556
And here's an example, testing

00:37:23.556 --> 00:37:25.006
whether the caller can send any

00:37:25.006 --> 00:37:26.236
Apple event to Keynote.

00:37:26.756 --> 00:37:30.986
And by passing Boolean true for

00:37:30.986 --> 00:37:32.596
the askUserIfNeeded parameter,

00:37:33.066 --> 00:37:34.376
you could ask that a approval

00:37:34.376 --> 00:37:35.916
prompt is triggered if

00:37:35.916 --> 00:37:36.506
necessary.

00:37:37.606 --> 00:37:38.506
But I will point out that if a

00:37:38.506 --> 00:37:39.976
prompt is displayed, the calling

00:37:39.976 --> 00:37:41.156
thread is blocked waiting for

00:37:41.156 --> 00:37:42.786
the user's interaction, so you

00:37:42.786 --> 00:37:43.886
wouldn't want to call this on

00:37:43.886 --> 00:37:44.956
your app's main thread.

00:37:45.966 --> 00:37:47.956
Now, this API is pretty low

00:37:47.956 --> 00:37:49.146
level, returning an OSStatus

00:37:49.146 --> 00:37:50.156
code indicating whether the

00:37:50.156 --> 00:37:52.256
caller is permitted to send the

00:37:52.256 --> 00:37:55.256
Apple event to the target or

00:37:55.256 --> 00:37:58.126
not, whether trying to send the

00:37:58.126 --> 00:37:59.336
Apple event would result in a

00:37:59.336 --> 00:38:00.976
prompt confirming the user's

00:38:00.976 --> 00:38:03.136
consent, or whether the target

00:38:03.136 --> 00:38:04.236
is not running at the moment and

00:38:04.236 --> 00:38:05.306
that trying to send the Apple

00:38:05.416 --> 00:38:06.726
even would cause it to launch,

00:38:07.826 --> 00:38:09.476
or whether some error occurred.

00:38:10.026 --> 00:38:12.296
So that was a quick summary of

00:38:12.296 --> 00:38:15.076
how macOS captures user consent

00:38:15.076 --> 00:38:16.376
before allowing apps to automate

00:38:16.376 --> 00:38:18.066
other apps, and how your apps

00:38:18.066 --> 00:38:19.226
can determine whether consent

00:38:19.226 --> 00:38:20.366
was given and adjust

00:38:20.366 --> 00:38:20.806
accordingly.

00:38:23.096 --> 00:38:25.486
So, now, in macOS Catalina, user

00:38:25.486 --> 00:38:27.256
consent is required to record

00:38:27.256 --> 00:38:29.146
your screen or keyboard, that's

00:38:29.146 --> 00:38:30.336
an addition to the existing

00:38:30.336 --> 00:38:31.256
protections for camera and

00:38:31.256 --> 00:38:31.816
microphone.

00:38:32.466 --> 00:38:34.036
And now, a number of common

00:38:34.036 --> 00:38:35.386
location-- common document

00:38:35.386 --> 00:38:37.016
locations are also protected

00:38:37.016 --> 00:38:39.116
such as user's desktop documents

00:38:39.556 --> 00:38:41.756
downloads, their iCloud Drive or

00:38:41.856 --> 00:38:43.866
third-party storage, removable

00:38:43.866 --> 00:38:45.346
network volumes and, of course,

00:38:45.416 --> 00:38:45.866
trash.

00:38:46.506 --> 00:38:49.586
Now, the Privacy Preferences

00:38:49.976 --> 00:38:52.386
Policy Control MDM payload has

00:38:52.386 --> 00:38:54.346
also been extended with services

00:38:54.526 --> 00:38:55.876
for the new protected resources

00:38:55.876 --> 00:38:56.846
in macOS Catalina.

00:38:57.586 --> 00:38:59.386
And, I'd like to point out that

00:38:59.386 --> 00:39:01.126
during development, you may want

00:39:01.126 --> 00:39:02.506
to trigger-- be able to

00:39:02.506 --> 00:39:03.666
retrigger prompts while you're

00:39:03.666 --> 00:39:04.766
testing your app behavior.

00:39:05.286 --> 00:39:06.346
And you can use these same

00:39:06.346 --> 00:39:07.936
service names that you see on

00:39:07.936 --> 00:39:11.046
the left side, with a tccutil

00:39:11.046 --> 00:39:12.786
command line tool to reset the

00:39:12.786 --> 00:39:13.956
prompting status for the

00:39:13.956 --> 00:39:15.356
respective protected resources.

00:39:17.356 --> 00:39:18.826
So, earlier, we heard from

00:39:18.826 --> 00:39:20.076
Garrett about the enhancements

00:39:20.076 --> 00:39:21.976
in Gatekeeper, and we just

00:39:21.976 --> 00:39:22.916
discussed some of the

00:39:22.916 --> 00:39:26.226
improvements in the user privacy

00:39:26.226 --> 00:39:28.676
protections in macOS Catalina.

00:39:29.346 --> 00:39:32.956
I'd like to recap by saying,

00:39:33.606 --> 00:39:35.016
remember to sign and notarize

00:39:35.096 --> 00:39:36.116
all of the software that you

00:39:36.116 --> 00:39:36.646
distribute.

00:39:37.326 --> 00:39:39.856
And, don't modify those bundles

00:39:39.856 --> 00:39:40.496
once signed.

00:39:40.836 --> 00:39:42.176
If you do need to modify the

00:39:42.176 --> 00:39:44.006
bundles, be sure that you just

00:39:44.006 --> 00:39:45.626
transform them into another

00:39:45.626 --> 00:39:51.566
bundle that is also signed.

00:39:51.746 --> 00:39:53.986
And, for user privacy

00:39:53.986 --> 00:39:55.756
protections, try to leverage

00:39:55.756 --> 00:39:57.326
standard UI as much as possible.

00:39:57.586 --> 00:39:59.356
Be sure to handle errors and

00:39:59.356 --> 00:40:01.746
APIs that may return, if the

00:40:01.746 --> 00:40:04.136
user-- sorry, handle any errors,

00:40:04.136 --> 00:40:05.456
APIs may return if the user

00:40:05.456 --> 00:40:05.966
declines consent.

00:40:06.126 --> 00:40:08.136
And remember that once users

00:40:08.546 --> 00:40:10.066
authorize your app to access

00:40:10.066 --> 00:40:11.986
their personal data, it's-- the

00:40:11.986 --> 00:40:13.196
responsibility to protect their

00:40:13.196 --> 00:40:14.466
privacy passes to you.

00:40:14.816 --> 00:40:16.176
So handle user's data with care.

00:40:17.836 --> 00:40:18.936
Thank you very much.

00:40:18.936 --> 00:40:20.326
I hope you enjoy the rest of the

00:40:20.326 --> 00:40:21.336
week here at WWDC.

00:40:21.426 --> 00:40:22.466
There's a security lab

00:40:22.466 --> 00:40:23.636
immediately afterwards if you

00:40:23.636 --> 00:40:25.846
have any questions about these

00:40:25.846 --> 00:40:27.056
or any other of the privacy or

00:40:27.056 --> 00:40:28.626
security protections in macOS.

00:40:28.626 --> 00:40:29.726
Thank you very much.

00:40:30.516 --> 00:40:34.500
[ Applause ]