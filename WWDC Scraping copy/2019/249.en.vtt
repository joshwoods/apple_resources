WEBVTT

00:00:01.516 --> 00:00:04.500
[ Music ]

00:00:10.646 --> 00:00:13.176
>> Multi-camera capture or as we

00:00:13.176 --> 00:00:14.506
like to call it internally,

00:00:15.106 --> 00:00:16.886
MultiCam.

00:00:17.896 --> 00:00:20.356
MultiCam is our single most

00:00:20.396 --> 00:00:21.976
requested third-party feature.

00:00:21.976 --> 00:00:23.766
We hear it year after year in

00:00:23.766 --> 00:00:24.246
the labs.

00:00:24.246 --> 00:00:25.876
So what we're talking about here

00:00:25.876 --> 00:00:27.846
is the ability to simultaneously

00:00:27.846 --> 00:00:31.536
capture video, audio, metadata,

00:00:31.816 --> 00:00:34.666
depth and photos from multiple

00:00:34.666 --> 00:00:35.786
cameras and microphones

00:00:35.786 --> 00:00:36.686
simultaneously.

00:00:37.236 --> 00:00:40.186
Third parties aren't the only

00:00:40.186 --> 00:00:41.306
ones who benefit from this

00:00:41.306 --> 00:00:41.556
though.

00:00:42.166 --> 00:00:44.416
We've had many and repeated

00:00:44.416 --> 00:00:45.566
requests from first-party

00:00:45.596 --> 00:00:47.426
clients as well for MultiCam

00:00:47.466 --> 00:00:47.916
capture.

00:00:48.416 --> 00:00:50.096
Chief among them is ARKit.

00:00:50.456 --> 00:00:51.966
And if you heard the keynote,

00:00:52.516 --> 00:00:53.736
you heard about the introduction

00:00:53.736 --> 00:00:54.936
of ARKit 3.

00:00:55.576 --> 00:00:57.876
These APIs use front camera for

00:00:57.966 --> 00:01:00.166
face and pose tracking while

00:01:00.166 --> 00:01:01.656
also using the back camera for

00:01:01.656 --> 00:01:03.416
world tracking which helps them

00:01:03.416 --> 00:01:04.686
know where to place virtual

00:01:04.686 --> 00:01:06.266
characters in the scene by

00:01:06.266 --> 00:01:07.296
knowing what you're gazing at.

00:01:08.876 --> 00:01:10.776
So we've supported MultiCam on

00:01:10.776 --> 00:01:12.936
the Mac since the very first

00:01:12.936 --> 00:01:15.166
appearance of AVFoundation way

00:01:15.166 --> 00:01:16.276
the heck back in Lion.

00:01:17.126 --> 00:01:19.446
But on iOS, AVFoundation still

00:01:19.446 --> 00:01:21.226
limits clients to one active

00:01:21.286 --> 00:01:22.286
camera at a time.

00:01:22.906 --> 00:01:24.716
And it's not because we're mean.

00:01:24.916 --> 00:01:26.356
There were good reasons for it.

00:01:26.756 --> 00:01:27.996
The first reason is hardware

00:01:27.996 --> 00:01:28.796
limitations.

00:01:29.346 --> 00:01:30.796
I'm talking about cameras

00:01:30.846 --> 00:01:33.296
sharing power rails and not

00:01:33.566 --> 00:01:34.896
physically being able to provide

00:01:34.896 --> 00:01:36.256
enough power to power two

00:01:36.296 --> 00:01:37.726
cameras simultaneously full

00:01:37.726 --> 00:01:38.096
bore.

00:01:38.816 --> 00:01:41.016
And the second reason was our

00:01:41.016 --> 00:01:42.766
desire to ship a responsible

00:01:42.766 --> 00:01:44.896
API, one that would help you not

00:01:45.016 --> 00:01:47.516
burn the phone down when doing

00:01:47.516 --> 00:01:49.126
all of this processing power

00:01:49.126 --> 00:01:50.186
with multiple cameras

00:01:50.186 --> 00:01:51.076
simultaneously.

00:01:51.076 --> 00:01:52.146
So we wanted to make sure that

00:01:52.146 --> 00:01:53.226
we delivered something to you

00:01:53.226 --> 00:01:55.056
that would help you deal with

00:01:55.056 --> 00:01:56.606
the hardware, thermal and

00:01:56.606 --> 00:01:58.336
bandwidth constraints that are a

00:01:58.336 --> 00:01:59.356
reality in our world.

00:02:00.406 --> 00:02:02.136
All right, so great news in iOS

00:02:02.176 --> 00:02:03.686
13, we do finally support

00:02:03.686 --> 00:02:05.696
MultiCam capture, and we do it

00:02:05.696 --> 00:02:07.596
on all recent hardware, iPhone

00:02:07.666 --> 00:02:12.166
XS, XS Max, XR and the new iPad

00:02:12.236 --> 00:02:12.656
Pro.

00:02:13.116 --> 00:02:14.936
On all of these platforms, the

00:02:14.936 --> 00:02:15.796
aforementioned hardware

00:02:15.796 --> 00:02:17.156
limitations have been solved

00:02:17.356 --> 00:02:17.786
thankfully.

00:02:19.176 --> 00:02:20.616
So let's dive right in to the

00:02:20.726 --> 00:02:21.416
fun stuff.

00:02:21.566 --> 00:02:23.716
We've got a new set of APIs for

00:02:23.716 --> 00:02:25.586
building MultiCam sessions.

00:02:26.926 --> 00:02:28.516
Now, if you've used AVFoundation

00:02:28.516 --> 00:02:29.856
before for camera capture, you

00:02:29.856 --> 00:02:31.336
know that we have four main

00:02:31.336 --> 00:02:33.196
groups of classes: inputs,

00:02:33.646 --> 00:02:36.346
outputs, the session and

00:02:36.346 --> 00:02:37.046
connections.

00:02:37.576 --> 00:02:40.456
The AVCaptureSession is the

00:02:40.456 --> 00:02:41.516
center of our world.

00:02:41.666 --> 00:02:43.046
It's the thing that marshals

00:02:43.046 --> 00:02:43.296
data.

00:02:43.846 --> 00:02:44.916
It's the thing that you tell to

00:02:44.916 --> 00:02:46.016
start or stop running.

00:02:47.556 --> 00:02:49.146
You add to it one or more

00:02:49.146 --> 00:02:50.936
inputs, AVCapture inputs.

00:02:51.326 --> 00:02:52.076
One such is the

00:02:52.076 --> 00:02:54.236
AVCaptureDeviceInput which is a

00:02:54.236 --> 00:02:56.356
wrapper for either a camera or a

00:02:56.356 --> 00:02:56.916
microphone.

00:02:58.416 --> 00:02:59.646
You also need to add one or more

00:02:59.646 --> 00:03:01.846
AVCapture outputs to receive the

00:03:01.846 --> 00:03:02.146
data.

00:03:02.566 --> 00:03:03.956
Otherwise, those producers have

00:03:03.956 --> 00:03:04.616
nowhere to put it.

00:03:05.686 --> 00:03:06.396
And then the session

00:03:06.396 --> 00:03:07.386
automatically creates

00:03:07.386 --> 00:03:08.666
connections on your behalf

00:03:08.906 --> 00:03:10.626
between inputs and outputs that

00:03:10.626 --> 00:03:12.066
have compatible media types.

00:03:12.846 --> 00:03:13.796
So note what I'm showing you

00:03:13.796 --> 00:03:14.946
here is the traditional

00:03:14.946 --> 00:03:17.296
AVCaptureSession, which on iOS

00:03:17.296 --> 00:03:19.686
only allows one camera input per

00:03:19.686 --> 00:03:20.096
session.

00:03:21.796 --> 00:03:24.116
New in iOS 13, we're introducing

00:03:24.116 --> 00:03:25.906
a subclass of AVCaptureSession

00:03:25.906 --> 00:03:28.476
called AVCaptureMultiCamSession.

00:03:28.856 --> 00:03:31.276
So this lets you do multiple ins

00:03:31.336 --> 00:03:32.106
and outs.

00:03:32.996 --> 00:03:36.076
AVCaptureSession is not

00:03:36.266 --> 00:03:36.946
deprecated.

00:03:36.946 --> 00:03:38.306
It's not going away.

00:03:38.596 --> 00:03:40.226
In fact, the existing

00:03:40.226 --> 00:03:41.586
AVCaptureSession is still the

00:03:41.586 --> 00:03:42.656
preferred class when you're

00:03:42.656 --> 00:03:44.216
doing single-cam capture.

00:03:44.686 --> 00:03:45.826
The reason for that is that

00:03:45.936 --> 00:03:48.066
MultiCamSession, while being a

00:03:48.066 --> 00:03:50.436
power tool has some limitations,

00:03:50.606 --> 00:03:51.896
and I'll address those later.

00:03:53.366 --> 00:03:54.926
All right, so let me give you an

00:03:54.926 --> 00:03:56.256
example of a bread-and-butter

00:03:56.256 --> 00:03:58.036
use case for our new

00:03:58.036 --> 00:03:59.346
AVCaptureMultiCamSession.

00:03:59.866 --> 00:04:01.206
Let's say you want to add two

00:04:01.206 --> 00:04:02.456
devices, one for the front and

00:04:02.456 --> 00:04:04.546
one for the back camera to a

00:04:04.546 --> 00:04:07.056
MultiCamSession and do two video

00:04:07.056 --> 00:04:09.296
data outputs simultaneously, one

00:04:09.296 --> 00:04:10.516
receiving frames from the back

00:04:10.576 --> 00:04:11.646
camera, one from the front.

00:04:12.886 --> 00:04:14.666
And then let's say if you want

00:04:14.776 --> 00:04:16.106
to do a real-time preview, you

00:04:16.106 --> 00:04:17.136
can add separate

00:04:17.136 --> 00:04:18.456
VideoPreviewLayers, one for the

00:04:18.505 --> 00:04:19.636
front, one for the back.

00:04:20.866 --> 00:04:21.956
You needn't stop there though.

00:04:22.896 --> 00:04:27.116
You can do simultaneous metadata

00:04:27.116 --> 00:04:28.616
outputs if you want to do

00:04:28.616 --> 00:04:30.766
simultaneous barcode scanning or

00:04:30.766 --> 00:04:31.586
face detection.

00:04:32.576 --> 00:04:34.516
You could do multiple movie file

00:04:34.516 --> 00:04:35.736
outputs if you want to record

00:04:35.736 --> 00:04:36.756
one for the front and one for

00:04:36.756 --> 00:04:37.016
the back.

00:04:37.526 --> 00:04:39.286
You could add multiple photo

00:04:39.286 --> 00:04:40.886
outputs if you want to do

00:04:41.096 --> 00:04:42.706
real-time capture of photos from

00:04:42.706 --> 00:04:43.516
different cameras.

00:04:43.926 --> 00:04:45.226
So as you can see, these graphs

00:04:45.226 --> 00:04:46.216
are starting to look pretty

00:04:46.216 --> 00:04:48.196
complicated with a lot of arrows

00:04:48.196 --> 00:04:49.596
going from a lot inputs to a lot

00:04:49.596 --> 00:04:50.186
of outputs.

00:04:51.176 --> 00:04:52.916
Those little arrows are called

00:04:52.916 --> 00:04:54.556
AVCaptureConnections, and they

00:04:54.556 --> 00:04:56.046
define the flow of data from an

00:04:56.046 --> 00:04:57.136
input to an output.

00:04:57.756 --> 00:04:59.036
Let me zoom in for a moment on

00:04:59.036 --> 00:05:01.016
the device input to illustrate

00:05:01.016 --> 00:05:02.136
the anatomy of a connection.

00:05:03.616 --> 00:05:06.746
Capture inputs have AVCapture

00:05:06.746 --> 00:05:09.116
input ports, which I like to

00:05:09.116 --> 00:05:10.916
think of as little electrical

00:05:10.916 --> 00:05:11.476
outlets.

00:05:12.196 --> 00:05:14.546
You have one outlet per media

00:05:14.546 --> 00:05:16.296
type that the input can produce.

00:05:17.226 --> 00:05:18.536
If nothing is plugged into the

00:05:18.536 --> 00:05:20.446
port, no data flows from that

00:05:20.506 --> 00:05:21.776
port, just like an electrical

00:05:21.776 --> 00:05:22.136
outlet.

00:05:22.226 --> 00:05:23.276
You have to plug something in to

00:05:23.276 --> 00:05:24.096
get the electricity.

00:05:24.606 --> 00:05:26.056
Now, to find out what ports are

00:05:26.056 --> 00:05:27.446
available for our particular

00:05:27.446 --> 00:05:29.776
input, you can query that input

00:05:30.086 --> 00:05:31.786
ports property, and it will tell

00:05:31.786 --> 00:05:33.626
you "I have this array of

00:05:33.626 --> 00:05:34.856
AVCapture input ports."

00:05:35.196 --> 00:05:36.986
So for the dual camera, these

00:05:36.986 --> 00:05:37.916
are the ports that you would

00:05:37.916 --> 00:05:39.766
find, one for video, one for

00:05:39.766 --> 00:05:42.096
depth, one for metadata objects

00:05:42.146 --> 00:05:43.436
such as barcode scanning and

00:05:43.436 --> 00:05:46.016
faces and one for metadata items

00:05:46.106 --> 00:05:47.156
which can be hooked up to a

00:05:47.156 --> 00:05:48.016
movie file output.

00:05:49.596 --> 00:05:50.506
Now, whenever you use

00:05:50.506 --> 00:05:52.096
AVCaptureSession's add input

00:05:52.096 --> 00:05:53.816
method to add an input to the

00:05:53.816 --> 00:05:57.076
session or add output to add an

00:05:57.076 --> 00:05:59.076
output to the session, the

00:05:59.076 --> 00:06:00.976
session will look for compatible

00:06:00.976 --> 00:06:02.786
media types and implicitly form

00:06:02.786 --> 00:06:03.936
connections if it can.

00:06:04.646 --> 00:06:05.546
So here we had a

00:06:05.546 --> 00:06:06.666
VideoDataOutput.

00:06:06.916 --> 00:06:08.976
VideoDataOutputs receive video,

00:06:08.976 --> 00:06:10.836
accept video, and we had an

00:06:10.836 --> 00:06:12.586
electrical plug that can produce

00:06:12.586 --> 00:06:14.186
video, and so the connection was

00:06:14.186 --> 00:06:15.226
made automatically.

00:06:15.866 --> 00:06:17.836
That is how most of you are

00:06:18.246 --> 00:06:19.476
accustomed to working with

00:06:19.476 --> 00:06:20.626
AVCaptureSession if you've

00:06:20.626 --> 00:06:21.906
worked with our classes before.

00:06:22.586 --> 00:06:24.306
MultiCamSession is a different

00:06:24.306 --> 00:06:24.716
beast.

00:06:25.496 --> 00:06:27.466
That is because inputs and

00:06:27.466 --> 00:06:29.476
outputs, you have multiple

00:06:29.476 --> 00:06:30.656
inputs out now with multiple

00:06:30.656 --> 00:06:31.076
outputs.

00:06:31.076 --> 00:06:32.106
You probably want to make sure

00:06:32.106 --> 00:06:33.146
that the connections are

00:06:33.146 --> 00:06:35.736
happening from A to A and B to B

00:06:35.736 --> 00:06:36.976
and not crossing where you

00:06:36.976 --> 00:06:38.006
didn't intend them to.

00:06:38.486 --> 00:06:40.136
So when building a

00:06:40.136 --> 00:06:42.246
MultiCamSession, we urge you not

00:06:42.246 --> 00:06:43.996
to use implicit connection

00:06:44.146 --> 00:06:46.806
forming but instead use these

00:06:46.806 --> 00:06:48.866
special purpose adders,

00:06:48.866 --> 00:06:51.546
addInputWithNoConnections or

00:06:51.546 --> 00:06:53.286
addOutputWithNoConnections.

00:06:53.886 --> 00:06:57.966
And there are likewise ones that

00:06:57.966 --> 00:06:59.376
you can use for video preview

00:06:59.376 --> 00:07:00.616
layer, which are

00:07:00.936 --> 00:07:02.716
setSessionWithNoConnections.

00:07:03.116 --> 00:07:05.056
When you use these, it basically

00:07:05.056 --> 00:07:06.926
just tells the session "Here are

00:07:06.926 --> 00:07:08.016
these inputs, here are these

00:07:08.016 --> 00:07:08.526
outputs.

00:07:08.596 --> 00:07:10.296
You now know about them, but

00:07:10.296 --> 00:07:11.256
keep your hands off them.

00:07:11.466 --> 00:07:13.096
I'm going to add connections as

00:07:13.096 --> 00:07:14.676
I want to later on manually."

00:07:15.506 --> 00:07:16.926
The way you do that is you

00:07:16.926 --> 00:07:18.586
create the AVCaptureConnection

00:07:18.586 --> 00:07:20.486
yourself by telling it "I want

00:07:20.486 --> 00:07:22.126
you to connect this port or

00:07:22.126 --> 00:07:24.356
ports to this output," and then

00:07:24.356 --> 00:07:25.636
you tell the session, "Please

00:07:25.636 --> 00:07:27.096
add this connection," and now

00:07:27.096 --> 00:07:27.666
you're ready to go.

00:07:27.666 --> 00:07:30.116
That was very wordy.

00:07:30.426 --> 00:07:32.266
It's better shown than talked

00:07:32.266 --> 00:07:33.396
about, so I'd like to bring up

00:07:33.426 --> 00:07:35.466
Nik Gelo, also from the Camera

00:07:35.466 --> 00:07:37.396
Software group to demonstrate

00:07:37.396 --> 00:07:38.256
AVMultiCamPIP.

00:07:38.806 --> 00:07:38.976
Nick?

00:07:40.896 --> 00:07:41.386
>> Thanks, Brad.

00:07:42.426 --> 00:07:43.896
AVMultiCamPIP is an app that

00:07:43.896 --> 00:07:44.916
demonstrates streaming from the

00:07:44.976 --> 00:07:45.826
front and back camera

00:07:45.826 --> 00:07:46.656
simultaneously.

00:07:46.936 --> 00:07:48.786
Here we have two video previews,

00:07:48.786 --> 00:07:49.916
one displaying the front camera

00:07:50.186 --> 00:07:51.056
and one displaying the back

00:07:51.056 --> 00:07:51.376
camera.

00:07:51.376 --> 00:07:52.496
And when I double-tap the

00:07:52.496 --> 00:07:54.146
screen, I can swap which camera

00:07:54.146 --> 00:07:55.726
appears full-screen and which

00:07:55.726 --> 00:07:56.716
camera appears PIP.

00:08:03.516 --> 00:08:07.326
[ Applause ]

00:08:07.826 --> 00:08:10.186
Now, we can see here that Brad

00:08:10.186 --> 00:08:11.586
is live at Apple Park.

00:08:11.586 --> 00:08:13.866
And before I ask him a few

00:08:13.866 --> 00:08:15.566
questions, I will press the

00:08:15.566 --> 00:08:16.846
Record button here at the bottom

00:08:17.146 --> 00:08:18.426
to watch his conversation later.

00:08:19.436 --> 00:08:19.866
Hey, Brad.

00:08:20.406 --> 00:08:21.576
So tell me, how's it going over

00:08:21.576 --> 00:08:22.086
at Apple Park?

00:08:22.686 --> 00:08:24.416
>> Nik, it's pandemonium here at

00:08:24.416 --> 00:08:24.946
Apple Park.

00:08:25.036 --> 00:08:26.196
As you can see in front of the

00:08:26.196 --> 00:08:27.486
reflecting pool, there's all

00:08:27.486 --> 00:08:28.886
kinds of activity happening.

00:08:29.266 --> 00:08:30.516
I hear a rushing of water.

00:08:30.896 --> 00:08:31.826
Sounds like I'm about to be

00:08:31.826 --> 00:08:32.946
drenched at any moment.

00:08:33.476 --> 00:08:35.256
I hear wild animals behind me

00:08:35.376 --> 00:08:36.616
like ducks or something.

00:08:37.056 --> 00:08:38.726
I honestly fear for my life

00:08:38.726 --> 00:08:38.895
here.

00:08:39.256 --> 00:08:40.106
>> Well, Brad, that seems

00:08:40.106 --> 00:08:40.956
absolutely terrifying.

00:08:40.956 --> 00:08:41.866
Hope you stay safe out there.

00:08:42.096 --> 00:08:42.895
>> Okay, thanks.

00:08:43.285 --> 00:08:43.576
>> Got it.

00:08:44.646 --> 00:08:45.666
>> So now that we finished

00:08:45.666 --> 00:08:47.076
recording the movie, let's take

00:08:47.076 --> 00:08:48.266
a look at what we just recorded.

00:08:48.266 --> 00:08:51.646
Here we have the movie.

00:08:51.646 --> 00:08:54.516
As you can see, when I swap

00:08:54.516 --> 00:08:56.996
between the two cameras, it

00:08:57.206 --> 00:08:59.156
swaps just like we did when

00:08:59.376 --> 00:08:59.996
using the app.

00:08:59.996 --> 00:09:02.196
And that's AVMultiCamPIP.

00:09:02.566 --> 00:09:02.976
Back to Brad.

00:09:03.516 --> 00:09:07.536
[ Applause ]

00:09:08.036 --> 00:09:08.516
>> Thanks, Nik.

00:09:08.836 --> 00:09:09.366
Awesome demo.

00:09:09.366 --> 00:09:12.216
All right, so let's look at

00:09:12.216 --> 00:09:13.536
what's happening under the hood

00:09:13.606 --> 00:09:14.856
in AVMultiCamPIP.

00:09:15.476 --> 00:09:17.056
So we have two device inputs,

00:09:17.056 --> 00:09:18.646
one for the front camera, one

00:09:18.646 --> 00:09:21.486
for the back camera added with

00:09:21.486 --> 00:09:23.276
no connections as I mentioned

00:09:23.276 --> 00:09:23.666
before.

00:09:23.906 --> 00:09:25.076
We also have two video data

00:09:25.076 --> 00:09:27.246
outputs, one for each and two

00:09:27.246 --> 00:09:28.306
VideoPreviewLayers.

00:09:28.786 --> 00:09:30.236
Now, to place them onscreen,

00:09:30.466 --> 00:09:31.726
it's just a matter of taking

00:09:31.726 --> 00:09:34.416
those VideoPreviewLayers and

00:09:34.416 --> 00:09:35.896
ordering them so that one is top

00:09:35.896 --> 00:09:37.296
of the other and one is sized

00:09:37.296 --> 00:09:37.846
smaller.

00:09:37.846 --> 00:09:39.796
And when Nik double-tapped them,

00:09:40.056 --> 00:09:42.166
we simply reposition them and

00:09:42.166 --> 00:09:43.226
reverse the Z ordering.

00:09:43.696 --> 00:09:44.626
Now, there is some magic

00:09:44.626 --> 00:09:45.976
happening in the Metal Shader

00:09:46.176 --> 00:09:47.216
Compositor code.

00:09:47.596 --> 00:09:48.906
There it's taking those two

00:09:48.906 --> 00:09:51.306
VideoDataOutputs and compositing

00:09:51.306 --> 00:09:53.556
them so that the smaller PIP is

00:09:53.556 --> 00:09:55.516
arranged within one frame, so

00:09:55.516 --> 00:09:56.526
it's compositing them to a

00:09:56.526 --> 00:09:58.186
single video buffer and then

00:09:58.186 --> 00:09:59.916
sending them to an AVAssetWriter

00:10:00.166 --> 00:10:01.966
where they are recorded to one

00:10:01.966 --> 00:10:02.956
video track in a movie.

00:10:03.686 --> 00:10:05.296
This sample code is available

00:10:05.546 --> 00:10:06.086
right now.

00:10:06.476 --> 00:10:07.416
It's associated with the

00:10:07.416 --> 00:10:07.796
session.

00:10:07.796 --> 00:10:08.806
You can take a look and start

00:10:08.806 --> 00:10:10.366
doing your own MultiCam

00:10:10.366 --> 00:10:10.976
captures.

00:10:11.426 --> 00:10:14.276
All right, time to talk about

00:10:14.276 --> 00:10:15.036
limitations.

00:10:15.166 --> 00:10:17.646
While AVMultiCamSession is a

00:10:17.646 --> 00:10:19.356
power tool, it doesn't do

00:10:19.356 --> 00:10:21.166
everything, and let me tell you

00:10:21.546 --> 00:10:22.666
what it does not do.

00:10:24.116 --> 00:10:25.806
First up, you cannot pretend

00:10:25.916 --> 00:10:28.046
that one camera is two cameras.

00:10:28.666 --> 00:10:31.356
AVCaptureDeviceInput API will

00:10:31.356 --> 00:10:33.016
let you create multiple

00:10:33.016 --> 00:10:34.876
instances for, say, the back

00:10:34.876 --> 00:10:35.276
camera.

00:10:35.586 --> 00:10:36.656
You could make 10 of them if you

00:10:36.656 --> 00:10:36.926
want.

00:10:37.326 --> 00:10:38.926
But if you try to add all those

00:10:38.926 --> 00:10:39.846
instances to one

00:10:39.846 --> 00:10:41.126
MultiCamSession, it'll say

00:10:41.156 --> 00:10:43.216
"Uh-uh," and it will throw an

00:10:43.216 --> 00:10:43.706
exception.

00:10:44.586 --> 00:10:46.516
Please, only one input per

00:10:46.516 --> 00:10:47.826
camera in a session.

00:10:48.956 --> 00:10:50.126
Also, you're not allowed to

00:10:50.196 --> 00:10:52.716
clone a camera to two outputs of

00:10:52.716 --> 00:10:55.716
the same type such as taking one

00:10:55.926 --> 00:10:57.786
camera and splitting its signal

00:10:57.786 --> 00:10:59.106
to two video data outputs.

00:10:59.646 --> 00:11:01.446
You can, of course, add multiple

00:11:01.446 --> 00:11:03.346
cameras and connect them to a

00:11:03.346 --> 00:11:05.136
VideoDataOutput each, but you

00:11:05.136 --> 00:11:06.976
cannot fan out from one to many.

00:11:10.566 --> 00:11:12.016
You're also not allowed -- the

00:11:12.016 --> 00:11:13.946
opposite holds true as well.

00:11:14.016 --> 00:11:16.826
AVCapture outputs on iOS do not

00:11:16.826 --> 00:11:18.086
support media mixing.

00:11:18.576 --> 00:11:20.706
So all the data outputs only can

00:11:20.706 --> 00:11:21.696
take a single input.

00:11:22.346 --> 00:11:23.586
You can't, for instance, try to

00:11:23.586 --> 00:11:25.236
jam two camera sources into a

00:11:25.236 --> 00:11:27.726
single data output.

00:11:27.726 --> 00:11:28.786
It wouldn't know what to do with

00:11:28.786 --> 00:11:29.796
the second video since it

00:11:29.796 --> 00:11:31.206
doesn't know how to mix them.

00:11:31.866 --> 00:11:33.706
You can, of course, use separate

00:11:33.706 --> 00:11:35.726
video data outputs and then

00:11:35.816 --> 00:11:37.236
composite those buffers in your

00:11:37.236 --> 00:11:38.696
own code, such as the Metal

00:11:38.696 --> 00:11:40.086
Shader Compositer that we used

00:11:40.086 --> 00:11:40.976
in MultiCamPIP.

00:11:41.656 --> 00:11:42.646
You can do that however you

00:11:42.646 --> 00:11:44.156
like, but as far as session

00:11:44.156 --> 00:11:45.636
building is concerned, do not

00:11:45.636 --> 00:11:47.356
try to jam multiple cameras into

00:11:47.356 --> 00:11:48.036
a single output.

00:11:49.526 --> 00:11:51.286
All right, a word about presets.

00:11:52.466 --> 00:11:54.026
The traditional AVCaptureSession

00:11:54.096 --> 00:11:55.706
has this concept of a session

00:11:55.706 --> 00:11:58.246
preset, which dictates a common

00:11:58.246 --> 00:11:59.846
quality of service for the whole

00:11:59.846 --> 00:12:00.256
session.

00:12:00.526 --> 00:12:02.886
And it applies to all inputs and

00:12:02.886 --> 00:12:04.166
outputs within that session.

00:12:04.456 --> 00:12:06.006
For instance, when you set the

00:12:06.006 --> 00:12:08.946
sessionPreset to high, the

00:12:08.946 --> 00:12:10.496
session configures the device's

00:12:10.496 --> 00:12:12.986
resolution and frame rate and

00:12:13.066 --> 00:12:14.486
all of the outputs so that they

00:12:14.486 --> 00:12:16.186
are delivering a high-quality

00:12:16.396 --> 00:12:17.666
video experience such as

00:12:17.666 --> 00:12:18.726
1080p30.

00:12:21.496 --> 00:12:23.126
Presets are a problem for

00:12:23.126 --> 00:12:24.096
MultiCamSession.

00:12:24.916 --> 00:12:26.556
Think again about something that

00:12:26.556 --> 00:12:27.376
looks like this.

00:12:28.106 --> 00:12:30.696
MultiCamSession configurations

00:12:30.696 --> 00:12:32.226
are hybrid; they're

00:12:32.226 --> 00:12:33.096
heterogeneous.

00:12:33.426 --> 00:12:34.646
What does it mean to have high

00:12:34.646 --> 00:12:35.936
quality for the whole thing?

00:12:36.286 --> 00:12:37.416
You might want to do different

00:12:37.416 --> 00:12:38.986
qualities of service on

00:12:38.986 --> 00:12:40.466
different branches of the graph.

00:12:40.886 --> 00:12:42.406
For instance, on the front

00:12:42.406 --> 00:12:43.736
camera you might want to just do

00:12:43.976 --> 00:12:45.366
a low-resolution preview such as

00:12:45.366 --> 00:12:48.096
640 by 480, while also

00:12:48.096 --> 00:12:49.646
simultaneously doing something

00:12:49.896 --> 00:12:51.786
really high-quality, 1080p60,

00:12:51.786 --> 00:12:52.986
for instance, on the back.

00:12:53.426 --> 00:12:54.676
Well, obviously, we don't have

00:12:54.776 --> 00:12:56.236
presets for all of these hybrid

00:12:56.236 --> 00:12:56.946
situations.

00:12:57.936 --> 00:12:59.036
We've decided to keep things

00:12:59.036 --> 00:13:00.956
simple in MultiCamSession.

00:13:01.426 --> 00:13:02.956
It does not support presets.

00:13:03.076 --> 00:13:05.516
It supports one and one preset

00:13:05.516 --> 00:13:07.486
only which is input priority.

00:13:07.486 --> 00:13:09.116
So that means it leaves the

00:13:09.116 --> 00:13:11.206
inputs and outputs alone when

00:13:11.206 --> 00:13:12.406
you add them.

00:13:12.436 --> 00:13:13.826
You must configure the active

00:13:13.886 --> 00:13:14.926
format yourself.

00:13:17.576 --> 00:13:18.246
All right.

00:13:18.846 --> 00:13:20.206
On to the cost functions.

00:13:20.936 --> 00:13:21.926
I mentioned at the beginning

00:13:21.926 --> 00:13:23.306
that we took our time with this

00:13:23.376 --> 00:13:24.886
MultiCam support, because we

00:13:24.886 --> 00:13:26.106
wanted to deliver a very

00:13:26.106 --> 00:13:28.396
responsible API, one that could

00:13:28.396 --> 00:13:30.106
help you account for the various

00:13:30.146 --> 00:13:31.936
costs that you incur when

00:13:31.936 --> 00:13:33.246
running multiple cameras and

00:13:33.246 --> 00:13:34.946
lighting up virtually every

00:13:34.946 --> 00:13:35.756
block on the phone.

00:13:39.256 --> 00:13:41.236
So this is trite but true.

00:13:42.076 --> 00:13:43.396
There is no such thing as a free

00:13:43.396 --> 00:13:43.806
lunch.

00:13:44.046 --> 00:13:46.016
And so this is the part of the

00:13:46.016 --> 00:13:47.166
session where I become your

00:13:47.166 --> 00:13:48.836
father, and I'm going to give

00:13:48.836 --> 00:13:49.716
you the dad talk.

00:13:50.956 --> 00:13:52.536
In the dad talk, I will explain

00:13:52.536 --> 00:13:54.656
how credit cards work and how

00:13:54.656 --> 00:13:55.756
you need to be responsible with

00:13:55.756 --> 00:13:57.186
your money and live within your

00:13:57.186 --> 00:14:00.426
means and, like, such things.

00:14:01.566 --> 00:14:02.826
So it's a fact of life that we

00:14:02.826 --> 00:14:04.676
have limited hardware bandwidth

00:14:04.676 --> 00:14:05.496
on iOS.

00:14:06.176 --> 00:14:07.486
And though we have multiple

00:14:07.486 --> 00:14:08.776
cameras, so we have multiple

00:14:08.776 --> 00:14:12.446
sensors, we only have one ISP or

00:14:12.446 --> 00:14:13.636
image signal processor.

00:14:14.446 --> 00:14:18.626
So all the pixels going through

00:14:18.626 --> 00:14:20.166
those sensors need to be

00:14:20.166 --> 00:14:22.086
processed by a single ISP, and

00:14:22.516 --> 00:14:24.986
it is limited by how many pixels

00:14:25.036 --> 00:14:26.686
it can run per clock at a given

00:14:26.686 --> 00:14:27.206
frequency.

00:14:28.136 --> 00:14:30.746
So there are limiters to the

00:14:30.836 --> 00:14:32.076
number of pixels that you can

00:14:32.076 --> 00:14:32.706
run at a time.

00:14:33.556 --> 00:14:34.756
The contributors to the hardware

00:14:34.756 --> 00:14:36.576
cost are, as you would expect,

00:14:36.756 --> 00:14:37.836
video resolution.

00:14:38.366 --> 00:14:39.626
Higher resolution means more

00:14:39.626 --> 00:14:40.926
pixels to cram through there.

00:14:41.696 --> 00:14:42.886
The max frame rate.

00:14:43.296 --> 00:14:44.366
If you're delivering those

00:14:44.366 --> 00:14:46.176
pixels faster, it's got to do

00:14:46.176 --> 00:14:47.636
more pixels per clock as well.

00:14:47.676 --> 00:14:50.136
And then a third one which you

00:14:50.136 --> 00:14:51.336
may or may not have heard of is

00:14:51.336 --> 00:14:52.386
called sensor binning.

00:14:53.516 --> 00:14:55.666
Sensor binning refers to a way

00:14:55.666 --> 00:14:57.246
to combine information in

00:14:57.246 --> 00:14:58.726
adjacent pixels to reduce

00:14:58.726 --> 00:14:59.226
bandwidth.

00:14:59.796 --> 00:15:00.736
So, for instance, if we have an

00:15:00.736 --> 00:15:02.986
image here, and we do a 2 by 2

00:15:02.986 --> 00:15:04.866
binning, it's going to take 4

00:15:04.866 --> 00:15:06.976
pixels in squares and sum them

00:15:07.016 --> 00:15:09.206
into one so that we get a

00:15:09.206 --> 00:15:11.306
reduction in size by 4x.

00:15:11.836 --> 00:15:13.056
It gives you a reduction in

00:15:13.056 --> 00:15:13.586
noise.

00:15:14.166 --> 00:15:15.436
It gives you a reduction in

00:15:15.436 --> 00:15:15.916
bandwidth.

00:15:16.396 --> 00:15:18.586
It gives you 4x intensity per

00:15:18.586 --> 00:15:19.076
pixel.

00:15:19.566 --> 00:15:20.376
So there are a lot of great

00:15:20.416 --> 00:15:21.506
things about sensor binning.

00:15:21.936 --> 00:15:23.476
The downside is that you get a

00:15:23.476 --> 00:15:25.056
little reduction in image

00:15:25.056 --> 00:15:25.586
quality.

00:15:25.906 --> 00:15:27.366
So diagonal lines might look a

00:15:27.366 --> 00:15:28.346
little stair-stepped.

00:15:28.986 --> 00:15:31.466
But their most redeeming quality

00:15:31.466 --> 00:15:33.036
is that bin formats are super

00:15:33.036 --> 00:15:33.706
low power.

00:15:34.596 --> 00:15:36.496
In fact, whenever you use ARKit

00:15:36.496 --> 00:15:38.046
with a camera, you are using a

00:15:38.046 --> 00:15:39.736
binned format, because ARKIT

00:15:39.736 --> 00:15:41.466
uses binned formats exclusively

00:15:41.466 --> 00:15:42.976
to save on that power for all

00:15:42.976 --> 00:15:44.416
the interesting AR things that

00:15:44.416 --> 00:15:44.946
you'd like to do.

00:15:46.326 --> 00:15:46.656
All right.

00:15:47.026 --> 00:15:48.616
How do we account for cost, or

00:15:48.616 --> 00:15:50.226
how do we report those costs?

00:15:50.786 --> 00:15:52.286
MultiCamSession tallies up your

00:15:52.286 --> 00:15:53.996
hardware cost as you configure

00:15:53.996 --> 00:15:54.526
your session.

00:15:55.046 --> 00:15:56.096
So each time you change

00:15:56.096 --> 00:15:58.046
something, it keeps track of it

00:15:58.316 --> 00:15:59.906
just like filling up a shopping

00:15:59.906 --> 00:16:02.376
cart or going to an online store

00:16:02.376 --> 00:16:03.776
and putting things into the cart

00:16:03.776 --> 00:16:04.716
before you pay for them.

00:16:05.086 --> 00:16:05.786
You know when you're getting

00:16:05.786 --> 00:16:07.296
close to your limit on your

00:16:07.296 --> 00:16:08.886
budget, and you can kind of try

00:16:08.886 --> 00:16:10.546
things out and then put new

00:16:10.546 --> 00:16:11.876
things in or move old things

00:16:11.876 --> 00:16:12.136
out.

00:16:12.386 --> 00:16:13.756
You see the cost before you have

00:16:13.796 --> 00:16:14.216
to pay.

00:16:14.766 --> 00:16:15.776
It's the same with

00:16:15.776 --> 00:16:16.666
MultiCamSession.

00:16:17.236 --> 00:16:19.126
We have a new property called

00:16:19.776 --> 00:16:20.656
hardwareCost.

00:16:21.326 --> 00:16:22.726
And this hardwareCost starts at

00:16:22.766 --> 00:16:23.986
zero when you make a brand-new

00:16:23.986 --> 00:16:24.466
session.

00:16:25.536 --> 00:16:27.456
And it increments as you add

00:16:27.456 --> 00:16:29.076
more features, more inputs, more

00:16:29.076 --> 00:16:29.586
outputs.

00:16:30.446 --> 00:16:31.676
And you're fine as long as you

00:16:31.676 --> 00:16:32.816
stay under 1.0.

00:16:33.326 --> 00:16:35.326
Anything under 1.0 is runnable.

00:16:36.566 --> 00:16:38.356
The minute you hit 1.0 or

00:16:38.356 --> 00:16:39.706
greater, you're in trouble.

00:16:39.706 --> 00:16:41.376
And that's because the ISP

00:16:41.376 --> 00:16:43.066
bandwidth limit is hard.

00:16:43.486 --> 00:16:45.766
It's not like you can, you know,

00:16:45.886 --> 00:16:47.316
deliver every other frame.

00:16:47.896 --> 00:16:49.346
No, this is an all or nothing

00:16:49.346 --> 00:16:49.786
proposal.

00:16:50.076 --> 00:16:51.466
You have to either make it or

00:16:51.466 --> 00:16:51.816
you don't.

00:16:52.226 --> 00:16:53.816
So if you're over 1.0 and you

00:16:53.816 --> 00:16:55.156
try to run the

00:16:55.156 --> 00:16:57.046
AVCaptureMultiCamSession, it'll

00:16:57.046 --> 00:16:57.666
say "Uh-uh."

00:16:58.126 --> 00:17:00.256
It'll give you a notification of

00:17:00.256 --> 00:17:02.356
a runtime error indicating that

00:17:02.356 --> 00:17:03.726
the reason it had to stop is

00:17:03.726 --> 00:17:04.806
because of a hardware cost

00:17:04.806 --> 00:17:04.955
overage.

00:17:08.356 --> 00:17:09.556
Now you're probably wondering,

00:17:09.556 --> 00:17:11.046
"How do I reduce that cost?"

00:17:11.796 --> 00:17:13.006
The most obvious way you can do

00:17:13.006 --> 00:17:14.376
it is to pick a lower

00:17:14.376 --> 00:17:14.955
resolution.

00:17:15.665 --> 00:17:17.256
Another way you can do it is if

00:17:17.256 --> 00:17:18.046
you want to keep the same

00:17:18.046 --> 00:17:20.455
resolution, if there is a binned

00:17:20.496 --> 00:17:21.965
format at the same resolution,

00:17:21.965 --> 00:17:22.925
pick that one instead.

00:17:23.276 --> 00:17:24.656
It's a little bit lower quality

00:17:24.736 --> 00:17:26.205
but way lower in power.

00:17:26.675 --> 00:17:29.376
Next, you would think that

00:17:29.376 --> 00:17:30.596
lowering the frame rate would

00:17:30.596 --> 00:17:32.736
help, but it doesn't.

00:17:33.806 --> 00:17:34.746
The reason is that

00:17:34.746 --> 00:17:37.096
AVCaptureDevice allows you and

00:17:37.096 --> 00:17:38.646
has allowed you since, I think,

00:17:38.646 --> 00:17:41.466
iOS 4 to change the frame rate

00:17:41.466 --> 00:17:41.996
on the fly.

00:17:42.626 --> 00:17:44.906
So if you have a 120 FPS format

00:17:45.626 --> 00:17:47.916
and you say, "Set the active

00:17:47.916 --> 00:17:50.436
format to 60," you still have to

00:17:50.436 --> 00:17:52.656
pay the cost for a 120, not 60,

00:17:52.866 --> 00:17:53.936
because at any point while

00:17:53.936 --> 00:17:54.886
you're running, you could

00:17:54.886 --> 00:17:55.956
increase the frame rate up to

00:17:55.956 --> 00:17:56.806
120.

00:17:57.066 --> 00:17:58.616
We must assume the worst case.

00:17:59.666 --> 00:18:01.306
But good news.

00:18:01.416 --> 00:18:02.856
We're now offering an override

00:18:02.946 --> 00:18:04.036
property on the

00:18:04.036 --> 00:18:05.306
AVCaptureDeviceInput.

00:18:06.116 --> 00:18:09.216
By setting it, you can turn a

00:18:09.216 --> 00:18:10.966
high frame-rate format into a

00:18:10.966 --> 00:18:13.036
lower frame-rate format by

00:18:13.146 --> 00:18:14.896
promising that you will go no

00:18:14.896 --> 00:18:16.516
higher than a particular frame

00:18:16.736 --> 00:18:16.926
rate.

00:18:19.966 --> 00:18:21.836
Now, this is a point of

00:18:21.836 --> 00:18:23.596
confusion in our APIs.

00:18:23.646 --> 00:18:24.956
We don't talk about frame rates

00:18:24.956 --> 00:18:25.596
as rates.

00:18:25.626 --> 00:18:27.086
We talk about them as durations.

00:18:27.386 --> 00:18:30.116
So to set a frame rate, you set

00:18:30.116 --> 00:18:31.376
1 over the duration.

00:18:31.536 --> 00:18:32.546
That's the same as the frame

00:18:32.546 --> 00:18:32.786
rate.

00:18:33.186 --> 00:18:34.706
So if you want to take a 60 FPS

00:18:34.706 --> 00:18:36.536
format and make it into a 30 FPS

00:18:36.536 --> 00:18:39.106
format, you do that by making a

00:18:39.186 --> 00:18:41.256
CMTime with 1 over 30, which is

00:18:41.256 --> 00:18:43.096
the duration and then set that

00:18:43.096 --> 00:18:43.996
deviceInput.

00:18:44.296 --> 00:18:47.126
videoMinFramDurationOverride to

00:18:47.216 --> 00:18:47.886
thirtyFPS.

00:18:48.256 --> 00:18:49.566
Congratulations, you've just

00:18:49.566 --> 00:18:51.436
turned a 60 FPS format into a 30

00:18:51.436 --> 00:18:52.816
FPS format, and you only pay the

00:18:52.816 --> 00:18:56.216
hardware cost for 30.

00:18:56.396 --> 00:18:58.016
I should also mention that there

00:18:58.016 --> 00:19:00.396
is a great function in the

00:19:00.396 --> 00:19:02.476
AVMultiCamPIP app that shows how

00:19:02.476 --> 00:19:04.296
to iteratively reduce your cost.

00:19:04.616 --> 00:19:05.846
It's a recursive function that

00:19:05.986 --> 00:19:07.036
kind of picks things that are

00:19:07.036 --> 00:19:08.736
most important to it, and it

00:19:08.976 --> 00:19:10.536
throttles down things that are

00:19:10.536 --> 00:19:11.886
less important until it gets

00:19:11.886 --> 00:19:12.846
under the hardware cost.

00:19:13.806 --> 00:19:15.546
Now, next up is system pressure

00:19:15.546 --> 00:19:15.846
cost.

00:19:15.846 --> 00:19:17.666
This is the second big

00:19:17.666 --> 00:19:18.986
contributor that we report.

00:19:19.376 --> 00:19:22.266
As you're well aware, phones are

00:19:22.266 --> 00:19:24.126
extremely powerful computers in

00:19:24.366 --> 00:19:25.636
little bitty thermally

00:19:25.636 --> 00:19:27.036
challenged packages.

00:19:27.736 --> 00:19:30.336
And in iOS 11, we introduced

00:19:30.536 --> 00:19:32.716
camera system pressure states.

00:19:33.366 --> 00:19:34.396
These help you monitor the

00:19:34.396 --> 00:19:35.826
camera's current situation.

00:19:37.046 --> 00:19:38.636
Camera system pressure consists

00:19:38.726 --> 00:19:41.566
of system temperature, that is

00:19:41.666 --> 00:19:45.046
overall OS thermals, peak power

00:19:45.046 --> 00:19:46.576
demands, and that has to do with

00:19:46.576 --> 00:19:47.206
the battery.

00:19:47.586 --> 00:19:48.636
How much charge does it

00:19:48.636 --> 00:19:49.386
currently have?

00:19:49.996 --> 00:19:51.736
Is it able to ramp up its

00:19:51.736 --> 00:19:53.206
voltage fast enough to meet the

00:19:53.206 --> 00:19:55.016
demands of running whatever you

00:19:55.016 --> 00:19:56.036
want to do right now?

00:19:57.026 --> 00:19:58.786
And the infrared projector

00:19:58.786 --> 00:19:59.296
temperature.

00:19:59.996 --> 00:20:01.376
On devices that support

00:20:01.376 --> 00:20:02.856
TrueDepth camera, we have an

00:20:02.856 --> 00:20:04.136
infrared camera as well as an

00:20:04.136 --> 00:20:04.936
RGB camera.

00:20:05.126 --> 00:20:06.386
Well, that generates its own

00:20:06.456 --> 00:20:07.686
heat, and so that's part of the

00:20:07.686 --> 00:20:09.166
contribution to system pressure

00:20:09.166 --> 00:20:09.676
states.

00:20:10.216 --> 00:20:14.586
We have five of them, nominal

00:20:14.586 --> 00:20:15.686
all the way up to shutdown.

00:20:16.316 --> 00:20:17.396
When the system pressure state

00:20:17.396 --> 00:20:19.106
is nominal, you're in great

00:20:19.106 --> 00:20:19.386
shape.

00:20:19.586 --> 00:20:20.476
You can do whatever you want.

00:20:20.976 --> 00:20:22.546
When it's fair, you can still

00:20:22.546 --> 00:20:23.886
almost do whatever you want.

00:20:24.336 --> 00:20:25.776
But at serious, you start

00:20:25.776 --> 00:20:26.896
getting into a situation where

00:20:26.896 --> 00:20:28.136
the system's going to throttle

00:20:28.886 --> 00:20:29.916
back, meaning you have fewer

00:20:29.916 --> 00:20:31.776
cycles for the GPU.

00:20:31.996 --> 00:20:34.316
Your quality might be

00:20:34.316 --> 00:20:35.036
compromised.

00:20:35.546 --> 00:20:36.986
And at critical, you are getting

00:20:36.986 --> 00:20:38.126
a whole lot of throttling.

00:20:38.386 --> 00:20:41.816
At shutdown, we cannot run the

00:20:41.816 --> 00:20:44.066
camera any longer for fear of

00:20:44.066 --> 00:20:44.846
hurting the hardware.

00:20:45.156 --> 00:20:47.026
So at shutdown, we automatically

00:20:47.026 --> 00:20:48.516
interrupt your session, stop it,

00:20:48.966 --> 00:20:50.086
tell you that you're interrupted

00:20:50.156 --> 00:20:51.736
because of a system pressure

00:20:51.736 --> 00:20:53.786
state, and then we wait for the

00:20:53.786 --> 00:20:55.096
device to go all the way back to

00:20:55.096 --> 00:20:56.596
nominal before we'll let you run

00:20:56.596 --> 00:20:57.346
the camera again.

00:20:58.756 --> 00:21:01.176
That was all iOS 11.

00:21:01.666 --> 00:21:04.076
Now, in iOS 13, we're offering

00:21:04.076 --> 00:21:05.426
you a way to account for the

00:21:05.426 --> 00:21:07.366
system pressure cost upfront,

00:21:07.766 --> 00:21:08.196
okay?

00:21:08.646 --> 00:21:09.906
Instead of just telling you

00:21:09.906 --> 00:21:11.056
what's happening right now,

00:21:11.586 --> 00:21:12.866
which may be influenced by the

00:21:12.866 --> 00:21:14.386
fact that you played Clash of

00:21:14.416 --> 00:21:16.266
Clans before you restarted the

00:21:17.086 --> 00:21:18.246
camera, we now have a way to

00:21:18.246 --> 00:21:20.226
tell you what the camera cost as

00:21:20.226 --> 00:21:21.416
far as system pressure is,

00:21:21.736 --> 00:21:22.786
independent of all other

00:21:22.786 --> 00:21:23.376
factors.

00:21:23.686 --> 00:21:26.076
So the contributors to this cost

00:21:26.076 --> 00:21:27.316
are the same as the ones for

00:21:27.316 --> 00:21:28.896
hardware along with a lot of

00:21:28.896 --> 00:21:31.616
other ones, such as video image

00:21:31.616 --> 00:21:34.056
stabilization or optical image

00:21:34.056 --> 00:21:34.756
stabilization.

00:21:34.756 --> 00:21:36.356
All of those cost power.

00:21:36.756 --> 00:21:38.246
We have a Smart HDR feature,

00:21:38.246 --> 00:21:40.316
etc. All of those things listed

00:21:40.316 --> 00:21:42.046
here are contributors to overall

00:21:42.046 --> 00:21:43.286
system pressure cost.

00:21:45.016 --> 00:21:46.986
MultiCamSession can tally that

00:21:46.986 --> 00:21:48.476
score upfront just like it does

00:21:48.476 --> 00:21:51.186
for hardware, and it will only

00:21:51.186 --> 00:21:52.406
account for the factors that it

00:21:52.406 --> 00:21:53.076
knows about.

00:21:53.336 --> 00:21:54.586
So if you're going to be doing

00:21:54.586 --> 00:21:56.276
some wild GPU processing at the

00:21:56.276 --> 00:21:58.056
same time, the score won't

00:21:58.056 --> 00:21:58.756
include that.

00:21:58.886 --> 00:22:00.086
It'll just include what you're

00:22:00.086 --> 00:22:03.036
doing with the camera.

00:22:03.036 --> 00:22:03.876
Here's how you use it.

00:22:05.146 --> 00:22:06.746
By querying the system pressure

00:22:06.746 --> 00:22:09.386
cost, you can find out how long

00:22:09.386 --> 00:22:11.546
you would be runnable in an

00:22:11.546 --> 00:22:13.446
otherwise quiescent system.

00:22:13.906 --> 00:22:16.006
So if it's less than 1.0, you

00:22:16.006 --> 00:22:17.106
can run indefinitely.

00:22:17.236 --> 00:22:18.086
You're a cool customer.

00:22:18.886 --> 00:22:20.636
If it's between 1 and 2, you

00:22:20.636 --> 00:22:22.096
should be runnable for up to 15

00:22:22.096 --> 00:22:24.526
minutes, 2 to 3 up to 10

00:22:24.526 --> 00:22:27.216
minutes, and higher than 3, you

00:22:27.216 --> 00:22:28.586
may be able to run for a short

00:22:28.586 --> 00:22:29.116
little bit.

00:22:29.116 --> 00:22:31.236
And, in fact, we will let you

00:22:31.236 --> 00:22:32.576
run the camera, even if you're

00:22:32.576 --> 00:22:34.216
over 3, but you have to

00:22:34.216 --> 00:22:35.396
understand that it's not going

00:22:35.396 --> 00:22:36.806
to stay cool very long.

00:22:37.166 --> 00:22:38.266
And once it gets up to a

00:22:38.266 --> 00:22:40.066
critical or shutdown level, your

00:22:40.066 --> 00:22:41.516
session will become interrupted.

00:22:41.786 --> 00:22:43.246
So we'll save the hardware even

00:22:43.246 --> 00:22:43.896
if you don't want to.

00:22:43.896 --> 00:22:44.966
But, hey, it's great.

00:22:44.966 --> 00:22:46.716
If you can get what you need to

00:22:47.146 --> 00:22:48.816
get done in 30 seconds of

00:22:48.816 --> 00:22:50.146
running at a very, very high

00:22:50.366 --> 00:22:51.896
system pressure cost, by all

00:22:51.896 --> 00:22:53.286
means, do that.

00:22:54.876 --> 00:22:56.076
Now, how do you reduce your

00:22:56.076 --> 00:22:57.696
system pressure while running?

00:22:57.826 --> 00:22:58.966
I'm not talking about while

00:22:58.966 --> 00:22:59.996
you're configuring your session.

00:22:59.996 --> 00:23:01.476
I'm talking about once you're

00:23:01.786 --> 00:23:03.466
already running and you notice

00:23:03.466 --> 00:23:04.656
that you're starting to elevate

00:23:04.656 --> 00:23:05.546
in system pressure.

00:23:05.776 --> 00:23:06.976
The quickest and easiest way to

00:23:06.976 --> 00:23:08.036
do it is to lower the frame

00:23:08.036 --> 00:23:08.226
rate.

00:23:08.666 --> 00:23:10.536
Immediately, that will relive

00:23:10.536 --> 00:23:11.266
system pressure.

00:23:11.756 --> 00:23:12.856
Also, if you're doing things

00:23:12.856 --> 00:23:14.126
that we don't know about, such

00:23:14.126 --> 00:23:16.506
as heavy GPU or CPU work, you

00:23:16.506 --> 00:23:17.486
can throttle that back.

00:23:18.136 --> 00:23:21.746
As a last resort, you might try

00:23:21.986 --> 00:23:23.056
disabling one or more of the

00:23:23.056 --> 00:23:24.126
cameras that you're using.

00:23:25.026 --> 00:23:27.296
AVMultiCamSession has a neat

00:23:27.676 --> 00:23:29.956
little feature that, while

00:23:29.956 --> 00:23:31.986
running, you can disable one of

00:23:31.986 --> 00:23:33.476
the cameras without affecting

00:23:33.476 --> 00:23:34.506
preview on the other.

00:23:34.586 --> 00:23:35.966
We don't shut everything down.

00:23:36.356 --> 00:23:37.256
So if, for instance, you're

00:23:37.256 --> 00:23:38.036
running with the front and the

00:23:38.036 --> 00:23:39.436
back, you notice that you're way

00:23:39.436 --> 00:23:40.916
over budget, and you're soon

00:23:40.916 --> 00:23:42.816
going to go critical, you could

00:23:42.816 --> 00:23:44.006
choose to shut down the front

00:23:44.006 --> 00:23:44.446
camera.

00:23:44.606 --> 00:23:45.646
The back camera will keep

00:23:45.646 --> 00:23:46.106
previewing.

00:23:46.106 --> 00:23:47.146
It won't lose its focus,

00:23:47.146 --> 00:23:48.436
exposure, white balance.

00:23:48.976 --> 00:23:51.336
And when you shut down the last

00:23:51.436 --> 00:23:54.556
active input port on the camera

00:23:54.556 --> 00:23:55.986
that you want to disable by

00:23:55.986 --> 00:23:58.296
setting its input port's enabled

00:23:58.296 --> 00:24:00.676
property to false, we will stop

00:24:00.676 --> 00:24:02.136
that camera streaming and save a

00:24:02.136 --> 00:24:03.596
ton of power and give that

00:24:03.596 --> 00:24:04.896
system a chance to cool off.

00:24:05.216 --> 00:24:07.876
All right, so I've just talked

00:24:07.876 --> 00:24:10.066
about two very important costs,

00:24:10.066 --> 00:24:11.416
hardware and system pressure.

00:24:12.176 --> 00:24:13.506
There are other costs that we

00:24:13.506 --> 00:24:14.316
are not reporting.

00:24:14.316 --> 00:24:15.996
I didn't want to trick you into

00:24:15.996 --> 00:24:16.786
believing that there aren't

00:24:16.786 --> 00:24:18.106
other things at work here.

00:24:18.136 --> 00:24:19.046
There are, of course, other

00:24:19.046 --> 00:24:20.626
costs such as memory.

00:24:21.096 --> 00:24:22.706
But in iOS 13, we are

00:24:22.706 --> 00:24:24.766
artificially limiting the device

00:24:24.766 --> 00:24:26.386
combinations that we will allow

00:24:26.386 --> 00:24:28.656
you to run, the ones that we are

00:24:28.656 --> 00:24:30.586
confident will run and that will

00:24:30.586 --> 00:24:31.556
not get you into trouble.

00:24:32.936 --> 00:24:35.126
So we have a limited number of

00:24:35.126 --> 00:24:36.856
supported device combinations.

00:24:37.166 --> 00:24:38.186
Here I'm listing the ones that

00:24:38.186 --> 00:24:40.146
are supported on iPhone XS.

00:24:40.576 --> 00:24:41.646
This is kind of an eye chart.

00:24:41.646 --> 00:24:42.766
I don't expect you to remember

00:24:42.766 --> 00:24:42.956
this.

00:24:42.956 --> 00:24:44.136
You can pause the video later.

00:24:44.456 --> 00:24:45.596
But there are six supported

00:24:45.596 --> 00:24:47.096
configs, and the simple rule to

00:24:47.096 --> 00:24:48.696
remember is that you're allowed

00:24:48.696 --> 00:24:50.386
to run two physical cameras at a

00:24:50.386 --> 00:24:50.776
time.

00:24:51.316 --> 00:24:52.256
You might be questioning, like,

00:24:52.506 --> 00:24:54.356
Brad, what about config number

00:24:54.356 --> 00:24:54.746
one there?

00:24:54.746 --> 00:24:56.146
There's only one checkbox.

00:24:56.556 --> 00:24:57.546
That's because it's the dual

00:24:57.546 --> 00:24:59.356
camera, and the dual camera is a

00:24:59.356 --> 00:25:00.936
software camera that's actually

00:25:00.936 --> 00:25:02.306
comprised of the wide and the

00:25:02.306 --> 00:25:03.916
telephoto, so it is two physical

00:25:03.916 --> 00:25:04.376
cameras.

00:25:05.766 --> 00:25:07.096
How do you find out if MultiCam

00:25:07.096 --> 00:25:07.736
is supported?

00:25:08.076 --> 00:25:09.416
Like I said, it's only supported

00:25:09.416 --> 00:25:11.786
on newer hardware, so you need

00:25:11.786 --> 00:25:13.266
to check if MultiCamSession will

00:25:13.266 --> 00:25:14.966
let you run multiple cameras or

00:25:14.966 --> 00:25:16.446
not on the device that you have.

00:25:17.006 --> 00:25:18.106
There's a class method called

00:25:18.106 --> 00:25:19.826
isMultiCamSupported, which you

00:25:19.826 --> 00:25:21.886
can right away decide yes or no.

00:25:22.056 --> 00:25:23.906
And then further when you want

00:25:23.906 --> 00:25:25.216
to decide am I allowed to run

00:25:25.216 --> 00:25:26.556
this combination of devices

00:25:26.556 --> 00:25:28.206
together, you can create an

00:25:28.206 --> 00:25:30.056
AVCaptureDevice.DiscoverySession

00:25:30.396 --> 00:25:31.426
with the devices that you're

00:25:31.426 --> 00:25:32.796
interested in and then ask it

00:25:32.856 --> 00:25:33.866
for its new property

00:25:34.236 --> 00:25:36.466
supportedMultiCamDeviceSets.

00:25:36.686 --> 00:25:38.256
And this will produce an array

00:25:38.256 --> 00:25:40.506
of unordered sets that tell you

00:25:40.506 --> 00:25:41.646
which ones you're allowed to use

00:25:41.646 --> 00:25:41.986
together.

00:25:43.036 --> 00:25:45.016
Next up is a way that we are

00:25:45.016 --> 00:25:47.136
artificially limiting the

00:25:47.286 --> 00:25:48.376
formats that you're allowed to

00:25:48.376 --> 00:25:48.646
run.

00:25:49.346 --> 00:25:51.216
The supported formats last I

00:25:51.336 --> 00:25:52.796
checked on in iPhone XS, there

00:25:53.366 --> 00:25:55.176
were more than 40 formats on the

00:25:55.176 --> 00:25:55.806
back camera.

00:25:55.806 --> 00:25:57.016
So there are tons to choose

00:25:57.016 --> 00:25:57.256
from.

00:25:57.416 --> 00:25:58.816
But we are limiting the actual

00:25:58.816 --> 00:26:00.076
video formats allowed to run

00:26:00.076 --> 00:26:01.756
with MultiCamSession, because

00:26:01.756 --> 00:26:02.886
these are the ones that we can

00:26:02.886 --> 00:26:05.026
comfortable run simultaneously

00:26:05.326 --> 00:26:06.506
on end devices.

00:26:06.986 --> 00:26:07.896
So again, this is a bit of an

00:26:07.896 --> 00:26:08.856
eye chart, but I'm going to draw

00:26:08.856 --> 00:26:10.146
your attention to groups.

00:26:10.766 --> 00:26:12.296
First group is the binned

00:26:12.356 --> 00:26:12.936
formats.

00:26:13.146 --> 00:26:14.186
Remember? Low power.

00:26:14.186 --> 00:26:15.466
Yay, these are our friends.

00:26:15.726 --> 00:26:16.836
At the sensor, you're getting

00:26:17.186 --> 00:26:18.596
that 2 by 2 binning, so you're

00:26:18.596 --> 00:26:19.986
getting very low power.

00:26:20.816 --> 00:26:22.146
All of these are available up to

00:26:22.146 --> 00:26:22.966
60 FPS.

00:26:23.096 --> 00:26:24.656
You've got choices from 640 by

00:26:24.656 --> 00:26:27.026
480 all the way up to 1920 by

00:26:27.026 --> 00:26:27.696
1440.

00:26:27.806 --> 00:26:31.536
Next group is the 1920 by 1080

00:26:31.536 --> 00:26:32.096
at 30.

00:26:32.096 --> 00:26:34.366
This an unbinned format, and

00:26:34.366 --> 00:26:35.636
this is the same as the one you

00:26:35.636 --> 00:26:36.876
would get if you chose the high

00:26:36.876 --> 00:26:38.806
preset on a regular traditional

00:26:38.806 --> 00:26:39.186
session.

00:26:39.786 --> 00:26:40.976
This one is available for

00:26:40.976 --> 00:26:41.856
MultiCam use.

00:26:42.206 --> 00:26:45.416
The final one is 1920 by 1440

00:26:45.416 --> 00:26:46.556
unbinned at 30 FPS.

00:26:47.046 --> 00:26:48.416
This is kind of a good stand-in

00:26:48.416 --> 00:26:49.466
for the photo format.

00:26:49.996 --> 00:26:52.526
We do not support 12 megapixel

00:26:52.526 --> 00:26:53.686
on N cameras.

00:26:54.006 --> 00:26:55.506
That would certainly do bad

00:26:55.556 --> 00:26:57.576
things to the phone, but we do

00:26:57.576 --> 00:27:00.076
allow you to do 1920 by 1440 at

00:27:00.076 --> 00:27:00.496
30 FPS.

00:27:00.556 --> 00:27:02.116
And notice, it still allows you

00:27:02.116 --> 00:27:03.446
to do 12 megapixel

00:27:03.446 --> 00:27:04.756
high-resolution stills.

00:27:04.756 --> 00:27:07.216
So this is a very good proxy for

00:27:07.676 --> 00:27:09.026
when you want to do photography

00:27:09.226 --> 00:27:10.266
with multiple cameras

00:27:10.266 --> 00:27:11.046
simultaneously.

00:27:11.626 --> 00:27:14.826
Now, how do you find out if a

00:27:14.826 --> 00:27:16.246
format supports MultiCam?

00:27:16.426 --> 00:27:17.246
You just ask it.

00:27:17.636 --> 00:27:18.626
So while iterating through the

00:27:18.626 --> 00:27:19.866
formats, you can say, "Is

00:27:19.866 --> 00:27:20.906
MultiCam supported?"

00:27:20.906 --> 00:27:22.426
And if it is, you're allowed to

00:27:22.426 --> 00:27:22.856
use it.

00:27:23.406 --> 00:27:25.116
In this code here, I'm iterating

00:27:25.116 --> 00:27:26.536
through the formats on a device

00:27:26.816 --> 00:27:28.706
and picking the next lowest one

00:27:28.706 --> 00:27:30.796
in resolution that supports

00:27:30.796 --> 00:27:32.456
MultiCam and then setting it as

00:27:32.456 --> 00:27:33.866
my active format.

00:27:34.916 --> 00:27:35.926
The last way that we're

00:27:35.926 --> 00:27:37.296
artificially limiting is,

00:27:37.906 --> 00:27:40.696
because we need to report costs,

00:27:40.956 --> 00:27:42.476
and those costs are reported by

00:27:42.556 --> 00:27:44.466
the MultiCamSession, we're

00:27:44.466 --> 00:27:46.176
specifically not supporting on

00:27:46.336 --> 00:27:48.766
iOS multiple sessions with

00:27:48.766 --> 00:27:50.726
multiple cameras in an app, and

00:27:50.726 --> 00:27:51.796
we're also not supporting

00:27:52.046 --> 00:27:53.586
multiple cameras in multiple

00:27:53.586 --> 00:27:54.986
apps simultaneously.

00:27:55.276 --> 00:27:57.286
Just be aware that the support

00:27:57.286 --> 00:27:58.736
on iOS is still limited to one

00:27:58.736 --> 00:28:00.536
session at a time, but of course

00:28:00.536 --> 00:28:02.786
you can run multiple cameras at

00:28:03.716 --> 00:28:04.086
a time.

00:28:04.086 --> 00:28:05.886
Thus concludes the dad talk.

00:28:06.606 --> 00:28:07.636
Okay, write good code.

00:28:08.296 --> 00:28:09.286
Be home by 11.

00:28:09.626 --> 00:28:11.046
If your plans change, call me.

00:28:11.426 --> 00:28:12.346
All right.

00:28:12.746 --> 00:28:14.776
All right, now back to the fun

00:28:14.776 --> 00:28:15.176
stuff.

00:28:16.456 --> 00:28:17.396
Synchronized streaming.

00:28:17.926 --> 00:28:20.866
I talked a little bit about

00:28:20.866 --> 00:28:21.956
software cameras.

00:28:22.836 --> 00:28:24.186
Dual camera for one was

00:28:24.186 --> 00:28:26.506
introduced on iPhone 7 Plus, and

00:28:26.506 --> 00:28:27.676
it's now present on the iPhone

00:28:27.676 --> 00:28:29.416
XS and XS Max as well.

00:28:29.416 --> 00:28:31.406
And the TrueDepth camera is also

00:28:31.406 --> 00:28:32.636
another kind of software camera,

00:28:32.636 --> 00:28:34.346
because it's comprised of an

00:28:34.346 --> 00:28:36.066
infrared camera and an RGB

00:28:36.066 --> 00:28:38.896
camera that is able to do depth

00:28:38.976 --> 00:28:40.316
by taking the disparity between

00:28:40.316 --> 00:28:40.846
those two.

00:28:42.096 --> 00:28:44.126
Now, we've never given these

00:28:44.346 --> 00:28:46.226
special types of cameras a name,

00:28:46.676 --> 00:28:47.696
but we're doing that now.

00:28:47.806 --> 00:28:49.286
In iOS 13, we're calling them

00:28:49.286 --> 00:28:50.356
virtual cameras.

00:28:50.916 --> 00:28:53.366
DualCam is one of them.

00:28:53.366 --> 00:28:54.996
It presents one video stream at

00:28:55.206 --> 00:28:57.486
a time, and it switches between

00:28:57.486 --> 00:29:00.026
them based on your zoom factor.

00:29:00.206 --> 00:29:02.376
So as you get closer to 2x, it

00:29:02.376 --> 00:29:03.946
switches over to the telephoto

00:29:03.946 --> 00:29:04.986
camera instead of the wide

00:29:04.986 --> 00:29:05.376
camera.

00:29:05.836 --> 00:29:07.426
It also can do neat tricks with

00:29:07.776 --> 00:29:09.576
depth, because it has two images

00:29:09.616 --> 00:29:10.836
that it can use to generate

00:29:10.836 --> 00:29:11.826
disparity between them.

00:29:12.366 --> 00:29:13.096
But still, from your

00:29:13.096 --> 00:29:14.066
perspective, you've only been

00:29:14.066 --> 00:29:16.706
able to get one stream at a

00:29:17.516 --> 00:29:17.636
time.

00:29:17.836 --> 00:29:19.566
Because we have a name now, they

00:29:19.566 --> 00:29:21.336
are also a property in the API

00:29:21.336 --> 00:29:22.206
which you can query.

00:29:22.286 --> 00:29:23.316
So as you're looking at your

00:29:23.316 --> 00:29:24.596
camera devices, you can find

00:29:24.596 --> 00:29:26.576
out, programmatically, is this

00:29:26.576 --> 00:29:27.646
one a virtual device?

00:29:28.026 --> 00:29:29.676
And if it is, you can ask it,

00:29:29.726 --> 00:29:30.866
"Well, what are your physical

00:29:30.866 --> 00:29:31.466
devices?"

00:29:31.936 --> 00:29:33.896
And in the API, we call this its

00:29:34.056 --> 00:29:35.426
constituentDevices.

00:29:37.356 --> 00:29:39.046
Synchronized streaming is all

00:29:39.046 --> 00:29:40.346
about taking those

00:29:40.346 --> 00:29:43.196
constituentDevices of a virtual

00:29:43.196 --> 00:29:44.466
device and running them

00:29:44.966 --> 00:29:45.796
synchronized.

00:29:46.126 --> 00:29:47.236
In other words, for the first

00:29:47.236 --> 00:29:48.716
time, we're allowing you to

00:29:48.716 --> 00:29:50.646
stream synchronized video from

00:29:50.646 --> 00:29:52.126
the wide and the tele at the

00:29:52.126 --> 00:29:54.256
same time.

00:29:54.416 --> 00:29:55.306
You continue to set the

00:29:55.306 --> 00:29:56.526
properties on the virtual

00:29:56.526 --> 00:29:57.336
device, not on the

00:29:57.336 --> 00:29:58.596
constituentDevices.

00:30:00.296 --> 00:30:01.926
And there are some rules in

00:30:01.926 --> 00:30:02.426
place.

00:30:03.226 --> 00:30:04.626
When you run the virtual device,

00:30:04.986 --> 00:30:06.916
the constituentDevices aren't

00:30:06.916 --> 00:30:08.046
allowed to run willy-nilly.

00:30:08.906 --> 00:30:10.236
They have the same active

00:30:10.236 --> 00:30:10.986
resolution.

00:30:10.986 --> 00:30:12.276
They have the same frame rate.

00:30:12.866 --> 00:30:14.636
And at a hardware level, they

00:30:14.636 --> 00:30:15.666
are synchronized.

00:30:15.996 --> 00:30:19.156
That means the sensor's reading

00:30:19.156 --> 00:30:21.536
out those frames in a

00:30:21.536 --> 00:30:23.276
synchronized fashion so that the

00:30:23.276 --> 00:30:26.686
middle line of the readout is

00:30:26.746 --> 00:30:28.556
exactly at the same clock time.

00:30:29.496 --> 00:30:31.276
So that means that they match at

00:30:31.276 --> 00:30:32.106
the frame centers.

00:30:32.396 --> 00:30:34.276
It also means that the exposure,

00:30:34.506 --> 00:30:36.326
white balance and focus happen

00:30:36.326 --> 00:30:37.846
in tandem, which is really nice.

00:30:37.846 --> 00:30:39.146
It makes it look like virtually

00:30:39.146 --> 00:30:40.676
it is the same camera, just

00:30:40.676 --> 00:30:41.846
happens to be at two different

00:30:42.246 --> 00:30:42.926
fields of view.

00:30:45.636 --> 00:30:47.786
This is best shown rather than

00:30:47.786 --> 00:30:49.306
talked about, so let's do a

00:30:49.306 --> 00:30:49.586
demo.

00:30:49.796 --> 00:30:51.786
This one's called AVDualCam.

00:30:52.346 --> 00:30:53.626
There we are.

00:30:55.076 --> 00:30:57.456
Okay, AVDualCam lets you see

00:30:57.876 --> 00:31:00.096
what a virtual camera sees by

00:31:00.096 --> 00:31:01.716
showing you a display of the two

00:31:01.716 --> 00:31:03.236
cameras running synchronized.

00:31:03.546 --> 00:31:05.906
And it does this by showing you

00:31:05.906 --> 00:31:07.316
several different views of those

00:31:07.316 --> 00:31:07.896
cameras.

00:31:08.716 --> 00:31:11.136
Okay, here I've got the wide and

00:31:11.136 --> 00:31:13.066
the tele constituent streams of

00:31:13.066 --> 00:31:14.606
the dual camera running

00:31:14.606 --> 00:31:15.296
synchronized.

00:31:15.656 --> 00:31:17.556
On the left is the wide, and on

00:31:17.556 --> 00:31:18.676
the right is the tele.

00:31:19.456 --> 00:31:20.206
Don't believe me?

00:31:20.206 --> 00:31:21.836
Here, I'm going to put my finger

00:31:21.836 --> 00:31:22.476
over one side.

00:31:23.076 --> 00:31:24.966
I'm going to put my finger over

00:31:24.966 --> 00:31:25.396
the other side.

00:31:25.396 --> 00:31:26.926
See? They're different cameras.

00:31:29.596 --> 00:31:31.526
All I've done with the wide is

00:31:31.526 --> 00:31:32.766
zoom it so it's at the same

00:31:32.766 --> 00:31:33.756
field of view as the tele.

00:31:34.436 --> 00:31:36.316
But you can notice that they're

00:31:36.316 --> 00:31:37.766
running perfectly synchronized.

00:31:37.766 --> 00:31:39.306
There's no tearing.

00:31:39.306 --> 00:31:40.466
There's no weirdness in the

00:31:40.466 --> 00:31:41.316
vertical blanking.

00:31:41.946 --> 00:31:43.996
Their exposures and focuses

00:31:43.996 --> 00:31:45.176
change at the same time.

00:31:46.356 --> 00:31:47.196
Now we can have a little bit

00:31:47.196 --> 00:31:48.306
more fun if we change from the

00:31:48.306 --> 00:31:51.266
side-by-side view to the Split

00:31:51.266 --> 00:31:51.506
View.

00:31:52.036 --> 00:31:53.296
Now, this a little bit hard to

00:31:53.296 --> 00:31:56.836
see, but I'm showing the wide on

00:31:56.836 --> 00:31:59.066
the left and the tele on the

00:31:59.066 --> 00:31:59.296
right.

00:31:59.476 --> 00:32:00.666
So I'm only showing you half of

00:32:00.666 --> 00:32:01.176
each frame.

00:32:02.306 --> 00:32:04.476
Now, if I triple-tap, I bring up

00:32:04.476 --> 00:32:05.506
a distanceometer [phonetic]

00:32:06.266 --> 00:32:08.686
which lets me change the plane

00:32:09.176 --> 00:32:10.796
of depth convergence for the two

00:32:10.796 --> 00:32:11.406
images.

00:32:12.046 --> 00:32:14.216
This app knows how to register

00:32:14.216 --> 00:32:15.736
the two images relative to one

00:32:15.736 --> 00:32:18.146
another, so it lets me play with

00:32:18.146 --> 00:32:19.526
the plane at which the depth

00:32:19.526 --> 00:32:20.586
converges, kind of like with

00:32:20.586 --> 00:32:22.666
your eyes when you focus on

00:32:22.666 --> 00:32:24.316
something up close or far away,

00:32:24.606 --> 00:32:25.586
you're kind of changing that

00:32:25.626 --> 00:32:26.916
depth plane of convergence.

00:32:27.316 --> 00:32:28.916
So, for instance, up close with

00:32:28.916 --> 00:32:31.506
my hand, I can find the place

00:32:31.506 --> 00:32:33.686
where the depth converges

00:32:33.686 --> 00:32:34.276
nicely.

00:32:34.476 --> 00:32:34.956
There we go.

00:32:34.956 --> 00:32:36.476
Now I've got one hand.

00:32:37.066 --> 00:32:38.786
But that's not right for the car

00:32:38.786 --> 00:32:40.266
behind me so I can keep going

00:32:40.926 --> 00:32:42.536
further away.

00:32:43.846 --> 00:32:44.356
There we go.

00:32:44.356 --> 00:32:45.776
And that's not right for the car

00:32:45.776 --> 00:32:46.566
behind it.

00:32:47.336 --> 00:32:49.706
So now I can pull that guy back

00:32:49.706 --> 00:32:49.916
too.

00:32:49.996 --> 00:32:52.966
And that's dual camera streaming

00:32:52.966 --> 00:32:54.146
synchronized from the dual

00:32:54.146 --> 00:32:54.676
cameras.

00:32:55.516 --> 00:33:00.500
[ Applause ]

00:33:03.046 --> 00:33:04.336
Here's a diagram showing

00:33:04.426 --> 00:33:05.966
AVDualCam's graph.

00:33:07.096 --> 00:33:08.736
Instead of using separate device

00:33:08.736 --> 00:33:10.016
inputs, it just has one.

00:33:10.586 --> 00:33:11.646
So it's using a single device

00:33:11.646 --> 00:33:13.266
input for the dual camera, but

00:33:13.266 --> 00:33:14.876
it's sourcing wide and tele

00:33:14.876 --> 00:33:17.256
frames in a synchronized fashion

00:33:17.706 --> 00:33:19.226
to two VideoDataOutputs.

00:33:20.076 --> 00:33:21.316
You'll notice that there is a

00:33:21.316 --> 00:33:23.226
little object, little pill at

00:33:23.226 --> 00:33:23.966
the bottom called the

00:33:23.966 --> 00:33:25.836
AVCaptureOutputSynchronizer.

00:33:26.086 --> 00:33:27.066
I don't want to confuse you.

00:33:27.426 --> 00:33:28.606
That thing is not doing the

00:33:28.606 --> 00:33:29.836
hardware synchronization that I

00:33:29.836 --> 00:33:30.386
talked about.

00:33:30.676 --> 00:33:32.596
It's just an object that sits at

00:33:32.636 --> 00:33:34.266
the bottom of a session, if you

00:33:34.266 --> 00:33:36.226
desire, which lets you get

00:33:36.456 --> 00:33:38.136
multiple callbacks for the same

00:33:38.186 --> 00:33:40.066
time in a single callback.

00:33:40.066 --> 00:33:41.826
So instead of getting a separate

00:33:41.826 --> 00:33:43.196
VideoDataOutput callback for the

00:33:43.196 --> 00:33:44.946
wide and the tele, you can slap

00:33:44.946 --> 00:33:46.436
a DataOutputSynchronizer at the

00:33:46.436 --> 00:33:48.016
bottom and get both frames for

00:33:48.016 --> 00:33:49.586
the same time through a single

00:33:49.586 --> 00:33:50.076
callback.

00:33:50.076 --> 00:33:51.546
So it's very handy that way.

00:33:52.166 --> 00:33:54.346
Now, below it, there's a Metal

00:33:54.346 --> 00:33:56.006
Shader Filter Compositor that's

00:33:56.006 --> 00:33:56.826
doing some magic.

00:33:57.366 --> 00:33:58.706
Like I said, it's knowing how to

00:33:58.706 --> 00:34:00.696
blend those frames together, and

00:34:00.696 --> 00:34:02.066
it decides where to render those

00:34:02.066 --> 00:34:03.346
frames to the correct places in

00:34:03.346 --> 00:34:04.986
the preview, and it also can

00:34:04.986 --> 00:34:06.366
send them off to an

00:34:06.366 --> 00:34:07.836
AVAssetWriter to record into a

00:34:07.836 --> 00:34:08.985
video track.

00:34:10.016 --> 00:34:12.136
Now, recall my earlier diagram.

00:34:14.085 --> 00:34:15.485
I showed you a close-up view of

00:34:15.516 --> 00:34:16.966
the AVCaptureDeviceInput,

00:34:17.226 --> 00:34:18.536
specifically the dual camera

00:34:18.536 --> 00:34:18.746
one.

00:34:19.606 --> 00:34:20.835
The ports property of the dual

00:34:20.835 --> 00:34:23.735
camera input exposes which ports

00:34:23.735 --> 00:34:24.266
you see there.

00:34:25.326 --> 00:34:26.815
Anybody see two video ports

00:34:26.815 --> 00:34:27.036
there?

00:34:28.686 --> 00:34:29.906
I don't see two video ports.

00:34:29.906 --> 00:34:31.436
So how do we get both wide and

00:34:31.436 --> 00:34:34.235
tele out of those input ports

00:34:34.235 --> 00:34:35.016
that we see here?

00:34:35.326 --> 00:34:36.956
Is that one video port somehow

00:34:36.956 --> 00:34:37.716
giving us two?

00:34:38.196 --> 00:34:39.806
No, it's not giving us wide or

00:34:39.806 --> 00:34:40.146
tele.

00:34:40.146 --> 00:34:42.025
It's giving us whatever the dual

00:34:42.025 --> 00:34:43.735
camera decides is right for the

00:34:43.735 --> 00:34:45.846
given zoom factor.

00:34:45.846 --> 00:34:48.426
That's not going to help us get

00:34:48.426 --> 00:34:49.716
both constituent streams at the

00:34:49.716 --> 00:34:51.746
same time, so how do we do that?

00:34:52.456 --> 00:34:54.466
Well, I'll tell you, but it's a

00:34:54.466 --> 00:34:55.795
secret, so you have to promise

00:34:55.795 --> 00:34:57.546
not to tell anybody, okay?

00:34:58.316 --> 00:35:00.696
Virtual devices have secret

00:35:00.766 --> 00:35:02.086
ports, okay?

00:35:03.366 --> 00:35:06.396
The secret ports, previously

00:35:06.426 --> 00:35:07.926
unbeknownst to you, are now

00:35:07.926 --> 00:35:09.006
available, but you don't get

00:35:09.006 --> 00:35:10.516
them out of the port's array,

00:35:10.926 --> 00:35:13.586
you get them by knowing what to

00:35:13.586 --> 00:35:14.216
ask for.

00:35:14.906 --> 00:35:16.886
So instead of just getting an

00:35:16.886 --> 00:35:18.636
array of every conceivable type

00:35:18.636 --> 00:35:20.106
of port, including ports that

00:35:20.106 --> 00:35:21.926
are not allowed to be used with

00:35:21.926 --> 00:35:24.176
single-cam session, you can ask

00:35:24.176 --> 00:35:25.086
for them by name.

00:35:25.586 --> 00:35:26.396
So here we have the

00:35:26.396 --> 00:35:28.376
dualCameraInput, and I'm asking

00:35:28.416 --> 00:35:30.046
for its ports with

00:35:30.246 --> 00:35:32.576
sourceDeviceType WideAngleCamera

00:35:33.056 --> 00:35:34.096
and source device type

00:35:34.396 --> 00:35:35.336
TelephotoCamera.

00:35:36.026 --> 00:35:37.176
It goes "Aha, those are the

00:35:37.176 --> 00:35:38.336
secret ports that I know about.

00:35:38.336 --> 00:35:39.086
I'll give them to you now."

00:35:39.506 --> 00:35:40.766
Once you've got those input

00:35:40.766 --> 00:35:42.636
ports, you can hook them up to a

00:35:42.636 --> 00:35:44.216
connection the same way that you

00:35:44.216 --> 00:35:46.206
would when doing your own manual

00:35:46.236 --> 00:35:47.186
connection creation.

00:35:47.806 --> 00:35:49.376
Then you're streaming from

00:35:49.376 --> 00:35:51.066
either the wide or the tele or

00:35:51.066 --> 00:35:51.326
both.

00:35:52.906 --> 00:35:54.626
Now, in the AVDualCam demo, I

00:35:54.626 --> 00:35:55.946
was able to change the depth

00:35:55.996 --> 00:35:58.316
convergence plane of the wide

00:35:58.316 --> 00:35:59.906
and tele cameras with the

00:35:59.906 --> 00:36:00.856
correct perspective.

00:36:00.856 --> 00:36:02.676
And you saw that it wasn't kind

00:36:02.676 --> 00:36:04.066
of moving and shaking all over.

00:36:04.066 --> 00:36:05.356
It was just moving along the

00:36:05.446 --> 00:36:06.826
plane that I wanted it to, was

00:36:06.826 --> 00:36:08.366
just along the plane of the

00:36:08.366 --> 00:36:08.916
baseline.

00:36:09.576 --> 00:36:10.476
And I was able to do that

00:36:10.476 --> 00:36:12.136
because AVFoundation offers us

00:36:12.726 --> 00:36:14.016
some homography aids.

00:36:14.486 --> 00:36:15.416
Homography is, if you're

00:36:15.416 --> 00:36:16.346
unfamiliar with the term, it

00:36:16.346 --> 00:36:18.266
just relates two images on the

00:36:18.266 --> 00:36:18.926
same plane.

00:36:19.676 --> 00:36:20.956
They are the basis for computer

00:36:20.956 --> 00:36:21.286
vision.

00:36:21.606 --> 00:36:23.796
They are common for such tasks

00:36:23.796 --> 00:36:26.076
as image rectification, image

00:36:26.076 --> 00:36:26.736
registration.

00:36:27.346 --> 00:36:29.696
Now, camera intrinsics are not

00:36:29.696 --> 00:36:30.676
new to iOS.

00:36:30.676 --> 00:36:32.406
We introduced those in iOS 11.

00:36:33.236 --> 00:36:34.676
They're presented as a 3 by 3

00:36:34.676 --> 00:36:36.286
matrix that describes the

00:36:36.286 --> 00:36:37.956
geometric properties of a

00:36:37.956 --> 00:36:40.416
camera, namely its focal length

00:36:40.786 --> 00:36:43.186
and its optical center seen here

00:36:43.996 --> 00:36:46.506
using the pinhole camera where

00:36:46.506 --> 00:36:47.956
you can see where it enters

00:36:47.956 --> 00:36:49.536
through the pinhole and hits the

00:36:49.536 --> 00:36:50.936
sensor and that being the

00:36:50.936 --> 00:36:52.536
optical sensor and the distance

00:36:52.536 --> 00:36:53.766
between the two being the focal

00:36:53.766 --> 00:36:54.066
length.

00:36:55.486 --> 00:36:56.996
Now, you can opt in to receive

00:36:56.996 --> 00:36:59.096
per-frame intrinsics by

00:36:59.646 --> 00:37:00.276
messaging the

00:37:00.276 --> 00:37:01.946
AVCaptureConnection and saying

00:37:02.196 --> 00:37:03.626
you want to opt in for intrinsic

00:37:03.666 --> 00:37:04.146
delivery.

00:37:04.576 --> 00:37:06.096
Once you've done that, then

00:37:06.156 --> 00:37:07.676
every video data output buffer

00:37:07.676 --> 00:37:09.336
that you receive has this

00:37:09.336 --> 00:37:10.126
attachment on it,

00:37:10.546 --> 00:37:12.346
CameraIntrinsicMatrix, which

00:37:12.346 --> 00:37:14.486
again is an NSData wrapping a

00:37:14.816 --> 00:37:17.426
matrix float 3 by 3 which is a

00:37:17.426 --> 00:37:18.086
simd type.

00:37:18.726 --> 00:37:20.126
You'll get when you get the wide

00:37:20.126 --> 00:37:22.136
frame, it has the matrix for the

00:37:22.136 --> 00:37:22.866
wide camera.

00:37:23.176 --> 00:37:24.846
When you get the tele frame, it

00:37:24.846 --> 00:37:26.416
has the matrix for the tele

00:37:28.416 --> 00:37:28.756
camera.

00:37:28.756 --> 00:37:30.436
Now, new in iOS 13, we offer

00:37:30.436 --> 00:37:32.826
camera extrinsics at the device

00:37:32.826 --> 00:37:33.156
level.

00:37:33.576 --> 00:37:36.356
Extrinsics are a rotation matrix

00:37:36.436 --> 00:37:37.946
and a translation vector that

00:37:38.086 --> 00:37:41.386
are kind of crammed into one

00:37:41.386 --> 00:37:42.226
matrix together.

00:37:42.666 --> 00:37:43.956
And those describe the camera's

00:37:43.986 --> 00:37:46.156
pose compared to a reference

00:37:47.196 --> 00:37:47.456
camera.

00:37:47.486 --> 00:37:48.476
This helps you if you want to

00:37:48.476 --> 00:37:49.556
kind of relate where the two

00:37:49.556 --> 00:37:52.316
cameras are, both their tilt and

00:37:52.316 --> 00:37:53.236
how far away they are.

00:37:53.686 --> 00:37:56.706
So AVDualCam uses the extrinsics

00:37:57.016 --> 00:37:58.686
to know how to align the wide

00:37:58.686 --> 00:38:00.786
and the tele camera frames with

00:38:00.786 --> 00:38:01.916
respect to one another so it's

00:38:01.916 --> 00:38:02.796
able to do those neat

00:38:02.796 --> 00:38:03.816
perspective shifts.

00:38:04.066 --> 00:38:07.216
That was a very, very brief

00:38:07.246 --> 00:38:08.956
refresher on intrinsics and

00:38:09.096 --> 00:38:09.926
extrinsics.

00:38:10.216 --> 00:38:11.436
So I've described them in

00:38:11.696 --> 00:38:13.486
absolutely excruciating detail

00:38:13.486 --> 00:38:16.196
two years ago in Session 507, so

00:38:16.196 --> 00:38:17.206
I'd invite you to review that

00:38:17.206 --> 00:38:18.226
session if you have a very

00:38:18.226 --> 00:38:19.726
strong stomach for puns.

00:38:21.916 --> 00:38:24.496
Okay, the last topic of MultiCam

00:38:24.496 --> 00:38:27.166
capture is multi-mic capture.

00:38:27.716 --> 00:38:30.176
All right, let's review the

00:38:30.176 --> 00:38:33.086
default behaviors of microphone

00:38:33.086 --> 00:38:34.746
capture when using a traditional

00:38:34.746 --> 00:38:35.536
AVCaptureSession.

00:38:37.496 --> 00:38:39.836
The mic follows the camera.

00:38:40.256 --> 00:38:41.326
That's as simple as I can put

00:38:41.326 --> 00:38:41.426
it.

00:38:41.696 --> 00:38:43.486
So if you have a front-facing

00:38:43.486 --> 00:38:45.046
camera attached to your session

00:38:45.286 --> 00:38:48.256
and a mic, it will automatically

00:38:48.296 --> 00:38:49.816
choose the mic that's pointed in

00:38:49.816 --> 00:38:50.936
the same direction as the front

00:38:50.936 --> 00:38:51.306
camera.

00:38:51.836 --> 00:38:52.636
Same goes for the back.

00:38:52.866 --> 00:38:54.556
And it'll make a nice cardioid

00:38:54.556 --> 00:38:56.636
pattern so that it rejects audio

00:38:56.636 --> 00:38:57.686
out the side that you don't

00:38:57.686 --> 00:38:58.006
want.

00:38:58.556 --> 00:38:59.736
That way you're able to follow

00:38:59.816 --> 00:39:01.056
your subject, be it back or

00:39:01.056 --> 00:39:01.366
front.

00:39:01.666 --> 00:39:02.996
If you have an audio-only

00:39:02.996 --> 00:39:04.056
session, we're not really sure

00:39:04.056 --> 00:39:05.256
what direction to direct the

00:39:05.256 --> 00:39:06.456
audio, so we just give you an

00:39:06.456 --> 00:39:07.686
omnidirectional field.

00:39:08.076 --> 00:39:10.216
And as a power feature, you can

00:39:10.216 --> 00:39:11.666
disable all of that by saying,

00:39:11.986 --> 00:39:13.656
"Hands off AVCaptureSession, I

00:39:13.656 --> 00:39:14.666
want to use my own

00:39:14.666 --> 00:39:16.546
AVAudioSession and configure my

00:39:16.546 --> 00:39:18.306
audio on my own," and we'll

00:39:18.306 --> 00:39:19.326
honor that.

00:39:20.696 --> 00:39:22.326
So now comes the time for

00:39:22.326 --> 00:39:23.566
another dirty little secret.

00:39:26.436 --> 00:39:27.876
There is no such thing as a

00:39:27.876 --> 00:39:28.186
front mic.

00:39:28.186 --> 00:39:30.176
I totally just lied to you.

00:39:31.176 --> 00:39:33.896
In actuality, iPhones contain

00:39:33.896 --> 00:39:35.786
arrays of microphones, and there

00:39:35.786 --> 00:39:36.886
are different numbers depending

00:39:36.886 --> 00:39:37.706
on the devices.

00:39:38.106 --> 00:39:39.186
Recent iPhones happen to have

00:39:39.266 --> 00:39:39.816
four.

00:39:39.816 --> 00:39:41.736
iPads have five, and they are

00:39:41.736 --> 00:39:42.576
positioned at different

00:39:42.626 --> 00:39:43.846
strategic locations.

00:39:44.286 --> 00:39:45.676
On recent iPhones, you happen to

00:39:45.676 --> 00:39:46.966
have two that point straight out

00:39:46.966 --> 00:39:47.476
the bottom.

00:39:47.746 --> 00:39:48.916
And at the top, you have one

00:39:48.916 --> 00:39:50.026
pointing out each side.

00:39:50.516 --> 00:39:51.916
All of them are omnidirectional

00:39:51.916 --> 00:39:52.236
mics.

00:39:52.776 --> 00:39:53.956
Now, the top ones do get some

00:39:53.956 --> 00:39:55.386
acoustic separation because

00:39:55.386 --> 00:39:56.856
they've got the body of the

00:39:56.856 --> 00:39:58.066
device in between them which

00:39:58.066 --> 00:39:59.766
acts as a baffle, but it's still

00:39:59.766 --> 00:40:00.896
not giving you a nice

00:40:00.896 --> 00:40:02.066
directional pattern like you

00:40:02.066 --> 00:40:02.536
would want.

00:40:03.336 --> 00:40:05.626
So what do you do to actually

00:40:05.626 --> 00:40:07.116
get something approximating a

00:40:07.116 --> 00:40:08.216
front or back mic?

00:40:09.396 --> 00:40:10.906
What you do is called microphone

00:40:11.066 --> 00:40:11.866
beam forming.

00:40:12.356 --> 00:40:14.336
And this is a way of processing

00:40:14.336 --> 00:40:16.176
the raw audio signals to get

00:40:16.176 --> 00:40:17.326
them to be directional.

00:40:17.646 --> 00:40:18.666
And this is something that Core

00:40:18.666 --> 00:40:19.946
Audio does on our behalf.

00:40:20.546 --> 00:40:22.686
Here we've got two blue dots

00:40:22.686 --> 00:40:24.126
which represent two microphones

00:40:24.126 --> 00:40:26.536
on either side of an iPhone, and

00:40:26.536 --> 00:40:28.406
the circles are roughly the

00:40:28.406 --> 00:40:29.586
pattern of audio that they are

00:40:29.586 --> 00:40:29.966
hearing.

00:40:29.966 --> 00:40:31.216
Remember, they are both

00:40:31.216 --> 00:40:32.306
omnidirectional mics.

00:40:32.546 --> 00:40:34.076
If we take those two signals and

00:40:34.076 --> 00:40:35.806
we just simply subtract them, we

00:40:35.806 --> 00:40:36.896
wind up with a figure-eight

00:40:36.896 --> 00:40:38.296
pattern, which is cool.

00:40:38.296 --> 00:40:39.556
It's not what we want, but it's

00:40:39.556 --> 00:40:39.916
cool.

00:40:41.046 --> 00:40:42.256
If we want to further shape

00:40:42.256 --> 00:40:44.556
that, we can add some gain to

00:40:44.556 --> 00:40:46.086
the one that we want to keep

00:40:46.086 --> 00:40:47.666
before subtracting them, and now

00:40:47.666 --> 00:40:49.046
we wind up with a little Pac-Man

00:40:49.046 --> 00:40:50.496
ghost, and that's good.

00:40:50.496 --> 00:40:51.626
Now we've got rejection out the

00:40:51.626 --> 00:40:53.276
side that we don't want, but

00:40:53.276 --> 00:40:54.416
unfortunately, we've also

00:40:54.416 --> 00:40:55.706
attenuated the signal, so it's

00:40:55.706 --> 00:40:57.396
much quieter than we want.

00:40:58.676 --> 00:41:01.726
But if after doing all that, we

00:41:01.726 --> 00:41:03.316
apply some gain to that signal.

00:41:03.576 --> 00:41:04.816
We get a nice, big Pac-Man

00:41:04.816 --> 00:41:06.036
ghost, and now we've got that

00:41:06.066 --> 00:41:07.386
beautiful cardioid pattern that

00:41:07.386 --> 00:41:09.546
we want, which rejects out of

00:41:09.796 --> 00:41:11.136
the side of the camera that we

00:41:11.136 --> 00:41:11.586
don't want.

00:41:12.356 --> 00:41:14.136
Now, this is extremely

00:41:14.136 --> 00:41:14.916
oversimplified.

00:41:15.196 --> 00:41:16.306
There's a lot of filtering going

00:41:16.306 --> 00:41:17.626
on to ensure that white noise

00:41:17.626 --> 00:41:19.646
isn't gained up, but essentially

00:41:19.646 --> 00:41:20.636
that is what's happening.

00:41:20.996 --> 00:41:22.476
And up to now, only one

00:41:22.476 --> 00:41:23.806
microphone beam form has been

00:41:23.806 --> 00:41:24.776
supported at a time.

00:41:25.176 --> 00:41:26.746
But the good folks over in Core

00:41:26.746 --> 00:41:28.196
Audio land did some great work

00:41:28.196 --> 00:41:30.536
for this MultiCam feature, and

00:41:31.106 --> 00:41:33.296
as of iOS 13, we now support

00:41:33.526 --> 00:41:35.436
multiple simultaneous beam

00:41:35.436 --> 00:41:35.796
forming.

00:41:36.516 --> 00:41:40.916
[ Applause ]

00:41:41.416 --> 00:41:42.696
So going back to the old

00:41:42.696 --> 00:41:43.716
AVCaptureSession.

00:41:44.326 --> 00:41:46.146
When you get a microphone device

00:41:46.146 --> 00:41:47.826
input and you find its audio

00:41:47.906 --> 00:41:51.306
port, that port lives many

00:41:51.306 --> 00:41:51.806
lives.

00:41:51.806 --> 00:41:53.296
It can be the front, back or

00:41:53.296 --> 00:41:54.776
omni depending on what cameras

00:41:54.776 --> 00:41:55.726
the session finds.

00:41:56.526 --> 00:41:57.246
But when you're using the

00:41:57.246 --> 00:42:00.326
MultiCamSession, the behavior is

00:42:00.746 --> 00:42:01.206
rigid.

00:42:01.966 --> 00:42:04.506
The first audio port you find is

00:42:04.506 --> 00:42:06.796
always for omni, and then you

00:42:06.796 --> 00:42:08.596
can find those secret ports that

00:42:08.596 --> 00:42:10.336
I was talking about to get a

00:42:10.336 --> 00:42:12.416
dedicated back beam or dedicated

00:42:12.416 --> 00:42:12.986
front beam.

00:42:13.886 --> 00:42:16.826
The way you do that is by using

00:42:17.286 --> 00:42:20.776
those same device input port

00:42:20.776 --> 00:42:22.876
getters, this time by specifying

00:42:22.876 --> 00:42:24.136
which position you're interested

00:42:24.136 --> 00:42:24.286
in.

00:42:24.816 --> 00:42:26.456
So you can ask for the front

00:42:26.536 --> 00:42:27.936
position or the back position,

00:42:28.106 --> 00:42:29.156
and that will give you the ports

00:42:29.156 --> 00:42:30.336
that you're interested in, and

00:42:30.336 --> 00:42:31.666
you'll get a nice back or front

00:42:31.696 --> 00:42:32.136
beam form.

00:42:34.216 --> 00:42:36.876
Here is for the front, and here

00:42:36.876 --> 00:42:39.536
is for the back.

00:42:39.536 --> 00:42:40.216
Now, going back to the

00:42:40.216 --> 00:42:42.336
MultiCamPIP demonstration we had

00:42:42.336 --> 00:42:44.556
with Nik, we stuck to the video

00:42:44.556 --> 00:42:46.306
side while we were showing you

00:42:46.556 --> 00:42:47.896
the whizzy part of the graph.

00:42:47.896 --> 00:42:49.456
Now I'm going to go back and

00:42:49.456 --> 00:42:50.226
tell you what we were doing on

00:42:50.226 --> 00:42:50.986
the audio side.

00:42:51.966 --> 00:42:55.446
We were running all the time a

00:42:55.446 --> 00:42:57.526
single device input with two

00:42:57.986 --> 00:42:59.256
beam forms, one for the back and

00:42:59.256 --> 00:43:00.766
one for the front, and we were

00:43:00.766 --> 00:43:01.936
running those to two different

00:43:02.026 --> 00:43:03.116
audio data outputs.

00:43:03.456 --> 00:43:04.476
This slide should say

00:43:04.476 --> 00:43:05.356
AudioDataOutputs.

00:43:05.866 --> 00:43:07.416
And then choosing between them

00:43:07.806 --> 00:43:08.606
at runtime.

00:43:08.676 --> 00:43:10.656
So depending on which is the

00:43:10.656 --> 00:43:12.296
larger of the two, we would

00:43:12.296 --> 00:43:14.626
switch to back or front and give

00:43:14.626 --> 00:43:15.906
you the beam form that we

00:43:15.906 --> 00:43:16.326
desired.

00:43:18.096 --> 00:43:19.466
There are a couple rules to know

00:43:19.466 --> 00:43:21.396
about multi-mic capture.

00:43:21.846 --> 00:43:23.186
Beam-forming only works with

00:43:23.186 --> 00:43:23.956
built-in mics.

00:43:23.956 --> 00:43:24.856
If you've got something

00:43:24.856 --> 00:43:26.666
external, USB, we don't know

00:43:26.666 --> 00:43:27.206
what that is.

00:43:27.206 --> 00:43:28.316
We don't know how to beam form

00:43:28.316 --> 00:43:29.206
with it.

00:43:29.816 --> 00:43:31.426
If you do happen to plug in

00:43:31.426 --> 00:43:32.696
something else, including

00:43:32.696 --> 00:43:36.246
AirPods, we will capture audio

00:43:36.246 --> 00:43:37.836
of course, but we don't know how

00:43:37.836 --> 00:43:39.336
to beam form, so we'll just pipe

00:43:39.336 --> 00:43:41.076
that microphone through all of

00:43:41.076 --> 00:43:41.976
the inputs that you have

00:43:42.026 --> 00:43:43.456
connected, thus ensuring that

00:43:43.456 --> 00:43:43.976
you don't lose the signal.

00:43:47.596 --> 00:43:48.716
And that's the end of the

00:43:48.716 --> 00:43:50.786
multi-camera capture part of

00:43:50.786 --> 00:43:52.196
today's talk.

00:43:52.256 --> 00:43:53.386
Let's do a quick summary.

00:43:54.956 --> 00:43:57.466
MultiCam capture session is the

00:43:57.466 --> 00:43:59.966
new way to do multiple cameras

00:43:59.966 --> 00:44:01.446
simultaneously on iOS.

00:44:02.516 --> 00:44:03.906
It is a power tool, but it has

00:44:03.906 --> 00:44:04.786
some limitations.

00:44:04.786 --> 00:44:05.256
Know them.

00:44:06.716 --> 00:44:08.276
And thoughtfully handle hardware

00:44:08.276 --> 00:44:10.376
and system pressure costs as

00:44:10.376 --> 00:44:11.436
you're doing your programming.

00:44:11.786 --> 00:44:14.116
And if you want to do

00:44:14.116 --> 00:44:15.526
synchronized streaming, use

00:44:15.526 --> 00:44:16.756
those virtual devices with

00:44:16.756 --> 00:44:18.106
constituent device ports.

00:44:19.006 --> 00:44:20.236
And lastly, if you want to do

00:44:20.236 --> 00:44:21.896
multi-mic capture, be aware that

00:44:21.896 --> 00:44:23.296
you can use front or back beam

00:44:23.296 --> 00:44:24.156
form or omni.

00:44:24.496 --> 00:44:24.976
Thank you.

00:44:25.516 --> 00:44:28.500
[ Applause ]