WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:07.356 --> 00:00:08.586
>> Welcome to our session on

00:00:08.586 --> 00:00:09.586
Universal Links.

00:00:10.096 --> 00:00:11.946
My name is Jonathan Grynspan and

00:00:11.946 --> 00:00:13.146
I work on the Core Frameworks

00:00:13.146 --> 00:00:13.876
Team at Apple.

00:00:14.966 --> 00:00:16.556
Today, I'll be showing you how

00:00:16.556 --> 00:00:18.116
to use universal links in your

00:00:18.116 --> 00:00:18.366
app.

00:00:19.246 --> 00:00:20.426
We introduced the universal

00:00:20.426 --> 00:00:22.566
links in iOS 9 as a great way to

00:00:22.566 --> 00:00:24.436
provide rich content both on the

00:00:24.436 --> 00:00:25.506
web and in your app.

00:00:26.496 --> 00:00:27.986
Today, I'll be showing you the

00:00:27.986 --> 00:00:29.196
enhancements we've made to this

00:00:29.196 --> 00:00:29.586
feature.

00:00:30.436 --> 00:00:31.676
Whether you've already adopted

00:00:31.676 --> 00:00:33.306
universal links in your iOS app

00:00:33.606 --> 00:00:34.846
or you're adding them to your

00:00:34.846 --> 00:00:36.676
macOS app, you will want to pay

00:00:36.676 --> 00:00:37.936
close attention to the changes

00:00:37.936 --> 00:00:38.726
I'll be discussing.

00:00:40.436 --> 00:00:42.466
To begin, let's talk about what

00:00:42.466 --> 00:00:43.626
universal links are.

00:00:45.566 --> 00:00:47.966
Universal links are HTTP or

00:00:47.966 --> 00:00:50.606
HTTPS URLs that Apple's

00:00:50.606 --> 00:00:52.516
operating systems recognize as

00:00:52.516 --> 00:00:54.146
pointing to resources either on

00:00:54.146 --> 00:00:55.876
the web or in your app.

00:00:56.756 --> 00:00:58.616
This means that a single URL can

00:00:58.616 --> 00:01:00.166
represent that content, whether

00:01:00.166 --> 00:01:01.246
your users have your app

00:01:01.246 --> 00:01:03.056
installed or it just haven't

00:01:03.056 --> 00:01:03.876
downloaded it yet.

00:01:04.575 --> 00:01:05.816
They are great way to increase

00:01:05.816 --> 00:01:07.216
user engagement within your app.

00:01:08.396 --> 00:01:09.896
Universal links are introduced

00:01:09.896 --> 00:01:11.926
in iOS 9 and tvOS 10.

00:01:12.346 --> 00:01:13.936
I'm happy to announce that we

00:01:13.936 --> 00:01:15.256
are introducing them to the Mac

00:01:15.256 --> 00:01:17.796
with macOS 10.15, whether you're

00:01:17.796 --> 00:01:19.676
using AppKit or UIKit.

00:01:20.026 --> 00:01:21.756
I'll tell you more about that in

00:01:21.756 --> 00:01:22.176
a moment.

00:01:23.166 --> 00:01:24.666
Universal links are securely

00:01:24.666 --> 00:01:26.406
associated between your app and

00:01:26.406 --> 00:01:27.096
your website.

00:01:27.836 --> 00:01:29.236
Your app adopts an entitlement

00:01:29.236 --> 00:01:30.936
in Xcode that indicates which

00:01:30.936 --> 00:01:32.926
domains it can represent and

00:01:32.926 --> 00:01:34.436
your web server adopts a single

00:01:34.436 --> 00:01:36.016
JSON file that contains more

00:01:36.016 --> 00:01:37.806
details about what parts of its

00:01:37.806 --> 00:01:39.506
domain are representable in your

00:01:39.506 --> 00:01:39.746
app.

00:01:40.596 --> 00:01:42.226
These two ways secure handshake

00:01:42.226 --> 00:01:43.866
ensures nobody can redirect your

00:01:43.866 --> 00:01:45.526
users into their apps instead of

00:01:45.526 --> 00:01:46.026
yours.

00:01:47.536 --> 00:01:48.916
We recommend that where you are

00:01:48.916 --> 00:01:50.436
currently using custom URL

00:01:50.436 --> 00:01:52.326
schemes, you begin migrating to

00:01:52.326 --> 00:01:53.486
universal links today.

00:01:54.306 --> 00:01:55.606
Custom URL schemes are

00:01:55.606 --> 00:01:57.656
inherently insecure and can be

00:01:57.656 --> 00:01:59.186
abused by malicious developers.

00:01:59.726 --> 00:02:01.626
New uses of custom URL schemes

00:02:01.626 --> 00:02:02.746
are highly discouraged.

00:02:05.106 --> 00:02:06.626
Now that we know what universal

00:02:06.626 --> 00:02:08.515
links are, let's talk about how

00:02:08.515 --> 00:02:09.205
to build them.

00:02:09.645 --> 00:02:10.596
We'll start with your web

00:02:10.596 --> 00:02:10.996
server.

00:02:12.816 --> 00:02:14.606
Your web server must have a

00:02:14.606 --> 00:02:17.016
valid HTTPS certificate.

00:02:17.526 --> 00:02:19.886
HTTP is not secure and cannot be

00:02:19.886 --> 00:02:21.646
used to validate an association

00:02:21.806 --> 00:02:23.026
between your app and your

00:02:23.026 --> 00:02:23.546
website.

00:02:23.846 --> 00:02:25.936
The root certificate used to

00:02:25.936 --> 00:02:28.226
sign your HTTPS certificate must

00:02:28.226 --> 00:02:29.626
be recognized by the operating

00:02:29.626 --> 00:02:30.126
system.

00:02:30.646 --> 00:02:32.126
Custom root certificates are not

00:02:32.126 --> 00:02:32.606
supported.

00:02:33.816 --> 00:02:34.986
After generating your

00:02:34.986 --> 00:02:36.366
certificate and configuring your

00:02:36.366 --> 00:02:37.596
server, add your

00:02:37.596 --> 00:02:39.636
apple-app-site-association file.

00:02:40.226 --> 00:02:41.586
This is a JSON file.

00:02:41.586 --> 00:02:42.776
We'll discuss this format in a

00:02:42.776 --> 00:02:43.206
moment.

00:02:43.556 --> 00:02:45.446
When your app is installed on an

00:02:45.446 --> 00:02:46.896
Apple device, the operating

00:02:46.896 --> 00:02:48.326
system downloads this file to

00:02:48.326 --> 00:02:49.916
determine what services the

00:02:49.916 --> 00:02:51.306
server will let your app use.

00:02:51.616 --> 00:02:53.666
The system also periodically

00:02:53.666 --> 00:02:55.496
downloads updates for this file.

00:02:56.246 --> 00:02:57.626
Universal links are one of many

00:02:57.626 --> 00:02:59.086
services that may be included in

00:02:59.086 --> 00:02:59.606
this file.

00:03:00.606 --> 00:03:02.376
This file should be located at

00:03:02.506 --> 00:03:06.126
HTTPS://your domain name/

00:03:07.286 --> 00:03:10.216
.well-known/apple-app-site-

00:03:10.216 --> 00:03:11.036
association.

00:03:11.956 --> 00:03:13.346
Other paths are deprecated.

00:03:14.226 --> 00:03:15.566
In the past, we've discussed

00:03:15.566 --> 00:03:16.056
signing your

00:03:16.056 --> 00:03:17.816
apple-app-site-association file.

00:03:18.356 --> 00:03:19.666
This has never been a necessary

00:03:19.666 --> 00:03:21.376
step to support universal links

00:03:21.416 --> 00:03:22.696
so it is now deprecated.

00:03:23.926 --> 00:03:25.936
Support for sign JSON files and

00:03:25.936 --> 00:03:27.606
JSON files at other paths will

00:03:27.606 --> 00:03:29.156
be removed in a future release.

00:03:29.446 --> 00:03:32.676
With that out of the way, let's

00:03:32.676 --> 00:03:33.426
take a look at your

00:03:33.426 --> 00:03:35.316
apple-app-site-association file.

00:03:36.156 --> 00:03:37.336
If you already have one of these

00:03:37.336 --> 00:03:38.776
files on your web server this

00:03:38.776 --> 00:03:41.336
probably looks familiar, but we

00:03:41.336 --> 00:03:42.786
have a few changes to introduce

00:03:42.786 --> 00:03:42.996
today.

00:03:43.686 --> 00:03:45.556
At the top level is a dictionary

00:03:45.556 --> 00:03:47.036
whose keys are service types.

00:03:47.036 --> 00:03:48.976
For universal links, the key is

00:03:48.976 --> 00:03:50.896
applinks like you see here but

00:03:50.896 --> 00:03:52.316
other services are also

00:03:52.316 --> 00:03:52.766
available.

00:03:53.586 --> 00:03:54.966
We'll be focusing solely on

00:03:54.966 --> 00:03:55.886
Universal Links.

00:03:56.316 --> 00:03:58.336
Under that top level key are the

00:03:58.336 --> 00:03:59.976
apps key and the details key.

00:04:00.576 --> 00:04:02.276
If you are targeting iOS 13,

00:04:02.606 --> 00:04:05.926
tvOS 13 and macOS 10.15, you do

00:04:05.926 --> 00:04:07.636
not need the apps key, so you

00:04:07.636 --> 00:04:08.266
can remove it.

00:04:09.066 --> 00:04:10.376
If you are continuing to provide

00:04:10.376 --> 00:04:12.956
support for iOS 12, tvOS 12 or

00:04:12.956 --> 00:04:14.526
earlier, you'll still need it.

00:04:14.816 --> 00:04:16.125
For universal links, it should

00:04:16.125 --> 00:04:17.456
always be an empty array.

00:04:18.846 --> 00:04:20.146
The details key contains an

00:04:20.146 --> 00:04:21.736
array of dictionaries, each of

00:04:21.736 --> 00:04:23.416
which represents a specific apps

00:04:23.416 --> 00:04:24.926
universal links configuration.

00:04:25.306 --> 00:04:27.326
In the past, we supported using

00:04:27.326 --> 00:04:28.596
a dictionary structure here

00:04:28.626 --> 00:04:30.126
instead of an array but that

00:04:30.126 --> 00:04:31.626
configuration is obsolete.

00:04:33.136 --> 00:04:34.536
Under the details key is an

00:04:34.536 --> 00:04:36.556
appID key whose value is your

00:04:36.556 --> 00:04:37.346
app identifier.

00:04:38.006 --> 00:04:39.676
Your app identifier consists of

00:04:39.676 --> 00:04:41.196
an alphanumeric, 10 character

00:04:41.196 --> 00:04:43.316
prefix provided by Apple, a

00:04:43.316 --> 00:04:44.996
period, and your bundle

00:04:44.996 --> 00:04:45.516
identifier.

00:04:46.936 --> 00:04:48.536
The prefix may or may not be

00:04:48.536 --> 00:04:49.876
equal to your team identifier.

00:04:50.146 --> 00:04:51.486
Check the developer portal to

00:04:51.486 --> 00:04:52.776
confirm your app identifier.

00:04:52.776 --> 00:04:55.086
If you have multiple apps with

00:04:55.086 --> 00:04:56.296
the same universal links

00:04:56.296 --> 00:04:58.316
configuration, you may not want

00:04:58.316 --> 00:04:59.726
to repeat the relevant JSON.

00:05:00.056 --> 00:05:01.776
If you are targeting this year's

00:05:01.776 --> 00:05:03.296
releases, you can reduce the

00:05:03.296 --> 00:05:04.926
size of this file by using the

00:05:04.926 --> 00:05:06.226
plural appIDs key.

00:05:06.656 --> 00:05:08.316
The value of that key is an

00:05:08.316 --> 00:05:09.816
array of app identifiers.

00:05:10.486 --> 00:05:11.906
If you need to support previous

00:05:11.906 --> 00:05:13.466
releases, you should keep using

00:05:13.466 --> 00:05:15.346
the singular appID key for each

00:05:15.346 --> 00:05:15.606
app.

00:05:16.646 --> 00:05:17.826
Next is the paths key.

00:05:18.326 --> 00:05:19.736
This key contains an array of

00:05:19.736 --> 00:05:20.526
path patterns.

00:05:20.586 --> 00:05:22.246
Pattern matching is performed

00:05:22.246 --> 00:05:23.566
the same way it is in terminal.

00:05:24.026 --> 00:05:25.676
The asterisk is used to indicate

00:05:25.676 --> 00:05:27.216
multiple wildcard characters

00:05:27.216 --> 00:05:28.696
while the question mark matches

00:05:28.696 --> 00:05:29.666
just one character.

00:05:30.636 --> 00:05:31.856
Beginning this year, we are

00:05:31.856 --> 00:05:33.486
replacing the paths key with the

00:05:33.486 --> 00:05:34.266
components key.

00:05:35.346 --> 00:05:36.966
This key's value is an array of

00:05:36.966 --> 00:05:38.366
dictionaries, each of which

00:05:38.366 --> 00:05:40.066
contains zero or more URL

00:05:40.066 --> 00:05:41.526
components to pattern match

00:05:41.526 --> 00:05:42.046
against.

00:05:42.396 --> 00:05:44.546
As before, you can match against

00:05:44.546 --> 00:05:45.936
the URL's path component whose

00:05:45.936 --> 00:05:47.116
key is the forward slash.

00:05:47.486 --> 00:05:49.446
If you need to support previous

00:05:49.446 --> 00:05:50.986
releases, you can keep the paths

00:05:50.986 --> 00:05:51.206
key.

00:05:52.026 --> 00:05:55.766
iOS 13, tvOS 13 and macOS 10.15

00:05:55.766 --> 00:05:57.296
will ignore it if the components

00:05:57.296 --> 00:05:58.016
key is present.

00:05:58.556 --> 00:06:00.346
And now you can match against

00:06:00.346 --> 00:06:01.596
the URL's fragment component

00:06:01.956 --> 00:06:03.646
whose key is the hash mark and

00:06:03.646 --> 00:06:04.436
you can match the query

00:06:04.436 --> 00:06:05.566
component whose key is the

00:06:05.566 --> 00:06:06.236
question mark.

00:06:07.076 --> 00:06:09.466
Now many, if not most URLs out

00:06:09.466 --> 00:06:10.616
there divide their query

00:06:10.616 --> 00:06:12.056
component up into key value

00:06:12.056 --> 00:06:13.496
pairs called query items.

00:06:13.496 --> 00:06:15.386
For the query component, you can

00:06:15.386 --> 00:06:17.016
specify a dictionary instead of

00:06:17.016 --> 00:06:19.026
a string as its value and

00:06:19.026 --> 00:06:20.556
pattern match individual query

00:06:20.556 --> 00:06:20.946
items.

00:06:21.686 --> 00:06:23.636
URLs may repeat query item names

00:06:23.706 --> 00:06:24.826
and the operating system will

00:06:24.826 --> 00:06:26.586
require that all instances of a

00:06:26.586 --> 00:06:28.276
given query item name match your

00:06:28.276 --> 00:06:28.626
pattern.

00:06:29.486 --> 00:06:31.216
Query items with no value and

00:06:31.216 --> 00:06:32.736
absent query items are treated

00:06:32.736 --> 00:06:34.406
by the operating system as if

00:06:34.406 --> 00:06:35.746
they have a value equal to the

00:06:35.746 --> 00:06:36.416
empty string.

00:06:37.986 --> 00:06:39.306
For a components dictionary to

00:06:39.306 --> 00:06:41.206
match a candidate URL, all the

00:06:41.206 --> 00:06:42.866
specified components must match.

00:06:43.466 --> 00:06:44.456
If you don't specify a

00:06:44.456 --> 00:06:45.596
component, the operating

00:06:45.596 --> 00:06:47.356
system's default behavior is to

00:06:47.356 --> 00:06:48.876
simply ignore that component.

00:06:49.456 --> 00:06:51.266
So if, for example, your app

00:06:51.326 --> 00:06:52.576
doesn't care about the fragment

00:06:52.576 --> 00:06:54.426
component of a URL, you don't

00:06:54.426 --> 00:06:55.846
need to specify it in this file.

00:06:56.556 --> 00:06:57.706
You may have sections of your

00:06:57.706 --> 00:06:59.196
website that are not able to be

00:06:59.196 --> 00:07:00.606
represented in your app yet.

00:07:01.266 --> 00:07:03.086
You can exclude such subsections

00:07:03.086 --> 00:07:04.796
by specifying the exclude key

00:07:05.016 --> 00:07:06.386
with a Boolean value of true.

00:07:07.276 --> 00:07:08.826
This key has the same behavior

00:07:08.826 --> 00:07:10.466
as a not keyword that you used

00:07:10.466 --> 00:07:11.536
in the old paths key.

00:07:12.056 --> 00:07:13.436
That key word is not supported

00:07:13.436 --> 00:07:14.436
when using the component's

00:07:14.436 --> 00:07:14.876
dictionary.

00:07:16.626 --> 00:07:18.486
Here we have a few examples of

00:07:18.486 --> 00:07:19.906
URLs that we need to pattern

00:07:19.906 --> 00:07:20.286
match.

00:07:20.726 --> 00:07:22.286
I'm working on a meal ordering

00:07:22.286 --> 00:07:23.726
app and I'm using universal

00:07:23.726 --> 00:07:25.436
links to bring users into my app

00:07:25.436 --> 00:07:26.186
from Safari.

00:07:26.616 --> 00:07:28.316
On the left, you can see some

00:07:28.316 --> 00:07:30.146
JSON from my server and on the

00:07:30.146 --> 00:07:31.936
right, you can see some URLs.

00:07:32.806 --> 00:07:34.606
First, I want to match all the

00:07:34.606 --> 00:07:36.626
order forms on my website which

00:07:36.626 --> 00:07:38.436
are all located on a path where

00:07:38.436 --> 00:07:39.576
the first component can be

00:07:39.576 --> 00:07:40.076
anything.

00:07:40.496 --> 00:07:42.086
The second component is order

00:07:42.086 --> 00:07:43.656
and there are no further path

00:07:43.656 --> 00:07:44.656
components afterward.

00:07:45.806 --> 00:07:47.336
This pattern will match a URL

00:07:47.336 --> 00:07:48.786
such as these two on the right.

00:07:49.136 --> 00:07:49.856
Time for lunch.

00:07:51.396 --> 00:07:52.746
Next, I know a lot of my

00:07:52.746 --> 00:07:54.126
customers are going to want to

00:07:54.126 --> 00:07:56.026
put cheese on their tacos so I'm

00:07:56.026 --> 00:07:57.726
going to match any URL where the

00:07:57.726 --> 00:07:59.246
path starts with the path

00:07:59.246 --> 00:08:01.866
component taco and where a query

00:08:01.866 --> 00:08:03.986
item named cheese is specified.

00:08:04.626 --> 00:08:05.916
You'll notice that I specify a

00:08:05.916 --> 00:08:07.946
question mark and an asterisk as

00:08:07.946 --> 00:08:09.286
the pattern from the query items

00:08:09.286 --> 00:08:09.676
value.

00:08:09.966 --> 00:08:12.046
A pattern consisting of a single

00:08:12.046 --> 00:08:13.696
asterisk matches any string,

00:08:13.826 --> 00:08:15.066
including the empty string.

00:08:15.156 --> 00:08:16.966
And a missing query item has a

00:08:16.966 --> 00:08:18.236
value equivalent to the empty

00:08:18.236 --> 00:08:18.556
string.

00:08:19.076 --> 00:08:20.766
So to match against the string

00:08:20.766 --> 00:08:22.016
that's at least one character

00:08:22.016 --> 00:08:24.416
long, I specify a question mark

00:08:24.416 --> 00:08:25.446
and then any additional

00:08:25.446 --> 00:08:26.626
characters are matched by the

00:08:26.626 --> 00:08:27.256
asterisk.

00:08:28.096 --> 00:08:29.436
That matches our third URL.

00:08:31.266 --> 00:08:33.006
The fourth and fifth URLs look

00:08:33.006 --> 00:08:35.206
very similar but there's a good

00:08:35.206 --> 00:08:35.956
reason for that.

00:08:36.535 --> 00:08:38.206
My website also has lots of

00:08:38.206 --> 00:08:39.576
four-digit coupon codes that the

00:08:39.576 --> 00:08:40.326
app can handle.

00:08:40.395 --> 00:08:42.866
But if they start with a 1, I

00:08:43.006 --> 00:08:43.936
want them to stay in the

00:08:43.936 --> 00:08:44.446
browser.

00:08:45.216 --> 00:08:46.706
Because the operating system is

00:08:46.706 --> 00:08:47.916
going to look at the available

00:08:47.916 --> 00:08:49.446
patterns from top to bottom,

00:08:49.846 --> 00:08:51.266
we'll first mark coupon code

00:08:51.266 --> 00:08:52.566
starting with the one as

00:08:52.566 --> 00:08:53.176
excluded.

00:08:54.236 --> 00:08:55.846
This tells the system to stop

00:08:55.846 --> 00:08:57.446
looking here if it finds a match

00:08:57.646 --> 00:08:59.496
but not to open the URL as a

00:08:59.496 --> 00:09:00.356
universal link.

00:09:00.926 --> 00:09:02.866
Then any other coupon will match

00:09:02.866 --> 00:09:04.366
the fourth and final components

00:09:04.366 --> 00:09:04.886
dictionary.

00:09:08.116 --> 00:09:09.486
Before we move on to your app,

00:09:09.686 --> 00:09:11.226
let's discuss how to support an

00:09:11.226 --> 00:09:12.386
international audience.

00:09:13.456 --> 00:09:15.946
URLs are always ASCII coded so

00:09:15.946 --> 00:09:17.206
component matching is done in

00:09:17.206 --> 00:09:17.926
ASCII as well.

00:09:18.866 --> 00:09:20.036
If you need to match Unicode

00:09:20.036 --> 00:09:21.816
characters present and code them

00:09:21.816 --> 00:09:23.026
like you would in your URL.

00:09:23.866 --> 00:09:25.186
Because components are present

00:09:25.186 --> 00:09:26.766
and coded, a Unicode character

00:09:26.766 --> 00:09:28.406
may be represented by more than

00:09:28.406 --> 00:09:30.166
one ASCII character, so keep

00:09:30.166 --> 00:09:31.196
that in mind when using the

00:09:31.196 --> 00:09:32.526
question mark in your patterns.

00:09:33.636 --> 00:09:35.036
When you build your JSON, you

00:09:35.036 --> 00:09:36.226
may be tempted to provide

00:09:36.226 --> 00:09:37.556
country-specific patterns for

00:09:37.556 --> 00:09:38.826
every country you support.

00:09:39.426 --> 00:09:40.716
This increases the size of your

00:09:40.716 --> 00:09:41.826
JSON significantly.

00:09:42.646 --> 00:09:43.616
If your pattern-matching is

00:09:43.616 --> 00:09:45.096
consistent between countries,

00:09:45.286 --> 00:09:46.646
you can reduce the traffic to

00:09:46.646 --> 00:09:47.596
and from your server by

00:09:47.596 --> 00:09:48.736
simplifying you JSON.

00:09:49.526 --> 00:09:50.816
For instance, if you separate

00:09:50.816 --> 00:09:51.926
your content by two-letter

00:09:51.926 --> 00:09:53.406
country code, you need to only

00:09:53.406 --> 00:09:55.266
specify two question marks where

00:09:55.266 --> 00:09:56.516
you are previously using those

00:09:56.516 --> 00:09:57.226
country codes.

00:09:57.926 --> 00:09:59.456
Other more complex patterns like

00:09:59.456 --> 00:10:01.216
you see here can also be matched

00:10:01.216 --> 00:10:01.596
easily.

00:10:02.506 --> 00:10:04.216
If you encounter a URL with an

00:10:04.216 --> 00:10:05.736
invalid country code or locale

00:10:05.736 --> 00:10:07.636
specific identifier, just treat

00:10:07.636 --> 00:10:08.646
it like the user's current

00:10:08.646 --> 00:10:09.046
locale.

00:10:10.476 --> 00:10:11.876
Beginning in this release, the

00:10:11.876 --> 00:10:13.426
operating system will prioritize

00:10:13.426 --> 00:10:15.036
apple-app-site-association

00:10:15.036 --> 00:10:16.926
downloads based on where a user

00:10:16.926 --> 00:10:18.226
is most likely to browse.

00:10:18.786 --> 00:10:19.946
We'll still download them all

00:10:19.946 --> 00:10:21.406
when an app is installed but at

00:10:21.406 --> 00:10:22.466
different priorities.

00:10:22.826 --> 00:10:24.856
The top-level domains .com,

00:10:24.976 --> 00:10:27.046
.net, and .org, are high

00:10:27.046 --> 00:10:28.476
priority domains because they

00:10:28.476 --> 00:10:29.746
account for so much internet

00:10:29.746 --> 00:10:30.856
traffic worldwide.

00:10:31.666 --> 00:10:33.676
Country code TLDs also known as

00:10:33.676 --> 00:10:36.056
ccTLDs and internationalized

00:10:36.056 --> 00:10:38.036
TLDs are also prioritized if

00:10:38.036 --> 00:10:39.266
they match the user's current

00:10:39.266 --> 00:10:40.126
locale settings.

00:10:40.586 --> 00:10:42.386
For example, the average user in

00:10:42.386 --> 00:10:43.986
China is more likely to visit a

00:10:43.986 --> 00:10:46.316
domain under a Chinese ccTLD

00:10:46.476 --> 00:10:47.826
than under, for example, an

00:10:47.826 --> 00:10:49.676
Italian or Russian ccTLD.

00:10:52.506 --> 00:10:53.956
So now your server is ready to

00:10:53.956 --> 00:10:55.266
support universal links.

00:10:55.496 --> 00:10:58.776
Let's update your app.

00:10:58.776 --> 00:11:00.246
Open your project in Xcode and

00:11:00.246 --> 00:11:01.416
navigate to your project

00:11:01.416 --> 00:11:01.966
settings.

00:11:02.266 --> 00:11:03.836
Add the Associated Domains

00:11:03.836 --> 00:11:04.486
capability.

00:11:05.106 --> 00:11:06.516
This adds a new entitlement to

00:11:06.516 --> 00:11:07.506
the selected target.

00:11:08.106 --> 00:11:09.406
You can modify this entitlement

00:11:09.406 --> 00:11:10.396
directly from this view.

00:11:13.336 --> 00:11:15.106
The value of this entitlement is

00:11:15.106 --> 00:11:16.726
an array of strings of the form

00:11:16.796 --> 00:11:18.856
service type: domain name.

00:11:18.856 --> 00:11:20.936
For universal links, the service

00:11:20.936 --> 00:11:22.626
type is applinks like it was in

00:11:22.626 --> 00:11:24.326
your apple-app-site-association

00:11:24.326 --> 00:11:24.556
file.

00:11:25.326 --> 00:11:26.586
The order of values in this

00:11:26.586 --> 00:11:28.106
array is ignored by the system.

00:11:29.006 --> 00:11:30.586
Here, we declare that your app

00:11:30.586 --> 00:11:31.976
supports universal links for

00:11:31.976 --> 00:11:34.176
www.example.com.

00:11:34.956 --> 00:11:36.336
When your app is then installed,

00:11:36.466 --> 00:11:37.686
the operating system will visit

00:11:37.686 --> 00:11:40.836
www.example.com looking for the

00:11:40.836 --> 00:11:42.616
apple-app-site-association file

00:11:42.616 --> 00:11:43.536
we just discussed.

00:11:44.066 --> 00:11:45.536
If it's present and it contains

00:11:45.536 --> 00:11:47.066
information for these apps, app

00:11:47.066 --> 00:11:48.796
identifier, then the association

00:11:48.796 --> 00:11:49.476
is confirmed.

00:11:50.376 --> 00:11:51.886
It's also possible to indicate

00:11:51.886 --> 00:11:53.426
wildcard support for subdomains

00:11:53.426 --> 00:11:55.026
of a given domain as shown here.

00:11:55.726 --> 00:11:56.916
In this case, the operating

00:11:56.916 --> 00:11:58.696
system will visit example.com.

00:11:58.996 --> 00:12:00.846
No www at this time.

00:12:02.036 --> 00:12:03.256
Exact domains have higher

00:12:03.256 --> 00:12:04.756
priority during universal links

00:12:04.756 --> 00:12:06.436
look up than wildcard domains.

00:12:07.126 --> 00:12:08.516
In this case, that means when

00:12:08.516 --> 00:12:09.966
the system opens a URL at

00:12:09.966 --> 00:12:13.226
www.example.com, it will try to

00:12:13.226 --> 00:12:14.696
match patterns from that domain

00:12:14.966 --> 00:12:16.266
before the ones it got from the

00:12:16.266 --> 00:12:17.016
parent domain.

00:12:17.736 --> 00:12:19.076
Patterns from the parent domain

00:12:19.076 --> 00:12:20.606
will only be matched if no match

00:12:20.606 --> 00:12:22.036
was found at the fully qualified

00:12:22.036 --> 00:12:22.596
subdomain.

00:12:23.956 --> 00:12:25.806
Finally, here's an example of an

00:12:25.806 --> 00:12:27.016
internationalized domain.

00:12:27.716 --> 00:12:29.426
Since URLs are always ASCII,

00:12:29.736 --> 00:12:30.966
your internationalized domain

00:12:30.966 --> 00:12:32.416
names will need to be encoded

00:12:32.416 --> 00:12:33.266
using Punycode.

00:12:33.356 --> 00:12:34.836
For more information on

00:12:34.836 --> 00:12:37.696
Punycode, see RFC 3492.

00:12:40.126 --> 00:12:41.276
Now that your app declares

00:12:41.276 --> 00:12:42.646
support for certain domains,

00:12:42.766 --> 00:12:44.066
you'll need to actually parse

00:12:44.066 --> 00:12:45.346
the URLs as they come in.

00:12:46.236 --> 00:12:47.496
Universal links are based on

00:12:47.496 --> 00:12:49.126
foundations and as user activity

00:12:49.126 --> 00:12:50.696
class and are handled by your

00:12:50.696 --> 00:12:51.406
app delegate.

00:12:52.356 --> 00:12:53.346
You'll need a handler for

00:12:53.346 --> 00:12:54.716
incoming user activities.

00:12:55.286 --> 00:12:56.706
If you already support hand-off

00:12:56.706 --> 00:12:58.266
or other similar technologies,

00:12:58.516 --> 00:12:59.876
you may already have this method

00:12:59.876 --> 00:13:00.786
in your app delegate.

00:13:01.416 --> 00:13:02.646
This method returns a bool.

00:13:02.896 --> 00:13:03.996
Return true if you could

00:13:03.996 --> 00:13:05.226
successfully open the user

00:13:05.226 --> 00:13:06.576
activity and false if you

00:13:06.576 --> 00:13:06.996
couldn't.

00:13:07.786 --> 00:13:09.846
If you're using UI scene, then a

00:13:09.846 --> 00:13:11.076
similar delegate method is

00:13:11.076 --> 00:13:11.506
available.

00:13:12.126 --> 00:13:13.526
If you're using AppKit, the

00:13:13.526 --> 00:13:14.656
signature of this method is

00:13:14.656 --> 00:13:15.706
almost identical.

00:13:15.706 --> 00:13:18.086
Just replace UI with NS like you

00:13:18.086 --> 00:13:18.586
see here.

00:13:19.396 --> 00:13:20.976
We'll use UI application for the

00:13:20.976 --> 00:13:22.076
remainder of this session.

00:13:23.296 --> 00:13:24.626
Next, we'll check that the

00:13:24.626 --> 00:13:25.786
activityType is

00:13:25.786 --> 00:13:27.896
NSUserActivityTypeBrowsingWeb.

00:13:28.546 --> 00:13:30.046
This helps distinguish universal

00:13:30.046 --> 00:13:31.466
links from other incoming user

00:13:31.466 --> 00:13:32.616
activities that your app may

00:13:32.616 --> 00:13:33.106
support.

00:13:33.916 --> 00:13:35.346
Even if you don't support other

00:13:35.346 --> 00:13:37.206
activity types now, it's a good

00:13:37.206 --> 00:13:38.766
idea to check the activity type

00:13:38.996 --> 00:13:40.266
in case you need to support

00:13:40.266 --> 00:13:41.376
other types in the future.

00:13:41.976 --> 00:13:43.846
The activity type looks good.

00:13:44.186 --> 00:13:45.866
Let's grab the webpage URL from

00:13:45.866 --> 00:13:47.126
the user activity object.

00:13:47.526 --> 00:13:48.726
This will never be nil for a

00:13:48.726 --> 00:13:51.486
universal link and let's build a

00:13:51.486 --> 00:13:52.966
URL components draft from the

00:13:52.966 --> 00:13:53.306
URL.

00:13:53.996 --> 00:13:55.576
You should always parse URLs

00:13:55.576 --> 00:13:56.856
using URL components.

00:13:57.296 --> 00:13:58.716
Using regular expressions or

00:13:58.716 --> 00:14:00.366
manually parsing a URL string

00:14:00.366 --> 00:14:01.566
may leave you vulnerable to

00:14:01.566 --> 00:14:02.546
security issues.

00:14:03.576 --> 00:14:04.896
We're past the guard statement

00:14:04.996 --> 00:14:06.356
so let's examine the contents of

00:14:06.356 --> 00:14:06.956
the URL.

00:14:07.696 --> 00:14:09.116
In this case I'm interested in

00:14:09.116 --> 00:14:10.546
the query items of the URL but

00:14:10.546 --> 00:14:11.936
you can use any of the URL's

00:14:11.936 --> 00:14:13.536
components to root activities at

00:14:13.536 --> 00:14:14.056
this point.

00:14:14.816 --> 00:14:16.186
If you support universal links

00:14:16.186 --> 00:14:17.586
from multiple domains, don't

00:14:17.586 --> 00:14:18.556
forget to check the host

00:14:18.556 --> 00:14:19.056
component.

00:14:21.376 --> 00:14:22.836
Our code is complete and our

00:14:22.836 --> 00:14:24.176
server is configured but there

00:14:24.176 --> 00:14:25.606
are few differences when using

00:14:25.606 --> 00:14:27.116
universal links on macOS.

00:14:28.006 --> 00:14:29.216
Universal links open in the

00:14:29.216 --> 00:14:30.896
browser by default on macOS.

00:14:31.406 --> 00:14:32.876
When they do, Safari will give

00:14:32.876 --> 00:14:34.376
the user the option to open them

00:14:34.376 --> 00:14:35.026
in your app.

00:14:35.146 --> 00:14:37.356
If the user selects this option,

00:14:37.356 --> 00:14:38.856
your links will continue to open

00:14:38.856 --> 00:14:39.966
in your app afterward.

00:14:41.186 --> 00:14:43.106
Unlike iOS, macOS supports

00:14:43.106 --> 00:14:44.646
launching apps present on remote

00:14:44.646 --> 00:14:45.246
volumes.

00:14:45.566 --> 00:14:47.256
Apps on remote volumes cannot

00:14:47.256 --> 00:14:48.456
use universal links.

00:14:48.616 --> 00:14:50.036
They must be installed locally.

00:14:50.266 --> 00:14:52.596
If the user downloads your app

00:14:52.596 --> 00:14:54.086
from the App Store, the system

00:14:54.086 --> 00:14:55.106
will begin downloading

00:14:55.106 --> 00:14:57.046
apple-app-site-association files

00:14:57.046 --> 00:14:58.106
as soon as soon as your app is

00:14:58.106 --> 00:14:59.216
installed or updated.

00:15:00.036 --> 00:15:01.026
If your app is developer

00:15:01.026 --> 00:15:02.616
ID-signed, the system will not

00:15:02.616 --> 00:15:03.946
begin these downloads until the

00:15:03.946 --> 00:15:05.266
user has launched your app at

00:15:05.266 --> 00:15:06.006
least once.

00:15:07.176 --> 00:15:08.416
Because a universal link is

00:15:08.416 --> 00:15:10.176
backed by a secure association

00:15:10.176 --> 00:15:12.236
with an app identifier, only one

00:15:12.236 --> 00:15:13.726
copy of a given app will be able

00:15:13.726 --> 00:15:15.166
to handle universal links on a

00:15:15.166 --> 00:15:15.536
Mac.

00:15:16.176 --> 00:15:17.676
Typically, this will be the copy

00:15:17.676 --> 00:15:19.066
of the app present in slash

00:15:19.066 --> 00:15:19.826
applications.

00:15:20.306 --> 00:15:21.586
Keep that in mind anytime you

00:15:21.586 --> 00:15:22.816
need to test changes to your

00:15:22.816 --> 00:15:24.386
associated domains entitlement.

00:15:25.226 --> 00:15:26.606
If you are on the other end of

00:15:26.606 --> 00:15:28.176
an operation and want to open a

00:15:28.176 --> 00:15:30.426
universal link, UIApplication

00:15:30.556 --> 00:15:31.916
and NSWorkspace and launch

00:15:31.916 --> 00:15:33.556
services will all automatically

00:15:33.556 --> 00:15:34.756
open them when available.

00:15:35.816 --> 00:15:37.236
If you want to require opening a

00:15:37.236 --> 00:15:38.816
universal link in an app rather

00:15:38.816 --> 00:15:40.316
than the default browser, you

00:15:40.316 --> 00:15:42.066
can use UIApplication or

00:15:42.206 --> 00:15:44.276
NSWorkspace API as appropriate.

00:15:44.796 --> 00:15:46.356
If these open operations fail,

00:15:46.476 --> 00:15:47.806
it means that a universal link

00:15:47.806 --> 00:15:48.866
was not available for the

00:15:48.866 --> 00:15:49.726
supplied URL.

00:15:50.786 --> 00:15:51.846
If you're developing a web

00:15:51.846 --> 00:15:53.646
browser from macOS, additional

00:15:53.646 --> 00:15:55.246
API will be made available to

00:15:55.246 --> 00:15:56.456
help you support universal

00:15:56.456 --> 00:15:56.866
links.

00:15:58.676 --> 00:16:00.346
To help you make the best apps

00:16:00.346 --> 00:16:01.546
and to provide the best user

00:16:01.546 --> 00:16:03.186
experience, I've got a few final

00:16:03.186 --> 00:16:04.156
tips to share with you.

00:16:05.836 --> 00:16:07.896
The first is to fail gracefully.

00:16:08.546 --> 00:16:09.906
It's possible you'll be provided

00:16:09.906 --> 00:16:11.246
with URLs that represent

00:16:11.246 --> 00:16:12.746
outdated, invalid, or

00:16:12.746 --> 00:16:13.986
nonexistent content.

00:16:14.666 --> 00:16:15.566
If you determine that a

00:16:15.566 --> 00:16:16.986
universal link can't be opened

00:16:16.986 --> 00:16:18.716
by your app, you can often open

00:16:18.716 --> 00:16:19.966
it in Safari View Controller.

00:16:20.396 --> 00:16:21.776
This keeps the user engaged in

00:16:21.776 --> 00:16:22.156
your app.

00:16:22.836 --> 00:16:24.176
If Safari View Controller is not

00:16:24.176 --> 00:16:26.006
an option, consider opening the

00:16:26.006 --> 00:16:28.126
URL in Safari, or at a minimum,

00:16:28.336 --> 00:16:29.696
prompting with details about the

00:16:29.696 --> 00:16:30.146
issue.

00:16:30.606 --> 00:16:31.946
Avoid sending the user to a

00:16:31.946 --> 00:16:32.686
blank screen.

00:16:33.716 --> 00:16:35.316
If the user is visiting your

00:16:35.316 --> 00:16:37.016
website, use the Smart App

00:16:37.016 --> 00:16:38.506
Banner to provide a link either

00:16:38.506 --> 00:16:39.806
to the App Store or to your

00:16:39.806 --> 00:16:40.346
content.

00:16:40.816 --> 00:16:42.116
The Smart App Banner integrates

00:16:42.116 --> 00:16:43.616
seamlessly with Safari and looks

00:16:43.616 --> 00:16:44.016
great.

00:16:44.436 --> 00:16:45.666
And there's no JavaScript or

00:16:45.666 --> 00:16:47.146
custom URL schemes required to

00:16:47.146 --> 00:16:47.676
support it.

00:16:48.756 --> 00:16:50.306
Finally, if you have feedback on

00:16:50.306 --> 00:16:51.426
how we can improve universal

00:16:51.426 --> 00:16:53.016
links, I would love to hear it.

00:16:53.366 --> 00:16:54.396
Please use the feedback

00:16:54.396 --> 00:16:55.786
assistant and let us know what

00:16:55.786 --> 00:16:56.966
we can do to make universal

00:16:56.966 --> 00:16:57.836
links even better.

00:16:58.466 --> 00:16:59.176
Thank you.