WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:06.516 --> 00:00:10.866
[ Applause ]

00:00:11.366 --> 00:00:11.796
>> Good morning.

00:00:12.516 --> 00:00:14.656
[ Applause ]

00:00:15.156 --> 00:00:16.056
My name is Josh.

00:00:16.175 --> 00:00:17.576
And I'm part of the Technology

00:00:17.576 --> 00:00:19.136
Evangelism team at Apple.

00:00:20.436 --> 00:00:22.246
Our team has the incredible

00:00:22.246 --> 00:00:23.396
honor of working with

00:00:23.396 --> 00:00:25.856
developers, like you, from all

00:00:25.856 --> 00:00:26.476
around the world.

00:00:27.596 --> 00:00:29.566
And our goal is to help you

00:00:29.686 --> 00:00:31.856
create truly great apps.

00:00:32.735 --> 00:00:34.396
And in these conversations with

00:00:34.396 --> 00:00:36.116
you, we learn so much.

00:00:36.996 --> 00:00:38.166
We gain an understanding of the

00:00:38.166 --> 00:00:39.876
processes you take; the

00:00:39.876 --> 00:00:40.966
challenges, goals, and

00:00:40.966 --> 00:00:42.566
aspirations that you have.

00:00:43.516 --> 00:00:44.736
We learn about the tricks and

00:00:44.736 --> 00:00:46.716
tools that help you out, and

00:00:46.716 --> 00:00:47.726
then those that hinder.

00:00:49.006 --> 00:00:50.546
And although every story that we

00:00:50.546 --> 00:00:52.286
hear is a little different,

00:00:53.376 --> 00:00:54.566
there's an incredible number of

00:00:54.566 --> 00:00:56.466
common threads no matter which

00:00:56.466 --> 00:00:57.586
part of the world the story

00:00:57.586 --> 00:00:58.116
comes from.

00:00:59.536 --> 00:01:01.366
Now, when you think about craft

00:01:01.946 --> 00:01:03.106
you probably first think about

00:01:03.156 --> 00:01:03.766
design.

00:01:04.495 --> 00:01:06.446
But as developers and engineers,

00:01:06.686 --> 00:01:07.566
we craft, too.

00:01:08.616 --> 00:01:10.606
After all, craft is defined as

00:01:10.606 --> 00:01:12.916
skill in planning, making, and

00:01:12.916 --> 00:01:13.556
executing.

00:01:14.126 --> 00:01:15.466
It's to create or produce

00:01:15.516 --> 00:01:18.326
something with care, skill, or

00:01:18.326 --> 00:01:18.986
ingenuity.

00:01:20.916 --> 00:01:22.366
Codes written by hand.

00:01:23.476 --> 00:01:25.206
It involves incredible skill.

00:01:25.596 --> 00:01:27.236
And there's an ingenuity to the

00:01:27.236 --> 00:01:28.326
technique that we take.

00:01:28.556 --> 00:01:30.036
The choices that we make when

00:01:30.036 --> 00:01:30.716
building an app.

00:01:31.606 --> 00:01:33.226
And I want to talk to you today

00:01:33.466 --> 00:01:35.916
about that craft and care, to

00:01:35.916 --> 00:01:38.046
bring care into your code, into

00:01:38.046 --> 00:01:40.416
your storyboards and into your

00:01:40.416 --> 00:01:40.906
products.

00:01:41.596 --> 00:01:43.186
This might seem easy at first.

00:01:43.346 --> 00:01:44.566
But with all of the demands on

00:01:44.566 --> 00:01:46.276
us, as developers today, this

00:01:46.276 --> 00:01:48.226
can sometimes be quite hard.

00:01:48.996 --> 00:01:51.226
Skill with a given craft is

00:01:51.226 --> 00:01:52.236
something that develops over

00:01:52.236 --> 00:01:52.696
time.

00:01:53.066 --> 00:01:55.106
It takes dedication, patience,

00:01:55.106 --> 00:01:55.876
and focus.

00:01:56.466 --> 00:01:58.206
It's about learning to enjoy the

00:01:58.246 --> 00:02:00.356
process of getting there almost

00:02:00.356 --> 00:02:01.566
as much as the destination

00:02:01.566 --> 00:02:02.116
itself.

00:02:02.666 --> 00:02:05.166
Now, part of this process is

00:02:05.166 --> 00:02:06.816
also about converting those

00:02:06.816 --> 00:02:08.376
things that might take intense

00:02:08.485 --> 00:02:10.126
and conscious focus at first,

00:02:10.526 --> 00:02:11.166
into habits.

00:02:13.036 --> 00:02:14.766
Similar to driving, with

00:02:14.766 --> 00:02:16.566
experience and practice, the

00:02:16.566 --> 00:02:17.706
number of things that we have to

00:02:17.706 --> 00:02:19.536
consciously focus on while we're

00:02:19.536 --> 00:02:21.476
driving reduces over time

00:02:21.706 --> 00:02:23.106
because we convert things to

00:02:23.106 --> 00:02:24.856
natural, automatic habits.

00:02:25.266 --> 00:02:26.726
And we can do the same thing

00:02:26.946 --> 00:02:28.026
with app development.

00:02:28.696 --> 00:02:30.456
And to do this, it means

00:02:30.506 --> 00:02:32.236
developing great habits, as

00:02:32.236 --> 00:02:33.356
opposed to poor ones.

00:02:34.766 --> 00:02:36.536
When it comes to building an

00:02:36.536 --> 00:02:38.836
app, there's a lot of details to

00:02:38.836 --> 00:02:40.396
pay attention to and as a

00:02:40.396 --> 00:02:41.996
developer, so many of these

00:02:41.996 --> 00:02:43.526
details that we have to care

00:02:43.526 --> 00:02:45.516
about, well, they're rarely

00:02:45.516 --> 00:02:46.916
actually directly seen by the

00:02:46.916 --> 00:02:48.726
customers who use our apps.

00:02:48.886 --> 00:02:50.636
And yet, they can be felt in

00:02:50.746 --> 00:02:52.856
such significant ways, impacting

00:02:52.856 --> 00:02:55.166
performance, reliability, and

00:02:55.166 --> 00:02:55.756
stability.

00:02:57.026 --> 00:02:58.026
And so, there's a lot of

00:02:58.026 --> 00:02:58.556
details.

00:02:58.696 --> 00:03:00.366
And there's just not enough time

00:03:00.366 --> 00:03:01.606
to focus on them all.

00:03:02.496 --> 00:03:03.886
So, I'd like to spend some time

00:03:03.886 --> 00:03:05.886
today reviewing some practices

00:03:05.886 --> 00:03:07.376
that can hopefully inform and

00:03:07.376 --> 00:03:09.366
enrich our work as developers,

00:03:09.766 --> 00:03:11.316
things for us to work towards

00:03:11.356 --> 00:03:12.896
integrating into our regular

00:03:12.896 --> 00:03:14.566
workflows, such that they just

00:03:14.566 --> 00:03:16.576
become habit and automatic.

00:03:17.346 --> 00:03:18.666
This will save us frustration,

00:03:19.326 --> 00:03:21.056
hassle, and waste of time down

00:03:21.056 --> 00:03:21.446
the road.

00:03:22.066 --> 00:03:24.026
Now, for many of you, I'm sure

00:03:24.026 --> 00:03:25.286
you're already doing many of

00:03:25.286 --> 00:03:26.066
these things.

00:03:26.296 --> 00:03:27.716
But perhaps there are some that

00:03:27.716 --> 00:03:29.306
haven't yet fully become habits

00:03:29.306 --> 00:03:29.716
for you.

00:03:30.076 --> 00:03:31.826
And maybe you'll be inspired to

00:03:31.826 --> 00:03:32.686
practice them more.

00:03:33.796 --> 00:03:35.796
So, first, let's get organized.

00:03:36.976 --> 00:03:38.206
In addition to being an app

00:03:38.246 --> 00:03:39.636
developer, I'm also a

00:03:39.636 --> 00:03:40.186
woodworker.

00:03:40.636 --> 00:03:41.966
I find that it's this great

00:03:41.966 --> 00:03:43.826
escape from the modern-day world

00:03:43.886 --> 00:03:44.256
for me.

00:03:44.546 --> 00:03:46.526
But one thing that's for certain

00:03:46.826 --> 00:03:48.636
is that beautiful, well-crafted

00:03:48.636 --> 00:03:50.276
furniture, is much easier to

00:03:50.276 --> 00:03:51.986
build in a clean shop.

00:03:52.806 --> 00:03:54.646
So, if your bench is cluttered

00:03:54.826 --> 00:03:56.626
and poorly organized, it's hard

00:03:56.626 --> 00:03:58.046
to find the tools and materials

00:03:58.046 --> 00:03:59.526
that you need as you work along.

00:04:00.136 --> 00:04:01.016
You constantly just have to

00:04:01.016 --> 00:04:02.706
shuffle things around to make

00:04:02.746 --> 00:04:03.696
room for the work that you're

00:04:03.696 --> 00:04:04.426
actually doing.

00:04:04.646 --> 00:04:06.256
And, in short, everything takes

00:04:06.256 --> 00:04:08.086
so much longer than it should,

00:04:08.416 --> 00:04:10.026
and more accidents and mistakes

00:04:10.026 --> 00:04:11.076
happen along the way.

00:04:11.616 --> 00:04:13.706
Our team sees a lot of Xcode

00:04:13.706 --> 00:04:14.666
projects each year.

00:04:14.826 --> 00:04:15.706
And there's definitely some

00:04:15.706 --> 00:04:17.176
practices that can help you make

00:04:17.176 --> 00:04:18.706
sure that your work space is

00:04:18.706 --> 00:04:20.846
clean, tidy, and in a great

00:04:20.875 --> 00:04:22.356
position to allow you to do your

00:04:22.426 --> 00:04:23.676
absolute best work.

00:04:24.206 --> 00:04:27.086
Xcode projects benefit from

00:04:27.086 --> 00:04:29.216
structure and organization using

00:04:29.216 --> 00:04:29.616
groups.

00:04:30.496 --> 00:04:31.996
This makes it so much easier at

00:04:31.996 --> 00:04:33.676
a glance to see the files

00:04:33.676 --> 00:04:35.126
involved in each section of your

00:04:35.126 --> 00:04:35.866
application.

00:04:36.116 --> 00:04:37.626
It can help you hone in quickly

00:04:37.676 --> 00:04:39.016
when you're trying to fix a bug.

00:04:40.146 --> 00:04:42.206
Groups are best used to organize

00:04:42.206 --> 00:04:43.996
your project functionally in a

00:04:43.996 --> 00:04:45.666
way that logically follows how

00:04:45.666 --> 00:04:47.146
someone might interact with your

00:04:47.146 --> 00:04:47.856
application.

00:04:48.496 --> 00:04:49.756
We often see projects that are

00:04:49.936 --> 00:04:52.046
organized by file type or maybe

00:04:52.046 --> 00:04:53.556
just don't use groups at all.

00:04:53.556 --> 00:04:55.176
And that doesn't really help

00:04:55.176 --> 00:04:56.426
someone out later when they're

00:04:56.426 --> 00:04:57.876
quickly trying to understand how

00:04:57.876 --> 00:04:59.476
all of these source files relate

00:04:59.476 --> 00:05:00.026
to each other.

00:05:01.226 --> 00:05:03.396
Furthermore, it can really help

00:05:03.396 --> 00:05:04.646
to make sure that your Xcode

00:05:04.646 --> 00:05:06.316
project structure and your file

00:05:06.316 --> 00:05:07.956
system structure actually match

00:05:07.956 --> 00:05:08.406
each other.

00:05:09.286 --> 00:05:11.386
Since Xcode 9, when you create a

00:05:11.386 --> 00:05:12.786
new group inside of your

00:05:12.786 --> 00:05:14.406
project, it actually also

00:05:14.406 --> 00:05:15.866
creates a folder on disk to

00:05:15.866 --> 00:05:17.276
house the files that you place

00:05:17.276 --> 00:05:18.366
inside of that group.

00:05:19.406 --> 00:05:20.626
This means when you're looking

00:05:20.626 --> 00:05:21.686
at your project in source

00:05:21.686 --> 00:05:23.546
control, or just browsing the

00:05:23.546 --> 00:05:25.356
file system, the structure is

00:05:25.356 --> 00:05:26.616
mirrored, and this will really

00:05:26.616 --> 00:05:28.036
help you reduce confusion and

00:05:28.036 --> 00:05:29.876
missteps later on.

00:05:30.756 --> 00:05:32.886
Storyboards are an incredibly

00:05:32.886 --> 00:05:34.536
powerful tool for building out

00:05:34.536 --> 00:05:35.886
user interfaces in a visual

00:05:35.886 --> 00:05:36.286
manner.

00:05:37.106 --> 00:05:38.676
But we do come across a lot of

00:05:38.676 --> 00:05:39.966
projects that build out their

00:05:39.966 --> 00:05:41.586
entire UI in a single

00:05:41.586 --> 00:05:42.216
storyboard.

00:05:42.586 --> 00:05:44.126
And there's no reason to do this

00:05:44.296 --> 00:05:45.656
thanks to storyboard references.

00:05:46.716 --> 00:05:48.176
Use a different storyboard file

00:05:48.176 --> 00:05:49.606
for each major section of your

00:05:49.606 --> 00:05:50.976
application and then use

00:05:50.976 --> 00:05:52.556
references to tie them together.

00:05:52.866 --> 00:05:54.196
You'll find it makes it so much

00:05:54.196 --> 00:05:55.896
easier to isolate individual

00:05:55.896 --> 00:05:56.376
changes.

00:05:56.636 --> 00:05:58.096
And it makes it much simpler

00:05:58.176 --> 00:05:59.506
when working with larger teams,

00:05:59.706 --> 00:06:00.916
as you can avoid the risks of

00:06:00.916 --> 00:06:02.826
those nasty merge conflicts and

00:06:02.826 --> 00:06:04.446
make resolving those that occur

00:06:04.446 --> 00:06:05.236
way easier.

00:06:06.556 --> 00:06:07.576
Just like you wouldn't put your

00:06:07.576 --> 00:06:09.346
entire source code in a single

00:06:09.346 --> 00:06:11.456
file, don't put your whole UI in

00:06:11.456 --> 00:06:13.336
a single storyboard either.

00:06:15.756 --> 00:06:18.016
Keeping your project file modern

00:06:18.416 --> 00:06:19.926
is a critical way to make sure

00:06:19.926 --> 00:06:22.276
that Xcode can help you out and

00:06:22.276 --> 00:06:23.556
avoids the accumulation of

00:06:23.556 --> 00:06:24.026
issues.

00:06:24.606 --> 00:06:25.956
This is one of those tasks that

00:06:25.956 --> 00:06:27.976
can really be a non-issue if you

00:06:27.976 --> 00:06:29.216
take care of it regularly.

00:06:29.736 --> 00:06:31.886
But it can really cause problems

00:06:31.886 --> 00:06:33.406
down the road if you don't keep

00:06:33.406 --> 00:06:33.876
up with it.

00:06:35.036 --> 00:06:36.766
First, when you're updating to a

00:06:36.766 --> 00:06:38.546
new version of Xcode, you'll be

00:06:38.546 --> 00:06:39.656
offered the opportunity

00:06:39.656 --> 00:06:41.476
sometimes to have Xcode update

00:06:41.556 --> 00:06:43.376
the project settings and update

00:06:43.376 --> 00:06:45.016
your project file to the latest

00:06:45.016 --> 00:06:45.446
format.

00:06:45.926 --> 00:06:46.816
So, unless you have some

00:06:46.816 --> 00:06:48.496
critical reason not to do this,

00:06:48.826 --> 00:06:49.946
we'd recommend that you do it

00:06:49.946 --> 00:06:51.866
whenever prompted, or whenever a

00:06:51.866 --> 00:06:53.316
warning appears in the issue

00:06:53.316 --> 00:06:53.886
navigator.

00:06:55.246 --> 00:06:56.766
Second, make sure that your

00:06:56.766 --> 00:06:58.766
project is using the new Xcode

00:06:58.766 --> 00:07:00.046
build system first released in

00:07:00.046 --> 00:07:01.026
2017.

00:07:02.226 --> 00:07:03.206
It offers significant

00:07:03.206 --> 00:07:04.706
improvements in performance,

00:07:05.596 --> 00:07:07.086
dependency management, and it's

00:07:07.136 --> 00:07:08.556
absolutely critical to your

00:07:08.556 --> 00:07:10.096
adoption of Swift packages.

00:07:10.666 --> 00:07:13.026
Now, it's been the default build

00:07:13.026 --> 00:07:14.536
system since Xcode 10.

00:07:14.756 --> 00:07:16.036
And you can verify the build

00:07:16.036 --> 00:07:17.226
system that your project is

00:07:17.226 --> 00:07:18.796
using by looking at the project

00:07:18.796 --> 00:07:20.666
settings found under the file

00:07:20.666 --> 00:07:21.000
menu.

00:07:23.966 --> 00:07:25.266
Us woodworkers, we tend to hold

00:07:25.266 --> 00:07:27.956
onto small scraps, just in case

00:07:27.956 --> 00:07:30.596
we need them someday until that

00:07:30.596 --> 00:07:32.886
scrap bin gets so full that we

00:07:32.886 --> 00:07:34.126
just can't work around it

00:07:34.126 --> 00:07:35.496
anymore and we have to come to

00:07:35.496 --> 00:07:37.306
terms with the fact that these

00:07:37.306 --> 00:07:38.726
tiny pieces of wood that we've

00:07:38.726 --> 00:07:40.186
been holding onto are never

00:07:40.186 --> 00:07:41.336
really going to make it into a

00:07:41.336 --> 00:07:41.846
project.

00:07:42.666 --> 00:07:43.826
As developers, we have this

00:07:43.856 --> 00:07:45.306
tendency to hold on to scraps,

00:07:45.306 --> 00:07:45.626
too.

00:07:46.856 --> 00:07:48.626
But it's a simpler decision for

00:07:49.436 --> 00:07:49.526
us.

00:07:50.526 --> 00:07:51.556
Since you've got your project

00:07:51.556 --> 00:07:53.516
under source control, and you do

00:07:53.516 --> 00:07:54.726
have your project under source

00:07:54.726 --> 00:07:55.326
control, right?

00:07:56.576 --> 00:07:58.306
Get rid of that unneeded and

00:07:58.306 --> 00:07:59.056
unused code.

00:08:00.176 --> 00:08:02.946
Don't just comment it out just

00:08:02.946 --> 00:08:04.106
in case you want to pull it back

00:08:04.106 --> 00:08:04.576
someday.

00:08:04.846 --> 00:08:06.486
If you ever actually need it,

00:08:06.486 --> 00:08:07.586
it's going to be in the history

00:08:07.586 --> 00:08:08.326
for that file.

00:08:08.326 --> 00:08:09.826
And you can still get it back.

00:08:10.296 --> 00:08:14.456
Let go of those scraps.

00:08:14.456 --> 00:08:15.786
Another pile that we really

00:08:15.786 --> 00:08:16.936
don't want to have grow out of

00:08:16.936 --> 00:08:18.516
control are warnings.

00:08:18.786 --> 00:08:20.736
And to that end, establish a

00:08:20.736 --> 00:08:22.686
zero-warning practice for

00:08:22.686 --> 00:08:24.396
yourself and for your team.

00:08:25.236 --> 00:08:26.536
Code should never be checked in

00:08:26.536 --> 00:08:27.536
that contains warnings.

00:08:28.086 --> 00:08:29.336
And you should treat warnings as

00:08:29.376 --> 00:08:30.626
errors while you're writing your

00:08:30.626 --> 00:08:30.976
code.

00:08:31.166 --> 00:08:32.966
Just fix them as you go along.

00:08:34.246 --> 00:08:35.716
We've run into projects with

00:08:36.186 --> 00:08:37.525
thousands of warnings.

00:08:37.756 --> 00:08:39.226
And in most cases, they've just

00:08:39.226 --> 00:08:41.116
accumulated for so long that the

00:08:41.116 --> 00:08:43.096
developer gave up and just never

00:08:43.096 --> 00:08:44.336
had time to go fix them all.

00:08:45.226 --> 00:08:45.936
Furthermore, if you're

00:08:45.936 --> 00:08:47.406
maintaining a project like this,

00:08:48.246 --> 00:08:49.046
you're not going to see new

00:08:49.046 --> 00:08:51.046
warnings when they show up.

00:08:53.036 --> 00:08:54.706
So, this is getting organized.

00:08:54.886 --> 00:08:56.166
Keeping a clean workspace and

00:08:56.166 --> 00:08:57.956
project, it's critical to the

00:08:57.956 --> 00:09:00.376
long-term health and success of

00:09:00.376 --> 00:09:00.716
your app.

00:09:01.546 --> 00:09:03.486
So, organize your project with

00:09:03.526 --> 00:09:04.016
groups.

00:09:04.856 --> 00:09:06.416
And have those groups mirror the

00:09:06.416 --> 00:09:07.416
file system structure.

00:09:08.176 --> 00:09:09.296
Break apart those large

00:09:09.296 --> 00:09:10.806
storyboards using references.

00:09:11.516 --> 00:09:13.056
And make sure your project file

00:09:13.126 --> 00:09:14.326
is up to date.

00:09:14.786 --> 00:09:16.386
Clean out that old and abandoned

00:09:16.386 --> 00:09:19.536
code and get to the root problem

00:09:19.536 --> 00:09:20.926
of warnings, and fix them as

00:09:20.926 --> 00:09:21.686
they arise.

00:09:21.976 --> 00:09:23.156
Doing these things will make

00:09:23.156 --> 00:09:24.976
your project more nimble and

00:09:24.976 --> 00:09:27.116
your development workflow way

00:09:27.116 --> 00:09:28.116
better throughout the life of

00:09:28.116 --> 00:09:29.286
your project.

00:09:31.636 --> 00:09:33.736
Speaking of source control, one

00:09:33.736 --> 00:09:34.596
of the things that you should

00:09:34.696 --> 00:09:36.876
always do when you're setting up

00:09:36.926 --> 00:09:38.526
your project, is enable source

00:09:38.526 --> 00:09:38.956
control.

00:09:40.516 --> 00:09:42.206
We do actually come across a lot

00:09:42.206 --> 00:09:43.666
of projects that don't use

00:09:43.666 --> 00:09:45.026
source control, especially those

00:09:45.026 --> 00:09:46.346
with solo developer teams.

00:09:47.806 --> 00:09:48.836
Conveniently, when you're

00:09:48.836 --> 00:09:50.606
setting up a new Xcode project,

00:09:51.356 --> 00:09:52.676
all it takes is to ensure that a

00:09:52.676 --> 00:09:55.076
check box is checked and your

00:09:55.076 --> 00:09:56.196
project will be under source

00:09:56.196 --> 00:09:57.126
control using Git.

00:09:58.516 --> 00:09:59.866
Now, you can always go back and

00:09:59.866 --> 00:10:00.776
see what changes you've made in

00:10:00.776 --> 00:10:00.976
the past,

00:10:02.146 --> 00:10:03.616
what's about to change, when you

00:10:03.616 --> 00:10:04.736
commit your current set of

00:10:04.736 --> 00:10:05.236
changes.

00:10:05.416 --> 00:10:06.996
And more easily catch any sort

00:10:06.996 --> 00:10:07.626
of errors.

00:10:08.976 --> 00:10:10.346
So, now that you've got Git

00:10:10.346 --> 00:10:12.086
enabled, there's a few things

00:10:12.146 --> 00:10:13.526
that you should keep in mind in

00:10:13.526 --> 00:10:15.006
order to make it more helpful

00:10:15.266 --> 00:10:15.946
and effective.

00:10:16.576 --> 00:10:19.936
First, keep your commit small.

00:10:20.236 --> 00:10:21.206
Check your code into your

00:10:21.206 --> 00:10:22.536
working branch regularly in

00:10:22.536 --> 00:10:23.936
small increments.

00:10:24.196 --> 00:10:25.356
And keep those changes as

00:10:25.356 --> 00:10:27.346
localized and self-contained as

00:10:27.376 --> 00:10:27.886
possible.

00:10:29.146 --> 00:10:30.176
This will give you a path to

00:10:30.176 --> 00:10:32.686
look back upon when later on you

00:10:32.686 --> 00:10:33.976
need clues or you're trying to

00:10:33.976 --> 00:10:34.916
sort out a regression.

00:10:35.676 --> 00:10:37.106
And, meanwhile, it's going to

00:10:37.106 --> 00:10:38.626
reduce your odds of introducing

00:10:38.626 --> 00:10:39.846
a regression because you're

00:10:39.846 --> 00:10:41.346
making those smaller changes.

00:10:42.946 --> 00:10:44.756
Second, write useful commit

00:10:44.756 --> 00:10:46.596
messages because there comes a

00:10:46.596 --> 00:10:48.616
day when we all ask the question

00:10:48.616 --> 00:10:49.836
that we wish we could answer,

00:10:50.166 --> 00:10:51.616
what on earth was I thinking?

00:10:52.906 --> 00:10:54.186
Your commit messages are your

00:10:54.186 --> 00:10:56.596
notes to future self when you're

00:10:56.596 --> 00:10:58.206
trying to recall under what

00:10:58.206 --> 00:10:59.906
circumstances some code changed

00:11:00.236 --> 00:11:01.000
and the reasons why.

00:11:04.726 --> 00:11:06.616
Run your source control, like

00:11:06.616 --> 00:11:07.936
you would for a large team.

00:11:07.976 --> 00:11:09.306
Even if you were a solo

00:11:09.306 --> 00:11:09.876
developer.

00:11:09.876 --> 00:11:11.796
It means maybe branching for

00:11:11.796 --> 00:11:13.116
bugs and new features.

00:11:13.366 --> 00:11:14.876
And then once you wrap those up,

00:11:14.876 --> 00:11:17.186
squash them together back into

00:11:17.186 --> 00:11:19.216
the main or dev batch, and use a

00:11:19.216 --> 00:11:20.556
clean and helpful commit

00:11:20.586 --> 00:11:21.086
message.

00:11:21.726 --> 00:11:23.166
Now, there are several options

00:11:23.166 --> 00:11:24.316
and patterns that you can follow

00:11:24.316 --> 00:11:25.576
for your source control.

00:11:25.866 --> 00:11:27.656
We recommend checking them out

00:11:27.656 --> 00:11:28.756
and finding the one that works

00:11:28.756 --> 00:11:30.296
really well for you and just

00:11:30.346 --> 00:11:31.556
integrating that into your

00:11:31.556 --> 00:11:32.606
developer workflow.

00:11:33.186 --> 00:11:35.136
So, that's tracking.

00:11:35.786 --> 00:11:37.326
Source control is absolutely

00:11:37.326 --> 00:11:39.686
critical to a successful, modern

00:11:39.786 --> 00:11:41.016
app development workflow.

00:11:41.266 --> 00:11:42.416
So, adopt it as part of your

00:11:42.416 --> 00:11:44.216
project and embrace it as part

00:11:44.216 --> 00:11:45.346
of your regular practice.

00:11:45.896 --> 00:11:47.966
Keep those commits small and

00:11:47.966 --> 00:11:49.476
write useful commit messages.

00:11:50.276 --> 00:11:52.376
And finally, utilize branches to

00:11:52.376 --> 00:11:53.946
help isolate and manage those

00:11:53.946 --> 00:11:56.376
changes, bug fixes, and feature

00:11:57.916 --> 00:11:58.000
work.

00:12:00.276 --> 00:12:02.126
Two of the greatest contributors

00:12:02.126 --> 00:12:04.136
to clarity and maintainability,

00:12:04.196 --> 00:12:06.046
in my opinion, are code comments

00:12:06.146 --> 00:12:07.176
and documentation.

00:12:08.226 --> 00:12:09.316
They're a trail of helpful

00:12:09.316 --> 00:12:10.846
breadcrumbs for your teammates

00:12:10.966 --> 00:12:11.906
or your future self.

00:12:13.136 --> 00:12:14.656
Some might say, "I don't need

00:12:14.656 --> 00:12:16.186
comments, my code is

00:12:16.186 --> 00:12:17.156
self-documenting."

00:12:18.536 --> 00:12:19.486
I don't buy this at all.

00:12:20.486 --> 00:12:22.546
Well-written code is clear in

00:12:22.546 --> 00:12:23.906
what it's doing algorithmically.

00:12:23.906 --> 00:12:26.196
And it's self-documenting in

00:12:26.196 --> 00:12:27.016
that respect.

00:12:27.606 --> 00:12:29.236
But it doesn't convey why.

00:12:29.686 --> 00:12:31.006
Why was this code written in the

00:12:31.006 --> 00:12:31.776
first place?

00:12:32.366 --> 00:12:34.096
How does this code fit into the

00:12:34.096 --> 00:12:35.316
larger context?

00:12:36.066 --> 00:12:38.056
Nor does it describe the

00:12:38.056 --> 00:12:39.426
rationale behind the approach

00:12:39.426 --> 00:12:41.066
taken when writing it.

00:12:42.376 --> 00:12:44.086
The best developers that I work

00:12:44.166 --> 00:12:46.256
with, that not only write

00:12:46.256 --> 00:12:48.226
incredible, clear, and concise

00:12:48.226 --> 00:12:49.916
code but they take the time to

00:12:49.916 --> 00:12:51.836
sprinkle helpful review comments

00:12:51.836 --> 00:12:53.686
throughout that code, to guide

00:12:53.726 --> 00:12:54.836
the future reader into the

00:12:54.836 --> 00:12:56.356
headspace of the original

00:12:56.356 --> 00:12:56.796
author.

00:12:58.226 --> 00:12:59.876
Junior developers will likely

00:12:59.876 --> 00:13:01.486
benefit from this process, even

00:13:01.486 --> 00:13:03.576
more because you're experience

00:13:03.576 --> 00:13:05.096
at the beginning of a project,

00:13:05.516 --> 00:13:07.436
varies so much from at the end.

00:13:07.676 --> 00:13:08.786
And the decisions that you make

00:13:08.786 --> 00:13:09.986
at the beginning of a project

00:13:10.196 --> 00:13:11.396
might actually be at odds with

00:13:11.426 --> 00:13:12.626
the decisions made at the end.

00:13:13.806 --> 00:13:15.076
So, what makes for a good

00:13:15.076 --> 00:13:15.536
comment?

00:13:16.246 --> 00:13:18.276
Well, a good comment assumes

00:13:18.276 --> 00:13:19.506
that the reader understands the

00:13:19.506 --> 00:13:21.136
programming language being used

00:13:21.776 --> 00:13:22.616
and can walk through the

00:13:22.616 --> 00:13:24.236
sequence and steps being taken

00:13:24.236 --> 00:13:24.916
in the code.

00:13:26.516 --> 00:13:27.866
And instead, it really focuses

00:13:27.866 --> 00:13:29.346
on why that code was written in

00:13:29.346 --> 00:13:30.166
the first place.

00:13:30.436 --> 00:13:32.186
What's the backing for that?

00:13:32.736 --> 00:13:34.326
For example, this is the kind of

00:13:34.326 --> 00:13:36.216
comment that just doesn't really

00:13:36.216 --> 00:13:37.216
add any value.

00:13:37.216 --> 00:13:38.786
And yet, we see it all the time.

00:13:39.186 --> 00:13:40.476
I'm assuming that most of you

00:13:40.476 --> 00:13:41.626
have written some code in Swift

00:13:41.626 --> 00:13:43.346
and could just figure out that

00:13:43.346 --> 00:13:45.116
we're creating a string constant

00:13:45.116 --> 00:13:46.516
here carrying that value.

00:13:47.326 --> 00:13:49.496
But we have no idea what id is,

00:13:49.856 --> 00:13:52.146
what it's used for, or why has

00:13:52.146 --> 00:13:54.256
this been hard coded into the

00:13:54.886 --> 00:13:54.966
app?

00:13:55.246 --> 00:13:56.366
So, with a little bit of

00:13:56.366 --> 00:13:57.956
commenting, we now understand

00:13:57.956 --> 00:13:59.396
why this value exists and where

00:13:59.396 --> 00:14:00.056
it came from.

00:14:00.246 --> 00:14:01.356
But we can take this one step

00:14:01.356 --> 00:14:03.766
further; names for constants and

00:14:03.766 --> 00:14:05.546
variables offer additional

00:14:05.546 --> 00:14:06.716
opportunities for clarity.

00:14:07.256 --> 00:14:08.616
So, if you find yourself using

00:14:08.616 --> 00:14:11.376
single letters like m or i, or

00:14:11.376 --> 00:14:13.816
things like id or idx, it might

00:14:13.816 --> 00:14:15.566
be a great opportunity to choose

00:14:15.566 --> 00:14:16.826
a more descriptive variable

00:14:16.826 --> 00:14:17.146
name.

00:14:18.026 --> 00:14:19.466
Autocomplete in Xcode works like

00:14:19.466 --> 00:14:19.886
a charm.

00:14:20.056 --> 00:14:20.906
So, you don't even really have

00:14:20.906 --> 00:14:21.966
to type anything more.

00:14:22.856 --> 00:14:24.126
And it will always be clear

00:14:24.316 --> 00:14:26.206
throughout your code base what

00:14:26.206 --> 00:14:27.726
particular identifier, in this

00:14:27.726 --> 00:14:29.636
case, is being used at any point

00:14:30.456 --> 00:14:31.986
in time.

00:14:32.786 --> 00:14:34.316
The benefits to documentation

00:14:34.556 --> 00:14:35.976
are very similar to that of

00:14:36.036 --> 00:14:36.626
comments.

00:14:36.866 --> 00:14:38.386
But these scale throughout your

00:14:38.386 --> 00:14:39.896
application and beyond.

00:14:41.276 --> 00:14:42.596
As you write your own apps,

00:14:42.906 --> 00:14:44.556
you're creating layers upon

00:14:44.556 --> 00:14:45.876
layers of abstraction and

00:14:45.876 --> 00:14:47.566
algorithms taking what would be

00:14:47.566 --> 00:14:49.486
large and winding passages of

00:14:49.486 --> 00:14:51.356
code and breaking them down into

00:14:51.356 --> 00:14:53.646
tidy, testable, reusable

00:14:53.646 --> 00:14:54.156
functions.

00:14:55.296 --> 00:14:56.256
But if you choose not to

00:14:56.256 --> 00:14:57.716
document these functions, you're

00:14:57.716 --> 00:14:59.206
forcing yourself to actually

00:14:59.256 --> 00:15:00.996
rewrite that documentation in

00:15:00.996 --> 00:15:03.326
your mind every single time you

00:15:03.326 --> 00:15:04.396
go to use that function.

00:15:04.996 --> 00:15:06.416
Typically, by having to go and

00:15:06.416 --> 00:15:07.636
revisit the implementation of

00:15:07.636 --> 00:15:09.056
the function, look at how each

00:15:09.056 --> 00:15:09.976
of the parameters are being

00:15:09.976 --> 00:15:11.416
used, and figure out how it's

00:15:11.416 --> 00:15:12.806
going to transform them to

00:15:12.806 --> 00:15:13.626
provide a result.

00:15:14.356 --> 00:15:16.856
In case you aren't aware,

00:15:16.996 --> 00:15:18.936
generating a Dock stub in Xcode

00:15:19.016 --> 00:15:20.306
is incredibly easy.

00:15:20.516 --> 00:15:21.646
Just place your curser on the

00:15:21.686 --> 00:15:22.666
first line of the function

00:15:22.666 --> 00:15:24.436
signature, press option command

00:15:24.436 --> 00:15:26.406
slash and all the placeholder

00:15:26.406 --> 00:15:27.806
text you need will be generated

00:15:27.806 --> 00:15:28.526
automatically.

00:15:28.786 --> 00:15:31.006
Fill in the blanks and you're

00:15:33.356 --> 00:15:33.466
done.

00:15:33.676 --> 00:15:35.376
Option clicking on any usage of

00:15:35.376 --> 00:15:36.796
that function will now bring up

00:15:36.866 --> 00:15:38.446
your own documentation in the

00:15:38.446 --> 00:15:40.376
same contextual quick help popup

00:15:40.376 --> 00:15:41.346
that you've come to know and

00:15:41.346 --> 00:15:43.036
love for the native SDK and

00:15:43.216 --> 00:15:44.516
Swift standard library.

00:15:44.976 --> 00:15:48.516
Comments and documentation:

00:15:49.006 --> 00:15:50.266
They're one of these really low

00:15:50.266 --> 00:15:51.656
effort but incredibly high

00:15:51.656 --> 00:15:53.576
reward investments of your time.

00:15:53.846 --> 00:15:55.156
And it pays off repeatedly

00:15:55.156 --> 00:15:56.046
throughout the life of your

00:15:56.046 --> 00:15:56.556
project.

00:15:56.986 --> 00:15:58.546
So, aid future understanding by

00:15:58.546 --> 00:15:59.646
sprinkling your code with

00:15:59.646 --> 00:16:00.586
helpful comments.

00:16:01.056 --> 00:16:03.056
Bring readers into the headspace

00:16:03.126 --> 00:16:04.566
of the original author with

00:16:04.606 --> 00:16:05.316
those comments.

00:16:06.006 --> 00:16:07.236
Use descriptive names for your

00:16:07.236 --> 00:16:09.116
variables, and fully document

00:16:09.116 --> 00:16:10.456
your functions, properties,

00:16:10.546 --> 00:16:11.876
Structs and Enums.

00:16:12.446 --> 00:16:16.436
Next, I'm going to talk about

00:16:16.436 --> 00:16:18.716
testing, and specifically, unit

00:16:18.716 --> 00:16:19.156
testing.

00:16:19.746 --> 00:16:21.226
And to do that, I want to

00:16:21.226 --> 00:16:22.016
introduce Marshall.

00:16:22.896 --> 00:16:24.536
Marshall is our Swift and

00:16:24.536 --> 00:16:25.896
developer tools evangelist.

00:16:26.256 --> 00:16:27.726
He's an incredibly brilliant and

00:16:27.766 --> 00:16:28.446
kind fellow.

00:16:28.446 --> 00:16:30.306
And he also happens to be a

00:16:30.306 --> 00:16:32.616
walking, talking Swift-linter.

00:16:33.176 --> 00:16:36.106
Every time I submit my code for

00:16:36.106 --> 00:16:38.636
review, I brace for the tsunami

00:16:38.636 --> 00:16:40.096
of insightful comments and

00:16:40.096 --> 00:16:41.756
feedback to help me improve what

00:16:41.756 --> 00:16:42.966
I've written in both form and

00:16:42.966 --> 00:16:43.396
function.

00:16:43.736 --> 00:16:45.666
But the other day, Marshall

00:16:45.666 --> 00:16:47.346
nudged me in the right direction

00:16:47.346 --> 00:16:49.316
on another topic, unit testing.

00:16:50.516 --> 00:16:52.986
Now, I must admit, I don't

00:16:52.986 --> 00:16:54.606
exactly have an impeccable track

00:16:54.606 --> 00:16:55.806
record in writing unit tests.

00:16:56.626 --> 00:16:58.116
It's not that I don't appreciate

00:16:58.116 --> 00:16:59.506
the potential value in them or

00:16:59.506 --> 00:17:00.566
that I'm necessarily new to

00:17:00.566 --> 00:17:00.886
them.

00:17:01.386 --> 00:17:02.676
It's just I tend to always leave

00:17:02.676 --> 00:17:03.466
it to last.

00:17:03.646 --> 00:17:04.846
And by the time I've finished

00:17:04.925 --> 00:17:06.356
implementing the actual code,

00:17:07.016 --> 00:17:08.376
the last thing I feel like doing

00:17:08.376 --> 00:17:09.476
is writing a unit test.

00:17:10.066 --> 00:17:11.826
Nevertheless, the other day,

00:17:11.965 --> 00:17:13.046
while implementing the data

00:17:13.046 --> 00:17:14.415
model for the new lab queuing

00:17:14.415 --> 00:17:15.806
feature, in the DubDub app,

00:17:16.636 --> 00:17:17.476
Marshall piped in.

00:17:18.856 --> 00:17:19.955
>> And while you're doing that,

00:17:20.205 --> 00:17:21.116
you might as well add a unit

00:17:21.156 --> 00:17:22.465
test to make sure that the round

00:17:22.526 --> 00:17:23.705
trip between the Struct and the

00:17:23.705 --> 00:17:25.175
dictionary representation keeps

00:17:25.175 --> 00:17:25.425
working.

00:17:26.906 --> 00:17:29.326
>> Now, in my mind, I really

00:17:29.326 --> 00:17:30.196
couldn't figure out how this

00:17:30.196 --> 00:17:30.996
would be messed up in the

00:17:30.996 --> 00:17:31.416
future.

00:17:31.736 --> 00:17:33.176
But nevertheless, I listened to

00:17:33.176 --> 00:17:34.756
Marshall and I put in a simple

00:17:34.756 --> 00:17:35.776
round trip unit test.

00:17:36.886 --> 00:17:37.386
I ran it.

00:17:37.386 --> 00:17:39.706
And I felt this significant bit

00:17:40.086 --> 00:17:41.566
of satisfaction when the green

00:17:41.566 --> 00:17:42.796
check mark showed that the test

00:17:42.796 --> 00:17:43.146
passed.

00:17:44.576 --> 00:17:45.746
So, I submitted my changes for

00:17:45.746 --> 00:17:47.136
review and I didn't think about

00:17:47.136 --> 00:17:48.916
that test again until a couple

00:17:48.916 --> 00:17:51.326
of weeks later, when we wanted

00:17:51.326 --> 00:17:52.756
to include some additional data

00:17:52.756 --> 00:17:53.566
in that Struct.

00:17:54.626 --> 00:17:56.566
So, made the changes to the

00:17:56.566 --> 00:17:56.866
Struct.

00:17:56.866 --> 00:17:58.536
And I didn't see any issues at

00:17:58.536 --> 00:17:58.806
runtime.

00:17:58.806 --> 00:18:00.536
I'm done, right?

00:18:01.566 --> 00:18:03.306
So, went to submit my changes.

00:18:03.846 --> 00:18:05.036
And then I remembered to run

00:18:05.036 --> 00:18:05.766
that unit test.

00:18:05.986 --> 00:18:08.046
And sure enough, I'd forgotten

00:18:08.046 --> 00:18:09.266
to change how the dictionary

00:18:09.266 --> 00:18:11.026
deserialization was working and

00:18:11.176 --> 00:18:11.956
the test caught it.

00:18:12.676 --> 00:18:13.986
The bug would have shown up much

00:18:13.986 --> 00:18:15.276
later, when we implementing the

00:18:15.276 --> 00:18:15.596
UI.

00:18:15.706 --> 00:18:17.046
And would have undoubtedly

00:18:17.046 --> 00:18:18.456
wasted a fair bit of our time,

00:18:18.456 --> 00:18:19.566
trying to figure out what went

00:18:19.566 --> 00:18:19.946
wrong.

00:18:21.066 --> 00:18:22.606
So, thanks, Marshall, for

00:18:22.606 --> 00:18:24.426
reminding me to include unit

00:18:24.426 --> 00:18:25.736
tests, as part of my regular

00:18:25.736 --> 00:18:26.256
practice.

00:18:27.006 --> 00:18:29.276
>> You're welcome, Josh [brief

00:18:29.276 --> 00:18:30.016
laughter].

00:18:30.516 --> 00:18:34.866
[ Applause ]

00:18:35.366 --> 00:18:36.996
>> So, even for sections of code

00:18:37.126 --> 00:18:38.816
that seem deceptively simple, as

00:18:39.046 --> 00:18:40.506
this particular one did to me at

00:18:40.506 --> 00:18:42.436
the time, it's so important to

00:18:42.436 --> 00:18:43.556
write those unit tests.

00:18:44.156 --> 00:18:45.746
With the malleability of code

00:18:45.916 --> 00:18:47.666
comes the potential introduction

00:18:47.796 --> 00:18:48.636
of regressions.

00:18:49.366 --> 00:18:50.546
And given that we never seem to

00:18:50.546 --> 00:18:52.106
have enough time to test things

00:18:52.106 --> 00:18:54.516
thoroughly, let's put Xcode to

00:18:54.516 --> 00:18:56.186
work as an extra set of eyes.

00:18:56.986 --> 00:18:58.876
So, make the implementation of

00:18:58.876 --> 00:19:00.186
unit tests a part of your

00:19:00.186 --> 00:19:01.926
regular development practice and

00:19:01.926 --> 00:19:03.316
run those tests before each

00:19:03.316 --> 00:19:03.666
commit.

00:19:05.046 --> 00:19:06.566
Also, unit tests are a key

00:19:06.566 --> 00:19:07.856
component to continuous

00:19:07.856 --> 00:19:08.416
integration.

00:19:08.566 --> 00:19:09.746
So, you can get yourself set up

00:19:09.776 --> 00:19:10.806
for that.

00:19:11.106 --> 00:19:12.336
Tests are another one of these

00:19:12.336 --> 00:19:13.686
hidden details that your

00:19:13.686 --> 00:19:15.046
customers will never actually

00:19:15.046 --> 00:19:15.566
see.

00:19:16.136 --> 00:19:17.016
But yet, could mean the

00:19:17.016 --> 00:19:18.546
difference between an incredible

00:19:18.546 --> 00:19:20.516
experience using your app or a

00:19:20.516 --> 00:19:22.106
very frustrating one when some

00:19:22.106 --> 00:19:23.216
important piece of their data

00:19:23.216 --> 00:19:24.006
has been corrupted.

00:19:26.696 --> 00:19:28.666
There's forms of analysis that

00:19:28.666 --> 00:19:29.866
you'll want to keep as part of

00:19:29.866 --> 00:19:30.886
your regular workflow.

00:19:31.016 --> 00:19:32.866
Now, some of these do require

00:19:32.866 --> 00:19:34.176
some extra time investment.

00:19:34.426 --> 00:19:35.956
But others can happen for you in

00:19:35.956 --> 00:19:37.456
the background without you even

00:19:37.456 --> 00:19:39.026
having to think about it.

00:19:40.376 --> 00:19:41.486
One tool that can be very

00:19:41.486 --> 00:19:42.756
helpful is the Network Link

00:19:42.756 --> 00:19:43.266
Conditioner.

00:19:43.716 --> 00:19:45.306
After all, app development tends

00:19:45.306 --> 00:19:46.826
to be performed in homes and

00:19:46.826 --> 00:19:48.346
offices with incredible network

00:19:48.406 --> 00:19:49.056
performance.

00:19:49.786 --> 00:19:51.086
But this really isn't a

00:19:51.086 --> 00:19:52.616
representative environment of

00:19:52.666 --> 00:19:53.896
where your app is likely to be

00:19:53.896 --> 00:19:54.526
used.

00:19:55.056 --> 00:19:56.656
So, by enabling the Network Link

00:19:56.656 --> 00:19:57.776
Conditioner, you can

00:19:57.776 --> 00:19:59.016
artificially constrain your

00:19:59.016 --> 00:20:00.126
network performance to one

00:20:00.186 --> 00:20:01.406
similar to that of a typical

00:20:01.406 --> 00:20:01.976
cellular network.

00:20:02.176 --> 00:20:04.116
Or even a poorly performing one.

00:20:04.736 --> 00:20:06.106
You'd be amazed at the number of

00:20:06.106 --> 00:20:07.366
issues that you'll catch with

00:20:07.366 --> 00:20:08.786
loading and race conditions so

00:20:09.146 --> 00:20:10.846
that you customers don't.

00:20:12.276 --> 00:20:13.936
Inside of your scheme settings,

00:20:14.146 --> 00:20:15.656
there's also several sanitizers

00:20:15.656 --> 00:20:16.676
and checkers that can help

00:20:16.676 --> 00:20:17.946
discover various issues

00:20:17.996 --> 00:20:18.846
throughout your development

00:20:18.846 --> 00:20:19.206
cycle.

00:20:19.906 --> 00:20:21.646
The Address Sanitizer will watch

00:20:21.646 --> 00:20:22.536
for things like memory

00:20:22.536 --> 00:20:24.636
corruptions and buffer

00:20:24.636 --> 00:20:25.246
overflows.

00:20:26.416 --> 00:20:27.676
Memory issues are frequently the

00:20:27.676 --> 00:20:28.536
cause of security

00:20:28.536 --> 00:20:29.236
vulnerabilities.

00:20:29.406 --> 00:20:30.856
So, using the Address Sanitize,

00:20:30.856 --> 00:20:32.076
will help you make sure that you

00:20:32.076 --> 00:20:33.966
don't ship these is the first

00:20:34.736 --> 00:20:34.886
place.

00:20:36.116 --> 00:20:37.916
By enabling the Thread

00:20:37.916 --> 00:20:39.376
Sanitizer, while testing your --

00:20:39.376 --> 00:20:40.626
and debugging your app in the

00:20:40.626 --> 00:20:42.446
simulator, you can help discover

00:20:42.446 --> 00:20:43.376
data races.

00:20:44.476 --> 00:20:46.116
Data races are when you have two

00:20:46.276 --> 00:20:47.486
threads that are not

00:20:47.486 --> 00:20:49.726
synchronized and at least one of

00:20:49.726 --> 00:20:51.006
those two threads is attempting

00:20:51.006 --> 00:20:52.746
to do a write on the same piece

00:20:52.746 --> 00:20:53.136
of data.

00:20:53.806 --> 00:20:56.106
Now, these can be particularly

00:20:56.106 --> 00:20:58.086
nasty bugs and they can have

00:20:58.186 --> 00:21:00.186
programs acting unpredictably.

00:21:00.566 --> 00:21:01.726
Or they can even result in

00:21:01.726 --> 00:21:02.476
memory corruption.

00:21:03.066 --> 00:21:06.756
The Undefined Behavior Sanitizer

00:21:07.136 --> 00:21:08.496
captures bugs like dividing by

00:21:08.496 --> 00:21:10.416
zero, out of range casts between

00:21:10.416 --> 00:21:12.306
floating point types, overflows,

00:21:12.306 --> 00:21:13.466
and misaligned pointers.

00:21:13.906 --> 00:21:15.326
And when a program has undefined

00:21:15.326 --> 00:21:16.446
behavior, it might cause a

00:21:16.446 --> 00:21:17.056
crash.

00:21:17.536 --> 00:21:18.646
It might act in unpredictable

00:21:18.646 --> 00:21:21.246
ways, or it might act like it

00:21:21.246 --> 00:21:23.356
has no problem at all with

00:21:23.356 --> 00:21:24.616
different results at different

00:21:24.616 --> 00:21:26.296
times seemingly with no reason.

00:21:27.256 --> 00:21:28.816
Incredibly frustrating bugs; the

00:21:28.816 --> 00:21:30.246
sanitizer can help you get rid

00:21:30.246 --> 00:21:31.206
of them, before they can wreak

00:21:31.206 --> 00:21:32.226
havoc on your project.

00:21:33.556 --> 00:21:35.036
And finally, there's the Main

00:21:35.036 --> 00:21:36.656
Thread Checker which ensures

00:21:36.706 --> 00:21:38.326
that you're not performing

00:21:38.326 --> 00:21:40.886
invalid usage of appKit, UIKit,

00:21:41.066 --> 00:21:42.666
and other API's on background

00:21:42.666 --> 00:21:42.986
threads.

00:21:43.386 --> 00:21:44.726
For example, if you're updating

00:21:44.726 --> 00:21:46.166
the UI on a thread other than

00:21:46.166 --> 00:21:48.096
the main thread, it can cause

00:21:48.186 --> 00:21:49.996
missed UI updates, visual

00:21:49.996 --> 00:21:51.866
defects, data corruptions and

00:21:51.866 --> 00:21:52.356
crashes.

00:21:53.376 --> 00:21:54.496
Sometimes these bugs can be

00:21:54.566 --> 00:21:55.726
really hard to track down

00:21:55.726 --> 00:21:56.836
because they might only appear

00:21:56.836 --> 00:21:57.606
intermittently.

00:21:58.136 --> 00:21:59.376
Now, there's minimal performance

00:21:59.376 --> 00:22:00.766
impact by having this enabled.

00:22:00.966 --> 00:22:02.226
So, we just recommend leaving it

00:22:02.226 --> 00:22:03.486
enabled whenever possible.

00:22:04.006 --> 00:22:07.836
While debugging your apps, keep

00:22:07.836 --> 00:22:08.976
an eye on performance and

00:22:08.976 --> 00:22:10.066
resource utilization.

00:22:10.196 --> 00:22:11.226
And make sure that your app is

00:22:11.276 --> 00:22:12.676
being as efficient with system

00:22:12.676 --> 00:22:13.916
resources as possible.

00:22:14.746 --> 00:22:16.366
The first step is, use the Debug

00:22:16.406 --> 00:22:16.916
Gauges.

00:22:17.676 --> 00:22:18.616
These are found in the debug

00:22:18.616 --> 00:22:20.296
navigator in Xcode anytime

00:22:20.296 --> 00:22:21.156
you've built and run your

00:22:21.156 --> 00:22:21.606
project.

00:22:22.866 --> 00:22:24.656
Here you can check out CPU,

00:22:24.656 --> 00:22:26.126
memory, disk, and network

00:22:26.126 --> 00:22:27.346
utilization throughout the

00:22:27.346 --> 00:22:29.596
lifecycle of your app, quickly

00:22:29.596 --> 00:22:31.006
understand if your app is doing

00:22:31.006 --> 00:22:32.106
something like connecting to

00:22:32.106 --> 00:22:33.396
unexpected servers over the

00:22:33.396 --> 00:22:33.776
network.

00:22:34.026 --> 00:22:35.616
Or maybe it's constantly pulling

00:22:35.616 --> 00:22:37.326
at an end point, and chewing up

00:22:37.326 --> 00:22:39.106
a ton of bandwidth and battery.

00:22:39.746 --> 00:22:42.486
And finally, you can take this

00:22:42.486 --> 00:22:44.076
even further, by clicking in the

00:22:44.126 --> 00:22:45.536
profile and instruments button

00:22:45.776 --> 00:22:46.836
which will allow you to run an

00:22:46.836 --> 00:22:48.786
even more in-depth analysis.

00:22:49.526 --> 00:22:51.106
One particular instrument that I

00:22:51.106 --> 00:22:53.176
use a lot is the time profiler.

00:22:53.406 --> 00:22:54.816
This allows you to ascertain

00:22:54.816 --> 00:22:56.256
which passages of your code are

00:22:56.256 --> 00:22:57.966
taking up the most cycles and

00:22:58.136 --> 00:22:59.796
has allowed us to narrow in on

00:23:00.346 --> 00:23:02.006
passages of work that might need

00:23:02.006 --> 00:23:03.316
to be made asynchronous.

00:23:03.676 --> 00:23:05.726
Or perhaps, I just implemented

00:23:05.726 --> 00:23:09.706
in an unscalable manner.

00:23:10.106 --> 00:23:11.386
Analysis is a really broad

00:23:11.386 --> 00:23:11.826
subject.

00:23:12.536 --> 00:23:13.356
But most of the tools I

00:23:13.356 --> 00:23:14.876
described here only require that

00:23:14.876 --> 00:23:16.096
you remember to turn them on.

00:23:17.086 --> 00:23:18.886
So, simulate typical and poor

00:23:18.886 --> 00:23:20.206
networks using that Network Link

00:23:20.206 --> 00:23:20.726
Conditioner.

00:23:21.446 --> 00:23:22.656
Use those sanitizers and

00:23:22.656 --> 00:23:23.566
checkers frequently.

00:23:23.676 --> 00:23:25.166
And just leave them enabled, if

00:23:25.166 --> 00:23:25.636
you can.

00:23:26.486 --> 00:23:27.836
Refer to those Debug Gauges

00:23:27.836 --> 00:23:28.486
regularly.

00:23:28.486 --> 00:23:29.726
And just keep an eye on the

00:23:29.726 --> 00:23:31.016
footprint and performance of

00:23:31.016 --> 00:23:31.416
your app.

00:23:32.386 --> 00:23:33.996
And dig deeper into issues and

00:23:33.996 --> 00:23:34.946
address them with great

00:23:34.986 --> 00:23:36.706
precision, by analyzing your

00:23:36.706 --> 00:23:37.796
app, using instruments.

00:23:38.306 --> 00:23:39.836
Turning these small efforts into

00:23:39.836 --> 00:23:42.366
habits will go a long way into

00:23:42.366 --> 00:23:43.616
improving the performance and

00:23:43.616 --> 00:23:45.446
reliability of your apps.

00:23:46.836 --> 00:23:49.206
Back when I lived in Toronto, I

00:23:49.866 --> 00:23:52.416
had a single car garage that I

00:23:52.416 --> 00:23:53.566
had converted into my

00:23:53.566 --> 00:23:54.336
woodworking shop.

00:23:55.586 --> 00:23:56.646
It was a cozy space.

00:23:57.526 --> 00:23:59.236
And I had it entirely to myself.

00:24:00.296 --> 00:24:01.706
But since moving to the Bay

00:24:01.706 --> 00:24:03.926
Area, I don't have a space to

00:24:03.926 --> 00:24:04.756
myself anymore.

00:24:05.076 --> 00:24:06.396
And I've been using various

00:24:06.396 --> 00:24:08.136
shared and community woodshops

00:24:08.206 --> 00:24:08.796
in the area.

00:24:09.526 --> 00:24:11.226
Now, doing so can be a bit

00:24:11.226 --> 00:24:13.526
frustrating at times because now

00:24:13.526 --> 00:24:14.536
I have to share the tools and

00:24:14.536 --> 00:24:15.616
the equipment and the space with

00:24:15.616 --> 00:24:16.236
others.

00:24:17.106 --> 00:24:18.836
But something I hadn't realized

00:24:18.836 --> 00:24:20.626
I would appreciate so much is

00:24:20.626 --> 00:24:22.156
the opportunity to bounce ideas

00:24:22.156 --> 00:24:23.996
off of others in the shop.

00:24:23.996 --> 00:24:25.336
And get their opinions on ways

00:24:25.396 --> 00:24:26.486
to go about doing things.

00:24:27.886 --> 00:24:29.526
I think with app development the

00:24:29.526 --> 00:24:30.906
analog here is that of code

00:24:30.906 --> 00:24:31.216
review.

00:24:32.266 --> 00:24:33.816
So, for many of the apps I've

00:24:33.846 --> 00:24:34.936
built over the years, I've been

00:24:34.936 --> 00:24:35.936
the solo developer.

00:24:37.156 --> 00:24:38.136
And much like having your own

00:24:38.136 --> 00:24:39.996
shop, it feels incredibly fast

00:24:39.996 --> 00:24:43.746
and nimble because only your own

00:24:43.746 --> 00:24:44.566
opinion matters.

00:24:45.396 --> 00:24:46.976
But the drawback is that you

00:24:46.976 --> 00:24:48.226
don't have that opportunity to

00:24:48.226 --> 00:24:49.766
learn from your colleagues and

00:24:49.816 --> 00:24:52.436
peers on better ways to use the

00:24:52.436 --> 00:24:54.416
language, frameworks, and SDK.

00:24:55.536 --> 00:24:57.066
Often, although there's lots of

00:24:57.066 --> 00:24:58.386
ways to approach a problem,

00:24:58.786 --> 00:25:00.316
there's often a better way.

00:25:01.196 --> 00:25:02.496
Something that stands out in

00:25:02.496 --> 00:25:03.966
terms of being more concise.

00:25:04.476 --> 00:25:06.226
Or maybe is more -- has greater

00:25:06.226 --> 00:25:07.886
performance, maintainability or

00:25:07.886 --> 00:25:08.596
reliability.

00:25:09.096 --> 00:25:10.486
Because, after all, just because

00:25:10.486 --> 00:25:12.646
it works, doesn't mean that it's

00:25:12.646 --> 00:25:13.606
necessarily right.

00:25:14.216 --> 00:25:15.736
Or that it could somehow be

00:25:15.736 --> 00:25:16.746
significantly improved.

00:25:17.896 --> 00:25:19.796
At Apple, all teams have a

00:25:19.796 --> 00:25:21.226
policy where no code makes it

00:25:21.226 --> 00:25:22.706
into a project without code

00:25:22.746 --> 00:25:23.046
review.

00:25:23.496 --> 00:25:25.106
Our team has learned so much

00:25:25.106 --> 00:25:26.016
from each other through this

00:25:26.016 --> 00:25:26.596
process.

00:25:26.836 --> 00:25:27.956
And our code is way more

00:25:27.956 --> 00:25:29.796
consistent in its style, let

00:25:29.796 --> 00:25:30.936
alone the improvements in the

00:25:30.936 --> 00:25:31.636
reliability.

00:25:32.326 --> 00:25:33.856
It also ensures that our entire

00:25:33.966 --> 00:25:35.846
team is more familiar with a

00:25:35.846 --> 00:25:37.316
broader set of the code base,

00:25:37.536 --> 00:25:38.836
allowing the range of bugs and

00:25:38.836 --> 00:25:40.306
features that we can each tackle

00:25:40.586 --> 00:25:41.436
to be much wider.

00:25:42.586 --> 00:25:44.386
Now, I have this fortune of

00:25:44.386 --> 00:25:46.166
being on a great team of

00:25:46.166 --> 00:25:47.766
experienced developers, which

00:25:47.766 --> 00:25:48.906
makes this much simpler.

00:25:49.426 --> 00:25:50.646
But what if you're running a

00:25:50.646 --> 00:25:52.276
company on your own or are the

00:25:52.276 --> 00:25:54.036
sole developer on your project?

00:25:55.156 --> 00:25:57.236
Well, try to find a way to

00:25:57.236 --> 00:25:58.626
connect with fellow developers

00:25:58.836 --> 00:26:00.356
in your area or from around the

00:26:00.356 --> 00:26:00.646
world.

00:26:00.876 --> 00:26:02.086
And come up with a way to do a

00:26:02.086 --> 00:26:04.936
code review exchange with them.

00:26:05.146 --> 00:26:06.536
Maybe investigate meet-ups,

00:26:06.676 --> 00:26:07.886
local conferences, and

00:26:07.886 --> 00:26:08.836
co-working spaces.

00:26:10.116 --> 00:26:11.156
So, now that you're going to do

00:26:11.156 --> 00:26:12.396
code review, as part of your

00:26:12.396 --> 00:26:14.146
development practice, what makes

00:26:14.146 --> 00:26:14.976
a great code review?

00:26:15.766 --> 00:26:18.376
Well, first, it means taking the

00:26:18.376 --> 00:26:20.266
time to understand each changed

00:26:20.266 --> 00:26:21.016
line of code.

00:26:21.396 --> 00:26:22.666
There's no point in doing a code

00:26:22.666 --> 00:26:23.786
review if it's just a quick

00:26:23.786 --> 00:26:24.206
skim.

00:26:26.266 --> 00:26:28.666
Second, actually build the

00:26:28.666 --> 00:26:29.116
project.

00:26:29.816 --> 00:26:32.656
Run it. Don't assume that the

00:26:32.716 --> 00:26:34.446
original author actually did

00:26:34.526 --> 00:26:34.726
this.

00:26:34.796 --> 00:26:36.246
Especially if the last commit

00:26:36.246 --> 00:26:37.716
you see in the history was a

00:26:37.716 --> 00:26:38.256
merge.

00:26:38.736 --> 00:26:42.186
Run those tests.

00:26:42.656 --> 00:26:44.796
First, doing so reminds you to

00:26:44.846 --> 00:26:46.266
check and see that there are

00:26:46.266 --> 00:26:47.276
actually tests.

00:26:47.516 --> 00:26:49.426
And that the unit tests pass.

00:26:50.266 --> 00:26:51.246
Remember, that just because it

00:26:51.306 --> 00:26:53.136
builds doesn't mean that it's

00:26:53.136 --> 00:26:54.326
not broken somehow.

00:26:54.866 --> 00:26:57.426
Read those comments and

00:26:57.426 --> 00:26:58.656
documentation thoroughly.

00:26:58.946 --> 00:27:00.196
I mean, there are comments and

00:27:00.196 --> 00:27:01.546
documentation, right?

00:27:02.706 --> 00:27:03.946
And then look for spelling and

00:27:03.946 --> 00:27:04.926
grammatical errors.

00:27:07.086 --> 00:27:08.426
Similarly, look for spelling

00:27:08.426 --> 00:27:09.626
errors in variable names.

00:27:10.256 --> 00:27:12.486
So, as a Canadian, I have this

00:27:12.486 --> 00:27:14.206
long-standing habit of including

00:27:14.206 --> 00:27:16.796
"u" in words like colour, which

00:27:16.796 --> 00:27:18.976
drives my team absolutely nuts,

00:27:18.976 --> 00:27:20.376
when they go and search for

00:27:22.456 --> 00:27:22.596
color.

00:27:23.086 --> 00:27:24.626
Ensuring consistency in the code

00:27:24.626 --> 00:27:26.096
base helps with finding and

00:27:26.096 --> 00:27:27.066
using these functions and

00:27:27.066 --> 00:27:28.506
variables later on.

00:27:28.566 --> 00:27:32.186
And again, it just saves time.

00:27:32.406 --> 00:27:33.756
So, even though it might feel

00:27:33.756 --> 00:27:35.116
like this process is slowing you

00:27:35.116 --> 00:27:36.786
down in the short-term, it will

00:27:36.786 --> 00:27:38.226
undoubtedly save you time,

00:27:38.456 --> 00:27:40.086
money, and customers in the

00:27:40.086 --> 00:27:41.306
future through the reduction of

00:27:41.306 --> 00:27:42.916
potential errors and issues in

00:27:42.916 --> 00:27:43.506
the long-run.

00:27:44.306 --> 00:27:46.166
And your skills, as a developer,

00:27:46.316 --> 00:27:48.236
will benefit significantly, when

00:27:48.236 --> 00:27:49.996
you approach similar patterns or

00:27:49.996 --> 00:27:51.256
challenges in the future.

00:27:54.226 --> 00:27:56.226
As developers, we're all

00:27:56.226 --> 00:27:58.126
endeavoring to create small,

00:27:58.216 --> 00:28:00.736
refined, reusable and testable

00:28:00.736 --> 00:28:01.676
sections of code.

00:28:02.496 --> 00:28:04.476
After all, we don't want to have

00:28:04.476 --> 00:28:06.336
to constantly recreate the same

00:28:06.336 --> 00:28:07.506
code over and over.

00:28:09.256 --> 00:28:10.836
Packages and frameworks offer an

00:28:10.836 --> 00:28:12.246
opportunity to maintain that

00:28:12.326 --> 00:28:14.116
code in a more centralized way.

00:28:14.426 --> 00:28:16.256
And offer that functionality in

00:28:16.256 --> 00:28:17.216
a portable fashion.

00:28:17.596 --> 00:28:18.926
Not only through your current

00:28:18.926 --> 00:28:20.816
app, but through other apps that

00:28:20.816 --> 00:28:21.966
might be able to leverage that

00:28:21.966 --> 00:28:22.206
effort.

00:28:23.426 --> 00:28:24.886
If your app includes extensions,

00:28:24.986 --> 00:28:26.736
by packaging up your shared code

00:28:26.736 --> 00:28:28.776
between -- in a framework, your

00:28:28.776 --> 00:28:30.406
binary size will actually reduce

00:28:30.406 --> 00:28:32.256
because both your main app and

00:28:32.256 --> 00:28:33.396
your extensions can actually

00:28:33.396 --> 00:28:34.616
share that same framework.

00:28:35.286 --> 00:28:38.266
Of course, creating packages

00:28:38.266 --> 00:28:39.736
also offers the opportunity to

00:28:39.736 --> 00:28:40.706
share your efforts with the

00:28:40.706 --> 00:28:42.156
community especially with the

00:28:42.156 --> 00:28:43.556
tight integration now found in

00:28:43.666 --> 00:28:44.346
Xcode 11.

00:28:44.906 --> 00:28:47.936
But even more than the code that

00:28:47.936 --> 00:28:49.666
lives in your app, shared

00:28:49.736 --> 00:28:51.316
frameworks, packages, and

00:28:51.316 --> 00:28:52.736
libraries need to be accompanied

00:28:52.736 --> 00:28:54.846
by great documentation, in order

00:28:54.846 --> 00:28:57.866
to be useful to others.

00:28:58.296 --> 00:28:59.516
So, embrace packages and

00:28:59.516 --> 00:29:01.216
frameworks as a way to break

00:29:01.216 --> 00:29:02.326
apart your code base.

00:29:03.476 --> 00:29:04.396
This will also allow you to

00:29:04.396 --> 00:29:06.016
scale your work across multiple

00:29:06.016 --> 00:29:07.356
apps you might be working on and

00:29:07.356 --> 00:29:07.936
maintaining.

00:29:08.716 --> 00:29:10.186
Frameworks can help you reduce

00:29:10.226 --> 00:29:11.186
the binary size.

00:29:11.796 --> 00:29:14.136
And then you can, of course,

00:29:14.136 --> 00:29:15.036
share your efforts with the

00:29:15.036 --> 00:29:15.516
community.

00:29:16.386 --> 00:29:17.896
But be sure to include that

00:29:17.896 --> 00:29:18.916
great documentation.

00:29:21.916 --> 00:29:23.426
The last area that I want to

00:29:23.426 --> 00:29:25.126
talk to you about today is

00:29:25.126 --> 00:29:26.866
dependencies, and, specifically,

00:29:26.956 --> 00:29:28.336
understanding the benefits and

00:29:28.336 --> 00:29:29.696
risks of bringing them into your

00:29:29.696 --> 00:29:30.146
project.

00:29:32.096 --> 00:29:33.276
Using Swift packages,

00:29:33.646 --> 00:29:35.216
frameworks, and other libraries,

00:29:35.816 --> 00:29:37.166
offers many benefits.

00:29:37.726 --> 00:29:39.886
But before you start to use a

00:29:39.886 --> 00:29:41.946
given package, it's really

00:29:41.946 --> 00:29:43.066
important to know what's inside

00:29:43.066 --> 00:29:43.266
of it.

00:29:43.476 --> 00:29:44.576
And what could be potentially

00:29:44.576 --> 00:29:45.846
coming along for the ride.

00:29:46.506 --> 00:29:49.006
Make sure that you understand

00:29:49.006 --> 00:29:50.216
what your dependency is doing

00:29:50.216 --> 00:29:50.676
with data.

00:29:51.636 --> 00:29:53.256
Ultimately, you're responsible

00:29:53.256 --> 00:29:54.446
for the contents of your app.

00:29:55.406 --> 00:29:57.096
And what it's doing with user

00:29:57.096 --> 00:29:57.356
data.

00:29:58.286 --> 00:29:59.276
Make sure that the framework

00:29:59.276 --> 00:30:00.646
isn't collecting metrics or

00:30:00.646 --> 00:30:01.706
device information that's

00:30:01.706 --> 00:30:02.456
unnecessary.

00:30:03.356 --> 00:30:04.356
And make sure that it's

00:30:04.356 --> 00:30:05.796
definitely not sending that data

00:30:05.996 --> 00:30:06.796
off device.

00:30:07.306 --> 00:30:10.486
Note what other dependency, a

00:30:10.486 --> 00:30:12.256
giving dependency, depends on.

00:30:12.836 --> 00:30:14.066
And research into those, as

00:30:14.066 --> 00:30:14.316
well.

00:30:15.156 --> 00:30:16.396
After all, including a

00:30:16.396 --> 00:30:18.066
dependency with dependencies now

00:30:18.066 --> 00:30:20.106
means that your app is actually

00:30:20.106 --> 00:30:21.876
riding on the security and

00:30:21.876 --> 00:30:23.536
success of that entire chain.

00:30:24.136 --> 00:30:26.486
And, finally, there's one other

00:30:26.486 --> 00:30:27.206
possibility.

00:30:27.616 --> 00:30:28.826
What if the framework breaks on

00:30:28.826 --> 00:30:28.926
you?

00:30:29.976 --> 00:30:31.636
What if it becomes unmaintained?

00:30:32.306 --> 00:30:36.056
Or what if it just disappears?

00:30:36.116 --> 00:30:37.246
It's really important to have a

00:30:37.246 --> 00:30:38.616
plan on how you're going to deal

00:30:38.616 --> 00:30:40.036
with each of these situations

00:30:40.096 --> 00:30:41.866
anytime you're introducing a new

00:30:41.866 --> 00:30:43.136
dependency into your project.

00:30:43.456 --> 00:30:45.336
After all, your applications

00:30:45.336 --> 00:30:47.106
future is now dependent on it.

00:30:48.626 --> 00:30:49.946
So, are you going to be able to

00:30:49.946 --> 00:30:51.256
fix the open bugs yourself?

00:30:51.346 --> 00:30:52.876
Are you going to bring that

00:30:52.876 --> 00:30:54.146
project in-house and maintain

00:30:54.146 --> 00:30:54.246
it?

00:30:54.866 --> 00:30:56.496
Or are you going to plan to have

00:30:56.536 --> 00:30:58.106
to completely swap out that

00:30:58.106 --> 00:30:58.996
dependency later?

00:30:59.296 --> 00:31:00.616
With all of the necessary work

00:31:00.666 --> 00:31:02.386
that comes with that task?

00:31:03.296 --> 00:31:04.276
The use of external

00:31:04.276 --> 00:31:05.326
dependencies, such as Swift

00:31:05.326 --> 00:31:06.716
packages, can allow you to move

00:31:06.716 --> 00:31:07.816
more quickly and avoid

00:31:07.886 --> 00:31:09.136
recreating tools that might

00:31:09.136 --> 00:31:10.536
already exist in the community.

00:31:12.006 --> 00:31:14.066
But be diligent in their use.

00:31:14.966 --> 00:31:16.166
Ensure that they only do what

00:31:16.166 --> 00:31:17.166
you expect them to.

00:31:17.636 --> 00:31:19.836
And absolutely ensure that they

00:31:19.836 --> 00:31:21.446
respect the privacy of people

00:31:21.446 --> 00:31:22.386
using your apps.

00:31:23.926 --> 00:31:25.056
Make sure you establish that

00:31:25.056 --> 00:31:26.616
plan of what you're going to do

00:31:26.616 --> 00:31:28.356
if they break or otherwise go

00:31:28.356 --> 00:31:29.126
away in the future.

00:31:30.116 --> 00:31:31.366
If you make answering these

00:31:31.366 --> 00:31:33.506
questions a habit when adding a

00:31:33.506 --> 00:31:35.006
new dependency to your project,

00:31:35.566 --> 00:31:36.796
it's going to payoff in the long

00:31:36.796 --> 00:31:38.416
run, and maximize the benefits

00:31:38.416 --> 00:31:39.000
of using them.

00:31:42.726 --> 00:31:44.146
With app development projects,

00:31:44.856 --> 00:31:46.146
it can sometimes feel like the

00:31:46.146 --> 00:31:48.866
last 10% of the project takes

00:31:48.896 --> 00:31:51.396
just as long as the first 90% of

00:31:51.396 --> 00:31:51.946
the project.

00:31:52.616 --> 00:31:53.866
But I think that by trying to

00:31:53.866 --> 00:31:55.376
convert some of these practices

00:31:55.376 --> 00:31:57.316
and principles into habits, you

00:31:57.316 --> 00:31:58.606
can help avoid that feeling.

00:31:59.226 --> 00:32:01.726
So, by effectively organizing

00:32:01.726 --> 00:32:03.056
your workspace, you can work

00:32:03.056 --> 00:32:04.836
faster and more efficiently

00:32:05.116 --> 00:32:07.036
keeping focused on the actual

00:32:07.626 --> 00:32:07.726
code.

00:32:08.436 --> 00:32:09.896
Through the power of source

00:32:09.896 --> 00:32:11.526
control, you can track your code

00:32:11.526 --> 00:32:13.446
base with precision, reduce the

00:32:13.446 --> 00:32:14.996
odds of regressions, and

00:32:14.996 --> 00:32:16.936
expedite the investigation of

00:32:16.936 --> 00:32:17.856
bugs that might occur.

00:32:19.046 --> 00:32:20.146
By writing helpful and

00:32:20.146 --> 00:32:21.606
meaningful comments and

00:32:21.606 --> 00:32:23.166
documentation, you can reduce

00:32:23.246 --> 00:32:24.956
the cognitive burden whenever

00:32:24.956 --> 00:32:26.476
you revisit code in the future

00:32:26.656 --> 00:32:27.956
and every time you make use of a

00:32:27.956 --> 00:32:29.576
class, Struct, or function that

00:32:29.576 --> 00:32:29.966
you've built.

00:32:31.356 --> 00:32:33.086
Unit tests will save you at the

00:32:33.086 --> 00:32:34.856
eleventh hour, from checking

00:32:34.856 --> 00:32:36.126
encode that introduces new

00:32:36.126 --> 00:32:36.606
regressions.

00:32:38.046 --> 00:32:39.906
Sanitizers and checkers offer

00:32:39.906 --> 00:32:41.446
ongoing analysis of your code

00:32:41.856 --> 00:32:43.046
and they run in the background

00:32:43.046 --> 00:32:44.246
without you even having to think

00:32:44.246 --> 00:32:44.646
about it.

00:32:45.166 --> 00:32:46.846
Gauges and instruments ensure

00:32:46.846 --> 00:32:48.046
that you are being efficient

00:32:48.046 --> 00:32:49.096
with your use of system

00:32:49.096 --> 00:32:50.796
resources and they'll allow you

00:32:50.796 --> 00:32:52.186
to chase down performance and

00:32:52.186 --> 00:32:53.506
other issues, with precision.

00:32:54.656 --> 00:32:56.716
Code review is not only a chance

00:32:56.716 --> 00:32:57.926
to evaluate the style and

00:32:57.966 --> 00:32:59.276
function of your code, but an

00:32:59.276 --> 00:33:00.836
enormous learning opportunity

00:33:00.886 --> 00:33:02.426
for developing -- for evolving

00:33:02.426 --> 00:33:04.266
your skills as a developer and

00:33:04.266 --> 00:33:05.506
sharing them with your team and

00:33:05.506 --> 00:33:06.096
the community.

00:33:07.176 --> 00:33:08.386
Breaking your projects into

00:33:08.386 --> 00:33:10.596
smaller and reusable packages

00:33:10.596 --> 00:33:12.106
and frameworks can help scale

00:33:12.106 --> 00:33:13.186
your work across multiple

00:33:13.186 --> 00:33:14.866
projects and allow you to share

00:33:14.866 --> 00:33:14.966
it.

00:33:15.876 --> 00:33:17.006
There's also those benefits to

00:33:17.006 --> 00:33:17.726
binary size.

00:33:18.906 --> 00:33:20.516
And finally, the use of external

00:33:20.516 --> 00:33:21.936
dependencies, such as Swift

00:33:21.936 --> 00:33:23.496
packages, can help you move more

00:33:23.496 --> 00:33:25.466
quickly and reuse functions that

00:33:25.466 --> 00:33:26.356
might already exist in the

00:33:26.356 --> 00:33:26.846
community.

00:33:27.176 --> 00:33:28.916
But be diligent in their use.

00:33:29.086 --> 00:33:30.946
Understand what they do with

00:33:30.976 --> 00:33:31.626
user data.

00:33:31.696 --> 00:33:33.256
And establish a plan in case

00:33:33.256 --> 00:33:33.886
they go away.

00:33:34.856 --> 00:33:36.486
Including these practices as

00:33:36.486 --> 00:33:37.866
part of your work as an app

00:33:37.916 --> 00:33:40.196
developer will only add a small

00:33:40.196 --> 00:33:41.356
bit of time to each phase of

00:33:41.356 --> 00:33:41.986
your project.

00:33:41.986 --> 00:33:42.886
But it will save you an

00:33:42.886 --> 00:33:44.496
incredible amount of time, over

00:33:44.496 --> 00:33:45.976
the long run, ensuring your app

00:33:45.976 --> 00:33:46.816
is built to last.

00:33:47.676 --> 00:33:49.286
I hope that this collection of

00:33:49.286 --> 00:33:50.606
ideas and suggestions I've

00:33:50.606 --> 00:33:52.106
offered you today, has allowed

00:33:52.106 --> 00:33:53.506
you to think about how you too

00:33:53.546 --> 00:33:54.876
can further improve your craft

00:33:54.876 --> 00:33:55.756
as an app developer.

00:33:56.036 --> 00:33:57.516
Practices you might incorporate

00:33:57.766 --> 00:33:58.596
to allow you to raise the

00:33:58.596 --> 00:34:00.266
quality and durability of your

00:34:00.266 --> 00:34:02.146
work and conscious efforts that

00:34:02.146 --> 00:34:03.486
you can turn into automatic

00:34:03.486 --> 00:34:05.176
habits, that allow you to direct

00:34:05.176 --> 00:34:06.666
your energy to the areas of most

00:34:06.666 --> 00:34:07.296
importance.

00:34:07.556 --> 00:34:09.366
For the people who engage with

00:34:09.406 --> 00:34:11.786
your apps will feel that care

00:34:11.786 --> 00:34:13.386
and love that you've poured into

00:34:13.386 --> 00:34:14.896
your work even if they can't

00:34:14.896 --> 00:34:16.025
exactly say why.

00:34:16.626 --> 00:34:18.826
And you can take great pride in

00:34:18.826 --> 00:34:19.696
what you have crafted.

00:34:21.016 --> 00:34:21.326
Thank you.

00:34:22.516 --> 00:34:29.505
[ Applause ]