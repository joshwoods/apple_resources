WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:08.031 --> 00:00:10.031
[ Applause ]

00:00:10.046 --> 00:00:10.866
>> Hi, everyone.

00:00:10.866 --> 00:00:13.136
Thank you for coming to this

00:00:13.136 --> 00:00:13.506
session.

00:00:13.866 --> 00:00:15.056
I know it's been a long day.

00:00:15.796 --> 00:00:17.236
My name is Alexander Jakobsen

00:00:17.236 --> 00:00:18.176
and I'm an engineer on the

00:00:18.176 --> 00:00:18.976
MapKit team.

00:00:21.486 --> 00:00:23.436
Apple Maps helps millions of

00:00:23.436 --> 00:00:25.436
people around the world to

00:00:25.436 --> 00:00:27.386
navigate and explore the world

00:00:27.536 --> 00:00:28.406
every single day.

00:00:29.096 --> 00:00:31.616
And thousands of developers like

00:00:31.616 --> 00:00:34.206
you are using MapKit to

00:00:34.206 --> 00:00:36.086
integrate Apple Maps in your

00:00:36.086 --> 00:00:38.146
apps where you help your users

00:00:38.526 --> 00:00:40.556
with all kinds of amazing

00:00:40.556 --> 00:00:41.666
location services.

00:00:42.796 --> 00:00:44.646
And last year, we introduced

00:00:44.646 --> 00:00:47.146
MapKit JS allowing you to bring

00:00:47.146 --> 00:00:49.066
Apple Maps to your websites as

00:00:49.066 --> 00:00:49.356
well.

00:00:50.896 --> 00:00:52.256
Hopefully you watched the

00:00:52.346 --> 00:00:54.526
keynote this Monday and saw all

00:00:54.526 --> 00:00:56.016
the great new features we're

00:00:56.016 --> 00:00:58.246
adding to Maps in iOS 13.

00:00:59.296 --> 00:01:00.676
We're very excited about where

00:01:00.676 --> 00:01:01.606
Maps is going.

00:01:02.226 --> 00:01:04.096
But on top of everything you saw

00:01:04.196 --> 00:01:05.736
in the keynote, we have been

00:01:05.736 --> 00:01:07.696
very busy this year building a

00:01:07.696 --> 00:01:09.976
number of new features in MapKit

00:01:09.976 --> 00:01:11.796
and MapKit JS that you have been

00:01:11.796 --> 00:01:12.396
asking for.

00:01:13.306 --> 00:01:15.606
So, I'm very excited to finally

00:01:15.606 --> 00:01:17.286
be able to tell you what's new

00:01:17.286 --> 00:01:19.766
in MapKit and MapKit JS.

00:01:20.376 --> 00:01:21.636
But before we get into all the

00:01:21.636 --> 00:01:23.406
new features, I want to take a

00:01:23.406 --> 00:01:25.016
moment and talk about our

00:01:25.016 --> 00:01:27.006
brand-new base map.

00:01:28.026 --> 00:01:30.746
As mentioned in the keynote, we

00:01:30.746 --> 00:01:32.616
have rebuilt our map from the

00:01:32.616 --> 00:01:35.046
ground up covering more than 4

00:01:35.116 --> 00:01:37.556
million miles of road so far in

00:01:37.556 --> 00:01:39.756
our fleet of custom cars and

00:01:39.756 --> 00:01:40.126
planes.

00:01:41.666 --> 00:01:43.176
The new map is incredibly

00:01:43.176 --> 00:01:44.886
detailed and you'll see more

00:01:44.886 --> 00:01:47.756
features than ever before like

00:01:48.966 --> 00:01:51.196
baseball fields, running tracks,

00:01:51.426 --> 00:01:53.076
walking paths and swimming

00:01:53.106 --> 00:01:53.596
pools.

00:01:54.086 --> 00:01:56.266
And you will see major

00:01:56.266 --> 00:01:58.276
improvements to the richness and

00:01:58.276 --> 00:02:00.996
details in parks, greenways,

00:02:01.396 --> 00:02:04.636
beaches and rural areas, as well

00:02:04.636 --> 00:02:06.816
as improved roads, buildings,

00:02:07.086 --> 00:02:09.006
city parks and so much more.

00:02:11.096 --> 00:02:12.636
And we've also improved the

00:02:12.636 --> 00:02:14.996
address detail a lot, which

00:02:14.996 --> 00:02:17.086
means more accurate search and

00:02:17.366 --> 00:02:18.486
direction results.

00:02:18.766 --> 00:02:21.496
And the best part is as we roll

00:02:21.496 --> 00:02:23.026
out these improvements to Apple

00:02:23.026 --> 00:02:25.016
Maps, they become automatically

00:02:25.016 --> 00:02:26.876
available to you through MapKit

00:02:26.966 --> 00:02:28.686
and MapKit JS.

00:02:29.296 --> 00:02:30.686
The updated map will be

00:02:30.686 --> 00:02:32.636
available in the entire US at

00:02:32.636 --> 00:02:35.226
the end of 2019 and we're adding

00:02:35.226 --> 00:02:38.366
additional countries in 2020.

00:02:38.716 --> 00:02:40.096
We're also making the map

00:02:40.096 --> 00:02:43.026
available to you in Dark Mode on

00:02:43.136 --> 00:02:48.256
iOS, tvOS, macOS and the web.

00:02:48.956 --> 00:02:52.616
And in this session, we will be

00:02:52.616 --> 00:02:54.336
using a fictitious WWDC

00:02:54.336 --> 00:02:57.406
companion app to demonstrate

00:02:57.406 --> 00:02:58.476
some of the topics we're going

00:02:58.476 --> 00:02:58.826
to cover.

00:03:00.086 --> 00:03:01.266
This app will be available as

00:03:01.266 --> 00:03:02.996
sample code from the session web

00:03:02.996 --> 00:03:06.136
page, but let's take a quick

00:03:06.136 --> 00:03:08.716
look at what this app is all

00:03:08.716 --> 00:03:09.096
about.

00:03:09.886 --> 00:03:11.626
There are three main features

00:03:11.856 --> 00:03:13.676
intended to bring additional

00:03:13.676 --> 00:03:15.546
value to conference attendees

00:03:15.636 --> 00:03:16.426
like yourself.

00:03:17.766 --> 00:03:19.036
The first feature is the

00:03:19.036 --> 00:03:20.596
accommodation feature or

00:03:20.596 --> 00:03:22.566
accommodation finder where

00:03:22.566 --> 00:03:24.836
attendees can find accommodation

00:03:24.836 --> 00:03:25.746
for the duration of the

00:03:25.746 --> 00:03:27.766
conference through the companion

00:03:27.766 --> 00:03:28.616
app partners.

00:03:29.356 --> 00:03:32.166
This view is simply a map with a

00:03:32.166 --> 00:03:33.916
number of annotations added to

00:03:34.576 --> 00:03:34.646
it.

00:03:35.576 --> 00:03:36.986
The second feature is called

00:03:36.986 --> 00:03:37.936
After Hours.

00:03:38.296 --> 00:03:39.546
And it's a feature where

00:03:39.546 --> 00:03:41.686
attendees can find a restaurant

00:03:41.686 --> 00:03:43.646
or a bar where they're meeting

00:03:43.646 --> 00:03:45.256
up with other attendees after

00:03:45.256 --> 00:03:46.146
conference hours.

00:03:47.516 --> 00:03:49.306
As the user types in the search

00:03:49.306 --> 00:03:51.696
field, relevant suggestions on

00:03:51.696 --> 00:03:53.846
restaurants and bars are shown

00:03:53.846 --> 00:03:56.076
us suggestions and search

00:03:56.076 --> 00:03:57.416
results are displayed as

00:03:57.416 --> 00:03:58.836
annotation views on the map.

00:03:59.436 --> 00:04:02.626
And the last feature is the

00:04:02.626 --> 00:04:03.326
event view.

00:04:04.496 --> 00:04:06.716
The event view shows a simple

00:04:06.716 --> 00:04:08.836
map of the companion app event

00:04:08.836 --> 00:04:09.896
that takes place the evening

00:04:09.896 --> 00:04:11.746
before the official WWDC Bash.

00:04:12.766 --> 00:04:14.386
This feature focuses the map

00:04:14.386 --> 00:04:16.176
view on the location of the

00:04:16.176 --> 00:04:18.555
event and renders a number of

00:04:18.555 --> 00:04:20.676
annotations and overlays to

00:04:20.676 --> 00:04:22.216
represent the food and drinks

00:04:22.216 --> 00:04:23.866
tents, as well as the stage.

00:04:24.426 --> 00:04:28.046
So, for the remainder of this

00:04:28.046 --> 00:04:30.186
session, we'll go through a

00:04:30.186 --> 00:04:31.966
little bit more details on the

00:04:31.966 --> 00:04:33.506
most exciting new features in

00:04:33.506 --> 00:04:34.586
MapKit and MapKit JS.

00:04:34.586 --> 00:04:37.586
And we have a lot of things to

00:04:37.586 --> 00:04:39.096
cover today like our new

00:04:39.096 --> 00:04:41.386
snapshot service, new APIs for

00:04:41.386 --> 00:04:44.156
filtering and increased map view

00:04:44.156 --> 00:04:45.156
camera control.

00:04:46.226 --> 00:04:47.916
So, let's start out with talking

00:04:47.916 --> 00:04:48.986
about snapshots.

00:04:49.726 --> 00:04:52.086
Snapshots are simply static

00:04:52.086 --> 00:04:54.636
images of the map and you may be

00:04:54.636 --> 00:04:55.676
familiar with the map

00:04:55.676 --> 00:04:56.996
snapshotter that has been

00:04:56.996 --> 00:04:59.436
available in MapKit for a number

00:04:59.436 --> 00:04:59.916
of years.

00:05:01.126 --> 00:05:03.656
We use snapshots in our apps but

00:05:03.656 --> 00:05:05.686
we don't need user interaction

00:05:05.826 --> 00:05:08.166
in our maps, like in contacts,

00:05:08.706 --> 00:05:10.356
and messages, and calendar.

00:05:10.926 --> 00:05:13.566
But since the snapshotter is

00:05:13.566 --> 00:05:15.626
part of MapKit, you can only

00:05:15.626 --> 00:05:18.106
create the snapshots in native

00:05:18.106 --> 00:05:18.626
apps.

00:05:19.366 --> 00:05:20.936
But this week, we announced a

00:05:20.936 --> 00:05:22.886
new service that lets you create

00:05:22.886 --> 00:05:25.506
and use snapshots in other

00:05:25.506 --> 00:05:26.616
environments as well.

00:05:27.556 --> 00:05:28.946
And this new service is called

00:05:29.726 --> 00:05:31.586
Maps Web Snapshots.

00:05:32.406 --> 00:05:34.766
To fetch a Maps Web Snapshot,

00:05:35.146 --> 00:05:36.916
all you need is a URL.

00:05:37.696 --> 00:05:39.486
And the parameters of that URL

00:05:39.776 --> 00:05:42.056
dictates the characteristics of

00:05:42.056 --> 00:05:44.416
the image such as its center

00:05:44.416 --> 00:05:46.696
coordinate, its size.

00:05:47.306 --> 00:05:48.866
And if you want this same

00:05:48.866 --> 00:05:50.736
snapshots but with the map in

00:05:50.736 --> 00:05:54.386
Dark Mode, you can add the color

00:05:54.386 --> 00:05:55.946
scheme parameter with the value

00:05:55.946 --> 00:05:56.366
dark.

00:05:58.716 --> 00:06:01.546
All snapshot URLs requires a

00:06:01.546 --> 00:06:03.856
signature which you can generate

00:06:03.856 --> 00:06:06.346
after obtaining a MapKit JS API

00:06:06.346 --> 00:06:08.186
key through the apple developer

00:06:08.186 --> 00:06:08.636
program.

00:06:09.206 --> 00:06:12.466
As part of the MapKit JS beta,

00:06:13.436 --> 00:06:15.956
you can now request 25,000

00:06:15.956 --> 00:06:18.316
snapshots per day, which we're

00:06:18.316 --> 00:06:19.386
hoping it will be more than

00:06:19.386 --> 00:06:20.676
enough to cover the needs of

00:06:20.796 --> 00:06:21.416
people out there.

00:06:21.996 --> 00:06:26.066
You can use map snapshots any

00:06:26.066 --> 00:06:27.926
place where you would use a URL

00:06:27.926 --> 00:06:29.726
to display an image like in an

00:06:29.726 --> 00:06:32.366
email, in a URL preview and of

00:06:32.366 --> 00:06:33.956
course web pages.

00:06:34.806 --> 00:06:37.776
And to help you get started with

00:06:37.776 --> 00:06:39.386
generating snapshot URLS, we

00:06:39.386 --> 00:06:41.356
have built this tool for you and

00:06:41.356 --> 00:06:43.126
you can find that one and more

00:06:43.126 --> 00:06:44.956
information about the MapKit JS

00:06:44.996 --> 00:06:47.566
beta program on the MapKit JS

00:06:47.566 --> 00:06:48.486
developer page.

00:06:52.196 --> 00:06:53.846
So, that's how you can create

00:06:53.846 --> 00:06:55.326
Maps Web Snapshots.

00:06:56.696 --> 00:06:57.806
So, let's move on and talk a

00:06:57.806 --> 00:06:59.706
little bit more about the map in

00:06:59.706 --> 00:07:00.276
Dark Mode.

00:07:01.296 --> 00:07:02.896
Last year, we introduced the map

00:07:02.896 --> 00:07:05.286
in Dark Mode for-- on macOS.

00:07:05.666 --> 00:07:06.776
And this year, we're bringing it

00:07:06.776 --> 00:07:09.486
to iOS, tvOS and the web.

00:07:10.446 --> 00:07:11.966
So, what do you need to do to

00:07:11.966 --> 00:07:13.616
use the map in Dark Mode in your

00:07:14.576 --> 00:07:14.676
apps?

00:07:15.606 --> 00:07:17.916
Well, MKMapView will

00:07:17.916 --> 00:07:20.086
automatically adapt to the user

00:07:20.086 --> 00:07:22.006
interface style in the trait

00:07:22.006 --> 00:07:23.636
collection applied to its view

00:07:23.636 --> 00:07:24.176
hierarchy.

00:07:25.566 --> 00:07:28.876
So, if your view is dark, the

00:07:28.876 --> 00:07:29.826
map view will adapt

00:07:30.166 --> 00:07:30.896
automatically.

00:07:31.396 --> 00:07:33.526
And this should be familiar to

00:07:33.526 --> 00:07:35.186
you if you have used MapKit on

00:07:35.186 --> 00:07:36.506
tvOS in the past.

00:07:37.266 --> 00:07:38.116
And for those of you who are

00:07:38.116 --> 00:07:40.426
wondering, yes, this improved

00:07:40.426 --> 00:07:42.326
map will replace the old one

00:07:42.326 --> 00:07:42.866
automatically.

00:07:46.416 --> 00:07:48.176
As I mentioned before, if you

00:07:48.176 --> 00:07:49.906
don't need user interaction in

00:07:49.906 --> 00:07:52.416
your maps, the right tool to use

00:07:52.466 --> 00:07:53.966
is the snapshotter.

00:07:54.816 --> 00:07:56.946
But unlike the map view, the

00:07:56.946 --> 00:07:59.566
snapshotter is not aware of the

00:07:59.566 --> 00:08:01.286
view hierarchy in your apps.

00:08:01.816 --> 00:08:03.796
It's therefore important that

00:08:03.796 --> 00:08:05.906
you configure your snapshotter

00:08:06.416 --> 00:08:08.356
to ensure that the snapshot

00:08:08.466 --> 00:08:10.886
matches the user interface style

00:08:10.886 --> 00:08:11.696
of your view hierarchy.

00:08:12.136 --> 00:08:13.346
And you do this using the

00:08:13.346 --> 00:08:14.456
snapshotter options.

00:08:15.076 --> 00:08:16.206
So, let's look an example of how

00:08:16.206 --> 00:08:16.766
to do this.

00:08:18.186 --> 00:08:19.316
First, you need to create your

00:08:19.316 --> 00:08:21.616
snapshotter options and you need

00:08:21.616 --> 00:08:23.066
to configure what area of the

00:08:23.066 --> 00:08:24.636
world you want to snapshot.

00:08:25.936 --> 00:08:27.276
You also need to provide the

00:08:27.366 --> 00:08:28.776
size of the snapshots.

00:08:30.536 --> 00:08:33.515
Similar to a view, you configure

00:08:33.515 --> 00:08:35.076
the appearance of your snapshot

00:08:35.326 --> 00:08:38.015
using a user interface style in

00:08:38.015 --> 00:08:38.956
a trait collection.

00:08:39.796 --> 00:08:41.086
So, if you have a view where you

00:08:41.086 --> 00:08:42.986
intend to present your snapshot,

00:08:42.986 --> 00:08:44.866
the easiest way to configure

00:08:44.866 --> 00:08:46.666
your options is to grab the

00:08:46.666 --> 00:08:48.676
trait collection of that target

00:08:48.766 --> 00:08:48.996
view.

00:08:49.946 --> 00:08:51.596
This will ensure that the

00:08:51.706 --> 00:08:53.736
snapshot you create actually

00:08:53.736 --> 00:08:56.006
matches a user interface style

00:08:56.006 --> 00:08:56.986
of your view hierarchy.

00:08:58.316 --> 00:08:59.686
But remember that users can

00:08:59.686 --> 00:09:02.036
switch in or out of iOS's Dark

00:09:02.036 --> 00:09:03.586
Mode as they're using your app.

00:09:04.286 --> 00:09:05.526
So, make sure that you observe

00:09:05.526 --> 00:09:07.396
changes to the trait collection

00:09:07.396 --> 00:09:08.746
in your view hierarchy so you

00:09:08.746 --> 00:09:11.586
can regenerate your snapshot if

00:09:11.586 --> 00:09:12.686
the user interface style

00:09:12.686 --> 00:09:13.306
changes.

00:09:16.176 --> 00:09:17.956
In some cases, you may not

00:09:17.956 --> 00:09:20.166
actually have a target view for

00:09:20.166 --> 00:09:21.746
your snapshot, maybe because

00:09:21.746 --> 00:09:23.276
you're sharing it to another

00:09:23.276 --> 00:09:23.916
device.

00:09:25.086 --> 00:09:26.156
In that case, you can instead

00:09:26.156 --> 00:09:27.976
just create a UITraitCollection

00:09:28.276 --> 00:09:29.526
with the appropriate user

00:09:29.526 --> 00:09:30.416
interface style.

00:09:32.356 --> 00:09:33.936
And once you have configured

00:09:33.936 --> 00:09:35.726
your options, you simply path

00:09:35.726 --> 00:09:36.956
into your snapshotter at

00:09:37.006 --> 00:09:39.116
creation time and then you tell

00:09:39.116 --> 00:09:40.836
your snapshotter to create that

00:09:40.836 --> 00:09:41.636
snapshot for you.

00:09:46.286 --> 00:09:48.486
And that's how easy it is to use

00:09:48.576 --> 00:09:50.366
the map in Dark Mode in your

00:09:50.366 --> 00:09:50.816
apps.

00:09:51.366 --> 00:09:53.726
So, the next thing I want to

00:09:53.726 --> 00:09:56.806
talk about is a set of new APIs

00:09:56.856 --> 00:09:59.386
in MapKit and MapKit JS that

00:09:59.386 --> 00:10:00.796
lets you take control over the

00:10:00.856 --> 00:10:02.376
point of interest icons that are

00:10:02.376 --> 00:10:03.976
shown in your map views.

00:10:06.126 --> 00:10:07.276
If you've ever looked at our

00:10:07.276 --> 00:10:08.806
maps, you've probably seen that

00:10:08.806 --> 00:10:10.296
apart from all the roads,

00:10:10.296 --> 00:10:12.456
buildings, parks and water,

00:10:12.746 --> 00:10:14.236
there's all these little icons

00:10:14.236 --> 00:10:16.566
representing restaurants,

00:10:16.966 --> 00:10:19.466
museums, parking and so on.

00:10:20.106 --> 00:10:21.676
And this information is great

00:10:21.746 --> 00:10:24.126
for users to better understand

00:10:24.126 --> 00:10:25.516
what the area they're looking at

00:10:25.516 --> 00:10:27.046
is all about.

00:10:28.296 --> 00:10:30.016
But if you're building a feature

00:10:30.326 --> 00:10:32.596
where you're promoting hotels

00:10:32.596 --> 00:10:35.346
and hostels for example, you

00:10:35.346 --> 00:10:36.916
probably have your own data that

00:10:36.916 --> 00:10:38.106
you will be adding to the map

00:10:38.106 --> 00:10:39.526
view as annotation views.

00:10:40.376 --> 00:10:41.606
And in that case, you may not

00:10:41.606 --> 00:10:43.526
want these built-in icons to

00:10:43.526 --> 00:10:45.566
show either because they're

00:10:45.566 --> 00:10:47.236
duplicating the information

00:10:47.236 --> 00:10:49.476
you're adding or because you

00:10:49.476 --> 00:10:50.836
don't want to show businesses

00:10:50.836 --> 00:10:52.026
that are not connected to your

00:10:52.026 --> 00:10:52.796
service.

00:10:54.466 --> 00:10:56.186
In the past, your only option

00:10:56.186 --> 00:10:58.376
has been to turn off all the

00:10:58.376 --> 00:11:00.546
point of interest icons but that

00:11:00.546 --> 00:11:03.166
means that your users are losing

00:11:03.166 --> 00:11:04.416
out on a lot of valuable

00:11:04.416 --> 00:11:05.026
context.

00:11:06.066 --> 00:11:07.436
So what you want to do instead

00:11:07.836 --> 00:11:09.356
is to filter those point of

00:11:09.356 --> 00:11:11.086
interest icons based on their

00:11:11.086 --> 00:11:11.976
categories.

00:11:13.336 --> 00:11:15.856
So, MapKit and MapKit JS now

00:11:15.856 --> 00:11:18.736
expose a list of categories that

00:11:18.736 --> 00:11:20.036
we think you will find useful

00:11:20.036 --> 00:11:22.026
when you're building your apps

00:11:22.526 --> 00:11:26.126
[applause].

00:11:26.626 --> 00:11:28.356
And this is obviously not an

00:11:28.356 --> 00:11:29.676
all-inclusive list.

00:11:29.886 --> 00:11:31.176
So if you see one that is

00:11:31.176 --> 00:11:32.946
missing, come by our lab

00:11:32.946 --> 00:11:34.886
tomorrow or send us your

00:11:34.886 --> 00:11:37.266
feedback and most importantly,

00:11:37.266 --> 00:11:39.356
tell us about your use case.

00:11:39.906 --> 00:11:43.576
So, you use these categories to

00:11:43.576 --> 00:11:45.846
create a pointOfInterestFilter.

00:11:46.396 --> 00:11:47.906
And when you create your filter,

00:11:47.906 --> 00:11:49.346
you can configure it to either

00:11:49.376 --> 00:11:51.736
include categories or exclude

00:11:51.736 --> 00:11:52.426
categories.

00:11:53.206 --> 00:11:54.066
So let's take a look at a few

00:11:54.066 --> 00:11:55.846
examples of this.

00:11:56.476 --> 00:11:58.506
By default, the map view does

00:11:58.506 --> 00:12:00.746
not apply any filter at all.

00:12:00.746 --> 00:12:01.836
So, all the point of interest

00:12:01.836 --> 00:12:03.256
icons are showing.

00:12:04.236 --> 00:12:05.926
But in our case, we wanted

00:12:05.926 --> 00:12:07.646
hotels and hostel and the like

00:12:07.806 --> 00:12:09.556
to not actually show.

00:12:10.396 --> 00:12:11.576
And you can achieve this by

00:12:11.576 --> 00:12:13.936
creating an exclusion filter

00:12:14.136 --> 00:12:15.506
with the category hotel.

00:12:16.726 --> 00:12:18.206
This ensures that no hotels or

00:12:18.206 --> 00:12:19.736
hostels are shown but the rest

00:12:19.736 --> 00:12:21.186
of the context is preserved.

00:12:21.816 --> 00:12:23.966
If you instead know which

00:12:23.966 --> 00:12:25.866
categories are relevant in your

00:12:25.866 --> 00:12:27.756
use case, you can create an

00:12:27.826 --> 00:12:29.866
inclusion filter with those

00:12:29.866 --> 00:12:30.626
categories.

00:12:31.426 --> 00:12:33.866
So, this filter for example will

00:12:33.866 --> 00:12:36.366
filter out the courthouse, and

00:12:36.366 --> 00:12:37.536
the beauty and barber shop

00:12:37.536 --> 00:12:40.046
around the corner and only show

00:12:40.046 --> 00:12:41.056
point of interest from the

00:12:41.056 --> 00:12:42.216
selected categories,

00:12:42.346 --> 00:12:44.416
restaurants, night life, and

00:12:44.476 --> 00:12:45.816
parking and cafés.

00:12:46.346 --> 00:12:48.826
And if you do want to turn off

00:12:48.826 --> 00:12:50.046
all the point of interest icons,

00:12:50.046 --> 00:12:52.066
you can still do that using an

00:12:52.066 --> 00:12:52.976
excluding all filter.

00:12:56.676 --> 00:12:57.836
Point of interest filtering

00:12:57.836 --> 00:13:01.046
support is also coming to MapKit

00:13:01.046 --> 00:13:03.006
JS this fall, and it works in a

00:13:03.006 --> 00:13:04.046
very similar way.

00:13:04.606 --> 00:13:05.416
We're adding a

00:13:05.416 --> 00:13:06.976
pointOfInterestFilter to the

00:13:06.976 --> 00:13:09.926
MapKit object and you create a

00:13:09.926 --> 00:13:12.296
filter using a list of point of

00:13:12.296 --> 00:13:14.426
interest category values.

00:13:15.066 --> 00:13:16.576
Once you've created your filter,

00:13:16.846 --> 00:13:18.126
you apply it to the

00:13:18.126 --> 00:13:19.846
pointOfInterestFilter property

00:13:19.986 --> 00:13:21.346
on your map.

00:13:23.876 --> 00:13:26.236
So, the map view is definitely

00:13:26.236 --> 00:13:28.416
MapKit and MapKit JS's most

00:13:28.526 --> 00:13:29.466
prominent feature.

00:13:30.236 --> 00:13:31.356
But another important

00:13:31.846 --> 00:13:34.676
cornerstone is the support for

00:13:34.676 --> 00:13:36.606
search and autocompletion.

00:13:37.746 --> 00:13:38.856
So, the next thing I'm going to

00:13:38.856 --> 00:13:40.766
talk about is how you can

00:13:40.766 --> 00:13:42.896
improve the results from search

00:13:42.896 --> 00:13:44.076
and autocompletion using

00:13:44.076 --> 00:13:44.556
filtering.

00:13:45.136 --> 00:13:50.106
The companion app uses search

00:13:50.106 --> 00:13:51.316
and autocompletion support from

00:13:51.316 --> 00:13:52.826
MapKit for its After Hours

00:13:52.826 --> 00:13:53.206
feature.

00:13:54.316 --> 00:13:56.726
So, as the user is typing, the

00:13:56.726 --> 00:13:58.046
autosuggest-- autocompletion

00:13:58.046 --> 00:13:59.566
suggestions are coming from

00:13:59.906 --> 00:14:01.246
MKLocalSearchCompleter.

00:14:02.636 --> 00:14:04.086
And the results shown on the map

00:14:04.086 --> 00:14:06.286
are fetched using MKLocalSearch.

00:14:07.396 --> 00:14:09.436
But if we take a step back and

00:14:09.436 --> 00:14:10.796
look at those suggestions again,

00:14:10.796 --> 00:14:12.966
we realize that in a feature

00:14:12.966 --> 00:14:14.426
where we expect our users to

00:14:14.426 --> 00:14:16.676
search for bars and restaurants,

00:14:17.226 --> 00:14:19.416
a middle school is not a very

00:14:19.476 --> 00:14:20.366
relevant suggestion.

00:14:21.306 --> 00:14:22.776
Fortunately, the

00:14:22.776 --> 00:14:24.836
pointOfInterestFilter we used to

00:14:24.836 --> 00:14:26.956
filter our map view before also

00:14:26.956 --> 00:14:28.796
works both for search and

00:14:28.796 --> 00:14:29.666
autocompletion.

00:14:30.236 --> 00:14:33.166
So, you can create your filter

00:14:33.166 --> 00:14:35.816
for your search feature and

00:14:35.816 --> 00:14:37.016
apply it to your

00:14:37.016 --> 00:14:39.546
MKLocalSearhCompleter and apply

00:14:39.546 --> 00:14:39.916
it to your

00:14:39.916 --> 00:14:41.216
MKLocalSearch.Request.

00:14:42.416 --> 00:14:43.526
And this will narrow down your

00:14:43.526 --> 00:14:45.226
results to a much more relevant

00:14:45.226 --> 00:14:45.566
set.

00:14:46.206 --> 00:14:49.066
But there's still addresses

00:14:49.116 --> 00:14:50.066
showing in this list.

00:14:50.516 --> 00:14:52.316
And that's because addresses are

00:14:52.316 --> 00:14:54.446
distinctly different from point

00:14:54.446 --> 00:14:55.936
of interest, which generally

00:14:55.936 --> 00:14:57.576
represents landmarks or

00:14:57.576 --> 00:14:58.396
businesses.

00:14:59.426 --> 00:15:00.626
So, to further improve the

00:15:00.626 --> 00:15:02.426
results in this list, we want to

00:15:02.426 --> 00:15:03.826
focus the search and

00:15:03.826 --> 00:15:05.796
autocompletion results to just

00:15:05.906 --> 00:15:06.576
point of interest.

00:15:07.276 --> 00:15:10.756
Up until now, MapKit has only

00:15:10.756 --> 00:15:12.776
supported result type filtering

00:15:12.826 --> 00:15:14.656
for MKLocalSearchCompleter.

00:15:15.526 --> 00:15:16.956
And you did this using the

00:15:16.956 --> 00:15:18.116
filterType property.

00:15:19.466 --> 00:15:21.566
But the value locations only

00:15:21.736 --> 00:15:22.976
still meant that you will get

00:15:23.126 --> 00:15:24.926
both addresses and point of

00:15:24.926 --> 00:15:26.826
interest, which is not enough to

00:15:26.826 --> 00:15:27.396
help us here.

00:15:28.146 --> 00:15:30.186
So to address this, we have

00:15:30.186 --> 00:15:32.196
introduced two new option sets

00:15:32.346 --> 00:15:33.516
called ResultType.

00:15:34.546 --> 00:15:36.946
And you use these option sets to

00:15:36.946 --> 00:15:38.406
configure the type of results

00:15:38.406 --> 00:15:40.806
you want from both search and

00:15:40.806 --> 00:15:41.556
autocompletion.

00:15:42.156 --> 00:15:45.436
So the option set for

00:15:45.436 --> 00:15:47.396
MKLocalSearchCompleter that you

00:15:47.396 --> 00:15:49.146
pick any combination you want

00:15:49.206 --> 00:15:50.876
from addresses, points of

00:15:50.876 --> 00:15:52.686
interests and queries.

00:15:52.976 --> 00:15:55.716
And for MKLocalSearch.Request

00:15:56.286 --> 00:15:57.466
you can pick and choose between

00:15:57.466 --> 00:15:58.696
addresses and point of

00:15:58.696 --> 00:15:59.356
interests.

00:15:59.866 --> 00:16:02.706
So you can now easily just

00:16:02.706 --> 00:16:05.746
configure your completer and

00:16:05.746 --> 00:16:07.396
your request to only request

00:16:07.396 --> 00:16:07.976
point of interests.

00:16:11.086 --> 00:16:12.956
And the result you get back from

00:16:12.956 --> 00:16:16.296
MKLocalSearch is an array of

00:16:16.456 --> 00:16:17.806
MKMapItems.

00:16:18.646 --> 00:16:20.096
And MapItems contain a lot of

00:16:20.096 --> 00:16:21.856
useful information like the

00:16:21.856 --> 00:16:23.146
location coordinate of that

00:16:23.146 --> 00:16:24.876
result, and address.

00:16:25.136 --> 00:16:26.326
And in some cases, you can also

00:16:26.326 --> 00:16:27.766
have a name for that place, a

00:16:27.766 --> 00:16:29.586
phone number, or even a URL.

00:16:31.006 --> 00:16:32.546
To make it easier for you to

00:16:32.546 --> 00:16:34.376
reason about the type of results

00:16:34.376 --> 00:16:35.846
you're getting, we have added a

00:16:35.846 --> 00:16:37.606
new property called point of

00:16:37.676 --> 00:16:38.916
interest category.

00:16:40.316 --> 00:16:42.756
So if you make a search for ABC,

00:16:42.756 --> 00:16:45.776
if you make a search for ABC,

00:16:45.776 --> 00:16:49.266
you might get the results Al's

00:16:49.416 --> 00:16:51.446
Beet Canteen and ABC Brewing,

00:16:51.616 --> 00:16:52.216
for example.

00:16:53.166 --> 00:16:54.286
And if you inspect the point of

00:16:54.286 --> 00:16:55.476
interest categories of these

00:16:55.476 --> 00:16:57.126
results, you will see that they

00:16:57.126 --> 00:16:59.126
are a restaurant and a brewery

00:16:59.126 --> 00:16:59.806
respectively.

00:17:00.996 --> 00:17:03.666
If you would apply an inclusion

00:17:03.666 --> 00:17:05.086
filter with the category

00:17:05.086 --> 00:17:07.086
brewery, Al's Beet Canteen will

00:17:07.086 --> 00:17:08.685
no longer show up.

00:17:08.976 --> 00:17:12.316
However, ABC Brewing also runs a

00:17:12.346 --> 00:17:13.606
restaurant as part of their

00:17:13.606 --> 00:17:16.316
business, which means if we

00:17:16.316 --> 00:17:18.516
apply an inclusion filter with

00:17:18.516 --> 00:17:20.646
the category restaurant, we may

00:17:20.646 --> 00:17:22.955
still see ABC Brewing in our

00:17:22.955 --> 00:17:23.776
search results.

00:17:24.746 --> 00:17:25.726
And if we inspect the point of

00:17:25.726 --> 00:17:27.596
interest category, it will still

00:17:27.596 --> 00:17:29.706
be brewery because that's ABC

00:17:29.706 --> 00:17:31.396
breweries-- ABC Brewing's

00:17:31.796 --> 00:17:32.856
primary category.

00:17:35.356 --> 00:17:36.826
The same search and

00:17:36.826 --> 00:17:38.686
autocompletion filtering support

00:17:38.686 --> 00:17:40.106
is coming to MapKit JS this

00:17:40.106 --> 00:17:40.596
fall.

00:17:41.336 --> 00:17:43.106
And you filter the point of

00:17:43.106 --> 00:17:44.586
interests by applying your

00:17:44.586 --> 00:17:46.476
pointOfInterest filter directly

00:17:46.476 --> 00:17:47.496
to the search object.

00:17:48.616 --> 00:17:50.246
And to narrow down the type of

00:17:50.246 --> 00:17:51.926
results you're getting, you use

00:17:51.926 --> 00:17:53.066
the new properties

00:17:53.176 --> 00:17:54.406
includeAddresses,

00:17:54.526 --> 00:17:56.356
includePointOfInterest, and

00:17:56.356 --> 00:17:58.566
includeQueries also found on the

00:17:58.566 --> 00:17:59.246
search object.

00:17:59.756 --> 00:18:01.796
All right.

00:18:02.046 --> 00:18:03.106
And with that I will hand it

00:18:03.106 --> 00:18:04.816
over to my colleague Nalini, who

00:18:04.816 --> 00:18:06.426
will show you how quick and easy

00:18:06.426 --> 00:18:08.166
it is to improve the relevance

00:18:08.166 --> 00:18:09.566
of your search results using

00:18:09.566 --> 00:18:10.516
these new APIs.

00:18:11.516 --> 00:18:16.546
[ Applause ]

00:18:17.046 --> 00:18:17.936
>> Thank you, Alexander.

00:18:18.676 --> 00:18:20.116
Hi. I'm Nalini and I'm a

00:18:20.116 --> 00:18:21.336
software engineer in the MapKit

00:18:21.336 --> 00:18:22.006
Framework team.

00:18:22.506 --> 00:18:24.256
Alexander already showed the

00:18:24.256 --> 00:18:25.776
WWDC companion app we'll be

00:18:25.776 --> 00:18:26.956
building throughout the session.

00:18:27.606 --> 00:18:29.146
We already have a version of the

00:18:29.146 --> 00:18:30.806
application that implement some

00:18:30.806 --> 00:18:32.496
of the functionality but isn't

00:18:32.496 --> 00:18:33.196
quite there yet.

00:18:33.606 --> 00:18:34.956
Let me show it to you.

00:18:35.456 --> 00:18:36.426
Here, we are looking at the

00:18:36.426 --> 00:18:38.026
After Hours feature where we'll

00:18:38.026 --> 00:18:39.386
be exploring places around San

00:18:39.386 --> 00:18:39.756
Jose.

00:18:40.996 --> 00:18:42.586
We have a map view set up with a

00:18:42.586 --> 00:18:43.096
search bar.

00:18:43.576 --> 00:18:44.496
The search bar uses

00:18:44.496 --> 00:18:46.456
MKLocalSearchCompleter and

00:18:46.456 --> 00:18:48.406
MKLocalSearch to search Apple

00:18:48.406 --> 00:18:48.966
Maps later.

00:18:49.776 --> 00:18:51.166
This functionality has existed

00:18:51.166 --> 00:18:52.586
since iOS 9.3.

00:18:52.626 --> 00:18:54.546
Let's go ahead and search for

00:18:54.546 --> 00:18:54.946
something.

00:18:59.226 --> 00:19:00.916
As I'm typing we receive

00:19:00.916 --> 00:19:02.306
autocomplete suggestions.

00:19:02.656 --> 00:19:04.246
As an attendee at the

00:19:04.246 --> 00:19:05.956
conference, we are not

00:19:05.956 --> 00:19:07.316
interested in some of these

00:19:07.316 --> 00:19:07.856
results.

00:19:08.986 --> 00:19:10.396
Let's go ahead and issue a

00:19:10.396 --> 00:19:10.956
search.

00:19:13.686 --> 00:19:14.866
We observed a similar

00:19:14.866 --> 00:19:15.706
experience.

00:19:16.066 --> 00:19:17.956
We get back results that are not

00:19:17.986 --> 00:19:19.416
relevant for our use case.

00:19:20.026 --> 00:19:22.016
Let's see how to improve this

00:19:22.016 --> 00:19:23.396
experience using

00:19:23.396 --> 00:19:25.166
pointOfInterestFilter and result

00:19:25.166 --> 00:19:25.976
types APIs.

00:19:28.576 --> 00:19:30.096
Here we are looking at the After

00:19:30.096 --> 00:19:31.396
Hours view controller where

00:19:31.396 --> 00:19:32.756
autocompletion and search are

00:19:32.756 --> 00:19:33.146
set up.

00:19:34.126 --> 00:19:34.766
We'll declare a

00:19:34.766 --> 00:19:38.316
pointOfInterestFilter that we

00:19:38.546 --> 00:19:40.336
will leverage for both

00:19:40.336 --> 00:19:42.086
autocompletion and search.

00:19:42.706 --> 00:19:44.116
The categories we are interested

00:19:44.116 --> 00:19:46.536
in are night life and restaurant

00:19:46.826 --> 00:19:47.926
for our use case.

00:19:49.186 --> 00:19:49.936
We'll apply the

00:19:49.936 --> 00:19:51.326
pointOfInterestFilter to the

00:19:51.326 --> 00:19:51.976
searchCompleter.

00:19:58.706 --> 00:20:00.396
Address results are not relevant

00:20:00.396 --> 00:20:01.316
for our use case.

00:20:01.726 --> 00:20:03.556
We limit the result types to

00:20:03.556 --> 00:20:04.506
pointOfInterest.

00:20:08.356 --> 00:20:10.266
The changes we just did affect

00:20:10.266 --> 00:20:11.556
autocompletion.

00:20:12.126 --> 00:20:14.026
Let's see how to apply the same

00:20:14.026 --> 00:20:16.906
filter to search.

00:20:17.106 --> 00:20:19.216
When user issues a search, we

00:20:19.216 --> 00:20:20.536
form a local search request.

00:20:21.326 --> 00:20:21.976
We'll apply the

00:20:21.976 --> 00:20:23.626
pointOfInterestFilter to the

00:20:23.626 --> 00:20:24.946
search request.

00:20:28.056 --> 00:20:29.336
We limit the result types to

00:20:29.336 --> 00:20:29.976
pointOfInterest.

00:20:35.276 --> 00:20:36.346
Now that we have

00:20:36.346 --> 00:20:38.186
pointOfInterestFilter and result

00:20:38.186 --> 00:20:39.816
types applied to both

00:20:39.816 --> 00:20:41.846
autocompletion and search, let's

00:20:41.846 --> 00:20:42.976
execute our application.

00:20:48.616 --> 00:20:49.956
Looking at the After Hours

00:20:49.956 --> 00:20:51.396
feature, we'll go ahead and

00:20:51.396 --> 00:20:52.306
search for the same source

00:20:52.306 --> 00:20:52.626
string.

00:20:53.236 --> 00:20:57.366
As you can see, we get results

00:20:57.366 --> 00:20:58.826
relevant to our use case.

00:21:01.596 --> 00:21:03.326
And when we issue a search, we

00:21:03.326 --> 00:21:05.126
also get relevant results which

00:21:05.126 --> 00:21:06.746
are displayed as annotations on

00:21:06.746 --> 00:21:07.256
the map view.

00:21:07.936 --> 00:21:09.686
We just saw how to improve the

00:21:09.686 --> 00:21:11.106
autocompletion and search

00:21:11.106 --> 00:21:12.576
experience using

00:21:12.576 --> 00:21:14.526
pointOfInterestFilter and result

00:21:14.526 --> 00:21:15.396
types APIs.

00:21:15.606 --> 00:21:17.026
With that, I hand over back to

00:21:17.026 --> 00:21:17.526
Alexander.

00:21:18.516 --> 00:21:20.586
[ Applause ]

00:21:21.086 --> 00:21:25.656
>> OK. So that was five lines of

00:21:25.706 --> 00:21:27.476
code to get rid of all those

00:21:27.476 --> 00:21:28.676
irrelevant results.

00:21:28.886 --> 00:21:30.786
So if you're using search for

00:21:30.786 --> 00:21:31.976
autocompletion in your apps

00:21:31.976 --> 00:21:33.696
today, I strongly recommend you

00:21:33.696 --> 00:21:35.396
to try out these new APIs.

00:21:35.856 --> 00:21:38.436
And that's all we're going to

00:21:38.436 --> 00:21:40.146
cover for search and

00:21:40.146 --> 00:21:43.156
autocompletion filtering today.

00:21:43.666 --> 00:21:44.996
So next I want to tell you about

00:21:44.996 --> 00:21:46.456
some really nice improvements we

00:21:46.456 --> 00:21:48.906
have made to our overlay APIs in

00:21:48.906 --> 00:21:49.346
MapKit.

00:21:50.386 --> 00:21:52.246
Overlays are used to layer

00:21:52.496 --> 00:21:54.766
custom content over a wider area

00:21:54.766 --> 00:21:56.706
of your map view and they

00:21:56.706 --> 00:21:58.406
generally represent geometric

00:21:58.406 --> 00:22:00.976
shapes like lines or polygons.

00:22:01.526 --> 00:22:03.166
And to show you these

00:22:03.166 --> 00:22:04.236
improvements we're going to take

00:22:04.236 --> 00:22:06.006
a quick look at the event view

00:22:06.156 --> 00:22:07.096
of the companion app.

00:22:08.426 --> 00:22:10.846
So for this feature we want to

00:22:10.876 --> 00:22:12.966
render this simple event map in

00:22:12.966 --> 00:22:13.556
our map view.

00:22:14.796 --> 00:22:16.466
And we'll use overlays to

00:22:16.466 --> 00:22:18.256
represent the food and drinks

00:22:18.256 --> 00:22:19.876
tents and the stage.

00:22:20.476 --> 00:22:21.826
As these-- they're all

00:22:21.826 --> 00:22:23.546
rectangular in shape we can

00:22:23.546 --> 00:22:25.866
model them using MKPolygons.

00:22:26.756 --> 00:22:28.736
And so this map is so simple and

00:22:28.736 --> 00:22:29.736
we're kind of short on time in

00:22:29.736 --> 00:22:31.566
this session, we will style them

00:22:31.566 --> 00:22:32.346
all the same way.

00:22:33.346 --> 00:22:35.256
But for every overlay that you

00:22:35.256 --> 00:22:37.056
add to your map view, you need

00:22:37.056 --> 00:22:40.836
to provide a render object in

00:22:40.836 --> 00:22:41.756
your delegate method.

00:22:42.066 --> 00:22:43.896
If you're adding a lot of

00:22:44.036 --> 00:22:45.666
similar styled overlays like

00:22:45.696 --> 00:22:47.586
this, that means you will be

00:22:47.586 --> 00:22:49.586
creating a lot of render objects

00:22:49.586 --> 00:22:51.006
that are configured exactly the

00:22:51.006 --> 00:22:52.206
same way, and that's kind of

00:22:52.206 --> 00:22:52.676
wasteful.

00:22:53.566 --> 00:22:55.926
This will obviously not lead to

00:22:55.926 --> 00:22:57.486
any noticeable performance

00:22:57.486 --> 00:22:59.176
impact in an app with seven

00:22:59.176 --> 00:22:59.766
overlays.

00:23:00.066 --> 00:23:01.856
But if you are like adding a lot

00:23:02.296 --> 00:23:04.106
of a large number of overlays,

00:23:04.736 --> 00:23:05.876
you can actually notice the

00:23:05.876 --> 00:23:08.776
performance impact of this.

00:23:08.976 --> 00:23:10.166
So to address this, we have

00:23:10.166 --> 00:23:11.926
introduced a few new classes in

00:23:11.926 --> 00:23:12.446
MapKit.

00:23:12.776 --> 00:23:14.186
There are two new overlay

00:23:14.186 --> 00:23:17.346
classes, MKMultiPolygon and

00:23:17.376 --> 00:23:19.896
MKMultiPolyline that you can use

00:23:19.896 --> 00:23:22.336
to group polygons and polylines

00:23:22.336 --> 00:23:22.946
respectively.

00:23:22.946 --> 00:23:26.716
And as I said before, every time

00:23:26.716 --> 00:23:28.046
you add an overlay you need to

00:23:28.046 --> 00:23:29.666
provide a render object.

00:23:30.116 --> 00:23:31.376
So we have introduced two new

00:23:31.376 --> 00:23:32.896
matching render classes,

00:23:33.276 --> 00:23:35.636
MKMultiPolygonRenderer and

00:23:35.636 --> 00:23:37.346
MKMultiPolylineRenderer.

00:23:38.756 --> 00:23:40.296
Using these classes, you can

00:23:40.296 --> 00:23:42.056
dramatically reduce the number

00:23:42.056 --> 00:23:43.396
of render objects need-- that

00:23:43.396 --> 00:23:44.586
you need to create in your apps

00:23:44.876 --> 00:23:45.786
and thereby improve the

00:23:45.786 --> 00:23:46.506
performance.

00:23:47.366 --> 00:23:48.176
So let's look at a simple

00:23:48.176 --> 00:23:48.986
example of this.

00:23:50.446 --> 00:23:51.746
So here we're creating the

00:23:51.746 --> 00:23:53.826
polygon for the stage using the

00:23:53.826 --> 00:23:54.926
coordinates above.

00:23:55.446 --> 00:23:56.796
And after creating all the other

00:23:56.796 --> 00:23:58.126
polygons, we're adding them

00:23:58.126 --> 00:24:00.106
straight to the map view.

00:24:00.266 --> 00:24:02.276
But this means, like I said

00:24:02.276 --> 00:24:03.516
before, the delegate will be

00:24:03.516 --> 00:24:05.576
asked to create seven renderers.

00:24:06.306 --> 00:24:07.796
So what you instead want to do

00:24:07.796 --> 00:24:09.456
is to take all those polygons

00:24:09.506 --> 00:24:11.016
and group them into an

00:24:11.016 --> 00:24:13.606
MKMultiPolygon and then simply

00:24:13.606 --> 00:24:16.076
add that MultiPolygon to your

00:24:16.666 --> 00:24:17.846
map view.

00:24:18.046 --> 00:24:19.246
Once you have updated your code

00:24:19.246 --> 00:24:21.136
to add MultiPolygons instead,

00:24:21.426 --> 00:24:22.396
you also need to update your

00:24:22.396 --> 00:24:24.636
delegate method to expect

00:24:24.916 --> 00:24:25.936
MultiPolygons.

00:24:26.646 --> 00:24:27.956
And when you get one you need to

00:24:27.956 --> 00:24:30.746
create a MKMultiPolygonRenderer

00:24:30.746 --> 00:24:31.096
object.

00:24:31.596 --> 00:24:32.766
And this is done the exact the

00:24:32.766 --> 00:24:34.546
same way as the old

00:24:34.546 --> 00:24:35.536
MKPolygonRenderer.

00:24:36.026 --> 00:24:39.426
Apart from saving memory by

00:24:39.426 --> 00:24:41.256
creating a fewer number of

00:24:41.256 --> 00:24:43.026
render objects, this also

00:24:43.026 --> 00:24:44.336
improves the rendering

00:24:44.336 --> 00:24:46.086
performance because MapKit can

00:24:46.086 --> 00:24:47.916
now be smarter and batch up the

00:24:47.916 --> 00:24:49.286
rendering of those polygons for

00:24:49.286 --> 00:24:49.426
you.

00:24:50.946 --> 00:24:52.506
Another improvement we have made

00:24:52.696 --> 00:24:54.526
is that MapKit will now

00:24:54.526 --> 00:24:56.536
automatically render all your

00:24:57.296 --> 00:24:59.496
overlays that you create using

00:24:59.496 --> 00:25:01.056
the built-in MapKit render

00:25:01.056 --> 00:25:03.266
objects as vector graphics

00:25:03.446 --> 00:25:04.576
instead of bitmaps.

00:25:05.126 --> 00:25:07.546
And vector rendering greatly

00:25:07.546 --> 00:25:08.906
improves the look of your

00:25:08.906 --> 00:25:11.586
overlays when the user interacts

00:25:11.586 --> 00:25:13.196
with the map because they scale

00:25:13.196 --> 00:25:15.046
much more nicely when the user

00:25:15.046 --> 00:25:17.236
zooms in and out in the map

00:25:17.236 --> 00:25:17.456
view.

00:25:18.426 --> 00:25:21.306
If you're adding very large and

00:25:21.306 --> 00:25:22.666
complex overlays and they're for

00:25:22.666 --> 00:25:24.266
some reason not looking quite

00:25:24.266 --> 00:25:25.716
right when rendered as vector

00:25:25.716 --> 00:25:27.886
graphics, you can opt out of

00:25:27.886 --> 00:25:30.256
vector rendering using the

00:25:30.256 --> 00:25:32.166
shouldRasterize property on the

00:25:32.166 --> 00:25:32.616
renderer.

00:25:33.206 --> 00:25:36.726
And that's how you use the new

00:25:36.726 --> 00:25:37.976
overlay APIs in MapKit.

00:25:38.516 --> 00:25:43.526
[ Applause ]

00:25:44.026 --> 00:25:44.916
So the next thing I want to

00:25:44.916 --> 00:25:46.766
cover is MapKit's new support

00:25:46.766 --> 00:25:48.216
for GeoJSON.

00:25:49.096 --> 00:25:52.066
GeoJSON is a widely used storage

00:25:52.066 --> 00:25:54.406
and wire format for representing

00:25:54.406 --> 00:25:56.216
geometric objects like points,

00:25:56.326 --> 00:25:57.906
lines and polygons.

00:25:58.576 --> 00:26:00.246
And a lot of vendors publish

00:26:00.246 --> 00:26:02.136
their data as GeoJSON.

00:26:02.566 --> 00:26:03.726
So some of you may already have

00:26:03.726 --> 00:26:05.496
written code to parse that

00:26:05.496 --> 00:26:08.556
GeoJSON, create annotations and

00:26:08.556 --> 00:26:09.876
overlays that you're adding to

00:26:10.106 --> 00:26:11.226
your map view.

00:26:11.626 --> 00:26:13.606
So with these new APIs, we're

00:26:13.606 --> 00:26:15.866
hoping that working with GeoJSON

00:26:15.866 --> 00:26:17.606
will be easier than ever and

00:26:17.606 --> 00:26:18.946
maybe you can even delete some

00:26:18.946 --> 00:26:19.976
of that code you have written.

00:26:20.516 --> 00:26:24.166
[ Applause ]

00:26:24.666 --> 00:26:26.046
For those of you who are not

00:26:26.046 --> 00:26:28.426
familiar with GeoJSON, here's a

00:26:28.426 --> 00:26:30.006
very simple example of how it

00:26:30.006 --> 00:26:31.786
can represent a location.

00:26:32.166 --> 00:26:35.096
At the top level there's the

00:26:35.456 --> 00:26:37.176
type member that lets us know

00:26:37.176 --> 00:26:40.416
that this is a feature and a

00:26:40.456 --> 00:26:42.016
feature can have an optional

00:26:42.016 --> 00:26:43.796
identifier which you can use to

00:26:43.796 --> 00:26:45.366
uniquely identify this feature

00:26:45.396 --> 00:26:46.116
among others.

00:26:46.636 --> 00:26:49.926
And this feature is defined by a

00:26:49.926 --> 00:26:52.756
single geometry, a point, but a

00:26:52.756 --> 00:26:53.966
feature can also have multiple

00:26:53.966 --> 00:26:54.666
geometries.

00:26:55.416 --> 00:26:57.406
And in addition to the geometry

00:26:57.806 --> 00:26:59.496
there's the properties member

00:26:59.946 --> 00:27:01.376
which in this case just contains

00:27:01.376 --> 00:27:03.306
the name of this location, the

00:27:03.306 --> 00:27:03.896
stage.

00:27:04.906 --> 00:27:07.816
So to represent this feature in

00:27:07.816 --> 00:27:09.306
MapKits, we have introduced a

00:27:09.306 --> 00:27:11.116
new class called

00:27:11.116 --> 00:27:12.216
MKGeoJSONFeature.

00:27:13.176 --> 00:27:14.606
And this class is simply a data

00:27:14.606 --> 00:27:15.756
container that holds the

00:27:15.756 --> 00:27:18.946
identifier, the decoded geometry

00:27:19.316 --> 00:27:20.696
and the properties.

00:27:22.036 --> 00:27:25.526
So to get from your GeoJSON to

00:27:25.656 --> 00:27:27.296
actual MapKit classes, we have

00:27:27.296 --> 00:27:29.446
introduced another class called

00:27:29.446 --> 00:27:30.846
MKGeoJSONDecoder.

00:27:31.546 --> 00:27:34.066
If you've ever used Swift's JSON

00:27:34.066 --> 00:27:36.646
decoder, MKGeoJSONDecoder should

00:27:36.646 --> 00:27:37.906
feel pretty familiar to you.

00:27:38.976 --> 00:27:40.556
You simply create your decoder,

00:27:41.266 --> 00:27:43.436
you passage your data and it

00:27:43.436 --> 00:27:45.396
will return an array of either

00:27:45.396 --> 00:27:51.656
MKGeoJSONFeatures or MapKit's

00:27:51.736 --> 00:27:54.756
geometry such as MKPolygon or

00:27:54.756 --> 00:27:56.236
MKPolylines and so on.

00:27:56.936 --> 00:27:58.366
And this depends on how your

00:27:58.366 --> 00:28:00.016
GeoJSON is structured because

00:28:00.016 --> 00:28:01.846
you can either have features in

00:28:01.846 --> 00:28:03.706
your top level or geometry in

00:28:03.706 --> 00:28:05.276
your top level GeoJSON.

00:28:05.276 --> 00:28:08.346
So if you take a look at how

00:28:08.346 --> 00:28:10.436
this example GeoJSON from before

00:28:10.436 --> 00:28:11.426
would be decoded by the

00:28:11.426 --> 00:28:14.576
MKGeoJSONDecoder, we can realize

00:28:14.576 --> 00:28:16.156
that since this one has a single

00:28:16.156 --> 00:28:18.606
feature, our resulting array

00:28:18.606 --> 00:28:19.816
will just have one item.

00:28:20.656 --> 00:28:22.556
But the decoder also decodes the

00:28:22.556 --> 00:28:24.876
geometry into MapKit classes.

00:28:25.146 --> 00:28:28.086
So the point location here will

00:28:28.086 --> 00:28:29.526
be decoded as an

00:28:29.526 --> 00:28:32.126
MKPointAnnotation and the

00:28:32.126 --> 00:28:33.536
feature itself will be decoded

00:28:33.536 --> 00:28:36.136
as an MKGeoJSONFeature with a

00:28:36.136 --> 00:28:37.226
reference to that

00:28:37.226 --> 00:28:37.976
MKPointAnnotation.

00:28:40.556 --> 00:28:41.896
So with the introduction of

00:28:41.976 --> 00:28:44.206
MKMultiPolygon and MultiPolyline

00:28:44.206 --> 00:28:45.466
that I've talked about before,

00:28:46.026 --> 00:28:47.486
MapKit now has a complete

00:28:47.486 --> 00:28:49.566
mapping from GeoJSON geometry

00:28:49.946 --> 00:28:51.086
into MapKit classes.

00:28:51.916 --> 00:28:53.156
And this means that once you

00:28:53.156 --> 00:28:55.266
have decoded your GeoJSON, you

00:28:55.266 --> 00:28:56.886
will have annotations and

00:28:56.886 --> 00:28:58.206
overlays that are more or less

00:28:58.206 --> 00:28:59.626
ready to be added to your map

00:28:59.626 --> 00:28:59.946
views.

00:29:00.786 --> 00:29:02.356
So let's look at a simple

00:29:02.356 --> 00:29:04.506
example of this.

00:29:04.686 --> 00:29:05.996
First, you create your decoder

00:29:07.126 --> 00:29:08.166
and you passage your data.

00:29:08.866 --> 00:29:11.156
And as I said, depending on how

00:29:11.156 --> 00:29:12.716
your GeoJSON is structured, you

00:29:12.716 --> 00:29:14.206
can then either work with your

00:29:14.206 --> 00:29:17.066
top level features or your

00:29:17.136 --> 00:29:17.926
geometries.

00:29:18.476 --> 00:29:20.436
If you're doing additional

00:29:20.436 --> 00:29:23.096
parsing of a feature, you use

00:29:23.626 --> 00:29:25.216
the geometry property to get

00:29:25.216 --> 00:29:26.806
access to those polygons and

00:29:26.806 --> 00:29:27.376
polylines.

00:29:28.216 --> 00:29:29.526
In our example, we knew that the

00:29:29.526 --> 00:29:31.486
GeoJSON would only have a single

00:29:31.486 --> 00:29:34.236
feature and a point geometry.

00:29:34.236 --> 00:29:35.706
So this code is making some

00:29:35.706 --> 00:29:36.356
assumptions.

00:29:37.726 --> 00:29:38.896
In most cases, you would want

00:29:38.896 --> 00:29:40.336
this part of your code to also

00:29:40.336 --> 00:29:43.186
take MKPolygons, MultiPolylines

00:29:43.186 --> 00:29:44.466
and so on into consideration.

00:29:45.036 --> 00:29:48.366
In the GeoJSON specification,

00:29:48.696 --> 00:29:51.726
the properties member can be any

00:29:51.726 --> 00:29:53.396
valid JSON or even null.

00:29:53.746 --> 00:29:55.596
And this means that MapKit

00:29:55.636 --> 00:29:56.766
cannot really make any

00:29:56.766 --> 00:29:58.726
assumptions about how to parse

00:29:58.806 --> 00:29:59.226
this data.

00:30:00.436 --> 00:30:03.296
So MKGeoJSONFeature exposes its

00:30:03.346 --> 00:30:05.296
properties as the data type.

00:30:06.436 --> 00:30:08.396
So if you know the structure of

00:30:08.396 --> 00:30:11.396
your properties, you can use the

00:30:11.396 --> 00:30:15.426
JSON decoder to map up data into

00:30:15.426 --> 00:30:16.746
an appropriate model class.

00:30:17.546 --> 00:30:18.696
In our case we know that the

00:30:18.696 --> 00:30:19.976
properties contained a string

00:30:19.976 --> 00:30:20.926
mapping to a string.

00:30:21.606 --> 00:30:23.016
So we will simply map it to a

00:30:23.016 --> 00:30:24.506
dictionary, which makes it

00:30:24.506 --> 00:30:26.116
really for us to read out the

00:30:26.116 --> 00:30:27.316
value for the name key.

00:30:27.866 --> 00:30:30.586
But in some cases, you may not

00:30:30.586 --> 00:30:31.946
be in control over your

00:30:31.946 --> 00:30:32.736
GeoJSONs.

00:30:32.736 --> 00:30:33.896
You may not actually know the

00:30:33.896 --> 00:30:35.776
structure of your properties.

00:30:36.276 --> 00:30:37.636
In that case, you can instead

00:30:37.706 --> 00:30:39.836
use the JSON serialization API

00:30:40.506 --> 00:30:42.796
to dynamically explore the

00:30:42.796 --> 00:30:43.886
properties depending on its

00:30:43.886 --> 00:30:43.976
type.

00:30:48.296 --> 00:30:49.936
So what about MapKit JS?

00:30:50.196 --> 00:30:51.566
We actually already support

00:30:51.686 --> 00:30:53.936
GeoJSON in MapKit JS.

00:30:54.436 --> 00:30:56.776
So you can map your GeoJSON into

00:30:56.776 --> 00:30:59.496
an existing MapKit JS item such

00:30:59.496 --> 00:31:01.456
as annotations, overlays and

00:31:01.456 --> 00:31:02.506
ItemCollections.

00:31:02.896 --> 00:31:04.546
And let's have a look at a quick

00:31:04.546 --> 00:31:05.546
example of that.

00:31:06.026 --> 00:31:08.406
So you simply pass either a URL

00:31:08.406 --> 00:31:11.466
or a valid GeoJSON object to the

00:31:11.466 --> 00:31:13.106
import GeoJSON function on the

00:31:13.106 --> 00:31:13.846
MapKit object.

00:31:14.916 --> 00:31:16.766
This function will return an

00:31:16.766 --> 00:31:18.306
item collection that contains

00:31:18.306 --> 00:31:20.656
one or many MapKit JS items

00:31:21.316 --> 00:31:22.756
which you can then easily add to

00:31:22.756 --> 00:31:25.276
your map object using either add

00:31:25.276 --> 00:31:26.756
items or show items.

00:31:28.646 --> 00:31:30.736
All right, and I will now hand

00:31:30.736 --> 00:31:31.946
it back over to Nalini one more

00:31:31.946 --> 00:31:32.256
time.

00:31:32.366 --> 00:31:33.396
And now she's going to show us

00:31:33.396 --> 00:31:35.596
how you can get that event map

00:31:35.736 --> 00:31:36.826
rendered in the map view.

00:31:37.516 --> 00:31:41.500
[ Applause ]

00:31:44.896 --> 00:31:46.286
>> Let's continue building the

00:31:46.286 --> 00:31:47.776
WWDC Companion app.

00:31:48.566 --> 00:31:49.566
Here we are looking at the

00:31:49.566 --> 00:31:50.896
Concert in The Park feature

00:31:51.326 --> 00:31:52.626
where we have a map you set up

00:31:52.626 --> 00:31:53.716
for the concert area.

00:31:54.656 --> 00:31:56.076
What concert would be complete

00:31:56.076 --> 00:31:57.186
without food and drinks?

00:31:57.576 --> 00:31:59.336
We need tents for these food and

00:31:59.336 --> 00:31:59.796
drinks.

00:32:00.026 --> 00:32:01.816
We'll be rendering these tents

00:32:02.016 --> 00:32:03.776
as overlays and annotations on

00:32:03.776 --> 00:32:04.276
the map view.

00:32:04.886 --> 00:32:06.496
Our data is provided to us in

00:32:06.496 --> 00:32:07.606
GeoJSON format.

00:32:07.916 --> 00:32:08.816
Let's have a quick look at the

00:32:08.816 --> 00:32:08.936
data.

00:32:14.316 --> 00:32:15.566
In our JSON we have two

00:32:15.566 --> 00:32:16.076
features.

00:32:16.696 --> 00:32:18.386
The top level is grouped in

00:32:18.386 --> 00:32:19.226
feature collection.

00:32:19.466 --> 00:32:21.456
Our first feature is event

00:32:21.456 --> 00:32:21.796
tents.

00:32:21.796 --> 00:32:24.126
We'll be rendering many tents,

00:32:24.286 --> 00:32:25.526
which means more options for

00:32:25.526 --> 00:32:26.296
food and drinks.

00:32:27.156 --> 00:32:28.826
The geometry of our tent is

00:32:28.826 --> 00:32:29.826
MultiPolygon.

00:32:30.886 --> 00:32:31.716
These are the different

00:32:31.716 --> 00:32:33.276
coordinates of the tents.

00:32:33.996 --> 00:32:35.646
We'll be using this data to

00:32:35.646 --> 00:32:37.246
render overlays on the map view

00:32:37.426 --> 00:32:38.876
which will represent the tent

00:32:38.996 --> 00:32:39.726
outlines.

00:32:40.256 --> 00:32:43.406
Our second feature is point,

00:32:43.906 --> 00:32:45.436
which describes the names of the

00:32:45.436 --> 00:32:47.166
various food and drink tents.

00:32:48.036 --> 00:32:49.756
We'll be using this data to

00:32:49.756 --> 00:32:51.256
render annotations on the map

00:32:51.256 --> 00:32:53.216
view, which will represent the

00:32:53.216 --> 00:32:54.156
tent labels.

00:32:55.086 --> 00:32:57.136
Let's see how to parse these two

00:32:57.136 --> 00:32:57.976
features in code.

00:33:02.216 --> 00:33:03.096
Here, we are looking at the

00:33:03.096 --> 00:33:05.176
event data source where we will

00:33:05.176 --> 00:33:06.846
load the JSON and subsequently

00:33:06.846 --> 00:33:07.286
parse it.

00:33:07.846 --> 00:33:08.826
Let's go ahead and load the

00:33:08.826 --> 00:33:08.976
JSON.

00:33:12.176 --> 00:33:15.426
Once the JSON is loaded, we will

00:33:15.476 --> 00:33:17.326
use the MKGeoJSONDecoder to

00:33:17.326 --> 00:33:19.436
decode this into an array of

00:33:19.466 --> 00:33:21.066
MKGeoJSON objections.

00:33:22.046 --> 00:33:23.676
We'll subsequently parse these

00:33:23.676 --> 00:33:24.216
objects.

00:33:24.686 --> 00:33:25.626
Let's go ahead and implement the

00:33:25.626 --> 00:33:25.976
parse function.

00:33:32.096 --> 00:33:34.476
We'll iterate through the

00:33:34.476 --> 00:33:35.706
GeoJSON objects.

00:33:36.286 --> 00:33:38.676
We saw in our JSON that the top

00:33:38.676 --> 00:33:40.186
level is feature, so we will

00:33:40.186 --> 00:33:41.456
treat this object as

00:33:41.456 --> 00:33:42.716
MKGeoJSONFeature.

00:33:43.306 --> 00:33:44.686
In a generic parser, we would

00:33:44.686 --> 00:33:46.126
want to handle other geometry

00:33:46.126 --> 00:33:46.896
objects as well.

00:33:47.746 --> 00:33:48.646
We'll iterate through the

00:33:48.646 --> 00:33:50.666
feature.geometry and we'll

00:33:50.666 --> 00:33:52.546
filter this into native MapKit

00:33:52.576 --> 00:33:54.606
types, which is MKMultiPolygon.

00:33:55.466 --> 00:33:57.376
We will add this to an array of

00:33:57.436 --> 00:33:58.056
overlays.

00:33:58.676 --> 00:33:59.756
This is the array we will

00:33:59.756 --> 00:34:02.256
leverage to add the overlays to

00:34:02.256 --> 00:34:02.786
the map view.

00:34:03.086 --> 00:34:04.536
So let's go to the event view

00:34:04.536 --> 00:34:06.276
controller where the map view is

00:34:06.276 --> 00:34:06.976
set up and add the overlays.

00:34:11.876 --> 00:34:13.886
For every overlay that we add to

00:34:13.886 --> 00:34:15.626
the map view, we need to provide

00:34:15.626 --> 00:34:16.966
a renderer in the map view's

00:34:16.966 --> 00:34:17.706
delegate method.

00:34:18.536 --> 00:34:19.545
Let's go ahead and set up the

00:34:19.545 --> 00:34:19.976
delegate method.

00:34:24.666 --> 00:34:26.946
We are past the MKOverlay in the

00:34:26.946 --> 00:34:28.536
delegate method and we are

00:34:28.536 --> 00:34:29.696
expected to return our

00:34:29.696 --> 00:34:30.966
MKOverlayRenderer.

00:34:31.315 --> 00:34:32.466
So let's go ahead and set up the

00:34:32.466 --> 00:34:32.876
renderer.

00:34:37.936 --> 00:34:40.315
We saw that our geometry of our

00:34:40.396 --> 00:34:42.216
tent is MultiPolygon.

00:34:42.255 --> 00:34:44.045
So we'll treat this overlay as

00:34:44.156 --> 00:34:45.255
MKMultiPolygon.

00:34:46.045 --> 00:34:47.556
Here we specify the visual

00:34:47.556 --> 00:34:49.476
representation of the polygon

00:34:49.476 --> 00:34:51.786
overlay and we specify how we

00:34:51.786 --> 00:34:53.456
want our tents to be rendered.

00:34:53.456 --> 00:34:55.956
So now that we have the overlays

00:34:55.956 --> 00:34:57.306
added and the visual

00:34:57.306 --> 00:34:58.786
representation specified for the

00:34:58.786 --> 00:35:00.566
same, let's go ahead and execute

00:35:00.566 --> 00:35:00.976
our application.

00:35:05.266 --> 00:35:06.506
Looking at the Concert in the

00:35:06.506 --> 00:35:08.006
Park, and there you go.

00:35:08.426 --> 00:35:10.796
We now see the tent outlines

00:35:11.076 --> 00:35:12.676
rendered as overlays on the map

00:35:12.676 --> 00:35:12.926
view.

00:35:13.426 --> 00:35:15.576
It would be helpful to display

00:35:15.576 --> 00:35:17.826
the tent labels so we know where

00:35:17.826 --> 00:35:18.746
we can get the food and the

00:35:18.746 --> 00:35:19.396
drinks from.

00:35:20.226 --> 00:35:21.776
We'll be displaying these labels

00:35:21.776 --> 00:35:23.476
as annotations on the map view.

00:35:23.866 --> 00:35:25.376
So let's go back to the event

00:35:25.376 --> 00:35:26.186
data source.

00:35:29.116 --> 00:35:30.596
The way the map view handles

00:35:30.596 --> 00:35:32.026
annotations is different than

00:35:32.026 --> 00:35:32.686
overlays.

00:35:32.856 --> 00:35:34.326
So we'll separate the

00:35:34.326 --> 00:35:35.746
annotations from the overlays.

00:35:41.516 --> 00:35:43.456
The names of the annotations is

00:35:43.506 --> 00:35:45.136
parsed in feature.properties.

00:35:45.956 --> 00:35:47.896
This is the data we will use to

00:35:47.896 --> 00:35:49.176
configure the annotation.

00:35:49.776 --> 00:35:50.876
So let's go ahead and implement

00:35:50.876 --> 00:35:51.896
the configure function.

00:35:57.636 --> 00:35:59.766
The properties of our points is

00:35:59.766 --> 00:36:01.396
a dictionary mapping of string

00:36:01.536 --> 00:36:02.056
to string.

00:36:03.166 --> 00:36:05.216
We will use Swift's JSONDecoder

00:36:05.796 --> 00:36:07.936
to decode this into a dictionary

00:36:07.936 --> 00:36:08.556
of strings.

00:36:09.676 --> 00:36:11.326
We'll add this configured data

00:36:11.836 --> 00:36:13.336
to an array of annotations.

00:36:13.336 --> 00:36:15.276
This is the array we will

00:36:15.276 --> 00:36:17.136
leverage to add the annotations

00:36:17.136 --> 00:36:17.736
to the map view.

00:36:18.646 --> 00:36:19.686
So let's go to the event view

00:36:19.686 --> 00:36:21.076
controller and add the

00:36:21.076 --> 00:36:22.706
annotations to the map view.

00:36:26.666 --> 00:36:28.216
Let's set up the view for the

00:36:28.216 --> 00:36:28.886
annotation.

00:36:33.196 --> 00:36:34.126
We will use the

00:36:34.126 --> 00:36:37.036
MKMapViewDefaultAnnotation

00:36:37.036 --> 00:36:39.376
ViewReuseIdentifier constant to

00:36:39.376 --> 00:36:41.116
register our custom annotation.

00:36:41.826 --> 00:36:44.156
Now that we have the model and

00:36:44.156 --> 00:36:45.546
the view set up for our

00:36:45.546 --> 00:36:46.526
annotations, let's execute our

00:36:46.526 --> 00:36:46.946
application.

00:36:54.906 --> 00:36:57.116
So we now see the tent labels

00:36:57.856 --> 00:36:58.586
which are rendered as

00:36:58.586 --> 00:37:00.016
annotations on the map view.

00:37:00.796 --> 00:37:02.676
We just saw how to render

00:37:02.786 --> 00:37:04.436
annotations and overlays from

00:37:04.436 --> 00:37:05.626
GeoJSON data.

00:37:06.916 --> 00:37:08.666
However, in our map view, we've

00:37:08.666 --> 00:37:10.146
seen numerous points of interest

00:37:10.146 --> 00:37:11.446
which are displayed which are

00:37:11.446 --> 00:37:12.506
interfering with our map.

00:37:13.386 --> 00:37:15.026
Let's leverage the

00:37:15.026 --> 00:37:16.546
exclude all point of interest filter that

00:37:16.546 --> 00:37:18.116
Alexander was talking about to

00:37:18.116 --> 00:37:18.976
turn these off.

00:37:24.886 --> 00:37:25.946
Now that we have the

00:37:25.946 --> 00:37:27.316
pointOfInterestFilter applied,

00:37:27.486 --> 00:37:28.906
let's execute our application.

00:37:35.186 --> 00:37:37.986
And we just saw how easy it is

00:37:38.446 --> 00:37:40.506
to enable users to focus on

00:37:40.506 --> 00:37:42.866
information relevant to our use

00:37:42.866 --> 00:37:43.246
case.

00:37:43.616 --> 00:37:45.036
With that, I hand over back to

00:37:45.036 --> 00:37:45.556
Alexander.

00:37:46.516 --> 00:37:50.756
[ Applause ]

00:37:51.256 --> 00:37:53.136
>> As you saw in this demo, the

00:37:53.136 --> 00:37:55.446
new MKGeoJSONDecoder can make it

00:37:55.446 --> 00:37:56.726
a lot easier for you when

00:37:56.726 --> 00:37:57.656
working with GeoJSON.

00:37:57.656 --> 00:38:00.876
So it was pretty straightforward

00:38:00.876 --> 00:38:03.236
to get this event map rendered

00:38:03.236 --> 00:38:03.926
in the map view.

00:38:04.506 --> 00:38:07.446
But in some use cases like when

00:38:07.446 --> 00:38:08.806
you're dealing with indoor data

00:38:09.056 --> 00:38:11.406
for large venues, your data is

00:38:11.406 --> 00:38:12.746
much more complex.

00:38:15.406 --> 00:38:17.336
So, to standardize and simplify

00:38:17.336 --> 00:38:19.416
work with this kind of complex

00:38:19.416 --> 00:38:21.226
indoor data, we have developed

00:38:21.276 --> 00:38:23.186
the indoor mapping data format,

00:38:23.636 --> 00:38:24.146
IMDF.

00:38:24.886 --> 00:38:28.236
The IMDF specification is built

00:38:28.236 --> 00:38:30.076
on top of GeoJSON that we just

00:38:30.236 --> 00:38:32.756
talked about and it provides a

00:38:32.756 --> 00:38:34.906
comprehensive model for indoor

00:38:34.906 --> 00:38:36.606
data that lets you deal with any

00:38:36.606 --> 00:38:38.856
conforming JSON in a generalized

00:38:38.856 --> 00:38:39.126
way.

00:38:39.706 --> 00:38:42.116
And to learn more about how to

00:38:42.116 --> 00:38:43.976
render rich indoor data in your

00:38:43.976 --> 00:38:45.576
maps, I strongly recommend

00:38:45.576 --> 00:38:47.096
watching this session, Adding

00:38:47.096 --> 00:38:48.556
Indoor Maps to your App and

00:38:48.556 --> 00:38:51.076
Website, which is tomorrow at 2

00:38:51.076 --> 00:38:53.696
p.m. And that session will cover

00:38:53.696 --> 00:38:55.376
the IMDF specification in much

00:38:55.376 --> 00:38:55.836
more detail.

00:38:56.436 --> 00:38:59.956
And that's all I'm going to talk

00:38:59.956 --> 00:39:03.116
about the new GeoJSON support in

00:39:04.036 --> 00:39:04.436
MapKit.

00:39:04.856 --> 00:39:06.386
So the last big topic I want to

00:39:06.386 --> 00:39:08.546
cover is a set of new APIs in

00:39:08.546 --> 00:39:10.736
MapKit and MapKit JS that lets

00:39:10.736 --> 00:39:12.146
you really take control over the

00:39:12.146 --> 00:39:13.436
map view's camera.

00:39:14.206 --> 00:39:16.076
And to show you this, we'll take

00:39:16.076 --> 00:39:17.886
another look at the event view

00:39:18.086 --> 00:39:19.706
in the companion app.

00:39:20.536 --> 00:39:23.166
So this view is intended to show

00:39:23.166 --> 00:39:24.516
this event map.

00:39:24.826 --> 00:39:26.296
There's very little reason for

00:39:26.296 --> 00:39:28.116
users to pan away to San

00:39:28.116 --> 00:39:29.226
Francisco, for example.

00:39:29.766 --> 00:39:32.676
So, to focus the map view on the

00:39:32.676 --> 00:39:34.516
region that matters, you can add

00:39:34.516 --> 00:39:37.216
a boundary that limits the area

00:39:37.216 --> 00:39:38.336
where the user can pan.

00:39:38.956 --> 00:39:41.766
So we introduced a new class

00:39:41.766 --> 00:39:44.026
called Camera Boundary that

00:39:44.026 --> 00:39:46.076
defines a region within which

00:39:46.076 --> 00:39:47.586
the center point of your map

00:39:47.706 --> 00:39:49.416
view always needs to remain.

00:39:52.336 --> 00:39:54.006
There are two ways to create a

00:39:54.006 --> 00:39:56.146
camera boundary, either using a

00:39:56.146 --> 00:39:58.576
coordinate region or a MapRect.

00:39:59.146 --> 00:40:00.226
Now once you've created your

00:40:00.226 --> 00:40:02.396
camera boundary, you apply it to

00:40:02.396 --> 00:40:03.306
the map view's new

00:40:03.376 --> 00:40:04.686
cameraBoundary property.

00:40:06.456 --> 00:40:08.796
But before you do, make sure

00:40:08.796 --> 00:40:10.486
that your map view is centered

00:40:10.486 --> 00:40:12.126
over a location inside that

00:40:12.126 --> 00:40:12.936
camera boundary.

00:40:14.096 --> 00:40:15.336
You know your apps better than

00:40:15.336 --> 00:40:17.316
anyone else and if your map view

00:40:17.316 --> 00:40:19.026
is located outside of the camera

00:40:19.026 --> 00:40:20.276
boundary that you're applying,

00:40:20.756 --> 00:40:22.596
the map view will update to a

00:40:22.596 --> 00:40:24.166
location inside the boundary.

00:40:24.746 --> 00:40:26.156
And in most cases this will not

00:40:26.206 --> 00:40:27.476
be the location you would have

00:40:27.476 --> 00:40:28.686
chosen for your users.

00:40:29.196 --> 00:40:32.156
And once the cameraBoundary has

00:40:32.156 --> 00:40:34.696
been applied, the map view will

00:40:34.696 --> 00:40:35.906
strictly enforce it.

00:40:36.826 --> 00:40:38.346
This means that if you call

00:40:38.706 --> 00:40:42.516
setRegion for example with a

00:40:42.516 --> 00:40:43.656
location that would force the

00:40:43.656 --> 00:40:45.506
map view to move outside of the

00:40:45.506 --> 00:40:47.696
camera boundary it will instead

00:40:47.696 --> 00:40:49.836
move as close as it can but it

00:40:49.836 --> 00:40:51.456
will not violate its camera

00:40:51.456 --> 00:40:51.836
boundary.

00:40:52.416 --> 00:40:54.616
And this is of course not just

00:40:54.616 --> 00:40:57.006
true for setRegion but any API

00:40:57.346 --> 00:40:59.086
that modifies the center point

00:40:59.126 --> 00:41:00.026
of your map views.

00:41:00.526 --> 00:41:03.856
And we've also added support for

00:41:03.856 --> 00:41:06.226
camera boundaries in MapKit JS

00:41:07.266 --> 00:41:08.696
and there's a slight difference

00:41:08.696 --> 00:41:09.516
in how it works.

00:41:09.706 --> 00:41:10.756
You use either a

00:41:10.756 --> 00:41:13.356
CoordinateRegion or a MapRect as

00:41:13.356 --> 00:41:14.326
your camera boundary.

00:41:14.866 --> 00:41:17.076
So you simply apply either your

00:41:17.076 --> 00:41:18.426
CoordinateRegion or your MapRect

00:41:18.586 --> 00:41:19.766
to the new cameraBoundary

00:41:19.766 --> 00:41:21.696
property on your map object.

00:41:24.076 --> 00:41:26.156
So we now have a mechanism for

00:41:26.516 --> 00:41:28.126
keeping our map views in the

00:41:28.126 --> 00:41:29.176
region that matters.

00:41:30.016 --> 00:41:31.866
But users can still zoom out to

00:41:31.866 --> 00:41:33.086
the point where that region is

00:41:33.086 --> 00:41:33.926
no longer visible.

00:41:34.426 --> 00:41:36.446
And that's possible because the

00:41:36.446 --> 00:41:38.206
camera boundary only ensures

00:41:38.306 --> 00:41:39.476
that the center point of the map

00:41:39.976 --> 00:41:41.086
is inside that region.

00:41:41.656 --> 00:41:43.366
And we're still centered over

00:41:43.366 --> 00:41:44.436
that park.

00:41:44.716 --> 00:41:46.036
We're just really, really zoomed

00:41:46.036 --> 00:41:46.216
out.

00:41:47.606 --> 00:41:49.306
So we also need a way to limit

00:41:49.376 --> 00:41:51.066
the zoom in the map views.

00:41:51.576 --> 00:41:54.226
And the map view zoom is

00:41:54.226 --> 00:41:55.446
controlled by its camera.

00:41:56.346 --> 00:41:57.986
And if you use the MKMapCamera

00:41:57.986 --> 00:41:59.446
in your apps in the past, you've

00:41:59.446 --> 00:42:00.546
probably worked with the

00:42:00.546 --> 00:42:01.386
altitude API.

00:42:02.656 --> 00:42:04.226
However, if you work with pitch

00:42:04.226 --> 00:42:05.776
cameras, it's much more

00:42:05.776 --> 00:42:07.396
intuitive to think about the

00:42:07.396 --> 00:42:08.666
distance from the center

00:42:08.666 --> 00:42:10.356
coordinate of your map up to the

00:42:10.356 --> 00:42:10.746
camera.

00:42:11.906 --> 00:42:13.346
And this is also the distance

00:42:13.346 --> 00:42:14.636
that controls the zoom in your

00:42:14.636 --> 00:42:15.166
map views.

00:42:16.456 --> 00:42:18.396
So for this reason we have

00:42:18.396 --> 00:42:20.146
introduced a new property on

00:42:20.186 --> 00:42:21.846
MKMapCamera called Center

00:42:21.846 --> 00:42:25.536
Coordinate Distance.

00:42:25.626 --> 00:42:28.176
And I would like to encourage

00:42:28.176 --> 00:42:29.856
you to move away from thinking

00:42:29.856 --> 00:42:32.166
about altitude and instead

00:42:32.286 --> 00:42:34.476
thinking about the distance from

00:42:34.476 --> 00:42:35.546
the center coordinate up to the

00:42:35.546 --> 00:42:35.936
camera.

00:42:36.836 --> 00:42:37.746
And when you make this

00:42:37.746 --> 00:42:39.696
transition in your code, there's

00:42:39.696 --> 00:42:40.756
one important thing to keep in

00:42:40.756 --> 00:42:41.126
mind.

00:42:41.696 --> 00:42:44.856
In an altitude centric model

00:42:44.856 --> 00:42:46.816
like we've used in the past, a

00:42:46.816 --> 00:42:48.356
change to the pitch of the

00:42:48.356 --> 00:42:50.296
camera has meant that the camera

00:42:50.296 --> 00:42:51.736
moves farther away from the

00:42:51.736 --> 00:42:53.386
center point while preserving

00:42:53.386 --> 00:42:54.076
its altitude.

00:42:55.546 --> 00:42:57.376
But in a distance centric model,

00:42:57.726 --> 00:42:58.716
when you change the pitch of

00:42:58.716 --> 00:43:00.396
your camera, the expectation is

00:43:00.396 --> 00:43:02.856
instead that the distance will

00:43:02.856 --> 00:43:05.446
be preserved and as a result the

00:43:05.536 --> 00:43:07.326
altitude will change.

00:43:08.636 --> 00:43:11.076
MKMapCamera has now been updated

00:43:11.076 --> 00:43:13.076
so the behavior of the pitch

00:43:13.126 --> 00:43:16.646
property will change if you set

00:43:16.706 --> 00:43:18.726
a Center Coordinate Distance.

00:43:19.606 --> 00:43:21.946
So you now know that the Center

00:43:21.946 --> 00:43:23.176
Coordinate Distance is what

00:43:23.276 --> 00:43:24.656
controls the zoom of your map

00:43:24.706 --> 00:43:24.956
view.

00:43:25.226 --> 00:43:26.066
But how do you actually

00:43:26.066 --> 00:43:26.526
constrain it?

00:43:27.086 --> 00:43:28.686
For this purpose we've

00:43:28.686 --> 00:43:29.956
introduced another new class

00:43:29.956 --> 00:43:31.676
called CameraZoomRange.

00:43:32.206 --> 00:43:34.966
And the CameraZoomRange defines

00:43:34.966 --> 00:43:37.526
a minimum and a maximum Center

00:43:37.526 --> 00:43:38.496
Coordinate Distance.

00:43:38.796 --> 00:43:39.566
And when you apply the

00:43:39.566 --> 00:43:40.736
CameraZoomRange to your map

00:43:40.736 --> 00:43:43.046
view, the camera will be forced

00:43:43.216 --> 00:43:44.386
to stay in that range.

00:43:46.116 --> 00:43:47.376
So you simply create your

00:43:47.376 --> 00:43:49.686
CameraZoomRange with a minimum

00:43:49.686 --> 00:43:51.716
and a maximum distance and then

00:43:51.716 --> 00:43:52.806
you apply it to the new

00:43:52.806 --> 00:43:54.426
CameraZoomRange property on your

00:43:54.426 --> 00:43:54.916
map view.

00:43:55.896 --> 00:43:57.226
And if you want, you can also

00:43:57.226 --> 00:43:58.546
create a CameraZoomRange with

00:43:58.546 --> 00:44:00.536
only a minimum or only a maximum

00:44:00.536 --> 00:44:00.956
distance.

00:44:03.246 --> 00:44:05.446
As you've probably noticed in

00:44:05.446 --> 00:44:07.076
the past, even without the

00:44:07.076 --> 00:44:08.646
CameraZoomRange there are

00:44:08.646 --> 00:44:10.206
restrictions on how far in and

00:44:10.206 --> 00:44:11.756
out you can zoom in a map view.

00:44:12.646 --> 00:44:14.076
And these restrictions may

00:44:14.076 --> 00:44:15.506
change depending on what region

00:44:15.506 --> 00:44:16.666
of the world you're viewing or

00:44:16.666 --> 00:44:17.966
what map type you're using.

00:44:19.036 --> 00:44:20.246
In some cases there are

00:44:20.246 --> 00:44:21.886
technical limitations for these

00:44:21.886 --> 00:44:23.346
restrictions but in some cases

00:44:23.346 --> 00:44:24.566
there are legal reasons.

00:44:25.506 --> 00:44:27.626
What this means is even if you

00:44:27.626 --> 00:44:29.696
apply a CameraZoomRange with a

00:44:29.696 --> 00:44:32.166
minimum distance that is shorter

00:44:32.166 --> 00:44:33.956
than the default of the MapView,

00:44:34.586 --> 00:44:36.196
your users will not be able to

00:44:36.196 --> 00:44:37.396
zoom in any farther.

00:44:38.096 --> 00:44:40.396
And similarly a larger max

00:44:40.396 --> 00:44:41.706
distance will not allow your

00:44:41.706 --> 00:44:43.306
users to zoom out any farther.

00:44:43.846 --> 00:44:48.296
And if your camera is outside of

00:44:48.296 --> 00:44:49.216
the CameraZoomRange you're

00:44:49.216 --> 00:44:50.996
applying, the MapView will

00:44:50.996 --> 00:44:52.386
update the Center Coordinate

00:44:52.386 --> 00:44:53.436
Distance of your camera.

00:44:54.156 --> 00:44:54.896
So just like with the

00:44:54.896 --> 00:44:56.556
cameraBoundary, the map view

00:44:56.556 --> 00:44:57.896
will strictly enforce the

00:44:57.896 --> 00:44:59.946
CameraZoomRange once you're

00:45:00.186 --> 00:45:01.426
adding it.

00:45:02.766 --> 00:45:04.366
And we've also added support for

00:45:04.366 --> 00:45:06.386
camera zoom ranges in MapKit JS.

00:45:06.386 --> 00:45:08.586
So there's a new CameraZoomRange

00:45:08.586 --> 00:45:10.426
object added to the MapKit

00:45:10.426 --> 00:45:10.796
object.

00:45:11.426 --> 00:45:12.746
And in the same way you can

00:45:12.746 --> 00:45:14.116
create it with a minimum and a

00:45:14.116 --> 00:45:16.186
maximum or just one of the two.

00:45:16.996 --> 00:45:18.026
You then apply it to the new

00:45:18.026 --> 00:45:19.576
CameraZoomRange property on your

00:45:19.576 --> 00:45:19.976
map object.

00:45:23.576 --> 00:45:25.326
All right, and I will now hand

00:45:25.326 --> 00:45:26.776
it back one more time to my

00:45:26.776 --> 00:45:27.496
colleague Nalini.

00:45:27.596 --> 00:45:28.716
And this time she will show you

00:45:28.716 --> 00:45:30.376
how to use these camera zoom

00:45:30.376 --> 00:45:32.316
ranges and camera boundaries to

00:45:32.316 --> 00:45:33.606
improve the experience in your

00:45:33.606 --> 00:45:33.976
map views.

00:45:34.516 --> 00:45:39.326
[ Applause ]

00:45:39.826 --> 00:45:40.576
>> Here we are looking at the

00:45:40.576 --> 00:45:42.416
concept map where we just

00:45:42.416 --> 00:45:43.526
rendered annotations and

00:45:43.526 --> 00:45:44.076
overlays.

00:45:47.566 --> 00:45:49.296
I'm zooming out of the concept

00:45:49.296 --> 00:45:51.336
area and users can zoom out to

00:45:51.336 --> 00:45:53.266
San Jose and all of California.

00:45:54.206 --> 00:45:55.886
We want to control the zoom

00:45:55.886 --> 00:45:56.816
range of the map view.

00:45:57.486 --> 00:45:58.586
Let's leverage the

00:45:58.586 --> 00:45:59.956
CameraZoomRange API that

00:46:00.126 --> 00:46:00.926
Alexander was talking about.

00:46:10.596 --> 00:46:12.196
The min and the max are

00:46:12.196 --> 00:46:13.386
specified in meters.

00:46:14.146 --> 00:46:15.926
By applying a CameraZoomRange to

00:46:15.926 --> 00:46:17.836
the map view, we restrict how

00:46:17.836 --> 00:46:20.046
far in and out users can zoom in

00:46:20.046 --> 00:46:20.526
the map view.

00:46:22.036 --> 00:46:23.606
Let's execute our application

00:46:23.606 --> 00:46:24.716
with the CameraZoomRange

00:46:24.716 --> 00:46:24.976
applied.

00:46:31.446 --> 00:46:33.126
I'm trying to zoom out again.

00:46:33.396 --> 00:46:34.416
OK, I cannot zoom out.

00:46:34.796 --> 00:46:36.266
Let's try to zoom in.

00:46:38.846 --> 00:46:39.986
I'm zooming in.

00:46:40.496 --> 00:46:42.696
I can get to the stage.

00:46:42.986 --> 00:46:44.896
I can get to the different tents

00:46:44.896 --> 00:46:45.656
in the concert area.

00:46:46.276 --> 00:46:47.886
So this zoom range is perfect

00:46:47.886 --> 00:46:49.606
for our use case.

00:46:50.316 --> 00:46:53.226
However, as you can see, users

00:46:53.226 --> 00:46:54.006
can pan away.

00:46:54.846 --> 00:46:57.166
We want users to focus on the

00:46:57.166 --> 00:46:57.896
concert area.

00:46:58.656 --> 00:46:59.846
Let's leverage the

00:46:59.846 --> 00:47:01.726
cameraBoundary API that

00:47:01.726 --> 00:47:02.976
Alexander was talking about.

00:47:11.476 --> 00:47:13.626
We set up our MKCoordinateRegion

00:47:13.736 --> 00:47:15.086
with the eventCenter as its

00:47:15.086 --> 00:47:16.456
center point and a span of

00:47:16.516 --> 00:47:19.546
latitudinalMeters: 20 and

00:47:19.546 --> 00:47:20.896
longitudinalMeters: 10.

00:47:21.656 --> 00:47:23.606
We use this coordinateRegion to

00:47:23.676 --> 00:47:25.096
apply the CameraBoundary.

00:47:25.856 --> 00:47:27.326
By applying a CameraBoundary to

00:47:27.326 --> 00:47:29.176
the map view, we ensure the

00:47:29.176 --> 00:47:30.536
center point of the map view

00:47:30.736 --> 00:47:31.846
lies within this region.

00:47:32.626 --> 00:47:34.206
Let's execute our application

00:47:34.206 --> 00:47:34.976
with the CameraBoundary applied.

00:47:41.626 --> 00:47:42.956
I'm going to try to pan away.

00:47:43.646 --> 00:47:44.896
As you can see I cannot pan

00:47:44.896 --> 00:47:45.156
away.

00:47:46.296 --> 00:47:47.976
Let's try zooming in.

00:47:50.396 --> 00:47:51.636
I really want to get to that

00:47:51.636 --> 00:47:52.766
fancy stage area.

00:47:53.546 --> 00:47:55.076
Rumor has it Lady Gaga may be

00:47:55.076 --> 00:47:57.066
performing but it seems I cannot

00:47:57.066 --> 00:47:57.536
get to it.

00:47:58.166 --> 00:47:59.306
Let's try with some updated

00:47:59.306 --> 00:47:59.816
numbers.

00:48:00.566 --> 00:48:01.736
Let's try with

00:48:01.736 --> 00:48:04.516
latitudinalMeters: 100 and

00:48:04.516 --> 00:48:07.456
longitudinalMeters: 80 and let's

00:48:07.456 --> 00:48:09.136
execute our application with

00:48:09.136 --> 00:48:09.926
these updated numbers.

00:48:14.866 --> 00:48:16.506
OK, I'm going to zoom in again

00:48:16.626 --> 00:48:17.786
and try to get to the stage

00:48:17.786 --> 00:48:17.976
area.

00:48:21.336 --> 00:48:23.216
And as you can see I can get to

00:48:23.216 --> 00:48:25.256
the stage area, I can get to the

00:48:25.256 --> 00:48:25.836
restrooms.

00:48:26.766 --> 00:48:29.286
We just saw how to leverage the

00:48:29.286 --> 00:48:30.696
cameraBoundary and the

00:48:30.696 --> 00:48:33.166
CameraZoomRange APIs and ensure

00:48:33.556 --> 00:48:34.886
that users can focus on

00:48:34.886 --> 00:48:36.816
information relevant to our use

00:48:36.816 --> 00:48:37.106
case.

00:48:37.506 --> 00:48:38.806
With that, I hand it back to

00:48:38.806 --> 00:48:39.286
Alexander.

00:48:40.516 --> 00:48:44.556
[ Applause ]

00:48:45.056 --> 00:48:47.156
>> So, once again, just a few

00:48:47.156 --> 00:48:48.856
lines of code change and you get

00:48:48.856 --> 00:48:50.636
a completely different map view

00:48:50.636 --> 00:48:51.326
experience.

00:48:51.916 --> 00:48:53.906
So, try this out in your apps.

00:48:54.666 --> 00:48:56.596
And that was actually the last

00:48:56.596 --> 00:48:58.316
thing we wanted to cover for the

00:48:58.666 --> 00:49:00.336
map view in camera APIs.

00:49:01.486 --> 00:49:03.036
But like I said before we have

00:49:03.036 --> 00:49:04.086
covered quite a lot of stuff

00:49:04.086 --> 00:49:04.446
today.

00:49:04.916 --> 00:49:07.456
So before we wrap up I want to

00:49:07.666 --> 00:49:09.276
summarize the key points we have

00:49:09.276 --> 00:49:10.686
talked about today that I hope

00:49:10.686 --> 00:49:11.686
you will bring with you from

00:49:11.686 --> 00:49:12.216
this session.

00:49:13.246 --> 00:49:15.206
So with the introduction of the

00:49:15.206 --> 00:49:21.386
new snapshot service you can now

00:49:21.386 --> 00:49:22.966
create snapshots and use them on

00:49:22.966 --> 00:49:23.976
the web as well.

00:49:24.426 --> 00:49:25.816
So if you don't need user

00:49:25.816 --> 00:49:28.216
interaction in your maps don't

00:49:28.216 --> 00:49:30.006
waste resources loading a full

00:49:30.006 --> 00:49:31.406
blown map.

00:49:33.066 --> 00:49:35.716
And every app is unique and

00:49:35.716 --> 00:49:37.566
different data is relevant in

00:49:37.566 --> 00:49:38.466
different context.

00:49:38.966 --> 00:49:41.386
So tailor your map views to your

00:49:41.386 --> 00:49:42.986
needs in your apps using the new

00:49:42.986 --> 00:49:44.276
pointOfInterestFilters.

00:49:44.766 --> 00:49:48.036
And make sure that your search

00:49:48.036 --> 00:49:49.626
and autocompletion results are

00:49:49.626 --> 00:49:51.046
as relevant as possible for your

00:49:51.046 --> 00:49:52.726
users using the new

00:49:52.726 --> 00:49:54.026
pointOfInterestFilters and the

00:49:54.056 --> 00:49:54.846
result type filters.

00:49:58.396 --> 00:50:00.586
And if you're adding a lot of

00:50:00.586 --> 00:50:02.136
polygons and polylines in your

00:50:02.136 --> 00:50:04.216
map views, group them using the

00:50:04.216 --> 00:50:05.536
new multipolygons and

00:50:05.536 --> 00:50:05.976
multipolylines.

00:50:09.266 --> 00:50:11.086
And if you're working with

00:50:11.086 --> 00:50:13.586
GeoJSON, take advantage of the

00:50:13.586 --> 00:50:16.056
new support in MapKit and in

00:50:16.056 --> 00:50:18.026
MapKit JS, that way you will

00:50:18.026 --> 00:50:19.486
need to write less code and

00:50:19.526 --> 00:50:22.696
maintain less code.

00:50:22.886 --> 00:50:27.296
And if your map view is really

00:50:27.356 --> 00:50:31.176
all about a fenced off area, try

00:50:31.176 --> 00:50:32.526
out the new camera boundaries

00:50:32.526 --> 00:50:34.036
and camera zoom ranges to really

00:50:34.116 --> 00:50:35.646
focus your map views on the

00:50:35.696 --> 00:50:36.836
region that matters.

00:50:37.336 --> 00:50:41.226
And for more information and

00:50:41.226 --> 00:50:43.016
sample code for both MapKits and

00:50:43.016 --> 00:50:45.096
MapKit JS, visit this session's

00:50:45.096 --> 00:50:45.706
web page.

00:50:45.886 --> 00:50:48.086
And if you have any questions,

00:50:48.156 --> 00:50:50.046
come by our lab tomorrow at 3

00:50:50.046 --> 00:50:52.516
p.m. And with that, I will--

00:50:52.696 --> 00:50:54.126
want to thank you for coming and

00:50:54.126 --> 00:50:55.326
I hope you will have a very nice

00:50:55.326 --> 00:50:56.786
evening and enjoy the last day

00:50:56.786 --> 00:50:57.626
of Dub Dub tomorrow.

00:50:58.516 --> 00:51:03.500
[ Applause ]