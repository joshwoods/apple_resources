WEBVTT

00:00:01.516 --> 00:00:04.500
[ Music ]

00:00:09.516 --> 00:00:15.596
[ Applause ]

00:00:16.096 --> 00:00:18.016
>> Hello, and good afternoon.

00:00:19.116 --> 00:00:19.996
I'm Chris Dreessen.

00:00:20.246 --> 00:00:21.706
I work on the Cocoa frameworks.

00:00:21.946 --> 00:00:22.956
And we're going to be talking

00:00:22.956 --> 00:00:24.836
about what's new in AppKit this

00:00:24.836 --> 00:00:24.966
year.

00:00:26.076 --> 00:00:27.746
So let's dive in.

00:00:28.236 --> 00:00:30.776
We have a lot of functionality.

00:00:30.876 --> 00:00:32.396
We have some additions to

00:00:32.396 --> 00:00:32.946
NSColor.

00:00:33.346 --> 00:00:34.626
Some additions to NSScreen.

00:00:35.086 --> 00:00:36.736
We have a whole grab bag of

00:00:36.796 --> 00:00:38.956
features to help you with text

00:00:38.956 --> 00:00:39.666
and fonts.

00:00:40.366 --> 00:00:41.986
We're going to do a little pub

00:00:41.986 --> 00:00:43.276
crawl right here in this

00:00:43.276 --> 00:00:43.766
session.

00:00:43.766 --> 00:00:44.886
And we're going to talk about

00:00:44.886 --> 00:00:46.436
Toolbar and Touch Bar and

00:00:46.436 --> 00:00:46.996
Sidebar.

00:00:46.996 --> 00:00:49.986
And then, we're going to talk

00:00:49.986 --> 00:00:51.436
about some new control

00:00:51.436 --> 00:00:53.296
functionality in AppKit macOS

00:00:53.296 --> 00:00:54.026
10.15.

00:00:54.126 --> 00:00:55.946
And we'll wrap up our section on

00:00:55.946 --> 00:00:57.906
AppKit by talking about NSEvent.

00:00:57.996 --> 00:01:00.726
And we'll take a small jump and

00:01:00.726 --> 00:01:01.666
go into some Foundation

00:01:01.666 --> 00:01:02.196
features.

00:01:02.476 --> 00:01:03.596
Including some geometry

00:01:03.596 --> 00:01:05.086
enhancements and new formatters

00:01:05.215 --> 00:01:06.696
to make localization easier than

00:01:06.696 --> 00:01:06.946
ever.

00:01:06.946 --> 00:01:09.186
And then we'll wrap things up

00:01:09.186 --> 00:01:10.246
with some notes on system

00:01:10.246 --> 00:01:12.096
extensions in macOS 10.15.

00:01:14.176 --> 00:01:15.836
So before we do that, though,

00:01:15.836 --> 00:01:18.606
let's go ahead and address the

00:01:18.606 --> 00:01:19.126
big thing.

00:01:19.126 --> 00:01:22.576
In macOS 10.15, AppKit is not

00:01:22.576 --> 00:01:24.006
the only UI framework on the

00:01:24.006 --> 00:01:24.516
system.

00:01:24.966 --> 00:01:26.676
We have two new UI frameworks

00:01:26.676 --> 00:01:28.306
joining us.

00:01:28.306 --> 00:01:30.116
So one of these you've probably

00:01:30.116 --> 00:01:31.356
already heard of, and that's

00:01:31.356 --> 00:01:31.696
UIKit.

00:01:31.696 --> 00:01:35.156
In macOS 10.15, you can

00:01:35.156 --> 00:01:37.416
recompile your apps and run your

00:01:37.466 --> 00:01:38.536
iPad apps on the Mac.

00:01:39.176 --> 00:01:40.756
And if you have a

00:01:40.756 --> 00:01:42.216
well-maintained AppKit app.

00:01:42.216 --> 00:01:44.106
This is probably not going to be

00:01:44.106 --> 00:01:45.216
very interesting for you.

00:01:45.976 --> 00:01:48.476
But if you have an iPad app

00:01:48.476 --> 00:01:49.736
you've never brought to the Mac.

00:01:49.736 --> 00:01:50.966
Or you've had an iPad app you've

00:01:50.966 --> 00:01:52.226
been investing a lot in the last

00:01:52.226 --> 00:01:53.616
decade and not so much the Mac.

00:01:53.946 --> 00:01:55.386
This could be very neat.

00:01:55.386 --> 00:01:58.046
You will still use AppKit to add

00:01:58.046 --> 00:01:59.296
the finishing touches to your

00:01:59.296 --> 00:02:00.596
UIKit app for things like

00:02:00.596 --> 00:02:01.976
Toolbar and Touch Bar support.

00:02:02.606 --> 00:02:05.016
But we think that can be very

00:02:05.016 --> 00:02:05.426
interesting.

00:02:06.646 --> 00:02:07.586
The other new framework.

00:02:07.586 --> 00:02:08.996
And we're really excited about

00:02:08.996 --> 00:02:09.256
this.

00:02:09.556 --> 00:02:10.175
Is SwiftUI.

00:02:11.106 --> 00:02:13.196
And SwiftUI is this neat,

00:02:13.196 --> 00:02:15.206
declarative way of describing

00:02:15.206 --> 00:02:16.326
your user interfaces.

00:02:16.326 --> 00:02:17.416
And the transitions between

00:02:17.416 --> 00:02:17.636
them.

00:02:17.986 --> 00:02:19.416
Ways of binding them to your

00:02:19.416 --> 00:02:20.056
model data.

00:02:20.056 --> 00:02:22.456
And this, we think, is a great

00:02:22.456 --> 00:02:23.486
way for making you UI's.

00:02:23.486 --> 00:02:25.066
It's Swift native and supports

00:02:25.066 --> 00:02:26.086
all sorts of Swift language

00:02:26.086 --> 00:02:27.156
features that we really like.

00:02:27.866 --> 00:02:29.236
Again, this is something you

00:02:29.236 --> 00:02:30.236
will use in conjunction with

00:02:30.236 --> 00:02:30.676
AppKit.

00:02:30.676 --> 00:02:31.876
You will embed it in view

00:02:31.876 --> 00:02:33.316
hierarchies potentially all over

00:02:33.316 --> 00:02:33.806
the place.

00:02:33.976 --> 00:02:35.886
So there's sessions about both

00:02:35.886 --> 00:02:36.806
of these frameworks all

00:02:36.806 --> 00:02:37.376
throughout the week.

00:02:37.466 --> 00:02:40.716
And we think you'll enjoy them.

00:02:40.816 --> 00:02:42.366
Onto AppKit.

00:02:42.366 --> 00:02:45.926
So in macOS 10.15, we have some

00:02:45.926 --> 00:02:47.526
new system colors in NSColor.

00:02:47.566 --> 00:02:49.376
We have teal and indigo.

00:02:49.606 --> 00:02:51.766
These are system colors, which

00:02:51.766 --> 00:02:53.006
means they're actually dynamic.

00:02:53.116 --> 00:02:54.536
Depending on which appearance

00:02:54.536 --> 00:02:56.106
you use, they can look

00:02:56.136 --> 00:02:56.566
differently.

00:02:57.646 --> 00:02:59.756
But we think these are great

00:02:59.756 --> 00:03:00.126
colors.

00:03:00.126 --> 00:03:01.106
And you'll enjoy using them in

00:03:01.106 --> 00:03:01.566
your apps.

00:03:02.956 --> 00:03:04.316
We also have an under-the-hood

00:03:04.316 --> 00:03:05.816
change in NSColor we want to

00:03:05.816 --> 00:03:06.486
talk about.

00:03:06.736 --> 00:03:08.606
And that's that NSColor is now

00:03:08.606 --> 00:03:10.426
using the tagged pointer system.

00:03:10.676 --> 00:03:13.106
We also use for NSNumber and

00:03:13.236 --> 00:03:13.746
NSString.

00:03:13.826 --> 00:03:15.436
And what is a tagged pointer?

00:03:15.936 --> 00:03:17.566
Well, normally, for an NSColor,

00:03:18.086 --> 00:03:19.206
we would store the various

00:03:19.206 --> 00:03:20.386
component values or other

00:03:20.386 --> 00:03:22.116
information as iBars in an

00:03:22.116 --> 00:03:23.206
allocated object.

00:03:23.206 --> 00:03:25.206
And with tagged pointers, we

00:03:25.206 --> 00:03:26.116
instead condense that

00:03:26.116 --> 00:03:27.526
information down to a smaller

00:03:27.526 --> 00:03:29.076
number of bits and store it in

00:03:29.076 --> 00:03:29.936
the pointer itself.

00:03:30.286 --> 00:03:31.536
So there's no separate

00:03:31.536 --> 00:03:32.106
allocation.

00:03:32.866 --> 00:03:34.276
If you had code that was very

00:03:34.276 --> 00:03:35.366
heavily allocating or

00:03:35.366 --> 00:03:37.076
deallocating NSColors you're

00:03:37.076 --> 00:03:38.176
going to notice a performance

00:03:38.176 --> 00:03:38.746
win from this.

00:03:38.896 --> 00:03:39.766
So we're excited here.

00:03:41.446 --> 00:03:43.416
Generally, that's going to be an

00:03:43.416 --> 00:03:44.476
invisible change for you.

00:03:44.896 --> 00:03:45.946
But there is a case I want to

00:03:45.976 --> 00:03:47.426
point out.

00:03:47.426 --> 00:03:48.736
If you're accessing a derived

00:03:48.826 --> 00:03:49.836
property of the color, for

00:03:49.836 --> 00:03:52.296
example, the CGColor, with a

00:03:52.296 --> 00:03:54.246
non-tagged version, that could

00:03:54.246 --> 00:03:55.596
be cached as an iBar in the

00:03:55.666 --> 00:03:56.016
color.

00:03:56.016 --> 00:03:57.656
And it's possible the CGColor

00:03:57.656 --> 00:03:59.016
would live as long as the

00:03:59.016 --> 00:03:59.436
NSColor.

00:04:00.446 --> 00:04:01.786
In the snippet we have on

00:04:01.786 --> 00:04:04.016
screen, you could see that we

00:04:04.016 --> 00:04:06.006
passed that CGColor to a context

00:04:06.006 --> 00:04:07.336
set fill color with Color Call.

00:04:07.336 --> 00:04:08.966
And that would have worked okay

00:04:08.966 --> 00:04:09.526
in the past.

00:04:10.166 --> 00:04:11.826
With tagged pointers, using it

00:04:11.826 --> 00:04:13.156
outside the auto release pool is

00:04:13.156 --> 00:04:14.246
potentially hazardous.

00:04:14.246 --> 00:04:16.156
So good hygiene not to do that

00:04:16.156 --> 00:04:16.606
anyway.

00:04:16.856 --> 00:04:17.815
But something to be aware of

00:04:17.815 --> 00:04:20.976
just in case.

00:04:22.366 --> 00:04:24.546
So a lot of us have used the

00:04:24.576 --> 00:04:25.176
Color Panel.

00:04:25.926 --> 00:04:27.846
And there's a near and dear to

00:04:27.906 --> 00:04:29.666
us eyedropper tool in the Color

00:04:29.666 --> 00:04:31.276
Panel that lets you click it and

00:04:31.276 --> 00:04:32.976
bring up a magnifier like this

00:04:33.186 --> 00:04:34.686
and then select a specific color

00:04:34.686 --> 00:04:36.826
on screen to read the RGB values

00:04:36.826 --> 00:04:36.976
of.

00:04:37.006 --> 00:04:40.676
In macOS 10.15, we're exposing

00:04:40.676 --> 00:04:42.066
this functionality to you too

00:04:42.436 --> 00:04:43.516
with a new class called

00:04:43.626 --> 00:04:44.506
NSColorSampler.

00:04:45.306 --> 00:04:47.096
So NSColorSampler is very

00:04:47.096 --> 00:04:47.466
simple.

00:04:47.576 --> 00:04:49.196
It has a single-class method on

00:04:49.196 --> 00:04:50.176
it called Show.

00:04:50.736 --> 00:04:52.236
You pass a block to show and we

00:04:52.236 --> 00:04:53.276
will call you back with the

00:04:53.276 --> 00:04:54.726
selected color, or null if the

00:04:54.726 --> 00:04:57.366
user cancelled out of this, and

00:04:57.626 --> 00:04:58.676
we're really excited to share

00:04:58.676 --> 00:04:59.576
our implementation with you,

00:04:59.576 --> 00:04:59.796
too.

00:05:00.026 --> 00:05:01.596
If you have your own

00:05:01.596 --> 00:05:02.886
implementation, something to be

00:05:02.886 --> 00:05:05.986
aware of in macOS 10.15, is that

00:05:05.986 --> 00:05:07.486
screen recording is going to

00:05:07.546 --> 00:05:08.836
prompt for user permission.

00:05:09.566 --> 00:05:10.866
And this is something that

00:05:10.866 --> 00:05:12.066
doesn't happen if you use

00:05:12.346 --> 00:05:14.246
NSColorSampler itself.

00:05:15.696 --> 00:05:18.836
There's another NSColor API that

00:05:18.836 --> 00:05:19.886
we find incredibly useful.

00:05:19.886 --> 00:05:21.296
We call it the Dynamic Color

00:05:21.296 --> 00:05:21.756
Provider.

00:05:22.296 --> 00:05:23.626
And it's really just a new

00:05:23.626 --> 00:05:25.206
initializer on NSColor.

00:05:25.486 --> 00:05:27.216
It takes two arguments.

00:05:27.596 --> 00:05:28.836
One of these arguments is a

00:05:28.836 --> 00:05:29.216
block.

00:05:29.706 --> 00:05:31.076
And that block accepts an

00:05:31.076 --> 00:05:31.716
NSAppearance.

00:05:32.776 --> 00:05:34.276
When we go to resolve the color.

00:05:34.526 --> 00:05:35.596
Either because we're drawing it

00:05:35.596 --> 00:05:37.026
in a bitmap context, or writing

00:05:37.026 --> 00:05:38.386
it to a file, or using it as a

00:05:38.386 --> 00:05:39.486
layer background color, we're

00:05:39.976 --> 00:05:41.696
going to call this block with

00:05:41.696 --> 00:05:42.516
whatever appearance is

00:05:42.516 --> 00:05:43.576
appropriate at the time.

00:05:44.386 --> 00:05:46.496
In our snippet on screen, we use

00:05:46.496 --> 00:05:47.726
the NSAppearance best-match

00:05:47.726 --> 00:05:49.066
method to tell us whether the

00:05:49.066 --> 00:05:50.846
requested appearance was more

00:05:50.916 --> 00:05:52.516
like aqua or more like dark

00:05:52.516 --> 00:05:52.856
aqua.

00:05:52.856 --> 00:05:55.066
And we have hard-coded colors

00:05:55.066 --> 00:05:56.026
for each of those cases.

00:05:57.026 --> 00:05:58.316
This can be very useful where

00:05:58.316 --> 00:05:58.946
you want to have some

00:05:58.946 --> 00:06:00.326
programmatic decisions and

00:06:00.326 --> 00:06:02.086
dynamicism in your usage of

00:06:02.176 --> 00:06:03.366
NSColor in your application.

00:06:03.726 --> 00:06:04.876
And this is much simpler than

00:06:04.876 --> 00:06:06.436
trying to propagate a hard-coded

00:06:06.436 --> 00:06:07.726
literal color across the view

00:06:07.726 --> 00:06:09.186
hierarchy on appearance change.

00:06:09.916 --> 00:06:12.096
So I mentioned there were two

00:06:12.096 --> 00:06:12.666
arguments.

00:06:13.066 --> 00:06:14.486
The other argument is a name.

00:06:14.706 --> 00:06:16.986
And the name is very significant

00:06:17.406 --> 00:06:18.396
for coding purposes.

00:06:18.736 --> 00:06:20.176
If you send one of these colors

00:06:20.176 --> 00:06:21.196
over an NSConnection,

00:06:21.296 --> 00:06:22.426
NSXPCConnection.

00:06:22.866 --> 00:06:23.896
When we decode it, we're going

00:06:23.896 --> 00:06:24.776
to look it up by name.

00:06:25.326 --> 00:06:26.436
So it's also important to have

00:06:26.436 --> 00:06:27.786
registered that color on both

00:06:27.786 --> 00:06:31.266
sides of the connection.

00:06:31.946 --> 00:06:32.826
So colors are great.

00:06:33.186 --> 00:06:33.976
NSColor is great.

00:06:34.166 --> 00:06:35.116
And they're all better with

00:06:35.116 --> 00:06:36.156
screens to view them on.

00:06:36.966 --> 00:06:37.856
So we'll talk about some

00:06:37.856 --> 00:06:38.866
NSScreen improvements.

00:06:39.306 --> 00:06:41.316
If you've ever implemented a

00:06:41.316 --> 00:06:42.876
screen picker control, you may

00:06:42.876 --> 00:06:43.796
have wanted to have a

00:06:43.796 --> 00:06:45.806
user-facing string to identify

00:06:45.836 --> 00:06:46.946
an NSScreen with.

00:06:47.256 --> 00:06:48.916
And if you use the inherited

00:06:48.916 --> 00:06:50.266
description method from

00:06:50.296 --> 00:06:52.266
NSObject, your users probably

00:06:52.266 --> 00:06:54.186
were not content with NSScreen

00:06:54.186 --> 00:06:57.386
0x60000261e460.

00:06:58.946 --> 00:07:00.876
So in macOS 10.15,

00:07:01.156 --> 00:07:03.236
NSScreen.localizedName will give

00:07:03.236 --> 00:07:04.876
you a nice, human, readable

00:07:04.876 --> 00:07:06.616
string to describe that screen.

00:07:10.106 --> 00:07:11.286
All right, talking about screens

00:07:11.286 --> 00:07:11.936
more generally.

00:07:12.576 --> 00:07:13.636
Over the last many years,

00:07:13.636 --> 00:07:14.986
screens have been getting

00:07:15.076 --> 00:07:16.486
brighter and brighter and

00:07:16.486 --> 00:07:16.806
brighter.

00:07:17.246 --> 00:07:18.826
And there are very few people

00:07:19.226 --> 00:07:20.836
who run their screens at max

00:07:20.876 --> 00:07:21.626
brightness anymore.

00:07:21.746 --> 00:07:24.606
And if we apply this to a

00:07:24.606 --> 00:07:26.526
specific picture, we can imagine

00:07:26.616 --> 00:07:28.376
that black is a zero component

00:07:28.376 --> 00:07:30.316
value and one is the white

00:07:30.316 --> 00:07:31.056
component value.

00:07:31.486 --> 00:07:33.506
And as we dim that screen, we're

00:07:33.506 --> 00:07:34.916
sort of compressing what ones

00:07:34.916 --> 00:07:36.166
means in absolute terms.

00:07:36.166 --> 00:07:38.076
We are emitting fewer photons

00:07:38.136 --> 00:07:39.496
per unit value in our software.

00:07:40.716 --> 00:07:42.406
But that monitor hasn't lost

00:07:42.406 --> 00:07:43.596
that ability to produce bright

00:07:43.596 --> 00:07:44.096
colors.

00:07:44.686 --> 00:07:46.796
We can instead allow Extended

00:07:46.796 --> 00:07:47.946
Dynamic Range content.

00:07:48.316 --> 00:07:49.696
Content that isn't clamped in

00:07:49.696 --> 00:07:50.616
the zero to one range.

00:07:50.886 --> 00:07:52.156
And keep using the maximum

00:07:52.156 --> 00:07:53.206
brightness potential of that

00:07:53.206 --> 00:07:53.656
monitor.

00:07:54.106 --> 00:07:55.566
To make some images where we

00:07:55.566 --> 00:07:57.146
have things brighter than our

00:07:57.146 --> 00:07:58.046
referenced white point.

00:07:58.186 --> 00:08:00.586
And this isn't actually a new

00:08:00.586 --> 00:08:00.996
feature.

00:08:01.136 --> 00:08:01.986
This is something you've been

00:08:01.986 --> 00:08:03.576
able to do on a number of Macs

00:08:03.786 --> 00:08:05.576
since macOS 10.11.

00:08:06.056 --> 00:08:07.346
There's two API's that would

00:08:07.346 --> 00:08:08.026
help you do this.

00:08:09.096 --> 00:08:10.326
One of them is

00:08:10.466 --> 00:08:12.986
NSScreen.maximumExtendedDynamic

00:08:12.986 --> 00:08:14.426
RangeColorComponentValue.

00:08:15.026 --> 00:08:16.586
It actually does stuff.

00:08:16.586 --> 00:08:17.836
It's not just the longest

00:08:17.836 --> 00:08:18.796
Objective-C property name you've

00:08:18.796 --> 00:08:18.976
ever seen.

00:08:19.211 --> 00:08:21.211
[ Laughter ]

00:08:21.406 --> 00:08:22.616
And what it would do is when

00:08:22.616 --> 00:08:23.936
your system was in this Extended

00:08:23.936 --> 00:08:25.616
Dynamic Range mode, it would go

00:08:25.616 --> 00:08:26.846
ahead and tell you the maximum

00:08:26.846 --> 00:08:28.206
component value you could use

00:08:28.206 --> 00:08:29.326
before clipping would happen.

00:08:29.416 --> 00:08:31.396
So that could be 1.3, for

00:08:31.396 --> 00:08:31.776
example.

00:08:32.576 --> 00:08:34.426
If the system wasn't in this

00:08:34.426 --> 00:08:36.275
mode, it would just return 1.0.

00:08:37.296 --> 00:08:38.586
So you'd put the system in this

00:08:38.586 --> 00:08:40.076
mode using a different API and

00:08:40.405 --> 00:08:40.836
that's

00:08:40.836 --> 00:08:42.366
CAMetalLayer.wantsExtended

00:08:42.366 --> 00:08:43.566
DynamicRangeContent.

00:08:44.196 --> 00:08:45.426
There is also an API in

00:08:45.426 --> 00:08:46.616
NSOpenGLView called

00:08:46.616 --> 00:08:48.326
wantsExtendedDynamicRangeOpen

00:08:48.326 --> 00:08:49.416
GLSurface.

00:08:49.416 --> 00:08:50.476
And when either of those is set

00:08:50.476 --> 00:08:50.946
to true.

00:08:50.946 --> 00:08:52.216
You can get that extra headroom

00:08:52.216 --> 00:08:52.846
from this API.

00:08:54.136 --> 00:08:56.166
So something we've added macOS

00:08:56.166 --> 00:08:58.376
10.15 is an even longer

00:08:58.376 --> 00:08:58.976
Objective-C property name.

00:09:00.826 --> 00:09:02.206
The important bit is actually

00:09:02.206 --> 00:09:02.726
shorter.

00:09:02.926 --> 00:09:04.376
That's this maximumPotential

00:09:04.376 --> 00:09:04.716
piece.

00:09:05.376 --> 00:09:06.636
And this will tell you that

00:09:06.636 --> 00:09:08.076
headroom, that maximum value.

00:09:08.326 --> 00:09:10.136
Even if the system isn't in this

00:09:10.136 --> 00:09:11.596
Extended Dynamic Range mode.

00:09:11.726 --> 00:09:13.876
And that can be very useful.

00:09:14.056 --> 00:09:15.426
If you are working with Extended

00:09:15.426 --> 00:09:16.376
Dynamic Range content.

00:09:16.376 --> 00:09:17.806
You might have multiple possible

00:09:17.806 --> 00:09:19.216
pipelines you can send your

00:09:19.216 --> 00:09:20.026
image data through.

00:09:20.526 --> 00:09:22.126
And a floating point pipeline

00:09:22.126 --> 00:09:23.586
for extended content is probably

00:09:23.586 --> 00:09:25.486
more expensive than a BJRA

00:09:25.486 --> 00:09:26.526
pipeline, for example.

00:09:26.906 --> 00:09:28.146
So knowing that you have that

00:09:28.146 --> 00:09:29.276
headroom to play with ahead of

00:09:29.306 --> 00:09:29.626
time.

00:09:29.916 --> 00:09:31.196
Can let you conditionalize that

00:09:31.196 --> 00:09:31.586
support.

00:09:34.176 --> 00:09:35.316
So there's another API I want to

00:09:35.316 --> 00:09:35.936
talk about.

00:09:36.126 --> 00:09:38.006
Specifically, for the new Apple

00:09:38.006 --> 00:09:39.166
display we saw yesterday.

00:09:39.776 --> 00:09:41.596
And that display is absolutely

00:09:41.596 --> 00:09:42.056
amazing.

00:09:42.416 --> 00:09:43.506
Because of how bright it can

00:09:43.506 --> 00:09:43.686
get.

00:09:43.736 --> 00:09:45.306
It can sustain 1000 Nits

00:09:45.306 --> 00:09:45.876
indefinitely.

00:09:46.566 --> 00:09:48.436
And because of that ability, we

00:09:48.436 --> 00:09:49.646
like to say it's a reference

00:09:49.646 --> 00:09:50.566
quality display.

00:09:50.596 --> 00:09:52.406
We can say that for a specific

00:09:52.616 --> 00:09:53.476
component value.

00:09:53.556 --> 00:09:55.026
There will be an absolute number

00:09:55.026 --> 00:09:58.226
of Nits for that pixel.

00:09:58.226 --> 00:09:59.406
Now, it's very bright.

00:09:59.406 --> 00:10:00.866
But it's not infinitely bright.

00:10:01.156 --> 00:10:02.936
If you go ahead and produce a

00:10:02.936 --> 00:10:04.336
bright enough pixel value, it

00:10:04.336 --> 00:10:05.266
won't actually be able to

00:10:05.266 --> 00:10:05.876
represent it.

00:10:06.026 --> 00:10:07.236
And that reference quality

00:10:07.236 --> 00:10:08.706
attribute we talked about will

00:10:08.706 --> 00:10:09.506
be compromised.

00:10:09.596 --> 00:10:10.826
We'll have to scale the image

00:10:10.826 --> 00:10:12.496
content down to fit in the

00:10:12.496 --> 00:10:13.576
brightness range available.

00:10:14.046 --> 00:10:15.216
And that's what NSScreen

00:10:15.216 --> 00:10:16.446
maximumReference value is

00:10:16.516 --> 00:10:16.936
telling you.

00:10:17.006 --> 00:10:18.726
If you exceed this value, you're

00:10:18.726 --> 00:10:19.846
not going to be able to dish out

00:10:19.846 --> 00:10:20.926
absolute Nits anymore.

00:10:24.346 --> 00:10:26.836
Okay, so I mentioned see

00:10:26.836 --> 00:10:28.306
CAMetalLayer as part of a way of

00:10:28.306 --> 00:10:29.276
getting an Extended Dynamic

00:10:29.276 --> 00:10:29.966
Range content.

00:10:30.456 --> 00:10:31.746
And I want to point out

00:10:31.816 --> 00:10:33.246
something that if you're using

00:10:33.246 --> 00:10:35.086
MetalLayer on the Mac today, you

00:10:35.086 --> 00:10:35.726
should be doing.

00:10:35.896 --> 00:10:37.456
And that's you should be paying

00:10:37.456 --> 00:10:39.226
attention to which screen and

00:10:39.226 --> 00:10:40.906
which Metal device your

00:10:40.906 --> 00:10:42.086
CAMetalLayer is going to be

00:10:42.086 --> 00:10:42.666
displayed on.

00:10:42.666 --> 00:10:44.646
That's a little convoluted.

00:10:44.766 --> 00:10:46.376
You have to get your window and

00:10:46.376 --> 00:10:47.686
your window's screen and your

00:10:47.686 --> 00:10:48.896
screen's device description.

00:10:49.356 --> 00:10:50.836
And then you have to ask it for

00:10:50.836 --> 00:10:52.216
this hard-coded string that you

00:10:52.216 --> 00:10:53.386
found in our documentation.

00:10:53.386 --> 00:10:54.846
But we never export it in any of

00:10:54.846 --> 00:10:55.316
our headers.

00:10:56.466 --> 00:10:57.456
And finally, you'll pass that

00:10:57.456 --> 00:10:59.236
the CDDirectDisplay to figure

00:10:59.236 --> 00:11:00.226
out which device to use.

00:11:00.946 --> 00:11:02.216
And it's worth it because that

00:11:02.216 --> 00:11:03.736
will allow you to avoid moving

00:11:03.736 --> 00:11:05.756
the data between GPUs across the

00:11:05.756 --> 00:11:06.456
system bus.

00:11:07.226 --> 00:11:08.576
But we've made this better in

00:11:08.576 --> 00:11:09.486
macOS 10.15.

00:11:10.206 --> 00:11:12.306
CAMetalLayer and MetalView have

00:11:12.306 --> 00:11:13.636
a new preferred device property

00:11:13.636 --> 00:11:14.766
that will answer that question

00:11:14.766 --> 00:11:15.056
for you.

00:11:16.526 --> 00:11:17.666
It really reduces your code

00:11:17.666 --> 00:11:18.246
around this.

00:11:18.716 --> 00:11:20.426
So we're excited that you get to

00:11:20.426 --> 00:11:21.076
use that this year.

00:11:21.126 --> 00:11:24.236
And that covers what we wanted

00:11:24.236 --> 00:11:25.216
to say about screens.

00:11:25.446 --> 00:11:27.576
And now we're going to go into a

00:11:27.576 --> 00:11:28.876
whole diversity of text

00:11:28.876 --> 00:11:29.296
features.

00:11:30.176 --> 00:11:31.686
The first of these I want to

00:11:31.686 --> 00:11:34.346
mention is NSTextView uses

00:11:34.346 --> 00:11:35.926
adaptive color mapping for dark

00:11:35.926 --> 00:11:36.466
appearance.

00:11:37.046 --> 00:11:38.066
And this is a feature that you

00:11:38.066 --> 00:11:39.376
can turn on and off in Text

00:11:39.376 --> 00:11:39.596
Edit.

00:11:39.686 --> 00:11:41.706
I have snapshots of it in both

00:11:41.706 --> 00:11:43.056
aqua and dark aqua appearances.

00:11:43.416 --> 00:11:44.966
Using colors from the system

00:11:44.966 --> 00:11:45.596
crayon picker.

00:11:46.146 --> 00:11:47.256
And you can see that when this

00:11:47.256 --> 00:11:49.046
feature is activated, snow and

00:11:49.046 --> 00:11:50.336
licorice, for example, almost

00:11:50.336 --> 00:11:51.046
invert colors.

00:11:51.526 --> 00:11:54.136
Meanwhile, the more saturated

00:11:54.136 --> 00:11:55.946
and vibrant colors retain that

00:11:55.946 --> 00:11:56.956
same color character.

00:11:56.956 --> 00:11:58.816
But change brightness to better

00:11:58.816 --> 00:12:00.946
match the appearance they're in.

00:12:01.356 --> 00:12:02.566
So this can be very useful for

00:12:02.566 --> 00:12:03.736
making text use with playing

00:12:03.736 --> 00:12:04.786
content where you want them to

00:12:04.786 --> 00:12:05.736
fit in with the current

00:12:05.736 --> 00:12:06.156
appearance.

00:12:06.576 --> 00:12:07.726
And it can be very useful for

00:12:07.726 --> 00:12:09.506
Rich Text documents where that

00:12:09.506 --> 00:12:11.076
desire to make them fit in is

00:12:11.076 --> 00:12:12.386
more important than making them

00:12:12.386 --> 00:12:14.596
appear exactly as they will on a

00:12:14.596 --> 00:12:15.706
printed page, for example.

00:12:16.426 --> 00:12:17.666
Generally, we think this is the

00:12:17.666 --> 00:12:18.426
right thing to do.

00:12:18.726 --> 00:12:20.216
But if you have an app that's

00:12:20.216 --> 00:12:21.526
focused around authoring Rich

00:12:21.526 --> 00:12:22.216
Text content.

00:12:22.816 --> 00:12:24.346
You probably want to either opt

00:12:24.346 --> 00:12:25.736
out or offer the user the

00:12:25.736 --> 00:12:26.886
ability to turn this off.

00:12:27.156 --> 00:12:28.506
So they can decide that they

00:12:28.506 --> 00:12:30.136
want a representation matching

00:12:30.136 --> 00:12:32.016
printed content more than their

00:12:32.016 --> 00:12:32.366
screen.

00:12:34.036 --> 00:12:35.736
So I think most people in this

00:12:35.736 --> 00:12:36.546
room are familiar with

00:12:36.586 --> 00:12:37.396
NSSpellChecker.

00:12:37.476 --> 00:12:39.206
If not as a developer, then as a

00:12:39.206 --> 00:12:39.626
user.

00:12:40.356 --> 00:12:42.646
And in macOS 10.15, we're happy

00:12:42.646 --> 00:12:44.056
to announce that NSSpellChecker

00:12:44.056 --> 00:12:44.796
has a successor.

00:12:44.916 --> 00:12:47.266
And that successor is

00:12:47.506 --> 00:12:48.496
NSTextCheckingController.

00:12:49.556 --> 00:12:51.956
So NSSpellChecker worked within

00:12:51.956 --> 00:12:52.826
a text view.

00:12:53.196 --> 00:12:54.596
But NSTextCheckingController

00:12:54.976 --> 00:12:56.266
works with a variety of systems.

00:12:56.266 --> 00:12:58.276
We use it in UIKit, and WebKit,

00:12:58.536 --> 00:12:59.176
and AppKit.

00:12:59.456 --> 00:13:00.626
And you could use it yourself by

00:13:00.626 --> 00:13:01.376
implementing the

00:13:01.376 --> 00:13:02.776
NSTextCheckingClient protocol.

00:13:03.976 --> 00:13:05.026
But in addition to spell

00:13:05.026 --> 00:13:06.266
checking, it does other things.

00:13:06.266 --> 00:13:07.186
It does grammar checking.

00:13:07.516 --> 00:13:09.596
It can do data detection to find

00:13:09.596 --> 00:13:10.956
URLs and phone numbers and

00:13:10.956 --> 00:13:11.346
dates.

00:13:11.906 --> 00:13:13.726
And you can control all of that

00:13:13.726 --> 00:13:15.876
and configure whether it's going

00:13:15.876 --> 00:13:17.666
to merely highlight misspellings

00:13:17.706 --> 00:13:19.006
or automatically correct them.

00:13:19.496 --> 00:13:20.696
So we think it's a very flexible

00:13:20.696 --> 00:13:20.906
API.

00:13:20.906 --> 00:13:22.486
And if you're big on text input,

00:13:22.956 --> 00:13:23.876
it's something worth checking

00:13:24.556 --> 00:13:24.666
out.

00:13:25.356 --> 00:13:27.726
A small addition related to text

00:13:27.726 --> 00:13:29.496
is that almost all of the

00:13:29.596 --> 00:13:31.376
NSText-related classes support

00:13:31.376 --> 00:13:32.216
secure coding now.

00:13:32.836 --> 00:13:34.366
So if you wanted to use these as

00:13:34.366 --> 00:13:35.936
part of the vocabulary of --

00:13:35.936 --> 00:13:38.676
over an NSXPC connection, they

00:13:38.676 --> 00:13:39.676
will work splendidly.

00:13:42.576 --> 00:13:45.556
We're probably all familiar with

00:13:45.616 --> 00:13:46.176
NSFont.

00:13:46.276 --> 00:13:47.886
And slightly fewer of us are

00:13:47.886 --> 00:13:49.336
familiar with NSFontDescriptor.

00:13:49.446 --> 00:13:52.236
And NSFontDescriptor is a neat

00:13:52.236 --> 00:13:54.646
class that lets us look up and

00:13:54.646 --> 00:13:56.286
transform fonts using sort of

00:13:56.286 --> 00:13:57.746
semantic attributes about them.

00:13:58.226 --> 00:13:59.706
So I've made a little sample app

00:13:59.706 --> 00:13:59.956
here.

00:14:00.456 --> 00:14:02.696
And the top row is a font.

00:14:02.696 --> 00:14:03.916
I've hard-coded in Interface

00:14:03.946 --> 00:14:04.216
Builder.

00:14:04.806 --> 00:14:06.456
But the subsequent rows, I've

00:14:06.456 --> 00:14:07.526
configured using the

00:14:07.526 --> 00:14:08.946
SNFontDescriptor System Design

00:14:08.946 --> 00:14:10.236
API, which is new in macOS

00:14:10.236 --> 00:14:11.026
10.15.

00:14:11.356 --> 00:14:12.496
And Latin [inaudible] lets me go

00:14:12.496 --> 00:14:13.166
ahead and say.

00:14:13.406 --> 00:14:14.536
"I want to switch to a rounder

00:14:14.536 --> 00:14:16.426
font, or serif version, or a

00:14:16.426 --> 00:14:17.236
monospace font."

00:14:17.236 --> 00:14:19.386
And there's a session about

00:14:19.386 --> 00:14:19.576
this.

00:14:19.576 --> 00:14:20.786
Which will go into much greater

00:14:20.786 --> 00:14:21.496
detail about it.

00:14:21.496 --> 00:14:22.916
But we think this is a great way

00:14:23.196 --> 00:14:24.596
of stylized your applications.

00:14:28.816 --> 00:14:31.186
So if anyone has a

00:14:31.186 --> 00:14:32.946
cross-platform app, where they

00:14:32.946 --> 00:14:34.546
are writing Rich Text documents

00:14:34.726 --> 00:14:36.806
on both Mac OS and iOS, or even

00:14:36.806 --> 00:14:38.286
an app that's not cross-platform

00:14:38.286 --> 00:14:39.506
where they are reading documents

00:14:39.506 --> 00:14:40.466
from the other platform.

00:14:40.956 --> 00:14:42.376
You may have hit a situation

00:14:42.686 --> 00:14:44.326
where even though the document

00:14:44.326 --> 00:14:45.726
is specifying the same font

00:14:45.726 --> 00:14:46.216
sizes.

00:14:46.526 --> 00:14:47.686
They visually look very

00:14:47.686 --> 00:14:48.036
different.

00:14:48.156 --> 00:14:49.736
And that's because we have very

00:14:49.736 --> 00:14:50.756
different screen densities

00:14:50.866 --> 00:14:52.376
between our iOS devices and Mac

00:14:52.406 --> 00:14:52.896
devices.

00:14:53.126 --> 00:14:57.076
In macOS 10.15, we have new

00:14:57.076 --> 00:14:59.316
attributed string API's that you

00:14:59.316 --> 00:15:00.716
can use when reading and writing

00:15:01.046 --> 00:15:02.586
attributed strings to Rich Text

00:15:02.586 --> 00:15:03.166
documents.

00:15:03.736 --> 00:15:05.366
And you can tell us what the

00:15:05.366 --> 00:15:07.076
source and destination operating

00:15:07.076 --> 00:15:08.756
systems are and we will

00:15:08.756 --> 00:15:10.936
automatically adjust font sizes

00:15:11.426 --> 00:15:12.626
to make them appear visually the

00:15:12.626 --> 00:15:12.966
same.

00:15:13.816 --> 00:15:14.766
In this case, we brought

00:15:14.766 --> 00:15:16.816
160-point font down to 120

00:15:16.816 --> 00:15:17.146
point.

00:15:17.516 --> 00:15:18.586
Which is roughly where they're

00:15:18.586 --> 00:15:19.546
visually the same height.

00:15:23.656 --> 00:15:25.086
The last text feature I want to

00:15:25.086 --> 00:15:26.976
talk about is in addition to

00:15:26.976 --> 00:15:29.076
NSLayoutManager called

00:15:29.076 --> 00:15:30.276
usesDefaultHyphenation.

00:15:30.996 --> 00:15:32.846
And in the past, you'd be able

00:15:32.846 --> 00:15:34.326
to get the NSText classes to

00:15:34.326 --> 00:15:36.026
hyphenate it for you by using an

00:15:36.206 --> 00:15:38.216
NSParagraphStyle to control the

00:15:38.216 --> 00:15:39.276
threshold of hyphenation.

00:15:40.016 --> 00:15:41.626
This LayoutManager property is a

00:15:41.626 --> 00:15:42.806
little bit easier to use.

00:15:43.106 --> 00:15:44.026
It defaults to off.

00:15:44.026 --> 00:15:44.966
In which case you got no

00:15:44.966 --> 00:15:46.246
hyphenation, like on the left.

00:15:46.676 --> 00:15:48.006
And if you set it on, we'll pick

00:15:48.006 --> 00:15:49.346
a default value for hyphenation.

00:15:49.556 --> 00:15:50.606
And you can see on the right

00:15:50.696 --> 00:15:51.606
that we've hyphenated

00:15:51.746 --> 00:15:52.636
encyclopedia and

00:15:52.776 --> 00:15:53.896
internationalization.

00:15:55.726 --> 00:15:57.366
So we think these Text API's

00:15:57.626 --> 00:15:59.096
will really help you polish the

00:15:59.096 --> 00:16:00.406
corners and edges around your

00:16:00.406 --> 00:16:01.076
text systems.

00:16:01.576 --> 00:16:05.706
We have some great new stuff in

00:16:05.846 --> 00:16:06.386
NSToolbar.

00:16:07.546 --> 00:16:09.366
The First Edition is a new

00:16:09.366 --> 00:16:11.816
property on NSToolbarItem called

00:16:11.816 --> 00:16:12.566
isBordered.

00:16:14.246 --> 00:16:15.746
In the past, if you wanted to

00:16:15.746 --> 00:16:17.086
get this push-button style

00:16:17.086 --> 00:16:19.586
appearance in an NSToolbar, you

00:16:19.586 --> 00:16:20.866
would have to allocate your own

00:16:20.976 --> 00:16:22.536
NS -- or instance of NSButton

00:16:22.736 --> 00:16:24.376
and configure it and then you'd

00:16:24.376 --> 00:16:26.276
use it as a custom view on your

00:16:26.276 --> 00:16:26.856
Toolbar item.

00:16:26.936 --> 00:16:28.866
And that would work but it was

00:16:28.866 --> 00:16:30.436
extra effort for you, and

00:16:30.436 --> 00:16:31.756
additionally, you couldn't take

00:16:31.756 --> 00:16:33.576
advantage of NSToolbarItem's

00:16:33.576 --> 00:16:35.526
built-in support for automatic

00:16:35.526 --> 00:16:36.886
enabling and disabling.

00:16:37.796 --> 00:16:39.386
But if you go ahead and use this

00:16:39.386 --> 00:16:40.846
as bordered property, you'll get

00:16:40.846 --> 00:16:41.686
all of that for free.

00:16:42.866 --> 00:16:45.506
Additionally, NSToolbarItem has

00:16:45.506 --> 00:16:47.366
a new title property which lets

00:16:47.366 --> 00:16:48.816
you configure your Toolbar items

00:16:49.196 --> 00:16:50.666
to be string-based buttons

00:16:50.666 --> 00:16:52.366
instead of iconic ones.

00:16:52.846 --> 00:16:54.196
And this is distinct from the

00:16:54.196 --> 00:16:54.976
label property.

00:16:55.026 --> 00:16:56.256
Which would appear below these

00:16:56.256 --> 00:16:57.856
buttons if we have configured

00:16:57.856 --> 00:16:59.846
the Toolbar to show labels as

00:17:00.596 --> 00:17:00.746
well.

00:17:01.586 --> 00:17:02.496
That is not the

00:17:02.496 --> 00:17:04.296
NSToolbar-related class to gain

00:17:04.296 --> 00:17:05.935
functionality in macOS 10.15.

00:17:07.056 --> 00:17:08.746
We have also added a number of

00:17:08.746 --> 00:17:10.445
features to NSToolbarItemGroup

00:17:10.536 --> 00:17:11.955
to make it incredibly versatile

00:17:11.955 --> 00:17:13.486
and useful and the first of

00:17:13.486 --> 00:17:15.486
these is a number of convenience

00:17:15.486 --> 00:17:16.546
constructors for it.

00:17:16.756 --> 00:17:17.756
And these are just going to let

00:17:17.756 --> 00:17:19.866
you build the same great Toolbar

00:17:19.866 --> 00:17:22.886
UI's in fewer lines of code.

00:17:22.886 --> 00:17:24.165
But NSToolbarItemGroup has

00:17:24.165 --> 00:17:25.516
become more flexible at the same

00:17:25.516 --> 00:17:25.866
time.

00:17:26.556 --> 00:17:27.596
If you look at the image on the

00:17:27.596 --> 00:17:28.646
right side of the screen.

00:17:29.076 --> 00:17:30.336
You can see that it now has

00:17:30.336 --> 00:17:31.506
support for representing its

00:17:31.506 --> 00:17:33.066
items as a segmented control.

00:17:33.066 --> 00:17:35.036
And it can also represent them

00:17:35.416 --> 00:17:36.906
as pulldown and pop-up menus

00:17:36.906 --> 00:17:37.126
too.

00:17:38.056 --> 00:17:39.036
So this makes it a very

00:17:39.036 --> 00:17:40.136
versatile Toolbar control.

00:17:40.136 --> 00:17:42.466
Because of the way it uses the

00:17:42.466 --> 00:17:43.456
other Toolbar items as a

00:17:43.456 --> 00:17:44.206
vocabulary.

00:17:44.206 --> 00:17:45.846
We can also automatically create

00:17:45.846 --> 00:17:47.436
a collapsed representation for

00:17:47.436 --> 00:17:48.676
when you have too many Toolbar

00:17:48.676 --> 00:17:49.976
items for the window width.

00:17:55.046 --> 00:17:56.316
There's a very similar effect

00:17:56.406 --> 00:17:57.566
you can get using a new

00:17:57.656 --> 00:17:59.286
NSMenuToolbarItem class.

00:18:00.006 --> 00:18:01.746
And this is much like the menu

00:18:01.746 --> 00:18:03.466
item representations of the

00:18:03.466 --> 00:18:06.226
ToolbarItemGroup but it uses an

00:18:06.226 --> 00:18:07.666
NSMenu as currency instead.

00:18:08.396 --> 00:18:09.966
And that's significant because

00:18:09.966 --> 00:18:11.496
you can use NSMenu features like

00:18:11.496 --> 00:18:14.266
sub menus or separator items or

00:18:14.266 --> 00:18:15.546
even the ability to use a custom

00:18:15.546 --> 00:18:16.656
view for your menu items.

00:18:16.866 --> 00:18:19.526
So it's a very powerful tool, if

00:18:19.526 --> 00:18:20.786
you want to have sophisticated

00:18:20.786 --> 00:18:22.436
drill-down behaviors in your

00:18:24.256 --> 00:18:24.646
Toolbar.

00:18:24.826 --> 00:18:26.336
NSTouchBar has also received a

00:18:26.336 --> 00:18:27.476
few enhancements and macOS

00:18:27.476 --> 00:18:28.226
10.15.

00:18:28.876 --> 00:18:29.866
The first of these I want to

00:18:29.866 --> 00:18:32.156
note is a new class property on

00:18:32.206 --> 00:18:33.266
NSTouchBar itself.

00:18:33.316 --> 00:18:33.716
And that's

00:18:33.716 --> 00:18:35.446
isAutomaticCustomizedTouchBar

00:18:35.446 --> 00:18:36.336
MenuItemEnabled.

00:18:36.896 --> 00:18:38.056
And that will sound familiar.

00:18:38.146 --> 00:18:39.856
NSApplication has that exact

00:18:39.856 --> 00:18:40.536
same property.

00:18:41.446 --> 00:18:42.876
You could use this Touch Bar one

00:18:43.436 --> 00:18:44.986
in code where you wanted to

00:18:44.986 --> 00:18:46.056
factor it in such a way to not

00:18:46.056 --> 00:18:47.286
reference the NSApplication.

00:18:47.656 --> 00:18:49.146
And one example of that is if

00:18:49.146 --> 00:18:49.976
you're writing a UIKit

00:18:49.976 --> 00:18:51.306
application you're not going to

00:18:51.306 --> 00:18:52.796
have an NSApplication instance

00:18:52.796 --> 00:18:53.536
to talk to anyway.

00:18:54.146 --> 00:18:57.876
A more significant control is

00:18:57.876 --> 00:18:59.626
the new NSStepperTouchBarItem

00:18:59.776 --> 00:19:00.596
class.

00:19:01.286 --> 00:19:03.226
Just like an on-screen stepper,

00:19:03.566 --> 00:19:04.686
this is very useful for when

00:19:04.686 --> 00:19:06.146
you're doing a discrete entry

00:19:06.146 --> 00:19:07.556
for things such as dates and

00:19:07.556 --> 00:19:07.996
numbers.

00:19:08.916 --> 00:19:10.326
But given the larger size in the

00:19:10.326 --> 00:19:11.576
Touch Bar and the horizontal

00:19:11.576 --> 00:19:13.036
layout, you can also use this

00:19:13.036 --> 00:19:13.956
for new applications.

00:19:13.956 --> 00:19:15.996
Like visually selecting the tool

00:19:15.996 --> 00:19:17.086
in a drawing app.

00:19:17.416 --> 00:19:18.596
So we're really excited about

00:19:18.596 --> 00:19:19.836
this new TouchBarItem class.

00:19:19.946 --> 00:19:21.166
We think you'll be able to put

00:19:21.166 --> 00:19:22.316
it to good use in your

00:19:22.316 --> 00:19:22.996
applications.

00:19:25.116 --> 00:19:26.606
NSSliderTouchBarItem has a few

00:19:26.606 --> 00:19:27.606
small enhancements too.

00:19:28.876 --> 00:19:30.276
You may have experienced a case

00:19:30.276 --> 00:19:30.806
where you used an

00:19:30.806 --> 00:19:31.786
NSSliderTouchBarItem.

00:19:31.786 --> 00:19:32.736
And it was a little bit too

00:19:32.736 --> 00:19:33.746
small for your tastes.

00:19:34.666 --> 00:19:36.276
You could fix this by grabbing

00:19:36.276 --> 00:19:38.356
the slider from the TouchBarItem

00:19:38.356 --> 00:19:40.216
instance and adding auto layout

00:19:40.216 --> 00:19:41.466
constraints to it.

00:19:41.966 --> 00:19:44.416
In macOS 10.15, you can just set

00:19:44.416 --> 00:19:45.336
the minimum slider width

00:19:45.366 --> 00:19:46.526
directly on the item and we'll

00:19:46.526 --> 00:19:47.446
take care of that for you.

00:19:48.386 --> 00:19:50.476
Similarly, if your slider has

00:19:50.586 --> 00:19:51.666
global ambitions.

00:19:51.946 --> 00:19:53.446
You can check them by using the

00:19:53.446 --> 00:19:54.366
maximum slider with the

00:19:54.366 --> 00:19:54.716
property.

00:19:55.286 --> 00:19:58.396
And lastly, we'll talk about a

00:19:58.396 --> 00:19:59.476
bit -- a little bit about

00:19:59.476 --> 00:20:00.386
Sidebar Metrics.

00:20:00.656 --> 00:20:03.186
In macOS 10.15, you can toggle

00:20:03.186 --> 00:20:05.016
the size of a Sidebar using the

00:20:05.016 --> 00:20:06.306
setting and the general pane of

00:20:06.306 --> 00:20:07.106
System Preferences.

00:20:07.296 --> 00:20:09.356
And we default to medium.

00:20:09.356 --> 00:20:11.166
But you can also use small and

00:20:11.166 --> 00:20:11.556
large.

00:20:12.426 --> 00:20:13.526
And I want to call this out

00:20:13.526 --> 00:20:14.856
because if you haven't known

00:20:14.856 --> 00:20:15.606
about this feature.

00:20:15.606 --> 00:20:16.626
You maybe have not been

00:20:16.626 --> 00:20:18.196
including artwork appropriate

00:20:18.196 --> 00:20:19.456
for these small and large sizes.

00:20:19.456 --> 00:20:20.816
So if you're using bitmap

00:20:20.856 --> 00:20:21.876
artwork, go ahead and add

00:20:21.876 --> 00:20:22.986
representations for that.

00:20:23.306 --> 00:20:24.866
Or use a resolution independent

00:20:24.866 --> 00:20:25.176
version.

00:20:25.836 --> 00:20:27.496
Similarly, there's a new feature

00:20:27.496 --> 00:20:29.366
and macOS 10.15 to allow

00:20:29.366 --> 00:20:30.876
automatically picking the light

00:20:30.876 --> 00:20:31.946
and dark appearance.

00:20:31.986 --> 00:20:33.606
That's also available in the

00:20:33.606 --> 00:20:35.026
general pref pane.

00:20:36.446 --> 00:20:38.766
Okay, we covered controls for

00:20:38.766 --> 00:20:40.316
Toolbars and Touch Bars.

00:20:40.316 --> 00:20:41.816
Let's talk about some controls

00:20:41.876 --> 00:20:43.316
that are more broadly

00:20:43.406 --> 00:20:43.936
applicable.

00:20:45.196 --> 00:20:46.756
The first of these, we're

00:20:46.756 --> 00:20:47.626
excited to announce, this is

00:20:47.786 --> 00:20:48.306
NSSwitch.

00:20:48.626 --> 00:20:50.726
NSSwitch is a full subclass of

00:20:50.726 --> 00:20:51.296
NSControl.

00:20:51.576 --> 00:20:52.706
It supports bindings.

00:20:52.706 --> 00:20:53.796
It supports formatters.

00:20:55.166 --> 00:20:57.266
But it exists alongside the

00:20:57.366 --> 00:20:59.006
existing checkbox functionality.

00:20:59.616 --> 00:21:01.036
A question you probably have in

00:21:01.036 --> 00:21:02.186
your mind is, "When should I use

00:21:02.306 --> 00:21:02.756
NSSwitch?

00:21:02.826 --> 00:21:03.656
And when should I use a

00:21:03.656 --> 00:21:04.296
checkbox?"

00:21:04.786 --> 00:21:06.266
And if you are already using a

00:21:06.266 --> 00:21:07.876
checkbox, you should probably

00:21:07.876 --> 00:21:08.996
keep using a checkbox.

00:21:09.056 --> 00:21:10.106
They are generally the right

00:21:10.106 --> 00:21:10.826
control to use.

00:21:11.746 --> 00:21:13.786
We think NSSwitches are better

00:21:13.786 --> 00:21:15.046
used when you have a really

00:21:15.046 --> 00:21:15.886
heavy toggle.

00:21:15.886 --> 00:21:17.096
Something that's toggling a lot

00:21:17.096 --> 00:21:19.086
of functionality on and off.

00:21:19.086 --> 00:21:20.736
And in this example I have here,

00:21:21.266 --> 00:21:22.506
we have a master toggle on the

00:21:22.506 --> 00:21:23.806
left, which is going to enable

00:21:24.066 --> 00:21:26.016
all of the individual sharing

00:21:26.016 --> 00:21:26.976
services on the right.

00:21:32.366 --> 00:21:34.426
In macOS 10.15, we've invested a

00:21:34.426 --> 00:21:35.316
lot of effort into

00:21:35.316 --> 00:21:36.046
NSCollectionView.

00:21:36.746 --> 00:21:37.826
And one of the things we're

00:21:37.826 --> 00:21:39.816
excited to talk about is

00:21:39.816 --> 00:21:40.776
compositional layout.

00:21:41.316 --> 00:21:42.946
And in this scheme, you no

00:21:42.946 --> 00:21:44.246
longer need to subclass

00:21:44.306 --> 00:21:46.886
NSCollectioViewLayout to modify

00:21:47.286 --> 00:21:47.436
it.

00:21:47.436 --> 00:21:48.506
There are a number of

00:21:48.506 --> 00:21:49.616
interesting features you can

00:21:49.616 --> 00:21:50.046
throw in.

00:21:50.476 --> 00:21:52.476
Such as container-relative

00:21:52.476 --> 00:21:54.216
sizing, layout breaks and

00:21:54.216 --> 00:21:54.756
sections.

00:21:54.756 --> 00:21:56.076
As well as nestable groups.

00:21:56.176 --> 00:21:57.536
And also making individual

00:21:57.536 --> 00:21:58.406
sections scrollable.

00:21:58.406 --> 00:22:00.326
And of course, all of that works

00:22:00.326 --> 00:22:01.476
in both right-to-left and

00:22:01.476 --> 00:22:04.336
left-to-right languages.

00:22:04.336 --> 00:22:05.256
There is also a new

00:22:05.256 --> 00:22:06.916
CollectionView feature called

00:22:06.916 --> 00:22:07.966
Diffable Data Source.

00:22:09.066 --> 00:22:11.206
And these are identifier-based

00:22:11.206 --> 00:22:12.546
data sources that let us track

00:22:12.546 --> 00:22:13.636
things like the addition or

00:22:13.636 --> 00:22:15.196
removal of items or the movement

00:22:15.196 --> 00:22:16.166
of an item between two

00:22:16.166 --> 00:22:16.776
locations.

00:22:17.146 --> 00:22:18.526
And we can automatically infer

00:22:18.526 --> 00:22:19.916
the right animations to use.

00:22:20.386 --> 00:22:21.456
So this means you won't have to

00:22:21.456 --> 00:22:23.346
use performBatchUpdates or

00:22:23.346 --> 00:22:23.916
reloadData.

00:22:28.106 --> 00:22:29.526
Okay, backing away from

00:22:29.526 --> 00:22:31.896
app-specific controls to an IB

00:22:31.896 --> 00:22:32.286
feature.

00:22:32.536 --> 00:22:34.976
IB storyboards are a really

00:22:34.976 --> 00:22:36.656
great way of connecting the

00:22:36.656 --> 00:22:38.126
various view controllers in your

00:22:38.126 --> 00:22:38.726
application.

00:22:40.336 --> 00:22:42.836
And historically, your view

00:22:42.836 --> 00:22:44.066
controller would be initialized

00:22:44.066 --> 00:22:44.906
through in it with coder.

00:22:45.196 --> 00:22:46.216
And you'd have to find a

00:22:46.216 --> 00:22:48.156
different way of getting

00:22:48.156 --> 00:22:49.126
different information into the

00:22:49.126 --> 00:22:49.716
view controller.

00:22:49.716 --> 00:22:51.946
That wasn't necessarily

00:22:51.946 --> 00:22:52.366
difficult.

00:22:52.366 --> 00:22:53.546
But it did mean your code was

00:22:53.546 --> 00:22:55.036
factored maybe more broadly than

00:22:55.036 --> 00:22:55.376
you wanted.

00:22:55.686 --> 00:22:57.496
If you look at the snippet here,

00:22:57.496 --> 00:22:58.796
you can see I have a function

00:22:58.886 --> 00:23:00.226
called showPetDetails.

00:23:00.266 --> 00:23:02.466
And this returns a new view

00:23:02.466 --> 00:23:04.456
controller passing along a coder

00:23:04.456 --> 00:23:05.096
from IB.

00:23:05.646 --> 00:23:07.386
As well as inserting our own

00:23:07.386 --> 00:23:08.726
notion of a selected pet name.

00:23:10.256 --> 00:23:11.346
So this is a great way of

00:23:11.346 --> 00:23:12.276
bundling those separate

00:23:12.276 --> 00:23:13.686
initialization and configuration

00:23:13.686 --> 00:23:14.106
steps.

00:23:14.886 --> 00:23:16.496
And the other important thing to

00:23:16.496 --> 00:23:18.136
note about this is there's this

00:23:18.306 --> 00:23:20.236
IBSegueAction annotation

00:23:20.236 --> 00:23:21.186
attached to this function.

00:23:21.296 --> 00:23:23.776
And by doing that, we can go to

00:23:23.776 --> 00:23:24.986
the connections inspector and

00:23:24.986 --> 00:23:26.636
interface builder for our segue

00:23:27.386 --> 00:23:28.786
and wire it up directly to this

00:23:28.786 --> 00:23:29.076
method.

00:23:30.286 --> 00:23:31.626
So we think this is very useful

00:23:31.886 --> 00:23:33.366
for adding extra configuration

00:23:33.366 --> 00:23:34.576
into your view controllers and

00:23:34.576 --> 00:23:34.976
storyboards.

00:23:40.636 --> 00:23:43.336
So a great feature of all AppKit

00:23:43.336 --> 00:23:44.956
controls is how they support

00:23:44.956 --> 00:23:45.486
auto layout.

00:23:46.096 --> 00:23:47.646
They automatically know how to

00:23:47.646 --> 00:23:49.166
measure their content and feed

00:23:49.166 --> 00:23:50.066
that into the auto layout

00:23:50.066 --> 00:23:50.396
engine.

00:23:50.396 --> 00:23:52.506
And that means that you can do

00:23:52.506 --> 00:23:54.066
things like change the strings

00:23:54.116 --> 00:23:55.076
on these text fields and

00:23:55.076 --> 00:23:55.426
buttons.

00:23:55.706 --> 00:23:56.766
And auto layout will just

00:23:56.766 --> 00:23:58.426
automatically reflect the view

00:23:58.426 --> 00:23:59.876
hierarchy and window for us to

00:23:59.876 --> 00:24:00.346
look great.

00:24:03.156 --> 00:24:05.126
Sometimes, though, there are UIs

00:24:05.126 --> 00:24:07.026
where that's actually not

00:24:07.026 --> 00:24:07.486
important.

00:24:07.796 --> 00:24:09.656
So in this grid view, it's the

00:24:09.656 --> 00:24:11.506
grid that is determining the

00:24:11.506 --> 00:24:13.386
size of everything else and the

00:24:13.386 --> 00:24:14.916
intrinsic size of these labels

00:24:14.916 --> 00:24:15.976
doesn't actually matter.

00:24:16.996 --> 00:24:18.416
But normally, AppKit would still

00:24:18.416 --> 00:24:19.526
go ahead and measure these

00:24:19.526 --> 00:24:20.686
controls and feed them into the

00:24:20.686 --> 00:24:22.026
auto layout engine even though

00:24:22.026 --> 00:24:23.366
they won't affect the final

00:24:23.366 --> 00:24:23.676
result.

00:24:23.676 --> 00:24:28.096
In macOS 10.15, you can turn

00:24:28.096 --> 00:24:28.586
that off.

00:24:29.336 --> 00:24:31.096
NSView gains two new properties

00:24:31.446 --> 00:24:32.716
to turn off the measurement

00:24:32.796 --> 00:24:34.266
behaviors for both horizontal

00:24:34.266 --> 00:24:35.356
and vertical axes.

00:24:35.836 --> 00:24:36.986
And we think that can be a great

00:24:36.986 --> 00:24:38.236
way of getting back some

00:24:38.236 --> 00:24:40.176
performance in UIs where you

00:24:40.176 --> 00:24:40.976
know the intrinsic size of a

00:24:40.976 --> 00:24:41.976
control isn't going to matter.

00:24:47.296 --> 00:24:47.806
There's one other

00:24:47.806 --> 00:24:48.926
controller-related thing I want

00:24:48.926 --> 00:24:49.436
to talk about.

00:24:49.436 --> 00:24:50.466
And it's a bit more broad than

00:24:50.566 --> 00:24:51.046
NSControl.

00:24:51.046 --> 00:24:52.726
That's NSResponder.

00:24:53.296 --> 00:24:55.706
And its behavior relating to

00:24:55.706 --> 00:24:56.366
block Capture.

00:24:57.266 --> 00:24:58.856
So if you look at our snippet on

00:24:58.856 --> 00:25:00.676
screen you can see we have two

00:25:00.676 --> 00:25:01.116
blocks.

00:25:01.116 --> 00:25:02.786
We have an outer block that's

00:25:02.786 --> 00:25:03.776
going to be executed on a

00:25:03.776 --> 00:25:04.526
background thread.

00:25:04.606 --> 00:25:06.316
And we have an inner block

00:25:06.316 --> 00:25:07.806
that's going to be executed on

00:25:07.806 --> 00:25:08.406
the main thread.

00:25:08.606 --> 00:25:10.156
And this is a fairly common

00:25:10.156 --> 00:25:10.566
pattern.

00:25:10.566 --> 00:25:11.436
We do our work in the

00:25:11.436 --> 00:25:11.996
background.

00:25:12.496 --> 00:25:13.746
And then we go ahead and assign

00:25:13.746 --> 00:25:14.806
the results of that work to the

00:25:14.806 --> 00:25:17.056
UI on the main thread.

00:25:17.646 --> 00:25:19.656
But this snippet in macOS 10.14

00:25:20.066 --> 00:25:21.616
could have led to crashes and

00:25:21.616 --> 00:25:22.116
corruption.

00:25:22.736 --> 00:25:24.266
And that's because if the only

00:25:24.266 --> 00:25:25.846
thing retaining this text field

00:25:25.976 --> 00:25:27.986
is these blocks, the order of

00:25:27.986 --> 00:25:29.146
destruction of the blocks isn't

00:25:29.146 --> 00:25:29.586
defined.

00:25:30.326 --> 00:25:31.896
If the outer block deallocates

00:25:31.896 --> 00:25:33.336
last, the text field will

00:25:33.336 --> 00:25:34.676
deallocate on a background

00:25:34.676 --> 00:25:34.976
thread.

00:25:34.976 --> 00:25:37.056
And the text field, by virtue of

00:25:37.056 --> 00:25:38.646
being a responder, is part of

00:25:38.646 --> 00:25:39.506
the responder chain.

00:25:39.856 --> 00:25:40.966
It can be part of the view

00:25:40.966 --> 00:25:42.486
hierarchy or the key view loop.

00:25:42.876 --> 00:25:44.236
So there's all these global data

00:25:44.236 --> 00:25:45.406
structures that aren't safe to

00:25:45.406 --> 00:25:47.096
modify from the background which

00:25:47.096 --> 00:25:47.866
is what dealloc would do.

00:25:47.866 --> 00:25:52.296
In macOS 10.15, this isn't a

00:25:52.296 --> 00:25:52.716
problem.

00:25:53.116 --> 00:25:54.876
NSResponder will automatically

00:25:54.876 --> 00:25:56.646
move the dealloc method for it

00:25:56.646 --> 00:25:58.216
and its descendants to the main

00:25:58.216 --> 00:25:59.176
thread.

00:25:59.486 --> 00:26:00.756
So it becomes safe to capture

00:26:00.756 --> 00:26:02.106
these in blocks without being

00:26:02.106 --> 00:26:03.206
concerned about where those

00:26:03.206 --> 00:26:04.026
blocks are released.

00:26:04.456 --> 00:26:05.596
And we think this is going to

00:26:06.006 --> 00:26:07.386
remove a whole complex set of

00:26:07.456 --> 00:26:08.756
crashes for many of your apps.

00:26:09.096 --> 00:26:10.526
Where the corruption from doing

00:26:10.526 --> 00:26:11.916
work on a background thread

00:26:11.916 --> 00:26:13.306
isn't visible until seconds or

00:26:13.306 --> 00:26:14.496
minutes afterward.

00:26:21.596 --> 00:26:23.496
So I want to talk about Open and

00:26:23.536 --> 00:26:24.546
Save panels for a moment.

00:26:25.416 --> 00:26:27.966
We have a fairly broad change in

00:26:27.966 --> 00:26:29.006
macOS 10.15.

00:26:29.106 --> 00:26:31.756
And that's that Open and Save

00:26:31.816 --> 00:26:34.136
panels are now using a separate

00:26:34.136 --> 00:26:34.656
process.

00:26:35.356 --> 00:26:37.256
This is a behavior that's

00:26:37.256 --> 00:26:38.836
already been present for Sandbox

00:26:38.836 --> 00:26:40.526
applications and we've simply

00:26:40.526 --> 00:26:41.606
brought it over to the remaining

00:26:41.606 --> 00:26:41.976
apps.

00:26:43.076 --> 00:26:44.376
Generally, this should be a

00:26:44.376 --> 00:26:45.096
silent change.

00:26:45.096 --> 00:26:45.806
We don't think you're going to

00:26:45.806 --> 00:26:48.086
notice anything here apart from

00:26:48.086 --> 00:26:49.336
some performance and security

00:26:49.336 --> 00:26:49.786
benefits.

00:26:50.366 --> 00:26:52.266
However, if you are sub-classing

00:26:52.266 --> 00:26:53.916
Open and Save panel and relying

00:26:53.916 --> 00:26:55.146
on specific view hierarchy

00:26:55.146 --> 00:26:56.736
configurations you might run

00:26:56.736 --> 00:26:57.436
into problems.

00:26:57.826 --> 00:26:58.946
And we'd be happy to see you in

00:26:58.946 --> 00:27:00.646
the labs to talk about those and

00:27:00.646 --> 00:27:01.976
help work through them.

00:27:05.256 --> 00:27:06.186
We also have some new

00:27:06.316 --> 00:27:07.746
NSWorkspace methods in macOS

00:27:07.746 --> 00:27:08.356
10.15.

00:27:08.466 --> 00:27:11.446
These are methods that can open

00:27:11.446 --> 00:27:13.266
one or more URLs or open an

00:27:13.266 --> 00:27:13.896
application.

00:27:14.516 --> 00:27:15.586
And that will sound familiar

00:27:15.586 --> 00:27:16.986
because you'll think NSWorkspace

00:27:16.986 --> 00:27:18.716
already has methods to do that.

00:27:18.926 --> 00:27:21.156
It does. But the new methods are

00:27:21.156 --> 00:27:21.796
asynchronous.

00:27:21.906 --> 00:27:23.046
So they're not going to block

00:27:23.046 --> 00:27:23.816
the main threat at all.

00:27:24.386 --> 00:27:25.666
When the application finishes

00:27:25.666 --> 00:27:27.076
launching or the operation is

00:27:27.076 --> 00:27:28.436
cancelled we will call you back

00:27:28.436 --> 00:27:29.496
using a completion handler.

00:27:29.646 --> 00:27:31.406
And in addition to being

00:27:31.406 --> 00:27:32.076
asynchronous.

00:27:32.456 --> 00:27:34.076
these methods also offer a high

00:27:34.076 --> 00:27:35.886
degree of control over how we

00:27:35.886 --> 00:27:37.216
launch those URLs and

00:27:37.216 --> 00:27:37.876
applications.

00:27:38.016 --> 00:27:40.506
And that control is achieved

00:27:40.876 --> 00:27:41.336
through the new

00:27:41.406 --> 00:27:43.426
NSWorkspace.OpenConfiguration

00:27:43.426 --> 00:27:43.846
object.

00:27:44.246 --> 00:27:46.736
This is just a sampling of the

00:27:46.736 --> 00:27:48.246
knobs it has to play with.

00:27:48.516 --> 00:27:49.886
But you can control whether the

00:27:49.886 --> 00:27:51.156
user needs to participate in

00:27:51.156 --> 00:27:51.756
this process.

00:27:51.756 --> 00:27:53.246
So for example, if you're

00:27:53.246 --> 00:27:54.676
requesting a server mount or if

00:27:54.676 --> 00:27:55.766
we don't know what application

00:27:55.766 --> 00:27:56.926
to use, the user might need to

00:27:56.926 --> 00:27:58.006
pick which application.

00:27:58.536 --> 00:27:59.836
And you can instead suppress

00:27:59.876 --> 00:28:01.146
that behavior and just cancel

00:28:01.146 --> 00:28:01.936
the Open process.

00:28:02.766 --> 00:28:04.076
You can also control whether an

00:28:04.076 --> 00:28:05.646
application or document is added

00:28:05.646 --> 00:28:06.466
to the Recents menu.

00:28:07.256 --> 00:28:08.826
And there's an entire variety of

00:28:08.826 --> 00:28:09.926
things for controlling which

00:28:09.926 --> 00:28:11.406
applications can be hidden on

00:28:11.406 --> 00:28:12.856
launch or which are activated in

00:28:12.856 --> 00:28:13.876
the background or foreground.

00:28:14.556 --> 00:28:16.246
So we think whatever your URL

00:28:16.246 --> 00:28:17.656
application opening needs,

00:28:17.966 --> 00:28:19.436
NSWorkspace will accommodate a

00:28:19.436 --> 00:28:20.976
wonderfully in macOS 10.15.

00:28:26.046 --> 00:28:27.276
We're going to talk about Events

00:28:27.426 --> 00:28:28.086
for a little bit.

00:28:28.086 --> 00:28:30.526
And there's a feature I want to

00:28:30.526 --> 00:28:30.896
show you.

00:28:31.826 --> 00:28:33.166
And this is -- if you hover your

00:28:33.166 --> 00:28:36.086
mouse over the green button in

00:28:36.086 --> 00:28:37.646
the window title bar, you're

00:28:37.646 --> 00:28:38.686
going to get this new menu.

00:28:39.216 --> 00:28:40.396
And the first set of options

00:28:40.736 --> 00:28:42.096
concerns things like making a

00:28:42.096 --> 00:28:43.326
window full screen or

00:28:43.386 --> 00:28:44.726
positioning it in a shared

00:28:44.726 --> 00:28:45.666
full-screen space.

00:28:45.716 --> 00:28:47.266
And those are fairly useful.

00:28:47.776 --> 00:28:48.996
But there's another feature that

00:28:48.996 --> 00:28:50.906
I think is even more useful and

00:28:50.906 --> 00:28:52.126
that's the ability to move a

00:28:52.126 --> 00:28:53.476
window to another display.

00:28:53.626 --> 00:28:56.166
As someone who is constantly

00:28:56.166 --> 00:28:57.456
moving their laptop to different

00:28:57.456 --> 00:28:59.036
external monitors, I found this

00:28:59.036 --> 00:29:00.046
to be incredibly useful.

00:29:00.966 --> 00:29:02.166
But you don't actually have to

00:29:02.166 --> 00:29:03.406
use a conventional display.

00:29:04.126 --> 00:29:05.696
iPads will function as

00:29:05.696 --> 00:29:06.926
additional displays now too.

00:29:08.236 --> 00:29:09.526
So you kind of see where I'm

00:29:09.526 --> 00:29:10.006
going with this.

00:29:10.006 --> 00:29:11.356
Given that the iPad application

00:29:11.356 --> 00:29:12.336
is named Pencil Draw.

00:29:12.406 --> 00:29:13.286
And we have this beautiful

00:29:13.286 --> 00:29:14.716
cursive script on there.

00:29:15.586 --> 00:29:16.756
This supports Apple Pencil.

00:29:16.926 --> 00:29:19.226
So many iPads can now function

00:29:19.226 --> 00:29:20.956
as tablet devices for Macs.

00:29:20.956 --> 00:29:23.646
So in macOS 10.15, we're going

00:29:23.646 --> 00:29:25.176
to have many more tablet users.

00:29:26.036 --> 00:29:27.676
If you've been thinking about

00:29:27.676 --> 00:29:28.966
adding tablet support to your

00:29:28.966 --> 00:29:30.706
app at any point in the last

00:29:30.706 --> 00:29:32.706
many years, now is a great time

00:29:32.706 --> 00:29:33.316
to adopt it.

00:29:33.316 --> 00:29:35.086
So I'm going to show you what

00:29:35.086 --> 00:29:36.646
you need to know to do that.

00:29:37.416 --> 00:29:40.806
Tablet Events come in basically

00:29:40.806 --> 00:29:41.896
as normal mouse events.

00:29:43.646 --> 00:29:44.706
There's a difference though.

00:29:44.706 --> 00:29:45.956
And that's if you pay attention

00:29:45.956 --> 00:29:47.666
to the NSEvent SubType field,

00:29:48.026 --> 00:29:49.716
there is a tabletPoint value

00:29:49.716 --> 00:29:49.896
there.

00:29:49.946 --> 00:29:52.216
And when you see a tabletPoint

00:29:52.216 --> 00:29:53.866
Event, it one, comes from a

00:29:53.866 --> 00:29:56.216
tablet, but it's also going to

00:29:56.216 --> 00:29:57.466
have pressure information

00:29:57.466 --> 00:29:57.906
attached.

00:29:58.586 --> 00:29:59.586
And paying attention to that

00:29:59.586 --> 00:30:00.996
pressure information is critical

00:30:00.996 --> 00:30:02.226
for making things like that nice

00:30:02.226 --> 00:30:02.856
cursive stroke.

00:30:03.246 --> 00:30:04.556
Where you have different pen

00:30:04.556 --> 00:30:05.886
widths throughout it.

00:30:07.156 --> 00:30:09.176
If you've used the pencil APIs

00:30:09.176 --> 00:30:10.946
on iOS in the past, there was

00:30:11.226 --> 00:30:12.846
something you could do by

00:30:12.846 --> 00:30:13.826
registering a handler.

00:30:13.876 --> 00:30:15.736
To retroactively receive updates

00:30:15.736 --> 00:30:17.786
to pressure in the past.

00:30:17.896 --> 00:30:19.066
That is not present on the Mac.

00:30:19.166 --> 00:30:20.146
You can just pay attention to

00:30:20.146 --> 00:30:21.566
the pressure field in the

00:30:21.566 --> 00:30:22.386
NSEvent.

00:30:25.096 --> 00:30:26.566
There's another convention

00:30:26.656 --> 00:30:28.046
related to the Apple Pencil I

00:30:28.046 --> 00:30:28.656
want to mention.

00:30:29.206 --> 00:30:30.656
And this is that you can double

00:30:30.836 --> 00:30:32.466
tap it, the side of the pencil,

00:30:32.466 --> 00:30:34.686
and it will switch whatever the

00:30:34.686 --> 00:30:35.836
current tool is in a drawing

00:30:35.836 --> 00:30:37.676
app, for example, and we call

00:30:37.676 --> 00:30:38.646
this the changeModeEvent.

00:30:38.646 --> 00:30:40.466
There's a new EventType forum on

00:30:40.466 --> 00:30:40.846
this event.

00:30:41.296 --> 00:30:42.266
And there's a new responder

00:30:42.266 --> 00:30:44.516
method to handle directing that

00:30:44.516 --> 00:30:45.506
through the responder chain.

00:30:46.706 --> 00:30:49.856
In many cases, you might want to

00:30:49.856 --> 00:30:51.356
have tablet functionality that

00:30:51.356 --> 00:30:53.106
isn't actually anchored in a

00:30:53.106 --> 00:30:54.656
responder subclass like a View.

00:30:55.366 --> 00:30:56.606
But you might still want to

00:30:56.606 --> 00:30:57.666
handle events directly.

00:30:57.856 --> 00:30:58.936
And there's a way you can

00:30:58.936 --> 00:30:59.696
accomplish this.

00:30:59.696 --> 00:31:00.876
Using the existing

00:31:00.876 --> 00:31:02.076
LocalEventMonitor API.

00:31:03.246 --> 00:31:04.556
So if you look at the snippet on

00:31:04.556 --> 00:31:06.326
the bottom of the screen, you

00:31:06.806 --> 00:31:07.906
can see that we use the

00:31:07.906 --> 00:31:09.716
NSEvent.addLocalEventMonitor for

00:31:09.716 --> 00:31:12.336
events function to catch these

00:31:12.336 --> 00:31:13.236
changeModeEvents.

00:31:13.346 --> 00:31:14.696
And then we just cycle through

00:31:14.696 --> 00:31:16.096
our tools and we return the

00:31:16.096 --> 00:31:17.626
event allowing it to flow

00:31:17.626 --> 00:31:18.186
through the rest of the

00:31:18.186 --> 00:31:18.866
responder chain.

00:31:18.866 --> 00:31:21.486
So that can be a great way of

00:31:21.486 --> 00:31:23.496
factoring your code more

00:31:23.496 --> 00:31:23.906
usefully.

00:31:28.086 --> 00:31:30.756
Okay. Let's talk about a

00:31:30.836 --> 00:31:31.726
Foundation feature.

00:31:32.296 --> 00:31:33.516
We have some new Geometry data

00:31:33.516 --> 00:31:33.906
types.

00:31:33.906 --> 00:31:34.896
I know normally, when we get

00:31:34.896 --> 00:31:36.436
into Foundation, everyone's on

00:31:36.436 --> 00:31:37.106
the edge of their seat.

00:31:37.786 --> 00:31:39.276
This year, you can pick which

00:31:39.276 --> 00:31:39.976
edge of the seat you're on.

00:31:40.516 --> 00:31:42.576
[ Laughter ]

00:31:43.076 --> 00:31:44.356
The data types are

00:31:44.356 --> 00:31:45.876
NSDirectionalRectEdge,

00:31:46.456 --> 00:31:48.436
NSDirectionalEdgeInsets, and

00:31:48.556 --> 00:31:49.316
NSRectAlignment.

00:31:49.436 --> 00:31:51.176
And instead of working in

00:31:51.176 --> 00:31:53.006
currency, like Min X or Max S,

00:31:53.006 --> 00:31:53.826
or left and right.

00:31:54.246 --> 00:31:55.526
these are using leading and

00:31:55.526 --> 00:31:57.016
trailing identifiers instead.

00:31:57.186 --> 00:31:58.756
So they'll automatically flip

00:31:58.876 --> 00:32:00.116
based on context in a

00:32:00.116 --> 00:32:01.706
left-to-right or right-to-left

00:32:01.706 --> 00:32:02.096
system.

00:32:02.366 --> 00:32:04.546
And NSCollectionView uses these

00:32:04.546 --> 00:32:05.646
exactly for this purpose.

00:32:05.996 --> 00:32:07.236
We think you'll be able to adopt

00:32:07.236 --> 00:32:08.126
them directly in your

00:32:08.126 --> 00:32:08.966
applications too.

00:32:13.246 --> 00:32:14.446
Another Foundation feature I

00:32:14.446 --> 00:32:15.456
want to talk about that will

00:32:15.456 --> 00:32:17.016
help with localization is new

00:32:17.016 --> 00:32:17.746
formatters.

00:32:18.906 --> 00:32:20.566
The first of these is the

00:32:20.566 --> 00:32:23.006
NSRelativeDateFormatter.

00:32:23.386 --> 00:32:25.086
And NSRelativeDateFormatter has

00:32:25.086 --> 00:32:26.246
two important properties, a

00:32:26.246 --> 00:32:28.086
dateTimeStyle, which allows you

00:32:28.086 --> 00:32:29.406
to pick whether you're sort of

00:32:29.406 --> 00:32:30.526
working at absolute units or

00:32:30.526 --> 00:32:31.556
more colloquial terms.

00:32:31.736 --> 00:32:32.956
The one week ago versus last

00:32:32.956 --> 00:32:33.116
week.

00:32:33.306 --> 00:32:35.086
As well as the unitsStyle,

00:32:35.086 --> 00:32:37.326
controlling how verbose or how

00:32:37.406 --> 00:32:38.976
terse our language is.

00:32:42.076 --> 00:32:43.376
There's also a new

00:32:43.426 --> 00:32:44.666
NSListFormatter class.

00:32:45.416 --> 00:32:46.506
And NSListFormatter is

00:32:46.506 --> 00:32:47.766
interesting in that instead of

00:32:47.766 --> 00:32:49.656
formatting sort of a scalar

00:32:49.656 --> 00:32:51.606
object, it will format an array

00:32:51.606 --> 00:32:52.536
of objects instead.

00:32:52.616 --> 00:32:55.196
And it will do that by using a

00:32:55.196 --> 00:32:56.856
separate item format for each

00:32:56.856 --> 00:32:57.756
object individually.

00:32:58.646 --> 00:33:00.206
The value of the List Formatter

00:33:00.466 --> 00:33:02.196
adds is in knowing where to

00:33:02.196 --> 00:33:03.476
place the commas between the

00:33:03.476 --> 00:33:05.296
individual formatted strings.

00:33:05.616 --> 00:33:06.906
As well as whether at Oxford

00:33:06.906 --> 00:33:08.076
comma is necessary or a

00:33:08.076 --> 00:33:08.596
conjunction.

00:33:09.436 --> 00:33:10.896
There is a session covering this

00:33:10.896 --> 00:33:12.226
in much greater detail later,

00:33:12.326 --> 00:33:14.046
which I encourage you to check

00:33:14.046 --> 00:33:14.906
out.

00:33:17.176 --> 00:33:19.346
Foundation also has a new

00:33:19.346 --> 00:33:20.746
feature we're very excited about

00:33:20.796 --> 00:33:21.496
called Combine.

00:33:22.306 --> 00:33:24.816
And Combine is a Swift API for

00:33:24.816 --> 00:33:26.346
connecting properties of the

00:33:26.346 --> 00:33:27.886
objects in your applications to

00:33:27.886 --> 00:33:29.476
other properties in your

00:33:29.686 --> 00:33:30.386
application.

00:33:31.236 --> 00:33:33.376
So a specific example I want to

00:33:33.376 --> 00:33:35.366
show is this awakeFrontNib

00:33:35.366 --> 00:33:37.006
method we've implemented where

00:33:37.006 --> 00:33:38.456
we go ahead and we bind to the

00:33:38.456 --> 00:33:39.866
name property from our model

00:33:39.866 --> 00:33:42.006
object to the value of an NSText

00:33:42.006 --> 00:33:42.256
field.

00:33:42.256 --> 00:33:44.096
And whenever that name changes,

00:33:44.336 --> 00:33:45.316
that text field is going to

00:33:45.316 --> 00:33:46.136
update its string.

00:33:47.126 --> 00:33:48.646
So this is incredibly powerful.

00:33:48.986 --> 00:33:50.516
It has applications beyond just

00:33:50.516 --> 00:33:51.206
UI binding.

00:33:51.556 --> 00:33:52.596
And there's another session

00:33:52.596 --> 00:33:54.096
dedicated to specifically this

00:33:54.136 --> 00:33:54.926
that we think is going to be

00:33:54.926 --> 00:33:55.526
fantastic.

00:33:56.346 --> 00:33:57.606
So go ahead and check that out

00:33:57.606 --> 00:33:57.946
this week, too.

00:34:02.046 --> 00:34:04.066
And finally, I want to mention

00:34:04.066 --> 00:34:04.986
some changes in system

00:34:04.986 --> 00:34:07.486
extensions for macOS.

00:34:07.486 --> 00:34:08.916
We have a small addition to the

00:34:08.916 --> 00:34:11.036
system extension family in the

00:34:11.036 --> 00:34:13.275
form of a non-UI file provider

00:34:13.275 --> 00:34:14.065
action extension.

00:34:14.636 --> 00:34:16.356
And if you are familiar with a

00:34:16.356 --> 00:34:18.366
UI-based file or act -- file

00:34:18.366 --> 00:34:19.565
provider action extension, this

00:34:19.835 --> 00:34:20.815
is the same thing.

00:34:21.016 --> 00:34:22.196
But sometimes, you just don't

00:34:22.196 --> 00:34:23.246
need that extra UI.

00:34:23.366 --> 00:34:24.065
You can do without it.

00:34:24.065 --> 00:34:25.846
And this satisfies that need.

00:34:28.376 --> 00:34:29.686
Something else that we think is

00:34:29.686 --> 00:34:31.755
even more interesting is there's

00:34:31.755 --> 00:34:32.666
functionality.

00:34:32.666 --> 00:34:34.005
That in the past, you would have

00:34:34.005 --> 00:34:35.246
had to use a Kernel Extension to

00:34:35.246 --> 00:34:36.036
add the DOS.

00:34:36.106 --> 00:34:37.636
And we've now made system

00:34:37.636 --> 00:34:39.525
extensions to do similar things.

00:34:40.186 --> 00:34:41.536
We have new Network Extensions.

00:34:41.985 --> 00:34:43.576
We have DriverKit to help

00:34:43.576 --> 00:34:45.096
writing certain types of device

00:34:45.096 --> 00:34:45.596
drivers.

00:34:46.106 --> 00:34:47.346
And we have a new Endpoint

00:34:47.346 --> 00:34:48.626
Security system that will help

00:34:48.626 --> 00:34:49.746
write antivirus software.

00:34:50.406 --> 00:34:51.536
So if you have been writing

00:34:51.536 --> 00:34:52.696
kernel extensions all these

00:34:52.696 --> 00:34:53.746
years, we think these will be

00:34:53.746 --> 00:34:54.985
very useful for you.

00:34:55.306 --> 00:34:57.106
We're excited with the security

00:34:57.106 --> 00:34:58.006
enhancements we get to make

00:34:58.006 --> 00:34:58.506
around this.

00:34:58.506 --> 00:34:59.596
And we think you'll be excited

00:34:59.596 --> 00:35:00.486
about not doing kernel mode

00:35:00.486 --> 00:35:00.956
debugging anymore.

00:35:04.056 --> 00:35:06.206
So that covers our additions.

00:35:06.486 --> 00:35:09.066
I want to remind you of many of

00:35:09.066 --> 00:35:10.426
the great things that we covered

00:35:10.426 --> 00:35:10.686
today.

00:35:11.486 --> 00:35:12.806
We had additions for NSColor

00:35:12.806 --> 00:35:14.036
including new dynamic system

00:35:14.036 --> 00:35:15.746
colors, new ways of embedding

00:35:15.746 --> 00:35:17.546
your own programmatic dynamicism

00:35:17.666 --> 00:35:19.776
into the NSColor system, as well

00:35:19.776 --> 00:35:20.996
as, a color sampler class you

00:35:20.996 --> 00:35:22.446
can use yourself for picking

00:35:22.446 --> 00:35:23.686
colors directly from the screen.

00:35:24.816 --> 00:35:27.326
We covered a number of APIs in

00:35:27.326 --> 00:35:28.936
NSScreen including those for you

00:35:28.936 --> 00:35:30.756
to make great usage of Extended

00:35:30.756 --> 00:35:31.606
Dynamic Range.

00:35:31.606 --> 00:35:34.546
And we had an entire variety of

00:35:34.546 --> 00:35:35.426
text enhancements.

00:35:35.486 --> 00:35:38.056
If you want your apps to look

00:35:38.096 --> 00:35:39.536
great in dark mode and you're

00:35:39.686 --> 00:35:41.006
presenting either simple or Rich

00:35:41.006 --> 00:35:43.346
Text, the dark mode enhancements

00:35:43.346 --> 00:35:43.936
are going to be great.

00:35:44.256 --> 00:35:45.396
The text checking controllers

00:35:45.396 --> 00:35:46.316
will let you enrich your own

00:35:46.316 --> 00:35:47.926
text engines like never before.

00:35:48.496 --> 00:35:50.306
And our compatibility between

00:35:50.516 --> 00:35:52.696
iOS and macOS regarding text

00:35:52.696 --> 00:35:54.996
sizing is very useful especially

00:35:54.996 --> 00:35:56.456
given the presence of UIKit on

00:35:56.636 --> 00:35:58.906
the Mac this year.

00:35:58.906 --> 00:36:00.776
We covered controls like

00:36:00.876 --> 00:36:02.146
NSSwitch, as well as

00:36:02.146 --> 00:36:02.816
CollectionView.

00:36:03.016 --> 00:36:04.406
And we definitely encourage you

00:36:04.406 --> 00:36:05.436
to check out the CollectionView

00:36:05.436 --> 00:36:06.566
session because CollectionView

00:36:06.566 --> 00:36:07.806
has become a very important part

00:36:07.806 --> 00:36:08.966
of our UI vocabulary.

00:36:10.386 --> 00:36:11.116
We covered some great

00:36:11.116 --> 00:36:12.406
enhancements for NSToolbar

00:36:12.696 --> 00:36:13.546
allowing you to make push

00:36:13.546 --> 00:36:15.686
buttons more easily and more

00:36:15.686 --> 00:36:17.456
versatile ways of using the

00:36:17.456 --> 00:36:18.736
ToolbarItem group.

00:36:18.736 --> 00:36:23.006
And then we've also covered some

00:36:23.006 --> 00:36:24.126
things for handling tablet

00:36:24.126 --> 00:36:25.926
events in NSEvent and specific

00:36:25.926 --> 00:36:27.086
support for the Apple Pencil.

00:36:27.146 --> 00:36:28.706
And again, with so many more

00:36:28.706 --> 00:36:30.036
tablet users coming to the Mac

00:36:30.036 --> 00:36:31.586
in the near future we think if

00:36:31.586 --> 00:36:33.256
your app can use tablets, it's a

00:36:33.376 --> 00:36:34.186
great feature to add.

00:36:34.296 --> 00:36:36.696
And we wrapped up with the

00:36:36.696 --> 00:36:38.896
localization enhancements for NS

00:36:38.896 --> 00:36:39.946
-- or for Foundation geometry

00:36:39.946 --> 00:36:41.216
data types and the new

00:36:41.216 --> 00:36:41.836
formatters.

00:36:43.276 --> 00:36:44.876
So we hope you're excited to

00:36:44.876 --> 00:36:45.566
adopt these two.

00:36:46.166 --> 00:36:47.336
And please have a great week.

00:36:47.336 --> 00:36:48.976
Thank you very much.

00:36:49.516 --> 00:36:56.500
[ Applause ]