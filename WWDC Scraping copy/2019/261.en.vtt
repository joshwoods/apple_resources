WEBVTT

00:00:00.506 --> 00:00:05.926
[ Music ]

00:00:06.426 --> 00:00:08.396
>> Hello. My name is Sommer

00:00:08.396 --> 00:00:09.996
Panage and I'm an engineering

00:00:09.996 --> 00:00:11.696
manager on the Accessibility

00:00:11.696 --> 00:00:12.976
team here at Apple.

00:00:12.976 --> 00:00:15.486
I'll be talking about the Large

00:00:15.486 --> 00:00:16.286
Content Viewer.

00:00:16.566 --> 00:00:18.426
A feature that helps people who

00:00:18.426 --> 00:00:20.106
prefer larger text sizes.

00:00:20.836 --> 00:00:22.456
In this talk, you'll learn how

00:00:22.456 --> 00:00:24.616
to ensure that all parts of your

00:00:24.616 --> 00:00:26.666
app are readable for everyone.

00:00:28.216 --> 00:00:30.146
We'll first cover what the Large

00:00:30.146 --> 00:00:32.286
Content Viewer is and why it's

00:00:32.286 --> 00:00:32.856
important.

00:00:33.626 --> 00:00:35.476
Next, we'll look at some API

00:00:35.916 --> 00:00:37.226
that will allow you to support

00:00:37.226 --> 00:00:38.016
it in your app.

00:00:38.876 --> 00:00:41.266
Finally, we'll cover examples of

00:00:41.266 --> 00:00:42.826
some situations you might

00:00:42.826 --> 00:00:44.956
encounter in your app and how to

00:00:44.956 --> 00:00:46.916
handle them.

00:00:47.176 --> 00:00:48.556
So let's start with some

00:00:48.556 --> 00:00:49.186
background.

00:00:51.136 --> 00:00:52.906
Before we talk about the Large

00:00:52.906 --> 00:00:55.046
Content Viewer, let's review a

00:00:55.046 --> 00:00:57.206
related topic, Dynamic Type.

00:00:58.166 --> 00:01:00.366
Dynamic Type is a feature that

00:01:00.366 --> 00:01:02.236
allows you to customize the size

00:01:02.236 --> 00:01:03.506
of text for the system.

00:01:04.096 --> 00:01:05.946
You can make it smaller if you

00:01:05.946 --> 00:01:07.336
want to fit more content on

00:01:07.336 --> 00:01:09.486
screen, or you can make it

00:01:09.486 --> 00:01:10.866
larger and more readable.

00:01:11.246 --> 00:01:13.226
By default, you can choose

00:01:13.226 --> 00:01:14.876
between seven different sizes.

00:01:16.116 --> 00:01:17.666
But if you go into your

00:01:17.666 --> 00:01:19.676
Accessibility settings, you can

00:01:19.676 --> 00:01:21.696
enable larger sizes and then you

00:01:21.696 --> 00:01:23.246
get five additional sizes.

00:01:24.026 --> 00:01:26.026
This is important because many

00:01:26.026 --> 00:01:27.426
people aren't just using this

00:01:27.426 --> 00:01:28.976
feature because they prefer a

00:01:28.976 --> 00:01:29.996
different text size.

00:01:30.546 --> 00:01:31.806
They're doing it because they

00:01:31.806 --> 00:01:34.046
need a larger text size in order

00:01:34.046 --> 00:01:37.226
to be able to read the text.

00:01:37.746 --> 00:01:39.216
So let's take a look at how

00:01:39.216 --> 00:01:40.716
Dynamic Type changes the

00:01:40.716 --> 00:01:42.796
behavior of iOS.

00:01:43.016 --> 00:01:44.636
Here's how the phone app looks

00:01:44.736 --> 00:01:46.286
at the default text size.

00:01:47.886 --> 00:01:49.906
Now, if I change my text size to

00:01:49.906 --> 00:01:51.586
one of the Accessibility sizes,

00:01:51.886 --> 00:01:53.376
the text gets much bigger.

00:01:54.006 --> 00:01:55.816
However, you might have noticed

00:01:55.896 --> 00:01:57.606
that part of the text on screen

00:01:57.746 --> 00:01:58.846
is not getting bigger.

00:02:00.346 --> 00:02:02.776
For example, look at the button

00:02:02.926 --> 00:02:04.536
in the bottom left.

00:02:04.536 --> 00:02:06.046
If the customer has set their

00:02:06.046 --> 00:02:08.175
size to be large like we see in

00:02:08.175 --> 00:02:10.045
the content area, then they

00:02:10.045 --> 00:02:11.946
likely wouldn't see the text

00:02:12.066 --> 00:02:13.326
that we see in the tab bar

00:02:13.426 --> 00:02:14.596
because it's still small.

00:02:15.466 --> 00:02:17.216
You might not be able to make up

00:02:17.216 --> 00:02:18.536
the icon above it either in

00:02:18.536 --> 00:02:18.926
fact.

00:02:19.606 --> 00:02:21.526
However, we don't want to grow

00:02:21.526 --> 00:02:22.946
the tab bar because that would

00:02:22.946 --> 00:02:24.286
leave very little room for the

00:02:24.286 --> 00:02:26.376
main content that you see, in

00:02:26.376 --> 00:02:27.876
this case your contact list.

00:02:28.396 --> 00:02:30.856
So instead, if you're using

00:02:30.886 --> 00:02:32.856
larger text sizes, we allow you

00:02:32.856 --> 00:02:34.536
to long press on that button to

00:02:34.536 --> 00:02:35.626
see a larger version.

00:02:36.096 --> 00:02:38.256
Here's how that looks.

00:02:38.746 --> 00:02:40.226
You can now drag your finger

00:02:40.226 --> 00:02:41.646
along the bottom bar to see

00:02:41.646 --> 00:02:42.916
what's on each of those buttons.

00:02:43.456 --> 00:02:44.716
When you finally drag your

00:02:44.716 --> 00:02:46.216
finger onto the button that you

00:02:46.216 --> 00:02:48.366
want to tap, you can just let go

00:02:48.626 --> 00:02:50.126
and the Apple act as though you

00:02:50.126 --> 00:02:50.926
tapped the button.

00:02:51.616 --> 00:02:53.366
This feature is what we call the

00:02:53.366 --> 00:02:54.576
Large Content Viewer.

00:02:55.196 --> 00:02:57.046
It allows people with low vision

00:02:57.246 --> 00:02:59.396
to use tab bars or any other UI

00:02:59.626 --> 00:03:00.666
that has to stay small.

00:03:01.566 --> 00:03:02.986
It's important for your app to

00:03:02.986 --> 00:03:04.596
show the Large Content Viewer

00:03:04.596 --> 00:03:05.466
when appropriate.

00:03:06.206 --> 00:03:07.906
If you're using standard UIKit

00:03:07.906 --> 00:03:09.446
bars, you already showed the

00:03:09.446 --> 00:03:10.386
Large Content Viewer.

00:03:10.956 --> 00:03:12.226
You might just not have noticed

00:03:12.226 --> 00:03:13.736
it before because it's only

00:03:13.736 --> 00:03:15.316
enabled for the Accessibility

00:03:15.316 --> 00:03:16.296
text sizes.

00:03:16.866 --> 00:03:18.896
But if you've got a custom bar

00:03:19.276 --> 00:03:21.256
or some other custom UI that has

00:03:21.256 --> 00:03:22.926
to stay small, you'll need to

00:03:22.926 --> 00:03:24.846
implement some API so that your

00:03:24.846 --> 00:03:26.686
UI works just as well as the

00:03:26.686 --> 00:03:28.326
standard UIKit controls.

00:03:28.796 --> 00:03:30.596
Remember, this is only for the

00:03:30.596 --> 00:03:32.636
case when your custom UI cannot

00:03:32.636 --> 00:03:33.346
grow in size.

00:03:34.736 --> 00:03:36.876
Scaling with dynamic type is

00:03:36.926 --> 00:03:38.586
always preferred to showing the

00:03:38.586 --> 00:03:39.616
Large Content Viewer.

00:03:40.186 --> 00:03:44.116
But sometimes, our bars simply

00:03:44.116 --> 00:03:44.736
can't scale.

00:03:45.036 --> 00:03:46.956
So let's look at how you can

00:03:46.956 --> 00:03:48.846
support the Large Content Viewer

00:03:48.846 --> 00:03:51.226
in your app.

00:03:51.446 --> 00:03:53.446
Earlier, I said that you already

00:03:53.446 --> 00:03:54.806
showed the Large Content Viewer

00:03:54.916 --> 00:03:56.576
if you're using standard UIKit

00:03:56.576 --> 00:03:57.096
bars.

00:03:57.886 --> 00:03:59.406
But you might still need to do

00:03:59.406 --> 00:04:00.796
something to make sure that it

00:04:00.796 --> 00:04:01.506
looks good.

00:04:02.736 --> 00:04:04.166
If your bar items use PDF

00:04:04.166 --> 00:04:06.606
images, make sure that you check

00:04:06.706 --> 00:04:09.406
the Preserve Vector checkbox in

00:04:09.406 --> 00:04:11.306
the asset catalog as seen here.

00:04:12.106 --> 00:04:13.466
That will ensure that your

00:04:13.466 --> 00:04:15.326
images scale smoothly to larger

00:04:15.326 --> 00:04:15.836
sizes.

00:04:16.435 --> 00:04:19.305
If your image button doesn't

00:04:19.305 --> 00:04:21.555
have vector data, for example if

00:04:21.555 --> 00:04:24.246
you're using a PNG, then by

00:04:24.246 --> 00:04:25.716
default that image will look

00:04:25.766 --> 00:04:27.236
blurry when it's shown in the

00:04:27.236 --> 00:04:27.616
viewer.

00:04:28.316 --> 00:04:29.686
To fix that, you'll need to

00:04:29.686 --> 00:04:31.646
provide a larger version of the

00:04:31.646 --> 00:04:32.116
image.

00:04:33.366 --> 00:04:35.756
Use the large content size image

00:04:35.756 --> 00:04:38.346
property on UI bar item to do

00:04:38.346 --> 00:04:38.616
that.

00:04:39.286 --> 00:04:41.006
If you need to adjust the

00:04:41.006 --> 00:04:42.876
positioning, for example, if

00:04:42.876 --> 00:04:44.216
your image doesn't look centered

00:04:44.216 --> 00:04:45.466
in the viewer the way you wanted

00:04:45.466 --> 00:04:47.616
to, then you can adjust the

00:04:47.616 --> 00:04:49.546
large content size image in

00:04:50.386 --> 00:04:50.506
sets.

00:04:51.416 --> 00:04:53.516
So what do you need to do if you

00:04:53.516 --> 00:04:54.276
have custom UI?

00:04:55.166 --> 00:04:57.626
Well, before iOS 13, you

00:04:57.626 --> 00:04:59.186
basically had to make your own

00:04:59.186 --> 00:05:00.276
Large Content Viewer from

00:05:00.276 --> 00:05:00.876
scratch.

00:05:01.416 --> 00:05:03.586
But now, we've added API that

00:05:03.586 --> 00:05:05.346
allows you to show the same UI

00:05:05.446 --> 00:05:06.906
that's shown for standard UIKit

00:05:06.906 --> 00:05:07.396
bars.

00:05:08.016 --> 00:05:09.556
So let's say you have a custom

00:05:09.556 --> 00:05:12.076
tab bar, first you'll need to

00:05:12.076 --> 00:05:13.766
specify the buttons in your tab

00:05:13.766 --> 00:05:15.776
bar as items to be shown in the

00:05:15.776 --> 00:05:16.126
viewer.

00:05:17.046 --> 00:05:18.936
Then the Large Content Viewer

00:05:18.936 --> 00:05:21.256
needs a title and/or an image

00:05:21.256 --> 00:05:22.436
for each of those buttons.

00:05:22.776 --> 00:05:24.706
If you happened to be using

00:05:24.706 --> 00:05:26.516
standard UIKit classes for those

00:05:26.516 --> 00:05:27.746
buttons, you'll get those for

00:05:27.746 --> 00:05:28.086
free.

00:05:29.126 --> 00:05:31.006
Finally, you'll need to set up a

00:05:31.006 --> 00:05:32.316
gesture interaction on the

00:05:32.316 --> 00:05:33.596
custom tab bar itself.

00:05:35.196 --> 00:05:38.276
The new UILargeContentViewerItem

00:05:38.276 --> 00:05:40.746
protocol specifies the info that

00:05:40.746 --> 00:05:42.426
the Large Content Viewer needs

00:05:42.506 --> 00:05:44.026
in order to show your content.

00:05:45.306 --> 00:05:47.006
This showsLargeContentViewer

00:05:47.006 --> 00:05:49.186
property is what you'll use to

00:05:49.186 --> 00:05:50.726
mark your tab bar buttons.

00:05:51.136 --> 00:05:53.496
Set it to true on any views that

00:05:53.496 --> 00:05:54.566
should present the viewer.

00:05:55.686 --> 00:05:57.206
Then you can specify a

00:05:57.206 --> 00:05:59.456
largeContentTitle and a

00:05:59.456 --> 00:06:00.626
largeContentImage.

00:06:00.926 --> 00:06:02.576
You can specify either of those

00:06:02.876 --> 00:06:03.616
or both of them.

00:06:04.486 --> 00:06:07.226
If you want to reuse a PDF image

00:06:07.226 --> 00:06:09.026
from a small button, you can set

00:06:09.026 --> 00:06:10.976
the scalesLargeContentImage

00:06:10.976 --> 00:06:11.966
property to true.

00:06:12.656 --> 00:06:14.546
But just as we saw earlier with

00:06:14.546 --> 00:06:16.626
UI bar item, make sure that you

00:06:16.626 --> 00:06:18.626
preserve the vector data for

00:06:18.626 --> 00:06:19.186
your image.

00:06:19.696 --> 00:06:21.566
And lastly, if you want to

00:06:21.566 --> 00:06:23.096
center your image, you can use

00:06:23.096 --> 00:06:25.116
the largeContentImageInsets.

00:06:27.216 --> 00:06:29.226
UIView already implements this

00:06:29.226 --> 00:06:31.256
protocol and it also provides

00:06:31.256 --> 00:06:31.756
setters.

00:06:31.996 --> 00:06:34.116
So in many cases, you can just

00:06:34.116 --> 00:06:35.656
set the properties rather than

00:06:35.656 --> 00:06:37.396
having to subclass and override.

00:06:38.296 --> 00:06:39.966
Also, as we mentioned earlier,

00:06:40.306 --> 00:06:42.256
certain UIKit classes like UI

00:06:42.256 --> 00:06:44.376
button and UI label, return

00:06:44.376 --> 00:06:46.226
default values for their title

00:06:46.386 --> 00:06:47.126
and image.

00:06:47.636 --> 00:06:50.416
So that's how you annotate the

00:06:50.416 --> 00:06:51.586
buttons in your tab bar.

00:06:52.496 --> 00:06:54.166
Next, you'll need to add a

00:06:54.166 --> 00:06:55.696
gesture interaction to the tab

00:06:55.696 --> 00:06:56.446
bar itself.

00:06:56.806 --> 00:06:58.756
To add the interaction, you'll

00:06:58.756 --> 00:07:00.716
use the same addInteraction

00:07:00.846 --> 00:07:02.456
method that's used for adding,

00:07:02.526 --> 00:07:03.556
drag and drop support.

00:07:03.856 --> 00:07:06.906
Here's how the interaction for

00:07:06.906 --> 00:07:08.526
the Large Content Viewer works.

00:07:08.846 --> 00:07:10.806
It's got a few properties on it.

00:07:11.276 --> 00:07:12.896
In the simple case, you can

00:07:12.896 --> 00:07:14.356
create an instance of this

00:07:14.356 --> 00:07:15.936
interaction with no arguments

00:07:16.156 --> 00:07:17.746
and you don't need to touch any

00:07:17.746 --> 00:07:18.896
of the other properties here.

00:07:19.416 --> 00:07:21.426
But if your app has other

00:07:21.426 --> 00:07:23.206
gesture recognizers, you may

00:07:23.206 --> 00:07:24.706
need to customize the behavior.

00:07:25.866 --> 00:07:27.676
You can provide a delegate to

00:07:27.676 --> 00:07:29.436
get fine-grained control over

00:07:29.436 --> 00:07:30.306
how it works.

00:07:31.156 --> 00:07:32.396
You can also use the

00:07:32.396 --> 00:07:34.516
gestureRecognizer property if

00:07:34.516 --> 00:07:36.246
you need to set up relationships

00:07:36.246 --> 00:07:37.776
with your app's other gesture

00:07:37.776 --> 00:07:38.546
recognizers.

00:07:39.206 --> 00:07:41.806
Finally, to find out whether the

00:07:41.806 --> 00:07:43.606
Large Content Viewer is enabled,

00:07:43.936 --> 00:07:45.456
you can check the isEnabled

00:07:45.456 --> 00:07:46.006
property.

00:07:46.536 --> 00:07:48.096
And of course, you can listen

00:07:48.096 --> 00:07:49.796
for the notification to see when

00:07:49.796 --> 00:07:50.536
that changes.

00:07:52.356 --> 00:07:53.836
There are a few ways to

00:07:53.836 --> 00:07:55.666
customize the behavior using the

00:07:55.666 --> 00:07:56.136
delegate.

00:07:57.836 --> 00:08:00.026
First, you can specify what

00:08:00.026 --> 00:08:01.616
happens when the user lifts

00:08:01.616 --> 00:08:02.946
their finger from an item in

00:08:02.946 --> 00:08:03.756
your custom view.

00:08:04.146 --> 00:08:06.206
It should act as though the user

00:08:06.206 --> 00:08:07.176
tapped on that item.

00:08:07.826 --> 00:08:08.956
If you don't implement this

00:08:08.956 --> 00:08:10.436
method and you're using a

00:08:10.436 --> 00:08:12.326
standard UI control like UI

00:08:12.326 --> 00:08:14.376
button, by default it will get

00:08:14.376 --> 00:08:16.306
sent a touchup inside event.

00:08:16.926 --> 00:08:18.556
But if you got something more

00:08:18.556 --> 00:08:21.086
custom there, for example a view

00:08:21.086 --> 00:08:22.376
with its own tap gesture

00:08:22.376 --> 00:08:24.136
recognizer, you can implement

00:08:24.136 --> 00:08:25.396
this method to provide the

00:08:25.396 --> 00:08:26.376
behavior you need.

00:08:27.206 --> 00:08:29.316
Next, there's an option to

00:08:29.316 --> 00:08:31.026
provide the item at a particular

00:08:31.026 --> 00:08:31.426
point.

00:08:31.946 --> 00:08:33.706
By default, the item will be

00:08:33.706 --> 00:08:35.366
found by calling point inside

00:08:35.366 --> 00:08:37.236
with event recursively on your

00:08:37.236 --> 00:08:38.106
view hierarchy.

00:08:38.765 --> 00:08:40.836
But that might not work if you

00:08:40.876 --> 00:08:42.496
aren't using views for example.

00:08:42.986 --> 00:08:45.356
So, this method lets you return

00:08:45.356 --> 00:08:47.136
which item should be shown in

00:08:47.136 --> 00:08:48.386
the viewer for a particular

00:08:48.386 --> 00:08:48.816
point.

00:08:50.016 --> 00:08:52.346
Finally, you can decide which

00:08:52.346 --> 00:08:53.836
viewController should house the

00:08:53.836 --> 00:08:54.916
Large Content Viewer.

00:08:55.456 --> 00:08:57.446
By default, UIKit will try to

00:08:57.446 --> 00:08:58.956
pick a viewController that

00:08:58.956 --> 00:09:00.596
contains the view that you added

00:09:00.596 --> 00:09:01.556
the interaction to.

00:09:02.406 --> 00:09:03.796
But if that default choice

00:09:03.796 --> 00:09:05.166
doesn't work well for your app,

00:09:05.326 --> 00:09:06.536
you can specify one here.

00:09:08.556 --> 00:09:10.236
So, we've covered the API.

00:09:11.026 --> 00:09:12.616
Now let's look at some examples

00:09:12.616 --> 00:09:14.206
showing how to use it.

00:09:15.776 --> 00:09:17.696
First, let's look at a simple

00:09:17.696 --> 00:09:18.136
case.

00:09:18.616 --> 00:09:20.446
You've got a custom bar but

00:09:20.446 --> 00:09:22.606
inside you've got standard UIKit

00:09:22.606 --> 00:09:23.056
views.

00:09:23.426 --> 00:09:25.546
Here we've got a bar with a UI

00:09:25.546 --> 00:09:27.096
button and a UI label.

00:09:28.816 --> 00:09:30.446
Because we're using standard

00:09:30.446 --> 00:09:32.856
views, all we need to do is up

00:09:32.856 --> 00:09:35.006
to the button and the label in

00:09:35.316 --> 00:09:35.786
using the

00:09:35.786 --> 00:09:37.226
showsLargeContentViewer

00:09:37.226 --> 00:09:37.786
property.

00:09:38.166 --> 00:09:39.876
There's no need to specify a

00:09:39.876 --> 00:09:42.076
title or an image since those

00:09:42.076 --> 00:09:43.596
can be inferred from the views

00:09:43.596 --> 00:09:44.406
of the properties.

00:09:45.336 --> 00:09:47.166
Finally, we can add the gesture

00:09:47.166 --> 00:09:48.646
interaction to the custom bar

00:09:48.906 --> 00:09:50.446
with no need to modify any

00:09:50.446 --> 00:09:50.956
properties.

00:09:51.296 --> 00:09:52.296
That's it.

00:09:53.556 --> 00:09:55.246
If your custom bar uses

00:09:55.246 --> 00:09:56.806
something else for its buttons,

00:09:57.106 --> 00:09:58.496
then you'll need some of the

00:09:58.496 --> 00:09:59.076
other API.

00:09:59.826 --> 00:10:01.696
Let's say each of your buttons

00:10:01.696 --> 00:10:03.836
is an instance of a MyButton

00:10:03.836 --> 00:10:04.786
custom class.

00:10:05.326 --> 00:10:08.406
You can override the UI Large

00:10:08.406 --> 00:10:10.086
Content Viewer item properties

00:10:10.176 --> 00:10:11.806
on your buttons to return the

00:10:11.806 --> 00:10:12.366
right info.

00:10:13.136 --> 00:10:15.166
Here we're returning true for

00:10:15.166 --> 00:10:17.596
showsLargeContentViewer and

00:10:17.736 --> 00:10:19.236
we're returning our text as the

00:10:19.236 --> 00:10:19.606
title.

00:10:21.116 --> 00:10:23.226
If you have an image with vector

00:10:23.226 --> 00:10:25.466
data for each button, then you

00:10:25.466 --> 00:10:27.186
can use the exact same image for

00:10:27.186 --> 00:10:28.406
the Large Content Viewer.

00:10:29.266 --> 00:10:31.006
Just make sure to return true

00:10:31.006 --> 00:10:33.406
for scalesLargeContentImage so

00:10:33.406 --> 00:10:34.696
that it grows to the correct

00:10:34.696 --> 00:10:35.226
size.

00:10:36.656 --> 00:10:38.666
Finally, let's look at an

00:10:38.666 --> 00:10:40.436
example when you need to deal

00:10:40.436 --> 00:10:42.036
with another gesture recognizer.

00:10:42.036 --> 00:10:44.436
A classic example from one of

00:10:44.436 --> 00:10:46.126
Apple's apps is in Safari.

00:10:46.866 --> 00:10:48.366
When you tap on the Back button,

00:10:48.596 --> 00:10:50.326
it goes to the previous page.

00:10:50.826 --> 00:10:52.356
But when you long press on it,

00:10:52.716 --> 00:10:54.156
it brings you to page with your

00:10:54.156 --> 00:10:55.396
past browsing history.

00:10:56.166 --> 00:10:57.956
The Large Content Viewer also

00:10:57.956 --> 00:10:59.436
uses a long press gesture.

00:11:00.056 --> 00:11:02.666
So how do you get those to work

00:11:03.936 --> 00:11:04.136
together?

00:11:04.436 --> 00:11:06.276
You should absolutely allow both

00:11:06.276 --> 00:11:06.936
things to work.

00:11:07.546 --> 00:11:09.436
In other words, let the Large

00:11:09.436 --> 00:11:11.266
Content Viewer show so that

00:11:11.266 --> 00:11:12.426
people can see what's on the

00:11:12.426 --> 00:11:12.876
button.

00:11:13.486 --> 00:11:15.216
But once they've had a chance to

00:11:15.216 --> 00:11:17.006
read it, do the thing you would

00:11:17.006 --> 00:11:18.586
normally do on long press.

00:11:19.606 --> 00:11:21.386
To do that, first, let's

00:11:21.386 --> 00:11:22.786
increase our existing

00:11:22.846 --> 00:11:24.866
longPressRecognizer's duration.

00:11:25.466 --> 00:11:26.916
That way we'll give people some

00:11:26.916 --> 00:11:28.576
extra time to show the viewer

00:11:28.576 --> 00:11:30.616
first before we do the other

00:11:30.616 --> 00:11:31.106
action.

00:11:31.766 --> 00:11:34.036
You should also make sure you

00:11:34.036 --> 00:11:35.586
update the duration if people's

00:11:35.586 --> 00:11:36.566
setting change.

00:11:37.116 --> 00:11:39.026
If they start or stop using one

00:11:39.026 --> 00:11:40.766
of the Accessibility text sizes,

00:11:41.076 --> 00:11:43.056
the duration should also update.

00:11:44.306 --> 00:11:45.676
Next, let's set a

00:11:45.676 --> 00:11:47.926
UIGestureRecognizer delegate on

00:11:47.926 --> 00:11:48.706
the existing

00:11:48.766 --> 00:11:49.886
longPressRecognizer.

00:11:51.366 --> 00:11:53.406
Now, in your delegate callbacks,

00:11:53.766 --> 00:11:55.386
you can make sure that both of

00:11:55.386 --> 00:11:55.966
your existing

00:11:55.966 --> 00:11:58.106
longPressRecognizer and the

00:11:58.106 --> 00:11:59.576
gestureRecognizer from the Large

00:11:59.576 --> 00:12:01.316
Content Viewer can recognize at

00:12:01.316 --> 00:12:02.216
the same time.

00:12:02.466 --> 00:12:04.446
That way, neither one of them

00:12:04.526 --> 00:12:05.766
will prevent the other from

00:12:05.766 --> 00:12:06.156
working.

00:12:07.456 --> 00:12:09.476
Here, we can see the behavior

00:12:09.476 --> 00:12:10.976
with our Large Content Viewer

00:12:11.036 --> 00:12:11.866
implementation.

00:12:12.606 --> 00:12:14.576
If I lift my finger while the

00:12:14.576 --> 00:12:16.156
Large Content Viewer is visible,

00:12:16.286 --> 00:12:17.806
I go back as expected.

00:12:18.336 --> 00:12:19.936
However, if I long press for the

00:12:19.936 --> 00:12:21.676
longer duration, I can still get

00:12:21.676 --> 00:12:22.746
to that browsing history.

00:12:23.286 --> 00:12:25.836
So that's how your app can

00:12:25.836 --> 00:12:27.306
accommodate people who prefer

00:12:27.306 --> 00:12:29.426
larger text sizes even for UI

00:12:29.656 --> 00:12:30.886
that needs to stay small.

00:12:30.886 --> 00:12:33.176
Note that you should only use

00:12:33.176 --> 00:12:35.066
the Large Content Viewer for UI

00:12:35.236 --> 00:12:36.136
that can't scale.

00:12:36.836 --> 00:12:38.436
Scaling for Dynamic Type is

00:12:38.436 --> 00:12:39.846
always the preferred option.

00:12:40.146 --> 00:12:41.936
So if you can do that, don't use

00:12:41.936 --> 00:12:42.386
this as API.

00:12:43.396 --> 00:12:45.696
Finally, if your custom view has

00:12:45.696 --> 00:12:47.516
other interactions, make sure

00:12:47.656 --> 00:12:48.676
that those are all still

00:12:48.676 --> 00:12:50.656
possible for people who use the

00:12:50.656 --> 00:12:51.606
Large Content Viewer.

00:12:52.206 --> 00:12:54.026
That way, everyone can use all

00:12:54.026 --> 00:12:55.516
of your app's great features.

00:12:55.966 --> 00:12:56.836
That's it for now.

00:12:57.156 --> 00:12:57.966
Thanks for watching.