WEBVTT

00:00:00.506 --> 00:00:05.500
[ Music ]

00:00:08.516 --> 00:00:11.546
[ Cheering and Applause ]

00:00:12.046 --> 00:00:12.376
>> Welcome.

00:00:15.496 --> 00:00:16.696
My name is Steve Breen, and I'm

00:00:16.696 --> 00:00:18.256
an engineer on the UIKit Team.

00:00:18.426 --> 00:00:19.586
And today, I'm joined by my

00:00:19.586 --> 00:00:21.186
colleagues, Troy Stevens from

00:00:21.186 --> 00:00:22.456
the AppKit team, and Jacob

00:00:22.456 --> 00:00:24.336
clapper from the App Store team.

00:00:25.366 --> 00:00:27.096
And today, we're going to talk a

00:00:27.216 --> 00:00:29.416
bit about UI data sources.

00:00:30.296 --> 00:00:30.986
[Chuckles] All right, so today's

00:00:30.986 --> 00:00:32.156
talk is going to be broken into

00:00:32.156 --> 00:00:33.006
four segments.

00:00:33.626 --> 00:00:34.656
First, I want to talk about the

00:00:34.656 --> 00:00:35.936
current state-of-the-art.

00:00:36.076 --> 00:00:37.346
How do we interact with data

00:00:37.346 --> 00:00:38.876
sources today in the shipping

00:00:38.876 --> 00:00:39.636
platforms?

00:00:40.636 --> 00:00:41.656
And then we're going to talk

00:00:41.656 --> 00:00:43.196
about a brand new approach we're

00:00:43.196 --> 00:00:45.566
bring into iOS, tvOS, and the

00:00:45.566 --> 00:00:45.856
Mac.

00:00:46.556 --> 00:00:48.156
Then we're going to transition

00:00:48.156 --> 00:00:50.146
to some demos, get some hands-on

00:00:50.146 --> 00:00:51.926
time with this brand new API.

00:00:52.646 --> 00:00:54.236
And then finally, we're going to

00:00:54.236 --> 00:00:55.466
go on some more detailed

00:00:55.466 --> 00:00:56.576
considerations of how to get the

00:00:56.706 --> 00:00:59.466
best out of this new API.

00:01:00.256 --> 00:01:01.246
All right, so let's talk a

00:01:01.246 --> 00:01:02.056
little bit about the current

00:01:02.056 --> 00:01:02.636
state-of-the-art.

00:01:02.636 --> 00:01:05.495
How do we interact with UI data

00:01:05.495 --> 00:01:07.206
sources today, in UITableView

00:01:07.206 --> 00:01:08.436
and CollectionViews?

00:01:09.836 --> 00:01:12.256
So here we see an example

00:01:12.256 --> 00:01:13.546
implementation of the

00:01:13.546 --> 00:01:15.046
UICollectionView data source.

00:01:15.926 --> 00:01:16.896
Now, if you've worked with

00:01:16.896 --> 00:01:18.456
UITableView or CollectionViews,

00:01:18.456 --> 00:01:19.346
you've seen this before.

00:01:19.966 --> 00:01:21.886
Here, we're providing three of

00:01:21.886 --> 00:01:24.006
the required two methods in this

00:01:24.006 --> 00:01:24.496
protocol.

00:01:24.496 --> 00:01:26.676
And it's pretty straightforward,

00:01:26.676 --> 00:01:26.836
right?

00:01:26.836 --> 00:01:28.466
We have asked about the number

00:01:28.466 --> 00:01:29.576
of sections and the number of

00:01:29.576 --> 00:01:30.886
items in each of those sections.

00:01:31.096 --> 00:01:32.676
And as content renders, we're

00:01:32.676 --> 00:01:33.796
going to ask for cells.

00:01:34.406 --> 00:01:34.976
Pretty straightforward.

00:01:37.056 --> 00:01:38.136
And this has served us really

00:01:38.136 --> 00:01:39.566
well for about ten years now,

00:01:39.796 --> 00:01:39.936
right?

00:01:40.146 --> 00:01:41.686
And it's got a couple things

00:01:41.686 --> 00:01:42.186
going for it.

00:01:42.186 --> 00:01:42.946
It's super simple.

00:01:43.356 --> 00:01:44.266
You can reason about it right

00:01:44.266 --> 00:01:44.486
away.

00:01:44.486 --> 00:01:46.296
If you want to provide just two

00:01:46.296 --> 00:01:48.446
methods, the number of items in

00:01:48.446 --> 00:01:49.126
a section, if you have a

00:01:49.176 --> 00:01:50.426
one-dimensional data source,

00:01:50.426 --> 00:01:51.606
that's pretty straightforward.

00:01:52.576 --> 00:01:53.626
And you can iterate on it pretty

00:01:53.626 --> 00:01:53.966
quickly.

00:01:54.566 --> 00:01:56.566
But it's also very flexible,

00:01:56.636 --> 00:01:56.886
right?

00:01:56.936 --> 00:01:58.516
Because you don't really have to

00:01:58.596 --> 00:02:00.586
use any particular kind of data

00:02:00.586 --> 00:02:02.396
structure to back your data

00:02:02.396 --> 00:02:02.896
source.

00:02:04.116 --> 00:02:05.276
It could be as simple as a

00:02:05.346 --> 00:02:06.386
one-dimensional array.

00:02:07.426 --> 00:02:08.826
And if you had a multi-itemed,

00:02:08.826 --> 00:02:10.906
multi-sectioned data source, it

00:02:10.906 --> 00:02:11.796
could be two-dimensional, right?

00:02:11.796 --> 00:02:12.256
Very simple, very

00:02:12.256 --> 00:02:12.946
straightforward.

00:02:15.606 --> 00:02:17.926
Well, apps are often a little

00:02:17.926 --> 00:02:19.146
more complicated than a, you

00:02:19.146 --> 00:02:19.936
know, a one-dimensional or

00:02:19.936 --> 00:02:20.706
two-dimensional array.

00:02:22.456 --> 00:02:23.446
And apps get more and more

00:02:23.446 --> 00:02:24.216
complex every year.

00:02:24.216 --> 00:02:25.166
They do more things.

00:02:25.166 --> 00:02:26.886
Our users demand more features.

00:02:26.886 --> 00:02:29.576
And oftentimes, these data

00:02:29.576 --> 00:02:31.316
sources are backed by complex

00:02:31.316 --> 00:02:32.746
controllers inside of our app.

00:02:33.686 --> 00:02:35.326
And these controllers can do a

00:02:35.326 --> 00:02:35.946
variety of things.

00:02:35.946 --> 00:02:36.876
They can interact with Core

00:02:36.876 --> 00:02:38.676
Data, and they could talk to web

00:02:38.676 --> 00:02:39.186
service.

00:02:39.186 --> 00:02:40.546
They just do a number of

00:02:40.546 --> 00:02:41.426
different things.

00:02:41.626 --> 00:02:43.486
And I want to visualize this

00:02:43.486 --> 00:02:43.916
real quick.

00:02:45.296 --> 00:02:46.906
And let's show a conversation

00:02:46.906 --> 00:02:49.166
between your UI layer and this

00:02:49.166 --> 00:02:50.166
controller layer that's doing

00:02:50.166 --> 00:02:51.576
all this heavy lifting to get

00:02:51.576 --> 00:02:52.516
your data.

00:02:52.516 --> 00:02:52.786
All right?

00:02:53.686 --> 00:02:54.906
And the conversation starts out

00:02:54.906 --> 00:02:55.576
very civil.

00:02:56.106 --> 00:02:56.846
It's like, "Hey, give me a

00:02:56.846 --> 00:02:57.946
number of items in a section, or

00:02:57.946 --> 00:02:59.456
give me a cell as we render

00:02:59.456 --> 00:03:00.046
content."

00:03:00.486 --> 00:03:01.456
Very straightforward.

00:03:01.526 --> 00:03:02.956
And so far, smooth sailing.

00:03:06.056 --> 00:03:07.276
But things get more complicated

00:03:07.276 --> 00:03:08.016
over time, right?

00:03:08.016 --> 00:03:09.076
You get -- like let's say this

00:03:09.076 --> 00:03:10.516
controller has a web service

00:03:10.516 --> 00:03:11.896
request that it gets a response

00:03:11.896 --> 00:03:12.366
from, right?

00:03:12.366 --> 00:03:14.196
It's like, oh, I've got data for

00:03:14.196 --> 00:03:15.776
your tweets or whatever, right?

00:03:16.396 --> 00:03:18.096
Well, now this controller layer,

00:03:18.196 --> 00:03:19.716
which is complex unto itself,

00:03:20.376 --> 00:03:21.926
lets the world know, "Hey, I

00:03:21.926 --> 00:03:22.416
changed.

00:03:22.416 --> 00:03:23.226
Something changed."

00:03:23.846 --> 00:03:25.546
All right, so here's where

00:03:25.546 --> 00:03:27.766
things get a bit more complex,

00:03:27.796 --> 00:03:27.996
right?

00:03:27.996 --> 00:03:31.066
So now, it's up to the UI layer

00:03:31.066 --> 00:03:33.486
to decide, "Hey, things changed.

00:03:33.486 --> 00:03:34.856
Now, I need to -- can change

00:03:34.856 --> 00:03:37.096
this into updates for our UI

00:03:37.486 --> 00:03:37.816
layer.

00:03:38.486 --> 00:03:40.086
And this involves all the

00:03:40.086 --> 00:03:41.426
mutations that have to occur

00:03:41.426 --> 00:03:42.256
against TableView and

00:03:42.256 --> 00:03:42.756
CollectionView.

00:03:42.756 --> 00:03:44.246
It can be a bit complex.

00:03:44.246 --> 00:03:46.076
And we covered this complexity

00:03:46.076 --> 00:03:48.236
last year in our talk Of Tour of

00:03:48.236 --> 00:03:49.086
UICollectionView.

00:03:49.946 --> 00:03:51.436
And how to construct those batch

00:03:51.436 --> 00:03:53.726
updates properly, and mutate

00:03:53.726 --> 00:03:54.636
your backing store, all those

00:03:54.636 --> 00:03:54.976
kinds of things.

00:03:57.586 --> 00:03:58.596
But sometimes, no matter how

00:03:58.596 --> 00:03:59.276
hard you try--

00:04:00.516 --> 00:04:02.626
[ Laughter ]

00:04:03.126 --> 00:04:04.226
You know, things go wrong.

00:04:04.606 --> 00:04:05.586
It's an imperfect world.

00:04:07.186 --> 00:04:08.746
And judging by the laughter,

00:04:08.886 --> 00:04:10.006
you've probably hit this before,

00:04:10.006 --> 00:04:10.246
right?

00:04:11.196 --> 00:04:12.336
It's not an uncommon thing.

00:04:12.336 --> 00:04:13.756
And it's really frustrating,

00:04:13.756 --> 00:04:13.936
right?

00:04:13.936 --> 00:04:14.726
You hit this, and you're like,

00:04:14.726 --> 00:04:14.996
"All right.

00:04:14.996 --> 00:04:15.656
What did I do wrong?"

00:04:16.356 --> 00:04:18.875
It's me. And as you dig through

00:04:18.875 --> 00:04:20.616
your code, okay, fine.

00:04:20.616 --> 00:04:21.716
You Google on Stack Overflow,

00:04:21.716 --> 00:04:22.886
see what's going on.

00:04:23.206 --> 00:04:25.146
And eventually, you might get

00:04:25.146 --> 00:04:26.006
frustrated and just call

00:04:26.006 --> 00:04:26.516
reloadData.

00:04:26.516 --> 00:04:27.806
And we talked about this last

00:04:27.806 --> 00:04:29.506
year, and that's fine.

00:04:29.706 --> 00:04:30.266
That's correct.

00:04:30.386 --> 00:04:31.616
Your app looks okay.

00:04:32.676 --> 00:04:33.736
But when you call reloadData,

00:04:33.736 --> 00:04:35.186
you get this non-animated

00:04:35.186 --> 00:04:35.616
effect.

00:04:36.306 --> 00:04:37.656
And it detracts from the user

00:04:37.656 --> 00:04:38.446
experience.

00:04:39.836 --> 00:04:41.356
So that's not great.

00:04:44.046 --> 00:04:44.506
Okay, I want to get

00:04:44.506 --> 00:04:45.816
philosophical just for one

00:04:45.816 --> 00:04:46.156
slide.

00:04:46.156 --> 00:04:46.896
I promise.

00:04:48.136 --> 00:04:48.716
What's the problem?

00:04:49.636 --> 00:04:51.786
Well, the problem here is

00:04:51.786 --> 00:04:52.456
where's our truth?

00:04:53.786 --> 00:04:55.386
You know? I mean, who got his?

00:04:55.386 --> 00:04:56.696
And who has all the answers?

00:04:57.806 --> 00:04:59.256
And the big issue here is that

00:04:59.256 --> 00:05:01.016
our data controller -- or it's

00:05:01.016 --> 00:05:02.186
acting as a data source -- has

00:05:02.186 --> 00:05:03.356
its own version of the truth,

00:05:03.356 --> 00:05:04.466
which changes over time.

00:05:04.946 --> 00:05:06.736
And the UI has a version of the

00:05:06.736 --> 00:05:07.136
truth.

00:05:08.336 --> 00:05:09.866
And the UILayerCode is

00:05:09.866 --> 00:05:11.256
responsible for mitigating that,

00:05:11.256 --> 00:05:12.446
making sure that it's always in

00:05:12.446 --> 00:05:12.796
sync.

00:05:13.526 --> 00:05:15.476
As we saw, it's sometimes hard.

00:05:16.816 --> 00:05:18.576
So our current approach is error

00:05:18.576 --> 00:05:19.036
prone.

00:05:19.726 --> 00:05:20.626
And primarily because there's

00:05:20.626 --> 00:05:22.856
just no notion of a centralized

00:05:22.856 --> 00:05:22.976
truth.

00:05:26.626 --> 00:05:27.196
All right, so that's the

00:05:27.196 --> 00:05:27.766
state-of-the-art.

00:05:27.766 --> 00:05:28.476
That's where we are today.

00:05:28.476 --> 00:05:29.206
But where are we going?

00:05:30.546 --> 00:05:31.716
Well, I'm happy to announce that

00:05:31.716 --> 00:05:33.726
for iOS, TVoS, and MacOS this

00:05:33.726 --> 00:05:35.116
year, we're bringing a brand new

00:05:35.636 --> 00:05:36.326
approach.

00:05:37.106 --> 00:05:38.046
And we're calling this

00:05:38.496 --> 00:05:39.556
DiffableDataSource.

00:05:40.516 --> 00:05:44.546
[ Cheering and Applause ]

00:05:45.046 --> 00:05:45.576
All right, so let's dig in.

00:05:45.576 --> 00:05:45.976
What is this thing?

00:05:49.076 --> 00:05:50.126
No performBatchUpdates.

00:05:50.126 --> 00:05:50.576
Let's go on.

00:05:51.056 --> 00:05:52.356
And along with it, all the

00:05:52.356 --> 00:05:53.976
crashes, hassles, complexity,

00:05:53.976 --> 00:05:54.776
all of the stuff that you don't

00:05:54.776 --> 00:05:56.166
want to deal with, has been

00:05:56.166 --> 00:05:56.726
jettisoned.

00:05:57.806 --> 00:05:59.086
Instead, we have a single method

00:05:59.086 --> 00:05:59.986
we call Apply.

00:06:00.546 --> 00:06:01.196
What is Apply?

00:06:01.806 --> 00:06:03.176
Apply is simple, automatic,

00:06:03.176 --> 00:06:04.496
hassle-free diffing.

00:06:07.386 --> 00:06:09.136
So we do this with a brand new

00:06:09.136 --> 00:06:10.766
construct we call a Snapshot.

00:06:10.826 --> 00:06:12.156
And it's a very simple idea.

00:06:12.296 --> 00:06:13.846
It's effectively the truth of

00:06:13.846 --> 00:06:14.826
the current UI state.

00:06:15.536 --> 00:06:18.306
And instead of IndexPaths, it's

00:06:18.306 --> 00:06:20.076
an association or a collection

00:06:20.346 --> 00:06:21.816
of section identifiers that are

00:06:21.816 --> 00:06:24.066
all unique and item identifiers.

00:06:25.336 --> 00:06:26.766
And you update these not with

00:06:26.766 --> 00:06:28.736
IndexPaths, with identifiers.

00:06:29.486 --> 00:06:30.226
All right, let's look at

00:06:30.226 --> 00:06:32.086
something visual to see what's

00:06:32.086 --> 00:06:32.666
going on here.

00:06:34.156 --> 00:06:35.276
Okay, I'm really creative guy.

00:06:35.276 --> 00:06:37.146
So we've got these FOO, BAR, and

00:06:37.226 --> 00:06:38.256
BIF onscreen, right.

00:06:38.256 --> 00:06:38.936
And that's what we're

00:06:38.936 --> 00:06:39.486
interacting with.

00:06:39.486 --> 00:06:41.516
These are identifiers in our

00:06:41.516 --> 00:06:41.736
app.

00:06:43.146 --> 00:06:44.146
And let's say that our

00:06:44.146 --> 00:06:45.156
controller changed.

00:06:45.156 --> 00:06:46.546
And now we've got this brand new

00:06:46.606 --> 00:06:48.316
Snapshot that we want to apply.

00:06:49.116 --> 00:06:49.916
But this is our current

00:06:49.916 --> 00:06:50.316
Snapshot.

00:06:50.316 --> 00:06:52.676
How do we get from our new truth

00:06:53.686 --> 00:06:54.676
to the current Snapshot?

00:06:56.686 --> 00:06:57.916
Well, we can see here we've

00:06:57.916 --> 00:06:59.486
configured a brand new Snapshot

00:06:59.486 --> 00:07:01.496
with BAR, FOO, and BAZ.

00:07:01.496 --> 00:07:02.656
And we have some items that are

00:07:02.656 --> 00:07:03.656
coming along for the ride that

00:07:03.656 --> 00:07:05.036
have just changed order, and

00:07:05.036 --> 00:07:06.796
then a new item coming in.

00:07:07.516 --> 00:07:10.136
So conceptually an Apply knows

00:07:10.136 --> 00:07:11.796
about the current state and

00:07:11.796 --> 00:07:12.996
knows about the new state, which

00:07:12.996 --> 00:07:14.566
are going to apply to the UI

00:07:14.566 --> 00:07:14.976
element.

00:07:17.356 --> 00:07:18.376
And there's no step two.

00:07:18.376 --> 00:07:19.096
That's just it.

00:07:19.096 --> 00:07:20.906
Mm-hmm. All right, so how do we

00:07:20.936 --> 00:07:21.336
do this?

00:07:21.336 --> 00:07:23.206
Well, we have four classes

00:07:23.376 --> 00:07:24.576
across all the platforms.

00:07:25.226 --> 00:07:26.836
For iOS and TVoS, we have

00:07:26.836 --> 00:07:27.686
UICollectionView

00:07:27.686 --> 00:07:29.456
DiffableDataSource and

00:07:29.456 --> 00:07:31.666
UITableView DiffableDataSource.

00:07:31.666 --> 00:07:33.256
And then on the Mac, we have

00:07:33.636 --> 00:07:34.306
NSCollectionView

00:07:34.306 --> 00:07:35.276
DiffableDataSource.

00:07:36.046 --> 00:07:37.696
And common for all the platforms

00:07:37.756 --> 00:07:39.796
is this Snapshot class, which is

00:07:39.796 --> 00:07:40.856
responsible for the current

00:07:40.856 --> 00:07:43.006
UIState NSDiffableData

00:07:43.006 --> 00:07:43.846
SourceSnapshot.

00:07:44.896 --> 00:07:46.456
Okay, so enough background.

00:07:46.456 --> 00:07:48.126
Let's go on, look at some code.

00:07:48.186 --> 00:07:49.376
And for that, I'm going to bring

00:07:49.376 --> 00:07:51.536
up my colleague, Troy Stevens.

00:07:51.766 --> 00:07:51.976
Troy?

00:07:52.266 --> 00:07:54.266
[ Applause ]

00:07:54.516 --> 00:07:55.456
>> Thanks very much, Steve.

00:07:56.116 --> 00:07:57.706
I am delighted to get to walk

00:07:57.706 --> 00:07:59.266
you all through some examples of

00:07:59.266 --> 00:08:00.746
using this powerful, yet

00:08:00.746 --> 00:08:02.446
beautifully simple new API

00:08:02.446 --> 00:08:02.956
today.

00:08:03.286 --> 00:08:04.526
So make sure to download the

00:08:04.526 --> 00:08:06.086
sample project for this talk if

00:08:06.086 --> 00:08:06.886
you haven't already.

00:08:07.336 --> 00:08:08.746
That way, you can follow along,

00:08:08.966 --> 00:08:10.116
study it at your leisure.

00:08:10.466 --> 00:08:12.616
And most importantly, use that

00:08:12.616 --> 00:08:14.946
example to really grasp the

00:08:14.946 --> 00:08:16.216
mechanics of how all of this

00:08:16.216 --> 00:08:16.616
works.

00:08:16.776 --> 00:08:17.776
It's not a lot of code.

00:08:18.066 --> 00:08:19.186
It's really simple.

00:08:19.556 --> 00:08:20.956
Now, when you look at that

00:08:20.956 --> 00:08:22.076
example project, you're going to

00:08:22.076 --> 00:08:23.416
notice that in addition to the

00:08:23.416 --> 00:08:24.796
three examples of

00:08:24.846 --> 00:08:26.336
DiffableDataSource usage that

00:08:26.336 --> 00:08:27.406
we're going to look at today,

00:08:27.926 --> 00:08:29.816
the same project also contains

00:08:29.816 --> 00:08:31.266
illustrations of the powerful,

00:08:31.266 --> 00:08:32.645
new compositional layout API

00:08:32.645 --> 00:08:34.596
that we introduced in Session

00:08:34.596 --> 00:08:35.645
215.

00:08:36.046 --> 00:08:37.626
Those examples just happened to

00:08:37.626 --> 00:08:39.905
use DiffableDataSource as a

00:08:40.006 --> 00:08:41.905
really easy way to just populate

00:08:41.905 --> 00:08:42.936
their CollectionViews with

00:08:42.936 --> 00:08:43.746
sample content.

00:08:44.256 --> 00:08:45.636
So let's go to our demo machines

00:08:45.636 --> 00:08:45.976
and take a look.

00:08:49.416 --> 00:08:50.746
So I've got our demo app up

00:08:50.746 --> 00:08:51.116
here.

00:08:51.496 --> 00:08:52.926
And as we walk through our

00:08:52.926 --> 00:08:54.496
different examples today, we're

00:08:54.776 --> 00:08:56.216
going to notice a repeating

00:08:56.216 --> 00:08:56.566
pattern.

00:08:56.566 --> 00:08:57.956
It's a simple three-step

00:08:57.956 --> 00:08:58.676
process.

00:08:59.186 --> 00:09:00.986
So anytime you want to put a new

00:09:00.986 --> 00:09:02.186
set of changes, a new set of

00:09:02.186 --> 00:09:04.296
data into a Collection View or

00:09:04.296 --> 00:09:05.776
UITableView with the full data

00:09:05.776 --> 00:09:07.976
source, all you do is you create

00:09:07.976 --> 00:09:08.676
a Snapshot.

00:09:09.306 --> 00:09:10.846
You populate that Snapshot with

00:09:10.846 --> 00:09:12.296
the description of the items you

00:09:12.296 --> 00:09:13.476
want to display in that update

00:09:13.476 --> 00:09:13.856
cycle.

00:09:13.906 --> 00:09:15.756
And then you apply the Snapshot

00:09:16.116 --> 00:09:17.376
to automatically commit the

00:09:17.376 --> 00:09:19.356
changes to your UI.

00:09:19.356 --> 00:09:20.786
DiffableDataSource takes care of

00:09:20.786 --> 00:09:22.386
all the diffing and issuing the

00:09:22.386 --> 00:09:23.556
changes to the UI element.

00:09:24.426 --> 00:09:25.466
So let's look at a concrete

00:09:25.466 --> 00:09:25.946
example.

00:09:25.946 --> 00:09:27.376
I'm going to open up Mountain

00:09:27.376 --> 00:09:27.946
Search.

00:09:29.046 --> 00:09:30.526
And this is a fairly typical

00:09:30.526 --> 00:09:31.236
search UI, right?

00:09:31.236 --> 00:09:33.086
We can all look at it and reason

00:09:33.086 --> 00:09:33.966
about what it does.

00:09:34.216 --> 00:09:35.826
You might see this in a Contacts

00:09:35.826 --> 00:09:37.006
app, for example, but in this

00:09:37.006 --> 00:09:38.736
case, we're looking at mountain

00:09:38.736 --> 00:09:39.776
peaks around the world.

00:09:40.626 --> 00:09:42.666
So as you can imagine, there's a

00:09:42.666 --> 00:09:43.626
search field at the top.

00:09:43.626 --> 00:09:45.046
As I start typing in that search

00:09:45.046 --> 00:09:46.666
field, we would expect to see

00:09:46.666 --> 00:09:48.556
the list automatically filtered

00:09:48.556 --> 00:09:49.606
to just the matches.

00:09:49.676 --> 00:09:51.426
And we'll see that if I start

00:09:51.426 --> 00:09:54.176
typing, we can do just that.

00:09:54.506 --> 00:09:55.456
And it all happens very

00:09:55.456 --> 00:09:57.456
automatically and with nice

00:09:57.546 --> 00:09:58.356
animations.

00:09:59.656 --> 00:10:01.626
This is all incredibly easy to

00:10:01.626 --> 00:10:03.896
do with extraordinarily little

00:10:03.976 --> 00:10:05.336
code using DiffableDataSource.

00:10:05.336 --> 00:10:06.306
So let's take a look at how it

00:10:06.306 --> 00:10:06.696
works.

00:10:08.336 --> 00:10:09.976
For this example, look at the

00:10:09.976 --> 00:10:11.456
MountainsView ControllerSource

00:10:11.456 --> 00:10:11.746
file.

00:10:13.486 --> 00:10:15.386
And all the action starts when

00:10:15.386 --> 00:10:16.586
the user types in the search

00:10:16.586 --> 00:10:17.136
bar, right?

00:10:17.936 --> 00:10:19.256
So we have our callback here,

00:10:19.256 --> 00:10:20.876
searchBarTextDidChange.

00:10:20.876 --> 00:10:22.276
It's going to be sent to our

00:10:22.276 --> 00:10:22.826
controller.

00:10:24.316 --> 00:10:25.796
And from there, we just call out

00:10:25.836 --> 00:10:27.556
to our own performQuery function

00:10:27.736 --> 00:10:29.466
passing it, the search text that

00:10:29.466 --> 00:10:30.926
we got from that search bar.

00:10:31.306 --> 00:10:33.096
Now performQuery itself is

00:10:33.096 --> 00:10:34.116
remarkably simple.

00:10:34.676 --> 00:10:37.236
All we do is call out to our

00:10:37.236 --> 00:10:38.106
MountainsController.

00:10:38.106 --> 00:10:39.566
That's our model layer object.

00:10:40.186 --> 00:10:42.106
And we ask it for a filtered

00:10:42.106 --> 00:10:44.266
sorted list of the mountains

00:10:44.266 --> 00:10:45.636
that match our search term.

00:10:46.356 --> 00:10:47.566
So now we've got that list of

00:10:47.566 --> 00:10:48.126
mountains.

00:10:49.616 --> 00:10:51.046
We go through that three-step

00:10:51.046 --> 00:10:52.156
process that I mentioned.

00:10:52.196 --> 00:10:54.546
We create a new NSDiffableData

00:10:54.546 --> 00:10:55.536
SourceSnapshot.

00:10:56.476 --> 00:10:58.266
Now this Snapshot is initially

00:10:58.266 --> 00:10:58.556
empty.

00:10:58.556 --> 00:10:59.456
It contains nothing.

00:10:59.456 --> 00:11:01.136
So it's up to us to populate it

00:11:01.136 --> 00:11:02.766
with the sections and items that

00:11:02.766 --> 00:11:03.466
we want.

00:11:04.296 --> 00:11:05.246
In this case, we only have a

00:11:05.246 --> 00:11:06.646
single section to display.

00:11:07.216 --> 00:11:08.436
So we're just going to append

00:11:08.716 --> 00:11:09.896
one section, and we're just

00:11:09.896 --> 00:11:11.376
going to arbitrarily call it the

00:11:11.376 --> 00:11:11.976
main section.

00:11:14.336 --> 00:11:17.356
Next, we append the identifiers

00:11:17.356 --> 00:11:18.796
of the items that we want to

00:11:18.796 --> 00:11:20.386
display in this update.

00:11:21.156 --> 00:11:22.376
Now formally speaking, we

00:11:22.376 --> 00:11:23.446
usually pass an array of

00:11:23.446 --> 00:11:24.386
identifiers here.

00:11:24.896 --> 00:11:27.126
But in Swift, you can also make

00:11:27.126 --> 00:11:29.196
things a lot more elegant by

00:11:29.366 --> 00:11:31.036
working with your own native

00:11:31.036 --> 00:11:31.646
types here.

00:11:31.646 --> 00:11:32.916
So if you have a native type,

00:11:32.916 --> 00:11:34.456
and it can even be a value type,

00:11:34.456 --> 00:11:36.486
such as a struct or an enum, if

00:11:36.796 --> 00:11:38.396
you make that type hashable,

00:11:38.506 --> 00:11:39.756
then you can just pass your own

00:11:39.756 --> 00:11:41.076
native objects in terms of the

00:11:41.076 --> 00:11:42.226
Swift syntax of what you're

00:11:42.226 --> 00:11:42.716
doing.

00:11:42.716 --> 00:11:43.796
And we'll look at the

00:11:43.796 --> 00:11:45.106
implications of how that works

00:11:45.106 --> 00:11:46.166
in just a little bit.

00:11:46.526 --> 00:11:47.766
So now, we've constructed our

00:11:47.766 --> 00:11:48.286
Snapshot.

00:11:48.286 --> 00:11:49.036
It's ready to go.

00:11:49.796 --> 00:11:51.876
All we have to do is call to our

00:11:51.876 --> 00:11:53.126
DiffableDataSource, ask it to

00:11:53.126 --> 00:11:54.766
please apply that Snapshot,

00:11:55.196 --> 00:11:56.196
animating the differences.

00:11:56.196 --> 00:11:57.776
DiffableDataSource goes off and

00:11:57.776 --> 00:11:59.606
automatically figures out what's

00:11:59.606 --> 00:12:00.906
changed between the previous

00:12:00.906 --> 00:12:01.866
update and the next.

00:12:02.276 --> 00:12:03.496
Notice that there's no code at

00:12:03.496 --> 00:12:05.296
all here, where we had to stop

00:12:05.296 --> 00:12:07.186
and figure out -- reason about

00:12:07.186 --> 00:12:08.286
what we were displaying in the

00:12:08.286 --> 00:12:09.786
previous update cycle before the

00:12:09.786 --> 00:12:10.306
user type.

00:12:10.346 --> 00:12:12.206
That one more character, it all

00:12:12.206 --> 00:12:13.176
happens automatically.

00:12:13.176 --> 00:12:14.226
There's nothing to worry about.

00:12:14.226 --> 00:12:14.926
We're not dealing with

00:12:14.926 --> 00:12:16.976
IndexPaths, which are fragile

00:12:16.976 --> 00:12:18.046
and ephemeral, right?

00:12:18.086 --> 00:12:19.426
They refer to a certain

00:12:19.616 --> 00:12:20.856
particular update, and have a

00:12:20.856 --> 00:12:21.536
different meaning and a

00:12:21.536 --> 00:12:22.306
different update.

00:12:22.716 --> 00:12:24.166
We're dealing with identifiers

00:12:24.166 --> 00:12:26.446
that are robust and enduring.

00:12:26.566 --> 00:12:28.456
So everything is just really

00:12:28.456 --> 00:12:29.236
simple to do here.

00:12:30.636 --> 00:12:31.686
Before we leave this bit of

00:12:31.686 --> 00:12:32.726
code, I want you to notice

00:12:32.726 --> 00:12:34.376
something about Snapshot, which

00:12:34.376 --> 00:12:35.326
you may have already noticed.

00:12:35.326 --> 00:12:37.816
It is a generic class in Swift,

00:12:37.816 --> 00:12:39.916
so it's parameterized by the

00:12:39.916 --> 00:12:42.126
SectionIdentifierType and the

00:12:42.126 --> 00:12:43.846
ItemIdentifierType that we've

00:12:43.846 --> 00:12:44.696
decided to use.

00:12:45.246 --> 00:12:46.536
So let's look first at our

00:12:46.536 --> 00:12:48.226
SectionIdentifierType, which is

00:12:48.226 --> 00:12:48.816
pretty trivial.

00:12:48.816 --> 00:12:50.146
This is a really handy technique

00:12:50.576 --> 00:12:51.906
for the common case, where you

00:12:51.906 --> 00:12:52.906
just have a single section,

00:12:52.906 --> 00:12:53.136
right?

00:12:53.436 --> 00:12:54.936
You can just declare an enum

00:12:54.936 --> 00:12:55.606
type for this.

00:12:56.166 --> 00:12:57.436
And one nice thing about enums

00:12:57.436 --> 00:12:58.376
in Swift is that they're

00:12:58.446 --> 00:12:59.796
automatically hashable.

00:12:59.796 --> 00:13:01.376
Hashability is synthesized for

00:13:01.376 --> 00:13:01.536
them.

00:13:01.976 --> 00:13:03.246
So here, we just have a trivial

00:13:03.246 --> 00:13:05.196
case of an enum with one case,

00:13:05.196 --> 00:13:05.886
and there's nothing more to do

00:13:05.886 --> 00:13:05.976
there.

00:13:09.046 --> 00:13:10.076
For our mountain type, we'll

00:13:10.076 --> 00:13:10.866
look at our Mountains

00:13:10.866 --> 00:13:13.566
Controller, which is again, our

00:13:13.566 --> 00:13:14.276
model layer.

00:13:14.866 --> 00:13:16.586
And here, we see that we've

00:13:16.586 --> 00:13:18.176
declared mountain as a Swift

00:13:18.176 --> 00:13:18.746
struct.

00:13:19.296 --> 00:13:21.066
And we declared that struct type

00:13:21.066 --> 00:13:23.076
as hashable so that we can use

00:13:23.076 --> 00:13:24.186
it with DiffableDataSource

00:13:24.186 --> 00:13:25.586
natively rather than explicitly

00:13:25.586 --> 00:13:26.966
have to pass an identifier.

00:13:27.356 --> 00:13:28.816
And the important requirement

00:13:28.816 --> 00:13:31.186
there is just that each mountain

00:13:31.246 --> 00:13:32.906
be uniquely identifiable by its

00:13:32.906 --> 00:13:33.516
hash value.

00:13:34.086 --> 00:13:36.866
So we achieve this by giving

00:13:36.866 --> 00:13:38.726
each mountain an automatically

00:13:38.726 --> 00:13:40.786
generated unique identifier.

00:13:43.016 --> 00:13:44.366
And here, where we implement

00:13:44.366 --> 00:13:45.966
that hashability conformance

00:13:45.966 --> 00:13:48.606
that we promised, we use just

00:13:48.606 --> 00:13:50.916
that identifier to provide the

00:13:50.916 --> 00:13:51.666
hash value.

00:13:52.246 --> 00:13:53.156
So in this way, we're going to

00:13:53.156 --> 00:13:54.496
have each mountain, even though

00:13:54.636 --> 00:13:55.866
mountains, again, are value

00:13:55.866 --> 00:13:56.206
types.

00:13:56.206 --> 00:13:57.476
They just get passed around by

00:13:57.476 --> 00:13:58.096
copying.

00:13:58.356 --> 00:13:59.316
There's no pointer you can

00:13:59.316 --> 00:13:59.746
reference.

00:14:00.026 --> 00:14:01.766
But the identifier and the hash

00:14:01.766 --> 00:14:02.886
value specifically of that

00:14:02.886 --> 00:14:04.716
identifier makes them unique

00:14:04.716 --> 00:14:06.056
enough for DiffableDataSource to

00:14:06.056 --> 00:14:07.376
track them from what -- one

00:14:07.376 --> 00:14:08.296
update to the next.

00:14:08.506 --> 00:14:09.926
And as part of hashability,

00:14:09.926 --> 00:14:11.486
we're implementing equality

00:14:11.486 --> 00:14:12.466
tests here, too.

00:14:12.946 --> 00:14:14.826
So we've looked at how you issue

00:14:14.826 --> 00:14:16.216
changes to DiffableDataSource.

00:14:16.216 --> 00:14:17.566
What about how we set one up to

00:14:17.566 --> 00:14:18.056
use?

00:14:19.146 --> 00:14:20.166
Let's go back to our

00:14:20.166 --> 00:14:21.176
MountainsViewController.

00:14:23.936 --> 00:14:25.636
And conveniently enough, we've

00:14:25.636 --> 00:14:26.766
created a function called

00:14:26.906 --> 00:14:28.066
ConfigureDataSource, where we

00:14:28.066 --> 00:14:29.376
configure our data source.

00:14:29.726 --> 00:14:30.806
And it's really just a little

00:14:30.806 --> 00:14:31.516
bit of code here.

00:14:33.106 --> 00:14:34.146
So in this case, we're working

00:14:34.146 --> 00:14:35.666
with a UICollectionView.

00:14:35.666 --> 00:14:36.666
So we instantiate a

00:14:36.666 --> 00:14:37.876
UICollectionView

00:14:37.876 --> 00:14:38.966
DiffableDataSource.

00:14:39.446 --> 00:14:41.886
We parameterize it with our

00:14:41.886 --> 00:14:43.696
section and item types.

00:14:44.656 --> 00:14:45.866
Pass it a pointer to the

00:14:45.866 --> 00:14:46.886
CollectionView that we want to

00:14:46.886 --> 00:14:47.286
work with.

00:14:47.956 --> 00:14:49.236
Now DiffableDataSource will take

00:14:49.236 --> 00:14:50.546
that pointer and automatically

00:14:50.546 --> 00:14:52.586
wire itself up as the data

00:14:52.586 --> 00:14:53.746
source of that CollectionView.

00:14:53.746 --> 00:14:54.766
So there's nothing else for us

00:14:54.766 --> 00:14:54.906
to do.

00:14:57.406 --> 00:14:59.226
Lastly, we have this trailing

00:14:59.226 --> 00:15:00.586
closure parameter, the

00:15:00.586 --> 00:15:01.526
DiffableDataSource to the

00:15:01.526 --> 00:15:02.226
initializer.

00:15:02.746 --> 00:15:04.366
And all this is, is the code

00:15:04.366 --> 00:15:05.406
that you would normally have to

00:15:05.406 --> 00:15:06.256
write if you were implementing

00:15:06.256 --> 00:15:07.726
your own data source from

00:15:07.726 --> 00:15:09.396
scratch, you would implement the

00:15:09.396 --> 00:15:11.766
cellForItemAt IndexPath method.

00:15:12.156 --> 00:15:13.896
That's data source callback

00:15:13.896 --> 00:15:15.426
method, where you're expected to

00:15:15.426 --> 00:15:16.806
do exactly what we do here.

00:15:17.236 --> 00:15:18.946
We call back to our

00:15:18.946 --> 00:15:22.226
CollectionView and ask it for a

00:15:22.226 --> 00:15:24.246
cell of the appropriate type to

00:15:24.246 --> 00:15:25.766
display the data we want to.

00:15:25.766 --> 00:15:28.296
And we populate that cell with

00:15:28.296 --> 00:15:29.276
what we want to show, and then

00:15:29.276 --> 00:15:30.386
we return it back.

00:15:30.526 --> 00:15:31.786
So this is just taking that

00:15:31.786 --> 00:15:34.116
cellForItemAt IndexPath code and

00:15:34.256 --> 00:15:35.526
conveniently transplanting it

00:15:35.526 --> 00:15:36.906
into a nice closure

00:15:36.906 --> 00:15:38.646
encapsulation that we pass when

00:15:38.646 --> 00:15:40.046
we instantiate the data source.

00:15:40.726 --> 00:15:41.766
One thing that's nice and

00:15:41.766 --> 00:15:42.786
convenient and different here is

00:15:42.786 --> 00:15:44.346
that in addition to being given

00:15:44.346 --> 00:15:46.186
the IndexPath of the item that

00:15:46.186 --> 00:15:47.866
we're being asked for, we're

00:15:47.866 --> 00:15:49.846
also given its identifier, or in

00:15:49.846 --> 00:15:52.486
this case, the native Swift

00:15:52.546 --> 00:15:54.376
value type that we -- that

00:15:54.536 --> 00:15:55.686
corresponds to that particular

00:15:55.686 --> 00:15:56.566
item we want to show.

00:15:57.506 --> 00:15:59.636
So we get our mountain passed

00:15:59.636 --> 00:16:00.746
in, there's no more work to do.

00:16:00.746 --> 00:16:02.086
We don't have to go take that

00:16:02.086 --> 00:16:04.326
IndexPath and go look up which

00:16:04.326 --> 00:16:06.306
of our model layer objects it

00:16:06.436 --> 00:16:07.146
pertains to.

00:16:07.456 --> 00:16:08.696
We just have our mountain passed

00:16:08.846 --> 00:16:09.436
in for us.

00:16:09.436 --> 00:16:10.756
So we just can get the name of

00:16:10.756 --> 00:16:13.096
the mountain and set it as the

00:16:13.096 --> 00:16:14.676
label text of that cell.

00:16:15.676 --> 00:16:17.096
And that's all there is to it.

00:16:17.416 --> 00:16:18.916
Everything else about how you

00:16:18.916 --> 00:16:20.196
set up and configure your

00:16:20.196 --> 00:16:22.006
Collection View is the same as

00:16:22.066 --> 00:16:22.636
before.

00:16:22.906 --> 00:16:24.666
There's no performBatchUpdates

00:16:24.666 --> 00:16:25.826
code hiding anywhere in this

00:16:25.826 --> 00:16:26.556
sample code.

00:16:26.966 --> 00:16:27.916
That's all there is to it.

00:16:27.916 --> 00:16:28.996
It's very easy.

00:16:29.196 --> 00:16:29.976
Let's look at another example.

00:16:34.066 --> 00:16:36.536
So here, we have a mockup of the

00:16:36.536 --> 00:16:39.116
familiar Wi-Fi Settings UI from

00:16:39.116 --> 00:16:39.526
iOS.

00:16:39.526 --> 00:16:41.266
And this one's only going to be

00:16:41.266 --> 00:16:42.626
slightly more complicated than

00:16:42.626 --> 00:16:43.936
the last because we have two

00:16:43.936 --> 00:16:45.176
different sections that we're

00:16:45.176 --> 00:16:46.006
working with here.

00:16:46.396 --> 00:16:47.906
We have what we call the Config

00:16:47.906 --> 00:16:49.466
section at the top, where we

00:16:49.466 --> 00:16:51.216
have the Wi-Fi enable/disable

00:16:51.216 --> 00:16:51.686
switch.

00:16:52.056 --> 00:16:53.966
And the display of the current

00:16:53.966 --> 00:16:55.646
network that we're connected to.

00:16:55.816 --> 00:16:57.286
And then below that, we have

00:16:57.286 --> 00:16:58.136
another section that's

00:16:58.136 --> 00:17:00.386
dynamically updating that shows

00:17:00.386 --> 00:17:02.446
us a list of detected networks

00:17:02.476 --> 00:17:03.386
that we could potentially

00:17:03.386 --> 00:17:03.986
connect to.

00:17:05.205 --> 00:17:06.386
And another thing to notice

00:17:06.386 --> 00:17:07.626
here, if we tap the Wi-Fi

00:17:07.626 --> 00:17:10.286
disabled switch, or toggle it

00:17:10.286 --> 00:17:11.646
back on, we get a nice,

00:17:12.556 --> 00:17:15.546
animated, collapse or reexpand

00:17:15.546 --> 00:17:16.136
of our UI.

00:17:16.136 --> 00:17:17.846
And that all comes for free with

00:17:17.846 --> 00:17:18.826
DiffableDataSource.

00:17:18.965 --> 00:17:20.746
So let's take a look at how this

00:17:20.746 --> 00:17:22.356
dynamic UI is implemented.

00:17:23.626 --> 00:17:24.205
Going to our

00:17:24.205 --> 00:17:25.906
WiFiSettingsViewController,

00:17:28.036 --> 00:17:29.876
we're going to look at the

00:17:29.876 --> 00:17:31.186
updateUI function, which is just

00:17:31.186 --> 00:17:32.586
a function we've named updateUI.

00:17:32.586 --> 00:17:34.046
And we've taken care to make

00:17:34.046 --> 00:17:35.286
sure that this gets called

00:17:35.626 --> 00:17:37.596
anytime there's a change in what

00:17:37.596 --> 00:17:38.486
we need to display.

00:17:38.936 --> 00:17:39.896
Now most of the time, that might

00:17:39.896 --> 00:17:41.436
be because we've detected a

00:17:41.436 --> 00:17:42.576
different set of networks that's

00:17:42.576 --> 00:17:43.186
now available.

00:17:43.186 --> 00:17:44.406
But it could also be because the

00:17:44.406 --> 00:17:46.056
user has toggled that Wi-Fi

00:17:46.056 --> 00:17:47.096
enable/disable button.

00:17:47.366 --> 00:17:48.566
Anything that changes our UI,

00:17:48.566 --> 00:17:49.936
we've ensured that this will be

00:17:49.936 --> 00:17:50.386
called.

00:17:51.786 --> 00:17:53.456
So we still have here that same

00:17:53.456 --> 00:17:54.806
three-step process.

00:17:55.316 --> 00:17:57.266
After getting the data that we

00:17:57.266 --> 00:17:58.776
want to display, we start with

00:17:58.776 --> 00:18:00.106
just getting those config items,

00:18:00.106 --> 00:18:01.006
because we're usually going to

00:18:01.006 --> 00:18:01.606
want those.

00:18:02.206 --> 00:18:03.536
We go ahead and create a

00:18:03.536 --> 00:18:04.146
Snapshot.

00:18:04.736 --> 00:18:05.876
And this Snapshot again is

00:18:05.876 --> 00:18:06.726
initially empty.

00:18:06.726 --> 00:18:07.566
So let's populate it with what

00:18:07.566 --> 00:18:07.976
we want to show.

00:18:10.776 --> 00:18:12.366
We append the first section, our

00:18:12.366 --> 00:18:13.626
config section, that appears at

00:18:13.626 --> 00:18:14.016
the top.

00:18:15.046 --> 00:18:16.386
And we append its items.

00:18:16.386 --> 00:18:17.286
So there's going to be one or

00:18:17.286 --> 00:18:18.376
two items depending whether

00:18:18.376 --> 00:18:19.326
Wi-Fi is enabled.

00:18:21.476 --> 00:18:23.076
Now if Wi-Fi is enabled, we also

00:18:23.076 --> 00:18:25.026
want to talk to our backend, to

00:18:25.026 --> 00:18:25.716
our model layer.

00:18:25.716 --> 00:18:27.316
Ask it for lists, the current

00:18:27.316 --> 00:18:28.836
list of available networks.

00:18:29.396 --> 00:18:31.806
And we're going to wrap that

00:18:31.806 --> 00:18:34.226
list in some item types that

00:18:34.226 --> 00:18:35.546
we're going to look at in just a

00:18:35.546 --> 00:18:35.946
moment.

00:18:38.256 --> 00:18:39.916
We append this section for that

00:18:39.916 --> 00:18:40.886
list of networks.

00:18:41.316 --> 00:18:43.326
And then we're going to append

00:18:43.326 --> 00:18:44.456
the items that go in that

00:18:44.456 --> 00:18:44.876
section.

00:18:45.396 --> 00:18:46.246
And notice that because we're

00:18:46.246 --> 00:18:47.296
working with two different

00:18:47.396 --> 00:18:49.266
sections here, we can be

00:18:49.266 --> 00:18:50.866
explicit about which section

00:18:51.026 --> 00:18:51.916
were appending each set of items

00:18:51.916 --> 00:18:51.983
to.

00:18:55.056 --> 00:18:55.746
That's it.

00:18:55.746 --> 00:18:56.316
We're ready to go.

00:18:56.316 --> 00:18:57.346
We've described everything we

00:18:57.346 --> 00:18:58.086
want to display.

00:18:58.336 --> 00:18:59.266
So we just ask our

00:18:59.266 --> 00:19:00.756
DiffableDataSource to apply

00:19:00.756 --> 00:19:02.636
those changes, optionally

00:19:02.666 --> 00:19:03.796
animating the differences.

00:19:04.236 --> 00:19:05.596
Now there may be times where you

00:19:05.596 --> 00:19:06.816
want to choose not to animate

00:19:06.816 --> 00:19:07.386
the differences.

00:19:07.386 --> 00:19:08.626
For example, when you're first

00:19:08.626 --> 00:19:09.776
bringing up your UI, and you're

00:19:09.776 --> 00:19:11.306
showing the initial set of data,

00:19:11.626 --> 00:19:12.596
you might or might not want it

00:19:12.596 --> 00:19:13.116
to animate.

00:19:13.396 --> 00:19:14.416
Oftentimes, you want it to be

00:19:14.416 --> 00:19:15.306
instantaneous.

00:19:15.536 --> 00:19:16.506
So you'll pass false for

00:19:16.636 --> 00:19:17.516
animating differences, as we do

00:19:17.516 --> 00:19:17.976
in this example.

00:19:22.436 --> 00:19:23.826
Looking at our types that we're

00:19:23.826 --> 00:19:24.596
working with here, we've got a

00:19:24.596 --> 00:19:26.166
section type and then item type

00:19:26.166 --> 00:19:27.466
that parameterize the

00:19:27.466 --> 00:19:28.426
DiffableDataSource.

00:19:29.226 --> 00:19:30.606
Looking back at the top, we can

00:19:30.606 --> 00:19:31.646
see, as we might imagine, that

00:19:31.646 --> 00:19:33.066
section is still an enum type.

00:19:33.066 --> 00:19:34.286
We just need two different

00:19:34.286 --> 00:19:35.666
sections to work with here.

00:19:37.106 --> 00:19:39.586
And again, section as enum type

00:19:39.586 --> 00:19:40.836
is automatically hashable in

00:19:40.836 --> 00:19:41.886
Swift, so we're good to go with

00:19:41.886 --> 00:19:41.976
that.

00:19:44.206 --> 00:19:45.316
And then here we've declared an

00:19:45.316 --> 00:19:45.796
item type.

00:19:45.866 --> 00:19:47.306
This is a struct type again, as

00:19:47.306 --> 00:19:47.966
with the mountains.

00:19:48.296 --> 00:19:49.496
And we've declared it as

00:19:49.496 --> 00:19:50.046
hashable.

00:19:50.756 --> 00:19:52.226
And the reason for declaring

00:19:52.226 --> 00:19:53.536
this type is that when we look

00:19:53.536 --> 00:19:55.416
at our list, it mostly contains

00:19:55.416 --> 00:19:57.736
lists -- network items in it.

00:19:57.736 --> 00:19:58.766
But in addition to that, it's

00:19:58.766 --> 00:20:00.026
got this oddball item at the

00:20:00.026 --> 00:20:00.406
top.

00:20:00.406 --> 00:20:01.836
It's the Wi-Fi enable/disable

00:20:01.836 --> 00:20:02.136
switch.

00:20:02.136 --> 00:20:03.236
That's not a network items.

00:20:03.236 --> 00:20:04.586
So we have a heterogeneous list

00:20:04.586 --> 00:20:04.826
here.

00:20:05.126 --> 00:20:06.266
And all we're doing is

00:20:06.266 --> 00:20:08.336
encapsulating each item in this

00:20:08.336 --> 00:20:09.586
generic wrapper type.

00:20:10.446 --> 00:20:11.946
But that wrapper type, since

00:20:11.946 --> 00:20:12.946
that's the type of item we're

00:20:12.946 --> 00:20:13.556
going to hand off the

00:20:13.556 --> 00:20:14.666
DiffableDataSource, we have to

00:20:14.666 --> 00:20:16.236
take care to make sure that it

00:20:16.236 --> 00:20:17.696
conforms to hashable and that

00:20:17.696 --> 00:20:18.686
the items are uniquely

00:20:18.686 --> 00:20:20.186
identified by their hash value.

00:20:21.026 --> 00:20:23.796
So for the network items, we can

00:20:23.796 --> 00:20:25.866
just get that unique identifier

00:20:25.866 --> 00:20:26.816
from the network item and

00:20:26.816 --> 00:20:28.716
transplant it into the capital

00:20:28.716 --> 00:20:29.306
item.

00:20:30.786 --> 00:20:32.146
And for the config items, we

00:20:32.146 --> 00:20:33.606
just dynamically generate a

00:20:33.606 --> 00:20:34.426
UUID.

00:20:36.866 --> 00:20:38.026
Looking down here at our hash

00:20:38.026 --> 00:20:40.296
function, again, it's just

00:20:40.366 --> 00:20:42.176
computing a hash based on that

00:20:42.176 --> 00:20:43.406
unique identifier value.

00:20:43.406 --> 00:20:44.616
And that's all it takes for

00:20:44.616 --> 00:20:45.916
DiffableDataSource to be able to

00:20:45.916 --> 00:20:47.516
identify the items that are the

00:20:47.516 --> 00:20:49.716
same from one update cycle to

00:20:49.716 --> 00:20:50.176
the next.

00:20:51.616 --> 00:20:52.816
Let's look at where we configure

00:20:52.816 --> 00:20:53.696
our data source.

00:20:55.616 --> 00:20:57.486
This is really very similar to

00:20:57.486 --> 00:20:59.256
before, except this time, we're

00:20:59.256 --> 00:20:59.946
actually working with the

00:20:59.946 --> 00:21:00.886
UITableView.

00:21:01.306 --> 00:21:02.696
And from the perspective of

00:21:02.766 --> 00:21:04.886
creating and committing

00:21:04.886 --> 00:21:06.336
Snapshots, it really doesn't

00:21:06.336 --> 00:21:07.396
matter, the API is very similar.

00:21:07.396 --> 00:21:08.986
But for the setup, we've got to

00:21:08.986 --> 00:21:10.236
instantiate the right type of

00:21:10.266 --> 00:21:11.186
DiffableDataSource.

00:21:11.286 --> 00:21:12.456
So we got a UITableView

00:21:12.456 --> 00:21:13.496
DiffableDataSource.

00:21:14.406 --> 00:21:16.066
We parameterize that class name

00:21:16.066 --> 00:21:17.366
with the section and item types

00:21:17.366 --> 00:21:18.506
that we're going to use.

00:21:18.506 --> 00:21:19.486
And we pass a pointer to the

00:21:19.486 --> 00:21:20.996
table view, which again, gets

00:21:21.066 --> 00:21:24.056
automatically wired up with this

00:21:24.056 --> 00:21:25.696
DiffableDataSource as its data

00:21:25.696 --> 00:21:26.196
source.

00:21:27.646 --> 00:21:29.326
Lastly, we've got that trailing

00:21:29.356 --> 00:21:30.526
item provider closure.

00:21:30.696 --> 00:21:32.926
And this looks more complex at

00:21:32.926 --> 00:21:35.126
first glance, but really, it's

00:21:35.126 --> 00:21:36.386
only that way because we have a

00:21:36.386 --> 00:21:37.616
variety of different types of

00:21:37.616 --> 00:21:37.896
items.

00:21:37.896 --> 00:21:38.846
We have those heterogeneous

00:21:38.846 --> 00:21:39.606
items to display.

00:21:39.606 --> 00:21:41.056
Basically three types of items,

00:21:41.396 --> 00:21:42.176
and we're handling them

00:21:42.176 --> 00:21:42.646
differently.

00:21:43.696 --> 00:21:44.626
But this code, even if we

00:21:44.626 --> 00:21:45.036
weren't using

00:21:45.036 --> 00:21:46.106
DiffableDataSource, it would be

00:21:46.106 --> 00:21:46.366
there.

00:21:46.366 --> 00:21:47.886
It would just be in your cell

00:21:47.966 --> 00:21:49.486
for ItemIndexPath method.

00:21:50.166 --> 00:21:52.416
So again, very simple to set up

00:21:52.416 --> 00:21:52.846
this UI.

00:21:52.846 --> 00:21:54.346
And even configuring the

00:21:54.346 --> 00:21:55.726
DiffableDataSource is not that

00:21:55.726 --> 00:21:55.976
hard.

00:21:57.416 --> 00:22:00.166
So our last example is maybe the

00:22:00.166 --> 00:22:01.226
most fun to watch.

00:22:01.556 --> 00:22:02.566
Here we've got a

00:22:02.566 --> 00:22:05.036
UICollectionView again that is

00:22:05.036 --> 00:22:06.286
displaying items that are

00:22:06.286 --> 00:22:08.276
represented as color swatches.

00:22:08.746 --> 00:22:09.786
And they're initially in a

00:22:09.786 --> 00:22:12.036
randomized order, color wise.

00:22:12.626 --> 00:22:14.916
If I tap the Sort button, we can

00:22:14.916 --> 00:22:16.666
watch them be iteratively sorted

00:22:16.806 --> 00:22:18.426
into spectral order.

00:22:19.316 --> 00:22:20.976
So in addition to being really

00:22:20.976 --> 00:22:21.976
mesmerizing and fun to watch

00:22:21.976 --> 00:22:22.043
[chuckles] --

00:22:22.543 --> 00:22:25.576
[ Applause ]

00:22:26.076 --> 00:22:27.516
Credit to Steve on this one.

00:22:28.666 --> 00:22:29.806
In addition to being really

00:22:29.806 --> 00:22:31.466
mesmerizing, and fun to watch,

00:22:31.726 --> 00:22:33.256
this example is just a little

00:22:33.256 --> 00:22:34.776
bit different than the others in

00:22:34.776 --> 00:22:36.706
the way that we construct and

00:22:36.706 --> 00:22:38.346
commit the updates.

00:22:39.036 --> 00:22:41.786
So if we wanted to, if we were

00:22:41.786 --> 00:22:42.976
just -- if our goal was just to

00:22:42.976 --> 00:22:44.396
sort everything and jump to the

00:22:44.396 --> 00:22:45.616
end state, we could do that

00:22:45.616 --> 00:22:46.116
here, right?

00:22:46.386 --> 00:22:48.296
This demo is set up so that we

00:22:48.296 --> 00:22:51.006
can watch the sort progress

00:22:51.046 --> 00:22:52.296
iteratively through each

00:22:52.326 --> 00:22:53.536
intermediate stage.

00:22:54.136 --> 00:22:55.586
So in order to do that, we've

00:22:55.586 --> 00:22:57.146
got our sword implementation

00:22:57.146 --> 00:22:58.176
that goes through the stages and

00:22:58.176 --> 00:22:59.646
gives them to us one at a time.

00:22:59.646 --> 00:23:01.366
It gives us each successive new

00:23:01.366 --> 00:23:03.356
state, and we create a Snapshot

00:23:03.356 --> 00:23:05.286
and apply a Snapshot each time

00:23:05.286 --> 00:23:06.536
that happens, each time we do an

00:23:06.536 --> 00:23:07.146
update cycle.

00:23:07.146 --> 00:23:08.286
And that gives us this nice,

00:23:08.336 --> 00:23:09.876
fun, animated view.

00:23:10.936 --> 00:23:11.786
So let's look at how we

00:23:11.786 --> 00:23:12.686
implement this and how it's

00:23:12.686 --> 00:23:12.976
different.

00:23:16.996 --> 00:23:17.776
We're going to look at the

00:23:17.776 --> 00:23:19.226
InsertionSortViewController

00:23:19.226 --> 00:23:19.496
here.

00:23:21.576 --> 00:23:23.126
And all the interesting action

00:23:23.126 --> 00:23:25.246
happens in this PerformSortStep

00:23:25.246 --> 00:23:25.666
function.

00:23:26.876 --> 00:23:29.006
So as I said, we always have

00:23:29.006 --> 00:23:30.266
that three-step cycle.

00:23:30.266 --> 00:23:31.356
We're going to get a Snapshot,

00:23:31.356 --> 00:23:33.506
populate it, and then apply it.

00:23:33.626 --> 00:23:36.916
But in this case, instead of

00:23:36.916 --> 00:23:38.166
asking for a new, empty

00:23:38.166 --> 00:23:39.736
Snapshot, we're going to take

00:23:39.736 --> 00:23:41.016
advantage of the ability to ask

00:23:41.436 --> 00:23:43.006
our DiffableDataSource for its

00:23:43.006 --> 00:23:43.986
current Snapshot.

00:23:44.386 --> 00:23:46.046
Now this Snapshot is

00:23:46.076 --> 00:23:47.766
prepopulated with the current

00:23:47.856 --> 00:23:49.376
truth of what's being shown in

00:23:49.376 --> 00:23:50.596
that UICollectionView as the

00:23:50.596 --> 00:23:51.526
CollectionView sees it.

00:23:52.576 --> 00:23:53.876
So we don't have to start over

00:23:53.876 --> 00:23:54.626
from scratch.

00:23:54.776 --> 00:23:56.306
We can start from that state and

00:23:56.306 --> 00:23:58.096
compute the next intermediate

00:23:58.556 --> 00:23:58.686
state.

00:24:00.286 --> 00:24:01.496
Down here, where we populate our

00:24:01.496 --> 00:24:02.786
Snapshot, we'll see that

00:24:02.786 --> 00:24:05.156
familiar AppendItems function

00:24:05.156 --> 00:24:05.726
being called.

00:24:05.726 --> 00:24:07.346
But we also have a DeleteItems

00:24:07.346 --> 00:24:07.936
function here.

00:24:08.236 --> 00:24:09.576
And when you look at the

00:24:09.576 --> 00:24:10.986
Snapshot API, you're going to

00:24:10.986 --> 00:24:12.296
see there are whole variety of

00:24:12.296 --> 00:24:13.596
functions for modifying an

00:24:13.596 --> 00:24:14.756
existing Snapshot for when

00:24:14.756 --> 00:24:15.786
you're doing this kind of usage.

00:24:15.786 --> 00:24:17.356
You can move items from one

00:24:17.356 --> 00:24:18.816
place to another, and so on.

00:24:19.656 --> 00:24:20.656
But in other respects, this is

00:24:20.706 --> 00:24:21.666
pretty much the same thing.

00:24:21.666 --> 00:24:22.736
We're just trying to set up the

00:24:22.736 --> 00:24:24.376
new final state of what we want

00:24:24.376 --> 00:24:24.996
to display.

00:24:24.996 --> 00:24:27.066
And we're just working with

00:24:27.066 --> 00:24:28.866
identifiers and not IndexPaths,

00:24:28.866 --> 00:24:29.776
which is really nice.

00:24:30.566 --> 00:24:33.386
So lastly, when we're done, all

00:24:33.386 --> 00:24:35.176
we have to do is apply that

00:24:35.176 --> 00:24:36.706
Snapshot to our

00:24:36.706 --> 00:24:37.726
DiffableDataSource.

00:24:38.556 --> 00:24:39.756
And we get this nice,

00:24:40.446 --> 00:24:41.486
progressive sorting.

00:24:42.146 --> 00:24:42.976
So pretty cool.

00:24:43.041 --> 00:24:45.041
[ Applause ]

00:24:45.066 --> 00:24:45.336
Thank you.

00:24:46.516 --> 00:24:49.556
[ Applause ]

00:24:50.056 --> 00:24:51.286
And here's where we set up our

00:24:51.286 --> 00:24:52.226
DiffableDataSource.

00:24:52.226 --> 00:24:52.806
Again, it's for a

00:24:52.806 --> 00:24:54.246
UICollectionView.

00:24:54.606 --> 00:24:56.436
We specify the types that we're

00:24:56.436 --> 00:24:58.546
using, the CollectionView, and

00:24:58.546 --> 00:25:00.026
then we have our item provider

00:25:00.026 --> 00:25:01.596
closure, which is real simple,

00:25:01.596 --> 00:25:02.636
because we're just displaying

00:25:02.636 --> 00:25:03.716
these color swatches.

00:25:04.926 --> 00:25:06.196
So we've seen, through these

00:25:06.196 --> 00:25:08.866
three examples, how easy it is,

00:25:08.866 --> 00:25:11.306
and how little code it takes to

00:25:11.306 --> 00:25:13.046
create these dynamic UIs that

00:25:13.536 --> 00:25:15.396
are also really robust to

00:25:15.396 --> 00:25:15.986
changes.

00:25:15.986 --> 00:25:17.586
We can make changes without fear

00:25:17.586 --> 00:25:18.826
of hitting these weird

00:25:18.826 --> 00:25:20.086
exceptions in our code.

00:25:20.086 --> 00:25:21.096
It's all very robust.

00:25:21.096 --> 00:25:23.086
It's baked into the API how that

00:25:23.086 --> 00:25:23.496
works.

00:25:24.166 --> 00:25:25.256
Now, we did touch on some

00:25:25.286 --> 00:25:27.066
interesting nuances, and the

00:25:27.066 --> 00:25:29.096
importance in particular of

00:25:29.096 --> 00:25:30.266
uniquely identifying your

00:25:30.266 --> 00:25:30.826
objects.

00:25:30.826 --> 00:25:31.946
And if you're working with Swift

00:25:31.946 --> 00:25:34.276
types, what those Swift types

00:25:34.276 --> 00:25:35.456
need to conform to and so on,

00:25:35.456 --> 00:25:36.646
that they need to be hashable.

00:25:37.096 --> 00:25:38.886
To take us on a deeper dive and

00:25:38.886 --> 00:25:40.286
bring these issues into clear

00:25:40.286 --> 00:25:40.836
focus.

00:25:40.926 --> 00:25:41.966
I'm going to invite my

00:25:41.966 --> 00:25:43.656
colleague, Steve, back on stage.

00:25:43.656 --> 00:25:43.866
Thank you.

00:25:44.516 --> 00:25:47.626
[ Applause ]

00:25:48.126 --> 00:25:50.356
>> And so I kind of have a sense

00:25:50.436 --> 00:25:52.836
for how this UI works walking

00:25:52.836 --> 00:25:53.816
through all these demos.

00:25:54.156 --> 00:25:56.046
I want to go through some more

00:25:56.046 --> 00:25:57.276
detailed considerations of how

00:25:57.276 --> 00:25:58.976
to get the best out of this API.

00:26:02.656 --> 00:26:02.946
All right.

00:26:03.056 --> 00:26:04.346
First, as we've seen all

00:26:04.346 --> 00:26:05.236
throughout the demos, there's

00:26:05.236 --> 00:26:06.396
basically just three steps.

00:26:06.666 --> 00:26:07.856
You want to create a Snapshot,

00:26:08.906 --> 00:26:10.246
configure it as you need it, and

00:26:10.246 --> 00:26:10.946
apply it.

00:26:11.446 --> 00:26:13.096
So you always want to call the

00:26:13.096 --> 00:26:13.806
apply method.

00:26:14.256 --> 00:26:15.576
Now conversely, you don't call

00:26:15.576 --> 00:26:16.766
performBatchUpdates anymore.

00:26:16.986 --> 00:26:17.646
That's old and dead.

00:26:17.946 --> 00:26:19.356
Called insertItems, none of

00:26:19.676 --> 00:26:19.766
that.

00:26:19.946 --> 00:26:21.266
If you call these, the framework

00:26:21.266 --> 00:26:22.066
will complain.

00:26:22.296 --> 00:26:23.846
And, you know, you will see

00:26:23.846 --> 00:26:23.936
that.

00:26:27.046 --> 00:26:28.306
Okay, there are two ways to

00:26:28.306 --> 00:26:29.706
create Snapshots.

00:26:29.766 --> 00:26:31.276
And the most common way is to

00:26:31.276 --> 00:26:32.486
create an empty Snapshot.

00:26:32.706 --> 00:26:33.816
And here we see, we construct

00:26:33.816 --> 00:26:35.206
the Snapshot with the types for

00:26:35.206 --> 00:26:36.996
the sections and items.

00:26:38.376 --> 00:26:39.736
And you can also create one,

00:26:39.736 --> 00:26:40.696
like we saw in the last demo,

00:26:40.696 --> 00:26:41.896
from the current state.

00:26:41.896 --> 00:26:42.766
And this is very useful

00:26:42.766 --> 00:26:44.196
sometimes when a certain action

00:26:44.196 --> 00:26:45.326
occurs where you need to modify

00:26:45.326 --> 00:26:45.976
just one little thing.

00:26:48.516 --> 00:26:50.036
Now when you create this, you're

00:26:50.036 --> 00:26:50.936
going to get a copy back.

00:26:51.056 --> 00:26:52.696
So you can mutate that at will,

00:26:52.696 --> 00:26:54.066
and it will not affect this --

00:26:54.206 --> 00:26:55.746
the data source that it came

00:26:55.746 --> 00:26:55.976
from.

00:26:58.186 --> 00:26:59.456
Now once you have that Snapshot,

00:26:59.456 --> 00:27:00.836
if you did ask some questions,

00:27:00.836 --> 00:27:01.686
like, you know, "How many items

00:27:01.686 --> 00:27:01.856
you got?

00:27:01.856 --> 00:27:02.746
How many sections you got?

00:27:02.846 --> 00:27:03.946
Identify the identifiers."

00:27:04.286 --> 00:27:04.846
You can do that.

00:27:04.846 --> 00:27:06.296
And there's a lot of API you can

00:27:06.296 --> 00:27:07.146
check out in the SDK.

00:27:07.146 --> 00:27:07.976
But here's a few of those.

00:27:11.156 --> 00:27:12.296
All right, so I promise you no

00:27:12.296 --> 00:27:13.146
more IndexPath.

00:27:13.146 --> 00:27:14.456
So when we configured these

00:27:14.456 --> 00:27:16.496
Snapshots, you'll never see an

00:27:16.496 --> 00:27:18.666
IndexPath in this API, through

00:27:18.666 --> 00:27:20.516
explicit API.

00:27:21.066 --> 00:27:22.506
So, so far, we've seen a very

00:27:22.506 --> 00:27:23.846
common pattern of appending

00:27:23.846 --> 00:27:25.226
items and appending sections,

00:27:25.226 --> 00:27:26.026
all those kinds of things.

00:27:26.026 --> 00:27:27.026
But you can also do things like

00:27:27.026 --> 00:27:28.456
insert and move and delete.

00:27:29.246 --> 00:27:31.226
And all of these API's take in

00:27:31.456 --> 00:27:34.276
other relative identifiers to

00:27:34.276 --> 00:27:35.596
tell you where things go.

00:27:35.596 --> 00:27:37.426
So if I want to insert 20 new

00:27:37.426 --> 00:27:38.746
identifiers that are all unique,

00:27:39.686 --> 00:27:40.776
before or after another

00:27:40.776 --> 00:27:42.736
identifier, we have explicit API

00:27:42.736 --> 00:27:43.336
for that.

00:27:43.336 --> 00:27:44.256
So you'll say, "Insert these

00:27:44.256 --> 00:27:45.566
identifiers before this

00:27:45.566 --> 00:27:46.236
identifier."

00:27:47.056 --> 00:27:49.246
Now, if you don't have anything

00:27:49.246 --> 00:27:50.316
in that particular section,

00:27:50.316 --> 00:27:51.536
there's no identifier to anchor

00:27:51.536 --> 00:27:53.086
that insertion or move with,

00:27:53.696 --> 00:27:54.986
that's why we have the append

00:27:55.096 --> 00:27:55.356
APIs.

00:27:55.356 --> 00:27:57.066
You can append items and

00:27:57.066 --> 00:27:57.586
sections.

00:27:58.836 --> 00:28:00.316
Now, in that familiar path,

00:28:00.316 --> 00:28:01.106
where you have a number of

00:28:01.106 --> 00:28:01.766
sections, where you're

00:28:01.766 --> 00:28:03.386
configuring your Snapshot, you

00:28:03.386 --> 00:28:04.646
might loop through your section

00:28:04.646 --> 00:28:04.866
data.

00:28:04.866 --> 00:28:05.996
And in that instance, you can

00:28:05.996 --> 00:28:07.846
append items without specifying

00:28:07.876 --> 00:28:08.316
the section.

00:28:08.316 --> 00:28:09.456
There's a default parameter in

00:28:09.456 --> 00:28:11.426
Swift that specifies to null.

00:28:11.666 --> 00:28:13.246
In this instance, we'll just

00:28:13.246 --> 00:28:14.456
append to the last-known

00:28:14.456 --> 00:28:14.966
section.

00:28:14.966 --> 00:28:15.736
So it makes that code very

00:28:15.736 --> 00:28:15.976
pretty.

00:28:19.066 --> 00:28:19.956
All right, so let's talk a bit

00:28:19.956 --> 00:28:21.246
about identifiers.

00:28:21.986 --> 00:28:22.896
These have to be unique.

00:28:23.386 --> 00:28:25.726
And this isn't a big problem,

00:28:25.726 --> 00:28:26.896
because most apps have some kind

00:28:26.896 --> 00:28:28.616
of notion of identity in their

00:28:28.616 --> 00:28:29.426
model objects.

00:28:29.916 --> 00:28:31.456
So it's a very natural step to

00:28:31.456 --> 00:28:32.976
just use that unique identifier.

00:28:35.046 --> 00:28:35.936
Now in Swift, this needs to

00:28:35.936 --> 00:28:37.096
conform to hashable.

00:28:37.526 --> 00:28:38.976
And conveniently enough, many

00:28:38.976 --> 00:28:39.926
things in Swift do this

00:28:39.926 --> 00:28:40.536
automatically.

00:28:40.536 --> 00:28:42.356
We saw auto synthesis for this

00:28:42.356 --> 00:28:42.976
in the enum types.

00:28:45.646 --> 00:28:47.466
And we have string, and integer,

00:28:47.466 --> 00:28:48.956
and UUID, all these great things

00:28:48.956 --> 00:28:50.456
that are available for use for

00:28:50.456 --> 00:28:51.286
DiffableDataSource.

00:28:52.746 --> 00:28:54.636
Now, we also saw that you can

00:28:54.636 --> 00:28:56.266
bring in some model data into

00:28:56.266 --> 00:28:57.396
these identifiers.

00:28:57.496 --> 00:28:58.626
And this is really convenient.

00:28:58.996 --> 00:29:00.266
Now your identity needs to come

00:29:00.266 --> 00:29:01.506
from some unique identifier.

00:29:01.856 --> 00:29:02.976
But you can also bring in other

00:29:03.126 --> 00:29:03.816
attributes.

00:29:03.816 --> 00:29:05.536
When we saw like the name and

00:29:05.536 --> 00:29:07.156
the mountains, you can control

00:29:07.156 --> 00:29:07.666
our example.

00:29:08.536 --> 00:29:09.426
And this is really handy,

00:29:09.426 --> 00:29:10.656
because when you configure your

00:29:10.656 --> 00:29:11.866
cell, you have everything you

00:29:11.866 --> 00:29:12.966
need right there in line.

00:29:12.966 --> 00:29:13.926
No looking it up somewhere else.

00:29:18.056 --> 00:29:18.746
All right, here's a little,

00:29:18.786 --> 00:29:19.816
quick template that we see

00:29:19.816 --> 00:29:20.886
throughout the examples that

00:29:20.886 --> 00:29:22.086
talks about how to create a

00:29:22.086 --> 00:29:23.986
hashable thing in Swift where

00:29:23.986 --> 00:29:24.706
they're using a struct.

00:29:26.206 --> 00:29:26.966
Pretty straightforward stuff.

00:29:30.506 --> 00:29:31.246
All right, so what about

00:29:31.466 --> 00:29:32.636
IndexPath-based APIs?

00:29:32.636 --> 00:29:34.306
Okay, so we have CollectionView

00:29:34.306 --> 00:29:34.926
and TableView.

00:29:34.926 --> 00:29:35.606
They have tons of

00:29:35.606 --> 00:29:36.656
IndexPath-based APIs.

00:29:36.656 --> 00:29:37.856
A lot of them in the Delegate

00:29:37.896 --> 00:29:38.276
methods.

00:29:38.276 --> 00:29:40.176
So if a user interacts with the

00:29:40.176 --> 00:29:41.776
content and taps on an item,

00:29:42.476 --> 00:29:43.356
you'll get this familiar

00:29:43.356 --> 00:29:45.376
Delegate message didSelectItemAt

00:29:45.376 --> 00:29:46.006
IndexPath.

00:29:47.126 --> 00:29:48.536
But we've moved into this great

00:29:48.536 --> 00:29:49.636
new identifier-based world.

00:29:49.636 --> 00:29:50.236
What are we going to do with

00:29:50.236 --> 00:29:51.066
this IndexPath?

00:29:51.066 --> 00:29:51.906
You know, that's old school.

00:29:51.906 --> 00:29:54.236
So here we have new API's.

00:29:54.296 --> 00:29:55.356
Let you translate between

00:29:55.356 --> 00:29:57.716
identifiers, IndexPaths, and

00:29:57.716 --> 00:29:59.196
then back from IndexPaths to

00:29:59.196 --> 00:29:59.926
identifiers.

00:29:59.926 --> 00:30:01.046
So here, we see an example.

00:30:01.556 --> 00:30:02.796
We're taking that identifier,

00:30:02.916 --> 00:30:04.606
that IndexPath that's past, and

00:30:04.606 --> 00:30:06.256
converting it back to an

00:30:06.256 --> 00:30:06.746
identifier.

00:30:06.746 --> 00:30:07.736
And this is constant time.

00:30:07.846 --> 00:30:08.976
This is super, super fast.

00:30:12.426 --> 00:30:13.256
All right, so speaking of

00:30:13.256 --> 00:30:13.886
performance.

00:30:14.906 --> 00:30:17.406
So we've done a ton of work to

00:30:17.406 --> 00:30:19.516
make this as fast as possible.

00:30:19.656 --> 00:30:20.606
And there's a lot of really

00:30:20.606 --> 00:30:21.796
great low-level stuff that just

00:30:21.796 --> 00:30:21.976
blazes.

00:30:25.266 --> 00:30:26.646
Now, if you've ever studied in

00:30:26.646 --> 00:30:27.746
the computer science, the whole

00:30:27.746 --> 00:30:29.176
notion of how diffs occur, you

00:30:29.176 --> 00:30:30.516
know that this is a linear

00:30:30.516 --> 00:30:31.606
operation, O of N.

00:30:31.606 --> 00:30:34.236
And in simple terms, all it just

00:30:34.236 --> 00:30:35.276
means is the more items you

00:30:35.276 --> 00:30:36.836
have, the longer your diff

00:30:36.836 --> 00:30:36.976
takes.

00:30:39.106 --> 00:30:40.236
So during development, it's

00:30:40.236 --> 00:30:41.736
super important to measure your

00:30:41.736 --> 00:30:42.006
apps.

00:30:42.006 --> 00:30:42.506
We all know this.

00:30:42.506 --> 00:30:43.836
We want to make sure that the

00:30:43.836 --> 00:30:46.076
main queue is always as free as

00:30:46.106 --> 00:30:47.906
possible to be real responsive

00:30:47.906 --> 00:30:48.766
to user events.

00:30:48.766 --> 00:30:49.926
And we render everything really

00:30:49.926 --> 00:30:50.376
quickly.

00:30:50.896 --> 00:30:52.746
So as you're measuring your app

00:30:52.796 --> 00:30:53.536
-- you all measure your apps --

00:30:53.906 --> 00:30:55.066
during development, especially

00:30:55.066 --> 00:30:55.566
towards the end.

00:30:55.746 --> 00:30:56.596
I want to make sure that

00:30:56.596 --> 00:30:58.106
everything's really free on that

00:30:58.106 --> 00:30:58.776
main queue.

00:30:59.906 --> 00:31:01.036
Well, if you find that you have

00:31:01.036 --> 00:31:02.426
a large number of items in that

00:31:02.426 --> 00:31:03.526
linear diffs taking that little

00:31:03.526 --> 00:31:05.656
extra time, it is safe to call

00:31:05.656 --> 00:31:06.596
the Apply method from a

00:31:06.596 --> 00:31:06.966
background queue.

00:31:07.516 --> 00:31:14.336
[ Applause ]

00:31:14.836 --> 00:31:15.926
Now, what's really cool about

00:31:15.986 --> 00:31:17.286
this is the amount of API we

00:31:17.286 --> 00:31:18.486
have to support this.

00:31:18.486 --> 00:31:19.376
There's no API.

00:31:20.016 --> 00:31:21.046
[ Laughter ]

00:31:21.046 --> 00:31:21.976
Which is the best API.

00:31:22.031 --> 00:31:24.031
[ Cheering and Applause ]

00:31:24.046 --> 00:31:24.176
Right?

00:31:26.916 --> 00:31:28.046
All right, so what happens if

00:31:28.046 --> 00:31:28.956
you call Apply from the

00:31:28.956 --> 00:31:29.586
background queue?

00:31:29.586 --> 00:31:30.886
Well effectively, the framework

00:31:30.886 --> 00:31:31.966
is smart enough to know, "Hey,

00:31:31.966 --> 00:31:32.856
I'm on the main queue."

00:31:32.856 --> 00:31:34.056
And it says, "Let's just keep

00:31:34.056 --> 00:31:35.076
doing this diff right here."

00:31:36.126 --> 00:31:37.716
And once that diff is computed,

00:31:37.956 --> 00:31:39.086
we jump back to the main queue,

00:31:39.086 --> 00:31:40.926
apply the results from our diff,

00:31:40.926 --> 00:31:41.966
and life goes on, like normal.

00:31:45.256 --> 00:31:46.706
All right, so just one caveat,

00:31:46.706 --> 00:31:47.696
and I promise, just one.

00:31:48.406 --> 00:31:51.136
If you choose this model to call

00:31:51.136 --> 00:31:52.466
Apply from the background queue,

00:31:52.606 --> 00:31:53.226
be consistent.

00:31:53.626 --> 00:31:54.646
Just always call it from the

00:31:54.646 --> 00:31:55.236
background queue.

00:31:55.286 --> 00:31:56.486
You never want to mix and match

00:31:56.526 --> 00:31:58.226
calling it from a background

00:31:58.326 --> 00:31:59.406
queue or the main queue.

00:31:59.676 --> 00:32:00.786
Just always do it the same way.

00:32:02.496 --> 00:32:03.566
And we're good citizens.

00:32:03.566 --> 00:32:05.266
We'll complain about this if you

00:32:05.266 --> 00:32:05.656
get it wrong.

00:32:06.536 --> 00:32:08.016
All right, so at Apple

00:32:08.216 --> 00:32:09.716
collaboration is a big part.

00:32:09.716 --> 00:32:11.166
It's the main strength of our

00:32:11.166 --> 00:32:12.666
organization, the way we talk to

00:32:12.666 --> 00:32:14.156
each other and solve problems

00:32:14.196 --> 00:32:14.616
together.

00:32:15.286 --> 00:32:16.976
And part of this as the

00:32:16.976 --> 00:32:18.146
frameworks authors is to make

00:32:18.146 --> 00:32:19.456
sure that all of your clients,

00:32:19.456 --> 00:32:20.796
or who you talk to on a regular

00:32:20.796 --> 00:32:21.526
basis, and find out what they're

00:32:21.526 --> 00:32:22.366
struggling with.

00:32:22.756 --> 00:32:23.806
And this clearly is one of the

00:32:23.806 --> 00:32:24.536
things they're struggling with.

00:32:25.106 --> 00:32:26.726
So during this, we chatted with

00:32:26.726 --> 00:32:27.636
the folks who are working on the

00:32:27.636 --> 00:32:29.146
Share Sheet, this new,

00:32:29.146 --> 00:32:30.966
redesigned Share Sheet in iOS

00:32:30.966 --> 00:32:33.116
13, with the great airdrop

00:32:33.166 --> 00:32:33.786
extensions.

00:32:34.776 --> 00:32:36.076
And they found out about it kind

00:32:36.076 --> 00:32:36.816
of late in the game when they

00:32:36.816 --> 00:32:38.026
had this brand new design.

00:32:38.026 --> 00:32:38.886
And they said, "Oh, this looks

00:32:38.886 --> 00:32:39.216
great.

00:32:39.216 --> 00:32:39.856
We need this."

00:32:39.986 --> 00:32:40.976
And indeed they did.

00:32:41.016 --> 00:32:42.996
So I want to bring up one of my

00:32:42.996 --> 00:32:44.526
colleagues from the Share Sheet

00:32:44.526 --> 00:32:46.876
team, Jacob Clapper, to walk us

00:32:46.876 --> 00:32:48.136
through that adoption.

00:32:48.256 --> 00:32:48.546
Jacob?

00:32:49.516 --> 00:32:54.426
[ Applause ]

00:32:54.926 --> 00:32:55.606
>> Hi, everyone.

00:32:56.316 --> 00:32:57.596
I'm really excited to show you

00:32:57.596 --> 00:32:58.586
how the Share Sheet has been

00:32:58.586 --> 00:32:59.966
able to take advantage of the

00:32:59.966 --> 00:33:02.186
great new CollectionView APIs in

00:33:02.316 --> 00:33:02.976
iOS 13.

00:33:05.046 --> 00:33:06.066
All right, so here we are in the

00:33:06.066 --> 00:33:07.126
brand new Share Sheet.

00:33:07.816 --> 00:33:08.786
And this Share Sheet actually

00:33:08.786 --> 00:33:10.306
takes advantage of the new

00:33:10.306 --> 00:33:12.086
compositional layout API's and

00:33:12.086 --> 00:33:13.406
DiffableDataSource.

00:33:13.406 --> 00:33:14.646
But where DiffableDataSource

00:33:14.646 --> 00:33:16.126
really shines is in the brand

00:33:16.126 --> 00:33:17.446
new airdrop extension.

00:33:18.696 --> 00:33:21.176
So the airdrop extension has a

00:33:21.176 --> 00:33:22.256
browser that's browsing for

00:33:22.256 --> 00:33:22.846
devices.

00:33:23.156 --> 00:33:24.576
And we actually already use

00:33:24.576 --> 00:33:26.606
UUIDs to uniquely identify each

00:33:26.606 --> 00:33:27.656
device that's discovered.

00:33:28.166 --> 00:33:30.206
So as new devices are

00:33:30.206 --> 00:33:31.876
discovered, we are able to

00:33:31.876 --> 00:33:34.036
create an empty Snapshot, append

00:33:34.036 --> 00:33:35.506
our sections and items, and

00:33:35.506 --> 00:33:36.536
Apply the differences.

00:33:36.876 --> 00:33:38.566
DiffableDataSource takes care of

00:33:38.566 --> 00:33:39.056
the rest.

00:33:39.056 --> 00:33:40.056
And the animations are

00:33:40.056 --> 00:33:41.826
beautiful, no matter how many

00:33:41.826 --> 00:33:43.736
items are removed or deleted.

00:33:44.276 --> 00:33:46.196
DiffableDataSource has been a

00:33:46.196 --> 00:33:47.316
game changer for us.

00:33:47.626 --> 00:33:48.986
And we can't wait to see what

00:33:48.986 --> 00:33:50.566
you do with it in your apps.

00:33:50.646 --> 00:33:51.866
I'm going to hand it back over

00:33:51.866 --> 00:33:53.486
to Troy for some final thoughts.

00:33:55.516 --> 00:33:57.556
[ Applause ]

00:33:58.056 --> 00:33:59.426
>> Boy, it's so exciting to me

00:33:59.426 --> 00:34:00.456
to hear how much

00:34:00.456 --> 00:34:02.146
DiffableDataSource is already

00:34:02.196 --> 00:34:03.566
making a difference in the

00:34:03.566 --> 00:34:05.106
development of our own apps.

00:34:05.106 --> 00:34:06.526
And we couldn't be more thrilled

00:34:06.526 --> 00:34:08.606
to make this same API that we've

00:34:08.606 --> 00:34:09.866
been adopting internally

00:34:10.146 --> 00:34:11.806
available to use for developers

00:34:11.906 --> 00:34:12.976
across our platforms.

00:34:21.045 --> 00:34:22.505
So as we've seen today,

00:34:22.505 --> 00:34:24.485
DiffableDataSource dramatically

00:34:24.485 --> 00:34:26.416
simplifies the work that you

00:34:26.416 --> 00:34:28.485
have to do to get model data

00:34:28.485 --> 00:34:30.606
into your CollectionViews and

00:34:30.606 --> 00:34:31.676
your UITableViews.

00:34:31.976 --> 00:34:33.326
We think it's really a game

00:34:33.326 --> 00:34:33.596
changer.

00:34:33.596 --> 00:34:35.646
It makes it incredibly simple

00:34:35.876 --> 00:34:36.476
and robust.

00:34:36.755 --> 00:34:38.516
There's no more puzzling

00:34:38.696 --> 00:34:40.126
exceptions to debug and

00:34:40.186 --> 00:34:42.216
hard-to-write batch update code.

00:34:42.216 --> 00:34:44.025
You can really just focus on

00:34:44.025 --> 00:34:44.916
what you want to do with your

00:34:44.916 --> 00:34:46.496
app and leave the rest to the

00:34:46.496 --> 00:34:46.936
framework.

00:34:47.856 --> 00:34:49.315
DiffableDataSource is available

00:34:49.426 --> 00:34:53.186
for you to use today on iOS,

00:34:53.186 --> 00:34:54.606
TVoS, and MacOS.

00:34:55.176 --> 00:34:57.016
In addition to providing-- to

00:34:57.016 --> 00:34:58.676
figuring out the diffs for you,

00:34:58.906 --> 00:35:00.236
and automatically committing

00:35:00.236 --> 00:35:01.936
them to your UI, you get these

00:35:01.936 --> 00:35:03.946
nice animated changes, right?

00:35:03.946 --> 00:35:05.516
And there's no additional work

00:35:05.516 --> 00:35:07.476
for you to do to get that nice,

00:35:07.786 --> 00:35:09.056
pleasing user interaction

00:35:09.056 --> 00:35:09.316
effect.

00:35:10.126 --> 00:35:12.566
The built-in diff is fast.

00:35:12.566 --> 00:35:14.096
It has been heavily stress

00:35:14.136 --> 00:35:14.556
tested.

00:35:14.906 --> 00:35:17.296
DiffableDataSource is a robust

00:35:17.296 --> 00:35:19.086
API that is ready for you to

00:35:19.086 --> 00:35:20.186
take and run with it.

00:35:20.656 --> 00:35:22.686
So go out there and take it.

00:35:22.946 --> 00:35:24.526
Adapt to your apps to use

00:35:24.526 --> 00:35:25.656
DiffableDataSource.

00:35:25.986 --> 00:35:27.266
We can't wait to see the burden

00:35:27.266 --> 00:35:28.356
this is going to take off your

00:35:28.356 --> 00:35:29.616
shoulders and the delightful

00:35:29.616 --> 00:35:31.176
user experiences that you're

00:35:31.176 --> 00:35:32.206
going to be able to create with

00:35:32.206 --> 00:35:33.586
it with much less time, much

00:35:33.586 --> 00:35:34.176
fewer headaches.

00:35:36.636 --> 00:35:37.896
If you found this talk

00:35:37.896 --> 00:35:39.256
interesting, and you work with

00:35:39.256 --> 00:35:40.426
CollectionViews, we've got

00:35:40.426 --> 00:35:41.246
another one that you're really

00:35:41.246 --> 00:35:43.166
going to love in Advances in

00:35:43.166 --> 00:35:44.616
Collection View Layout.

00:35:44.976 --> 00:35:47.176
We describe an entirely new

00:35:47.176 --> 00:35:48.706
layout system, a way to just

00:35:48.706 --> 00:35:50.276
simply describe any custom

00:35:50.276 --> 00:35:51.736
layout that you want to have in

00:35:51.736 --> 00:35:52.666
your CollectionView.

00:35:52.986 --> 00:35:53.906
And be able to see it

00:35:53.906 --> 00:35:55.356
implemented without any sub

00:35:55.356 --> 00:35:57.206
classing with highly performant

00:35:57.206 --> 00:35:57.666
results.

00:35:57.666 --> 00:35:58.506
So we think you're really going

00:35:58.506 --> 00:35:58.916
to love this.

00:35:58.916 --> 00:36:00.346
Make sure to catch that session.

00:36:01.316 --> 00:36:02.686
And thank you so much for

00:36:02.686 --> 00:36:02.976
watching today.

00:36:03.516 --> 00:36:08.500
[ Applause ]