WEBVTT

00:00:00.506 --> 00:00:04.500
[ Music ]

00:00:08.016 --> 00:00:09.156
[ Applause ]

00:00:09.156 --> 00:00:12.186
>> Good morning and welcome to

00:00:12.186 --> 00:00:13.526
Data Flow Through SwiftUI.

00:00:13.526 --> 00:00:15.986
My name is Luca Bernardi and I

00:00:15.986 --> 00:00:17.096
will later be joined by my

00:00:17.096 --> 00:00:18.096
friend and colleague, Raj

00:00:18.096 --> 00:00:18.686
Ramamaurthy.

00:00:18.906 --> 00:00:19.896
Are you guys excited about

00:00:19.896 --> 00:00:20.486
SwiftUI?

00:00:20.486 --> 00:00:21.836
>> [Simultaneously] Yeah.

00:00:21.836 --> 00:00:25.276
>> Sweet. I'm super excited to

00:00:25.276 --> 00:00:25.996
be here today.

00:00:25.996 --> 00:00:28.476
SwiftUI is the shortest path to

00:00:28.476 --> 00:00:30.226
a great app, but we also

00:00:30.226 --> 00:00:31.896
designed it from the ground up

00:00:32.006 --> 00:00:33.526
with the goal of solving the

00:00:33.526 --> 00:00:35.096
complexity of UI development.

00:00:35.096 --> 00:00:37.876
That means that data is a first

00:00:37.876 --> 00:00:39.376
class citizen in SwiftUI.

00:00:40.056 --> 00:00:42.856
In this talk, we are going to

00:00:42.856 --> 00:00:44.646
show you the simple but powerful

00:00:44.646 --> 00:00:45.776
tool that you have at your

00:00:45.776 --> 00:00:47.706
disposal to flow data through

00:00:47.706 --> 00:00:48.506
your view hierarchy.

00:00:49.306 --> 00:00:50.706
This tool can help you achieve app that

00:00:50.706 --> 00:00:52.906
are not only beautiful but also

00:00:52.906 --> 00:00:53.506
well behaved.

00:00:56.046 --> 00:00:57.386
We will also look under the hood

00:00:57.386 --> 00:00:59.526
of how SwiftUI updates your view

00:00:59.526 --> 00:01:01.166
hierarchy to guarantee that you

00:01:01.166 --> 00:01:02.956
always have a correct and

00:01:02.956 --> 00:01:04.105
consistent representation of

00:01:04.105 --> 00:01:04.575
your data.

00:01:05.916 --> 00:01:07.856
And finally, we will empower you

00:01:07.986 --> 00:01:09.376
with a mental framework for

00:01:09.376 --> 00:01:10.996
understanding your data and the

00:01:10.996 --> 00:01:12.256
tool available to you.

00:01:13.836 --> 00:01:16.176
But before moving on, what do we

00:01:16.176 --> 00:01:16.906
mean by data?

00:01:18.196 --> 00:01:19.746
Data is all the information that

00:01:19.746 --> 00:01:20.666
drives your UI.

00:01:21.296 --> 00:01:23.146
Data comes in all sort of shapes

00:01:23.226 --> 00:01:23.746
and form.

00:01:24.356 --> 00:01:25.806
One example is stating your UI

00:01:25.806 --> 00:01:27.886
like the state of a toggle.

00:01:29.036 --> 00:01:30.766
Data also represent model data,

00:01:31.306 --> 00:01:32.406
such as the object that drives a

00:01:32.406 --> 00:01:32.976
list of messages.

00:01:36.096 --> 00:01:37.716
We have a number of tool at your

00:01:37.716 --> 00:01:39.166
disposal depending on what you

00:01:39.166 --> 00:01:39.746
want to achieve.

00:01:40.656 --> 00:01:41.586
You've probably seen some of

00:01:41.586 --> 00:01:42.926
this tool in previous talk.

00:01:42.926 --> 00:01:44.756
But if you are not familiar with

00:01:44.756 --> 00:01:47.206
them, don't worry we're going to

00:01:47.206 --> 00:01:48.786
explain what they are and when

00:01:48.786 --> 00:01:49.256
to use them.

00:01:50.236 --> 00:01:51.836
At the end of this talk, you'll

00:01:51.836 --> 00:01:54.186
know exactly what tool to use

00:01:54.306 --> 00:01:54.826
and when.

00:01:55.486 --> 00:01:57.736
But before showing you this

00:01:57.736 --> 00:01:59.316
tool, I would like to illustrate

00:01:59.316 --> 00:02:00.866
the two guiding principle that

00:02:00.866 --> 00:02:03.136
inspired us in designing them.

00:02:03.936 --> 00:02:05.266
The first principle is that

00:02:05.266 --> 00:02:06.996
every time you read a piece of

00:02:06.996 --> 00:02:08.166
data in your view, you're

00:02:08.166 --> 00:02:09.536
creating a dependency for that

00:02:09.536 --> 00:02:09.776
view.

00:02:10.616 --> 00:02:11.806
This is a dependency because

00:02:11.806 --> 00:02:13.116
every time the data changes,

00:02:13.466 --> 00:02:14.736
your view has to change to

00:02:14.736 --> 00:02:15.576
reflect the new value.

00:02:17.156 --> 00:02:18.776
For example, here in blue I have

00:02:18.776 --> 00:02:19.876
a view showing some playback

00:02:19.876 --> 00:02:21.856
control and the view needs to

00:02:21.856 --> 00:02:23.006
read some data in purple.

00:02:23.806 --> 00:02:25.116
Every time this value changes,

00:02:25.116 --> 00:02:25.976
we need to update the view.

00:02:28.666 --> 00:02:30.436
And so additionally, defining

00:02:30.436 --> 00:02:31.686
this dependency is a manual

00:02:31.686 --> 00:02:33.126
process and it can quickly

00:02:33.126 --> 00:02:34.696
become a complex endeavor.

00:02:35.266 --> 00:02:38.206
But just like viewing SwiftUI

00:02:38.206 --> 00:02:40.096
are declarative, data dependency

00:02:40.096 --> 00:02:40.596
are as well.

00:02:40.596 --> 00:02:41.956
There is no manual

00:02:41.956 --> 00:02:43.696
synchronization or invalidation.

00:02:43.696 --> 00:02:46.756
With SwiftUI, you simply

00:02:46.756 --> 00:02:48.056
describe the dependency to the

00:02:48.056 --> 00:02:50.056
framework using few tools and

00:02:50.056 --> 00:02:51.276
the frameworks handles all the

00:02:51.276 --> 00:02:51.566
rest.

00:02:51.596 --> 00:02:54.006
And that means that you can

00:02:54.056 --> 00:02:55.456
focus on building the best

00:02:55.456 --> 00:02:57.316
experience for your user.

00:03:00.096 --> 00:03:01.516
The second principle is that

00:03:01.516 --> 00:03:03.446
every piece of data that you're

00:03:03.446 --> 00:03:04.696
reading in your view hierarchy

00:03:04.846 --> 00:03:05.806
has a source of truth.

00:03:07.016 --> 00:03:08.166
The source of truth can live in

00:03:08.166 --> 00:03:08.816
your view hierarchy.

00:03:09.216 --> 00:03:10.576
For example when you have some

00:03:10.576 --> 00:03:13.366
state about something should be

00:03:13.426 --> 00:03:14.986
collapsed or not, or it can be

00:03:14.986 --> 00:03:16.866
external such as when you're

00:03:16.916 --> 00:03:18.396
displaying a message coming from

00:03:18.396 --> 00:03:18.976
a persistent model.

00:03:21.696 --> 00:03:22.836
Regardless of where the source

00:03:22.836 --> 00:03:24.876
of truth live, you should always

00:03:24.876 --> 00:03:27.266
have a single source of truth.

00:03:29.096 --> 00:03:31.196
Duplicated source of truth can

00:03:31.196 --> 00:03:32.766
lead to bug and inconsistency

00:03:32.986 --> 00:03:34.256
because you always have to be

00:03:34.256 --> 00:03:35.766
careful in keeping them in sync.

00:03:36.776 --> 00:03:38.286
Think about all the time you've

00:03:38.286 --> 00:03:39.786
duplicated the same piece of

00:03:39.866 --> 00:03:42.626
data, for example, into sibling

00:03:42.626 --> 00:03:44.876
view and how all the complexity

00:03:44.876 --> 00:03:46.186
of posting notification,

00:03:46.276 --> 00:03:47.626
KV observing or

00:03:47.626 --> 00:03:48.796
responding to a different

00:03:48.796 --> 00:03:50.326
sequence of event has caused

00:03:50.326 --> 00:03:50.876
your bug.

00:03:52.086 --> 00:03:53.006
And it's pretty easy to get

00:03:53.096 --> 00:03:53.386
wrong.

00:03:54.046 --> 00:03:55.036
And they've made the same

00:03:55.036 --> 00:03:56.286
mistake many time.

00:03:56.866 --> 00:03:59.936
What you shall do instead is

00:03:59.936 --> 00:04:01.456
lift up the data into a common

00:04:01.456 --> 00:04:03.386
ancestor and let the two

00:04:03.386 --> 00:04:05.546
children have a reference to it.

00:04:06.836 --> 00:04:08.426
When you have a single source of

00:04:08.426 --> 00:04:10.066
truth, you're eliminating

00:04:10.276 --> 00:04:11.946
inconsistency bug between view

00:04:11.946 --> 00:04:12.596
and your data.

00:04:13.206 --> 00:04:14.176
And you can use the tool

00:04:14.426 --> 00:04:15.786
available in the language to

00:04:15.786 --> 00:04:17.255
enforcing variant in your data.

00:04:17.866 --> 00:04:20.586
With this principle in mind,

00:04:20.966 --> 00:04:22.846
take a step back, look at all

00:04:22.846 --> 00:04:23.856
the source of truth in your

00:04:23.856 --> 00:04:25.466
code, and then use this

00:04:25.466 --> 00:04:27.376
information to make decision

00:04:27.376 --> 00:04:29.446
about the structure of your

00:04:32.956 --> 00:04:33.126
data.

00:04:33.276 --> 00:04:35.696
So I really like listening to a

00:04:35.696 --> 00:04:37.016
good podcast during my commute

00:04:37.016 --> 00:04:37.746
to Apple Park.

00:04:37.746 --> 00:04:39.386
And I thought it will be great

00:04:39.386 --> 00:04:41.216
to build a podcast player with

00:04:41.216 --> 00:04:41.646
SwiftUI.

00:04:41.646 --> 00:04:44.616
We are going to use this example

00:04:44.616 --> 00:04:45.596
throughout the talk to

00:04:45.736 --> 00:04:46.926
demonstrate all the tool

00:04:46.926 --> 00:04:47.676
available to you.

00:04:48.676 --> 00:04:49.826
Here is the UI that we are going

00:04:49.826 --> 00:04:50.256
to build.

00:04:51.506 --> 00:04:52.556
It's the interface for the

00:04:52.556 --> 00:04:53.826
player when we're going to

00:04:53.826 --> 00:04:55.236
display the show and episode

00:04:55.276 --> 00:04:57.836
title, the playback button, and

00:04:57.836 --> 00:04:58.496
the current time.

00:04:59.096 --> 00:05:01.916
We are going to build this UI

00:05:01.916 --> 00:05:02.796
step by step.

00:05:03.686 --> 00:05:04.846
But let's start by creating a

00:05:04.846 --> 00:05:05.786
view that show the current

00:05:05.786 --> 00:05:05.976
episode.

00:05:09.386 --> 00:05:10.506
We can start by creating a new

00:05:10.506 --> 00:05:12.536
view, Playerview, and this view

00:05:12.536 --> 00:05:13.636
has one property.

00:05:13.636 --> 00:05:14.846
That stored the current playing

00:05:14.846 --> 00:05:15.296
episode.

00:05:15.936 --> 00:05:17.836
And we want to display the

00:05:17.836 --> 00:05:19.466
episode show and title.

00:05:19.926 --> 00:05:20.986
So in the body, we'll make a

00:05:20.986 --> 00:05:22.956
VStack containing two texts so

00:05:22.956 --> 00:05:23.966
that they're stacked vertically.

00:05:24.536 --> 00:05:27.946
And regular Swift property are

00:05:27.946 --> 00:05:28.846
your first tool.

00:05:29.276 --> 00:05:30.206
They're great when you have a

00:05:30.206 --> 00:05:31.506
view that needs to read all the

00:05:31.506 --> 00:05:33.056
access to a derived piece of

00:05:33.056 --> 00:05:33.446
data.

00:05:34.406 --> 00:05:35.346
This is data that will be

00:05:35.346 --> 00:05:36.746
provided to the view by its

00:05:36.746 --> 00:05:37.206
parent.

00:05:38.556 --> 00:05:40.386
But now, I want to be able to

00:05:40.386 --> 00:05:42.046
play and pause, so let's have

00:05:42.046 --> 00:05:42.246
that.

00:05:42.936 --> 00:05:46.676
We had a new property indicating

00:05:46.676 --> 00:05:48.186
whether the episode is playing

00:05:48.186 --> 00:05:48.546
or not.

00:05:48.546 --> 00:05:50.896
And now the image that show a

00:05:50.896 --> 00:05:52.266
different clip depending on the

00:05:52.266 --> 00:05:53.236
value of isPlaying.

00:05:53.856 --> 00:05:56.176
But now I want to make the Play

00:05:56.176 --> 00:05:58.196
button interactive so that when

00:05:58.196 --> 00:05:59.556
the user taps on it, would

00:05:59.586 --> 00:06:01.146
toggle the Playback state and

00:06:01.146 --> 00:06:02.226
change the image as well.

00:06:02.816 --> 00:06:06.176
And we can do that by using a

00:06:07.476 --> 00:06:07.636
button.

00:06:07.786 --> 00:06:09.636
A button takes some content and

00:06:09.636 --> 00:06:10.756
an action to execute when the

00:06:10.756 --> 00:06:11.646
user taps on it.

00:06:12.726 --> 00:06:13.906
In the action, we just toggle

00:06:13.906 --> 00:06:14.446
isPlaying.

00:06:15.086 --> 00:06:18.726
But if we go to build a run, we

00:06:18.726 --> 00:06:19.676
get a compiler error.

00:06:20.686 --> 00:06:21.876
But this is good because it's

00:06:21.876 --> 00:06:23.736
keeping us on the right path and

00:06:23.736 --> 00:06:24.766
through to one of the general

00:06:24.766 --> 00:06:25.726
principles of UI.

00:06:25.726 --> 00:06:27.906
We don't mutate the view

00:06:27.906 --> 00:06:28.366
hierarchy.

00:06:28.916 --> 00:06:31.606
Every time your UI is updated,

00:06:31.606 --> 00:06:33.536
it's because some view body is

00:06:33.536 --> 00:06:34.726
generating a different value.

00:06:34.726 --> 00:06:37.266
And in order to handle case like

00:06:37.306 --> 00:06:38.616
this, we have a tool that's

00:06:38.616 --> 00:06:38.976
called State.

00:06:42.146 --> 00:06:43.216
So let's have home state through

00:06:43.216 --> 00:06:43.676
this view.

00:06:44.256 --> 00:06:46.726
We can do that by using the

00:06:46.726 --> 00:06:48.226
state property wrapper on the

00:06:48.226 --> 00:06:49.106
isPlaying property.

00:06:49.716 --> 00:06:51.006
And by doing this, we are

00:06:51.006 --> 00:06:52.106
telling the system that

00:06:52.186 --> 00:06:53.566
isPlaying is a value that can

00:06:53.566 --> 00:06:55.286
change over time and that the

00:06:55.286 --> 00:06:56.656
PlayerView depends on it.

00:06:58.086 --> 00:06:59.716
Now if we build a run, we won't

00:06:59.716 --> 00:07:00.666
get a compiler error.

00:07:01.106 --> 00:07:02.146
And when the user taps on the

00:07:02.146 --> 00:07:05.196
button, the state value changes

00:07:05.786 --> 00:07:06.756
and the framework will generate

00:07:06.756 --> 00:07:07.846
a new body for this view.

00:07:08.776 --> 00:07:09.726
If you're not familiar with

00:07:09.966 --> 00:07:11.716
Property Wrapper, it's a

00:07:11.716 --> 00:07:13.196
powerful new feature in Swift

00:07:13.286 --> 00:07:14.026
5.1.

00:07:14.606 --> 00:07:17.136
But we're not going into much

00:07:17.136 --> 00:07:18.296
detail about how they work.

00:07:18.776 --> 00:07:19.826
And if you want to learn more,

00:07:20.026 --> 00:07:20.846
check out these two great

00:07:20.846 --> 00:07:21.366
session.

00:07:21.966 --> 00:07:24.796
For this talk, all you need to

00:07:24.796 --> 00:07:25.836
know is that when you add the

00:07:25.836 --> 00:07:27.196
Property Wrapper, you're

00:07:27.196 --> 00:07:28.596
wrapping this property and

00:07:28.596 --> 00:07:29.916
augment it with some additional

00:07:29.916 --> 00:07:31.716
behavior when it's read or

00:07:31.716 --> 00:07:32.146
written.

00:07:32.666 --> 00:07:35.036
And you might wonder, how does

00:07:35.036 --> 00:07:35.596
this work?

00:07:36.216 --> 00:07:38.076
What is this additional behavior

00:07:38.646 --> 00:07:40.626
with state?

00:07:40.836 --> 00:07:42.836
When you state the framework,

00:07:42.836 --> 00:07:44.206
allocate the persistent storage

00:07:44.206 --> 00:07:45.596
for the variable on the view we

00:07:45.596 --> 00:07:46.936
have and track it as a

00:07:46.936 --> 00:07:49.526
dependency because if the system

00:07:49.526 --> 00:07:51.936
is creating storage for you, you

00:07:51.936 --> 00:07:53.316
always have to specify an

00:07:53.316 --> 00:07:54.376
initial constant value.

00:07:54.926 --> 00:07:57.466
View can be recreated often by

00:07:57.466 --> 00:07:59.636
the system, but with state, the

00:07:59.636 --> 00:08:01.436
framework knows that it needs to

00:08:01.436 --> 00:08:03.016
persist the storage across

00:08:03.016 --> 00:08:04.436
multiple update of the same

00:08:04.436 --> 00:08:04.686
view.

00:08:05.166 --> 00:08:08.256
And it's a good practice to

00:08:08.256 --> 00:08:10.006
explicitly mark state property

00:08:10.006 --> 00:08:12.296
as private to really enforce the

00:08:12.296 --> 00:08:14.366
idea that state is owned and

00:08:14.366 --> 00:08:15.386
managed by that view

00:08:15.386 --> 00:08:16.076
specifically.

00:08:16.646 --> 00:08:19.106
But I want to take you behind

00:08:19.106 --> 00:08:20.766
the scene and show you what's

00:08:20.766 --> 00:08:21.556
happening when the user is

00:08:21.556 --> 00:08:21.976
tapping on the button.

00:08:25.346 --> 00:08:26.636
Let's start with view hierarchy

00:08:26.636 --> 00:08:27.276
we just showed.

00:08:28.466 --> 00:08:30.346
We just say that when-- that

00:08:30.346 --> 00:08:31.976
when we define some state, the

00:08:31.976 --> 00:08:33.086
framework is allocating

00:08:33.086 --> 00:08:34.256
persistent storage for you.

00:08:35.535 --> 00:08:36.736
One was the special property of

00:08:36.736 --> 00:08:38.376
state variable is that SwiftUI

00:08:38.376 --> 00:08:40.176
kind of start when they change.

00:08:40.176 --> 00:08:43.226
And because SwiftUI knows that

00:08:43.226 --> 00:08:44.466
the state variable was writing

00:08:44.466 --> 00:08:46.506
the body, it knows that the view

00:08:46.506 --> 00:08:47.646
rendering depend on that state

00:08:47.646 --> 00:08:47.976
variable.

00:08:50.586 --> 00:08:51.666
When the user interact with the

00:08:51.666 --> 00:08:53.786
button, the framework execute

00:08:53.786 --> 00:08:55.346
its action which in turn will

00:08:55.346 --> 00:08:56.236
meet at some state.

00:08:58.476 --> 00:09:00.196
The runtime the data-- the state

00:09:00.196 --> 00:09:01.386
does change and starting

00:09:01.386 --> 00:09:02.736
validating their view that owns

00:09:02.736 --> 00:09:05.636
the state, which mean it will

00:09:05.636 --> 00:09:07.166
recompute the body of that view

00:09:07.306 --> 00:09:08.396
and all of its children.

00:09:09.006 --> 00:09:12.056
In this sense, all the changes

00:09:12.056 --> 00:09:13.356
always flow down through your

00:09:13.356 --> 00:09:14.046
view hierarchy.

00:09:14.836 --> 00:09:16.486
And we're able to do these very

00:09:16.486 --> 00:09:17.716
efficiently because the

00:09:17.716 --> 00:09:19.366
framework is comparing the view

00:09:19.736 --> 00:09:21.316
and rendering again only what is

00:09:21.316 --> 00:09:21.766
changed.

00:09:22.346 --> 00:09:25.016
This is exactly what we

00:09:25.016 --> 00:09:26.306
mentioned earlier when we say

00:09:26.306 --> 00:09:27.596
that the framework manages the

00:09:27.596 --> 00:09:28.396
dependency for you.

00:09:30.116 --> 00:09:32.266
But we also talk about source of

00:09:32.266 --> 00:09:34.276
truth before and you should

00:09:34.276 --> 00:09:35.856
remember that every time you

00:09:35.856 --> 00:09:38.146
declare a state, you define a

00:09:38.146 --> 00:09:39.886
new source of truth that is

00:09:39.886 --> 00:09:40.746
owned by your view.

00:09:40.746 --> 00:09:43.406
And while this is so important

00:09:43.786 --> 00:09:45.106
that I'm showing to you in big

00:09:45.106 --> 00:09:47.576
letter, another important

00:09:47.576 --> 00:09:49.426
takeaway is that view are a

00:09:49.426 --> 00:09:50.896
function of state, not a

00:09:50.896 --> 00:09:53.446
sequence of event.

00:09:53.576 --> 00:09:55.496
Traditionally, you respond to

00:09:55.496 --> 00:09:57.296
some event by directly mutating

00:09:57.296 --> 00:09:58.016
your view hierarchy.

00:09:58.836 --> 00:09:59.966
For example, by adding or

00:09:59.966 --> 00:10:01.756
removing a subview or changing

00:10:01.756 --> 00:10:02.296
the alpha.

00:10:03.356 --> 00:10:05.806
Instead, in SwiftUI, you mutate

00:10:05.806 --> 00:10:08.056
some state and the state work as

00:10:08.056 --> 00:10:09.366
a source of truth from which you

00:10:09.366 --> 00:10:10.056
derive your view.

00:10:10.056 --> 00:10:12.536
This is where SwiftUI,

00:10:12.666 --> 00:10:15.096
declarative syntax shine.

00:10:15.566 --> 00:10:17.336
You describe your view given the

00:10:17.336 --> 00:10:18.076
current state.

00:10:18.076 --> 00:10:21.196
And this is also how SwiftUI

00:10:21.196 --> 00:10:22.786
helps you manage the complexity

00:10:22.786 --> 00:10:24.866
of UI development allowing you

00:10:24.866 --> 00:10:26.556
to write beautiful and correct

00:10:26.556 --> 00:10:26.966
interfaces.

00:10:30.656 --> 00:10:31.886
You can think of your app as a

00:10:31.886 --> 00:10:33.706
constant feedback loop between

00:10:33.706 --> 00:10:34.976
your user and the device.

00:10:37.666 --> 00:10:38.896
It all start with your user.

00:10:40.396 --> 00:10:42.246
The user interact with your app

00:10:42.246 --> 00:10:46.716
generating an action.

00:10:46.896 --> 00:10:48.056
The action is executed by the

00:10:48.056 --> 00:10:49.716
framework and mutate some state.

00:10:51.126 --> 00:10:52.346
The system detect that the state

00:10:52.346 --> 00:10:54.146
has changed and so it knows that

00:10:54.146 --> 00:10:55.676
it needs to update the view that

00:10:55.676 --> 00:10:57.426
depends on the state.

00:10:59.496 --> 00:11:01.436
This update will produce a new

00:11:01.436 --> 00:11:03.166
version of your UI that your

00:11:03.166 --> 00:11:05.216
user can interact with.

00:11:06.436 --> 00:11:09.016
This model where data always

00:11:09.016 --> 00:11:10.726
flow in a single direction,

00:11:11.116 --> 00:11:13.276
instead is your single final

00:11:13.276 --> 00:11:15.796
point for all the changes, make

00:11:15.796 --> 00:11:18.296
the view update predictable and

00:11:18.296 --> 00:11:19.356
simple to understand.

00:11:19.956 --> 00:11:22.026
And now that we understand

00:11:22.116 --> 00:11:23.826
state, I want to go back to the

00:11:23.826 --> 00:11:25.076
AppWare building and make some

00:11:25.076 --> 00:11:25.586
improvement.

00:11:26.126 --> 00:11:30.186
So the first thing I want to

00:11:30.186 --> 00:11:31.916
change is that whenever the user

00:11:31.986 --> 00:11:33.996
taps on Pause, the episode title

00:11:33.996 --> 00:11:34.946
should change to gray.

00:11:34.946 --> 00:11:37.326
And we already know how to do

00:11:37.326 --> 00:11:37.516
that.

00:11:38.236 --> 00:11:39.526
We can just use our isPlaying

00:11:39.526 --> 00:11:41.256
state and choose the right text

00:11:41.256 --> 00:11:41.586
color.

00:11:42.106 --> 00:11:45.086
Next, I love some good

00:11:45.086 --> 00:11:45.816
refactoring.

00:11:46.316 --> 00:11:47.866
And if you have seen the SwiftUI

00:11:47.866 --> 00:11:49.646
essential tool, you already know

00:11:49.646 --> 00:11:51.186
that view are a locust

00:11:51.186 --> 00:11:52.666
obstruction in SwiftUI.

00:11:53.726 --> 00:11:55.636
You shall not be afraid of

00:11:55.636 --> 00:11:56.886
grouping meaningful piece of

00:11:57.316 --> 00:11:59.336
data in your view into smaller

00:11:59.336 --> 00:12:00.886
and reusable component that can

00:12:00.886 --> 00:12:01.826
be composed together.

00:12:01.906 --> 00:12:03.856
And that's a good candidate

00:12:03.936 --> 00:12:04.196
here.

00:12:04.776 --> 00:12:07.386
That's a code for the Play and

00:12:07.386 --> 00:12:08.006
Pause button.

00:12:08.606 --> 00:12:10.976
So let's encapsulate this logic

00:12:10.976 --> 00:12:11.956
into its own view.

00:12:12.526 --> 00:12:13.906
And we can call this PlayButton.

00:12:15.246 --> 00:12:16.296
And now let's take a look at

00:12:16.296 --> 00:12:17.676
implementation of PlayButton.

00:12:17.816 --> 00:12:22.086
This is the same code as before

00:12:22.586 --> 00:12:23.856
just encapsulated into a new

00:12:23.856 --> 00:12:24.196
view.

00:12:25.046 --> 00:12:26.296
But notice that we made the new

00:12:26.296 --> 00:12:29.276
state here but state is not the

00:12:29.276 --> 00:12:29.776
right tool.

00:12:30.856 --> 00:12:32.806
By using state, we've created

00:12:32.806 --> 00:12:34.516
another source of truth for

00:12:34.516 --> 00:12:36.206
isPlaying, which we have to keep

00:12:36.206 --> 00:12:37.556
in sync with the state in the

00:12:37.556 --> 00:12:38.326
parent PlayerView.

00:12:38.326 --> 00:12:40.096
And that's not what we want.

00:12:40.746 --> 00:12:43.406
What we want is to make this a

00:12:43.406 --> 00:12:44.636
reusable component.

00:12:45.236 --> 00:12:46.396
So this view shall not own a

00:12:46.396 --> 00:12:48.956
source of truth, it just need to

00:12:48.956 --> 00:12:50.286
be able to read a value and

00:12:50.286 --> 00:12:50.896
mutate it.

00:12:52.006 --> 00:12:52.806
But it doesn't need to own

00:12:52.806 --> 00:12:53.206
state.

00:12:53.206 --> 00:12:55.476
And we have tools for this job.

00:12:55.816 --> 00:12:56.666
It's called binding.

00:12:56.666 --> 00:13:00.466
By using the Binding Property

00:13:00.506 --> 00:13:02.436
Wrapper, you define an explicit

00:13:02.436 --> 00:13:04.016
dependency to a source of truth

00:13:04.016 --> 00:13:05.316
without owning it.

00:13:06.656 --> 00:13:07.936
Additionally, you don't need to

00:13:07.936 --> 00:13:09.676
provide an initial value because

00:13:09.676 --> 00:13:11.026
the binding can be derived from

00:13:11.026 --> 00:13:11.566
a state.

00:13:12.886 --> 00:13:14.256
So let's see how does-- how this

00:13:14.256 --> 00:13:15.136
fits in our example.

00:13:15.746 --> 00:13:17.846
So the only change that we need

00:13:17.846 --> 00:13:19.616
to make is to use the binding

00:13:19.616 --> 00:13:21.126
property wrapper and omit the

00:13:21.126 --> 00:13:21.936
initial value.

00:13:22.256 --> 00:13:23.086
It's that simple.

00:13:23.706 --> 00:13:26.216
Let's now see how we can provide

00:13:26.216 --> 00:13:27.936
a binding into PlayButton by

00:13:27.936 --> 00:13:29.196
going back to our PlayerView.

00:13:31.756 --> 00:13:33.166
PlayerView is still holding the

00:13:33.166 --> 00:13:33.696
state.

00:13:33.906 --> 00:13:35.076
That's your source of truth.

00:13:35.686 --> 00:13:38.866
From the state, you can derive a

00:13:38.866 --> 00:13:40.296
binding by using the dollar

00:13:40.296 --> 00:13:41.826
prefix on the property name.

00:13:42.386 --> 00:13:44.936
This is your way to allow a

00:13:44.936 --> 00:13:47.106
component to access your state

00:13:47.496 --> 00:13:48.436
via binding.

00:13:49.056 --> 00:13:51.696
The dollar prefix is another

00:13:51.696 --> 00:13:53.206
feature of property wrapper.

00:13:53.416 --> 00:13:54.796
And if you want to learn more,

00:13:55.096 --> 00:13:56.476
please watch the modern Swift

00:13:56.476 --> 00:13:57.486
API design talk.

00:14:00.216 --> 00:14:01.466
I want for you to pause for a

00:14:01.466 --> 00:14:04.076
second and appreciate how simple

00:14:04.476 --> 00:14:05.456
but powerful this is.

00:14:06.536 --> 00:14:08.326
PlayButton does not contain a

00:14:08.326 --> 00:14:09.736
copy of the isPlaying value.

00:14:10.826 --> 00:14:12.046
Just as a reference to it

00:14:12.276 --> 00:14:14.046
through the binding, so there is

00:14:14.046 --> 00:14:16.186
no need to keep this data in

00:14:16.186 --> 00:14:17.976
sync between your view.

00:14:20.046 --> 00:14:21.696
And I want to contrast this with

00:14:21.696 --> 00:14:23.066
what we have to write today in

00:14:23.066 --> 00:14:23.976
UI kit, graph kit.

00:14:26.256 --> 00:14:28.376
You have a view controller that

00:14:28.376 --> 00:14:30.276
owns multiple view that need to

00:14:30.276 --> 00:14:32.256
respond to user interaction by

00:14:32.256 --> 00:14:34.106
manually setting up target

00:14:34.106 --> 00:14:35.876
action or defining a delegate.

00:14:36.946 --> 00:14:38.366
You have to observe the model

00:14:38.366 --> 00:14:39.996
change and respond to those

00:14:39.996 --> 00:14:40.486
event too.

00:14:41.626 --> 00:14:43.536
Every time any value changes,

00:14:43.826 --> 00:14:45.466
you have to read the value and

00:14:45.466 --> 00:14:46.796
set it everywhere it's needed.

00:14:47.416 --> 00:14:50.246
As soon as the complexity of

00:14:50.276 --> 00:14:52.596
your app grows welling up with a

00:14:52.596 --> 00:14:55.216
massive problem and I'm sure all

00:14:55.216 --> 00:14:56.606
of you know what I'm talking

00:14:56.606 --> 00:14:57.266
about here.

00:14:58.086 --> 00:14:59.396
The whole purpose of

00:14:59.396 --> 00:15:01.376
ViewController is to keep your

00:15:01.376 --> 00:15:02.866
data in sync with your view.

00:15:03.746 --> 00:15:05.436
This is all complexity that I--

00:15:05.816 --> 00:15:08.106
you have to manage, but not in

00:15:08.106 --> 00:15:08.796
SwiftUI.

00:15:09.476 --> 00:15:12.496
You have a simple tool to define

00:15:12.496 --> 00:15:14.186
your data dependency and the

00:15:14.186 --> 00:15:15.816
framework takes care of all the

00:15:15.816 --> 00:15:16.146
rest.

00:15:16.846 --> 00:15:18.186
And well, you don't need a

00:15:18.186 --> 00:15:19.146
ViewController anymore.

00:15:20.516 --> 00:15:27.806
[ Applause and Cheering ]

00:15:28.306 --> 00:15:30.396
This idea is so powerful.

00:15:30.496 --> 00:15:32.276
This is applied throughout our

00:15:32.276 --> 00:15:32.906
framework.

00:15:35.806 --> 00:15:37.046
If you take a look at the API

00:15:37.046 --> 00:15:38.376
for component like Toggle,

00:15:38.686 --> 00:15:40.946
TextField and Slider, they all

00:15:40.946 --> 00:15:42.056
expect a binding.

00:15:42.906 --> 00:15:44.736
The framework keeps you in

00:15:44.736 --> 00:15:46.116
control of where the source of

00:15:46.116 --> 00:15:46.756
truth live.

00:15:46.756 --> 00:15:51.056
You create the data and give

00:15:51.056 --> 00:15:52.106
that to the component, a

00:15:52.106 --> 00:15:53.906
reference to it without ever

00:15:53.906 --> 00:15:55.976
duplicating that information or

00:15:55.976 --> 00:15:57.306
manually keep that in sync.

00:15:57.306 --> 00:15:58.846
And that's pretty amazing.

00:16:00.096 --> 00:16:02.256
In SwiftUI views are so many app

00:16:02.706 --> 00:16:03.886
that can views for layout,

00:16:04.376 --> 00:16:06.626
navigation, and much more.

00:16:07.176 --> 00:16:09.106
And in fact they are your single

00:16:09.246 --> 00:16:10.296
composition primitive.

00:16:11.016 --> 00:16:12.516
They're also a great tool for

00:16:12.516 --> 00:16:14.226
encapsulating presentation logic

00:16:14.456 --> 00:16:15.686
for a single piece of data.

00:16:16.866 --> 00:16:18.306
The frameworks allows you and

00:16:18.306 --> 00:16:20.296
encourage you to create small

00:16:20.296 --> 00:16:22.436
view to represent a single piece

00:16:22.436 --> 00:16:24.116
of data that can be composed

00:16:24.116 --> 00:16:24.596
together.

00:16:25.856 --> 00:16:27.036
And this is, again, the

00:16:27.036 --> 00:16:28.726
framework guiding you to our

00:16:29.166 --> 00:16:31.006
composition of small unit that

00:16:31.006 --> 00:16:31.906
you can reason about.

00:16:31.906 --> 00:16:34.946
So let's go back to our example

00:16:35.696 --> 00:16:35.766
now.

00:16:38.046 --> 00:16:39.056
I've shown this UI to my

00:16:39.056 --> 00:16:40.776
designer and she's very

00:16:40.776 --> 00:16:42.156
impressed by how little code I

00:16:42.156 --> 00:16:42.836
had to write.

00:16:44.256 --> 00:16:45.156
But she suggested some

00:16:45.156 --> 00:16:45.806
improvement.

00:16:47.066 --> 00:16:48.386
We should animate the transition

00:16:48.386 --> 00:16:49.416
within Play and Pause.

00:16:50.746 --> 00:16:52.606
Fortunately, it's very easy for

00:16:52.606 --> 00:16:54.926
me to make my designer because

00:16:54.926 --> 00:16:56.536
the framework keeps track of

00:16:56.536 --> 00:16:57.736
everything that has changed.

00:16:58.006 --> 00:16:59.426
It's incredibly easy and

00:16:59.426 --> 00:17:01.776
powerful to drive an animation

00:17:01.906 --> 00:17:03.026
with state.

00:17:05.336 --> 00:17:06.976
By wrapping the mutation to the

00:17:06.976 --> 00:17:08.646
binding with an animation block,

00:17:09.165 --> 00:17:10.646
the framework will animate the

00:17:10.646 --> 00:17:12.356
transition when the value

00:17:12.356 --> 00:17:12.906
changes.

00:17:13.526 --> 00:17:15.056
And you will always get the

00:17:15.056 --> 00:17:16.886
correct animation to the final

00:17:16.886 --> 00:17:17.415
state.

00:17:18.965 --> 00:17:20.656
If you want to learn more about

00:17:20.656 --> 00:17:22.746
SwiftUI powerful animation and

00:17:22.746 --> 00:17:24.896
layout system and how to make

00:17:24.896 --> 00:17:26.715
amazing app, I invite you to

00:17:26.715 --> 00:17:28.906
watch Building Custom View in

00:17:28.906 --> 00:17:29.616
SwiftUI.

00:17:30.166 --> 00:17:32.496
We've now seen state and

00:17:32.496 --> 00:17:35.386
binding, but SwiftUI has quite

00:17:35.386 --> 00:17:36.716
few more trick up its sleeve.

00:17:37.136 --> 00:17:38.586
And to show you more, I want to

00:17:38.586 --> 00:17:39.826
invite Raj on stage.

00:17:40.276 --> 00:17:40.596
Raj?

00:17:41.516 --> 00:17:47.500
[ Applause ]

00:17:50.316 --> 00:17:51.026
>> Thanks, Luca.

00:17:51.026 --> 00:17:53.846
I'm going to walk you through a

00:17:53.846 --> 00:17:55.466
few of the other tools we have

00:17:56.056 --> 00:17:57.706
from managing data in SwiftUI.

00:17:58.816 --> 00:18:00.376
And by the end of this session,

00:18:00.796 --> 00:18:02.306
you'll be able to design and

00:18:02.306 --> 00:18:05.246
build robust reusable components

00:18:05.336 --> 00:18:08.086
that operate on all kinds of

00:18:09.576 --> 00:18:09.716
data.

00:18:09.866 --> 00:18:11.556
As you saw earlier, we have a

00:18:11.556 --> 00:18:13.986
number of powerful tools for

00:18:13.986 --> 00:18:15.166
managing data in SwiftUI.

00:18:15.956 --> 00:18:17.776
And Luca already covered a few

00:18:17.776 --> 00:18:19.896
of them such as using state,

00:18:20.666 --> 00:18:22.536
binding, or even just using a

00:18:22.536 --> 00:18:23.346
Swift property.

00:18:23.346 --> 00:18:25.816
I'm going to take you through

00:18:25.816 --> 00:18:27.446
the rest of these exciting tools

00:18:28.146 --> 00:18:30.036
starting with external changes

00:18:30.036 --> 00:18:30.546
in SwiftUI.

00:18:30.546 --> 00:18:33.496
So I want to bring back the

00:18:33.496 --> 00:18:34.886
diagram that Luca just showed

00:18:34.886 --> 00:18:35.096
you.

00:18:36.206 --> 00:18:38.266
And in this diagram, the user

00:18:38.376 --> 00:18:39.886
interacted with the application.

00:18:40.766 --> 00:18:42.616
This created an action which

00:18:42.616 --> 00:18:44.176
resulted in a mutation to some

00:18:44.176 --> 00:18:48.346
state and that was driven into a

00:18:48.346 --> 00:18:49.946
new copy of the view that was

00:18:49.946 --> 00:18:50.936
rendered to the user.

00:18:52.436 --> 00:18:55.506
Well, some events are initiated

00:18:55.506 --> 00:18:58.576
externally such as a timer or

00:18:58.576 --> 00:18:59.296
notification.

00:19:00.756 --> 00:19:03.016
But remember, in SwiftUI, your

00:19:03.016 --> 00:19:04.536
views are a function of some

00:19:04.536 --> 00:19:04.896
state.

00:19:06.296 --> 00:19:07.926
There's a single funnel point

00:19:08.106 --> 00:19:09.366
for all of your changes.

00:19:10.866 --> 00:19:12.666
And what this means is that

00:19:12.666 --> 00:19:14.706
SwiftUI reacts to these external

00:19:14.706 --> 00:19:17.106
changes the same way it does to

00:19:17.146 --> 00:19:17.976
user interaction.

00:19:20.556 --> 00:19:22.846
So when a timer fires or a

00:19:22.846 --> 00:19:24.906
notification is received, the

00:19:24.906 --> 00:19:26.626
process looks pretty much the

00:19:26.626 --> 00:19:26.926
same.

00:19:27.876 --> 00:19:30.126
We create an action, perform a

00:19:30.126 --> 00:19:33.226
mutation on some state, we get a

00:19:33.226 --> 00:19:35.486
new copy of the view and that's

00:19:35.526 --> 00:19:36.606
rerendered to the user.

00:19:37.196 --> 00:19:40.276
And in SwiftUI, we have a single

00:19:40.276 --> 00:19:41.766
abstraction for representing

00:19:41.766 --> 00:19:42.916
these external events.

00:19:44.046 --> 00:19:45.006
And it's called a Publisher.

00:19:45.596 --> 00:19:48.876
The publisher comes from the new

00:19:48.876 --> 00:19:49.926
combined framework.

00:19:50.876 --> 00:19:53.456
Combine is a unified declarative

00:19:53.456 --> 00:19:55.846
API for processing values over

00:19:55.846 --> 00:19:56.186
time.

00:19:57.506 --> 00:19:58.646
Now, we're not going to go into

00:19:58.646 --> 00:20:00.106
the details of Combine today,

00:20:00.326 --> 00:20:01.966
but you should definitely check

00:20:01.966 --> 00:20:03.416
out these related sessions where

00:20:03.416 --> 00:20:04.876
you can find out much more.

00:20:06.486 --> 00:20:08.156
For our purpose, there is one

00:20:08.156 --> 00:20:09.706
thing to remember when using

00:20:09.706 --> 00:20:11.316
these publishers with SwiftUI,

00:20:12.186 --> 00:20:13.326
they should omit on the main

00:20:13.326 --> 00:20:13.606
thread.

00:20:14.576 --> 00:20:16.606
Combine provides an easy to use

00:20:16.606 --> 00:20:18.776
operator called Receive On for

00:20:18.776 --> 00:20:19.136
this.

00:20:19.746 --> 00:20:21.366
For more information, you can

00:20:21.366 --> 00:20:22.706
check out the Combine and

00:20:22.706 --> 00:20:25.666
Practice session.

00:20:25.816 --> 00:20:28.346
OK. Let's walk through this with

00:20:28.346 --> 00:20:28.866
an example.

00:20:29.996 --> 00:20:32.566
Now, our users can sometimes get

00:20:32.566 --> 00:20:35.026
lost listening to podcasts and

00:20:35.236 --> 00:20:36.676
they can get tired of hearing

00:20:36.676 --> 00:20:38.966
about the same millennial ramble

00:20:38.966 --> 00:20:40.986
on about avocado toast for hours

00:20:40.986 --> 00:20:41.366
on end.

00:20:42.576 --> 00:20:44.976
So, we're going to add a time

00:20:44.976 --> 00:20:46.856
stamp to our podcast player so

00:20:46.856 --> 00:20:48.356
they know exactly where they are

00:20:48.356 --> 00:20:48.986
in the episode.

00:20:50.696 --> 00:20:53.596
To do that, we'll add some state

00:20:53.886 --> 00:20:55.236
representing the current time

00:20:56.116 --> 00:20:58.966
and a text that draws that

00:21:00.306 --> 00:21:00.486
value.

00:21:00.636 --> 00:21:03.706
Next, we'll use the onReceive

00:21:03.706 --> 00:21:04.366
modifier.

00:21:05.296 --> 00:21:06.906
Conveniently, I already built a

00:21:06.906 --> 00:21:09.246
publisher that fires when the

00:21:09.246 --> 00:21:10.346
current time changes.

00:21:11.256 --> 00:21:12.746
And I'll use that publisher by

00:21:12.746 --> 00:21:14.356
passing it into this onReceive

00:21:14.356 --> 00:21:14.936
modifier.

00:21:15.776 --> 00:21:17.836
Additionally, I'll also provide

00:21:17.836 --> 00:21:20.216
a closure that will execute when

00:21:20.216 --> 00:21:21.306
the publisher omits.

00:21:22.596 --> 00:21:24.686
And that's it.

00:21:24.686 --> 00:21:26.416
In doing this, we've described a

00:21:26.416 --> 00:21:27.806
dependency to SwiftUI.

00:21:28.966 --> 00:21:30.996
So now, when the currentTime

00:21:30.996 --> 00:21:33.226
updates, we'll update our state

00:21:34.016 --> 00:21:35.876
and SwiftUI knows that there's a

00:21:35.876 --> 00:21:36.666
dependency there.

00:21:37.136 --> 00:21:38.556
So we'll update the label

00:21:38.636 --> 00:21:39.466
automatically.

00:21:40.056 --> 00:21:42.236
There's no manual invalidation

00:21:42.316 --> 00:21:43.186
or management here.

00:21:44.516 --> 00:21:50.516
[ Applause ]

00:21:51.016 --> 00:21:52.706
So we briefly covered external

00:21:52.706 --> 00:21:53.796
changes in SwiftUI.

00:21:55.006 --> 00:21:56.386
Next, I want to talk to you

00:21:56.386 --> 00:21:57.506
about external data.

00:22:00.416 --> 00:22:01.856
For that, we have the

00:22:01.936 --> 00:22:03.196
BindableObject Protocol.

00:22:04.566 --> 00:22:06.406
BindableObject is a convenient

00:22:06.406 --> 00:22:08.516
way to use the well encapsulated

00:22:08.856 --> 00:22:10.706
tried and true model that you

00:22:10.766 --> 00:22:11.486
already have.

00:22:13.106 --> 00:22:14.966
It's great for teaching SwiftUI

00:22:15.456 --> 00:22:17.146
about the reference type model

00:22:17.146 --> 00:22:17.936
you've already built.

00:22:19.326 --> 00:22:21.656
This is data that you own and

00:22:21.736 --> 00:22:22.146
manage.

00:22:23.106 --> 00:22:25.436
SwiftUI just needs to know how

00:22:25.436 --> 00:22:27.586
to react to changes in that

00:22:28.776 --> 00:22:28.916
data.

00:22:29.096 --> 00:22:30.876
So let's use another example.

00:22:32.116 --> 00:22:34.376
Our users expect that their

00:22:34.376 --> 00:22:36.366
podcasts sync across all of

00:22:36.366 --> 00:22:38.016
their devices and I've been

00:22:38.016 --> 00:22:39.046
tasked with adding this

00:22:39.046 --> 00:22:39.666
functionality.

00:22:39.666 --> 00:22:41.696
So I've already gotten started

00:22:41.846 --> 00:22:44.116
and I've built up a model and

00:22:44.116 --> 00:22:45.476
now it's time to use the model

00:22:45.476 --> 00:22:47.246
that I've built in our view

00:22:47.246 --> 00:22:48.636
hierarchy and bring it into our

00:22:48.636 --> 00:22:49.356
podcast player.

00:22:50.306 --> 00:22:51.476
Let me show you how easy that

00:22:52.116 --> 00:22:52.206
is.

00:22:53.066 --> 00:22:54.776
You could see here a sketch of

00:22:54.776 --> 00:22:57.426
the model that we built.

00:22:57.616 --> 00:22:59.406
All I need to do to use this

00:22:59.406 --> 00:23:01.936
model with SwiftUI is to conform

00:23:01.976 --> 00:23:04.146
it to the BindableObject

00:23:04.196 --> 00:23:04.726
Protocol.

00:23:10.056 --> 00:23:12.556
With BindableObject, all we need

00:23:12.556 --> 00:23:13.956
to provide is a publisher.

00:23:14.856 --> 00:23:17.096
This publisher represents

00:23:17.096 --> 00:23:18.386
changes to our data.

00:23:19.196 --> 00:23:20.696
And remember, the combined

00:23:20.696 --> 00:23:22.516
publisher is our single

00:23:22.516 --> 00:23:23.886
abstraction for representing

00:23:23.886 --> 00:23:25.756
external changes to SwiftUI.

00:23:26.716 --> 00:23:28.186
So here, we'll provide a

00:23:28.186 --> 00:23:29.516
publisher in the didChange

00:23:29.516 --> 00:23:29.956
property.

00:23:30.516 --> 00:23:31.906
PassthroughSubject is a

00:23:31.906 --> 00:23:32.446
publisher.

00:23:33.016 --> 00:23:35.966
And then SwiftUI will subscribe

00:23:36.226 --> 00:23:37.786
to this publisher, so it knows

00:23:37.786 --> 00:23:39.166
when to update our view

00:23:39.166 --> 00:23:39.636
hierarchy.

00:23:40.186 --> 00:23:43.076
Then in the advanced method,

00:23:44.246 --> 00:23:46.796
when we mutate our model, we'll

00:23:46.796 --> 00:23:48.126
simply call send on the

00:23:48.126 --> 00:23:48.666
publisher.

00:23:50.086 --> 00:23:52.326
Now, note that for correctness,

00:23:52.676 --> 00:23:54.326
we need to do this any time our

00:23:54.326 --> 00:23:55.766
model changes so that our view

00:23:55.766 --> 00:23:56.986
hierarchy can stay up to date.

00:23:57.826 --> 00:23:59.636
But thankfully, SwiftUI has our

00:23:59.636 --> 00:24:00.286
back.

00:24:00.286 --> 00:24:01.336
It handles these updates

00:24:01.436 --> 00:24:03.936
gracefully, so you get great

00:24:04.106 --> 00:24:05.806
performance and correctness.

00:24:07.496 --> 00:24:09.346
So now we've built our model and

00:24:09.346 --> 00:24:10.886
its conformance to the

00:24:10.886 --> 00:24:12.146
BindableObject Protocol.

00:24:13.326 --> 00:24:14.796
Next, I want to show you how to

00:24:14.796 --> 00:24:15.906
use that model in the view

00:24:15.906 --> 00:24:16.386
hierarchy.

00:24:17.466 --> 00:24:19.096
Remember the two principles from

00:24:19.096 --> 00:24:19.466
earlier.

00:24:20.026 --> 00:24:21.546
Every piece of data has a source

00:24:21.546 --> 00:24:23.916
of truth and when you access

00:24:23.956 --> 00:24:25.196
that data, you create a

00:24:25.196 --> 00:24:25.986
dependency on it.

00:24:26.626 --> 00:24:28.306
So we've created our source of

00:24:28.306 --> 00:24:29.866
truth but we don't have a

00:24:29.866 --> 00:24:30.676
dependency yet.

00:24:31.636 --> 00:24:33.066
Fortunately, it's really easy to

00:24:33.066 --> 00:24:35.126
create dependencies on your

00:24:35.126 --> 00:24:36.006
bindable objects.

00:24:36.576 --> 00:24:40.826
I brought up this very basic

00:24:40.826 --> 00:24:41.526
diagram here.

00:24:41.856 --> 00:24:43.576
You can see we have our view

00:24:43.576 --> 00:24:45.486
hierarchy in blue on the right

00:24:46.106 --> 00:24:47.466
and we have our model in green

00:24:47.466 --> 00:24:47.906
on the left.

00:24:49.456 --> 00:24:51.076
Now, we can connect the two

00:24:51.126 --> 00:24:53.276
creating a dependency using the

00:24:53.326 --> 00:24:55.236
ObjectBinding property wrapper.

00:24:56.756 --> 00:24:58.986
And as we do this, each view

00:24:58.986 --> 00:25:00.506
that has that property wrapper

00:25:00.716 --> 00:25:02.506
will depend on the model that we

00:25:02.506 --> 00:25:03.216
wrote earlier.

00:25:05.296 --> 00:25:07.866
Just like with state, when you

00:25:07.866 --> 00:25:09.526
use the ObjectBinding property

00:25:09.526 --> 00:25:10.916
wrapper and add that to your

00:25:10.916 --> 00:25:13.296
view, the framework recognizes

00:25:13.296 --> 00:25:14.546
that there's a dependency there.

00:25:14.916 --> 00:25:16.786
And so in body, when you access

00:25:16.786 --> 00:25:18.756
that data, we automatically

00:25:18.836 --> 00:25:21.026
figure out when to update your

00:25:21.026 --> 00:25:21.336
view.

00:25:21.896 --> 00:25:24.716
In code, this looks something

00:25:25.786 --> 00:25:27.236
like this.

00:25:27.446 --> 00:25:28.936
When you create your view, you

00:25:28.936 --> 00:25:30.486
add the ObjectBinding property

00:25:30.486 --> 00:25:32.276
wrapper to a property in your

00:25:32.276 --> 00:25:32.526
view.

00:25:33.076 --> 00:25:36.006
And then when you instantiate

00:25:36.006 --> 00:25:38.446
your view, you just pass the

00:25:38.446 --> 00:25:39.966
reference to your model that you

00:25:39.966 --> 00:25:40.576
already have.

00:25:41.306 --> 00:25:43.996
Note that this creates an

00:25:43.996 --> 00:25:45.716
explicit dependency in the

00:25:45.716 --> 00:25:47.436
initializer of the view, which

00:25:47.436 --> 00:25:48.976
is really great because now

00:25:49.016 --> 00:25:50.666
anytime I go to instantiate my

00:25:50.666 --> 00:25:52.246
view, I know that it has a

00:25:52.246 --> 00:25:53.946
dependency on the model.

00:25:58.076 --> 00:25:58.936
And that's it.

00:26:00.336 --> 00:26:02.676
And as we do this, each view

00:26:02.676 --> 00:26:04.026
with the property wrapper will

00:26:04.146 --> 00:26:05.806
automatically subscribe the

00:26:05.806 --> 00:26:07.596
changes in our BindableObject,

00:26:08.566 --> 00:26:09.936
which means we get automatic

00:26:09.936 --> 00:26:10.806
dependency tracking.

00:26:11.156 --> 00:26:13.596
Again, no manual invalidation or

00:26:13.596 --> 00:26:15.346
synchronization needed.

00:26:16.516 --> 00:26:22.736
[ Applause ]

00:26:23.236 --> 00:26:24.416
So I want to pause and take

00:26:24.456 --> 00:26:26.756
careful note here because if

00:26:26.756 --> 00:26:28.826
using SwiftUI are value types,

00:26:29.376 --> 00:26:30.536
any time you're using a

00:26:30.536 --> 00:26:32.026
reference type, you should be

00:26:32.026 --> 00:26:33.686
using the ObjectBinding property

00:26:33.686 --> 00:26:34.066
wrapper.

00:26:34.736 --> 00:26:36.486
This way the framework will know

00:26:36.536 --> 00:26:38.276
when that data changes and can

00:26:38.376 --> 00:26:39.826
keep your view hierarchy up to

00:26:39.826 --> 00:26:40.106
date.

00:26:40.646 --> 00:26:43.166
So that's how to create a

00:26:43.166 --> 00:26:45.176
dependency using ObjectBinding

00:26:45.426 --> 00:26:46.486
on BindableObject.

00:26:47.446 --> 00:26:48.976
But we actually have another

00:26:48.976 --> 00:26:49.966
tool for creating these

00:26:49.966 --> 00:26:51.106
dependencies as well.

00:26:52.566 --> 00:26:54.066
You can create indirect

00:26:54.066 --> 00:26:54.726
dependencies.

00:26:56.156 --> 00:26:57.756
So I brought back a similar

00:26:57.756 --> 00:26:58.976
diagram to the one that you just

00:26:58.976 --> 00:27:01.266
saw, but this time our view has

00:27:01.266 --> 00:27:02.146
gained some children.

00:27:02.656 --> 00:27:06.396
Next, I want to bring in the

00:27:06.396 --> 00:27:06.946
environment.

00:27:08.066 --> 00:27:09.586
If you've watched the SwiftUI

00:27:09.636 --> 00:27:11.636
Essentials talk, you know that

00:27:11.636 --> 00:27:12.936
the environment is a really

00:27:12.936 --> 00:27:15.316
great encapsulation for pushing

00:27:15.316 --> 00:27:16.636
data down through your view

00:27:16.636 --> 00:27:17.046
hierarchy.

00:27:18.196 --> 00:27:19.936
And using the environment object

00:27:19.936 --> 00:27:22.766
modifier, we can actually write

00:27:22.766 --> 00:27:26.196
our BindableObject into the

00:27:27.776 --> 00:27:28.116
environment.

00:27:28.116 --> 00:27:29.686
Now, our model is in the

00:27:29.686 --> 00:27:30.166
environment.

00:27:30.836 --> 00:27:34.276
We can create dependencies on

00:27:34.276 --> 00:27:35.736
our model by using the

00:27:35.736 --> 00:27:37.396
EnvironmentObject property

00:27:39.936 --> 00:27:40.096
wrapper.

00:27:40.266 --> 00:27:41.706
Now, by using this property

00:27:41.706 --> 00:27:43.086
wrapper, we can create a

00:27:43.086 --> 00:27:44.426
dependency on that model.

00:27:46.976 --> 00:27:48.376
But there's more.

00:27:49.156 --> 00:27:50.526
You can actually use this in

00:27:50.526 --> 00:27:51.776
multiple places.

00:27:52.756 --> 00:27:55.376
So you can use this in a variety

00:27:55.376 --> 00:27:56.406
of views throughout your

00:27:56.406 --> 00:27:57.896
hierarchy and they will all

00:27:57.896 --> 00:27:59.506
depend on the same model.

00:28:00.106 --> 00:28:03.166
And, of course, when that data

00:28:03.166 --> 00:28:05.706
changes, everything will get

00:28:05.706 --> 00:28:07.206
updated automatically.

00:28:08.586 --> 00:28:09.906
You get the same automatic

00:28:09.906 --> 00:28:11.636
dependency tracking as you do

00:28:11.636 --> 00:28:12.546
with ObjectBinding.

00:28:13.066 --> 00:28:15.676
You describe the dependency to

00:28:15.676 --> 00:28:18.186
SwiftUI by using these tools and

00:28:18.186 --> 00:28:19.516
the framework handles the rest.

00:28:20.056 --> 00:28:20.596
It's pretty great.

00:28:21.516 --> 00:28:27.036
[ Applause ]

00:28:27.536 --> 00:28:29.066
So let's update our podcast

00:28:29.066 --> 00:28:29.906
player to take advantage of

00:28:29.906 --> 00:28:30.156
this.

00:28:31.306 --> 00:28:33.796
To do that, this is it.

00:28:34.656 --> 00:28:35.766
You just need to add the

00:28:35.766 --> 00:28:37.086
EnvironmentObject property

00:28:37.086 --> 00:28:40.126
wrapper to the view and then in

00:28:40.126 --> 00:28:41.486
an ancestor higher up in the

00:28:41.486 --> 00:28:43.366
hierarchy just provide the model

00:28:43.366 --> 00:28:44.596
using the EnvironmentObject

00:28:44.596 --> 00:28:45.106
modifier.

00:28:46.426 --> 00:28:48.466
Now, whenever we use our player

00:28:48.466 --> 00:28:50.426
in the body, SwiftUI will

00:28:50.526 --> 00:28:52.296
automatically update our view on

00:28:52.296 --> 00:28:53.346
our behalf.

00:28:53.976 --> 00:28:55.346
So you're probably wondering

00:28:56.026 --> 00:28:56.866
when would I use

00:28:56.866 --> 00:28:58.836
EnvironmentObject versus

00:28:58.836 --> 00:28:59.566
ObjectBinding?

00:29:00.556 --> 00:29:02.966
Well, you can actually build

00:29:02.966 --> 00:29:04.246
your whole app with

00:29:04.246 --> 00:29:06.796
ObjectBinding, but it can get

00:29:06.796 --> 00:29:08.006
kind of cumbersome to pass

00:29:08.006 --> 00:29:09.406
around the model from hop to

00:29:09.406 --> 00:29:10.006
hop.

00:29:11.286 --> 00:29:11.846
And that's where

00:29:11.846 --> 00:29:13.126
EnvironmentObject comes in.

00:29:14.136 --> 00:29:16.366
It's a really useful convenience

00:29:16.696 --> 00:29:18.446
for passing data around your

00:29:18.446 --> 00:29:19.866
hierarchy indirectly.

00:29:21.316 --> 00:29:23.626
Here, you can see by using

00:29:23.626 --> 00:29:25.686
EnvironmentObject, we can pass

00:29:25.686 --> 00:29:27.156
the model indirectly through our

00:29:27.156 --> 00:29:29.026
view hierarchy, which means we

00:29:29.026 --> 00:29:30.566
don't have to instantiate all

00:29:30.566 --> 00:29:32.006
the intermediate views to the

00:29:32.006 --> 00:29:33.846
hierarchy with the model.

00:29:37.816 --> 00:29:39.616
So the environment is actually a

00:29:39.616 --> 00:29:41.186
great way to pass all sorts of

00:29:41.186 --> 00:29:42.876
data indirectly down through

00:29:42.876 --> 00:29:43.626
your view hierarchy.

00:29:44.366 --> 00:29:46.126
And you might have seen its use

00:29:46.396 --> 00:29:48.956
for things such as accent color

00:29:48.956 --> 00:29:51.066
or layout direction and even

00:29:51.066 --> 00:29:51.356
more.

00:29:52.446 --> 00:29:55.036
And as Luca said earlier, data

00:29:55.036 --> 00:29:56.726
comes in all sorts of shapes and

00:29:56.726 --> 00:29:57.106
forms.

00:29:58.276 --> 00:30:00.616
Well, values like accent color

00:30:00.726 --> 00:30:02.746
and layout direction, those are

00:30:02.746 --> 00:30:03.226
just data.

00:30:04.276 --> 00:30:06.006
And when you use them in your

00:30:06.006 --> 00:30:07.506
views, you're creating a

00:30:07.506 --> 00:30:08.406
dependency on them.

00:30:09.726 --> 00:30:11.906
In fact, the environment is a

00:30:12.016 --> 00:30:13.416
general purpose container for

00:30:13.416 --> 00:30:15.186
handling all sorts of indirect

00:30:15.256 --> 00:30:16.376
data and dependencies.

00:30:16.776 --> 00:30:17.956
And the framework uses it

00:30:17.956 --> 00:30:20.066
liberally to give you rich

00:30:20.066 --> 00:30:22.606
features like Dynamic Type and

00:30:22.606 --> 00:30:23.176
Dark Mode.

00:30:24.156 --> 00:30:25.566
You can also use the environment

00:30:25.686 --> 00:30:27.546
in previews to provide new

00:30:27.546 --> 00:30:29.066
values for things like the

00:30:29.066 --> 00:30:31.486
accent color or theme.

00:30:35.756 --> 00:30:37.406
So that's a quick tour through

00:30:37.406 --> 00:30:39.646
the powerful tools we have in

00:30:39.646 --> 00:30:41.226
SwiftUI for handling data.

00:30:42.466 --> 00:30:43.916
Next, I want to help you build

00:30:43.916 --> 00:30:46.496
some intuition for how to use

00:30:46.496 --> 00:30:48.276
the right tool and how they all

00:30:48.276 --> 00:30:48.836
fit together.

00:30:49.386 --> 00:30:53.276
One of the big themes here is

00:30:53.526 --> 00:30:55.446
that every piece of data has a

00:30:55.446 --> 00:30:57.006
single source of truth.

00:30:57.646 --> 00:30:59.516
And in SwiftUI, we really have

00:30:59.606 --> 00:31:01.746
two options for managing these

00:31:01.746 --> 00:31:03.936
sources of truth.

00:31:04.126 --> 00:31:05.586
First, we have state.

00:31:06.606 --> 00:31:08.236
State is great for data that's

00:31:08.386 --> 00:31:10.766
view local, a value type,

00:31:11.766 --> 00:31:14.506
managed, allocated and created

00:31:14.506 --> 00:31:15.106
by the framework.

00:31:15.776 --> 00:31:19.836
And BindableObject is great for

00:31:19.836 --> 00:31:20.916
data that you control.

00:31:22.286 --> 00:31:23.396
It's great for representing

00:31:23.526 --> 00:31:25.746
external data to SwiftUI such as

00:31:25.746 --> 00:31:29.576
in onDevice database, this is

00:31:29.786 --> 00:31:32.756
storage that you manage, which

00:31:32.756 --> 00:31:34.306
makes it great for the model

00:31:34.306 --> 00:31:35.296
that you already have.

00:31:35.926 --> 00:31:38.756
So now that we've talked about

00:31:38.756 --> 00:31:40.866
sources of truth, I want to talk

00:31:40.866 --> 00:31:42.306
a little bit about building

00:31:42.306 --> 00:31:43.486
reusable components.

00:31:44.056 --> 00:31:46.456
One of the things that's great

00:31:46.456 --> 00:31:48.866
about SwiftUI is that views are

00:31:48.866 --> 00:31:49.976
low cost obstruction.

00:31:49.976 --> 00:31:52.786
And what that means is that you

00:31:52.946 --> 00:31:54.466
don't have to make the tradeoff

00:31:54.756 --> 00:31:56.756
between great architecture and

00:31:56.756 --> 00:31:57.576
performance.

00:31:58.246 --> 00:31:59.566
You can build the architecture

00:31:59.566 --> 00:32:00.996
you've always wanted to build

00:32:01.206 --> 00:32:02.856
and you can also get great

00:32:02.856 --> 00:32:03.466
performance.

00:32:03.626 --> 00:32:04.566
You don't have to make the

00:32:04.566 --> 00:32:05.666
straight off.

00:32:06.826 --> 00:32:09.316
And with SwiftUI, you can focus

00:32:09.436 --> 00:32:10.786
on making your views into

00:32:10.786 --> 00:32:11.906
reusable components.

00:32:12.446 --> 00:32:14.606
When you do this, you'll

00:32:14.816 --> 00:32:16.646
probably notice that most of the

00:32:16.646 --> 00:32:17.966
time when you're using data in

00:32:17.966 --> 00:32:19.896
your views, you probably don't

00:32:19.896 --> 00:32:20.666
need to mutate it.

00:32:21.326 --> 00:32:24.106
And so, read-only access is

00:32:24.686 --> 00:32:26.166
preferred when you can get away

00:32:26.166 --> 00:32:27.106
with that.

00:32:28.236 --> 00:32:30.336
For that, we have Swift

00:32:30.336 --> 00:32:31.826
properties and the environment.

00:32:32.766 --> 00:32:34.566
And because views in SwiftUI are

00:32:34.566 --> 00:32:36.396
value types, the framework can

00:32:36.566 --> 00:32:37.606
automatically determine when

00:32:37.606 --> 00:32:39.126
your data changes and update

00:32:39.126 --> 00:32:43.146
your view as a result.

00:32:43.146 --> 00:32:44.596
In general, you should prefer

00:32:44.596 --> 00:32:46.896
immutable access, but sometimes

00:32:46.956 --> 00:32:48.306
you do need to mutate a value.

00:32:49.626 --> 00:32:51.596
And for that, we have binding.

00:32:52.256 --> 00:32:55.756
As Luca told you earlier, a

00:32:55.756 --> 00:32:57.846
binding is first class reference

00:32:57.846 --> 00:32:58.186
to data.

00:32:59.126 --> 00:33:00.976
It allows your components to

00:33:00.976 --> 00:33:03.756
read and write a value without

00:33:03.756 --> 00:33:05.276
owning it.

00:33:05.276 --> 00:33:06.526
And this makes it great for

00:33:06.526 --> 00:33:07.256
reusability.

00:33:08.226 --> 00:33:09.576
In fact, you can get a binding

00:33:09.576 --> 00:33:10.586
to many different

00:33:10.586 --> 00:33:11.596
representations of data.

00:33:12.566 --> 00:33:13.836
We showed you today how to get a

00:33:13.836 --> 00:33:15.476
binding to state, but you can

00:33:15.476 --> 00:33:16.796
also get a binding to an

00:33:16.796 --> 00:33:17.486
ObjectBinding.

00:33:18.096 --> 00:33:20.616
In fact, you can get a binding

00:33:20.616 --> 00:33:21.756
to another binding as well.

00:33:22.926 --> 00:33:24.266
All you need to do is use the

00:33:24.266 --> 00:33:25.846
dollar sign prefix as we showed

00:33:25.846 --> 00:33:26.406
you earlier.

00:33:26.406 --> 00:33:28.266
It allows you to derive a

00:33:28.266 --> 00:33:29.596
binding from another one of

00:33:29.596 --> 00:33:30.346
these tools.

00:33:30.346 --> 00:33:33.716
I want to pause for a minute and

00:33:33.716 --> 00:33:35.066
appreciate how powerful this is.

00:33:35.946 --> 00:33:37.926
Earlier on, Luca showed you that

00:33:37.926 --> 00:33:39.316
many of the components we vend

00:33:39.376 --> 00:33:40.956
in SwiftUI, they operate on

00:33:40.956 --> 00:33:41.386
bindings.

00:33:42.436 --> 00:33:44.286
So let's use Toggle for example.

00:33:45.296 --> 00:33:46.736
Toggle takes a binding to a

00:33:46.736 --> 00:33:47.256
Boolean.

00:33:48.456 --> 00:33:49.856
But the beauty of data in

00:33:49.856 --> 00:33:51.906
SwiftUI is that Toggle doesn't

00:33:51.906 --> 00:33:55.036
need to know or care where that

00:33:55.036 --> 00:33:56.736
Boolean lives or comes from.

00:33:57.476 --> 00:33:59.446
All it needs to do is know how

00:33:59.446 --> 00:34:01.536
to read the value and change the

00:34:01.536 --> 00:34:01.906
value.

00:34:02.916 --> 00:34:04.106
Binding is a tool that

00:34:04.106 --> 00:34:05.926
encapsulates these operations

00:34:06.246 --> 00:34:08.576
which gets this separation of

00:34:08.576 --> 00:34:09.856
concern to the Toggle.

00:34:10.456 --> 00:34:14.255
And this is the real power of

00:34:14.255 --> 00:34:15.466
using data in SwiftUI.

00:34:16.286 --> 00:34:17.996
You can get great correctness

00:34:18.866 --> 00:34:20.286
and great separation of

00:34:20.286 --> 00:34:20.835
concerns.

00:34:23.876 --> 00:34:25.346
So you'll notice, I didn't

00:34:25.346 --> 00:34:26.826
actually mention state when I

00:34:26.826 --> 00:34:28.076
was talking about building

00:34:28.076 --> 00:34:29.036
reusable components.

00:34:29.356 --> 00:34:32.416
Well, state is trapped inside of

00:34:32.416 --> 00:34:33.706
your view and its children.

00:34:34.696 --> 00:34:36.846
So if your component needs to

00:34:36.846 --> 00:34:38.045
operate on a value that's

00:34:38.156 --> 00:34:40.146
external or somewhere else,

00:34:40.795 --> 00:34:43.426
state might not be a great fit.

00:34:44.235 --> 00:34:46.356
And state is a fantastic tool

00:34:46.356 --> 00:34:47.366
for prototyping a first

00:34:47.366 --> 00:34:49.386
approach, as you saw today with

00:34:49.386 --> 00:34:50.116
our podcast player.

00:34:51.196 --> 00:34:53.126
But most of the time, your data

00:34:53.346 --> 00:34:55.036
is going to live outside

00:34:55.226 --> 00:34:55.666
SwiftUI.

00:34:57.386 --> 00:34:59.096
For example, your data might

00:34:59.096 --> 00:35:00.936
live in a database and that will

00:35:00.936 --> 00:35:02.266
probably be represented by

00:35:02.586 --> 00:35:04.036
something like a BindableObject.

00:35:04.726 --> 00:35:07.266
So if you find yourself reaching

00:35:07.266 --> 00:35:09.376
for state, please take a step

00:35:09.376 --> 00:35:12.066
back and consider, does this

00:35:12.106 --> 00:35:13.886
data really need to be owned by

00:35:13.886 --> 00:35:14.346
this view?

00:35:15.526 --> 00:35:17.806
Perhaps the data, the state

00:35:17.856 --> 00:35:19.166
should be lifted up into a

00:35:19.166 --> 00:35:20.616
parent as Luca showed you

00:35:20.616 --> 00:35:23.206
earlier or maybe that data can

00:35:23.206 --> 00:35:24.736
just be represented by an

00:35:24.956 --> 00:35:26.556
external source using a

00:35:26.636 --> 00:35:27.486
BindableObject.

00:35:27.966 --> 00:35:31.076
So it's important to be careful

00:35:31.076 --> 00:35:33.546
when using state, but it does

00:35:33.546 --> 00:35:34.306
have its strengths.

00:35:35.566 --> 00:35:37.196
One of the great uses of state

00:35:37.436 --> 00:35:39.466
that we have in our framework is

00:35:39.756 --> 00:35:40.066
button.

00:35:41.486 --> 00:35:43.286
Button uses state to track

00:35:43.576 --> 00:35:44.916
whether the user is pressing on

00:35:44.916 --> 00:35:46.656
it and highlight appropriately.

00:35:47.676 --> 00:35:48.796
And what's great about using

00:35:48.796 --> 00:35:51.286
state for button is that when

00:35:51.286 --> 00:35:52.626
you create a button, you don't

00:35:52.626 --> 00:35:54.276
need to care about the highlight

00:35:54.356 --> 00:35:54.656
state.

00:35:55.726 --> 00:35:58.366
That is data that is truly owned

00:35:58.606 --> 00:36:01.336
by the button.

00:36:01.506 --> 00:36:02.566
So when you're reaching for

00:36:02.566 --> 00:36:04.816
state, consider do I have a case

00:36:04.816 --> 00:36:05.556
that's like button?

00:36:06.256 --> 00:36:07.516
And if you do, state might be a

00:36:07.516 --> 00:36:08.036
great tool.

00:36:08.906 --> 00:36:10.776
But if not, consider using one

00:36:10.776 --> 00:36:12.066
of the other powerful tools

00:36:12.066 --> 00:36:13.656
we've shown you for using data

00:36:13.656 --> 00:36:14.236
in SwiftUI.

00:36:17.536 --> 00:36:18.946
So that's how to build reusable

00:36:18.946 --> 00:36:20.016
components with SwiftUI.

00:36:20.686 --> 00:36:23.196
But what we've shown you here is

00:36:23.196 --> 00:36:25.246
actually generally applicable to

00:36:25.246 --> 00:36:26.386
all sorts of software.

00:36:27.606 --> 00:36:29.156
Every piece of software has data

00:36:30.076 --> 00:36:32.126
and every piece of software has

00:36:32.176 --> 00:36:33.126
data access.

00:36:34.296 --> 00:36:36.036
And by carefully understanding

00:36:36.036 --> 00:36:38.196
your data, minimizing your

00:36:38.196 --> 00:36:40.396
sources of truth, and building

00:36:40.396 --> 00:36:42.356
reusable components, you can

00:36:42.356 --> 00:36:44.636
eliminate an entire class of

00:36:44.636 --> 00:36:44.986
bugs.

00:36:45.646 --> 00:36:48.426
And when you use SwiftUI,

00:36:49.016 --> 00:36:50.526
applying these concepts is

00:36:50.526 --> 00:36:52.596
incredibly easy because we've

00:36:52.676 --> 00:36:54.096
built them right into the

00:36:54.146 --> 00:36:54.556
framework.

00:36:57.436 --> 00:36:58.686
We have a number of related

00:36:58.686 --> 00:37:00.766
sessions on SwiftUI and I

00:37:00.766 --> 00:37:02.286
encourage you to check out all

00:37:03.036 --> 00:37:04.106
of them.

00:37:04.306 --> 00:37:06.086
It will change the way you build

00:37:07.056 --> 00:37:07.146
apps.

00:37:08.096 --> 00:37:08.746
Thank you.

00:37:09.516 --> 00:37:15.500
[ Applause ]