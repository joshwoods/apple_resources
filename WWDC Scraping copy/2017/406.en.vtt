WEBVTT

00:00:19.496 --> 00:00:20.056
>> Hi everyone.

00:00:24.186 --> 00:00:26.896
Hi, and welcome to finding bugs

00:00:27.086 --> 00:00:29.146
using Xcode Runtime tools.

00:00:29.896 --> 00:00:31.736
My name is Kuba, I am an

00:00:31.736 --> 00:00:33.256
engineer on the program, another

00:00:33.256 --> 00:00:35.016
system inside developer tools.

00:00:35.596 --> 00:00:37.236
And today we will be talking

00:00:37.236 --> 00:00:39.106
about finding bugs at the

00:00:39.176 --> 00:00:41.246
program runtime and the tools

00:00:41.246 --> 00:00:41.966
for that.

00:00:42.166 --> 00:00:44.536
So, let's jump in.

00:00:44.736 --> 00:00:46.846
Xcode already has several ways

00:00:46.846 --> 00:00:47.936
of telling you that you have

00:00:47.936 --> 00:00:49.036
some bug in your program.

00:00:49.326 --> 00:00:50.936
For example, with compiler

00:00:50.936 --> 00:00:51.556
errors.

00:00:52.066 --> 00:00:52.976
Compiler warnings.

00:00:53.696 --> 00:00:54.656
Analyzer warnings.

00:00:55.296 --> 00:00:56.046
Or test failures.

00:00:57.196 --> 00:00:59.006
Last year in Xcode 8 we have

00:00:59.046 --> 00:01:00.416
added a whole new category

00:01:01.046 --> 00:01:02.336
called Runtime Issues.

00:01:03.436 --> 00:01:05.245
Those issues are found at the

00:01:05.245 --> 00:01:07.386
program runtime by several

00:01:08.006 --> 00:01:09.116
different tools.

00:01:09.296 --> 00:01:10.496
When you run and debug your

00:01:10.496 --> 00:01:12.276
applications as you are used to,

00:01:12.446 --> 00:01:14.626
these tools find and detect bugs

00:01:14.626 --> 00:01:16.376
at runtime and they display them

00:01:16.876 --> 00:01:18.326
in the Runtime Issues Navigator

00:01:18.376 --> 00:01:19.136
in Xcode.

00:01:20.316 --> 00:01:22.486
If you are not actively watching

00:01:22.566 --> 00:01:24.926
this navigator, Xcode also

00:01:24.926 --> 00:01:26.296
indicates that it found some

00:01:26.296 --> 00:01:28.516
runtime issue by showing this

00:01:28.516 --> 00:01:30.636
purple warning icon.

00:01:31.246 --> 00:01:34.446
You can click any of these

00:01:34.446 --> 00:01:36.816
issues in the Navigator and the

00:01:36.956 --> 00:01:38.816
editor will tell you which line

00:01:38.816 --> 00:01:40.746
of code contains the bug.

00:01:42.066 --> 00:01:43.836
The source of this bug can vary

00:01:43.836 --> 00:01:45.276
because different tools report

00:01:45.276 --> 00:01:47.406
different types of bugs but all

00:01:47.406 --> 00:01:48.346
these tools that we're going to

00:01:48.346 --> 00:01:50.296
talk today in this session, you

00:01:50.296 --> 00:01:51.846
can find in the diagnostic step

00:01:51.976 --> 00:01:52.806
in the scheme editor.

00:01:53.516 --> 00:01:55.486
And in Xcode 9, it now contains

00:01:55.486 --> 00:01:56.196
some new features.

00:01:56.786 --> 00:01:58.496
So, you'll see that it now has

00:01:58.636 --> 00:02:00.086
address sanitizer, threat

00:02:00.086 --> 00:02:02.586
sanitizer, undefined behavior

00:02:02.586 --> 00:02:04.686
sanitizer and also main thread

00:02:04.686 --> 00:02:05.046
checker.

00:02:05.736 --> 00:02:07.756
So, these tools, which all find

00:02:07.756 --> 00:02:09.786
bugs at program runtime, are

00:02:10.126 --> 00:02:11.456
what we're going to talk today

00:02:11.636 --> 00:02:12.336
in this session.

00:02:13.096 --> 00:02:14.896
So, first I will introduce main

00:02:14.896 --> 00:02:16.296
thread checker, a completely new

00:02:16.296 --> 00:02:17.436
tool in Xcode 9.

00:02:18.756 --> 00:02:20.576
Then I will talk about address

00:02:20.576 --> 00:02:22.166
sanitizer and thread sanitizer

00:02:22.336 --> 00:02:23.716
and the improvement that we have

00:02:23.716 --> 00:02:25.356
made to these tools this year.

00:02:26.536 --> 00:02:27.936
We will introduce another

00:02:27.936 --> 00:02:29.606
completely new tool, undefined

00:02:29.606 --> 00:02:30.706
behavior sanitizer.

00:02:30.706 --> 00:02:33.276
And finally we will provide tips

00:02:33.316 --> 00:02:35.386
and best practices, how you

00:02:35.386 --> 00:02:36.386
should be using those tools

00:02:36.386 --> 00:02:36.986
effectively.

00:02:37.856 --> 00:02:39.556
So, let's jump in.

00:02:40.636 --> 00:02:42.736
The main thread checker is a

00:02:42.736 --> 00:02:44.426
completely new tool in Xcode 9

00:02:44.496 --> 00:02:46.496
and it detects violations of

00:02:46.496 --> 00:02:47.736
some commonly used APIs.

00:02:47.736 --> 00:02:50.836
And specifically it focuses on

00:02:50.836 --> 00:02:52.596
UI updates and multithreading.

00:02:53.756 --> 00:02:56.336
Some APIs require that you only

00:02:56.336 --> 00:02:58.166
use them from the main thread.

00:02:58.756 --> 00:03:00.586
For example, that's the case for

00:03:00.586 --> 00:03:02.266
many APIs from the AppKit and

00:03:02.266 --> 00:03:03.256
UIKit frameworks.

00:03:04.086 --> 00:03:05.276
And they are used by most

00:03:05.276 --> 00:03:06.736
graphical macOS and iOS

00:03:06.736 --> 00:03:07.426
applications.

00:03:07.746 --> 00:03:08.866
And I assume that if you are

00:03:08.866 --> 00:03:10.626
using those frameworks, you

00:03:10.626 --> 00:03:11.686
already know about this

00:03:11.686 --> 00:03:13.196
restriction that you have to

00:03:13.196 --> 00:03:14.526
call those APIs from the main

00:03:14.526 --> 00:03:14.736
thread.

00:03:14.736 --> 00:03:16.826
And that's easy to do.

00:03:16.896 --> 00:03:18.126
We just make sure that we will

00:03:18.186 --> 00:03:19.516
call those APIs on the main

00:03:19.516 --> 00:03:20.036
thread only.

00:03:21.516 --> 00:03:23.156
But there are tasks that you

00:03:23.156 --> 00:03:24.616
don't want to be executed on the

00:03:24.616 --> 00:03:26.516
main thread, like file downloads

00:03:26.516 --> 00:03:27.716
where you need to wait for some

00:03:27.716 --> 00:03:29.756
data or image processing, which

00:03:29.916 --> 00:03:31.066
usually involves some, like,

00:03:31.066 --> 00:03:32.126
heavy computations.

00:03:33.256 --> 00:03:34.976
So, these tasks need to be moved

00:03:35.146 --> 00:03:36.746
off the main thread so that the

00:03:36.746 --> 00:03:39.406
UI is still responsive and your

00:03:39.406 --> 00:03:40.656
user interaction is not blocked

00:03:40.656 --> 00:03:41.136
in your app.

00:03:42.056 --> 00:03:44.126
However, these tasks also need

00:03:44.126 --> 00:03:45.676
to trigger UI updates.

00:03:46.756 --> 00:03:48.826
And if those UI updates involve

00:03:48.826 --> 00:03:50.936
calling AppKit or UI kit APIs,

00:03:51.356 --> 00:03:52.896
that update needs to happen from

00:03:52.896 --> 00:03:53.376
the main thread.

00:03:53.566 --> 00:03:55.026
And it's very easy to make a

00:03:55.026 --> 00:03:56.616
mistake, to accidently call this

00:03:56.616 --> 00:03:58.246
UI update from the wrong thread.

00:03:59.146 --> 00:04:00.056
And it can have serious

00:04:00.056 --> 00:04:01.986
consequences such as missed UI

00:04:01.986 --> 00:04:03.696
updates where the UI just does

00:04:03.696 --> 00:04:05.616
not update at all or other

00:04:05.616 --> 00:04:06.336
visual defects.

00:04:06.916 --> 00:04:08.006
But even more serious things

00:04:08.006 --> 00:04:09.286
like data corruptions or

00:04:09.286 --> 00:04:09.656
crashes.

00:04:10.086 --> 00:04:12.206
So, to avoid this problem we

00:04:12.206 --> 00:04:13.356
need to make sure that this UI

00:04:13.356 --> 00:04:15.036
update only happens from the

00:04:15.036 --> 00:04:15.436
main thread.

00:04:16.625 --> 00:04:18.386
So, with that, I'd like to

00:04:18.386 --> 00:04:19.476
introduce Main Thread Checker

00:04:19.476 --> 00:04:21.000
and show it to you right now.

00:04:30.436 --> 00:04:31.956
So, what I have here is a very

00:04:31.956 --> 00:04:33.126
simple application which

00:04:33.126 --> 00:04:34.386
downloads some data from the

00:04:34.386 --> 00:04:34.816
internet.

00:04:35.386 --> 00:04:36.736
It's actually downloading a file

00:04:36.736 --> 00:04:38.866
from this long URL which is

00:04:38.906 --> 00:04:39.446
present on the

00:04:39.446 --> 00:04:40.856
developer.apple.com website.

00:04:41.296 --> 00:04:42.736
It's some sample code that Apple

00:04:42.736 --> 00:04:44.496
has published in 2013.

00:04:45.036 --> 00:04:46.176
And it's a zip file.

00:04:46.176 --> 00:04:48.356
It's several megabytes large and

00:04:48.356 --> 00:04:49.696
it will serve as an example file

00:04:49.696 --> 00:04:50.516
if you want to download.

00:04:51.706 --> 00:04:53.216
To download this file, I'm using

00:04:53.216 --> 00:04:56.036
a class called URLSession that's

00:04:56.036 --> 00:04:57.496
provided by Foundation and it's

00:04:57.496 --> 00:04:58.586
a very convenient way of

00:04:58.616 --> 00:04:59.396
downloading files.

00:05:01.776 --> 00:05:03.736
The UI of my application is very

00:05:03.736 --> 00:05:04.446
simple.

00:05:05.276 --> 00:05:05.946
Let's take a look.

00:05:05.946 --> 00:05:07.806
It contains a single button and

00:05:07.806 --> 00:05:08.596
a progress bar.

00:05:08.596 --> 00:05:10.576
So, I have actually implemented

00:05:10.576 --> 00:05:12.086
the progress callback of

00:05:12.086 --> 00:05:12.776
URLSession.

00:05:12.776 --> 00:05:14.116
And from this callback I am

00:05:14.116 --> 00:05:15.386
updating the value on this

00:05:15.426 --> 00:05:16.026
progress bar.

00:05:16.366 --> 00:05:17.876
So, let's run the application

00:05:18.156 --> 00:05:20.506
and see if it shows the progress

00:05:20.506 --> 00:05:22.206
of the download as it's supposed

00:05:22.206 --> 00:05:22.416
to.

00:05:22.896 --> 00:05:24.706
Let me now click the button to

00:05:24.706 --> 00:05:25.736
start the download.

00:05:26.126 --> 00:05:26.976
And you might see that

00:05:27.006 --> 00:05:28.296
something's not quite right,

00:05:28.446 --> 00:05:30.036
because the progress bar is just

00:05:30.036 --> 00:05:31.076
stuck at the beginning.

00:05:31.616 --> 00:05:33.596
And now it has for some reason

00:05:33.596 --> 00:05:34.786
jumped straight to the end.

00:05:35.956 --> 00:05:37.366
So, now I might be wondering

00:05:37.366 --> 00:05:38.576
that there's some bug in my

00:05:38.576 --> 00:05:40.486
application or URLSession may

00:05:40.486 --> 00:05:41.666
not be working correctly.

00:05:42.546 --> 00:05:43.416
So, the best thing about this

00:05:43.416 --> 00:05:44.496
feature is that I don't need to

00:05:44.496 --> 00:05:46.476
guess what wrong - Xcode has

00:05:46.476 --> 00:05:47.496
already found the problem.

00:05:48.196 --> 00:05:49.806
If we take a look back into

00:05:49.806 --> 00:05:51.166
Xcode, we'll see that it's

00:05:51.166 --> 00:05:53.826
informing us that it has found a

00:05:53.826 --> 00:05:54.516
Runtime issue.

00:05:55.596 --> 00:05:57.096
Let me click this Runtime issue

00:05:57.226 --> 00:05:58.706
to get some details, and you'll

00:05:58.706 --> 00:05:59.846
see that the navigator has now

00:05:59.936 --> 00:06:01.466
switched to the Runtime Issues

00:06:01.466 --> 00:06:02.076
navigator.

00:06:02.616 --> 00:06:04.406
And it's informing me that I'm

00:06:04.406 --> 00:06:06.656
calling some UI API from a

00:06:06.656 --> 00:06:07.286
background thread.

00:06:08.756 --> 00:06:11.086
I'll click this issue to go to

00:06:11.176 --> 00:06:12.656
the code which contains the

00:06:12.656 --> 00:06:13.786
invalid API code.

00:06:14.436 --> 00:06:16.356
And in this case we can see that

00:06:16.356 --> 00:06:18.116
we are actually setting a new

00:06:18.116 --> 00:06:19.996
value on the progress indicator

00:06:20.256 --> 00:06:21.796
from a background thread and

00:06:21.796 --> 00:06:23.706
that has to be done only from

00:06:23.706 --> 00:06:25.646
the main thread.

00:06:25.776 --> 00:06:26.916
So, that's a bit unexpected

00:06:26.916 --> 00:06:28.456
because I'm not trying to run

00:06:28.456 --> 00:06:29.726
this code on a background

00:06:29.726 --> 00:06:29.926
thread.

00:06:30.316 --> 00:06:31.306
I'm actually not doing any

00:06:31.306 --> 00:06:32.726
threading in my code at all.

00:06:32.726 --> 00:06:35.636
So, the real problem is that I

00:06:35.636 --> 00:06:36.866
actually made a mistake when I

00:06:36.866 --> 00:06:39.216
was grading my URLSession class,

00:06:39.456 --> 00:06:40.076
sorry, object.

00:06:40.656 --> 00:06:42.306
On this line, where I'm creating

00:06:42.306 --> 00:06:44.476
the URLSession, I'm supposed to

00:06:44.476 --> 00:06:46.776
specify which view should be

00:06:46.776 --> 00:06:48.466
used for the callbacks for both

00:06:48.466 --> 00:06:49.766
the progress and download

00:06:49.766 --> 00:06:50.906
finished callback.

00:06:51.086 --> 00:06:52.656
Instead of providing a queue, I

00:06:52.916 --> 00:06:53.906
just said nil.

00:06:53.906 --> 00:06:54.896
That means I don't care.

00:06:54.896 --> 00:06:56.856
And URLSession will probably

00:06:57.286 --> 00:06:59.506
involve those callbacks from a

00:06:59.896 --> 00:07:01.566
background queue.

00:07:01.736 --> 00:07:04.066
So, now we know why these

00:07:04.066 --> 00:07:05.216
callbacks are called from a

00:07:05.216 --> 00:07:05.826
background thread.

00:07:06.346 --> 00:07:08.226
To fix this, I could either use

00:07:08.306 --> 00:07:10.626
GCD and dispatch the UIUpdates

00:07:10.626 --> 00:07:11.466
back to the main thread.

00:07:12.156 --> 00:07:13.926
Or in this simple case I could

00:07:13.926 --> 00:07:15.946
just ask URLSession to directly

00:07:16.316 --> 00:07:17.786
call my callbacks on the main

00:07:17.786 --> 00:07:18.026
queue.

00:07:18.026 --> 00:07:19.146
So, let's do that instead.

00:07:20.516 --> 00:07:23.086
I'll just ask it to call my

00:07:23.086 --> 00:07:24.756
callbacks on the main queue and

00:07:25.036 --> 00:07:26.246
let's run the application one

00:07:26.246 --> 00:07:27.786
more time to see if that fixed

00:07:27.786 --> 00:07:28.376
our problem.

00:07:29.596 --> 00:07:31.166
If I click the button this time,

00:07:31.546 --> 00:07:32.756
we'll see that the progress bar

00:07:32.756 --> 00:07:33.916
now animates smoothly and it

00:07:34.156 --> 00:07:35.406
indicates the progress of our

00:07:35.406 --> 00:07:35.846
download.

00:07:39.516 --> 00:07:43.046
[ Applause ]

00:07:43.546 --> 00:07:44.466
Sorry, I need to switch back to

00:07:44.466 --> 00:07:44.886
my slide.

00:07:45.246 --> 00:07:49.496
There we go.

00:07:51.596 --> 00:07:55.026
So, we've seen an example of how

00:07:55.026 --> 00:07:56.256
Main Thread Checker helps us

00:07:56.446 --> 00:07:58.536
find and fix a bug where we're

00:07:58.536 --> 00:07:59.916
calling some API from the wrong

00:07:59.916 --> 00:08:00.096
thread.

00:08:00.886 --> 00:08:02.906
Notice, that I didn't need to

00:08:02.956 --> 00:08:04.576
turn these two on because it's

00:08:04.576 --> 00:08:06.066
actually enabled by default

00:08:06.266 --> 00:08:07.636
whenever you are using the Xcode

00:08:07.636 --> 00:08:08.016
debugger.

00:08:08.726 --> 00:08:11.736
But if you want to find this

00:08:11.736 --> 00:08:13.796
code in Xcode, you'll see that

00:08:13.796 --> 00:08:15.706
it's available in the diagnostic

00:08:15.706 --> 00:08:17.536
step again and you'll notice

00:08:17.536 --> 00:08:19.696
that now in Xcode 9 we have this

00:08:19.746 --> 00:08:21.366
checkbox called Main Thread

00:08:21.366 --> 00:08:21.716
Checker.

00:08:22.606 --> 00:08:23.616
So, this is the place where you

00:08:23.616 --> 00:08:25.056
can turn the two on or off.

00:08:26.296 --> 00:08:27.806
If you want to make the debugger

00:08:28.066 --> 00:08:29.786
stop on a violation of this

00:08:29.786 --> 00:08:31.726
rule, you can use the pause on

00:08:31.726 --> 00:08:34.006
issues checkbox and with that,

00:08:34.006 --> 00:08:35.196
the debugger will stop when it

00:08:35.196 --> 00:08:37.046
detects an issue and you can

00:08:37.046 --> 00:08:38.316
inspect your current program

00:08:38.316 --> 00:08:40.096
state and to figure out what

00:08:40.096 --> 00:08:40.546
went wrong.

00:08:40.546 --> 00:08:44.526
Now, let's talk about some

00:08:44.526 --> 00:08:47.056
common mistakes that leap to the

00:08:47.056 --> 00:08:48.216
bugs that Main Thread Checker

00:08:48.216 --> 00:08:48.626
detects.

00:08:49.486 --> 00:08:50.646
So, as you saw in the demo,

00:08:51.046 --> 00:08:52.356
networking callbacks is one

00:08:52.356 --> 00:08:55.446
place where we, is a place which

00:08:55.496 --> 00:08:56.696
often happens from the main

00:08:56.696 --> 00:08:57.636
threads, sorry, from the

00:08:57.636 --> 00:08:58.196
background thread.

00:08:59.246 --> 00:09:00.266
So, you need to be careful and

00:09:00.266 --> 00:09:01.806
you need to dispatch your

00:09:01.806 --> 00:09:03.316
UIUpdates back to the main

00:09:03.316 --> 00:09:03.586
threads.

00:09:04.636 --> 00:09:05.566
Another common place for

00:09:05.566 --> 00:09:06.396
mistakes is when you are

00:09:06.396 --> 00:09:08.276
creating and destroying NSView

00:09:08.276 --> 00:09:09.336
or UIView objects.

00:09:09.336 --> 00:09:11.046
This also needs to happen only

00:09:11.046 --> 00:09:12.426
from the main thread.

00:09:13.296 --> 00:09:15.886
If you are writing libraries or

00:09:15.886 --> 00:09:17.516
frameworks and you are providing

00:09:17.576 --> 00:09:18.866
some asynchronous API.

00:09:19.656 --> 00:09:20.816
You should be very careful when

00:09:20.816 --> 00:09:21.846
designing those APIs.

00:09:22.506 --> 00:09:23.376
Let's take a look.

00:09:23.786 --> 00:09:27.196
Let's say that we want to have

00:09:27.196 --> 00:09:29.366
an API that performs some long

00:09:29.366 --> 00:09:30.496
and heavy computation.

00:09:30.496 --> 00:09:31.996
So, it does that in an

00:09:32.036 --> 00:09:33.046
asynchronous fashion.

00:09:34.566 --> 00:09:36.146
Here the caller of the API needs

00:09:36.146 --> 00:09:38.646
to provide a closure to the API

00:09:38.646 --> 00:09:40.436
and the closure will be used as

00:09:40.436 --> 00:09:41.396
a completion handler.

00:09:41.526 --> 00:09:42.956
So, when the task is completed,

00:09:43.626 --> 00:09:45.576
you, the API will call the

00:09:45.576 --> 00:09:46.336
provided closure.

00:09:47.266 --> 00:09:48.636
However, in this code sample,

00:09:48.636 --> 00:09:50.756
it's not obvious which queue or

00:09:50.756 --> 00:09:51.936
thread will be used for this

00:09:51.936 --> 00:09:52.326
closure.

00:09:53.236 --> 00:09:54.796
And it can easily lead to a

00:09:54.796 --> 00:09:56.156
mistake where some code is

00:09:56.156 --> 00:09:57.516
executed from the wrong thread.

00:10:01.216 --> 00:10:03.996
Good APIs let or even force

00:10:03.996 --> 00:10:05.986
their users to specify which

00:10:06.086 --> 00:10:07.736
view should be used for the

00:10:07.736 --> 00:10:08.506
completion handle.

00:10:08.556 --> 00:10:09.836
So, if you read this code

00:10:09.836 --> 00:10:11.936
example, it's obvious that the

00:10:11.936 --> 00:10:13.366
closure will be called on the

00:10:13.366 --> 00:10:14.766
provided queue and you don't

00:10:14.766 --> 00:10:15.726
even need to read the

00:10:15.726 --> 00:10:19.936
documentation for the API to

00:10:20.196 --> 00:10:20.556
learn that.

00:10:20.556 --> 00:10:21.786
So, as I said, Main Thread

00:10:21.786 --> 00:10:23.336
Checker detects violations of

00:10:23.336 --> 00:10:24.406
API threading rules.

00:10:25.256 --> 00:10:27.536
It supports AppKit, UIKit and

00:10:27.536 --> 00:10:28.986
WebKit which are three very

00:10:28.986 --> 00:10:30.456
commonly used frameworks and

00:10:30.456 --> 00:10:32.536
they all have the same main

00:10:32.536 --> 00:10:34.636
thread only requirement on a lot

00:10:34.636 --> 00:10:35.136
of their APIs.

00:10:35.136 --> 00:10:38.506
The tool supports both Swift and

00:10:38.566 --> 00:10:39.256
C languages.

00:10:39.776 --> 00:10:41.086
And in contrast to the other

00:10:41.086 --> 00:10:42.436
tools that we are going to talk

00:10:42.436 --> 00:10:44.546
about today, it does not require

00:10:44.546 --> 00:10:45.336
recompilation.

00:10:46.006 --> 00:10:46.956
So, you can even use it on

00:10:46.956 --> 00:10:47.956
existing binaries.

00:10:48.536 --> 00:10:51.016
The best part is that is

00:10:51.016 --> 00:10:52.576
actually enabled by default.

00:10:52.576 --> 00:10:53.676
So, you don't need to do

00:10:53.676 --> 00:10:54.996
anything to start getting these

00:10:54.996 --> 00:10:55.926
warnings from the tool.

00:10:55.926 --> 00:10:57.016
It's actually enabled whenever

00:10:57.016 --> 00:10:58.396
you're using the Xcode debugger.

00:10:59.656 --> 00:11:00.726
So, that was Main Thread

00:11:00.726 --> 00:11:02.886
Checker, a completely new tool

00:11:03.716 --> 00:11:04.716
in Xcode 9.

00:11:06.516 --> 00:11:11.576
[ Applause ]

00:11:12.076 --> 00:11:13.836
Now let's talk about another

00:11:13.876 --> 00:11:15.886
large source of problems -

00:11:16.196 --> 00:11:16.856
memory issues.

00:11:17.286 --> 00:11:18.476
And let's talk about Address

00:11:18.476 --> 00:11:20.386
Sanitizer, which finds those

00:11:20.436 --> 00:11:20.806
issues.

00:11:22.196 --> 00:11:24.106
Address Sanitizer has been

00:11:24.106 --> 00:11:25.966
introduced in Xcode 7, two years

00:11:25.966 --> 00:11:26.346
ago.

00:11:26.346 --> 00:11:28.096
And it's proven to be a great

00:11:28.096 --> 00:11:29.046
tool because it finds

00:11:29.356 --> 00:11:30.566
security-critical issues.

00:11:30.676 --> 00:11:32.146
For example, use after free bugs

00:11:32.606 --> 00:11:33.466
and buffer overflows.

00:11:34.706 --> 00:11:36.226
It's also very helpful when

00:11:36.346 --> 00:11:37.706
trying to diagnose hard to

00:11:37.706 --> 00:11:38.566
reproduce crashes.

00:11:38.566 --> 00:11:39.996
Because it often makes those

00:11:39.996 --> 00:11:42.456
crashes deterministic and it

00:11:42.456 --> 00:11:44.216
finds memory corruptions when

00:11:44.216 --> 00:11:45.406
they actually happen and not

00:11:45.456 --> 00:11:46.656
some time later when the

00:11:46.706 --> 00:11:47.676
corruption affects some

00:11:47.676 --> 00:11:48.516
unrelated code.

00:11:49.416 --> 00:11:51.066
If you'd like to know about how

00:11:51.066 --> 00:11:52.756
this tool works and which exact

00:11:52.856 --> 00:11:54.266
bugs can it find, I recommend

00:11:54.266 --> 00:11:56.196
that you watch a WWDC from two

00:11:56.196 --> 00:11:57.796
years ago called advanced

00:11:57.836 --> 00:11:59.796
debugging and Address Sanitizer.

00:12:00.666 --> 00:12:01.596
In that session, we have

00:12:01.656 --> 00:12:02.896
introduced the tool and we have

00:12:02.896 --> 00:12:04.656
also talked about how it works

00:12:04.656 --> 00:12:05.806
under the hood.

00:12:06.646 --> 00:12:08.246
Address Sanitizer is also

00:12:08.246 --> 00:12:10.416
integrated into Xcode UI and

00:12:10.416 --> 00:12:11.136
into Debugger.

00:12:11.136 --> 00:12:12.446
Let's take a look.

00:12:12.506 --> 00:12:13.816
If you want to use Address

00:12:13.816 --> 00:12:15.356
Sanitizer, all you have to do is

00:12:15.436 --> 00:12:16.646
again go to the scheme editor

00:12:16.646 --> 00:12:18.146
and you'll find that there's a

00:12:18.146 --> 00:12:19.156
checkbox called Address

00:12:19.156 --> 00:12:20.966
Sanitizer which can be used to

00:12:20.966 --> 00:12:21.716
enable this tool.

00:12:22.816 --> 00:12:24.586
In Xcode 9 we have added another

00:12:24.736 --> 00:12:26.426
checkbox that turns on an

00:12:26.426 --> 00:12:28.556
optional check of use of stack

00:12:28.556 --> 00:12:30.046
after return, and I will

00:12:30.046 --> 00:12:31.046
describe this feature later.

00:12:31.946 --> 00:12:33.686
But you can also notice that we

00:12:33.686 --> 00:12:35.016
have now added compatibility

00:12:35.016 --> 00:12:35.856
with Malloc Scribble.

00:12:35.856 --> 00:12:38.146
So, you can enable both of these

00:12:38.146 --> 00:12:41.106
tools at the same time.

00:12:41.106 --> 00:12:42.856
You can then run and debug your

00:12:42.856 --> 00:12:44.566
application as you are used to.

00:12:45.166 --> 00:12:47.776
And if your program doesn't have

00:12:47.776 --> 00:12:49.046
any memory issues and if it's

00:12:49.046 --> 00:12:50.246
not touching any memory that

00:12:50.246 --> 00:12:52.716
it's not supposed to, then good.

00:12:52.716 --> 00:12:53.816
Address Sanitizer will not

00:12:53.816 --> 00:12:55.116
interrupt your work flow.

00:12:55.466 --> 00:12:57.606
But if it finds a problem, it

00:12:57.606 --> 00:12:59.006
will stop the program and it

00:12:59.006 --> 00:13:00.246
will describe what the issue is.

00:13:00.356 --> 00:13:02.196
So, in this case we are

00:13:02.196 --> 00:13:03.346
accidently using some

00:13:03.346 --> 00:13:04.416
deallocated memory.

00:13:04.456 --> 00:13:06.456
And that's a serious bug.

00:13:07.056 --> 00:13:08.466
And when Address Sanitizer finds

00:13:08.466 --> 00:13:10.316
this bug, it will also display

00:13:10.616 --> 00:13:12.016
some additional information

00:13:12.186 --> 00:13:13.336
about that memory that we're

00:13:13.336 --> 00:13:13.866
accessing.

00:13:14.446 --> 00:13:15.806
And we'll get not just its

00:13:15.806 --> 00:13:17.816
address but we'll also get some

00:13:17.816 --> 00:13:18.856
description of it.

00:13:18.856 --> 00:13:21.236
How large the heap region is and

00:13:21.236 --> 00:13:22.486
which byte out of it are we

00:13:22.486 --> 00:13:23.046
accessing.

00:13:23.696 --> 00:13:25.506
And we also get the allocation

00:13:25.506 --> 00:13:27.586
and deallocation backtrace of

00:13:27.586 --> 00:13:29.226
how that memory was allocated.

00:13:29.226 --> 00:13:31.476
So, this is super useful

00:13:31.476 --> 00:13:32.556
information when you're dealing

00:13:32.556 --> 00:13:33.936
with use after free bugs,

00:13:34.526 --> 00:13:35.966
because this really helps to

00:13:35.966 --> 00:13:37.826
diagnose them, right?

00:13:39.456 --> 00:13:41.726
So, we've seen what Address

00:13:41.726 --> 00:13:43.026
Sanitizer is but now let's talk

00:13:43.026 --> 00:13:44.206
about some new features that we

00:13:44.206 --> 00:13:45.166
have added this year.

00:13:45.546 --> 00:13:47.346
It now detects two new classes

00:13:47.346 --> 00:13:48.156
of bugs.

00:13:48.156 --> 00:13:49.806
Use after scope and use after

00:13:49.806 --> 00:13:50.236
return.

00:13:50.236 --> 00:13:51.946
And it's also now compatible

00:13:51.946 --> 00:13:52.726
with Malloc Scribble.

00:13:52.956 --> 00:13:53.736
Let's take a look at some

00:13:53.736 --> 00:13:54.256
examples.

00:13:54.916 --> 00:13:58.916
In this code sample, let's say

00:13:58.916 --> 00:14:00.486
we have a variable that is

00:14:00.606 --> 00:14:02.386
defined inside the body of an if

00:14:02.386 --> 00:14:02.856
statement.

00:14:04.476 --> 00:14:06.466
We take a pointer to this

00:14:06.466 --> 00:14:09.576
variable and then later outside

00:14:09.776 --> 00:14:11.806
that if statement, we are using

00:14:11.806 --> 00:14:12.956
that pointer to save a new

00:14:12.956 --> 00:14:13.456
value.

00:14:14.226 --> 00:14:15.386
So, this is any value because we

00:14:15.386 --> 00:14:16.796
are, the pointer is no longer

00:14:16.796 --> 00:14:17.376
valid here.

00:14:17.666 --> 00:14:19.036
And address sanitizer is now

00:14:19.036 --> 00:14:20.696
able to detect and describe the

00:14:20.696 --> 00:14:21.306
issue for you.

00:14:21.786 --> 00:14:26.546
Another type of bug happens when

00:14:26.546 --> 00:14:28.536
you're returning, when you're

00:14:28.536 --> 00:14:30.476
using a pointer out, after

00:14:30.476 --> 00:14:31.836
returning from a function.

00:14:31.836 --> 00:14:33.476
So, in this case the function

00:14:33.476 --> 00:14:34.986
returns a pointer to its local

00:14:34.986 --> 00:14:37.446
variable which means that once

00:14:37.446 --> 00:14:38.966
the function returns, that

00:14:38.966 --> 00:14:40.216
pointer is no longer valid.

00:14:40.216 --> 00:14:42.696
And if we try to use it, we are

00:14:42.696 --> 00:14:44.046
again accessing garbage memory

00:14:44.046 --> 00:14:45.426
and the Address Sanitizer is

00:14:45.426 --> 00:14:47.306
able to detect that and describe

00:14:47.306 --> 00:14:48.136
that issue for you.

00:14:48.796 --> 00:14:50.546
However, this check is not

00:14:50.546 --> 00:14:52.386
enabled by default and because

00:14:52.386 --> 00:14:53.676
it has some extra overhead and

00:14:53.676 --> 00:14:54.596
you have to opt into it.

00:14:55.006 --> 00:14:56.746
To do so, you can use that extra

00:14:56.746 --> 00:14:58.226
checkbox in the scheme editor

00:14:58.286 --> 00:14:59.496
that I mentioned and showed

00:14:59.496 --> 00:14:59.846
earlier.

00:15:04.026 --> 00:15:05.936
Now, if your projects are

00:15:05.936 --> 00:15:07.846
written in Swift, you might be

00:15:07.846 --> 00:15:09.606
wondering why should I care

00:15:09.606 --> 00:15:10.686
about Address Sanitizer?

00:15:11.286 --> 00:15:13.726
Swift is a much safer language

00:15:13.806 --> 00:15:15.136
but the reality is that a lot of

00:15:15.136 --> 00:15:16.556
projects are still mixed and

00:15:16.556 --> 00:15:18.136
they have bugs written in C and

00:15:18.136 --> 00:15:18.786
Objective C.

00:15:19.036 --> 00:15:20.756
And for those parts that are

00:15:20.756 --> 00:15:21.956
written in C and Objective C,

00:15:22.266 --> 00:15:23.506
address sanitizer is still a

00:15:23.506 --> 00:15:24.866
very effective tool and it will

00:15:24.866 --> 00:15:26.426
find memory issues in that, in

00:15:26.426 --> 00:15:29.026
these parts of your project.

00:15:29.096 --> 00:15:30.646
Some of you might also be using

00:15:30.646 --> 00:15:32.906
unsafe pointer types which, as

00:15:32.906 --> 00:15:35.226
their name suggests, are not

00:15:35.226 --> 00:15:36.286
memory safe and you have to be

00:15:36.346 --> 00:15:37.386
careful when using those.

00:15:37.726 --> 00:15:38.516
So, let's take code as an

00:15:38.516 --> 00:15:39.006
example.

00:15:40.446 --> 00:15:42.416
In this code, I have a string,

00:15:42.416 --> 00:15:43.156
Hello, World.

00:15:43.156 --> 00:15:45.126
And I am trying to convert it

00:15:45.156 --> 00:15:47.886
into a C-style string using

00:15:47.886 --> 00:15:48.536
unsafe windows.

00:15:49.896 --> 00:15:51.276
So what I'll do is that I will

00:15:51.276 --> 00:15:53.246
call this API called with C

00:15:53.316 --> 00:15:55.276
string and it will create an

00:15:55.276 --> 00:15:56.286
unsafe pointer for me.

00:15:56.836 --> 00:15:59.016
And this will provide this

00:15:59.016 --> 00:16:00.416
unsafe pointer to me in this

00:16:00.476 --> 00:16:01.826
closure that I am passing

00:16:01.826 --> 00:16:02.086
through it.

00:16:03.306 --> 00:16:05.536
If I store this pointer outside

00:16:05.536 --> 00:16:07.596
of the closure, I am violating

00:16:07.596 --> 00:16:08.776
the rules of the C string.

00:16:08.776 --> 00:16:10.366
And that means that when I try

00:16:10.366 --> 00:16:13.006
to use this leak unsafe pointer

00:16:13.406 --> 00:16:15.106
later, I am again accessing

00:16:15.106 --> 00:16:15.856
invalid memory.

00:16:15.986 --> 00:16:17.696
And Address Sanitizer is able to

00:16:17.696 --> 00:16:19.386
detect invalid uses of unsafe

00:16:19.386 --> 00:16:20.616
pointers like this, even in

00:16:20.616 --> 00:16:21.116
Swift code.

00:16:24.776 --> 00:16:26.346
To fix this, we need to make

00:16:26.346 --> 00:16:27.656
sure that we only use that

00:16:27.756 --> 00:16:30.086
provided unsafe pointer within

00:16:30.086 --> 00:16:31.316
the closure that we are passing

00:16:31.406 --> 00:16:32.076
with C string.

00:16:32.116 --> 00:16:34.286
So, if we move the code into the

00:16:34.286 --> 00:16:35.896
closure like this, that fixes

00:16:35.896 --> 00:16:36.516
the problem.

00:16:36.516 --> 00:16:38.226
And in this case, we can

00:16:38.286 --> 00:16:39.796
simplify the code even further

00:16:39.796 --> 00:16:41.136
and just remove that local

00:16:41.136 --> 00:16:42.086
variable completely.

00:16:42.566 --> 00:16:44.126
It is generally a good idea

00:16:44.736 --> 00:16:46.486
never to store unsafe pointers

00:16:46.486 --> 00:16:47.786
into local variables or

00:16:47.786 --> 00:16:48.486
properties.

00:16:49.886 --> 00:16:51.476
So, if you are using unsafe

00:16:51.476 --> 00:16:52.906
pointers in your Swift projects,

00:16:53.366 --> 00:16:54.626
I definitely will recommend that

00:16:54.626 --> 00:16:56.096
you turn Address Sanitizer on in

00:16:56.096 --> 00:16:57.616
your projects just to make sure

00:16:57.616 --> 00:16:58.676
that you are not accidently

00:16:58.676 --> 00:16:59.996
using unsafe pointers wrong.

00:17:03.116 --> 00:17:05.156
So we've seen how Address

00:17:05.156 --> 00:17:07.626
Sanitizer helps you find and fix

00:17:07.626 --> 00:17:07.935
bugs.

00:17:07.935 --> 00:17:09.566
But it can also be a very

00:17:09.566 --> 00:17:11.026
helpful tool for general

00:17:11.026 --> 00:17:12.185
debugging as well.

00:17:13.205 --> 00:17:15.226
Because have, if you, when you

00:17:15.226 --> 00:17:16.465
are debugging your projects,

00:17:16.465 --> 00:17:18.986
have you ever wondered where was

00:17:18.986 --> 00:17:20.056
this memory allocated?

00:17:20.866 --> 00:17:21.856
Well, I have some good news for

00:17:21.856 --> 00:17:22.195
you.

00:17:22.406 --> 00:17:23.476
If you are running with Address

00:17:23.476 --> 00:17:26.215
Sanitizer, it's actually enabled

00:17:26.215 --> 00:17:27.546
to tell you the allocation

00:17:27.586 --> 00:17:28.756
backtraces of any memory that

00:17:28.756 --> 00:17:29.236
you ask it.

00:17:30.126 --> 00:17:31.256
And it can also provide the

00:17:31.256 --> 00:17:32.766
deallocation backtraces for

00:17:32.766 --> 00:17:33.766
memory that's already

00:17:33.766 --> 00:17:34.356
deallocated.

00:17:35.246 --> 00:17:36.436
And furthermore, it can show you

00:17:36.436 --> 00:17:38.076
which bytes of memory are valid

00:17:38.076 --> 00:17:38.686
and invalid.

00:17:38.746 --> 00:17:40.946
So, let's take a look.

00:17:41.326 --> 00:17:43.146
This time we are not

00:17:43.146 --> 00:17:44.246
investigating a crash.

00:17:44.496 --> 00:17:46.476
This is just a regular debugging

00:17:46.526 --> 00:17:48.216
session where I'm stepping over

00:17:48.216 --> 00:17:49.276
the lines in a function.

00:17:49.846 --> 00:17:52.826
I can control click any variable

00:17:52.826 --> 00:17:53.696
in the variable view.

00:17:53.696 --> 00:17:55.596
And if that variable is a

00:17:55.596 --> 00:17:58.226
pointer, I can select view

00:17:58.226 --> 00:17:59.526
memory of.

00:18:00.816 --> 00:18:02.536
Normally this would just give me

00:18:02.536 --> 00:18:04.866
the view of, into the bytes of

00:18:04.866 --> 00:18:05.646
that memory object.

00:18:06.676 --> 00:18:07.506
But if you are running with

00:18:07.506 --> 00:18:09.206
Address Sanitizer enabled, you

00:18:09.206 --> 00:18:11.336
can expand the memory item in

00:18:11.336 --> 00:18:13.146
that navigator and it will

00:18:13.146 --> 00:18:14.216
display the allocation and

00:18:14.216 --> 00:18:15.606
deallocation backtrace for that

00:18:15.606 --> 00:18:15.996
memory.

00:18:16.586 --> 00:18:19.756
You can also notice that some of

00:18:19.756 --> 00:18:21.246
the bytes in this memory view

00:18:21.246 --> 00:18:22.976
are grey and some are displayed

00:18:22.976 --> 00:18:23.836
in black.

00:18:24.596 --> 00:18:26.316
The greyed-out bytes indicate

00:18:26.456 --> 00:18:28.206
invalid memory and, or as we

00:18:28.206 --> 00:18:29.656
say, poisoned memory.

00:18:30.086 --> 00:18:30.846
Which means that your

00:18:30.846 --> 00:18:31.926
application must not be

00:18:31.926 --> 00:18:33.456
accessing those bytes and if it

00:18:33.456 --> 00:18:34.656
does so, that is a bug.

00:18:34.656 --> 00:18:36.206
And Address Sanitizer will find

00:18:36.206 --> 00:18:37.486
it and detect it.

00:18:38.876 --> 00:18:40.826
You can also access the

00:18:40.826 --> 00:18:42.316
information about the allocation

00:18:42.316 --> 00:18:43.596
and deallocation of memory

00:18:43.596 --> 00:18:45.136
objects in the [inaudible] text

00:18:45.136 --> 00:18:45.666
console.

00:18:45.936 --> 00:18:47.266
We can use this command called

00:18:47.266 --> 00:18:49.466
memory history and pass it any

00:18:49.466 --> 00:18:50.816
expression that evaluates to a

00:18:50.816 --> 00:18:51.236
pointer.

00:18:52.636 --> 00:18:54.346
So, let's use the pointer value

00:18:54.346 --> 00:18:56.066
directly in this example and the

00:18:56.066 --> 00:18:57.996
text console will print out to

00:18:57.996 --> 00:18:59.276
allocation and deallocation

00:18:59.336 --> 00:19:00.516
backtraces in text output.

00:19:00.516 --> 00:19:05.316
So, I hope that I have convinced

00:19:05.366 --> 00:19:06.516
you that Address Sanitizer is

00:19:06.516 --> 00:19:08.586
great tool and that it's useful

00:19:08.586 --> 00:19:10.366
for both C languages and also

00:19:10.366 --> 00:19:10.706
Swift.

00:19:10.706 --> 00:19:12.596
And that it helps with memory

00:19:12.596 --> 00:19:13.596
corruptions and crashes.

00:19:14.246 --> 00:19:15.856
But also that it's a very useful

00:19:15.856 --> 00:19:17.216
tool for general debugging as

00:19:17.216 --> 00:19:17.716
well.

00:19:18.636 --> 00:19:19.996
But now let's talk, let's take a

00:19:19.996 --> 00:19:22.616
look at another large source of

00:19:22.616 --> 00:19:24.226
crashes and mysterious memory

00:19:24.226 --> 00:19:25.196
corruptions, which is

00:19:25.196 --> 00:19:25.796
multithreading.

00:19:26.456 --> 00:19:27.866
And let's talk about Thread

00:19:27.866 --> 00:19:29.226
Sanitizer which detects those

00:19:29.266 --> 00:19:29.646
issues.

00:19:30.126 --> 00:19:33.586
So, as I said, Thread Sanitizer

00:19:33.586 --> 00:19:35.506
is able to find multithreading

00:19:35.506 --> 00:19:35.856
issues.

00:19:35.956 --> 00:19:37.336
For example, data races.

00:19:38.606 --> 00:19:39.996
However, these issues,

00:19:39.996 --> 00:19:41.826
multithreading issues, are

00:19:42.266 --> 00:19:43.556
usually very sensitive to

00:19:43.556 --> 00:19:44.106
timing.

00:19:44.616 --> 00:19:46.846
Which means that they are very

00:19:46.846 --> 00:19:47.826
hard to reproduce.

00:19:48.326 --> 00:19:50.716
So, Thread Sanitizer is not only

00:19:50.716 --> 00:19:52.676
able to find races where the two

00:19:52.676 --> 00:19:53.776
memory accesses actually

00:19:53.776 --> 00:19:55.416
collide, but it can also find

00:19:55.416 --> 00:19:57.846
races that did not manifest

00:19:57.846 --> 00:19:59.336
during that particular program

00:19:59.336 --> 00:19:59.546
run.

00:20:00.106 --> 00:20:02.986
Even if the racing memory

00:20:02.986 --> 00:20:04.546
accesses happened at different

00:20:04.546 --> 00:20:05.716
times but there's no

00:20:05.716 --> 00:20:06.966
synchronization between them,

00:20:07.346 --> 00:20:08.406
that is still a race.

00:20:08.576 --> 00:20:10.056
And Thread Sanitizer is able to

00:20:10.056 --> 00:20:10.476
find it.

00:20:11.496 --> 00:20:13.446
That's because the next time you

00:20:13.446 --> 00:20:15.806
run your application, the timing

00:20:15.806 --> 00:20:17.276
will be different and it might

00:20:17.276 --> 00:20:18.826
be just right to trigger a

00:20:18.826 --> 00:20:19.586
memory corruption.

00:20:20.196 --> 00:20:21.386
So, Thread Sanitizer is able to

00:20:21.386 --> 00:20:22.756
find races even when they do not

00:20:22.756 --> 00:20:23.206
manifest.

00:20:23.756 --> 00:20:27.666
The tool works on 64-bit macOS

00:20:27.666 --> 00:20:29.086
and 64-bit simulators.

00:20:29.086 --> 00:20:30.356
And if you want to learn more

00:20:30.356 --> 00:20:31.756
about the underlying technology,

00:20:31.756 --> 00:20:34.066
I recommend that you watch a

00:20:34.066 --> 00:20:36.296
WWDC from last year called

00:20:36.296 --> 00:20:37.546
Thread Sanitizer and static

00:20:37.546 --> 00:20:38.026
analysis.

00:20:40.816 --> 00:20:42.346
So, I mentioned data races.

00:20:42.906 --> 00:20:43.896
But let's see what they are.

00:20:45.796 --> 00:20:48.426
Any shared data, any mutable

00:20:48.426 --> 00:20:49.646
data that is shared between

00:20:49.646 --> 00:20:51.386
multiple threads needs access

00:20:51.386 --> 00:20:52.076
synchronization.

00:20:52.856 --> 00:20:53.546
If you are missing

00:20:53.546 --> 00:20:54.926
synchronization on your shared

00:20:55.076 --> 00:20:57.016
mutable variables, that means

00:20:57.016 --> 00:20:57.766
you have data races.

00:20:57.996 --> 00:20:59.366
And data races are undefined

00:20:59.366 --> 00:20:59.866
behavior.

00:21:01.326 --> 00:21:02.916
And in presence of data races,

00:21:02.916 --> 00:21:04.156
our programs can have memory

00:21:04.156 --> 00:21:05.956
corruptions and crashes and all

00:21:05.956 --> 00:21:07.416
of these problems apply to C

00:21:07.416 --> 00:21:08.956
languages but also to SWF code

00:21:08.956 --> 00:21:09.356
as well.

00:21:09.356 --> 00:21:10.856
So, let's take a look at an

00:21:10.856 --> 00:21:13.916
example in Swift.

00:21:14.066 --> 00:21:16.046
So, in this case we have a class

00:21:16.046 --> 00:21:18.456
called event log which just has

00:21:18.456 --> 00:21:20.946
a simple function called log

00:21:21.316 --> 00:21:22.466
that prints out some text

00:21:22.466 --> 00:21:23.596
message to the output.

00:21:24.496 --> 00:21:27.066
But it also tracks which was the

00:21:27.066 --> 00:21:28.666
last event source that called

00:21:28.666 --> 00:21:29.346
that log.

00:21:30.036 --> 00:21:31.446
And it saves that information

00:21:31.696 --> 00:21:33.556
into a stored property called

00:21:33.556 --> 00:21:35.896
last event stores which is an

00:21:35.896 --> 00:21:38.476
optional and at the beginning

00:21:38.476 --> 00:21:39.976
it's nil but as soon as someone

00:21:39.976 --> 00:21:42.606
calls log, it will be perfectly

00:21:42.606 --> 00:21:43.936
will be populated with that

00:21:43.936 --> 00:21:45.136
particular log source.

00:21:45.996 --> 00:21:46.866
And now let's say that we have

00:21:46.946 --> 00:21:48.556
two threads which are both

00:21:48.626 --> 00:21:50.476
trying to call that log at the

00:21:50.536 --> 00:21:51.046
same time.

00:21:51.376 --> 00:21:53.216
Let's say that thread one is our

00:21:53.216 --> 00:21:54.526
networking subsystem and it's

00:21:54.526 --> 00:21:55.656
logging that some download has

00:21:55.716 --> 00:21:56.046
finished.

00:21:56.736 --> 00:21:58.376
While the second thread, which

00:21:58.376 --> 00:21:59.416
represents our database

00:21:59.416 --> 00:22:01.276
subsystem, is logging that query

00:22:01.276 --> 00:22:01.886
is completed.

00:22:03.276 --> 00:22:04.316
That is a data race.

00:22:05.366 --> 00:22:06.816
Because we're accessing the same

00:22:06.816 --> 00:22:08.366
memory location at the same

00:22:08.366 --> 00:22:08.676
time.

00:22:09.966 --> 00:22:11.596
And Thread Sanitizer will warn

00:22:12.316 --> 00:22:13.326
about this.

00:22:13.526 --> 00:22:15.676
So, to fix this we need to

00:22:15.886 --> 00:22:17.326
introduce synchronization.

00:22:17.506 --> 00:22:18.696
And the easiest way to do that

00:22:19.146 --> 00:22:20.766
is by using a serial dispatch

00:22:20.796 --> 00:22:21.006
queue.

00:22:21.816 --> 00:22:22.886
Now, because this queue is

00:22:23.136 --> 00:22:25.526
serial, it will only execute one

00:22:25.526 --> 00:22:26.836
work item at a time.

00:22:27.936 --> 00:22:31.056
So, if we wrap the body of the

00:22:31.056 --> 00:22:33.276
log function into queue.asynch,

00:22:34.276 --> 00:22:35.296
this will provide the correct

00:22:35.296 --> 00:22:36.046
synchronization.

00:22:36.416 --> 00:22:38.166
And note that I am using asynch

00:22:38.166 --> 00:22:39.756
here because we don't need to

00:22:39.756 --> 00:22:41.306
wait for the result of this

00:22:41.306 --> 00:22:42.196
function to complete.

00:22:42.196 --> 00:22:43.986
Because this function does not

00:22:43.986 --> 00:22:45.136
provide any results so it

00:22:45.136 --> 00:22:46.146
doesn't make sense to wait for

00:22:46.146 --> 00:22:46.216
it.

00:22:46.756 --> 00:22:48.276
So, this not only fixes that

00:22:48.276 --> 00:22:49.776
race but it also improves

00:22:50.886 --> 00:22:52.036
[inaudible] because now whoever

00:22:52.036 --> 00:22:54.146
calls log will no longer need to

00:22:54.146 --> 00:22:55.336
wait for this printing to

00:22:55.336 --> 00:22:55.756
finish.

00:22:56.296 --> 00:22:59.856
And this way this whole class is

00:22:59.856 --> 00:23:01.186
now thread safe and we can use,

00:23:01.386 --> 00:23:02.966
we can call log from multiple

00:23:04.996 --> 00:23:05.516
threads.

00:23:05.516 --> 00:23:06.546
Dispatch queues, which are

00:23:06.546 --> 00:23:08.156
provided by Grand Central

00:23:08.156 --> 00:23:10.896
Dispatch or GCD for short, are

00:23:10.896 --> 00:23:12.136
readily available in Swift and

00:23:12.136 --> 00:23:13.326
they should be your first choice

00:23:13.326 --> 00:23:14.186
of synchronization.

00:23:14.836 --> 00:23:16.096
Even though there's other

00:23:16.096 --> 00:23:17.656
mechanisms of providing

00:23:17.686 --> 00:23:19.436
synchronization, GCD is very

00:23:19.436 --> 00:23:20.986
lightweight and it's very easy

00:23:20.986 --> 00:23:21.766
to use from Swift.

00:23:22.786 --> 00:23:24.416
A good idea is to associate your

00:23:24.416 --> 00:23:26.236
data with serial dispatch

00:23:26.276 --> 00:23:26.616
queues.

00:23:26.966 --> 00:23:28.506
And only accessing the data from

00:23:28.506 --> 00:23:30.206
those queues, which will

00:23:30.206 --> 00:23:32.136
guarantee that you're only using

00:23:32.166 --> 00:23:33.806
your data in a synchronized way.

00:23:34.336 --> 00:23:35.706
And if you'd like to learn more

00:23:35.706 --> 00:23:37.626
about how to use concurrency

00:23:37.626 --> 00:23:39.786
with GCD, I recommend that you

00:23:39.786 --> 00:23:41.816
watch another WWDC from last

00:23:41.816 --> 00:23:42.806
year called concurrent

00:23:42.846 --> 00:23:44.206
programming with GCD and Swift

00:23:44.266 --> 00:23:44.506
3.

00:23:45.046 --> 00:23:48.046
But now let's take a look at

00:23:48.046 --> 00:23:49.146
some new features that we have

00:23:49.146 --> 00:23:50.796
added to Thread Sanitizer in

00:23:50.826 --> 00:23:51.476
Xcode 9.

00:23:52.146 --> 00:23:53.886
It's now able to detect races on

00:23:53.886 --> 00:23:57.586
collections and also a whole new

00:23:57.586 --> 00:23:59.706
class of bugs that is specific

00:23:59.796 --> 00:24:02.206
to Swift code.

00:24:02.406 --> 00:24:04.336
Previously Thread Sanitizer was

00:24:04.416 --> 00:24:06.476
only able to find races on the

00:24:06.476 --> 00:24:08.346
raw memory accesses like we saw

00:24:08.346 --> 00:24:09.606
in the previous example where we

00:24:09.606 --> 00:24:10.826
were just directly accessing

00:24:11.076 --> 00:24:12.146
some stored property.

00:24:13.436 --> 00:24:14.616
But synchronization is often

00:24:14.616 --> 00:24:15.976
needed even for larger data

00:24:16.036 --> 00:24:16.466
structures.

00:24:16.466 --> 00:24:17.506
For example, collections.

00:24:18.236 --> 00:24:19.996
Consider this code example where

00:24:20.666 --> 00:24:22.256
in Objective C we are using an

00:24:22.256 --> 00:24:23.886
instance of an NS mutable

00:24:23.886 --> 00:24:24.346
dictionary.

00:24:25.066 --> 00:24:26.526
And two threads are using the

00:24:26.526 --> 00:24:27.226
same instance.

00:24:27.296 --> 00:24:28.986
Let's say thread one is looking

00:24:28.986 --> 00:24:30.316
up a value in the dictionary

00:24:30.596 --> 00:24:31.636
while the second thread is

00:24:31.676 --> 00:24:32.816
trying to write into it.

00:24:33.706 --> 00:24:35.426
So, it is a problem and newly in

00:24:35.426 --> 00:24:36.896
Xcode 9 we are now able to

00:24:36.896 --> 00:24:38.146
detect this race.

00:24:41.196 --> 00:24:42.986
Races in collection are a very

00:24:42.986 --> 00:24:43.736
common mistake.

00:24:44.896 --> 00:24:46.866
So, in Xcode 9 we are now able

00:24:46.866 --> 00:24:48.516
to detect them in both Objective

00:24:48.616 --> 00:24:49.686
C and Swift.

00:24:50.306 --> 00:24:51.696
Note that this requires that you

00:24:51.696 --> 00:24:53.506
are using macOS, High Sierra and

00:24:53.506 --> 00:24:54.166
iOS 11.

00:24:54.456 --> 00:24:55.806
But we are able to detect races

00:24:55.806 --> 00:24:57.466
on NS mutable array and NS

00:24:57.506 --> 00:24:59.286
mutable dictionary and also on

00:24:59.286 --> 00:25:00.156
Swift array and Swift

00:25:00.156 --> 00:25:00.636
dictionary.

00:25:01.666 --> 00:25:02.966
And with that, I'd like to show

00:25:02.966 --> 00:25:05.000
you how this works in practice.

00:25:20.176 --> 00:25:22.326
So, I was able to get the source

00:25:22.386 --> 00:25:25.246
code of a very old version of

00:25:25.246 --> 00:25:27.636
the WWDC app before it adopted

00:25:27.716 --> 00:25:28.266
Swift code.

00:25:28.396 --> 00:25:30.376
So, this version that I have is

00:25:30.376 --> 00:25:31.416
still completely written in

00:25:31.416 --> 00:25:33.066
Objective C, as you can tell

00:25:33.066 --> 00:25:34.686
from this copyright header.

00:25:34.686 --> 00:25:38.316
It was mostly written in 2011.

00:25:38.396 --> 00:25:39.556
So, because it was written

00:25:40.386 --> 00:25:41.776
several years ago, it's using

00:25:41.816 --> 00:25:43.486
some outdated concepts like an

00:25:43.486 --> 00:25:44.596
explicit threat for

00:25:44.596 --> 00:25:46.126
synchronization instead of GCD.

00:25:46.436 --> 00:25:47.346
But I'd like to show you that

00:25:47.696 --> 00:25:49.236
thread sanitizer works just fine

00:25:49.236 --> 00:25:50.806
even with other synchronization

00:25:50.806 --> 00:25:51.356
mechanisms.

00:25:52.026 --> 00:25:54.946
So, this file that I'm showing

00:25:54.946 --> 00:25:56.956
to you is implementing a class

00:25:56.956 --> 00:25:59.236
called WWDC URLConnection, which

00:25:59.236 --> 00:26:01.206
serves as a base class for all

00:26:01.206 --> 00:26:02.466
networking done from this

00:26:02.466 --> 00:26:03.086
application.

00:26:03.536 --> 00:26:04.996
And what I did is that I have

00:26:05.336 --> 00:26:07.356
planted a multithreading bug in

00:26:07.356 --> 00:26:07.826
this code.

00:26:08.356 --> 00:26:09.306
And let's see if the Thread

00:26:09.386 --> 00:26:10.816
Sanitizer can find this bug.

00:26:12.006 --> 00:26:13.406
So, first let me make sure that

00:26:13.406 --> 00:26:14.616
I have Thread Sanitizer enabled

00:26:14.676 --> 00:26:17.186
by going to product scheme, edit

00:26:17.186 --> 00:26:17.636
scheme.

00:26:18.356 --> 00:26:20.746
Which brings out, brings the

00:26:20.846 --> 00:26:21.446
scheme editor.

00:26:21.566 --> 00:26:23.046
And you'll see that I have

00:26:23.116 --> 00:26:24.166
Thread Sanitizer enabled.

00:26:24.656 --> 00:26:26.666
So, let's now run this app in

00:26:26.666 --> 00:26:27.326
the simulator.

00:26:27.886 --> 00:26:31.926
And as soon as the app launches

00:26:31.926 --> 00:26:33.056
in the simulator, it will

00:26:33.056 --> 00:26:35.076
already initiate several network

00:26:35.076 --> 00:26:35.586
connections.

00:26:37.006 --> 00:26:38.596
So, it should already exercise

00:26:38.886 --> 00:26:40.236
this file that I'm showing you.

00:26:41.116 --> 00:26:42.826
And you can notice that Xcode is

00:26:42.826 --> 00:26:45.666
already reporting a race in the

00:26:45.666 --> 00:26:46.426
issue navigator.

00:26:47.026 --> 00:26:49.306
So, this issue is reporting that

00:26:49.306 --> 00:26:49.996
we have a race.

00:26:49.996 --> 00:26:51.346
So, let me click it so we can

00:26:51.346 --> 00:26:52.826
get to the line of code that

00:26:52.886 --> 00:26:54.206
contains this race.

00:26:54.466 --> 00:26:55.636
So, in this case we see that we

00:26:55.636 --> 00:26:58.126
are adding some object into a

00:26:58.126 --> 00:26:58.806
mutable array.

00:27:00.296 --> 00:27:01.996
The purpose of this code is to

00:27:01.996 --> 00:27:03.416
maintain a list of active,

00:27:03.466 --> 00:27:04.696
currently active connections.

00:27:04.696 --> 00:27:06.286
So, we are tracking that for

00:27:06.286 --> 00:27:07.186
debugging purposes.

00:27:08.626 --> 00:27:10.266
So, as soon as we're creating

00:27:10.266 --> 00:27:11.886
some new URL connection, we will

00:27:11.886 --> 00:27:12.876
add it to this list.

00:27:14.056 --> 00:27:15.166
But this can happen from any

00:27:15.166 --> 00:27:15.376
thread.

00:27:15.686 --> 00:27:17.616
Any thread can create a new URL

00:27:17.616 --> 00:27:18.116
connection.

00:27:18.836 --> 00:27:19.806
And if we take a look at the

00:27:19.806 --> 00:27:21.016
details of the issue one more

00:27:21.016 --> 00:27:22.536
time in the navigator, we will

00:27:22.606 --> 00:27:23.676
see that that is the case.

00:27:23.726 --> 00:27:25.236
Because there's thread three

00:27:25.486 --> 00:27:26.926
trying to call add object.

00:27:27.496 --> 00:27:29.166
And thread five, also trying to

00:27:29.166 --> 00:27:31.246
call add object into the same

00:27:31.636 --> 00:27:32.306
mutable array.

00:27:33.256 --> 00:27:34.266
And if we take a look at the

00:27:34.336 --> 00:27:36.496
callers of that API, we will see

00:27:36.496 --> 00:27:39.196
that they all both point to the

00:27:39.196 --> 00:27:40.086
same line of code.

00:27:41.076 --> 00:27:42.026
So, that is a problem.

00:27:42.026 --> 00:27:44.076
We are accessing this mutable

00:27:44.076 --> 00:27:45.596
array from multiple threads

00:27:45.596 --> 00:27:46.776
without any synchronization.

00:27:47.856 --> 00:27:49.316
And to fix it, I can actually

00:27:49.686 --> 00:27:50.616
fix it very easily.

00:27:50.676 --> 00:27:52.816
Because I have noticed that the

00:27:52.866 --> 00:27:54.456
code right after this line is

00:27:54.456 --> 00:27:55.286
already doing some

00:27:55.286 --> 00:27:56.076
synchronization.

00:27:56.156 --> 00:27:57.626
It's using this API called

00:27:57.696 --> 00:27:59.756
perform block that dispatches

00:27:59.756 --> 00:28:01.336
some work onto a specific

00:28:01.376 --> 00:28:01.626
thread.

00:28:01.846 --> 00:28:02.816
In this case, it's called

00:28:03.056 --> 00:28:03.716
connection thread.

00:28:04.366 --> 00:28:05.716
So, which is an explicit thread

00:28:05.756 --> 00:28:06.536
that is used for

00:28:06.536 --> 00:28:07.326
synchronization.

00:28:07.856 --> 00:28:09.546
And since it's a single thread,

00:28:09.596 --> 00:28:11.926
it will provide synchronization

00:28:11.926 --> 00:28:13.416
exactly with the work serially

00:28:13.796 --> 00:28:14.896
simply because it's a single

00:28:14.896 --> 00:28:15.756
thread and there's no

00:28:16.106 --> 00:28:16.586
[inaudible] going on.

00:28:17.316 --> 00:28:18.986
So, to fix this I can just move

00:28:19.586 --> 00:28:22.356
this call to add object into

00:28:22.356 --> 00:28:24.016
that synchronized block like

00:28:24.016 --> 00:28:26.006
this and that should fix our

00:28:26.006 --> 00:28:26.286
race.

00:28:26.286 --> 00:28:28.456
Because now we will also only be

00:28:28.456 --> 00:28:30.006
accessing the active connection

00:28:30.266 --> 00:28:31.926
array within the synchronized

00:28:31.926 --> 00:28:33.626
block which is only executed

00:28:33.626 --> 00:28:34.096
serially.

00:28:34.316 --> 00:28:35.826
So, now let's run the app in the

00:28:35.826 --> 00:28:37.746
simulator one more time to see

00:28:37.746 --> 00:28:39.276
if that fixes our race.

00:28:40.876 --> 00:28:41.866
And again, once the app

00:28:41.866 --> 00:28:43.996
launches, it already triggers

00:28:43.996 --> 00:28:45.206
several network connections.

00:28:45.626 --> 00:28:47.156
So now when it's up and running

00:28:47.756 --> 00:28:49.236
we'll see that Xcode is no

00:28:49.236 --> 00:28:51.326
longer reporting any Runtime

00:28:54.576 --> 00:28:54.766
issues.

00:28:56.516 --> 00:29:01.016
[ Applause ]

00:29:01.516 --> 00:29:03.016
So, you've seen how Thread

00:29:03.016 --> 00:29:04.816
Sanitizer finds a race in

00:29:04.816 --> 00:29:05.646
Objective C code.

00:29:06.456 --> 00:29:07.056
What about Swift?

00:29:08.476 --> 00:29:09.656
The same detection works in

00:29:09.656 --> 00:29:10.696
Swift code as well.

00:29:11.006 --> 00:29:12.306
So, in this case if we have an

00:29:12.406 --> 00:29:14.626
array of strings and we have two

00:29:14.626 --> 00:29:16.046
threads, let's say one thread is

00:29:16.046 --> 00:29:17.246
looking up the value from this

00:29:17.466 --> 00:29:19.496
array while some other thread is

00:29:19.496 --> 00:29:20.056
writing to it.

00:29:20.946 --> 00:29:22.116
We'll detect this race and

00:29:22.116 --> 00:29:23.756
Thread Sanitizer will find this.

00:29:25.266 --> 00:29:26.936
Fixing this again can involve

00:29:26.976 --> 00:29:28.706
using a serial dispatch queue

00:29:29.236 --> 00:29:30.696
and then making sure that the

00:29:30.696 --> 00:29:33.766
only access that array within

00:29:33.846 --> 00:29:34.746
some synchronized blocks.

00:29:34.886 --> 00:29:36.536
So, in this case thread one,

00:29:36.646 --> 00:29:39.886
we'll be using queue.synch which

00:29:40.666 --> 00:29:41.836
is necessary in this case

00:29:41.836 --> 00:29:44.516
because we need the output value

00:29:44.516 --> 00:29:45.536
from this computation to

00:29:45.536 --> 00:29:46.026
continue.

00:29:46.026 --> 00:29:47.526
We need that lookup in the

00:29:47.526 --> 00:29:49.126
dictionary to give us an answer.

00:29:49.126 --> 00:29:50.336
So, we need to wait for the

00:29:50.336 --> 00:29:50.716
result.

00:29:50.786 --> 00:29:52.266
So, I'm using queue.synch here.

00:29:52.656 --> 00:29:54.196
But for the second thread, I can

00:29:54.196 --> 00:29:56.136
use queue.asynch because that

00:29:56.136 --> 00:29:58.046
block is not providing any

00:29:58.046 --> 00:29:59.516
output so we don't need to wait

00:29:59.516 --> 00:30:01.996
for it to finish.

00:30:03.316 --> 00:30:04.466
So, you might have noticed that

00:30:04.466 --> 00:30:06.086
in the previous example I did

00:30:06.086 --> 00:30:07.636
not call the problem a data

00:30:07.636 --> 00:30:07.866
race.

00:30:08.496 --> 00:30:10.336
Instead, the warning said it's a

00:30:10.426 --> 00:30:11.436
Swift access race.

00:30:13.026 --> 00:30:14.846
Swift access races are

00:30:14.846 --> 00:30:16.286
violations of a more general

00:30:16.286 --> 00:30:18.336
rule which applies to all

00:30:18.336 --> 00:30:20.176
structs, not just arrays and

00:30:20.176 --> 00:30:21.616
dictionaries but all structs.

00:30:21.616 --> 00:30:22.836
Even the ones that you define.

00:30:23.636 --> 00:30:24.926
So, this is a new rule that is

00:30:25.216 --> 00:30:26.396
now present in Swift 4.

00:30:27.256 --> 00:30:29.226
And part of it states that

00:30:29.276 --> 00:30:31.096
mutating methods on structs

00:30:31.636 --> 00:30:33.026
require that you have exclusive

00:30:33.076 --> 00:30:34.276
access to the whole struct.

00:30:35.766 --> 00:30:37.036
This does not apply to classes

00:30:37.036 --> 00:30:38.196
because classes don't have

00:30:38.196 --> 00:30:39.046
mutating methods.

00:30:39.416 --> 00:30:40.996
And any methods on a class can

00:30:41.366 --> 00:30:43.106
change any property and it only

00:30:43.106 --> 00:30:45.536
needs to have exclusive access

00:30:45.576 --> 00:30:47.136
to the properties that the

00:30:47.136 --> 00:30:47.836
method changes.

00:30:48.346 --> 00:30:51.566
So, this new rule that's applied

00:30:51.566 --> 00:30:54.116
to structs is now being even

00:30:54.116 --> 00:30:55.546
enforced by the compiler, both

00:30:55.606 --> 00:30:57.196
statically at compile time and

00:30:57.196 --> 00:30:58.506
dynamically at run time.

00:30:59.656 --> 00:31:00.926
But this enforcement mostly

00:31:00.926 --> 00:31:02.016
applies to single-threaded

00:31:02.016 --> 00:31:02.656
violations.

00:31:02.996 --> 00:31:04.256
And Thread Sanitizer is here to

00:31:04.256 --> 00:31:05.556
help you with the multithreaded

00:31:05.556 --> 00:31:05.946
cases.

00:31:06.256 --> 00:31:07.656
And if you'd like to learn more

00:31:07.656 --> 00:31:08.866
about these new rules in Swift

00:31:08.976 --> 00:31:10.446
4, I recommend that you watch

00:31:10.876 --> 00:31:12.286
the What's New in Swift session.

00:31:13.236 --> 00:31:15.376
And explicitly a session that

00:31:15.376 --> 00:31:16.696
was called Exclusive Access to

00:31:16.696 --> 00:31:18.056
Memory which describes what the

00:31:18.056 --> 00:31:18.926
new rules are.

00:31:18.926 --> 00:31:21.086
And it also talks about what is

00:31:21.086 --> 00:31:21.586
enforced.

00:31:22.716 --> 00:31:23.706
But let's take a look at one

00:31:23.706 --> 00:31:24.346
more example.

00:31:25.626 --> 00:31:26.836
Let's say that a friend has

00:31:26.836 --> 00:31:28.746
asked me to write some software

00:31:28.746 --> 00:31:29.576
for his spaceship.

00:31:30.616 --> 00:31:32.016
So, we'll have this struct which

00:31:32.066 --> 00:31:33.286
describes the location of this

00:31:33.356 --> 00:31:33.866
spaceship.

00:31:34.396 --> 00:31:35.446
So, it will have some stored

00:31:35.446 --> 00:31:36.896
properties to describe the

00:31:36.896 --> 00:31:39.116
coordinates in both space and

00:31:39.146 --> 00:31:39.926
time of course.

00:31:40.736 --> 00:31:41.916
And will have some methods on

00:31:41.916 --> 00:31:43.396
this struct as well.

00:31:43.886 --> 00:31:45.106
Because the spaceship can

00:31:45.106 --> 00:31:46.376
teleport to a different planet.

00:31:46.656 --> 00:31:47.986
It can also fly to a different

00:31:47.986 --> 00:31:48.966
city on the same planet.

00:31:49.696 --> 00:31:51.656
And of course it can travel in

00:31:52.796 --> 00:31:52.916
time.

00:31:53.126 --> 00:31:54.416
And since these methods are

00:31:54.416 --> 00:31:56.006
changing the coordinates, they

00:31:56.006 --> 00:31:57.246
need to be mutating methods.

00:31:57.756 --> 00:31:58.676
And that also means that the

00:31:58.676 --> 00:31:59.856
rules that I just mentioned

00:31:59.856 --> 00:32:00.826
apply to these methods.

00:32:01.486 --> 00:32:02.586
So, if you have two threads,

00:32:02.586 --> 00:32:04.946
which are both trying to change

00:32:04.946 --> 00:32:06.246
the location of our spaceship.

00:32:06.246 --> 00:32:07.436
Let's say thread one is trying

00:32:07.436 --> 00:32:09.216
to teleport it to a different

00:32:09.216 --> 00:32:11.196
planet while the second thread

00:32:11.196 --> 00:32:12.546
is trying to move it in time.

00:32:13.226 --> 00:32:15.686
That is a Swift access race.

00:32:16.286 --> 00:32:18.626
And notice that it doesn't

00:32:18.626 --> 00:32:20.496
matter which stored properties

00:32:20.546 --> 00:32:22.556
are these functions, these

00:32:22.556 --> 00:32:24.596
methods accessing or changing.

00:32:25.246 --> 00:32:27.176
Even if teleport only changes X,

00:32:27.176 --> 00:32:29.226
Y and Z while the other method

00:32:29.226 --> 00:32:31.756
only changes time, it's still a

00:32:31.756 --> 00:32:32.586
Swift access race.

00:32:33.236 --> 00:32:35.066
The rules simply state that you

00:32:35.066 --> 00:32:36.896
need to have exclusive access to

00:32:36.896 --> 00:32:38.026
the whole object when you are

00:32:38.026 --> 00:32:39.496
calling a mutating function,

00:32:39.496 --> 00:32:41.066
sorry, to the whole struct.

00:32:42.906 --> 00:32:44.076
It's also important to

00:32:44.076 --> 00:32:46.106
understand that if we try to fix

00:32:46.106 --> 00:32:48.426
this problem by introducing some

00:32:48.426 --> 00:32:50.076
synchronization into that

00:32:50.176 --> 00:32:50.466
struct.

00:32:50.746 --> 00:32:51.846
Let's say that we will try to

00:32:52.266 --> 00:32:53.586
use a dispatch queue inside of

00:32:53.586 --> 00:32:54.836
that struct and protecting the

00:32:54.836 --> 00:32:57.526
bodies of the mutating functions

00:32:57.526 --> 00:32:59.546
inside them, that's not enough.

00:32:59.976 --> 00:33:02.116
That's not a correct fix and

00:33:02.116 --> 00:33:03.646
it's still a violation and still

00:33:03.646 --> 00:33:04.856
a Swift access race.

00:33:05.236 --> 00:33:06.456
Because we need to have that

00:33:06.456 --> 00:33:07.836
exclusive access to the struct

00:33:08.516 --> 00:33:10.056
in order to call that mutating

00:33:10.056 --> 00:33:10.526
function.

00:33:10.646 --> 00:33:11.816
And it's not enough to try to

00:33:11.816 --> 00:33:13.126
introduce the synchronization

00:33:13.216 --> 00:33:14.306
inside that function.

00:33:14.936 --> 00:33:18.986
The correct fix is to move the

00:33:18.986 --> 00:33:21.156
synchronization to the caller of

00:33:21.156 --> 00:33:22.166
those mutating methods.

00:33:23.036 --> 00:33:24.026
So, let's say that we have a

00:33:24.086 --> 00:33:25.976
class that describes the whole

00:33:26.036 --> 00:33:26.486
spaceship.

00:33:27.786 --> 00:33:28.816
And it's a good idea to use a

00:33:28.816 --> 00:33:30.646
class here because this

00:33:30.646 --> 00:33:32.596
spaceship has some identity.

00:33:32.596 --> 00:33:33.516
It doesn't make sense to make

00:33:33.516 --> 00:33:34.086
copies of it.

00:33:34.806 --> 00:33:36.466
So, in this case the spaceship

00:33:36.466 --> 00:33:39.046
can protect the location stored

00:33:39.076 --> 00:33:40.256
property with a queue.

00:33:40.696 --> 00:33:42.066
And if we make sure that the

00:33:42.066 --> 00:33:44.356
methods are only accessing that

00:33:44.456 --> 00:33:46.156
struct within synchronized

00:33:46.156 --> 00:33:48.146
blocks such as queue.synch here.

00:33:48.416 --> 00:33:50.106
That will make the whole class

00:33:50.856 --> 00:33:53.256
thread safe.

00:33:53.456 --> 00:33:55.146
So, we've learned that you need

00:33:55.146 --> 00:33:57.026
to synchronize access to your

00:33:57.086 --> 00:33:58.166
shared mutable variable.

00:33:58.656 --> 00:33:59.976
And you can use GCD for that

00:34:00.016 --> 00:34:01.996
task and it's often as simple as

00:34:01.996 --> 00:34:03.456
just associating your data with

00:34:03.736 --> 00:34:05.386
some serial queue and then only

00:34:05.386 --> 00:34:06.956
accessing the data from that

00:34:07.006 --> 00:34:07.246
queue.

00:34:08.505 --> 00:34:09.996
Thread Sanitizer is an amazing

00:34:10.045 --> 00:34:11.426
tool that helps find you the

00:34:11.426 --> 00:34:12.755
places where you are missing the

00:34:12.755 --> 00:34:13.556
synchronization.

00:34:14.166 --> 00:34:15.646
Which is, you know, a problem

00:34:15.646 --> 00:34:18.406
that is very easy to make.

00:34:18.616 --> 00:34:20.335
And with that, I'm very excited

00:34:20.335 --> 00:34:21.826
to tell you that we're, this

00:34:21.826 --> 00:34:22.956
year, introducing another

00:34:22.956 --> 00:34:24.746
sanitizer to help you catch even

00:34:24.746 --> 00:34:25.636
more types of bugs.

00:34:25.735 --> 00:34:27.116
And here's Verdant to tell you

00:34:27.116 --> 00:34:28.346
about it.

00:34:29.516 --> 00:34:32.976
[ Applause ]

00:34:33.476 --> 00:34:34.000
It's all yours.

00:34:37.376 --> 00:34:38.235
>> All right.

00:34:39.016 --> 00:34:41.016
Hello. My name is Verdant and I

00:34:41.016 --> 00:34:42.096
work on compilers.

00:34:42.096 --> 00:34:43.676
And I'm really happy to tell you

00:34:44.065 --> 00:34:45.985
that this year in Xcode 9 we're

00:34:45.985 --> 00:34:48.085
releasing a new tool, Undefined

00:34:48.085 --> 00:34:49.196
Behavior Sanitizer.

00:34:49.406 --> 00:34:50.826
And I'm sure it's going to help

00:34:50.826 --> 00:34:54.266
you catch lots more bugs.

00:34:55.525 --> 00:34:57.156
Okay. What is Undefined Behavior

00:34:57.156 --> 00:34:57.816
Sanitizer?

00:34:58.626 --> 00:34:59.916
Well, just like the other

00:34:59.916 --> 00:35:01.386
Runtime tools you've seen so far

00:35:01.386 --> 00:35:03.126
in this talk, it's a Runtime bug

00:35:03.126 --> 00:35:03.766
finder.

00:35:04.396 --> 00:35:06.656
Now, as the name suggests,

00:35:06.686 --> 00:35:08.366
Undefined Behavior Sanitizer

00:35:08.366 --> 00:35:10.436
detects undefined behavior for

00:35:10.436 --> 00:35:10.736
you.

00:35:11.366 --> 00:35:13.436
But so does Address Sanitizer

00:35:13.676 --> 00:35:15.896
and so does a Thread Sanitizer.

00:35:17.136 --> 00:35:18.746
What's special about Undefined

00:35:18.746 --> 00:35:20.526
Behavior Sanitizer is that it

00:35:20.526 --> 00:35:22.556
specializes in checking unsafe

00:35:22.556 --> 00:35:24.036
constructs in the C language

00:35:24.036 --> 00:35:24.526
family.

00:35:25.116 --> 00:35:27.506
It's compatible with other

00:35:27.506 --> 00:35:28.366
Runtime tools.

00:35:28.476 --> 00:35:29.926
It works on all of our devices

00:35:29.926 --> 00:35:30.666
and platforms.

00:35:31.326 --> 00:35:32.706
And if you're interested in

00:35:32.706 --> 00:35:34.186
learning more about undefined

00:35:34.186 --> 00:35:36.066
behavior, I highly recommend

00:35:36.206 --> 00:35:37.326
that you check out tomorrow

00:35:37.326 --> 00:35:38.786
morning's talk about

00:35:38.876 --> 00:35:40.256
understanding undefined

00:35:40.256 --> 00:35:42.216
behavior, 9 am.

00:35:42.546 --> 00:35:44.156
That talk will go over what

00:35:44.156 --> 00:35:45.816
undefined behavior is.

00:35:46.626 --> 00:35:47.716
Why it exists.

00:35:47.716 --> 00:35:48.696
And how it can affect your

00:35:48.696 --> 00:35:49.546
applications.

00:35:49.606 --> 00:35:54.186
Now, I've got some good news for

00:35:57.276 --> 00:35:57.386
you.

00:35:57.596 --> 00:35:59.296
Undefined Behavior Sanitizer can

00:35:59.296 --> 00:36:01.746
detect over 15 different kinds

00:36:01.746 --> 00:36:02.546
of new issues.

00:36:03.476 --> 00:36:05.356
Now, this is going to be great

00:36:05.356 --> 00:36:07.046
for productivity but for this

00:36:07.046 --> 00:36:08.826
talk, just to give you a taste

00:36:08.876 --> 00:36:09.996
for what Undefined Behavior

00:36:09.996 --> 00:36:12.426
Sanitizer can actually catch and

00:36:12.426 --> 00:36:13.576
how it works, we're just going

00:36:13.576 --> 00:36:15.026
to focus on three issues.

00:36:15.336 --> 00:36:17.086
Integer overflow, alignment

00:36:17.086 --> 00:36:19.076
violations and the nonnull

00:36:19.076 --> 00:36:20.346
return value violation.

00:36:20.886 --> 00:36:23.406
Let's start with integer

00:36:23.406 --> 00:36:23.876
overflow.

00:36:25.626 --> 00:36:27.336
Integer overflow occurs when

00:36:27.336 --> 00:36:28.266
you've got an arithmetic

00:36:28.266 --> 00:36:30.506
expression and its result is too

00:36:30.506 --> 00:36:32.036
big to fit in a variable.

00:36:32.956 --> 00:36:34.916
Now, if this sort of bug occurs

00:36:34.916 --> 00:36:36.986
in an indexing expression, such

00:36:36.986 --> 00:36:38.336
as, like, if you're indexing

00:36:38.336 --> 00:36:40.226
into a buffer or in an

00:36:40.226 --> 00:36:41.556
expression used to compute the

00:36:41.556 --> 00:36:43.246
size of the buffer, it can

00:36:43.246 --> 00:36:45.166
actually be a serious security

00:36:45.166 --> 00:36:46.776
hole and it can be exploited.

00:36:48.316 --> 00:36:50.206
Integer overflow can also just

00:36:50.206 --> 00:36:51.356
sometimes lead to surprising

00:36:51.356 --> 00:36:51.976
results.

00:36:52.316 --> 00:36:53.676
Like, for example there

00:36:54.506 --> 00:36:56.856
additions you can perform that,

00:36:57.566 --> 00:36:58.696
well, take a look.

00:36:59.196 --> 00:37:00.696
If you've got int max and you

00:37:00.696 --> 00:37:02.876
add 1 to it, you actually don't

00:37:02.926 --> 00:37:04.966
get a number that's bigger than

00:37:04.966 --> 00:37:06.026
what you started out with, which

00:37:06.026 --> 00:37:06.966
can be really confusing.

00:37:07.486 --> 00:37:10.446
Now, not all kinds of integer

00:37:10.446 --> 00:37:12.336
overflow are undefined behavior.

00:37:12.336 --> 00:37:14.506
In fact, some kinds of overflow

00:37:14.506 --> 00:37:16.286
actually have defined semantics,

00:37:16.286 --> 00:37:17.826
which is unsigned integer

00:37:17.826 --> 00:37:18.366
overflow.

00:37:19.466 --> 00:37:21.346
However, unsigned integer

00:37:21.346 --> 00:37:22.626
overflow can still be really

00:37:22.626 --> 00:37:23.306
surprising.

00:37:23.396 --> 00:37:25.116
So, we really recommend that you

00:37:25.156 --> 00:37:27.196
opt into this check.

00:37:27.386 --> 00:37:28.366
I'll show you how to do that at

00:37:28.366 --> 00:37:31.126
the tail end of this topic.

00:37:31.276 --> 00:37:33.456
But with that, let's go ahead

00:37:33.456 --> 00:37:34.446
and jump into a demo.

00:37:35.186 --> 00:37:37.216
All right, now what I've got up

00:37:37.216 --> 00:37:38.766
here is a function that all of

00:37:38.766 --> 00:37:40.006
us have probably written really

00:37:40.006 --> 00:37:40.736
often.

00:37:40.776 --> 00:37:41.886
It's an average function.

00:37:42.276 --> 00:37:43.986
So, it takes in an array of

00:37:43.986 --> 00:37:45.426
integers and a length.

00:37:45.846 --> 00:37:47.016
It sets up an accumulator.

00:37:47.296 --> 00:37:48.796
It iterates through your array,

00:37:49.196 --> 00:37:50.556
adds everything up and divides.

00:37:50.986 --> 00:37:51.816
So, it should give you an

00:37:51.816 --> 00:37:52.276
average.

00:37:53.216 --> 00:37:54.226
Now, we're interested in writing

00:37:54.226 --> 00:37:55.916
a test for this so that we know

00:37:55.916 --> 00:37:57.076
that it behaves correctly.

00:37:58.126 --> 00:37:58.946
So, here we go.

00:37:59.066 --> 00:37:59.966
Let's take a look at the test

00:37:59.966 --> 00:38:00.446
that we've got.

00:38:01.366 --> 00:38:03.046
Test nonnegative average.

00:38:04.206 --> 00:38:05.076
The test is really simple.

00:38:05.306 --> 00:38:06.576
So, we're going to create an

00:38:06.576 --> 00:38:08.236
array of 10,000 integers.

00:38:09.056 --> 00:38:10.186
We're going to populate the

00:38:10.186 --> 00:38:11.946
array with pseudo random

00:38:12.016 --> 00:38:14.156
nonnegative integers and just

00:38:14.156 --> 00:38:15.976
check, just do a simple sanity

00:38:15.976 --> 00:38:16.166
check.

00:38:16.706 --> 00:38:18.056
Just check that the average that

00:38:18.056 --> 00:38:19.896
we get back is also nonnegative.

00:38:20.136 --> 00:38:21.546
That's this assertion right

00:38:21.676 --> 00:38:21.856
here.

00:38:23.266 --> 00:38:24.996
All right, so let's go ahead and

00:38:24.996 --> 00:38:25.566
run our test.

00:38:25.936 --> 00:38:27.936
Let's go up to here.

00:38:28.026 --> 00:38:30.296
Hit play. Build succeeded.

00:38:31.586 --> 00:38:33.686
And nothing really happened.

00:38:33.686 --> 00:38:34.536
We just finished running our

00:38:34.536 --> 00:38:36.106
program, the assertion passed.

00:38:36.346 --> 00:38:37.316
Everything seems great.

00:38:38.356 --> 00:38:40.566
Now, let's just change one small

00:38:40.646 --> 00:38:41.036
thing.

00:38:41.326 --> 00:38:42.766
And this is going to illustrate

00:38:42.766 --> 00:38:43.956
why undefined behavior and

00:38:43.956 --> 00:38:45.166
integer overflow in particular

00:38:45.166 --> 00:38:45.966
can be really tricky.

00:38:46.406 --> 00:38:47.776
Let's change the array length

00:38:48.126 --> 00:38:50.636
from 10,000 to 10,0001.

00:38:51.256 --> 00:38:53.526
Save it. Go back.

00:38:54.936 --> 00:38:55.936
And run our program.

00:38:56.806 --> 00:39:00.636
Uh oh. Insertion5 failure.

00:39:01.296 --> 00:39:03.976
Now, this is really confusing.

00:39:03.976 --> 00:39:04.996
So, you know, I've got

00:39:04.996 --> 00:39:06.306
non-negative integers.

00:39:06.816 --> 00:39:08.596
I wrote a really sort of

00:39:08.596 --> 00:39:10.316
straightforward function that

00:39:10.676 --> 00:39:11.666
sums them up.

00:39:11.786 --> 00:39:13.116
But all of a sudden I'm getting

00:39:13.116 --> 00:39:14.516
this weird failure, this really

00:39:14.586 --> 00:39:15.716
basic test that it isn't

00:39:15.716 --> 00:39:16.166
passing.

00:39:17.416 --> 00:39:19.116
Undefined Behavior Sanitizer can

00:39:19.116 --> 00:39:20.036
be really useful in these

00:39:20.036 --> 00:39:21.546
situations and clarify what the

00:39:21.546 --> 00:39:22.506
actual issue is.

00:39:22.506 --> 00:39:24.216
So, we're going to turn it on

00:39:24.396 --> 00:39:25.426
just like Kuba has shown you.

00:39:25.676 --> 00:39:27.596
We go into the scheme editor

00:39:27.596 --> 00:39:29.286
next to it, the diagnostics tab.

00:39:30.936 --> 00:39:32.126
Click the right check box.

00:39:32.666 --> 00:39:34.136
And we're good to go.

00:39:35.206 --> 00:39:37.516
We can hit run again, rebuild

00:39:37.516 --> 00:39:39.006
but Undefined Behavior Sanitizer

00:39:39.006 --> 00:39:39.626
turned on.

00:39:40.176 --> 00:39:41.586
And here we are.

00:39:42.596 --> 00:39:45.246
So, Undefined Behavior Sanitizer

00:39:45.346 --> 00:39:47.576
has zoomed in on the exact cause

00:39:47.576 --> 00:39:49.256
of the issue for us and it's

00:39:49.286 --> 00:39:50.386
done so in a relatively

00:39:50.386 --> 00:39:51.026
drama-free way.

00:39:51.326 --> 00:39:53.206
It tells us what happened.

00:39:53.576 --> 00:39:54.726
Assigned integer overflow.

00:39:55.126 --> 00:39:56.296
And it tells us the values

00:39:56.296 --> 00:39:57.456
involved in the overflow.

00:39:57.596 --> 00:39:59.776
As we can see, they're gigantic.

00:39:59.836 --> 00:40:01.246
There's no way that these two

00:40:01.246 --> 00:40:02.926
values or the sum of them can

00:40:02.926 --> 00:40:04.666
fit inside of a 32-bit integer.

00:40:04.666 --> 00:40:06.656
And what ended up happening was

00:40:06.656 --> 00:40:08.146
that whatever garbled result we

00:40:08.146 --> 00:40:11.166
got ended up being, you know, in

00:40:11.166 --> 00:40:12.816
two complement representation a

00:40:12.816 --> 00:40:13.756
negative number.

00:40:15.176 --> 00:40:17.506
So, you can fix this problem in

00:40:17.506 --> 00:40:18.236
a couple different ways.

00:40:18.746 --> 00:40:21.156
The two I would recommend is to

00:40:21.226 --> 00:40:22.646
either use a different algorithm

00:40:22.646 --> 00:40:24.416
for computing your average or if

00:40:24.416 --> 00:40:25.246
you're in a pinch, just

00:40:25.336 --> 00:40:26.966
constrain the set of inputs into

00:40:26.966 --> 00:40:28.856
your average function so that

00:40:28.856 --> 00:40:30.446
you don't end up with this

00:40:31.336 --> 00:40:31.586
problem.

00:40:31.656 --> 00:40:31.956
All right.

00:40:32.476 --> 00:40:35.076
So, with that said, let's go

00:40:35.076 --> 00:40:35.996
back to the slides.

00:40:36.046 --> 00:40:37.856
I hope that you've seen that

00:40:37.856 --> 00:40:39.396
Undefined Behavior Sanitizer can

00:40:39.396 --> 00:40:41.746
make it really easy for you to

00:40:41.746 --> 00:40:44.386
find the source of tricky issues

00:40:44.386 --> 00:40:45.716
that cause weird failures at

00:40:45.716 --> 00:40:46.066
Runtime.

00:40:46.136 --> 00:40:46.746
All right.

00:40:47.416 --> 00:40:51.406
With that out of the way, let's

00:40:51.406 --> 00:40:52.696
talk about the second kind of

00:40:52.726 --> 00:40:54.966
issue that we're going to focus

00:40:54.966 --> 00:40:55.186
on.

00:40:55.186 --> 00:40:56.666
And those are memory alignment

00:40:56.666 --> 00:40:57.586
violations.

00:40:58.896 --> 00:41:01.756
Now, every type in C has a size

00:41:01.966 --> 00:41:03.316
but it also has a required

00:41:03.496 --> 00:41:04.076
alignment.

00:41:05.356 --> 00:41:07.146
A memory alignment violation

00:41:07.146 --> 00:41:08.606
occurs in your program when

00:41:08.606 --> 00:41:10.406
there is an unaligned load or

00:41:10.406 --> 00:41:12.746
store to a piece of memory.

00:41:14.036 --> 00:41:15.436
Now, this can actually be a

00:41:15.436 --> 00:41:18.376
really subtle bug to find.

00:41:18.526 --> 00:41:21.976
And there's a good chance that

00:41:21.976 --> 00:41:23.706
you may never even see it during

00:41:23.706 --> 00:41:24.816
your day to day development.

00:41:25.086 --> 00:41:27.106
I'm assuming most of you develop

00:41:27.106 --> 00:41:28.726
your apps in frameworks and the

00:41:28.726 --> 00:41:30.466
debug configuration in Xcode.

00:41:30.996 --> 00:41:32.266
And when you're ready to finally

00:41:32.266 --> 00:41:33.956
ship your app, you'll, you know,

00:41:33.956 --> 00:41:34.676
ship it in the release

00:41:34.676 --> 00:41:35.456
configuration.

00:41:35.976 --> 00:41:37.446
The problem is because the

00:41:37.446 --> 00:41:39.726
compiler really expects you to

00:41:39.966 --> 00:41:41.716
not violate alignment

00:41:41.716 --> 00:41:44.326
assumptions, the optimizer can

00:41:44.446 --> 00:41:46.526
often do things with your code

00:41:46.716 --> 00:41:48.086
which cause your program to

00:41:48.196 --> 00:41:50.106
crash at Runtime in the release

00:41:50.106 --> 00:41:51.266
configuration when these

00:41:51.266 --> 00:41:52.486
optimizations are enabled.

00:41:54.046 --> 00:41:55.616
Undefined Behavior Sanitizer can

00:41:55.616 --> 00:41:57.476
help you catch these issues even

00:41:57.476 --> 00:41:59.256
in the debug configuration ahead

00:41:59.256 --> 00:42:00.686
of time so you don't end up with

00:42:00.686 --> 00:42:02.426
hard to debug failures later

00:42:02.606 --> 00:42:03.056
down the road.

00:42:04.416 --> 00:42:05.926
Now, this type of failure is

00:42:05.926 --> 00:42:07.506
especially common in code that

00:42:07.506 --> 00:42:09.086
deals with serializing or

00:42:09.206 --> 00:42:10.406
deserializing data from

00:42:10.406 --> 00:42:11.626
persistent storage.

00:42:12.196 --> 00:42:14.546
So, let's take a closer look at

00:42:14.546 --> 00:42:15.966
an example that does exactly

00:42:16.726 --> 00:42:16.826
that.

00:42:18.706 --> 00:42:21.286
Okay, so in this example, I'm

00:42:21.286 --> 00:42:23.506
interested in writing a custom

00:42:23.506 --> 00:42:24.786
network protocol for a chat

00:42:24.786 --> 00:42:26.066
application that I'm developing.

00:42:26.586 --> 00:42:28.856
And one really basic thing that

00:42:28.856 --> 00:42:30.466
I've got in my network protocol

00:42:30.726 --> 00:42:32.416
is a definition of a packet

00:42:32.416 --> 00:42:32.956
structure.

00:42:34.206 --> 00:42:35.406
The packet structure contains

00:42:35.406 --> 00:42:36.206
three things.

00:42:36.846 --> 00:42:38.636
A magic field to identify the

00:42:38.636 --> 00:42:39.886
protocol that we're speaking in.

00:42:41.286 --> 00:42:43.746
A payload length that tells you

00:42:43.746 --> 00:42:45.156
how long the message inside of

00:42:45.156 --> 00:42:45.986
the packet is.

00:42:46.556 --> 00:42:48.176
And the payload itself.

00:42:48.886 --> 00:42:50.226
For the purposes of this

00:42:50.226 --> 00:42:51.286
example, I'm just going to

00:42:51.286 --> 00:42:53.116
assume that int is a four-byte

00:42:53.226 --> 00:42:53.586
integer.

00:42:54.156 --> 00:42:55.506
Okay, now with that out of the

00:42:55.506 --> 00:42:58.036
way, we've got two things that

00:42:58.036 --> 00:42:59.346
we need to focus on in order to

00:42:59.346 --> 00:43:01.566
make custom network protocol

00:43:01.566 --> 00:43:02.296
work for us.

00:43:02.606 --> 00:43:04.196
Sender and a receiver.

00:43:04.536 --> 00:43:06.406
We'll get to the sender first.

00:43:07.166 --> 00:43:08.716
Now, the sender's got a network

00:43:08.786 --> 00:43:09.206
buffer.

00:43:09.416 --> 00:43:10.556
This is where it's going to

00:43:10.556 --> 00:43:13.076
assemble its packets, get them

00:43:13.076 --> 00:43:13.556
all ready.

00:43:13.836 --> 00:43:14.816
Get your payload ready.

00:43:15.296 --> 00:43:16.626
And then shoot them down the

00:43:16.626 --> 00:43:18.066
network so that the receiver can

00:43:18.066 --> 00:43:18.316
get it.

00:43:19.216 --> 00:43:22.006
Now, for illustrative purposes,

00:43:22.446 --> 00:43:24.466
I've broken up the memory inside

00:43:24.466 --> 00:43:25.556
of our network buffer into

00:43:25.556 --> 00:43:27.426
four-byte chunks and hopefully

00:43:27.546 --> 00:43:29.686
you'll see why soon.

00:43:29.886 --> 00:43:31.876
Okay, now I really miss Kuba

00:43:31.876 --> 00:43:34.186
already just because, you know,

00:43:34.186 --> 00:43:36.086
he's been offstage for so long.

00:43:36.646 --> 00:43:37.836
So, the first message that I

00:43:37.836 --> 00:43:39.636
want to send to Kuba is Hey

00:43:39.636 --> 00:43:39.886
Kuba.

00:43:40.756 --> 00:43:42.016
So, in order to do that I'm

00:43:42.016 --> 00:43:43.526
going to start with a magic

00:43:43.526 --> 00:43:43.886
value.

00:43:44.386 --> 00:43:48.206
Next I'm going to specify the

00:43:48.206 --> 00:43:49.306
length of my message.

00:43:49.496 --> 00:43:50.706
It's got nine characters in it.

00:43:51.156 --> 00:43:54.026
So, there we go.

00:43:54.226 --> 00:43:56.736
Finally I'm going to specify my

00:43:56.736 --> 00:43:58.756
message itself which is Hey

00:43:58.756 --> 00:43:59.016
Kuba.

00:44:00.496 --> 00:44:02.006
Now we're ready to take a look

00:44:02.006 --> 00:44:03.486
at what the receiver does.

00:44:04.036 --> 00:44:07.356
It's going to take a pointer to

00:44:07.356 --> 00:44:08.826
the network byte stream's buffer

00:44:09.376 --> 00:44:11.356
and cast it to a pointer to a

00:44:11.436 --> 00:44:12.266
packet structure.

00:44:13.856 --> 00:44:16.766
Then it's going to look inside

00:44:16.766 --> 00:44:18.696
the packet, figure out what the

00:44:18.696 --> 00:44:20.436
magic field is, make sure it's

00:44:20.436 --> 00:44:21.666
the correct values so that we're

00:44:21.666 --> 00:44:22.806
speaking the right protocol.

00:44:23.346 --> 00:44:24.996
And then look at the payload.

00:44:25.056 --> 00:44:27.386
All right, so that's the first

00:44:27.386 --> 00:44:27.976
packet out of the way.

00:44:28.256 --> 00:44:29.226
No issues so far.

00:44:30.276 --> 00:44:31.006
Let's send another.

00:44:32.336 --> 00:44:33.746
The second message is going to

00:44:33.746 --> 00:44:35.516
be how's it going?

00:44:36.036 --> 00:44:38.856
So, we'll do the same thing.

00:44:39.076 --> 00:44:40.836
Toss in a magic value, the same

00:44:40.836 --> 00:44:41.446
one as before.

00:44:42.696 --> 00:44:44.166
Toss down the length of the

00:44:44.166 --> 00:44:46.976
message, 15 characters, and then

00:44:46.976 --> 00:44:47.996
the message itself.

00:44:49.296 --> 00:44:50.686
Switching back over to the

00:44:50.686 --> 00:44:52.486
receiver end, we're going to see

00:44:52.746 --> 00:44:54.136
that the problem manifests here.

00:44:54.966 --> 00:44:57.586
This time we're looking at index

00:44:57.586 --> 00:44:59.676
17 into the network byte stream.

00:45:00.536 --> 00:45:03.136
And as soon as we look at the

00:45:03.136 --> 00:45:04.506
magic value inside of that

00:45:04.606 --> 00:45:06.976
packet structure, we get a

00:45:06.976 --> 00:45:08.406
memory alignment violation.

00:45:08.866 --> 00:45:12.676
Now, as you can see here, the

00:45:12.796 --> 00:45:14.796
magic field of the second packet

00:45:14.996 --> 00:45:16.436
isn't aligned to a four-byte

00:45:16.476 --> 00:45:17.016
boundary.

00:45:17.436 --> 00:45:19.546
So, dereferencing it directly

00:45:19.546 --> 00:45:20.866
from the network byte stream is

00:45:20.866 --> 00:45:21.996
an alignment violation,

00:45:22.286 --> 00:45:23.316
something that undefined

00:45:23.316 --> 00:45:25.016
behavior sanitizer can very

00:45:25.016 --> 00:45:26.416
precisely diagnose for you.

00:45:30.376 --> 00:45:31.596
How do you fix this?

00:45:31.966 --> 00:45:32.876
Well, we're going to talk about

00:45:32.876 --> 00:45:34.166
two different ways to do it.

00:45:34.396 --> 00:45:36.026
The first is to use the packed

00:45:36.306 --> 00:45:38.326
attribute in your network packet

00:45:38.326 --> 00:45:39.926
structure definition or any

00:45:39.926 --> 00:45:40.916
structure that you've got that

00:45:40.916 --> 00:45:41.666
you're serializing.

00:45:42.696 --> 00:45:43.646
Okay, so let's take a look at

00:45:43.646 --> 00:45:44.276
how this works.

00:45:44.776 --> 00:45:47.476
You add the packed attribute and

00:45:47.476 --> 00:45:49.286
that changes all of the field

00:45:49.286 --> 00:45:50.186
alignments inside of your

00:45:50.186 --> 00:45:51.716
structure from whatever they

00:45:51.716 --> 00:45:53.476
were originally to one byte

00:45:53.476 --> 00:45:53.856
aligned.

00:45:54.486 --> 00:45:55.916
That's the lowest possible

00:45:55.916 --> 00:45:57.376
alignment that you can have

00:45:57.376 --> 00:45:59.006
which means that any subsequent

00:45:59.006 --> 00:46:01.656
load or store from that field is

00:46:01.656 --> 00:46:02.716
always going to be aligned.

00:46:03.586 --> 00:46:04.866
Aha, so you may be thinking to

00:46:04.866 --> 00:46:06.146
yourself this sounds super

00:46:06.146 --> 00:46:06.626
convenient.

00:46:06.626 --> 00:46:07.966
I'm just going to toss packed on

00:46:07.966 --> 00:46:08.536
everything.

00:46:09.176 --> 00:46:10.606
Well, you've got to be careful.

00:46:11.076 --> 00:46:12.706
So, using the packed attribute

00:46:12.746 --> 00:46:14.116
can actually change the layout

00:46:14.116 --> 00:46:14.916
of your structure.

00:46:15.396 --> 00:46:17.436
In many cases, it can remove

00:46:17.496 --> 00:46:18.766
padding that the compiler has

00:46:18.766 --> 00:46:20.216
automatically inserted into your

00:46:20.216 --> 00:46:22.716
structure and it can also

00:46:22.716 --> 00:46:24.486
degrade your app's performance.

00:46:25.446 --> 00:46:28.016
Now, if you find that you're not

00:46:28.016 --> 00:46:29.766
in a situation where packed

00:46:29.766 --> 00:46:30.986
attribute would work for you,

00:46:31.366 --> 00:46:32.406
there is another option.

00:46:33.046 --> 00:46:36.846
You can use the mem copy

00:46:36.846 --> 00:46:39.506
function to perform an unaligned

00:46:39.506 --> 00:46:41.606
copy from the network byte

00:46:41.606 --> 00:46:42.926
stream or wherever you're

00:46:42.926 --> 00:46:43.966
deserializing from.

00:46:44.856 --> 00:46:47.796
Into a aligned variable which

00:46:47.796 --> 00:46:48.886
can either be in the stack or

00:46:48.886 --> 00:46:49.236
the heap.

00:46:49.996 --> 00:46:52.546
This mem copy is safe and the

00:46:52.546 --> 00:46:54.316
compiler in many instances can

00:46:54.656 --> 00:46:57.096
optimize it so that it's just as

00:46:57.096 --> 00:46:58.966
fast as the unaligned access,

00:46:59.426 --> 00:47:00.676
the original unaligned access

00:47:00.676 --> 00:47:01.156
would've been.

00:47:01.746 --> 00:47:05.116
So, that's alignment violation

00:47:05.116 --> 00:47:06.366
detection with Undefined

00:47:06.366 --> 00:47:07.296
Behavior Sanitizer.

00:47:07.826 --> 00:47:11.316
Let's move on and talk about the

00:47:11.316 --> 00:47:12.916
third kind of bug.

00:47:13.146 --> 00:47:14.586
The nonnull return value

00:47:14.586 --> 00:47:15.266
violation.

00:47:15.766 --> 00:47:19.196
This kind of issue occurs when

00:47:19.196 --> 00:47:20.436
you've got a function whose

00:47:20.436 --> 00:47:22.236
return value is annotated with

00:47:22.236 --> 00:47:23.496
the nonnull attribute.

00:47:24.526 --> 00:47:25.686
Annotation, excuse me.

00:47:26.876 --> 00:47:30.496
However, the function breaks the

00:47:30.496 --> 00:47:32.896
contract imposed by the nonnull

00:47:32.896 --> 00:47:34.686
annotation and returns a nil

00:47:34.686 --> 00:47:35.896
value anyway.

00:47:36.656 --> 00:47:38.706
Now, this can cause crashes if

00:47:38.706 --> 00:47:40.496
you're using Objective C APIs

00:47:40.496 --> 00:47:41.916
which, you know, violate the

00:47:41.916 --> 00:47:44.356
return value annotation from SWF

00:47:44.356 --> 00:47:44.746
code.

00:47:45.476 --> 00:47:46.916
And it can also cause other

00:47:46.916 --> 00:47:47.986
problems if you're using

00:47:47.986 --> 00:47:50.236
Objective C APIs which rely on

00:47:50.236 --> 00:47:51.316
nullability connection

00:47:51.576 --> 00:47:55.236
correctness more stringently.

00:47:56.566 --> 00:47:57.746
That's why we recommend that you

00:47:57.746 --> 00:47:59.206
opt into this check if your

00:47:59.206 --> 00:48:00.396
application makes use of

00:48:00.436 --> 00:48:01.736
nullability annotations.

00:48:03.296 --> 00:48:04.636
Let's take a look at an example

00:48:05.176 --> 00:48:08.106
of the return value, the nonnull

00:48:08.106 --> 00:48:09.156
return value violation.

00:48:10.476 --> 00:48:13.286
Okay, so in this example I'm a

00:48:13.286 --> 00:48:15.026
budding astronomer and I've got

00:48:15.026 --> 00:48:16.346
a model of the solar system.

00:48:16.796 --> 00:48:18.366
The first thing that I'm

00:48:18.366 --> 00:48:20.546
interested in modelling are the

00:48:20.646 --> 00:48:22.006
moons in my solar system.

00:48:22.006 --> 00:48:23.076
So, here we go.

00:48:23.076 --> 00:48:25.746
We've got planet earth and the

00:48:25.746 --> 00:48:26.826
biggest moon on earth is the

00:48:26.826 --> 00:48:28.196
moon so let's stick that in.

00:48:28.196 --> 00:48:30.776
We've got Mars and we're going

00:48:30.776 --> 00:48:32.766
to sort these lists by diameter

00:48:32.866 --> 00:48:33.806
in decreasing order.

00:48:33.806 --> 00:48:35.746
So, Phobos is the largest moon

00:48:35.746 --> 00:48:36.406
of Mars.

00:48:36.406 --> 00:48:37.726
Amos is the second largest.

00:48:37.726 --> 00:48:40.116
Great, but, uh oh.

00:48:41.336 --> 00:48:42.856
It looks like we've got an entry

00:48:42.856 --> 00:48:44.246
that snuck in here which

00:48:44.246 --> 00:48:45.406
shouldn't be around anymore.

00:48:47.026 --> 00:48:49.246
So, this is embarrassing.

00:48:49.646 --> 00:48:50.956
Better get rid of it.

00:48:50.956 --> 00:48:52.276
All right, that's a lot better.

00:48:52.776 --> 00:48:55.176
Okay. So, I got rid of some

00:48:55.176 --> 00:48:56.476
legacy code from my example.

00:48:56.596 --> 00:48:59.146
Now my list is looking better.

00:49:00.556 --> 00:49:01.646
Let's move on.

00:49:02.006 --> 00:49:05.156
Okay, so what I'm really

00:49:05.156 --> 00:49:07.296
interested in figuring out are,

00:49:07.446 --> 00:49:09.566
is, I want a list of the biggest

00:49:09.566 --> 00:49:10.776
moons for all of the planets in

00:49:10.776 --> 00:49:11.516
the solar system.

00:49:11.726 --> 00:49:14.316
So, I'm going to do that by

00:49:14.836 --> 00:49:16.766
constructing an NS mutable array

00:49:17.676 --> 00:49:19.776
and then adding the biggest

00:49:19.776 --> 00:49:21.056
moons for each planet that I've

00:49:21.096 --> 00:49:21.476
looked up.

00:49:22.296 --> 00:49:23.746
Now, the problem here is that

00:49:23.746 --> 00:49:25.126
I've looked up the biggest moons

00:49:25.126 --> 00:49:27.596
for Pluto and that's not an

00:49:27.596 --> 00:49:29.326
entry in the NS dictionary I set

00:49:29.326 --> 00:49:29.466
up.

00:49:29.566 --> 00:49:30.506
So, I get back nil.

00:49:31.366 --> 00:49:33.886
Undefined Behavior Sanitizer can

00:49:33.886 --> 00:49:35.046
diagnose this issue for you.

00:49:35.576 --> 00:49:40.096
Okay, so that's a look at what

00:49:40.236 --> 00:49:41.546
kinds of issues Undefined

00:49:41.546 --> 00:49:43.106
Behavior Sanitizer can find for

00:49:43.106 --> 00:49:44.816
you and how the tool works.

00:49:45.576 --> 00:49:46.966
I want to wrap up the section of

00:49:46.966 --> 00:49:48.676
the talk by showing you how you

00:49:48.676 --> 00:49:50.436
can enable the opt-in check set

00:49:50.436 --> 00:49:50.946
I mentioned.

00:49:51.946 --> 00:49:52.856
This is the project build

00:49:52.856 --> 00:49:53.566
settings editor.

00:49:54.216 --> 00:49:55.686
Here's where you can go to turn

00:49:55.686 --> 00:49:57.296
on unsigned integer overflow

00:49:57.296 --> 00:49:59.626
detection and also your

00:49:59.626 --> 00:50:01.086
nullability annotation checks.

00:50:01.706 --> 00:50:03.846
So, that's Undefined Behavior

00:50:03.846 --> 00:50:07.576
Sanitizer, new in Xcode 9.

00:50:08.516 --> 00:50:13.500
[ Applause ]

00:50:16.646 --> 00:50:18.016
We've taken a look at a lot of

00:50:18.096 --> 00:50:19.156
different Runtime tools in

00:50:19.206 --> 00:50:21.176
Xcode, some new, some improved.

00:50:21.336 --> 00:50:22.566
But it's worth taking a step

00:50:22.566 --> 00:50:24.686
back and thinking about software

00:50:24.686 --> 00:50:25.656
quality itself.

00:50:25.886 --> 00:50:27.256
How do you use these Runtime

00:50:27.256 --> 00:50:28.466
tools effectively?

00:50:28.976 --> 00:50:32.486
There's two main parts to it.

00:50:33.516 --> 00:50:35.536
You've got to exercise more code

00:50:35.536 --> 00:50:36.706
with these tools turned on and

00:50:37.436 --> 00:50:38.566
you've got to use these tools

00:50:38.566 --> 00:50:38.946
together.

00:50:40.146 --> 00:50:44.166
Let's take a look.

00:50:44.426 --> 00:50:46.936
Runtime tools can only catch

00:50:47.196 --> 00:50:49.166
bugs for you when you run the

00:50:49.166 --> 00:50:50.766
code that contains the bugs.

00:50:51.296 --> 00:50:52.146
Maybe the [inaudible] is not the

00:50:52.146 --> 00:50:55.666
best way but you've got to

00:50:55.666 --> 00:50:57.926
actually run the line of code

00:50:57.926 --> 00:50:59.566
that contains the issue for, in

00:50:59.566 --> 00:51:00.756
order to get any sort of useful

00:51:00.756 --> 00:51:01.976
diagnostic about the bug.

00:51:01.976 --> 00:51:02.636
All right?

00:51:03.046 --> 00:51:05.396
So, in order to exercise as much

00:51:05.396 --> 00:51:06.696
code as possible and find as

00:51:06.696 --> 00:51:08.546
many issues as possible, we

00:51:09.216 --> 00:51:10.766
really recommend that you use

00:51:10.766 --> 00:51:11.876
Runtime tools for daily

00:51:11.876 --> 00:51:12.506
development.

00:51:13.576 --> 00:51:14.826
We also recommend that you turn

00:51:14.826 --> 00:51:16.346
these tools on at least once

00:51:16.376 --> 00:51:18.426
before every software release so

00:51:18.426 --> 00:51:19.486
that you can avoid spreading

00:51:19.486 --> 00:51:21.186
bugs and possibly security

00:51:21.186 --> 00:51:25.256
vulnerabilities to your users.

00:51:25.396 --> 00:51:27.396
Using continuous integration can

00:51:27.396 --> 00:51:29.276
make using Runtime tools much

00:51:29.306 --> 00:51:31.506
easier and it can also really

00:51:31.506 --> 00:51:33.126
simplify the process of

00:51:33.126 --> 00:51:34.326
exercising as much code as

00:51:34.326 --> 00:51:35.536
possible with these tools turned

00:51:35.536 --> 00:51:35.846
on.

00:51:37.006 --> 00:51:38.526
It can ensure that these bugs,

00:51:38.876 --> 00:51:39.986
that bugs in your program are

00:51:39.986 --> 00:51:41.576
caught as quickly as possible as

00:51:41.576 --> 00:51:42.646
soon as you check in code.

00:51:42.746 --> 00:51:45.256
And it can also help you track

00:51:45.316 --> 00:51:46.106
code coverage in your

00:51:46.106 --> 00:51:47.406
application so you can see

00:51:47.406 --> 00:51:48.876
exactly how much code is being

00:51:48.876 --> 00:51:51.496
exercised every time your CI

00:51:51.606 --> 00:51:52.136
runs.

00:51:53.116 --> 00:51:54.296
If you'd like to learn more

00:51:54.386 --> 00:51:55.836
about how continuous integration

00:51:55.836 --> 00:51:57.506
and code coverage work in Xcode,

00:51:57.506 --> 00:51:59.106
I recommend that you check out

00:51:59.106 --> 00:52:03.686
the WWDC 2015 talk about that.

00:52:05.516 --> 00:52:07.266
The second component to using

00:52:07.266 --> 00:52:08.756
Runtime tools effectively is to

00:52:08.926 --> 00:52:09.776
use them together.

00:52:10.506 --> 00:52:11.626
The more of these tools you turn

00:52:11.626 --> 00:52:13.536
on, the more issues you can

00:52:14.566 --> 00:52:14.746
find.

00:52:14.926 --> 00:52:15.766
There's one exception.

00:52:15.766 --> 00:52:17.636
So, Address Sanitizer and Thread

00:52:17.636 --> 00:52:19.056
Sanitizer are not mutually

00:52:19.056 --> 00:52:19.696
compatible.

00:52:19.806 --> 00:52:20.996
You won't be able to turn these

00:52:20.996 --> 00:52:22.696
two on together but the rest of

00:52:22.696 --> 00:52:23.306
the tools you can.

00:52:24.476 --> 00:52:26.486
And as we've seen already, all

00:52:26.486 --> 00:52:27.916
of these tools can be turned on

00:52:27.966 --> 00:52:30.166
by going into the scheme editor

00:52:30.166 --> 00:52:31.686
in Xcode and clicking at the

00:52:31.686 --> 00:52:32.396
diagnostics tab.

00:52:33.876 --> 00:52:35.536
Now, you may be wondering, This

00:52:35.536 --> 00:52:36.736
sounds like a lot of overhead,

00:52:36.736 --> 00:52:36.986
right?

00:52:37.626 --> 00:52:40.256
I'm here to tell you that that's

00:52:40.486 --> 00:52:42.186
not really true, in my

00:52:42.186 --> 00:52:42.996
experience at least.

00:52:42.996 --> 00:52:45.446
So, we've got some numbers for

00:52:45.446 --> 00:52:46.496
you about the execution and

00:52:46.496 --> 00:52:47.936
memory overheads of these tools.

00:52:48.816 --> 00:52:49.926
And what I've found that, at

00:52:49.926 --> 00:52:52.336
least in my own experience, I'm

00:52:52.336 --> 00:52:53.726
able to turn multiple Runtime

00:52:53.726 --> 00:52:55.476
tools on simultaneously while

00:52:55.476 --> 00:52:57.196
debugging the entire Xcode app

00:52:57.196 --> 00:52:58.786
and the UI still feels

00:52:58.786 --> 00:52:59.956
responsive.

00:53:00.226 --> 00:53:01.786
Hopefully this information can

00:53:01.786 --> 00:53:03.186
help you make the best decisions

00:53:03.186 --> 00:53:04.826
about which tools to turn on in

00:53:04.826 --> 00:53:06.146
your local setups versus in

00:53:06.146 --> 00:53:07.186
continuous integration.

00:53:07.976 --> 00:53:09.866
But I hope that the takeaway

00:53:09.866 --> 00:53:11.726
here for you is that all of

00:53:11.726 --> 00:53:13.106
these tools re incredibly

00:53:13.106 --> 00:53:13.686
valuable.

00:53:13.946 --> 00:53:15.576
They all catch different sets of

00:53:15.576 --> 00:53:17.596
bugs for you and they're all

00:53:17.596 --> 00:53:19.226
really worth turning on in some

00:53:19.226 --> 00:53:22.996
form or the other.

00:53:23.226 --> 00:53:24.356
So, to wrap it up.

00:53:24.606 --> 00:53:26.106
Xcode 9 is going to help you

00:53:26.106 --> 00:53:27.966
catch more critical bugs in your

00:53:27.966 --> 00:53:29.096
apps and programs than ever

00:53:29.096 --> 00:53:31.226
before with new and improved

00:53:31.226 --> 00:53:31.796
Runtime Tools.

00:53:32.736 --> 00:53:34.426
I really hope that you use them

00:53:34.426 --> 00:53:36.376
early and often to save time

00:53:36.376 --> 00:53:38.006
while debugging and to keep your

00:53:38.006 --> 00:53:38.686
users safe.

00:53:38.846 --> 00:53:40.476
And with that, I hope that you

00:53:40.476 --> 00:53:41.646
go out and squash some bugs.

00:53:41.756 --> 00:53:43.016
If you want to find some more

00:53:43.016 --> 00:53:44.156
information about this talk,

00:53:44.636 --> 00:53:46.106
we've got a website set up for

00:53:46.106 --> 00:53:47.556
you with a lot of helpful links.

00:53:48.346 --> 00:53:49.366
There are also some related

00:53:49.366 --> 00:53:50.226
sessions coming up.

00:53:50.576 --> 00:53:51.796
So, what's new in SWF.

00:53:52.136 --> 00:53:53.496
Debugging with Xcode 9.

00:53:54.066 --> 00:53:57.216
There's a talk about DCD.

00:53:57.566 --> 00:53:59.716
And there's also a talk about

00:53:59.716 --> 00:54:01.226
what's new in LDM for those of

00:54:01.286 --> 00:54:02.226
you who are interested in the

00:54:02.226 --> 00:54:03.996
underlying sanitizer technology

00:54:04.416 --> 00:54:06.846
that powers Runtime tools.

00:54:07.986 --> 00:54:10.176
So, with that, thank you for

00:54:10.176 --> 00:54:10.536
coming.

00:54:10.926 --> 00:54:12.026
I hope you have a great

00:54:12.026 --> 00:54:12.976
conference.

00:54:13.516 --> 00:54:17.506
[ Applause ]