WEBVTT

00:00:18.046 --> 00:00:18.696
>> Welcome to Now Playing and

00:00:18.696 --> 00:00:20.166
Remote Commands on tvOS.

00:00:20.656 --> 00:00:21.966
I'm Justin Voss, an engineer on

00:00:21.966 --> 00:00:23.726
tvOS and in this talk we'll

00:00:23.726 --> 00:00:25.046
cover how you can provide great

00:00:25.046 --> 00:00:26.046
metadata and playback

00:00:26.046 --> 00:00:27.176
experiences for your viewers.

00:00:27.676 --> 00:00:29.786
First, let's talk about

00:00:29.786 --> 00:00:30.816
providing Now Playing

00:00:30.816 --> 00:00:31.266
information.

00:00:31.946 --> 00:00:33.156
Having accurate and complete

00:00:33.156 --> 00:00:34.496
metadata about your content will

00:00:34.496 --> 00:00:35.746
help viewers to understand what

00:00:35.746 --> 00:00:36.766
they're watching across a

00:00:36.766 --> 00:00:38.626
variety of interfaces across

00:00:38.626 --> 00:00:40.256
tvOS and iOS.

00:00:40.816 --> 00:00:43.296
The metadata you provide is

00:00:43.296 --> 00:00:44.436
displayed in several places.

00:00:45.126 --> 00:00:46.926
For video content, the built-in

00:00:46.926 --> 00:00:48.336
AVPlayerViewController displays

00:00:48.336 --> 00:00:49.526
metadata along the top of the

00:00:49.526 --> 00:00:50.126
video screen.

00:00:51.176 --> 00:00:52.706
For both video and audio content

00:00:52.706 --> 00:00:54.586
the TV Remote app for iOS would

00:00:54.586 --> 00:00:56.056
both display metadata and

00:00:56.056 --> 00:00:56.846
playback controls.

00:00:57.316 --> 00:00:58.806
And for audio content, your

00:00:58.806 --> 00:01:00.116
metadata will be displayed in a

00:01:00.116 --> 00:01:01.026
badge in the corner of the

00:01:01.026 --> 00:01:02.646
screen and as a full-screen

00:01:02.646 --> 00:01:03.756
display when the user is idle.

00:01:04.706 --> 00:01:06.036
Let's look at some screenshots

00:01:06.036 --> 00:01:06.996
of these to better understand

00:01:07.346 --> 00:01:07.436
them.

00:01:07.436 --> 00:01:08.266
In this screenshot, you can

00:01:08.266 --> 00:01:09.546
already tell that we're watching

00:01:09.586 --> 00:01:11.706
a WWDC talk from last year

00:01:12.166 --> 00:01:13.476
because the metadata onscreen

00:01:13.476 --> 00:01:14.356
makes that super clear.

00:01:14.996 --> 00:01:16.216
This is an example of using the

00:01:16.216 --> 00:01:18.016
built-in AVPlayerViewController

00:01:18.016 --> 00:01:18.766
for video content.

00:01:19.246 --> 00:01:21.466
Here you can see the same talk,

00:01:21.606 --> 00:01:23.006
but displayed in the TV Remote

00:01:23.006 --> 00:01:23.846
app for iOS.

00:01:24.146 --> 00:01:25.306
You can also see the playback

00:01:25.306 --> 00:01:26.896
controls which we'll cover later

00:01:26.896 --> 00:01:27.326
in the talk.

00:01:27.796 --> 00:01:29.096
For audio content, when the Now

00:01:29.096 --> 00:01:30.366
Playing information changes the

00:01:30.366 --> 00:01:31.696
listener will see a notification

00:01:31.696 --> 00:01:32.826
on their screen with the updated

00:01:32.826 --> 00:01:33.286
metadata.

00:01:34.006 --> 00:01:35.266
In this screenshot here, you can

00:01:35.266 --> 00:01:36.516
see what this would look like if

00:01:36.516 --> 00:01:37.656
we were listening to an audio

00:01:37.656 --> 00:01:39.436
only version of that WWDC talk.

00:01:40.356 --> 00:01:41.436
Finally, if the user puts down

00:01:41.436 --> 00:01:43.136
the remote for a while tvOS will

00:01:43.136 --> 00:01:44.306
automatically display the Now

00:01:44.306 --> 00:01:45.246
Playing metadata in a

00:01:45.246 --> 00:01:46.366
full-screen view like you see

00:01:46.366 --> 00:01:47.526
here which really shows off the

00:01:47.526 --> 00:01:47.896
artwork.

00:01:49.176 --> 00:01:50.496
So, hopefully I've convinced you

00:01:50.496 --> 00:01:51.626
that providing the complete set

00:01:51.626 --> 00:01:52.736
of Now Playing information is

00:01:52.736 --> 00:01:53.216
worth your time.

00:01:54.186 --> 00:01:55.016
Let's talk about some of the

00:01:55.016 --> 00:01:55.936
different ways you can do that.

00:01:56.576 --> 00:01:57.806
You have a few choices so it

00:01:57.806 --> 00:01:58.486
depends on what kind of

00:01:58.486 --> 00:01:59.646
technology you're using in your

00:02:00.296 --> 00:02:00.366
app.

00:02:01.496 --> 00:02:03.576
Those of you using TVML can add

00:02:03.576 --> 00:02:05.296
metadata using the MediaItem

00:02:05.296 --> 00:02:06.086
JavaScript object.

00:02:06.946 --> 00:02:07.806
This object has several

00:02:07.806 --> 00:02:08.985
properties on it for Now Playing

00:02:08.985 --> 00:02:10.626
info, including a title,

00:02:10.735 --> 00:02:12.836
subtitle and description, you

00:02:12.836 --> 00:02:14.246
can provide a URL to an artwork

00:02:14.246 --> 00:02:16.126
image and you can even provide

00:02:16.126 --> 00:02:17.226
information about the content

00:02:17.226 --> 00:02:20.056
rating such as PG-13 or R and

00:02:20.056 --> 00:02:21.316
whether the content is explicit.

00:02:21.586 --> 00:02:24.196
In the code sample, here you can

00:02:24.196 --> 00:02:25.056
see that I'm creating a

00:02:25.056 --> 00:02:27.026
MediaItem object with a URL to a

00:02:27.026 --> 00:02:28.936
video and then configuring a

00:02:28.936 --> 00:02:30.726
title and description on it and

00:02:30.726 --> 00:02:31.976
providing a URL to an artwork

00:02:31.976 --> 00:02:32.246
image.

00:02:32.766 --> 00:02:34.056
If you're using AVKit to play

00:02:34.056 --> 00:02:36.146
your content you'll want to use

00:02:36.146 --> 00:02:37.696
the AV metadata item class to

00:02:37.696 --> 00:02:38.686
provide Now Playing info.

00:02:40.076 --> 00:02:41.376
For each piece of metadata you

00:02:41.376 --> 00:02:42.876
want to provide, such as a title

00:02:42.876 --> 00:02:44.706
or artwork, etcetera you'll

00:02:44.706 --> 00:02:46.656
create an AV mutable metadata

00:02:46.656 --> 00:02:47.926
item and configure several

00:02:47.926 --> 00:02:48.676
properties on it.

00:02:48.976 --> 00:02:50.366
You provide an identifier which

00:02:50.366 --> 00:02:51.586
tells AVKit what kind of

00:02:51.586 --> 00:02:52.646
metadata this represents.

00:02:53.036 --> 00:02:54.116
This is how we know to tell the

00:02:54.116 --> 00:02:55.416
difference between the object

00:02:55.416 --> 00:02:56.556
that represents a title versus

00:02:56.556 --> 00:02:57.556
the description and so on.

00:02:58.106 --> 00:02:59.126
You provide the value of the

00:02:59.126 --> 00:03:00.806
metadata itself, which may be a

00:03:00.806 --> 00:03:02.306
string or raw data bytes.

00:03:02.886 --> 00:03:03.406
You should set the

00:03:03.406 --> 00:03:04.986
extendedLanguageTag to specify

00:03:04.986 --> 00:03:06.176
what language the metadata is

00:03:06.176 --> 00:03:06.756
intended for.

00:03:07.456 --> 00:03:08.506
Unless you have a good reason to

00:03:08.506 --> 00:03:09.766
do otherwise we strongly

00:03:09.766 --> 00:03:12.126
recommend that you use the value

00:03:12.376 --> 00:03:13.416
und which means undefined.

00:03:14.356 --> 00:03:15.676
The way this property works is

00:03:15.676 --> 00:03:17.286
that it will only be visible to

00:03:17.286 --> 00:03:18.856
the user if the user's locale

00:03:18.936 --> 00:03:20.406
matches the metadata's locale.

00:03:20.906 --> 00:03:22.286
So, for example, if you had a

00:03:22.286 --> 00:03:23.246
movie that was produced in the

00:03:23.246 --> 00:03:25.246
USA you may be tempted to

00:03:25.246 --> 00:03:26.856
provide the title of that movie

00:03:26.886 --> 00:03:28.356
with the language tag of English

00:03:28.356 --> 00:03:29.576
since the title is in English.

00:03:30.256 --> 00:03:31.246
But if you did that then a

00:03:31.246 --> 00:03:32.706
viewer in Germany wouldn't see

00:03:32.706 --> 00:03:34.186
any title at all because the

00:03:34.186 --> 00:03:35.586
metadata language doesn't match

00:03:35.586 --> 00:03:36.326
their language.

00:03:36.826 --> 00:03:38.686
But if you had used the tag und

00:03:38.886 --> 00:03:39.676
then everyone will see the

00:03:39.676 --> 00:03:40.836
metadata regardless of their

00:03:40.836 --> 00:03:41.536
language settings.

00:03:42.966 --> 00:03:44.646
Finally, in some cases you need

00:03:44.646 --> 00:03:46.086
to give us a hint about how to

00:03:46.086 --> 00:03:47.036
interpret the value you've

00:03:47.036 --> 00:03:47.486
provided.

00:03:48.166 --> 00:03:49.486
In the case of providing artwork

00:03:49.486 --> 00:03:50.796
image you'll give us the raw

00:03:50.796 --> 00:03:52.176
bytes of the image as the value

00:03:52.436 --> 00:03:53.466
and then use the dataType to

00:03:53.466 --> 00:03:55.176
tell us if the image is a JPEG

00:03:55.176 --> 00:03:55.686
or a PNG.

00:03:56.506 --> 00:03:58.216
Let's look at some code samples

00:03:58.216 --> 00:03:59.216
to get a feel for how this

00:03:59.216 --> 00:03:59.576
works.

00:04:00.106 --> 00:04:03.406
Here you can see the code where

00:04:03.406 --> 00:04:05.076
I'm creating an AV playerItem

00:04:05.076 --> 00:04:06.306
and giving it a title and

00:04:06.306 --> 00:04:06.706
description.

00:04:07.616 --> 00:04:08.776
In the first large code block

00:04:08.976 --> 00:04:10.096
I'm creating an

00:04:10.096 --> 00:04:11.366
AVMutableMetadataItem to

00:04:11.366 --> 00:04:13.556
represent the title.

00:04:13.716 --> 00:04:15.146
The first thing that I do is I

00:04:15.146 --> 00:04:16.435
set the identifier to

00:04:16.435 --> 00:04:17.846
AVMetadataCommon

00:04:17.846 --> 00:04:19.786
IdentifierTitle so that AVKit

00:04:19.786 --> 00:04:21.305
knows that this metadata item is

00:04:21.305 --> 00:04:21.625
the title.

00:04:21.676 --> 00:04:25.526
Then I set the actual value as a

00:04:25.526 --> 00:04:25.826
string.

00:04:26.666 --> 00:04:28.176
The AV metadata item API

00:04:28.466 --> 00:04:29.716
requires these values to be NS

00:04:29.716 --> 00:04:31.216
object types so casting the

00:04:31.216 --> 00:04:31.716
[inaudible] string to an

00:04:31.716 --> 00:04:31.926
NSString.

00:04:36.056 --> 00:04:36.906
Finally, I'm setting the

00:04:36.906 --> 00:04:38.686
extendedLanguageTag to und

00:04:38.686 --> 00:04:39.756
because the title of this talk

00:04:39.756 --> 00:04:40.696
should appear the same

00:04:40.696 --> 00:04:41.176
worldwide.

00:04:41.676 --> 00:04:44.066
In the second large code block,

00:04:44.066 --> 00:04:44.956
I'm doing most of the same

00:04:44.956 --> 00:04:45.826
things to assign the

00:04:45.826 --> 00:04:46.336
description.

00:04:47.006 --> 00:04:48.096
Other than providing a different

00:04:48.096 --> 00:04:50.136
value you can see that on this

00:04:50.136 --> 00:04:51.936
line I'm setting the identifier

00:04:51.936 --> 00:04:53.696
to AVMetadataCommon

00:04:53.696 --> 00:04:55.716
IdentifierDescription so that

00:04:55.716 --> 00:04:56.896
AVKit knows how to interpret

00:04:56.896 --> 00:04:57.256
this item.

00:04:58.666 --> 00:05:00.076
Finally, on the last line I

00:05:00.076 --> 00:05:01.206
assign an array of these

00:05:01.206 --> 00:05:02.866
metadata items to the AV

00:05:02.866 --> 00:05:04.666
playerItem's external metadata

00:05:04.666 --> 00:05:05.026
property.

00:05:05.616 --> 00:05:08.706
If you wanted to provide the

00:05:08.706 --> 00:05:09.896
release date of your content as

00:05:09.896 --> 00:05:11.486
a metadata item you can do that

00:05:11.486 --> 00:05:12.776
if you format your release date

00:05:12.776 --> 00:05:14.036
as a string in a specific

00:05:14.036 --> 00:05:14.396
format.

00:05:15.066 --> 00:05:16.236
This code sample shows you how

00:05:16.236 --> 00:05:16.746
you can do that.

00:05:17.306 --> 00:05:19.036
Here you see that I'm creating

00:05:19.036 --> 00:05:21.036
the date object for an arbitrary

00:05:21.036 --> 00:05:21.126
date.

00:05:21.886 --> 00:05:23.336
Then I create a date formatter

00:05:23.456 --> 00:05:24.886
and provide a specific date

00:05:24.886 --> 00:05:26.666
format string here on this line.

00:05:27.266 --> 00:05:29.906
To create the metadata item, I

00:05:29.906 --> 00:05:31.006
use the identifier

00:05:31.236 --> 00:05:32.546
AVMetadataCommon

00:05:32.546 --> 00:05:35.016
IdentifierCreationDate and

00:05:35.016 --> 00:05:36.046
finally, I use the date

00:05:36.046 --> 00:05:37.436
formatter to convert the date

00:05:37.436 --> 00:05:38.966
object into a formatted string

00:05:39.116 --> 00:05:40.366
and cast that string as an

00:05:40.366 --> 00:05:40.656
NSString.

00:05:41.876 --> 00:05:43.336
Now in AVPlayerViewController

00:05:43.636 --> 00:05:44.706
viewers will be able to see the

00:05:44.706 --> 00:05:45.786
release year of the video

00:05:45.786 --> 00:05:47.426
alongside the other Now Playing

00:05:47.966 --> 00:05:48.116
info.

00:05:49.796 --> 00:05:51.336
Finally, here's an example of

00:05:51.336 --> 00:05:52.666
how to provide image metadata

00:05:52.666 --> 00:05:53.316
for your content.

00:05:54.256 --> 00:05:55.416
Here you can see that the first

00:05:55.416 --> 00:05:56.946
thing I need to do is to get my

00:05:56.946 --> 00:05:58.256
image as a data object.

00:05:58.806 --> 00:05:59.866
I'm doing that by loading the

00:05:59.866 --> 00:06:01.226
image from a JPEG that's in my

00:06:01.226 --> 00:06:02.306
app bundle, but you could get

00:06:02.306 --> 00:06:03.526
your artwork from any source.

00:06:03.976 --> 00:06:06.496
Then to create the metadata item

00:06:06.676 --> 00:06:07.386
the first thing I need to

00:06:07.386 --> 00:06:09.416
specify is my identifier, which

00:06:09.416 --> 00:06:10.406
in this case should be

00:06:10.656 --> 00:06:12.056
AVMetadataCommon

00:06:12.056 --> 00:06:13.236
IdentifierArtwork.

00:06:14.346 --> 00:06:15.696
Next, I provide the artwork data

00:06:15.696 --> 00:06:17.786
itself and cast the Swift data

00:06:17.786 --> 00:06:19.816
object to an NSData.

00:06:20.876 --> 00:06:22.156
Finally, to indicate what kind

00:06:22.156 --> 00:06:23.786
of image this is I need to set

00:06:23.786 --> 00:06:24.636
the dataType property.

00:06:25.186 --> 00:06:26.116
Since I know this image is a

00:06:26.116 --> 00:06:27.736
JPEG I'm going to provide this

00:06:27.736 --> 00:06:29.006
constant value here to indicate

00:06:29.006 --> 00:06:29.216
that.

00:06:29.716 --> 00:06:32.876
Okay to give you a visual

00:06:32.876 --> 00:06:33.986
reference of where some of these

00:06:33.986 --> 00:06:35.626
items appear onscreen here's a

00:06:35.626 --> 00:06:36.416
screenshot of the

00:06:36.416 --> 00:06:37.906
AVPlayerViewController with some

00:06:37.906 --> 00:06:38.856
annotations on it.

00:06:39.556 --> 00:06:40.706
The color coding will show where

00:06:40.706 --> 00:06:42.016
each metadata identifier is

00:06:42.016 --> 00:06:42.416
displayed.

00:06:43.196 --> 00:06:44.556
So, this is where the artwork

00:06:44.556 --> 00:06:47.326
will be displayed, the title,

00:06:47.896 --> 00:06:51.946
the creation date, and the

00:06:52.196 --> 00:06:52.746
description.

00:06:53.286 --> 00:06:56.296
And here's a similar screenshot

00:06:56.296 --> 00:06:57.226
of the TV Remote app.

00:06:57.946 --> 00:06:59.016
You can see here the Remote app

00:06:59.016 --> 00:07:00.516
doesn't display exactly the same

00:07:00.516 --> 00:07:01.786
set of metadata as

00:07:01.786 --> 00:07:02.666
AVPlayerViewController.

00:07:02.956 --> 00:07:05.376
It displays the same artwork and

00:07:05.866 --> 00:07:08.346
title, but instead of displaying

00:07:08.346 --> 00:07:09.596
the description it instead

00:07:09.596 --> 00:07:12.336
displays the artist and the

00:07:12.336 --> 00:07:12.836
album name.

00:07:14.196 --> 00:07:15.006
You can see the AV foundation

00:07:15.006 --> 00:07:15.966
identifiers to use here.

00:07:20.046 --> 00:07:20.966
Okay that's all for AVKit.

00:07:21.296 --> 00:07:22.266
If you're just playing your

00:07:22.266 --> 00:07:23.396
video using some other

00:07:23.396 --> 00:07:25.446
technology like Video Toolbox or

00:07:25.446 --> 00:07:26.426
if you're playing audio only

00:07:26.426 --> 00:07:28.066
content then you'll need another

00:07:28.066 --> 00:07:29.446
way to provide Now Playing info.

00:07:30.236 --> 00:07:32.276
In those cases, you can use the

00:07:32.276 --> 00:07:33.996
MPNowPlayingInfoCenter.

00:07:35.006 --> 00:07:36.286
This is a singleton object that

00:07:36.286 --> 00:07:37.466
has a dictionary property that

00:07:37.466 --> 00:07:38.476
you can write your metadata

00:07:38.476 --> 00:07:38.796
into.

00:07:39.536 --> 00:07:40.766
So, there's a key for title, for

00:07:40.766 --> 00:07:42.146
album name, for artwork and so

00:07:42.146 --> 00:07:42.276
on.

00:07:42.716 --> 00:07:44.876
In addition to the metadata that

00:07:44.876 --> 00:07:46.506
you are probably expecting you

00:07:46.506 --> 00:07:48.216
can also specify explicitly if

00:07:48.216 --> 00:07:49.586
the content is audio or video.

00:07:50.406 --> 00:07:51.396
You can also provide some

00:07:51.396 --> 00:07:52.616
information about the content

00:07:52.616 --> 00:07:54.186
duration and the user's current

00:07:54.186 --> 00:07:54.856
playback position.

00:07:55.426 --> 00:07:57.986
Your artwork is not provided as

00:07:57.986 --> 00:07:59.406
raw bytes, but as an

00:07:59.476 --> 00:08:01.306
MPMediaItemArtwork object which

00:08:01.306 --> 00:08:02.626
we'll talk about more in just a

00:08:03.066 --> 00:08:03.246
minute.

00:08:04.566 --> 00:08:05.236
Finally, it's your

00:08:05.236 --> 00:08:06.606
responsibility to update this

00:08:06.606 --> 00:08:07.776
metadata dictionary as the

00:08:07.776 --> 00:08:08.936
playback state changes.

00:08:09.686 --> 00:08:10.706
You do not need to update it

00:08:10.706 --> 00:08:11.976
every second or even every

00:08:11.976 --> 00:08:13.266
minute, but you should update it

00:08:13.266 --> 00:08:14.256
when certain events occur.

00:08:14.956 --> 00:08:16.016
We recommend that you update it

00:08:16.016 --> 00:08:17.566
when the currently playing item

00:08:17.566 --> 00:08:19.996
changes, if any metadata about

00:08:19.996 --> 00:08:20.936
the currently playing item

00:08:20.936 --> 00:08:22.226
changes, such as the title or

00:08:22.226 --> 00:08:24.796
artist name, if the user seeks

00:08:24.796 --> 00:08:26.016
to a new position of the content

00:08:26.016 --> 00:08:27.276
or if the playback rate changes

00:08:27.906 --> 00:08:29.326
and finally, if playback begins

00:08:29.326 --> 00:08:29.876
or stops.

00:08:30.386 --> 00:08:32.385
Let's take a look at some code.

00:08:33.696 --> 00:08:34.785
Here in the first code block,

00:08:35.296 --> 00:08:36.265
I'm creating the object that's

00:08:36.265 --> 00:08:37.556
going to represent my artwork.

00:08:38.525 --> 00:08:40.546
The way this MPMediaItemArtwork

00:08:40.546 --> 00:08:42.096
class works is that you provide

00:08:42.096 --> 00:08:43.176
us with the native size of the

00:08:43.176 --> 00:08:45.266
image in a block that we'll call

00:08:45.266 --> 00:08:46.766
later with specific image sizes.

00:08:47.106 --> 00:08:49.676
The way this MPMediaItemArtwork

00:08:49.676 --> 00:08:51.316
class works is that you provide

00:08:51.316 --> 00:08:52.626
us with a native size of the

00:08:52.626 --> 00:08:54.366
image in a block that we'll call

00:08:54.366 --> 00:08:55.956
later with specific image sizes.

00:08:56.786 --> 00:08:57.816
This block should return a

00:08:57.816 --> 00:08:59.806
UIImage object that closely fits

00:08:59.806 --> 00:09:01.096
inside the size that's passed to

00:09:01.096 --> 00:09:01.476
the block.

00:09:02.116 --> 00:09:03.436
So, for example, your app may

00:09:03.436 --> 00:09:04.356
have downloaded several

00:09:04.356 --> 00:09:05.486
different sizes of the same

00:09:05.486 --> 00:09:07.816
artwork say in small, medium and

00:09:07.816 --> 00:09:08.706
large sizes.

00:09:09.286 --> 00:09:10.406
When we call this block, you

00:09:10.406 --> 00:09:11.646
should take the size we provide

00:09:11.946 --> 00:09:13.206
and return the image that most

00:09:13.206 --> 00:09:14.646
closely fits the requested size.

00:09:15.996 --> 00:09:17.016
We would discourage you from

00:09:17.016 --> 00:09:18.276
trying to perform expensive

00:09:18.276 --> 00:09:19.796
image resizing operations here,

00:09:19.886 --> 00:09:20.976
just return the image that you

00:09:20.976 --> 00:09:22.246
already have.

00:09:23.556 --> 00:09:24.686
In the second block of code,

00:09:24.686 --> 00:09:25.646
this is where I'm actually

00:09:25.646 --> 00:09:26.966
providing all of my metadata to

00:09:26.966 --> 00:09:28.486
MPNowPlayingInfoCenter.

00:09:29.236 --> 00:09:30.366
You can see that this is just a

00:09:30.366 --> 00:09:31.676
plain Swift dictionary with some

00:09:31.676 --> 00:09:32.706
keys that are provided by the

00:09:32.706 --> 00:09:33.806
framework and I'm simply

00:09:33.806 --> 00:09:35.136
providing my values as regular

00:09:35.136 --> 00:09:35.816
Swift types.

00:09:36.776 --> 00:09:37.746
There are two properties that I

00:09:37.746 --> 00:09:38.976
want to call out in particular

00:09:38.976 --> 00:09:39.156
though.

00:09:39.856 --> 00:09:41.176
The ElapsedPlaybackTime and the

00:09:41.176 --> 00:09:41.986
PlaybackDuration.

00:09:42.806 --> 00:09:43.866
Like I mentioned earlier, you

00:09:43.866 --> 00:09:44.866
should provide these keys so

00:09:44.866 --> 00:09:46.216
that tvOS knows how long your

00:09:46.216 --> 00:09:47.926
content is and where the user is

00:09:47.926 --> 00:09:49.276
currently at within the content.

00:09:49.996 --> 00:09:51.366
As various playback events occur

00:09:51.366 --> 00:09:52.066
you should update the

00:09:52.066 --> 00:09:53.496
ElapsedPlaybackTime to match

00:09:53.496 --> 00:09:54.736
where the user currently is.

00:09:55.606 --> 00:09:55.996
There's no

00:09:55.996 --> 00:09:57.536
AVPlayerViewController for this

00:09:57.536 --> 00:09:59.486
API on tvOS, but I can show you

00:09:59.486 --> 00:10:01.066
what this metadata looks like in

00:10:01.066 --> 00:10:01.976
the TV Remote app.

00:10:02.726 --> 00:10:03.816
You can see where each property

00:10:03.816 --> 00:10:04.706
is displayed onscreen.

00:10:05.206 --> 00:10:05.866
These should look pretty

00:10:05.866 --> 00:10:07.226
familiar compared to the AVKit

00:10:07.226 --> 00:10:07.506
version.

00:10:08.776 --> 00:10:10.066
Take note that in this version

00:10:10.066 --> 00:10:11.226
though the scrubber bar is under

00:10:11.226 --> 00:10:11.746
your control.

00:10:12.546 --> 00:10:14.406
The ElapsedPlaybackTime and the

00:10:14.406 --> 00:10:16.566
duration need to be provided by

00:10:16.566 --> 00:10:17.466
your app to be displayed

00:10:17.466 --> 00:10:17.976
correctly here.

00:10:22.046 --> 00:10:22.826
All right, let's change gears a

00:10:22.826 --> 00:10:24.296
bit now and talk about how your

00:10:24.296 --> 00:10:25.866
app can handle external playback

00:10:25.866 --> 00:10:26.366
commands.

00:10:26.876 --> 00:10:27.836
Of course, your app will have

00:10:27.836 --> 00:10:28.996
its own controls that the user

00:10:28.996 --> 00:10:30.216
can interact with when your app

00:10:30.216 --> 00:10:31.786
is displayed, but the user may

00:10:31.786 --> 00:10:33.106
also want to control your app

00:10:33.106 --> 00:10:35.696
from the TV Remote app on iOS or

00:10:35.696 --> 00:10:36.326
if they're listening to

00:10:36.326 --> 00:10:37.686
background audio from your app

00:10:37.686 --> 00:10:39.726
on tvOS pressing the play pause

00:10:39.726 --> 00:10:41.286
button on the Siri remote can

00:10:41.286 --> 00:10:42.616
pause your app even while it's

00:10:42.616 --> 00:10:43.176
in the background.

00:10:43.866 --> 00:10:44.746
To support these kinds of

00:10:44.746 --> 00:10:46.186
interactions you will need to

00:10:46.186 --> 00:10:47.356
make sure your app can handle

00:10:47.356 --> 00:10:47.936
these Remote Commands.

00:10:50.046 --> 00:10:50.776
The way to do that is with an

00:10:50.776 --> 00:10:51.566
API called

00:10:51.566 --> 00:10:52.706
MPRemoteCommandCenter.

00:10:53.576 --> 00:10:54.566
The way to do that is with an

00:10:54.566 --> 00:10:55.546
API called

00:10:55.606 --> 00:10:56.646
MPRemoteCommandCenter.

00:10:57.286 --> 00:10:58.616
This is another singleton object

00:10:58.616 --> 00:11:00.006
that has a property for each

00:11:00.006 --> 00:11:01.076
different kind of command that

00:11:01.076 --> 00:11:02.316
your app can choose to support.

00:11:02.806 --> 00:11:04.866
For each command that you want

00:11:04.866 --> 00:11:06.776
support you can register either

00:11:06.776 --> 00:11:07.976
a target-action pair or a

00:11:07.976 --> 00:11:09.396
callback block which will be

00:11:09.396 --> 00:11:10.376
invoked when the command is

00:11:10.376 --> 00:11:10.736
performed.

00:11:11.296 --> 00:11:13.246
If you provide a target-action

00:11:13.246 --> 00:11:14.386
or a block the command is

00:11:14.386 --> 00:11:15.396
assumed to be supported.

00:11:16.146 --> 00:11:17.236
If you want to provide a handler

00:11:17.236 --> 00:11:18.176
for the command, but need to

00:11:18.176 --> 00:11:19.476
temporarily indicate that it's

00:11:19.476 --> 00:11:21.236
not available you can mark it as

00:11:21.236 --> 00:11:21.656
disabled.

00:11:21.946 --> 00:11:24.066
The method or block that you

00:11:24.066 --> 00:11:25.496
provide must return an enum

00:11:25.496 --> 00:11:27.006
value to indicate if your app

00:11:27.006 --> 00:11:28.426
was able to successfully perform

00:11:28.426 --> 00:11:28.876
the command.

00:11:29.676 --> 00:11:30.986
The definition of success here

00:11:30.986 --> 00:11:31.586
is pretty broad.

00:11:32.066 --> 00:11:33.196
For example, if the user is

00:11:33.196 --> 00:11:34.176
playing the last song in a

00:11:34.176 --> 00:11:35.716
playlist and requests to skip to

00:11:35.716 --> 00:11:37.336
the next track your app may

00:11:37.336 --> 00:11:38.796
choose to simply end playback.

00:11:39.266 --> 00:11:40.426
That would still be considered

00:11:40.426 --> 00:11:41.586
successfully handling the

00:11:41.586 --> 00:11:42.946
command so you should return the

00:11:42.946 --> 00:11:45.006
success value in that case.

00:11:47.056 --> 00:11:48.086
Some commands like play and

00:11:48.086 --> 00:11:49.046
pause are pretty simple.

00:11:49.316 --> 00:11:50.616
If the handler for the pause

00:11:50.616 --> 00:11:51.776
command is invoked it's pretty

00:11:51.776 --> 00:11:52.906
clear what your app needs to do.

00:11:53.646 --> 00:11:54.466
But other commands are more

00:11:54.466 --> 00:11:56.176
flexible and both accept

00:11:56.176 --> 00:11:57.826
parameters from your app and can

00:11:57.826 --> 00:11:59.236
provide more parameters back to

00:11:59.236 --> 00:11:59.806
your handler.

00:12:00.906 --> 00:12:01.706
For example, the

00:12:01.706 --> 00:12:03.696
MPSkipIntervalCommand is used to

00:12:03.696 --> 00:12:05.236
allow the user to skip forward

00:12:05.236 --> 00:12:06.506
or backward by several seconds.

00:12:07.366 --> 00:12:08.206
Your app can express a

00:12:08.206 --> 00:12:09.516
preference for how many seconds

00:12:09.516 --> 00:12:10.306
the user should be allowed to

00:12:10.306 --> 00:12:10.646
skip.

00:12:11.356 --> 00:12:12.626
The skip command object allows

00:12:12.626 --> 00:12:13.336
you to configure that

00:12:13.336 --> 00:12:13.756
preference.

00:12:14.076 --> 00:12:16.326
When the user actually performs

00:12:16.326 --> 00:12:17.776
the skip command your handler

00:12:17.776 --> 00:12:18.936
will be invoked with an object

00:12:18.936 --> 00:12:19.416
parameter.

00:12:19.916 --> 00:12:21.356
That object is of the type

00:12:21.356 --> 00:12:23.396
MPSkipIntervalCommandEvent and

00:12:23.396 --> 00:12:25.046
it has an interval property that

00:12:25.046 --> 00:12:26.226
tells your app how many seconds

00:12:26.226 --> 00:12:26.696
you should skip.

00:12:27.276 --> 00:12:28.676
And be careful this may not be

00:12:28.676 --> 00:12:30.126
the same as the skip preference

00:12:30.126 --> 00:12:30.986
you provided earlier.

00:12:32.126 --> 00:12:33.376
Let's look at an example.

00:12:33.986 --> 00:12:34.816
Here's how an app might

00:12:34.816 --> 00:12:35.956
implement the skip backward

00:12:35.956 --> 00:12:36.316
command.

00:12:37.816 --> 00:12:38.836
You can see here that on the

00:12:38.836 --> 00:12:40.266
first line I would prefer that

00:12:40.266 --> 00:12:41.616
the user skips backward by 10

00:12:41.616 --> 00:12:43.326
second intervals so I'm going to

00:12:43.326 --> 00:12:44.816
assign the preferred intervals

00:12:44.816 --> 00:12:46.136
property on the

00:12:46.136 --> 00:12:47.636
SkipBackwardCommand object.

00:12:48.006 --> 00:12:50.736
Then I'm going to provide my

00:12:50.736 --> 00:12:51.366
handler block.

00:12:51.906 --> 00:12:53.166
Now technically every command

00:12:53.166 --> 00:12:54.426
handler receives the generic

00:12:54.426 --> 00:12:56.746
type MPRemoteCommandEvent as the

00:12:56.746 --> 00:12:58.776
parameter, but I need to cast it

00:12:58.776 --> 00:13:00.696
to an MPSkipIntervalCommandEvent

00:13:00.696 --> 00:13:01.346
so that I can get to its

00:13:01.346 --> 00:13:01.966
interval property.

00:13:05.276 --> 00:13:06.196
Then I'm going to actually

00:13:06.196 --> 00:13:06.776
perform the command.

00:13:07.316 --> 00:13:08.416
In this sample, I'm playing my

00:13:08.416 --> 00:13:09.626
content with an AVPlayer.

00:13:10.286 --> 00:13:11.756
Since AVPlayer expresses its

00:13:11.756 --> 00:13:13.736
time using CMTime structs that's

00:13:13.736 --> 00:13:14.426
how I'm going to need to

00:13:14.426 --> 00:13:15.576
calculate my new playback

00:13:15.576 --> 00:13:15.926
position.

00:13:17.226 --> 00:13:18.136
You can see here that I'm

00:13:18.136 --> 00:13:18.976
getting the player's current

00:13:18.976 --> 00:13:20.986
composition then creating a new

00:13:20.986 --> 00:13:22.516
CMTime struct with the skip

00:13:22.516 --> 00:13:22.916
interval.

00:13:23.946 --> 00:13:25.136
Finally, I'm subtracting that

00:13:25.136 --> 00:13:26.336
interval from the current time.

00:13:27.486 --> 00:13:29.326
I ask the player to seek to that

00:13:29.326 --> 00:13:30.776
time and then return successful

00:13:30.776 --> 00:13:31.566
from the command handler.

00:13:32.066 --> 00:13:34.376
When the player finishes seeking

00:13:34.376 --> 00:13:36.056
to the new time my completion

00:13:36.056 --> 00:13:37.296
handler will be invoked and

00:13:37.296 --> 00:13:38.226
that's where I'm going to update

00:13:38.226 --> 00:13:39.016
my Now Playing info.

00:13:39.736 --> 00:13:41.146
Remember, if we modify playback

00:13:41.146 --> 00:13:42.576
state like seeking to a new time

00:13:42.906 --> 00:13:44.036
we need to publish new Now

00:13:44.036 --> 00:13:45.446
Playing info so we can update

00:13:45.446 --> 00:13:46.406
the elapsed playback time.

00:13:47.306 --> 00:13:48.336
Here I'm calling a function

00:13:48.336 --> 00:13:49.826
called updateNowPlaying which

00:13:49.826 --> 00:13:51.476
I'll show you on this next

00:13:51.976 --> 00:13:52.106
slide.

00:13:53.276 --> 00:13:54.246
Here you can see how I'm going

00:13:54.246 --> 00:13:55.416
to update my Now Playing info.

00:13:55.806 --> 00:13:56.846
This is basically the same as

00:13:56.846 --> 00:13:57.906
the example I showed you at the

00:13:57.906 --> 00:13:59.356
beginning of this section, but

00:13:59.356 --> 00:14:00.706
want to call out one specific

00:14:00.706 --> 00:14:01.046
detail.

00:14:01.966 --> 00:14:03.286
Here you can see that I'm using

00:14:03.286 --> 00:14:04.826
the AVPlayer's current time

00:14:04.826 --> 00:14:06.666
property in order to provide an

00:14:06.736 --> 00:14:08.246
accurate value for the elapsed

00:14:08.246 --> 00:14:09.166
playback time property.

00:14:10.076 --> 00:14:11.626
In this case, since AVPlayer is

00:14:11.626 --> 00:14:13.796
going to return a CMTime, but

00:14:13.796 --> 00:14:15.406
MPNowPlayingInfoCenter requires

00:14:15.406 --> 00:14:16.586
a floating-point value, that's

00:14:16.646 --> 00:14:18.326
the number of elapsed seconds, I

00:14:18.326 --> 00:14:20.506
need to use the CMTimeGetSeconds

00:14:20.506 --> 00:14:21.766
function to convert the value.

00:14:22.816 --> 00:14:23.806
And that's all there is to

00:14:23.806 --> 00:14:25.056
providing a great playback

00:14:25.056 --> 00:14:26.336
experience with Remote Commands

00:14:26.336 --> 00:14:27.356
and Now Playing information.

00:14:28.446 --> 00:14:29.456
For more information, you can

00:14:29.456 --> 00:14:31.036
visit the URL shown here to find

00:14:31.036 --> 00:14:32.196
links to documentation and

00:14:32.196 --> 00:14:33.006
related sessions.

00:14:33.416 --> 00:14:33.976
Thanks for watching.