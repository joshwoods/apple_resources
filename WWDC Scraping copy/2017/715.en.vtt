WEBVTT

00:00:08.516 --> 00:00:21.996
[ Background Noise ]

00:00:22.496 --> 00:00:22.976
>> Welcome everybody.

00:00:23.516 --> 00:00:27.546
[ Applause ]

00:00:28.046 --> 00:00:30.376
My name is Eric Tamura, and I am

00:00:30.376 --> 00:00:31.626
a manager on the file systems

00:00:31.626 --> 00:00:33.876
team primarily for iOS and our

00:00:33.876 --> 00:00:35.236
embedded devices, and I'll be

00:00:35.746 --> 00:00:37.736
talking to you about what's new

00:00:37.736 --> 00:00:38.616
in Apple file system.

00:00:38.716 --> 00:00:39.956
I'll also be accompanied by

00:00:39.956 --> 00:00:42.056
Pavel Sokolov, who's a manager

00:00:42.056 --> 00:00:43.886
of the file systems team largely

00:00:43.886 --> 00:00:45.656
for the Mac.

00:00:45.866 --> 00:00:46.916
So let's get started.

00:00:48.406 --> 00:00:49.406
So this presentation will

00:00:49.406 --> 00:00:51.126
roughly be divided into two

00:00:51.126 --> 00:00:51.656
sections.

00:00:52.016 --> 00:00:52.836
I'll tell you a little bit more

00:00:52.836 --> 00:00:55.146
about what's new for iOS as well

00:00:55.226 --> 00:00:57.876
as tvOS, watchOS, and then Pavel

00:00:57.876 --> 00:00:59.066
will come up and tell you all

00:00:59.066 --> 00:01:01.216
about what's new on macOS.

00:01:01.676 --> 00:01:06.556
So let's jump right in.

00:01:07.286 --> 00:01:10.146
So last year I got up on the

00:01:10.146 --> 00:01:11.576
stage at this conference, and I

00:01:11.576 --> 00:01:13.596
told all of you that Apple

00:01:14.066 --> 00:01:15.086
[inaudible] Apple file system,

00:01:15.206 --> 00:01:17.266
as the default for all devices

00:01:17.266 --> 00:01:19.386
starting in 2017, and we've

00:01:19.386 --> 00:01:20.356
certainly done that.

00:01:20.356 --> 00:01:23.186
So as of iOS 10.3 as well as our

00:01:23.186 --> 00:01:26.266
tvOS and watchOS analogs, all

00:01:26.266 --> 00:01:28.696
devices have been migrated to

00:01:28.766 --> 00:01:28.886
APFS.

00:01:28.886 --> 00:01:30.686
We'll tell you a little bit more

00:01:30.686 --> 00:01:31.146
about that.

00:01:32.076 --> 00:01:32.806
We'll talk a little bit more

00:01:32.806 --> 00:01:33.986
about the conversion process,

00:01:33.986 --> 00:01:35.296
how did devices actually move

00:01:35.296 --> 00:01:38.766
from HFS+ to APFS, and then a

00:01:38.766 --> 00:01:40.626
little bit on normalization and

00:01:40.626 --> 00:01:42.346
case sensitivity, particularly

00:01:42.436 --> 00:01:44.826
as it relates to iOS devices.

00:01:45.736 --> 00:01:46.706
So let's talk about that

00:01:46.746 --> 00:01:47.206
conversion.

00:01:47.306 --> 00:01:51.996
So at this point, millions,

00:01:51.996 --> 00:01:53.176
literally hundreds of millions

00:01:53.176 --> 00:01:54.226
of devices have now been

00:01:54.226 --> 00:01:56.726
converted successfully to APFS.

00:01:57.516 --> 00:02:04.056
[ Applause ]

00:02:04.556 --> 00:02:06.916
So starting on iOS 10.3 as well

00:02:06.916 --> 00:02:10.265
as tvOS and watchOS, Apple file

00:02:10.265 --> 00:02:11.286
system became the default.

00:02:11.286 --> 00:02:12.706
We had millions of devices

00:02:12.706 --> 00:02:13.186
converted.

00:02:14.116 --> 00:02:14.886
And one of the things you might

00:02:14.886 --> 00:02:16.056
have realized that this update

00:02:16.056 --> 00:02:17.096
actually does free up some

00:02:17.096 --> 00:02:19.146
storage for end users.

00:02:19.536 --> 00:02:20.906
In particular, there was space

00:02:20.906 --> 00:02:22.676
previously occupied by the prior

00:02:22.676 --> 00:02:24.276
volume manager, lightweight

00:02:24.276 --> 00:02:25.216
volume manager, which is no

00:02:25.216 --> 00:02:26.106
longer needed, and we were able

00:02:26.106 --> 00:02:27.636
to free up that space and give

00:02:27.636 --> 00:02:29.166
it back to users.

00:02:29.856 --> 00:02:30.856
One of the other things is that

00:02:30.856 --> 00:02:32.506
starting in iOS 11, we are able

00:02:32.506 --> 00:02:34.086
to start taking advantage of the

00:02:34.086 --> 00:02:36.576
APFS capabilities in iOS and

00:02:36.576 --> 00:02:37.786
tvOS and watchOS.

00:02:37.786 --> 00:02:39.716
Particularly iOS where iCloud

00:02:39.716 --> 00:02:42.146
backup can now use Snapshots in

00:02:42.146 --> 00:02:43.366
order to take a stable copy of

00:02:43.366 --> 00:02:45.286
the file system and upload

00:02:45.286 --> 00:02:46.896
everything to the Cloud without

00:02:46.896 --> 00:02:48.436
worrying about whether or not a

00:02:48.436 --> 00:02:50.136
process might be modifying a

00:02:50.136 --> 00:02:52.216
file and getting rights

00:02:52.216 --> 00:02:52.766
intermingled.

00:02:52.866 --> 00:02:54.596
And finally we've been listening

00:02:54.596 --> 00:02:56.016
to developer feedback in order

00:02:56.016 --> 00:02:57.756
to improve and refine the file

00:02:57.756 --> 00:02:59.256
system and all the software that

00:02:59.256 --> 00:02:59.956
we've been working on.

00:03:00.476 --> 00:03:02.186
So let's talk a little bit about

00:03:02.186 --> 00:03:03.286
that conversion process.

00:03:03.616 --> 00:03:09.196
So the APFS conversion occurs in

00:03:09.196 --> 00:03:11.586
line during the update to iOS

00:03:11.816 --> 00:03:13.196
10.3 and beyond.

00:03:13.196 --> 00:03:14.276
So whether you're moving to iOS

00:03:14.276 --> 00:03:17.956
10.3, 10.3.2 or even iOS 11 from

00:03:17.956 --> 00:03:19.126
some prior update, it will

00:03:19.126 --> 00:03:20.806
automatically get converted.

00:03:21.526 --> 00:03:22.506
And one of the reasons that we

00:03:22.506 --> 00:03:23.276
were able to do this so

00:03:23.276 --> 00:03:24.686
successfully is that we actually

00:03:24.686 --> 00:03:26.746
employed a dry run conversion

00:03:27.016 --> 00:03:29.796
during iOS 10.0, 10.1, and 10.2

00:03:29.796 --> 00:03:31.776
and be able to track how the

00:03:31.776 --> 00:03:33.596
health of our conversion process

00:03:33.866 --> 00:03:34.766
was actually going.

00:03:35.666 --> 00:03:37.026
And we've also been monitoring

00:03:37.026 --> 00:03:39.136
the health of the conversion

00:03:39.136 --> 00:03:41.386
during iOS 10.3 and beyond

00:03:41.386 --> 00:03:44.316
updates, and we've been watching

00:03:44.316 --> 00:03:44.776
that as well.

00:03:45.686 --> 00:03:47.706
Finally, we've been also looking

00:03:47.706 --> 00:03:49.376
at the numbers and statistics

00:03:49.376 --> 00:03:50.266
and everything that we're

00:03:50.686 --> 00:03:51.746
watching and be able to improve

00:03:51.746 --> 00:03:53.506
and refine the conversion on the

00:03:53.506 --> 00:03:54.436
Mac as well.

00:03:55.446 --> 00:03:57.186
So sometimes an illustration can

00:03:57.186 --> 00:03:59.216
help make this easier to

00:03:59.216 --> 00:04:00.806
understand, so I've got one

00:04:00.806 --> 00:04:00.986
here.

00:04:02.006 --> 00:04:03.496
So let's assume that this

00:04:03.786 --> 00:04:05.646
rectangle represents the

00:04:05.746 --> 00:04:08.236
entirety of a block device and

00:04:08.236 --> 00:04:09.656
on the far left you'll notice

00:04:09.656 --> 00:04:11.086
that there's and SB that really

00:04:11.086 --> 00:04:12.966
refers to the superblock or the

00:04:12.966 --> 00:04:14.526
HFS+ volume header.

00:04:15.066 --> 00:04:16.526
Let's say for simplification we

00:04:16.526 --> 00:04:18.976
have three metadata regions that

00:04:18.976 --> 00:04:20.745
report all the entirety of what

00:04:20.745 --> 00:04:21.805
the file system might be

00:04:22.026 --> 00:04:23.096
tracking, things like file

00:04:23.096 --> 00:04:25.506
names, time stamps, where the

00:04:25.506 --> 00:04:26.876
blocks actually live on disk,

00:04:26.876 --> 00:04:28.236
and that we also have two

00:04:28.236 --> 00:04:30.076
regions labeled file data, and

00:04:30.636 --> 00:04:31.526
if you recall during the

00:04:31.526 --> 00:04:32.926
conversion process the goal is

00:04:32.926 --> 00:04:35.176
to only replace the metadata and

00:04:35.176 --> 00:04:36.516
not touch the file data.

00:04:36.516 --> 00:04:37.826
We want that to stay exactly

00:04:37.826 --> 00:04:39.756
where it is as if nothing had

00:04:39.756 --> 00:04:41.226
happened to it.

00:04:42.246 --> 00:04:43.006
So the first thing that we're

00:04:43.006 --> 00:04:44.816
going to do is identify exactly

00:04:44.816 --> 00:04:46.426
where the metadata is, and as

00:04:46.426 --> 00:04:48.276
we're walking through it we'll

00:04:48.276 --> 00:04:49.656
start writing it into the free

00:04:49.656 --> 00:04:52.226
space of the HFS+ volume.

00:04:52.716 --> 00:04:54.776
And what this gives us is crash

00:04:54.776 --> 00:04:55.916
protection and the ability to

00:04:55.916 --> 00:04:56.886
recover in the event that

00:04:56.886 --> 00:04:58.136
conversion doesn't actually

00:04:58.136 --> 00:04:58.566
succeed.

00:04:59.636 --> 00:05:00.966
Now the metadata is identified.

00:05:01.706 --> 00:05:02.836
We'll then start to write it out

00:05:02.836 --> 00:05:04.756
to disk, and at this point, if

00:05:04.756 --> 00:05:05.896
we were doing a dry-run

00:05:05.896 --> 00:05:07.586
conversion, we'd end here.

00:05:08.506 --> 00:05:10.396
If we're completing the process,

00:05:11.126 --> 00:05:12.956
we will write the new superblock

00:05:13.026 --> 00:05:14.766
on top of the old one, and now

00:05:14.766 --> 00:05:17.016
we have an APFS volume.

00:05:17.746 --> 00:05:18.986
The final step is to simply

00:05:18.986 --> 00:05:20.346
remove the metadata that was

00:05:20.406 --> 00:05:22.536
previously occupied by the HFS+

00:05:22.536 --> 00:05:22.996
content.

00:05:23.816 --> 00:05:25.736
We'll do that, and at this point

00:05:25.736 --> 00:05:28.006
it's a completely converted APFS

00:05:28.176 --> 00:05:28.546
volume.

00:05:28.896 --> 00:05:33.576
So now a quick word on Unicode.

00:05:35.456 --> 00:05:37.006
So if you know anything about

00:05:37.006 --> 00:05:37.866
Unicode, you know there's

00:05:37.866 --> 00:05:39.476
actually multiple variants, but

00:05:39.476 --> 00:05:40.836
for the purpose of discussion

00:05:40.836 --> 00:05:43.106
here, I will only be referring

00:05:43.416 --> 00:05:45.516
two really, which are NFC and

00:05:45.516 --> 00:05:47.156
NFD, and these roughly

00:05:47.156 --> 00:05:48.546
correspond to precomposed

00:05:48.546 --> 00:05:50.536
characters versus decomposed

00:05:50.536 --> 00:05:51.126
characters.

00:05:51.746 --> 00:05:53.406
And what this means is that you

00:05:53.406 --> 00:05:54.386
can actually store the same

00:05:54.386 --> 00:05:55.906
character visually, the same

00:05:55.906 --> 00:05:57.056
visual representation can

00:05:57.056 --> 00:05:58.816
actually be stored multiple ways

00:05:59.136 --> 00:06:00.276
depending on which form you're

00:06:00.276 --> 00:06:00.606
using.

00:06:01.356 --> 00:06:03.846
Now prior to iOS 11, APFS stored

00:06:04.136 --> 00:06:05.956
file names as nonnormalized

00:06:06.246 --> 00:06:08.426
UTF-8, and what this means is

00:06:08.426 --> 00:06:09.946
that if you have a file with one

00:06:09.946 --> 00:06:11.946
representation versus the other,

00:06:12.106 --> 00:06:13.436
they will actually be treated as

00:06:13.436 --> 00:06:14.376
different file names for the

00:06:14.376 --> 00:06:16.816
purposes of lookup and creation

00:06:16.816 --> 00:06:17.576
and comparison.

00:06:18.326 --> 00:06:19.756
So let's give another example to

00:06:20.216 --> 00:06:21.406
make this easier to understand.

00:06:22.176 --> 00:06:23.266
Let's say we have the character

00:06:23.546 --> 00:06:25.066
n with tilde or [foreign

00:06:25.136 --> 00:06:26.176
language] in Spanish.

00:06:26.546 --> 00:06:27.646
You can represent this as the

00:06:27.686 --> 00:06:29.926
Unicode hex f1 character.

00:06:30.666 --> 00:06:31.846
Alternatively, you can also

00:06:31.846 --> 00:06:33.606
store it as a decomposed

00:06:33.606 --> 00:06:34.696
character in which the n is

00:06:34.696 --> 00:06:36.366
stored separately from the

00:06:36.366 --> 00:06:36.726
tilde.

00:06:36.796 --> 00:06:39.356
Now in this case, on the right

00:06:39.356 --> 00:06:40.846
the n and the tilde will be

00:06:40.846 --> 00:06:41.956
stored as two separate code

00:06:41.956 --> 00:06:43.146
points; however, they will be

00:06:43.346 --> 00:06:44.826
treated as having to be combined

00:06:44.826 --> 00:06:46.626
for the purposes of visually

00:06:46.626 --> 00:06:48.326
representing that character on

00:06:48.326 --> 00:06:48.856
your screen.

00:06:51.776 --> 00:06:56.536
So the problem is that even if

00:06:56.536 --> 00:06:58.286
the file system is taking care

00:06:58.286 --> 00:06:59.566
to treat these as separate,

00:06:59.566 --> 00:07:00.526
that's not necessarily what the

00:07:00.526 --> 00:07:04.676
rest of the system expects and

00:07:04.676 --> 00:07:05.326
interacts with.

00:07:05.326 --> 00:07:06.176
This might be well-defined

00:07:06.176 --> 00:07:07.786
behavior for NFS; however, you

00:07:07.786 --> 00:07:08.706
want to make sure that the

00:07:08.706 --> 00:07:10.636
entire software stack from file

00:07:10.636 --> 00:07:11.676
system all the way up to

00:07:11.676 --> 00:07:13.326
foundation and above is able to

00:07:13.326 --> 00:07:14.216
treat everything properly.

00:07:14.946 --> 00:07:16.446
So in order to rectify this,

00:07:16.446 --> 00:07:18.276
we're introducing two new

00:07:18.276 --> 00:07:20.166
normalization schemes for Apple

00:07:20.166 --> 00:07:20.826
file system.

00:07:21.226 --> 00:07:22.866
We have a native scheme as well

00:07:22.866 --> 00:07:24.216
as a runtime normalization

00:07:24.216 --> 00:07:24.616
scheme.

00:07:24.956 --> 00:07:26.686
Now the native normalization

00:07:26.686 --> 00:07:28.486
scheme is available in your high

00:07:28.486 --> 00:07:29.926
Sierra beta that you got earlier

00:07:29.926 --> 00:07:31.796
this week for case-sensitive

00:07:31.986 --> 00:07:32.966
volumes only.

00:07:33.116 --> 00:07:34.896
For case insensitive content,

00:07:34.896 --> 00:07:36.486
Pavel will get up on stage in a

00:07:36.486 --> 00:07:37.676
little bit and tell you all

00:07:37.676 --> 00:07:38.206
about that.

00:07:38.946 --> 00:07:39.996
The native normalization is

00:07:39.996 --> 00:07:42.796
coming soon for iOS 11 for erase

00:07:42.796 --> 00:07:43.486
restores only.

00:07:43.486 --> 00:07:45.206
This means if you plugged in the

00:07:45.206 --> 00:07:47.286
phone or other device to iTunes

00:07:47.286 --> 00:07:49.236
and did a restore to factory

00:07:49.236 --> 00:07:51.166
settings starting with iOS 11

00:07:51.366 --> 00:07:52.636
will automatically pick this up.

00:07:53.286 --> 00:07:54.486
However, we don't want anyone to

00:07:54.486 --> 00:07:56.146
have to erase install in order

00:07:56.146 --> 00:07:57.536
to get this behavior.

00:07:57.656 --> 00:07:59.766
So we're also introducing a new

00:07:59.766 --> 00:08:01.816
runtime normalization mechanism,

00:08:01.866 --> 00:08:03.056
and the runtime normalization

00:08:03.056 --> 00:08:04.046
will automatically convert

00:08:04.046 --> 00:08:06.986
between the NFC content versus

00:08:06.986 --> 00:08:09.286
the NFD for the purposes of file

00:08:09.286 --> 00:08:10.656
comparison, being able to do

00:08:10.926 --> 00:08:11.446
lookups.

00:08:11.446 --> 00:08:12.596
If it doesn't find one, it will

00:08:12.596 --> 00:08:13.906
automatically look up with the

00:08:13.906 --> 00:08:15.386
other to make sure that your app

00:08:15.436 --> 00:08:17.126
doesn't receive an ENOENT

00:08:17.126 --> 00:08:17.886
[phonetic] error back from the

00:08:17.886 --> 00:08:18.436
file system.

00:08:19.366 --> 00:08:20.376
And a future update will

00:08:20.376 --> 00:08:22.076
automatically convert devices

00:08:22.076 --> 00:08:24.696
from whatever form they were in,

00:08:24.696 --> 00:08:25.956
if they were already migrated

00:08:25.956 --> 00:08:28.476
starting in 10.3 or 10.3.2 to

00:08:28.476 --> 00:08:31.046
the new form in a future update.

00:08:31.826 --> 00:08:35.106
So that's the update for iOS,

00:08:35.106 --> 00:08:36.056
and with that, I'm going to hand

00:08:36.056 --> 00:08:37.296
it off to Pavel, who is going to

00:08:37.296 --> 00:08:37.976
tell you all about the Mac.

00:08:38.515 --> 00:08:43.515
[ Applause ]

00:08:44.516 --> 00:08:49.716
[ Background Noise ]

00:08:50.216 --> 00:08:51.216
>> Good morning everyone.

00:08:51.616 --> 00:08:53.726
My name is Pavel Sokolov, and I

00:08:53.726 --> 00:08:56.536
manage file system team in

00:08:56.536 --> 00:08:56.836
Apple.

00:08:57.706 --> 00:08:59.016
Today I'm going to talk to you

00:08:59.016 --> 00:09:02.926
about what's new in macOS with

00:09:03.146 --> 00:09:05.626
regards to APFS.

00:09:05.836 --> 00:09:06.456
Let's begin.

00:09:08.016 --> 00:09:10.516
So first, I would like to talk

00:09:10.516 --> 00:09:12.596
to you about what features are

00:09:12.596 --> 00:09:14.706
here just in case you missed the

00:09:14.706 --> 00:09:15.976
presentation from the previous

00:09:15.976 --> 00:09:16.226
year.

00:09:19.416 --> 00:09:22.016
Important features that we

00:09:22.246 --> 00:09:23.736
have-- first of all, I would

00:09:23.736 --> 00:09:27.066
like to remind you that APFS is

00:09:27.306 --> 00:09:29.336
available to every

00:09:29.656 --> 00:09:31.036
Apple-supported platform.

00:09:31.416 --> 00:09:35.006
It works on iOS, tvOS, even on

00:09:35.006 --> 00:09:37.136
your watch, and macOS, of

00:09:37.136 --> 00:09:37.396
course.

00:09:38.676 --> 00:09:40.706
One of the awesome features is

00:09:40.706 --> 00:09:41.236
cloning.

00:09:41.626 --> 00:09:44.026
It allows you to do fast copies

00:09:44.026 --> 00:09:44.776
of the files.

00:09:45.186 --> 00:09:46.596
It employs our copy-on-write

00:09:46.596 --> 00:09:48.726
technology that also powers our

00:09:48.726 --> 00:09:49.376
Snapshots.

00:09:50.176 --> 00:09:55.086
Snapshots allow you to take a

00:09:55.176 --> 00:09:56.016
[inaudible] Snapshot of your

00:09:56.016 --> 00:09:57.666
file system, entire file system,

00:09:57.916 --> 00:09:59.846
remember it's date, and later

00:09:59.976 --> 00:10:01.746
possibly return to it.

00:10:02.466 --> 00:10:03.926
We will also natively support

00:10:03.926 --> 00:10:04.556
encryption.

00:10:05.076 --> 00:10:07.306
We have space sharing.

00:10:07.736 --> 00:10:08.936
I'm going to talk to you about

00:10:08.936 --> 00:10:10.656
that a little bit later, and we

00:10:10.656 --> 00:10:11.976
introduce defragmentation.

00:10:14.156 --> 00:10:17.116
How will get to APFS you might

00:10:17.116 --> 00:10:17.446
wonder?

00:10:18.206 --> 00:10:20.346
So let's talk a little bit about

00:10:21.156 --> 00:10:21.266
that.

00:10:21.476 --> 00:10:23.096
Actually, all you have to do is

00:10:23.096 --> 00:10:25.486
simply call a new macOS High

00:10:25.486 --> 00:10:27.586
Sierra and your system volume

00:10:28.056 --> 00:10:29.416
could automatically be converted

00:10:29.506 --> 00:10:30.156
by installer.

00:10:30.736 --> 00:10:33.476
In case you wonder what happens

00:10:33.476 --> 00:10:35.156
with other volumes, they are not

00:10:35.156 --> 00:10:36.076
going to be automatically

00:10:36.076 --> 00:10:37.576
converted, but you can still

00:10:37.576 --> 00:10:38.546
manually do so.

00:10:39.436 --> 00:10:42.756
If you convert multiple volumes,

00:10:43.146 --> 00:10:44.586
the important point to remember

00:10:44.586 --> 00:10:46.766
after conversion each volume

00:10:46.766 --> 00:10:48.346
becomes APFS container.

00:10:48.616 --> 00:10:49.966
I'm going to talk about that a

00:10:49.966 --> 00:10:50.646
little bit later.

00:10:51.586 --> 00:10:53.136
And multiple containers do not

00:10:53.136 --> 00:10:53.736
share space.

00:10:55.106 --> 00:10:56.686
Space sharing is one of the most

00:10:56.686 --> 00:10:58.776
important and awesome features

00:10:58.776 --> 00:11:00.176
that's going to save you space.

00:11:01.746 --> 00:11:03.106
And we would like you to take

00:11:03.106 --> 00:11:04.426
advantage of that, and I can

00:11:04.426 --> 00:11:07.496
show you how.

00:11:08.196 --> 00:11:11.086
You might wonder what volumes

00:11:11.086 --> 00:11:12.146
are supported, what we can

00:11:12.146 --> 00:11:13.836
convert APFS.

00:11:14.976 --> 00:11:17.706
We can convert HFS+ volumes,

00:11:18.306 --> 00:11:22.146
CoreStorage, Fusion, and even

00:11:22.146 --> 00:11:23.316
FileVault encrypted.

00:11:24.566 --> 00:11:26.176
They all become APFS

00:11:27.326 --> 00:11:27.996
automatically.

00:11:28.636 --> 00:11:34.216
If you'd like to do a manual

00:11:34.216 --> 00:11:37.256
conversion of your existing

00:11:37.256 --> 00:11:39.776
volume, all you have to do is go

00:11:39.776 --> 00:11:40.946
to disk utility [inaudible],

00:11:41.776 --> 00:11:43.506
right click on the volume,

00:11:43.936 --> 00:11:46.366
select convert to APFS, and here

00:11:46.476 --> 00:11:46.896
you go.

00:11:48.016 --> 00:11:51.246
As I mentioned, if you do so,

00:11:51.246 --> 00:11:54.096
the volume becomes a container

00:11:55.416 --> 00:11:56.726
and continues do not share

00:11:56.726 --> 00:11:57.136
space.

00:11:57.776 --> 00:11:59.226
We would recommend if you have

00:11:59.226 --> 00:12:00.626
multiple volumes and would like

00:12:00.626 --> 00:12:01.586
to take advantage of that

00:12:01.586 --> 00:12:03.676
feature that you actually go and

00:12:03.676 --> 00:12:05.026
add volumes to the system

00:12:05.026 --> 00:12:07.916
container and move your data

00:12:08.656 --> 00:12:08.776
over.

00:12:09.016 --> 00:12:10.096
Why space sharing is so

00:12:10.096 --> 00:12:10.996
important and what's so good

00:12:10.996 --> 00:12:11.386
about it?

00:12:12.306 --> 00:12:13.806
Let's talk a little bit about

00:12:13.806 --> 00:12:13.976
that.

00:12:14.696 --> 00:12:18.886
Here's the typical volume layout

00:12:18.886 --> 00:12:20.416
that you might have as a

00:12:20.416 --> 00:12:20.966
developer.

00:12:22.156 --> 00:12:23.746
You probably have multiple

00:12:23.746 --> 00:12:24.336
volumes, right?

00:12:24.856 --> 00:12:28.516
What's the deal with multiple

00:12:28.516 --> 00:12:30.886
volumes is as you start running

00:12:30.886 --> 00:12:32.386
out of space in each of them,

00:12:33.696 --> 00:12:35.316
you might have a little bit of

00:12:35.396 --> 00:12:36.996
free space here, a little bit of

00:12:36.996 --> 00:12:39.146
free space there, but you do not

00:12:39.146 --> 00:12:40.416
have enough in one single

00:12:40.416 --> 00:12:42.186
location so when you try to copy

00:12:42.186 --> 00:12:45.826
your files, nothing you can do.

00:12:46.086 --> 00:12:50.306
In APFS world, the container is

00:12:50.496 --> 00:12:52.476
a partition on your volume, and

00:12:52.476 --> 00:12:55.046
volumes share the free space of

00:12:55.046 --> 00:12:55.796
that partition.

00:12:56.946 --> 00:12:58.066
So let's look at that picture.

00:12:58.326 --> 00:13:01.156
In a typical case, you would

00:13:01.156 --> 00:13:02.346
have a GPT header, [inaudible]

00:13:02.346 --> 00:13:05.086
service partition, and

00:13:05.356 --> 00:13:06.726
[inaudible] each volume is a

00:13:06.726 --> 00:13:07.316
partition.

00:13:07.586 --> 00:13:10.766
In APFS world, as I said, we

00:13:10.986 --> 00:13:12.576
have eight containers of this

00:13:12.626 --> 00:13:13.576
partition and volume [inaudible]

00:13:13.576 --> 00:13:15.136
side of it.

00:13:15.596 --> 00:13:16.596
Let's say you want to fill up

00:13:16.596 --> 00:13:17.116
the space.

00:13:17.476 --> 00:13:19.786
As you can see in HFS you run

00:13:19.786 --> 00:13:20.076
out.

00:13:21.006 --> 00:13:22.756
In APFS, you still can use your

00:13:22.756 --> 00:13:27.176
free space and have your data

00:13:28.176 --> 00:13:28.276
here.

00:13:28.496 --> 00:13:30.146
Let's explore the cloning.

00:13:31.736 --> 00:13:32.946
Cloning is [inaudible].

00:13:32.946 --> 00:13:34.276
It allows you to make fast

00:13:34.276 --> 00:13:35.296
copies of the files.

00:13:35.996 --> 00:13:38.186
In this particular case, let's

00:13:38.186 --> 00:13:39.396
take a local [inaudible] file.

00:13:39.396 --> 00:13:42.036
It has a couple of blocks, and

00:13:42.946 --> 00:13:44.586
traditionally if you copy a file

00:13:44.886 --> 00:13:46.406
you have to copy the data over,

00:13:46.406 --> 00:13:47.666
and that takes time.

00:13:48.126 --> 00:13:49.696
Not only it takes time, it takes

00:13:49.696 --> 00:13:50.006
space.

00:13:51.146 --> 00:13:54.176
In APFS, all we have to do is to

00:13:54.176 --> 00:13:55.466
record the references to that

00:13:55.466 --> 00:13:57.626
file, remember where the file

00:13:57.626 --> 00:14:02.186
is, and only your metadata is

00:14:02.186 --> 00:14:02.386
[inaudible].

00:14:02.386 --> 00:14:04.386
It's also because it's fast and

00:14:04.436 --> 00:14:05.706
you don't waste space.

00:14:06.626 --> 00:14:08.716
You might wonder what happens if

00:14:08.716 --> 00:14:09.736
I have to modify the file.

00:14:10.666 --> 00:14:12.626
It's a single copy after all.

00:14:13.706 --> 00:14:15.766
What happens is that copy and

00:14:15.766 --> 00:14:18.446
write technology kicks in, and

00:14:18.916 --> 00:14:21.746
the new file data is located in

00:14:21.746 --> 00:14:23.436
the free space, and we just

00:14:23.436 --> 00:14:24.826
create yet additional reference.

00:14:26.126 --> 00:14:30.996
Quite simple, saves you space.

00:14:31.206 --> 00:14:33.456
Let's explore another

00:14:33.456 --> 00:14:35.186
interesting aspect of APFS is

00:14:35.186 --> 00:14:35.936
sparse files.

00:14:35.936 --> 00:14:37.416
Let me give you an example.

00:14:37.886 --> 00:14:40.876
Let's say you have a picture of

00:14:40.916 --> 00:14:43.356
a cat on your desktop, something

00:14:43.356 --> 00:14:47.716
like that, and you want to edit

00:14:48.366 --> 00:14:48.446
it.

00:14:51.316 --> 00:14:53.776
Well let's say in APFS world and

00:14:53.776 --> 00:14:55.906
both in HFS world, you would

00:14:55.906 --> 00:14:57.726
have the same initial view.

00:14:58.376 --> 00:15:00.606
You have a file that's 1

00:15:00.606 --> 00:15:02.476
megabyte in size, is

00:15:02.476 --> 00:15:04.406
[inaudible], and you want to

00:15:04.406 --> 00:15:06.116
edit that.

00:15:06.236 --> 00:15:07.266
What would happen if your

00:15:07.266 --> 00:15:09.326
application for example decides

00:15:09.396 --> 00:15:11.456
to seek past the end of the file

00:15:11.456 --> 00:15:12.916
and do additional write.

00:15:13.796 --> 00:15:15.176
Here's where the difference is.

00:15:16.286 --> 00:15:19.516
In HFS, the file system would

00:15:19.516 --> 00:15:21.896
fill the space that you seek

00:15:22.376 --> 00:15:25.066
after with zeros, and your file

00:15:25.066 --> 00:15:28.016
would be 3 megabytes of size,

00:15:28.016 --> 00:15:28.206
right?

00:15:29.246 --> 00:15:30.596
So mega portion of the file

00:15:30.596 --> 00:15:32.006
would be zeroed out by the file

00:15:32.006 --> 00:15:33.436
system, and it would take your

00:15:33.436 --> 00:15:33.826
space.

00:15:34.816 --> 00:15:36.746
In APFS, what you would have is

00:15:36.746 --> 00:15:37.506
a sparse file.

00:15:38.806 --> 00:15:40.896
So middle portion of the file,

00:15:40.896 --> 00:15:42.376
still logically here, if you

00:15:42.416 --> 00:15:44.606
read from that, you would read

00:15:44.606 --> 00:15:46.656
zeros, but physically it takes

00:15:46.656 --> 00:15:47.386
only two blocks.

00:15:48.466 --> 00:15:50.516
Again, saves you space, makes

00:15:50.516 --> 00:15:52.606
your life faster, but you have

00:15:52.656 --> 00:15:53.716
to be aware of that feature.

00:15:54.156 --> 00:15:57.366
So as you can see, there are two

00:15:57.366 --> 00:15:57.936
sizes.

00:15:58.836 --> 00:16:00.426
Logical size and the physical

00:16:00.426 --> 00:16:00.726
size.

00:16:00.726 --> 00:16:03.486
You need to be aware of that,

00:16:04.106 --> 00:16:06.566
but it actually becomes a little

00:16:06.566 --> 00:16:08.386
bit more complicated if you put

00:16:08.386 --> 00:16:11.726
Snapshots or clones into the

00:16:12.496 --> 00:16:12.716
picture.

00:16:12.806 --> 00:16:15.206
So let's explore that a little

00:16:15.206 --> 00:16:15.656
bit.

00:16:15.706 --> 00:16:18.556
How big is your file is

00:16:18.556 --> 00:16:18.716
[inaudible].

00:16:18.716 --> 00:16:20.986
Let's say the same situation

00:16:20.986 --> 00:16:23.366
applies and you have a file that

00:16:23.366 --> 00:16:25.136
sparse, only takes two blocks

00:16:25.136 --> 00:16:25.936
and just going to take a

00:16:25.936 --> 00:16:28.146
Snapshot, record the location of

00:16:28.146 --> 00:16:30.176
those blocks, and now we want to

00:16:30.176 --> 00:16:31.106
modify the file.

00:16:31.586 --> 00:16:34.656
As you see, copy and write

00:16:34.656 --> 00:16:35.706
technique kicks in, will

00:16:35.706 --> 00:16:38.026
allocate new space for the new

00:16:38.026 --> 00:16:39.016
block that you just wrote.

00:16:40.496 --> 00:16:41.586
So how big is your file?

00:16:42.036 --> 00:16:43.876
It's still three megabytes,

00:16:44.006 --> 00:16:44.256
right?

00:16:45.636 --> 00:16:47.616
Physically you still only have

00:16:47.696 --> 00:16:49.796
two blocks for it allocated, but

00:16:49.796 --> 00:16:51.636
[inaudible] delete the file, you

00:16:51.636 --> 00:16:53.176
only get the one block back,

00:16:53.296 --> 00:16:54.506
important thing that you need to

00:16:54.506 --> 00:16:56.996
be aware about.

00:16:57.086 --> 00:17:00.006
So let's talk a little bit about

00:17:00.006 --> 00:17:02.106
next important aspect in your

00:17:02.106 --> 00:17:04.185
file system is Unicodes and

00:17:04.185 --> 00:17:05.826
normalization support.

00:17:07.776 --> 00:17:10.796
As you guys all know, that's

00:17:10.906 --> 00:17:12.786
almost invisible until we have

00:17:12.786 --> 00:17:13.346
problems.

00:17:14.516 --> 00:17:17.026
So let's explore how the world

00:17:17.026 --> 00:17:19.756
differs in APFS versus HFS.

00:17:20.356 --> 00:17:23.076
By default, APFS is case

00:17:23.076 --> 00:17:25.346
insensitive and normalization

00:17:25.346 --> 00:17:27.646
insensitive, unlike HFS, which

00:17:27.646 --> 00:17:28.756
is case insensitive and

00:17:28.756 --> 00:17:29.926
normalizing file system.

00:17:30.766 --> 00:17:31.756
What makes the difference?

00:17:32.176 --> 00:17:35.346
Actually pretty simple.

00:17:35.346 --> 00:17:37.776
In APFS, we keep the file names

00:17:37.896 --> 00:17:39.656
in exactly the same way you pass

00:17:39.656 --> 00:17:40.236
it to us.

00:17:41.496 --> 00:17:43.436
We compute case insensitive and

00:17:43.436 --> 00:17:44.756
normalization insensitive

00:17:45.406 --> 00:17:46.226
[inaudible] together with the

00:17:46.226 --> 00:17:47.786
file name and store it together.

00:17:49.066 --> 00:17:50.896
So when you want to do a lookup,

00:17:51.136 --> 00:17:52.976
we perform the same hashing

00:17:52.976 --> 00:17:53.526
approach.

00:17:54.326 --> 00:17:55.746
We do hash comparison, and

00:17:55.746 --> 00:17:57.236
that's how we can find the name

00:17:57.236 --> 00:17:57.976
fast and efficient.

00:18:00.176 --> 00:18:04.686
Important caveat here, if you do

00:18:04.776 --> 00:18:06.006
a [inaudible] of directory

00:18:06.006 --> 00:18:07.626
structure, the names would come

00:18:07.626 --> 00:18:09.256
out in the order of the hash,

00:18:09.526 --> 00:18:13.826
not in the order of natural

00:18:13.826 --> 00:18:16.286
lexicographical comparison like

00:18:16.286 --> 00:18:17.266
you normally would expect.

00:18:18.476 --> 00:18:19.716
We're also supporting Unicode

00:18:19.716 --> 00:18:22.706
9.0, unlike HFS that supports

00:18:22.706 --> 00:18:23.336
3.2.

00:18:23.896 --> 00:18:26.686
We do not allow unassigned code

00:18:26.686 --> 00:18:29.646
points unlike HFS, and this is

00:18:29.646 --> 00:18:31.036
done for the sake of future

00:18:31.036 --> 00:18:31.866
compatibility.

00:18:32.316 --> 00:18:34.286
So whenever new Unicode standard

00:18:34.286 --> 00:18:36.046
emerges, you can easily take

00:18:36.046 --> 00:18:37.676
advantage of that by replacing

00:18:37.676 --> 00:18:38.536
folds and tables.

00:18:39.716 --> 00:18:41.436
In APFS, we support canonical

00:18:41.436 --> 00:18:43.786
folds unlike in HFS, which

00:18:43.856 --> 00:18:45.346
supports simplified folds, and

00:18:45.626 --> 00:18:47.136
canonical folding is better

00:18:47.376 --> 00:18:48.756
because it allows you natural

00:18:48.756 --> 00:18:50.206
sorts and quarter in the same

00:18:50.206 --> 00:18:51.856
way that users expect.

00:18:52.366 --> 00:18:56.016
Let's talk a little bit about

00:18:56.016 --> 00:18:58.406
Unicode 9.0 and why that's a big

00:18:58.406 --> 00:18:58.646
deal.

00:18:58.716 --> 00:19:00.946
You might wonder, who cares

00:19:00.946 --> 00:19:02.626
about Unicode version.

00:19:03.396 --> 00:19:04.276
Well, you should.

00:19:05.956 --> 00:19:07.956
Unicode 9.0 makes your

00:19:07.956 --> 00:19:09.426
applications truly global.

00:19:09.786 --> 00:19:13.806
For example, in Unicode 8, the

00:19:13.806 --> 00:19:15.406
support for Native American

00:19:15.406 --> 00:19:17.076
Cherokee was added, and now we

00:19:17.396 --> 00:19:20.006
have lower case symbols and

00:19:20.226 --> 00:19:21.986
capital symbols to properly

00:19:21.986 --> 00:19:22.516
support it.

00:19:23.326 --> 00:19:24.656
We support pretty much

00:19:24.756 --> 00:19:26.256
everything language that's

00:19:26.256 --> 00:19:28.126
written and understood by man,

00:19:28.926 --> 00:19:30.456
and if that's not global, I

00:19:30.456 --> 00:19:33.776
don't know what is.

00:19:33.996 --> 00:19:35.386
We support latest emojis.

00:19:36.206 --> 00:19:37.136
You might wonder why?

00:19:37.136 --> 00:19:41.486
Of course, because it

00:19:41.486 --> 00:19:42.436
[inaudible].

00:19:42.436 --> 00:19:46.126
And you might think, okay, HFS

00:19:46.156 --> 00:19:47.256
supported that too.

00:19:47.416 --> 00:19:48.376
So what's the big deal?

00:19:48.756 --> 00:19:50.536
The big deal is actually

00:19:50.536 --> 00:19:51.196
correctness.

00:19:51.926 --> 00:19:55.006
HFS supported that sacrificed

00:19:55.046 --> 00:19:56.546
some aspects of correctness.

00:19:56.806 --> 00:20:00.566
Now the folds in APFS is

00:20:00.786 --> 00:20:02.556
completely Unicode 9.0

00:20:02.556 --> 00:20:06.586
compatible and for some of them,

00:20:06.586 --> 00:20:09.276
we just were certain rules

00:20:09.276 --> 00:20:11.376
succeed, let's say like capital

00:20:11.376 --> 00:20:12.966
I was taught in Turkish language

00:20:13.376 --> 00:20:16.836
or sharp S in German, they would

00:20:16.836 --> 00:20:17.916
be capitalized properly.

00:20:19.026 --> 00:20:21.356
Let's talk a little bit about

00:20:21.356 --> 00:20:21.986
boot support.

00:20:22.756 --> 00:20:24.426
Of course APFS is bootable.

00:20:24.876 --> 00:20:26.156
You would like to boot your Mac,

00:20:27.166 --> 00:20:27.266
right?

00:20:28.066 --> 00:20:29.806
And will have embedded EFT

00:20:29.806 --> 00:20:30.316
driver.

00:20:31.076 --> 00:20:32.326
What embedded means in that

00:20:32.326 --> 00:20:34.356
particular case is the driver

00:20:34.356 --> 00:20:36.256
actually baked in a file system

00:20:36.256 --> 00:20:37.576
for [inaudible] and it's very

00:20:37.576 --> 00:20:41.076
easy, can be loaded by third

00:20:41.076 --> 00:20:43.666
parties that support virtual

00:20:43.666 --> 00:20:44.176
machines.

00:20:44.836 --> 00:20:46.306
You don't really have to

00:20:46.996 --> 00:20:49.266
complete the full driver and the

00:20:49.266 --> 00:20:50.376
standard full format.

00:20:50.706 --> 00:20:52.056
All you have to do is follow a

00:20:52.056 --> 00:20:53.156
couple of pointers from the

00:20:53.156 --> 00:20:55.076
superblock and load the driver

00:20:55.076 --> 00:20:56.996
that's baked into the volume

00:20:56.996 --> 00:20:57.376
itself.

00:20:58.546 --> 00:21:00.336
That makes it future approved so

00:21:00.336 --> 00:21:02.426
in case volume format changes

00:21:03.006 --> 00:21:04.976
all you have to do is just load

00:21:04.976 --> 00:21:06.386
new driver from the new volume.

00:21:07.416 --> 00:21:08.746
We can boot from encrypted

00:21:08.746 --> 00:21:09.236
drives.

00:21:09.376 --> 00:21:10.946
We can boot from fusion drives.

00:21:11.666 --> 00:21:13.316
An encryption boot actually

00:21:13.316 --> 00:21:14.186
makes it more secure.

00:21:14.806 --> 00:21:17.076
Let's talk a little bit about

00:21:17.076 --> 00:21:18.076
security and encryption.

00:21:19.476 --> 00:21:20.856
We support the same FileVault

00:21:20.856 --> 00:21:23.156
model that we used to.

00:21:24.146 --> 00:21:26.176
We have converted for existing

00:21:26.176 --> 00:21:28.256
FileVault volumes.

00:21:29.156 --> 00:21:31.636
We support the same recovery

00:21:31.686 --> 00:21:33.506
keys and not only will we

00:21:33.506 --> 00:21:34.786
support the same mechanisms, we

00:21:34.786 --> 00:21:36.816
will also make it compatible so

00:21:36.816 --> 00:21:38.476
whenever you convert, you

00:21:38.476 --> 00:21:40.326
preserve your existing recovery

00:21:40.326 --> 00:21:41.476
keys, you preserve your existing

00:21:41.476 --> 00:21:41.996
passwords.

00:21:42.156 --> 00:21:43.296
You do not have to move your

00:21:43.296 --> 00:21:44.636
data all over the place, and

00:21:44.666 --> 00:21:45.956
conversion doesn't take that

00:21:45.956 --> 00:21:46.456
much time.

00:21:47.586 --> 00:21:48.656
Also important point, your

00:21:48.656 --> 00:21:50.196
Snapshots are encrypted as well,

00:21:50.896 --> 00:21:52.526
and that means if you took a

00:21:52.526 --> 00:21:54.526
Snapshot at some point and you

00:21:54.526 --> 00:21:56.116
didn't have a password, and then

00:21:56.116 --> 00:21:57.986
you enabled encryption, your old

00:21:57.986 --> 00:22:00.556
data is protected as well.

00:22:01.076 --> 00:22:02.506
We support Fusion drives.

00:22:02.506 --> 00:22:05.046
The he same features that you

00:22:05.046 --> 00:22:06.456
used to have before are still

00:22:06.456 --> 00:22:08.906
there, is write back cache and

00:22:08.906 --> 00:22:09.466
read cache.

00:22:09.746 --> 00:22:11.446
To take advantage of faster SSD

00:22:11.446 --> 00:22:13.476
devices, we made small

00:22:13.476 --> 00:22:15.616
improvement, and now all your

00:22:15.616 --> 00:22:17.326
metadata always going to be on

00:22:17.356 --> 00:22:19.796
SSD, that makes this a little

00:22:19.976 --> 00:22:20.806
bit faster.

00:22:20.806 --> 00:22:25.036
Another important feature is

00:22:25.036 --> 00:22:25.946
defragmentation.

00:22:26.826 --> 00:22:27.866
We support intelligent

00:22:27.866 --> 00:22:28.466
defragmenter.

00:22:29.456 --> 00:22:30.486
What makes it intelligent?

00:22:30.486 --> 00:22:31.896
It's smart enough to understand

00:22:32.036 --> 00:22:33.266
[inaudible] performance first to

00:22:33.266 --> 00:22:35.106
most were which files were most

00:22:35.106 --> 00:22:37.106
fragmented and it defragments

00:22:37.106 --> 00:22:37.786
them first.

00:22:38.256 --> 00:22:40.526
It defragments only hard drives,

00:22:41.116 --> 00:22:43.626
and defragmentation happens when

00:22:43.626 --> 00:22:45.266
your machine is idle and it

00:22:45.266 --> 00:22:46.376
doesn't interfere with your

00:22:46.376 --> 00:22:47.506
normal workflow.

00:22:51.116 --> 00:22:53.746
Another interesting topic is

00:22:53.746 --> 00:22:54.376
Snapshots.

00:22:55.486 --> 00:22:57.076
Let's explore this a little bit.

00:22:58.216 --> 00:23:00.376
So what happens is imagine you

00:23:00.376 --> 00:23:01.936
have a file system, a couple of

00:23:01.936 --> 00:23:03.966
files here, and you want to

00:23:03.966 --> 00:23:05.356
remember the state of that file

00:23:05.356 --> 00:23:06.986
system for future reference.

00:23:07.506 --> 00:23:11.206
What happens here, will remember

00:23:11.276 --> 00:23:13.206
all the references to all the

00:23:13.206 --> 00:23:15.596
files, create a Snapshot of the

00:23:15.596 --> 00:23:18.796
metadata and record it.

00:23:18.796 --> 00:23:19.976
If you later make [inaudible] to

00:23:20.076 --> 00:23:22.236
your file system, let's say you

00:23:22.236 --> 00:23:25.616
[inaudible] file, the same copy

00:23:25.616 --> 00:23:26.726
on the write technology kicks

00:23:26.726 --> 00:23:30.296
in, will allocate space in a new

00:23:30.296 --> 00:23:32.246
location, write your files.

00:23:32.566 --> 00:23:34.296
Your existing blocks are intact.

00:23:34.826 --> 00:23:36.596
Now let's say you delete a file.

00:23:37.806 --> 00:23:39.266
The blocks are not actually

00:23:39.266 --> 00:23:41.206
gone, only the reference to that

00:23:41.266 --> 00:23:44.456
block is gone.

00:23:44.606 --> 00:23:46.826
So later if you want to revert

00:23:46.856 --> 00:23:49.156
to a Snapshot, it will restore

00:23:49.156 --> 00:23:51.016
the state the way it used to be.

00:23:51.926 --> 00:23:53.836
For example, your [inaudible]

00:23:53.996 --> 00:23:56.516
will be gone, and the file that

00:23:56.516 --> 00:23:59.776
you deleted would be restored.

00:23:59.846 --> 00:24:00.946
A Snapshot [inaudible] feature.

00:24:01.976 --> 00:24:02.796
They're fast to take.

00:24:03.576 --> 00:24:05.186
You need to be mindful that they

00:24:05.186 --> 00:24:06.116
occupy space.

00:24:07.086 --> 00:24:08.466
Because of that, creating

00:24:08.466 --> 00:24:10.146
Snapshots requires entitlements,

00:24:11.236 --> 00:24:12.286
and if you want to take

00:24:12.286 --> 00:24:13.016
advantage of a [inaudible],

00:24:13.016 --> 00:24:15.346
please talk to us.

00:24:15.636 --> 00:24:17.306
With that, I'm going to show you

00:24:17.306 --> 00:24:17.866
a demo.

00:24:17.866 --> 00:24:19.336
I'm going to invite Pavel Cisler

00:24:19.336 --> 00:24:20.646
and going to show you a demo of

00:24:20.646 --> 00:24:20.966
the time machine.

00:24:21.516 --> 00:24:25.706
[ Applause ]

00:24:26.206 --> 00:24:26.726
>> Thank you, Pavel.

00:24:26.726 --> 00:24:28.616
Hello everybody.

00:24:28.616 --> 00:24:32.556
My name is Pavel Cisler, and in

00:24:32.556 --> 00:24:35.016
case you wonder what's up with

00:24:35.186 --> 00:24:36.346
this guy's first name and the

00:24:36.346 --> 00:24:37.516
last guy's first name being the

00:24:37.516 --> 00:24:40.256
same, let me just say, we did

00:24:40.296 --> 00:24:42.446
some testing on clone file, and

00:24:42.976 --> 00:24:45.556
[laughter]-- anyway, so I manage

00:24:45.616 --> 00:24:46.776
the Finder and Time Machine

00:24:46.776 --> 00:24:47.086
teams.

00:24:47.086 --> 00:24:50.666
Who is a Time Machine user here?

00:24:51.726 --> 00:24:52.236
Wow, cool.

00:24:52.306 --> 00:24:53.646
A lot of you guys.

00:24:54.146 --> 00:24:55.606
Anybody here know about the

00:24:55.606 --> 00:24:56.876
mobile Time Machine feature?

00:24:58.136 --> 00:24:58.856
Some of you.

00:24:58.856 --> 00:24:59.646
Not as many.

00:25:00.196 --> 00:25:02.686
Okay. So I'm going to show you

00:25:03.006 --> 00:25:04.246
mobile Time Machine a little

00:25:04.646 --> 00:25:04.746
bit.

00:25:04.896 --> 00:25:06.576
Let me switch over to my demo

00:25:06.576 --> 00:25:07.236
machine here.

00:25:08.806 --> 00:25:11.626
So mobile Time Machine is this

00:25:11.626 --> 00:25:14.516
convenient part of Time Machine

00:25:14.516 --> 00:25:16.016
that's a feature that lets you

00:25:16.196 --> 00:25:19.796
back up your changes when you

00:25:19.796 --> 00:25:20.986
are on the go and you're away

00:25:20.986 --> 00:25:22.196
from your backup device, your

00:25:22.196 --> 00:25:24.536
time capsule, or your hard

00:25:24.536 --> 00:25:25.056
drive, right.

00:25:25.306 --> 00:25:26.516
Let's say you take your laptop

00:25:26.516 --> 00:25:27.186
on the road.

00:25:27.186 --> 00:25:30.826
Your time capsule is at home.

00:25:31.726 --> 00:25:33.596
Your machine still continues to

00:25:33.596 --> 00:25:34.976
make hourly backups through

00:25:34.976 --> 00:25:37.346
mobile Time Machine, and that's

00:25:37.346 --> 00:25:38.306
a great feature, right?

00:25:38.306 --> 00:25:39.556
It doesn't necessarily help you

00:25:39.556 --> 00:25:41.016
with things like you lose your

00:25:41.016 --> 00:25:42.796
laptop or you lose your entire

00:25:42.796 --> 00:25:44.326
hard drive, but if you

00:25:44.326 --> 00:25:45.836
accidentally erase that

00:25:45.836 --> 00:25:47.116
important spreadsheet or

00:25:47.166 --> 00:25:50.396
whatnot, mobile Time Machine can

00:25:50.796 --> 00:25:51.996
save the day.

00:25:52.376 --> 00:25:54.576
So we have this feature since

00:25:54.576 --> 00:25:57.096
MacQuest and Lion, and let me

00:25:57.096 --> 00:25:58.156
show you real quick how it

00:25:58.156 --> 00:25:58.486
works.

00:25:58.486 --> 00:25:59.806
So here I am.

00:26:00.306 --> 00:26:02.406
Here's the Time Machine restore

00:26:02.406 --> 00:26:04.906
UI, and my laptop here, I

00:26:04.906 --> 00:26:06.456
brought it from my office, I'm

00:26:06.456 --> 00:26:07.656
not connected to any time

00:26:07.656 --> 00:26:09.726
capsule, and yet I still have a

00:26:09.836 --> 00:26:13.036
backup history here, and I can

00:26:13.206 --> 00:26:14.666
browse and see my files.

00:26:16.456 --> 00:26:18.406
And here's that secret budget

00:26:19.476 --> 00:26:20.866
document that I was working on

00:26:20.866 --> 00:26:22.096
earlier that I accidentally

00:26:22.096 --> 00:26:24.086
deleted, and just like that I

00:26:24.086 --> 00:26:28.866
restored it, and I can continue

00:26:28.866 --> 00:26:30.256
working on it.

00:26:30.516 --> 00:26:32.446
So simple feature.

00:26:33.106 --> 00:26:34.516
You can really save the day when

00:26:34.516 --> 00:26:35.616
you need it.

00:26:36.046 --> 00:26:40.846
Now you guys are developers, and

00:26:41.216 --> 00:26:43.136
you would like to know how it

00:26:43.136 --> 00:26:45.276
works under the hood, right?

00:26:45.666 --> 00:26:48.666
So on MacQuest and Lion when we

00:26:48.666 --> 00:26:50.076
first developed this feature, it

00:26:50.356 --> 00:26:51.906
was quite involved.

00:26:51.986 --> 00:26:55.076
It takes no less than two demons

00:26:55.396 --> 00:26:56.076
to do.

00:26:56.426 --> 00:26:58.886
One of them is a virtual file

00:26:58.926 --> 00:26:59.786
system overlay.

00:26:59.786 --> 00:27:02.456
If any of you had a chance to

00:27:02.456 --> 00:27:03.676
work on something like that, you

00:27:03.676 --> 00:27:04.996
know it's pretty tricky.

00:27:05.386 --> 00:27:06.546
So it's literally tens of

00:27:06.546 --> 00:27:08.596
thousands of lines of code.

00:27:08.986 --> 00:27:11.576
So for macOS 10 High Sierra, the

00:27:11.836 --> 00:27:14.316
Time Machine team was super busy

00:27:14.876 --> 00:27:16.086
deleting all this code.

00:27:16.526 --> 00:27:19.786
So what we did, we reimplemented

00:27:19.786 --> 00:27:21.326
mobile Time Machine on top of

00:27:21.326 --> 00:27:23.306
APFS Snapshots, and that's

00:27:23.306 --> 00:27:25.036
actually what I just demoed to

00:27:25.036 --> 00:27:25.416
you here.

00:27:26.326 --> 00:27:28.556
So never mind this UI.

00:27:28.556 --> 00:27:30.626
Let me open up Terminal and show

00:27:30.626 --> 00:27:33.656
you some of it under the hood.

00:27:34.046 --> 00:27:35.866
When we talk about Snapshots,

00:27:36.626 --> 00:27:37.966
what do they look like?

00:27:37.966 --> 00:27:39.756
What do they feel like?

00:27:39.756 --> 00:27:41.276
Well, they feel very much like

00:27:41.396 --> 00:27:44.896
any other volume, and as such,

00:27:44.966 --> 00:27:47.526
you can inspect them using a

00:27:47.526 --> 00:27:50.376
variety of volume management

00:27:50.376 --> 00:27:50.746
tools.

00:27:51.136 --> 00:27:53.056
My favorite is Mount, so let me

00:27:53.056 --> 00:27:54.916
go ahead and type Mount here.

00:27:55.056 --> 00:27:57.906
Without any arguments, if you do

00:27:57.906 --> 00:27:59.436
that, it lists all your disks,

00:27:59.946 --> 00:28:01.726
and you can see here that at the

00:28:01.726 --> 00:28:06.046
top there's my slash, there's a

00:28:06.046 --> 00:28:07.106
swap space here.

00:28:07.426 --> 00:28:09.246
A bunch of other common volumes,

00:28:09.246 --> 00:28:10.726
but then there's these funny

00:28:11.186 --> 00:28:14.006
volumes that are mounted at a

00:28:14.006 --> 00:28:15.986
mount point that continues to

00:28:15.986 --> 00:28:17.816
[inaudible] that Time Machine in

00:28:17.816 --> 00:28:19.956
the path, and there's also this

00:28:20.016 --> 00:28:22.626
strange time stamp.

00:28:22.866 --> 00:28:25.596
Well, these are all APFS

00:28:25.596 --> 00:28:28.796
Snapshots that represent the

00:28:28.796 --> 00:28:30.836
individual hourly mobile Time

00:28:30.836 --> 00:28:32.496
Machine backups, right.

00:28:32.756 --> 00:28:34.046
Each of them is a Snapshot.

00:28:34.046 --> 00:28:35.476
Each of them mounted as a

00:28:35.476 --> 00:28:35.966
volume.

00:28:36.216 --> 00:28:37.786
So if I go into the Time Machine

00:28:38.566 --> 00:28:41.326
restore UI on the right here,

00:28:41.326 --> 00:28:42.056
that's what they are.

00:28:43.146 --> 00:28:44.836
So let me go back.

00:28:45.146 --> 00:28:48.246
So these Snapshots aren't

00:28:48.246 --> 00:28:51.186
actually mounted all the time.

00:28:51.186 --> 00:28:52.626
They get mounted [inaudible], so

00:28:52.626 --> 00:28:54.036
they don't have to stick around.

00:28:54.036 --> 00:28:55.946
Mobile Time Machine only kicks

00:28:56.006 --> 00:28:57.836
them in when it needs them and

00:28:58.296 --> 00:28:58.756
[inaudible] them after.

00:28:58.756 --> 00:29:02.436
So let me show you how that,

00:29:02.436 --> 00:29:03.796
what happens when you do that.

00:29:03.796 --> 00:29:06.076
So I'm going to simulate what

00:29:06.076 --> 00:29:07.686
mobile Time Machine would do

00:29:07.686 --> 00:29:09.726
when it's done with Snapshots

00:29:09.726 --> 00:29:10.786
and unmount them all.

00:29:10.786 --> 00:29:12.756
I'll use this command line too

00:29:12.756 --> 00:29:15.506
called tmutil with a verb called

00:29:15.506 --> 00:29:18.106
unmount local Snapshots.

00:29:18.176 --> 00:29:20.346
And it's going ahead and

00:29:20.346 --> 00:29:21.746
unmounting all the Snapshots.

00:29:22.006 --> 00:29:25.236
So now if I entered the restore

00:29:25.236 --> 00:29:28.026
UI, it actually has to remount

00:29:28.066 --> 00:29:28.716
them, right.

00:29:28.716 --> 00:29:31.616
So that was super quick, right.

00:29:32.146 --> 00:29:34.826
So it just mounted what, like

00:29:34.826 --> 00:29:37.656
some 20 volumes just like that.

00:29:37.716 --> 00:29:39.186
So that's fantastic.

00:29:39.636 --> 00:29:42.386
Now, I'm going to go ahead and

00:29:42.506 --> 00:29:43.756
do a backup.

00:29:43.756 --> 00:29:45.066
Mobile Time Machine backs up

00:29:45.206 --> 00:29:45.906
once an hour.

00:29:45.906 --> 00:29:47.476
It wakes up and creates a

00:29:47.476 --> 00:29:48.056
Snapshot.

00:29:48.296 --> 00:29:49.856
We're not going to sit around

00:29:49.856 --> 00:29:51.396
for an hour here and wait for

00:29:51.396 --> 00:29:51.546
that.

00:29:51.606 --> 00:29:53.456
So I'll use a tool again.

00:29:54.016 --> 00:30:00.336
Tmutil Snapshot and it just

00:30:00.586 --> 00:30:02.146
backed up, right.

00:30:02.446 --> 00:30:05.026
So you saw it took a little less

00:30:05.086 --> 00:30:07.166
than a second to back up the

00:30:07.216 --> 00:30:08.656
entire machine.

00:30:09.006 --> 00:30:09.876
So that's fantastic.

00:30:10.516 --> 00:30:14.036
[ Applause ]

00:30:14.536 --> 00:30:16.856
So I'm going to go ahead and

00:30:17.346 --> 00:30:18.796
show you that it actually

00:30:18.866 --> 00:30:19.056
worked.

00:30:19.056 --> 00:30:21.566
I'm going to accidentally delete

00:30:21.566 --> 00:30:22.476
some data here.

00:30:23.996 --> 00:30:27.786
Oh no, what did I do, my

00:30:27.786 --> 00:30:28.616
important movie.

00:30:28.616 --> 00:30:30.626
And I'm going to go back into

00:30:30.626 --> 00:30:33.526
the restore UI and, ah, whew,

00:30:33.916 --> 00:30:36.476
there it is, and restore it.

00:30:36.866 --> 00:30:39.406
So again mobile Time Machine

00:30:39.406 --> 00:30:39.976
saves the day.

00:30:40.846 --> 00:30:44.486
So how come this was so fast?

00:30:44.646 --> 00:30:46.376
Well, as the other Pavel

00:30:46.376 --> 00:30:48.546
explained to you, snapshotting

00:30:48.776 --> 00:30:50.856
is a copy and write technology,

00:30:50.856 --> 00:30:53.346
so you basically just grab

00:30:53.346 --> 00:30:56.036
references to your data, and the

00:30:56.036 --> 00:30:57.616
actual copying happens later if

00:30:57.616 --> 00:30:59.816
there's an actual change.

00:30:59.816 --> 00:31:00.576
It's deferred.

00:31:00.576 --> 00:31:01.536
It's lazy, right.

00:31:02.056 --> 00:31:03.586
So much more faster, much more

00:31:03.586 --> 00:31:03.996
efficient.

00:31:05.606 --> 00:31:07.546
So the other thing I'm going to

00:31:07.546 --> 00:31:09.216
point out here is that this

00:31:09.216 --> 00:31:10.606
movie that I just restored is

00:31:10.606 --> 00:31:12.886
actually pretty big.

00:31:12.966 --> 00:31:15.196
It's a movie of our last year's

00:31:15.886 --> 00:31:16.236
talk.

00:31:16.846 --> 00:31:20.926
It's 1.1 gigs, and the old

00:31:20.926 --> 00:31:23.286
mobile Time Machine had certain

00:31:23.286 --> 00:31:25.446
limits, like it couldn't back up

00:31:25.446 --> 00:31:27.876
changes to files over 20

00:31:27.876 --> 00:31:28.396
megabytes.

00:31:28.396 --> 00:31:30.066
Well, all these limits are gone

00:31:30.626 --> 00:31:31.256
now.

00:31:31.256 --> 00:31:32.966
Mobile Time Machine on top of

00:31:32.966 --> 00:31:36.046
APFS Snapshots will back up

00:31:36.156 --> 00:31:37.686
anything in a very speedy way

00:31:37.686 --> 00:31:39.416
and efficiently.

00:31:39.536 --> 00:31:42.116
So that's mobile Time Machine on

00:31:42.116 --> 00:31:43.376
top of APFS Snapshots.

00:31:44.526 --> 00:31:44.996
All right.

00:31:44.996 --> 00:31:47.896
S otherwise that, I'm going to

00:31:49.106 --> 00:31:51.096
switch back to the slides and

00:31:51.096 --> 00:31:54.146
Pavel will tell you more about

00:31:54.146 --> 00:31:56.056
some of the APIs we've used to

00:31:56.106 --> 00:31:56.756
make this happen.

00:31:56.756 --> 00:31:57.276
Thank you everyone.

00:31:58.516 --> 00:32:04.676
[ Applause ]

00:32:05.176 --> 00:32:05.926
>> Thank you, Pavel.

00:32:06.516 --> 00:32:10.976
[ Background Noise ]

00:32:11.476 --> 00:32:13.486
So you might wonder what about

00:32:13.486 --> 00:32:15.416
APIs, how to take advantage of

00:32:15.416 --> 00:32:15.856
all that.

00:32:16.646 --> 00:32:21.006
So good news is if you program

00:32:21.006 --> 00:32:22.076
[inaudible] like you probably

00:32:22.076 --> 00:32:25.896
should, it's all taken care of

00:32:26.946 --> 00:32:27.536
for you.

00:32:28.246 --> 00:32:31.166
The copyItem API automatically

00:32:31.166 --> 00:32:33.216
takes advantage of API files

00:32:34.116 --> 00:32:35.016
clone feature.

00:32:36.116 --> 00:32:37.346
How that happens behind the

00:32:37.346 --> 00:32:39.246
scenes we see if volume is

00:32:39.246 --> 00:32:41.946
compatible with cloning, and we

00:32:41.996 --> 00:32:43.816
take clones automatically as you

00:32:43.816 --> 00:32:44.756
copy the files.

00:32:46.176 --> 00:32:47.736
There's also replaceItem API,

00:32:47.986 --> 00:32:48.946
which takes care of [inaudible]

00:32:48.946 --> 00:32:51.596
save save, again automatically

00:32:52.136 --> 00:32:54.286
you don't have to do anything

00:32:54.286 --> 00:32:56.366
for that.

00:32:56.626 --> 00:32:57.846
There are a couple of guidelines

00:32:57.896 --> 00:32:59.916
that I want to remind, good

00:33:00.016 --> 00:33:02.876
practices, and important points.

00:33:03.576 --> 00:33:05.656
In particular, [inaudible] data

00:33:05.856 --> 00:33:06.766
is duplicated.

00:33:06.796 --> 00:33:08.636
We announced that a year ago,

00:33:09.456 --> 00:33:11.116
and not only is it duplicated,

00:33:11.856 --> 00:33:13.766
it's also not going to work with

00:33:13.766 --> 00:33:14.376
API files.

00:33:15.456 --> 00:33:17.666
Instead of that, if you want to

00:33:17.936 --> 00:33:19.586
take advantage of [inaudible]

00:33:19.586 --> 00:33:21.276
file swap, [inaudible] save

00:33:21.276 --> 00:33:23.626
save, use new API which is

00:33:23.626 --> 00:33:25.376
called rename underscore np.

00:33:26.086 --> 00:33:29.876
Also, please do not use carbon

00:33:29.876 --> 00:33:30.336
APIs.

00:33:30.716 --> 00:33:31.696
Again that's [inaudible].

00:33:32.016 --> 00:33:33.526
It works in compatibility mode

00:33:33.526 --> 00:33:34.316
with API files.

00:33:34.546 --> 00:33:35.866
It's going to be much slower.

00:33:36.236 --> 00:33:38.196
It's [inaudible] the file

00:33:38.196 --> 00:33:38.626
system.

00:33:38.926 --> 00:33:41.706
Instead, use foundation APIs.

00:33:42.636 --> 00:33:46.196
If you want a little bit lower

00:33:46.196 --> 00:33:48.716
layer, you can use [inaudible]

00:33:48.716 --> 00:33:51.366
copyfile with copyfile function

00:33:51.686 --> 00:33:53.186
that supports copyfile clone

00:33:53.186 --> 00:33:53.556
flag.

00:33:53.736 --> 00:33:57.346
There are a couple of caveats

00:33:57.656 --> 00:33:59.196
for that [inaudible] preview.

00:34:00.276 --> 00:34:02.206
In particular, we're not going

00:34:02.206 --> 00:34:03.906
to automatically upgrade

00:34:03.956 --> 00:34:06.216
HDD-based file systems.

00:34:07.056 --> 00:34:07.776
We're still working on

00:34:07.776 --> 00:34:11.556
performance, and if you'd like

00:34:11.606 --> 00:34:14.826
to get bootable APFS, it's not

00:34:14.826 --> 00:34:15.856
enough just to run the

00:34:15.856 --> 00:34:16.366
converter.

00:34:16.656 --> 00:34:17.676
You have to go through the

00:34:17.676 --> 00:34:18.156
installer.

00:34:18.346 --> 00:34:24.076
So APFS is coming to macOS.

00:34:24.166 --> 00:34:25.025
It's here.

00:34:25.646 --> 00:34:27.406
In fact, it's supported file

00:34:27.406 --> 00:34:27.826
system.

00:34:28.815 --> 00:34:30.306
It supports Fusion drives.

00:34:30.306 --> 00:34:32.136
It will support native

00:34:32.136 --> 00:34:32.706
encryption.

00:34:33.016 --> 00:34:34.536
Space sharing is an awesome

00:34:34.536 --> 00:34:34.896
feature.

00:34:35.956 --> 00:34:37.315
There are clone files and

00:34:37.446 --> 00:34:39.376
snapshots that are going to make

00:34:39.376 --> 00:34:40.966
your storage more efficient and

00:34:41.005 --> 00:34:41.396
faster.

00:34:42.096 --> 00:34:44.146
Please test your apps as you

00:34:44.146 --> 00:34:45.886
just noticed there are a couple

00:34:45.886 --> 00:34:47.485
of important differences between

00:34:47.485 --> 00:34:48.666
HFS and APFS.

00:34:48.826 --> 00:34:49.956
We would like your apps to be

00:34:49.956 --> 00:34:51.255
successful and awesome.

00:34:51.996 --> 00:34:53.966
Please give it a try, and report

00:34:53.966 --> 00:34:55.196
your bugs.

00:34:56.596 --> 00:34:57.746
There's more information

00:34:57.746 --> 00:34:59.916
available for you at that URL.

00:34:59.916 --> 00:35:01.136
Thank you.

00:35:02.516 --> 00:35:10.640
[ Applause ]