WEBVTT

00:00:17.316 --> 00:00:18.796
>> Ladies and gentlemen, please

00:00:18.796 --> 00:00:20.286
welcome Vice President of

00:00:20.286 --> 00:00:22.636
Platform Technologies, Andreas

00:00:22.636 --> 00:00:23.216
Wendker.

00:00:24.516 --> 00:00:33.496
[ Applause ]

00:00:33.996 --> 00:00:36.226
>> Good afternoon.

00:00:36.226 --> 00:00:37.606
Welcome to WWDC.

00:00:38.266 --> 00:00:39.616
As you heard this morning in the

00:00:39.716 --> 00:00:41.516
keynote, this is a year with a

00:00:41.516 --> 00:00:43.096
strong focus on technology

00:00:43.096 --> 00:00:44.666
fundamentals and refinements

00:00:44.666 --> 00:00:46.216
across all Apple product lines.

00:00:47.416 --> 00:00:49.016
We're introducing numerous APIs

00:00:49.016 --> 00:00:51.456
that enable new use cases for

00:00:51.456 --> 00:00:52.816
your apps, covering a broad

00:00:52.816 --> 00:00:53.886
spectrum that ranges from

00:00:53.886 --> 00:00:55.816
machine learning to augmented

00:00:55.816 --> 00:00:57.426
and virtual reality, to access

00:00:57.706 --> 00:00:59.486
to the music, to the Apple Music

00:00:59.486 --> 00:00:59.866
Library.

00:01:01.616 --> 00:01:03.346
We're also making improvements

00:01:03.396 --> 00:01:04.396
to many of our core

00:01:04.396 --> 00:01:05.075
technologies.

00:01:05.446 --> 00:01:07.486
For example, our new modern file

00:01:07.596 --> 00:01:09.496
system, APFS, is now even more

00:01:09.496 --> 00:01:09.946
powerful.

00:01:10.556 --> 00:01:12.426
That created a new, much faster

00:01:12.426 --> 00:01:14.486
version of method, and we helped

00:01:14.486 --> 00:01:15.926
define and adopt a new

00:01:16.066 --> 00:01:17.546
high-efficiency image format

00:01:17.786 --> 00:01:18.876
with advanced compression.

00:01:20.196 --> 00:01:21.916
Now, most of these technologies

00:01:21.916 --> 00:01:23.476
and APIs apply to all our

00:01:23.476 --> 00:01:24.706
operating systems across the

00:01:24.706 --> 00:01:26.066
board, so they're moving forward

00:01:26.066 --> 00:01:26.406
together.

00:01:27.486 --> 00:01:28.476
But let's also take a look at

00:01:28.476 --> 00:01:29.796
some specific highlights that

00:01:29.796 --> 00:01:31.226
affect you as software

00:01:33.076 --> 00:01:33.526
developers.

00:01:33.526 --> 00:01:35.406
iOS 11 has a huge number of

00:01:35.406 --> 00:01:37.466
incredible features, but perhaps

00:01:37.466 --> 00:01:38.746
most importantly, it is the

00:01:38.746 --> 00:01:40.726
biggest iPad release ever, and

00:01:41.066 --> 00:01:42.626
it turns iPad into a major

00:01:42.626 --> 00:01:44.076
productivity device with a new

00:01:44.076 --> 00:01:46.236
Dock, drag and drop, find

00:01:46.236 --> 00:01:47.426
management, and enhanced

00:01:47.426 --> 00:01:48.216
multitasking.

00:01:48.696 --> 00:01:51.516
In macOS, we really took the

00:01:51.516 --> 00:01:52.926
time to broadly clean up

00:01:52.926 --> 00:01:54.236
performance and animations.

00:01:54.236 --> 00:01:56.796
And for the additional support

00:01:56.796 --> 00:01:58.476
for Fusion Drives and for disk

00:01:58.476 --> 00:02:00.336
encryption, APFS is now ready to

00:02:00.336 --> 00:02:01.516
come to the Mac as a fully

00:02:01.516 --> 00:02:02.576
supported file system.

00:02:03.116 --> 00:02:05.576
We also laid the groundwork for

00:02:05.576 --> 00:02:06.696
turning the Mac into a virtual

00:02:06.696 --> 00:02:07.716
reality powerhouse.

00:02:08.276 --> 00:02:11.876
And for watchOS, we made our UI

00:02:11.876 --> 00:02:13.506
components more flexible so that

00:02:13.506 --> 00:02:14.966
you can create more custom user

00:02:14.966 --> 00:02:15.716
experiences.

00:02:16.576 --> 00:02:18.566
New modes for navigation and

00:02:18.566 --> 00:02:20.226
audio recording allow your apps

00:02:20.276 --> 00:02:22.106
to continue processing data and

00:02:22.106 --> 00:02:23.376
providing feedback to the user,

00:02:23.376 --> 00:02:24.076
even when running in the

00:02:24.076 --> 00:02:24.526
background.

00:02:24.526 --> 00:02:26.656
And the new unified app runtime

00:02:26.796 --> 00:02:28.086
keeps your apps more responsive.

00:02:28.716 --> 00:02:31.236
We also added support for Core

00:02:31.236 --> 00:02:32.396
Bluetooth so that you can now

00:02:32.396 --> 00:02:34.466
directly connect to BTLE devices

00:02:34.776 --> 00:02:36.406
and display data from them right

00:02:36.406 --> 00:02:37.216
on the user's wrist.

00:02:37.216 --> 00:02:40.896
And in tvOS, we implemented a

00:02:40.896 --> 00:02:42.346
wide variety of enhancements

00:02:42.346 --> 00:02:43.486
that you can take advantage of

00:02:43.486 --> 00:02:44.646
for rounding out your apps'

00:02:44.646 --> 00:02:46.046
functionality for all your

00:02:46.046 --> 00:02:47.546
users, including right-to-left

00:02:47.546 --> 00:02:48.656
support for the appropriate

00:02:48.656 --> 00:02:49.166
languages.

00:02:49.476 --> 00:02:52.556
And beyond our operating

00:02:52.556 --> 00:02:53.816
systems, we're also hard at

00:02:53.886 --> 00:02:55.546
work on improving our general

00:02:55.546 --> 00:02:57.086
developer ecosystem and the

00:02:57.236 --> 00:02:58.666
support we give you for

00:02:58.666 --> 00:03:00.726
marketing and shipping apps.

00:03:01.316 --> 00:03:03.026
We increased the number of users

00:03:03.026 --> 00:03:03.946
you can have, when you ship

00:03:03.946 --> 00:03:05.376
beta versions of your apps in

00:03:05.376 --> 00:03:05.946
TestFlight.

00:03:06.726 --> 00:03:08.206
And the App Store now allows you

00:03:08.206 --> 00:03:10.096
to rule out updates to your apps

00:03:10.096 --> 00:03:11.396
over a period of several days.

00:03:12.176 --> 00:03:13.606
You'll be able to respond to

00:03:13.606 --> 00:03:15.406
user feedback, user reviews of

00:03:15.456 --> 00:03:15.926
your apps.

00:03:16.306 --> 00:03:17.036
You'll be able to post

00:03:17.036 --> 00:03:18.386
promotional materials on your

00:03:18.386 --> 00:03:20.006
Store pages and much, much more.

00:03:22.096 --> 00:03:23.836
And we are modernizing the

00:03:23.836 --> 00:03:25.416
content in our App Stores.

00:03:25.916 --> 00:03:26.946
We've been working for a while

00:03:26.946 --> 00:03:28.856
now on getting all iOS software

00:03:28.856 --> 00:03:30.306
to take advantage of the power

00:03:30.306 --> 00:03:32.296
and performance for our 64-bit

00:03:32.296 --> 00:03:32.896
processors.

00:03:33.306 --> 00:03:35.206
With iOS 11, we're completing

00:03:35.206 --> 00:03:35.906
this transition.

00:03:36.456 --> 00:03:38.146
We're going to thin iOS 11 to

00:03:38.146 --> 00:03:40.756
be 64-bit only, and 32-bit apps

00:03:40.886 --> 00:03:42.196
are not going to be supported

00:03:42.196 --> 00:03:42.616
anymore.

00:03:43.106 --> 00:03:45.826
And with that, it's now time to

00:03:45.826 --> 00:03:47.176
turn our attention to doing the

00:03:47.246 --> 00:03:48.326
same with macOS.

00:03:48.876 --> 00:03:50.306
The transition to 64-bit-only

00:03:50.306 --> 00:03:51.836
Mac apps is going to take place

00:03:51.836 --> 00:03:53.496
very similarly to how we handled

00:03:53.496 --> 00:03:54.516
it on iOS.

00:03:55.306 --> 00:03:57.416
Most importantly, High Sierra is

00:03:57.416 --> 00:03:58.806
going to be the last macOS

00:03:58.806 --> 00:04:00.836
release to fully support 32-bit

00:04:00.836 --> 00:04:02.376
apps without compromises.

00:04:03.126 --> 00:04:04.506
In the next major release after

00:04:04.506 --> 00:04:05.616
High Sierra, we're going to

00:04:05.616 --> 00:04:07.336
aggressively start warning users

00:04:07.906 --> 00:04:09.466
if apps are not compatible for

00:04:09.466 --> 00:04:12.186
64-bit.

00:04:12.386 --> 00:04:13.416
We're updating the Mac App

00:04:13.416 --> 00:04:14.536
Store rules accordingly.

00:04:14.976 --> 00:04:16.375
In about six months, we'll

00:04:16.375 --> 00:04:17.875
require that all new apps

00:04:17.875 --> 00:04:19.185
submitted to the Mac App Store

00:04:19.185 --> 00:04:21.776
will be 64-bit capable and, in a

00:04:21.776 --> 00:04:23.396
year from now, we'll require all

00:04:23.396 --> 00:04:25.406
new apps and updates to existing

00:04:25.406 --> 00:04:27.486
apps to be 64-bit only when

00:04:27.486 --> 00:04:28.746
submitted to the Mac App Store.

00:04:29.296 --> 00:04:32.616
So for the next 90 minutes or

00:04:32.616 --> 00:04:34.106
so, we're going to go deep on

00:04:34.106 --> 00:04:35.546
the most important APIs and

00:04:35.546 --> 00:04:36.366
technologies that we're

00:04:36.366 --> 00:04:37.286
announcing today.

00:04:37.636 --> 00:04:38.656
We're also going to cover our

00:04:38.656 --> 00:04:40.136
developer tools in depth.

00:04:40.576 --> 00:04:41.606
In fact, we're going to start

00:04:41.606 --> 00:04:42.496
with Swift Playgrounds.

00:04:42.636 --> 00:04:44.146
I'm going to hand it over to

00:04:44.146 --> 00:04:45.666
Matthew Firlik for that.

00:04:46.516 --> 00:04:51.116
[ Applause ]

00:04:51.616 --> 00:04:52.496
>> Thank you, Andreas.

00:04:53.276 --> 00:04:54.726
Swift Playgrounds has brought

00:04:54.726 --> 00:04:56.366
something new and important to

00:04:56.366 --> 00:04:58.106
education -- teaching

00:04:58.176 --> 00:04:59.976
programming to kids in a fun way

00:05:00.356 --> 00:05:01.256
using real code.

00:05:01.696 --> 00:05:03.076
And the response has been

00:05:03.186 --> 00:05:03.966
tremendous.

00:05:04.416 --> 00:05:06.016
After less than ten months on

00:05:06.016 --> 00:05:07.606
the App Store, over one million

00:05:07.606 --> 00:05:09.056
people have started to code with

00:05:09.056 --> 00:05:09.996
Swift Playgrounds.

00:05:10.546 --> 00:05:12.056
And these users are from all

00:05:12.056 --> 00:05:13.406
over the world, as we made the

00:05:13.406 --> 00:05:15.716
app and content available in six

00:05:15.806 --> 00:05:16.596
localizations.

00:05:17.176 --> 00:05:19.536
In fact, almost two-thirds of

00:05:19.536 --> 00:05:21.396
these users are from outside the

00:05:21.396 --> 00:05:23.266
United States, making Swift

00:05:23.266 --> 00:05:24.966
Playgrounds an international

00:05:25.036 --> 00:05:25.586
success.

00:05:27.736 --> 00:05:29.006
Since our first release last

00:05:29.006 --> 00:05:30.296
year, we've added a number of

00:05:30.296 --> 00:05:31.876
new features to the application,

00:05:32.416 --> 00:05:33.296
such as line-by-line

00:05:33.296 --> 00:05:34.516
highlighting of your code as

00:05:34.516 --> 00:05:36.116
it's running, content

00:05:36.116 --> 00:05:37.936
notifications when new content's

00:05:37.936 --> 00:05:39.796
available, and the ability to

00:05:39.796 --> 00:05:41.456
add new Playground pages.

00:05:42.206 --> 00:05:43.496
These features and others

00:05:43.546 --> 00:05:45.466
alongside new content has given

00:05:45.466 --> 00:05:47.216
Swift Playgrounds fantastic

00:05:47.296 --> 00:05:47.716
momentum.

00:05:48.606 --> 00:05:49.856
Now, as you may have already

00:05:49.856 --> 00:05:51.636
heard, today we're making a new

00:05:51.636 --> 00:05:53.126
version of Swift Playgrounds

00:05:53.126 --> 00:05:55.136
available, version 1.5.

00:05:55.736 --> 00:05:57.006
And in this release, we're

00:05:57.006 --> 00:05:58.926
making it easier for users to

00:05:58.926 --> 00:06:00.526
connect to Bluetooth robots,

00:06:00.816 --> 00:06:02.236
drones, and devices.

00:06:03.086 --> 00:06:05.356
And this takes Swift out into

00:06:05.356 --> 00:06:07.116
the real world, venturing even

00:06:07.276 --> 00:06:08.216
outdoors.

00:06:08.666 --> 00:06:10.686
And it harmonizes naturally as

00:06:10.686 --> 00:06:12.016
your programming skills evolve.

00:06:12.016 --> 00:06:14.376
Now, with this release, we have

00:06:14.376 --> 00:06:15.796
worked with some amazing

00:06:15.876 --> 00:06:17.386
partners who also wanted to

00:06:17.386 --> 00:06:19.176
design great experiences for

00:06:19.176 --> 00:06:22.596
their devices using Swift, like

00:06:22.776 --> 00:06:24.226
Parrot with their mini-drones

00:06:24.226 --> 00:06:27.126
who can fly and flip, UBTECH

00:06:27.326 --> 00:06:28.916
with their buildable and

00:06:28.916 --> 00:06:32.786
programmable MeeBot, Sphero with

00:06:32.786 --> 00:06:34.906
their dynamic Sprk+ robotic

00:06:35.006 --> 00:06:37.936
ball, Wonder Workshop and the

00:06:37.936 --> 00:06:39.936
racing and talking Dash,

00:06:41.266 --> 00:06:43.126
Skoogmusic and their Tactile

00:06:43.196 --> 00:06:47.716
Musical cube, and MINDSTORMS EV3

00:06:47.816 --> 00:06:48.606
by LEGO.

00:06:50.516 --> 00:06:55.966
[ Applause ]

00:06:56.466 --> 00:06:57.876
The limitless possibilities you

00:06:57.876 --> 00:06:59.526
can build with MINDSTORMS make

00:06:59.526 --> 00:07:01.286
it a perfect pairing with Swift

00:07:01.286 --> 00:07:01.936
Playgrounds.

00:07:02.406 --> 00:07:03.806
In fact, all of our partners

00:07:03.806 --> 00:07:04.996
have truly embraced the

00:07:04.996 --> 00:07:06.416
interactivity of the app,

00:07:06.996 --> 00:07:08.686
designing intuitive APIs you can

00:07:08.686 --> 00:07:10.436
drag and drop and presenting

00:07:10.476 --> 00:07:12.166
up-to-date device and sensor

00:07:12.166 --> 00:07:13.486
data in the live view.

00:07:14.146 --> 00:07:16.256
And this combination is truly

00:07:16.256 --> 00:07:17.656
captivating as you see your

00:07:17.726 --> 00:07:19.716
thoughts become code and bring

00:07:19.716 --> 00:07:20.876
devices to life.

00:07:22.006 --> 00:07:23.416
Now, all of our partners have

00:07:23.416 --> 00:07:24.936
designed Playgrounds to work

00:07:24.936 --> 00:07:26.466
with their devices, and you can

00:07:26.466 --> 00:07:28.396
find them in the new Accessories

00:07:28.426 --> 00:07:29.956
tab of the app, where there are

00:07:29.956 --> 00:07:31.436
samples to play with and

00:07:31.436 --> 00:07:33.126
templates to create your own

00:07:33.836 --> 00:07:34.286
file.

00:07:34.286 --> 00:07:35.696
And we are truly eager to see

00:07:35.696 --> 00:07:37.946
how users of all ages take

00:07:37.946 --> 00:07:39.036
advantage of the new Swift

00:07:39.036 --> 00:07:40.556
Playgrounds because we believe

00:07:40.556 --> 00:07:42.476
it is the best way to control

00:07:42.476 --> 00:07:44.946
robots and drones with code you

00:07:44.946 --> 00:07:45.436
write yourself.

00:07:46.816 --> 00:07:47.886
The new version of Swift

00:07:47.886 --> 00:07:49.576
Playgrounds is available today

00:07:49.576 --> 00:07:51.766
for free in the App Store, and

00:07:51.766 --> 00:07:52.706
you can find many of the

00:07:52.706 --> 00:07:53.816
Bluetooth accessories from our

00:07:53.816 --> 00:07:55.886
partners at an Apple Store near

00:07:55.886 --> 00:07:56.046
you.

00:07:56.596 --> 00:07:59.226
Now, there's another version of

00:07:59.226 --> 00:08:00.166
Swift Playgrounds I'd like to

00:08:00.166 --> 00:08:01.606
share with you today, and that's

00:08:01.606 --> 00:08:03.416
Swift Playgrounds 2, shipping

00:08:03.416 --> 00:08:04.096
later this fall.

00:08:05.176 --> 00:08:07.736
Today, we have engaging content,

00:08:07.826 --> 00:08:09.056
like our Learn to Code series,

00:08:09.296 --> 00:08:10.916
challenges, and the new

00:08:10.916 --> 00:08:12.206
Playgrounds from our partners,

00:08:12.756 --> 00:08:14.426
but we also know that you have

00:08:14.426 --> 00:08:16.966
many inspired ideas too, so this

00:08:16.966 --> 00:08:17.646
fall, we're going to make it

00:08:17.646 --> 00:08:19.106
easy for everyone to share

00:08:19.376 --> 00:08:19.936
Playgrounds.

00:08:21.406 --> 00:08:22.676
With Swift Playgrounds 2, we

00:08:22.676 --> 00:08:23.906
will support feeds of

00:08:23.996 --> 00:08:25.756
third-party content that users

00:08:25.756 --> 00:08:26.546
can subscribe to.

00:08:27.536 --> 00:08:29.696
And this content makes it really

00:08:29.696 --> 00:08:31.056
easy for schools to host

00:08:31.056 --> 00:08:32.826
curriculum, developers to post

00:08:32.905 --> 00:08:35.416
API explorations, and friends

00:08:35.486 --> 00:08:36.916
have a simple way to share

00:08:36.916 --> 00:08:37.256
ideas.

00:08:38.566 --> 00:08:40.046
This release will also include

00:08:40.046 --> 00:08:41.366
an integrated documentation

00:08:41.366 --> 00:08:43.645
experience, support for Swift 4

00:08:43.645 --> 00:08:46.486
in the iOS 11SDK, and enable the

00:08:46.486 --> 00:08:48.306
use of camera and augmented

00:08:48.346 --> 00:08:49.376
reality APIs.

00:08:49.376 --> 00:08:52.536
And we're going to extend global

00:08:52.536 --> 00:08:54.106
reach of the application by

00:08:54.106 --> 00:08:55.556
adding in localizations for

00:08:55.556 --> 00:08:57.286
eight additional languages.

00:08:58.696 --> 00:09:00.206
Beta versions of Swift

00:09:00.206 --> 00:09:01.236
Playgrounds 2 will be made

00:09:01.236 --> 00:09:02.856
available via TestFlight, and

00:09:03.376 --> 00:09:04.246
you can sign up at

00:09:04.246 --> 00:09:06.406
developer.apple.com to try out

00:09:06.626 --> 00:09:07.066
these releases.

00:09:08.556 --> 00:09:10.586
So two big versions of Swift

00:09:10.586 --> 00:09:11.766
Playgrounds for you.

00:09:12.386 --> 00:09:14.296
I'd like to switch topics and

00:09:14.296 --> 00:09:16.456
start talking about Xcode 9.

00:09:17.416 --> 00:09:20.036
Xcode 9 is a major release.

00:09:20.486 --> 00:09:21.656
We have made significant

00:09:21.656 --> 00:09:23.376
investments in our foundations,

00:09:23.596 --> 00:09:25.306
work flows, and performance

00:09:25.526 --> 00:09:27.416
across the tools with some

00:09:27.416 --> 00:09:28.776
pretty substantial results.

00:09:29.376 --> 00:09:30.586
I'd like to start today by

00:09:30.586 --> 00:09:32.056
talking about our Source Editor.

00:09:33.796 --> 00:09:35.406
In Xcode 9, we have completely

00:09:35.506 --> 00:09:36.336
re-implemented our Source

00:09:36.336 --> 00:09:36.596
Editor.

00:09:37.276 --> 00:09:38.266
It's been rewritten from the

00:09:38.266 --> 00:09:39.886
ground up in Swift.

00:09:40.516 --> 00:09:47.226
[ Applause ]

00:09:47.726 --> 00:09:48.236
And I agree.

00:09:48.236 --> 00:09:49.016
It's a pretty big deal.

00:09:50.196 --> 00:09:51.936
So at first glance, you'll see

00:09:51.936 --> 00:09:53.626
the familiar crisp presentation

00:09:53.736 --> 00:09:55.436
of multiple fonts and weights,

00:09:55.856 --> 00:09:57.166
but now with more options for

00:09:57.166 --> 00:09:59.336
line spacing, cursor types, and

00:09:59.386 --> 00:09:59.596
more.

00:10:00.416 --> 00:10:01.606
And we took the notion of

00:10:01.606 --> 00:10:03.726
semantic presentation and didn't

00:10:03.726 --> 00:10:05.296
stop at source code because we

00:10:05.296 --> 00:10:07.066
now have an integrated Markdown

00:10:07.066 --> 00:10:08.466
editor as well.

00:10:10.516 --> 00:10:14.436
[ Applause ]

00:10:14.936 --> 00:10:16.676
In addition to stylized editing,

00:10:16.766 --> 00:10:18.166
you'll find the familiar editor

00:10:18.166 --> 00:10:19.816
experiences, like using the Jump

00:10:19.816 --> 00:10:20.886
bar for navigation,

00:10:21.126 --> 00:10:22.826
Command-clicking on links, even

00:10:22.826 --> 00:10:24.326
using Edit All in Scope to

00:10:24.326 --> 00:10:25.146
change references.

00:10:26.676 --> 00:10:27.706
Now, when you start working with

00:10:27.706 --> 00:10:29.186
your source code, you'll find

00:10:29.186 --> 00:10:31.026
that issues now display smartly,

00:10:31.306 --> 00:10:32.706
no longer adjusting the layout

00:10:32.706 --> 00:10:33.226
of your code.

00:10:34.166 --> 00:10:35.766
Issues now include more detail

00:10:36.026 --> 00:10:36.146
-- yep.

00:10:37.516 --> 00:10:41.776
[ Applause ]

00:10:42.276 --> 00:10:43.346
Issues now display with more

00:10:43.346 --> 00:10:45.196
detail and have the Fix-it work

00:10:45.196 --> 00:10:47.026
flow integrated right alongside,

00:10:47.466 --> 00:10:48.786
including the ability to apply

00:10:48.786 --> 00:10:50.716
multiple Fix-its with a single

00:10:50.896 --> 00:10:51.176
click.

00:10:52.516 --> 00:10:55.876
[ Applause ]

00:10:56.376 --> 00:10:58.086
And this new issue presentation

00:10:58.086 --> 00:10:59.606
is the perfect canvas for the

00:10:59.606 --> 00:11:01.486
over 300 new diagnostics,

00:11:01.536 --> 00:11:02.876
analyzers, and Fix-its we've

00:11:02.876 --> 00:11:04.626
added to help you all write

00:11:04.706 --> 00:11:06.536
great code.

00:11:07.366 --> 00:11:08.786
Now, performance is also

00:11:08.786 --> 00:11:10.116
important, and in this release,

00:11:10.116 --> 00:11:11.596
you'll find the editor opens

00:11:11.596 --> 00:11:13.966
files three times faster, you'll

00:11:14.016 --> 00:11:15.946
find smooth scrolling at 60

00:11:15.946 --> 00:11:17.036
frames per second as you move

00:11:17.036 --> 00:11:18.606
about the file, and jumping to

00:11:18.606 --> 00:11:20.716
lines is 50 times faster than

00:11:20.906 --> 00:11:21.946
before.

00:11:22.516 --> 00:11:27.286
[ Applause ]

00:11:27.786 --> 00:11:28.836
To put it simply, everything

00:11:28.836 --> 00:11:30.196
happens instantaneously.

00:11:31.646 --> 00:11:33.406
Now, the editing experience is

00:11:33.486 --> 00:11:34.946
also new in Xcode 9.

00:11:35.796 --> 00:11:37.466
Our editor now has more semantic

00:11:37.516 --> 00:11:39.036
awareness, and we've brought

00:11:39.036 --> 00:11:40.366
over the tokenized editing

00:11:40.366 --> 00:11:41.506
experience from Swift

00:11:41.576 --> 00:11:41.956
Playgrounds.

00:11:43.156 --> 00:11:44.436
As you move about your source,

00:11:44.436 --> 00:11:45.596
we're going to highlight the

00:11:45.596 --> 00:11:46.846
structure underneath.

00:11:48.516 --> 00:11:55.366
[ Applause ]

00:11:55.866 --> 00:11:58.386
And when you click on one of the

00:11:58.386 --> 00:11:59.376
tokens, we're going to present

00:11:59.376 --> 00:12:01.036
an Action menu full of symbolic

00:12:01.036 --> 00:12:02.666
transformations to help you

00:12:02.666 --> 00:12:03.256
evolve your code.

00:12:04.516 --> 00:12:08.996
[ Applause ]

00:12:09.496 --> 00:12:10.586
And I'm guessing some of you

00:12:10.586 --> 00:12:12.806
know where this is going next.

00:12:13.646 --> 00:12:14.736
And yes, it is true.

00:12:14.776 --> 00:12:16.366
Xcode 9 has a brand-new

00:12:16.366 --> 00:12:17.386
refactoring system for it.

00:12:18.516 --> 00:12:27.206
[ Applause ]

00:12:27.706 --> 00:12:29.196
Indeed. Our refactoring system

00:12:29.196 --> 00:12:30.956
works with Swift, Objective-C,

00:12:31.066 --> 00:12:33.356
C, and C++, so you can use it

00:12:33.636 --> 00:12:34.926
throughout your projects.

00:12:35.406 --> 00:12:36.806
And the refactoring work flow

00:12:36.916 --> 00:12:38.436
takes advantage of the new

00:12:38.436 --> 00:12:40.396
tokenized editing experience to

00:12:40.396 --> 00:12:41.926
present contextual actions, like

00:12:41.926 --> 00:12:44.376
Extract and Rename, and all of

00:12:44.376 --> 00:12:45.686
these actions are bindable, so

00:12:45.796 --> 00:12:47.376
you can set key equivalents for

00:12:47.376 --> 00:12:48.376
ones you use frequently.

00:12:49.366 --> 00:12:50.936
And we also have a gorgeous

00:12:50.986 --> 00:12:52.586
presentation to help you review

00:12:52.586 --> 00:12:52.926
changes.

00:12:53.826 --> 00:12:54.966
And to show you what this is

00:12:54.966 --> 00:12:56.026
like, I'd like to bring up Ken

00:12:56.026 --> 00:12:57.286
Orr to give you a demonstration

00:12:57.286 --> 00:12:58.536
of the new Source Editor with

00:12:58.536 --> 00:12:58.986
refactoring.

00:13:00.516 --> 00:13:05.566
[ Applause ]

00:13:06.066 --> 00:13:06.656
>> Thanks, Matthew.

00:13:07.246 --> 00:13:09.166
So Xcode 9 has a brand-new

00:13:09.166 --> 00:13:10.816
Source Editor rewritten from the

00:13:10.816 --> 00:13:13.736
ground up to be fast, and I

00:13:13.736 --> 00:13:16.096
think speed is one of the very

00:13:16.096 --> 00:13:18.546
first things you'll notice.

00:13:19.076 --> 00:13:20.866
Scrolling in this 10,000-line

00:13:20.916 --> 00:13:25.326
file is super smooth all the way

00:13:25.326 --> 00:13:26.736
down to the bottom, and I can

00:13:26.736 --> 00:13:28.766
just instantly right back to the

00:13:28.766 --> 00:13:29.096
top.

00:13:29.666 --> 00:13:31.536
And of course, code, it looks

00:13:31.626 --> 00:13:33.206
absolutely gorgeous.

00:13:33.286 --> 00:13:34.626
Let me make that a little bit

00:13:34.626 --> 00:13:35.726
bigger so it's easier for you to

00:13:35.726 --> 00:13:35.916
see.

00:13:35.916 --> 00:13:38.036
I'll just press Command+ a few

00:13:38.036 --> 00:13:38.606
times for you.

00:13:39.516 --> 00:13:43.796
[ Applause ]

00:13:44.296 --> 00:13:45.956
It's the little things, right.

00:13:48.246 --> 00:13:50.596
So my project here is an iOS

00:13:50.596 --> 00:13:52.956
app, and it lets users explore

00:13:52.956 --> 00:13:53.756
our solar system.

00:13:53.826 --> 00:13:55.286
And I want to add a little bit

00:13:55.286 --> 00:13:55.846
of code.

00:13:55.846 --> 00:13:56.966
I'm going to jump over to this

00:13:56.966 --> 00:14:00.456
Objective-C file, and this bit

00:14:00.456 --> 00:14:01.586
of code that I just added, it

00:14:01.586 --> 00:14:03.426
has a small problem.

00:14:03.576 --> 00:14:05.146
So first off, you can see the

00:14:05.146 --> 00:14:06.866
brand-new issues presentation,

00:14:07.186 --> 00:14:09.236
and it's got Fix-its built right

00:14:09.766 --> 00:14:09.833
in.

00:14:10.286 --> 00:14:12.156
Now, this particular issue is

00:14:12.156 --> 00:14:14.156
new in Objective-C, and it's

00:14:14.156 --> 00:14:16.106
warning me that I'm using iOS 11

00:14:16.106 --> 00:14:18.346
API, but my project here, it

00:14:18.346 --> 00:14:21.046
deploys back to iOS X, where

00:14:21.046 --> 00:14:21.556
this would crash [applause].

00:14:22.216 --> 00:14:28.886
And this issue has a Fix-it,

00:14:28.886 --> 00:14:29.586
which I'll accept.

00:14:30.246 --> 00:14:32.986
And when I do, Xcode wraps my

00:14:32.986 --> 00:14:35.086
code using the new Objective-C

00:14:35.086 --> 00:14:36.686
keyword, atAvailable.

00:14:37.106 --> 00:14:38.736
So now, that little bit of code,

00:14:38.736 --> 00:14:41.066
it'll only run on iOS 11.

00:14:42.516 --> 00:14:46.076
[ Applause ]

00:14:46.576 --> 00:14:47.676
There's another new Fix-it I

00:14:47.676 --> 00:14:48.386
want to show you.

00:14:48.386 --> 00:14:49.866
I'm going to jump over to this

00:14:49.956 --> 00:14:50.856
SWF file here.

00:14:51.096 --> 00:14:52.756
This is the class that

00:14:52.756 --> 00:14:54.106
represents a moon in our solar

00:14:54.106 --> 00:14:56.126
system, and I'm going to adopt

00:14:56.126 --> 00:14:59.336
the physics body protocol.

00:14:59.946 --> 00:15:01.186
It's got a few different

00:15:01.186 --> 00:15:01.816
methods.

00:15:01.816 --> 00:15:04.766
Whoops. It's got a few different

00:15:04.766 --> 00:15:05.586
methods that I need to

00:15:05.586 --> 00:15:06.086
implement.

00:15:06.086 --> 00:15:07.536
Of course, I haven't implemented

00:15:07.536 --> 00:15:09.226
them yet, so I get an issue.

00:15:10.156 --> 00:15:13.526
And now, with just one click on

00:15:13.526 --> 00:15:16.386
the single Fix-it, it'll add all

00:15:16.386 --> 00:15:17.796
the methods that I haven't yet

00:15:17.796 --> 00:15:18.206
implemented.

00:15:19.516 --> 00:15:24.576
[ Applause ]

00:15:25.076 --> 00:15:26.686
So Xcode 9 can also help me

00:15:26.686 --> 00:15:29.316
transform and refactor my code.

00:15:29.686 --> 00:15:30.426
So let me show you that.

00:15:30.426 --> 00:15:32.626
I'm going to jump over to this

00:15:32.626 --> 00:15:35.856
solarsystem.swf file and I'm

00:15:35.856 --> 00:15:36.926
going to hold down the Command

00:15:36.926 --> 00:15:38.776
key and move my mouse.

00:15:39.186 --> 00:15:41.586
And when I do, Xcode shows me

00:15:41.586 --> 00:15:43.486
the structure of my code.

00:15:44.156 --> 00:15:46.076
When I click, I get a set of

00:15:46.076 --> 00:15:48.146
options and transformations that

00:15:48.146 --> 00:15:49.706
are specific to the expression

00:15:49.706 --> 00:15:50.396
that I clicked on.

00:15:50.936 --> 00:15:51.856
So here I clicked on an

00:15:51.856 --> 00:15:52.996
expression that's creating a

00:15:52.996 --> 00:15:54.926
moon object and then adding that

00:15:55.086 --> 00:15:55.566
to the Earth.

00:15:56.476 --> 00:15:58.226
And, you know, I actually

00:15:58.266 --> 00:16:00.586
personally prefer to capture all

00:16:00.586 --> 00:16:01.976
the objects I create in

00:16:01.976 --> 00:16:03.196
variables, so I'm just going to

00:16:03.196 --> 00:16:04.976
extract this out into an

00:16:04.976 --> 00:16:06.976
expression, and I'll use Edit

00:16:06.976 --> 00:16:08.586
All in Scope to give this a

00:16:08.586 --> 00:16:09.346
better name, Luna.

00:16:10.826 --> 00:16:12.046
And, you know, while we're at

00:16:12.046 --> 00:16:13.516
it, actually, I like my methods

00:16:13.516 --> 00:16:15.856
to be short and to the point, so

00:16:15.856 --> 00:16:16.936
I think I'm going to pull out

00:16:16.936 --> 00:16:18.956
this If block into its own

00:16:18.956 --> 00:16:19.346
method.

00:16:20.126 --> 00:16:22.926
And when I do, Xcode creates a

00:16:22.926 --> 00:16:24.756
new method for me, adds all of

00:16:24.756 --> 00:16:26.856
that code to it, and then leaves

00:16:26.856 --> 00:16:28.036
me with a call to that method

00:16:28.036 --> 00:16:29.086
back where we started.

00:16:30.216 --> 00:16:31.406
Let's give that a new name too.

00:16:32.516 --> 00:16:37.806
[ Applause ]

00:16:38.306 --> 00:16:39.886
So those are a couple local

00:16:39.886 --> 00:16:41.866
transformations, but a lot of

00:16:41.866 --> 00:16:43.466
times what I want to do, I want

00:16:43.466 --> 00:16:44.556
to refactor the name of

00:16:44.556 --> 00:16:45.586
something that's used throughout

00:16:45.586 --> 00:16:46.626
my entire project.

00:16:47.586 --> 00:16:48.836
In fact, I've got a great

00:16:48.836 --> 00:16:51.026
candidate for that here -- this

00:16:51.486 --> 00:16:52.276
position method.

00:16:52.276 --> 00:16:53.966
That's kind of a generic name.

00:16:53.966 --> 00:16:54.866
I think I could come up with

00:16:54.866 --> 00:16:56.006
something a little bit more

00:16:56.006 --> 00:16:56.566
descriptive.

00:16:56.566 --> 00:16:57.806
So I'm going to hold down the

00:16:57.806 --> 00:17:00.376
Command key, click, say

00:17:00.416 --> 00:17:03.226
"rename," and when I do, Xcode

00:17:03.226 --> 00:17:05.786
folds down the file that I'm

00:17:05.786 --> 00:17:05.976
in--

00:17:06.516 --> 00:17:11.586
[ Applause ]

00:17:12.086 --> 00:17:13.816
Folds down that file and it

00:17:13.945 --> 00:17:16.306
pulls in slices from across my

00:17:16.366 --> 00:17:18.205
project where I'm using that

00:17:18.205 --> 00:17:18.566
method.

00:17:19.195 --> 00:17:21.346
So I'll pick a new name here.

00:17:21.346 --> 00:17:22.536
Let's go with something like

00:17:22.856 --> 00:17:25.246
"orbital position."

00:17:26.046 --> 00:17:27.866
As I type, it updates live

00:17:27.866 --> 00:17:29.376
across all those slides.

00:17:29.976 --> 00:17:31.636
I can rename parameter names

00:17:31.636 --> 00:17:32.056
too.

00:17:32.426 --> 00:17:33.756
First parameter name, that seems

00:17:33.756 --> 00:17:34.116
OK.

00:17:34.436 --> 00:17:35.666
Instead of "date" for the second

00:17:35.666 --> 00:17:36.816
one, I'll with something like

00:17:36.856 --> 00:17:39.696
"moment in time."

00:17:40.926 --> 00:17:43.726
Click Rename, and that's it.

00:17:43.806 --> 00:17:46.926
So rename factoring works great

00:17:47.186 --> 00:17:48.416
for methods like this.

00:17:48.936 --> 00:17:50.486
Also works for classes too.

00:17:50.976 --> 00:17:53.596
So up here I've got this class,

00:17:53.936 --> 00:17:55.776
"trans-Neptunian object."

00:17:56.426 --> 00:17:58.606
That's kind of a mouthful, so

00:17:58.606 --> 00:18:00.026
let's give that a little bit

00:18:00.026 --> 00:18:00.666
simpler name.

00:18:01.466 --> 00:18:02.976
I'm going to rename this guy

00:18:03.076 --> 00:18:05.206
"minor planet."

00:18:06.236 --> 00:18:07.696
So refactoring, it works for

00:18:07.886 --> 00:18:09.186
everything you'd expect.

00:18:09.566 --> 00:18:11.696
In my project here, that means

00:18:11.856 --> 00:18:14.876
SWF files, Objective-C files,

00:18:15.936 --> 00:18:17.566
and even storyboards.

00:18:18.516 --> 00:18:26.506
[ Applause ]

00:18:27.006 --> 00:18:29.856
When I'm done, click Rename, and

00:18:30.056 --> 00:18:31.056
that's it.

00:18:31.056 --> 00:18:32.016
Really simple.

00:18:32.356 --> 00:18:33.236
Really powerful.

00:18:33.826 --> 00:18:35.246
That's the new Source Editor and

00:18:35.246 --> 00:18:36.246
refactoring in Xcode 9.

00:18:36.726 --> 00:18:37.326
Matthew?

00:18:38.516 --> 00:18:43.766
[ Applause ]

00:18:44.266 --> 00:18:44.706
>> Thank you, Ken.

00:18:44.796 --> 00:18:45.946
I told you it was gorgeous.

00:18:48.346 --> 00:18:50.246
So new refactoring is a great

00:18:50.246 --> 00:18:51.506
way to evolve your code.

00:18:51.906 --> 00:18:53.536
In addition to the rename

00:18:53.536 --> 00:18:54.996
refactoring, we're also going to

00:18:54.996 --> 00:18:56.206
include a number of local

00:18:56.206 --> 00:18:57.916
transformations, like extract,

00:18:58.336 --> 00:19:00.026
adding missing overrides, and

00:19:00.026 --> 00:19:01.246
working with localized strings.

00:19:02.176 --> 00:19:03.516
But this is just the beginning

00:19:04.186 --> 00:19:05.256
because we're going to be open

00:19:05.256 --> 00:19:06.856
sourcing the refactoring engine

00:19:07.146 --> 00:19:08.846
as part of the Apple, Clang, and

00:19:08.846 --> 00:19:09.896
Swift compilers.

00:19:11.516 --> 00:19:16.086
[ Applause ]

00:19:16.586 --> 00:19:17.986
Xcode will automatically pick up

00:19:18.016 --> 00:19:19.556
transformations you build in

00:19:19.556 --> 00:19:21.216
local toolchains, so you have a

00:19:21.216 --> 00:19:22.856
great way to prototype new

00:19:22.856 --> 00:19:23.526
transformations.

00:19:24.926 --> 00:19:26.906
So our new Source Editor --

00:19:27.326 --> 00:19:28.916
great look and feel, awesome

00:19:28.916 --> 00:19:30.506
performance, and now with

00:19:30.546 --> 00:19:31.156
refactoring.

00:19:31.706 --> 00:19:33.456
A great start to Xcode 9.

00:19:33.556 --> 00:19:36.566
And we also have some big news

00:19:36.706 --> 00:19:38.596
in Swift, and for that, I'd like

00:19:38.596 --> 00:19:40.106
to bring up Ted Kremenek to tell

00:19:40.106 --> 00:19:40.416
you more.

00:19:42.516 --> 00:19:47.096
[ Applause ]

00:19:47.596 --> 00:19:49.626
>> With Swift, we set out on a

00:19:49.626 --> 00:19:51.316
mission to make programming

00:19:51.486 --> 00:19:55.046
easier, faster, safer, and more

00:19:55.046 --> 00:19:55.476
modern.

00:19:56.556 --> 00:19:58.066
And in a little less than three

00:19:58.066 --> 00:19:59.676
years, the pace of adoption

00:19:59.676 --> 00:20:00.946
remains phenomenal.

00:20:01.666 --> 00:20:05.376
In that time, over 250,000 apps

00:20:05.796 --> 00:20:07.596
have been written in Swift and

00:20:07.646 --> 00:20:09.246
submitted to the App Store.

00:20:10.026 --> 00:20:11.736
And it's not just the number of

00:20:11.736 --> 00:20:12.766
apps that's exciting.

00:20:12.766 --> 00:20:14.396
It's that companies are building

00:20:14.396 --> 00:20:16.186
apps in Swift that they really

00:20:16.186 --> 00:20:17.746
do depend on.

00:20:18.186 --> 00:20:19.346
And beyond the App Store,

00:20:20.106 --> 00:20:21.336
enterprise and business have

00:20:21.406 --> 00:20:22.616
also embraced Swift.

00:20:23.116 --> 00:20:25.346
IBM has authored more than 100

00:20:25.346 --> 00:20:27.286
of their MobileFirst iOS apps in

00:20:27.286 --> 00:20:29.526
Swift, and both IBM and SAP have

00:20:29.606 --> 00:20:32.826
released SDKs that allow Swift

00:20:32.826 --> 00:20:34.606
developers to take advantage of

00:20:34.606 --> 00:20:35.976
their services infrastructure.

00:20:37.006 --> 00:20:39.096
So we're thrilled at how Swift

00:20:39.096 --> 00:20:40.846
has been doing, but Swift, of

00:20:40.846 --> 00:20:42.486
course, isn't standing still.

00:20:43.766 --> 00:20:45.336
Xcode 9 includes a new release

00:20:45.336 --> 00:20:47.726
of Swift, Swift 4, and we're

00:20:47.726 --> 00:20:49.136
excited about what it brings.

00:20:50.276 --> 00:20:52.066
Now, the focus of this release

00:20:52.066 --> 00:20:53.686
really is on the core

00:20:53.956 --> 00:20:56.266
fundamentals, getting those rock

00:20:56.396 --> 00:20:58.086
solid, because we want Swift to

00:20:58.086 --> 00:21:00.026
be a great foundation for

00:21:00.026 --> 00:21:01.726
everyone to build their software

00:21:01.726 --> 00:21:01.966
upon.

00:21:03.186 --> 00:21:04.976
And so just, I'll be able to

00:21:04.976 --> 00:21:05.896
touch on just a few of the

00:21:05.966 --> 00:21:07.456
things in this release, but we

00:21:07.456 --> 00:21:08.996
think these are just great

00:21:08.996 --> 00:21:11.006
improvements across the board.

00:21:11.556 --> 00:21:13.406
The first thing I want to talk

00:21:13.406 --> 00:21:15.376
about is a vastly improved

00:21:15.616 --> 00:21:16.096
string.

00:21:17.356 --> 00:21:19.946
String is, string processing is

00:21:19.946 --> 00:21:22.716
a fundamental aspect of just

00:21:23.066 --> 00:21:24.166
writing software, right.

00:21:24.166 --> 00:21:26.056
We work with strings all the

00:21:26.146 --> 00:21:26.306
time.

00:21:26.656 --> 00:21:28.136
And we've always had the goal

00:21:28.136 --> 00:21:29.806
that string processing in Swift

00:21:29.806 --> 00:21:31.596
is first in class without

00:21:31.596 --> 00:21:33.176
compromising on Unicode

00:21:33.176 --> 00:21:33.706
correctness.

00:21:34.376 --> 00:21:35.426
And so we've made three

00:21:35.426 --> 00:21:37.306
important strides towards this

00:21:37.306 --> 00:21:38.376
goal in Swift 4.

00:21:39.276 --> 00:21:41.416
First, you want to make the API

00:21:41.416 --> 00:21:43.636
a lot easier to use, right,

00:21:43.636 --> 00:21:44.866
because you're using string all

00:21:44.866 --> 00:21:45.136
the time.

00:21:46.036 --> 00:21:48.316
We also wanted to double down on

00:21:48.316 --> 00:21:49.966
improving fidelity with Unicode.

00:21:50.296 --> 00:21:51.216
This is something that string

00:21:51.216 --> 00:21:52.686
has been good at, but it's not

00:21:52.826 --> 00:21:54.406
entirely where we wanted it to

00:21:55.056 --> 00:21:56.056
be, and we wanted to make

00:21:56.056 --> 00:21:58.066
strings really fast.

00:21:59.036 --> 00:22:00.556
So it's not hard to look at it

00:22:00.556 --> 00:22:01.986
for opportunities of how we

00:22:01.986 --> 00:22:03.366
wanted to make string easier to

00:22:03.366 --> 00:22:04.076
use, right.

00:22:04.106 --> 00:22:05.526
So here's some fragments of code

00:22:05.526 --> 00:22:06.666
that you may have written in

00:22:06.666 --> 00:22:07.746
Swift 3 when you're working with

00:22:07.746 --> 00:22:09.816
string, like iterating over the

00:22:09.816 --> 00:22:11.366
characters, or querying to see

00:22:11.366 --> 00:22:12.346
if a string has a given

00:22:12.346 --> 00:22:13.746
character, or stitching strings

00:22:13.746 --> 00:22:14.016
together.

00:22:14.016 --> 00:22:16.266
And what we've found is that we

00:22:16.266 --> 00:22:18.116
were frequently reaching down

00:22:18.116 --> 00:22:20.236
for this characters view, right.

00:22:20.236 --> 00:22:21.046
I mean, you want to get to the

00:22:21.046 --> 00:22:22.226
underlying characters, but it's

00:22:22.226 --> 00:22:23.106
one step removed.

00:22:23.386 --> 00:22:25.736
It also creates this unnecessary

00:22:25.736 --> 00:22:26.236
friction.

00:22:26.736 --> 00:22:29.066
So in Swift 4, we have vastly

00:22:29.146 --> 00:22:30.966
simplified this by removing all

00:22:30.966 --> 00:22:33.236
this impedance, and now strings

00:22:33.236 --> 00:22:34.216
are range-replaceable

00:22:34.216 --> 00:22:36.546
collections of characters.

00:22:37.426 --> 00:22:39.336
Not only does the code, you

00:22:39.336 --> 00:22:40.746
know, read and write exactly as

00:22:40.926 --> 00:22:42.436
you would expect, but you have

00:22:42.436 --> 00:22:43.576
all the power of generic

00:22:43.576 --> 00:22:44.736
algorithms on the collections

00:22:45.036 --> 00:22:46.926
directly on working with

00:22:46.926 --> 00:22:47.296
strings.

00:22:48.656 --> 00:22:50.566
We've also added great syntactic

00:22:50.636 --> 00:22:51.666
[inaudible] such as multi-line

00:22:51.666 --> 00:22:53.056
string literals, which include,

00:22:53.056 --> 00:22:54.596
you know, support for white

00:22:54.686 --> 00:22:54.936
space.

00:22:55.806 --> 00:22:57.536
String slicing is even more

00:22:57.536 --> 00:22:58.986
lightweight with the support

00:22:58.986 --> 00:23:00.236
from one-sided ranges.

00:23:00.956 --> 00:23:02.316
So you could just very nimbly

00:23:02.356 --> 00:23:03.876
specify the fragment of the

00:23:03.936 --> 00:23:05.376
string you want in a slice.

00:23:06.736 --> 00:23:07.756
Now, these improvements to the

00:23:07.756 --> 00:23:09.646
core ergonomics also must be

00:23:09.646 --> 00:23:10.606
accompanied with improvements

00:23:10.656 --> 00:23:11.806
for our Unicode support.

00:23:12.086 --> 00:23:13.726
And if, when you were working

00:23:13.726 --> 00:23:15.076
with strings in Swift 3, you may

00:23:15.076 --> 00:23:18.336
have noticed some oddities like

00:23:18.426 --> 00:23:20.066
this just kind of leaving you

00:23:20.066 --> 00:23:24.046
wondering, what is going on?

00:23:24.766 --> 00:23:26.806
And it really comes down to the

00:23:26.806 --> 00:23:28.376
richness of Unicode.

00:23:28.966 --> 00:23:30.706
Our concept of the character is

00:23:30.706 --> 00:23:32.116
actually a composition of

00:23:32.116 --> 00:23:34.096
multiple Unicode scalar values,

00:23:34.456 --> 00:23:36.356
and decomposing these correctly

00:23:36.356 --> 00:23:37.336
is critical to getting that

00:23:37.416 --> 00:23:40.786
fidelity with Unicode, the

00:23:40.786 --> 00:23:42.656
characters, and the string API.

00:23:43.846 --> 00:23:45.096
So in Swift 4, we've moved to

00:23:45.096 --> 00:23:46.516
the Unicode 9 Grapheme Breaking

00:23:46.516 --> 00:23:47.106
algorithm.

00:23:47.106 --> 00:23:48.686
It now properly separates these

00:23:48.686 --> 00:23:49.736
strings out or these characters

00:23:49.736 --> 00:23:51.456
out as you would expect, giving

00:23:51.456 --> 00:23:53.336
you full fidelity with the

00:23:53.336 --> 00:23:54.896
underlying character set.

00:23:55.006 --> 00:23:56.346
And this is also really

00:23:56.346 --> 00:23:58.266
important since we're now,

00:23:58.266 --> 00:23:59.236
strings are collections of

00:23:59.236 --> 00:23:59.896
characters.

00:24:00.786 --> 00:24:02.446
Now, this improvement to Unicode

00:24:02.446 --> 00:24:04.786
support has not come at a cost

00:24:04.786 --> 00:24:05.436
to performance.

00:24:05.966 --> 00:24:07.256
We've actually finely-tuned

00:24:07.256 --> 00:24:08.546
strings implementation.

00:24:08.926 --> 00:24:10.336
So for most string-processing

00:24:10.336 --> 00:24:12.416
operations, for English, French,

00:24:12.456 --> 00:24:14.736
German, Spanish, and really any

00:24:14.736 --> 00:24:15.856
language using a Latin-derived

00:24:15.856 --> 00:24:16.736
script, you'll see about a

00:24:16.796 --> 00:24:17.666
three-and-a-half times

00:24:17.666 --> 00:24:18.766
performance improvement for

00:24:18.766 --> 00:24:19.126
String.

00:24:20.516 --> 00:24:25.356
[ Applause ]

00:24:25.856 --> 00:24:27.336
And similarly, you see huge

00:24:27.336 --> 00:24:28.316
improvements working with

00:24:28.366 --> 00:24:30.286
simplified Chinese and most

00:24:30.286 --> 00:24:32.556
modern Japanese texts

00:24:33.056 --> 00:24:35.146
[applause].

00:24:35.646 --> 00:24:37.736
And that is the improved String

00:24:38.036 --> 00:24:40.206
-- faster, much easier to use,

00:24:40.456 --> 00:24:41.176
and more powerful.

00:24:42.646 --> 00:24:43.566
The second feature I want to

00:24:43.566 --> 00:24:46.516
talk about has, is about giving

00:24:46.516 --> 00:24:48.096
you the ability to easily

00:24:48.786 --> 00:24:51.066
convert Swift types to encodable

00:24:51.066 --> 00:24:53.546
formats, like JSON and property

00:24:53.546 --> 00:24:55.096
lists, while adding, providing

00:24:55.136 --> 00:24:56.676
powerful opportunities for

00:24:56.676 --> 00:24:57.546
customization.

00:24:58.416 --> 00:25:01.116
In Swift, we use both value and

00:25:01.116 --> 00:25:02.766
reference types, and while

00:25:02.766 --> 00:25:04.556
NSCoding supports classes, it

00:25:04.556 --> 00:25:06.996
doesn't work at all with structs

00:25:07.126 --> 00:25:07.706
or enums.

00:25:08.296 --> 00:25:09.126
This new feature works

00:25:09.156 --> 00:25:10.726
beautifully with all of them.

00:25:11.946 --> 00:25:12.776
Let's see this in action.

00:25:13.156 --> 00:25:14.856
So here I have a simple value

00:25:14.906 --> 00:25:15.146
type.

00:25:15.356 --> 00:25:16.046
This is a struct.

00:25:16.046 --> 00:25:16.676
It's a form.

00:25:17.156 --> 00:25:18.126
It's got some properties.

00:25:18.756 --> 00:25:19.556
And I want to make this

00:25:19.556 --> 00:25:21.706
encodable and decodable to JSON,

00:25:21.706 --> 00:25:23.196
property list, whatever.

00:25:23.196 --> 00:25:25.276
I could easily do this by adding

00:25:25.276 --> 00:25:27.856
conformance to a new protocol

00:25:28.126 --> 00:25:28.706
called Codable.

00:25:30.126 --> 00:25:32.376
And if the properties of this

00:25:32.476 --> 00:25:34.086
type have types that also

00:25:34.086 --> 00:25:35.806
conform to Codable, this is

00:25:35.906 --> 00:25:38.206
literally all the code I need to

00:25:38.206 --> 00:25:40.296
write because the conformance to

00:25:40.296 --> 00:25:41.876
this protocol is synthesized by

00:25:41.876 --> 00:25:42.526
the compiler.

00:25:43.516 --> 00:25:49.836
[ Applause ]

00:25:50.336 --> 00:25:51.266
So works as you would expect.

00:25:51.266 --> 00:25:52.956
I can construct a value of this

00:25:53.006 --> 00:25:55.856
type, and with a single line of

00:25:55.856 --> 00:25:57.506
code, I can serialize this out

00:25:57.506 --> 00:25:57.806
to JSON.

00:25:58.516 --> 00:26:04.196
[ Applause ]

00:26:04.696 --> 00:26:07.156
And once I have the JSON value I

00:26:07.156 --> 00:26:08.996
can simply reconstitute it back

00:26:08.996 --> 00:26:10.966
with a single line of code, back

00:26:10.966 --> 00:26:13.026
into a foreign value, and this

00:26:13.026 --> 00:26:15.016
is also 100% type safe.

00:26:16.516 --> 00:26:20.866
[ Applause ]

00:26:21.366 --> 00:26:22.956
So simple, easy to use.

00:26:23.826 --> 00:26:24.636
We think you're going to enjoy

00:26:24.636 --> 00:26:24.726
it.

00:26:24.726 --> 00:26:26.356
Now, there's a lot of great

00:26:26.386 --> 00:26:29.816
features in Swift 4, and we've

00:26:29.816 --> 00:26:31.386
also been excited about the

00:26:31.386 --> 00:26:32.736
adoption of Swift.

00:26:33.406 --> 00:26:35.656
And so another key goal in Swift

00:26:35.656 --> 00:26:37.746
4 is we wanted to make all the

00:26:37.776 --> 00:26:40.646
features easy to adopt.

00:26:41.256 --> 00:26:44.026
And that's why in Xcode 9 you

00:26:44.026 --> 00:26:45.976
can take your Swift 3 projects,

00:26:46.616 --> 00:26:49.066
open them up, and build them

00:26:49.066 --> 00:26:50.366
with no modifications.

00:26:51.656 --> 00:26:52.686
This means you can be on the

00:26:52.686 --> 00:26:56.596
latest OS, tools, and even make

00:26:56.596 --> 00:26:58.036
use of many of the new language

00:26:58.036 --> 00:26:59.776
features in a release without

00:26:59.776 --> 00:27:01.416
having to convert your code.

00:27:02.326 --> 00:27:04.196
So how does this work?

00:27:05.926 --> 00:27:07.066
In Xcode, there is a build

00:27:07.066 --> 00:27:08.436
setting Swift language version.

00:27:09.606 --> 00:27:11.706
It has two values, Swift 3.2 and

00:27:11.706 --> 00:27:14.686
Swift 4.0.

00:27:14.856 --> 00:27:16.296
What this is is there's one

00:27:16.296 --> 00:27:18.246
compiler here that supports

00:27:18.296 --> 00:27:19.276
these two different language

00:27:19.316 --> 00:27:19.556
modes.

00:27:21.016 --> 00:27:22.376
And what you can do is you could

00:27:22.376 --> 00:27:24.076
have a single project that can

00:27:24.076 --> 00:27:26.136
mix and match targets that are

00:27:26.136 --> 00:27:28.276
built, it's either 3.2 or 4.0.

00:27:28.786 --> 00:27:29.746
It also means you could have an

00:27:29.746 --> 00:27:31.366
app that's written using all the

00:27:31.366 --> 00:27:33.416
new Swift 4 features but uses a

00:27:33.416 --> 00:27:34.836
package or framework that's

00:27:34.876 --> 00:27:36.306
built using Swift 3.2.

00:27:37.206 --> 00:27:38.586
So it's this extremely easy

00:27:38.586 --> 00:27:40.026
on-ramp to taking advantage of

00:27:40.026 --> 00:27:41.236
the latest features in Swift.

00:27:41.306 --> 00:27:44.146
So what is Swift 3.2?

00:27:45.496 --> 00:27:46.246
It's a language mode.

00:27:47.026 --> 00:27:47.876
You can basically build your

00:27:47.876 --> 00:27:49.486
projects pretty much with no

00:27:49.486 --> 00:27:50.196
modifications.

00:27:50.936 --> 00:27:52.156
You can access pretty much all

00:27:52.156 --> 00:27:52.986
the new language features --

00:27:52.986 --> 00:27:56.076
String, codable, all of them.

00:27:56.076 --> 00:27:57.916
You can access all the new APIs

00:27:58.216 --> 00:27:58.886
from the SDK.

00:28:00.006 --> 00:28:01.456
The only thing you don't get is

00:28:01.456 --> 00:28:02.916
any Swift-related improvements

00:28:02.946 --> 00:28:04.986
to existing APIs that you may

00:28:04.986 --> 00:28:05.836
have been using before.

00:28:06.476 --> 00:28:07.536
That's what gives you that easy

00:28:07.536 --> 00:28:08.866
onboarding without having to

00:28:08.866 --> 00:28:09.746
modify your project.

00:28:10.346 --> 00:28:12.936
To get those benefits, there's a

00:28:12.936 --> 00:28:13.716
Swift 4 mode.

00:28:14.566 --> 00:28:16.026
You have access to essentially

00:28:16.026 --> 00:28:16.866
all the new stuff.

00:28:17.426 --> 00:28:18.226
There's also some new

00:28:18.226 --> 00:28:19.786
opportunities to further improve

00:28:19.786 --> 00:28:21.226
the performance of your app,

00:28:21.786 --> 00:28:23.726
including reducing the size of

00:28:23.726 --> 00:28:24.246
your binaries.

00:28:25.136 --> 00:28:25.966
There's a lot of great

00:28:26.016 --> 00:28:27.716
improvements in the SDK for

00:28:27.716 --> 00:28:29.656
Swift developers, but to take

00:28:29.656 --> 00:28:31.006
advantage of those, there is

00:28:31.066 --> 00:28:32.746
some migration of your code

00:28:32.746 --> 00:28:33.256
required.

00:28:33.256 --> 00:28:35.096
But these are refinements.

00:28:35.536 --> 00:28:36.886
These are very evolutionary

00:28:36.886 --> 00:28:37.636
changes.

00:28:37.976 --> 00:28:39.646
And compared to moving from

00:28:39.646 --> 00:28:41.696
Swift 2 to Swift 3, moving from

00:28:41.696 --> 00:28:43.526
Swift 3 to Swift 4 is very

00:28:43.526 --> 00:28:43.936
simple.

00:28:45.636 --> 00:28:46.866
Now, we've been thrilled about

00:28:46.866 --> 00:28:48.216
the investment everyone has been

00:28:48.216 --> 00:28:49.436
making in Swift, and as we've

00:28:49.506 --> 00:28:51.236
seen that investment grow, so

00:28:51.236 --> 00:28:53.776
have the size of large Swift

00:28:54.086 --> 00:28:55.476
projects, right.

00:28:55.476 --> 00:28:56.476
People are writing more code in

00:28:56.476 --> 00:28:56.746
Swift.

00:28:57.866 --> 00:28:59.796
And we recognize that this is an

00:28:59.796 --> 00:29:01.616
important area for us to focus

00:29:01.616 --> 00:29:02.806
our efforts on the tools.

00:29:03.436 --> 00:29:05.786
And so we've focused on two key

00:29:05.786 --> 00:29:07.376
areas to reduce build times for

00:29:07.376 --> 00:29:08.236
large projects.

00:29:09.076 --> 00:29:10.836
The first is mix-and-match

00:29:10.836 --> 00:29:12.796
Objective-C and Swift projects.

00:29:14.516 --> 00:29:18.106
[ Applause ]

00:29:18.606 --> 00:29:19.916
By pre-compiling the bridging

00:29:19.916 --> 00:29:21.266
header, we've seen up to about a

00:29:21.266 --> 00:29:23.006
40% improvement in built times,

00:29:23.006 --> 00:29:24.216
particularly for debug builds.

00:29:24.216 --> 00:29:25.326
And we saw this ourselves on

00:29:25.326 --> 00:29:26.626
our, compiling our own

00:29:26.626 --> 00:29:27.376
music.app.

00:29:27.376 --> 00:29:29.996
And similarly, if you're using

00:29:29.996 --> 00:29:32.436
whole-module optimization, we've

00:29:32.436 --> 00:29:34.176
vastly improved the utilization

00:29:34.176 --> 00:29:35.186
of parallelism across the

00:29:35.186 --> 00:29:37.376
compiler and the build system,

00:29:37.376 --> 00:29:38.726
and you can see up to a 2x

00:29:38.726 --> 00:29:40.076
improvement in build times.

00:29:41.316 --> 00:29:42.996
Now, this optimization was so

00:29:42.996 --> 00:29:45.596
important that we didn't want to

00:29:45.596 --> 00:29:47.356
hold it back for Xcode 9, and so

00:29:47.356 --> 00:29:48.476
we actually aggressively

00:29:48.476 --> 00:29:50.996
released it in the Xcode 8.3.2.

00:29:51.716 --> 00:29:53.256
And so many of you have already

00:29:53.256 --> 00:29:54.486
been experiencing the benefits

00:29:54.956 --> 00:29:56.176
of this build improvement.

00:29:56.646 --> 00:29:58.116
And for those of you who haven't

00:29:58.116 --> 00:29:58.956
been using whole-module

00:29:58.956 --> 00:30:01.116
optimization, I encourage you to

00:30:01.116 --> 00:30:02.776
give it a try, given the huge

00:30:02.776 --> 00:30:03.306
wins here.

00:30:04.266 --> 00:30:06.536
And that is just a taste of some

00:30:06.536 --> 00:30:08.126
of the things in Swift 4.

00:30:08.536 --> 00:30:09.446
We think you're going to enjoy

00:30:09.446 --> 00:30:09.516
it.

00:30:09.546 --> 00:30:12.636
With that, I hand it back to

00:30:12.636 --> 00:30:12.976
Matthew.

00:30:14.516 --> 00:30:17.316
[ Applause ]

00:30:17.816 --> 00:30:18.236
>> Thank you, Ted.

00:30:19.476 --> 00:30:21.396
Another key area of Xcode 9 is

00:30:21.396 --> 00:30:23.266
our core technologies, and I'd

00:30:23.266 --> 00:30:24.816
like to start with our indexers.

00:30:25.856 --> 00:30:27.806
Our source and text indexes

00:30:27.806 --> 00:30:29.196
provide the back end for many

00:30:29.196 --> 00:30:31.116
work flows, like navigation,

00:30:31.166 --> 00:30:32.696
searching, and refactoring.

00:30:33.356 --> 00:30:34.456
And in Xcode 9, we have

00:30:34.456 --> 00:30:35.856
re-architected them to store

00:30:35.856 --> 00:30:37.806
richer data and have improved

00:30:37.866 --> 00:30:38.266
performance.

00:30:39.176 --> 00:30:40.456
In fact, you'll see work flows,

00:30:40.456 --> 00:30:42.556
like Open Quickly runs 35 times

00:30:42.556 --> 00:30:43.926
faster across your projects.

00:30:46.456 --> 00:30:47.846
And searching in large projects

00:30:47.846 --> 00:30:49.366
is up to 50 times faster.

00:30:50.516 --> 00:30:53.546
[ Applause ]

00:30:54.046 --> 00:30:55.616
So our new indexers make a huge

00:30:55.616 --> 00:30:55.946
difference.

00:30:57.006 --> 00:30:58.416
Additionally, Xcode 9 will

00:30:58.416 --> 00:31:00.426
include indexing while building.

00:31:01.276 --> 00:31:02.406
Xcode will still index in the

00:31:02.406 --> 00:31:02.896
background--

00:31:04.516 --> 00:31:07.606
[ Applause ]

00:31:08.106 --> 00:31:09.256
Xcode will still index in the

00:31:09.256 --> 00:31:10.566
background but, when you're

00:31:10.566 --> 00:31:12.096
building, will take advantage of

00:31:12.096 --> 00:31:13.586
work already being done to

00:31:13.586 --> 00:31:15.086
generate and update the index.

00:31:15.436 --> 00:31:16.366
So when you're done building,

00:31:16.596 --> 00:31:18.336
your index is up to date and all

00:31:18.336 --> 00:31:19.836
the associated functionality is

00:31:19.836 --> 00:31:21.106
available to you quicker than

00:31:21.106 --> 00:31:21.256
ever.

00:31:22.516 --> 00:31:26.256
[ Applause ]

00:31:26.756 --> 00:31:27.996
Now, our build system is also a

00:31:28.106 --> 00:31:29.886
key component and one we've made

00:31:30.006 --> 00:31:31.906
significant investments into to

00:31:31.906 --> 00:31:33.156
improve performance, add

00:31:33.226 --> 00:31:35.156
features, and support future

00:31:35.156 --> 00:31:35.586
goals.

00:31:36.236 --> 00:31:37.156
And I'm excited to share with

00:31:37.156 --> 00:31:39.476
you today we have a new build

00:31:39.476 --> 00:31:39.816
system.

00:31:41.196 --> 00:31:42.736
Written in Swift, our new build

00:31:42.776 --> 00:31:44.746
system layers on top our open

00:31:44.746 --> 00:31:46.596
source lower-level build system,

00:31:46.946 --> 00:31:47.376
llbuild.

00:31:47.376 --> 00:31:49.336
It uses a modern,

00:31:49.336 --> 00:31:50.586
forward-looking architecture

00:31:50.586 --> 00:31:52.176
that has delivered some major

00:31:52.176 --> 00:31:52.656
improvements.

00:31:54.266 --> 00:31:55.296
Our new build system uses

00:31:55.296 --> 00:31:56.646
process separation, has a

00:31:56.646 --> 00:31:58.296
unified dependency graph, and

00:31:58.296 --> 00:32:00.046
has improved configuration

00:32:00.246 --> 00:32:00.846
analysis.

00:32:01.646 --> 00:32:02.646
And we've used our new

00:32:02.646 --> 00:32:04.096
architecture to improve

00:32:04.146 --> 00:32:06.116
parallelism and caching to

00:32:06.116 --> 00:32:07.326
reduce overall build times.

00:32:08.106 --> 00:32:09.186
I'd like to dig into this for a

00:32:09.186 --> 00:32:09.366
moment.

00:32:10.796 --> 00:32:12.456
The build process involves two

00:32:12.456 --> 00:32:13.136
main pieces.

00:32:13.136 --> 00:32:14.866
There's the build system that

00:32:14.866 --> 00:32:16.296
manages and coordinates tasks

00:32:16.846 --> 00:32:18.266
and the build tools like

00:32:18.266 --> 00:32:19.266
compilers and linkers.

00:32:20.026 --> 00:32:21.036
Together, these make up the

00:32:21.036 --> 00:32:21.906
total build time.

00:32:23.166 --> 00:32:23.826
Now, the work for these

00:32:23.826 --> 00:32:25.626
components grows with the size

00:32:25.626 --> 00:32:26.146
of your project.

00:32:26.786 --> 00:32:28.026
The larger the project, the more

00:32:28.026 --> 00:32:29.356
work there is for each

00:32:29.356 --> 00:32:29.816
component.

00:32:31.476 --> 00:32:32.986
Now, this view represents a full

00:32:32.986 --> 00:32:33.266
build.

00:32:33.846 --> 00:32:35.326
But most of the time, we are

00:32:35.326 --> 00:32:36.396
incrementally building our

00:32:36.396 --> 00:32:37.916
projects, only changing a few

00:32:37.966 --> 00:32:38.796
files at a time.

00:32:39.746 --> 00:32:40.946
While there is a less work in

00:32:40.946 --> 00:32:42.666
these cases for the build tools,

00:32:43.166 --> 00:32:44.316
for larger projects, there are

00:32:44.426 --> 00:32:45.816
still a number of details to

00:32:45.816 --> 00:32:46.236
manage.

00:32:47.206 --> 00:32:48.636
This is an area we've focused on

00:32:48.736 --> 00:32:49.566
with Xcode 9.

00:32:49.946 --> 00:32:51.376
In our new build system, we've

00:32:51.376 --> 00:32:52.666
made the build operations

00:32:52.666 --> 00:32:54.476
two-and-a-half times faster than

00:32:54.476 --> 00:32:55.096
they were before.

00:32:55.096 --> 00:32:57.596
And if you add on top of this --

00:32:57.866 --> 00:33:00.606
yep, it's fast [laughter] -- and

00:33:00.606 --> 00:33:01.816
if you add on top of this the

00:33:01.816 --> 00:33:03.796
40% improvement we've seen in

00:33:03.796 --> 00:33:05.536
compilation with mix-and-match

00:33:05.536 --> 00:33:07.476
projects, then you can see a

00:33:07.476 --> 00:33:09.336
marked improvement with Xcode 9

00:33:09.336 --> 00:33:10.476
in the build, new build system

00:33:10.736 --> 00:33:11.696
compared to the previous

00:33:11.696 --> 00:33:11.906
release.

00:33:13.906 --> 00:33:14.716
Now, the new build system is

00:33:14.716 --> 00:33:16.036
designed to be compatible with

00:33:16.036 --> 00:33:17.556
your projects, and we've made a

00:33:17.556 --> 00:33:19.076
preview available in Xcode 9.

00:33:20.096 --> 00:33:21.506
You can opt in in the Workspace

00:33:21.506 --> 00:33:23.276
Settings to try it out, and

00:33:23.276 --> 00:33:24.316
we'll be making it the default

00:33:24.316 --> 00:33:26.186
build system coming soon.

00:33:27.446 --> 00:33:29.096
Now, another core technology

00:33:29.096 --> 00:33:30.886
area we've invested in is source

00:33:30.886 --> 00:33:32.386
control, and I'm curious.

00:33:32.416 --> 00:33:32.966
A show of hands.

00:33:33.056 --> 00:33:34.416
How many of you have GitHub

00:33:35.326 --> 00:33:35.516
accounts?

00:33:36.036 --> 00:33:37.476
All right.

00:33:38.286 --> 00:33:40.236
Craig raised his hand.

00:33:41.306 --> 00:33:42.996
So you are in great company

00:33:43.186 --> 00:33:43.966
because our good friends at

00:33:43.966 --> 00:33:45.736
GitHub let us know that on the

00:33:45.736 --> 00:33:48.086
desktop, two-thirds of all pull

00:33:48.086 --> 00:33:49.386
request related activities

00:33:49.646 --> 00:33:50.786
happen from a Mac.

00:33:52.126 --> 00:33:53.456
So we thought we could do

00:33:53.456 --> 00:33:55.186
something special here, which is

00:33:55.186 --> 00:33:56.136
why we have integrated

00:33:56.136 --> 00:33:58.046
GitHub.com and GitHub Enterprise

00:33:58.326 --> 00:33:59.186
with Xcode 9.

00:34:00.516 --> 00:34:06.746
[ Applause ]

00:34:07.246 --> 00:34:08.366
After you add your GitHub

00:34:08.366 --> 00:34:10.386
account, you can use Xcode's new

00:34:10.516 --> 00:34:12.186
cloning work flow that presents

00:34:12.186 --> 00:34:13.876
all of your projects and search

00:34:13.876 --> 00:34:14.815
results from GitHub.

00:34:15.696 --> 00:34:17.116
You can add stars, review

00:34:17.156 --> 00:34:19.126
project details, even check out

00:34:19.126 --> 00:34:20.746
ReadMe's before you access the

00:34:20.746 --> 00:34:21.136
project.

00:34:22.335 --> 00:34:24.025
Once you clone a project, you

00:34:24.025 --> 00:34:25.716
can use Xcode's new source

00:34:25.716 --> 00:34:27.826
control navigator, and this

00:34:27.826 --> 00:34:28.946
presents all of your working

00:34:28.946 --> 00:34:30.466
copies, including details like

00:34:30.516 --> 00:34:33.166
branches, tags, remotes, even

00:34:33.166 --> 00:34:34.466
push and pull counts.

00:34:35.505 --> 00:34:37.025
And this is just the start of

00:34:37.025 --> 00:34:38.386
some of the amazing new source

00:34:38.386 --> 00:34:39.505
control work flows we have for

00:34:39.505 --> 00:34:39.636
you.

00:34:40.065 --> 00:34:41.096
And to show you more, I'd like

00:34:41.096 --> 00:34:42.306
to bring up Mike Ferris to give

00:34:42.306 --> 00:34:43.005
you a demonstration.

00:34:44.516 --> 00:34:48.616
[ Applause ]

00:34:49.116 --> 00:34:50.596
>> Hi. Thanks, Matthew.

00:34:51.096 --> 00:34:53.346
Hello. I'm going to show you

00:34:53.346 --> 00:34:55.626
today some of the great new ways

00:34:55.626 --> 00:34:57.005
to work with source control in

00:34:57.005 --> 00:34:57.356
Xcode.

00:34:58.066 --> 00:34:59.266
Let's get started with GitHub.

00:35:01.196 --> 00:35:03.116
I'm already c1nnected, and here

00:35:03.116 --> 00:35:04.646
in the new clone window, all of

00:35:04.646 --> 00:35:06.336
my GitHub repositories are front

00:35:06.336 --> 00:35:06.776
and center.

00:35:08.176 --> 00:35:09.796
Today, I actually want to find

00:35:09.796 --> 00:35:11.356
the Swift Foundation Project, so

00:35:11.356 --> 00:35:12.976
I'm going to search GitHub.

00:35:18.966 --> 00:35:19.936
Great. There it is.

00:35:20.366 --> 00:35:23.486
Let's go ahead and clone it.

00:35:24.276 --> 00:35:26.156
Once the clone completes, Xcode

00:35:26.156 --> 00:35:27.216
opens the project.

00:35:28.546 --> 00:35:29.876
Now, my friend Felipe has been

00:35:29.876 --> 00:35:31.226
telling me about some recent

00:35:31.226 --> 00:35:32.626
changes to the data class, and I

00:35:32.626 --> 00:35:33.446
wanted to take a look.

00:35:35.326 --> 00:35:37.016
The new source control navigator

00:35:37.156 --> 00:35:38.896
allows me to explore a project.

00:35:40.556 --> 00:35:42.436
I can select the current branch

00:35:42.436 --> 00:35:43.896
to show its history, and I see

00:35:43.896 --> 00:35:45.966
all of the commits, including

00:35:45.966 --> 00:35:48.256
avatars for the commit authors

00:35:48.976 --> 00:35:50.796
and annotations for things like

00:35:52.636 --> 00:35:52.796
tags.

00:35:53.166 --> 00:35:55.136
I can filter commits by author

00:35:55.136 --> 00:35:57.116
or commit message, so I'll start

00:35:57.836 --> 00:36:01.936
by finding Felipe's commits, and

00:36:01.936 --> 00:36:02.806
then I'll narrow it down a

00:36:02.806 --> 00:36:04.356
little bit more to just the

00:36:04.356 --> 00:36:05.366
commits that have to do with

00:36:05.366 --> 00:36:05.746
beta.

00:36:06.766 --> 00:36:09.396
This is the one that I was

00:36:09.426 --> 00:36:10.006
looking for.

00:36:11.666 --> 00:36:13.066
When I double-click a commit, I

00:36:13.066 --> 00:36:14.476
go to the new commit viewer

00:36:14.616 --> 00:36:15.746
where I can see the actual

00:36:15.746 --> 00:36:16.636
source changes.

00:36:17.436 --> 00:36:18.856
It's really easy to browse

00:36:18.856 --> 00:36:20.996
history and to find specific

00:36:20.996 --> 00:36:21.516
commits.

00:36:23.956 --> 00:36:25.856
Now, I can also seamlessly use

00:36:25.996 --> 00:36:27.386
source control while I'm making

00:36:27.386 --> 00:36:28.916
changes, and I have another

00:36:28.916 --> 00:36:30.386
project that needs a little work

00:36:30.796 --> 00:36:31.576
that I'll open now.

00:36:31.576 --> 00:36:37.036
Before I get started, I want to

00:36:37.036 --> 00:36:37.866
make a branch.

00:36:39.436 --> 00:36:40.436
In the new source control

00:36:40.436 --> 00:36:42.806
navigator, I'll use the Context

00:36:42.806 --> 00:36:44.086
menu to make a new branch for

00:36:44.086 --> 00:36:44.606
"master."

00:36:49.106 --> 00:36:51.416
And, OK. I'm all checked out on

00:36:51.416 --> 00:36:52.546
my new branch, and I'm ready to

00:36:52.546 --> 00:36:52.816
go.

00:36:54.316 --> 00:36:55.576
In my projects, I like the

00:36:55.576 --> 00:36:57.026
groups to match up with the

00:36:57.026 --> 00:36:58.886
folders, and this project is

00:36:58.886 --> 00:37:00.066
already set up that way.

00:37:00.686 --> 00:37:02.046
But it's been bugging me that

00:37:02.046 --> 00:37:03.846
these two camera model classes

00:37:03.946 --> 00:37:05.186
are in the wrong group.

00:37:07.006 --> 00:37:09.146
It's OK, though, because now

00:37:09.146 --> 00:37:10.516
when I move these files to the

00:37:10.516 --> 00:37:13.346
correct group, Xcode finally

00:37:13.396 --> 00:37:14.816
also moves them to the correct

00:37:14.906 --> 00:37:15.286
folder.

00:37:16.516 --> 00:37:24.316
[ Applause ]

00:37:24.816 --> 00:37:26.346
So in projects where the group

00:37:26.346 --> 00:37:27.916
and folder layout are the same,

00:37:27.916 --> 00:37:29.266
Xcode will now keep them the

00:37:29.266 --> 00:37:29.656
same.

00:37:31.356 --> 00:37:34.336
And when I commit, all the

00:37:34.336 --> 00:37:36.446
changes will be recorded, so

00:37:36.446 --> 00:37:37.466
I'll go ahead and commit this

00:37:37.466 --> 00:37:41.026
now, and I think I'm ready to

00:37:41.026 --> 00:37:41.956
land this branch.

00:37:43.506 --> 00:37:44.516
Back in the source control

00:37:44.516 --> 00:37:46.316
navigator, I'll select the

00:37:46.316 --> 00:37:48.436
destination branch and again use

00:37:48.436 --> 00:37:50.576
the Context menu to merge in the

00:37:50.576 --> 00:37:52.116
changes for my working branch.

00:37:52.736 --> 00:37:54.806
And that's it.

00:37:54.896 --> 00:37:56.696
I can see that my new commit is

00:37:56.696 --> 00:37:58.896
now on the master branch, and I

00:37:58.896 --> 00:37:59.936
think I'm ready for my first

00:37:59.936 --> 00:38:00.566
beta release.

00:38:01.356 --> 00:38:02.696
So I should probably make a tag.

00:38:03.626 --> 00:38:05.926
I can use the Context menu here

00:38:05.926 --> 00:38:07.576
to make a tag from any commit.

00:38:08.776 --> 00:38:11.956
OK, I think I'm ready to share

00:38:11.956 --> 00:38:12.296
this.

00:38:13.236 --> 00:38:14.716
Now, this project isn't on

00:38:14.716 --> 00:38:16.686
GitHub yet, but I can easily put

00:38:16.686 --> 00:38:17.026
it there.

00:38:18.526 --> 00:38:20.026
I'll just choose to create a new

00:38:20.026 --> 00:38:20.836
GitHub remote.

00:38:22.356 --> 00:38:23.596
All these defaults look pretty

00:38:23.596 --> 00:38:24.736
good, so let's go.

00:38:25.636 --> 00:38:27.316
Xcode is now creating a project

00:38:27.316 --> 00:38:29.276
on GitHub and pushing up my

00:38:29.276 --> 00:38:31.046
repository with its entire

00:38:31.046 --> 00:38:31.526
history.

00:38:32.266 --> 00:38:33.976
And now, my project is hosted on

00:38:33.976 --> 00:38:34.356
GitHub.

00:38:35.596 --> 00:38:37.016
I have a new origin remote.

00:38:37.836 --> 00:38:39.076
And from there, I can jump

00:38:39.076 --> 00:38:40.546
directly to the Project page on

00:38:40.546 --> 00:38:43.006
GitHub.com.

00:38:43.216 --> 00:38:43.826
Here it is.

00:38:45.146 --> 00:38:46.386
Now, we've worked really closely

00:38:46.386 --> 00:38:48.106
with the GitHub folks on all

00:38:48.106 --> 00:38:50.896
this integration, and GitHub.com

00:38:50.896 --> 00:38:52.456
has a great new feature as well.

00:38:53.556 --> 00:38:55.336
Xcode users can now directly

00:38:55.336 --> 00:38:58.196
clone and open in Xcode using

00:38:58.196 --> 00:38:59.716
this new Open in Xcode button.

00:39:01.516 --> 00:39:07.386
[ Applause ]

00:39:07.886 --> 00:39:09.846
Yeah. And that is Source Control

00:39:09.846 --> 00:39:11.476
and GitHub in Xcode 9.

00:39:12.496 --> 00:39:12.906
Matthew?

00:39:14.516 --> 00:39:17.736
[ Applause ]

00:39:18.236 --> 00:39:18.736
>> Thank you, Mike.

00:39:19.846 --> 00:39:21.336
Xcode 9 also includes some

00:39:21.336 --> 00:39:22.726
advancements in our debugging

00:39:22.846 --> 00:39:24.326
and runtime analysis tools.

00:39:24.846 --> 00:39:25.916
I'd like to start with the view

00:39:25.916 --> 00:39:26.286
debugger.

00:39:27.466 --> 00:39:28.466
View controllers play an

00:39:28.466 --> 00:39:29.866
important role in UI

00:39:29.866 --> 00:39:31.276
development, so we're going to

00:39:31.276 --> 00:39:32.456
incorporate them into the view

00:39:32.456 --> 00:39:33.416
debugging experience.

00:39:34.406 --> 00:39:35.726
Captures will now include view

00:39:35.726 --> 00:39:37.806
controllers in the hierarchy and

00:39:37.806 --> 00:39:39.326
draw them on the canvas above

00:39:39.326 --> 00:39:40.456
the views they manage.

00:39:41.176 --> 00:39:42.026
Together, these will help you

00:39:42.026 --> 00:39:43.886
navigate and give you a sense of

00:39:43.886 --> 00:39:45.246
your view controller boundaries.

00:39:46.866 --> 00:39:48.216
The view debugger will now also

00:39:48.216 --> 00:39:50.146
include details from SpriteKit

00:39:50.276 --> 00:39:52.026
scenes, and the view debugger is

00:39:52.026 --> 00:39:53.636
a perfect way to expand and

00:39:53.636 --> 00:39:55.226
rotate your scenes, scope

00:39:55.226 --> 00:39:57.086
ranges, even look at clipped

00:39:57.216 --> 00:39:57.516
regions.

00:39:59.176 --> 00:40:00.396
We'll also include support for

00:40:00.566 --> 00:40:01.816
SceneKit scenes as well.

00:40:02.456 --> 00:40:03.326
And here you can use the

00:40:03.376 --> 00:40:05.256
familiar SceneKit editor to

00:40:05.256 --> 00:40:07.446
rotate the camera, navigate, and

00:40:07.446 --> 00:40:08.306
inspect objects.

00:40:09.256 --> 00:40:10.886
So view controller's SpriteKit

00:40:10.986 --> 00:40:12.476
and SceneKit are now great

00:40:12.476 --> 00:40:13.616
additions to our visual

00:40:13.616 --> 00:40:13.936
debugging.

00:40:15.516 --> 00:40:20.026
[ Applause ]

00:40:20.526 --> 00:40:21.696
Over the last few years, we've

00:40:21.696 --> 00:40:23.826
added runtime sanitizers to our

00:40:23.826 --> 00:40:25.286
debugging experience, and they

00:40:25.286 --> 00:40:27.026
have been wildly successful at

00:40:27.026 --> 00:40:28.586
helping track down issues.

00:40:29.436 --> 00:40:30.676
In addition to advancements in

00:40:30.676 --> 00:40:32.396
our two existing sanitizers,

00:40:32.736 --> 00:40:34.396
this year, we're adding two new

00:40:34.396 --> 00:40:36.706
runtime analysis tools, the

00:40:36.706 --> 00:40:38.556
Undefined Behavior Sanitizer and

00:40:38.556 --> 00:40:40.356
the Main Thread API Checker.

00:40:42.476 --> 00:40:44.136
Programming languages have some

00:40:44.206 --> 00:40:45.776
undefined behaviors, such as

00:40:45.776 --> 00:40:46.746
what to do with misaligned

00:40:46.786 --> 00:40:48.376
pointers or when encountering

00:40:48.376 --> 00:40:49.746
signed integer overflows.

00:40:50.486 --> 00:40:51.806
When these situations occur,

00:40:52.026 --> 00:40:53.016
they are very difficult to

00:40:53.016 --> 00:40:53.376
debug.

00:40:54.466 --> 00:40:56.056
The Undefined Behavior Sanitizer

00:40:56.096 --> 00:40:58.116
catches many of these cases and

00:40:58.116 --> 00:40:59.446
displays details to help you

00:40:59.446 --> 00:40:59.976
investigate.

00:41:00.506 --> 00:41:03.546
Now, the Main Thread API Checker

00:41:03.546 --> 00:41:04.786
is one you're all going to love.

00:41:05.606 --> 00:41:07.626
Calling UI-related APIs from a

00:41:07.626 --> 00:41:09.436
background thread is a common

00:41:09.436 --> 00:41:11.366
mistake and can lead to visual

00:41:11.366 --> 00:41:13.296
defects and random crashes.

00:41:14.236 --> 00:41:15.756
The Main Thread API Checker

00:41:15.976 --> 00:41:18.086
catches AppKit and UIKit APIs

00:41:18.456 --> 00:41:20.146
not called from the main thread

00:41:21.236 --> 00:41:22.446
and then surfaces issues for you

00:41:22.446 --> 00:41:22.986
to investigate.

00:41:24.516 --> 00:41:30.106
[ Applause ]

00:41:30.606 --> 00:41:32.056
We love this one so much that

00:41:32.056 --> 00:41:33.506
we've enabled it by default.

00:41:33.916 --> 00:41:34.836
So when you start debugging with

00:41:34.836 --> 00:41:36.176
Xcode 9, you're going to get

00:41:36.176 --> 00:41:37.096
this behavior for free.

00:41:38.196 --> 00:41:39.796
Now, our two new runtime

00:41:39.796 --> 00:41:41.396
sanitizers are available in the

00:41:41.396 --> 00:41:43.126
Diagnostic Options of your

00:41:43.126 --> 00:41:44.766
scheme, and all of our

00:41:44.766 --> 00:41:46.266
diagnostic tools are available

00:41:46.296 --> 00:41:48.226
for the Run and Test actions,

00:41:48.826 --> 00:41:50.346
making them perfect for use with

00:41:50.346 --> 00:41:52.466
continuous integration, which is

00:41:52.466 --> 00:41:54.216
also a perfect segue into our

00:41:54.216 --> 00:41:55.006
next section.

00:41:56.636 --> 00:41:57.536
We believe that continuous

00:41:57.536 --> 00:41:59.166
integration is an essential

00:41:59.276 --> 00:42:00.816
piece of developing great

00:42:00.866 --> 00:42:02.216
software, so we're making it

00:42:02.216 --> 00:42:04.096
easier to use Xcode Server by

00:42:04.096 --> 00:42:04.806
including all of the

00:42:04.806 --> 00:42:06.526
functionality in Xcode itself.

00:42:07.016 --> 00:42:08.356
You no longer need to install

00:42:08.536 --> 00:42:09.506
the macOS Server app.

00:42:11.516 --> 00:42:15.526
[ Applause ]

00:42:16.026 --> 00:42:17.536
A new, simplified UI in the

00:42:17.536 --> 00:42:19.196
Preferences takes just a few

00:42:19.196 --> 00:42:21.136
clicks to get started, and we've

00:42:21.136 --> 00:42:22.396
integrated new provisioning work

00:42:22.396 --> 00:42:24.246
flows, including automatic and

00:42:24.246 --> 00:42:25.596
manual code signing to

00:42:25.596 --> 00:42:26.966
streamline your configuration.

00:42:28.516 --> 00:42:29.526
Now, on the testing side, a

00:42:29.526 --> 00:42:30.996
popular request we've integrated

00:42:31.286 --> 00:42:33.266
is support for testing multiple

00:42:33.266 --> 00:42:33.916
applications.

00:42:35.166 --> 00:42:37.066
Your UI tests can now branch out

00:42:37.066 --> 00:42:39.206
into many other apps, which is a

00:42:39.206 --> 00:42:41.106
great improvement for working

00:42:41.106 --> 00:42:43.036
with app extensions, settings,

00:42:43.296 --> 00:42:44.686
and other integrated work flows.

00:42:46.056 --> 00:42:47.176
Additionally, you'll find that

00:42:47.176 --> 00:42:48.756
we've focused on performance for

00:42:48.756 --> 00:42:49.796
UI testing as well.

00:42:50.746 --> 00:42:52.326
UI testing queries run three

00:42:52.326 --> 00:42:53.556
times faster than they did

00:42:53.556 --> 00:42:53.986
before.

00:42:54.486 --> 00:42:57.086
And if you adopt new query APIs,

00:42:57.316 --> 00:42:58.986
your own tests can run up to ten

00:42:59.026 --> 00:43:00.526
times faster than before.

00:43:02.516 --> 00:43:06.026
[ Applause ]

00:43:06.526 --> 00:43:08.116
But we didn't stop there because

00:43:08.116 --> 00:43:09.296
you'll also find testing with

00:43:09.326 --> 00:43:11.026
xcodebuild now defaults to

00:43:11.026 --> 00:43:12.966
running in parallel for multiple

00:43:12.966 --> 00:43:13.746
destinations.

00:43:15.516 --> 00:43:18.916
[ Applause ]

00:43:19.416 --> 00:43:20.426
This means your command-line

00:43:20.426 --> 00:43:21.986
testing and your Xcode Server

00:43:21.986 --> 00:43:23.826
bots can evaluate tests on many

00:43:23.826 --> 00:43:26.196
devices and simulators all at

00:43:26.196 --> 00:43:27.586
the same time.

00:43:27.826 --> 00:43:29.046
And speaking of the simulator,

00:43:30.066 --> 00:43:31.646
the simulator app now supports

00:43:31.646 --> 00:43:33.876
multiple booted devices for iOS,

00:43:33.876 --> 00:43:36.236
tvOS, and watchOS all in one

00:43:36.656 --> 00:43:36.723
app.

00:43:37.516 --> 00:43:43.046
[ Applause ]

00:43:43.546 --> 00:43:45.146
Multiple simulator sessions is a

00:43:45.146 --> 00:43:46.916
huge productivity win when

00:43:46.916 --> 00:43:48.376
testing different configurations

00:43:48.626 --> 00:43:50.236
and when evaluating multi-client

00:43:50.386 --> 00:43:50.786
scenarios.

00:43:52.066 --> 00:43:53.076
You'll also find the simulator

00:43:53.076 --> 00:43:54.136
has a new experience.

00:43:54.516 --> 00:43:55.826
We've added in a bezel around

00:43:55.826 --> 00:43:57.026
the side to give you familiar

00:43:57.126 --> 00:43:59.046
access to hardware controls and

00:43:59.046 --> 00:44:00.476
enable interactivity, such as

00:44:00.476 --> 00:44:01.946
swipe gestures from the edge.

00:44:02.576 --> 00:44:03.306
And we've also made the

00:44:03.376 --> 00:44:04.966
simulator fully resizable.

00:44:06.516 --> 00:44:10.556
[ Applause ]

00:44:11.056 --> 00:44:12.686
So there's one more feature in

00:44:12.686 --> 00:44:13.746
Xcode 9 that I'd like to share

00:44:13.746 --> 00:44:15.366
with you, and it starts by

00:44:15.436 --> 00:44:16.266
something that we're taking

00:44:16.266 --> 00:44:18.796
away, and it's the need to use

00:44:18.796 --> 00:44:19.256
one of these.

00:44:20.516 --> 00:44:32.446
[ Applause ]

00:44:32.946 --> 00:44:33.916
You know, I was going to say, I

00:44:33.916 --> 00:44:34.956
know you all love your USB

00:44:34.956 --> 00:44:36.136
cables, but that's apparently

00:44:36.136 --> 00:44:36.766
not true [laughter].

00:44:37.736 --> 00:44:39.026
But it doesn't matter because in

00:44:39.026 --> 00:44:40.066
Xcode 9, it's no longer

00:44:40.066 --> 00:44:40.916
necessary.

00:44:40.916 --> 00:44:42.046
We are adding in wireless

00:44:42.046 --> 00:44:42.456
development.

00:44:43.516 --> 00:44:50.976
[ Applause ]

00:44:51.476 --> 00:44:52.776
With Xcode 9, you can use the

00:44:52.776 --> 00:44:54.736
connection type best suited for

00:44:55.476 --> 00:44:57.046
your needs -- USB, Wi-Fi, or

00:44:57.046 --> 00:44:58.286
Ethernet -- when connecting to

00:44:58.286 --> 00:45:00.436
your iOS and tvOS devices.

00:45:01.356 --> 00:45:02.396
All of the development work

00:45:02.396 --> 00:45:03.476
flows are supported with

00:45:03.476 --> 00:45:04.276
wireless development.

00:45:04.906 --> 00:45:06.066
In fact, you can also use

00:45:06.066 --> 00:45:07.316
wireless development with other

00:45:07.316 --> 00:45:08.696
apps, like Accessibility

00:45:08.696 --> 00:45:10.686
Inspector, QuickTime Player, and

00:45:10.686 --> 00:45:11.096
Console.

00:45:11.506 --> 00:45:12.556
So this will be a natural

00:45:12.556 --> 00:45:13.986
addition to your development

00:45:14.606 --> 00:45:15.576
work flows.

00:45:16.146 --> 00:45:17.566
So that's just a taste of what

00:45:17.566 --> 00:45:19.806
we have for you in Xcode 9 -- a

00:45:19.806 --> 00:45:20.936
new Source Editor with

00:45:20.936 --> 00:45:23.856
refactoring alongside Swift 4; a

00:45:23.856 --> 00:45:25.476
new indexer, build system, and

00:45:25.476 --> 00:45:26.586
source control work flows

00:45:26.586 --> 00:45:28.246
integrating GitHub; and

00:45:28.246 --> 00:45:29.526
advancements in our debugging,

00:45:29.636 --> 00:45:31.656
analysis, and testing tools to

00:45:31.656 --> 00:45:32.876
go alongside wireless

00:45:32.926 --> 00:45:33.426
development.

00:45:34.176 --> 00:45:36.046
All that and more is in Xcode 9,

00:45:36.566 --> 00:45:37.696
and that's our tools update for

00:45:37.696 --> 00:45:37.886
today.

00:45:39.516 --> 00:45:48.306
[ Applause ]

00:45:48.806 --> 00:45:49.686
Next, we'd like to share with

00:45:49.686 --> 00:45:51.256
you some of the new APIs we have

00:45:51.256 --> 00:45:52.476
for you, and for that, I'm going

00:45:52.476 --> 00:45:53.616
to invite up Josh Shaffer.

00:45:54.516 --> 00:45:59.436
[ Applause ]

00:45:59.936 --> 00:46:00.536
>> Thanks, Matthew.

00:46:01.606 --> 00:46:03.156
I'm really excited to tell you

00:46:03.156 --> 00:46:05.506
about so many of the new and

00:46:05.506 --> 00:46:07.356
enhanced APIs in iOS 11.

00:46:10.206 --> 00:46:12.356
There's a ton of new things, so

00:46:12.356 --> 00:46:13.216
let's start with the most

00:46:13.216 --> 00:46:15.416
important new API, drag and

00:46:15.416 --> 00:46:15.786
drop.

00:46:17.186 --> 00:46:18.746
Drag and drop is simple to use,

00:46:18.746 --> 00:46:20.106
with consistent interactions

00:46:20.106 --> 00:46:21.696
across the system, and of

00:46:21.696 --> 00:46:23.096
course, it's also really easy to

00:46:23.096 --> 00:46:24.746
add to your apps as well.

00:46:26.136 --> 00:46:27.486
While simple, it's also

00:46:27.486 --> 00:46:29.016
incredibly flexible and

00:46:29.016 --> 00:46:31.136
customizable, and it takes full

00:46:31.136 --> 00:46:33.016
advantage of iPad's multi-touch

00:46:33.016 --> 00:46:33.676
capabilities.

00:46:34.566 --> 00:46:35.916
And of course, it's secure by

00:46:35.916 --> 00:46:38.046
design, allowing access to the

00:46:38.156 --> 00:46:39.786
data being dragged only once a

00:46:39.786 --> 00:46:40.706
drop occurs.

00:46:41.296 --> 00:46:43.726
Adding drag and drop to your

00:46:43.726 --> 00:46:45.856
apps is almost as easy as using

00:46:45.856 --> 00:46:46.026
it.

00:46:46.926 --> 00:46:48.676
It's completely automatic for

00:46:48.676 --> 00:46:50.536
standard text and web controls,

00:46:50.946 --> 00:46:52.336
so your apps may actually

00:46:52.336 --> 00:46:53.356
already support it.

00:46:54.656 --> 00:46:56.836
Existing apps like Slack can

00:46:56.836 --> 00:46:58.436
already participate -- for

00:46:58.436 --> 00:47:00.126
example, by accepting drops of

00:47:00.126 --> 00:47:02.706
text in their existing text

00:47:03.296 --> 00:47:03.446
views.

00:47:03.636 --> 00:47:04.856
For other cases, you'll need to

00:47:04.856 --> 00:47:05.556
do a little work.

00:47:06.426 --> 00:47:07.496
Now, if you're displaying your

00:47:07.496 --> 00:47:09.206
content in a table view or a

00:47:09.206 --> 00:47:11.096
collection view, new delegate

00:47:11.096 --> 00:47:12.596
methods make it really easy to

00:47:12.596 --> 00:47:14.126
add drag-and-drop support with

00:47:14.126 --> 00:47:15.316
just a few lines of code.

00:47:16.286 --> 00:47:17.946
Beginning a drag is as easy as

00:47:17.946 --> 00:47:19.206
providing the data, and

00:47:19.716 --> 00:47:21.496
accepting a drop is just as

00:47:21.496 --> 00:47:21.816
simple.

00:47:23.356 --> 00:47:24.446
For everything else, there's an

00:47:24.446 --> 00:47:28.356
easy-to-use, standard API that

00:47:28.356 --> 00:47:29.646
can integrate with all of your

00:47:29.646 --> 00:47:30.446
custom views.

00:47:31.976 --> 00:47:33.886
By default, the API provides

00:47:33.886 --> 00:47:34.936
standard gestures and

00:47:34.936 --> 00:47:36.836
animations, but it's fully

00:47:36.836 --> 00:47:37.626
customizable.

00:47:38.276 --> 00:47:39.496
You can customize the lift

00:47:39.496 --> 00:47:40.636
animations that occur at the

00:47:40.636 --> 00:47:42.866
start of a drag, add multiple

00:47:42.866 --> 00:47:44.586
items to an already in-progress

00:47:44.586 --> 00:47:46.886
drag, generate custom preview

00:47:46.886 --> 00:47:49.236
images for each item, choose the

00:47:49.236 --> 00:47:50.686
badge to display on the dragged

00:47:50.686 --> 00:47:52.146
item to indicate that it will be

00:47:52.146 --> 00:47:54.396
moved or copied, and even

00:47:54.396 --> 00:47:55.916
provide fully custom set-down

00:47:55.916 --> 00:47:57.656
animations to play when the drop

00:47:57.656 --> 00:47:58.206
occurs.

00:47:59.196 --> 00:48:01.566
The API is flexible enough that

00:48:01.566 --> 00:48:02.906
even the really custom,

00:48:02.906 --> 00:48:04.986
gesture-based event creation and

00:48:04.986 --> 00:48:06.826
reordering in the Calendars app

00:48:06.826 --> 00:48:08.416
was able to be re-implemented on

00:48:08.516 --> 00:48:09.536
top of the drag-and-drop APIs.

00:48:09.536 --> 00:48:12.406
And the flexibility doesn't just

00:48:12.406 --> 00:48:13.526
end with the appearance.

00:48:13.596 --> 00:48:15.486
The data model is incredibly

00:48:15.556 --> 00:48:16.386
flexible as well.

00:48:17.396 --> 00:48:18.406
It can work with any type of

00:48:18.406 --> 00:48:19.956
data that your app uses,

00:48:20.386 --> 00:48:21.696
allowing you to support really

00:48:21.696 --> 00:48:22.836
rich interactions.

00:48:23.596 --> 00:48:25.446
For example, locations dragged

00:48:25.446 --> 00:48:27.116
out of maps include rich

00:48:27.116 --> 00:48:29.446
location information and really

00:48:29.446 --> 00:48:30.596
detailed drag previews.

00:48:31.866 --> 00:48:33.306
Now, with drag and drop, even

00:48:33.306 --> 00:48:34.536
existing interactions get

00:48:34.576 --> 00:48:34.896
better.

00:48:35.926 --> 00:48:37.586
Reminders uses UITableView's

00:48:37.586 --> 00:48:38.946
built-in reordering support to

00:48:38.946 --> 00:48:40.586
allow you to quickly reorder and

00:48:40.586 --> 00:48:41.706
organize your tasks.

00:48:42.276 --> 00:48:44.636
You can begin a drag to drag an

00:48:44.636 --> 00:48:46.446
item, to move it to a different

00:48:46.446 --> 00:48:48.546
spot, and now even pick up

00:48:48.546 --> 00:48:50.556
multiple reminders and move them

00:48:50.556 --> 00:48:52.486
between lists so that you can

00:48:52.486 --> 00:48:54.186
really quickly organize all of

00:48:54.186 --> 00:48:54.946
your tasks.

00:48:56.136 --> 00:48:57.526
Because all of this is built on

00:48:57.696 --> 00:48:59.916
top of a common API, it works

00:48:59.916 --> 00:49:01.476
seamlessly together as well.

00:49:02.306 --> 00:49:03.616
You can bring out Calendar, and

00:49:03.616 --> 00:49:04.826
begin dragging one of those

00:49:04.826 --> 00:49:06.836
events, and drag it over into

00:49:06.876 --> 00:49:08.696
Reminders, where you can drop it

00:49:08.736 --> 00:49:12.266
to quickly add it to your to-do

00:49:12.416 --> 00:49:12.536
list.

00:49:12.536 --> 00:49:13.426
Now, while a drag is in

00:49:13.506 --> 00:49:15.096
progress, the system handles

00:49:15.156 --> 00:49:16.866
that touch, leaving your app

00:49:17.166 --> 00:49:18.666
fully interactive and free to

00:49:18.666 --> 00:49:20.526
respond to any other touches.

00:49:21.406 --> 00:49:22.816
This makes it really easy to

00:49:22.816 --> 00:49:24.216
support even complex

00:49:24.216 --> 00:49:25.436
interactions that require

00:49:25.436 --> 00:49:27.636
navigation within your app, such

00:49:27.636 --> 00:49:29.766
as moving photos between albums.

00:49:30.936 --> 00:49:33.106
Now, on the iPad, the entire OS

00:49:33.106 --> 00:49:34.276
remains fully interactive,

00:49:34.766 --> 00:49:36.226
allowing you to pick up multiple

00:49:36.226 --> 00:49:37.836
items in one place and then

00:49:37.836 --> 00:49:39.506
navigate freely around the

00:49:39.556 --> 00:49:41.076
system, even switching apps,

00:49:41.396 --> 00:49:42.526
bringing those dragged items

00:49:42.526 --> 00:49:43.956
with you so that you can use

00:49:43.956 --> 00:49:45.526
them somewhere else.

00:49:46.376 --> 00:49:48.346
During all this navigation, the

00:49:48.346 --> 00:49:50.366
data behind the drag is being

00:49:50.366 --> 00:49:52.896
protected from unintended access

00:49:52.976 --> 00:49:54.146
by any other apps that you're

00:49:54.186 --> 00:49:54.966
dragging it over.

00:49:55.776 --> 00:49:58.366
Until a drag is completed, only

00:49:58.366 --> 00:50:00.046
metadata is made available to

00:50:00.046 --> 00:50:01.466
potential drop destinations.

00:50:02.506 --> 00:50:03.946
When a drop does occur, the data

00:50:04.046 --> 00:50:05.506
is quickly made available to the

00:50:05.506 --> 00:50:06.356
receiving app.

00:50:07.156 --> 00:50:08.386
Now, the security provided by

00:50:08.386 --> 00:50:09.836
this lazy delivery doesn't have

00:50:09.876 --> 00:50:10.786
to come at the cost of

00:50:10.786 --> 00:50:12.526
performance either because even

00:50:12.526 --> 00:50:13.946
really large files can be

00:50:14.036 --> 00:50:15.656
transferred almost instantly

00:50:15.856 --> 00:50:17.016
with APFS cloning.

00:50:18.356 --> 00:50:19.466
Now, this is all just the

00:50:19.466 --> 00:50:19.976
beginning.

00:50:20.916 --> 00:50:22.346
To show you some other exciting

00:50:22.346 --> 00:50:23.796
use cases and to give you an

00:50:23.796 --> 00:50:25.206
idea of how easy it can be to

00:50:25.206 --> 00:50:26.436
add drag and drop to your apps

00:50:26.436 --> 00:50:28.096
as well, Eliza Block will now

00:50:28.096 --> 00:50:29.056
come up and give us a demo.

00:50:30.096 --> 00:50:30.466
Eliza?

00:50:31.516 --> 00:50:36.466
[ Applause ]

00:50:36.966 --> 00:50:37.496
>> Thanks, Josh.

00:50:37.826 --> 00:50:39.996
So I'd like to begin by showing

00:50:39.996 --> 00:50:41.146
an improvement that we've made

00:50:41.146 --> 00:50:43.386
to the iOS Home screen by

00:50:43.386 --> 00:50:44.566
leveraging the drag-and-drop

00:50:44.566 --> 00:50:44.786
API.

00:50:45.606 --> 00:50:48.076
So here on this iPad, I can

00:50:48.246 --> 00:50:53.186
press and hold to begin

00:50:53.186 --> 00:50:54.546
reordering my apps.

00:50:54.546 --> 00:50:55.886
For example, I could create, I

00:50:55.886 --> 00:50:57.546
could drag reminders over the

00:50:57.546 --> 00:50:59.236
Calendar to create a

00:50:59.456 --> 00:51:00.376
Productivity folder.

00:51:01.856 --> 00:51:03.796
Now, in iOS 11, we have

00:51:03.886 --> 00:51:05.606
completely rewritten app

00:51:05.826 --> 00:51:07.866
reordering using drag and drop,

00:51:07.866 --> 00:51:09.056
and we've made it a whole lot

00:51:09.056 --> 00:51:09.776
more powerful.

00:51:10.616 --> 00:51:11.346
Let's find some more

00:51:11.346 --> 00:51:12.786
productivity apps to add to this

00:51:12.866 --> 00:51:13.176
folder.

00:51:13.906 --> 00:51:16.006
Here's Pages.

00:51:16.006 --> 00:51:17.946
I'll begin dragging it, and as I

00:51:17.946 --> 00:51:19.766
do, the Home screen remains

00:51:19.766 --> 00:51:21.406
fully interactive, so with my

00:51:21.486 --> 00:51:23.266
other hand, I can swipe between

00:51:23.266 --> 00:51:25.376
pages, navigate in and out of

00:51:25.376 --> 00:51:27.616
folders, and the best part is

00:51:27.616 --> 00:51:28.856
I'm no longer limited to

00:51:28.856 --> 00:51:30.416
dragging a single app at a time.

00:51:30.576 --> 00:51:33.486
I can tap Keynote to add it to

00:51:33.536 --> 00:51:35.496
my ongoing drag, close the

00:51:35.496 --> 00:51:36.956
folder, and let's look around

00:51:36.956 --> 00:51:38.176
and see if we can find Numbers.

00:51:39.516 --> 00:51:43.086
[ Applause ]

00:51:43.586 --> 00:51:44.956
There it is, so I'll tap it,

00:51:45.296 --> 00:51:47.426
grab it, and now I can drag all

00:51:47.426 --> 00:51:48.796
three of these apps back over to

00:51:48.796 --> 00:51:50.436
the first page and drop them

00:51:50.436 --> 00:51:52.156
into my folder in one fell

00:51:52.216 --> 00:51:52.396
swoop.

00:51:53.516 --> 00:51:58.376
[ Applause ]

00:51:58.876 --> 00:52:00.336
So that's app reordering with

00:52:00.336 --> 00:52:01.586
drag and drop, and you can do

00:52:01.586 --> 00:52:02.656
this kind of thing in your own

00:52:02.656 --> 00:52:03.586
applications too.

00:52:04.496 --> 00:52:06.356
To see an example, let me launch

00:52:06.416 --> 00:52:08.426
this app called Byte Swap that

00:52:08.426 --> 00:52:10.556
my team has written to help me

00:52:10.556 --> 00:52:12.686
view and organize my Swift

00:52:12.876 --> 00:52:14.316
Playgrounds trading cards.

00:52:15.756 --> 00:52:18.476
So it's composed of a Swift,

00:52:18.476 --> 00:52:19.846
sorry, a split-view controller,

00:52:20.286 --> 00:52:22.276
and on the right here, you can

00:52:22.276 --> 00:52:23.866
see that my cards are displayed

00:52:23.866 --> 00:52:25.146
in a collection view using a

00:52:25.146 --> 00:52:26.256
basic flow layout.

00:52:27.136 --> 00:52:28.856
Now, I think it would be cool if

00:52:28.856 --> 00:52:30.406
I could pick up these cards and

00:52:30.406 --> 00:52:31.576
drag them around to reorder

00:52:31.576 --> 00:52:32.936
them, move them between my

00:52:32.936 --> 00:52:35.156
different albums, and so let's

00:52:35.156 --> 00:52:36.486
actually go ahead and implement

00:52:36.486 --> 00:52:37.016
that now.

00:52:37.556 --> 00:52:40.606
I'll switch over to Xcode, where

00:52:40.606 --> 00:52:42.426
I have the Cards View controller

00:52:42.426 --> 00:52:42.876
open.

00:52:47.096 --> 00:52:48.936
Now, because Table View and

00:52:48.936 --> 00:52:50.566
Collection View already contain

00:52:50.676 --> 00:52:52.096
built-in support for drag and

00:52:52.096 --> 00:52:54.386
drop, adding drag and drop if

00:52:54.386 --> 00:52:55.196
you're using one of these

00:52:55.226 --> 00:52:56.786
classes is really simple.

00:52:57.746 --> 00:52:59.836
I'll start by just declaring

00:52:59.836 --> 00:53:01.626
conformance to the new

00:53:01.626 --> 00:53:03.426
UICollectionView drag/delegate

00:53:03.426 --> 00:53:03.776
protocol.

00:53:03.776 --> 00:53:07.476
When I do that, Xcode helpfully

00:53:07.476 --> 00:53:09.016
informs me that I have not yet

00:53:09.016 --> 00:53:10.346
implemented one of the required

00:53:10.346 --> 00:53:12.116
methods in that protocol, and I

00:53:12.116 --> 00:53:13.806
can tap the issue and accept the

00:53:13.856 --> 00:53:16.046
Fix-it to add the protocol

00:53:16.046 --> 00:53:17.636
[inaudible].

00:53:17.636 --> 00:53:19.496
So this method, Items for

00:53:19.496 --> 00:53:21.186
Beginning Session, is prompting

00:53:21.186 --> 00:53:22.646
me to package up the data for

00:53:22.716 --> 00:53:24.256
the item being dragged, and I'm

00:53:24.286 --> 00:53:25.736
going to do that by calling out

00:53:25.876 --> 00:53:28.106
to a helper method that I wrote

00:53:28.106 --> 00:53:29.866
before, which just packages up

00:53:29.866 --> 00:53:31.556
the data as an image and makes

00:53:31.556 --> 00:53:32.106
it draggable.

00:53:32.106 --> 00:53:35.396
That's actually all I have to do

00:53:35.396 --> 00:53:36.666
to get the bare bones of drag

00:53:36.666 --> 00:53:39.096
working in this application, but

00:53:39.096 --> 00:53:40.766
I also want to make it possible

00:53:40.866 --> 00:53:44.846
to tap to add items to an

00:53:44.846 --> 00:53:45.636
ongoing drag.

00:53:45.816 --> 00:53:47.226
So I'm going to add a second

00:53:47.316 --> 00:53:48.376
method to do that, and then

00:53:48.376 --> 00:53:53.136
we'll go ahead and run this.

00:53:53.336 --> 00:53:54.896
I'll switch over to my iPad.

00:53:54.896 --> 00:53:57.176
Whoops. And here it is.

00:53:57.176 --> 00:53:59.726
As you can see, now I can pick

00:53:59.726 --> 00:54:01.126
this guy up and drag him around.

00:54:01.696 --> 00:54:03.626
But I can't reorder yet because

00:54:03.626 --> 00:54:04.926
I haven't implemented drop in

00:54:04.926 --> 00:54:05.676
this application.

00:54:06.326 --> 00:54:07.856
However, I still can freely

00:54:07.856 --> 00:54:10.636
interact with the app and I can

00:54:10.636 --> 00:54:12.186
pick up a second item to add it

00:54:12.186 --> 00:54:14.266
to my existing drag, and this is

00:54:14.266 --> 00:54:15.506
actually more useful than it

00:54:15.506 --> 00:54:17.836
looks because, in addition to

00:54:17.836 --> 00:54:18.726
being able to drag these

00:54:18.726 --> 00:54:20.956
arounds, I can interact with

00:54:21.036 --> 00:54:22.426
other apps which may have

00:54:22.426 --> 00:54:23.546
implemented drop already.

00:54:23.546 --> 00:54:25.116
For example, Mail.

00:54:26.436 --> 00:54:28.846
So I can go into Mail, tap to

00:54:28.846 --> 00:54:30.536
compose a message, and then drop

00:54:30.536 --> 00:54:32.526
these two cards in the message

00:54:33.456 --> 00:54:34.106
just like that.

00:54:34.306 --> 00:54:35.816
So that's with only two delegate

00:54:35.816 --> 00:54:37.546
methods added to my existing

00:54:37.546 --> 00:54:38.086
application.

00:54:39.256 --> 00:54:40.836
All right, switching back over

00:54:41.516 --> 00:54:43.126
to Xcode, let's go ahead and

00:54:43.126 --> 00:54:44.006
implement drop.

00:54:45.176 --> 00:54:48.006
So I will start once again by

00:54:48.006 --> 00:54:50.146
declaring conformance to a new

00:54:50.146 --> 00:54:51.116
delegate protocol,

00:54:51.116 --> 00:54:52.436
UICollectionView drop delegate.

00:54:52.436 --> 00:54:55.676
And Xcode will once again offer

00:54:55.676 --> 00:54:57.886
to fill in the missing protocol

00:54:58.556 --> 00:54:58.686
step.

00:54:59.536 --> 00:55:02.196
So this perform drop method is a

00:55:02.196 --> 00:55:03.346
little bit more involved.

00:55:04.086 --> 00:55:08.266
I have to update my model for

00:55:08.776 --> 00:55:10.156
the, to, by receiving the new

00:55:10.156 --> 00:55:12.696
drop data, and, also, I'm

00:55:12.696 --> 00:55:14.046
customizing the animation here a

00:55:14.046 --> 00:55:15.146
little bit with a helper method.

00:55:15.616 --> 00:55:18.246
And there's one other method I

00:55:18.246 --> 00:55:21.786
need to add as well, which is

00:55:21.826 --> 00:55:24.506
called as I drag my finger over

00:55:24.506 --> 00:55:26.516
one of the drop targets, and it,

00:55:26.516 --> 00:55:27.456
that's what causes the

00:55:27.456 --> 00:55:28.656
Collection View to open up a gap

00:55:28.836 --> 00:55:30.306
so that I can reorganize within

00:55:30.306 --> 00:55:31.056
a particular list.

00:55:32.366 --> 00:55:35.366
So switching over to my iPad

00:55:35.586 --> 00:55:38.186
again, this time when I pick up

00:55:38.586 --> 00:55:41.056
a card, the other ones move out

00:55:41.056 --> 00:55:43.816
of the way, and I can still

00:55:43.906 --> 00:55:46.286
switch between lists, grab a

00:55:46.286 --> 00:55:49.276
couple more, and then I can drop

00:55:49.276 --> 00:55:50.796
them all together in my

00:55:50.796 --> 00:55:51.396
Favorites album.

00:55:52.006 --> 00:55:54.376
So easy. So that's adding drag

00:55:54.376 --> 00:55:55.796
and drop to your applications.

00:55:56.476 --> 00:55:58.386
And switching gears, we've been

00:55:58.386 --> 00:55:59.396
working with a number of

00:55:59.396 --> 00:56:01.166
partners who have been working

00:56:01.166 --> 00:56:03.336
on getting drag and drop in

00:56:03.336 --> 00:56:04.176
their applications.

00:56:04.486 --> 00:56:05.906
And one partner that has really

00:56:05.996 --> 00:56:07.636
stood out for their creative use

00:56:07.636 --> 00:56:09.386
of this API is Adobe.

00:56:09.856 --> 00:56:11.046
So now, I would like to invite

00:56:11.046 --> 00:56:13.056
up Brooke Francesi from Adobe to

00:56:13.056 --> 00:56:13.856
show you what they've built.

00:56:15.516 --> 00:56:20.876
[ Applause ]

00:56:21.376 --> 00:56:22.016
>> Thanks, Eliza.

00:56:22.416 --> 00:56:24.946
I cannot wait to show you what

00:56:24.946 --> 00:56:26.266
drag and drop can mean for the

00:56:26.266 --> 00:56:27.296
creative professional.

00:56:27.946 --> 00:56:30.596
This is Adobe Photoshop Sketch,

00:56:31.056 --> 00:56:32.526
and it's a focused painting and

00:56:32.526 --> 00:56:33.486
drawing app with some of the

00:56:33.486 --> 00:56:35.066
best natural media brushes,

00:56:35.416 --> 00:56:36.746
including all of My Photoshop

00:56:36.746 --> 00:56:37.166
Brushes.

00:56:37.676 --> 00:56:38.506
I've been working on this

00:56:38.506 --> 00:56:40.166
illustration, and before I

00:56:40.166 --> 00:56:41.336
finish it up, I want to add a

00:56:41.336 --> 00:56:42.636
few elements to the background.

00:56:43.096 --> 00:56:44.296
And in order to do that, I'm

00:56:44.416 --> 00:56:46.996
going to open another Adobe app

00:56:46.996 --> 00:56:47.746
called Capture.

00:56:48.506 --> 00:56:50.066
Capture is an app that allows me

00:56:50.066 --> 00:56:52.046
to capture inspiration from the

00:56:52.046 --> 00:56:53.866
world around me to create things

00:56:53.866 --> 00:56:57.036
like patterns, color themes, and

00:56:57.036 --> 00:56:59.096
even custom brushes, which I've

00:56:59.096 --> 00:57:00.116
been using to work on this

00:57:00.116 --> 00:57:00.546
project.

00:57:01.386 --> 00:57:03.456
Now, in order to add some

00:57:03.456 --> 00:57:04.826
elements to the background, I

00:57:04.826 --> 00:57:06.296
need to load the color theme

00:57:06.296 --> 00:57:08.416
into my toolbar in Photoshop

00:57:08.416 --> 00:57:08.926
Sketch.

00:57:09.676 --> 00:57:11.306
In the past, I would've had to

00:57:11.306 --> 00:57:13.276
go find all those colors,

00:57:13.616 --> 00:57:15.336
manually load every single one

00:57:15.336 --> 00:57:17.616
of them into my toolbar, go

00:57:17.616 --> 00:57:18.886
back, find the brushes.

00:57:19.256 --> 00:57:19.736
You get it.

00:57:19.736 --> 00:57:21.456
It's a pretty long and arduous

00:57:21.506 --> 00:57:21.936
process.

00:57:23.046 --> 00:57:25.056
But with drag and drop, I can

00:57:25.056 --> 00:57:27.126
select all five colors at once,

00:57:27.996 --> 00:57:29.576
navigate to my Brushes tab,

00:57:30.286 --> 00:57:32.086
select the two brushes that I've

00:57:32.086 --> 00:57:33.166
been using to work on in this

00:57:33.226 --> 00:57:36.566
project, and simultaneously drag

00:57:36.566 --> 00:57:38.096
them over into my toolbar.

00:57:38.556 --> 00:57:39.676
Pretty awesome, right?

00:57:41.516 --> 00:57:44.866
[ Applause ]

00:57:45.366 --> 00:57:46.956
Something that would've taken me

00:57:47.096 --> 00:57:49.256
a ton of steps before took me

00:57:49.256 --> 00:57:50.046
just seconds.

00:57:50.506 --> 00:57:51.796
We even took advantage of the

00:57:51.796 --> 00:57:53.896
API to create our own custom

00:57:53.896 --> 00:57:54.596
animations.

00:57:56.016 --> 00:57:57.346
Once we got our hands on the new

00:57:57.346 --> 00:57:59.206
drag and drop, we were amazed at

00:57:59.206 --> 00:58:00.546
how simple and straightforward

00:58:00.546 --> 00:58:01.326
it was to implement.

00:58:01.726 --> 00:58:03.996
Within just two days, we had one

00:58:03.996 --> 00:58:05.786
engineer who had the basic API

00:58:05.856 --> 00:58:08.136
feature working in one app, and

00:58:08.136 --> 00:58:09.236
so we just decided to keep

00:58:09.236 --> 00:58:09.836
going.

00:58:10.176 --> 00:58:11.486
The possibilities with drag and

00:58:11.486 --> 00:58:12.946
drop are literally endless.

00:58:13.796 --> 00:58:15.486
The cool thing is is I'm not

00:58:15.486 --> 00:58:18.516
limited to just images, and

00:58:18.516 --> 00:58:19.956
brushes, and color themes.

00:58:20.266 --> 00:58:21.896
I can actually drag and drop

00:58:21.896 --> 00:58:23.926
layers between multiple apps.

00:58:24.326 --> 00:58:25.486
Now, I want to see what this is

00:58:25.486 --> 00:58:26.876
going to look like in Context.

00:58:27.356 --> 00:58:28.376
Actually, let me draw a little

00:58:28.376 --> 00:58:28.946
bit on here.

00:58:29.206 --> 00:58:30.526
I want to see what this is going

00:58:30.526 --> 00:58:32.526
to look like in Context, and so

00:58:32.526 --> 00:58:33.716
I'm going to take these layers

00:58:33.716 --> 00:58:35.296
that I've been working on by

00:58:35.366 --> 00:58:39.446
selecting them, I'm going to

00:58:39.536 --> 00:58:41.106
open up my Dock, and I'm going

00:58:41.326 --> 00:58:43.526
to drag them into another Adobe

00:58:43.526 --> 00:58:44.976
app, Photoshop Mix, which is an

00:58:44.976 --> 00:58:46.346
image compositing tool.

00:58:46.766 --> 00:58:48.176
Now, what's really cool is once

00:58:48.176 --> 00:58:49.586
I'm in here, I have options.

00:58:49.836 --> 00:58:51.416
I can target any specific

00:58:51.416 --> 00:58:53.116
coordinates on my canvas if I

00:58:53.116 --> 00:58:54.426
know exactly where I want those

00:58:54.426 --> 00:58:57.326
layers to be, or I can just drag

00:58:57.326 --> 00:58:58.716
them right into my layer stack.

00:58:59.326 --> 00:59:02.316
That's pretty awesome, right?

00:59:02.316 --> 00:59:03.556
I never get tired of seeing that

00:59:03.556 --> 00:59:04.046
happen.

00:59:05.516 --> 00:59:09.936
[ Applause ]

00:59:10.436 --> 00:59:11.676
Now, in case you've all been

00:59:11.676 --> 00:59:13.176
asleep for the past two minutes,

00:59:13.496 --> 00:59:15.426
I just dragged three completely

00:59:15.426 --> 00:59:16.636
different types of assets

00:59:16.676 --> 00:59:18.196
between three completely

00:59:18.196 --> 00:59:19.466
different applications.

00:59:19.466 --> 00:59:21.336
And that's why drag and drop

00:59:21.336 --> 00:59:22.786
isn't just saving steps in my

00:59:22.786 --> 00:59:23.336
process.

00:59:23.736 --> 00:59:26.076
It's an entirely new mobile work

00:59:26.076 --> 00:59:27.736
flow for creative professionals

00:59:27.736 --> 00:59:28.146
on the iPad.

00:59:28.366 --> 00:59:29.536
Thank you.

00:59:31.516 --> 00:59:37.126
[ Applause ]

00:59:37.626 --> 00:59:38.086
>> Thanks, Brooke.

00:59:38.856 --> 00:59:40.076
Drag and drop is a really

00:59:40.076 --> 00:59:41.816
exciting, new API, and we can't

00:59:41.816 --> 00:59:42.656
wait to see what you're all

00:59:42.656 --> 00:59:44.146
going to do with it, but there

00:59:44.146 --> 00:59:45.096
are a number of other

00:59:45.096 --> 00:59:46.886
enhancements in iOS 11 that you

00:59:46.886 --> 00:59:47.846
should be aware of as well.

00:59:47.846 --> 00:59:49.996
So let's start with some updates

00:59:49.996 --> 00:59:51.096
to the user interface.

00:59:52.236 --> 00:59:53.236
The top level of most

00:59:53.236 --> 00:59:54.696
applications now features a

00:59:54.696 --> 00:59:56.856
large title featured prominently

00:59:56.856 --> 00:59:58.596
in the navigation bar, along

00:59:58.596 --> 01:00:00.166
with a new integrated search

01:00:00.166 --> 01:00:00.836
field design.

01:00:01.756 --> 01:00:02.766
You'll find this at the top of

01:00:02.766 --> 01:00:04.676
most applications, including

01:00:04.676 --> 01:00:06.886
Messages, Mail, the new App

01:00:07.016 --> 01:00:09.696
Store, Photos, and many more.

01:00:09.696 --> 01:00:11.686
And enabling this appearance in

01:00:11.686 --> 01:00:13.316
your own apps couldn't be any

01:00:13.316 --> 01:00:13.756
simpler.

01:00:14.596 --> 01:00:16.366
With just a few properties, you

01:00:16.366 --> 01:00:18.186
can adopt and control the

01:00:18.266 --> 01:00:19.706
appearance of the new large

01:00:19.756 --> 01:00:21.446
title and adopt the new

01:00:21.606 --> 01:00:22.716
integrated search field.

01:00:24.036 --> 01:00:26.076
You'll also find that in iOS 11,

01:00:26.076 --> 01:00:27.666
UITableView has now enabled

01:00:27.836 --> 01:00:29.596
self-sizing cells by default,

01:00:30.156 --> 01:00:31.706
helping to make it even easier

01:00:31.866 --> 01:00:33.046
for you to have great support

01:00:33.046 --> 01:00:33.856
for dynamic type.

01:00:35.516 --> 01:00:38.846
[ Applause ]

01:00:39.346 --> 01:00:40.916
This has also helped to make iOS

01:00:40.916 --> 01:00:43.176
11's UI more responsive to text

01:00:43.176 --> 01:00:44.936
size changes than ever before.

01:00:45.706 --> 01:00:47.156
And with a wide range of dynamic

01:00:47.206 --> 01:00:49.116
type sizes available, your users

01:00:49.116 --> 01:00:50.416
are going to choose the size

01:00:50.416 --> 01:00:51.566
that's most comfortable for

01:00:51.566 --> 01:00:51.706
them.

01:00:53.286 --> 01:00:54.736
Dynamic type is a really

01:00:54.836 --> 01:00:56.216
commonly used user preference,

01:00:56.366 --> 01:00:57.316
so you definitely want to make

01:00:57.316 --> 01:00:58.736
sure that you test with it and

01:00:58.736 --> 01:00:59.736
respond to it well.

01:01:00.606 --> 01:01:02.216
And don't forget to design for

01:01:02.216 --> 01:01:02.656
everyone.

01:01:03.326 --> 01:01:04.296
Tests with a larger

01:01:04.296 --> 01:01:05.966
accessibility size is enabled as

01:01:05.966 --> 01:01:07.876
well because in these instances,

01:01:07.876 --> 01:01:09.106
your table view rows will get

01:01:09.106 --> 01:01:10.916
even taller, so you'll want to

01:01:10.916 --> 01:01:12.386
make sure that your content lays

01:01:12.386 --> 01:01:14.146
out well and remains legible,

01:01:14.386 --> 01:01:15.686
even at those really large

01:01:15.686 --> 01:01:16.246
sizes.

01:01:16.766 --> 01:01:19.616
Next, let's talk about files.

01:01:20.846 --> 01:01:21.906
File management has been

01:01:21.906 --> 01:01:23.816
completely revamped in iOS 11.

01:01:24.616 --> 01:01:25.776
Now, of course, you can access

01:01:25.776 --> 01:01:27.316
files from the new Files app

01:01:27.316 --> 01:01:27.976
that you heard about this

01:01:27.976 --> 01:01:30.336
morning, but, even better, a new

01:01:30.336 --> 01:01:32.136
document browser with all of the

01:01:32.186 --> 01:01:34.016
same capabilities can be brought

01:01:34.016 --> 01:01:35.566
up and displayed right within

01:01:35.726 --> 01:01:36.636
your own apps.

01:01:39.656 --> 01:01:40.946
You can filter the types of

01:01:40.986 --> 01:01:42.056
files that will be displayed

01:01:42.056 --> 01:01:44.526
within the browser.

01:01:45.106 --> 01:01:46.736
Excuse me, add custom actions

01:01:46.736 --> 01:01:48.116
right into the navigation bar,

01:01:48.216 --> 01:01:50.046
and even allow the creation of

01:01:50.046 --> 01:01:51.416
new documents right from within

01:01:51.416 --> 01:01:52.816
the same interface.

01:01:53.636 --> 01:01:54.756
And of course, you can also

01:01:54.756 --> 01:01:57.676
customize its appearance so that

01:01:57.676 --> 01:01:59.216
it best fits in with the rest of

01:01:59.216 --> 01:01:59.976
your applications.

01:02:01.456 --> 01:02:03.036
The document browser also offers

01:02:03.036 --> 01:02:04.456
really quick access to iCloud

01:02:04.546 --> 01:02:06.086
Drive's new document sharing

01:02:06.086 --> 01:02:07.836
support, enabling easy

01:02:07.836 --> 01:02:09.916
collaboration across iOS and

01:02:09.916 --> 01:02:10.656
macOS.

01:02:11.506 --> 01:02:13.206
Using NSFileCoordinator, you can

01:02:13.206 --> 01:02:14.906
easily find out about changes to

01:02:14.906 --> 01:02:16.516
these documents as they occur,

01:02:16.956 --> 01:02:18.586
even if the changes are made by

01:02:18.586 --> 01:02:19.236
another user.

01:02:19.916 --> 01:02:21.646
And on macOS, NSDocument

01:02:21.646 --> 01:02:22.896
includes built-in support for

01:02:22.896 --> 01:02:24.146
file sharing right within your

01:02:25.136 --> 01:02:25.236
apps.

01:02:25.916 --> 01:02:27.696
Finally, let's talk about iOS

01:02:27.696 --> 01:02:29.636
11's new multitasking features,

01:02:30.376 --> 01:02:31.536
enabling your apps to

01:02:31.536 --> 01:02:32.606
participate in the new

01:02:32.606 --> 01:02:34.456
multitasking work flows enabled

01:02:34.456 --> 01:02:35.696
by the new floating Dock,

01:02:36.186 --> 01:02:37.976
slide-over apps, pinned apps,

01:02:38.316 --> 01:02:39.576
and the brand-new App Switcher

01:02:39.826 --> 01:02:40.946
is really straightforward.

01:02:41.806 --> 01:02:43.416
If you've adopted size classes,

01:02:43.556 --> 01:02:44.896
flexible layouts, and default

01:02:44.896 --> 01:02:46.206
storyboards over the last few

01:02:46.206 --> 01:02:47.566
years, then you're actually

01:02:47.566 --> 01:02:48.286
already done.

01:02:49.176 --> 01:02:50.966
iOS 11 builds on top of these

01:02:50.966 --> 01:02:52.766
existing technologies to enable

01:02:52.766 --> 01:02:54.526
a whole bunch of new work flows.

01:02:55.496 --> 01:02:56.666
Now, if you haven't adopted them

01:02:56.666 --> 01:02:58.286
yet, there's never been a better

01:03:00.136 --> 01:03:00.236
time.

01:03:00.636 --> 01:03:01.646
That's all just the start.

01:03:02.196 --> 01:03:03.776
There's a ton of other new and

01:03:03.776 --> 01:03:05.626
enhanced APIs available in iOS

01:03:05.626 --> 01:03:05.986
11.

01:03:06.696 --> 01:03:08.506
For example, password autofill

01:03:08.776 --> 01:03:10.676
makes it really quick and secure

01:03:10.676 --> 01:03:12.226
to get login credentials out of

01:03:12.226 --> 01:03:14.046
iCloud Keychain and right into

01:03:14.046 --> 01:03:15.886
your apps, which can really

01:03:15.886 --> 01:03:17.196
streamline the login flow for

01:03:17.196 --> 01:03:18.056
your applications.

01:03:19.076 --> 01:03:20.676
It's really great [applause].

01:03:22.616 --> 01:03:23.966
Named color assets and vector

01:03:23.966 --> 01:03:25.226
assets can now be stored in your

01:03:25.226 --> 01:03:26.886
asset catalogs, and

01:03:26.886 --> 01:03:29.516
UIFontMetrics make it really

01:03:29.516 --> 01:03:30.866
easy even to have your own

01:03:30.866 --> 01:03:32.496
custom fonts participate in

01:03:32.496 --> 01:03:33.126
dynamic type.

01:03:34.516 --> 01:03:37.676
[ Applause ]

01:03:38.176 --> 01:03:39.336
In addition to all of this,

01:03:39.336 --> 01:03:40.736
there's also some really great

01:03:40.736 --> 01:03:42.696
enhancements to APIs for various

01:03:42.696 --> 01:03:44.516
Apple services, so let's talk

01:03:44.516 --> 01:03:46.246
about just a few, starting with

01:03:46.386 --> 01:03:46.916
iMessage.

01:03:47.426 --> 01:03:50.476
With the new app strip in iOS

01:03:50.476 --> 01:03:52.486
11, Messages apps are now more

01:03:52.486 --> 01:03:53.926
discoverable and they're a lot

01:03:53.926 --> 01:03:55.076
more powerful as well.

01:03:55.666 --> 01:03:57.196
Your apps can now render live

01:03:57.296 --> 01:03:58.786
content in the message bubbles

01:03:58.876 --> 01:03:59.956
right in line in the

01:04:00.026 --> 01:04:00.656
conversation.

01:04:01.956 --> 01:04:03.146
And with the new direct send

01:04:03.146 --> 01:04:05.106
API, you can remove a common

01:04:05.146 --> 01:04:05.996
point of friction for your

01:04:05.996 --> 01:04:07.886
users, making it possible to

01:04:07.886 --> 01:04:09.506
really easily send messages with

01:04:09.506 --> 01:04:11.326
just a single tap from right

01:04:11.326 --> 01:04:12.756
within your app extensions.

01:04:14.076 --> 01:04:15.736
Next, SiriKit.

01:04:16.776 --> 01:04:17.996
The list of supported domains

01:04:17.996 --> 01:04:20.346
has expanded to include a number

01:04:20.346 --> 01:04:21.476
of new domains, including

01:04:21.516 --> 01:04:24.236
payment accounts, lists, notes,

01:04:24.866 --> 01:04:26.566
QR code display, and more.

01:04:27.096 --> 01:04:29.006
And if you missed it, earlier

01:04:29.006 --> 01:04:30.596
this year, we greatly simplified

01:04:30.596 --> 01:04:32.146
SiriKit development with the

01:04:32.146 --> 01:04:33.556
addition of simulator support

01:04:33.716 --> 01:04:35.836
for both iOS and watchOS.

01:04:37.076 --> 01:04:38.416
And finally, Apple Music.

01:04:39.196 --> 01:04:40.706
With MusicKit, adding music

01:04:40.766 --> 01:04:42.036
playback to your apps has never

01:04:42.036 --> 01:04:42.576
been easier.

01:04:43.136 --> 01:04:44.706
Your users can now play any of

01:04:44.706 --> 01:04:46.456
the 40 million songs available

01:04:46.456 --> 01:04:48.276
to Apple Music subscribers right

01:04:48.276 --> 01:04:49.216
from within your apps.

01:04:50.066 --> 01:04:51.186
This is especially great for

01:04:51.186 --> 01:04:53.336
fitness apps, now enabling full

01:04:53.336 --> 01:04:55.696
access to songs, playlists, and

01:04:55.696 --> 01:04:57.426
radio stations without ever

01:04:57.426 --> 01:04:58.396
interrupting your workout.

01:04:59.536 --> 01:05:00.806
Now, these are just some of the

01:05:00.806 --> 01:05:02.316
enhancements to the APIs for

01:05:02.316 --> 01:05:03.566
Apple's various services.

01:05:04.466 --> 01:05:05.816
Next, to tell us about some of

01:05:05.816 --> 01:05:07.366
our exciting new photo and

01:05:07.366 --> 01:05:08.716
imaging APIs, Sebastien

01:05:08.716 --> 01:05:09.816
Marineau-Mes will come up to the

01:05:09.816 --> 01:05:10.356
stage.

01:05:10.796 --> 01:05:11.056
Seb?

01:05:12.516 --> 01:05:15.006
[ Applause ]

01:05:15.506 --> 01:05:16.156
>> Thank you, Josh.

01:05:17.216 --> 01:05:17.656
Thank you.

01:05:17.786 --> 01:05:18.756
Really excited to be here.

01:05:18.756 --> 01:05:20.076
I've got a lot to cover today,

01:05:20.076 --> 01:05:21.556
so let me get started.

01:05:21.976 --> 01:05:23.286
First, let's talk about our new

01:05:23.286 --> 01:05:25.096
photos project extension on

01:05:25.096 --> 01:05:25.946
macOS.

01:05:26.236 --> 01:05:27.386
You're now able to bring

01:05:27.626 --> 01:05:29.326
creative, project-based features

01:05:29.596 --> 01:05:30.576
directly to photos.

01:05:31.236 --> 01:05:32.696
Users can easily discover your

01:05:32.696 --> 01:05:33.936
new extension through a Mac App

01:05:34.056 --> 01:05:34.396
Store.

01:05:34.396 --> 01:05:35.966
And once you've got that wired

01:05:35.966 --> 01:05:38.196
up, users can select photos,

01:05:38.196 --> 01:05:40.066
memories, or albums and then

01:05:40.066 --> 01:05:41.316
choose your extension from the

01:05:41.316 --> 01:05:42.056
Create menu.

01:05:42.596 --> 01:05:43.876
The Photos app [inaudible]

01:05:44.026 --> 01:05:45.526
extension to not only images,

01:05:45.726 --> 01:05:47.486
but also the rich context so

01:05:47.486 --> 01:05:48.996
that project creation feels

01:05:48.996 --> 01:05:49.816
completely natural.

01:05:50.386 --> 01:05:51.846
Additionally, we allow you to

01:05:51.846 --> 01:05:53.506
persist your own project data.

01:05:54.266 --> 01:05:56.356
Now, your extension runs within

01:05:56.656 --> 01:05:57.906
the Photos application, so it

01:05:57.906 --> 01:05:59.096
really feels like a seamless

01:05:59.096 --> 01:05:59.666
experience.

01:06:00.556 --> 01:06:01.696
We, of course, designed it to

01:06:01.756 --> 01:06:02.786
support print products.

01:06:02.786 --> 01:06:03.986
Here's a great example of this.

01:06:04.456 --> 01:06:06.006
But you could do a lot more with

01:06:06.006 --> 01:06:06.196
this.

01:06:07.256 --> 01:06:08.676
Here's an example of someone

01:06:08.676 --> 01:06:09.966
that's built a web publishing

01:06:09.966 --> 01:06:11.956
application or even directly

01:06:11.956 --> 01:06:14.026
ordering framed prints from your

01:06:14.096 --> 01:06:14.766
favorite photo.

01:06:15.506 --> 01:06:16.746
So we think our users are really

01:06:16.746 --> 01:06:18.056
going to love the new extensions

01:06:18.056 --> 01:06:19.126
that you're going to create with

01:06:19.126 --> 01:06:20.356
this extending photos.

01:06:21.336 --> 01:06:23.256
Next, let's talk about Camera.

01:06:24.196 --> 01:06:26.556
In iOS 11, the camera has a

01:06:26.556 --> 01:06:28.986
lightweight QR detector, and all

01:06:28.986 --> 01:06:29.926
you need to do is point your

01:06:29.926 --> 01:06:30.636
camera at one.

01:06:31.036 --> 01:06:32.576
The QR code is automatically

01:06:32.576 --> 01:06:34.446
decoded and will offer to open a

01:06:34.446 --> 01:06:35.996
deep link into the appropriate

01:06:35.996 --> 01:06:36.576
app.

01:06:36.686 --> 01:06:37.186
There you go.

01:06:38.516 --> 01:06:42.356
[ Applause ]

01:06:42.856 --> 01:06:43.966
Now, it's really simple to use

01:06:43.966 --> 01:06:44.656
as a developer.

01:06:44.656 --> 01:06:45.676
You simply need to adopt

01:06:45.676 --> 01:06:47.136
Universal Links, and we even

01:06:47.136 --> 01:06:49.246
support common QR formats, such

01:06:49.246 --> 01:06:51.666
as location, contacts, and Wi-Fi

01:06:51.666 --> 01:06:52.076
networks.

01:06:52.936 --> 01:06:54.596
Next, let's talk about

01:06:54.596 --> 01:06:55.596
compression and formats.

01:06:56.246 --> 01:06:57.306
We've, we're making really big

01:06:57.306 --> 01:06:59.006
advances here this year.

01:07:00.196 --> 01:07:01.356
Now, of course, JPEG is

01:07:01.356 --> 01:07:02.706
ubiquitous and has served us

01:07:02.706 --> 01:07:04.466
really well over the last 25

01:07:04.466 --> 01:07:05.956
years, but today we know that a

01:07:05.956 --> 01:07:07.966
number of technologies offer

01:07:07.966 --> 01:07:09.066
better compression and

01:07:09.066 --> 01:07:09.786
flexibility.

01:07:10.516 --> 01:07:12.786
And similarly for H.264, which

01:07:12.786 --> 01:07:13.816
is over a decade old.

01:07:14.486 --> 01:07:15.786
Now, compression's important,

01:07:15.846 --> 01:07:17.456
but we must consider other

01:07:17.456 --> 01:07:18.896
requirements, so let's look at

01:07:18.896 --> 01:07:19.396
some of these.

01:07:20.106 --> 01:07:21.806
So for example, today the line

01:07:21.806 --> 01:07:23.706
between photos and videos is

01:07:23.766 --> 01:07:24.696
blurred, and a lot of what we

01:07:24.696 --> 01:07:26.186
capture is actually a

01:07:26.186 --> 01:07:27.266
combination of both of these

01:07:27.316 --> 01:07:28.086
types of assets.

01:07:29.016 --> 01:07:30.846
We also have new sensors that

01:07:30.846 --> 01:07:32.936
capture much richer images and

01:07:32.936 --> 01:07:34.306
display them, displays that

01:07:34.306 --> 01:07:35.016
bring them to life.

01:07:35.566 --> 01:07:37.176
And finally, whatever we choose

01:07:37.206 --> 01:07:38.226
has to keep pace with

01:07:38.226 --> 01:07:40.106
ever-increasing resolutions.

01:07:40.846 --> 01:07:41.916
And so for the codec, we've

01:07:41.916 --> 01:07:44.216
selected HEVC because it meets

01:07:44.456 --> 01:07:45.506
all of these requirements.

01:07:45.926 --> 01:07:47.736
It offers up the 2x compression

01:07:47.806 --> 01:07:49.396
at equivalent image quality, and

01:07:49.396 --> 01:07:50.646
when you add up the billions of

01:07:50.716 --> 01:07:52.096
photos and videos, or trillions

01:07:52.096 --> 01:07:54.086
I should say, that adds up to a

01:07:54.086 --> 01:07:56.046
lot of saved space.

01:07:56.046 --> 01:07:57.396
HEVC is also hardware

01:07:57.396 --> 01:07:59.026
accelerated across many of our

01:07:59.026 --> 01:07:59.806
devices.

01:07:59.806 --> 01:08:01.506
And finally, it supports photos,

01:08:01.786 --> 01:08:04.326
videos, 4K and beyond, and a

01:08:04.326 --> 01:08:05.846
number of new technologies for

01:08:05.936 --> 01:08:07.136
capture and display.

01:08:08.146 --> 01:08:10.576
We've also selected a new image

01:08:10.576 --> 01:08:13.206
container called HEIF, or, as I

01:08:13.206 --> 01:08:14.546
like to call it, "heef."

01:08:14.546 --> 01:08:16.845
You can repeat after me, "heef."

01:08:18.276 --> 01:08:19.845
HEIF supports the concept of

01:08:19.845 --> 01:08:21.446
compound assets, so in a single

01:08:21.526 --> 01:08:22.765
file, you can have one or more

01:08:22.765 --> 01:08:24.055
photos or one or more images.

01:08:24.055 --> 01:08:25.076
You can have videos.

01:08:25.076 --> 01:08:27.586
You can have auxiliary data such

01:08:27.586 --> 01:08:28.765
as alpha and Depth.

01:08:28.765 --> 01:08:30.446
It's also highly extensible.

01:08:30.666 --> 01:08:32.366
It supports rich metadata,

01:08:32.366 --> 01:08:34.486
animations and sequences, and

01:08:34.486 --> 01:08:35.906
other media types, such as

01:08:35.906 --> 01:08:36.366
audio.

01:08:36.366 --> 01:08:38.486
And finally, HEIF is an ISO

01:08:38.586 --> 01:08:40.305
standard, which is critical for

01:08:40.305 --> 01:08:41.326
ecosystem adoption.

01:08:42.416 --> 01:08:44.506
Now, our standard APIs provide

01:08:44.506 --> 01:08:46.916
direct support for HEVC and

01:08:46.986 --> 01:08:47.446
HEIF.

01:08:47.836 --> 01:08:49.446
And generally, it's transparent.

01:08:49.526 --> 01:08:50.716
No opt in is required.

01:08:51.236 --> 01:08:52.586
But there may be cases where you

01:08:52.586 --> 01:08:54.316
want to explicitly control the

01:08:54.316 --> 01:08:54.866
format.

01:08:55.026 --> 01:08:56.706
So for example, if you're trying

01:08:56.706 --> 01:08:58.426
to play a high-resolution movie

01:08:58.685 --> 01:09:00.046
on an older device that doesn't

01:09:00.046 --> 01:09:02.296
have hardware acceleration, in

01:09:02.296 --> 01:09:03.886
this case, we'd provide you an

01:09:03.886 --> 01:09:05.106
API that you can use to

01:09:05.106 --> 01:09:06.866
determine whether a given file

01:09:06.866 --> 01:09:08.426
-- in this case, an HEVC movie

01:09:08.606 --> 01:09:09.386
-- would play well on this

01:09:09.386 --> 01:09:09.845
device.

01:09:09.845 --> 01:09:11.725
And if it doesn't, we can

01:09:11.725 --> 01:09:13.316
automatically fall back to one

01:09:13.316 --> 01:09:15.086
of the older formats to maintain

01:09:15.086 --> 01:09:16.305
a great user experience.

01:09:17.666 --> 01:09:19.546
So now, within our ecosystem, we

01:09:19.546 --> 01:09:21.506
automatically use HEVC and HEIF

01:09:21.756 --> 01:09:22.826
as we share between all

01:09:22.826 --> 01:09:23.886
compatible devices.

01:09:24.496 --> 01:09:26.265
But where, when we're unsure

01:09:26.265 --> 01:09:28.185
that the recipient can decode

01:09:28.185 --> 01:09:30.326
these new formats, we'll err on

01:09:30.326 --> 01:09:31.935
the side of compatibility and

01:09:31.935 --> 01:09:33.526
automatically transcode the JPEG

01:09:33.555 --> 01:09:35.206
and H.264.

01:09:35.206 --> 01:09:36.386
An example of this would be

01:09:36.736 --> 01:09:38.496
putting photos in an email

01:09:38.496 --> 01:09:39.055
attachment.

01:09:39.616 --> 01:09:40.685
I'd really encourage you as you

01:09:40.685 --> 01:09:41.946
adopt these new formats to be

01:09:42.015 --> 01:09:43.895
thoughtful about compatibility

01:09:43.895 --> 01:09:44.736
as you build this into your

01:09:44.736 --> 01:09:44.956
apps.

01:09:45.935 --> 01:09:47.276
So that concludes compression,

01:09:47.276 --> 01:09:49.026
and let me now talk about

01:09:49.026 --> 01:09:51.246
another new topic, Depth.

01:09:52.196 --> 01:09:53.456
Now, we've all see Portrait Mode

01:09:53.456 --> 01:09:54.956
on the iPhone 7 Plus, which

01:09:55.006 --> 01:09:56.626
generates the Depth effect using

01:09:56.936 --> 01:09:57.606
the two cameras.

01:09:58.286 --> 01:09:59.846
Here's how we do it.

01:10:00.456 --> 01:10:02.536
We capture simultaneous images

01:10:02.956 --> 01:10:04.746
from both cameras and we then

01:10:04.746 --> 01:10:06.796
use stereoscopy to compute

01:10:06.796 --> 01:10:07.096
Depth.

01:10:07.096 --> 01:10:08.226
This is the same as human

01:10:08.226 --> 01:10:08.626
vision.

01:10:09.226 --> 01:10:10.526
We store this in what we call

01:10:10.526 --> 01:10:12.876
the depth map.

01:10:13.156 --> 01:10:14.436
So in Portrait Mode, we take the

01:10:14.436 --> 01:10:15.966
photo, the depth map, and then

01:10:15.966 --> 01:10:17.806
we use this to blur the objects

01:10:17.806 --> 01:10:18.696
that are in the background.

01:10:19.526 --> 01:10:21.026
But what's really cool is that

01:10:21.026 --> 01:10:22.966
in iOS 11, we're now storing the

01:10:22.966 --> 01:10:24.526
depth map as part of what we

01:10:24.526 --> 01:10:26.656
capture, and we're giving you

01:10:26.656 --> 01:10:29.586
and your app access to the photo

01:10:29.586 --> 01:10:30.386
and the depth map.

01:10:30.386 --> 01:10:32.406
So you can load it up and then

01:10:32.406 --> 01:10:34.466
you can use this to do your own

01:10:34.726 --> 01:10:35.486
creative effects.

01:10:35.486 --> 01:10:36.826
And let me show you a couple of

01:10:36.826 --> 01:10:37.666
examples of this.

01:10:37.976 --> 01:10:40.696
So I might take this photo and I

01:10:40.696 --> 01:10:42.286
might decide to turn the

01:10:42.286 --> 01:10:44.356
background into monochrome,

01:10:44.896 --> 01:10:46.306
really highlighting the subject.

01:10:46.306 --> 01:10:47.466
I might apply a more artistic

01:10:47.466 --> 01:10:48.196
effect.

01:10:48.456 --> 01:10:49.696
Maybe I'll replace this with

01:10:49.696 --> 01:10:51.096
this pumpkin patch with blur

01:10:51.096 --> 01:10:51.436
effect.

01:10:53.376 --> 01:10:54.846
And you can imagine even more

01:10:54.846 --> 01:10:55.486
creative effects.

01:10:55.486 --> 01:10:56.246
In fact, these are just

01:10:56.246 --> 01:10:56.876
examples.

01:10:57.226 --> 01:10:58.796
The possibilities here are

01:10:58.796 --> 01:10:59.206
endless.

01:11:00.196 --> 01:11:02.506
Now, this is Depth for still

01:11:02.506 --> 01:11:02.896
images.

01:11:03.296 --> 01:11:05.246
We're also giving you access to

01:11:05.246 --> 01:11:06.986
a lower-fidelity, real-time

01:11:06.986 --> 01:11:08.756
Depth stream using the Camera

01:11:08.756 --> 01:11:08.946
APIs.

01:11:08.946 --> 01:11:10.926
And this lets you build

01:11:10.926 --> 01:11:12.376
Camera-based applications that

01:11:12.376 --> 01:11:14.206
will use Depth in a novel way.

01:11:15.546 --> 01:11:17.016
So Depth is really a simple

01:11:17.016 --> 01:11:18.346
extension to both our still

01:11:18.346 --> 01:11:20.496
image and Camera capture APIs,

01:11:20.496 --> 01:11:21.916
and we look forward to

01:11:21.916 --> 01:11:23.236
everything that you're going to

01:11:23.236 --> 01:11:24.316
be building on top of these new

01:11:24.316 --> 01:11:24.516
APIs.

01:11:24.516 --> 01:11:25.526
Really, really exciting.

01:11:26.256 --> 01:11:27.126
Next -- yeah.

01:11:27.586 --> 01:11:29.836
There you go.

01:11:30.516 --> 01:11:34.236
[ Applause ]

01:11:34.736 --> 01:11:36.006
Next, let's talk about our new

01:11:36.006 --> 01:11:36.896
Vision APIs.

01:11:36.896 --> 01:11:38.546
Now, of course, computer vision

01:11:38.546 --> 01:11:39.716
and machine learning already

01:11:39.716 --> 01:11:41.716
underpin many of the features in

01:11:41.716 --> 01:11:42.476
Apple's products.

01:11:42.476 --> 01:11:43.356
You saw that this morning.

01:11:43.866 --> 01:11:45.226
You've also seen apps in the

01:11:45.336 --> 01:11:47.176
Store that use computer vision.

01:11:47.696 --> 01:11:48.896
One of them is the hot dog

01:11:48.896 --> 01:11:50.316
detection app that was featured

01:11:50.316 --> 01:11:51.876
in HBO's Silicon Valley.

01:11:51.876 --> 01:11:54.416
But of course, these apps have

01:11:54.416 --> 01:11:56.336
all had to roll computer vision,

01:11:56.336 --> 01:11:57.396
the computer vision technology

01:11:57.396 --> 01:11:57.876
on their own.

01:11:58.306 --> 01:11:59.626
And what we're doing this year

01:11:59.626 --> 01:12:00.856
is bring all of our great

01:12:00.856 --> 01:12:02.756
built-in capabilities and making

01:12:02.756 --> 01:12:04.376
them available to all of you.

01:12:05.166 --> 01:12:06.836
So things you can do -- face and

01:12:06.836 --> 01:12:07.886
landmark detection.

01:12:08.816 --> 01:12:09.746
We've seen the rectangle

01:12:09.746 --> 01:12:10.466
detection.

01:12:11.096 --> 01:12:15.206
Text. Here's another one with

01:12:15.206 --> 01:12:16.346
barcode detection.

01:12:16.926 --> 01:12:18.206
And object tracking.

01:12:18.206 --> 01:12:19.636
And many, many more things.

01:12:20.446 --> 01:12:22.306
And one of those is actually the

01:12:22.306 --> 01:12:24.256
integration between Vision and

01:12:24.256 --> 01:12:24.856
Core ML.

01:12:24.976 --> 01:12:26.036
And that allows you to bring

01:12:26.036 --> 01:12:27.386
your own machine learning and

01:12:27.386 --> 01:12:29.326
computer vision models and run

01:12:29.326 --> 01:12:30.426
them as part of Vision's

01:12:30.426 --> 01:12:31.856
imaging, image processing

01:12:31.856 --> 01:12:33.736
pipeline so that we can extend

01:12:33.736 --> 01:12:35.286
our vision framework in very

01:12:35.286 --> 01:12:35.936
novel ways.

01:12:36.576 --> 01:12:37.756
And to show you an example of

01:12:37.756 --> 01:12:38.996
this, I'm going to invite Emily

01:12:38.996 --> 01:12:41.166
Kim up on stage that will show

01:12:41.166 --> 01:12:43.636
you, show us a great demo app.

01:12:43.786 --> 01:12:44.136
Emily?

01:12:45.516 --> 01:12:50.646
[ Applause ]

01:12:51.146 --> 01:12:52.846
>> Hi. I'd like to show all of

01:12:52.846 --> 01:12:53.966
you a demo app that we've

01:12:53.966 --> 01:12:55.296
written to showcase three of the

01:12:55.296 --> 01:12:57.166
new technologies in iOS 11 --

01:12:57.646 --> 01:13:00.196
Core ML, Vision, and Depth.

01:13:00.406 --> 01:13:01.526
Now, I've asked Seb to help me

01:13:01.526 --> 01:13:02.726
out a little bit in this demo,

01:13:02.966 --> 01:13:04.306
so it looks like he's just about

01:13:04.306 --> 01:13:04.616
ready.

01:13:07.286 --> 01:13:07.746
All right.

01:13:08.066 --> 01:13:09.326
So first, we're going to launch

01:13:09.356 --> 01:13:10.066
the application.

01:13:10.636 --> 01:13:13.886
You can see here that the app

01:13:13.886 --> 01:13:15.316
has recognized that Seb is

01:13:15.316 --> 01:13:17.716
holding a piano keyboard, and

01:13:17.716 --> 01:13:18.786
we've placed a speech bubble

01:13:18.786 --> 01:13:20.436
next to his mouth with a little

01:13:20.436 --> 01:13:22.766
piano emoji inside.

01:13:22.766 --> 01:13:25.456
Now, let's take a quick photo.

01:13:25.456 --> 01:13:26.806
And, well, I guess that's a

01:13:26.806 --> 01:13:28.026
picture of Seb holding a

01:13:28.026 --> 01:13:28.586
keyboard.

01:13:29.166 --> 01:13:31.086
I hate to break it to you, Seb,

01:13:31.186 --> 01:13:32.816
but you look a little boring.

01:13:33.116 --> 01:13:35.006
Can we maybe try something else?

01:13:35.146 --> 01:13:35.966
>> All right.

01:13:37.076 --> 01:13:38.556
>> I mean that in the kindest

01:13:38.556 --> 01:13:39.336
way possible.

01:13:41.826 --> 01:13:42.736
All right.

01:13:42.736 --> 01:13:44.276
Let's see if our app can

01:13:44.276 --> 01:13:46.376
recognize something that's not

01:13:47.106 --> 01:13:47.476
piano.

01:13:47.476 --> 01:13:49.396
So we'll go back.

01:13:50.316 --> 01:13:50.736
All right.

01:13:50.736 --> 01:13:51.746
We can see now that Seb's

01:13:51.746 --> 01:13:52.556
holding a guitar.

01:13:52.656 --> 01:13:54.376
The app knows this and has

01:13:54.376 --> 01:13:55.816
placed a little guitar emoji in

01:13:55.816 --> 01:13:56.766
the speech bubble next to his

01:13:56.766 --> 01:13:57.006
mouth.

01:13:57.006 --> 01:13:58.426
So we'll take another photo.

01:14:00.396 --> 01:14:01.916
Whoa, Seb, you look way cooler

01:14:01.916 --> 01:14:02.696
than you did before.

01:14:03.416 --> 01:14:03.866
You've got some--

01:14:04.016 --> 01:14:05.016
[ Laughter ]

01:14:05.516 --> 01:14:11.006
[ Applause ]

01:14:11.506 --> 01:14:12.596
Yeah, if you'll notice, he's got

01:14:12.636 --> 01:14:14.486
some cool rock star sunglasses

01:14:14.546 --> 01:14:16.296
and some cheering fans behind

01:14:16.296 --> 01:14:19.366
him, so before we jump over to

01:14:19.366 --> 01:14:20.676
Xcode to take a look at just how

01:14:20.676 --> 01:14:21.716
easy it was to write an

01:14:21.716 --> 01:14:23.026
application that can make even

01:14:23.076 --> 01:14:24.646
Seb look cool, let's please give

01:14:24.646 --> 01:14:25.706
a round of applause for Seb for

01:14:25.706 --> 01:14:26.336
being a good sport.

01:14:27.516 --> 01:14:32.806
[ Applause ]

01:14:33.306 --> 01:14:34.096
All right.

01:14:34.356 --> 01:14:35.436
So this was a pretty standard

01:14:35.436 --> 01:14:36.746
UIKit and AVFoundation

01:14:36.746 --> 01:14:37.906
application, so I'm not going to

01:14:37.906 --> 01:14:39.016
go over the details of that.

01:14:39.596 --> 01:14:41.136
Instead, I'd like to focus on

01:14:41.136 --> 01:14:42.306
the three new areas that you

01:14:42.306 --> 01:14:44.966
saw: object classification, face

01:14:44.966 --> 01:14:46.946
landmark detection, and Depth.

01:14:47.076 --> 01:14:48.166
So first, let's take a look at

01:14:48.166 --> 01:14:49.276
object classification.

01:14:50.086 --> 01:14:51.536
Using the power of Core ML, you

01:14:51.536 --> 01:14:52.856
can now integrate trained

01:14:52.856 --> 01:14:54.026
machine learning models into

01:14:54.026 --> 01:14:54.796
your app.

01:14:54.796 --> 01:14:55.866
Now, many of you will probably

01:14:55.866 --> 01:14:56.846
be rolling your own.

01:14:57.096 --> 01:14:58.216
However, we wanted to show you

01:14:58.216 --> 01:14:59.966
just how easy this was, so we

01:14:59.966 --> 01:15:01.066
simply took an off-the-shelf

01:15:01.066 --> 01:15:02.206
model and dropped it into our

01:15:02.256 --> 01:15:02.626
project.

01:15:02.876 --> 01:15:03.626
Super easy.

01:15:04.836 --> 01:15:06.106
You can see here that all we had

01:15:06.106 --> 01:15:07.386
to do was load this model file

01:15:07.386 --> 01:15:09.756
in Core ML and then pass that

01:15:09.756 --> 01:15:11.076
along to Vision so that we could

01:15:11.076 --> 01:15:12.226
run this against images.

01:15:13.506 --> 01:15:14.996
Now, as the frames come in from

01:15:14.996 --> 01:15:16.606
the Camera preview, we simply

01:15:16.606 --> 01:15:18.496
create a Core ML request to run

01:15:18.496 --> 01:15:19.466
on each of these frames.

01:15:19.946 --> 01:15:21.536
Once we recognize an object --

01:15:21.606 --> 01:15:23.336
for example, the guitar -- the

01:15:23.336 --> 01:15:24.426
results come back from this

01:15:24.426 --> 01:15:25.666
request indicating that it's

01:15:25.666 --> 01:15:27.246
found a guitar in the scene, and

01:15:27.246 --> 01:15:28.236
then we can place that little

01:15:28.236 --> 01:15:29.656
guitar emoji inside the speech

01:15:29.656 --> 01:15:29.966
bubble.

01:15:30.706 --> 01:15:32.006
Now, if you also recall from the

01:15:32.006 --> 01:15:33.466
demo, the speech bubble was

01:15:33.466 --> 01:15:34.756
placed right next to Seb's

01:15:34.796 --> 01:15:35.086
mouth.

01:15:35.426 --> 01:15:36.676
So how did, how exactly did we

01:15:36.676 --> 01:15:37.966
know where to put that?

01:15:38.256 --> 01:15:39.236
Let's take a look at the face

01:15:39.266 --> 01:15:40.136
landmark detector.

01:15:41.246 --> 01:15:42.876
Using Vision, you can now find

01:15:42.876 --> 01:15:44.066
the face landmarks, which

01:15:44.066 --> 01:15:45.566
include for each of your eyes,

01:15:46.016 --> 01:15:47.316
your nose, and what we're

01:15:47.316 --> 01:15:48.506
interested in, which was the

01:15:48.506 --> 01:15:48.836
mouth.

01:15:49.246 --> 01:15:52.486
So again, we simply create a

01:15:52.556 --> 01:15:54.466
face landmarks request and run

01:15:54.466 --> 01:15:55.426
that on the frames that are

01:15:55.426 --> 01:15:56.546
coming in from the camera.

01:15:57.306 --> 01:15:58.646
When the request comes back and

01:15:58.646 --> 01:15:59.716
says that it's found landmarks

01:15:59.716 --> 01:16:02.156
on a face, we simply ask for

01:16:02.156 --> 01:16:03.896
where the mouth was and then we

01:16:03.896 --> 01:16:04.976
can anchor the speech bubble

01:16:04.976 --> 01:16:06.056
appropriately so that it looks

01:16:06.056 --> 01:16:06.966
like it's coming out of Seb's

01:16:07.006 --> 01:16:07.276
mouth.

01:16:08.086 --> 01:16:09.426
We also used face landmarks to

01:16:09.426 --> 01:16:10.916
find each of Seb's eyeballs to

01:16:10.956 --> 01:16:11.676
figure out where to put the

01:16:11.676 --> 01:16:13.166
sunglasses on his face in that

01:16:13.166 --> 01:16:14.126
cool guitar photo.

01:16:15.066 --> 01:16:16.896
Now, also in that photo, if you

01:16:16.896 --> 01:16:17.906
remember, we replaced the

01:16:17.906 --> 01:16:18.916
background and put it in front

01:16:18.916 --> 01:16:20.176
of his adoring fans.

01:16:20.426 --> 01:16:21.806
So we used Depth to do that, and

01:16:21.806 --> 01:16:22.776
let's take a closer look.

01:16:26.156 --> 01:16:28.186
So it's really easy to get Depth

01:16:28.266 --> 01:16:29.666
data now when you capture images

01:16:29.666 --> 01:16:31.316
on the camera, so all you have

01:16:31.316 --> 01:16:32.366
to do once you've captured the

01:16:32.366 --> 01:16:34.786
image is extract that Depth

01:16:34.786 --> 01:16:36.366
information, and then we wrote a

01:16:36.366 --> 01:16:37.736
custom kernel to simply apply

01:16:37.736 --> 01:16:39.116
that Depth information to the

01:16:39.116 --> 01:16:41.486
captured image in order to

01:16:41.486 --> 01:16:43.276
teleport Seb into his rock star

01:16:43.276 --> 01:16:43.946
universe.

01:16:44.486 --> 01:16:46.026
So I hope you've seen just how

01:16:46.026 --> 01:16:47.716
easy it is to incorporate Core

01:16:47.716 --> 01:16:49.926
ML, Vision, and Depth into your

01:16:49.926 --> 01:16:50.606
applications.

01:16:50.896 --> 01:16:52.936
Back to you, Seb.

01:16:53.516 --> 01:16:57.756
[ Applause ]

01:16:58.256 --> 01:16:59.986
>> I have to say that rock star

01:16:59.986 --> 01:17:01.596
universe was pretty exciting for

01:17:02.186 --> 01:17:03.396
the couple minutes I got to live

01:17:03.396 --> 01:17:04.276
in it.

01:17:04.956 --> 01:17:07.056
So thank you, Emily.

01:17:07.056 --> 01:17:07.726
That was really great.

01:17:07.726 --> 01:17:09.306
Now, let's look at Core ML more

01:17:09.306 --> 01:17:09.846
closely.

01:17:10.336 --> 01:17:11.636
Core ML is really about helping

01:17:11.636 --> 01:17:12.946
you create new experiences in

01:17:12.946 --> 01:17:14.416
your app by making it easy for

01:17:14.416 --> 01:17:15.786
you to incorporate machine

01:17:15.786 --> 01:17:16.406
learning models.

01:17:17.296 --> 01:17:19.206
And so your application can make

01:17:19.206 --> 01:17:20.306
use of domain specific

01:17:20.306 --> 01:17:20.896
frameworks.

01:17:21.036 --> 01:17:21.836
We've seen Vision.

01:17:21.836 --> 01:17:22.866
We also have natural language

01:17:22.866 --> 01:17:23.586
processing.

01:17:23.876 --> 01:17:25.506
Or directly use the machine

01:17:25.506 --> 01:17:26.476
learning framework.

01:17:26.966 --> 01:17:28.256
Now, all of this is powered by

01:17:28.256 --> 01:17:29.936
Accelerate and Metal Shaders to

01:17:30.156 --> 01:17:31.366
really give you the best

01:17:31.366 --> 01:17:32.336
possible performance.

01:17:33.406 --> 01:17:34.946
Core ML itself provides a rich

01:17:34.946 --> 01:17:36.496
set of primitives to integrate

01:17:36.566 --> 01:17:37.576
state-of-the-art machine

01:17:37.576 --> 01:17:39.266
learning models into your apps.

01:17:40.166 --> 01:17:40.986
We've seen some of those this

01:17:41.026 --> 01:17:41.536
morning.

01:17:41.806 --> 01:17:42.926
So in addition to supporting

01:17:42.926 --> 01:17:44.546
extensive deep learning models

01:17:44.546 --> 01:17:46.666
with over 30 layers, it supports

01:17:46.716 --> 01:17:47.586
standard machine learning

01:17:47.586 --> 01:17:48.946
models, like tree ensembles,

01:17:48.946 --> 01:17:51.416
SVMs, generalized linear models.

01:17:51.526 --> 01:17:52.676
Really, the point of this is to

01:17:52.676 --> 01:17:54.626
allow you to target a broad

01:17:54.626 --> 01:17:55.956
variety of applications, from

01:17:55.956 --> 01:17:57.276
handwriting recognition.

01:17:57.646 --> 01:17:58.966
We talk about image

01:17:58.966 --> 01:18:00.956
classification, music tagging,

01:18:00.956 --> 01:18:02.416
handwriting recognition, and

01:18:02.416 --> 01:18:03.106
much, much more.

01:18:03.106 --> 01:18:04.186
Many, many other domains are

01:18:04.186 --> 01:18:05.236
available to you.

01:18:05.406 --> 01:18:06.436
Now, how do you get the models?

01:18:06.946 --> 01:18:08.576
Well, we give you access to this

01:18:08.576 --> 01:18:10.376
great machine learning community

01:18:10.466 --> 01:18:12.426
with tools such as Turi, Caffe,

01:18:12.426 --> 01:18:13.926
or Keras, which is a popular

01:18:13.926 --> 01:18:15.466
library for TensorFlow.

01:18:16.086 --> 01:18:17.076
Now, what does your work flow

01:18:17.076 --> 01:18:18.156
look like as a developer?

01:18:18.756 --> 01:18:20.326
Well, let's say that you train

01:18:20.326 --> 01:18:22.216
your own models using Caffe, or

01:18:22.216 --> 01:18:24.326
perhaps, as Emily did, you pick

01:18:24.326 --> 01:18:25.346
a pre-trained model that's

01:18:25.346 --> 01:18:26.336
available on the Internet.

01:18:26.676 --> 01:18:28.326
You then take that model and run

01:18:28.326 --> 01:18:29.586
it through the Converter tool,

01:18:29.586 --> 01:18:31.076
and that Converter tool will

01:18:31.076 --> 01:18:33.586
produce a Core ML compatible

01:18:33.586 --> 01:18:34.096
format.

01:18:34.416 --> 01:18:36.106
You take that, you drag it into

01:18:36.106 --> 01:18:37.886
Xcode, and then you simply start

01:18:37.886 --> 01:18:39.556
using it in your application.

01:18:40.156 --> 01:18:41.526
Now, we're also open sourcing

01:18:41.526 --> 01:18:43.236
the Core ML Converter tool so

01:18:43.236 --> 01:18:45.006
that we can get even broader

01:18:45.006 --> 01:18:46.666
community adoption over time.

01:18:47.616 --> 01:18:48.616
We're also focused on

01:18:48.616 --> 01:18:50.126
performance so that it runs

01:18:50.126 --> 01:18:50.816
great on device.

01:18:51.786 --> 01:18:53.326
Examples of what we do: graph

01:18:53.326 --> 01:18:54.746
optimizations and fusing

01:18:54.746 --> 01:18:56.046
multiple operations together

01:18:56.046 --> 01:18:56.716
automatically.

01:18:57.136 --> 01:18:58.286
And we also automatically

01:18:58.286 --> 01:18:59.916
analyze your neural network to

01:18:59.916 --> 01:19:01.566
make best use of hardware

01:19:01.566 --> 01:19:02.196
acceleration.

01:19:03.106 --> 01:19:04.336
So when you bring all of this

01:19:04.406 --> 01:19:06.246
together, Core ML really allows

01:19:06.246 --> 01:19:07.556
you to easily leverage the power

01:19:07.556 --> 01:19:09.096
of machine learning to create

01:19:09.096 --> 01:19:10.596
truly intelligent applications.

01:19:11.356 --> 01:19:13.186
It's simple to use, it delivers

01:19:13.186 --> 01:19:14.686
great performance and efficiency

01:19:14.686 --> 01:19:16.446
across all of our platforms, and

01:19:16.446 --> 01:19:17.906
it really lets you target your

01:19:17.906 --> 01:19:19.486
next-generation intelligent app

01:19:19.486 --> 01:19:21.286
at all, at hundreds of millions

01:19:21.286 --> 01:19:22.996
of devices that are Core ML

01:19:22.996 --> 01:19:23.416
enabled.

01:19:23.416 --> 01:19:24.766
So we really can't wait to see

01:19:24.766 --> 01:19:25.986
what you're going to create with

01:19:25.986 --> 01:19:28.376
this along many of the other

01:19:28.376 --> 01:19:30.046
APIs that we've talked about

01:19:30.046 --> 01:19:30.346
today.

01:19:30.936 --> 01:19:32.636
So with that, I'd like to call

01:19:32.636 --> 01:19:34.706
up Jeremy Sandmel up on stage to

01:19:34.706 --> 01:19:36.216
talk about Metal and graphics.

01:19:36.646 --> 01:19:37.006
Jeremy?

01:19:37.006 --> 01:19:37.426
>> Thanks, Seb.

01:19:41.146 --> 01:19:43.146
[ Applause ]

01:19:43.276 --> 01:19:43.646
Thanks, Seb.

01:19:45.216 --> 01:19:46.646
So we developed Metal to be the

01:19:46.646 --> 01:19:48.706
fastest and most efficient way

01:19:48.706 --> 01:19:50.286
to drive the incredibly powerful

01:19:50.286 --> 01:19:53.386
GPUs in our iOS, macOS, and tvOS

01:19:53.386 --> 01:19:53.946
products.

01:19:55.456 --> 01:19:56.656
And since its introduction,

01:19:56.896 --> 01:19:58.226
we've dramatically expanded

01:19:58.226 --> 01:19:59.646
Metal to support the advanced

01:19:59.646 --> 01:20:01.446
rendering, graphics, and compute

01:20:01.506 --> 01:20:03.386
features most requested by our

01:20:03.386 --> 01:20:04.016
developers.

01:20:04.016 --> 01:20:06.026
And the results have been

01:20:06.026 --> 01:20:06.556
amazing.

01:20:07.366 --> 01:20:09.356
There are more than 143,000

01:20:09.456 --> 01:20:11.076
Metal apps in the iOS App Store

01:20:11.076 --> 01:20:12.356
created by our developers who

01:20:12.706 --> 01:20:13.926
are directly calling the Metal

01:20:13.926 --> 01:20:14.086
API.

01:20:14.086 --> 01:20:16.876
But we're also building our own

01:20:16.876 --> 01:20:18.096
system frameworks on top of

01:20:18.096 --> 01:20:18.346
Metal.

01:20:18.896 --> 01:20:19.666
You've heard about a number of

01:20:19.666 --> 01:20:20.176
them today.

01:20:20.646 --> 01:20:21.596
For instance, if you're drawing

01:20:21.596 --> 01:20:23.226
your user interface with UIKit

01:20:23.536 --> 01:20:25.456
or your maps with MapKit, you're

01:20:25.456 --> 01:20:26.226
also using Metal.

01:20:26.826 --> 01:20:29.466
In fact, over 1.7 million apps

01:20:29.596 --> 01:20:31.546
are in the App Store using Metal

01:20:31.666 --> 01:20:33.186
through Apple system frameworks

01:20:33.386 --> 01:20:34.506
and benefitting from Metal's

01:20:34.506 --> 01:20:35.826
performance and power

01:20:35.826 --> 01:20:37.416
efficiencies automatically.

01:20:38.646 --> 01:20:40.216
Developers are using Metal in

01:20:40.216 --> 01:20:42.276
truly awe-inspiring ways, such

01:20:42.276 --> 01:20:43.756
as the professional image and

01:20:43.756 --> 01:20:45.296
photo editing in the new

01:20:45.296 --> 01:20:47.206
Affinity Photo for iPad from

01:20:47.206 --> 01:20:47.806
Serif Labs.

01:20:49.166 --> 01:20:50.936
And 3D modeling and rendering in

01:20:50.936 --> 01:20:53.906
MAXON's upcoming Cinema 4D with

01:20:53.906 --> 01:20:55.446
AMD's Metal accelerated

01:20:55.486 --> 01:20:56.606
ProRender technology.

01:20:57.886 --> 01:20:59.416
The gorgeous sci-fi adventure

01:20:59.416 --> 01:21:01.666
game Obduction from Cyan, the

01:21:01.666 --> 01:21:03.356
legendary creators of the game

01:21:03.356 --> 01:21:03.656
Myst.

01:21:04.466 --> 01:21:07.216
And the truly stunning F1 2016

01:21:07.216 --> 01:21:08.436
racing game from Feral

01:21:08.436 --> 01:21:08.946
Interactive.

01:21:09.876 --> 01:21:11.956
In fact, Ian Bullock of Feral

01:21:11.956 --> 01:21:13.936
has said that, "Metal's richer

01:21:13.936 --> 01:21:15.526
feature set and lower overhead

01:21:15.526 --> 01:21:16.906
have allowed them to bring

01:21:16.906 --> 01:21:18.186
cutting edge games to the Mac

01:21:18.646 --> 01:21:19.736
with frame rates and effects

01:21:19.796 --> 01:21:21.056
that simply weren't possible

01:21:21.196 --> 01:21:21.546
before."

01:21:22.046 --> 01:21:24.886
Metal is broadly supported

01:21:24.886 --> 01:21:27.016
across i, our iOS devices since

01:21:27.126 --> 01:21:30.396
2013 and our Macs since 2012.

01:21:30.396 --> 01:21:32.526
And this means there are more

01:21:32.526 --> 01:21:35.286
than 900 million products

01:21:35.366 --> 01:21:37.566
supporting Metal across macOS,

01:21:37.896 --> 01:21:39.036
iOS, and tvOS.

01:21:39.126 --> 01:21:40.566
This is truly stunning, and

01:21:40.566 --> 01:21:42.256
that's why we're so incredibly

01:21:42.256 --> 01:21:43.536
excited today to announce the

01:21:43.536 --> 01:21:45.356
next generation of Metal, Metal

01:21:45.356 --> 01:21:45.566
2.

01:21:46.846 --> 01:21:48.506
Now, Metal 2 is made up of six

01:21:48.716 --> 01:21:50.056
key advancements that we're

01:21:50.056 --> 01:21:51.116
going to describe to you today.

01:21:51.736 --> 01:21:53.976
The first is GPU-driven

01:21:54.086 --> 01:21:54.456
rendering.

01:21:55.006 --> 01:21:57.626
This means that we're continuing

01:21:57.626 --> 01:21:59.076
to reduce the amount of work

01:21:59.076 --> 01:22:01.056
required by the CPU in order to

01:22:01.056 --> 01:22:02.516
execute your GPU commands.

01:22:02.916 --> 01:22:03.946
Now, you may recall that the

01:22:03.946 --> 01:22:06.156
overhead of OpenGL could often

01:22:06.156 --> 01:22:07.616
steal a major portion of your

01:22:07.616 --> 01:22:09.816
app's per-frame rendering time,

01:22:10.266 --> 01:22:11.786
significantly limiting your

01:22:11.786 --> 01:22:12.956
application's performance.

01:22:13.436 --> 01:22:14.836
And Metal dramatically reduced

01:22:14.896 --> 01:22:17.096
that CPU time, giving it back to

01:22:17.226 --> 01:22:18.066
your application.

01:22:18.976 --> 01:22:20.406
Well, with Metal 2, we're going

01:22:20.406 --> 01:22:20.966
even further.

01:22:21.396 --> 01:22:22.676
We've introduced a number of new

01:22:22.736 --> 01:22:24.286
features designed to off-load

01:22:24.286 --> 01:22:26.206
the CPU as much as possible and

01:22:26.206 --> 01:22:27.966
to allow the GPU to much more

01:22:27.966 --> 01:22:29.266
efficiently schedule its own

01:22:29.266 --> 01:22:29.446
work.

01:22:30.426 --> 01:22:31.656
One of these features is called

01:22:31.656 --> 01:22:32.876
Metal argument buffers.

01:22:33.146 --> 01:22:33.726
Now, as a little bit of

01:22:33.726 --> 01:22:35.796
background, Metal render passes

01:22:35.796 --> 01:22:37.876
are made of graphic state and

01:22:37.876 --> 01:22:39.386
references to resources, such as

01:22:39.386 --> 01:22:40.826
textures and buffers.

01:22:41.296 --> 01:22:42.096
And these resources

01:22:42.096 --> 01:22:43.016
traditionally needed to be

01:22:43.016 --> 01:22:45.646
specified individually with each

01:22:45.716 --> 01:22:46.256
draw call.

01:22:46.936 --> 01:22:48.766
With Metal 2, you can assign

01:22:48.766 --> 01:22:50.326
your resources to argument

01:22:50.326 --> 01:22:52.446
buffers once during your app's

01:22:52.446 --> 01:22:53.996
initialization, and then you can

01:22:53.996 --> 01:22:55.646
rapidly switch between these

01:22:55.646 --> 01:22:57.446
argument buffers that you've

01:22:57.446 --> 01:22:58.786
already set up with each draw

01:22:58.786 --> 01:23:00.566
call, which can be dramatically

01:23:00.566 --> 01:23:01.166
more efficient.

01:23:01.746 --> 01:23:03.516
In fact, the more resources you

01:23:03.516 --> 01:23:04.796
use, the more complex your

01:23:04.796 --> 01:23:05.996
rendering, the greater the

01:23:05.996 --> 01:23:06.806
savings can be.

01:23:06.806 --> 01:23:08.486
And in this example using Metal

01:23:08.486 --> 01:23:10.296
argument buffers, we reduced the

01:23:10.296 --> 01:23:11.916
CPU time required for our draw

01:23:11.916 --> 01:23:18.266
calls by more than 10x.

01:23:18.386 --> 01:23:20.386
Next, Metal 2 has taken major

01:23:20.386 --> 01:23:22.306
steps forward towards a common

01:23:22.336 --> 01:23:23.886
feature set across our product

01:23:23.916 --> 01:23:24.386
families.

01:23:24.826 --> 01:23:25.956
We've strongly emphasized

01:23:25.956 --> 01:23:27.456
compatibility across our

01:23:27.456 --> 01:23:29.386
platforms while still providing

01:23:29.386 --> 01:23:30.906
developers with access to

01:23:30.906 --> 01:23:32.236
hardware specific features

01:23:32.316 --> 01:23:33.246
required for optimal

01:23:33.246 --> 01:23:33.766
performance.

01:23:34.746 --> 01:23:36.036
We're bringing key features from

01:23:36.036 --> 01:23:38.466
macOS to iOS and vice versa.

01:23:39.396 --> 01:23:41.316
One of these examples is called

01:23:41.316 --> 01:23:42.306
Metal Resource Heaps.

01:23:42.956 --> 01:23:44.046
This can provide a much more

01:23:44.046 --> 01:23:45.226
efficient way of managing your

01:23:45.226 --> 01:23:46.566
Metal textures and buffers

01:23:46.806 --> 01:23:48.496
without requiring you to become

01:23:48.496 --> 01:23:49.996
an expert in how each individual

01:23:49.996 --> 01:23:51.866
GPU manages and allocates

01:23:51.866 --> 01:23:52.146
memory.

01:23:53.476 --> 01:23:55.116
Traditionally, each Metal

01:23:55.176 --> 01:23:56.026
texture would require a

01:23:56.126 --> 01:23:57.466
separate, individual memory

01:23:57.466 --> 01:23:58.616
allocation from the OS.

01:23:58.996 --> 01:24:00.126
Now, this was simple to use.

01:24:00.126 --> 01:24:01.396
It's simple to understand but

01:24:01.396 --> 01:24:02.416
could be quite expensive.

01:24:03.356 --> 01:24:04.326
But with Metal Heaps, you can

01:24:04.326 --> 01:24:05.836
allocate a single memory buffer

01:24:06.556 --> 01:24:08.566
and then store multiple textures

01:24:08.566 --> 01:24:08.886
within it.

01:24:09.676 --> 01:24:11.046
You can also do incredibly fast

01:24:11.136 --> 01:24:12.976
reallocations and you can

01:24:12.976 --> 01:24:15.496
reinterpret existing memory for

01:24:15.496 --> 01:24:16.046
a new texture.

01:24:17.896 --> 01:24:19.846
Interestingly, Metal Heaps also

01:24:19.846 --> 01:24:21.506
allows you to reuse previously

01:24:21.506 --> 01:24:22.756
allocated memory from textures

01:24:22.756 --> 01:24:24.326
you don't need simultaneously,

01:24:24.506 --> 01:24:25.856
which can save you significant

01:24:25.856 --> 01:24:26.996
amounts of memory per frame.

01:24:27.586 --> 01:24:29.466
This is all very simple and easy

01:24:29.666 --> 01:24:30.726
and doesn't sacrifice any

01:24:30.726 --> 01:24:31.216
performance.

01:24:32.576 --> 01:24:34.246
Now, Metal is not just for

01:24:34.246 --> 01:24:34.666
graphics.

01:24:34.776 --> 01:24:36.006
The Metal Performance Shaders

01:24:36.186 --> 01:24:37.486
Library provides an optimized

01:24:37.486 --> 01:24:39.946
set of image processing, linear

01:24:39.946 --> 01:24:41.366
algebra, and other compute

01:24:41.366 --> 01:24:42.136
operations.

01:24:43.296 --> 01:24:46.136
And Metal 2 extends this support

01:24:46.636 --> 01:24:48.366
for accelerating machine

01:24:48.456 --> 01:24:48.776
learning.

01:24:50.206 --> 01:24:51.326
We've included a number of

01:24:51.326 --> 01:24:52.726
GPU-accelerated machine learning

01:24:52.726 --> 01:24:54.666
primitives and new graph API for

01:24:54.666 --> 01:24:56.676
convolutional neural networks,

01:24:57.236 --> 01:24:58.326
and it can all be efficiently

01:24:58.326 --> 01:24:59.646
integrated into your Metal

01:24:59.776 --> 01:25:03.026
graphics and compute code.

01:25:03.236 --> 01:25:04.296
Machine learning kernels such as

01:25:04.296 --> 01:25:06.506
LSTMs, convolutions, and neuron

01:25:06.506 --> 01:25:07.806
layers are included as well as

01:25:07.806 --> 01:25:09.586
an expanded set of matrix math

01:25:09.586 --> 01:25:10.236
operations.

01:25:10.616 --> 01:25:12.586
And most importantly, MPS also

01:25:12.586 --> 01:25:14.026
enables everyone using the

01:25:14.026 --> 01:25:15.786
powerful, new Core ML framework

01:25:15.836 --> 01:25:17.266
that Seb just described to get

01:25:17.266 --> 01:25:19.126
the full performance of the GPU

01:25:19.126 --> 01:25:19.846
for machine learning

01:25:20.336 --> 01:25:20.936
automatically.

01:25:21.406 --> 01:25:24.876
Next, we're very excited to talk

01:25:24.876 --> 01:25:26.466
about VR in Metal 2.

01:25:27.576 --> 01:25:29.036
With Metal 2 and macOS High

01:25:29.136 --> 01:25:30.896
Sierra, we're enabling VR

01:25:30.896 --> 01:25:32.276
content development on the Mac

01:25:32.646 --> 01:25:34.016
for the first time with

01:25:34.046 --> 01:25:36.276
optimized support for 360-degree

01:25:36.276 --> 01:25:38.106
video editing and 3D content

01:25:38.106 --> 01:25:38.556
creation.

01:25:39.306 --> 01:25:40.246
And we've added support for

01:25:40.246 --> 01:25:42.056
low-latency stereoscopic

01:25:42.056 --> 01:25:43.316
rendering on head-mounted

01:25:43.316 --> 01:25:44.766
displays and powerful, new

01:25:44.766 --> 01:25:46.446
developer tools to optimize your

01:25:46.446 --> 01:25:47.446
VR app's performance.

01:25:48.466 --> 01:25:49.846
We're incredibly excited to say

01:25:49.846 --> 01:25:50.936
we've been working closely with

01:25:50.936 --> 01:25:52.156
Valve, and they've announced

01:25:52.156 --> 01:25:53.136
they're bringing their full

01:25:53.136 --> 01:25:56.086
SteamVR runtime and SDK to the

01:25:56.086 --> 01:25:57.966
Mac with beta versions available

01:25:58.196 --> 01:25:58.736
today.

01:25:59.496 --> 01:25:59.586
Yeah.

01:26:01.516 --> 01:26:04.696
[ Applause ]

01:26:05.196 --> 01:26:06.386
This also includes support for

01:26:06.386 --> 01:26:07.846
the HTC Vive headset and

01:26:07.846 --> 01:26:08.516
controllers.

01:26:09.026 --> 01:26:10.296
And as you saw this morning,

01:26:10.546 --> 01:26:11.906
we've also been partnering with

01:26:11.906 --> 01:26:13.536
Epic Games, who's announced

01:26:13.536 --> 01:26:15.116
macOS VR support in Unreal

01:26:15.116 --> 01:26:16.556
Engine in their upcoming release

01:26:16.556 --> 01:26:18.346
later this year with early

01:26:18.346 --> 01:26:19.806
access available from GitHub

01:26:19.926 --> 01:26:21.056
starting in September.

01:26:21.966 --> 01:26:23.316
This includes support for Epic's

01:26:23.316 --> 01:26:25.486
immersive VR Mode Editor that

01:26:25.486 --> 01:26:27.236
you saw this morning, allowing

01:26:27.236 --> 01:26:28.516
you to step inside the VR

01:26:28.686 --> 01:26:30.186
environments as you're creating

01:26:30.846 --> 01:26:30.936
them.

01:26:31.496 --> 01:26:33.266
We're also very excited to be

01:26:33.266 --> 01:26:34.346
partnering with Unity, who has

01:26:34.346 --> 01:26:35.816
announced they too are adding

01:26:35.856 --> 01:26:37.206
macOS VR support to their

01:26:37.206 --> 01:26:38.916
incredibly powerful engine and

01:26:38.916 --> 01:26:40.286
editing environment behind many

01:26:40.286 --> 01:26:41.416
of the most popular games.

01:26:42.316 --> 01:26:43.506
This has enabled the developer

01:26:43.506 --> 01:26:45.196
I-Illusions to use Unity to

01:26:45.196 --> 01:26:47.996
bring the addictive and exciting

01:26:48.056 --> 01:26:49.996
VR space game Space Pirates

01:26:49.996 --> 01:26:51.336
Trainer to the Mac in just a

01:26:51.336 --> 01:26:52.616
matter of just a few days.

01:26:54.086 --> 01:26:55.516
Now, a word about performance,

01:26:56.146 --> 01:26:57.336
which is incredibly important

01:26:57.336 --> 01:26:58.806
for building compelling VR apps.

01:26:59.246 --> 01:27:00.546
Many developers are familiar

01:27:00.546 --> 01:27:01.496
with optimizing their

01:27:01.496 --> 01:27:03.566
applications to fit within 60

01:27:03.566 --> 01:27:05.846
frames per second, and this

01:27:05.846 --> 01:27:06.736
would mean you would have a

01:27:06.736 --> 01:27:08.786
fairly generous 16.7

01:27:08.786 --> 01:27:11.116
milliseconds per frame all

01:27:11.116 --> 01:27:12.156
devoted to your application's

01:27:12.156 --> 01:27:12.486
rendering.

01:27:13.376 --> 01:27:14.786
However, to create an immersive

01:27:14.786 --> 01:27:16.796
VR experience, you need to

01:27:16.856 --> 01:27:18.906
render a full stereoscopic pair

01:27:18.906 --> 01:27:20.816
of views at 90 frames a second,

01:27:20.976 --> 01:27:22.326
which can leave you only about

01:27:22.326 --> 01:27:23.706
11 milliseconds per frame.

01:27:24.776 --> 01:27:25.776
But actually, you don't even get

01:27:25.776 --> 01:27:26.956
all of that quite all to

01:27:26.956 --> 01:27:28.186
yourself because there's a VR

01:27:28.186 --> 01:27:30.236
compositor in the mix, which

01:27:30.236 --> 01:27:32.136
uses the GPU to combine the

01:27:32.136 --> 01:27:33.846
left- and right-eye images to

01:27:33.846 --> 01:27:35.266
compensate for HMD lens

01:27:35.316 --> 01:27:36.596
distortion and for head

01:27:36.656 --> 01:27:36.996
movement.

01:27:37.276 --> 01:27:38.536
And this leaves you only about

01:27:38.536 --> 01:27:39.886
ten milliseconds per frame.

01:27:40.236 --> 01:27:41.186
In other words, you need to

01:27:41.186 --> 01:27:43.166
target your VR app to achieve

01:27:43.396 --> 01:27:44.946
100 frames per second.

01:27:46.056 --> 01:27:47.426
Now, this can be very

01:27:47.556 --> 01:27:49.786
challenging, but Metal 2

01:27:49.786 --> 01:27:51.326
provides some awesome, new tools

01:27:51.326 --> 01:27:53.386
for optimizing your VR app's

01:27:53.386 --> 01:27:53.786
performance.

01:27:54.196 --> 01:27:55.516
We've include built-in support

01:27:55.516 --> 01:27:57.006
for SteamVR's compositor

01:27:57.006 --> 01:27:58.246
tracepoints within the Metal

01:27:58.246 --> 01:27:59.046
system trace.

01:27:59.806 --> 01:28:02.046
This allows you to see exactly

01:28:02.046 --> 01:28:04.016
where the GPU time is going and

01:28:04.016 --> 01:28:05.686
precisely when your frames will

01:28:05.686 --> 01:28:06.386
hit the glass.

01:28:07.676 --> 01:28:09.486
With Metal 2 and the powerful,

01:28:09.636 --> 01:28:11.106
new GPUs in the latest iMacs

01:28:11.106 --> 01:28:11.776
that we announced that we're

01:28:11.776 --> 01:28:14.026
shipping today, we fully enabled

01:28:14.026 --> 01:28:17.006
VR content development on your

01:28:17.586 --> 01:28:18.576
Mac desktop.

01:28:18.676 --> 01:28:20.346
Now, many professional content

01:28:20.346 --> 01:28:22.416
creators love the mobility of

01:28:22.416 --> 01:28:23.706
working with our MacBook Pros,

01:28:24.306 --> 01:28:25.746
but intensive VR development can

01:28:25.746 --> 01:28:27.996
require powerful GPUs that don't

01:28:27.996 --> 01:28:29.186
always fit in the thinnest and

01:28:29.186 --> 01:28:30.126
lightest laptops.

01:28:31.036 --> 01:28:33.016
This is why Metal 2 is bringing

01:28:33.016 --> 01:28:34.496
first-class support for external

01:28:34.496 --> 01:28:36.966
GPUs to your MacBook Pro and to

01:28:36.966 --> 01:28:37.866
macOS High Sierra.

01:28:38.936 --> 01:28:39.836
Yeah, thanks [applause].

01:28:42.326 --> 01:28:44.236
So you could very easily add

01:28:44.276 --> 01:28:45.786
support to your app for external

01:28:45.786 --> 01:28:46.006
GPUs.

01:28:46.006 --> 01:28:47.826
It takes just a few lines of

01:28:47.826 --> 01:28:49.266
code, and you register for

01:28:49.266 --> 01:28:50.646
external GPU device connection

01:28:50.646 --> 01:28:52.396
callbacks and identify which

01:28:52.396 --> 01:28:54.206
GPUs in your system are

01:28:54.206 --> 01:28:54.706
removable.

01:28:56.116 --> 01:28:57.336
This enables the best of both

01:28:57.336 --> 01:28:59.316
worlds -- the GPU horsepower for

01:28:59.316 --> 01:29:00.406
building immersive VR

01:29:00.406 --> 01:29:03.186
applications on our most mobile

01:29:03.186 --> 01:29:05.246
Macs -- and we're really excited

01:29:05.246 --> 01:29:05.516
about it.

01:29:06.016 --> 01:29:07.176
So to get you started, we're

01:29:07.176 --> 01:29:08.476
offering an external GPU

01:29:08.476 --> 01:29:10.046
Developer Kit through our

01:29:10.046 --> 01:29:10.886
Developer program.

01:29:11.636 --> 01:29:13.136
It includes everything you need

01:29:13.136 --> 01:29:14.536
for VR content development on

01:29:14.536 --> 01:29:16.416
your MacBook Pro, including a

01:29:16.416 --> 01:29:18.296
discount on the HTC Vive

01:29:18.496 --> 01:29:19.796
head-mounted display, and it's

01:29:19.836 --> 01:29:21.556
all available today from

01:29:21.556 --> 01:29:24.896
developer.apple.com.

01:29:25.116 --> 01:29:27.366
And last but not least, Metal 2

01:29:27.366 --> 01:29:29.326
enables and provides our most

01:29:29.326 --> 01:29:30.806
advanced graphics developer

01:29:30.806 --> 01:29:32.536
optimization tools yet.

01:29:33.496 --> 01:29:34.796
We've added the top-requested

01:29:34.796 --> 01:29:36.656
tools and features to enable

01:29:36.656 --> 01:29:38.396
rapid debugging, analysis, and

01:29:38.396 --> 01:29:40.136
optimization of your GPU

01:29:40.136 --> 01:29:40.946
performance bottlenecks.

01:29:40.946 --> 01:29:43.066
And it's all integrated directly

01:29:43.066 --> 01:29:45.206
into Xcode and Instruments.

01:29:46.196 --> 01:29:47.886
We've included powerful, new GPU

01:29:47.966 --> 01:29:49.706
hardware performance and

01:29:49.706 --> 01:29:50.916
software performance counters,

01:29:50.916 --> 01:29:52.186
giving you deep insight into the

01:29:52.186 --> 01:29:55.016
GPU's operation and automatic

01:29:55.066 --> 01:29:56.256
bottleneck detection that can

01:29:56.256 --> 01:29:58.026
take you exactly to the source

01:29:58.026 --> 01:29:59.106
of your performance problems.

01:29:59.586 --> 01:30:01.076
It's all very powerful.

01:30:01.076 --> 01:30:03.086
And to show you a demo of Metal

01:30:03.086 --> 01:30:05.066
2 Developer tools in action, I'd

01:30:05.066 --> 01:30:06.186
like to invite Eric Sunnel

01:30:06.426 --> 01:30:06.926
[phonetic] to the stage.

01:30:07.176 --> 01:30:07.296
Eric?

01:30:07.616 --> 01:30:07.846
>> Jeremy.

01:30:10.846 --> 01:30:11.326
Thanks Jeremy.

01:30:12.096 --> 01:30:12.666
Hi, everyone.

01:30:12.826 --> 01:30:13.626
Today I'd like to show you a

01:30:13.626 --> 01:30:14.556
couple of the new features in

01:30:14.556 --> 01:30:17.456
Metal, like our GPU profile

01:30:17.456 --> 01:30:19.606
counter tool in Xcode.

01:30:20.136 --> 01:30:21.736
So what I have here is a Metal

01:30:21.736 --> 01:30:22.866
application rendering thousands

01:30:22.866 --> 01:30:24.116
of asteroids on the screen.

01:30:24.556 --> 01:30:26.456
And it's, all is individual draw

01:30:26.456 --> 01:30:27.386
calls, and it's important to

01:30:27.386 --> 01:30:28.346
note that each of these draw

01:30:28.346 --> 01:30:29.796
calls is using a number of

01:30:30.146 --> 01:30:31.386
unique Metal resources all

01:30:31.386 --> 01:30:32.176
chosen at runtime.

01:30:32.806 --> 01:30:33.626
So now what I'm going to do here

01:30:33.626 --> 01:30:34.796
is add a couple more asteroids

01:30:34.796 --> 01:30:35.316
to the scene.

01:30:35.316 --> 01:30:38.056
All right, that's not performing

01:30:38.056 --> 01:30:40.276
quite as well as I want, so

01:30:40.276 --> 01:30:41.386
let's exit out of full screen,

01:30:42.536 --> 01:30:45.386
and take a GPU capture, and see

01:30:45.636 --> 01:30:46.876
if we can get a better idea of

01:30:46.946 --> 01:30:47.916
what's going on.

01:30:48.506 --> 01:30:49.426
So not only is it taking a GPU

01:30:49.516 --> 01:30:51.106
capture and analyzing all of our

01:30:51.106 --> 01:30:52.636
shaders, but now it's also

01:30:52.636 --> 01:30:53.936
capturing all of the hardware

01:30:53.936 --> 01:30:55.826
performance counters and

01:30:56.666 --> 01:30:57.746
actually on a per draw call

01:30:57.746 --> 01:30:58.046
basis.

01:30:58.046 --> 01:30:59.866
It'll be able to visualize that

01:30:59.866 --> 01:31:00.236
in a second.

01:31:01.466 --> 01:31:02.096
All right, so now on the

01:31:02.096 --> 01:31:02.886
left-hand -- actually, let me

01:31:02.886 --> 01:31:05.246
change my system editor here.

01:31:05.246 --> 01:31:06.836
And on the left-hand side, now I

01:31:06.836 --> 01:31:08.776
have access to a GPU report that

01:31:09.166 --> 01:31:11.056
now brings up in the standard

01:31:11.056 --> 01:31:12.706
editor a summary of all the

01:31:12.706 --> 01:31:13.676
performance counters on the

01:31:13.676 --> 01:31:14.736
timeline for all of the draw

01:31:14.736 --> 01:31:15.066
calls.

01:31:15.276 --> 01:31:16.166
And on the right-hand side, I

01:31:16.166 --> 01:31:17.086
have all the detailed

01:31:17.236 --> 01:31:18.346
performance counters as well.

01:31:18.346 --> 01:31:20.276
So if I select a particular draw

01:31:20.276 --> 01:31:21.966
call -- let's say this one for

01:31:21.966 --> 01:31:22.706
instance -- all of the

01:31:22.706 --> 01:31:23.856
right-hand side updates with all

01:31:23.856 --> 01:31:24.726
the detailed performance

01:31:24.726 --> 01:31:25.606
counters that we've captured.

01:31:26.106 --> 01:31:28.526
If I hover over the vertices

01:31:28.526 --> 01:31:29.916
row, here I can get an idea of,

01:31:29.956 --> 01:31:30.946
OK, what's the summary for that

01:31:30.946 --> 01:31:32.666
draw call for the vertices

01:31:32.666 --> 01:31:33.666
submitted to the scenes?

01:31:33.786 --> 01:31:34.786
Almost 8000.

01:31:34.786 --> 01:31:35.436
Seems pretty high.

01:31:36.056 --> 01:31:37.356
If I look at the pixels stored,

01:31:37.356 --> 01:31:38.686
it looks like I'm only storing

01:31:38.686 --> 01:31:40.626
about 11 pixels for that draw

01:31:40.626 --> 01:31:42.136
call, which seems a lot lower in

01:31:42.136 --> 01:31:42.666
comparison.

01:31:43.356 --> 01:31:44.176
So now, if we look in the upper

01:31:44.176 --> 01:31:45.676
right-hand side, we can see some

01:31:45.676 --> 01:31:46.906
of the recommendations provided

01:31:46.906 --> 01:31:47.456
by Xcode.

01:31:47.896 --> 01:31:49.486
The top one here, pixels per

01:31:49.486 --> 01:31:50.786
triangle ratio, is very low.

01:31:51.436 --> 01:31:52.356
Seems about right.

01:31:52.786 --> 01:31:54.136
Now, if we disclose this, we get

01:31:54.136 --> 01:31:55.396
some of the recommendations made

01:31:55.396 --> 01:31:55.916
by Xcode.

01:31:56.406 --> 01:31:57.416
So we can see here it says,

01:31:57.416 --> 01:31:58.706
"Consider reducing the number of

01:31:58.706 --> 01:32:00.236
triangles and consider reducing

01:32:00.236 --> 01:32:01.336
the work in the vertex shader."

01:32:01.906 --> 01:32:03.046
Now, if we click on the top one

01:32:03.046 --> 01:32:04.216
and click on the link here,

01:32:04.366 --> 01:32:05.206
it'll take us right to all the

01:32:05.206 --> 01:32:06.436
bound resources for the draw

01:32:06.436 --> 01:32:06.826
call.

01:32:07.436 --> 01:32:08.496
We can see here that we're

01:32:08.496 --> 01:32:09.846
actually loading our high poly

01:32:09.846 --> 01:32:10.856
model of the asteroid, which

01:32:10.856 --> 01:32:12.246
doesn't make much sense for this

01:32:12.246 --> 01:32:12.516
scene.

01:32:13.026 --> 01:32:14.086
So we're going to go over here

01:32:14.086 --> 01:32:15.726
and make a source code change.

01:32:16.476 --> 01:32:17.476
Get rid of the editor.

01:32:18.466 --> 01:32:18.876
All right.

01:32:18.876 --> 01:32:20.606
And let's change this to the

01:32:20.606 --> 01:32:22.506
reduced model that I've prepared

01:32:22.506 --> 01:32:23.146
ahead of time.

01:32:23.956 --> 01:32:24.276
All right.

01:32:24.986 --> 01:32:25.966
Now, let's make one more change

01:32:25.966 --> 01:32:26.576
in this project.

01:32:26.576 --> 01:32:27.796
Let's see if we can make useful

01:32:27.796 --> 01:32:28.496
argument buffers.

01:32:29.076 --> 01:32:30.136
So what I have here is our for

01:32:30.136 --> 01:32:31.636
loop that's making, that's doing

01:32:31.636 --> 01:32:33.126
the per draw call for each

01:32:33.126 --> 01:32:33.586
asteroid.

01:32:34.056 --> 01:32:35.446
And above each draw call, I'm

01:32:35.446 --> 01:32:37.236
setting a number of resources.

01:32:37.706 --> 01:32:38.816
So with argument buffers, I can

01:32:38.816 --> 01:32:41.476
remove this code and, instead,

01:32:41.476 --> 01:32:42.806
insert a call to binding our

01:32:42.806 --> 01:32:44.066
argument buffer ahead of time

01:32:44.696 --> 01:32:47.526
and basically allow the GPU now

01:32:47.526 --> 01:32:49.216
to make the dynamic selection of

01:32:49.216 --> 01:32:50.346
which resources to use.

01:32:50.916 --> 01:32:52.316
So with these two simple changes

01:32:52.316 --> 01:32:53.396
in place, let's run and see

01:32:53.396 --> 01:32:54.836
where our performance is now.

01:32:59.616 --> 01:33:00.096
All right.

01:33:00.096 --> 01:33:02.696
OK, that's looking good.

01:33:02.906 --> 01:33:03.716
Let's add some more.

01:33:03.716 --> 01:33:04.896
OK, that's looking a lot better.

01:33:04.926 --> 01:33:06.026
That's exactly what I like to

01:33:06.026 --> 01:33:06.256
see.

01:33:06.256 --> 01:33:07.596
All right, so the, yeah, with

01:33:07.836 --> 01:33:09.726
the new features in Metal 2, we

01:33:09.726 --> 01:33:11.176
hope you get deeper insight into

01:33:11.176 --> 01:33:12.476
where your application is

01:33:12.476 --> 01:33:14.326
spending time, and we'll offer

01:33:14.326 --> 01:33:15.486
even more code from the critical

01:33:15.486 --> 01:33:15.756
path.

01:33:15.756 --> 01:33:16.746
Thanks very much.

01:33:17.116 --> 01:33:17.676
Back to you, Jeremy.

01:33:18.516 --> 01:33:23.586
[ Applause ]

01:33:24.086 --> 01:33:25.036
>> Well, thanks, Eric.

01:33:25.596 --> 01:33:27.856
So that's Metal 2 -- GPU-driven

01:33:27.856 --> 01:33:29.676
rendering, a unified feature

01:33:29.736 --> 01:33:31.796
platform, machine learning

01:33:31.796 --> 01:33:34.406
acceleration, support for VR

01:33:34.406 --> 01:33:36.086
content development on your Mac

01:33:36.716 --> 01:33:38.206
with support for external GPUs,

01:33:38.206 --> 01:33:40.826
and our most advanced developer

01:33:40.826 --> 01:33:42.526
optimization tools to date.

01:33:42.946 --> 01:33:44.126
We can't wait to see what you're

01:33:44.126 --> 01:33:45.786
going to build with Metal next.

01:33:46.226 --> 01:33:47.036
Thank you very much.

01:33:47.606 --> 01:33:48.876
And now, I'd like to invite to

01:33:48.876 --> 01:33:50.996
the stage Vice President of AR

01:33:50.996 --> 01:33:52.656
and VR Technologies, Mike

01:33:52.656 --> 01:33:53.146
Rockwell.

01:33:54.516 --> 01:33:56.546
[ Applause ]

01:33:57.046 --> 01:33:57.706
>> Thanks, Jeremy.

01:33:59.146 --> 01:34:01.156
So I am incredibly excited to

01:34:01.156 --> 01:34:03.606
talk to you about ARKit, Apple's

01:34:03.606 --> 01:34:05.846
new framework that enables the

01:34:05.846 --> 01:34:07.516
creation of augmented reality

01:34:07.516 --> 01:34:08.496
apps on iOS.

01:34:09.806 --> 01:34:11.576
One of our primary goals in

01:34:11.576 --> 01:34:13.596
creating ARKit was to make sure

01:34:13.596 --> 01:34:15.146
we could support a broad range

01:34:15.146 --> 01:34:16.836
of devices from day one.

01:34:17.006 --> 01:34:18.466
We didn't want to require

01:34:18.466 --> 01:34:20.396
specialized hardware, and I'm

01:34:20.476 --> 01:34:21.996
happy to say that we achieved

01:34:23.036 --> 01:34:23.216
that.

01:34:23.216 --> 01:34:27.856
ARKit runs on iPhone 6s or later

01:34:27.856 --> 01:34:29.596
and iPad Pro and later.

01:34:30.016 --> 01:34:31.296
That means it will run on

01:34:31.296 --> 01:34:33.596
hundreds of millions of devices

01:34:33.936 --> 01:34:34.986
from day one.

01:34:35.656 --> 01:34:38.396
It makes iOS the largest AR

01:34:38.396 --> 01:34:39.966
platform in the world.

01:34:41.176 --> 01:34:42.696
So what do you need to do to

01:34:42.696 --> 01:34:43.776
create great AR?

01:34:44.526 --> 01:34:46.056
The first thing you need to know

01:34:46.276 --> 01:34:48.346
is where the camera is in space

01:34:48.586 --> 01:34:49.426
and where it's looking.

01:34:50.156 --> 01:34:51.776
We use a technique called

01:34:51.776 --> 01:34:53.466
visual-inertial odometry to do

01:34:53.466 --> 01:34:53.666
that.

01:34:53.866 --> 01:34:54.866
Let's see how that works.

01:34:56.276 --> 01:34:57.616
So we've got our scene and we've

01:34:57.616 --> 01:34:58.286
got our camera.

01:34:58.806 --> 01:34:59.816
And the camera's looking at the

01:34:59.816 --> 01:35:00.136
world.

01:35:01.126 --> 01:35:03.466
We identify feature points in

01:35:03.466 --> 01:35:06.476
the world and we track them from

01:35:06.476 --> 01:35:08.776
frame to frame.

01:35:08.966 --> 01:35:10.506
From that, we are able to

01:35:10.616 --> 01:35:13.256
back-calculate the location of

01:35:13.346 --> 01:35:14.636
the camera, and create a

01:35:14.636 --> 01:35:16.506
coordinate system, and then give

01:35:16.506 --> 01:35:18.306
you that location in real time

01:35:18.796 --> 01:35:20.226
at 60 frames per second.

01:35:21.706 --> 01:35:23.326
Now, if we were going to do that

01:35:23.376 --> 01:35:24.956
calculation at 60 frames per

01:35:24.956 --> 01:35:26.556
second, it would take a lot of

01:35:26.556 --> 01:35:27.366
CPU horsepower.

01:35:27.366 --> 01:35:30.216
What we do instead is we fuse

01:35:30.216 --> 01:35:31.946
the data from the accelerometer

01:35:32.506 --> 01:35:35.226
and the gyro with that tracking

01:35:35.226 --> 01:35:36.676
information and we're able to

01:35:36.676 --> 01:35:37.806
reduce the compute load

01:35:37.806 --> 01:35:38.426
dramatically.

01:35:38.876 --> 01:35:40.416
In fact, to get this information

01:35:40.416 --> 01:35:42.376
only takes a fraction of a

01:35:42.376 --> 01:35:43.386
single CPU.

01:35:44.496 --> 01:35:46.226
That leaves the GPU available to

01:35:46.226 --> 01:35:48.376
you to do fantastic rendering of

01:35:48.546 --> 01:35:49.526
3D objects.

01:35:51.416 --> 01:35:53.086
The second thing you need is to

01:35:53.086 --> 01:35:54.666
be able to understand the scene.

01:35:54.926 --> 01:35:56.246
So what's in there so that you

01:35:56.246 --> 01:35:57.266
can put things in there and have

01:35:57.266 --> 01:36:00.506
them integrate and feel natural.

01:36:01.536 --> 01:36:03.406
We use those feature points that

01:36:03.406 --> 01:36:05.436
we tracked earlier to identify

01:36:05.436 --> 01:36:06.936
major planes in the scene.

01:36:07.636 --> 01:36:09.136
We look for ones that coplanar,

01:36:09.706 --> 01:36:11.536
and then we find the extents of

01:36:11.536 --> 01:36:13.356
those planes across the scene.

01:36:13.726 --> 01:36:15.236
That allows you to integrate

01:36:15.236 --> 01:36:16.226
objects and have them be

01:36:16.226 --> 01:36:17.096
completely natural.

01:36:17.096 --> 01:36:18.676
So I can, for example, set that

01:36:18.676 --> 01:36:20.966
vase on the table, and it feels

01:36:20.966 --> 01:36:22.436
like it's in the scene itself.

01:36:23.066 --> 01:36:25.226
Now, if you didn't know what the

01:36:25.226 --> 01:36:26.956
size of the table was, your vase

01:36:26.956 --> 01:36:28.506
might come out and be gigantic.

01:36:29.046 --> 01:36:30.626
So in addition to identifying

01:36:30.626 --> 01:36:32.026
those planes, we make sure that

01:36:32.026 --> 01:36:33.496
the coordinate system is

01:36:33.496 --> 01:36:33.886
accurate.

01:36:33.946 --> 01:36:35.656
In fact, it's accurate to within

01:36:35.766 --> 01:36:38.326
5 percent, so your objects feel

01:36:38.506 --> 01:36:39.776
like that they're natural in the

01:36:39.776 --> 01:36:40.056
scene.

01:36:42.396 --> 01:36:44.616
The final thing you need in

01:36:44.616 --> 01:36:45.776
order to enable those objects to

01:36:45.776 --> 01:36:47.206
feel right in the scene is to

01:36:47.206 --> 01:36:48.746
have the lighting be accurate.

01:36:49.136 --> 01:36:51.516
So we provide accurate light

01:36:51.516 --> 01:36:53.246
estimations so that as the scene

01:36:53.246 --> 01:36:54.516
would darken, you can darken

01:36:54.516 --> 01:36:55.636
your objects as well.

01:36:55.836 --> 01:36:58.046
If you don't have that, then

01:36:58.046 --> 01:36:59.396
objects appear to glow in the

01:36:59.396 --> 01:37:00.546
scene and they won't appear

01:37:00.546 --> 01:37:00.936
natural.

01:37:02.296 --> 01:37:04.036
So let's look at how you can

01:37:04.036 --> 01:37:05.966
access this incredibly powerful

01:37:05.966 --> 01:37:06.486
framework.

01:37:06.876 --> 01:37:08.026
It's really very easy.

01:37:08.836 --> 01:37:11.286
All of this is available through

01:37:11.286 --> 01:37:11.696
ARKit.

01:37:11.696 --> 01:37:16.116
All you have to do is create a

01:37:16.116 --> 01:37:18.926
session configuration, include

01:37:18.926 --> 01:37:20.136
things like whether you want to

01:37:20.136 --> 01:37:21.906
have plane estimation, whether

01:37:21.906 --> 01:37:23.216
you want to have a light probe,

01:37:23.646 --> 01:37:24.796
and then you start an AR

01:37:24.796 --> 01:37:25.266
session.

01:37:26.846 --> 01:37:28.586
Once that's started, your frames

01:37:28.586 --> 01:37:30.826
will be either delivered to you

01:37:30.826 --> 01:37:32.696
in the AR session delegate or

01:37:32.696 --> 01:37:33.806
you can access them as a

01:37:33.806 --> 01:37:35.496
property off of the AR session.

01:37:36.216 --> 01:37:37.276
Each one of those frames

01:37:37.276 --> 01:37:38.606
contains things like a time

01:37:38.606 --> 01:37:40.806
stamp, the captured image, the

01:37:40.806 --> 01:37:43.446
camera direction and position,

01:37:43.906 --> 01:37:45.176
the major planes in the scene,

01:37:45.176 --> 01:37:46.006
and the light probe.

01:37:47.346 --> 01:37:48.166
So now that you've got your

01:37:48.166 --> 01:37:50.206
scene set up, you're ready to

01:37:50.206 --> 01:37:50.536
render.

01:37:51.186 --> 01:37:53.796
And ARKit supports a broad range

01:37:53.796 --> 01:37:54.926
of options for rendering.

01:37:55.966 --> 01:37:59.206
You can use Metal 2, as Jeremy

01:37:59.206 --> 01:38:00.396
just talked about -- that

01:38:00.396 --> 01:38:02.126
incredibly powerful low-level

01:38:02.126 --> 01:38:03.866
engine for accessing the GPU --

01:38:04.336 --> 01:38:05.436
but you might want to use a

01:38:05.436 --> 01:38:06.616
higher-level framework because

01:38:06.616 --> 01:38:07.646
that's what your abstraction

01:38:07.646 --> 01:38:07.926
would like.

01:38:08.656 --> 01:38:11.846
So we've optimized both SceneKit

01:38:11.846 --> 01:38:13.596
and SpriteKit to work with

01:38:13.596 --> 01:38:15.616
ARKit, and it's very efficient.

01:38:16.766 --> 01:38:18.666
In addition, we've been spending

01:38:18.666 --> 01:38:20.166
the last few months partnering

01:38:20.166 --> 01:38:21.936
with the large 3D engine

01:38:21.936 --> 01:38:23.296
providers to make sure that

01:38:23.296 --> 01:38:25.436
their engines were optimized for

01:38:25.516 --> 01:38:25.966
ARKit.

01:38:27.296 --> 01:38:29.046
And I'm really happy to announce

01:38:29.086 --> 01:38:30.796
that Unity is releasing an open

01:38:30.796 --> 01:38:32.876
source plug-in this week that

01:38:32.876 --> 01:38:34.816
works just like ARKit, so it's

01:38:34.816 --> 01:38:36.056
incredibly easy to use.

01:38:36.896 --> 01:38:39.896
In addition, Epic is releasing

01:38:39.896 --> 01:38:42.196
support in the Unreal Engine so

01:38:42.196 --> 01:38:44.296
that, in a developer preview

01:38:44.296 --> 01:38:45.616
today, and they'll be shipping

01:38:45.616 --> 01:38:46.516
it later on this year.

01:38:47.606 --> 01:38:48.626
So that's a little bit of a

01:38:48.626 --> 01:38:51.086
preview, a look at ARKit.

01:38:51.266 --> 01:38:53.086
I'd like to invite Martin

01:38:53.086 --> 01:38:55.286
Sanders from LEGO to the stage

01:38:55.286 --> 01:38:56.986
to give us a little demo of some

01:38:56.986 --> 01:38:57.966
of the fun things they've been

01:38:57.966 --> 01:38:58.436
working on.

01:38:58.726 --> 01:38:59.196
Thank you.

01:39:00.516 --> 01:39:04.166
[ Applause ]

01:39:04.666 --> 01:39:05.216
>> Hi, everybody.

01:39:05.646 --> 01:39:06.436
Great to be here.

01:39:07.146 --> 01:39:09.606
At LEGO, we've been using ARKit

01:39:09.606 --> 01:39:11.256
to develop some fun, exciting

01:39:11.256 --> 01:39:13.506
experiences that can bring your

01:39:13.506 --> 01:39:15.566
LEGO creations to life in

01:39:15.566 --> 01:39:16.616
real-world environments.

01:39:17.516 --> 01:39:18.786
So it all begins with the

01:39:18.786 --> 01:39:20.386
automatic plane detection.

01:39:20.926 --> 01:39:22.526
So as that helicopter moves

01:39:22.526 --> 01:39:24.106
around, it gives us that

01:39:24.106 --> 01:39:25.826
surface, and we know we have

01:39:25.826 --> 01:39:26.866
that surface to start building.

01:39:27.166 --> 01:39:28.786
So let's go ahead and add some

01:39:28.916 --> 01:39:31.846
sets from our recent collection

01:39:32.076 --> 01:39:33.576
and The LEGO Batman Movie.

01:39:34.006 --> 01:39:35.956
So here we have Arkham Asylum,

01:39:36.106 --> 01:39:38.316
and with those realistic shadows

01:39:38.466 --> 01:39:40.286
and that dynamic lighting, it

01:39:40.286 --> 01:39:41.406
really adds that sense of

01:39:41.406 --> 01:39:41.956
realism.

01:39:41.956 --> 01:39:43.786
And on top of that, when we put

01:39:43.786 --> 01:39:45.626
in things like animations and

01:39:45.686 --> 01:39:47.316
effects, it really adds that

01:39:47.406 --> 01:39:48.856
sense of magic and life to them.

01:39:49.586 --> 01:39:51.526
And with size estimation, all of

01:39:51.526 --> 01:39:53.046
the sets that we bring in come

01:39:53.046 --> 01:39:54.616
out one-to-one scale, so we know

01:39:54.616 --> 01:39:55.776
that they're actually matching

01:39:55.776 --> 01:39:56.426
LEGO sets.

01:39:57.656 --> 01:39:58.946
So this is looking like a cool

01:39:58.946 --> 01:40:00.446
Gotham City scene, but it

01:40:00.446 --> 01:40:01.426
definitely feels like

01:40:01.486 --> 01:40:02.636
something's missing, doesn't it?

01:40:03.236 --> 01:40:05.256
So let's go ahead and add the

01:40:05.256 --> 01:40:07.376
one and only LEGO Batmobile.

01:40:08.526 --> 01:40:09.786
And the man himself, the Caped

01:40:09.786 --> 01:40:11.556
Crusader, LEGO Batman, of

01:40:11.556 --> 01:40:11.866
course.

01:40:12.476 --> 01:40:14.326
Now, it's a really cool model to

01:40:14.326 --> 01:40:14.846
check out.

01:40:14.916 --> 01:40:15.866
There's no doubt about it.

01:40:15.916 --> 01:40:17.406
But we can go a little further

01:40:17.406 --> 01:40:17.646
here.

01:40:18.086 --> 01:40:19.956
We can start investigating how

01:40:19.956 --> 01:40:21.546
models are actually constructed

01:40:21.796 --> 01:40:23.696
and made by exploring it in this

01:40:23.756 --> 01:40:23.986
view.

01:40:24.586 --> 01:40:26.176
Now, Batman doesn't look too

01:40:26.176 --> 01:40:27.546
happy about this, so let's put

01:40:27.546 --> 01:40:28.666
that back together for now, I

01:40:28.666 --> 01:40:29.036
think.

01:40:31.166 --> 01:40:33.826
Now, we also have the power to

01:40:33.826 --> 01:40:34.806
scale up our models.

01:40:34.846 --> 01:40:35.966
Now, imagine what it's like when

01:40:35.966 --> 01:40:37.306
you can go inside your LEGO

01:40:37.306 --> 01:40:39.276
creations and explore and view

01:40:39.276 --> 01:40:40.416
them from new perspectives.

01:40:40.416 --> 01:40:42.026
And with the Batmobile at this

01:40:42.106 --> 01:40:44.026
scale, who wouldn't want to go

01:40:44.026 --> 01:40:45.686
inside and check out all the

01:40:45.686 --> 01:40:48.206
cool gadgets and cockpit things

01:40:48.436 --> 01:40:49.236
from there?

01:40:50.316 --> 01:40:51.846
[applause] And maybe even

01:40:51.846 --> 01:40:53.286
involve some friends in there as

01:40:53.366 --> 01:40:53.536
well.

01:40:53.536 --> 01:40:53.896
I don't know.

01:40:53.976 --> 01:40:55.896
Get some selfies.

01:40:55.896 --> 01:40:56.646
It's fun stuff.

01:40:57.536 --> 01:40:59.706
So as our LEGO sets start to

01:40:59.706 --> 01:41:01.596
come to life and animate, we can

01:41:01.596 --> 01:41:03.046
even then take on the role of

01:41:03.046 --> 01:41:04.096
being the moviemaker.

01:41:04.676 --> 01:41:06.536
So imagine now capturing all of

01:41:06.536 --> 01:41:08.076
those scenes and those epic

01:41:08.076 --> 01:41:10.226
shots as we go into [inaudible].

01:41:11.516 --> 01:41:13.886
[ Music ]

01:41:14.386 --> 01:41:14.886
Full time.

01:41:17.116 --> 01:41:19.766
At LEGO, we've been looking into

01:41:19.766 --> 01:41:21.026
augmented reality for quite a

01:41:21.096 --> 01:41:21.646
few years.

01:41:21.646 --> 01:41:22.176
Yeah, yeah.

01:41:22.486 --> 01:41:23.426
Pretty epic shot, right?

01:41:25.456 --> 01:41:25.646
[inaudible] time.

01:41:26.501 --> 01:41:28.501
[ Applause ]

01:41:28.986 --> 01:41:30.456
And we've had plenty of ideas in

01:41:30.456 --> 01:41:31.696
this space for sure, but it's

01:41:31.696 --> 01:41:33.546
only recently with the power and

01:41:33.546 --> 01:41:35.146
ease of ARKit that we can

01:41:35.146 --> 01:41:36.576
finally turn them into reality.

01:41:37.066 --> 01:41:38.676
So later this year, we are

01:41:38.746 --> 01:41:39.546
really looking forward to

01:41:39.546 --> 01:41:40.236
bringing some of those

01:41:40.236 --> 01:41:42.406
experiences to life for you and

01:41:42.406 --> 01:41:44.086
everyone else in the App Store.

01:41:44.466 --> 01:41:45.376
Thank you very much.

01:41:46.516 --> 01:41:51.556
[ Applause ]

01:41:52.056 --> 01:41:52.356
>> All right.

01:41:52.456 --> 01:41:53.346
Thank you.

01:41:53.346 --> 01:41:56.306
That was a great demo.

01:41:56.496 --> 01:41:57.986
OK, so if you would like to get

01:41:57.986 --> 01:41:59.356
more ideas for how you can

01:41:59.356 --> 01:42:01.196
leverage AR in your own apps, I

01:42:01.196 --> 01:42:02.356
recommend that you walk over to

01:42:02.356 --> 01:42:04.006
our Hands On area that is open

01:42:04.006 --> 01:42:05.406
now and will be open until 7:00

01:42:05.406 --> 01:42:06.106
p.m. tonight.

01:42:06.456 --> 01:42:07.536
You'll find many more demos

01:42:07.596 --> 01:42:08.906
there from partners we've been

01:42:08.906 --> 01:42:10.196
working with on AR.

01:42:11.256 --> 01:42:12.276
And that already brings us to

01:42:12.276 --> 01:42:13.226
the end of this session.

01:42:13.586 --> 01:42:14.936
There are a ton of new

01:42:14.936 --> 01:42:16.956
technologies and APIs here that

01:42:16.956 --> 01:42:18.026
you should get your hands on.

01:42:18.026 --> 01:42:20.376
We are enabling entirely new

01:42:20.376 --> 01:42:22.066
types of applications and we're

01:42:22.066 --> 01:42:23.146
providing you with building

01:42:23.146 --> 01:42:24.326
blocks for forward-looking

01:42:24.326 --> 01:42:25.576
technologies like machine

01:42:25.576 --> 01:42:27.076
learning and augmented reality.

01:42:27.526 --> 01:42:28.936
So go take a closer look and see

01:42:28.936 --> 01:42:30.166
how we can leverage these for

01:42:30.166 --> 01:42:31.366
creating even more compelling

01:42:33.506 --> 01:42:33.636
apps.

01:42:33.636 --> 01:42:35.736
Now, downloads for our developer

01:42:35.736 --> 01:42:37.126
previews for all our operating

01:42:37.186 --> 01:42:38.786
systems and developer tools will

01:42:38.786 --> 01:42:40.026
be available from the WWDC

01:42:40.026 --> 01:42:41.746
Attendee Portal this afternoon,

01:42:41.746 --> 01:42:43.146
so you can take a whole, get a

01:42:43.146 --> 01:42:44.456
hold of them right away and

01:42:44.456 --> 01:42:45.576
learn about all the things we

01:42:45.576 --> 01:42:45.916
announced.

01:42:46.786 --> 01:42:47.766
And yes, of course, many

01:42:47.816 --> 01:42:49.006
sessions here at the conference

01:42:49.006 --> 01:42:50.056
that will cover many of these

01:42:50.056 --> 01:42:52.466
topics more deeply, and I also

01:42:52.466 --> 01:42:53.586
recommend that you make good use

01:42:53.586 --> 01:42:55.076
of the many labs we organize.

01:42:55.416 --> 01:42:56.706
You can meet the Apple engineers

01:42:56.706 --> 01:42:57.866
right here on site to answer

01:42:57.866 --> 01:42:58.546
your questions.

01:42:58.766 --> 01:43:00.516
And with that, I hope you have a

01:43:00.516 --> 01:43:01.546
great conference, and I'll see

01:43:01.546 --> 01:43:02.256
you around this week.

01:43:03.516 --> 01:43:06.500
[ Applause ]