WEBVTT

00:00:27.686 --> 00:00:29.246
>> Good morning, everyone, and

00:00:29.246 --> 00:00:30.806
welcome to the SceneKit, What's

00:00:30.806 --> 00:00:31.586
New session.

00:00:31.896 --> 00:00:34.456
As you already know, SceneKit is

00:00:34.456 --> 00:00:36.736
Apple's high-level API for 3D.

00:00:37.006 --> 00:00:38.816
It's built on top of Metal and

00:00:38.816 --> 00:00:40.506
it's available on all our

00:00:40.506 --> 00:00:41.056
platforms.

00:00:41.746 --> 00:00:43.686
This session will be about the

00:00:43.686 --> 00:00:45.436
new feature we are adding to

00:00:45.436 --> 00:00:45.996
SceneKit.

00:00:46.676 --> 00:00:48.006
We will not cover the basics

00:00:48.006 --> 00:00:49.556
today, so if you are new to

00:00:49.556 --> 00:00:50.656
SceneKit, I encourage you to

00:00:50.656 --> 00:00:52.346
watch our previous presentations

00:00:52.666 --> 00:00:53.496
from the past years.

00:00:55.316 --> 00:00:56.866
So here's our agenda for today.

00:00:57.876 --> 00:01:00.516
I will first present some camera

00:01:00.516 --> 00:01:03.366
improvements that includes some

00:01:03.366 --> 00:01:04.976
new camera effects and some new

00:01:04.976 --> 00:01:07.376
APIs to simplify the control of

00:01:07.996 --> 00:01:08.706
cameras.

00:01:08.706 --> 00:01:10.056
Then, Amaury will come on stage

00:01:10.056 --> 00:01:11.416
and talk about tessellation and

00:01:11.416 --> 00:01:13.726
subdivision, some improvements

00:01:13.726 --> 00:01:15.506
and new APIs on the animation

00:01:15.506 --> 00:01:18.376
front, and to finish, we'll

00:01:18.376 --> 00:01:20.106
present some new developer tools

00:01:20.516 --> 00:01:22.416
and talk about some related

00:01:22.416 --> 00:01:24.586
technologies, including ARKit.

00:01:26.016 --> 00:01:27.596
Now, to start, I would like to

00:01:27.596 --> 00:01:29.656
show you a little demo that

00:01:29.656 --> 00:01:31.346
illustrates some of the new API

00:01:31.346 --> 00:01:33.876
I'm going to detail later during

00:01:33.876 --> 00:01:34.616
the session.

00:01:40.886 --> 00:01:42.636
So this demo is a simple game

00:01:42.636 --> 00:01:44.436
example with a character that I

00:01:44.436 --> 00:01:45.816
can manipulate with a virtual

00:01:45.816 --> 00:01:46.286
D-pad.

00:01:46.866 --> 00:01:49.966
I can attack, jump, and we are

00:01:49.966 --> 00:01:51.236
on the camera with the virtual

00:01:51.236 --> 00:01:51.676
D-pad.

00:01:52.056 --> 00:01:54.076
And the first thing I would like

00:01:54.076 --> 00:01:56.086
to highlight in the demo is the

00:01:56.086 --> 00:01:57.346
behavior of the camera.

00:01:57.996 --> 00:01:59.916
As you can see, the camera

00:01:59.916 --> 00:02:01.426
follows the character smoothly.

00:02:01.426 --> 00:02:03.766
And by smoothly, I mean it

00:02:03.986 --> 00:02:05.656
doesn't strictly reproduce the

00:02:05.656 --> 00:02:07.546
movement of the character, but

00:02:07.546 --> 00:02:09.145
it tries to keep a constant

00:02:09.145 --> 00:02:11.206
distance an elevation with the

00:02:11.206 --> 00:02:13.926
character, but always move with

00:02:13.926 --> 00:02:15.346
a smooth acceleration and

00:02:15.346 --> 00:02:16.136
deceleration.

00:02:17.046 --> 00:02:18.326
And you will see that the

00:02:18.326 --> 00:02:19.506
behavior of the camera will

00:02:19.506 --> 00:02:20.936
adapt, depending on the

00:02:20.936 --> 00:02:22.256
different zones of the game.

00:02:22.336 --> 00:02:25.116
For example, here as I approach

00:02:25.116 --> 00:02:27.326
this fight area, the camera

00:02:27.536 --> 00:02:29.016
moved down a little bit and

00:02:29.016 --> 00:02:30.656
adjust the depth of field to

00:02:30.656 --> 00:02:32.116
focus on the character and the

00:02:32.116 --> 00:02:32.796
enemies.

00:02:34.416 --> 00:02:35.646
Speaking of enemies, we have two

00:02:35.646 --> 00:02:37.036
enemies here with very basic

00:02:37.036 --> 00:02:37.646
behavior.

00:02:38.436 --> 00:02:39.806
One is chasing me while the

00:02:39.806 --> 00:02:41.466
other is moving away, and I will

00:02:41.466 --> 00:02:42.876
explain briefly how this was

00:02:42.876 --> 00:02:44.536
implemented using GameplayKit.

00:02:44.536 --> 00:02:46.706
For now, let's just kill them,

00:02:49.336 --> 00:02:51.376
and the other one.

00:02:52.806 --> 00:02:54.696
And collect that gem here.

00:02:55.846 --> 00:02:57.296
Here the camera smoothly

00:02:57.296 --> 00:02:58.616
transitioned to a cinematic view

00:02:59.546 --> 00:03:01.046
with a strong depth of field to

00:03:01.106 --> 00:03:02.246
emphasize the key, and you can

00:03:02.246 --> 00:03:03.446
notice also some nice

00:03:03.446 --> 00:03:04.216
bokeh in the background.

00:03:05.326 --> 00:03:08.506
So let's collect that key.

00:03:08.506 --> 00:03:09.656
And as I get close to this new

00:03:09.656 --> 00:03:11.006
zone here, where I have to

00:03:11.006 --> 00:03:13.306
carefully jump on platforms, the

00:03:13.306 --> 00:03:15.146
camera smoothly transitioned to

00:03:15.146 --> 00:03:16.836
a new behavior where it now

00:03:16.836 --> 00:03:18.726
stops rotating and stay aligned

00:03:19.096 --> 00:03:21.216
with the platform.

00:03:21.216 --> 00:03:23.156
To simplify my jumps to the

00:03:23.156 --> 00:03:25.646
platforms, so let's jump.

00:03:25.866 --> 00:03:27.816
That was intentional.

00:03:29.146 --> 00:03:32.026
And let's collect the key.

00:03:32.966 --> 00:03:34.176
Again, a new zone where the

00:03:34.176 --> 00:03:35.296
camera will automatically

00:03:35.296 --> 00:03:37.706
reorient itself and stay aligned

00:03:37.766 --> 00:03:38.686
with the platform.

00:03:45.086 --> 00:03:46.116
And it looks like there are some

00:03:46.196 --> 00:03:47.756
friends to free here, and I have

00:03:47.756 --> 00:03:50.036
the key, so let's do it.

00:03:52.096 --> 00:03:54.576
And to finish, the new cinematic

00:03:54.576 --> 00:03:57.406
view with many characters

00:03:57.406 --> 00:03:58.106
running around.

00:03:58.526 --> 00:04:02.016
And here we have 3200 bots to

00:04:02.016 --> 00:04:03.636
animate, and we are going to

00:04:03.636 --> 00:04:04.416
achieve that in half a millisecond on

00:04:04.456 --> 00:04:06.516
this new iPad Pro.

00:04:06.556 --> 00:04:07.986
So this is really fast.

00:04:08.076 --> 00:04:09.026
We have been focusing on

00:04:09.026 --> 00:04:10.416
character animation performance

00:04:10.506 --> 00:04:11.126
in this release.

00:04:11.276 --> 00:04:13.066
And implementing all this has

00:04:13.066 --> 00:04:14.776
been much simpler with the new

00:04:14.776 --> 00:04:16.916
APIs, with the new animation

00:04:16.916 --> 00:04:18.106
APIs I will present later.

00:04:18.416 --> 00:04:20.176
So that's all the demo.

00:04:21.516 --> 00:04:26.756
[ Applause ]

00:04:27.256 --> 00:04:28.906
Other ways we are really happy

00:04:28.906 --> 00:04:31.016
to share this demo with you as a

00:04:31.066 --> 00:04:33.856
sample code, and the sample code

00:04:33.856 --> 00:04:35.506
runs on iOS, tvOS, and macOS,

00:04:35.506 --> 00:04:38.676
and is available in Swift and

00:04:39.276 --> 00:04:40.766
Objective-C.

00:04:41.786 --> 00:04:43.846
During the demo, I insisted on

00:04:43.846 --> 00:04:45.566
the camera behavior because this

00:04:45.566 --> 00:04:46.526
is something that is really

00:04:46.526 --> 00:04:47.916
difficult to write.

00:04:48.696 --> 00:04:50.586
We are seeing many questions and

00:04:50.586 --> 00:04:51.856
related requests on developer

00:04:51.856 --> 00:04:53.826
forums about this, and so we

00:04:53.826 --> 00:04:55.836
are, we improved our camera API

00:04:55.836 --> 00:04:59.236
in this release to both simplify

00:04:59.236 --> 00:05:00.646
this problem and also improve

00:05:00.646 --> 00:05:01.416
the ongoing quality.

00:05:02.046 --> 00:05:05.656
So to do this, we are

00:05:05.656 --> 00:05:07.136
transitioning to a physically

00:05:07.136 --> 00:05:09.276
based camera API, and we

00:05:09.276 --> 00:05:10.626
leveraged this new API to

00:05:10.626 --> 00:05:11.646
implement the physically

00:05:11.646 --> 00:05:12.886
plausible depth of field.

00:05:13.266 --> 00:05:14.896
We also improved the motion blur

00:05:14.896 --> 00:05:16.236
and added built-in support

00:05:16.236 --> 00:05:17.246
for screen space ambient

00:05:17.246 --> 00:05:17.836
occlusion.

00:05:17.886 --> 00:05:20.226
And I will then, I will talk

00:05:20.226 --> 00:05:21.876
next about the new APIs, what I

00:05:21.876 --> 00:05:23.496
did to simplify the control of

00:05:23.496 --> 00:05:23.996
cameras.

00:05:24.776 --> 00:05:27.166
So transitioning to physically

00:05:27.166 --> 00:05:29.196
based API, camera API.

00:05:30.236 --> 00:05:31.946
First, we are deprecating our

00:05:31.946 --> 00:05:34.656
legacy projection model, so

00:05:34.656 --> 00:05:35.986
will, of course, ensure the

00:05:35.986 --> 00:05:38.066
backward compatibility, but be aware that

00:05:38.066 --> 00:05:39.196
we are moving away from the x4

00:05:39.196 --> 00:05:42.486
and y4 properties to adopt some

00:05:42.486 --> 00:05:43.526
things that closer match real photo cameras.

00:05:43.526 --> 00:05:46.096
For example, if you want to

00:05:46.096 --> 00:05:46.806
configure your perspective projection

00:05:46.806 --> 00:05:49.626
projection, you can now either

00:05:49.626 --> 00:05:52.046
set the fieldOfView property or

00:05:52.046 --> 00:05:53.416
configure the focalLength and

00:05:53.416 --> 00:05:54.146
sensorHeight.

00:05:55.136 --> 00:05:55.996
These properties are linked

00:05:55.996 --> 00:05:57.526
together, so if you configure

00:05:57.526 --> 00:05:58.236
the focalLength for instance,

00:05:58.236 --> 00:06:00.066
it will update the fieldOfView

00:06:00.066 --> 00:06:01.366
accordingly, and vice versa.

00:06:03.076 --> 00:06:04.646
Then, SceneKit is modeling

00:06:04.826 --> 00:06:06.506
a real photo camera depth of

00:06:06.506 --> 00:06:06.916
field.

00:06:07.656 --> 00:06:08.636
To achieve at the depth of

00:06:08.636 --> 00:06:10.576
field, set the wantsDepthOfField

00:06:10.576 --> 00:06:11.986
property to true, and then

00:06:11.986 --> 00:06:13.696
configure it by setting the

00:06:13.696 --> 00:06:15.336
focusDistance and fStop

00:06:15.336 --> 00:06:15.906
properties.

00:06:16.796 --> 00:06:18.756
SceneKit will approximate

00:06:18.756 --> 00:06:19.706
real photo camera depth

00:06:19.706 --> 00:06:21.556
of field, and it will blur the

00:06:21.556 --> 00:06:23.076
scene in a way that is

00:06:23.076 --> 00:06:25.016
consistent with these parameters

00:06:25.016 --> 00:06:26.216
that come from the photography

00:06:26.216 --> 00:06:26.546
world.

00:06:27.086 --> 00:06:31.136
So new depth of field will also

00:06:31.136 --> 00:06:33.046
simulate the bokeh you would get

00:06:33.046 --> 00:06:34.206
with real photo cameras.

00:06:35.306 --> 00:06:37.646
Bokeh appear on bright objects

00:06:37.646 --> 00:06:40.016
that are out of focus, and

00:06:40.016 --> 00:06:42.016
because they are generated by

00:06:42.016 --> 00:06:44.136
pixels with very high intensity,

00:06:44.526 --> 00:06:46.036
this feature works best if you

00:06:46.106 --> 00:06:47.556
render your scene with an HDR

00:06:47.556 --> 00:06:47.946
camera.

00:06:48.516 --> 00:06:49.816
And to configure this, just set

00:06:49.816 --> 00:06:52.606
wantsHDR property to true on

00:06:53.586 --> 00:06:54.636
SCNCamera.

00:06:54.636 --> 00:06:56.126
Then, the shape of the bokeh

00:06:56.126 --> 00:06:57.736
depends on the number of blade

00:06:57.736 --> 00:06:58.676
of the aperture.

00:06:58.746 --> 00:07:00.546
And you can also configure that

00:07:00.546 --> 00:07:01.176
on SCNCamera.

00:07:01.176 --> 00:07:03.726
Here are a few examples with a

00:07:03.726 --> 00:07:05.266
different value for this

00:07:07.396 --> 00:07:07.616
property.

00:07:08.746 --> 00:07:10.716
Then, we improved our motion

00:07:10.716 --> 00:07:11.666
blur in this release.

00:07:11.666 --> 00:07:13.516
We already presented a first

00:07:13.516 --> 00:07:15.226
report of motion blur last year

00:07:15.586 --> 00:07:18.016
that was able to blur the scene

00:07:18.266 --> 00:07:19.256
based on the motion of the

00:07:19.256 --> 00:07:19.636
camera.

00:07:19.966 --> 00:07:20.986
That means that if your camera

00:07:20.986 --> 00:07:23.046
was moving fast in a scene, you

00:07:23.046 --> 00:07:24.166
would get the motion blur.

00:07:24.386 --> 00:07:25.876
But if your camera was static

00:07:26.046 --> 00:07:26.966
and the objects were moving

00:07:26.966 --> 00:07:27.976
around, you would not get any

00:07:27.976 --> 00:07:28.476
motion blur.

00:07:29.506 --> 00:07:30.646
So in this release, we are

00:07:30.646 --> 00:07:32.486
adding support for object motion

00:07:32.486 --> 00:07:34.916
blur, and you get per-object

00:07:35.196 --> 00:07:37.126
blur automatically when you

00:07:37.126 --> 00:07:39.096
activate the motion blur on your

00:07:40.776 --> 00:07:41.016
camera.

00:07:41.456 --> 00:07:42.866
One more effect provided by

00:07:42.866 --> 00:07:44.066
SCNCamera is now the

00:07:44.066 --> 00:07:44.996
ambient occlusion.

00:07:45.586 --> 00:07:48.166
The principle of ambient

00:07:48.166 --> 00:07:49.366
occlusion is simple.

00:07:50.026 --> 00:07:52.086
The idea is that a point on a

00:07:52.086 --> 00:07:54.306
flat surface receives all the

00:07:54.306 --> 00:07:55.986
environment incoming light,

00:07:57.226 --> 00:07:59.436
whereas points in cavities will

00:07:59.436 --> 00:08:01.576
just receive part of it because

00:08:01.846 --> 00:08:02.896
some of this light will be

00:08:02.896 --> 00:08:04.056
occluded by the surface.

00:08:05.676 --> 00:08:07.636
Simply to put, screen space

00:08:07.636 --> 00:08:09.316
ambient occlusion, which means

00:08:09.316 --> 00:08:11.306
that this occlusion factor will

00:08:11.306 --> 00:08:13.506
be computed in screen space for

00:08:13.506 --> 00:08:14.306
every pixels.

00:08:15.416 --> 00:08:16.996
This is done by analyzing the

00:08:16.996 --> 00:08:18.496
depth buffer and normal buffer,

00:08:18.496 --> 00:08:20.766
and SceneKit will determine if a

00:08:20.766 --> 00:08:22.786
point is in a cavity or not by

00:08:22.786 --> 00:08:24.396
comparing its depth and normal

00:08:24.396 --> 00:08:25.786
with the neighbor fragments.

00:08:27.406 --> 00:08:28.896
So here's an example of an

00:08:28.896 --> 00:08:30.396
object with no ambient

00:08:30.396 --> 00:08:32.346
occlusion, and here with a very

00:08:32.346 --> 00:08:33.956
strong ambient occlusion to make

00:08:33.956 --> 00:08:35.116
the effect of use on the slide.

00:08:37.096 --> 00:08:38.856
To activate the screen space

00:08:38.856 --> 00:08:40.905
ambient occlusion, just set the

00:08:40.905 --> 00:08:41.885
screenSpaceAmbient

00:08:41.885 --> 00:08:43.535
OcclusionIntensity to a value

00:08:43.535 --> 00:08:45.956
greater than 0, and then you

00:08:45.956 --> 00:08:47.576
have a few parameters you can

00:08:47.576 --> 00:08:49.796
tune that will depend on the

00:08:49.796 --> 00:08:51.226
look you want to achieve and on

00:08:51.226 --> 00:08:52.596
the size and the topology of

00:08:52.646 --> 00:08:53.106
your scene.

00:08:53.406 --> 00:08:55.136
But let's see all these effects

00:08:55.136 --> 00:08:56.806
live in a demo, and for this,

00:08:56.806 --> 00:08:58.076
please welcome Anatole on stage.

00:08:59.266 --> 00:09:01.266
[ Applause ]

00:09:01.516 --> 00:09:02.086
>> Thank you, Thomas.

00:09:03.656 --> 00:09:04.516
Good morning, everyone.

00:09:07.216 --> 00:09:08.856
So let's come back to the first

00:09:08.856 --> 00:09:11.066
demo and bring up some debug UI

00:09:11.066 --> 00:09:12.556
to help me show you our new

00:09:12.556 --> 00:09:13.466
depth of field effect.

00:09:15.306 --> 00:09:16.926
Here we have -- sorry.

00:09:17.866 --> 00:09:21.656
Here we have a beautiful

00:09:21.656 --> 00:09:22.196
golden key in the foreground.

00:09:22.196 --> 00:09:23.986
The focus distance is set to a

00:09:23.986 --> 00:09:25.606
small distance because the key

00:09:25.656 --> 00:09:26.696
is close to the camera.

00:09:26.896 --> 00:09:29.276
And the effect number is set to

00:09:29.276 --> 00:09:30.926
a small value because we want a

00:09:30.926 --> 00:09:31.436
strong blur.

00:09:32.366 --> 00:09:33.976
As you can see, nice work here

00:09:33.976 --> 00:09:35.506
on the background due to the

00:09:35.506 --> 00:09:38.656
illuminance of the particle.

00:09:39.326 --> 00:09:41.246
Now, with the second camera, I

00:09:41.246 --> 00:09:42.726
now have a far-focused distance.

00:09:43.316 --> 00:09:45.066
So the objects in the background

00:09:45.066 --> 00:09:47.266
are sharp and the flowers in the

00:09:47.266 --> 00:09:48.866
foreground are blurred.

00:09:50.096 --> 00:09:51.986
Yet another point of view, and

00:09:52.066 --> 00:09:53.726
here I can, for example, play

00:09:53.726 --> 00:09:55.546
with the FStop number to get

00:09:55.546 --> 00:09:57.716
more or less blur.

00:09:57.716 --> 00:10:00.756
And I can wait for the camera.

00:10:00.876 --> 00:10:02.636
And then with the second slider,

00:10:02.636 --> 00:10:04.316
we define where we want to focus

00:10:04.316 --> 00:10:04.926
in this scene.

00:10:05.506 --> 00:10:08.646
So this new depth of field

00:10:08.646 --> 00:10:10.486
effect can be incredibly useful

00:10:10.486 --> 00:10:11.966
for instance to produce

00:10:11.966 --> 00:10:14.966
cinematic effect in video game.

00:10:15.186 --> 00:10:16.936
Now, let's open another app to

00:10:16.936 --> 00:10:18.046
show you of our new per

00:10:18.046 --> 00:10:19.016
object motion blur.

00:10:20.666 --> 00:10:21.666
Here we have a scene with a

00:10:21.666 --> 00:10:22.706
tower of blocks.

00:10:23.506 --> 00:10:25.156
If I press the Shoot button, I

00:10:25.236 --> 00:10:26.716
throw some spheres on the tower.

00:10:27.236 --> 00:10:30.716
And this is how it looks by

00:10:30.716 --> 00:10:32.456
default without any motion blur.

00:10:33.726 --> 00:10:35.336
Now, I reset the scene, enable

00:10:35.336 --> 00:10:37.086
the Motion Blur, and toss

00:10:37.086 --> 00:10:37.376
in some more spheres.

00:10:37.876 --> 00:10:42.436
You can see the effect of the

00:10:42.436 --> 00:10:44.106
motion blur on those spheres

00:10:44.106 --> 00:10:45.646
because they move really fast.

00:10:46.406 --> 00:10:48.216
And you can also see the effect

00:10:48.216 --> 00:10:49.696
applied to the blocks when the

00:10:49.696 --> 00:10:50.466
tower explodes.

00:10:51.386 --> 00:10:52.936
But now, let's take a closer

00:10:53.546 --> 00:10:53.656
look.

00:10:53.656 --> 00:10:55.426
I can for that freeze the scene

00:10:55.426 --> 00:10:56.846
and move closer a little bit.

00:10:57.916 --> 00:10:59.686
Our brain interprets the blur's

00:10:59.686 --> 00:11:01.706
movement, and you can actually

00:11:01.706 --> 00:11:03.806
see the objects in motion

00:11:03.806 --> 00:11:04.306
even if the image is static.

00:11:05.806 --> 00:11:07.056
We can even change the point of

00:11:07.056 --> 00:11:08.366
view, and we still have a good

00:11:08.366 --> 00:11:09.986
idea of the direction of each

00:11:09.986 --> 00:11:10.256
object.

00:11:10.986 --> 00:11:13.866
So this really improves the

00:11:13.866 --> 00:11:15.626
perception of motion in the

00:11:15.956 --> 00:11:17.476
scene, and the result looks more

00:11:17.476 --> 00:11:17.906
realistic.

00:11:18.486 --> 00:11:20.726
And now, let's see the screen

00:11:20.726 --> 00:11:22.106
space ambient occlusion in

00:11:22.106 --> 00:11:24.096
demo.

00:11:24.096 --> 00:11:25.206
You can see some spheres

00:11:25.206 --> 00:11:27.076
illuminated by the sky and the

00:11:27.076 --> 00:11:27.776
direction of light.

00:11:29.536 --> 00:11:31.026
With the first slider, I can add

00:11:31.026 --> 00:11:32.386
some ambient occlusion to the

00:11:32.386 --> 00:11:32.736
scene.

00:11:33.956 --> 00:11:35.286
As you can see, some ambient

00:11:35.286 --> 00:11:36.776
shadow is added, and I can

00:11:36.776 --> 00:11:38.376
change the intensity to give the

00:11:38.376 --> 00:11:39.736
sphere more or less shadows.

00:11:41.536 --> 00:11:43.416
The amount of occlusion depend

00:11:43.416 --> 00:11:44.836
on the curvature of the surface.

00:11:45.816 --> 00:11:47.476
To know if a pixel is in the

00:11:47.476 --> 00:11:49.216
cavity or not, we inspect the

00:11:49.216 --> 00:11:50.136
neighbor pixels.

00:11:50.886 --> 00:11:52.406
And so we have this radius

00:11:52.456 --> 00:11:54.526
parameter that let us define how

00:11:54.526 --> 00:11:55.696
far we look from neighboring

00:11:55.696 --> 00:11:56.176
pixels.

00:11:57.576 --> 00:11:59.386
The visual result is sharper

00:11:59.386 --> 00:12:02.186
occlusion with small radius and

00:12:02.186 --> 00:12:03.896
more spread out shadows with

00:12:03.896 --> 00:12:04.666
large radius.

00:12:05.076 --> 00:12:08.116
This is computed in real time,

00:12:08.116 --> 00:12:09.586
so it is perfect if you work

00:12:09.586 --> 00:12:11.056
with dynamic objects when

00:12:11.056 --> 00:12:12.236
pre-baked ambient occlusion

00:12:12.236 --> 00:12:13.146
maps or [inaudible].

00:12:13.746 --> 00:12:16.576
That adds some detail to the

00:12:16.576 --> 00:12:17.916
perception of the deeps -- of

00:12:17.916 --> 00:12:19.876
the depths, sorry -- and take a

00:12:19.876 --> 00:12:21.376
look of global illumination to

00:12:21.506 --> 00:12:22.336
your scene.

00:12:23.396 --> 00:12:24.206
That's it for the demo.

00:12:24.206 --> 00:12:25.736
Let's come back to the slide,

00:12:25.736 --> 00:12:27.296
and I'll hand it back to Thomas.

00:12:28.516 --> 00:12:33.796
[ Applause ]

00:12:34.296 --> 00:12:35.196
Thank you, Anatole.

00:12:35.726 --> 00:12:37.216
So we have talked about some new

00:12:37.216 --> 00:12:38.106
camera effects.

00:12:38.336 --> 00:12:39.826
Now, let's talk about camera

00:12:39.826 --> 00:12:40.426
control.

00:12:41.156 --> 00:12:42.516
I did say earlier this is a

00:12:42.516 --> 00:12:43.716
difficult problem, and we see

00:12:43.716 --> 00:12:45.256
many questions about it.

00:12:45.256 --> 00:12:47.626
And we identified two

00:12:48.436 --> 00:12:50.706
main use cases -- people will want

00:12:50.916 --> 00:12:52.446
to inspect a 3D object by

00:12:52.446 --> 00:12:54.316
rotating a 3D object or rotating

00:12:54.376 --> 00:12:55.496
around the 3D object.

00:12:55.836 --> 00:12:57.746
For example, developers who are

00:12:57.746 --> 00:12:59.596
building a simple 3D viewer or

00:12:59.596 --> 00:13:03.826
an editor and developers who

00:13:03.826 --> 00:13:05.236
need a, some more sophisticated

00:13:05.236 --> 00:13:06.026
camera behavior.

00:13:06.026 --> 00:13:08.156
For example, for games or a more

00:13:08.156 --> 00:13:08.856
advanced app.

00:13:09.626 --> 00:13:10.736
So let's start with the first

00:13:10.736 --> 00:13:11.516
use case for now.

00:13:12.826 --> 00:13:14.746
Until now, if you wanted to

00:13:14.746 --> 00:13:17.336
manipulate a 3D object, you had

00:13:17.336 --> 00:13:18.906
to implement your own management

00:13:18.906 --> 00:13:21.116
of events and move the camera

00:13:21.116 --> 00:13:23.096
position and orientation based

00:13:23.096 --> 00:13:24.716
on gestures or mouse events.

00:13:25.856 --> 00:13:27.146
For convenience, we are

00:13:27.146 --> 00:13:28.926
providing an allowCameraControl

00:13:28.926 --> 00:13:31.716
API on SCNView, but these were

00:13:31.716 --> 00:13:33.096
just providing you a default

00:13:33.096 --> 00:13:35.606
camera behavior that was not

00:13:35.636 --> 00:13:37.366
configurable and that was

00:13:37.366 --> 00:13:38.896
essentially there for debugging

00:13:38.896 --> 00:13:39.476
properties.

00:13:39.676 --> 00:13:42.406
So in this new release, we are

00:13:42.406 --> 00:13:44.466
introducing a new class named

00:13:44.466 --> 00:13:47.076
SCNCameraController, and the

00:13:47.076 --> 00:13:48.946
SCNCameraController allows you

00:13:48.946 --> 00:13:50.966
to manipulate a camera with the

00:13:50.966 --> 00:13:52.706
most common camera behavior you

00:13:52.706 --> 00:13:54.206
would find in 3D software.

00:13:55.856 --> 00:13:57.516
So the, this behavior had built

00:13:57.516 --> 00:13:59.116
in in the camera controller, and

00:13:59.116 --> 00:14:00.936
the SCNView has a built-in

00:14:00.936 --> 00:14:02.536
default camera controller that

00:14:02.536 --> 00:14:04.626
you can directly configure for

00:14:04.626 --> 00:14:05.986
the need of your application.

00:14:06.986 --> 00:14:08.016
Now, if you need something more

00:14:08.016 --> 00:14:09.746
specific, you can still

00:14:09.746 --> 00:14:10.856
instantiate your own

00:14:10.856 --> 00:14:12.476
SCNCameraController and drive it

00:14:12.476 --> 00:14:15.396
programmatically if you want.

00:14:15.896 --> 00:14:17.666
So the SCNCameraController

00:14:17.666 --> 00:14:19.406
provide out of the box most of

00:14:19.406 --> 00:14:21.166
the common camera operation

00:14:21.166 --> 00:14:21.486
tools.

00:14:22.326 --> 00:14:25.176
And to give some examples, the

00:14:25.176 --> 00:14:27.316
Orbit Turntable allows you to

00:14:27.316 --> 00:14:29.056
orbit your camera around a 3D

00:14:29.056 --> 00:14:31.476
object and will prevent roll.

00:14:31.616 --> 00:14:33.786
That means that the horizon will

00:14:33.786 --> 00:14:35.846
always remain level, regardless

00:14:35.846 --> 00:14:37.396
of the rotations you are doing.

00:14:38.796 --> 00:14:41.656
The Orbit Arcball will orbit the

00:14:41.656 --> 00:14:43.566
camera using the vertical and

00:14:43.566 --> 00:14:45.716
horizontal axes in screen space.

00:14:45.846 --> 00:14:47.626
So this mode can be more

00:14:47.626 --> 00:14:49.376
intuitive in some cases, but it

00:14:49.376 --> 00:14:51.656
doesn't prevent roll, so it

00:14:51.656 --> 00:14:52.706
really depends on your

00:14:52.706 --> 00:14:53.326
application.

00:14:55.356 --> 00:14:58.066
[inaudible] the Fly mode is more

00:14:58.066 --> 00:15:00.206
suitable for lap scenes you want

00:15:00.206 --> 00:15:01.136
to maybe get into.

00:15:01.626 --> 00:15:03.786
And in that case, the center of

00:15:03.836 --> 00:15:05.466
rotation of the camera is a

00:15:05.466 --> 00:15:07.366
camera itself, which means that

00:15:07.476 --> 00:15:09.856
you rotate the camera to look

00:15:09.856 --> 00:15:11.756
around in a position to orbit

00:15:11.756 --> 00:15:12.696
around an object.

00:15:14.576 --> 00:15:16.576
So again, we believe that the

00:15:16.576 --> 00:15:18.136
scene camera controller will

00:15:18.476 --> 00:15:19.836
provide most of the common

00:15:19.836 --> 00:15:21.296
camera operation tools.

00:15:21.296 --> 00:15:22.716
And if you need something very

00:15:22.716 --> 00:15:24.146
specific, you will be able, you

00:15:24.146 --> 00:15:25.676
can still try your camera

00:15:25.676 --> 00:15:26.656
controller and your camera

00:15:26.656 --> 00:15:27.356
programmatically.

00:15:28.856 --> 00:15:29.896
Now, let's see the second class

00:15:29.896 --> 00:15:30.496
of programs.

00:15:30.996 --> 00:15:32.336
Developing, we need a more

00:15:32.336 --> 00:15:33.786
sophisticated camera behavior.

00:15:33.786 --> 00:15:34.816
For example, for games.

00:15:35.806 --> 00:15:37.906
And we address this problem by

00:15:37.976 --> 00:15:40.376
chaining constraints to define a

00:15:40.376 --> 00:15:41.306
camera behavior.

00:15:43.076 --> 00:15:45.976
SceneKit was already providing a

00:15:45.976 --> 00:15:47.816
bunch of built-in constraints,

00:15:47.996 --> 00:15:49.936
and we're adding a few new this

00:15:49.936 --> 00:15:51.696
year that will work on any

00:15:51.696 --> 00:15:53.956
arbitrary node but work well in

00:15:53.956 --> 00:15:55.086
particular for camera.

00:15:55.566 --> 00:15:57.836
And to illustrate some of them,

00:15:57.836 --> 00:16:01.376
the SCNDistanceConstraint forces

00:16:01.376 --> 00:16:02.716
a node to keep a minimum and

00:16:02.716 --> 00:16:04.866
maximum distance with another

00:16:04.866 --> 00:16:06.526
specified target node.

00:16:07.836 --> 00:16:09.336
So replicate our constraints.

00:16:09.336 --> 00:16:12.006
We replicate a node position and

00:16:12.006 --> 00:16:14.246
orientation with an optional

00:16:14.246 --> 00:16:14.756
offset.

00:16:15.436 --> 00:16:18.216
And the acceleration constraint

00:16:18.216 --> 00:16:20.146
will ensure that the node won't

00:16:20.146 --> 00:16:22.316
move or accelerate faster than a

00:16:22.316 --> 00:16:24.236
given maximum velocity and

00:16:24.236 --> 00:16:25.056
acceleration.

00:16:25.696 --> 00:16:27.296
So these are just examples.

00:16:27.296 --> 00:16:28.576
Let's see what we can do with

00:16:28.576 --> 00:16:29.166
this constraint.

00:16:30.476 --> 00:16:32.696
So here we have a character

00:16:32.696 --> 00:16:33.856
moving around in a scene, and

00:16:34.206 --> 00:16:35.556
the camera has no constraint

00:16:35.556 --> 00:16:37.056
yet, and he's therefore static.

00:16:37.826 --> 00:16:40.066
If I add the look at constraint

00:16:40.066 --> 00:16:42.086
to the camera with the character

00:16:42.086 --> 00:16:44.566
as a target node, I now have my

00:16:44.566 --> 00:16:46.416
camera that rotates to satisfy

00:16:46.416 --> 00:16:47.786
the look at constraint and I

00:16:47.786 --> 00:16:48.906
have the camera that look in the

00:16:48.906 --> 00:16:50.136
direction of the character.

00:16:51.756 --> 00:16:54.186
If I add a replicator constraint

00:16:54.616 --> 00:16:56.946
and I have basic camera

00:16:56.946 --> 00:16:59.396
behavior, that replicate the

00:16:59.506 --> 00:17:01.146
movement of the character with

00:17:01.146 --> 00:17:02.866
some offset and continue to look

00:17:02.866 --> 00:17:04.086
in the direction of the

00:17:04.596 --> 00:17:04.836
character.

00:17:05.376 --> 00:17:06.616
If I add into that an

00:17:06.616 --> 00:17:08.586
acceleration constraint, I now

00:17:08.636 --> 00:17:10.526
have the same behavior, but that

00:17:10.526 --> 00:17:12.276
is most thanks to the

00:17:12.276 --> 00:17:14.026
acceleration constraint that is

00:17:14.026 --> 00:17:15.185
applied after the other

00:17:15.185 --> 00:17:15.935
constraint.

00:17:17.236 --> 00:17:19.415
And if I replace the replicator

00:17:19.415 --> 00:17:21.665
constraint by a distance

00:17:21.665 --> 00:17:23.636
constraint, I now have a new

00:17:23.636 --> 00:17:25.506
camera behavior that now follows

00:17:25.506 --> 00:17:26.935
a character to satisfy the

00:17:26.935 --> 00:17:27.965
distance constraint.

00:17:29.086 --> 00:17:30.186
It continued to look into the

00:17:30.186 --> 00:17:31.186
direction of the character, of

00:17:31.216 --> 00:17:33.006
course, and all this will be

00:17:33.006 --> 00:17:34.726
always moves, regardless of the

00:17:34.726 --> 00:17:36.386
movement of the character,

00:17:36.656 --> 00:17:37.886
thanks to the acceleration

00:17:37.886 --> 00:17:38.436
constraint.

00:17:38.686 --> 00:17:41.366
And so that's how easy it is to

00:17:41.366 --> 00:17:42.756
define a camera behavior, and

00:17:42.756 --> 00:17:45.086
that's what we did in our Fox 2

00:17:45.366 --> 00:17:46.276
example.

00:17:46.946 --> 00:17:48.826
And just by defining a different

00:17:48.916 --> 00:17:50.906
set of constraints, depending on

00:17:50.906 --> 00:17:52.836
the different zones of the game,

00:17:52.966 --> 00:17:54.336
we were able to define the

00:17:54.336 --> 00:17:56.516
camera behavior for the entire

00:17:56.516 --> 00:17:56.906
game.

00:17:59.616 --> 00:18:01.216
One more note about camera

00:18:01.216 --> 00:18:01.746
control.

00:18:03.086 --> 00:18:04.896
We extended SCNNode with the

00:18:04.896 --> 00:18:06.746
categories that provide much

00:18:06.746 --> 00:18:09.706
utilities for you to convert and

00:18:09.706 --> 00:18:11.036
access vectors in different

00:18:11.066 --> 00:18:11.696
spaces.

00:18:12.636 --> 00:18:14.956
But most of all, all the node

00:18:14.956 --> 00:18:16.296
transform properties,

00:18:16.296 --> 00:18:17.616
access position, rotation,

00:18:17.616 --> 00:18:19.456
scale, and matrix, and

00:18:19.456 --> 00:18:21.576
transform, are now directly

00:18:21.666 --> 00:18:24.496
available as SIMD properties

00:18:24.706 --> 00:18:26.526
for, to ease math operations.

00:18:27.196 --> 00:18:30.086
So thanks to SIMD types,

00:18:30.086 --> 00:18:30.866
operations on quaternions

00:18:30.866 --> 00:18:32.706
vectors, and matrices are much

00:18:32.706 --> 00:18:34.196
simpler to write and they are

00:18:34.196 --> 00:18:35.496
much more performant anyway.

00:18:36.276 --> 00:18:37.306
Just be aware of a few

00:18:37.306 --> 00:18:38.856
limitations with SMD types, as

00:18:38.856 --> 00:18:40.526
they are not KVO and KVC

00:18:40.526 --> 00:18:42.216
compliant and they cannot be

00:18:42.216 --> 00:18:43.546
included as an NSValue.

00:18:43.976 --> 00:18:46.686
So that's for camera controller.

00:18:46.846 --> 00:18:47.916
Now, I'll hand it over to Amaury

00:18:47.916 --> 00:18:49.146
to talk about tessellation and

00:18:49.146 --> 00:18:49.726
subdivision.

00:18:50.516 --> 00:18:53.136
[ Applause ]

00:18:53.636 --> 00:18:54.226
>> Thank you, Thomas.

00:18:56.436 --> 00:18:57.886
So we know that great graphics

00:18:58.026 --> 00:18:59.156
are essential to your

00:18:59.156 --> 00:19:01.096
application to build engagement

00:19:01.096 --> 00:19:01.886
and delight your users.

00:19:01.886 --> 00:19:04.386
And there are many aspects to

00:19:04.386 --> 00:19:05.046
great graphics.

00:19:05.696 --> 00:19:07.296
For instance, there is added

00:19:07.296 --> 00:19:07.736
realism.

00:19:07.736 --> 00:19:09.566
And that's why over the years

00:19:09.566 --> 00:19:11.496
we've introduced new rendering

00:19:11.496 --> 00:19:13.206
capabilities, such as

00:19:13.206 --> 00:19:15.316
physically-based shading and

00:19:15.646 --> 00:19:16.726
this year's push for more realistic

00:19:17.126 --> 00:19:18.546
camera optics.

00:19:19.436 --> 00:19:22.866
But high-resolution assets is

00:19:23.016 --> 00:19:24.476
another very important aspect.

00:19:25.726 --> 00:19:27.206
In your application, you want to

00:19:27.206 --> 00:19:29.076
be able to have both very smooth

00:19:29.076 --> 00:19:32.186
surfaces as well as very rich

00:19:32.326 --> 00:19:33.166
and detailed ones.

00:19:33.946 --> 00:19:35.336
Now, the issue is that when you

00:19:35.336 --> 00:19:36.586
deal with high-resolution

00:19:36.586 --> 00:19:38.476
assets, they require more

00:19:38.476 --> 00:19:40.696
memory, both on disk and at

00:19:40.696 --> 00:19:42.676
runtime, and they would require

00:19:42.676 --> 00:19:43.656
more processing time.

00:19:43.886 --> 00:19:45.626
So in this section, we will have

00:19:45.626 --> 00:19:47.436
a look at proper techniques that

00:19:47.436 --> 00:19:49.686
allow artists and you developers

00:19:49.936 --> 00:19:51.276
to work with low-resolution

00:19:51.276 --> 00:19:53.146
models that can become of high

00:19:53.146 --> 00:19:54.676
quality when rendered on the

00:19:54.676 --> 00:19:55.116
screen.

00:19:56.796 --> 00:19:58.516
So I will start by explaining

00:19:58.516 --> 00:20:00.126
what tessellation is and how it

00:20:00.126 --> 00:20:01.876
works, then I will show you how

00:20:01.876 --> 00:20:03.546
you can leverage this in

00:20:03.546 --> 00:20:03.926
SceneKit.

00:20:04.416 --> 00:20:05.746
And finally, we will have a look

00:20:05.746 --> 00:20:07.186
at something a little different,

00:20:07.186 --> 00:20:08.526
subdivision surfaces.

00:20:09.426 --> 00:20:11.356
So tessellation.

00:20:12.396 --> 00:20:13.696
Tessellation is a feature

00:20:13.696 --> 00:20:15.996
applied last year in Metal, and

00:20:16.056 --> 00:20:17.766
the idea behind this feature is

00:20:17.766 --> 00:20:19.666
that you provide the GPU with a

00:20:19.666 --> 00:20:21.656
low-resolution mesh, or coarse

00:20:21.656 --> 00:20:24.116
mesh, and then you let the GPU

00:20:24.116 --> 00:20:25.856
generate model memory that has

00:20:25.856 --> 00:20:28.376
more vertices on the fly when

00:20:28.376 --> 00:20:29.216
the model is rendered.

00:20:30.736 --> 00:20:33.366
So subdivision surfaces really

00:20:33.456 --> 00:20:34.576
are a powerful tool.

00:20:35.046 --> 00:20:36.876
They are what you use in the

00:20:36.976 --> 00:20:38.986
industry to easily create,

00:20:40.016 --> 00:20:41.546
store, and animate

00:20:42.006 --> 00:20:43.456
low-resolution models that can

00:20:43.456 --> 00:20:45.326
become of very high quality when

00:20:45.326 --> 00:20:45.656
rendered.

00:20:45.726 --> 00:20:46.656
So let's have a look.

00:20:46.976 --> 00:20:49.336
So this is a triangle, and this

00:20:49.336 --> 00:20:52.606
is a tessellated version of it.

00:20:52.906 --> 00:20:55.566
So SceneKit gets to decide how

00:20:55.566 --> 00:20:57.826
much an edge can be split.

00:20:58.026 --> 00:20:59.916
It can decide how much vertices

00:20:59.916 --> 00:21:01.456
can be created on the first edge

00:21:02.026 --> 00:21:03.116
and on the second edge.

00:21:03.536 --> 00:21:04.586
And of course, it can do that

00:21:05.146 --> 00:21:05.916
for the third edge.

00:21:06.776 --> 00:21:08.576
And what's nice is that SceneKit

00:21:08.576 --> 00:21:10.096
also gets to generate more

00:21:10.096 --> 00:21:12.296
vertices inside the triangle.

00:21:13.786 --> 00:21:16.346
So these are called tessellation

00:21:16.716 --> 00:21:17.126
factors.

00:21:17.126 --> 00:21:18.626
SceneKit is a high-level API,

00:21:18.626 --> 00:21:20.926
and we made it super easy for

00:21:20.926 --> 00:21:22.176
you to perform tessellation.

00:21:23.126 --> 00:21:24.296
We are adding the new

00:21:24.296 --> 00:21:27.436
SCNGeometryTessellator class as

00:21:27.436 --> 00:21:29.246
well as the tessellator property

00:21:29.316 --> 00:21:30.346
on SCNGeometry.

00:21:31.136 --> 00:21:32.846
And the tessellator exposes a

00:21:32.846 --> 00:21:34.746
few properties that allow for

00:21:34.746 --> 00:21:35.386
different modes.

00:21:35.916 --> 00:21:38.126
So let's have a look at the

00:21:38.126 --> 00:21:39.706
simplest example first.

00:21:41.056 --> 00:21:42.516
In this mode, you provide

00:21:42.516 --> 00:21:45.416
SceneKit with constant edge and

00:21:45.476 --> 00:21:47.556
inside tessellation factors that

00:21:47.556 --> 00:21:49.376
will be used for all the

00:21:49.376 --> 00:21:50.786
triangles in the coarse mesh.

00:21:51.166 --> 00:21:52.326
So with this mode, you will have

00:21:52.326 --> 00:21:54.846
a uniform tessellation, and you

00:21:54.846 --> 00:21:56.216
will add the same amount of

00:21:56.216 --> 00:21:58.046
geometry everywhere across the

00:21:58.046 --> 00:21:58.626
coarse mesh.

00:21:58.976 --> 00:22:02.686
So let's take a look at the more

00:22:02.686 --> 00:22:04.616
complex example now.

00:22:05.286 --> 00:22:06.566
Here you can ask SceneKit to

00:22:06.566 --> 00:22:07.866
come up with special

00:22:07.866 --> 00:22:10.176
tessellation factors so that no

00:22:10.176 --> 00:22:11.336
edge is too long.

00:22:11.796 --> 00:22:13.656
So here you provide a maximum

00:22:13.656 --> 00:22:15.416
edge length in local space.

00:22:17.006 --> 00:22:19.006
Even more powerful, you can ask

00:22:19.006 --> 00:22:21.226
SceneKit to constantly evaluate

00:22:21.226 --> 00:22:22.936
at each frame the tessellation

00:22:22.936 --> 00:22:25.486
factors, depending on the

00:22:25.486 --> 00:22:27.296
project inside of the object.

00:22:28.186 --> 00:22:30.376
So in this mode, you will

00:22:30.376 --> 00:22:32.376
provide the maximum edge length

00:22:32.696 --> 00:22:34.956
in screen space that is in

00:22:34.956 --> 00:22:35.456
pixels.

00:22:35.806 --> 00:22:40.496
So that's it for tessellation.

00:22:41.126 --> 00:22:42.326
And now, if you have a look at

00:22:43.316 --> 00:22:44.786
the original triangle and the

00:22:44.836 --> 00:22:46.526
tessellated version, you might

00:22:46.526 --> 00:22:48.386
be a little disappointed, and

00:22:48.806 --> 00:22:49.926
that's because all the new

00:22:49.926 --> 00:22:52.956
geometry data actually lies in

00:22:52.956 --> 00:22:54.026
the original triangle.

00:22:54.596 --> 00:22:55.976
So for your highly-detailed

00:22:55.976 --> 00:22:57.636
mesh, you want to do something

00:22:57.636 --> 00:23:00.316
with this extra geometry.

00:23:01.036 --> 00:23:02.436
And that leads us to the new

00:23:02.496 --> 00:23:04.256
tessellation-based geometry

00:23:04.366 --> 00:23:04.676
APIs.

00:23:05.316 --> 00:23:08.876
So first of all, let me remind

00:23:08.876 --> 00:23:09.796
you of shader modifiers.

00:23:10.866 --> 00:23:12.966
Shader modifiers are completely

00:23:12.966 --> 00:23:13.876
supported with the new

00:23:13.876 --> 00:23:15.076
tessellation pipeline.

00:23:15.426 --> 00:23:16.806
And with a few lines of code,

00:23:16.806 --> 00:23:18.196
you can create really custom

00:23:18.226 --> 00:23:18.586
effects.

00:23:19.336 --> 00:23:20.786
So for instance, if you have an

00:23:20.786 --> 00:23:22.946
application, and there's water,

00:23:22.946 --> 00:23:24.036
and you want to simulate an

00:23:24.036 --> 00:23:26.156
ocean with waves or really any

00:23:26.466 --> 00:23:28.086
idea, an effect of your own,

00:23:28.966 --> 00:23:30.326
shader modifiers are the right

00:23:30.326 --> 00:23:31.796
tools, are really powerful for

00:23:32.026 --> 00:23:32.116
that.

00:23:32.626 --> 00:23:33.676
But of course, we are also

00:23:33.676 --> 00:23:35.616
adding out-of-the-box effects,

00:23:35.886 --> 00:23:37.546
such as geometry smoothing.

00:23:38.586 --> 00:23:39.506
This is a new feature.

00:23:40.396 --> 00:23:42.126
And for instance, if you specify

00:23:42.706 --> 00:23:44.316
the pnTriangles smoothingMode,

00:23:45.046 --> 00:23:47.386
SceneKit will take into account

00:23:47.496 --> 00:23:49.536
the position in normal of each

00:23:49.536 --> 00:23:53.066
vertex as well as the position

00:23:53.066 --> 00:23:54.726
in normal of its neighbors to

00:23:55.246 --> 00:23:56.576
project them on a smooth

00:23:56.576 --> 00:23:56.856
surface.

00:23:57.296 --> 00:23:59.156
Another effect that you might

00:23:59.156 --> 00:24:01.026
have heard about -- displacement

00:24:01.026 --> 00:24:02.156
maps and height maps.

00:24:03.326 --> 00:24:04.226
So what's a height map?

00:24:05.196 --> 00:24:06.066
Well, height map is a

00:24:06.066 --> 00:24:08.286
gray-scaled image that stores

00:24:08.286 --> 00:24:10.936
the elevation or altitude of any

00:24:11.016 --> 00:24:12.356
point on the surface.

00:24:13.526 --> 00:24:15.016
This technique is commonly used

00:24:15.016 --> 00:24:17.076
for effects such as terrain

00:24:17.246 --> 00:24:19.086
rendering, so let's take that as

00:24:19.176 --> 00:24:20.576
an example.

00:24:21.706 --> 00:24:24.626
We start with a plane that we

00:24:24.736 --> 00:24:27.456
tessellate and that we deform

00:24:27.456 --> 00:24:29.626
using the height map.

00:24:31.076 --> 00:24:33.226
So it's a really simple example,

00:24:33.826 --> 00:24:34.906
but it's highly effective.

00:24:35.756 --> 00:24:37.806
And the API is really simple

00:24:37.806 --> 00:24:38.016
too.

00:24:38.686 --> 00:24:39.686
We are adding the new

00:24:39.686 --> 00:24:41.516
displacement material property

00:24:41.646 --> 00:24:43.876
on SCNMaterial, and so I bet you

00:24:43.876 --> 00:24:45.106
already know how to use it.

00:24:45.376 --> 00:24:47.016
You just specify its contents,

00:24:47.526 --> 00:24:48.916
and then if you modify its

00:24:48.916 --> 00:24:51.036
intensity, you can come up with

00:24:51.036 --> 00:24:52.316
the animation I just showed.

00:24:53.136 --> 00:24:54.526
Now, let's get one step further

00:24:54.526 --> 00:24:56.706
with vector displacement maps.

00:24:58.256 --> 00:25:00.306
Vector displacement maps are the

00:25:00.306 --> 00:25:02.336
extension of height maps, but

00:25:02.336 --> 00:25:03.586
instead of only storing the

00:25:03.586 --> 00:25:05.916
elevation, you can store a

00:25:05.916 --> 00:25:07.186
displacement is all three

00:25:07.186 --> 00:25:09.026
directions, and that's why you

00:25:09.026 --> 00:25:10.156
have a cut-out image.

00:25:10.856 --> 00:25:12.996
For instance, green is the

00:25:12.996 --> 00:25:14.666
displacement along the normal,

00:25:15.056 --> 00:25:16.636
and red and blue along the

00:25:16.636 --> 00:25:17.946
tangent and bitangent.

00:25:19.266 --> 00:25:20.316
So will you guess what that

00:25:20.316 --> 00:25:20.566
does?

00:25:21.386 --> 00:25:22.686
Let's have a look.

00:25:25.466 --> 00:25:27.996
Okay, so this is a, see, the

00:25:27.996 --> 00:25:29.566
example, but in your

00:25:29.626 --> 00:25:30.536
application, you can use

00:25:30.596 --> 00:25:32.336
displacement maps to add the

00:25:32.476 --> 00:25:34.276
details, fine details to your

00:25:34.276 --> 00:25:34.786
geometry.

00:25:35.336 --> 00:25:37.536
So for instance, if you have a

00:25:37.746 --> 00:25:39.866
demo with a chameleon, you can

00:25:39.866 --> 00:25:41.306
add detail to its skin.

00:25:41.836 --> 00:25:44.286
Or if you have an application

00:25:44.406 --> 00:25:45.856
and there are rocks you can get

00:25:45.856 --> 00:25:47.006
really close to, vector

00:25:47.006 --> 00:25:48.646
displacement maps are the right

00:25:48.646 --> 00:25:48.866
tool.

00:25:49.786 --> 00:25:52.636
The API is the same, except that

00:25:53.166 --> 00:25:55.146
instead of just red, you specify

00:25:55.336 --> 00:25:57.406
"all" for the texture components

00:25:57.616 --> 00:25:58.696
to indicate that you are

00:25:58.746 --> 00:26:00.726
interested in more than one

00:26:00.726 --> 00:26:03.126
color option of the input image.

00:26:03.366 --> 00:26:06.666
So that's it for tessellation

00:26:06.666 --> 00:26:08.306
and tessellation-based effects.

00:26:08.606 --> 00:26:09.636
Now, let's have a look at

00:26:09.946 --> 00:26:11.346
subdivision surfaces.

00:26:13.416 --> 00:26:15.236
So you might already have heard

00:26:15.236 --> 00:26:17.326
of our subdivision surfaces and

00:26:17.326 --> 00:26:18.766
[inaudible] class subdivision.

00:26:19.386 --> 00:26:21.266
It's a standardized algorithm

00:26:21.616 --> 00:26:23.316
that starts with a coarse mesh

00:26:23.746 --> 00:26:26.626
and that iteratively refines it.

00:26:31.866 --> 00:26:33.346
And so you see how quickly we

00:26:33.346 --> 00:26:35.486
get from a coarse mesh to a very

00:26:35.556 --> 00:26:36.686
smooth and detailed one.

00:26:37.716 --> 00:26:40.086
Now, not everything is perfectly

00:26:40.086 --> 00:26:41.756
round, so with subdivision

00:26:41.756 --> 00:26:43.346
surfaces, you can specify

00:26:43.346 --> 00:26:45.356
creases and corners to have

00:26:45.886 --> 00:26:47.916
distinct sharpnesses for your

00:26:47.916 --> 00:26:50.986
edges and vertices.

00:26:52.386 --> 00:26:54.336
So subdivision surfaces, they

00:26:54.596 --> 00:26:56.536
are extensively used in the

00:26:56.536 --> 00:26:58.576
industry to easily create,

00:26:59.156 --> 00:27:01.276
store, and animate your

00:27:01.276 --> 00:27:02.786
resolution models that can

00:27:02.786 --> 00:27:04.566
become of very high quality when

00:27:04.566 --> 00:27:05.386
rendered on the screen.

00:27:05.646 --> 00:27:08.216
And it turns out that we added

00:27:08.216 --> 00:27:10.156
support for subdivision surfaces

00:27:10.316 --> 00:27:12.676
a few years ago in SceneKit, but

00:27:12.996 --> 00:27:14.876
we used to run the subdivision

00:27:14.876 --> 00:27:16.106
code on the CPU.

00:27:16.906 --> 00:27:18.816
And so that takes some time and

00:27:18.816 --> 00:27:20.276
a huge amount of memory,

00:27:20.406 --> 00:27:21.876
especially when you go to higher

00:27:21.876 --> 00:27:24.016
level of subdivision, as the

00:27:24.016 --> 00:27:26.326
number of vertices generated

00:27:26.326 --> 00:27:27.656
grows exponentially.

00:27:29.356 --> 00:27:30.786
So we have great news this year.

00:27:32.826 --> 00:27:34.206
You might have heard about the

00:27:34.206 --> 00:27:36.266
OpenSubdiv project from Pixar,

00:27:36.266 --> 00:27:37.466
which is an open tools

00:27:37.466 --> 00:27:39.306
implementation for efficiently

00:27:39.306 --> 00:27:40.516
evaluation of subdivision

00:27:40.516 --> 00:27:41.046
surfaces.

00:27:41.046 --> 00:27:44.176
And last year at WWDC, Apple

00:27:44.176 --> 00:27:45.756
announced that we would be

00:27:45.756 --> 00:27:47.166
contributing to this project

00:27:47.336 --> 00:27:48.316
with a Metal-based

00:27:48.316 --> 00:27:50.496
implementation so that you can

00:27:50.496 --> 00:27:52.276
run the subdivision code on the

00:27:52.316 --> 00:27:53.526
GPU using Metal.

00:27:54.556 --> 00:27:55.896
And so this year, you can

00:27:56.156 --> 00:27:57.406
leverage all these amazing

00:27:57.406 --> 00:27:58.956
technologies very easily.

00:27:59.666 --> 00:28:02.126
And with the Metal-based

00:28:02.126 --> 00:28:03.576
implementation come many

00:28:03.576 --> 00:28:04.296
advantages.

00:28:04.816 --> 00:28:07.266
First, we leverage tessellation,

00:28:07.506 --> 00:28:08.806
and it comes with all the memory

00:28:08.806 --> 00:28:10.616
benefits I've talked about

00:28:10.646 --> 00:28:10.776
earlier.

00:28:11.306 --> 00:28:13.426
And with the tessellation, we'll

00:28:13.426 --> 00:28:15.506
have very smooth surfaces even

00:28:15.506 --> 00:28:17.206
for low subdivision levels.

00:28:18.216 --> 00:28:19.926
Now, in addition to uniform

00:28:19.926 --> 00:28:21.336
subdivision, we support

00:28:21.336 --> 00:28:22.726
feature-adaptive subdivision,

00:28:23.186 --> 00:28:24.166
which I will explain in a

00:28:24.166 --> 00:28:24.446
minute.

00:28:25.186 --> 00:28:27.356
And last, we have an all-GPU

00:28:27.356 --> 00:28:29.526
pipeline for efficient animation

00:28:29.586 --> 00:28:31.106
of subdivided meshes.

00:28:31.226 --> 00:28:34.086
So let's take a look at this

00:28:34.136 --> 00:28:34.836
example.

00:28:35.136 --> 00:28:36.076
It's the key you saw in the

00:28:36.076 --> 00:28:37.896
demo, and as you see, it's a

00:28:37.966 --> 00:28:39.606
very coarse mesh.

00:28:40.206 --> 00:28:41.046
Not much detail.

00:28:42.326 --> 00:28:43.596
And this is a tessellation

00:28:43.596 --> 00:28:45.026
version, subdivided one.

00:28:46.036 --> 00:28:47.836
So with asset, you can see that

00:28:47.836 --> 00:28:49.946
you have hard edges but also

00:28:49.946 --> 00:28:50.486
nice curves.

00:28:50.516 --> 00:28:52.686
So how did we do that?

00:28:53.626 --> 00:28:54.376
Using creases.

00:28:56.336 --> 00:28:58.166
So with subdivision surfaces,

00:28:58.326 --> 00:28:59.816
artists can really come up with

00:28:59.816 --> 00:29:01.806
great designs and they can

00:29:01.806 --> 00:29:04.276
easily create them and then tune

00:29:04.276 --> 00:29:07.246
them to have the desired look

00:29:08.356 --> 00:29:09.466
they want.

00:29:09.786 --> 00:29:11.506
Now, feature-adaptive

00:29:11.506 --> 00:29:12.116
subdivision.

00:29:14.746 --> 00:29:16.296
When uniform subdivision

00:29:16.586 --> 00:29:18.216
converges towards a [inaudible]

00:29:18.216 --> 00:29:19.596
face that this moves by

00:29:19.626 --> 00:29:21.446
exponentially increasing the

00:29:21.446 --> 00:29:22.506
number of polygons,

00:29:23.766 --> 00:29:25.556
feature-adaptive subdivision can

00:29:25.606 --> 00:29:27.786
isolate irregular parts of your

00:29:27.786 --> 00:29:30.346
mesh and create busy patches as

00:29:30.346 --> 00:29:30.576
well.

00:29:31.286 --> 00:29:32.716
So then, with tessellation, we

00:29:32.716 --> 00:29:34.456
can create new vertices on these

00:29:34.586 --> 00:29:36.576
perfect mathematical curves, and

00:29:36.576 --> 00:29:38.006
so it leads to very smooth

00:29:38.006 --> 00:29:40.376
surfaces with a lower memory

00:29:40.406 --> 00:29:40.806
footprint.

00:29:41.376 --> 00:29:44.386
Now, the API is really simple.

00:29:45.366 --> 00:29:46.846
You just specify a subdivision

00:29:46.846 --> 00:29:49.116
level and then you opt into

00:29:49.566 --> 00:29:50.416
tessellation.

00:29:51.646 --> 00:29:53.246
And then for feature-adaptive

00:29:53.246 --> 00:29:54.536
subdivision, it's really easy to

00:29:54.576 --> 00:29:55.286
configure too.

00:29:56.226 --> 00:29:58.856
Now, last, animation of

00:29:58.856 --> 00:29:59.986
subdivision surfaces.

00:30:01.076 --> 00:30:02.556
This year, we have an all-GPU

00:30:02.556 --> 00:30:04.516
pipeline that is really

00:30:04.516 --> 00:30:05.106
efficient.

00:30:05.556 --> 00:30:07.866
You can have a coarse mesh that

00:30:07.866 --> 00:30:10.766
you can deform using morphing.

00:30:10.766 --> 00:30:12.966
And then if you want, you can

00:30:12.966 --> 00:30:14.126
add skeletal with skinning.

00:30:14.466 --> 00:30:15.836
And finally, as the last step,

00:30:16.066 --> 00:30:17.776
we run the refinement code on

00:30:17.776 --> 00:30:18.356
the GPU.

00:30:18.816 --> 00:30:20.066
And this is very performant

00:30:20.176 --> 00:30:21.516
because we are working on the

00:30:21.516 --> 00:30:23.596
GPU on the low-resolution mesh,

00:30:24.036 --> 00:30:25.616
and then the very detailed one

00:30:25.736 --> 00:30:27.466
is generated on the fly by the

00:30:27.616 --> 00:30:28.916
GPU using tessellation.

00:30:30.796 --> 00:30:31.996
So now that you want to give

00:30:31.996 --> 00:30:33.996
subdivision surfaces a try, just

00:30:33.996 --> 00:30:35.156
remember two things.

00:30:35.306 --> 00:30:37.196
First, if you are loading a set

00:30:37.196 --> 00:30:39.556
from files, specify the

00:30:39.556 --> 00:30:41.966
preserveOriginalTopology option.

00:30:42.906 --> 00:30:44.236
And if you are creating

00:30:44.236 --> 00:30:45.646
geometries programmatically,

00:30:45.786 --> 00:30:47.086
remember to use the polygon

00:30:47.086 --> 00:30:47.756
primitive type.

00:30:48.586 --> 00:30:49.246
This is because with

00:30:49.246 --> 00:30:50.746
subdivision, working with

00:30:50.836 --> 00:30:52.466
triangles is not the same as

00:30:52.466 --> 00:30:53.296
working with quads.

00:30:54.556 --> 00:30:55.656
And with that, let's have a

00:30:55.656 --> 00:30:56.506
quick demo.

00:31:05.646 --> 00:31:07.916
OK. So this is a simple

00:31:07.916 --> 00:31:09.186
pottery application I'm

00:31:09.286 --> 00:31:10.166
going to be working on.

00:31:10.936 --> 00:31:14.226
So I can easily pinch to zoom,

00:31:15.076 --> 00:31:16.986
and I can drag to rotate.

00:31:18.066 --> 00:31:19.106
It's very easy.

00:31:19.646 --> 00:31:21.556
Now, if I pinch, then pay

00:31:21.556 --> 00:31:22.876
attention to the silhouette of

00:31:22.916 --> 00:31:23.336
the object.

00:31:24.356 --> 00:31:25.586
As you can see, it's very

00:31:25.586 --> 00:31:28.236
smooth, and you can use a normal

00:31:28.236 --> 00:31:30.656
map to add detail on the

00:31:30.656 --> 00:31:31.316
surface.

00:31:31.696 --> 00:31:34.376
And now, the purpose of this

00:31:34.376 --> 00:31:35.846
application is very simple.

00:31:35.846 --> 00:31:39.466
I can take my finger and simply

00:31:39.806 --> 00:31:40.396
sketch on the mesh.

00:31:41.776 --> 00:31:44.406
So let's kill that and let's

00:31:44.406 --> 00:31:45.046
write something.

00:31:45.856 --> 00:31:48.096
So as I draw, pay a look at the

00:31:48.096 --> 00:31:49.116
silhouette of the object.

00:31:50.986 --> 00:31:52.986
Here I'm actually modifying the

00:31:53.026 --> 00:31:53.576
geometry.

00:31:54.286 --> 00:31:55.596
I'm not just adding surface

00:31:55.636 --> 00:31:58.336
details like we do with a normal

00:31:58.336 --> 00:31:58.566
map.

00:32:06.496 --> 00:32:07.906
OK, so how was that done?

00:32:08.276 --> 00:32:10.576
Well, with subdivision surfaces,

00:32:10.646 --> 00:32:12.016
tessellation, and height maps.

00:32:12.236 --> 00:32:13.036
So let's have a look.

00:32:13.856 --> 00:32:17.526
What we do is that we start with

00:32:17.526 --> 00:32:18.726
a very coarse mesh.

00:32:18.726 --> 00:32:21.036
As you can see, very low

00:32:21.036 --> 00:32:21.496
polygon.

00:32:22.316 --> 00:32:25.106
It doesn't come with normals, so

00:32:25.106 --> 00:32:27.126
we have flat shading here, but

00:32:27.126 --> 00:32:28.876
it has texture coordinates.

00:32:29.386 --> 00:32:31.876
So we can simply map a normal on

00:32:31.876 --> 00:32:34.726
it and later a height map.

00:32:34.916 --> 00:32:36.866
So now, let's subdivide it.

00:32:38.186 --> 00:32:40.156
Let's see the smooth normals

00:32:40.286 --> 00:32:42.806
that are generated, and then

00:32:43.236 --> 00:32:45.946
let's have a look at the wire

00:32:45.946 --> 00:32:48.176
frame and see how much vertices

00:32:48.176 --> 00:32:51.396
are created, how many vertices

00:32:51.396 --> 00:32:52.986
are created when I enabled

00:32:53.226 --> 00:32:55.246
subdivision on it.

00:32:56.056 --> 00:32:58.506
When I take my finger, I simply

00:32:58.556 --> 00:33:02.546
draw in the height map, and all

00:33:02.546 --> 00:33:04.426
the vertices are displaced.

00:33:05.856 --> 00:33:07.536
Now, let's clear that.

00:33:07.646 --> 00:33:09.166
And just for fun, let's enable

00:33:09.976 --> 00:33:11.326
screen space tessellation.

00:33:12.136 --> 00:33:14.166
Now, I will pinch and take a

00:33:14.166 --> 00:33:15.536
look at when I get close or

00:33:15.536 --> 00:33:16.486
farther from the object.

00:33:18.006 --> 00:33:19.206
SceneKit will come up with new

00:33:19.206 --> 00:33:21.066
tessellation factors, and it

00:33:21.066 --> 00:33:23.316
will create new vertices on the

00:33:23.316 --> 00:33:23.606
fly.

00:33:24.216 --> 00:33:28.326
And that's it for the demo.

00:33:29.516 --> 00:33:34.686
[ Applause ]

00:33:35.186 --> 00:33:35.526
Thank you.

00:33:36.066 --> 00:33:39.476
So as a wrap up, tessellation

00:33:39.846 --> 00:33:41.046
and features relying on

00:33:41.046 --> 00:33:42.926
tessellation are available with

00:33:42.926 --> 00:33:45.926
Metal on all Macs and available

00:33:45.966 --> 00:33:48.486
on iOS devices with the A9 chip

00:33:48.486 --> 00:33:50.086
or later, so that includes

00:33:50.416 --> 00:33:52.676
iPhone 6S and all of the iPad

00:33:52.706 --> 00:33:53.536
Pro models.

00:33:56.056 --> 00:33:58.016
Now, let's have a look at

00:33:58.106 --> 00:33:59.336
something completely different

00:33:59.826 --> 00:34:02.676
-- our enhancements to animation

00:34:02.766 --> 00:34:02.976
APIs.

00:34:10.616 --> 00:34:12.525
This year, we are introducing

00:34:12.525 --> 00:34:16.206
the new SCNAnimation protocol as

00:34:16.306 --> 00:34:18.456
well as the SCNAnimationPlayer

00:34:18.456 --> 00:34:18.846
class.

00:34:19.926 --> 00:34:23.356
They make it easier to start

00:34:23.735 --> 00:34:25.656
animations and to mutate it,

00:34:25.916 --> 00:34:27.466
mutate them while they are

00:34:27.466 --> 00:34:27.686
running.

00:34:28.866 --> 00:34:30.326
So for instance, now you can

00:34:30.326 --> 00:34:32.335
easily change the speed of an

00:34:32.335 --> 00:34:34.266
animation and you can blend

00:34:34.356 --> 00:34:35.806
animations on the fly.

00:34:36.476 --> 00:34:37.616
Of course, we still fully

00:34:37.616 --> 00:34:40.755
support CA animation APIs.

00:34:40.755 --> 00:34:43.496
CA animation conforms to our new

00:34:43.496 --> 00:34:44.146
protocol.

00:34:44.946 --> 00:34:47.056
But with the new APIs, it's much

00:34:47.056 --> 00:34:47.315
easier.

00:34:47.315 --> 00:34:51.235
You can work dynamically on

00:34:51.235 --> 00:34:52.315
animations while they are

00:34:52.315 --> 00:34:54.306
running, and these APIs are

00:34:54.306 --> 00:34:55.806
available on all platforms,

00:34:55.966 --> 00:34:56.826
including watchOS.

00:34:58.116 --> 00:34:59.836
So let's take a look at the old

00:34:59.836 --> 00:34:59.976
way.

00:35:01.176 --> 00:35:02.446
So let's say you had a character

00:35:02.446 --> 00:35:04.426
that could walk and jump.

00:35:05.086 --> 00:35:06.376
You would first start by adding

00:35:06.376 --> 00:35:08.216
the walk animation, and then

00:35:08.216 --> 00:35:09.586
when you wanted the character to

00:35:09.586 --> 00:35:11.566
jump, you would add the jump

00:35:11.566 --> 00:35:14.676
animation to replace the other

00:35:15.616 --> 00:35:15.816
one.

00:35:15.926 --> 00:35:18.116
Now, with the new API, you start

00:35:18.116 --> 00:35:20.096
by creating and configuring

00:35:20.146 --> 00:35:22.226
animation players, and then when

00:35:22.226 --> 00:35:23.476
you want a character to jump,

00:35:23.796 --> 00:35:25.056
you manipulate the player

00:35:25.056 --> 00:35:26.996
instead of the animation

00:35:26.996 --> 00:35:27.516
directly.

00:35:27.886 --> 00:35:29.506
So it's a very similar API.

00:35:30.586 --> 00:35:31.626
The difference is that now you

00:35:31.626 --> 00:35:33.766
can mutate animations while they

00:35:33.766 --> 00:35:34.326
are running.

00:35:34.426 --> 00:35:36.016
So you can change their speed

00:35:36.406 --> 00:35:37.626
and you can mix animations.

00:35:38.576 --> 00:35:39.976
And animation blending is

00:35:39.976 --> 00:35:40.936
actually new this year.

00:35:41.886 --> 00:35:43.256
So let's take the example of

00:35:43.256 --> 00:35:46.166
Max, who can walk, run, but also

00:35:46.276 --> 00:35:46.466
step.

00:35:47.046 --> 00:35:48.826
We have different animation

00:35:48.826 --> 00:35:51.016
files for each kind of motion.

00:35:52.776 --> 00:35:55.156
With the new blending API, you

00:35:55.156 --> 00:35:57.446
can easily transition from the

00:35:57.596 --> 00:35:58.996
step animation to the walk

00:35:58.996 --> 00:36:00.956
animation, and so you can bring

00:36:00.956 --> 00:36:02.856
fluidity and be more expressive

00:36:02.986 --> 00:36:03.936
in your applications.

00:36:04.586 --> 00:36:06.656
And after you blend animation,

00:36:06.656 --> 00:36:07.646
you can also play with the

00:36:07.646 --> 00:36:07.976
speed.

00:36:08.316 --> 00:36:14.286
So Max can run slower on it.

00:36:14.576 --> 00:36:16.366
Finally, let me mention

00:36:16.506 --> 00:36:18.356
enhancements to our animation

00:36:18.356 --> 00:36:19.466
evaluation code.

00:36:20.596 --> 00:36:23.296
So we have a new implementation

00:36:23.296 --> 00:36:25.416
that makes it faster to start

00:36:25.416 --> 00:36:27.416
animations on arbitrary objects

00:36:27.416 --> 00:36:29.376
in the scene.

00:36:29.416 --> 00:36:31.186
And we made the evaluation of

00:36:31.186 --> 00:36:32.826
skeletal animation much more

00:36:32.826 --> 00:36:33.376
performant.

00:36:33.376 --> 00:36:35.506
So if you have a lot of

00:36:35.506 --> 00:36:36.526
characters, you have a lot of

00:36:36.526 --> 00:36:39.796
bones in your scene, such as in

00:36:39.836 --> 00:36:41.296
the Fox demo you just saw.

00:36:42.316 --> 00:36:43.746
We have this new implementation

00:36:43.746 --> 00:36:45.256
that makes things much faster.

00:36:46.396 --> 00:36:48.636
And with that, let me hand over

00:36:48.696 --> 00:36:50.976
to Sebastien for updates on our

00:36:50.976 --> 00:36:51.596
developer tools.

00:36:52.391 --> 00:36:54.391
[ Applause ]

00:36:54.766 --> 00:36:55.326
>> Thank you, Amaury.

00:36:58.856 --> 00:37:00.616
So last year, we introduced FPS

00:37:00.666 --> 00:37:01.286
Gauges.

00:37:02.176 --> 00:37:03.396
It's a great way to have an

00:37:03.396 --> 00:37:04.686
overview of the performance of

00:37:04.686 --> 00:37:05.576
your application regarding

00:37:05.576 --> 00:37:05.996
SceneKit.

00:37:06.726 --> 00:37:08.646
And they split the categories so

00:37:08.646 --> 00:37:09.966
that you can see exactly where

00:37:09.966 --> 00:37:11.526
the time is taken for the CPU

00:37:11.526 --> 00:37:12.156
and the GPU.

00:37:12.486 --> 00:37:13.626
So you can know if it's going in

00:37:13.626 --> 00:37:14.916
the rendering and physics or

00:37:14.916 --> 00:37:15.356
particles.

00:37:15.956 --> 00:37:17.636
It's integrated in Xcode, and

00:37:17.636 --> 00:37:19.166
you can have a look at exactly

00:37:19.166 --> 00:37:20.396
how it behaves all the time.

00:37:21.006 --> 00:37:22.626
And it's cool to exactly know

00:37:22.626 --> 00:37:24.946
what's taking time so you can

00:37:24.946 --> 00:37:26.976
reuse your meshes or animations,

00:37:26.976 --> 00:37:27.476
for example.

00:37:28.406 --> 00:37:29.636
But what happens with, when you

00:37:29.636 --> 00:37:30.416
skip a frame?

00:37:30.416 --> 00:37:31.636
How do you know exactly what

00:37:31.636 --> 00:37:32.106
happened?

00:37:32.256 --> 00:37:35.596
What caused the frame skipping?

00:37:36.896 --> 00:37:38.106
This year, we are introducing a

00:37:38.106 --> 00:37:38.846
new instrument.

00:37:39.346 --> 00:37:41.086
It's a template for SceneKit

00:37:41.666 --> 00:37:42.936
that you can use to record the

00:37:42.936 --> 00:37:44.766
trace of your application and

00:37:44.766 --> 00:37:46.486
exactly know what happens frame

00:37:46.486 --> 00:37:47.106
by frame.

00:37:47.576 --> 00:37:49.796
It's very simple to use.

00:37:49.796 --> 00:37:52.366
You just create a template as

00:37:52.366 --> 00:37:54.076
you would for any other trace,

00:37:54.586 --> 00:37:55.336
and it'll record your

00:37:55.336 --> 00:37:57.416
application performance, and you

00:37:57.416 --> 00:37:58.656
will get this view.

00:37:59.036 --> 00:38:01.436
It's full length that detail

00:38:01.436 --> 00:38:02.216
what's happening in your

00:38:02.216 --> 00:38:02.726
application.

00:38:02.886 --> 00:38:04.046
The first one is the frame.

00:38:04.046 --> 00:38:05.116
It gives you the time that is

00:38:05.116 --> 00:38:07.836
taken to render one frame for

00:38:07.836 --> 00:38:10.016
your application, and you can

00:38:10.016 --> 00:38:11.266
see exactly how long it takes.

00:38:12.546 --> 00:38:14.286
The second one gives you the

00:38:14.286 --> 00:38:15.096
rendering time.

00:38:15.276 --> 00:38:16.906
It's the time that is taken by

00:38:16.906 --> 00:38:18.666
SceneKit to actually gather all

00:38:18.666 --> 00:38:20.216
the data and send it to the GPU.

00:38:20.776 --> 00:38:24.056
The third one gives you the

00:38:24.116 --> 00:38:25.566
updating stage.

00:38:25.896 --> 00:38:26.976
It's the time that is taken to

00:38:26.976 --> 00:38:28.926
update the physics, particles,

00:38:29.066 --> 00:38:31.326
and your custom delegate, if you

00:38:31.326 --> 00:38:31.776
have one.

00:38:32.096 --> 00:38:34.586
And the last one, but not the

00:38:34.586 --> 00:38:36.316
least, is the time that is taken

00:38:36.316 --> 00:38:38.346
to upload texture to the GPU as

00:38:38.346 --> 00:38:39.486
well as compile shaders.

00:38:40.416 --> 00:38:42.666
And let's see how it looks when

00:38:42.666 --> 00:38:44.106
we have a skipped frame.

00:38:44.606 --> 00:38:45.826
This is a very simple example.

00:38:47.056 --> 00:38:48.196
You can see that all the frames

00:38:48.196 --> 00:38:49.696
are very slow to render and that

00:38:49.696 --> 00:38:52.816
at one point we have one frame

00:38:52.816 --> 00:38:54.036
that is taking the time that it

00:38:54.076 --> 00:38:55.476
would take normally for four

00:38:55.476 --> 00:38:56.416
frames to render.

00:38:57.036 --> 00:38:59.826
And when we dig down, we dig

00:38:59.826 --> 00:39:01.456
what exactly is happening, we

00:39:01.456 --> 00:39:02.796
can see that a new shader was

00:39:02.796 --> 00:39:04.186
compiled, and it takes a lot of

00:39:04.186 --> 00:39:04.426
time.

00:39:04.906 --> 00:39:07.236
In this case, we can know, maybe

00:39:07.636 --> 00:39:09.926
try to find a strategy to load

00:39:09.926 --> 00:39:11.616
the shader at the start of the

00:39:11.616 --> 00:39:12.876
application.

00:39:13.596 --> 00:39:17.006
We have also added a way to

00:39:17.006 --> 00:39:19.436
combine the SceneKit instrument

00:39:19.436 --> 00:39:20.666
with the Metal instrument trace.

00:39:20.666 --> 00:39:23.496
So you can see the combination

00:39:23.576 --> 00:39:25.246
of both at the same time and see

00:39:25.246 --> 00:39:26.956
exactly what happens behind the

00:39:26.956 --> 00:39:29.026
screen to understand what's

00:39:29.026 --> 00:39:30.426
happening in your application.

00:39:31.236 --> 00:39:33.566
This year, we have also added a

00:39:33.566 --> 00:39:34.596
new debug tool.

00:39:35.466 --> 00:39:36.626
It's an enhancement to the view

00:39:36.626 --> 00:39:38.286
debugger in Xcode.

00:39:38.726 --> 00:39:39.796
It's very simple to use.

00:39:39.796 --> 00:39:41.076
You just use the regular view

00:39:41.076 --> 00:39:42.676
debugger as you would normally.

00:39:43.466 --> 00:39:45.076
And it will capture the view

00:39:45.076 --> 00:39:47.756
hierarchy as well as the scene

00:39:47.986 --> 00:39:48.636
automatically.

00:39:48.796 --> 00:39:50.686
So if there is a SceneKit scene,

00:39:51.116 --> 00:39:53.006
SceneKit view in your

00:39:53.006 --> 00:39:54.386
application, it will capture the

00:39:54.386 --> 00:39:54.746
scene.

00:39:55.116 --> 00:39:57.086
And if you select the scene in

00:39:57.086 --> 00:39:58.806
the view hierarchy, it will

00:39:58.806 --> 00:40:00.466
automatically send it to the

00:40:00.466 --> 00:40:01.756
SceneKit editor, where you can

00:40:02.026 --> 00:40:03.826
inspect all your objects, move

00:40:03.896 --> 00:40:05.276
the camera around, and see

00:40:05.276 --> 00:40:07.576
exactly how, what is in your

00:40:07.576 --> 00:40:08.596
application and what is in your

00:40:08.596 --> 00:40:09.036
scene.

00:40:09.596 --> 00:40:13.456
We have also added support for

00:40:13.456 --> 00:40:14.646
the new features this year.

00:40:14.976 --> 00:40:17.426
So we have a new way to handle

00:40:17.426 --> 00:40:18.986
the cameras in Xcode.

00:40:19.466 --> 00:40:21.316
You can see that there is a new

00:40:21.316 --> 00:40:22.686
way to choose the behavior that

00:40:22.686 --> 00:40:23.046
you want.

00:40:24.596 --> 00:40:26.546
We have added perspective and

00:40:26.546 --> 00:40:28.116
autographic cameras so that you

00:40:28.116 --> 00:40:29.966
can actually inspect your scene

00:40:29.966 --> 00:40:32.316
much easier, and you'll still

00:40:32.316 --> 00:40:33.526
have access to all your regular

00:40:33.526 --> 00:40:34.066
cameras.

00:40:34.636 --> 00:40:37.436
We have also added the new

00:40:37.436 --> 00:40:39.516
behavior, so you can fly around

00:40:39.516 --> 00:40:41.256
on turn and use the arcball.

00:40:41.486 --> 00:40:43.916
It's much easier to inspect very

00:40:43.916 --> 00:40:44.436
big scenes.

00:40:44.956 --> 00:40:48.556
We have also completely revamped

00:40:48.656 --> 00:40:50.086
the Shader Modifier Editor.

00:40:50.086 --> 00:40:52.016
So now, you can edit your shader

00:40:52.016 --> 00:40:54.476
modifiers as well as your

00:40:54.476 --> 00:40:56.446
material at the same time in one

00:40:56.446 --> 00:40:56.776
screen.

00:40:56.776 --> 00:40:57.806
You don't have to go back and

00:40:57.806 --> 00:41:00.676
forth in selecting objects.

00:41:00.676 --> 00:41:01.466
It's a completely new

00:41:01.466 --> 00:41:02.986
implementation, and it also

00:41:02.986 --> 00:41:04.586
supports custom material

00:41:04.586 --> 00:41:05.046
properties.

00:41:05.046 --> 00:41:06.906
So if there is no, not enough

00:41:06.906 --> 00:41:09.616
property slots in your material,

00:41:09.756 --> 00:41:12.946
you can add colors, floats, or

00:41:12.946 --> 00:41:14.266
vectors to add your own

00:41:14.266 --> 00:41:16.136
implementation in your shader

00:41:16.136 --> 00:41:16.716
modifier.

00:41:17.266 --> 00:41:18.136
Very easy to use.

00:41:18.886 --> 00:41:21.286
We have added support for more

00:41:21.486 --> 00:41:22.626
features that we have added this

00:41:22.626 --> 00:41:22.956
year.

00:41:23.566 --> 00:41:24.836
So first is there is a new

00:41:24.836 --> 00:41:27.526
displacement material slot that

00:41:27.526 --> 00:41:28.956
you can use for the

00:41:28.956 --> 00:41:29.676
tessellation.

00:41:30.416 --> 00:41:32.126
Of course, we have tessellation.

00:41:32.686 --> 00:41:34.376
We have added support for the

00:41:34.376 --> 00:41:35.146
new constraints.

00:41:35.306 --> 00:41:36.946
So you can add them into your

00:41:36.946 --> 00:41:38.546
nodes, and test them in real

00:41:38.546 --> 00:41:40.596
time in Xcode, and edit them in

00:41:40.596 --> 00:41:41.326
the inspector.

00:41:41.326 --> 00:41:43.836
We have support for cascaded

00:41:43.836 --> 00:41:45.236
shadows that we will tell you

00:41:45.236 --> 00:41:46.476
about more later.

00:41:47.246 --> 00:41:48.616
And we also have a new

00:41:48.616 --> 00:41:50.226
procedural sky that is very easy

00:41:50.226 --> 00:41:51.596
to use as a background or the

00:41:51.596 --> 00:41:52.486
lighting environment.

00:41:52.766 --> 00:41:54.176
For example, to test your

00:41:54.176 --> 00:41:54.846
[inaudible] material when you

00:41:54.846 --> 00:41:56.186
don't have a proper [inaudible]

00:41:56.186 --> 00:41:56.956
map set.

00:41:57.486 --> 00:41:58.346
And it's completely

00:41:58.346 --> 00:42:00.346
configurable, so you can get day

00:42:00.346 --> 00:42:01.546
or night sky, for example.

00:42:01.546 --> 00:42:04.566
And last, but not least, we have

00:42:04.566 --> 00:42:06.496
added the possibility to

00:42:06.496 --> 00:42:08.066
override the material for

00:42:08.346 --> 00:42:09.306
reference nodes.

00:42:09.816 --> 00:42:10.986
And what are reference nodes?

00:42:11.546 --> 00:42:12.686
Reference nodes are actually

00:42:12.686 --> 00:42:15.776
nodes that refer to one, only

00:42:15.776 --> 00:42:19.546
one, scene file but used more

00:42:19.546 --> 00:42:20.776
than once in your scene.

00:42:22.046 --> 00:42:23.556
Until now, you could only have

00:42:23.556 --> 00:42:25.896
exactly the same rendering for

00:42:25.896 --> 00:42:27.176
both, for all the nodes.

00:42:27.176 --> 00:42:28.396
It's not only two nodes.

00:42:28.946 --> 00:42:30.606
But now, you can overwrite some

00:42:30.606 --> 00:42:32.946
or all of the materials of, that

00:42:32.946 --> 00:42:34.346
you are using in the scene and

00:42:34.346 --> 00:42:35.696
change the look of some of, or

00:42:35.726 --> 00:42:37.346
all the instance.

00:42:38.196 --> 00:42:40.176
And with that, I hand it over to

00:42:40.176 --> 00:42:41.826
Thomas to tell you about related

00:42:41.826 --> 00:42:42.436
technologies.

00:42:43.221 --> 00:42:45.221
[ Applause ]

00:42:45.426 --> 00:42:45.746
>> Thank you.

00:42:49.496 --> 00:42:51.136
OK, so let's talk about related

00:42:51.136 --> 00:42:53.336
technologies and start with

00:42:53.336 --> 00:42:53.836
ARKit.

00:42:54.516 --> 00:42:59.096
So you have [applause] -- yeah.

00:42:59.096 --> 00:43:01.236
[laughs] So you have all seen

00:43:01.236 --> 00:43:02.496
the introduction of ARKit on

00:43:02.496 --> 00:43:03.966
Monday during the keynote and

00:43:03.966 --> 00:43:05.696
State of the Union, and you may

00:43:05.696 --> 00:43:08.586
have noticed that ARKit provides

00:43:08.586 --> 00:43:11.556
an ARSCNView that provides an

00:43:11.556 --> 00:43:13.926
easy solution for AR that just

00:43:13.926 --> 00:43:15.226
work out of the box.

00:43:16.116 --> 00:43:18.836
And in fact, the ARSCNView is a

00:43:18.836 --> 00:43:20.396
subclass of SCNView.

00:43:20.606 --> 00:43:21.826
And that means that you have

00:43:21.896 --> 00:43:23.866
full access to SceneKit via

00:43:23.866 --> 00:43:24.326
ARKit.

00:43:24.326 --> 00:43:25.846
You have access to the scene

00:43:25.846 --> 00:43:26.246
graph.

00:43:26.616 --> 00:43:28.026
You can add post processes,

00:43:28.106 --> 00:43:30.006
particles, physics, force fields,

00:43:30.386 --> 00:43:31.666
custom shaders.

00:43:31.666 --> 00:43:32.506
If you want, you can do

00:43:32.506 --> 00:43:33.616
basically everything.

00:43:34.626 --> 00:43:36.916
And so with ARKit and SceneKit,

00:43:36.916 --> 00:43:38.866
it's really easy to set up a

00:43:38.866 --> 00:43:40.786
scene like in this example here.

00:43:41.056 --> 00:43:43.026
I would let you guess where this

00:43:43.026 --> 00:43:44.276
video is shot.

00:43:44.396 --> 00:43:45.226
There is a hint in the

00:43:45.226 --> 00:43:47.096
background, and my accent is

00:43:47.096 --> 00:43:47.656
another hint.

00:43:48.666 --> 00:43:50.786
And so here, to set up a scene

00:43:50.786 --> 00:43:52.256
like this, we just needed to

00:43:52.256 --> 00:43:55.636
load a SceneKit object, as you

00:43:55.636 --> 00:43:58.166
usually do, and set up an ARView,

00:43:58.166 --> 00:43:59.676
and run an AR session.

00:43:59.826 --> 00:44:02.026
And then, from the ARSCNView

00:44:02.026 --> 00:44:04.646
delegate, you just need to

00:44:04.646 --> 00:44:07.316
attach your 3D objects

00:44:07.316 --> 00:44:09.556
to the anchor detected by ARKit.

00:44:09.556 --> 00:44:10.466
It's that simple.

00:44:11.506 --> 00:44:15.076
And to support ARSCNView, we

00:44:15.076 --> 00:44:17.266
extended our material property

00:44:17.636 --> 00:44:20.076
to support AVCaptureDevice and

00:44:20.076 --> 00:44:23.346
AVPlayer as a natively supported

00:44:23.346 --> 00:44:24.116
type of content.

00:44:25.086 --> 00:44:26.266
So that means that it's very

00:44:26.266 --> 00:44:26.526
easy.

00:44:26.526 --> 00:44:27.776
With just one line of code, you

00:44:27.776 --> 00:44:29.616
can now directly connect.

00:44:29.896 --> 00:44:31.616
So you do a feed off your iPhone

00:44:31.616 --> 00:44:34.066
or iPad directly to a texture in

00:44:34.066 --> 00:44:35.386
SceneKit or to the scene

00:44:35.386 --> 00:44:35.966
background.

00:44:36.596 --> 00:44:36.776
Yeah.

00:44:38.516 --> 00:44:41.896
[ Applause ]

00:44:42.396 --> 00:44:43.256
Now, I would like to give you a

00:44:43.256 --> 00:44:45.306
little trick regarding augmented

00:44:45.306 --> 00:44:46.896
reality and shadows.

00:44:47.076 --> 00:44:48.716
So the fact is that your object

00:44:48.896 --> 00:44:50.926
will look better integrated if

00:44:50.926 --> 00:44:52.706
your object casts some shadows

00:44:52.706 --> 00:44:54.576
on the ground like in this

00:44:54.576 --> 00:44:57.756
example here.

00:44:57.756 --> 00:45:00.266
And so the trick is that to

00:45:00.266 --> 00:45:02.266
achieve this, we editing our

00:45:02.266 --> 00:45:04.496
object in Xcode, we added a

00:45:04.496 --> 00:45:05.886
directional light that casts

00:45:05.886 --> 00:45:09.026
some shadows, and then we added

00:45:09.026 --> 00:45:10.596
a plane to receive the shadows.

00:45:11.166 --> 00:45:12.476
Now, the goal is to hide the

00:45:12.476 --> 00:45:13.546
plane because we don't want to

00:45:13.546 --> 00:45:16.096
see it in our scene, but we

00:45:16.096 --> 00:45:17.576
cannot simply make the plane

00:45:17.576 --> 00:45:18.116
hidden.

00:45:18.296 --> 00:45:19.866
Otherwise, the shadow would

00:45:19.866 --> 00:45:20.366
disappear.

00:45:21.136 --> 00:45:23.966
So the trick is to configure the

00:45:23.966 --> 00:45:26.306
plane to not write in the color

00:45:26.396 --> 00:45:26.666
buffer.

00:45:27.396 --> 00:45:28.456
This can be done

00:45:28.676 --> 00:45:31.206
programmatically or using the

00:45:31.206 --> 00:45:32.356
inspector in Xcode.

00:45:32.626 --> 00:45:34.296
And if I do this, the plane will

00:45:34.296 --> 00:45:35.736
disappear, but the shadow as

00:45:35.736 --> 00:45:35.946
well.

00:45:36.896 --> 00:45:38.856
But the plane still writes in

00:45:38.856 --> 00:45:40.796
the depth buffer, which means

00:45:40.796 --> 00:45:42.046
that I cannot configure my

00:45:42.096 --> 00:45:43.236
light, and change the shadow

00:45:43.236 --> 00:45:45.826
technique, and move from forward

00:45:46.676 --> 00:45:49.126
here to default shadows.

00:45:50.166 --> 00:45:52.266
And now, the shadow will come

00:45:52.266 --> 00:45:54.306
back because default shadows

00:45:54.306 --> 00:45:55.776
work as a second pass full

00:45:56.166 --> 00:45:58.416
screen, and it will compose

00:45:58.416 --> 00:46:01.286
shadows over the image based on

00:46:01.286 --> 00:46:02.756
the depth buffer of the scene

00:46:02.756 --> 00:46:03.986
and the depth buffer of the

00:46:03.986 --> 00:46:04.506
light map.

00:46:05.136 --> 00:46:06.676
And so for default shadows, the

00:46:06.676 --> 00:46:08.256
plane still exists because the

00:46:08.256 --> 00:46:09.926
plane still rendered into the

00:46:09.926 --> 00:46:10.416
depth buffer.

00:46:10.416 --> 00:46:13.026
So that's for the trick for

00:46:13.026 --> 00:46:14.066
shadows in ARKit.

00:46:14.366 --> 00:46:15.656
Now, I would like to talk about

00:46:15.656 --> 00:46:16.316
GameplayKit.

00:46:17.116 --> 00:46:19.066
GameplayKit entity and

00:46:19.066 --> 00:46:20.956
components now support driving

00:46:20.956 --> 00:46:21.906
SceneKit objects.

00:46:22.416 --> 00:46:23.956
The typical use case is when you

00:46:23.956 --> 00:46:25.176
want to implement character

00:46:25.176 --> 00:46:26.436
behaviors, and that's what we

00:46:26.436 --> 00:46:28.406
did in our Fox 2 example for the

00:46:28.406 --> 00:46:28.946
enemies.

00:46:29.666 --> 00:46:31.396
In our case, we have GKScene

00:46:31.656 --> 00:46:33.446
with two entities, one for each

00:46:33.446 --> 00:46:33.866
enemy.

00:46:34.616 --> 00:46:36.826
And we implemented two behaviors

00:46:36.826 --> 00:46:37.816
as GKComponent.

00:46:38.526 --> 00:46:40.516
Now, the main interest resides

00:46:40.516 --> 00:46:42.646
in the Xcode integration that

00:46:42.646 --> 00:46:44.326
allows us to directly assign the

00:46:44.326 --> 00:46:46.566
behavior to our enemies directly

00:46:46.566 --> 00:46:47.096
in Xcode.

00:46:47.256 --> 00:46:49.186
And we can also use the Xcode

00:46:49.186 --> 00:46:51.416
inspector to directly edit the

00:46:51.416 --> 00:46:54.446
properties of our behaviors.

00:46:56.686 --> 00:46:57.946
Next, Model I/O.

00:46:57.946 --> 00:47:00.816
Model I/O improved their support

00:47:00.816 --> 00:47:02.426
for USD in the 3D.

00:47:02.826 --> 00:47:04.556
As a reminder, USD stands for

00:47:04.736 --> 00:47:06.396
Universal Scene Description, and

00:47:06.396 --> 00:47:08.766
it is a 3D file format developed

00:47:08.766 --> 00:47:09.446
by Pixar.

00:47:11.386 --> 00:47:13.056
So SceneKit and Model I/O

00:47:13.056 --> 00:47:14.066
improved the support for USD

00:47:14.066 --> 00:47:16.206
and, in particular, for Metal

00:47:16.206 --> 00:47:17.736
I/O's and for animations.

00:47:18.096 --> 00:47:19.286
If you want more information

00:47:19.286 --> 00:47:21.626
about USD, you can check our

00:47:21.626 --> 00:47:23.996
previous presentation from last

00:47:23.996 --> 00:47:25.626
year, and that will also be in

00:47:25.626 --> 00:47:27.456
our session on Friday afternoon,

00:47:27.746 --> 00:47:29.396
From Art to Engine with Model

00:47:29.396 --> 00:47:29.676
I/O.

00:47:31.456 --> 00:47:32.956
Next is UIFocus.

00:47:33.266 --> 00:47:36.406
And so UIFocus engine is part of

00:47:36.486 --> 00:47:38.416
UIKit, and it allows you to

00:47:38.416 --> 00:47:40.516
select and focus objects on your

00:47:40.516 --> 00:47:43.166
Apple TV using the Siri Remote.

00:47:44.406 --> 00:47:46.816
Now, SCN, it now conforms to

00:47:46.816 --> 00:47:49.366
UIFocusItem, which means that

00:47:49.366 --> 00:47:52.446
you can decide which object in

00:47:52.446 --> 00:47:54.736
your scene, which object would

00:47:54.736 --> 00:47:56.106
be focusable on it.

00:47:57.186 --> 00:47:58.806
And then, the focus engine will

00:47:58.806 --> 00:48:00.476
call you back and will tell you

00:48:00.476 --> 00:48:01.696
what object should be now

00:48:01.696 --> 00:48:03.336
focused in response to gestures

00:48:03.336 --> 00:48:04.746
on the Apple Siri Remote.

00:48:06.136 --> 00:48:07.196
And then, it's up to you to

00:48:07.196 --> 00:48:08.236
decide what action you want to

00:48:08.236 --> 00:48:09.726
take and what visual feedback

00:48:09.796 --> 00:48:10.526
you want to provide.

00:48:11.286 --> 00:48:12.436
To briefly explain how this

00:48:12.466 --> 00:48:14.596
works, let's say here I

00:48:14.596 --> 00:48:16.116
configure the white pieces to be

00:48:16.116 --> 00:48:16.786
focusable.

00:48:17.996 --> 00:48:19.316
SceneKit will automatically

00:48:19.316 --> 00:48:20.946
compute the projected area of

00:48:21.006 --> 00:48:23.296
your object and give that to the

00:48:23.296 --> 00:48:23.986
focus engine.

00:48:25.066 --> 00:48:26.726
Then, the focus engine will take

00:48:26.726 --> 00:48:29.836
care of selecting the right

00:48:30.416 --> 00:48:32.566
object based on the gestures on

00:48:32.566 --> 00:48:33.096
the remote.

00:48:33.656 --> 00:48:36.526
And SceneKit will take care of

00:48:37.016 --> 00:48:38.406
keeping the projected areas on

00:48:38.406 --> 00:48:40.186
the screen updated if you move

00:48:40.186 --> 00:48:41.656
your objects or if you move the

00:48:41.656 --> 00:48:42.516
camera around.

00:48:43.566 --> 00:48:44.896
So the only thing you have to do

00:48:44.896 --> 00:48:46.456
here is just to define what

00:48:46.456 --> 00:48:48.006
object should be focusable on

00:48:48.006 --> 00:48:48.576
it, and that's all.

00:48:49.516 --> 00:48:54.096
[ Applause ]

00:48:54.596 --> 00:48:55.316
Now, to conclude this

00:48:55.316 --> 00:48:56.736
presentation, I would like to

00:48:56.736 --> 00:48:57.896
mention a few rendering

00:48:57.896 --> 00:48:59.346
additions that we added to our

00:48:59.346 --> 00:48:59.846
renderer.

00:49:00.316 --> 00:49:02.066
And the first one is a support

00:49:02.066 --> 00:49:03.586
for point cloud rendering.

00:49:04.696 --> 00:49:06.466
We improved our [inaudible]

00:49:06.466 --> 00:49:07.366
object and added these

00:49:07.366 --> 00:49:09.156
properties that will allow you

00:49:09.156 --> 00:49:10.736
to configure the appearance of

00:49:10.856 --> 00:49:11.536
point cloud.

00:49:11.906 --> 00:49:13.796
So these properties were

00:49:13.796 --> 00:49:15.826
[inaudible] point cloud, which

00:49:15.826 --> 00:49:16.736
means that they were created

00:49:16.736 --> 00:49:18.356
with an area of point and with a

00:49:18.356 --> 00:49:19.476
primitive type point.

00:49:19.966 --> 00:49:21.446
And with these properties, you

00:49:21.446 --> 00:49:23.156
can configure the size in screen

00:49:23.156 --> 00:49:25.596
space and in world space, and

00:49:25.596 --> 00:49:26.916
SceneKit will render your point

00:49:26.916 --> 00:49:29.116
cloud, and texture them, and

00:49:29.116 --> 00:49:30.386
light them according to the

00:49:30.386 --> 00:49:31.956
materials that are attached to

00:49:31.956 --> 00:49:32.606
your geometry.

00:49:33.086 --> 00:49:37.346
Then, we added two new

00:49:37.346 --> 00:49:39.176
transparency modes to our

00:49:39.176 --> 00:49:41.736
material to address the problems

00:49:41.736 --> 00:49:44.366
of double-sided objects or

00:49:44.366 --> 00:49:45.786
concave objects that are

00:49:45.826 --> 00:49:46.676
semitransparent.

00:49:47.456 --> 00:49:49.006
So if you take the object on the

00:49:49.006 --> 00:49:51.346
left, you can see a double-sided

00:49:51.346 --> 00:49:53.786
sphere, semitransparent, and you

00:49:53.786 --> 00:49:55.616
will notice the artifact because

00:49:55.616 --> 00:49:57.386
the polygons are not rendered

00:49:57.386 --> 00:49:58.246
from back to front.

00:49:58.866 --> 00:50:00.086
So SceneKit will render your

00:50:00.086 --> 00:50:01.806
objects from back to front for

00:50:01.806 --> 00:50:04.426
great transparency, but it won't

00:50:04.736 --> 00:50:07.066
sort the individual polygons of

00:50:07.066 --> 00:50:07.706
a geometry.

00:50:08.486 --> 00:50:09.846
And so to address that problem,

00:50:09.966 --> 00:50:11.256
we introduced two new

00:50:11.256 --> 00:50:12.056
transparency mode.

00:50:12.306 --> 00:50:15.166
So first one, single layer, will

00:50:15.166 --> 00:50:16.906
render your object in two passes

00:50:16.906 --> 00:50:19.006
to only render the front-most

00:50:19.006 --> 00:50:20.406
faces in the second pass.

00:50:20.676 --> 00:50:23.296
So that fixes the artifact, but,

00:50:23.296 --> 00:50:24.556
as you can see, object doesn't

00:50:24.556 --> 00:50:25.486
look double sided.

00:50:25.486 --> 00:50:26.926
And the typical use case for

00:50:26.926 --> 00:50:28.416
this mode is when you want to

00:50:28.416 --> 00:50:31.136
fade out an object and avoid the

00:50:31.336 --> 00:50:34.716
artifacts due to the overlapping

00:50:34.716 --> 00:50:36.706
polygon during the fade-out.

00:50:37.506 --> 00:50:40.176
So second mode, dual layer, will

00:50:40.176 --> 00:50:41.566
also render your object in two

00:50:41.566 --> 00:50:42.076
passes.

00:50:42.546 --> 00:50:43.646
So first pass with render the

00:50:43.646 --> 00:50:45.606
back faces, and the second pass

00:50:45.606 --> 00:50:46.926
will render the front faces.

00:50:46.996 --> 00:50:48.826
And it allows us to render this

00:50:48.826 --> 00:50:50.176
double-sided sphere correctly

00:50:50.276 --> 00:50:52.716
here and also the gem from our

00:50:52.716 --> 00:50:53.516
Fox demo.

00:50:53.836 --> 00:50:55.446
And this gem, that comes from

00:50:55.446 --> 00:50:56.976
the Swift Playground Learn to

00:50:57.136 --> 00:50:58.186
Code curriculum.

00:50:59.976 --> 00:51:02.576
One last addition is a support

00:51:02.576 --> 00:51:03.866
for cascaded shadow maps.

00:51:04.066 --> 00:51:05.756
So cascaded shadow maps is an

00:51:05.756 --> 00:51:07.776
optimization of shadow maps.

00:51:08.276 --> 00:51:10.716
The idea is that it splits your

00:51:10.716 --> 00:51:12.076
shadow maps into multiple

00:51:12.076 --> 00:51:15.246
textures or multiple cascades to

00:51:15.246 --> 00:51:17.726
allocate more precision to areas

00:51:17.726 --> 00:51:19.256
that are closer to the camera

00:51:19.586 --> 00:51:21.156
and less precision for areas

00:51:21.156 --> 00:51:21.916
that are far away.

00:51:22.896 --> 00:51:24.406
To configure cascaded shadow

00:51:24.406 --> 00:51:26.086
maps, just tell us how many

00:51:26.086 --> 00:51:27.506
cascades you want, you can

00:51:27.506 --> 00:51:28.546
configure the size of your

00:51:28.546 --> 00:51:30.486
cascade, and then you have a

00:51:30.486 --> 00:51:32.566
parameter named

00:51:32.656 --> 00:51:35.626
shadowCascadeSplittingFactor

00:51:35.626 --> 00:51:38.316
that you can adjust to control

00:51:38.426 --> 00:51:39.736
the distribution of your

00:51:39.736 --> 00:51:41.336
cascades, depending on the

00:51:41.336 --> 00:51:42.736
distance from the point of view.

00:51:43.396 --> 00:51:45.516
For example, this is a recording

00:51:45.516 --> 00:51:48.476
on, from our Fox 2 example, and

00:51:48.476 --> 00:51:49.696
in our case, we're using full

00:51:49.696 --> 00:51:51.336
cascade, represented by

00:51:51.336 --> 00:51:56.426
different color tint here, and

00:51:56.426 --> 00:51:57.676
here I'm playing with the

00:51:57.676 --> 00:51:59.286
splitting factor so that you can

00:51:59.286 --> 00:52:01.186
get an idea on how this impacts

00:52:01.186 --> 00:52:03.306
distribution on the cascade

00:52:03.306 --> 00:52:04.346
depending on the distance from

00:52:04.346 --> 00:52:04.906
the point of view.

00:52:05.966 --> 00:52:07.646
As you can see, the right area

00:52:07.646 --> 00:52:09.096
represents the first cascade,

00:52:09.216 --> 00:52:10.686
and so it represents a smaller

00:52:10.686 --> 00:52:12.536
area of the world, and so we

00:52:12.536 --> 00:52:14.016
have higher precision there,

00:52:14.626 --> 00:52:16.686
whereas the green cascade in the

00:52:16.686 --> 00:52:18.206
back represents a much larger

00:52:18.206 --> 00:52:19.486
area, and so we're fewer

00:52:19.486 --> 00:52:21.516
precision for the green cascade.

00:52:22.466 --> 00:52:24.236
Note that you can, you are also

00:52:24.236 --> 00:52:26.516
able to visualize cascaded

00:52:26.516 --> 00:52:28.716
shadow maps with your own scene

00:52:28.776 --> 00:52:29.706
using Xcode.

00:52:32.096 --> 00:52:34.996
Okay, to wrap up, so this new

00:52:34.996 --> 00:52:37.716
version of SceneKit introduced

00:52:37.716 --> 00:52:39.596
new camera APIs to simplify the

00:52:39.596 --> 00:52:41.336
control of cameras with some new

00:52:41.336 --> 00:52:42.696
great effects like depths of

00:52:42.696 --> 00:52:44.856
field, motion blur, and screen

00:52:44.856 --> 00:52:45.926
space ambient occlusion.

00:52:47.346 --> 00:52:49.266
Also, a great GPU support for

00:52:49.266 --> 00:52:50.626
tessellation and subdivision.

00:52:51.076 --> 00:52:52.306
Some new APIs.

00:52:52.526 --> 00:52:53.676
Much more performant for

00:52:53.676 --> 00:52:55.126
animations and with the

00:52:55.126 --> 00:52:56.196
animation blending.

00:52:57.276 --> 00:52:58.586
Some new, great tools to

00:52:58.806 --> 00:53:01.056
capture, trace, and edit your

00:53:01.116 --> 00:53:01.416
scenes.

00:53:01.746 --> 00:53:02.986
And of course, a really great

00:53:02.986 --> 00:53:04.596
story for augmented reality

00:53:04.876 --> 00:53:05.876
thanks to ARKit.

00:53:07.796 --> 00:53:09.406
For more information, please

00:53:09.406 --> 00:53:10.856
check our developer website.

00:53:11.376 --> 00:53:13.696
You can access our sample code

00:53:13.696 --> 00:53:15.836
from there.

00:53:15.946 --> 00:53:19.506
Some related sessions.

00:53:19.926 --> 00:53:21.606
So [inaudible], graphic

00:53:21.606 --> 00:53:23.566
technologies that SceneKit

00:53:23.566 --> 00:53:25.556
integrate with, like Metal,

00:53:25.556 --> 00:53:26.976
SpriteKit, and Model I/O, of

00:53:26.976 --> 00:53:27.366
course.

00:53:28.396 --> 00:53:30.446
There will be, there is a

00:53:30.446 --> 00:53:32.316
session about tvOS and UIFocus

00:53:32.476 --> 00:53:33.156
support.

00:53:33.156 --> 00:53:34.276
And there will be a great

00:53:34.276 --> 00:53:36.176
session tomorrow about SceneKit,

00:53:36.176 --> 00:53:37.466
using SceneKit in Swift

00:53:37.466 --> 00:53:39.896
Playground tomorrow morning.

00:53:40.246 --> 00:53:41.446
And that's about it.

00:53:41.976 --> 00:53:42.336
Thank you.

00:53:43.016 --> 00:53:45.000
[ Applause ]