WEBVTT

00:00:00.506 --> 00:00:27.056
[ Applause ]

00:00:27.556 --> 00:00:28.596
>> Good afternoon everybody.

00:00:28.676 --> 00:00:30.416
Welcome to session 220,

00:00:30.416 --> 00:00:32.746
customize loading in WKWebView.

00:00:33.706 --> 00:00:34.806
My name is Brady Eidson.

00:00:34.806 --> 00:00:36.376
I'm a software engineer on this

00:00:36.376 --> 00:00:37.636
[inaudible] teams at Apple.

00:00:37.636 --> 00:00:38.986
A little later I'll be joined up

00:00:38.986 --> 00:00:40.686
here with my colleague, Alex

00:00:40.686 --> 00:00:41.216
Christensen.

00:00:41.746 --> 00:00:43.546
Let's just start out with a

00:00:43.546 --> 00:00:44.216
quick question.

00:00:44.376 --> 00:00:46.456
How many of you integrate web

00:00:46.456 --> 00:00:47.966
content into your applications?

00:00:48.476 --> 00:00:50.566
You're probably all in the right

00:00:50.566 --> 00:00:50.876
room.

00:00:51.876 --> 00:00:52.986
Now a follow up.

00:00:52.986 --> 00:00:54.236
How many of you have used

00:00:54.236 --> 00:00:56.236
WKWebView to integrate that web

00:00:56.236 --> 00:00:56.676
content?

00:00:57.386 --> 00:00:58.546
Fewer hands came up.

00:00:58.546 --> 00:00:59.436
Still a lot of you though.

00:00:59.656 --> 00:01:02.046
So I'm very excited to talk

00:01:02.046 --> 00:01:03.856
about some great new APIs in

00:01:03.856 --> 00:01:05.786
WKWebView that will help all of

00:01:05.786 --> 00:01:07.036
you who are already using

00:01:07.036 --> 00:01:09.106
WKWebView do some cool new

00:01:09.106 --> 00:01:11.566
things and hopefully adopt --

00:01:11.566 --> 00:01:13.286
help the rest of you to adopt

00:01:13.286 --> 00:01:13.986
WKWebView.

00:01:16.806 --> 00:01:19.666
Apple is a big believer in web

00:01:19.666 --> 00:01:20.506
technologies.

00:01:20.986 --> 00:01:23.076
We know how important they are

00:01:23.076 --> 00:01:25.396
to our developers, our users,

00:01:25.506 --> 00:01:26.656
and your users.

00:01:27.196 --> 00:01:29.206
We have a handful of different

00:01:29.206 --> 00:01:30.866
technologies you can use to

00:01:30.866 --> 00:01:32.206
integrate web content in your

00:01:32.206 --> 00:01:32.746
application.

00:01:33.886 --> 00:01:35.556
Today's talk is primarily about

00:01:35.556 --> 00:01:38.006
WKWebView but I do briefly want

00:01:38.006 --> 00:01:39.946
to mention a different one which

00:01:39.946 --> 00:01:41.516
is Safari View Controller.

00:01:42.606 --> 00:01:45.036
If you need an in app web

00:01:45.036 --> 00:01:47.516
browsing experience, Safari View

00:01:47.516 --> 00:01:48.936
Controller is, by far, the

00:01:48.936 --> 00:01:50.216
preferred way for you to go.

00:01:51.516 --> 00:01:53.216
Using just a few lines of code,

00:01:53.506 --> 00:01:55.316
you can integrate a powerful

00:01:55.316 --> 00:01:57.356
secure web browser into your

00:01:57.536 --> 00:01:57.816
app.

00:01:58.266 --> 00:01:59.346
You don't even need to worry

00:01:59.346 --> 00:02:00.266
about adding the UI.

00:02:00.896 --> 00:02:05.096
But underneath that UI is web

00:02:05.096 --> 00:02:05.536
content.

00:02:06.236 --> 00:02:08.955
And many of you have much deeper

00:02:08.955 --> 00:02:10.866
needs than a straight forward

00:02:10.866 --> 00:02:12.456
web browsing experience can

00:02:12.456 --> 00:02:12.946
fulfill.

00:02:13.866 --> 00:02:16.596
You need customization of the

00:02:16.596 --> 00:02:19.426
behavior of the loading of the

00:02:19.426 --> 00:02:22.146
web content of how it renders,

00:02:22.406 --> 00:02:24.916
of how it interacts with your

00:02:24.916 --> 00:02:25.736
native UI.

00:02:26.436 --> 00:02:29.066
In fact, many of you might be

00:02:29.116 --> 00:02:31.056
integrating the web content into

00:02:31.056 --> 00:02:32.536
your native UI in such a way

00:02:32.536 --> 00:02:33.916
that it's not even obvious

00:02:33.916 --> 00:02:35.646
you're using web content at all.

00:02:39.276 --> 00:02:43.036
If this is you, then WKWebView

00:02:43.466 --> 00:02:46.636
is, by far, the preferred way to

00:02:46.636 --> 00:02:46.856
go.

00:02:46.856 --> 00:02:50.246
Now I want to briefly talk about

00:02:50.246 --> 00:02:51.576
WKWebView's architecture.

00:02:52.746 --> 00:02:54.666
When you integrate web content

00:02:54.666 --> 00:02:56.096
into your application using

00:02:56.096 --> 00:02:59.556
WKWebView, you are inviting the

00:02:59.556 --> 00:03:01.376
entire web platform into your

00:03:01.376 --> 00:03:03.736
application with all of its

00:03:03.736 --> 00:03:05.636
power, all of its flexibility

00:03:05.866 --> 00:03:07.806
but also all of its complexity.

00:03:09.596 --> 00:03:12.076
So WKWebView isolates your

00:03:12.076 --> 00:03:14.106
application from this complexity

00:03:14.416 --> 00:03:15.716
as best we know how.

00:03:16.296 --> 00:03:18.996
It does this using process

00:03:18.996 --> 00:03:19.706
isolation.

00:03:20.406 --> 00:03:22.366
We load the web content and

00:03:22.366 --> 00:03:23.576
render it and execute

00:03:23.576 --> 00:03:25.176
JavaScript, that type of stuff,

00:03:25.436 --> 00:03:27.396
in a separate process from your

00:03:27.396 --> 00:03:28.546
application's process.

00:03:29.866 --> 00:03:31.416
This gives us some fantastic

00:03:31.516 --> 00:03:32.716
security benefits.

00:03:33.286 --> 00:03:35.166
We can protect your application

00:03:35.446 --> 00:03:37.016
from potentially malicious web

00:03:37.016 --> 00:03:37.496
content.

00:03:38.026 --> 00:03:40.426
In fact, different bits of web

00:03:40.426 --> 00:03:41.876
content can each run in their

00:03:41.876 --> 00:03:43.286
own web process.

00:03:43.836 --> 00:03:45.596
So we can protect your trusted

00:03:45.596 --> 00:03:47.156
web content from other

00:03:47.156 --> 00:03:48.296
potentially malicious web

00:03:48.296 --> 00:03:48.696
content.

00:03:50.136 --> 00:03:51.836
This also opens up some great

00:03:51.956 --> 00:03:53.296
performance benefits.

00:03:53.536 --> 00:03:54.626
Web content can be run

00:03:54.856 --> 00:03:55.766
concurrently with your

00:03:55.766 --> 00:03:57.276
application because of the

00:03:57.276 --> 00:03:59.296
security, we can enable the

00:03:59.296 --> 00:04:00.716
advanced JavaScript Just-In-Time

00:04:00.716 --> 00:04:01.266
compiler.

00:04:01.806 --> 00:04:05.376
But because all this is

00:04:05.376 --> 00:04:06.856
happening in a separate process,

00:04:07.336 --> 00:04:08.876
the normal steps you would take

00:04:09.086 --> 00:04:11.626
to configure your process don't

00:04:11.626 --> 00:04:13.166
apply to the web content.

00:04:13.796 --> 00:04:15.896
We need explicit APIs to

00:04:15.896 --> 00:04:17.426
interact with the web content.

00:04:18.766 --> 00:04:20.005
And every since we introduced

00:04:20.005 --> 00:04:22.286
WKWebView, we've been gathering

00:04:22.286 --> 00:04:23.946
feedback from developers of all

00:04:23.946 --> 00:04:25.476
types working on all sorts of

00:04:25.476 --> 00:04:26.266
applications.

00:04:27.136 --> 00:04:29.596
And we've compiled a list of a

00:04:29.596 --> 00:04:31.516
top three that we're going to

00:04:31.516 --> 00:04:32.396
introduce today.

00:04:32.396 --> 00:04:34.336
And we think that these three

00:04:34.336 --> 00:04:36.996
new mechanisms will unlock some

00:04:36.996 --> 00:04:38.376
pretty powerful capabilities

00:04:38.576 --> 00:04:39.676
that you guys have been asking

00:04:39.676 --> 00:04:39.876
for.

00:04:43.046 --> 00:04:44.326
So first we're going to

00:04:44.326 --> 00:04:46.236
introduce a way to manage

00:04:46.346 --> 00:04:48.626
cookies visible to a WKWebView.

00:04:48.626 --> 00:04:52.676
We're going to introduce a

00:04:52.676 --> 00:04:53.876
fantastic mechanism for

00:04:53.876 --> 00:04:56.956
filtering unwanted content from

00:04:57.016 --> 00:04:57.706
your WebView.

00:04:58.106 --> 00:05:02.466
And finally, a way for you to

00:05:02.466 --> 00:05:04.566
provide custom resources to web

00:05:04.566 --> 00:05:07.286
content no matter where you have

00:05:07.286 --> 00:05:08.396
the data for those custom

00:05:08.396 --> 00:05:09.016
resources.

00:05:09.016 --> 00:05:10.236
Wherever -- no matter where it

00:05:10.236 --> 00:05:10.656
comes from.

00:05:11.196 --> 00:05:15.516
So first managing cookies.

00:05:16.036 --> 00:05:18.536
We actually know that a lot of

00:05:18.836 --> 00:05:20.396
the developers dipping their

00:05:20.396 --> 00:05:22.256
toes in the waters of WKWebView

00:05:22.436 --> 00:05:23.636
are pretty new to the web

00:05:23.636 --> 00:05:24.116
platform.

00:05:24.926 --> 00:05:25.976
So I briefly want to go over

00:05:26.146 --> 00:05:28.306
what is a cookie?

00:05:28.816 --> 00:05:30.376
When a webpage is rendered in a

00:05:30.376 --> 00:05:32.376
browser engine, a lot of sub

00:05:32.376 --> 00:05:33.216
resources come up.

00:05:33.466 --> 00:05:36.236
Images, JavaScript files, style

00:05:36.236 --> 00:05:38.086
sheets, things like that.

00:05:38.496 --> 00:05:40.596
For each sub resource, we need

00:05:40.596 --> 00:05:42.036
to make a request to the server.

00:05:42.226 --> 00:05:44.336
The server needs to respond with

00:05:44.386 --> 00:05:46.546
the data of the resource itself

00:05:47.136 --> 00:05:48.366
and some meta data about the

00:05:48.366 --> 00:05:48.896
resource.

00:05:49.396 --> 00:05:51.576
And both the requests and the

00:05:51.576 --> 00:05:53.216
responses include little bits of

00:05:53.216 --> 00:05:54.226
data called cookies.

00:05:55.416 --> 00:05:56.676
The server will respond with a

00:05:56.676 --> 00:05:58.406
cookie which the browser

00:05:58.406 --> 00:06:00.386
remembers and can send back out

00:06:00.386 --> 00:06:01.626
to the server in future

00:06:01.626 --> 00:06:02.326
requests.

00:06:03.206 --> 00:06:04.856
This helps track a user's

00:06:04.856 --> 00:06:06.286
session when using a web

00:06:06.286 --> 00:06:06.976
application.

00:06:07.646 --> 00:06:09.726
Things like their log in

00:06:09.726 --> 00:06:10.316
credentials.

00:06:10.316 --> 00:06:12.016
Their log in state, a log in

00:06:12.016 --> 00:06:12.516
token.

00:06:13.056 --> 00:06:14.636
Or if it's a shopping

00:06:14.636 --> 00:06:17.006
application, perhaps, the state

00:06:17.006 --> 00:06:18.166
of their shopping cart and

00:06:18.166 --> 00:06:20.466
what's in it.

00:06:20.966 --> 00:06:22.066
When you're integrating web

00:06:22.066 --> 00:06:23.226
content into your native

00:06:23.226 --> 00:06:26.146
application, you often need to

00:06:26.146 --> 00:06:27.636
manipulate these bits of data.

00:06:28.876 --> 00:06:31.096
You might know things ahead of

00:06:31.096 --> 00:06:32.976
time to help prompt prime the

00:06:32.976 --> 00:06:33.436
WebView.

00:06:33.436 --> 00:06:35.736
To make the experience smoother.

00:06:35.736 --> 00:06:38.576
You might need to do something

00:06:38.576 --> 00:06:40.316
like add a log out button where

00:06:40.316 --> 00:06:41.496
you could just delete the

00:06:41.496 --> 00:06:43.186
session cookie or the cookie

00:06:43.186 --> 00:06:45.036
representing the user's session

00:06:45.036 --> 00:06:46.056
log in.

00:06:47.616 --> 00:06:49.796
There's also other -- another

00:06:49.866 --> 00:06:51.686
type of why you need -- might

00:06:51.686 --> 00:06:53.456
need to manage cookies which is

00:06:53.456 --> 00:06:54.976
the opposite of helping the

00:06:54.976 --> 00:06:55.746
session along.

00:06:56.046 --> 00:06:57.516
You might need to protect the

00:06:57.576 --> 00:06:59.376
user from having a session

00:06:59.376 --> 00:07:02.426
tracked for certain types of

00:07:02.426 --> 00:07:03.876
applications and perhaps,

00:07:03.876 --> 00:07:05.586
certain types of users this is

00:07:05.586 --> 00:07:07.336
becoming more and more important

00:07:07.336 --> 00:07:09.106
to be aware of these days.

00:07:10.396 --> 00:07:12.216
So whatever your reason is to

00:07:12.216 --> 00:07:13.606
manipulate the cookies visible

00:07:13.606 --> 00:07:15.786
to a WKWebView, the new API,

00:07:15.786 --> 00:07:19.096
WKHTTPCookieStore, will do what

00:07:19.096 --> 00:07:21.496
you need it to do.

00:07:22.316 --> 00:07:25.036
Using the HTTPCookieStore, you

00:07:25.076 --> 00:07:26.876
can add and remove individual

00:07:26.876 --> 00:07:28.376
cookies visible to a WebView.

00:07:29.716 --> 00:07:32.676
Pretty straight forward.

00:07:32.676 --> 00:07:35.226
You can also get a list of all

00:07:35.226 --> 00:07:36.546
of the cookies visible in the

00:07:36.546 --> 00:07:36.806
WebView.

00:07:36.806 --> 00:07:39.096
You know if you're a veteran

00:07:39.576 --> 00:07:41.776
WKWebView user, you might have

00:07:41.776 --> 00:07:43.526
used JavaScript to get the

00:07:43.526 --> 00:07:46.256
cookies visible to the current

00:07:46.256 --> 00:07:48.036
document displayed in a WebView

00:07:49.066 --> 00:07:50.196
but when you do that, you didn't

00:07:50.196 --> 00:07:52.736
get at the http only cookies

00:07:52.886 --> 00:07:53.706
that are supposed to be hidden

00:07:53.706 --> 00:07:54.456
from JavaScript.

00:07:55.216 --> 00:07:56.376
Now that is possible.

00:07:56.676 --> 00:08:00.926
And then finally it adds a

00:08:00.926 --> 00:08:02.566
mechanism for you to observe

00:08:02.566 --> 00:08:03.846
changes to the cookie store.

00:08:04.586 --> 00:08:06.076
While you might be specifically

00:08:06.076 --> 00:08:07.996
adding or removing cookies from

00:08:07.996 --> 00:08:10.216
the cookie store, any resource

00:08:10.216 --> 00:08:11.536
requests that goes to a server

00:08:11.536 --> 00:08:13.066
and comes back could also add

00:08:13.066 --> 00:08:15.046
new cookies to the store or

00:08:15.046 --> 00:08:16.706
JavaScript executed in a page

00:08:16.836 --> 00:08:17.936
could add new cookies.

00:08:18.276 --> 00:08:20.156
And you can now observe those

00:08:20.156 --> 00:08:20.706
changes.

00:08:22.626 --> 00:08:24.896
So you can get to a specific

00:08:24.896 --> 00:08:27.276
WKWebView cookie's store through

00:08:27.276 --> 00:08:28.636
its website data store.

00:08:29.286 --> 00:08:30.466
This is already a property

00:08:30.466 --> 00:08:31.826
that's exposed on a WebView's

00:08:31.826 --> 00:08:32.626
configuration.

00:08:32.926 --> 00:08:34.326
And now the website data store

00:08:34.326 --> 00:08:35.966
itself has a new property to get

00:08:35.966 --> 00:08:36.635
to the cookie store.

00:08:36.635 --> 00:08:42.025
To add a cookie, you use the

00:08:42.025 --> 00:08:44.145
already established HTTPCookie

00:08:44.145 --> 00:08:46.316
API to construct the cookie

00:08:46.316 --> 00:08:47.596
object you'd like to put in the

00:08:47.596 --> 00:08:48.106
data store.

00:08:48.896 --> 00:08:52.376
The specifics of this are up to

00:08:52.376 --> 00:08:53.986
you and the web service you are

00:08:53.986 --> 00:08:56.166
interacting with but once you

00:08:56.166 --> 00:08:57.176
have the cookie all set and

00:08:57.176 --> 00:08:59.706
ready to go, you'll call set

00:08:59.736 --> 00:09:00.956
cookie on the cookie store with

00:09:00.996 --> 00:09:01.396
your cookie.

00:09:02.506 --> 00:09:03.416
Now you'll notice there's your

00:09:03.416 --> 00:09:04.526
trailing closure here, a

00:09:04.526 --> 00:09:05.436
completion handler.

00:09:05.906 --> 00:09:08.316
This process is asynchronous and

00:09:08.316 --> 00:09:09.736
it needs to send out to all

00:09:09.736 --> 00:09:12.106
those processes involved in the

00:09:12.106 --> 00:09:14.516
WKWebView mechanism that are

00:09:14.516 --> 00:09:15.916
isolated from your application.

00:09:16.106 --> 00:09:18.146
So you need to wait until WebKit

00:09:18.146 --> 00:09:19.696
decides it's all done and ready

00:09:19.696 --> 00:09:20.096
to go.

00:09:20.096 --> 00:09:21.966
And you can be confident in your

00:09:21.966 --> 00:09:23.716
completion handler that any

00:09:23.716 --> 00:09:25.016
request you load in the WebView

00:09:25.356 --> 00:09:26.866
will have that cookie applied.

00:09:30.176 --> 00:09:31.546
If you need to manipulate the

00:09:31.546 --> 00:09:33.776
existing cookies, you can get at

00:09:33.776 --> 00:09:34.956
the set of all cookies.

00:09:36.006 --> 00:09:37.156
Again in your completion

00:09:37.156 --> 00:09:38.586
handler, you'll have a set of

00:09:38.586 --> 00:09:39.676
the cookies and you can walk

00:09:39.676 --> 00:09:40.796
through and find the right one.

00:09:41.386 --> 00:09:42.616
In this illustration, we're

00:09:42.806 --> 00:09:44.386
going for logging the user out

00:09:44.386 --> 00:09:45.756
by finding the log in cookie.

00:09:46.286 --> 00:09:49.336
And then we'll call delete and

00:09:49.336 --> 00:09:50.136
get rid of that cookie.

00:09:50.986 --> 00:09:52.166
And again, in our completion

00:09:52.166 --> 00:09:53.896
handler, we will know that any

00:09:53.896 --> 00:09:55.116
future requests in the WebView

00:09:55.356 --> 00:09:56.516
will have that cookie removed.

00:09:56.906 --> 00:09:58.286
And those are the basics of

00:09:58.286 --> 00:10:00.016
managing cookies using

00:10:00.066 --> 00:10:01.496
WKHTTPCookieStore.

00:10:02.086 --> 00:10:03.376
We'll see a little bit more

00:10:03.376 --> 00:10:04.936
about that later but I'd like to

00:10:04.936 --> 00:10:07.476
move on to filtering unwanted

00:10:08.836 --> 00:10:09.086
content.

00:10:10.126 --> 00:10:11.786
When you a load page in a

00:10:11.786 --> 00:10:13.656
WebView, an HTML document,

00:10:14.436 --> 00:10:15.776
there's all those sub resources

00:10:15.926 --> 00:10:17.016
that are loaded that I already

00:10:17.016 --> 00:10:17.446
mentioned.

00:10:18.566 --> 00:10:20.106
And there's a number of reasons

00:10:20.106 --> 00:10:21.566
why you need to make on a

00:10:21.566 --> 00:10:23.956
resource by resource basis a

00:10:23.956 --> 00:10:25.216
decision about whether or not to

00:10:25.216 --> 00:10:27.216
load the resource or otherwise,

00:10:27.216 --> 00:10:28.286
change how the resource is

00:10:28.286 --> 00:10:28.676
loaded.

00:10:29.226 --> 00:10:31.596
A common case we hear from

00:10:31.596 --> 00:10:33.496
developers is they're working on

00:10:33.496 --> 00:10:36.076
a browser targeted for schools,

00:10:36.076 --> 00:10:37.756
libraries, some other public

00:10:37.756 --> 00:10:40.586
place where the content loaded

00:10:40.586 --> 00:10:41.886
in the browser has to be family

00:10:41.886 --> 00:10:42.316
friendly.

00:10:42.616 --> 00:10:43.786
So we need to filter out

00:10:43.786 --> 00:10:45.466
everything is not family

00:10:45.466 --> 00:10:45.796
friendly.

00:10:46.316 --> 00:10:50.206
In a similar vane, we've heard

00:10:50.206 --> 00:10:51.156
from developers working on

00:10:51.156 --> 00:10:52.896
corporate intranet applications

00:10:53.336 --> 00:10:54.596
that they have varying needs

00:10:54.596 --> 00:10:55.476
within the same app.

00:10:55.556 --> 00:10:57.576
One WebView might need to block

00:10:57.576 --> 00:10:59.506
all content that is not coming

00:10:59.506 --> 00:11:00.596
from the corporate's network.

00:11:01.036 --> 00:11:02.266
Another WebView might need to

00:11:02.266 --> 00:11:04.326
block all content coming from

00:11:04.446 --> 00:11:05.996
certain specific servers.

00:11:06.486 --> 00:11:07.936
You can have each WebView setup

00:11:08.296 --> 00:11:10.976
to do its own thing on a per sub

00:11:10.976 --> 00:11:11.866
resource basis.

00:11:15.536 --> 00:11:16.866
And then there's insecure

00:11:16.866 --> 00:11:17.356
content.

00:11:17.966 --> 00:11:19.396
We can upgrade it to be as

00:11:19.396 --> 00:11:21.306
secure as we possibly know how.

00:11:21.716 --> 00:11:23.446
This can help keep our user's

00:11:23.446 --> 00:11:25.266
data and their browsing activity

00:11:25.426 --> 00:11:26.896
and our app's browsing activity

00:11:27.436 --> 00:11:28.836
hidden from prying eyes.

00:11:32.116 --> 00:11:35.526
So the new WKContentRuleList API

00:11:35.526 --> 00:11:37.986
will help you do all of these

00:11:39.956 --> 00:11:40.086
things.

00:11:40.286 --> 00:11:42.386
Now if you're familiar with

00:11:42.986 --> 00:11:44.916
Safari content blocking

00:11:44.966 --> 00:11:47.076
extensions where you provide a

00:11:47.076 --> 00:11:49.676
rule set to configure Safari to

00:11:49.676 --> 00:11:51.326
block certain resources loads,

00:11:52.226 --> 00:11:54.766
the ContentRuleList has the same

00:11:54.866 --> 00:11:56.536
syntax as those content blocker

00:11:56.536 --> 00:11:57.126
extensions.

00:11:57.526 --> 00:12:01.276
With them, you can block

00:12:01.396 --> 00:12:04.406
specific resource loads by --

00:12:04.666 --> 00:12:06.636
for example, matching the url of

00:12:06.636 --> 00:12:07.876
the resource to a regular

00:12:07.876 --> 00:12:08.396
expression.

00:12:08.686 --> 00:12:10.016
You might be able to tell WebKit

00:12:10.016 --> 00:12:11.706
ahead of time don't ever load

00:12:11.926 --> 00:12:12.886
such urls.

00:12:13.236 --> 00:12:17.436
In some cases, if you block a

00:12:17.436 --> 00:12:19.176
resource load all together, you

00:12:19.176 --> 00:12:21.246
can break the webpage in subtle,

00:12:21.346 --> 00:12:22.906
sometimes not so subtle ways.

00:12:23.466 --> 00:12:25.296
So there is a rule action where

00:12:25.296 --> 00:12:26.716
you can tell WebKit to perform

00:12:26.716 --> 00:12:28.386
the load but make the resulting

00:12:28.386 --> 00:12:29.576
content invisible.

00:12:29.976 --> 00:12:34.926
And then finally we can upgrade

00:12:34.926 --> 00:12:37.356
those insecure resource loads to

00:12:37.356 --> 00:12:38.396
be secure loads.

00:12:39.126 --> 00:12:40.216
This comes in two important

00:12:40.216 --> 00:12:40.726
forms.

00:12:40.896 --> 00:12:45.156
One is any http plain text url

00:12:45.646 --> 00:12:47.446
that is come across, you can

00:12:47.446 --> 00:12:49.306
upgrade it to be an encrypted

00:12:49.306 --> 00:12:50.196
https url.

00:12:51.336 --> 00:12:54.146
And you can also block cookies

00:12:54.446 --> 00:12:56.156
from being sent out with certain

00:12:56.156 --> 00:12:56.876
requests.

00:12:57.336 --> 00:12:58.576
If the requests are to a

00:12:58.576 --> 00:13:01.026
resource of a sensitive nature,

00:13:01.156 --> 00:13:03.526
you can prevent your user's data

00:13:03.526 --> 00:13:05.116
and session state from leaking

00:13:05.116 --> 00:13:06.216
out with those requests.

00:13:08.516 --> 00:13:11.646
When you provide your rule list

00:13:11.646 --> 00:13:14.886
to WebKit, WebKit compiles into

00:13:15.096 --> 00:13:16.846
an efficient byte code format.

00:13:17.066 --> 00:13:19.336
This is kind of an

00:13:19.336 --> 00:13:21.166
implementation detail that's not

00:13:21.166 --> 00:13:22.506
directly relevant to you.

00:13:22.726 --> 00:13:25.126
I'm bringing it up because I

00:13:25.126 --> 00:13:26.636
want to assure you that a

00:13:26.636 --> 00:13:28.666
content rule list even a large

00:13:28.756 --> 00:13:31.626
set of thousands of rules we've

00:13:31.626 --> 00:13:32.966
been spending a lot of time

00:13:32.966 --> 00:13:33.986
working on making that as

00:13:34.326 --> 00:13:35.496
efficient as possible.

00:13:35.496 --> 00:13:36.976
And no matter how big your rule

00:13:36.976 --> 00:13:38.636
set is, if it compiles

00:13:38.636 --> 00:13:40.666
successfully you should not see

00:13:40.666 --> 00:13:41.866
degradation in loading

00:13:41.866 --> 00:13:42.546
performance.

00:13:46.906 --> 00:13:49.106
You supply your rules in a

00:13:49.106 --> 00:13:51.066
simple JSON format.

00:13:52.196 --> 00:13:54.586
The JSON has pairs of triggers

00:13:55.146 --> 00:13:55.986
and actions.

00:13:56.746 --> 00:13:58.286
In this example up on the

00:13:58.286 --> 00:14:01.456
screen, the trigger is matching

00:14:01.456 --> 00:14:03.376
a url that is a url.

00:14:03.476 --> 00:14:04.906
It's for every single url that's

00:14:04.906 --> 00:14:05.946
a regular expression that says

00:14:06.356 --> 00:14:09.436
for all urls take the action of

00:14:09.436 --> 00:14:11.566
making the url https.

00:14:12.286 --> 00:14:15.466
So this is a common and

00:14:15.466 --> 00:14:17.996
important shotgun approach to

00:14:17.996 --> 00:14:19.716
upgrading all plain text

00:14:19.876 --> 00:14:22.866
requests to be encrypted ones.

00:14:23.196 --> 00:14:26.456
I'm not going to go into the

00:14:26.456 --> 00:14:27.936
other actions and triggers that

00:14:27.936 --> 00:14:30.926
are available right here because

00:14:30.926 --> 00:14:31.996
I have so much more I'd like to

00:14:31.996 --> 00:14:33.826
talk about today but there are

00:14:33.826 --> 00:14:35.456
resources that we will refer you

00:14:35.456 --> 00:14:37.586
to to get the full breadth of

00:14:37.586 --> 00:14:39.126
what is available to you.

00:14:40.696 --> 00:14:43.046
Once you have your JSON, you'll

00:14:43.046 --> 00:14:44.746
pass it to the related new API,

00:14:44.786 --> 00:14:47.486
WKContentRuleListStore, to

00:14:47.486 --> 00:14:49.336
compile it into that efficient

00:14:49.336 --> 00:14:50.766
byte code format.

00:14:52.716 --> 00:14:54.556
Now notice there's a string

00:14:54.626 --> 00:14:56.086
identifier passed in.

00:14:56.536 --> 00:14:58.146
It's up to you to come up with

00:14:58.146 --> 00:14:59.896
what the string is and it will

00:14:59.896 --> 00:15:01.636
be relevant in just a little

00:15:02.166 --> 00:15:02.266
bit.

00:15:04.456 --> 00:15:06.466
You'll have a completion handler

00:15:06.466 --> 00:15:07.556
and when your completion handler

00:15:07.556 --> 00:15:08.316
is called with the

00:15:08.316 --> 00:15:10.586
WKContentRuleList, you can

00:15:10.586 --> 00:15:11.916
create a WebView with that rule

00:15:11.916 --> 00:15:14.016
list installed and start loading

00:15:14.016 --> 00:15:16.246
content -- start loading web

00:15:16.246 --> 00:15:17.776
content that filters out

00:15:17.776 --> 00:15:19.156
unwanted sub resources.

00:15:19.426 --> 00:15:22.756
So that identifier.

00:15:23.746 --> 00:15:25.396
When we compile a rule list from

00:15:25.396 --> 00:15:27.176
JSON to the efficient byte code

00:15:27.176 --> 00:15:28.916
format, you can name it.

00:15:29.306 --> 00:15:31.286
And then later you can look up

00:15:31.286 --> 00:15:33.126
by the same identifier so you

00:15:33.126 --> 00:15:34.426
don't have to compile it again.

00:15:34.656 --> 00:15:36.976
WebKit stores it on the storage

00:15:36.976 --> 00:15:39.546
of the device and can look it up

00:15:39.546 --> 00:15:40.376
much quicker later.

00:15:40.876 --> 00:15:42.066
So you can -- you only need to

00:15:42.066 --> 00:15:43.906
compile a certain rule set once.

00:15:44.256 --> 00:15:47.326
Once you have your

00:15:47.326 --> 00:15:50.486
WKContentRuleList as I just

00:15:50.486 --> 00:15:51.756
mentioned, you add it to the

00:15:51.756 --> 00:15:53.946
WebView's configuration and now

00:15:54.056 --> 00:15:54.716
you're ready to go.

00:15:55.296 --> 00:15:57.306
I believe there's no better way

00:15:57.306 --> 00:15:59.096
to see what cool new APIs can do

00:15:59.096 --> 00:16:00.346
other than a demo.

00:16:00.446 --> 00:16:01.936
So I'd like to invite Alex on

00:16:01.936 --> 00:16:03.406
the stage to show you a little

00:16:03.406 --> 00:16:03.746
bit more.

00:16:04.516 --> 00:16:09.996
[ Applause ]

00:16:10.496 --> 00:16:11.346
>> Thanks Brady.

00:16:13.396 --> 00:16:16.646
I am making an app and it's an

00:16:16.646 --> 00:16:17.516
educational app.

00:16:17.896 --> 00:16:20.236
And it will help people to learn

00:16:20.236 --> 00:16:22.456
something more about a subject

00:16:23.226 --> 00:16:25.226
that makes me very happy and

00:16:25.226 --> 00:16:26.566
that is dogs.

00:16:27.696 --> 00:16:30.706
And so my users are going to

00:16:30.706 --> 00:16:31.796
read articles online.

00:16:33.066 --> 00:16:34.916
They're going to take a quiz on

00:16:34.916 --> 00:16:36.386
these articles and then they are

00:16:36.386 --> 00:16:38.376
going to receive a diploma.

00:16:39.556 --> 00:16:41.396
So since I am going to be

00:16:41.396 --> 00:16:42.716
showing web content and

00:16:42.716 --> 00:16:44.156
integrating into my app, I'm

00:16:44.156 --> 00:16:46.326
going to use WKWebView.

00:16:53.456 --> 00:16:54.246
There we go.

00:16:55.086 --> 00:16:58.896
We have a very simple app that

00:16:58.896 --> 00:17:01.426
basically does nothing but open

00:17:01.516 --> 00:17:03.696
a WKWebView and open up the web

00:17:03.696 --> 00:17:05.526
content in that WKWebView.

00:17:06.086 --> 00:17:08.006
Let's see what it looks like

00:17:08.006 --> 00:17:11.606
right out of the box.

00:17:11.766 --> 00:17:13.945
Okay. So this web service checks

00:17:14.596 --> 00:17:18.185
the http header for the presence

00:17:18.185 --> 00:17:21.685
of a cookie to indicate who the

00:17:21.685 --> 00:17:25.076
student is and if there is no

00:17:25.076 --> 00:17:27.406
cookie, then it will forward us

00:17:27.406 --> 00:17:28.415
to a log in screen.

00:17:29.716 --> 00:17:32.576
And we could click here to log

00:17:32.576 --> 00:17:33.086
in.

00:17:34.276 --> 00:17:37.596
And we could log in but this

00:17:38.066 --> 00:17:39.726
user experience can be improved

00:17:39.726 --> 00:17:44.666
upon and maybe we've already

00:17:44.666 --> 00:17:46.076
logged into the app using the

00:17:46.076 --> 00:17:47.056
touch ID or something.

00:17:47.516 --> 00:17:49.076
And we know how to communicate

00:17:49.076 --> 00:17:50.256
with this web service.

00:17:51.076 --> 00:17:52.556
The fact that this student is

00:17:52.556 --> 00:17:53.996
logged in with a cookie.

00:17:54.296 --> 00:17:56.566
So we're going to do just that.

00:18:02.636 --> 00:18:04.616
To do that, we need to make an

00:18:04.616 --> 00:18:05.426
http cookie.

00:18:06.396 --> 00:18:09.406
We need to put this cookie into

00:18:09.406 --> 00:18:10.546
a website data store's

00:18:10.626 --> 00:18:14.666
httpCookieStore using the new

00:18:14.666 --> 00:18:16.426
API set cookie.

00:18:17.176 --> 00:18:21.616
And then once that's done, we

00:18:21.616 --> 00:18:24.236
need to tell the WKWebView to

00:18:24.406 --> 00:18:27.566
use the website data store that

00:18:27.626 --> 00:18:30.136
has the cookie inside of it and

00:18:30.136 --> 00:18:32.006
we do so through the WKWebView

00:18:32.006 --> 00:18:32.786
configuration.

00:18:34.076 --> 00:18:34.636
Right here.

00:18:36.126 --> 00:18:38.566
Set the website data store to be

00:18:38.566 --> 00:18:40.576
the one that has a cookie in it.

00:18:40.576 --> 00:18:41.666
And then we proceed as we did

00:18:41.666 --> 00:18:42.096
before.

00:18:42.686 --> 00:18:43.886
Use this configuration.

00:18:44.086 --> 00:18:44.946
Open a WebView.

00:18:45.036 --> 00:18:45.976
Open the web content.

00:18:54.236 --> 00:18:54.896
All right.

00:18:55.096 --> 00:18:56.856
So right off the bat, we are

00:18:56.856 --> 00:18:57.466
logged in.

00:18:57.816 --> 00:19:00.326
Our initial request has this

00:19:00.326 --> 00:19:01.786
http cookie in its header.

00:19:02.486 --> 00:19:06.446
So this article that I want my

00:19:06.446 --> 00:19:09.996
users to read has some sub

00:19:09.996 --> 00:19:12.246
resources that are loaded over

00:19:13.216 --> 00:19:15.026
unencrypted http connections.

00:19:15.946 --> 00:19:18.486
And our app transport security,

00:19:19.726 --> 00:19:21.506
by default, keeps our users safe

00:19:21.536 --> 00:19:22.996
by preventing loads over

00:19:22.996 --> 00:19:25.396
unencrypted http connections.

00:19:26.126 --> 00:19:30.266
And so right here, we see some

00:19:30.376 --> 00:19:33.146
missing images.

00:19:34.046 --> 00:19:36.606
These -- the servers from which

00:19:36.606 --> 00:19:38.696
we wanted to get these images

00:19:39.586 --> 00:19:41.306
are correctly configured with

00:19:41.306 --> 00:19:43.946
https tls certificates on them

00:19:44.576 --> 00:19:46.876
and if we had made an encrypted

00:19:47.166 --> 00:19:49.756
https request, it would have

00:19:49.756 --> 00:19:51.506
responded with the same image.

00:19:52.746 --> 00:19:54.936
So if we wanted to go in and

00:19:55.366 --> 00:19:58.356
take the http url and turn it

00:19:58.356 --> 00:20:01.146
into an https url just before

00:20:01.146 --> 00:20:03.706
the load, then we would receive

00:20:04.406 --> 00:20:06.486
the data that we wanted over a

00:20:06.486 --> 00:20:07.376
secure connection.

00:20:08.536 --> 00:20:11.266
Let's do that using a

00:20:11.566 --> 00:20:12.976
WKContentRuleList.

00:20:21.496 --> 00:20:23.146
Okay. I added a little bit of

00:20:24.686 --> 00:20:24.866
code.

00:20:26.146 --> 00:20:28.616
Here we have the content rule

00:20:28.616 --> 00:20:31.056
list that we want to use.

00:20:31.596 --> 00:20:33.476
In this case we have one rule.

00:20:34.276 --> 00:20:36.926
It contains a trigger which is a

00:20:36.926 --> 00:20:38.116
regular expression that matches

00:20:38.196 --> 00:20:38.726
everything.

00:20:39.296 --> 00:20:40.666
This regular expression is run

00:20:40.666 --> 00:20:42.756
on the urls of each resource

00:20:43.066 --> 00:20:46.226
WebKit is about to fetch.

00:20:46.436 --> 00:20:48.096
The action is make https.

00:20:48.546 --> 00:20:51.566
So if we would have requested an

00:20:51.566 --> 00:20:54.506
unsecure resource, request a

00:20:54.506 --> 00:20:56.086
secure resource basically by

00:20:56.086 --> 00:20:57.816
just adding an s into the

00:20:57.816 --> 00:20:58.216
scheme.

00:20:59.336 --> 00:21:00.946
Once we have this JSON, we need

00:21:00.946 --> 00:21:02.436
to compile the content rule

00:21:03.786 --> 00:21:04.406
list.

00:21:05.146 --> 00:21:07.496
Once this content rule list is

00:21:07.496 --> 00:21:11.546
compiled, we need to take the

00:21:11.546 --> 00:21:15.746
content rule list and add it to

00:21:15.746 --> 00:21:17.276
the WKWebView configuration

00:21:17.656 --> 00:21:19.296
through the user content

00:21:19.296 --> 00:21:21.026
controller and then proceed as

00:21:21.086 --> 00:21:21.416
before.

00:21:22.076 --> 00:21:25.546
So let's see what happens when

00:21:25.546 --> 00:21:26.116
we do this.

00:21:26.116 --> 00:21:30.296
We load the article and these

00:21:30.296 --> 00:21:33.186
resources are now being loaded

00:21:33.186 --> 00:21:34.336
over secure connections.

00:21:35.366 --> 00:21:35.726
All right.

00:21:35.926 --> 00:21:37.776
So we now have an app that

00:21:38.126 --> 00:21:40.546
starts with cookies and it

00:21:40.546 --> 00:21:42.206
promotes all of its insecure

00:21:42.206 --> 00:21:43.936
resources to secure resources.

00:21:44.846 --> 00:21:46.036
Let's hear more about customized

00:21:46.036 --> 00:21:46.826
loading from Brady.

00:21:46.936 --> 00:21:48.936
[ Applause ]

00:21:49.046 --> 00:21:49.836
>> Thank you, Alex.

00:21:52.036 --> 00:21:53.056
Pretty straight forward.

00:21:53.136 --> 00:21:55.186
I do want to reiterate a couple

00:21:55.186 --> 00:21:55.786
of points.

00:21:59.046 --> 00:22:02.496
Alex showed that you can now set

00:22:02.496 --> 00:22:05.486
a cookie in a WKWebView and know

00:22:05.486 --> 00:22:06.986
when the right time is to make a

00:22:06.986 --> 00:22:08.476
request where that cookie will

00:22:08.476 --> 00:22:09.006
be applied.

00:22:09.006 --> 00:22:11.566
And that's enabled by the new

00:22:11.566 --> 00:22:13.086
WKHTTPCookieStore API.

00:22:16.736 --> 00:22:18.296
And then to hammer it home, the

00:22:18.296 --> 00:22:20.646
one little bit of the content

00:22:20.646 --> 00:22:22.066
rule list power that we like

00:22:22.066 --> 00:22:24.186
focusing on is upgrading

00:22:24.386 --> 00:22:26.466
insecure, unencrypted resource

00:22:26.466 --> 00:22:30.296
requests to be https with just

00:22:30.296 --> 00:22:31.686
that simple rule list.

00:22:31.686 --> 00:22:33.046
With one action and one trigger.

00:22:33.566 --> 00:22:34.906
Alex showed how WebKit can

00:22:34.906 --> 00:22:36.566
efficiently do that

00:22:36.566 --> 00:22:38.946
automatically on your behalf.

00:22:42.136 --> 00:22:44.326
And now I'd like to move on to

00:22:44.326 --> 00:22:46.596
our third and final new

00:22:46.596 --> 00:22:48.526
mechanism which is the ability

00:22:48.526 --> 00:22:50.476
to provide custom resources.

00:22:51.016 --> 00:22:54.196
We've heard from a lot of

00:22:54.196 --> 00:22:56.876
developers that they have a

00:22:56.876 --> 00:22:58.386
bundle of web content that they

00:22:58.386 --> 00:22:58.916
control.

00:22:59.786 --> 00:23:00.946
Some of them put it in their

00:23:00.946 --> 00:23:02.056
application bundle.

00:23:02.286 --> 00:23:03.926
Some of them host it on a web

00:23:03.926 --> 00:23:05.376
server that they control.

00:23:05.376 --> 00:23:08.036
And they would like to insert

00:23:08.036 --> 00:23:10.116
into that web content resource

00:23:10.116 --> 00:23:12.176
data local to the user's device.

00:23:12.546 --> 00:23:17.196
One pretty cool app that has

00:23:17.196 --> 00:23:19.606
this need that we've seen is a

00:23:19.606 --> 00:23:21.806
photo book maker where it's

00:23:21.806 --> 00:23:24.716
using entirely web technologies

00:23:24.946 --> 00:23:26.486
to have a photo book layout

00:23:27.266 --> 00:23:28.896
where the company's designers

00:23:28.896 --> 00:23:30.466
are adding new templates for new

00:23:30.466 --> 00:23:31.866
layouts and styles of the photo

00:23:31.866 --> 00:23:33.786
books but they want to access

00:23:33.786 --> 00:23:35.166
photos that are local to the

00:23:35.166 --> 00:23:36.196
user's device.

00:23:37.196 --> 00:23:38.966
And using this new API that will

00:23:38.966 --> 00:23:39.586
be possible.

00:23:41.916 --> 00:23:43.216
There's also a lot of game

00:23:43.216 --> 00:23:44.376
developers out there we hear

00:23:44.376 --> 00:23:46.446
from who have an in game

00:23:46.446 --> 00:23:48.596
newsletter or an in game

00:23:48.736 --> 00:23:50.296
leaderboard that uses web

00:23:50.296 --> 00:23:50.966
technology.

00:23:51.566 --> 00:23:53.556
And they want to integrate local

00:23:53.766 --> 00:23:55.866
experiences from their user's

00:23:55.866 --> 00:23:57.556
local play of the game so their

00:23:57.556 --> 00:24:00.196
user feels more attached to the

00:24:00.196 --> 00:24:02.466
goings on in the game's

00:24:02.466 --> 00:24:03.286
universe.

00:24:03.806 --> 00:24:07.136
These are just a couple of

00:24:07.136 --> 00:24:07.776
examples.

00:24:08.176 --> 00:24:09.816
There's many more things of what

00:24:09.816 --> 00:24:11.606
you can do with the new

00:24:11.606 --> 00:24:13.616
WKURLSchemeHandler API.

00:24:15.876 --> 00:24:18.846
WKURLSchemeHandler allows your

00:24:18.846 --> 00:24:21.036
app to handle resource loads for

00:24:21.036 --> 00:24:23.006
a particularly url scheme.

00:24:23.316 --> 00:24:26.276
Now just so we're all on the

00:24:26.276 --> 00:24:26.976
same page.

00:24:27.086 --> 00:24:28.246
What is an url scheme?

00:24:28.766 --> 00:24:30.646
These are examples of some urls

00:24:30.646 --> 00:24:31.656
we've probably seen.

00:24:32.916 --> 00:24:34.096
And these are the schemes.

00:24:34.826 --> 00:24:36.446
Everything that comes before the

00:24:36.446 --> 00:24:37.076
first colon.

00:24:38.106 --> 00:24:39.486
So referencing custom url

00:24:39.486 --> 00:24:40.536
schemes that WebKit doesn't

00:24:40.536 --> 00:24:43.046
already handle itself, you can

00:24:43.046 --> 00:24:44.786
register a scheme handler to

00:24:44.786 --> 00:24:46.056
handle resource loads to any

00:24:46.056 --> 00:24:47.796
resource that has a url matching

00:24:47.796 --> 00:24:48.306
that scheme.

00:24:48.826 --> 00:24:51.126
In this example, we've

00:24:51.126 --> 00:24:52.446
arbitrarily chosen the scheme

00:24:52.446 --> 00:24:52.866
local.

00:24:52.946 --> 00:24:54.916
Not a standard url scheme that

00:24:54.916 --> 00:24:56.426
WebKit handles itself.

00:24:56.426 --> 00:24:58.126
Not any part of any web standard

00:24:58.126 --> 00:24:59.626
or anything like that.

00:25:00.736 --> 00:25:02.866
But one could conceivably see

00:25:02.866 --> 00:25:04.596
how it could become a web

00:25:04.596 --> 00:25:05.436
standard in the future.

00:25:05.436 --> 00:25:07.206
It might become something WebKit

00:25:07.206 --> 00:25:07.956
handles itself.

00:25:08.106 --> 00:25:09.596
So we'd like to encourage the

00:25:09.906 --> 00:25:11.836
best practice of future proofing

00:25:11.866 --> 00:25:13.456
your custom scheme by name

00:25:13.456 --> 00:25:14.906
spacing it with your company

00:25:14.906 --> 00:25:17.366
name or the app bundle name,

00:25:17.366 --> 00:25:17.956
something like that.

00:25:21.696 --> 00:25:23.466
What is a WKURLSchemeHandler

00:25:23.466 --> 00:25:23.916
itself?

00:25:24.466 --> 00:25:26.256
It's a fairly simple protocol

00:25:26.296 --> 00:25:28.026
that you implement with two

00:25:28.026 --> 00:25:30.506
methods so you are told to start

00:25:30.506 --> 00:25:33.036
loading a scheme task or stop

00:25:33.036 --> 00:25:33.496
loading one.

00:25:33.956 --> 00:25:36.586
We'll get into what the scheme

00:25:36.586 --> 00:25:38.226
task is in a little bit.

00:25:38.716 --> 00:25:39.666
Once you've implemented the

00:25:39.666 --> 00:25:43.426
protocol, you will set the

00:25:43.426 --> 00:25:44.716
scheme handler on the WebView's

00:25:44.716 --> 00:25:46.616
configuration and this is where

00:25:46.616 --> 00:25:48.636
you decide which url scheme you

00:25:48.636 --> 00:25:50.096
want that scheme handler to

00:25:50.096 --> 00:25:51.146
handle custom loads for.

00:25:52.046 --> 00:25:53.616
You can use the same instance of

00:25:53.616 --> 00:25:55.466
your class for all the custom

00:25:55.466 --> 00:25:57.116
url schemes in your app.

00:25:57.496 --> 00:25:59.066
You can have a different class

00:25:59.216 --> 00:26:00.416
for different url schemes.

00:26:00.476 --> 00:26:03.136
You can have different instances

00:26:03.136 --> 00:26:04.356
for all the different schemes or

00:26:04.356 --> 00:26:06.536
have one shared instance for all

00:26:06.536 --> 00:26:06.996
the schemes.

00:26:07.036 --> 00:26:07.666
It's up to you and your

00:26:07.666 --> 00:26:08.766
application's architecture.

00:26:09.286 --> 00:26:14.016
And then you create your WebView

00:26:14.526 --> 00:26:15.786
and load some content in it.

00:26:16.106 --> 00:26:17.896
And any sub resource in that web

00:26:17.896 --> 00:26:19.846
content that references your

00:26:19.846 --> 00:26:21.006
custom url scheme that you

00:26:21.006 --> 00:26:23.566
registered will call back into

00:26:23.566 --> 00:26:24.856
the object that you registered

00:26:24.976 --> 00:26:25.926
with the WKWebView.

00:26:26.336 --> 00:26:29.066
And note that this includes even

00:26:29.306 --> 00:26:31.086
the top level html document

00:26:31.086 --> 00:26:33.396
itself, can be of the custom

00:26:33.396 --> 00:26:34.746
scheme that you registered.

00:26:35.306 --> 00:26:40.466
So what is that WKURLSchemeTask.

00:26:41.476 --> 00:26:43.326
Each task sent to your handler

00:26:43.436 --> 00:26:45.516
represents a specific sub

00:26:45.516 --> 00:26:46.166
resource load.

00:26:47.116 --> 00:26:49.566
The task contains the url

00:26:49.616 --> 00:26:50.746
request object.

00:26:51.416 --> 00:26:53.226
This is the same information

00:26:53.226 --> 00:26:54.966
that would go out to an http

00:26:54.966 --> 00:26:56.646
server if this request was going

00:26:56.646 --> 00:26:57.556
out onto the network.

00:26:58.166 --> 00:26:59.876
It includes a lot of little bits

00:26:59.876 --> 00:27:01.266
of data about the resource but

00:27:01.266 --> 00:27:02.526
very importantly, the url

00:27:02.526 --> 00:27:02.896
itself.

00:27:04.966 --> 00:27:07.136
And then the task has four

00:27:07.386 --> 00:27:09.016
straight forward methods for you

00:27:09.016 --> 00:27:10.526
to communicate loading progress

00:27:10.526 --> 00:27:12.056
back to WebKit for this

00:27:12.056 --> 00:27:12.976
particular resource.

00:27:17.246 --> 00:27:19.706
Once you are given a task and

00:27:19.706 --> 00:27:21.486
told to start loading for it,

00:27:22.336 --> 00:27:23.566
first thing you need to do is

00:27:23.706 --> 00:27:24.776
create a response.

00:27:25.636 --> 00:27:26.856
Just like that url request

00:27:26.856 --> 00:27:28.866
object represents what would go

00:27:28.976 --> 00:27:31.156
to a server on the network, this

00:27:31.156 --> 00:27:32.286
is the response that would come

00:27:32.286 --> 00:27:33.076
back from the server.

00:27:33.476 --> 00:27:35.226
You need to manufacture that.

00:27:36.446 --> 00:27:38.006
Very importantly, in the

00:27:38.006 --> 00:27:39.466
response, you need to include

00:27:39.466 --> 00:27:40.136
the mime type.

00:27:40.416 --> 00:27:42.006
For those of you not yet

00:27:42.006 --> 00:27:43.086
intimately familiar with web

00:27:43.086 --> 00:27:44.536
technologies this is kind of

00:27:44.536 --> 00:27:45.506
like the file type.

00:27:45.806 --> 00:27:47.356
It's you telling WebKit how to

00:27:47.356 --> 00:27:48.286
interpret the resource.

00:27:48.606 --> 00:27:50.326
This is an HTML resource.

00:27:50.446 --> 00:27:55.296
This is a JPEG image, etc. Once

00:27:55.296 --> 00:27:57.226
you have the response, you tell

00:27:57.226 --> 00:27:59.086
the task that the response was

00:27:59.086 --> 00:27:59.436
received.

00:28:00.016 --> 00:28:02.396
In this case, we have all of the

00:28:02.396 --> 00:28:04.066
data for the response in memory

00:28:04.066 --> 00:28:04.536
already.

00:28:04.916 --> 00:28:06.446
So we can immediately pass the

00:28:06.446 --> 00:28:07.956
data back to WebKit for the

00:28:07.956 --> 00:28:08.386
task.

00:28:08.706 --> 00:28:12.476
And then we signal completion of

00:28:12.476 --> 00:28:13.376
the load to WebKit.

00:28:13.476 --> 00:28:14.946
So WebKit isn't waiting for more

00:28:14.946 --> 00:28:18.516
data to come in.

00:28:18.776 --> 00:28:20.446
Again, no better way to

00:28:20.446 --> 00:28:21.856
illustrate other than to see it

00:28:21.856 --> 00:28:22.386
into action.

00:28:22.476 --> 00:28:23.696
So I'd like to invite Alex back

00:28:23.696 --> 00:28:24.246
on to stage.

00:28:26.516 --> 00:28:29.826
[ Applause ]

00:28:30.326 --> 00:28:30.836
>> Thanks Brady.

00:28:32.506 --> 00:28:34.866
So remember in my app, I'm going

00:28:34.866 --> 00:28:36.826
to have my users read articles

00:28:36.826 --> 00:28:39.736
online, take quizzes on those

00:28:39.736 --> 00:28:40.976
articles, and then receive a

00:28:40.976 --> 00:28:41.496
diploma.

00:28:42.166 --> 00:28:43.806
And I have a team of web

00:28:43.806 --> 00:28:45.126
designers who is constantly

00:28:45.126 --> 00:28:46.926
coming up with beautiful diploma

00:28:46.926 --> 00:28:47.436
designs.

00:28:47.906 --> 00:28:49.126
And so I want the users of my

00:28:49.126 --> 00:28:51.126
app to go and fetch these new

00:28:51.126 --> 00:28:54.286
designs from my servers but I

00:28:54.286 --> 00:28:57.116
want each diploma to include a

00:28:57.116 --> 00:28:59.096
picture of the user's avatar and

00:28:59.566 --> 00:29:01.496
I want that to be loaded locally

00:29:01.496 --> 00:29:02.636
on the user's device.

00:29:03.506 --> 00:29:06.916
And so to do this custom local

00:29:06.916 --> 00:29:09.276
loading within WebKit, I am

00:29:09.276 --> 00:29:11.136
going to use a custom scheme.

00:29:12.006 --> 00:29:14.256
Now let me show you the source

00:29:15.116 --> 00:29:17.576
of my diploma.

00:29:21.046 --> 00:29:22.846
Okay. So here I have some HTML.

00:29:23.656 --> 00:29:24.556
And I have an image.

00:29:25.346 --> 00:29:27.196
And its source has a url with a

00:29:27.196 --> 00:29:28.016
custom scheme.

00:29:28.746 --> 00:29:31.076
In this case, canine school dash

00:29:32.496 --> 00:29:33.776
avatar.

00:29:33.776 --> 00:29:38.286
And if I open this in a browser

00:29:38.286 --> 00:29:41.436
or in a WKWebView the WKWebView

00:29:41.816 --> 00:29:43.126
won't know what to do with this.

00:29:43.126 --> 00:29:45.386
Let me show you what that looks

00:29:45.386 --> 00:29:45.976
like really quick.

00:29:49.156 --> 00:29:49.866
Take the quiz.

00:29:51.296 --> 00:29:52.796
Dogs. Yes.

00:29:53.476 --> 00:29:56.746
Okay. So here I have my

00:29:56.746 --> 00:29:57.726
beautiful diploma.

00:29:58.636 --> 00:30:01.486
And I have a missing image tag

00:30:02.046 --> 00:30:04.946
because WebKit tried to load a

00:30:05.016 --> 00:30:07.196
resource that had the school --

00:30:07.276 --> 00:30:09.746
that had the scheme canine

00:30:09.746 --> 00:30:11.806
school dash avatar and WebKit

00:30:11.806 --> 00:30:13.316
doesn't know what to do with

00:30:13.366 --> 00:30:14.086
such a scheme.

00:30:15.106 --> 00:30:18.366
So we can use the

00:30:18.366 --> 00:30:22.096
WKURLSchemeHandler to teach this

00:30:22.206 --> 00:30:24.996
WKWebView what to do with such a

00:30:24.996 --> 00:30:25.366
request.

00:30:27.046 --> 00:30:29.536
Okay. So I added a bit of code.

00:30:29.846 --> 00:30:34.606
I have an object, a class that

00:30:34.606 --> 00:30:37.036
implements WKURLSchemeHandler

00:30:37.776 --> 00:30:39.446
and there's a bit of code.

00:30:39.446 --> 00:30:40.356
I'll get back to this in a

00:30:40.356 --> 00:30:40.766
second.

00:30:42.396 --> 00:30:44.936
But down here, in my WKWebView

00:30:44.936 --> 00:30:47.496
configuration, I need to call

00:30:47.496 --> 00:30:49.236
the new method set

00:30:49.236 --> 00:30:52.586
URLSchemeHandler with an

00:30:52.586 --> 00:30:54.366
instance of my class that

00:30:54.366 --> 00:30:55.446
implements url,

00:30:55.596 --> 00:31:00.636
WKURLSchemeHandler and then I

00:31:00.636 --> 00:31:02.946
need to tell WebKit what url

00:31:02.946 --> 00:31:05.316
scheme this class is going to

00:31:05.316 --> 00:31:07.526
handle the requests of.

00:31:10.256 --> 00:31:12.006
In my class implementation,

00:31:14.036 --> 00:31:17.766
implementing WKURLSchemeHandler

00:31:18.166 --> 00:31:20.076
means I have these two methods.

00:31:20.456 --> 00:31:22.206
Start and stop.

00:31:24.216 --> 00:31:25.906
Start is called by the web

00:31:25.906 --> 00:31:29.336
content when a request for this

00:31:29.366 --> 00:31:30.596
scheme is generated.

00:31:31.316 --> 00:31:33.246
So in this case, when the web

00:31:33.246 --> 00:31:35.266
content wants to load my image.

00:31:35.876 --> 00:31:40.486
It's my job to respond to this

00:31:40.486 --> 00:31:43.166
request using this url scheme

00:31:44.006 --> 00:31:44.226
task.

00:31:45.616 --> 00:31:47.856
In my case, I'm going to pull up

00:31:47.856 --> 00:31:49.066
an image picker and allow the

00:31:49.066 --> 00:31:50.646
user to pick an image.

00:31:50.646 --> 00:31:51.826
So I don't need to respond

00:31:51.826 --> 00:31:52.416
immediately.

00:31:53.786 --> 00:31:56.736
If the WKWebView calls my stop

00:31:56.736 --> 00:31:59.076
method while this happening,

00:31:59.706 --> 00:32:01.536
then it -- I shouldn't respond

00:32:01.626 --> 00:32:03.976
to that request anymore because

00:32:03.976 --> 00:32:05.666
it was cancelled or something

00:32:05.666 --> 00:32:05.946
like that.

00:32:10.236 --> 00:32:12.636
Down here once my image picker

00:32:12.636 --> 00:32:14.756
is done, I will have my data.

00:32:15.606 --> 00:32:18.166
In this case, I will JPEG encode

00:32:18.166 --> 00:32:18.336
it.

00:32:19.486 --> 00:32:20.836
And I need to call these three

00:32:20.836 --> 00:32:21.176
methods.

00:32:22.136 --> 00:32:23.736
Did receive response.

00:32:24.866 --> 00:32:27.916
Did receive data and did finish.

00:32:29.776 --> 00:32:31.706
Did receive data is special.

00:32:31.706 --> 00:32:33.526
I can call it more than once as

00:32:33.656 --> 00:32:35.616
the data is generated or as its

00:32:35.616 --> 00:32:38.996
received or however I want to

00:32:38.996 --> 00:32:39.926
provide this data.

00:32:40.226 --> 00:32:41.496
In this case, I'm only calling

00:32:41.496 --> 00:32:43.116
it once because I have the

00:32:43.116 --> 00:32:46.646
entire data of the response, the

00:32:46.646 --> 00:32:48.556
JPEG encoded image in one

00:32:48.556 --> 00:32:48.916
buffer.

00:32:51.896 --> 00:32:53.796
So let's see what happens when I

00:32:53.796 --> 00:32:54.906
have this implemented.

00:33:02.276 --> 00:33:04.276
Okay. I'm already logged in

00:33:04.746 --> 00:33:05.656
because I have the cookie.

00:33:06.516 --> 00:33:08.006
Everything is loaded securely.

00:33:08.186 --> 00:33:11.396
I take the quiz.

00:33:12.086 --> 00:33:13.496
Dogs. Yes.

00:33:15.056 --> 00:33:17.506
Okay. So this image picker comes

00:33:17.506 --> 00:33:21.076
up because this start method has

00:33:21.076 --> 00:33:21.536
been called.

00:33:22.276 --> 00:33:26.706
I go into my camera roll and I

00:33:26.826 --> 00:33:29.356
choose my avatar photo that I

00:33:29.356 --> 00:33:31.246
want to be in my web content.

00:33:31.966 --> 00:33:34.946
And then because of calling

00:33:34.946 --> 00:33:38.136
those methods on the task, I now

00:33:38.136 --> 00:33:40.136
have that data in my web

00:33:40.176 --> 00:33:40.666
content.

00:33:41.256 --> 00:33:42.406
So I now have an application

00:33:42.406 --> 00:33:44.496
that manages its cookies, that

00:33:44.496 --> 00:33:46.566
uses a content rule list to

00:33:46.566 --> 00:33:49.246
upgrade insecure requests, and

00:33:49.246 --> 00:33:51.386
that does custom loading through

00:33:52.206 --> 00:33:55.706
a WKURLSchemeHandler.

00:33:56.586 --> 00:33:57.186
Back to Brady.

00:33:58.516 --> 00:34:00.576
[ Applause ]

00:34:01.076 --> 00:34:02.366
>> So to reiterate once again,

00:34:02.676 --> 00:34:04.726
what we just saw, Alex show us

00:34:04.726 --> 00:34:05.206
in code.

00:34:06.196 --> 00:34:07.776
He chose a future proof url

00:34:07.776 --> 00:34:08.186
scheme.

00:34:09.005 --> 00:34:10.646
A best practice that I want to

00:34:10.646 --> 00:34:12.766
reiterate a few times to make

00:34:12.766 --> 00:34:14.206
sure you don't choose a scheme

00:34:14.376 --> 00:34:15.636
that might become some sort of

00:34:15.636 --> 00:34:16.755
standardized schema in the

00:34:16.755 --> 00:34:17.126
future.

00:34:17.485 --> 00:34:21.686
And then he showed something I

00:34:21.686 --> 00:34:23.556
hadn't even explicitly mentioned

00:34:23.636 --> 00:34:24.815
which is that you can provide

00:34:24.815 --> 00:34:26.616
the data for a task

00:34:26.856 --> 00:34:27.696
asynchronously.

00:34:28.576 --> 00:34:29.866
You might generate the data

00:34:29.866 --> 00:34:30.516
locally.

00:34:30.676 --> 00:34:32.016
You might have the user take a

00:34:32.016 --> 00:34:32.525
picture.

00:34:32.946 --> 00:34:34.216
You might do your own networking

00:34:34.216 --> 00:34:34.846
to get the data.

00:34:35.126 --> 00:34:36.466
However long it takes for you to

00:34:36.466 --> 00:34:38.096
get the data you can provide it

00:34:38.096 --> 00:34:39.946
back to WebKit asynchronously.

00:34:44.045 --> 00:34:45.446
So that is it for all the new

00:34:45.446 --> 00:34:47.426
stuff I have to talk you about

00:34:47.426 --> 00:34:47.735
today.

00:34:48.306 --> 00:34:49.146
Today we went over

00:34:49.386 --> 00:34:52.755
WKHTTPCookieStore, the new API

00:34:52.755 --> 00:34:54.565
for managing cookies in your

00:34:54.565 --> 00:34:55.576
WKWebViews.

00:34:56.126 --> 00:34:58.936
We talked about

00:34:58.936 --> 00:35:01.866
WKContentRuleList, a fast and

00:35:01.866 --> 00:35:04.386
efficient way to filter unwanted

00:35:04.386 --> 00:35:06.886
content from your WKWebViews.

00:35:07.396 --> 00:35:10.586
And we talked about

00:35:10.586 --> 00:35:14.036
WKURLSchemeHandler, a fantastic

00:35:14.036 --> 00:35:16.266
way for you to provide custom

00:35:16.266 --> 00:35:18.586
resources to web content no

00:35:18.586 --> 00:35:20.006
matter where that web content

00:35:20.006 --> 00:35:20.626
comes from.

00:35:21.176 --> 00:35:25.366
I'd like to reiterate one more

00:35:25.366 --> 00:35:27.186
time that we came up with these

00:35:27.186 --> 00:35:28.826
new APIs and worked hard on them

00:35:29.056 --> 00:35:30.846
because of developer feedback

00:35:31.066 --> 00:35:32.576
that we've gotten from all of

00:35:32.576 --> 00:35:32.866
you.

00:35:33.296 --> 00:35:34.836
And we'd like you to continue

00:35:34.836 --> 00:35:36.676
giving us your feedback so we

00:35:36.676 --> 00:35:38.426
can gather it and come up with

00:35:38.966 --> 00:35:41.086
the next great new features that

00:35:41.086 --> 00:35:42.846
will exist in future versions of

00:35:42.846 --> 00:35:43.546
WKWebView.

00:35:44.446 --> 00:35:46.246
For more information, please

00:35:46.246 --> 00:35:48.086
visit the website for this

00:35:48.086 --> 00:35:50.276
session and there are some

00:35:50.276 --> 00:35:51.966
related sessions I'd encourage

00:35:51.966 --> 00:35:52.766
you to look into.

00:35:53.296 --> 00:35:54.526
Tomorrow morning we're going to

00:35:54.526 --> 00:35:55.566
talk about some great new things

00:35:55.566 --> 00:35:56.686
in Safari View Controller.

00:35:56.776 --> 00:35:58.296
So if you are interested in

00:35:58.296 --> 00:36:00.186
adding a powerful in app web

00:36:00.186 --> 00:36:01.216
browsing experience to your

00:36:01.216 --> 00:36:03.746
application, please come see

00:36:03.746 --> 00:36:04.666
that.

00:36:05.236 --> 00:36:07.056
And we also have -- well some

00:36:07.056 --> 00:36:09.186
old talks about when we first

00:36:09.186 --> 00:36:11.026
introduced the WKWebView API.

00:36:11.026 --> 00:36:13.056
And also when we introduced

00:36:13.056 --> 00:36:14.006
those content blocking

00:36:14.006 --> 00:36:15.296
extensions for Safari.

00:36:15.886 --> 00:36:17.676
That's where you can get a lot

00:36:17.676 --> 00:36:19.596
of detail on the powerful rule

00:36:19.596 --> 00:36:21.516
set that is available to you

00:36:21.516 --> 00:36:23.216
using WKContentRuleList.

00:36:24.556 --> 00:36:25.646
Thanks for coming and I hope you

00:36:25.646 --> 00:36:27.056
have a great rest of WWDC.

00:36:27.056 --> 00:36:28.000
[ Applause ]