WEBVTT

00:00:20.516 --> 00:00:22.916
[ Applause ]

00:00:23.416 --> 00:00:23.596
>> Morning.

00:00:25.956 --> 00:00:28.146
Welcome to Advances in TVMLKit.

00:00:28.526 --> 00:00:29.146
I'm Trevor.

00:00:29.146 --> 00:00:30.486
I work in Localization, and

00:00:30.486 --> 00:00:31.526
later, I'll be joined by my

00:00:31.526 --> 00:00:32.936
colleagues, Parry and Jeremy,

00:00:32.936 --> 00:00:33.866
from tvOS.

00:00:34.366 --> 00:00:35.656
Today, we are really excited to

00:00:35.656 --> 00:00:37.146
talk to you about three new

00:00:37.146 --> 00:00:39.586
advances that we have made.

00:00:39.586 --> 00:00:41.226
TVMLKit is Apple's developer

00:00:41.226 --> 00:00:42.586
framework for building native

00:00:42.586 --> 00:00:45.246
applications for Apple TV using

00:00:45.466 --> 00:00:47.356
JavaScript and a markup language

00:00:47.356 --> 00:00:48.646
that we call TVML.

00:00:51.376 --> 00:00:52.716
I am going to get things started

00:00:52.716 --> 00:00:54.146
by talking about right-to-left

00:00:54.146 --> 00:00:54.786
languages.

00:00:55.166 --> 00:00:56.866
Then Parry will show us how to

00:00:56.866 --> 00:00:57.876
take advantage of new

00:00:57.876 --> 00:00:59.426
optimizations in your templates,

00:00:59.696 --> 00:01:01.066
to take performance to the next

00:01:01.066 --> 00:01:01.376
level.

00:01:02.016 --> 00:01:03.456
Finally, Jeremy will show us

00:01:03.456 --> 00:01:04.995
some awesome new features that

00:01:04.995 --> 00:01:06.376
you can use in the Web Inspector

00:01:06.436 --> 00:01:07.286
to make debugging your

00:01:07.286 --> 00:01:08.826
applications easier than ever.

00:01:09.316 --> 00:01:10.636
So let's dive right in with

00:01:10.636 --> 00:01:11.896
right-to-left language support.

00:01:14.836 --> 00:01:16.456
Arabic and Hebrew are

00:01:16.456 --> 00:01:17.996
newly-selectable languages in

00:01:17.996 --> 00:01:18.946
tvOS 11.

00:01:20.206 --> 00:01:22.386
With over 400 million speakers

00:01:22.386 --> 00:01:23.806
worldwide, this is a huge

00:01:23.806 --> 00:01:25.436
opportunity for you developers

00:01:25.666 --> 00:01:27.106
to reach new audiences with your

00:01:28.276 --> 00:01:28.416
app.

00:01:28.416 --> 00:01:29.626
Now, what makes Arabic and

00:01:29.626 --> 00:01:30.846
Hebrew different compared to

00:01:30.846 --> 00:01:31.986
other languages you might be

00:01:31.986 --> 00:01:33.556
supporting already is that they

00:01:33.556 --> 00:01:35.156
are written and read from right

00:01:35.196 --> 00:01:35.646
to left.

00:01:36.686 --> 00:01:37.646
Let's take a look at some

00:01:37.646 --> 00:01:38.786
examples, so we can really

00:01:38.786 --> 00:01:40.066
understand what that means for

00:01:40.066 --> 00:01:41.036
your applications.

00:01:45.056 --> 00:01:46.846
What you see here is our product

00:01:46.846 --> 00:01:47.926
template in a left-to-right

00:01:47.926 --> 00:01:50.126
language, and it looks really

00:01:50.126 --> 00:01:51.256
normal to most of you in the

00:01:51.256 --> 00:01:51.826
audience.

00:01:51.916 --> 00:01:53.446
The text is aligned on the left,

00:01:53.796 --> 00:01:55.226
the content is flowing from the

00:01:55.226 --> 00:01:56.376
left side of the screen to the

00:01:56.376 --> 00:01:57.426
right side of the screen.

00:01:58.006 --> 00:01:59.126
You see the focus is on the

00:01:59.126 --> 00:02:00.186
first button, which is the

00:02:00.186 --> 00:02:00.966
left-most button.

00:02:02.096 --> 00:02:03.446
So, when you take this template,

00:02:03.896 --> 00:02:04.846
and you load it in a

00:02:04.846 --> 00:02:06.376
right-to-left language, for

00:02:06.376 --> 00:02:08.406
example, Hebrew, you see the

00:02:08.406 --> 00:02:09.466
content is mirrored.

00:02:09.466 --> 00:02:11.606
It is now flowing from the right

00:02:11.606 --> 00:02:12.786
side of the screen to the left

00:02:12.786 --> 00:02:13.526
side of the screen.

00:02:13.826 --> 00:02:15.146
Our text is aligned to the

00:02:15.146 --> 00:02:15.476
right.

00:02:15.646 --> 00:02:17.106
Our focus is still on the first

00:02:17.106 --> 00:02:18.326
button, but now you see it is on

00:02:18.326 --> 00:02:19.016
the other side.

00:02:19.506 --> 00:02:21.386
Let's look at another example.

00:02:23.296 --> 00:02:24.976
Here, we have the catalogue

00:02:24.976 --> 00:02:27.146
template, and again, it looks

00:02:27.146 --> 00:02:28.646
very normal and natural if you

00:02:28.646 --> 00:02:29.986
are a reader of a left-to-right

00:02:29.986 --> 00:02:30.536
language.

00:02:30.976 --> 00:02:32.026
So when you look at this same

00:02:32.026 --> 00:02:33.396
example in a right-to-left

00:02:33.396 --> 00:02:35.126
language, you see that the

00:02:35.126 --> 00:02:36.676
content is mirrored again.

00:02:36.866 --> 00:02:38.196
It is flowing from right to

00:02:38.196 --> 00:02:38.626
left.

00:02:38.836 --> 00:02:40.016
The first image is still the

00:02:40.016 --> 00:02:41.106
desert, but it is on the other

00:02:41.106 --> 00:02:41.876
side of the screen.

00:02:42.876 --> 00:02:44.136
So that is how these apps look

00:02:44.136 --> 00:02:46.056
in right-to-left languages, and

00:02:46.346 --> 00:02:47.276
as you can see from these

00:02:47.276 --> 00:02:48.416
examples, we've built the

00:02:48.416 --> 00:02:49.896
support into TVMLKit.

00:02:50.416 --> 00:02:52.036
So when you're using the default

00:02:52.036 --> 00:02:53.306
templates, you get the support

00:02:53.306 --> 00:02:55.836
for free in your apps.

00:02:56.006 --> 00:02:57.946
Now, supporting a right-to-left

00:02:57.946 --> 00:02:59.756
language works the same way as

00:02:59.756 --> 00:03:01.026
supporting any other languages

00:03:01.026 --> 00:03:01.486
in your app.

00:03:02.176 --> 00:03:03.816
You need to go into X code in

00:03:03.816 --> 00:03:05.646
your project settings, and in

00:03:05.646 --> 00:03:07.996
the localizations, just add

00:03:07.996 --> 00:03:09.336
Arabic or Hebrew, which are

00:03:09.336 --> 00:03:10.366
supported languages.

00:03:12.076 --> 00:03:13.946
This is really key to make sure

00:03:13.946 --> 00:03:15.696
that TVMLKit knows when to

00:03:15.696 --> 00:03:16.616
render these views at

00:03:16.616 --> 00:03:17.786
right-to-left at run time.

00:03:18.496 --> 00:03:19.846
And for more coverage about

00:03:19.846 --> 00:03:20.866
everything that it takes to

00:03:20.866 --> 00:03:22.146
support localizations in your

00:03:22.146 --> 00:03:23.396
apps, including localizing

00:03:23.396 --> 00:03:24.516
content and dealing with

00:03:24.516 --> 00:03:25.946
formatters for dates and times,

00:03:26.306 --> 00:03:27.606
I recommend checking out this

00:03:27.606 --> 00:03:29.266
year's talk, Localizing With X

00:03:29.266 --> 00:03:30.646
Code 9, which goes into much

00:03:30.646 --> 00:03:33.086
greater detail.

00:03:33.226 --> 00:03:35.036
So the default templates work

00:03:35.036 --> 00:03:36.856
out of the box, but what if you

00:03:36.856 --> 00:03:38.526
have custom views, and you want

00:03:38.526 --> 00:03:39.946
to customize the behavior beyond

00:03:39.946 --> 00:03:40.696
those templates.

00:03:41.306 --> 00:03:42.666
Well in tvOS 11 we have

00:03:42.666 --> 00:03:44.456
introduced three specific areas

00:03:44.456 --> 00:03:46.956
where you can customize layout,

00:03:47.536 --> 00:03:49.316
text alignment and images.

00:03:49.706 --> 00:03:51.356
Let's get started with layout.

00:03:52.556 --> 00:03:54.296
Today, you might be customizing

00:03:54.296 --> 00:03:56.456
your layout using tv-align, and

00:03:56.456 --> 00:03:57.476
tv-position, and you are

00:03:57.476 --> 00:03:59.446
probably using values of left

00:03:59.446 --> 00:03:59.846
and right.

00:04:01.046 --> 00:04:01.946
Well, for right-to-left

00:04:01.946 --> 00:04:03.836
languages, left becomes left and

00:04:03.836 --> 00:04:05.516
right becomes left, or something

00:04:05.516 --> 00:04:07.366
like that, so you need to take

00:04:07.366 --> 00:04:10.076
care to use the right direction.

00:04:10.266 --> 00:04:11.436
And for that, we've introduced

00:04:11.436 --> 00:04:12.446
leading and trailing.

00:04:13.496 --> 00:04:14.496
Leading and trailing will

00:04:14.496 --> 00:04:15.796
automatically resolve to the

00:04:15.796 --> 00:04:17.336
corresponding values of left and

00:04:17.336 --> 00:04:18.676
right at run time, based on the

00:04:18.676 --> 00:04:19.486
running language of your

00:04:19.486 --> 00:04:20.055
application.

00:04:20.886 --> 00:04:22.096
So, for example, if you have a

00:04:22.096 --> 00:04:23.156
style defined where you're

00:04:23.156 --> 00:04:24.806
setting a tv-position to right

00:04:25.116 --> 00:04:26.946
or tv-align to left, just

00:04:26.946 --> 00:04:28.216
replace those values with

00:04:28.216 --> 00:04:29.246
trailing and leading.

00:04:29.876 --> 00:04:31.336
This is going to ensure that in

00:04:31.336 --> 00:04:32.506
your left-to-right language,

00:04:32.506 --> 00:04:33.716
everything looks exactly the

00:04:33.716 --> 00:04:35.596
same, but in a right-to-left

00:04:35.596 --> 00:04:37.016
language, content is flowing

00:04:37.016 --> 00:04:37.476
correctly.

00:04:40.116 --> 00:04:41.726
For values of margin and

00:04:41.726 --> 00:04:43.166
padding, we've introduced a

00:04:43.166 --> 00:04:45.386
brand-new media query in tvOS 11

00:04:45.836 --> 00:04:47.336
called Layout Direction.

00:04:48.056 --> 00:04:49.366
You might already be using media

00:04:49.366 --> 00:04:51.166
queries today for customizing

00:04:51.166 --> 00:04:52.336
your appearance for light and

00:04:52.336 --> 00:04:52.636
dark.

00:04:52.976 --> 00:04:54.166
These work just the same way.

00:04:54.606 --> 00:04:56.016
Any styles that you define

00:04:56.016 --> 00:04:57.906
inside the media query will be

00:04:57.906 --> 00:04:59.706
active for that media query.

00:05:00.306 --> 00:05:02.336
So, here in our example, we have

00:05:02.506 --> 00:05:04.786
two styles defined, one in our

00:05:04.786 --> 00:05:06.406
LTR layout direction, left to

00:05:06.406 --> 00:05:08.256
right, and one in our RTL layout

00:05:08.256 --> 00:05:08.696
direction.

00:05:09.356 --> 00:05:11.396
And we take care to ensure that

00:05:11.396 --> 00:05:13.466
any horizontal values are

00:05:13.466 --> 00:05:15.106
flipped according to the side

00:05:15.106 --> 00:05:16.016
that they need to be on.

00:05:16.376 --> 00:05:17.556
So here, in our example, our

00:05:17.556 --> 00:05:19.136
margin of 12 needs to be on the

00:05:19.186 --> 00:05:20.756
correct side of the element.

00:05:21.216 --> 00:05:23.556
So that's layout.

00:05:23.556 --> 00:05:25.356
What about text direction?

00:05:26.216 --> 00:05:28.446
So for alignment, you're used to

00:05:28.446 --> 00:05:30.436
using things like left, center

00:05:30.436 --> 00:05:30.856
and right.

00:05:31.316 --> 00:05:32.526
And when you look at the text on

00:05:32.526 --> 00:05:34.536
the screen, two kind of jump out

00:05:34.536 --> 00:05:35.826
to you as a more natural

00:05:35.826 --> 00:05:37.676
presentation for a left-to-right

00:05:37.676 --> 00:05:39.086
language, left alignment is

00:05:39.086 --> 00:05:40.776
natural, and for a right-to-left

00:05:40.776 --> 00:05:42.066
language, right alignment is

00:05:42.066 --> 00:05:42.516
natural.

00:05:43.166 --> 00:05:45.216
So, for that, we got with our

00:05:45.216 --> 00:05:46.436
marketing team and thought

00:05:46.436 --> 00:05:48.666
really deeply about what kind of

00:05:48.736 --> 00:05:50.256
term could we use here, and we

00:05:50.256 --> 00:05:51.596
came up with a new value for

00:05:51.596 --> 00:05:52.826
text alignment of natural.

00:05:53.716 --> 00:05:55.096
Natural does just what you'd

00:05:55.096 --> 00:05:55.936
expect it to do.

00:05:55.936 --> 00:05:57.616
It aligns a text naturally based

00:05:57.616 --> 00:05:59.006
on the UI language of your app.

00:05:59.506 --> 00:05:59.956
Easy stuff.

00:06:02.496 --> 00:06:04.156
When it comes to images in your

00:06:04.156 --> 00:06:06.126
apps, the majority of the images

00:06:06.126 --> 00:06:07.296
you have are universal.

00:06:07.386 --> 00:06:08.586
They are appropriate to show for

00:06:08.586 --> 00:06:09.566
any layout direction.

00:06:10.146 --> 00:06:12.076
But in some cases, an image has

00:06:12.076 --> 00:06:13.906
an implied directionality, like

00:06:13.906 --> 00:06:15.336
this Chevron at the end of a

00:06:15.336 --> 00:06:15.956
list item.

00:06:16.506 --> 00:06:17.636
In this case, it's really

00:06:17.636 --> 00:06:18.706
important that the arrow is

00:06:18.706 --> 00:06:19.626
pointing in the correct

00:06:19.626 --> 00:06:21.436
direction, otherwise it would

00:06:21.436 --> 00:06:22.896
look really weird and probably

00:06:22.896 --> 00:06:23.366
broken.

00:06:24.226 --> 00:06:26.086
So there's two ways that you can

00:06:26.086 --> 00:06:27.316
support these in your apps.

00:06:27.626 --> 00:06:29.006
The first is for resource

00:06:29.006 --> 00:06:29.576
images.

00:06:30.006 --> 00:06:31.186
Images that are coming from

00:06:31.186 --> 00:06:32.626
inside your application bundle

00:06:33.216 --> 00:06:35.916
can be specified in asset

00:06:35.916 --> 00:06:37.576
catalogs, which provide a really

00:06:37.576 --> 00:06:39.706
convenient way for customizing

00:06:39.706 --> 00:06:41.946
if the image is fixed for all

00:06:41.946 --> 00:06:43.446
layout directions, can be

00:06:43.446 --> 00:06:45.066
graphically mirrored at runtime,

00:06:45.256 --> 00:06:46.946
like our chevron, or if we

00:06:46.946 --> 00:06:48.486
needed a dedicated asset for

00:06:48.486 --> 00:06:49.546
each language.

00:06:51.526 --> 00:06:53.896
For images that are coming from

00:06:53.896 --> 00:06:56.916
your server, we have a brand new

00:06:56.916 --> 00:06:58.246
attribute that you can set on

00:06:58.246 --> 00:06:59.396
your image elements, called

00:06:59.396 --> 00:06:59.906
Source Set.

00:07:01.226 --> 00:07:02.376
Source Set allows you to

00:07:02.376 --> 00:07:04.906
identify a given URL for a given

00:07:04.906 --> 00:07:05.706
layout direction.

00:07:06.596 --> 00:07:07.826
What's great about Source Set is

00:07:07.826 --> 00:07:09.116
that you can also use these for

00:07:09.116 --> 00:07:10.706
customizing your appearances for

00:07:10.706 --> 00:07:11.336
light and dark.

00:07:12.006 --> 00:07:15.346
So here URL one will be loaded

00:07:15.486 --> 00:07:17.126
when my layout direction is LTR,

00:07:17.896 --> 00:07:20.046
and URL2 will be loaded when my

00:07:20.046 --> 00:07:21.296
layout direction is RTL.

00:07:21.296 --> 00:07:23.306
So this is a really concise way

00:07:23.306 --> 00:07:24.856
for you to just define a single

00:07:24.856 --> 00:07:26.406
image, and have the correct

00:07:26.406 --> 00:07:29.006
thing happen at runtime.

00:07:29.096 --> 00:07:30.476
So I'd like to see if we can

00:07:30.476 --> 00:07:31.846
take all of these pieces and put

00:07:31.846 --> 00:07:33.026
them together with a little

00:07:33.026 --> 00:07:33.706
sample app that I've been

00:07:33.706 --> 00:07:33.936
working on.

00:07:44.386 --> 00:07:45.876
So I've been working on an app

00:07:45.876 --> 00:07:48.186
that lets me showcase the WWDC

00:07:48.186 --> 00:07:49.516
sessions from last year's

00:07:49.516 --> 00:07:51.096
conference, and I'd love to show

00:07:51.096 --> 00:07:51.506
it to you now.

00:08:02.316 --> 00:08:03.436
So here you can see I have a

00:08:03.436 --> 00:08:05.346
grid of the past sessions, and

00:08:05.346 --> 00:08:06.656
at the top, I have a banner,

00:08:06.656 --> 00:08:07.976
where I have a featured session.

00:08:09.036 --> 00:08:11.026
So before I want to support a

00:08:11.026 --> 00:08:12.106
right-to-left language in my

00:08:12.106 --> 00:08:14.116
app, I can do a few things

00:08:14.116 --> 00:08:15.026
without even adding a

00:08:15.026 --> 00:08:15.786
localization.

00:08:16.926 --> 00:08:21.056
In the edit scheme, in our run

00:08:21.136 --> 00:08:22.966
options, I can change the

00:08:22.966 --> 00:08:24.826
application language from the

00:08:24.826 --> 00:08:25.966
system language to a

00:08:25.966 --> 00:08:27.286
right-to-left pseudolanguage.

00:08:27.836 --> 00:08:29.476
This lets me simulate what it's

00:08:29.476 --> 00:08:30.366
going to be like in a

00:08:30.366 --> 00:08:31.796
right-to-left language without

00:08:31.796 --> 00:08:32.996
having to change anything about

00:08:32.996 --> 00:08:33.645
my project.

00:08:34.856 --> 00:08:36.466
So now, when I build and run,

00:08:36.946 --> 00:08:38.466
you see our grid is now flowing

00:08:38.466 --> 00:08:39.395
from right to left.

00:08:39.816 --> 00:08:41.635
So because we're using a grid,

00:08:41.635 --> 00:08:42.976
we get that support for free

00:08:42.976 --> 00:08:43.696
from our template.

00:08:44.126 --> 00:08:45.616
But because my banner was

00:08:45.616 --> 00:08:47.146
custom, that I added with my own

00:08:47.146 --> 00:08:48.816
styles, looks like I still have

00:08:48.816 --> 00:08:49.426
some work to do.

00:08:49.936 --> 00:08:51.436
So let's see if I can apply the

00:08:51.436 --> 00:08:53.746
new API in tvOS 11 to fix these

00:08:53.746 --> 00:08:54.196
problems?

00:08:55.836 --> 00:08:57.056
The first thing that I'm going

00:08:57.056 --> 00:08:59.126
to do is check my style in my

00:08:59.126 --> 00:09:01.126
TVML and replace all of my

00:09:01.226 --> 00:09:03.936
hard-coded references of left to

00:09:03.936 --> 00:09:05.656
leading, which is the left side

00:09:05.656 --> 00:09:07.036
of the screen in my development

00:09:07.036 --> 00:09:07.496
language.

00:09:08.386 --> 00:09:09.836
Similarly, I'll replace my

00:09:09.836 --> 00:09:11.776
values of right with trailing.

00:09:14.156 --> 00:09:15.636
Now, when I build and run my

00:09:15.686 --> 00:09:17.176
app, hopefully we will have some

00:09:17.176 --> 00:09:17.816
progress.

00:09:19.696 --> 00:09:21.736
So great, looks like our text

00:09:21.736 --> 00:09:22.676
has now flipped to the other

00:09:22.676 --> 00:09:24.366
side, and our play button is on

00:09:24.366 --> 00:09:25.366
the right side of the screen,

00:09:25.676 --> 00:09:27.356
but it seems like it's a little

00:09:27.356 --> 00:09:29.896
bit too close to the edge.

00:09:30.116 --> 00:09:31.996
If I look at my style, my banner

00:09:31.996 --> 00:09:33.626
play button lockup has a custom

00:09:33.626 --> 00:09:34.766
margin that is applied to the

00:09:34.766 --> 00:09:35.706
right side of the element.

00:09:36.016 --> 00:09:37.426
We need to make sure that margin

00:09:37.426 --> 00:09:38.656
is on the other side when we are

00:09:38.656 --> 00:09:39.626
running in right to left.

00:09:41.096 --> 00:09:43.116
To save time, I added a snippet

00:09:43.116 --> 00:09:44.686
earlier that defines the two

00:09:44.686 --> 00:09:46.496
media queries for my Banner Play

00:09:46.496 --> 00:09:48.686
Button Lockup for LTR and RTL.

00:09:48.816 --> 00:09:51.576
I'm going to move my definition

00:09:51.576 --> 00:09:54.646
of the margin into the LTR, and

00:09:55.436 --> 00:09:57.326
in my RTL definition, I'm going

00:09:57.326 --> 00:09:59.036
to swap the horizontal position

00:09:59.416 --> 00:10:00.276
of that 60.

00:10:02.916 --> 00:10:05.896
Now, when I build and run, looks

00:10:05.896 --> 00:10:07.076
like our play button has the

00:10:07.076 --> 00:10:07.636
right padding.

00:10:08.146 --> 00:10:09.876
So we are nearly there, but

00:10:09.876 --> 00:10:11.356
looking at this app now, we can

00:10:11.356 --> 00:10:12.766
kind of see that the text is on

00:10:12.766 --> 00:10:13.406
the other side.

00:10:13.406 --> 00:10:14.826
It is a little hard to read with

00:10:14.826 --> 00:10:16.126
that image right underneath it.

00:10:17.166 --> 00:10:18.426
So my designer gave me an

00:10:18.426 --> 00:10:19.826
alternate asset that I can use

00:10:19.826 --> 00:10:21.176
in my right-to-left languages,

00:10:21.486 --> 00:10:23.006
so I can add that to my project,

00:10:23.006 --> 00:10:24.756
since I'm using Asset Catalogs.

00:10:25.556 --> 00:10:26.966
Here, in my Asset Catalogue, I

00:10:26.966 --> 00:10:28.436
have a single image defined for

00:10:28.436 --> 00:10:29.906
my banner, and then in the

00:10:29.906 --> 00:10:31.796
attribute inspector, I can

00:10:31.796 --> 00:10:33.416
change the direction from fixed

00:10:33.626 --> 00:10:34.106
to both.

00:10:34.846 --> 00:10:36.346
This now gives me a well where I

00:10:36.346 --> 00:10:37.576
can drop the asset that should

00:10:37.576 --> 00:10:38.696
be used in our right-to-left

00:10:38.696 --> 00:10:39.146
language.

00:10:40.656 --> 00:10:44.366
So I'll drop that in place and

00:10:44.596 --> 00:10:46.036
build and run my app one last

00:10:50.116 --> 00:10:50.226
time.

00:10:50.436 --> 00:10:51.306
And there you have it.

00:10:51.586 --> 00:10:52.996
With just a few small changes,

00:10:52.996 --> 00:10:54.536
our app is now ready to support

00:10:54.536 --> 00:10:54.976
right to left.

00:10:55.516 --> 00:11:01.396
[ Applause ]

00:11:01.896 --> 00:11:04.076
So as you saw, with just a few

00:11:04.076 --> 00:11:05.276
small changes to our app,

00:11:05.586 --> 00:11:06.866
because the default templates

00:11:06.866 --> 00:11:08.536
give us the support for free, we

00:11:08.536 --> 00:11:09.956
can have an app that fully

00:11:09.956 --> 00:11:10.916
supports a right-to-left

00:11:10.916 --> 00:11:12.606
language, with very few changes

00:11:12.606 --> 00:11:13.386
needed from us.

00:11:13.926 --> 00:11:15.356
We also have a really powerful

00:11:15.356 --> 00:11:16.366
tool in the right-to-left

00:11:16.366 --> 00:11:17.626
pseudolanguage, that allows us

00:11:17.626 --> 00:11:19.036
to simulate the effects of a

00:11:19.036 --> 00:11:20.566
right-to-left layout without

00:11:20.566 --> 00:11:21.806
having to read a right-to-left

00:11:21.806 --> 00:11:22.286
language.

00:11:23.196 --> 00:11:25.116
Now, one last note, if you're

00:11:25.116 --> 00:11:26.356
using custom views in your

00:11:26.356 --> 00:11:28.746
application, we have a system of

00:11:28.746 --> 00:11:30.336
constraints in auto layout

00:11:30.336 --> 00:11:32.076
engine that is a really powerful

00:11:32.076 --> 00:11:34.496
tool to take care of layout for

00:11:34.496 --> 00:11:35.606
right to left languages.

00:11:36.366 --> 00:11:38.066
We also have an API effective

00:11:38.066 --> 00:11:39.346
layout direction, which will

00:11:39.346 --> 00:11:40.686
return to you if you are in a

00:11:40.686 --> 00:11:42.186
left-to-right or a right-to-left

00:11:42.186 --> 00:11:43.446
layout direction at run time,

00:11:43.856 --> 00:11:45.396
which is really useful for doing

00:11:45.456 --> 00:11:46.986
things like frame math in an

00:11:46.986 --> 00:11:47.486
animation.

00:11:48.486 --> 00:11:50.086
For more in-depth coverage about

00:11:50.086 --> 00:11:52.016
all the things, and nuances for

00:11:52.016 --> 00:11:52.926
supporting right-to-left

00:11:52.926 --> 00:11:54.316
languages, I recommend checking

00:11:54.316 --> 00:11:55.436
out last year's talks,

00:11:55.656 --> 00:11:56.826
Internationalization Best

00:11:56.826 --> 00:11:58.396
Practices, and What's New In

00:11:58.396 --> 00:11:59.846
International User Interfaces.

00:12:01.756 --> 00:12:03.756
I can't wait to see your apps

00:12:03.756 --> 00:12:04.706
supporting right-to-left

00:12:04.706 --> 00:12:06.186
languages later this fall.

00:12:06.696 --> 00:12:07.746
Now, here is Parry, with

00:12:07.746 --> 00:12:08.826
template optimizations.

00:12:09.026 --> 00:12:09.386
Thank you.

00:12:10.516 --> 00:12:12.546
[ Applause ]

00:12:13.046 --> 00:12:14.896
>> Thank you, Trevor.

00:12:14.896 --> 00:12:16.406
Hi! I'm Parry.

00:12:16.676 --> 00:12:17.676
I'm going to walk you through

00:12:17.676 --> 00:12:18.996
some of the enhancements we made

00:12:18.996 --> 00:12:20.496
to our templates that is going

00:12:20.496 --> 00:12:21.656
to improve the performance of

00:12:21.696 --> 00:12:23.346
your app, both in terms of time

00:12:23.466 --> 00:12:23.936
and memory.

00:12:24.836 --> 00:12:26.426
If you worked with TVMLKit apps

00:12:26.426 --> 00:12:28.166
before, you might have noticed

00:12:28.166 --> 00:12:29.656
that the performance of a

00:12:29.656 --> 00:12:31.676
template degrades as you try to

00:12:31.676 --> 00:12:33.406
add more content into it.

00:12:33.546 --> 00:12:34.396
Let me illustrate with an

00:12:34.396 --> 00:12:34.816
example.

00:12:36.076 --> 00:12:37.756
So I'm working with Trevor on

00:12:37.756 --> 00:12:40.246
our sample WWDC app, and I'm

00:12:40.246 --> 00:12:43.066
trying to enhance it to add all

00:12:43.066 --> 00:12:44.156
the sessions from the past,

00:12:44.156 --> 00:12:45.236
instead of just the last year's

00:12:45.236 --> 00:12:45.586
sessions.

00:12:46.016 --> 00:12:47.506
We are keeping a simple design

00:12:48.236 --> 00:12:50.036
with a grid to showcase all the

00:12:50.036 --> 00:12:50.606
sessions.

00:12:51.096 --> 00:12:52.606
Each session being represented

00:12:52.606 --> 00:12:55.686
by a lockup composed of an image

00:12:55.906 --> 00:12:56.426
and a title.

00:12:56.426 --> 00:12:58.716
Now, you can imagine that there

00:12:58.716 --> 00:12:59.806
are thousands of these sessions

00:12:59.806 --> 00:13:00.506
to show.

00:13:01.126 --> 00:13:02.426
So in a typical scenario like

00:13:02.426 --> 00:13:03.986
this, you don't want to show all

00:13:03.986 --> 00:13:05.596
your content up front, because

00:13:05.596 --> 00:13:07.026
A, it is going to take a long

00:13:07.026 --> 00:13:09.196
time to load, and B, it might

00:13:09.196 --> 00:13:10.606
not even be possible, because

00:13:10.606 --> 00:13:11.876
your servers might not support

00:13:11.876 --> 00:13:12.316
that.

00:13:13.066 --> 00:13:14.846
But instead, you paginate your

00:13:14.846 --> 00:13:15.396
data.

00:13:15.856 --> 00:13:17.036
You start off with something

00:13:17.036 --> 00:13:18.856
small, let's say about 500

00:13:18.856 --> 00:13:20.626
items, and then you keep adding

00:13:20.626 --> 00:13:22.516
to it, as the users scroll

00:13:22.516 --> 00:13:23.826
through the end of your content.

00:13:25.056 --> 00:13:26.916
Now, we did a bit of performance

00:13:26.916 --> 00:13:28.586
analysis for such a scenario,

00:13:28.946 --> 00:13:30.076
and this is what it looks like.

00:13:31.636 --> 00:13:33.766
What you see in this graph is

00:13:33.766 --> 00:13:35.866
the time it took to build the

00:13:35.866 --> 00:13:36.996
template with a certain number

00:13:36.996 --> 00:13:40.786
of items, and what you see on

00:13:40.786 --> 00:13:42.056
the x axis is the number of

00:13:42.056 --> 00:13:43.736
items in the template, and what

00:13:43.736 --> 00:13:45.126
you see on the y is the time it

00:13:45.126 --> 00:13:45.796
took to reach there.

00:13:46.506 --> 00:13:48.346
And as you can see, it's an

00:13:48.346 --> 00:13:49.426
exponential curve.

00:13:50.596 --> 00:13:51.926
Meaning that it takes longer to

00:13:51.926 --> 00:13:53.586
add the same number of items to

00:13:53.586 --> 00:13:55.526
the template as the size of the

00:13:55.526 --> 00:13:56.306
template grows.

00:13:56.306 --> 00:13:58.726
But why is that?

00:13:59.476 --> 00:14:01.236
Well, one of the major factors

00:14:01.496 --> 00:14:02.876
is the size of the document

00:14:02.876 --> 00:14:04.426
object model back in these

00:14:04.456 --> 00:14:04.936
templates.

00:14:05.416 --> 00:14:06.786
The problem is two-fold.

00:14:07.686 --> 00:14:08.946
On one hand, you have the

00:14:08.946 --> 00:14:09.786
parsing overhead.

00:14:10.086 --> 00:14:11.816
First, in your JavaScript, when

00:14:11.816 --> 00:14:13.076
you parse your data into the

00:14:13.076 --> 00:14:15.016
DOM, so when the DOM size

00:14:15.016 --> 00:14:16.376
increases it takes longer to add

00:14:16.376 --> 00:14:18.356
more stuff to it, and then when

00:14:18.356 --> 00:14:20.486
TVMLKit has to parse a DOM in

00:14:20.486 --> 00:14:21.616
order to calculate out

00:14:21.616 --> 00:14:24.156
information, like cell sizes,

00:14:24.266 --> 00:14:26.156
line spacing, even scrolling

00:14:26.156 --> 00:14:26.616
offsets.

00:14:27.106 --> 00:14:28.316
All the things that make your

00:14:28.316 --> 00:14:29.976
TVMLKit app look beautiful.

00:14:30.966 --> 00:14:32.096
But as you can imagine, as the

00:14:32.096 --> 00:14:33.966
size of the DOM increases, it

00:14:33.966 --> 00:14:35.346
takes longer to perform these

00:14:35.346 --> 00:14:35.826
operations.

00:14:37.226 --> 00:14:39.886
And on the other hand, you have

00:14:39.886 --> 00:14:41.626
an increasing memory pressure

00:14:41.626 --> 00:14:42.926
because of an increasing DOM

00:14:42.926 --> 00:14:44.656
size, which slows down your app

00:14:44.656 --> 00:14:44.976
as a whole.

00:14:47.186 --> 00:14:49.506
So to solve these problems, in

00:14:49.506 --> 00:14:52.386
tvOS 11, we've come up with a

00:14:52.386 --> 00:14:54.296
brand new paradigm of defining

00:14:54.296 --> 00:14:56.446
templates using prototype and

00:14:56.626 --> 00:14:59.396
data binding which is going to

00:14:59.396 --> 00:15:00.976
significantly reduce the size of

00:15:01.016 --> 00:15:02.786
your DOM, hence improving your

00:15:02.786 --> 00:15:05.526
app's performance, and on top of

00:15:05.526 --> 00:15:07.386
that, we've added APIs to

00:15:07.386 --> 00:15:08.336
support pagination.

00:15:09.286 --> 00:15:10.246
Let's look at these in more

00:15:10.246 --> 00:15:10.586
detail.

00:15:12.036 --> 00:15:13.996
In order to understand what a

00:15:13.996 --> 00:15:15.786
prototype is, I'm going to walk

00:15:15.786 --> 00:15:17.486
you through a typical template

00:15:17.486 --> 00:15:18.336
building process.

00:15:18.916 --> 00:15:20.296
You start off with the data from

00:15:20.296 --> 00:15:22.776
your servers, and an empty shell

00:15:22.776 --> 00:15:23.336
of a template.

00:15:23.336 --> 00:15:24.456
In our case, it's a grid.

00:15:24.456 --> 00:15:27.086
And in your JavaScript, you go

00:15:27.086 --> 00:15:27.886
through each one of these

00:15:27.886 --> 00:15:30.936
objects, and you can word them

00:15:30.936 --> 00:15:32.446
into their corresponding TVML

00:15:32.446 --> 00:15:33.096
markup.

00:15:33.496 --> 00:15:35.056
In our case, it's a lockup.

00:15:36.086 --> 00:15:37.866
Once you've done that, you parse

00:15:37.866 --> 00:15:40.736
that into a DOM, and that is

00:15:40.736 --> 00:15:42.296
when TVMLKit starts producing

00:15:42.296 --> 00:15:43.386
the user interface for it.

00:15:44.056 --> 00:15:46.286
But if you look closely, you'll

00:15:46.286 --> 00:15:47.826
see that all of these lockups,

00:15:47.826 --> 00:15:49.016
they look very similar.

00:15:49.016 --> 00:15:51.736
In fact, the only thing that is

00:15:51.826 --> 00:15:52.856
different between them are the

00:15:52.856 --> 00:15:53.846
values that are coming from the

00:15:53.846 --> 00:15:53.976
data.

00:15:56.796 --> 00:15:58.606
Once you remove these values,

00:15:59.076 --> 00:16:00.806
what you end up with is an

00:16:00.876 --> 00:16:03.756
identical looking lockup that

00:16:03.756 --> 00:16:05.326
has all the information that

00:16:05.326 --> 00:16:07.386
TVMLKit needs to compute that

00:16:07.386 --> 00:16:08.306
layout up front.

00:16:09.216 --> 00:16:10.856
So it turns out, you don't need

00:16:10.856 --> 00:16:12.706
all of these lockups, you just

00:16:12.706 --> 00:16:14.146
need one of them.

00:16:14.466 --> 00:16:15.896
And that's what we call a

00:16:15.896 --> 00:16:16.586
prototype.

00:16:17.596 --> 00:16:20.306
So a prototype is a TVML schema

00:16:20.306 --> 00:16:22.386
for your data objects that

00:16:22.386 --> 00:16:24.196
TVMLKit can use to compute the

00:16:24.196 --> 00:16:26.636
layout up front, and then at

00:16:26.636 --> 00:16:28.116
runtime, it can combine it with

00:16:28.116 --> 00:16:30.786
the data to author the DOM for

00:16:30.786 --> 00:16:32.266
you, but only the parts that it

00:16:32.266 --> 00:16:34.056
needs when it needs it.

00:16:34.876 --> 00:16:36.616
So the DOM size remains concise,

00:16:36.926 --> 00:16:38.176
and independent of your data set

00:16:38.176 --> 00:16:38.476
size.

00:16:40.386 --> 00:16:42.836
Now, you can imagine a template

00:16:42.836 --> 00:16:44.166
with just a prototype would be

00:16:44.166 --> 00:16:45.776
incomplete, because you also

00:16:45.776 --> 00:16:46.546
need to provide data.

00:16:47.696 --> 00:16:49.036
But on top of that, you also

00:16:49.036 --> 00:16:51.146
need to provide a link between

00:16:51.146 --> 00:16:52.936
your template and your data.

00:16:53.226 --> 00:16:54.826
This is how TVMLKit can make

00:16:54.936 --> 00:16:56.756
sense of what your data is, and

00:16:56.756 --> 00:16:58.016
complete the template for you.

00:16:58.746 --> 00:17:01.736
And you specify that using data

00:17:01.736 --> 00:17:02.176
bindings.

00:17:03.696 --> 00:17:05.976
There are three ways that you

00:17:05.976 --> 00:17:07.746
can bind data to your templates

00:17:08.056 --> 00:17:09.116
in tvOS 11.

00:17:09.705 --> 00:17:12.546
First, you can bind a source and

00:17:12.665 --> 00:17:13.806
attribute of an element.

00:17:14.086 --> 00:17:15.425
In this example, the source

00:17:15.425 --> 00:17:17.286
attribute of the image element,

00:17:17.665 --> 00:17:18.776
which is bound to the URL

00:17:18.776 --> 00:17:19.646
property of the data.

00:17:20.896 --> 00:17:22.665
You can also bind text content

00:17:22.665 --> 00:17:23.955
of an element, like in this

00:17:23.955 --> 00:17:25.856
case, binding the text content

00:17:26.146 --> 00:17:28.046
of the title element, with the

00:17:28.046 --> 00:17:29.526
title property in the data.

00:17:30.646 --> 00:17:33.106
And finally, you can bind items

00:17:33.106 --> 00:17:35.966
of a section using the items

00:17:35.966 --> 00:17:36.346
binding.

00:17:37.416 --> 00:17:38.906
With this, you can bind the

00:17:38.906 --> 00:17:40.156
trial DOM elements of the

00:17:40.156 --> 00:17:41.356
section with an array of

00:17:41.356 --> 00:17:41.986
objects.

00:17:44.546 --> 00:17:46.786
So in a nutshell, data binding

00:17:46.786 --> 00:17:47.886
provides the association between

00:17:47.936 --> 00:17:48.656
a TVML property and a data

00:17:48.686 --> 00:17:48.896
property.

00:17:48.926 --> 00:17:49.796
And you can intuitively specify

00:17:49.826 --> 00:17:50.606
it directly in TVML using a

00:17:50.636 --> 00:17:51.086
binding attribute.

00:17:51.116 --> 00:17:51.896
Now, when it comes to providing

00:17:51.926 --> 00:17:52.796
data to TVMLKit, you can do that

00:17:52.826 --> 00:17:53.666
in your JavaScript using a new

00:17:53.696 --> 00:17:54.476
property you've introduced on a

00:17:54.506 --> 00:17:55.286
DOM element called Data Item.

00:17:55.316 --> 00:17:55.856
Here is an example.

00:17:55.886 --> 00:17:56.516
You parse your JSON into

00:17:56.546 --> 00:17:57.296
JavaScript Objects, then you

00:17:57.326 --> 00:17:58.166
attach it to the section element

00:17:58.196 --> 00:17:58.976
using the data item property.

00:18:01.456 --> 00:18:02.996
Now, let's move on to

00:18:02.996 --> 00:18:03.656
pagination.

00:18:03.656 --> 00:18:06.046
In tvOS 11 we have introduced a

00:18:06.686 --> 00:18:08.386
new event called Needs More that

00:18:08.386 --> 00:18:09.986
you can use to conveniently

00:18:09.986 --> 00:18:10.986
implement pagination.

00:18:11.026 --> 00:18:13.666
This event gets invoked as the

00:18:13.816 --> 00:18:15.586
users scroll toward the end of

00:18:15.586 --> 00:18:18.886
your content, and you get it on

00:18:18.886 --> 00:18:20.676
list, shelf, grid, and even

00:18:26.756 --> 00:18:28.416
stack template, so it's very

00:18:29.246 --> 00:18:32.266
versatile, and you can use it in

00:18:32.266 --> 00:18:33.086
almost any template.

00:18:33.356 --> 00:18:35.416
However, if you're using

00:18:35.416 --> 00:18:37.696
pagination on a data bound

00:18:37.696 --> 00:18:40.676
template, you need to create

00:18:40.676 --> 00:18:41.946
observable objects for your

00:18:41.946 --> 00:18:42.766
data.

00:18:42.766 --> 00:18:45.436
This is how TVMLKit can observe

00:18:45.616 --> 00:18:47.176
the changes that you make in the

00:18:47.176 --> 00:18:49.556
data, and push those updates to

00:18:50.406 --> 00:18:51.916
the user interface.

00:18:52.196 --> 00:18:54.286
Let's take an example of how to

00:18:54.706 --> 00:18:57.976
create these observable objects.

00:18:57.976 --> 00:19:00.006
So you start off just the same.

00:19:00.146 --> 00:19:04.216
You parse your JSON into

00:19:04.216 --> 00:19:08.756
JavaScript objects, but then you

00:19:08.756 --> 00:19:11.176
go through each one of these

00:19:11.176 --> 00:19:17.486
objects and map them into a data

00:19:17.486 --> 00:19:19.176
item class.

00:19:19.316 --> 00:19:22.406
This is something that they've

00:19:22.406 --> 00:19:25.416
also introduced in tvOS 11 that

00:19:25.416 --> 00:19:27.046
has an observer pattern built

00:19:27.146 --> 00:19:27.366
in.

00:19:28.656 --> 00:19:30.096
You construct the data item

00:19:30.096 --> 00:19:31.686
class with an optional type, in

00:19:31.686 --> 00:19:32.876
case you want to have multiple

00:19:32.876 --> 00:19:35.166
prototypes in your template, and

00:19:35.166 --> 00:19:38.326
a required identifier that

00:19:38.326 --> 00:19:39.936
TVMLKit uses to push those

00:19:39.936 --> 00:19:41.906
updates to the user interface

00:19:41.906 --> 00:19:42.516
efficiently.

00:19:43.846 --> 00:19:45.566
And once you have all of these

00:19:45.566 --> 00:19:47.156
objects mapped, you want to wrap

00:19:47.156 --> 00:19:48.596
them up in another data item,

00:19:49.426 --> 00:19:51.946
and that is what you attach to

00:19:52.736 --> 00:19:53.366
the element.

00:19:53.806 --> 00:19:57.546
Let's take an example of how to

00:19:57.546 --> 00:19:58.516
handle Needs More.

00:19:59.636 --> 00:20:01.226
Now, Needs More is just like any

00:20:01.226 --> 00:20:01.976
other event.

00:20:02.046 --> 00:20:03.806
So you listen for it by using

00:20:03.806 --> 00:20:05.776
the Add Event Listener method on

00:20:05.776 --> 00:20:07.846
a DOM element, and you provide a

00:20:07.846 --> 00:20:10.516
function that would have kind of

00:20:10.516 --> 00:20:11.976
a similar implementation to what

00:20:11.976 --> 00:20:13.576
you would have when creating the

00:20:13.576 --> 00:20:13.986
template.

00:20:14.176 --> 00:20:16.216
So you fetch the data from your

00:20:16.216 --> 00:20:18.296
servers, map those objects into

00:20:18.296 --> 00:20:21.376
data item, but finally, instead

00:20:21.376 --> 00:20:23.066
of attaching those data items

00:20:23.066 --> 00:20:24.156
directly to the element, you

00:20:24.156 --> 00:20:26.006
append to the existing elements.

00:20:26.746 --> 00:20:28.266
And once you've done that, you

00:20:28.266 --> 00:20:30.196
call Touch Property Path Method

00:20:30.246 --> 00:20:32.216
on the data item class to push

00:20:32.216 --> 00:20:33.466
your updates to the user

00:20:33.466 --> 00:20:33.956
interface.

00:20:35.496 --> 00:20:37.036
Now, let's put all of these

00:20:37.036 --> 00:20:42.096
pieces together in a demo.

00:20:42.256 --> 00:20:44.166
So as Trevor was doing his demo,

00:20:44.166 --> 00:20:45.366
I actually went in and

00:20:45.366 --> 00:20:47.376
implemented pagination in the

00:20:47.376 --> 00:20:47.966
sample app.

00:20:48.556 --> 00:20:49.896
So why don't we start from

00:20:49.896 --> 00:20:50.076
there?

00:20:51.646 --> 00:20:53.836
So I am going to take you

00:20:53.836 --> 00:20:55.076
directly to the part where I

00:20:55.076 --> 00:20:56.846
construct the stack document,

00:20:57.786 --> 00:20:59.816
and the event I'm handling is

00:20:59.866 --> 00:21:01.536
directly on the stack element

00:21:01.536 --> 00:21:01.986
itself.

00:21:02.856 --> 00:21:04.266
And as you can see, what I'm

00:21:04.266 --> 00:21:05.736
doing is fetching the next batch

00:21:05.736 --> 00:21:06.996
of assets that I want to push in

00:21:06.996 --> 00:21:08.906
the template, creating

00:21:08.906 --> 00:21:10.696
JavaScript objects from the JSON

00:21:10.696 --> 00:21:12.156
that is returned, and then

00:21:12.156 --> 00:21:15.226
recalling populateGrid to add it

00:21:15.256 --> 00:21:15.966
to the template.

00:21:16.426 --> 00:21:17.666
Let's see what populateGrid

00:21:17.666 --> 00:21:17.946
does.

00:21:18.276 --> 00:21:21.746
Now, at this point, I haven't

00:21:21.746 --> 00:21:23.356
converted my templates using

00:21:23.416 --> 00:21:24.666
prototype and data binding.

00:21:24.666 --> 00:21:25.836
So what you see here is very

00:21:25.836 --> 00:21:26.386
familiar.

00:21:26.816 --> 00:21:28.246
You would probably already know

00:21:28.246 --> 00:21:29.116
what is happening here.

00:21:29.946 --> 00:21:34.586
I start off with an empty grid

00:21:34.766 --> 00:21:37.056
and I map all of my objects into

00:21:37.056 --> 00:21:38.976
the corresponding TVML markup,

00:21:39.456 --> 00:21:40.666
which is a lockup in this case,

00:21:41.456 --> 00:21:43.486
and finally I parse all of those

00:21:43.486 --> 00:21:44.926
lockups directly into the DOM.

00:21:46.176 --> 00:21:47.386
Now, before I go ahead and

00:21:47.386 --> 00:21:49.796
convert it into a data bound

00:21:49.796 --> 00:21:51.506
template, let's run this app,

00:21:51.686 --> 00:21:52.696
just to get a feel of what

00:21:52.696 --> 00:21:53.746
pagination looks like in

00:21:53.746 --> 00:21:54.336
TVMLKit.

00:22:02.046 --> 00:22:03.066
So as you can see, it starts off

00:22:03.096 --> 00:22:03.796
just the same.

00:22:04.266 --> 00:22:05.856
But notice as I scroll toward

00:22:05.896 --> 00:22:08.826
the end of this grid, the index

00:22:08.826 --> 00:22:10.086
bar on the right side jumps

00:22:10.086 --> 00:22:12.506
back, and that is because we are

00:22:12.506 --> 00:22:14.146
adding all those items as we

00:22:14.146 --> 00:22:15.276
approach toward the end.

00:22:16.016 --> 00:22:17.706
So great, our pagination works.

00:22:18.646 --> 00:22:20.596
But let's go back and complete

00:22:20.596 --> 00:22:22.866
this example by converting our

00:22:22.866 --> 00:22:24.646
templates to using prototype and

00:22:24.646 --> 00:22:25.256
data binding.

00:22:29.456 --> 00:22:30.946
Now, as you might have imagined,

00:22:31.066 --> 00:22:32.346
all the changes that I need to

00:22:32.346 --> 00:22:34.706
make in order to convert it into

00:22:34.706 --> 00:22:36.346
a data bound template are in

00:22:36.346 --> 00:22:38.486
this one function, populateGrid.

00:22:39.156 --> 00:22:40.626
And the first thing I want to do

00:22:40.626 --> 00:22:44.566
is, instead of adding a simple

00:22:44.566 --> 00:22:47.336
grid, I want to add prototypes

00:22:48.076 --> 00:22:49.936
and a bound grid, like this.

00:22:54.196 --> 00:22:56.076
The next thing I want to do is,

00:22:56.076 --> 00:22:57.926
instead of mapping all of these

00:22:57.926 --> 00:23:00.436
objects into their markup, I

00:23:02.206 --> 00:23:04.216
want to map them into observable

00:23:04.216 --> 00:23:05.746
objects using data item class.

00:23:06.326 --> 00:23:12.056
Just like that.

00:23:12.056 --> 00:23:15.796
And finally, instead of creating

00:23:15.796 --> 00:23:19.136
all of these markups into the

00:23:19.136 --> 00:23:21.636
DOM itself, I want to append my

00:23:21.636 --> 00:23:23.606
created data items into the

00:23:23.606 --> 00:23:26.726
existing ones.

00:23:26.816 --> 00:23:32.486
Like so. So now that we have all

00:23:32.486 --> 00:23:34.166
of these pieces in, let's re-run

00:23:34.226 --> 00:23:34.976
this app and check it out.

00:23:43.556 --> 00:23:45.426
Now, right out of the box, one

00:23:45.426 --> 00:23:46.416
thing that I have noticed is

00:23:46.416 --> 00:23:47.936
that it loads faster, even with

00:23:47.936 --> 00:23:49.746
such a small subset of content

00:23:49.746 --> 00:23:51.506
that I'm loading up front, it

00:23:51.536 --> 00:23:52.696
takes less time to load.

00:23:53.086 --> 00:23:54.446
And as I scroll toward the

00:23:54.446 --> 00:23:57.316
bottom, it has flawless

00:23:57.316 --> 00:24:00.056
performance with buttery smooth

00:24:00.056 --> 00:24:00.496
scrolling.

00:24:01.296 --> 00:24:03.006
It is quite addictive, I could

00:24:03.006 --> 00:24:04.106
scroll all day actually.

00:24:06.516 --> 00:24:12.016
[ Applause ]

00:24:12.516 --> 00:24:14.766
So let's do a quick recap of

00:24:14.796 --> 00:24:15.356
what you saw.

00:24:18.656 --> 00:24:20.446
What you saw is how to implement

00:24:20.446 --> 00:24:22.456
your templates using a better

00:24:22.716 --> 00:24:25.046
paradigm of prototypes and data

00:24:25.046 --> 00:24:25.486
binding.

00:24:26.496 --> 00:24:27.926
That is going to reduce your DOM

00:24:27.926 --> 00:24:29.076
size, and make your apps

00:24:29.776 --> 00:24:32.106
perform, and how to implement

00:24:32.106 --> 00:24:33.766
pagination conveniently using

00:24:33.766 --> 00:24:34.506
Needs More event.

00:24:35.826 --> 00:24:37.166
Now, there is one more thing

00:24:37.166 --> 00:24:38.986
that I want to recreate before I

00:24:38.986 --> 00:24:39.216
go.

00:24:40.386 --> 00:24:41.516
Remember this graph that I

00:24:41.516 --> 00:24:43.086
showed you earlier, about how

00:24:43.086 --> 00:24:44.276
long it takes to build a

00:24:44.276 --> 00:24:45.536
template to a certain number of

00:24:45.536 --> 00:24:45.866
items?

00:24:46.946 --> 00:24:48.606
After re-implementing our

00:24:48.606 --> 00:24:50.626
example with prototypes and data

00:24:50.626 --> 00:24:52.676
binding, we re-ran this test,

00:24:53.536 --> 00:24:55.956
and we found there were more

00:24:55.956 --> 00:24:58.406
than 50% reduction in the time

00:24:58.406 --> 00:24:59.426
it took to build these

00:24:59.486 --> 00:25:00.036
templates.

00:25:00.486 --> 00:25:01.816
So we were really happy with it.

00:25:02.716 --> 00:25:04.706
So I encourage you to check out

00:25:04.706 --> 00:25:06.446
these APIs, and try them out in

00:25:06.446 --> 00:25:08.596
your apps, and see what you can

00:25:08.596 --> 00:25:09.296
gain from them.

00:25:09.356 --> 00:25:10.986
I am going to hand it over to

00:25:10.986 --> 00:25:12.396
Jeremy now, to talk all about

00:25:12.666 --> 00:25:13.316
Web Inspector.

00:25:13.436 --> 00:25:13.806
Thank you.

00:25:14.516 --> 00:25:20.546
[ Applause ]

00:25:21.046 --> 00:25:21.666
>> Thank you Parry.

00:25:21.666 --> 00:25:23.366
Hi everyone, my name is Jeremy.

00:25:23.366 --> 00:25:24.866
And today I am here to tell you

00:25:24.866 --> 00:25:26.276
how you can achieve happiness

00:25:26.406 --> 00:25:28.336
when you do TVMLKit development

00:25:28.336 --> 00:25:30.676
with the help of Web Inspector.

00:25:31.976 --> 00:25:34.306
Now, we have seen amazing demos

00:25:34.306 --> 00:25:36.126
from Parry and Trevor, trying to

00:25:36.126 --> 00:25:38.066
build up a simple WWDC app.

00:25:38.066 --> 00:25:39.986
And at this point in time, it is

00:25:39.986 --> 00:25:40.786
fairly capable.

00:25:41.526 --> 00:25:43.236
It supports RTL, so it can be

00:25:43.236 --> 00:25:44.466
localized immediately to

00:25:44.466 --> 00:25:46.396
right-to-left languages.

00:25:46.396 --> 00:25:48.176
And it uses data binding and

00:25:48.176 --> 00:25:49.266
prototypes, so you could scroll

00:25:49.266 --> 00:25:50.976
forever, and not stop.

00:25:52.656 --> 00:25:56.406
Now, as luck would have it, just

00:25:56.406 --> 00:25:57.456
a few days before we are ready

00:25:57.456 --> 00:25:59.406
to ship, the designer comes over

00:25:59.406 --> 00:26:00.926
and hands us this mock-up.

00:26:01.296 --> 00:26:02.466
He gives you a thumbs up and

00:26:02.466 --> 00:26:03.916
says, "this should be easy to

00:26:03.916 --> 00:26:04.366
fix."

00:26:05.096 --> 00:26:06.716
Now, we all know that is not

00:26:06.716 --> 00:26:07.206
true.

00:26:07.616 --> 00:26:08.946
And I empathize with that, and I

00:26:08.946 --> 00:26:10.516
can hear all the inward groaning

00:26:10.516 --> 00:26:12.056
in all your bellies.

00:26:13.016 --> 00:26:14.516
So let's try to articulate this

00:26:14.516 --> 00:26:16.336
feeling that we have by looking

00:26:16.336 --> 00:26:17.346
at the development cycle,

00:26:17.346 --> 00:26:18.576
especially when it comes to

00:26:18.576 --> 00:26:19.786
updating user interface.

00:26:20.216 --> 00:26:21.916
The very first thing you have to

00:26:21.916 --> 00:26:24.066
do is that you have to formulate

00:26:24.066 --> 00:26:26.176
speculative fixes, guess well as

00:26:26.176 --> 00:26:27.996
to what it involves to fix the

00:26:27.996 --> 00:26:28.236
UI.

00:26:28.826 --> 00:26:30.016
Is the margin one pixel to the

00:26:30.016 --> 00:26:31.036
right, or to the left?

00:26:31.036 --> 00:26:33.346
Once you have formulated all

00:26:33.346 --> 00:26:35.106
your fixes, you have to go

00:26:35.106 --> 00:26:36.436
through this tedious Build and

00:26:36.436 --> 00:26:37.156
Run cycle.

00:26:37.326 --> 00:26:38.626
You build and run in X code,

00:26:38.786 --> 00:26:40.656
wait for the app to start, look

00:26:40.656 --> 00:26:42.036
at the changes, is this right or

00:26:42.036 --> 00:26:42.326
not?

00:26:42.326 --> 00:26:43.576
And if it is wrong, you go

00:26:43.576 --> 00:26:45.136
through that over and over again

00:26:45.136 --> 00:26:45.926
until it is right.

00:26:47.166 --> 00:26:48.956
Consequently, because of that,

00:26:48.956 --> 00:26:51.076
there is a huge loss of context.

00:26:51.346 --> 00:26:52.866
You forgot where you were and

00:26:52.866 --> 00:26:53.626
what you're trying to fix,

00:26:53.626 --> 00:26:55.016
simply because there is this

00:26:55.016 --> 00:26:56.506
huge time gap between the

00:26:56.506 --> 00:26:57.906
changes you make, and seeing

00:26:57.906 --> 00:26:58.546
them on the screen.

00:26:59.886 --> 00:27:02.006
So how amazing would it be if

00:27:02.006 --> 00:27:02.966
there was something that could

00:27:02.966 --> 00:27:04.806
help us fix all these problems?

00:27:05.856 --> 00:27:07.056
Seasoned web developers out

00:27:07.056 --> 00:27:08.686
there already use Web Inspector,

00:27:08.686 --> 00:27:10.206
with all these amazing features.

00:27:10.416 --> 00:27:11.986
It is about visual debugging,

00:27:12.486 --> 00:27:13.546
local and session storage

00:27:13.546 --> 00:27:15.056
introspection, even performance

00:27:15.056 --> 00:27:16.306
analysis for JavaScript.

00:27:17.396 --> 00:27:20.156
And today, tvOS only supports

00:27:20.156 --> 00:27:22.596
this small subset of features in

00:27:22.596 --> 00:27:24.126
TVMLKit for Web Inspector.

00:27:25.186 --> 00:27:26.746
So today I am really pleased to

00:27:26.746 --> 00:27:29.186
announce that in tvOS 11 we are

00:27:29.186 --> 00:27:30.646
adding support for the remaining

00:27:30.646 --> 00:27:32.116
few bits of Web Inspector.

00:27:33.516 --> 00:27:36.556
[ Applause ]

00:27:37.056 --> 00:27:38.356
>> So to get us started, let's

00:27:38.356 --> 00:27:39.396
talk about visual debugging.

00:27:40.646 --> 00:27:42.656
Your TVML app is a document that

00:27:42.656 --> 00:27:44.816
is represented as a DOM, and to

00:27:44.816 --> 00:27:46.156
visualize that, Web Inspector

00:27:46.156 --> 00:27:47.466
has the Elements tab.

00:27:47.716 --> 00:27:49.616
It shows a tree of all the nodes

00:27:49.616 --> 00:27:51.936
that TVML uses to render UI on

00:27:51.936 --> 00:27:52.846
the screen.

00:27:53.536 --> 00:27:54.786
So the very first thing we did

00:27:54.786 --> 00:27:56.906
is we wanted to eliminate all

00:27:57.006 --> 00:27:58.256
guesswork as to the things you

00:27:58.256 --> 00:27:59.756
actually have to fix, and that

00:27:59.756 --> 00:28:00.936
is through the usage of

00:28:00.936 --> 00:28:01.756
visualization.

00:28:01.806 --> 00:28:03.536
If you move your mouse slowly

00:28:03.536 --> 00:28:05.576
over the nodes in your tree, we

00:28:05.726 --> 00:28:06.456
would highlight the

00:28:06.456 --> 00:28:07.586
corresponding views on the

00:28:07.586 --> 00:28:08.286
screen itself.

00:28:08.736 --> 00:28:09.756
We even give you information

00:28:09.756 --> 00:28:11.756
about its dimensions, and its

00:28:11.756 --> 00:28:13.116
elements that it is associated

00:28:14.656 --> 00:28:14.956
with.

00:28:14.956 --> 00:28:16.966
So now that you know the exact

00:28:16.966 --> 00:28:18.326
node you have to fix, you can

00:28:18.326 --> 00:28:19.966
edit the individual XML

00:28:19.966 --> 00:28:21.836
structure of that node itself.

00:28:22.506 --> 00:28:23.646
Any changes you make will

00:28:23.646 --> 00:28:25.616
validate before rendering UI for

00:28:25.616 --> 00:28:25.716
it.

00:28:26.876 --> 00:28:27.926
Now, if you don't want to deal

00:28:27.926 --> 00:28:29.126
with XML, and you just want to

00:28:29.126 --> 00:28:30.886
reorder nodes on the screen, you

00:28:30.886 --> 00:28:31.886
can also do that.

00:28:32.196 --> 00:28:33.826
It is as simple as dragging the

00:28:33.826 --> 00:28:35.206
nodes between the areas that you

00:28:35.206 --> 00:28:36.756
want it to go and then the

00:28:36.756 --> 00:28:37.756
screen updates itself.

00:28:39.386 --> 00:28:40.916
For developers that want to see

00:28:40.916 --> 00:28:42.036
their applications in a

00:28:42.036 --> 00:28:43.746
different light, light or dark,

00:28:44.026 --> 00:28:45.376
you can change the attributes on

00:28:45.376 --> 00:28:46.076
the template itself.

00:28:46.076 --> 00:28:47.336
In fact, you can change any

00:28:47.336 --> 00:28:49.106
attributes on any nodes you

00:28:49.106 --> 00:28:49.366
want.

00:28:49.956 --> 00:28:51.626
And finally, all these changes

00:28:51.626 --> 00:28:53.246
that you have made, you are able

00:28:53.246 --> 00:28:55.116
to copy it out and paste it in

00:28:55.116 --> 00:28:56.056
any file you want.

00:28:57.386 --> 00:28:58.646
Now that we've seen how we can

00:28:58.646 --> 00:29:00.136
change the layout itself, let's

00:29:00.136 --> 00:29:01.696
look at the properties we use to

00:29:01.696 --> 00:29:02.906
render UI on the screen.

00:29:04.046 --> 00:29:06.026
Web Inspector allows you now to

00:29:06.026 --> 00:29:07.266
look at the individual rules

00:29:07.266 --> 00:29:08.446
that are attached to individual

00:29:08.446 --> 00:29:09.856
nodes, so you can see every

00:29:09.856 --> 00:29:11.586
single rule that is used to

00:29:11.586 --> 00:29:12.826
render them on the screen.

00:29:14.156 --> 00:29:15.986
These are arranged in a cascade

00:29:15.986 --> 00:29:17.326
ordering, rules that matter the

00:29:17.326 --> 00:29:18.916
most are right at the top, and

00:29:18.916 --> 00:29:20.136
things that it overrides is

00:29:20.136 --> 00:29:22.586
loaded right at the bottom.

00:29:22.726 --> 00:29:24.446
Media queries are able to be

00:29:24.446 --> 00:29:25.736
visualized as well, so you'll be

00:29:25.736 --> 00:29:27.466
able to see the individual rules

00:29:27.536 --> 00:29:28.926
that correspond to specific

00:29:28.926 --> 00:29:30.596
media queries, so for example,

00:29:30.596 --> 00:29:32.906
you have rules for LTR, you will

00:29:32.906 --> 00:29:35.246
be able to see them grouped that

00:29:35.276 --> 00:29:35.446
way too.

00:29:35.446 --> 00:29:37.696
Finally, the Web Inspector

00:29:37.696 --> 00:29:38.866
allows you to look at the

00:29:38.866 --> 00:29:40.336
default rules that ship with the

00:29:40.336 --> 00:29:41.376
framework itself, so that

00:29:41.376 --> 00:29:43.106
totally takes guesswork out of

00:29:43.106 --> 00:29:44.286
figuring out what is the default

00:29:44.286 --> 00:29:46.126
rules that you have to change in

00:29:46.126 --> 00:29:47.566
order to make your UI look like

00:29:47.656 --> 00:29:50.216
the beauty it is.

00:29:50.216 --> 00:29:51.576
And of course, with all these

00:29:51.616 --> 00:29:53.576
rules that are displayed, we

00:29:53.956 --> 00:29:55.476
will also show you the coalesced

00:29:55.476 --> 00:29:56.506
version of it.

00:29:56.506 --> 00:29:57.886
These are the exact styles that

00:29:57.886 --> 00:29:59.246
the framework uses to render UI

00:29:59.246 --> 00:29:59.886
on the screen.

00:29:59.886 --> 00:30:04.106
In Web Inspector, there is a

00:30:04.106 --> 00:30:05.686
reload button, and now, by

00:30:05.686 --> 00:30:06.666
hitting the reload button, you

00:30:06.666 --> 00:30:08.326
are able to restart the entire

00:30:08.326 --> 00:30:10.036
JavaScript context without going

00:30:10.036 --> 00:30:11.336
through Build and Run over and

00:30:11.336 --> 00:30:11.916
over again.

00:30:12.536 --> 00:30:13.696
So with that, I'd love to show

00:30:13.696 --> 00:30:15.776
you a demo of all these features

00:30:15.776 --> 00:30:16.526
that I've talked about.

00:30:21.046 --> 00:30:23.496
So I have gone ahead and gotten

00:30:23.726 --> 00:30:25.316
the project ready, and updated

00:30:25.316 --> 00:30:27.016
the UI, but the last bit to do

00:30:27.016 --> 00:30:28.326
is to check if it accurately

00:30:28.326 --> 00:30:28.856
supports RTL.

00:30:28.856 --> 00:30:29.236
There we go.

00:30:29.236 --> 00:30:35.126
And once again, we are going to

00:30:35.126 --> 00:30:36.496
use the thing that Trevor taught

00:30:36.496 --> 00:30:37.966
us, by going to the scheme, and

00:30:38.186 --> 00:30:39.566
changing the system language to

00:30:39.566 --> 00:30:40.876
right-to-left pseudolanguage.

00:30:41.296 --> 00:30:42.976
Let's build and run.

00:30:55.046 --> 00:30:55.216
All right.

00:30:55.216 --> 00:30:57.006
As we can see, everything looks

00:30:57.076 --> 00:30:58.396
kind of right, except the banner

00:30:58.396 --> 00:30:59.826
right up there, which we haven't

00:30:59.826 --> 00:31:01.106
optimized for RTL.

00:31:01.726 --> 00:31:02.896
So instead of going through that

00:31:02.896 --> 00:31:04.276
Build and Run cycle that Trevor

00:31:04.276 --> 00:31:05.866
was doing, let's try to do it in

00:31:05.866 --> 00:31:06.536
Web Inspector.

00:31:06.916 --> 00:31:08.136
The way to do this is that you

00:31:08.136 --> 00:31:11.666
start Safari, there is a develop

00:31:11.666 --> 00:31:13.016
menu that I've already enabled,

00:31:13.016 --> 00:31:14.576
and you go into Simulator, and

00:31:14.576 --> 00:31:16.756
inspect the app that you want to

00:31:16.756 --> 00:31:17.796
look at.

00:31:20.266 --> 00:31:23.026
So Web Inspector starts up, and

00:31:23.026 --> 00:31:23.916
let's get going.

00:31:24.566 --> 00:31:26.946
So we want to change specific

00:31:26.946 --> 00:31:28.116
user interface elements on the

00:31:28.116 --> 00:31:29.506
screen, and we can see that the

00:31:29.506 --> 00:31:30.646
title, the subtitle, and the

00:31:30.646 --> 00:31:31.676
button needs some work.

00:31:31.676 --> 00:31:33.636
With Web Inspector, you can

00:31:33.636 --> 00:31:35.236
easily drill down to the exact

00:31:35.236 --> 00:31:37.006
nodes that it is related to by

00:31:37.006 --> 00:31:37.976
moving the mouse, and you can

00:31:37.976 --> 00:31:39.076
see that things start getting

00:31:39.076 --> 00:31:39.646
highlighted.

00:31:40.276 --> 00:31:41.626
So let's go quickly to the title

00:31:41.626 --> 00:31:41.976
and change it.

00:31:44.916 --> 00:31:46.706
Now, Web Inspector shows you all

00:31:46.706 --> 00:31:47.876
the rules that correspond to

00:31:47.876 --> 00:31:49.506
this node, and all we need to do

00:31:49.506 --> 00:31:51.396
is hunt for this pesky bottom

00:31:51.396 --> 00:31:52.436
left that should be actually

00:31:52.436 --> 00:31:53.186
bottom viewing.

00:31:53.516 --> 00:31:55.656
And as I type, observe what

00:31:55.656 --> 00:31:57.126
happens on the simulator screen

00:31:57.126 --> 00:31:57.526
itself.

00:31:59.316 --> 00:32:01.206
Boom, it updates automatically

00:32:01.206 --> 00:32:03.336
without needing to build and

00:32:03.336 --> 00:32:03.556
run.

00:32:03.556 --> 00:32:05.946
So it's so quick, so for those

00:32:05.946 --> 00:32:07.376
that missed it, let's try to do

00:32:07.376 --> 00:32:08.406
it again for the subtitle

00:32:08.406 --> 00:32:10.256
itself, and it's the same steps.

00:32:10.546 --> 00:32:12.426
Locate the element you want, and

00:32:12.426 --> 00:32:14.066
change the style associated with

00:32:14.066 --> 00:32:14.346
it.

00:32:16.186 --> 00:32:16.896
There we go.

00:32:17.876 --> 00:32:19.466
Now, let's quickly update the

00:32:19.466 --> 00:32:20.536
Play button as well, so it's on

00:32:20.536 --> 00:32:21.676
the right side of the screen.

00:32:23.496 --> 00:32:24.916
For that, we are going to change

00:32:24.916 --> 00:32:26.166
all right to trailing.

00:32:27.866 --> 00:32:34.026
Trailing. And of course, like

00:32:34.026 --> 00:32:35.526
Trevor did as well, we need a

00:32:35.526 --> 00:32:36.636
special media created for its

00:32:36.636 --> 00:32:38.676
margins, because it is different

00:32:38.676 --> 00:32:40.106
when in RTL language.

00:32:40.106 --> 00:32:41.666
So I am going to copy margin

00:32:41.666 --> 00:32:41.886
here.

00:32:43.096 --> 00:32:43.846
Paste it over.

00:32:45.106 --> 00:32:46.246
And change all that.

00:32:46.786 --> 00:32:47.806
And there we have it.

00:32:48.566 --> 00:32:49.786
Now, since all these changes

00:32:49.786 --> 00:32:51.176
were made to the author style

00:32:51.176 --> 00:32:52.596
sheet itself, which is contained

00:32:52.596 --> 00:32:54.876
in the style attribute, the

00:32:54.876 --> 00:32:56.376
style tag, we are going to copy

00:32:56.376 --> 00:32:57.016
this out.

00:32:58.216 --> 00:32:59.456
In order to verify, we are going

00:32:59.456 --> 00:33:00.786
to paste it into our TVML

00:33:00.786 --> 00:33:01.286
document.

00:33:01.796 --> 00:33:05.046
So here we go.

00:33:05.126 --> 00:33:08.626
And then instead of building and

00:33:08.626 --> 00:33:10.966
run, we're just going to hit

00:33:10.966 --> 00:33:11.396
Reload.

00:33:12.246 --> 00:33:12.896
And there we have it.

00:33:12.896 --> 00:33:14.416
Everything works correctly

00:33:14.416 --> 00:33:14.886
[applause].

00:33:14.886 --> 00:33:16.296
Let's go back to the slides.

00:33:17.516 --> 00:33:19.776
[ Applause ]

00:33:20.276 --> 00:33:21.496
So what we are seeing is a very

00:33:21.496 --> 00:33:22.926
quick way to figure out user

00:33:22.926 --> 00:33:24.286
interface issues and fix them.

00:33:24.286 --> 00:33:26.266
What we've done is we have

00:33:26.266 --> 00:33:27.776
looked for the particular nodes

00:33:27.776 --> 00:33:29.916
that it has affected, edited

00:33:29.916 --> 00:33:31.486
them in real time, and finally,

00:33:31.486 --> 00:33:32.936
verification is just done by

00:33:33.246 --> 00:33:35.276
copying the TVML properties out

00:33:35.446 --> 00:33:36.706
and restarting your JavaScript

00:33:36.706 --> 00:33:38.706
context without doing build and

00:33:38.706 --> 00:33:39.896
run over and over again.

00:33:40.946 --> 00:33:42.406
So that is the visual debugging.

00:33:42.406 --> 00:33:43.916
I would like to now move on to

00:33:43.916 --> 00:33:44.936
network analysis.

00:33:46.036 --> 00:33:47.526
Web Inspector now supports

00:33:47.526 --> 00:33:49.336
looking at all network requests

00:33:49.336 --> 00:33:50.686
that are sent from TVMLKit

00:33:50.686 --> 00:33:51.306
application.

00:33:52.166 --> 00:33:53.846
We will show you individual

00:33:53.846 --> 00:33:55.026
request timing information.

00:33:55.026 --> 00:33:56.996
So how long a DNS query takes.

00:33:56.996 --> 00:33:58.396
How long a response takes to get

00:33:58.396 --> 00:33:59.436
sent over the wire.

00:34:00.206 --> 00:34:01.846
You will inspect the individual

00:34:01.846 --> 00:34:03.246
request properties that you set

00:34:03.246 --> 00:34:04.626
on your request, so you can

00:34:04.626 --> 00:34:06.336
verify if these are the exact

00:34:06.336 --> 00:34:07.326
things we are sending out.

00:34:07.326 --> 00:34:09.556
And finally, response and

00:34:09.556 --> 00:34:11.206
request headers is something you

00:34:11.206 --> 00:34:13.996
can look at as well.

00:34:14.056 --> 00:34:15.275
You may have scripts already

00:34:15.275 --> 00:34:17.505
today that you use to develop

00:34:17.505 --> 00:34:18.806
local and session storage.

00:34:19.206 --> 00:34:20.286
There is no need to do that

00:34:20.286 --> 00:34:21.426
anymore, because Web Inspector

00:34:21.426 --> 00:34:23.126
provides a nice user interface

00:34:23.406 --> 00:34:24.696
to look at every single key

00:34:24.696 --> 00:34:26.815
value pass that is in your local

00:34:26.815 --> 00:34:28.936
and session storage, and because

00:34:28.936 --> 00:34:30.456
you can look at them, it also

00:34:30.456 --> 00:34:31.766
means you can modify them.

00:34:32.016 --> 00:34:33.775
So you can copy them, delete,

00:34:33.775 --> 00:34:34.766
and move them around.

00:34:35.326 --> 00:34:38.516
With that, that is TVMLKit and

00:34:38.516 --> 00:34:39.985
Web Inspector support, and that

00:34:39.985 --> 00:34:40.966
is also how you achieve

00:34:40.966 --> 00:34:41.606
happiness.

00:34:42.516 --> 00:34:45.545
[ Applause ]

00:34:46.045 --> 00:34:47.045
So what we've seen today,

00:34:47.775 --> 00:34:49.666
TVMLKit supports RTL right out

00:34:49.666 --> 00:34:50.806
of the box for all default

00:34:50.806 --> 00:34:51.356
templates.

00:34:51.476 --> 00:34:52.616
It is a little bit of work if

00:34:52.616 --> 00:34:54.436
you have custom styles, but it

00:34:54.436 --> 00:34:55.295
is easy to do.

00:34:56.005 --> 00:34:57.326
Use data binding and prototypes

00:34:57.326 --> 00:34:58.286
if you want buttery smooth

00:34:58.286 --> 00:35:00.606
scrolling, like Parry has said,

00:35:00.736 --> 00:35:02.906
and finally, use Web Inspector

00:35:02.906 --> 00:35:04.426
if you want to reduce the amount

00:35:04.426 --> 00:35:05.876
of development time it takes to

00:35:05.876 --> 00:35:06.456
fix bugs.

00:35:06.646 --> 00:35:08.386
For more information, please

00:35:08.386 --> 00:35:09.456
visit the following URL.

00:35:09.756 --> 00:35:10.656
We have sample code and

00:35:10.656 --> 00:35:11.646
documentation that you should

00:35:11.646 --> 00:35:12.606
really look at.

00:35:13.286 --> 00:35:15.026
There are amazing sessions, as

00:35:15.026 --> 00:35:16.686
well, especially What's New in

00:35:16.686 --> 00:35:18.116
tvOS tomorrow.

00:35:18.956 --> 00:35:21.486
Thank you for attending WWDC 17,

00:35:21.556 --> 00:35:22.456
and have a great rest of the

00:35:22.456 --> 00:35:22.946
conference.

00:35:23.516 --> 00:35:32.870
[ Applause ]