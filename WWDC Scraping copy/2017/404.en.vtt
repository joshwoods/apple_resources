WEBVTT

00:00:20.116 --> 00:00:22.856
>> Good morning, and welcome to

00:00:22.856 --> 00:00:24.306
Debugging with Xcode 9.

00:00:25.296 --> 00:00:26.826
I'm Chris Miles and I work on

00:00:26.906 --> 00:00:27.386
Xcode.

00:00:27.906 --> 00:00:29.056
We've got a lot of great new

00:00:29.056 --> 00:00:30.526
debugging features to talk about

00:00:30.526 --> 00:00:32.036
today, so let's dive straight

00:00:32.036 --> 00:00:33.026
into it.

00:00:33.666 --> 00:00:35.746
I'd like to start by talking

00:00:35.746 --> 00:00:37.646
about developing and debugging

00:00:37.646 --> 00:00:38.346
with devices.

00:00:39.146 --> 00:00:40.626
Let's take a look at our typical

00:00:40.626 --> 00:00:41.696
development configuration.

00:00:42.716 --> 00:00:44.046
We've got our Mac running Xcode

00:00:44.046 --> 00:00:45.966
and nearby we have the device

00:00:45.966 --> 00:00:46.956
that we're developing with.

00:00:47.656 --> 00:00:49.556
Connecting the two we have the

00:00:49.556 --> 00:00:50.826
familiar white cable.

00:00:50.826 --> 00:00:53.206
Now, this configuration has

00:00:53.206 --> 00:00:55.006
suited us very well for almost

00:00:55.006 --> 00:00:57.026
ten years now, but more and more

00:00:57.026 --> 00:00:58.776
developers are finding needs to

00:00:58.776 --> 00:01:01.236
be more mobile while debugging

00:01:01.356 --> 00:01:03.696
with their devices, and to make

00:01:03.736 --> 00:01:05.196
this easier, I'm proud to

00:01:05.196 --> 00:01:07.736
announce that with Xcode 9 that

00:01:07.736 --> 00:01:08.976
white cable is no longer needed.

00:01:09.516 --> 00:01:15.316
[ Applause ]

00:01:15.816 --> 00:01:17.366
It is now possible to develop

00:01:17.366 --> 00:01:18.896
and debug on your device over

00:01:18.896 --> 00:01:21.166
Wi-Fi, and we call this wireless

00:01:21.166 --> 00:01:21.746
development.

00:01:21.746 --> 00:01:25.736
So who can take advantage of

00:01:25.736 --> 00:01:26.696
wireless development?

00:01:27.346 --> 00:01:28.506
Well, we think many developers

00:01:28.506 --> 00:01:29.686
are going to love it, but here

00:01:29.686 --> 00:01:31.106
are some obvious examples.

00:01:31.786 --> 00:01:34.076
With the introduction of ARKit

00:01:34.426 --> 00:01:36.156
this week, I'm sure many of you

00:01:36.156 --> 00:01:38.316
are eager to sit down and build

00:01:38.316 --> 00:01:40.626
an augmented reality app.

00:01:42.416 --> 00:01:44.226
While debugging your app you're

00:01:44.226 --> 00:01:45.196
going to need to be moving

00:01:45.196 --> 00:01:46.366
around more than you might be

00:01:46.366 --> 00:01:47.976
used to, holding your phone,

00:01:48.336 --> 00:01:49.516
doing this kind of thing, and

00:01:49.886 --> 00:01:51.226
being able to get away from the

00:01:51.226 --> 00:01:52.436
computer to do this will make

00:01:52.436 --> 00:01:53.796
that much easier than it

00:01:53.796 --> 00:01:55.406
otherwise would have been.

00:01:56.416 --> 00:01:57.456
For those of you building

00:01:57.456 --> 00:01:59.406
fitness apps, you probably know

00:01:59.406 --> 00:02:01.156
that the best way to test and

00:02:01.156 --> 00:02:02.336
debug your fitness app is for

00:02:02.336 --> 00:02:03.616
the athlete to wear the device

00:02:03.676 --> 00:02:05.046
on them while they work out.

00:02:06.026 --> 00:02:07.156
Being untethered from the Mac

00:02:07.156 --> 00:02:08.556
will make this much easier as

00:02:08.556 --> 00:02:08.996
well.

00:02:09.596 --> 00:02:12.956
For those of you building apps

00:02:12.956 --> 00:02:15.276
for accessories, I'm happy to

00:02:15.276 --> 00:02:16.686
tell you that you are finally

00:02:16.736 --> 00:02:17.826
able to debug your app on the

00:02:17.826 --> 00:02:17.976
device

00:02:18.106 --> 00:02:20.016
while the accessory's plugged in

00:02:20.016 --> 00:02:21.776
to the Lightning port.

00:02:22.516 --> 00:02:24.636
[ Applause ]

00:02:25.136 --> 00:02:26.296
We think accessory makers are

00:02:26.296 --> 00:02:27.276
going to love wireless

00:02:27.276 --> 00:02:27.876
development.

00:02:29.226 --> 00:02:30.186
And for the rest of us

00:02:30.546 --> 00:02:31.976
convenience will be a big factor

00:02:32.326 --> 00:02:34.496
in choosing when to go wireless.

00:02:34.746 --> 00:02:35.986
We don't always remember to

00:02:35.986 --> 00:02:37.686
bring our cables with us or

00:02:37.686 --> 00:02:38.776
sometimes the Lightning port is

00:02:38.776 --> 00:02:40.236
in use for some other purpose.

00:02:40.756 --> 00:02:42.146
But now, just having the option

00:02:42.146 --> 00:02:44.096
to jump on a Wi-Fi network to

00:02:44.096 --> 00:02:45.396
continue developing and

00:02:45.396 --> 00:02:47.136
debugging on our device, will be

00:02:47.136 --> 00:02:48.246
a huge convenience.

00:02:48.776 --> 00:02:50.936
Now, it's not only iOS

00:02:50.976 --> 00:02:53.266
developers who can enjoy this

00:02:53.266 --> 00:02:53.906
convenience.

00:02:54.846 --> 00:02:56.266
Wirelessly connected Apple TVs

00:02:56.266 --> 00:02:56.976
are also supported.

00:02:57.516 --> 00:03:02.546
[ Applause ]

00:03:03.046 --> 00:03:04.566
So now Apple TV developers can

00:03:04.566 --> 00:03:05.916
develop and debug on their Apple

00:03:05.916 --> 00:03:08.166
TVs over Wi-Fi.

00:03:08.456 --> 00:03:10.256
Apple TV developers, your living

00:03:10.256 --> 00:03:11.836
room is now your development

00:03:11.836 --> 00:03:12.306
studio.

00:03:12.736 --> 00:03:14.676
Sit back and relax on your couch

00:03:14.906 --> 00:03:16.476
while you build the next great

00:03:16.476 --> 00:03:16.976
Apple TV game

00:03:17.016 --> 00:03:18.161
[ Applause ]

00:03:18.161 --> 00:03:19.306
.

00:03:19.306 --> 00:03:20.486
There's no need to stretch

00:03:20.486 --> 00:03:22.246
cables across the room, to trip

00:03:22.246 --> 00:03:24.506
over your kids or roommates or

00:03:24.506 --> 00:03:25.156
dogs or cats.

00:03:25.596 --> 00:03:26.916
We think Apple TV developers are

00:03:26.916 --> 00:03:28.046
going to love wireless

00:03:28.046 --> 00:03:29.536
development, and we can't wait

00:03:29.536 --> 00:03:31.486
to see the next great Apple TV

00:03:31.486 --> 00:03:32.306
game that you build while

00:03:32.306 --> 00:03:32.976
relaxing in your living room.

00:03:40.236 --> 00:03:41.486
So what do you need to be able

00:03:41.486 --> 00:03:42.796
to take advantage of wireless

00:03:42.796 --> 00:03:43.366
development?

00:03:44.156 --> 00:03:45.206
Well, you just need an iPhone,

00:03:45.206 --> 00:03:47.706
iPad or iPod touch, running iOS

00:03:47.706 --> 00:03:49.986
11 or an Apple TV running tvOS

00:03:49.986 --> 00:03:50.526
11.

00:03:50.526 --> 00:03:52.736
And on the Mac you just need to

00:03:52.736 --> 00:03:56.656
be running macOS 10.12.4 or

00:03:56.836 --> 00:03:56.976
later.

00:03:57.056 --> 00:03:58.016
What about tools support?

00:03:59.126 --> 00:04:00.656
Well, Xcode has extensive

00:04:00.656 --> 00:04:02.256
support for wirelessly connected

00:04:02.256 --> 00:04:02.816
devices.

00:04:03.206 --> 00:04:04.446
In fact, Xcode treats a

00:04:04.446 --> 00:04:06.246
wirelessly connected device in

00:04:06.246 --> 00:04:07.816
exactly the same way as a USB

00:04:07.816 --> 00:04:09.496
connected device, so all of the

00:04:09.496 --> 00:04:11.036
device actions will just work,

00:04:11.666 --> 00:04:13.036
installing and running your app

00:04:13.036 --> 00:04:14.256
on the device, of course, as

00:04:14.256 --> 00:04:15.666
well as debugging your app, and

00:04:15.856 --> 00:04:16.986
this includes all of the

00:04:16.986 --> 00:04:18.656
advanced debugging features,

00:04:18.656 --> 00:04:19.866
such as V debugging, Memory

00:04:19.866 --> 00:04:21.346
Graph debugging and GP Frame

00:04:21.346 --> 00:04:21.706
debugging.

00:04:22.836 --> 00:04:24.316
Profiling in instruments works

00:04:24.316 --> 00:04:26.126
great as well, and other tools

00:04:26.126 --> 00:04:27.596
that also support wirelessly

00:04:27.596 --> 00:04:29.036
connected devices, include

00:04:29.036 --> 00:04:31.206
Accessibility Inspector, Console

00:04:31.206 --> 00:04:32.356
and Configurator.

00:04:32.586 --> 00:04:38.046
For tvOS developers, Safari Web

00:04:38.046 --> 00:04:40.366
Inspector supports wirelessly

00:04:40.366 --> 00:04:41.476
connected Apple TVs.

00:04:41.826 --> 00:04:43.396
So this is great news for

00:04:43.396 --> 00:04:44.446
TVMLKit developers.

00:04:44.856 --> 00:04:46.096
And QuickTime screen recording

00:04:46.096 --> 00:04:48.256
also supports wirelessly

00:04:48.256 --> 00:04:51.246
connected Apple TVs.

00:04:51.436 --> 00:04:52.286
Now, while we're calling this

00:04:52.286 --> 00:04:53.696
wireless development, strictly

00:04:53.696 --> 00:04:55.506
speaking, you're not limited to

00:04:55.506 --> 00:04:56.666
only connecting your devices

00:04:56.666 --> 00:04:57.256
over Wi-Fi.

00:04:57.436 --> 00:04:59.436
While Wi-Fi will be a popular

00:04:59.436 --> 00:05:01.956
choice, for those of us that

00:05:01.956 --> 00:05:03.316
support it, Ethernet will work

00:05:03.316 --> 00:05:04.156
great as well.

00:05:04.666 --> 00:05:06.476
Really, any combination of Wi-Fi

00:05:06.476 --> 00:05:08.056
and Ethernet to connect your

00:05:08.056 --> 00:05:09.006
device and your Mac over the

00:05:09.006 --> 00:05:11.216
network works great, provided

00:05:11.216 --> 00:05:12.536
that your Mac and your device

00:05:12.536 --> 00:05:14.626
can connect to each other over

00:05:14.626 --> 00:05:15.806
that network.

00:05:18.656 --> 00:05:20.916
And just to be clear, the option

00:05:20.916 --> 00:05:22.366
to connect your devices over USB

00:05:22.676 --> 00:05:24.276
remains as it always has been.

00:05:24.496 --> 00:05:25.436
So these are now all your

00:05:25.436 --> 00:05:27.306
options for connecting your

00:05:27.306 --> 00:05:29.266
devices with your development

00:05:29.266 --> 00:05:29.626
tools.

00:05:30.176 --> 00:05:33.106
So that's just been a brief

00:05:33.156 --> 00:05:34.586
introduction to wireless

00:05:34.586 --> 00:05:35.136
development.

00:05:35.256 --> 00:05:36.816
And now, to give you details on

00:05:36.816 --> 00:05:38.246
how to pair your devices and to

00:05:38.246 --> 00:05:39.286
talk about the workflow, I'd

00:05:39.286 --> 00:05:39.916
like to invite up Breckin.

00:05:40.516 --> 00:05:46.606
[ Applause ]

00:05:47.106 --> 00:05:49.816
>> Thanks, Chris.

00:05:49.866 --> 00:05:50.336
All right.

00:05:50.386 --> 00:05:52.166
Well, we've been working really

00:05:52.166 --> 00:05:53.876
hard on wireless development for

00:05:53.876 --> 00:05:56.366
Xcode 9, and I can't wait to

00:05:56.366 --> 00:05:58.586
talk about it with you, so let's

00:05:58.586 --> 00:05:59.176
get started.

00:06:00.286 --> 00:06:01.676
How do you set up your device

00:06:01.806 --> 00:06:03.016
for wireless development?

00:06:03.626 --> 00:06:05.066
Well, it's really easy.

00:06:05.816 --> 00:06:07.436
Just go to the Devices and

00:06:07.436 --> 00:06:09.816
Simulators window and connect

00:06:09.816 --> 00:06:12.396
your device to your Mac with

00:06:12.396 --> 00:06:13.576
your Lightning or USB cable.

00:06:14.556 --> 00:06:15.626
The device will show up, as it

00:06:15.626 --> 00:06:16.386
always has, but you'll notice

00:06:16.386 --> 00:06:16.956
there's a new option.

00:06:22.046 --> 00:06:23.256
Connect via network.

00:06:24.246 --> 00:06:26.776
Just enable this option and if

00:06:26.776 --> 00:06:28.566
the device and the Mac are on

00:06:28.566 --> 00:06:30.486
the same network, after a few

00:06:30.486 --> 00:06:32.316
moments you'll see a globe icon

00:06:32.316 --> 00:06:32.826
appear to the right of the

00:06:32.826 --> 00:06:32.976
device.

00:06:37.226 --> 00:06:38.906
Once this globe icon appears,

00:06:38.996 --> 00:06:40.596
you know you can unplug your

00:06:40.596 --> 00:06:42.256
cable and continue developing

00:06:42.256 --> 00:06:43.666
your app completely wirelessly.

00:06:44.166 --> 00:06:46.346
Now, this works identically for

00:06:46.346 --> 00:06:48.366
iPhone, iPad, iPod touch and

00:06:48.366 --> 00:06:51.396
Apple TV, but for Apple TV

00:06:52.566 --> 00:06:53.426
there's something else.

00:06:54.166 --> 00:06:56.556
So as Chris mentioned, a lot of

00:06:56.556 --> 00:06:58.266
our Apple TVs, they're not

00:06:58.266 --> 00:06:59.766
sitting on our desks, they're in

00:06:59.766 --> 00:07:01.116
our entertainment center and,

00:07:01.206 --> 00:07:02.516
you know, you've got your cables

00:07:02.516 --> 00:07:03.496
set up just the way you want

00:07:03.496 --> 00:07:04.946
them, all of that.

00:07:04.946 --> 00:07:05.976
The last thing you want to do is

00:07:05.976 --> 00:07:07.146
reach back there and unplug

00:07:07.146 --> 00:07:08.866
everything and connect a USB-C

00:07:08.866 --> 00:07:11.846
cable, so luckily for Apple TV,

00:07:11.986 --> 00:07:12.806
you don't have to do that.

00:07:12.906 --> 00:07:14.386
We support wireless pairing in

00:07:14.386 --> 00:07:17.336
Discovery, so to do that all you

00:07:17.336 --> 00:07:18.966
have to do is go to the Remote

00:07:18.966 --> 00:07:21.146
App and Devices screen on your

00:07:21.146 --> 00:07:21.726
Apple TV.

00:07:23.006 --> 00:07:24.866
Once you go there, go back to

00:07:24.866 --> 00:07:25.976
the Devices and Simulators

00:07:25.976 --> 00:07:26.826
window in Xcode.

00:07:27.326 --> 00:07:29.276
That Apple TV will appear as a

00:07:29.276 --> 00:07:31.096
discovered device automatically.

00:07:31.706 --> 00:07:33.626
Once you select that device, a

00:07:33.626 --> 00:07:34.666
pin code will appear on your

00:07:34.666 --> 00:07:35.186
Apple TV.

00:07:35.706 --> 00:07:37.696
Just put that pin code in and

00:07:38.926 --> 00:07:39.906
click Connect.

00:07:41.096 --> 00:07:43.546
After you connect it will be the

00:07:43.546 --> 00:07:45.246
same as if you had paired with

00:07:45.246 --> 00:07:47.316
it via USB-C cable.

00:07:47.806 --> 00:07:49.206
We think this is great for Apple

00:07:49.276 --> 00:07:50.846
TV development.

00:07:52.636 --> 00:07:53.236
All right.

00:07:53.236 --> 00:07:56.476
So that's getting paired, but I

00:07:56.476 --> 00:07:57.536
know some of you are wondering,

00:07:57.716 --> 00:07:58.846
you know, is it really that easy

00:07:58.846 --> 00:08:01.746
to connect, and the answer for

00:08:01.746 --> 00:08:04.176
almost everyone is absolutely.

00:08:04.546 --> 00:08:07.936
So for most home and small

00:08:07.936 --> 00:08:09.306
business networks no

00:08:09.306 --> 00:08:10.566
configuration is necessary.

00:08:10.796 --> 00:08:12.176
Just make sure that your Mac and

00:08:12.176 --> 00:08:13.186
your devices are on the same

00:08:13.186 --> 00:08:14.226
network and everything just

00:08:14.226 --> 00:08:14.466
works.

00:08:15.396 --> 00:08:18.466
Now, we know some of you work on

00:08:18.466 --> 00:08:20.036
more complex networks, say

00:08:20.036 --> 00:08:21.736
corporate, large institutional

00:08:21.736 --> 00:08:23.626
networks, and if your system

00:08:23.626 --> 00:08:26.126
administrator has set up certain

00:08:26.296 --> 00:08:27.806
restrictions, it may be a little

00:08:27.806 --> 00:08:29.506
more difficult, but not by much

00:08:29.506 --> 00:08:30.726
because we now support

00:08:30.896 --> 00:08:32.226
connecting directly by IP

00:08:32.226 --> 00:08:34.666
address to your device.

00:08:35.696 --> 00:08:36.626
This is really easy.

00:08:37.035 --> 00:08:38.876
Not quite as easy as doing

00:08:38.876 --> 00:08:40.775
nothing, but all you have to do

00:08:40.775 --> 00:08:42.285
is Control click on the device

00:08:42.285 --> 00:08:43.346
in the Devices and Simulators

00:08:43.346 --> 00:08:46.686
window and you'll see a Connect

00:08:46.686 --> 00:08:47.636
via IP address option.

00:08:47.846 --> 00:08:51.716
Just click that and then go to

00:08:51.716 --> 00:08:52.956
your settings on your device,

00:08:53.296 --> 00:08:54.836
get your IP address, enter it in

00:08:54.836 --> 00:08:55.666
and you can connect.

00:08:55.946 --> 00:08:58.736
So adds a little bit of a

00:08:58.736 --> 00:08:59.626
technical aside.

00:09:00.306 --> 00:09:01.846
If you can ping the device from

00:09:01.846 --> 00:09:03.826
the Mac, you're probably good to

00:09:03.826 --> 00:09:04.106
go.

00:09:04.306 --> 00:09:06.836
Now, if you want any of the

00:09:06.836 --> 00:09:08.566
deeper details as far as ports,

00:09:08.756 --> 00:09:09.646
maybe to pass to your system

00:09:09.646 --> 00:09:11.226
administrator, please check out

00:09:11.226 --> 00:09:12.166
the wireless development

00:09:12.166 --> 00:09:12.936
documentation.

00:09:12.936 --> 00:09:14.176
It's got all of that detail.

00:09:14.406 --> 00:09:16.076
But, you know, to reiterate, for

00:09:16.076 --> 00:09:17.856
almost everyone almost all of

00:09:17.856 --> 00:09:19.416
the time you won't need to do

00:09:19.416 --> 00:09:20.916
any of this.

00:09:21.246 --> 00:09:22.606
Okay. So now that we have

00:09:22.606 --> 00:09:23.716
connectivity and pairing out of

00:09:23.716 --> 00:09:25.266
the way, it's time to actually

00:09:25.266 --> 00:09:27.566
work on your app.

00:09:27.786 --> 00:09:32.196
So to do that, well, nothing's

00:09:32.196 --> 00:09:32.826
really changed.

00:09:33.436 --> 00:09:34.826
Just select your device in the

00:09:34.826 --> 00:09:36.556
Devices list, only now, when

00:09:36.556 --> 00:09:38.016
it's connected, you'll see a

00:09:38.016 --> 00:09:39.526
globe to the right of the device

00:09:39.646 --> 00:09:40.756
just like you see in the Devices

00:09:40.756 --> 00:09:41.066
window.

00:09:41.536 --> 00:09:43.176
Now, if you don't see a globe,

00:09:43.416 --> 00:09:44.686
that means that it's not

00:09:44.686 --> 00:09:45.356
connected right now.

00:09:45.356 --> 00:09:46.646
Maybe it's asleep in your

00:09:46.646 --> 00:09:47.016
pocket.

00:09:47.746 --> 00:09:48.406
Don't worry.

00:09:48.516 --> 00:09:49.476
Build and run to it anyway.

00:09:49.906 --> 00:09:50.636
We'll connect to it

00:09:50.636 --> 00:09:51.856
automatically.

00:09:52.706 --> 00:09:53.256
All right.

00:09:53.256 --> 00:09:55.066
So that's a little bit about how

00:09:55.066 --> 00:09:56.076
to get started with wireless

00:09:56.076 --> 00:09:56.576
development.

00:09:56.576 --> 00:09:58.186
But enough talking about it.

00:09:58.236 --> 00:09:58.976
I'd love to show it to you.

00:10:19.476 --> 00:10:20.856
Okay. Here I am with my Mac.

00:10:21.226 --> 00:10:22.156
I've got a phone.

00:10:22.156 --> 00:10:23.626
We've put it on a camera here to

00:10:23.626 --> 00:10:24.426
show you the cable.

00:10:26.916 --> 00:10:28.686
And I would like to make this

00:10:29.536 --> 00:10:31.686
iPhone enabled for wireless

00:10:31.686 --> 00:10:32.236
development.

00:10:32.386 --> 00:10:33.696
I'm going to select Xcode, go to

00:10:33.736 --> 00:10:35.656
the Devices and Simulators

00:10:35.656 --> 00:10:35.966
window.

00:10:43.046 --> 00:10:43.756
And you'll see here's our new

00:10:43.756 --> 00:10:44.096
option.

00:10:44.976 --> 00:10:47.466
Once I check that the device and

00:10:47.466 --> 00:10:48.466
Xcode will communicate,

00:10:49.006 --> 00:10:50.056
establish a connection.

00:10:50.056 --> 00:10:51.806
As long as you're on the same

00:10:52.296 --> 00:10:54.246
network, you'll see the globe

00:10:54.246 --> 00:10:54.886
icon appear.

00:10:55.216 --> 00:10:57.866
So what's next after this?

00:10:57.866 --> 00:10:58.976
It's time to pull the plug.

00:11:05.166 --> 00:11:06.356
Okay. So we see the phone is

00:11:06.356 --> 00:11:07.736
still connected, it's still got

00:11:07.736 --> 00:11:09.816
the globe icon, and that lets

00:11:09.816 --> 00:11:10.906
you know that you're ready to do

00:11:10.906 --> 00:11:11.496
development.

00:11:11.896 --> 00:11:14.006
So I'm going to open an app that

00:11:14.116 --> 00:11:14.966
my colleagues and I have been

00:11:14.966 --> 00:11:15.376
working on.

00:11:15.696 --> 00:11:18.906
It's called SolarSystem, and you

00:11:18.906 --> 00:11:19.976
can read about it a little bit

00:11:19.976 --> 00:11:20.716
in the README.

00:11:20.716 --> 00:11:22.336
For now I'm going to click the

00:11:22.336 --> 00:11:22.906
Play button.

00:11:23.206 --> 00:11:24.976
This will build the app.

00:11:34.426 --> 00:11:36.476
It will run, it will install and

00:11:37.326 --> 00:11:38.866
will launch the app and attach

00:11:38.866 --> 00:11:40.446
the debugger, and it will do all

00:11:40.446 --> 00:11:42.116
of that completely wirelessly.

00:11:44.546 --> 00:11:46.976
So the SolarSystem app provides

00:11:46.976 --> 00:11:49.016
a way for users to explore the

00:11:49.016 --> 00:11:50.256
solar system in a fun and

00:11:50.256 --> 00:11:51.016
interactive way.

00:11:51.386 --> 00:11:54.256
So as soon as it comes up, we'll

00:11:54.256 --> 00:11:54.976
take a quick look at it.

00:12:02.046 --> 00:12:02.386
All right.

00:12:02.386 --> 00:12:03.656
So here are our planets orbiting

00:12:03.656 --> 00:12:04.016
around.

00:12:04.016 --> 00:12:06.796
And I've been working on a fun

00:12:06.796 --> 00:12:08.376
feature called Moon Jumper.

00:12:08.576 --> 00:12:10.636
I'm going to tap this little

00:12:10.816 --> 00:12:13.826
weight icon on the bottom.

00:12:13.956 --> 00:12:16.006
So this is really fun.

00:12:16.056 --> 00:12:18.786
It lets kids take their iPhone,

00:12:19.746 --> 00:12:21.506
jump up and down and see how

00:12:21.506 --> 00:12:22.576
high they would jump if they

00:12:22.576 --> 00:12:23.136
were on the moon.

00:12:23.326 --> 00:12:25.236
So really fun to watch people

00:12:25.236 --> 00:12:26.176
play around with it.

00:12:26.396 --> 00:12:27.546
So we've got our little

00:12:27.546 --> 00:12:29.886
astronaut and our astronaut's on

00:12:29.886 --> 00:12:31.936
the moon, and now, we've gotten

00:12:31.936 --> 00:12:33.486
some reports that it's a little

00:12:33.486 --> 00:12:35.386
too easy to jump.

00:12:35.496 --> 00:12:37.336
So we've set this bar to 180

00:12:37.336 --> 00:12:37.626
feet.

00:12:37.996 --> 00:12:39.456
That should take a little bit of

00:12:39.456 --> 00:12:41.476
effort, but people are finding

00:12:41.476 --> 00:12:42.376
that they can get there pretty

00:12:42.376 --> 00:12:42.646
easily.

00:12:42.896 --> 00:12:44.376
I'd like to test this out.

00:12:44.526 --> 00:12:45.966
So let's think about how would

00:12:45.966 --> 00:12:47.976
you test this out before

00:12:48.056 --> 00:12:48.926
wireless development.

00:12:49.276 --> 00:12:51.496
Right. Well, you got it plugged

00:12:51.496 --> 00:12:52.676
in, right, so you're going to

00:12:52.676 --> 00:12:53.776
pick it up and you're going to

00:12:53.776 --> 00:12:54.906
try and get the accelerometer to

00:12:54.906 --> 00:12:56.436
do what you want to do, and all

00:12:56.436 --> 00:12:57.226
of that kind of stuff.

00:12:57.226 --> 00:12:59.016
Well, you know, this is a

00:12:59.016 --> 00:13:01.696
jumping app and if I need to put

00:13:01.696 --> 00:13:03.216
a breakpoint right here, which I

00:13:03.216 --> 00:13:04.696
happen to know is the place that

00:13:04.696 --> 00:13:06.626
should stop when I've jumped

00:13:06.626 --> 00:13:08.556
high enough, if I want to see

00:13:08.556 --> 00:13:09.636
what that feels like, because

00:13:09.636 --> 00:13:10.586
I've had people tell me it

00:13:10.586 --> 00:13:11.716
doesn't feel right, I need to

00:13:11.716 --> 00:13:14.096
actually jump, so that's pretty

00:13:14.096 --> 00:13:17.176
much what I'm going to do.

00:13:17.406 --> 00:13:23.296
Okay. Someone put me up to this

00:13:23.296 --> 00:13:24.776
[laughter].

00:13:24.776 --> 00:13:25.046
All right.

00:13:25.106 --> 00:13:26.446
So you can't see the screen, so

00:13:26.446 --> 00:13:27.186
I'm going to describe what's

00:13:27.186 --> 00:13:27.546
going on.

00:13:27.546 --> 00:13:28.846
I'm going to jump a little bit.

00:13:29.776 --> 00:13:31.716
Okay. Now, the astronaut jumped

00:13:32.206 --> 00:13:33.966
quite a bit, but not high enough

00:13:33.966 --> 00:13:34.376
to reach.

00:13:34.376 --> 00:13:36.566
Let's see if I can actually jump

00:13:36.566 --> 00:13:38.566
to 180 feet.

00:13:39.666 --> 00:13:39.976
Let's see.

00:13:40.046 --> 00:13:41.596
Did I get it?

00:13:42.226 --> 00:13:44.226
[ Laughter ]

00:13:44.436 --> 00:13:47.086
Come on. Oh, there we go.

00:13:47.146 --> 00:13:47.956
All right.

00:13:48.516 --> 00:13:55.586
[ Applause ]

00:13:56.086 --> 00:13:56.366
All right.

00:13:56.366 --> 00:13:58.536
So we're paused in the app.

00:13:58.536 --> 00:14:00.406
Gravity is the value that you

00:14:00.406 --> 00:14:03.256
got to, required acceleration is

00:14:03.796 --> 00:14:05.846
the amount that is required, and

00:14:05.846 --> 00:14:07.666
it looks like what's probably

00:14:07.666 --> 00:14:10.676
happening is that this value

00:14:10.676 --> 00:14:15.466
here needs to be a little lower

00:14:15.466 --> 00:14:16.846
so that it takes longer to jump.

00:14:16.996 --> 00:14:18.546
So I don't have time at the

00:14:18.546 --> 00:14:20.586
moment to demonstrate that or to

00:14:20.586 --> 00:14:21.836
fix it, so I'm going to go ahead

00:14:21.836 --> 00:14:22.966
and clear this breakpoint, click

00:14:23.026 --> 00:14:23.326
Continue.

00:14:33.826 --> 00:14:34.246
All right.

00:14:34.436 --> 00:14:35.096
Looks like we lost the

00:14:35.096 --> 00:14:35.556
connection.

00:14:35.556 --> 00:14:36.196
That's no problem.

00:14:36.226 --> 00:14:37.616
Let's see, actually, if we can

00:14:37.616 --> 00:14:37.976
attach back to it.

00:14:45.196 --> 00:14:47.326
So you'll notice in Xcode 9 we

00:14:47.326 --> 00:14:49.266
now auto complete the process

00:14:49.266 --> 00:14:50.946
name, we tokenize it, and you

00:14:51.316 --> 00:14:53.466
get completion in this entry,

00:14:53.466 --> 00:14:53.976
which is really nice.

00:15:00.046 --> 00:15:00.446
All right.

00:15:00.446 --> 00:15:00.936
We're back.

00:15:01.516 --> 00:15:07.616
[ Applause ]

00:15:08.116 --> 00:15:08.676
All right.

00:15:08.676 --> 00:15:09.686
So there's one more thing that

00:15:09.686 --> 00:15:12.016
I'd like to take a look at, and

00:15:12.466 --> 00:15:13.696
that's a performance problem

00:15:13.996 --> 00:15:15.736
that my colleague was pointing

00:15:15.736 --> 00:15:15.866
out.

00:15:15.866 --> 00:15:17.476
We were tapping around with the

00:15:17.476 --> 00:15:18.706
SolarSystem and they noticed

00:15:19.306 --> 00:15:20.636
when they tapped on Jupiter,

00:15:21.896 --> 00:15:23.446
there's a bit of a lag.

00:15:23.616 --> 00:15:25.376
The camera doesn't show it

00:15:25.376 --> 00:15:26.846
really well, but you can kind of

00:15:26.846 --> 00:15:28.496
see a pause and, you know,

00:15:28.706 --> 00:15:31.976
that's impacting battery life

00:15:32.016 --> 00:15:32.626
and we just kind of want to take

00:15:32.656 --> 00:15:33.496
a look and see if we can figure

00:15:33.526 --> 00:15:33.976
out what's going on.

00:15:38.046 --> 00:15:38.806
So I'm going to go to the Energy

00:15:38.806 --> 00:15:39.406
Impact Gauge.

00:15:39.476 --> 00:15:40.286
Sure enough it's high.

00:15:40.286 --> 00:15:41.496
You'll notice that this has been

00:15:41.496 --> 00:15:42.896
redesigned in Xcode 9 to give

00:15:42.896 --> 00:15:44.466
you a much better look at

00:15:44.466 --> 00:15:46.576
exactly where your energy is

00:15:46.576 --> 00:15:47.746
being consumed by your app.

00:15:47.746 --> 00:15:50.176
So in this case we've got the

00:15:50.176 --> 00:15:51.826
CPU, which I think is probably

00:15:51.826 --> 00:15:53.066
taking a little bit more than it

00:15:53.066 --> 00:15:55.736
should for a GPU-oriented app,

00:15:55.926 --> 00:15:57.606
and it goes up every time I

00:15:57.606 --> 00:15:58.186
touch that.

00:15:58.506 --> 00:16:00.956
So what do we do when we need to

00:16:00.956 --> 00:16:02.116
dig deeper into performance

00:16:02.116 --> 00:16:02.546
problems?

00:16:02.756 --> 00:16:03.736
Well, we go into Instruments.

00:16:04.136 --> 00:16:05.386
Now, some of you may not know

00:16:05.386 --> 00:16:06.556
this, but there's a really cool

00:16:06.556 --> 00:16:07.416
feature in Xcode.

00:16:07.806 --> 00:16:08.906
If you've ever had to like --

00:16:10.236 --> 00:16:11.296
you know, you're debugging a bug

00:16:11.296 --> 00:16:12.236
and you're like, oh, man,

00:16:12.236 --> 00:16:13.276
there's a performance problem,

00:16:13.556 --> 00:16:15.136
all right, let me, you know, go

00:16:15.136 --> 00:16:16.126
to Instruments and start it

00:16:16.126 --> 00:16:17.386
again, you don't have to do

00:16:17.386 --> 00:16:17.646
that.

00:16:17.646 --> 00:16:18.706
I'm going to click the Time

00:16:18.706 --> 00:16:20.236
Profile button and this is going

00:16:20.236 --> 00:16:21.896
to transfer the debug session to

00:16:21.896 --> 00:16:22.986
Instruments and keep the app

00:16:23.026 --> 00:16:23.386
going.

00:16:23.676 --> 00:16:24.816
This is great if you've got an

00:16:24.816 --> 00:16:26.296
app in state and you need to

00:16:26.296 --> 00:16:27.466
jump over to Instruments and see

00:16:27.466 --> 00:16:28.236
what's going on.

00:16:28.446 --> 00:16:29.886
So we've started Instruments.

00:16:29.886 --> 00:16:30.796
I'm going to move the window

00:16:30.796 --> 00:16:31.656
over, give us a little bit of a

00:16:31.656 --> 00:16:31.976
better view.

00:16:36.376 --> 00:16:38.776
And we see that we are in the

00:16:38.806 --> 00:16:40.406
Instruments default strategy,

00:16:40.406 --> 00:16:41.676
which just says the CPU Usage

00:16:41.746 --> 00:16:43.966
and the Life Cycle, but new in

00:16:43.966 --> 00:16:45.476
Instruments for Xcode 9 is this

00:16:45.476 --> 00:16:46.236
All strategy.

00:16:46.486 --> 00:16:47.616
So this is the time profile

00:16:47.616 --> 00:16:49.466
instrument, but if I click All,

00:16:49.666 --> 00:16:52.206
I see all of the threads and the

00:16:52.206 --> 00:16:54.006
cores and I get the big picture

00:16:54.556 --> 00:16:55.006
of the app.

00:16:55.226 --> 00:16:55.976
Really, really useful.

00:16:55.976 --> 00:16:57.226
So let's see if we can reproduce

00:16:57.226 --> 00:16:57.976
the problem.

00:16:58.516 --> 00:17:03.726
[ Applause ]

00:17:04.226 --> 00:17:04.976
Here we go.

00:17:09.266 --> 00:17:09.556
All right.

00:17:09.556 --> 00:17:10.715
So we've clearly seen that

00:17:10.715 --> 00:17:11.326
there's an issue.

00:17:12.066 --> 00:17:13.156
We've got this spike here.

00:17:13.406 --> 00:17:15.876
Now, sometimes you want to just

00:17:15.876 --> 00:17:17.376
dig directly into that and look

00:17:17.376 --> 00:17:18.246
at the call stacks, but

00:17:18.246 --> 00:17:19.536
sometimes what you want to do is

00:17:19.536 --> 00:17:22.546
correlate that spike to what CPU

00:17:22.546 --> 00:17:26.296
it's on, other threads, and you

00:17:26.296 --> 00:17:27.195
know how to do that, right, you

00:17:27.195 --> 00:17:28.266
just scroll, back it up, and you

00:17:28.266 --> 00:17:29.386
look and you see, oh, is there

00:17:29.386 --> 00:17:31.016
another one, well, I'm not sure.

00:17:31.396 --> 00:17:33.216
Well, for Instruments in Xcode 9

00:17:33.246 --> 00:17:34.296
there is a much better way.

00:17:34.786 --> 00:17:36.036
I'm going to pin this track,

00:17:36.406 --> 00:17:38.136
right, and pinning the track

00:17:39.036 --> 00:17:40.486
actually puts a copy of that

00:17:40.486 --> 00:17:41.916
track at the bottom and it's

00:17:41.916 --> 00:17:42.276
fixed.

00:17:42.276 --> 00:17:44.126
So now I can scroll up and down

00:17:44.316 --> 00:17:46.876
and I can correlate what other

00:17:47.096 --> 00:17:48.246
tracks are sharing that

00:17:48.666 --> 00:17:49.976
performance characteristic

00:17:50.016 --> 00:17:50.691
[ Applause ]

00:17:50.691 --> 00:17:51.366
.

00:17:51.366 --> 00:17:52.666
Yeah, it's really, really cool.

00:17:54.066 --> 00:17:55.806
And not only can you just see

00:17:55.806 --> 00:17:57.476
the spikes, but I think it's

00:17:57.476 --> 00:17:58.896
also important to know what's

00:17:58.896 --> 00:17:59.546
not happening.

00:17:59.636 --> 00:18:01.236
So being able to see that all of

00:18:01.236 --> 00:18:02.376
these are not correlated

00:18:02.776 --> 00:18:03.746
obviously gives you information

00:18:03.746 --> 00:18:03.976
as well.

00:18:10.056 --> 00:18:11.816
Okay. So what we've just seen

00:18:12.046 --> 00:18:16.316
are a few things that you can do

00:18:16.606 --> 00:18:17.656
with wireless development in

00:18:17.656 --> 00:18:18.166
Xcode 9.

00:18:20.876 --> 00:18:22.666
Don't need that.

00:18:22.666 --> 00:18:25.086
So this just scratches the

00:18:25.086 --> 00:18:26.626
surface because, as Chris said,

00:18:26.626 --> 00:18:28.086
there's lots of times,

00:18:28.156 --> 00:18:30.186
especially today, when the apps

00:18:30.186 --> 00:18:32.526
we're developing, they are not

00:18:32.966 --> 00:18:35.136
you sitting down and consuming

00:18:35.136 --> 00:18:36.986
content while you're on the bus.

00:18:37.066 --> 00:18:38.146
Those apps still exist, of

00:18:38.146 --> 00:18:40.016
course, but more and more of our

00:18:40.016 --> 00:18:41.546
apps are physical, they're

00:18:41.546 --> 00:18:42.756
interacting in the real world,

00:18:43.116 --> 00:18:45.456
and sometimes you get reports

00:18:45.456 --> 00:18:46.346
and you want to reproduce

00:18:46.346 --> 00:18:47.806
problems that you can only

00:18:47.806 --> 00:18:49.566
reproduce in the real world.

00:18:49.876 --> 00:18:51.116
Sometimes you have performance

00:18:51.116 --> 00:18:52.366
problems where you need a tool

00:18:52.366 --> 00:18:53.826
like Instruments to really dig

00:18:53.826 --> 00:18:55.736
deep into your performance and

00:18:55.736 --> 00:18:57.096
you want to do that in the real

00:18:57.096 --> 00:18:57.486
world.

00:18:57.626 --> 00:18:59.116
And with wireless development

00:18:59.166 --> 00:18:59.436
you can.

00:18:59.436 --> 00:19:00.236
And with that, I'd like to hand

00:19:00.236 --> 00:19:00.956
it back to Chris.

00:19:01.516 --> 00:19:07.786
[ Applause ]

00:19:08.286 --> 00:19:08.846
>> Thanks, Breckin.

00:19:09.256 --> 00:19:10.086
What a fun demo.

00:19:10.436 --> 00:19:11.736
All right.

00:19:11.736 --> 00:19:13.016
I'd like to move on to talking

00:19:13.016 --> 00:19:15.016
about enhancements we've made in

00:19:15.016 --> 00:19:15.976
Xcode for working with

00:19:15.976 --> 00:19:16.676
breakpoints.

00:19:17.136 --> 00:19:19.696
Some of you may not know, but in

00:19:19.696 --> 00:19:21.266
Xcode breakpoints have a lot of

00:19:21.266 --> 00:19:22.056
flexibility.

00:19:22.706 --> 00:19:23.736
There are options that you can

00:19:23.736 --> 00:19:25.016
set to customize the way that

00:19:25.016 --> 00:19:25.586
they behave.

00:19:26.226 --> 00:19:28.096
To do this just double click on

00:19:28.096 --> 00:19:29.856
a breakpoint and you'll see the

00:19:29.856 --> 00:19:31.156
Breakpoint Editor popover.

00:19:31.716 --> 00:19:33.626
From here you can set options

00:19:33.626 --> 00:19:35.776
such as defining a condition so

00:19:36.286 --> 00:19:37.626
the breakpoint will only trigger

00:19:37.626 --> 00:19:38.836
if that condition evaluates

00:19:38.836 --> 00:19:40.456
true; and you can define

00:19:40.836 --> 00:19:42.396
breakpoint actions, such as

00:19:42.396 --> 00:19:43.756
logging variables, executing

00:19:43.756 --> 00:19:45.286
debugger commands for you and

00:19:45.346 --> 00:19:46.106
playing sounds.

00:19:46.566 --> 00:19:47.796
Now, these options have been in

00:19:47.796 --> 00:19:49.826
Xcode for some time, but over

00:19:49.826 --> 00:19:51.076
the past year the team have been

00:19:51.076 --> 00:19:52.206
making some enhancements to the

00:19:52.206 --> 00:19:53.916
UI to make them easier to work

00:19:53.916 --> 00:19:54.056
with.

00:19:55.016 --> 00:19:56.946
The first of these, we've added

00:19:56.946 --> 00:19:57.776
code completion to all the

00:19:57.846 --> 00:19:58.976
Breakpoint Editor text fields.

00:19:59.516 --> 00:20:05.586
[ Applause ]

00:20:06.086 --> 00:20:07.246
So now in the Breakpoint Editor,

00:20:07.576 --> 00:20:10.766
when editing expressions in the

00:20:10.766 --> 00:20:12.166
condition field and the

00:20:12.166 --> 00:20:13.616
breakpoint action fields, you

00:20:13.616 --> 00:20:14.986
get full code completion, the

00:20:14.986 --> 00:20:16.536
same as you'd expect from the

00:20:16.536 --> 00:20:18.476
Source Editor and the Debugger

00:20:18.476 --> 00:20:18.956
Console.

00:20:19.526 --> 00:20:21.656
The next thing we wanted to do

00:20:21.656 --> 00:20:23.366
was make finding breakpoints

00:20:23.366 --> 00:20:25.196
with options set on them much

00:20:25.196 --> 00:20:27.786
easier, so in Xcode 9, for any

00:20:27.786 --> 00:20:29.216
breakpoints that have options

00:20:29.216 --> 00:20:30.196
set on them, you'll see this

00:20:30.196 --> 00:20:31.236
alternate indicator with a

00:20:31.236 --> 00:20:31.976
triangle at the end.

00:20:32.516 --> 00:20:36.706
[ Applause ]

00:20:37.206 --> 00:20:38.936
So this indicates that that

00:20:38.936 --> 00:20:40.506
breakpoint has one or more

00:20:40.506 --> 00:20:41.986
options set on it.

00:20:41.986 --> 00:20:43.776
This makes it really easy to see

00:20:43.776 --> 00:20:45.186
at a glance, when looking at

00:20:45.406 --> 00:20:46.726
either the Breakpoint Navigator

00:20:47.036 --> 00:20:48.546
or the Source Editor, which of

00:20:48.546 --> 00:20:49.886
those breakpoints have options

00:20:49.886 --> 00:20:51.246
set on them.

00:20:51.686 --> 00:20:53.326
Furthermore, just mouse over the

00:20:53.326 --> 00:20:54.756
breakpoint and a tooltip will

00:20:54.756 --> 00:20:55.916
show you a summary of the

00:20:55.916 --> 00:20:56.996
options that have been set on

00:20:56.996 --> 00:20:57.536
the breakpoint.

00:20:58.046 --> 00:20:59.006
This should make finding the

00:20:59.006 --> 00:21:00.036
breakpoint you're looking for

00:21:00.236 --> 00:21:00.856
much easier.

00:21:01.586 --> 00:21:02.516
And speaking of finding

00:21:02.516 --> 00:21:04.656
breakpoints, we've also enhanced

00:21:04.836 --> 00:21:06.246
the Breakpoint Navigator filter

00:21:06.246 --> 00:21:08.296
field by adding deep filtering.

00:21:08.746 --> 00:21:10.426
This means that it now searches

00:21:10.716 --> 00:21:12.726
your query across all of the

00:21:12.726 --> 00:21:13.936
text fields in the Breakpoint

00:21:13.936 --> 00:21:14.206
Editor.

00:21:14.596 --> 00:21:15.676
So you can match on condition

00:21:15.676 --> 00:21:16.906
fields and any of the action

00:21:16.906 --> 00:21:18.266
fields and expressions that

00:21:18.266 --> 00:21:19.186
you've set in those.

00:21:20.136 --> 00:21:21.856
This makes finding breakpoints

00:21:22.056 --> 00:21:23.266
much more powerful and much

00:21:23.266 --> 00:21:24.586
easier in the Breakpoint

00:21:24.636 --> 00:21:25.076
Navigator.

00:21:26.446 --> 00:21:27.396
So if you haven't been using

00:21:27.396 --> 00:21:28.676
breakpoint options, give them a

00:21:28.676 --> 00:21:28.946
try.

00:21:28.946 --> 00:21:29.756
They can add a lot of

00:21:29.956 --> 00:21:31.576
flexibility and customization to

00:21:31.576 --> 00:21:32.526
your debugging workflow, and now

00:21:32.526 --> 00:21:32.976
they're easier to use.

00:21:37.216 --> 00:21:38.676
I'd like to move on to talking

00:21:38.676 --> 00:21:40.136
about user interface debugging.

00:21:41.426 --> 00:21:43.296
Now, when building UI, View

00:21:43.296 --> 00:21:44.136
Controller is playing an

00:21:44.136 --> 00:21:47.086
important role in how you

00:21:47.086 --> 00:21:48.246
structure your code and your

00:21:48.246 --> 00:21:49.046
storyboards.

00:21:49.886 --> 00:21:51.986
View controllers manage and lay

00:21:51.986 --> 00:21:53.236
out portions of the view tree

00:21:53.686 --> 00:21:55.486
and are responsible for handling

00:21:55.486 --> 00:21:56.816
transitions between screens.

00:21:57.706 --> 00:21:58.796
So when debugging your UI,

00:21:58.796 --> 00:22:00.046
wouldn't it be great to be able

00:22:00.046 --> 00:22:01.576
to navigate that view hierarchy

00:22:01.846 --> 00:22:03.646
by focusing on the View

00:22:03.646 --> 00:22:05.476
Controller structure and to also

00:22:05.476 --> 00:22:06.966
be able to find view controllers

00:22:07.146 --> 00:22:08.606
that are responsible for parts

00:22:08.606 --> 00:22:09.156
of the view tree.

00:22:10.156 --> 00:22:11.906
We thought so, too, so in Xcode

00:22:11.906 --> 00:22:13.516
9 view controllers are now

00:22:13.516 --> 00:22:15.286
included as part of the view

00:22:15.286 --> 00:22:15.976
hierarchy when debugging.

00:22:16.516 --> 00:22:21.306
[ Applause ]

00:22:21.806 --> 00:22:22.956
Inspect your view hierarchy like

00:22:22.996 --> 00:22:24.256
you always have been, but now

00:22:24.256 --> 00:22:25.736
you can expect to find View

00:22:25.736 --> 00:22:27.376
controllers in the Debug

00:22:27.376 --> 00:22:29.436
Navigator inserted as parents of

00:22:29.436 --> 00:22:30.656
the views that they manage.

00:22:31.386 --> 00:22:32.866
This makes it really easy to

00:22:32.866 --> 00:22:34.686
navigate the view hierarchy by

00:22:34.686 --> 00:22:36.466
first focusing on the high-level

00:22:36.626 --> 00:22:38.226
View Controller structure to

00:22:38.226 --> 00:22:39.426
find the area of the view tree

00:22:39.426 --> 00:22:40.866
that you're looking to debug and

00:22:40.866 --> 00:22:42.436
then focusing in on individual

00:22:42.436 --> 00:22:42.916
views.

00:22:43.406 --> 00:22:45.706
View controllers are represented

00:22:45.706 --> 00:22:47.866
visually in the Canvas as well.

00:22:48.776 --> 00:22:50.746
Xcode renders banners for View

00:22:50.746 --> 00:22:52.046
controllers above the views that

00:22:52.046 --> 00:22:52.586
they manage.

00:22:53.316 --> 00:22:55.296
This is great for visualizing

00:22:55.386 --> 00:22:56.656
the View Controller boundaries

00:22:56.656 --> 00:22:58.316
in that view tree and makes it

00:22:58.316 --> 00:22:59.836
much easier to find the view

00:22:59.836 --> 00:23:01.196
controllers responsible for a

00:23:01.196 --> 00:23:03.976
particular view.

00:23:04.236 --> 00:23:05.556
Select a View Controller and

00:23:05.556 --> 00:23:06.956
you'll see its properties in the

00:23:06.956 --> 00:23:08.266
Inspectors, and this helps you

00:23:08.266 --> 00:23:09.356
when you're debugging View

00:23:09.356 --> 00:23:10.666
Controller specific issues.

00:23:11.246 --> 00:23:12.806
It includes the View Controller

00:23:12.806 --> 00:23:14.126
parent and child relationships,

00:23:14.606 --> 00:23:16.076
which is great for debugging

00:23:16.076 --> 00:23:17.146
View Controller containment

00:23:17.146 --> 00:23:17.666
issues.

00:23:19.236 --> 00:23:20.276
So now that view controllers are

00:23:20.276 --> 00:23:21.676
included as part of the view

00:23:21.676 --> 00:23:23.096
hierarchy when debugging, it

00:23:23.096 --> 00:23:24.506
makes it much easier to navigate

00:23:24.506 --> 00:23:26.246
that hierarchy and to help you

00:23:26.246 --> 00:23:28.166
to solve View Controller-related

00:23:28.166 --> 00:23:28.666
issues.

00:23:29.206 --> 00:23:32.346
Now, not all user interfaces are

00:23:32.346 --> 00:23:34.296
built using UIKit and AppKit.

00:23:35.376 --> 00:23:37.336
Some designs may require custom

00:23:37.336 --> 00:23:40.786
UI with rich interactions and

00:23:40.786 --> 00:23:41.666
custom layouts.

00:23:42.166 --> 00:23:44.146
One option to do this is using

00:23:44.146 --> 00:23:44.716
SpriteKit.

00:23:46.336 --> 00:23:47.796
SpriteKit is a 2D graphics

00:23:47.796 --> 00:23:48.866
framework and it's available

00:23:48.866 --> 00:23:50.416
across all of Apple's platforms.

00:23:50.936 --> 00:23:52.276
It's great for building games,

00:23:52.276 --> 00:23:52.776
of course.

00:23:52.836 --> 00:23:53.876
It's also great for building

00:23:53.876 --> 00:23:54.936
this kind of custom UI.

00:23:54.936 --> 00:23:57.576
So we wanted to provide the same

00:23:57.576 --> 00:23:58.866
kind of visual debugging tool

00:23:58.866 --> 00:24:00.746
for SpriteKit developers that we

00:24:00.746 --> 00:24:02.166
provide for developers using

00:24:02.166 --> 00:24:03.026
UIKit and AppKit.

00:24:03.826 --> 00:24:04.756
So I'm pleased to announce that

00:24:04.756 --> 00:24:08.046
in Xcode 9 SpriteKit is now a

00:24:08.046 --> 00:24:10.216
first-class citizen in the View

00:24:10.216 --> 00:24:10.516
Debugger.

00:24:12.396 --> 00:24:14.286
When inspecting your view

00:24:14.286 --> 00:24:16.856
hierarchy and Xcode finds a

00:24:16.856 --> 00:24:18.346
SpriteKit view, it will

00:24:18.346 --> 00:24:19.446
automatically snapshot the

00:24:19.446 --> 00:24:20.966
SpriteKit scene hosted by that

00:24:20.966 --> 00:24:22.186
view and bring that into the

00:24:22.186 --> 00:24:22.486
debugger.

00:24:23.346 --> 00:24:25.196
So now you'll see Sprites

00:24:25.196 --> 00:24:26.996
rendered in the exploded 3D

00:24:26.996 --> 00:24:28.946
visualization, along with all

00:24:28.946 --> 00:24:30.046
the views in the hierarchy.

00:24:31.436 --> 00:24:33.316
This is great for debugging

00:24:33.506 --> 00:24:34.396
Sprite layout.

00:24:35.186 --> 00:24:36.676
Also really handy for debugging

00:24:36.676 --> 00:24:38.036
Sprite layout alongside View

00:24:38.036 --> 00:24:39.346
layout for those projects where

00:24:39.346 --> 00:24:40.456
you'd like to mix and match

00:24:40.456 --> 00:24:41.856
Sprites and views for custom UI.

00:24:46.116 --> 00:24:47.256
In the Debug Navigator you'll

00:24:47.256 --> 00:24:48.836
see an entry for the SpriteKit

00:24:48.836 --> 00:24:50.306
scene as a child of the view

00:24:50.306 --> 00:24:52.356
that hosts it, and below that

00:24:52.356 --> 00:24:53.886
scene you'll see all of the

00:24:53.886 --> 00:24:55.886
SpriteKit nodes that are in that

00:24:55.886 --> 00:24:56.716
scene at runtime.

00:24:57.476 --> 00:25:00.506
Select a SpriteKit node and you

00:25:00.506 --> 00:25:02.846
can debug that by looking at the

00:25:02.846 --> 00:25:03.476
Inspectors.

00:25:04.846 --> 00:25:06.366
So now SpriteKit developers have

00:25:06.366 --> 00:25:07.986
a visual tool for debugging

00:25:07.986 --> 00:25:08.796
their SpriteKit scenes at

00:25:08.796 --> 00:25:08.976
runtime.

00:25:09.516 --> 00:25:16.376
[ Applause ]

00:25:16.876 --> 00:25:17.976
But we didn't want to stop at

00:25:19.776 --> 00:25:21.936
Sprites. SceneKit is a 3D

00:25:21.936 --> 00:25:22.726
graphics framework.

00:25:23.156 --> 00:25:24.406
It's great for building rich 3D

00:25:24.406 --> 00:25:26.096
worlds and 3D games, as well as

00:25:26.096 --> 00:25:28.216
custom 3D UI, so we wanted to

00:25:28.216 --> 00:25:30.166
also provide a visual tool for

00:25:30.166 --> 00:25:33.136
SceneKit developers, and so we

00:25:33.136 --> 00:25:33.396
did.

00:25:33.996 --> 00:25:35.496
SceneKit is now included as part

00:25:35.496 --> 00:25:37.046
of the View Debugging Workflow.

00:25:37.966 --> 00:25:39.596
When Xcode is inspecting a View

00:25:39.596 --> 00:25:40.746
hierarchy that contains a

00:25:40.746 --> 00:25:42.656
SceneKit view, it will snapshot

00:25:42.656 --> 00:25:44.036
the SceneKit scene hosted by

00:25:44.036 --> 00:25:46.096
that view and bring that in to

00:25:46.096 --> 00:25:46.926
the debugger.

00:25:47.256 --> 00:25:50.866
In the Debug Navigator you'll

00:25:50.866 --> 00:25:53.366
see an entry for the SceneKit

00:25:53.366 --> 00:25:55.786
scene as a child of the view

00:25:55.786 --> 00:25:56.386
that hosts it.

00:25:57.126 --> 00:25:58.636
But you may notice a difference

00:25:58.636 --> 00:25:59.696
here, compared to the SpriteKit

00:25:59.696 --> 00:26:00.646
example I just showed.

00:26:01.666 --> 00:26:04.136
That SceneKit scene has no child

00:26:04.136 --> 00:26:04.626
elements.

00:26:04.826 --> 00:26:06.566
Where are all the SceneKit scene

00:26:06.566 --> 00:26:07.016
nodes.

00:26:07.776 --> 00:26:10.366
Also notice that in the Canvas

00:26:10.436 --> 00:26:11.956
the 3D scene is just being

00:26:11.956 --> 00:26:12.996
represented by a flattened

00:26:12.996 --> 00:26:13.516
snapshot.

00:26:16.196 --> 00:26:17.426
So why is this?

00:26:18.106 --> 00:26:20.746
Well, to make 2D views in

00:26:20.746 --> 00:26:22.526
Sprites explorable, Xcode

00:26:22.526 --> 00:26:24.066
explodes them out in 3D.

00:26:24.576 --> 00:26:25.716
But what should it do with 3D

00:26:25.716 --> 00:26:26.116
content?

00:26:27.526 --> 00:26:28.796
Well, we explored the latest

00:26:28.796 --> 00:26:30.096
advances in 4D debugging

00:26:30.096 --> 00:26:31.146
technology, but after some

00:26:31.146 --> 00:26:32.446
accidents in the lab we thought

00:26:32.446 --> 00:26:34.276
there must be an easier way, and

00:26:34.276 --> 00:26:34.606
there was.

00:26:35.026 --> 00:26:36.116
We already have a really

00:26:36.116 --> 00:26:37.866
powerful 3D editor built right

00:26:37.866 --> 00:26:40.466
into Xcode so we integrated the

00:26:40.466 --> 00:26:41.946
SceneKit Editor with the View

00:26:41.946 --> 00:26:42.736
Debugging Workflow.

00:26:43.316 --> 00:26:45.106
Now just select a SceneKit scene

00:26:45.106 --> 00:26:46.866
in the Debug Navigator and Xcode

00:26:46.866 --> 00:26:49.086
will open the SceneKit Editor in

00:26:49.386 --> 00:26:50.556
runtime debugging mode,

00:26:51.036 --> 00:26:53.016
containing a snapshot of your 3D

00:26:53.016 --> 00:26:54.216
scene from the runtime.

00:26:55.456 --> 00:26:56.426
Now -- [applause] it's pretty

00:26:56.606 --> 00:26:56.716
good.

00:26:57.516 --> 00:26:59.656
[ Applause ]

00:27:00.156 --> 00:27:01.576
So now you can use all the same

00:27:01.576 --> 00:27:02.586
tools you're already familiar

00:27:02.586 --> 00:27:05.646
with when creating a 3D scene to

00:27:05.646 --> 00:27:07.436
inspect and debug that 3D scene.

00:27:08.846 --> 00:27:11.026
You can move cameras around or

00:27:11.026 --> 00:27:12.656
select alternate cameras.

00:27:13.006 --> 00:27:14.246
You can zoom right out to get a

00:27:14.246 --> 00:27:15.706
big picture view of that entire

00:27:15.706 --> 00:27:17.866
scene, and you can visualize

00:27:18.226 --> 00:27:19.486
objects in the scene that aren't

00:27:19.486 --> 00:27:21.016
normally visible, like cameras

00:27:21.016 --> 00:27:24.066
and view frustums and lights and

00:27:24.066 --> 00:27:25.286
the light position and

00:27:25.286 --> 00:27:25.736
direction.

00:27:26.666 --> 00:27:28.356
You can explore the entire scene

00:27:28.356 --> 00:27:29.596
graph in the outline view on the

00:27:29.596 --> 00:27:32.486
left and you can select objects

00:27:32.546 --> 00:27:35.036
in that 3D scene so you can hide

00:27:35.036 --> 00:27:36.436
them or move them around to get

00:27:36.436 --> 00:27:37.506
at objects that may be behind

00:27:37.506 --> 00:27:37.636
them.

00:27:38.076 --> 00:27:39.136
In fact, you can make any

00:27:39.136 --> 00:27:40.956
modifications to that scene

00:27:41.186 --> 00:27:42.656
using either the Canvas or the

00:27:42.656 --> 00:27:43.776
Inspectors, which are all fully

00:27:43.776 --> 00:27:45.376
operational, safe in the

00:27:45.376 --> 00:27:46.196
knowledge that you won't be

00:27:46.196 --> 00:27:47.176
affecting your runtime.

00:27:47.626 --> 00:27:48.836
You'll just been modifying an

00:27:48.836 --> 00:27:49.766
in-memory snapshot.

00:27:50.676 --> 00:27:51.726
And if you'd like to save a copy

00:27:51.726 --> 00:27:53.376
of that snapshot, that's easy,

00:27:53.376 --> 00:27:53.666
too.

00:27:53.756 --> 00:27:55.176
You can just export that out to

00:27:55.176 --> 00:27:57.406
a SceneKit or a .dae file to

00:27:57.406 --> 00:27:58.476
access at a later time.

00:27:59.386 --> 00:28:01.206
So now SceneKit developers have

00:28:01.206 --> 00:28:02.736
a visual debugging tool for

00:28:02.736 --> 00:28:04.606
debugging their SceneKit scenes

00:28:04.606 --> 00:28:04.976
at runtime.

00:28:05.516 --> 00:28:12.096
[ Applause ]

00:28:12.596 --> 00:28:13.946
So these are the enhancements

00:28:13.946 --> 00:28:16.086
we've made for View debugging in

00:28:16.116 --> 00:28:16.776
Xcode 9.

00:28:17.236 --> 00:28:18.136
We've added View Controller

00:28:18.136 --> 00:28:20.026
debugging, SpriteKit and

00:28:20.096 --> 00:28:20.926
SceneKit debugging.

00:28:21.796 --> 00:28:22.706
To take advantage of these

00:28:22.706 --> 00:28:24.186
features your project just needs

00:28:24.186 --> 00:28:26.526
to be running on one of the OS

00:28:26.526 --> 00:28:28.456
releases from this week; iOS 11,

00:28:28.876 --> 00:28:30.976
tvOS 11 or macOS High Sierra.

00:28:35.376 --> 00:28:36.186
Now, I had mentioned that

00:28:36.396 --> 00:28:37.376
graphics frameworks like

00:28:37.566 --> 00:28:39.906
SpriteKit and SceneKit are great

00:28:39.946 --> 00:28:41.206
for building custom UI.

00:28:41.666 --> 00:28:42.806
They're not just for building

00:28:43.536 --> 00:28:44.106
games.

00:28:44.736 --> 00:28:47.166
As an example, on the Xcode Team

00:28:47.166 --> 00:28:48.906
we use these frameworks to build

00:28:48.906 --> 00:28:49.936
our visual debuggers.

00:28:50.686 --> 00:28:52.836
This is an example of the Memory

00:28:52.836 --> 00:28:53.626
Graph Debugger that we

00:28:53.626 --> 00:28:54.626
introduced last year.

00:28:55.266 --> 00:28:57.236
It's showing a memory graph for

00:28:57.236 --> 00:28:58.236
an app running on an iPhone.

00:28:59.516 --> 00:29:01.726
Now, that visual memory graph,

00:29:02.336 --> 00:29:03.756
we built that using SpriteKit.

00:29:04.166 --> 00:29:05.436
So now we're really excited that

00:29:05.436 --> 00:29:06.816
we can use our new SpriteKit

00:29:07.146 --> 00:29:08.576
Debugger to debug our Memory

00:29:08.576 --> 00:29:09.076
Graph Debugger.

00:29:09.896 --> 00:29:10.886
Let me show you how that would

00:29:11.766 --> 00:29:11.896
work.

00:29:12.396 --> 00:29:13.796
Let's bring in another Xcode to

00:29:13.796 --> 00:29:15.536
debug this first Xcode

00:29:15.556 --> 00:29:17.556
[laughter].

00:29:17.576 --> 00:29:19.046
It's taken a snapshot of that

00:29:19.046 --> 00:29:20.446
view hierarchy and it now

00:29:20.446 --> 00:29:22.286
includes all of the Sprites that

00:29:22.286 --> 00:29:23.856
were shown as part of the Memory

00:29:23.856 --> 00:29:24.336
Graph Debugger.

00:29:24.836 --> 00:29:26.286
We can select an option to show

00:29:26.286 --> 00:29:27.376
all the clip's content.

00:29:27.376 --> 00:29:28.336
So now we can see all the

00:29:28.336 --> 00:29:29.316
Sprites that are outside the

00:29:29.316 --> 00:29:30.306
visible region.

00:29:30.306 --> 00:29:32.576
And we can continue to zoom out

00:29:32.576 --> 00:29:34.276
to get a big picture view of

00:29:34.276 --> 00:29:36.296
that entire scene, a SpriteKit

00:29:36.356 --> 00:29:36.636
scene.

00:29:37.326 --> 00:29:40.086
So that's an example.

00:29:40.086 --> 00:29:41.456
And this is actually what we do

00:29:41.456 --> 00:29:42.276
on the Xcode Team.

00:29:42.536 --> 00:29:43.646
We use our debuggers to debug

00:29:43.646 --> 00:29:43.976
other debuggers.

00:29:44.516 --> 00:29:47.746
[ Laughter ]

00:29:48.246 --> 00:29:50.956
Now, to make these view

00:29:50.956 --> 00:29:52.286
hierarchies exploded out in this

00:29:52.286 --> 00:29:56.286
custom 3D visualization we used

00:29:56.386 --> 00:29:56.886
SceneKit.

00:29:57.406 --> 00:29:58.946
And so now we're doubly excited

00:29:58.946 --> 00:30:00.336
that we can use our new SceneKit

00:30:00.336 --> 00:30:01.886
Debugger to debug our View

00:30:01.886 --> 00:30:02.196
Debugger.

00:30:02.996 --> 00:30:03.946
Who wants to see that?

00:30:05.016 --> 00:30:06.926
Let's bring in another Xcode to

00:30:06.926 --> 00:30:07.696
debug the previous Xcode.

00:30:08.516 --> 00:30:10.516
[ Laughter ]

00:30:11.516 --> 00:30:17.466
[ Applause ]

00:30:17.966 --> 00:30:18.976
So it's taken a snapshot of the

00:30:18.976 --> 00:30:20.176
view hierarchy and exploded it

00:30:20.176 --> 00:30:22.476
out in 3D, but now, because it's

00:30:22.476 --> 00:30:23.946
Xcode 9, we have access to that

00:30:23.946 --> 00:30:24.826
SceneKit scene.

00:30:24.886 --> 00:30:26.916
So we can select that and we can

00:30:26.916 --> 00:30:29.256
view that 3D custom

00:30:29.426 --> 00:30:30.726
visualization in the SceneKit

00:30:30.726 --> 00:30:31.136
Editor.

00:30:31.906 --> 00:30:33.576
We can change cameras, change

00:30:33.576 --> 00:30:35.566
perspectives to find the 3D

00:30:35.566 --> 00:30:36.646
object in the scene that we're

00:30:36.646 --> 00:30:37.386
looking to debug.

00:30:37.386 --> 00:30:40.936
So that's the kind of fun we

00:30:40.936 --> 00:30:41.696
have in Xcode.

00:30:43.306 --> 00:30:44.936
So that's an example, what I've

00:30:44.936 --> 00:30:46.606
shown you is an example of using

00:30:46.606 --> 00:30:49.416
the new -- Xcode's new SceneKit

00:30:49.536 --> 00:30:51.966
Debugger to debug the Xcode View

00:30:51.966 --> 00:30:53.286
Debugger visualization, which

00:30:53.286 --> 00:30:55.416
itself was SpriteKit debugging

00:30:55.676 --> 00:30:56.866
the Memory Graph Debugger, which

00:30:56.866 --> 00:30:58.566
itself was Memory Graph

00:30:58.566 --> 00:30:59.796
debugging an app on the iPhone.

00:31:00.336 --> 00:31:01.706
If you can follow along with all

00:31:01.706 --> 00:31:02.426
that, then maybe you've got a

00:31:02.426 --> 00:31:02.976
future on the Xcode Team

00:31:03.016 --> 00:31:03.516
[ Laughter ]

00:31:03.516 --> 00:31:04.016
.

00:31:04.516 --> 00:31:10.456
[ Applause ]

00:31:10.956 --> 00:31:12.546
Now, to give you a demonstration

00:31:12.546 --> 00:31:13.586
of these new view debugging

00:31:13.586 --> 00:31:14.916
enhancements, I'd like to invite

00:31:14.916 --> 00:31:15.486
up Sebastian.

00:31:15.486 --> 00:31:15.956
Thank you.

00:31:16.516 --> 00:31:20.096
[ Applause ]

00:31:20.596 --> 00:31:21.236
>> Thanks, Chris.

00:31:22.226 --> 00:31:22.856
That's awesome.

00:31:23.556 --> 00:31:24.786
I'm excited to show you some of

00:31:24.846 --> 00:31:26.206
the new enhancements we made to

00:31:26.206 --> 00:31:27.996
debugging in Xcode 9, but I'll

00:31:27.996 --> 00:31:29.826
be using a slightly less complex

00:31:29.826 --> 00:31:30.916
example than Chris just showed

00:31:30.916 --> 00:31:30.983
you.

00:31:36.116 --> 00:31:37.416
I'll actually be using the same

00:31:37.596 --> 00:31:38.746
iOS app that Breckin used

00:31:38.746 --> 00:31:40.416
earlier for his application, for

00:31:40.416 --> 00:31:42.246
his demonstration, and it's

00:31:42.246 --> 00:31:45.426
showing the solar system when

00:31:46.696 --> 00:31:47.846
you launch the app, and it's

00:31:47.846 --> 00:31:49.106
starting off with a 3D

00:31:49.106 --> 00:31:49.946
visualization.

00:31:50.466 --> 00:31:51.746
Now, using the button in the top

00:31:51.746 --> 00:31:53.396
right corner the user can get

00:31:53.396 --> 00:31:56.306
additional details about the

00:31:56.526 --> 00:31:58.276
planets, and I've been working

00:31:58.276 --> 00:31:59.356
on a very cool feature here.

00:31:59.736 --> 00:32:00.976
My idea was to let the user

00:32:00.976 --> 00:32:03.256
experience the gravity on the

00:32:03.256 --> 00:32:04.996
different planets, so I built a

00:32:04.996 --> 00:32:06.296
gravitySimulator using

00:32:06.296 --> 00:32:06.906
SpriteKit.

00:32:07.136 --> 00:32:08.216
Let me show you what that looks

00:32:08.216 --> 00:32:08.446
like.

00:32:09.596 --> 00:32:11.436
The gravitySimulator starts off

00:32:11.436 --> 00:32:13.116
in zero gravity and the three

00:32:13.116 --> 00:32:14.746
objects hover around in space.

00:32:15.196 --> 00:32:16.456
Now, when the user swipes down

00:32:16.456 --> 00:32:18.446
on the device's display, gravity

00:32:18.446 --> 00:32:19.736
is activated and the three

00:32:19.736 --> 00:32:21.226
objects begin to fall and

00:32:21.226 --> 00:32:22.396
eventually hit the bottom of the

00:32:22.396 --> 00:32:23.416
screen and bounce around.

00:32:24.096 --> 00:32:25.176
Unfortunately, I got a bug

00:32:25.176 --> 00:32:26.316
report that it's not behaving

00:32:26.316 --> 00:32:26.766
quite right.

00:32:27.266 --> 00:32:28.546
So let me swipe down and let's

00:32:28.546 --> 00:32:32.076
observe what is going on.

00:32:32.076 --> 00:32:34.346
Oh, now I understand what the

00:32:34.346 --> 00:32:35.276
user was talking about.

00:32:35.786 --> 00:32:36.946
So it looks like the gravity is

00:32:36.946 --> 00:32:38.796
activated correctly, but the

00:32:38.796 --> 00:32:39.946
objects don't actually hit the

00:32:39.946 --> 00:32:41.466
bottom of the screen and bounce

00:32:41.466 --> 00:32:42.916
around, they just go off screen.

00:32:43.506 --> 00:32:44.476
Let's see if we can use the View

00:32:44.476 --> 00:32:45.586
Debugger to better understand

00:32:45.586 --> 00:32:47.146
what is going on here and try to

00:32:47.146 --> 00:32:47.966
address the problem.

00:32:49.396 --> 00:32:50.376
I'll invoke the View Debugger

00:32:50.376 --> 00:32:51.856
using the button in the Debug

00:32:51.856 --> 00:32:54.826
bar, and Xcode now fetches the

00:32:54.826 --> 00:32:56.866
entire view hierarchy, including

00:32:56.866 --> 00:32:58.316
the content of all SpriteKit

00:32:58.316 --> 00:32:59.436
scenes that are part of the view

00:32:59.436 --> 00:32:59.896
hierarchy.

00:33:00.476 --> 00:33:01.826
On the left-hand side you get an

00:33:01.826 --> 00:33:03.046
outline representation of that

00:33:03.046 --> 00:33:04.416
hierarchy; whereas, in the

00:33:04.416 --> 00:33:05.486
center you get a visual

00:33:05.486 --> 00:33:06.396
representation.

00:33:07.276 --> 00:33:08.466
Now, as you can see, the View

00:33:08.466 --> 00:33:09.746
Debugger matches exactly what

00:33:09.746 --> 00:33:11.086
you see on the device's display,

00:33:11.516 --> 00:33:12.626
and you may be wondering how is

00:33:12.676 --> 00:33:14.216
that particularly useful in this

00:33:14.216 --> 00:33:14.576
case.

00:33:15.566 --> 00:33:17.006
Now, if we recap what happened,

00:33:17.196 --> 00:33:18.576
the three objects, they went off

00:33:18.576 --> 00:33:20.726
screen, and by default the View

00:33:20.726 --> 00:33:22.096
Debugger only shows you objects

00:33:22.096 --> 00:33:22.776
that are visible.

00:33:23.436 --> 00:33:25.076
Now, we can use this button here

00:33:25.186 --> 00:33:27.666
in the bottom left corner to

00:33:27.666 --> 00:33:28.856
also show content that is

00:33:28.896 --> 00:33:29.726
currently being clipped.

00:33:30.366 --> 00:33:31.176
So we can see that there's

00:33:31.176 --> 00:33:32.406
actually a lot more going on

00:33:32.406 --> 00:33:33.356
here than we can see on the

00:33:33.356 --> 00:33:34.236
device's display.

00:33:34.996 --> 00:33:36.066
Let me zoom out a little bit so

00:33:36.066 --> 00:33:37.946
we can get a better overview.

00:33:38.396 --> 00:33:39.816
And we actually found our three

00:33:39.816 --> 00:33:40.656
objects down here.

00:33:41.306 --> 00:33:42.976
So it looks like what's going on

00:33:43.686 --> 00:33:45.046
is that the SpriteKit scene is

00:33:45.046 --> 00:33:46.556
just too tall for the device's

00:33:46.556 --> 00:33:48.386
display and by the time they hit

00:33:48.386 --> 00:33:49.256
the bottom of the scene and

00:33:49.256 --> 00:33:50.646
bounce around, they're already

00:33:50.646 --> 00:33:51.236
off screen.

00:33:52.536 --> 00:33:53.726
So let's see if we can address

00:33:53.726 --> 00:33:54.336
this problem.

00:33:54.966 --> 00:33:56.416
I'll select the SpriteKit scene

00:33:56.416 --> 00:33:57.426
in the Debug Navigator on the

00:33:57.426 --> 00:33:58.916
left-hand side and let's take a

00:33:58.916 --> 00:34:00.426
look at its properties and see

00:34:00.426 --> 00:34:01.546
if we can find one that we can

00:34:01.546 --> 00:34:01.946
act on.

00:34:02.306 --> 00:34:03.936
So you can see that we can get

00:34:03.936 --> 00:34:05.936
additional details about the

00:34:05.936 --> 00:34:07.466
SpriteKit scene's size, it's

00:34:07.466 --> 00:34:09.706
anchor point and it's scaleMode.

00:34:10.335 --> 00:34:11.656
Now, the scaleMode is currently

00:34:11.656 --> 00:34:12.795
set to Aspect Fill and that

00:34:12.795 --> 00:34:14.036
looks a little bit suspicious.

00:34:14.476 --> 00:34:15.666
I think there is a better aspect

00:34:15.666 --> 00:34:17.025
fill to achieve what we're

00:34:17.196 --> 00:34:20.416
trying to -- what we want the

00:34:20.416 --> 00:34:21.065
scene to behave.

00:34:21.106 --> 00:34:22.596
We want it to resize to actually

00:34:22.596 --> 00:34:23.746
fit the device's display.

00:34:25.246 --> 00:34:26.735
Now, I'm setting up the entire

00:34:26.735 --> 00:34:28.286
SpriteKit scene in the hosting

00:34:28.286 --> 00:34:29.826
View Controller, and since the

00:34:29.826 --> 00:34:30.706
view controllers are now

00:34:30.706 --> 00:34:31.876
presented right along the view

00:34:31.876 --> 00:34:33.496
hierarchy, it's very easy to get

00:34:33.496 --> 00:34:33.846
to them.

00:34:34.585 --> 00:34:36.106
I can simply select the

00:34:36.196 --> 00:34:37.676
gravitySimulator View Controller

00:34:37.676 --> 00:34:38.755
and the Debug Navigator on the

00:34:38.755 --> 00:34:40.676
left-hand side, and using the

00:34:40.676 --> 00:34:42.076
Inspector on the right-hand side

00:34:42.335 --> 00:34:43.696
it's very easy to jump right to

00:34:43.696 --> 00:34:44.545
the implementation.

00:34:45.106 --> 00:34:47.576
I can use this button here that

00:34:47.576 --> 00:34:48.976
is right next to the Class Name,

00:34:49.815 --> 00:34:50.806
and we're here in the

00:34:50.806 --> 00:34:52.126
implementation of this class.

00:34:53.326 --> 00:34:54.366
And I'm setting up a couple of

00:34:54.366 --> 00:34:56.286
things in viewDidLoad, so we're

00:34:56.286 --> 00:34:57.056
here in viewDidLoad.

00:34:57.056 --> 00:34:58.206
I'm first assigning the

00:34:58.206 --> 00:35:00.066
planetName to the planetLabel at

00:35:00.066 --> 00:35:01.846
the top, and here I'm setting up

00:35:01.846 --> 00:35:02.556
the scaleMode.

00:35:03.386 --> 00:35:04.806
Now, let me change the scaleMode

00:35:05.316 --> 00:35:07.446
to something that will better

00:35:08.426 --> 00:35:10.536
achieve what we're trying to do

00:35:10.536 --> 00:35:10.736
here.

00:35:11.016 --> 00:35:12.426
We want the scene to resize.

00:35:12.896 --> 00:35:14.506
So resizeFill sounds like a much

00:35:14.546 --> 00:35:15.236
better option here.

00:35:16.196 --> 00:35:17.766
I'll now rerun and let's verify

00:35:17.766 --> 00:35:18.806
if this actually addressed our

00:35:18.806 --> 00:35:19.216
problem.

00:35:20.506 --> 00:35:22.096
Now, we saw how easy it was to

00:35:22.096 --> 00:35:25.076
visually inspect our application

00:35:25.076 --> 00:35:27.106
that was using UIKit and

00:35:27.106 --> 00:35:28.506
SpriteKit right along each

00:35:28.506 --> 00:35:28.846
other.

00:35:29.246 --> 00:35:30.136
We were able to get a good

00:35:30.136 --> 00:35:31.706
understanding of where our three

00:35:31.706 --> 00:35:32.426
objects went.

00:35:33.106 --> 00:35:34.316
We were then able to select the

00:35:34.316 --> 00:35:35.716
scene, find the property that we

00:35:35.716 --> 00:35:37.146
wanted to act on, and use the

00:35:37.146 --> 00:35:38.686
view controllers to jump right

00:35:38.686 --> 00:35:40.556
to the implementation and make

00:35:40.626 --> 00:35:41.686
that code change.

00:35:42.306 --> 00:35:43.316
Let's verify we actually

00:35:43.316 --> 00:35:44.236
addressed our problem here.

00:35:45.176 --> 00:35:46.346
I'll go back to the planet

00:35:46.346 --> 00:35:48.236
details and bring up the

00:35:48.236 --> 00:35:50.616
gravitySimulator and now I'll

00:35:50.616 --> 00:35:52.176
swipe down to activate gravity.

00:35:53.286 --> 00:35:53.946
And here we go.

00:35:54.126 --> 00:35:54.956
That looks a lot better.

00:35:55.426 --> 00:35:56.666
The three objects bit the bottom

00:35:56.666 --> 00:35:57.696
and you get a good understanding

00:35:57.696 --> 00:35:58.996
of how strong the gravity really

00:35:58.996 --> 00:35:59.716
is on this planet.

00:36:01.036 --> 00:36:03.216
Now, there's one more thing.

00:36:03.216 --> 00:36:04.096
I don't know if you already

00:36:04.096 --> 00:36:04.696
noticed.

00:36:05.216 --> 00:36:06.386
There's something going wrong in

00:36:06.386 --> 00:36:07.786
the solar system in the front,

00:36:08.226 --> 00:36:09.726
in the beginning of that.

00:36:10.636 --> 00:36:12.116
There's something missing here.

00:36:13.836 --> 00:36:15.596
There's a planet missing here,

00:36:16.006 --> 00:36:17.446
and I'm not talking about Pluto.

00:36:18.376 --> 00:36:21.456
I'm talking about Saturn, and

00:36:21.456 --> 00:36:22.866
I'm very confident that my model

00:36:22.866 --> 00:36:24.066
is set up correctly with all the

00:36:24.066 --> 00:36:25.026
details about the different

00:36:25.026 --> 00:36:26.506
planets, and since I'm using

00:36:26.506 --> 00:36:28.066
SceneKit to build this 3D

00:36:28.066 --> 00:36:29.806
visualization, something must be

00:36:29.806 --> 00:36:31.206
incorrectly set up with my scene

00:36:31.206 --> 00:36:31.626
graph.

00:36:32.066 --> 00:36:33.376
So let's use the View Debugger

00:36:33.766 --> 00:36:35.746
to take a look and find out what

00:36:35.746 --> 00:36:36.496
happened to Saturn.

00:36:37.866 --> 00:36:38.866
I'll again bring up the View

00:36:38.866 --> 00:36:40.246
Debugger using the button in the

00:36:40.246 --> 00:36:40.846
Debug bar.

00:36:41.486 --> 00:36:42.896
And Xcode captures the view

00:36:42.896 --> 00:36:44.446
hierarchy, including the content

00:36:44.446 --> 00:36:46.056
of all SceneKit scenes that are

00:36:46.056 --> 00:36:47.036
part of the view hierarchy.

00:36:47.606 --> 00:36:48.776
And as Chris mentioned earlier,

00:36:48.876 --> 00:36:50.346
they're now presented right

00:36:50.386 --> 00:36:52.146
below the hosting SCN view in

00:36:52.146 --> 00:36:53.406
the Debug Navigator on the

00:36:53.406 --> 00:36:54.056
left-hand side.

00:36:54.806 --> 00:36:56.676
And selecting it opens that

00:36:56.676 --> 00:36:58.926
runtime snapshot of the scene in

00:36:58.926 --> 00:37:00.456
the SceneKit Editor, which is in

00:37:00.456 --> 00:37:01.546
runtime debugging mode.

00:37:02.966 --> 00:37:04.996
Now, you can see that besides

00:37:05.116 --> 00:37:06.876
the 3D world, it shows you

00:37:06.876 --> 00:37:07.896
additional information.

00:37:08.186 --> 00:37:09.416
In this case the wire frame

00:37:09.416 --> 00:37:10.706
representation of this sphere

00:37:10.706 --> 00:37:12.196
visualizes the light source that

00:37:12.196 --> 00:37:14.696
I'm using to illuminate the

00:37:14.696 --> 00:37:15.356
solar system.

00:37:16.626 --> 00:37:17.376
Since we're currently not

00:37:17.376 --> 00:37:19.466
debugging a lighting issue, I

00:37:19.466 --> 00:37:20.916
can turn off the display of

00:37:20.916 --> 00:37:22.666
lights using the Editor menu so

00:37:22.666 --> 00:37:24.046
we can focus on the 3D world.

00:37:24.046 --> 00:37:27.326
Now, let me increase the size of

00:37:27.326 --> 00:37:29.866
the window here a little bit so

00:37:29.936 --> 00:37:31.226
we have more space to work with.

00:37:32.036 --> 00:37:33.156
On the left-hand side I can

00:37:33.156 --> 00:37:33.946
bring up an outline

00:37:33.946 --> 00:37:35.026
representation of the entire

00:37:35.026 --> 00:37:37.106
scene graph, and when I expand

00:37:37.106 --> 00:37:38.816
this graph, you can see all the

00:37:38.816 --> 00:37:40.156
SceneKit nodes that I used to

00:37:40.156 --> 00:37:41.056
build this screen in

00:37:41.056 --> 00:37:41.676
visualization.

00:37:43.076 --> 00:37:44.616
And looking down here we can see

00:37:44.616 --> 00:37:45.936
that Saturn is actually part of

00:37:45.936 --> 00:37:48.516
it, and selecting it gives us

00:37:48.516 --> 00:37:49.926
additional details in the

00:37:50.176 --> 00:37:51.156
Inspector on the right-hand

00:37:51.156 --> 00:37:51.416
side.

00:37:51.716 --> 00:37:52.976
In this case we can inspect the

00:37:52.976 --> 00:37:54.896
material property and even take

00:37:54.896 --> 00:37:55.826
a look at it in 3D.

00:37:56.966 --> 00:37:58.556
Now, you can also see that it's

00:37:58.556 --> 00:37:59.996
actually part of the 3D world.

00:38:00.576 --> 00:38:02.116
And since the SceneKit Editor

00:38:02.116 --> 00:38:03.486
visualizes the camera's view

00:38:03.486 --> 00:38:05.836
frustum, it's very easy to

00:38:05.836 --> 00:38:06.976
understand why we don't see it

00:38:06.976 --> 00:38:08.086
on the device's display.

00:38:08.086 --> 00:38:09.566
It's simply outside the area

00:38:09.946 --> 00:38:11.496
that the camera can see.

00:38:12.926 --> 00:38:14.006
Now, we don't have enough time

00:38:14.006 --> 00:38:15.646
to go into the code and address

00:38:15.646 --> 00:38:17.226
this problem right now, and I'd

00:38:17.226 --> 00:38:18.816
actually like to have Breckin

00:38:18.816 --> 00:38:19.896
look at the problem after this

00:38:19.896 --> 00:38:20.256
session.

00:38:20.676 --> 00:38:22.296
So what I can do now, I can

00:38:22.596 --> 00:38:23.976
export the current state of this

00:38:23.976 --> 00:38:25.496
snapshot using the Export button

00:38:25.496 --> 00:38:27.576
in the top right corner and save

00:38:27.576 --> 00:38:28.736
that to disk, and I can now

00:38:28.736 --> 00:38:31.366
share that snapshot and other

00:38:31.366 --> 00:38:32.766
people will be able to just open

00:38:32.766 --> 00:38:34.376
that up and use it as a

00:38:34.376 --> 00:38:35.546
reference to then go into the

00:38:35.546 --> 00:38:36.826
code to address the problem.

00:38:37.806 --> 00:38:40.496
So we were able to see how

00:38:40.496 --> 00:38:42.436
useful it is to visually inspect

00:38:42.436 --> 00:38:44.106
the 3D world that you build

00:38:44.106 --> 00:38:45.406
using SceneKit to get a better

00:38:45.406 --> 00:38:46.696
understanding of what is going

00:38:46.696 --> 00:38:47.766
on in your application.

00:38:48.126 --> 00:38:49.726
I think if you're using SceneKit

00:38:49.986 --> 00:38:51.836
for your applications, you'll

00:38:51.836 --> 00:38:53.416
really find it useful to

00:38:53.416 --> 00:38:54.696
visually inspect the 3D world

00:38:54.696 --> 00:38:54.976
you built.

00:38:55.516 --> 00:39:03.336
[ Applause ]

00:39:03.836 --> 00:39:04.976
Let me switch back to slides.

00:39:09.066 --> 00:39:09.706
Now, let's recap what we went

00:39:09.706 --> 00:39:09.976
over today.

00:39:17.326 --> 00:39:18.686
First we introduced wireless

00:39:18.746 --> 00:39:19.336
development.

00:39:20.016 --> 00:39:21.466
It's a totally new development

00:39:21.466 --> 00:39:22.496
in debugging experience

00:39:22.496 --> 00:39:23.686
completely without a cable.

00:39:23.686 --> 00:39:24.886
I think you will really love it.

00:39:25.566 --> 00:39:26.346
And if you're here at the

00:39:26.346 --> 00:39:28.856
conference, please use the WWDC

00:39:28.856 --> 00:39:30.236
lab Wi-Fi when you try it out.

00:39:30.236 --> 00:39:31.776
It's set up so you can use

00:39:31.776 --> 00:39:32.596
wireless development.

00:39:33.036 --> 00:39:35.556
Next up we went over breakpoint

00:39:35.556 --> 00:39:36.366
enhancements.

00:39:36.786 --> 00:39:37.976
It's easy and more convenient

00:39:37.976 --> 00:39:39.076
than ever before to use

00:39:39.076 --> 00:39:40.076
breakpoints for debugging.

00:39:41.006 --> 00:39:42.156
And last but not least,

00:39:42.156 --> 00:39:43.296
enhancements we made to the

00:39:43.296 --> 00:39:44.066
visual debugger.

00:39:44.596 --> 00:39:45.946
Namely, you can now debug view

00:39:45.946 --> 00:39:47.026
controllers right along your

00:39:47.026 --> 00:39:47.636
view hierarchy.

00:39:48.246 --> 00:39:49.366
You can inspect SpriteKit

00:39:49.366 --> 00:39:51.106
content and SceneKit content.

00:39:51.656 --> 00:39:52.416
If you haven't used the View

00:39:52.416 --> 00:39:53.666
Debugger before, please give it

00:39:53.666 --> 00:39:54.066
a try.

00:39:54.066 --> 00:39:54.906
I think you'll find it very

00:39:54.906 --> 00:39:57.176
useful to visually inspect your

00:39:57.176 --> 00:39:58.106
applications.

00:39:59.486 --> 00:40:01.986
For more information, please go

00:40:01.986 --> 00:40:02.436
online.

00:40:02.596 --> 00:40:03.546
This is the actual URL.

00:40:03.546 --> 00:40:05.446
It's in the [inaudible] for our

00:40:06.096 --> 00:40:06.216
code.

00:40:06.436 --> 00:40:08.466
We also recommend the following

00:40:08.466 --> 00:40:08.976
related sessions.

00:40:13.196 --> 00:40:14.516
Thank you very much for coming.

00:40:14.516 --> 00:40:15.886
Have a fantastic rest of the

00:40:15.886 --> 00:40:15.976
week.

00:40:16.516 --> 00:40:26.600
[ Applause ]