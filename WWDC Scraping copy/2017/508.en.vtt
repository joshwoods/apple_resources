WEBVTT

00:00:23.516 --> 00:00:27.776
[ Applause ]

00:00:28.276 --> 00:00:29.306
>> I'm happy -- my name is

00:00:29.306 --> 00:00:29.576
Etienne.

00:00:29.576 --> 00:00:30.966
And I'm happy to be here today

00:00:31.176 --> 00:00:33.526
to show you how you can use

00:00:33.586 --> 00:00:35.166
depth to apply new kind of

00:00:35.226 --> 00:00:36.696
effects to your images.

00:00:38.666 --> 00:00:40.866
First, we're going to see what

00:00:40.936 --> 00:00:42.726
depth is and what it looks like.

00:00:43.316 --> 00:00:44.936
Then we're going to see how to

00:00:44.936 --> 00:00:46.536
load it and read it from our

00:00:46.536 --> 00:00:47.256
image files.

00:00:48.356 --> 00:00:49.826
And then we're going to show you

00:00:50.156 --> 00:00:52.546
several examples of effects you

00:00:52.546 --> 00:00:53.866
can achieve with depth.

00:00:54.486 --> 00:00:56.456
And we'll conclude with how to

00:00:56.456 --> 00:00:57.286
save depth data.

00:00:58.746 --> 00:00:59.006
All right.

00:00:59.266 --> 00:00:59.966
So let's get started.

00:01:01.536 --> 00:01:03.306
What is depth?

00:01:03.956 --> 00:01:05.296
So, to answer that question,

00:01:05.626 --> 00:01:07.486
let's start with how we capture

00:01:07.486 --> 00:01:07.796
depth.

00:01:10.806 --> 00:01:13.396
Depth can be captured only on

00:01:14.026 --> 00:01:17.066
iPhone 7+ and only on iOS 11.

00:01:18.106 --> 00:01:22.006
iPhone 7+ has a dual camera

00:01:22.006 --> 00:01:24.116
system that can be set to

00:01:24.116 --> 00:01:25.856
capture two images of the same

00:01:25.856 --> 00:01:27.846
scene at the same time and at

00:01:27.846 --> 00:01:28.756
the same focal length.

00:01:29.476 --> 00:01:32.046
The differences between those

00:01:32.046 --> 00:01:34.236
two images is called disparity.

00:01:35.766 --> 00:01:38.146
So disparity is a measure of the

00:01:38.146 --> 00:01:39.006
parallax effect.

00:01:39.416 --> 00:01:41.596
It measures how objects that are

00:01:41.596 --> 00:01:43.496
closer to the camera tends to

00:01:43.496 --> 00:01:47.646
move, to shift more from one

00:01:47.646 --> 00:01:49.516
image to the other.

00:01:49.796 --> 00:01:51.636
Once we know disparity, we can

00:01:51.636 --> 00:01:53.826
compute depth with a simple

00:01:54.056 --> 00:01:54.446
formula.

00:01:55.476 --> 00:01:57.326
Depth is 1 over disparity.

00:01:59.536 --> 00:02:01.506
So, in the remaining of this

00:02:01.506 --> 00:02:02.626
session we're going to talk

00:02:02.626 --> 00:02:04.676
about depth or disparity under

00:02:04.676 --> 00:02:06.476
the broad term of depth data.

00:02:06.966 --> 00:02:09.145
But remember, they're pretty

00:02:09.145 --> 00:02:11.806
similar and one is the inverse

00:02:11.806 --> 00:02:13.686
of the other.

00:02:14.656 --> 00:02:16.216
For more information about how

00:02:16.216 --> 00:02:18.106
we capture depth I would refer

00:02:18.106 --> 00:02:20.626
you to the session on capturing

00:02:20.626 --> 00:02:22.146
depth in iPhone photography that

00:02:22.146 --> 00:02:22.896
took place yesterday.

00:02:23.996 --> 00:02:25.016
All right.

00:02:26.986 --> 00:02:28.516
So now that we know what depth

00:02:28.516 --> 00:02:30.666
and disparity looks like --

00:02:30.666 --> 00:02:32.306
sorry -- now that we know what

00:02:32.306 --> 00:02:33.446
depth and disparity is, let's

00:02:33.446 --> 00:02:34.566
take a look at what it looks

00:02:34.566 --> 00:02:35.396
like in practice.

00:02:35.796 --> 00:02:36.966
And for that, I'm going to call

00:02:36.966 --> 00:02:38.376
my colleague Craig to show you

00:02:38.686 --> 00:02:39.376
what it looks like.

00:02:39.876 --> 00:02:40.076
Craig.

00:02:42.516 --> 00:02:46.556
[ Applause ]

00:02:47.056 --> 00:02:48.206
>> Thank you, Etienne.

00:02:49.036 --> 00:02:50.586
What we're seeing here is an

00:02:50.586 --> 00:02:51.916
image that was captured by the

00:02:51.916 --> 00:02:53.106
iPhone 7+.

00:02:55.336 --> 00:02:56.806
And here is its disparity map.

00:02:57.096 --> 00:02:59.816
And as we've learned, disparity

00:03:00.776 --> 00:03:03.126
refers to the distance between

00:03:03.126 --> 00:03:04.576
two corresponding points that

00:03:04.576 --> 00:03:06.396
were captured by the iPhone 7+'s

00:03:06.396 --> 00:03:07.576
dual camera system.

00:03:09.116 --> 00:03:11.286
Bright areas are closer to the

00:03:11.286 --> 00:03:14.226
camera and correspond to higher

00:03:14.226 --> 00:03:15.286
disparity values.

00:03:15.706 --> 00:03:18.196
Where dark values are farther

00:03:18.196 --> 00:03:19.166
away from the camera and

00:03:19.166 --> 00:03:20.446
correspond to low disparity

00:03:20.446 --> 00:03:20.956
values.

00:03:22.926 --> 00:03:24.206
So, let's go back to the image

00:03:24.726 --> 00:03:26.476
and look at the disparity map

00:03:26.476 --> 00:03:26.926
again.

00:03:27.876 --> 00:03:29.666
We can pinch in to zoom in on an

00:03:29.666 --> 00:03:30.046
area.

00:03:30.046 --> 00:03:31.636
But we have one more trick we

00:03:31.636 --> 00:03:32.946
can do with this application.

00:03:34.796 --> 00:03:36.586
If I drag my finger across, we

00:03:36.586 --> 00:03:38.656
can view the data in 3-D.

00:03:39.516 --> 00:03:42.826
[ Applause ]

00:03:43.326 --> 00:03:45.146
We can zoom in and really get a

00:03:45.146 --> 00:03:47.896
good look at the range of data

00:03:47.896 --> 00:03:49.096
that's available to us.

00:03:49.096 --> 00:03:50.536
We can rotate all the way around

00:03:50.786 --> 00:03:51.806
and look at that again.

00:03:52.116 --> 00:03:54.706
And even switch back to the

00:03:54.706 --> 00:03:56.316
image data overlaid over top of

00:03:56.956 --> 00:03:57.026
it.

00:03:57.736 --> 00:04:00.946
So let's look at another image.

00:04:02.416 --> 00:04:04.966
Here are some beautiful flowers.

00:04:06.316 --> 00:04:08.446
When I zoom in and rotate

00:04:08.446 --> 00:04:11.516
around, you see that we need to

00:04:11.516 --> 00:04:13.466
fill in those polygons with some

00:04:13.466 --> 00:04:13.856
data.

00:04:13.856 --> 00:04:15.486
So we just take the image values

00:04:15.486 --> 00:04:16.696
and stretch them along there.

00:04:17.946 --> 00:04:19.846
This goes to the fact that the

00:04:19.846 --> 00:04:21.616
depth data is not a good

00:04:21.616 --> 00:04:23.816
representation for recreating a

00:04:23.816 --> 00:04:24.886
full 3-D scene.

00:04:25.346 --> 00:04:26.716
But this view is still

00:04:26.716 --> 00:04:29.246
interesting to look at.

00:04:29.486 --> 00:04:30.696
Also, it's important to note

00:04:30.786 --> 00:04:32.496
that the disparity map is a

00:04:32.496 --> 00:04:34.356
lower resolution than the full

00:04:34.356 --> 00:04:36.156
image, roughly a half a

00:04:36.156 --> 00:04:38.116
megapixel for the disparity map

00:04:38.116 --> 00:04:39.446
versus 12 megapixels for the

00:04:39.446 --> 00:04:39.886
image.

00:04:41.836 --> 00:04:43.216
This application we built with

00:04:43.216 --> 00:04:43.806
SceneKit.

00:04:43.946 --> 00:04:45.186
So it made it really easy to

00:04:45.186 --> 00:04:45.696
implement.

00:04:46.186 --> 00:04:48.066
We took a mesh and then we

00:04:48.066 --> 00:04:50.376
transformed the z positions of

00:04:50.376 --> 00:04:52.176
the vertices so that the

00:04:52.176 --> 00:04:53.496
brighter pixel values were

00:04:53.496 --> 00:04:54.576
closer to the camera.

00:04:55.886 --> 00:04:57.526
Also, we normalized and remapped

00:04:57.526 --> 00:04:58.936
the data so that it made sense

00:04:58.936 --> 00:05:00.096
when we viewed it in 3-D.

00:05:00.516 --> 00:05:03.746
We'll look at one more image.

00:05:04.936 --> 00:05:06.576
On this image, it's interesting

00:05:06.576 --> 00:05:08.066
if we look at the disparity map.

00:05:08.706 --> 00:05:11.106
And we zoom in and move around a

00:05:11.106 --> 00:05:12.316
little bit, we see that we have

00:05:12.316 --> 00:05:13.866
a few distinct planes to work

00:05:13.866 --> 00:05:14.336
with here.

00:05:15.666 --> 00:05:17.166
So, with that, we might get the

00:05:17.166 --> 00:05:18.316
idea that maybe it would be a

00:05:18.316 --> 00:05:19.696
good idea to quantize or

00:05:19.696 --> 00:05:21.376
threshold this depth data before

00:05:21.376 --> 00:05:22.836
we filter it for a more dramatic

00:05:22.836 --> 00:05:23.156
effect.

00:05:24.346 --> 00:05:26.106
So with that, I'd like to turn

00:05:26.106 --> 00:05:27.256
it back over to Etienne.

00:05:30.516 --> 00:05:34.026
[ Applause ]

00:05:34.526 --> 00:05:35.046
>> Thank you, Craig.

00:05:35.766 --> 00:05:38.446
All right.

00:05:38.446 --> 00:05:39.606
So now that we've seen what

00:05:39.606 --> 00:05:40.846
depth and disparity looks like,

00:05:41.336 --> 00:05:42.896
what kind of effects can we

00:05:42.896 --> 00:05:44.606
apply with that data?

00:05:45.246 --> 00:05:46.116
So let's take a look.

00:05:47.016 --> 00:05:49.226
Here's an example image and its

00:05:49.276 --> 00:05:49.986
disparity map.

00:05:52.706 --> 00:05:54.426
One effect we can apply is a

00:05:54.426 --> 00:05:55.286
depth blur effect.

00:05:55.616 --> 00:05:57.376
And this is the effect that you

00:05:57.376 --> 00:05:59.606
can achieve by capturing using

00:05:59.606 --> 00:06:00.916
camera in portrait mode.

00:06:03.746 --> 00:06:05.246
We can get a bit more creative.

00:06:05.316 --> 00:06:06.856
And here's an example where we

00:06:06.856 --> 00:06:08.556
apply a different effect to the

00:06:08.556 --> 00:06:09.896
background and the foreground.

00:06:10.526 --> 00:06:12.466
Here we dissipate the background

00:06:12.806 --> 00:06:14.256
while increasing the saturation

00:06:14.256 --> 00:06:15.956
of the foreground to make those

00:06:15.956 --> 00:06:16.796
flowers stand out.

00:06:19.356 --> 00:06:20.886
We can go even further than

00:06:20.886 --> 00:06:21.176
this.

00:06:21.516 --> 00:06:23.356
And here we are actually the

00:06:23.356 --> 00:06:24.676
deeming the pixels in the

00:06:24.676 --> 00:06:26.686
background proportionally to the

00:06:26.686 --> 00:06:27.176
depth.

00:06:28.366 --> 00:06:30.716
And so this is just a couple of

00:06:30.716 --> 00:06:32.366
examples to give you a taste of

00:06:32.366 --> 00:06:34.056
what you can do with that data.

00:06:34.886 --> 00:06:35.936
And we're going to show you how

00:06:35.936 --> 00:06:37.686
to do this and more later in the

00:06:37.686 --> 00:06:38.006
talk.

00:06:40.256 --> 00:06:41.906
Now let's see who could use that

00:06:42.326 --> 00:06:42.446
depth.

00:06:42.646 --> 00:06:44.096
Well of course, if you are

00:06:44.096 --> 00:06:46.586
editing an application, you can

00:06:46.586 --> 00:06:48.536
now use depth to create new

00:06:48.536 --> 00:06:50.116
kinds of effects and to apply

00:06:50.116 --> 00:06:51.226
new kinds of effects to your

00:06:51.226 --> 00:06:51.706
images.

00:06:52.906 --> 00:06:53.686
But if you're a camera

00:06:53.756 --> 00:06:55.746
application, you can also opt in

00:06:55.746 --> 00:06:58.646
to capture depth and be the very

00:06:58.646 --> 00:07:00.226
first -- apply the very first

00:07:00.226 --> 00:07:01.896
depth effect to the images such

00:07:01.896 --> 00:07:03.246
as your own depth blur effects,

00:07:03.246 --> 00:07:03.776
for example.

00:07:05.026 --> 00:07:06.286
If you are a sharing

00:07:06.286 --> 00:07:07.656
application, you may also want

00:07:07.656 --> 00:07:09.706
to take advantage of depth to

00:07:09.706 --> 00:07:11.906
apply cool effects before

00:07:12.216 --> 00:07:13.156
sharing images.

00:07:14.246 --> 00:07:15.076
All right.

00:07:15.916 --> 00:07:17.256
But before we can apply any

00:07:17.256 --> 00:07:18.556
effects, let's take a look at

00:07:18.556 --> 00:07:20.696
how to read depth data and load

00:07:20.696 --> 00:07:21.386
it into memory.

00:07:23.806 --> 00:07:24.706
So let's take a look.

00:07:25.916 --> 00:07:27.996
Depth data is stored in image

00:07:27.996 --> 00:07:30.506
files alongside image data in a

00:07:30.506 --> 00:07:34.166
section called Auxiliary Data.

00:07:34.856 --> 00:07:37.826
Beware that the values image

00:07:37.826 --> 00:07:39.346
[inaudible] in the system such

00:07:39.346 --> 00:07:40.556
as UI image and [inaudible]

00:07:40.586 --> 00:07:41.546
image or [inaudible] image do

00:07:41.736 --> 00:07:43.256
not contain depth information.

00:07:44.136 --> 00:07:45.496
You need to access the image

00:07:45.496 --> 00:07:47.056
file in order to read the depth

00:07:47.056 --> 00:07:47.326
data.

00:07:48.026 --> 00:07:49.196
So let's see how to do that.

00:07:50.116 --> 00:07:51.306
If you're using PhotoKit,

00:07:52.336 --> 00:07:53.406
there's a couple of ways to can

00:07:53.406 --> 00:07:54.516
access the image file.

00:07:55.096 --> 00:07:57.116
You may be using PH Content

00:07:57.116 --> 00:08:00.036
Editing input, for instance.

00:08:00.396 --> 00:08:02.196
Here's how you can request the

00:08:02.196 --> 00:08:03.316
Content Editing input for a

00:08:03.316 --> 00:08:04.586
particular PHAsset.

00:08:05.856 --> 00:08:07.556
And you can access the image

00:08:07.656 --> 00:08:09.186
file URL from the Content

00:08:09.186 --> 00:08:10.186
Editing input that way.

00:08:12.966 --> 00:08:14.406
You may also use PH Image

00:08:14.406 --> 00:08:14.886
Manager.

00:08:15.206 --> 00:08:18.776
You can ask the PH Image Manager

00:08:18.916 --> 00:08:20.366
to request image data for a

00:08:20.366 --> 00:08:21.306
particular asset.

00:08:21.666 --> 00:08:22.996
And that will give you back a

00:08:22.996 --> 00:08:25.256
data object that contains the

00:08:25.256 --> 00:08:25.836
file data.

00:08:27.826 --> 00:08:28.286
All right.

00:08:29.276 --> 00:08:30.716
So now that we have access to a

00:08:30.716 --> 00:08:32.426
file, let's see if it contained

00:08:32.426 --> 00:08:32.905
depth data.

00:08:33.246 --> 00:08:34.025
And so we're going to use

00:08:34.025 --> 00:08:34.976
ImageIO for this.

00:08:37.436 --> 00:08:38.816
We start from an image source

00:08:38.816 --> 00:08:40.216
that we create from our image

00:08:40.216 --> 00:08:40.576
file.

00:08:41.936 --> 00:08:45.786
And then we copy the image

00:08:45.786 --> 00:08:46.626
source properties.

00:08:47.576 --> 00:08:48.706
This will give you back a

00:08:48.706 --> 00:08:50.706
dictionary that looks like this

00:08:50.706 --> 00:08:50.996
one.

00:08:52.526 --> 00:08:54.086
You want to look for the

00:08:54.086 --> 00:08:56.276
kCKImage Property Auxiliary data

00:08:56.796 --> 00:08:58.106
key in that dictionary.

00:08:58.416 --> 00:09:00.146
The presence of that key will

00:09:00.146 --> 00:09:02.086
tell you that image file that

00:09:02.086 --> 00:09:03.266
you're working with contained

00:09:03.266 --> 00:09:03.966
auxiliary data.

00:09:05.296 --> 00:09:06.916
You can look at the type of the

00:09:06.916 --> 00:09:07.276
data.

00:09:07.276 --> 00:09:08.586
And here you can see its

00:09:08.586 --> 00:09:09.156
disparity.

00:09:09.596 --> 00:09:10.486
Could also be depth.

00:09:11.606 --> 00:09:13.556
One thing to note here is that

00:09:13.556 --> 00:09:15.016
the dimension of the depth data

00:09:15.696 --> 00:09:17.686
are smaller than the dimension

00:09:17.896 --> 00:09:19.036
of the full size image.

00:09:20.176 --> 00:09:21.476
This is an image captured by

00:09:21.476 --> 00:09:22.406
iPhone 7+.

00:09:22.556 --> 00:09:24.036
The full size image is 12

00:09:24.036 --> 00:09:24.716
megapixel.

00:09:25.206 --> 00:09:27.946
And the depth data is about less

00:09:28.176 --> 00:09:29.706
than a megapixel.

00:09:31.316 --> 00:09:32.836
All right.

00:09:34.126 --> 00:09:35.666
So now that we know that we have

00:09:35.666 --> 00:09:37.186
a file with depth data, let's

00:09:37.186 --> 00:09:42.026
see how we can read it

00:09:42.026 --> 00:09:43.516
[inaudible].

00:09:43.516 --> 00:09:44.826
So, it goes like this.

00:09:44.826 --> 00:09:46.186
We start with the auxiliary data

00:09:46.186 --> 00:09:46.846
from the file.

00:09:48.026 --> 00:09:49.516
And then we create an AV Depth

00:09:49.516 --> 00:09:50.736
Data object, which is a

00:09:50.736 --> 00:09:51.276
[inaudible] memory

00:09:51.276 --> 00:09:52.856
representation for the depth

00:09:52.856 --> 00:09:53.146
data.

00:09:54.346 --> 00:09:56.736
From that object we can access a

00:09:56.736 --> 00:09:58.956
CV pixel buffer that contains

00:09:58.956 --> 00:09:59.626
the depth data.

00:10:01.276 --> 00:10:02.676
The pixel buffer will be a

00:10:02.676 --> 00:10:04.146
single channel of data

00:10:05.046 --> 00:10:06.786
containing either depth or

00:10:06.786 --> 00:10:09.486
disparity and in 16-bit or

00:10:09.486 --> 00:10:10.786
32-bit floating [inaudible]

00:10:10.786 --> 00:10:11.336
values.

00:10:11.806 --> 00:10:11.966
All right.

00:10:12.676 --> 00:10:16.046
So let's see how to do that in

00:10:16.046 --> 00:10:16.376
code.

00:10:18.246 --> 00:10:19.686
Again we start from [inaudible].

00:10:21.426 --> 00:10:23.806
And next we ask to copy the

00:10:23.806 --> 00:10:25.646
auxiliary data out of the image

00:10:25.646 --> 00:10:25.713
[inaudible].

00:10:25.713 --> 00:10:27.636
So for that we request a

00:10:27.636 --> 00:10:29.846
particular auxiliary data type.

00:10:30.276 --> 00:10:31.306
Here we are requesting

00:10:31.306 --> 00:10:31.886
disparity.

00:10:32.856 --> 00:10:34.096
And this give us back a

00:10:34.096 --> 00:10:35.826
dictionary that contains the

00:10:35.826 --> 00:10:36.606
auxiliary data.

00:10:38.026 --> 00:10:39.156
It can also return the

00:10:39.736 --> 00:10:40.256
[inaudible], and that will

00:10:40.256 --> 00:10:41.956
indicate that the image file

00:10:41.956 --> 00:10:44.006
does not contain the disparity

00:10:44.006 --> 00:10:45.896
-- sorry, the auxiliary data of

00:10:45.896 --> 00:10:46.766
that particular type.

00:10:46.896 --> 00:10:48.436
So that's another way you can

00:10:48.436 --> 00:10:50.486
check if a file contains depth

00:10:50.486 --> 00:10:50.756
data.

00:10:53.536 --> 00:10:55.746
Next, we can create an AVDepth

00:10:55.746 --> 00:10:57.416
Data object from the auxiliary

00:10:57.416 --> 00:10:59.466
data, the representation that we

00:10:59.466 --> 00:11:00.486
got from ImageIO.

00:11:02.006 --> 00:11:03.516
And that AVDepth Data contains a

00:11:03.516 --> 00:11:04.676
couple of properties that you

00:11:04.676 --> 00:11:05.196
can ask.

00:11:05.196 --> 00:11:06.966
For example, you can check for

00:11:06.966 --> 00:11:09.016
its native data type.

00:11:09.526 --> 00:11:11.616
And that's a pixel format that

00:11:11.616 --> 00:11:12.306
you can check.

00:11:12.306 --> 00:11:13.956
And if it's not the one you

00:11:13.956 --> 00:11:16.906
want, you can also convert it to

00:11:16.906 --> 00:11:19.016
a new pixel format.

00:11:19.046 --> 00:11:22.156
So for example, here we ask for

00:11:22.156 --> 00:11:23.486
disparity float 16.

00:11:23.486 --> 00:11:24.866
Because maybe we're going to use

00:11:24.866 --> 00:11:26.436
a disparity map on the GPU, for

00:11:26.436 --> 00:11:26.856
example.

00:11:27.776 --> 00:11:30.216
And this will return a new AV

00:11:30.216 --> 00:11:31.506
Depth Data object of the right

00:11:31.506 --> 00:11:31.926
format.

00:11:32.706 --> 00:11:34.376
So once you have a depth data

00:11:34.376 --> 00:11:35.626
object that you're happy with,

00:11:35.656 --> 00:11:37.886
you can access a CV pixel buffer

00:11:38.226 --> 00:11:39.416
using the depth data map

00:11:39.416 --> 00:11:39.836
property.

00:11:41.326 --> 00:11:42.366
Once you have the CV pixel

00:11:42.366 --> 00:11:43.906
buffer you can use it directly.

00:11:43.906 --> 00:11:45.726
Or you can use it using Metal or

00:11:45.726 --> 00:11:46.246
Core Image.

00:11:47.526 --> 00:11:48.566
If you're working with Core

00:11:48.566 --> 00:11:50.626
Image, there's a convenient way

00:11:50.766 --> 00:11:52.476
you can load the depth data

00:11:52.476 --> 00:11:53.856
directly into a CI Image.

00:11:54.076 --> 00:11:54.976
Here's how to do it.

00:11:55.976 --> 00:11:57.986
When you create a CI Image from

00:11:57.986 --> 00:11:59.556
the contents of a file, you can

00:11:59.556 --> 00:12:01.596
now specify a new option such as

00:12:01.986 --> 00:12:05.566
kCGIImage auxiliary depth or

00:12:05.566 --> 00:12:09.246
disparity to indicate to CI to

00:12:09.246 --> 00:12:10.856
load the depth data -- the depth

00:12:10.856 --> 00:12:12.116
image instead of the regular

00:12:12.166 --> 00:12:12.526
image.

00:12:14.106 --> 00:12:16.806
Once you have a depth image, you

00:12:16.806 --> 00:12:18.286
can always go back to the AV

00:12:18.286 --> 00:12:20.266
Depth data object by call its

00:12:20.266 --> 00:12:21.266
depth data property.

00:12:23.286 --> 00:12:24.416
And keep in mind that you can

00:12:24.416 --> 00:12:26.326
always convert back and forth

00:12:26.326 --> 00:12:27.706
between disparity and depth

00:12:27.856 --> 00:12:29.776
using convenient UCI filters

00:12:30.016 --> 00:12:33.476
such as CI depth to disparity.

00:12:34.776 --> 00:12:35.136
All right.

00:12:35.306 --> 00:12:37.196
So now that we've read the depth

00:12:37.336 --> 00:12:39.796
data out of a file and into an

00:12:39.796 --> 00:12:42.096
image, let's see -- we still

00:12:42.236 --> 00:12:44.436
need to take a couple more step

00:12:44.436 --> 00:12:45.726
before we can start editing with

00:12:45.726 --> 00:12:45.906
it.

00:12:46.086 --> 00:12:49.276
If you remember, the depth data

00:12:49.276 --> 00:12:50.706
is lower resolution than the

00:12:50.706 --> 00:12:51.196
image.

00:12:51.616 --> 00:12:53.606
So, the very first thing that

00:12:53.606 --> 00:12:55.166
you want to do is to scale it up

00:12:55.816 --> 00:12:57.196
to the resolution of the image

00:12:57.196 --> 00:12:57.966
that you're working with.

00:12:58.536 --> 00:12:59.596
There's a couple ways to do

00:12:59.596 --> 00:12:59.826
that.

00:12:59.826 --> 00:13:01.866
So, let's take a look.

00:13:02.556 --> 00:13:04.846
Here's our example image and its

00:13:04.846 --> 00:13:05.766
disparity map.

00:13:06.526 --> 00:13:08.436
So, if we scale up, let's say

00:13:08.436 --> 00:13:10.726
this small, tiny portion there,

00:13:10.816 --> 00:13:12.826
using narrow sampling, you can

00:13:12.826 --> 00:13:13.716
see that it's very, very

00:13:13.716 --> 00:13:14.336
pixelated.

00:13:14.716 --> 00:13:16.006
So at the very least you would

00:13:16.006 --> 00:13:17.496
want to apply linear sampling to

00:13:17.496 --> 00:13:18.636
get the smoother result.

00:13:19.926 --> 00:13:22.096
You can also use a new CI filter

00:13:22.446 --> 00:13:25.236
to CI BiCubicScale Transform to

00:13:25.236 --> 00:13:27.936
get an even smoother result.

00:13:28.946 --> 00:13:31.326
However, beware that depth data

00:13:31.326 --> 00:13:32.206
is not color data.

00:13:32.886 --> 00:13:34.896
And so, instead of smoothing,

00:13:34.896 --> 00:13:36.476
maybe what you want is actually

00:13:36.476 --> 00:13:38.686
preserve as much as possible the

00:13:38.686 --> 00:13:41.216
details of the image so that the

00:13:41.216 --> 00:13:42.786
depth data matches the image

00:13:42.786 --> 00:13:43.436
more closely.

00:13:43.836 --> 00:13:44.796
And you can do this with a

00:13:44.796 --> 00:13:46.926
convenient CI filter called CI

00:13:46.926 --> 00:13:48.636
Edge Preserve Upsample Filter.

00:13:49.966 --> 00:13:52.206
This filter will upsample the

00:13:52.206 --> 00:13:54.226
depth data and will try to

00:13:54.226 --> 00:13:56.686
preserve the edges from the

00:13:56.926 --> 00:13:58.156
color image.

00:13:59.576 --> 00:14:00.506
All right.

00:14:01.786 --> 00:14:04.106
Oh, also another thing that you

00:14:04.106 --> 00:14:05.836
need to be careful of.

00:14:06.026 --> 00:14:07.466
For all of those resampling

00:14:07.466 --> 00:14:09.456
operation, we recommend that you

00:14:09.456 --> 00:14:11.336
use disparity over depth because

00:14:11.336 --> 00:14:12.736
it gives you -- it will give you

00:14:12.736 --> 00:14:13.546
better results.

00:14:15.056 --> 00:14:17.826
Okay. A couple thing that you

00:14:17.826 --> 00:14:18.886
may want to do as well.

00:14:20.166 --> 00:14:21.836
You may want to compute the

00:14:21.836 --> 00:14:23.786
minimum and maximum value for

00:14:23.786 --> 00:14:24.446
the depth data.

00:14:26.056 --> 00:14:28.186
Because there are many cases

00:14:28.186 --> 00:14:29.116
where you need to know those

00:14:29.116 --> 00:14:30.486
values for the particular

00:14:30.486 --> 00:14:32.346
effects that you want to apply.

00:14:34.806 --> 00:14:36.066
Also keep in mind that the depth

00:14:36.066 --> 00:14:37.996
data is not normalized between 0

00:14:37.996 --> 00:14:39.016
and 1.

00:14:39.016 --> 00:14:41.296
For example, disparity values

00:14:41.296 --> 00:14:43.326
can range from 0, which means

00:14:43.676 --> 00:14:48.906
infinity, to greater than 1 for

00:14:48.906 --> 00:14:51.016
objects that are closer than one

00:14:51.016 --> 00:14:51.706
meter away.

00:14:53.166 --> 00:14:58.056
Okay. Another thing you can do

00:14:58.056 --> 00:14:59.346
is to normalize the depth data.

00:14:59.346 --> 00:15:00.546
So once you know the min and max

00:15:00.546 --> 00:15:02.316
you can normalize the depth or

00:15:02.316 --> 00:15:03.786
disparity between 0 and 1.

00:15:04.086 --> 00:15:05.246
And that's pretty convenient

00:15:05.466 --> 00:15:07.446
first to visualize it.

00:15:07.836 --> 00:15:10.426
But also if you want to apply

00:15:10.426 --> 00:15:12.396
your depth effects consistently

00:15:12.396 --> 00:15:14.036
across various different scenes.

00:15:14.886 --> 00:15:15.226
All right.

00:15:15.226 --> 00:15:17.276
So now that we've read our depth

00:15:17.276 --> 00:15:18.886
data, and prepared it for

00:15:18.886 --> 00:15:20.396
editing we are ready to start

00:15:20.396 --> 00:15:21.126
filtering with it.

00:15:23.096 --> 00:15:24.546
So in this section we're going

00:15:24.546 --> 00:15:26.546
to show you several example of

00:15:26.706 --> 00:15:28.406
depth effects you can apply.

00:15:29.236 --> 00:15:30.696
We're going to start with simple

00:15:30.696 --> 00:15:31.956
background effects that you can

00:15:31.956 --> 00:15:34.106
achieve using built in Core

00:15:34.106 --> 00:15:34.926
Image filters.

00:15:35.736 --> 00:15:37.996
Then we're going to show you a

00:15:37.996 --> 00:15:39.486
custom depth effect that you can

00:15:39.486 --> 00:15:41.446
achieve using a custom CI

00:15:41.696 --> 00:15:42.116
[inaudible] code.

00:15:43.526 --> 00:15:45.396
Then we're going to show you how

00:15:45.396 --> 00:15:46.546
you can apply your own depth

00:15:46.546 --> 00:15:48.216
blur effect using a brand new CI

00:15:48.216 --> 00:15:48.506
Filter.

00:15:49.726 --> 00:15:51.196
And finally, we're going to show

00:15:51.196 --> 00:15:52.996
you how to create a brand new

00:15:52.996 --> 00:15:54.966
3-D effect using depth.

00:15:55.376 --> 00:15:56.516
So let's get started with the

00:15:56.516 --> 00:15:57.026
first one.

00:15:57.596 --> 00:15:58.696
And for that I'm going to call

00:15:58.696 --> 00:16:00.276
my colleague Stephen on stage

00:16:00.276 --> 00:16:00.736
for that demo.

00:16:01.416 --> 00:16:01.746
Stephen.

00:16:03.516 --> 00:16:06.686
[ Applause ]

00:16:07.186 --> 00:16:07.836
>> Thank you, Etienne.

00:16:08.626 --> 00:16:09.396
Good morning everybody.

00:16:09.396 --> 00:16:10.296
My name is Stephen.

00:16:10.296 --> 00:16:12.176
And now that Etienne has shown

00:16:12.176 --> 00:16:14.006
you how to load and prepare your

00:16:14.006 --> 00:16:16.566
depth data, it's my pleasure to

00:16:16.566 --> 00:16:18.106
be here to show you a couple of

00:16:18.106 --> 00:16:20.136
ways that you can use depth now

00:16:20.136 --> 00:16:22.356
to achieve some new and

00:16:22.356 --> 00:16:23.746
interesting effects on your

00:16:23.746 --> 00:16:24.206
images.

00:16:24.946 --> 00:16:26.386
So we're going to jump right in

00:16:26.386 --> 00:16:29.596
with a demo.

00:16:29.966 --> 00:16:32.846
Okay. What we're looking at here

00:16:32.846 --> 00:16:35.366
is -- I'm in the Photos app.

00:16:36.336 --> 00:16:37.666
And I'm going to enter Edit here

00:16:37.666 --> 00:16:38.306
on this image.

00:16:38.596 --> 00:16:42.546
So, this effect is implemented

00:16:42.546 --> 00:16:43.546
here in a photo editing

00:16:43.546 --> 00:16:44.156
extension.

00:16:44.746 --> 00:16:48.986
And now that we got the rough

00:16:48.986 --> 00:16:51.026
parts out of the way, we're

00:16:51.026 --> 00:16:52.116
looking at the original image

00:16:52.116 --> 00:16:52.336
here.

00:16:53.346 --> 00:16:54.206
No edits applied.

00:16:54.506 --> 00:16:55.456
And I'm going to go ahead and

00:16:55.456 --> 00:16:56.296
turn on the effect now.

00:16:57.696 --> 00:16:58.476
What you see is that I've

00:16:58.476 --> 00:17:00.056
applied a de-saturating effect

00:17:00.276 --> 00:17:01.706
to the image, but only to the

00:17:01.706 --> 00:17:02.536
back ground region.

00:17:03.596 --> 00:17:05.195
And I can pick a different

00:17:05.435 --> 00:17:07.406
background effect to apply.

00:17:07.406 --> 00:17:08.516
In this case I've picked just a

00:17:08.516 --> 00:17:09.445
flat white image.

00:17:10.256 --> 00:17:13.376
And maybe I'm not terribly

00:17:13.376 --> 00:17:14.516
satisfied with where that

00:17:14.516 --> 00:17:15.955
threshold is between background

00:17:15.955 --> 00:17:18.185
and foreground, so I can pick a

00:17:18.185 --> 00:17:19.496
new threshold by tapping.

00:17:20.646 --> 00:17:21.866
And this is all based on the

00:17:22.076 --> 00:17:22.626
depth data.

00:17:24.006 --> 00:17:25.586
So let me bring it back here to

00:17:25.586 --> 00:17:25.986
the front.

00:17:25.986 --> 00:17:27.215
And you can clearly see there's

00:17:27.536 --> 00:17:29.706
a pretty sharp boundary between

00:17:29.916 --> 00:17:31.066
what's considered background and

00:17:31.066 --> 00:17:31.596
foreground.

00:17:32.106 --> 00:17:33.386
There's actually a narrow region

00:17:33.386 --> 00:17:34.726
in between where we're doing a

00:17:34.726 --> 00:17:35.906
little bit of blending between

00:17:35.906 --> 00:17:36.306
the two.

00:17:36.856 --> 00:17:38.436
And I have control over the size

00:17:38.436 --> 00:17:39.286
of that blend region.

00:17:40.346 --> 00:17:42.986
I can adjust that by pinching.

00:17:43.376 --> 00:17:44.556
And there you can see it looks

00:17:44.936 --> 00:17:46.776
like a pretty nice white fog

00:17:48.366 --> 00:17:48.536
effect.

00:17:49.186 --> 00:17:51.206
We've implemented this effect by

00:17:51.206 --> 00:17:53.306
making use of a blend mask.

00:17:54.006 --> 00:17:54.736
So let me show you what our

00:17:54.736 --> 00:17:55.896
blend mask looks like here.

00:17:57.536 --> 00:17:59.096
The black regions of the blend

00:17:59.096 --> 00:18:00.016
mask correspond to the

00:18:00.016 --> 00:18:00.846
background image.

00:18:01.266 --> 00:18:02.656
Solid white is foreground.

00:18:02.656 --> 00:18:03.946
And then everything in between

00:18:04.036 --> 00:18:05.146
is where we blend between the

00:18:05.146 --> 00:18:05.386
two.

00:18:06.146 --> 00:18:07.766
So, this is what that blend mask

00:18:07.766 --> 00:18:08.996
looks like as I pinch.

00:18:09.656 --> 00:18:10.876
We're adjusting the size and

00:18:10.876 --> 00:18:11.966
slope of that blend.

00:18:13.556 --> 00:18:14.506
Okay, back to the original

00:18:14.506 --> 00:18:14.826
image.

00:18:15.356 --> 00:18:16.506
As many of you know, there are

00:18:16.506 --> 00:18:18.266
so many built in interesting

00:18:18.266 --> 00:18:19.626
Core Image filters we could

00:18:19.626 --> 00:18:20.466
choose to apply.

00:18:21.036 --> 00:18:22.376
I'm going to show you a couple

00:18:22.376 --> 00:18:22.756
of others.

00:18:22.756 --> 00:18:24.596
This one is a hexagonal pixelate

00:18:24.596 --> 00:18:24.986
filter.

00:18:25.636 --> 00:18:27.796
And a motion blur.

00:18:29.636 --> 00:18:30.836
Let's say I'm happy with this.

00:18:30.836 --> 00:18:32.086
And I'll save it back to my

00:18:32.766 --> 00:18:33.616
photo library.

00:18:34.476 --> 00:18:36.226
Okay, now let's talk about how

00:18:36.226 --> 00:18:36.786
we did this.

00:18:40.806 --> 00:18:44.996
As I mentioned, we accomplished

00:18:44.996 --> 00:18:46.506
this effect by building a blend

00:18:46.506 --> 00:18:46.896
mask.

00:18:47.446 --> 00:18:48.396
And so I'll talk to you now

00:18:48.396 --> 00:18:49.376
about how we build that blend

00:18:49.376 --> 00:18:49.716
mask.

00:18:50.086 --> 00:18:51.216
The basic idea is that we're

00:18:51.216 --> 00:18:52.626
going to map our normalized

00:18:52.656 --> 00:18:55.106
disparity values into values

00:18:55.106 --> 00:18:57.056
between 0 and 1 for the mask.

00:18:58.556 --> 00:19:00.796
And so we want some high region

00:19:00.796 --> 00:19:03.006
of disparity values to map to 1

00:19:03.106 --> 00:19:04.276
in our blend mask corresponding

00:19:04.276 --> 00:19:04.946
to the foreground.

00:19:06.416 --> 00:19:07.736
Some region of low disparity

00:19:07.736 --> 00:19:08.936
values to map to 0.

00:19:08.936 --> 00:19:10.736
And that will be the background

00:19:10.736 --> 00:19:11.106
region.

00:19:11.216 --> 00:19:12.576
And then all disparity values in

00:19:12.576 --> 00:19:14.366
between will blend with the

00:19:14.366 --> 00:19:14.946
linear ramp.

00:19:16.986 --> 00:19:18.126
The first part of building this

00:19:18.126 --> 00:19:20.446
blend mask is to pick the

00:19:20.716 --> 00:19:23.056
threshold between background and

00:19:23.056 --> 00:19:23.526
foreground.

00:19:24.446 --> 00:19:25.506
So when the user taps on the

00:19:25.506 --> 00:19:29.196
image what we do is to sample

00:19:29.196 --> 00:19:30.816
the normalized disparity map at

00:19:30.816 --> 00:19:33.136
that same location and set that

00:19:33.136 --> 00:19:34.806
as our threshold between

00:19:35.146 --> 00:19:36.006
background and foreground.

00:19:36.646 --> 00:19:39.126
Now I'll show you the code for

00:19:39.126 --> 00:19:39.766
what that looks like.

00:19:41.786 --> 00:19:43.006
This is all accomplished using

00:19:43.166 --> 00:19:44.466
built in Core Image filters.

00:19:44.466 --> 00:19:45.836
So the first of which I'd like

00:19:45.836 --> 00:19:47.496
to show you here is the CI Area

00:19:47.496 --> 00:19:48.796
Min Max Red filter.

00:19:49.926 --> 00:19:51.466
This filter, when you render it

00:19:51.466 --> 00:19:54.136
into a single pixel will return

00:19:54.136 --> 00:19:55.676
the minimum and maximum values

00:19:55.676 --> 00:19:57.136
of the image within the region

00:19:57.136 --> 00:19:58.036
that you specify.

00:19:58.386 --> 00:20:00.116
Here we're passing in the small

00:20:00.116 --> 00:20:01.536
rect that the user tapped on.

00:20:02.786 --> 00:20:04.226
The other thing to note about

00:20:04.226 --> 00:20:05.496
this line is that before we

00:20:05.496 --> 00:20:07.466
apply the effect we're clamping

00:20:07.466 --> 00:20:08.896
the disparity image so as to

00:20:08.896 --> 00:20:10.526
image that if the user taps near

00:20:10.526 --> 00:20:11.856
the boundary of the image we

00:20:11.856 --> 00:20:13.236
won't sample any clear pixels

00:20:13.236 --> 00:20:14.056
outside the boundary.

00:20:15.866 --> 00:20:18.046
On this line we're simply

00:20:18.046 --> 00:20:20.176
allocating a 4-byte buffer large

00:20:20.176 --> 00:20:21.426
enough to store a single pixel.

00:20:22.606 --> 00:20:24.086
And we render into that pixel on

00:20:24.086 --> 00:20:24.556
this line.

00:20:25.346 --> 00:20:26.846
Note that we're passing in nil

00:20:26.966 --> 00:20:27.876
as our color space.

00:20:27.876 --> 00:20:29.696
And this tells Core Image that

00:20:29.696 --> 00:20:31.196
we don't want it to do any color

00:20:31.196 --> 00:20:32.076
management for us.

00:20:34.256 --> 00:20:36.226
Finally we read the maximum

00:20:36.226 --> 00:20:37.346
disparity value out of the

00:20:37.346 --> 00:20:39.476
pixel's green channel and then

00:20:39.476 --> 00:20:41.326
remap it to the range of 0 and 1

00:20:41.366 --> 00:20:43.066
by dividing by 255.

00:20:43.716 --> 00:20:47.946
The other input the user has

00:20:47.946 --> 00:20:49.286
control over is the size and

00:20:49.286 --> 00:20:50.416
slope of the blend region.

00:20:50.566 --> 00:20:52.496
So as the user is pinching on

00:20:52.496 --> 00:20:54.596
the view, we're adjusting the

00:20:54.596 --> 00:20:56.066
size and slope accordingly.

00:20:58.306 --> 00:21:00.056
And this is the result of a

00:21:00.056 --> 00:21:01.606
mapping -- sorry, this mapping

00:21:01.606 --> 00:21:03.756
is the result of applying a CI

00:21:03.756 --> 00:21:04.866
Color Matrix filter.

00:21:05.236 --> 00:21:06.236
So I'll show you in a second.

00:21:06.776 --> 00:21:08.676
But then we also apply a CI

00:21:08.676 --> 00:21:10.456
Color Clamp to ensure that the

00:21:10.456 --> 00:21:11.926
values remain within the region

00:21:12.026 --> 00:21:13.866
of 0 to 1, the range of 0 to 1.

00:21:15.126 --> 00:21:15.956
So here's the code.

00:21:16.446 --> 00:21:17.966
First we apply our CR Color

00:21:17.966 --> 00:21:19.026
Matrix filter.

00:21:19.706 --> 00:21:22.236
Its inputs are essentially the

00:21:22.706 --> 00:21:24.496
slope and the bias that were

00:21:24.496 --> 00:21:26.016
selected by the user by tapping

00:21:26.016 --> 00:21:26.486
and pinching.

00:21:27.486 --> 00:21:29.346
And then on a single line we

00:21:29.346 --> 00:21:31.386
apply the CI Color Clamp filter.

00:21:32.816 --> 00:21:36.116
Now that we've build the blend

00:21:36.116 --> 00:21:37.136
mask, the rest is

00:21:37.136 --> 00:21:37.766
straightforward.

00:21:37.856 --> 00:21:39.586
What you see on the left is the

00:21:39.586 --> 00:21:40.456
original image.

00:21:40.746 --> 00:21:42.016
And on the right you see that

00:21:42.016 --> 00:21:43.556
image with the background effect

00:21:43.556 --> 00:21:43.926
applied.

00:21:45.836 --> 00:21:47.156
When we apply the blend mask to

00:21:47.156 --> 00:21:49.216
the original image, the

00:21:49.216 --> 00:21:50.596
background region disappears.

00:21:50.716 --> 00:21:51.956
And when we blend that together

00:21:52.606 --> 00:21:53.866
with the background image, we

00:21:53.866 --> 00:21:54.676
get our final effect.

00:21:55.666 --> 00:21:58.226
One more slide of code.

00:21:59.396 --> 00:22:00.356
Here's where we apply our

00:22:00.356 --> 00:22:01.146
background filter.

00:22:02.166 --> 00:22:03.676
This could be any filter you

00:22:03.676 --> 00:22:04.156
choose.

00:22:04.436 --> 00:22:05.636
There are many built into Core

00:22:05.636 --> 00:22:05.956
Image.

00:22:05.956 --> 00:22:06.756
You could write your own.

00:22:08.326 --> 00:22:09.886
And then we apply the CI Blend

00:22:09.886 --> 00:22:12.426
With Mask filter, passing in

00:22:12.516 --> 00:22:14.326
both the background image and

00:22:16.576 --> 00:22:17.296
the mask.

00:22:18.086 --> 00:22:19.076
And that's it.

00:22:19.316 --> 00:22:20.406
That's how we accomplish this

00:22:20.406 --> 00:22:24.096
effect using a suite of built in

00:22:24.096 --> 00:22:25.026
Core Image filters.

00:22:25.586 --> 00:22:27.846
And next I'd like to jump in and

00:22:27.846 --> 00:22:28.956
show you another demo.

00:22:30.656 --> 00:22:33.206
For this one -- the previous one

00:22:33.696 --> 00:22:36.266
we used disparity -- depth data

00:22:36.576 --> 00:22:37.966
indirectly, right?

00:22:38.156 --> 00:22:40.086
We used it to build a blend

00:22:40.086 --> 00:22:40.546
mask.

00:22:41.326 --> 00:22:42.316
For this one we're going to use

00:22:42.316 --> 00:22:44.736
disparity a little bit in more

00:22:44.736 --> 00:22:45.706
of a direct fashion.

00:22:46.306 --> 00:22:50.226
And I'm going to pull up this

00:22:50.226 --> 00:22:51.566
other editing extension here to

00:22:51.566 --> 00:22:52.036
show it to you.

00:22:52.746 --> 00:22:53.846
Okay. Here we are in photos

00:22:53.846 --> 00:22:54.116
again.

00:22:55.086 --> 00:22:56.886
Let's pick this next extension.

00:22:58.216 --> 00:22:58.966
There we go.

00:22:59.946 --> 00:23:00.666
Original image.

00:23:00.916 --> 00:23:02.176
No edits applied just yet.

00:23:02.176 --> 00:23:04.386
I have a slider at the bottom,

00:23:04.386 --> 00:23:04.646
though.

00:23:04.886 --> 00:23:06.726
And I'll start to move that now.

00:23:06.726 --> 00:23:09.706
And you can see that the

00:23:09.706 --> 00:23:11.676
background fades to black,

00:23:11.926 --> 00:23:13.226
leaving us just this prominent

00:23:13.226 --> 00:23:13.956
foreground figure.

00:23:14.526 --> 00:23:15.446
That's a really nice effect,

00:23:17.056 --> 00:23:17.566
wouldn't you say?

00:23:18.466 --> 00:23:20.766
Let's save that back to the

00:23:21.026 --> 00:23:22.496
library and show you how this

00:23:22.496 --> 00:23:22.916
one's done.

00:23:23.596 --> 00:23:24.376
What we're doing is we're

00:23:24.376 --> 00:23:25.686
mapping our normalized disparity

00:23:25.686 --> 00:23:28.086
values into a scale value, which

00:23:28.086 --> 00:23:29.406
we then apply directly to our

00:23:29.406 --> 00:23:29.916
pixels.

00:23:31.216 --> 00:23:33.286
And for this particular effect

00:23:33.726 --> 00:23:36.066
we're mapping our disparity

00:23:36.066 --> 00:23:37.736
values through an exponential

00:23:37.736 --> 00:23:39.426
function, which when we start

00:23:39.426 --> 00:23:41.656
off, we raise our normalized

00:23:41.656 --> 00:23:44.136
disparity values to the power of

00:23:44.136 --> 00:23:44.656
0.

00:23:44.806 --> 00:23:47.186
And that maps all of our scale

00:23:47.186 --> 00:23:49.556
factors into one, producing no

00:23:49.556 --> 00:23:50.636
effect on the output image.

00:23:51.186 --> 00:23:53.606
When we raise the power to 1 as

00:23:53.606 --> 00:23:55.356
we move the slider over, this is

00:23:55.356 --> 00:23:57.956
effectively the same thing as

00:23:58.426 --> 00:24:00.926
scaling our pixel intensities by

00:24:01.166 --> 00:24:03.686
the inverse of the depth.

00:24:03.686 --> 00:24:04.746
Because we're scaling by

00:24:04.966 --> 00:24:05.926
disparity directly.

00:24:06.846 --> 00:24:08.866
The effect becomes more

00:24:08.866 --> 00:24:10.106
interesting as we start to raise

00:24:10.106 --> 00:24:11.476
it to higher and higher powers.

00:24:12.146 --> 00:24:14.236
As you can see, the shape of the

00:24:14.236 --> 00:24:15.476
curve becomes such that there's

00:24:15.476 --> 00:24:16.746
a sharper distinction between

00:24:16.746 --> 00:24:18.786
background and foreground with

00:24:18.786 --> 00:24:19.836
the background quickly going to

00:24:19.836 --> 00:24:20.156
black.

00:24:20.596 --> 00:24:24.566
So I'm going to show you the

00:24:24.566 --> 00:24:25.886
code for this effect in just one

00:24:25.886 --> 00:24:26.236
slide.

00:24:26.386 --> 00:24:28.506
We've implemented this effect as

00:24:28.506 --> 00:24:29.936
a custom CI Color Kernel.

00:24:29.996 --> 00:24:31.076
And there are a couple of

00:24:31.076 --> 00:24:32.826
notable advantages to using a

00:24:32.826 --> 00:24:33.916
customer CI Color Kernel.

00:24:34.446 --> 00:24:35.976
One of which is performance.

00:24:35.976 --> 00:24:37.446
If you are able to express your

00:24:37.446 --> 00:24:39.076
effect in terms of a custom CI

00:24:39.076 --> 00:24:40.766
Color Kernel, Core Image is able

00:24:40.766 --> 00:24:42.196
to optimize that by

00:24:42.196 --> 00:24:43.726
concatenating your kernel into

00:24:43.726 --> 00:24:46.086
its render graph, thereby

00:24:46.346 --> 00:24:49.596
skipping any potentially costly

00:24:49.596 --> 00:24:50.916
intermediate images along the

00:24:50.916 --> 00:24:51.116
way.

00:24:51.976 --> 00:24:54.406
The other nice thing about this

00:24:54.406 --> 00:24:56.376
is that Core Image allows us to

00:24:56.376 --> 00:24:59.486
pass in multiple input images.

00:24:59.486 --> 00:25:00.136
And Core Image will

00:25:00.136 --> 00:25:01.626
automatically sample those for

00:25:01.626 --> 00:25:03.006
us and passing in those sample

00:25:03.006 --> 00:25:04.456
values to us as parameters to

00:25:04.456 --> 00:25:05.786
our kernel function, which you

00:25:05.786 --> 00:25:06.346
see here.

00:25:06.766 --> 00:25:08.606
The first parameter is a sample

00:25:08.606 --> 00:25:09.676
from the original image.

00:25:09.926 --> 00:25:11.126
The second is a sample from the

00:25:11.126 --> 00:25:12.236
normalized disparity map.

00:25:12.476 --> 00:25:14.096
And then third is the power

00:25:14.096 --> 00:25:15.296
selected by the user moving the

00:25:15.296 --> 00:25:15.706
slider.

00:25:17.356 --> 00:25:18.306
The first thing we do with a

00:25:18.306 --> 00:25:19.946
normalized disparity is to raise

00:25:19.946 --> 00:25:21.266
it to a power, as I mentioned.

00:25:22.056 --> 00:25:23.366
That gives us our scale factor.

00:25:24.556 --> 00:25:25.706
Then we take our scale factor

00:25:25.706 --> 00:25:27.446
and apply it to the intensity of

00:25:27.446 --> 00:25:28.926
the pixel while preserving the

00:25:28.926 --> 00:25:29.946
original alpha value.

00:25:32.096 --> 00:25:33.616
This last line is a line of

00:25:33.616 --> 00:25:36.156
Swift code illustrating how we

00:25:36.156 --> 00:25:37.706
can apply our custom kernel to

00:25:37.706 --> 00:25:39.106
our original image once it's

00:25:39.106 --> 00:25:40.386
been constructed from the source

00:25:40.386 --> 00:25:41.096
code you see above.

00:25:41.496 --> 00:25:43.576
We pass in our image extent as

00:25:43.576 --> 00:25:45.266
well as a list of arguments.

00:25:45.356 --> 00:25:46.986
Here these are the original

00:25:46.986 --> 00:25:48.416
image, the normalized disparity

00:25:48.416 --> 00:25:49.976
map, and the power selected by

00:25:49.976 --> 00:25:50.466
the user.

00:25:50.566 --> 00:25:52.046
Note that these arguments

00:25:52.046 --> 00:25:53.576
correspond one to one with the

00:25:53.576 --> 00:25:55.266
parameters defined in our kernel

00:25:55.266 --> 00:25:55.706
signature.

00:25:57.666 --> 00:25:58.886
Okay. So that's it.

00:25:58.886 --> 00:26:00.016
I've just shown you how to use a

00:26:00.016 --> 00:26:02.006
custom CI Color Kernel to

00:26:02.006 --> 00:26:03.466
produce this really nice

00:26:03.546 --> 00:26:04.826
darkening background effect.

00:26:05.476 --> 00:26:06.666
And hopefully it gives you some

00:26:06.666 --> 00:26:08.076
ideas of other things you can do

00:26:08.076 --> 00:26:09.766
with custom CI Color Kernels

00:26:09.766 --> 00:26:10.916
combined with depth to produce

00:26:10.916 --> 00:26:11.686
some nice effects.

00:26:11.686 --> 00:26:13.036
So now I'm going to invite my

00:26:13.036 --> 00:26:15.256
colleague Alex up onto the stage

00:26:15.256 --> 00:26:16.786
to show you something brand new

00:26:16.786 --> 00:26:17.576
in Core Image.

00:26:18.306 --> 00:26:18.766
Alex.

00:26:20.516 --> 00:26:24.106
[ Applause ]

00:26:24.606 --> 00:26:25.186
>> Thank you, Stephen.

00:26:26.336 --> 00:26:27.076
Good morning everyone.

00:26:27.876 --> 00:26:29.146
May name is Alexandre Naaman.

00:26:29.146 --> 00:26:30.906
And today I'm really excited to

00:26:30.906 --> 00:26:31.126
be here.

00:26:31.126 --> 00:26:31.866
And today I'm going to talk to

00:26:31.866 --> 00:26:32.886
you about a new Core Image

00:26:32.886 --> 00:26:33.456
filter we have.

00:26:34.266 --> 00:26:37.526
So as you know, in iOS 10 using

00:26:37.526 --> 00:26:38.556
the iPhone 7+.

00:26:39.106 --> 00:26:41.126
You could capture images using

00:26:41.126 --> 00:26:43.316
with depth capabilities using

00:26:43.316 --> 00:26:44.866
the camera app and the portrait

00:26:44.866 --> 00:26:45.056
mode.

00:26:46.536 --> 00:26:49.616
Now, with iOS 11, and Mac OS

00:26:49.616 --> 00:26:51.676
High Sierra, we're enhancing

00:26:51.676 --> 00:26:53.796
those capabilities by allowing

00:26:53.796 --> 00:26:54.996
you to use those exact same

00:26:54.996 --> 00:26:56.856
algorithms via a new Core Image

00:26:56.856 --> 00:26:58.406
filter called the CI Depth Blur

00:26:58.406 --> 00:26:58.726
Effect.

00:26:59.806 --> 00:27:02.256
So, now let's try and switch

00:27:02.256 --> 00:27:04.176
over to a demo and see how that

00:27:04.176 --> 00:27:04.936
works in real life.

00:27:07.576 --> 00:27:09.976
Yay! All right.

00:27:09.976 --> 00:27:10.856
So here we have an asset, a

00:27:10.856 --> 00:27:12.046
photo that was taken with depth.

00:27:12.046 --> 00:27:13.616
And we're just viewing the image

00:27:13.926 --> 00:27:14.836
without having applied any

00:27:14.836 --> 00:27:16.566
filters to it.

00:27:18.416 --> 00:27:20.536
If I tap on this once, we can

00:27:20.536 --> 00:27:22.196
see what the disparity data

00:27:22.196 --> 00:27:22.656
looks like.

00:27:23.516 --> 00:27:24.676
I'm going to tap on it once more

00:27:24.676 --> 00:27:25.456
and we'll back to the main

00:27:25.456 --> 00:27:25.846
image.

00:27:25.846 --> 00:27:27.606
And if I tap once more, we're

00:27:28.046 --> 00:27:28.976
going to see what happens when

00:27:28.976 --> 00:27:30.366
we use those two images together

00:27:30.706 --> 00:27:32.166
along with the new CI Depth Blur

00:27:32.166 --> 00:27:33.746
Effect filter to create a new

00:27:33.866 --> 00:27:34.496
rendered result.

00:27:34.926 --> 00:27:35.846
We should see the background get

00:27:35.846 --> 00:27:36.146
blurry.

00:27:36.926 --> 00:27:41.476
Yay. So now, in addition to just

00:27:41.476 --> 00:27:44.156
applying the filter as is, there

00:27:44.156 --> 00:27:45.906
are many tunable parameters that

00:27:45.906 --> 00:27:46.376
we can set.

00:27:46.376 --> 00:27:48.076
And inside of this application

00:27:48.586 --> 00:27:49.846
I've set things up such that it

00:27:49.906 --> 00:27:51.316
will respond to a few gestures.

00:27:51.546 --> 00:27:53.646
So, if I now, for example,

00:27:53.646 --> 00:27:56.016
pinch, we can dynamically change

00:27:56.016 --> 00:27:58.056
the aperture and get a new

00:27:58.056 --> 00:27:58.816
simulated look.

00:27:58.816 --> 00:28:00.506
And so we can simulate any lens

00:28:00.976 --> 00:28:02.396
opening that we would like quite

00:28:02.396 --> 00:28:02.806
simply.

00:28:05.796 --> 00:28:06.906
Another gesture I've set up in

00:28:06.906 --> 00:28:08.466
this application is such that

00:28:08.796 --> 00:28:10.156
when we tap at a different

00:28:10.156 --> 00:28:11.256
location it's going to change

00:28:11.256 --> 00:28:12.296
the focus rectangle.

00:28:12.586 --> 00:28:14.376
And so we can see right now the

00:28:14.376 --> 00:28:15.766
aperture is quite wide open.

00:28:16.136 --> 00:28:17.746
And only the lady in the front

00:28:17.746 --> 00:28:18.306
is in focus.

00:28:18.306 --> 00:28:19.626
But if I tap on the lady on the

00:28:19.626 --> 00:28:20.886
left, all of a sudden now she's

00:28:20.886 --> 00:28:21.426
in focus.

00:28:21.426 --> 00:28:22.756
The background is a little less

00:28:22.756 --> 00:28:23.176
blurry.

00:28:23.626 --> 00:28:24.496
And the gentleman on the right

00:28:24.496 --> 00:28:25.996
is still a little blurry.

00:28:25.996 --> 00:28:27.336
And I can tap on him now and

00:28:27.336 --> 00:28:28.336
change the focus rect once

00:28:28.336 --> 00:28:28.676
again.

00:28:29.366 --> 00:28:32.686
And now they're all three in

00:28:32.686 --> 00:28:33.716
focus and the background still

00:28:33.716 --> 00:28:34.246
remains blurry.

00:28:35.866 --> 00:28:37.056
Now that we're done with our

00:28:37.056 --> 00:28:38.656
demo, let's go and look at how

00:28:38.656 --> 00:28:38.976
this happens --

00:28:39.516 --> 00:28:42.216
[ Applause ]

00:28:42.716 --> 00:28:45.096
-- in terms of code.

00:28:50.696 --> 00:28:52.996
Okay. So as I was mentioning, at

00:28:52.996 --> 00:28:54.476
its base the CI Depth Blur

00:28:54.476 --> 00:28:55.706
Effect really just has two

00:28:55.706 --> 00:28:57.586
inputs: the input image and the

00:28:57.586 --> 00:28:58.796
input disparity image.

00:28:59.106 --> 00:29:00.376
And with those two, Core Image

00:29:00.376 --> 00:29:01.296
is going to extract a lot of

00:29:01.296 --> 00:29:04.186
metadata for you and apply the

00:29:04.186 --> 00:29:09.446
effect in order to render a new

00:29:09.606 --> 00:29:09.746
image.

00:29:12.056 --> 00:29:13.156
Internally, however, there are

00:29:13.156 --> 00:29:14.096
many parameters that you can

00:29:14.096 --> 00:29:15.086
set, as I was mentioning

00:29:15.086 --> 00:29:15.476
earlier.

00:29:16.066 --> 00:29:17.156
We already know that you can set

00:29:17.156 --> 00:29:18.056
the input image and the input

00:29:18.056 --> 00:29:18.916
disparity image.

00:29:19.266 --> 00:29:19.976
And in the case of the

00:29:19.976 --> 00:29:21.056
application that we were looking

00:29:21.056 --> 00:29:23.846
at earlier, when we were

00:29:23.846 --> 00:29:25.856
tapping, we were setting the

00:29:25.856 --> 00:29:26.856
input focus rect.

00:29:28.236 --> 00:29:31.536
And then as we were pinching, we

00:29:31.536 --> 00:29:32.466
were setting the aperture.

00:29:33.456 --> 00:29:35.076
So now that we have an idea of

00:29:35.076 --> 00:29:35.906
how we want to do this from a

00:29:35.906 --> 00:29:37.366
conceptual standpoint, let's

00:29:37.366 --> 00:29:38.896
take a look at how this will be

00:29:38.896 --> 00:29:39.946
done in terms of code.

00:29:41.356 --> 00:29:44.176
And this is effectively my only

00:29:44.176 --> 00:29:45.256
slide that has any code on it,

00:29:45.256 --> 00:29:46.286
so you can see how simple it is

00:29:46.286 --> 00:29:46.676
to use.

00:29:47.586 --> 00:29:49.766
As we saw earlier, you can load

00:29:49.766 --> 00:29:51.706
a CI Image via URL, quite

00:29:51.706 --> 00:29:51.966
simply.

00:29:51.966 --> 00:29:53.106
This gives us the main image.

00:29:53.106 --> 00:29:54.466
And then in order to get the

00:29:54.466 --> 00:29:56.036
disparity image, all you need to

00:29:56.036 --> 00:29:58.386
do is use that same URL and ask

00:29:58.966 --> 00:30:01.986
for the auxiliary disparity

00:30:01.986 --> 00:30:03.156
information via the Options

00:30:03.156 --> 00:30:04.796
dictionary as Etienne mentioned.

00:30:06.276 --> 00:30:08.926
Once we have our two images, we

00:30:08.926 --> 00:30:10.446
can create a filter.

00:30:10.886 --> 00:30:13.336
And we do that by name, CI Depth

00:30:13.336 --> 00:30:13.766
Blur Effect.

00:30:13.766 --> 00:30:14.796
And then we specify our two

00:30:14.796 --> 00:30:15.206
images.

00:30:15.646 --> 00:30:18.726
Once that's done, we can then

00:30:18.726 --> 00:30:21.286
ask for the output image via

00:30:21.286 --> 00:30:21.876
.outputImage.

00:30:21.876 --> 00:30:23.656
And we have a new CI Image that

00:30:23.656 --> 00:30:24.996
we can then render in any number

00:30:24.996 --> 00:30:25.406
of ways.

00:30:26.026 --> 00:30:27.246
And it's important to remember

00:30:27.246 --> 00:30:29.046
that a CI Image is really just a

00:30:29.046 --> 00:30:30.016
recipe for how to render.

00:30:30.016 --> 00:30:31.006
So this is actually a quite

00:30:31.006 --> 00:30:31.776
lightweight object.

00:30:34.366 --> 00:30:35.556
In the case of the application

00:30:35.556 --> 00:30:36.606
that we were looking at earlier,

00:30:37.476 --> 00:30:38.656
all we had to do in order to

00:30:38.656 --> 00:30:40.016
render a new effect with a new

00:30:40.016 --> 00:30:42.076
look was to change two values.

00:30:42.246 --> 00:30:43.886
So in this case, we changed the

00:30:43.886 --> 00:30:44.626
input aperture.

00:30:44.626 --> 00:30:45.876
And we do that by calling filter

00:30:45.876 --> 00:30:48.966
setValue forKey and specifying a

00:30:48.966 --> 00:30:51.206
float value between 1 and 22 to

00:30:51.206 --> 00:30:52.446
create a new simulated aperture.

00:30:53.376 --> 00:30:55.356
And we specified a new rectangle

00:30:55.556 --> 00:30:56.826
where we wanted to focus on via

00:30:57.116 --> 00:30:58.906
the input focus rec key, which

00:30:58.906 --> 00:31:00.826
corresponds to a lower left

00:31:01.256 --> 00:31:03.906
based rectangle in normalized

00:31:03.906 --> 00:31:04.436
coordinates.

00:31:06.216 --> 00:31:07.316
Once those two things are done,

00:31:07.436 --> 00:31:08.846
we can ask that filter for a new

00:31:08.846 --> 00:31:12.826
output image and then render as

00:31:12.826 --> 00:31:13.456
we wish.

00:31:14.976 --> 00:31:17.066
Now as I was mentioning, Core

00:31:17.066 --> 00:31:18.286
Image does a lot of things for

00:31:18.286 --> 00:31:20.096
you automatically by examining

00:31:20.096 --> 00:31:21.086
the metadata.

00:31:21.516 --> 00:31:22.506
There are, however, a few things

00:31:22.506 --> 00:31:25.006
you can do in order to further

00:31:25.006 --> 00:31:26.996
enhance the render that we don't

00:31:26.996 --> 00:31:28.026
do for you automatically.

00:31:28.906 --> 00:31:31.286
And those relate to finding

00:31:31.286 --> 00:31:32.146
facial landmarks.

00:31:33.236 --> 00:31:35.286
And you can use the new vision

00:31:35.286 --> 00:31:37.046
framework that we have in order

00:31:37.046 --> 00:31:37.526
to do this.

00:31:37.796 --> 00:31:39.226
So, via the vision framework you

00:31:39.226 --> 00:31:41.286
can get the left eye positions,

00:31:41.526 --> 00:31:43.846
right eye positions, nose

00:31:43.846 --> 00:31:45.646
positions and chin positions.

00:31:45.786 --> 00:31:48.526
And you can specify up to four

00:31:48.526 --> 00:31:50.696
faces to be used inside of the

00:31:50.696 --> 00:31:51.826
CI Depth Blur Effect.

00:31:52.726 --> 00:31:53.806
In the case of this image,

00:31:54.086 --> 00:31:55.306
because there are three faces,

00:31:55.776 --> 00:31:57.806
we would actually specify six

00:31:58.046 --> 00:32:00.456
floating point values into a CI

00:32:00.456 --> 00:32:02.166
vector and set that for each

00:32:02.166 --> 00:32:03.206
landmark that we found.

00:32:04.396 --> 00:32:05.836
And there are [inaudible], so it

00:32:05.836 --> 00:32:09.106
would be xy, xy, xy.

00:32:12.216 --> 00:32:13.436
The next thing I'd like to talk

00:32:13.436 --> 00:32:14.536
to you a little bit about is

00:32:14.626 --> 00:32:17.646
dealing with rendering outputs

00:32:17.646 --> 00:32:20.576
of different sizes.

00:32:21.766 --> 00:32:23.606
Although the inputs are quite

00:32:23.606 --> 00:32:25.576
large, 12 megapixels, chances

00:32:25.576 --> 00:32:26.876
are you won't often be rendering

00:32:26.876 --> 00:32:27.656
the entire image.

00:32:27.926 --> 00:32:29.106
And you may want to down sample

00:32:29.106 --> 00:32:29.546
the output.

00:32:30.546 --> 00:32:32.266
Your initial reflex may be to

00:32:32.266 --> 00:32:34.306
just down sample it, the result

00:32:34.306 --> 00:32:35.716
of the CI Depth Blur Effect.

00:32:35.716 --> 00:32:37.186
But that's actually not very

00:32:37.186 --> 00:32:38.386
efficient because the CI Depth

00:32:38.386 --> 00:32:39.396
Blur Effect is actually quite

00:32:39.396 --> 00:32:40.466
computationally expensive.

00:32:40.466 --> 00:32:43.356
It makes more sense to, instead,

00:32:43.356 --> 00:32:44.646
down sample the input.

00:32:44.866 --> 00:32:47.736
And if you do this, we can then

00:32:48.106 --> 00:32:49.186
take advantage of the fact that

00:32:49.186 --> 00:32:50.986
the input image is smaller and

00:32:50.986 --> 00:32:52.126
perform some optimizations.

00:32:53.406 --> 00:32:54.346
In order to do this, however,

00:32:54.346 --> 00:32:55.416
you do have to set one more

00:32:55.416 --> 00:32:56.806
parameter, which is called the

00:32:56.806 --> 00:32:57.876
Input Scale Factor.

00:32:58.756 --> 00:33:00.406
So in this case if we wanted to

00:33:00.406 --> 00:33:02.066
down sample the image by 2, we

00:33:02.066 --> 00:33:03.366
would set the input scale factor

00:33:03.366 --> 00:33:04.166
to 0.5.

00:33:04.526 --> 00:33:06.306
And doing so ensures that we

00:33:06.686 --> 00:33:07.816
sample appropriately from the

00:33:07.816 --> 00:33:09.136
image and also take into account

00:33:09.136 --> 00:33:10.886
other effects such as the noise

00:33:10.886 --> 00:33:11.296
in the image.

00:33:13.846 --> 00:33:16.116
There are a few additional

00:33:16.116 --> 00:33:17.286
things that I'd like to mention

00:33:17.776 --> 00:33:19.136
about using the CI Depth Blue

00:33:19.136 --> 00:33:20.036
Effect which are important to

00:33:20.036 --> 00:33:20.576
keep in mind.

00:33:21.496 --> 00:33:23.756
The first and foremost is that

00:33:23.756 --> 00:33:25.526
when you create your CI context

00:33:26.306 --> 00:33:27.356
where you'll be using these

00:33:27.356 --> 00:33:28.786
filters, you're going to want to

00:33:28.786 --> 00:33:30.086
make sure that you're using half

00:33:30.086 --> 00:33:31.016
float intermediates.

00:33:31.326 --> 00:33:32.256
And you can do this by

00:33:32.256 --> 00:33:34.006
specifying the kCI Context

00:33:34.006 --> 00:33:36.926
Working Format to be RWAH.

00:33:38.286 --> 00:33:39.756
On MacOS this is the default.

00:33:39.756 --> 00:33:41.736
But on iOS, by default we use

00:33:41.736 --> 00:33:42.096
8-bit.

00:33:42.096 --> 00:33:43.596
And if you don't, you will see

00:33:43.596 --> 00:33:45.206
that the data will be clipped

00:33:45.206 --> 00:33:47.166
because disparity data comes in

00:33:47.166 --> 00:33:47.936
extended range.

00:33:48.326 --> 00:33:49.776
And without specifying this, it

00:33:49.776 --> 00:33:50.786
will get clipped and the result

00:33:50.786 --> 00:33:51.626
won't look very good.

00:33:51.626 --> 00:33:52.646
So it's really important to

00:33:52.646 --> 00:33:53.766
remember to keep doing this when

00:33:53.766 --> 00:33:54.756
you use this filter.

00:33:57.466 --> 00:33:59.956
Also as I mentioned earlier, the

00:34:00.186 --> 00:34:02.506
CI Depth Blur Effect will

00:34:02.506 --> 00:34:03.946
automatically set many

00:34:03.946 --> 00:34:05.546
properties for you on the

00:34:05.546 --> 00:34:05.926
filter.

00:34:05.926 --> 00:34:07.986
In order to do so, it will

00:34:07.986 --> 00:34:09.186
examine the metadata from the

00:34:09.186 --> 00:34:13.406
main image as well the data that

00:34:13.406 --> 00:34:16.315
exists inside of the auxiliary

00:34:16.315 --> 00:34:16.576
image.

00:34:16.735 --> 00:34:18.156
And so it's important to try to

00:34:18.476 --> 00:34:19.565
preserve that throughout your

00:34:19.565 --> 00:34:20.085
pipeline.

00:34:20.446 --> 00:34:22.216
Core Image will do its best in

00:34:22.216 --> 00:34:23.056
order to ensure that this

00:34:23.056 --> 00:34:23.485
happens.

00:34:23.846 --> 00:34:24.626
But it's something you're going

00:34:24.626 --> 00:34:25.456
to want to keep in mind as

00:34:25.456 --> 00:34:26.275
you're using this filter.

00:34:26.326 --> 00:34:27.636
And Etienne's going to talk to

00:34:27.636 --> 00:34:28.656
you a little bit later about how

00:34:28.656 --> 00:34:29.966
to ensure that you do this when

00:34:29.966 --> 00:34:30.795
you save images.

00:34:31.525 --> 00:34:31.746
All right.

00:34:33.335 --> 00:34:36.306
Well, the last thing I'd like to

00:34:36.306 --> 00:34:37.896
talk to you about today has to

00:34:37.896 --> 00:34:40.576
do with some internals of the CI

00:34:40.576 --> 00:34:41.266
Depth Blur Effect.

00:34:42.456 --> 00:34:43.596
It's been mentioned many times

00:34:43.596 --> 00:34:46.286
so far already today, the main

00:34:46.286 --> 00:34:47.426
image and the disparity image

00:34:47.426 --> 00:34:49.235
are of very different

00:34:49.235 --> 00:34:49.806
resolutions.

00:34:49.806 --> 00:34:52.806
And now internally, Core Image

00:34:52.806 --> 00:34:54.356
is going to up sample the

00:34:54.356 --> 00:34:56.156
disparity image up to a certain

00:34:56.156 --> 00:34:58.216
point in order to achieve the

00:34:58.216 --> 00:34:58.906
final result.

00:35:00.116 --> 00:35:02.006
And this is an area where we

00:35:02.006 --> 00:35:03.036
feel like if you have additional

00:35:03.036 --> 00:35:04.366
processing time you could

00:35:04.366 --> 00:35:05.866
perhaps do something a little

00:35:05.866 --> 00:35:06.246
different.

00:35:06.826 --> 00:35:08.046
Maybe some of the methods that

00:35:08.196 --> 00:35:09.366
Etienne spoke of earlier.

00:35:10.936 --> 00:35:12.836
And that concludes pretty much

00:35:12.836 --> 00:35:13.736
everything I wanted to tell you

00:35:13.736 --> 00:35:15.106
about using the CI Depth Blur

00:35:15.106 --> 00:35:15.406
Effect.

00:35:15.726 --> 00:35:16.996
And I hope you all go and start

00:35:16.996 --> 00:35:18.146
adding it to your apps.

00:35:18.466 --> 00:35:19.546
And on that, I'm going to hand

00:35:19.546 --> 00:35:20.406
it back over to Etienne.

00:35:20.406 --> 00:35:21.126
Thank you very much.

00:35:22.016 --> 00:35:23.626
[ Applause ]

00:35:23.626 --> 00:35:24.186
>> Thank you, Alex.

00:35:26.536 --> 00:35:27.526
All right.

00:35:27.856 --> 00:35:28.976
So, so far we've seen

00:35:28.976 --> 00:35:30.576
interesting cool new effects

00:35:30.576 --> 00:35:32.026
that you can do using depth

00:35:32.026 --> 00:35:32.166
data.

00:35:32.316 --> 00:35:34.606
But the depth data was really

00:35:34.606 --> 00:35:36.716
used as a mask to apply

00:35:36.716 --> 00:35:38.426
different effects to different

00:35:38.426 --> 00:35:39.646
part of the image.

00:35:40.356 --> 00:35:42.106
And so now we want to show you

00:35:42.106 --> 00:35:42.846
something different.

00:35:44.366 --> 00:35:45.676
Something that actually uses

00:35:45.676 --> 00:35:47.296
depth as a third dimension.

00:35:48.376 --> 00:35:49.766
And this will give you a taste

00:35:49.766 --> 00:35:51.006
of what kind of new creative

00:35:51.006 --> 00:35:52.246
effects you could apply using

00:35:52.246 --> 00:35:52.916
this data.

00:35:53.956 --> 00:35:55.656
And to tell you all about it,

00:35:55.656 --> 00:35:57.036
I'm going to invite Stephen back

00:35:57.036 --> 00:35:57.466
on stage.

00:35:57.926 --> 00:35:58.776
Stephen.

00:36:00.516 --> 00:36:02.956
[ Applause ]

00:36:03.456 --> 00:36:04.176
>> Thank you, Etienne.

00:36:05.196 --> 00:36:06.346
It's good to be back with you.

00:36:06.346 --> 00:36:07.826
What I'm going to show you now

00:36:09.426 --> 00:36:11.026
is a true 3-D effect.

00:36:12.946 --> 00:36:14.276
And this particular effect that

00:36:14.276 --> 00:36:15.266
we're going to show you is

00:36:15.266 --> 00:36:16.116
called dolly zoom.

00:36:16.406 --> 00:36:17.436
Many of you are probably already

00:36:17.436 --> 00:36:18.856
familiar with what dolly zoom

00:36:18.856 --> 00:36:20.076
is, especially if you've ever

00:36:20.076 --> 00:36:20.956
seen a scary movie.

00:36:21.536 --> 00:36:23.886
But to get everybody up to speed

00:36:23.886 --> 00:36:24.766
a little bit, I'm going to show

00:36:24.766 --> 00:36:26.386
you a little animation of what's

00:36:26.386 --> 00:36:27.466
going on with dolly zoom.

00:36:28.136 --> 00:36:29.226
So what you're looking at here

00:36:30.476 --> 00:36:32.116
is a scene consisting of three

00:36:32.116 --> 00:36:32.696
spheres.

00:36:33.716 --> 00:36:35.446
While the camera is dollying

00:36:35.606 --> 00:36:37.686
back and forth, it's also doing

00:36:37.686 --> 00:36:39.596
it so in such a way that the

00:36:39.596 --> 00:36:40.716
field of view is also

00:36:40.976 --> 00:36:43.016
simultaneously constrained so

00:36:43.016 --> 00:36:44.696
that the gray sphere in the

00:36:44.696 --> 00:36:46.686
center on the focal plane

00:36:47.316 --> 00:36:49.776
remains at roughly the same size

00:36:49.986 --> 00:36:51.016
throughout the effect in the

00:36:51.016 --> 00:36:52.626
output image, which you see on

00:36:52.626 --> 00:36:52.896
the right.

00:36:53.286 --> 00:36:54.286
Everything else in the scene

00:36:54.286 --> 00:36:56.106
will move around due to

00:36:56.106 --> 00:36:57.046
perspective effects.

00:36:58.786 --> 00:36:59.706
So let's take a look.

00:37:00.886 --> 00:37:02.016
Let's switch over here to the

00:37:02.016 --> 00:37:02.576
device.

00:37:03.556 --> 00:37:06.356
Perfect. All right.

00:37:09.176 --> 00:37:10.876
Let me pull up the dolly zoom

00:37:10.876 --> 00:37:11.896
editing extension.

00:37:14.406 --> 00:37:15.816
And I'll draw your attention now

00:37:15.816 --> 00:37:17.676
to the group of flowers in the

00:37:17.676 --> 00:37:18.666
center of the image.

00:37:18.766 --> 00:37:20.566
Those are on the focal plane.

00:37:21.506 --> 00:37:23.686
So as I begin to move the

00:37:24.416 --> 00:37:27.236
camera, there you see the dolly

00:37:27.236 --> 00:37:29.296
zoom effect in its full glory.

00:37:30.206 --> 00:37:31.676
When I pull the camera in this

00:37:31.676 --> 00:37:32.946
direction in particular you can

00:37:32.946 --> 00:37:34.456
really see the true 3-D nature

00:37:34.456 --> 00:37:36.306
of this effect with the

00:37:36.396 --> 00:37:37.606
foreground flowers really

00:37:37.936 --> 00:37:39.456
popping out and the background

00:37:39.456 --> 00:37:41.456
sort of fading or pulling away

00:37:41.456 --> 00:37:41.996
from the camera.

00:37:42.956 --> 00:37:44.156
You do also see a couple of

00:37:44.156 --> 00:37:45.296
artifacts, of course.

00:37:45.676 --> 00:37:47.516
One of which are the black

00:37:47.516 --> 00:37:49.286
pixels that you see coming into

00:37:49.286 --> 00:37:50.556
view around the background.

00:37:51.316 --> 00:37:53.106
This is due to the fact that in

00:37:53.106 --> 00:37:54.046
the camera's current

00:37:54.116 --> 00:37:55.376
configuration, the virtual

00:37:55.376 --> 00:37:57.346
camera, its field of view is

00:37:57.346 --> 00:38:00.096
wider than the iPhone that

00:38:00.096 --> 00:38:00.876
captured the image.

00:38:01.926 --> 00:38:03.996
And so the virtual camera sees

00:38:03.996 --> 00:38:05.356
more of the scene than the

00:38:05.506 --> 00:38:06.616
iPhone did at the time of

00:38:06.616 --> 00:38:07.116
capture.

00:38:07.656 --> 00:38:08.866
So we're just filling those

00:38:08.866 --> 00:38:09.866
pixels in with black.

00:38:10.886 --> 00:38:12.936
Similarly, the stretching you

00:38:12.936 --> 00:38:14.286
see in between the foreground

00:38:14.286 --> 00:38:15.796
flowers and the green leaves

00:38:15.796 --> 00:38:17.046
behind them is due to the fact

00:38:17.046 --> 00:38:18.216
that this camera, the virtual

00:38:18.216 --> 00:38:19.146
camera, has exposed some

00:38:19.146 --> 00:38:20.416
portions of the scene that

00:38:20.416 --> 00:38:22.376
weren't visible to the iPhone at

00:38:22.526 --> 00:38:24.406
the time of capture.

00:38:24.406 --> 00:38:26.256
One strategy you might take to

00:38:26.256 --> 00:38:27.926
work around some of these issues

00:38:28.676 --> 00:38:30.576
is to set a new focal plane.

00:38:31.256 --> 00:38:33.376
So, now I've tapped on the

00:38:33.376 --> 00:38:35.016
yellow flower in the foreground,

00:38:35.016 --> 00:38:35.986
which is in the bottom right

00:38:35.986 --> 00:38:38.086
corner of the image to set that

00:38:38.316 --> 00:38:39.356
as the focal plane.

00:38:39.846 --> 00:38:41.266
And as I move the camera now in

00:38:41.266 --> 00:38:42.636
this direction you can see that

00:38:43.176 --> 00:38:44.806
none of the black pixels are

00:38:44.806 --> 00:38:45.546
coming into view.

00:38:45.876 --> 00:38:47.486
Of course if I move the camera

00:38:47.486 --> 00:38:49.406
again in this direction, they

00:38:49.406 --> 00:38:50.076
show up again.

00:38:50.586 --> 00:38:51.946
And really, that 3-D effect is

00:38:51.946 --> 00:38:54.646
quite strong here.

00:38:55.266 --> 00:38:57.426
Correspondingly, I can tap on a

00:38:57.426 --> 00:38:58.496
background region of the image,

00:38:58.496 --> 00:39:00.026
such as the trees you see in the

00:39:00.026 --> 00:39:00.776
upper left corner.

00:39:01.746 --> 00:39:03.646
And when I pull the camera now

00:39:03.646 --> 00:39:06.506
in this direction, it really

00:39:07.566 --> 00:39:09.056
produces a pleasing sort of

00:39:09.056 --> 00:39:11.066
prominent effect on that central

00:39:11.106 --> 00:39:11.956
group of flowers.

00:39:12.746 --> 00:39:14.246
So let's take a look now at how

00:39:14.436 --> 00:39:15.046
we implemented this.

00:39:15.046 --> 00:39:16.396
Because of the true 3-D nature

00:39:16.396 --> 00:39:19.166
of this problem, we turned to

00:39:19.166 --> 00:39:22.046
Metal as a true 3-D tool to

00:39:22.656 --> 00:39:24.546
solve this effect, to produce

00:39:24.546 --> 00:39:24.996
the effect.

00:39:25.436 --> 00:39:27.216
We were able to get our system

00:39:27.216 --> 00:39:28.636
up and running quite quickly in

00:39:28.636 --> 00:39:30.116
Metal because of all the work

00:39:30.116 --> 00:39:31.816
that it does for us.

00:39:32.106 --> 00:39:34.876
Basically all we had to do to

00:39:34.876 --> 00:39:36.686
start off with was to construct

00:39:36.686 --> 00:39:38.526
a triangular mesh that we mapped

00:39:38.646 --> 00:39:40.696
onto the image, much like what

00:39:40.696 --> 00:39:42.136
you saw in Craig's Depth

00:39:42.136 --> 00:39:43.926
Explorer demo at the beginning

00:39:43.926 --> 00:39:44.496
of the session.

00:39:45.156 --> 00:39:47.496
And we mapped the -- excuse me

00:39:47.496 --> 00:39:49.036
-- we mapped the image -- we

00:39:49.036 --> 00:39:50.126
center the image around the

00:39:50.126 --> 00:39:50.576
origin.

00:39:52.396 --> 00:39:54.106
Metal also gives us the

00:39:54.106 --> 00:39:55.686
opportunity to program a couple

00:39:55.686 --> 00:39:57.446
of stages of its pipeline, one

00:39:57.446 --> 00:39:58.776
of which is the vertex shader.

00:39:59.166 --> 00:40:00.156
And the job of the vertex

00:40:00.156 --> 00:40:01.726
shader, it gives us the

00:40:01.726 --> 00:40:03.056
opportunity to process the

00:40:03.056 --> 00:40:04.626
geometry of the scene in some

00:40:04.626 --> 00:40:04.846
way.

00:40:06.326 --> 00:40:07.786
And we can also program the

00:40:07.786 --> 00:40:09.456
fragment shader, which gives us

00:40:09.456 --> 00:40:11.226
the opportunity to produce a

00:40:11.536 --> 00:40:13.246
color for each pixel in the

00:40:13.246 --> 00:40:13.656
output.

00:40:14.636 --> 00:40:17.106
We were able to reintegrate all

00:40:17.106 --> 00:40:18.746
of this 3-D Metal rendering back

00:40:18.746 --> 00:40:20.556
into our Core Image pipeline by

00:40:20.556 --> 00:40:22.176
using a CI Image Processor

00:40:22.176 --> 00:40:22.586
Kernel.

00:40:23.796 --> 00:40:26.866
So here's the code for the

00:40:26.866 --> 00:40:27.606
vertex shader.

00:40:30.166 --> 00:40:31.436
Again, the job of the vertex

00:40:31.436 --> 00:40:32.446
shader is to process the

00:40:32.446 --> 00:40:33.146
geometry.

00:40:33.236 --> 00:40:34.576
And it does so one vertex at a

00:40:34.576 --> 00:40:34.956
time.

00:40:35.336 --> 00:40:36.836
So we get one vertex of the

00:40:36.836 --> 00:40:38.116
original mesh as input.

00:40:38.866 --> 00:40:39.956
And then we'll produce something

00:40:39.956 --> 00:40:40.756
new on the output.

00:40:41.076 --> 00:40:42.546
The first thing we do in the

00:40:42.546 --> 00:40:45.166
vertex shader is sample the

00:40:45.166 --> 00:40:46.936
depth at that vertex.

00:40:47.756 --> 00:40:48.906
That's this line you see here.

00:40:48.906 --> 00:40:50.296
We're storing it in a variable

00:40:50.296 --> 00:40:51.846
called z, which will get used in

00:40:51.846 --> 00:40:52.856
a couple of places in this

00:40:52.856 --> 00:40:53.206
shader.

00:40:54.246 --> 00:40:56.286
The first of which is this

00:40:56.286 --> 00:40:57.526
magical line right here.

00:40:57.946 --> 00:40:59.586
This line is the line that every

00:40:59.586 --> 00:41:01.136
young engineer grows up dreaming

00:41:01.136 --> 00:41:02.156
that they'll write some day.

00:41:02.296 --> 00:41:03.796
Because this is where we do the

00:41:03.796 --> 00:41:03.926
math.

00:41:05.576 --> 00:41:07.136
There are three variables as

00:41:07.136 --> 00:41:09.796
input to this equation.

00:41:10.776 --> 00:41:12.066
One is the depth, which we just

00:41:12.066 --> 00:41:12.746
sampled above.

00:41:13.136 --> 00:41:14.416
And the others correspond to the

00:41:14.416 --> 00:41:17.146
user inputs of the focal plane

00:41:17.146 --> 00:41:18.696
and the camera's configuration.

00:41:20.386 --> 00:41:22.816
This produces a scale factor,

00:41:23.076 --> 00:41:24.896
which we can apply to our

00:41:25.616 --> 00:41:28.466
vertices, which we do on this

00:41:28.466 --> 00:41:29.106
line right here.

00:41:29.106 --> 00:41:31.236
And we can apply a scale factor

00:41:31.236 --> 00:41:33.466
to it because the vertices are

00:41:33.466 --> 00:41:35.446
centered around the origin.

00:41:35.976 --> 00:41:37.976
So this scale factor serves to

00:41:38.286 --> 00:41:40.376
move vertices either radially

00:41:40.376 --> 00:41:41.766
away from the center or toward

00:41:41.766 --> 00:41:42.676
the center of the image.

00:41:43.346 --> 00:41:44.736
And this is what produces the

00:41:44.736 --> 00:41:46.516
illusion of three dimensions.

00:41:47.526 --> 00:41:49.316
Once we have transformed our

00:41:49.316 --> 00:41:51.206
vertex position, we output it

00:41:51.206 --> 00:41:52.826
here in the new output vertex

00:41:53.446 --> 00:41:54.586
while preserving the original

00:41:54.586 --> 00:41:55.916
depth value, z.

00:41:56.306 --> 00:41:57.846
And this is important because it

00:41:57.846 --> 00:41:59.316
will get passed into the z

00:41:59.316 --> 00:42:01.016
buffer machinery of Metal, which

00:42:01.016 --> 00:42:02.146
will then just do the right

00:42:02.146 --> 00:42:03.596
thing for us as pixels move

00:42:03.596 --> 00:42:04.756
around in the output and start

00:42:04.756 --> 00:42:05.686
to overlap each other.

00:42:07.846 --> 00:42:09.726
Also, we output the texture

00:42:09.726 --> 00:42:10.886
coordinate of the original

00:42:10.886 --> 00:42:11.426
vertex.

00:42:12.206 --> 00:42:13.046
This will get used by the

00:42:13.046 --> 00:42:14.976
fragment shader, which I'll show

00:42:14.976 --> 00:42:16.556
you now.

00:42:17.886 --> 00:42:18.936
Remember, the fragment shader's

00:42:18.936 --> 00:42:21.516
job is to produce a color pixel

00:42:21.516 --> 00:42:21.946
output.

00:42:24.386 --> 00:42:26.566
And since Metal interpolates all

00:42:26.566 --> 00:42:28.476
of these texture coordinates for

00:42:28.476 --> 00:42:30.316
us, all we have to do in our

00:42:30.316 --> 00:42:32.206
fragment shader is to sample the

00:42:32.206 --> 00:42:33.586
original image at the

00:42:33.586 --> 00:42:34.846
interpolated texture coordinate.

00:42:35.456 --> 00:42:36.346
And that's it.

00:42:36.346 --> 00:42:37.516
That's really all the code you

00:42:37.516 --> 00:42:39.476
need to see to implement the

00:42:39.476 --> 00:42:40.336
dolly zoom effect.

00:42:40.646 --> 00:42:41.796
And hopefully it's given you

00:42:41.796 --> 00:42:44.296
some ideas of new directions you

00:42:44.296 --> 00:42:45.916
can take this in to produce your

00:42:45.916 --> 00:42:47.586
own brand new custom 3-D

00:42:47.586 --> 00:42:48.086
effects.

00:42:48.446 --> 00:42:49.696
We're really excited to see what

00:42:49.696 --> 00:42:50.236
you come up with.

00:42:51.016 --> 00:42:53.486
And now, I'll hand the stage

00:42:53.486 --> 00:42:55.976
back over to Etienne to finish

00:42:55.976 --> 00:42:56.116
up.

00:42:57.516 --> 00:43:01.426
[ Applause ]

00:43:01.926 --> 00:43:02.776
>> Thank you, Stephen.

00:43:03.766 --> 00:43:04.506
All right.

00:43:05.086 --> 00:43:06.666
So now that we've applied

00:43:06.666 --> 00:43:08.396
various new effects to our

00:43:08.396 --> 00:43:10.346
images, there's one more step

00:43:10.346 --> 00:43:11.056
that we need to take.

00:43:11.636 --> 00:43:16.346
And that's save your depth data.

00:43:16.446 --> 00:43:18.576
So, you should always preserve

00:43:18.576 --> 00:43:19.456
the depth data.

00:43:19.456 --> 00:43:20.756
All right?

00:43:20.986 --> 00:43:23.196
That way your users will be able

00:43:23.196 --> 00:43:25.126
to use other apps like yours to

00:43:25.126 --> 00:43:26.686
apply their own depth effects on

00:43:26.686 --> 00:43:27.456
top of yours.

00:43:28.636 --> 00:43:29.966
Even if you don't use the depth

00:43:29.966 --> 00:43:31.736
data, you should always preserve

00:43:31.736 --> 00:43:33.116
it if it was present in your

00:43:33.116 --> 00:43:33.926
original image.

00:43:35.696 --> 00:43:37.256
This will really ensure the best

00:43:37.256 --> 00:43:38.546
possible experience for your

00:43:38.546 --> 00:43:39.046
users.

00:43:39.736 --> 00:43:41.546
However, when you store the

00:43:41.546 --> 00:43:43.406
depth data, be sure to match the

00:43:43.406 --> 00:43:45.466
geometry of image data.

00:43:46.666 --> 00:43:47.916
If you don't apply geometry

00:43:47.916 --> 00:43:50.086
correctly, the depth data will

00:43:50.086 --> 00:43:51.496
no longer match the image data.

00:43:51.866 --> 00:43:53.486
And so further depth effect

00:43:53.486 --> 00:43:55.056
applied on top of that will no

00:43:55.056 --> 00:43:55.896
longer work properly.

00:43:56.756 --> 00:43:59.046
So let's take a look at how the

00:43:59.046 --> 00:44:00.286
kind of geometry transforming

00:44:00.286 --> 00:44:02.386
might apply to depth data.

00:44:03.656 --> 00:44:06.426
A very common operation is

00:44:06.426 --> 00:44:07.016
orientation.

00:44:07.556 --> 00:44:09.206
Often times you get to work with

00:44:09.206 --> 00:44:10.436
a portrait image that was

00:44:10.436 --> 00:44:11.976
actually shot in landscape and

00:44:11.976 --> 00:44:13.576
has an [inaudible] orientation.

00:44:14.996 --> 00:44:16.816
So, the depth data may look like

00:44:16.816 --> 00:44:17.156
this.

00:44:17.476 --> 00:44:19.606
And so you want to make sure to

00:44:19.606 --> 00:44:21.136
orient the depth as well.

00:44:21.466 --> 00:44:22.346
So make sure to apply

00:44:22.346 --> 00:44:22.946
orientation.

00:44:23.956 --> 00:44:26.136
Another very common operation is

00:44:26.136 --> 00:44:26.476
crop.

00:44:27.036 --> 00:44:29.306
Right? And so again, make sure

00:44:29.306 --> 00:44:31.436
you crop the depth data to

00:44:31.436 --> 00:44:31.896
match.

00:44:33.546 --> 00:44:34.936
Now, you may have a more

00:44:34.936 --> 00:44:36.246
advanced transform that you also

00:44:36.246 --> 00:44:38.076
apply to your image such as

00:44:38.266 --> 00:44:39.536
[inaudible] transform like this

00:44:39.536 --> 00:44:39.666
one.

00:44:40.826 --> 00:44:42.086
Right? Or maybe you have a

00:44:42.086 --> 00:44:43.306
custom [inaudible] transform

00:44:43.516 --> 00:44:45.276
such as a perspective transform.

00:44:45.526 --> 00:44:47.196
Or maybe even a 3-D transform

00:44:47.196 --> 00:44:48.786
like the one we saw in the dolly

00:44:48.786 --> 00:44:49.256
zoom demo.

00:44:50.926 --> 00:44:52.566
In any case, you want to also

00:44:52.566 --> 00:44:53.926
apply the same transform to the

00:44:53.926 --> 00:44:55.486
depth data so that it matches

00:44:55.486 --> 00:44:56.476
the image perfectly.

00:44:59.556 --> 00:45:01.486
Okay. So the key thing to

00:45:01.486 --> 00:45:03.156
remember here is to apply your

00:45:03.156 --> 00:45:04.506
transform at the native

00:45:04.506 --> 00:45:06.096
resolution of the depth data.

00:45:06.966 --> 00:45:08.576
So you want to scale your

00:45:08.576 --> 00:45:09.746
transform parameter from the

00:45:09.746 --> 00:45:12.286
full size image to that size of

00:45:12.326 --> 00:45:16.566
the depth image.

00:45:17.116 --> 00:45:19.526
Otherwise, right, your transform

00:45:19.566 --> 00:45:20.836
will be applied incorrectly.

00:45:20.836 --> 00:45:22.366
And then the depth image will no

00:45:22.366 --> 00:45:25.076
longer match the image, the

00:45:25.076 --> 00:45:25.706
output image.

00:45:27.266 --> 00:45:28.556
Another thing to note is that

00:45:28.776 --> 00:45:30.216
depth data is not color data.

00:45:30.216 --> 00:45:31.756
So when you are rending a new

00:45:31.756 --> 00:45:33.576
depth image, make sure you don't

00:45:33.896 --> 00:45:35.126
apply any kind of color match

00:45:35.126 --> 00:45:38.296
into it.

00:45:38.296 --> 00:45:38.546
All right.

00:45:39.816 --> 00:45:41.456
So now that we've seen what kind

00:45:41.456 --> 00:45:43.116
of transform we may apply to

00:45:43.116 --> 00:45:45.286
depth data we can render it into

00:45:45.286 --> 00:45:46.496
a new CV pixel buffer.

00:45:47.336 --> 00:45:48.856
Once we have a new CV pixel

00:45:48.856 --> 00:45:50.966
buffer we can create a new AV

00:45:50.966 --> 00:45:52.056
depth data object from it.

00:45:52.326 --> 00:45:52.776
Here's how.

00:45:53.466 --> 00:45:54.856
We start from our original depth

00:45:54.856 --> 00:45:56.696
data object and then we call

00:45:56.696 --> 00:45:58.266
Depth Data by replacing Depth

00:45:58.266 --> 00:45:58.726
Data Map.

00:45:59.046 --> 00:46:00.166
And we pass in all newly

00:46:00.166 --> 00:46:01.306
rendered depth buffer.

00:46:02.346 --> 00:46:04.836
Now returns a new AV depth data

00:46:04.836 --> 00:46:05.356
object.

00:46:05.356 --> 00:46:07.096
And we can then save into our

00:46:07.176 --> 00:46:08.376
output image.

00:46:09.256 --> 00:46:10.326
Let's a take a look at how to

00:46:10.326 --> 00:46:12.186
write depth data using Image IO.

00:46:14.176 --> 00:46:16.676
We start from an image

00:46:16.676 --> 00:46:18.356
destination that we create for

00:46:18.356 --> 00:46:19.076
our output file.

00:46:20.776 --> 00:46:22.116
And here we ask for a JPEG

00:46:22.116 --> 00:46:22.596
format.

00:46:22.906 --> 00:46:24.306
So please note that not all

00:46:24.306 --> 00:46:25.396
image from that [inaudible]

00:46:25.396 --> 00:46:27.196
depth, but JPEG does.

00:46:28.496 --> 00:46:30.196
Next we add our output image to

00:46:30.196 --> 00:46:31.226
the image destination.

00:46:33.756 --> 00:46:35.526
And then we ask all depth data

00:46:35.526 --> 00:46:36.756
object that we want to store

00:46:36.756 --> 00:46:38.856
into the image for a dictionary

00:46:38.856 --> 00:46:40.336
representation for the auxiliary

00:46:40.336 --> 00:46:41.606
data to store in the file.

00:46:42.376 --> 00:46:43.286
So this is will return the

00:46:43.286 --> 00:46:44.966
dictionary for the auxiliary

00:46:44.966 --> 00:46:46.816
data as well as by reference the

00:46:46.816 --> 00:46:48.266
type of the auxiliary data to

00:46:48.266 --> 00:46:48.636
store.

00:46:49.906 --> 00:46:51.786
Then we ask the CG image

00:46:51.786 --> 00:46:52.866
destination to add that

00:46:52.866 --> 00:46:54.546
auxiliary data, passing in the

00:46:54.546 --> 00:46:55.756
type and the dictionary.

00:46:56.866 --> 00:46:58.436
And finally, all we have to do

00:46:58.436 --> 00:46:59.886
is to call CG image destination

00:46:59.886 --> 00:47:01.206
finalized to write everything

00:47:01.206 --> 00:47:01.786
down to disk.

00:47:03.676 --> 00:47:04.896
If you're working with Core

00:47:04.896 --> 00:47:07.116
Image, there's a new very

00:47:07.116 --> 00:47:09.256
convenient way you can do this

00:47:10.086 --> 00:47:10.576
as well.

00:47:10.826 --> 00:47:13.096
So, if you are using CI context

00:47:13.096 --> 00:47:14.316
[inaudible] with image

00:47:14.436 --> 00:47:16.936
representation for a particular

00:47:16.936 --> 00:47:18.996
CI image directly in order to

00:47:18.996 --> 00:47:20.996
render and save to a JPEG file,

00:47:21.566 --> 00:47:24.746
you may now pass in using an

00:47:24.746 --> 00:47:26.806
option key a depth data object

00:47:26.806 --> 00:47:28.116
that you want to store as part

00:47:28.116 --> 00:47:28.646
of that file.

00:47:30.626 --> 00:47:33.566
Even better, if you have an

00:47:33.566 --> 00:47:35.926
image, a depth image that you

00:47:35.926 --> 00:47:36.796
have -- let's say you have

00:47:36.796 --> 00:47:37.926
applied a transform to it or

00:47:37.926 --> 00:47:38.336
something.

00:47:38.826 --> 00:47:42.516
You can also specify it as an

00:47:42.516 --> 00:47:44.926
option to that method so that

00:47:45.836 --> 00:47:47.526
Core Image will render both the

00:47:47.526 --> 00:47:48.926
regular image and the depth

00:47:48.926 --> 00:47:50.636
image and save everything down

00:47:51.156 --> 00:47:52.966
to the file in one call.

00:47:53.296 --> 00:47:54.036
Very convenient.

00:47:55.566 --> 00:47:56.106
And so that's it.

00:47:56.106 --> 00:47:57.636
That concludes our session on

00:47:57.786 --> 00:47:59.116
editing images with depth.

00:48:00.106 --> 00:48:01.156
So, let's recap what we've

00:48:01.156 --> 00:48:01.656
learned today.

00:48:03.116 --> 00:48:05.216
We've learned what depth is and

00:48:05.216 --> 00:48:06.496
what depth and disparity looks

00:48:06.496 --> 00:48:06.766
like.

00:48:09.086 --> 00:48:10.686
We've learned how to read and

00:48:10.686 --> 00:48:12.236
prepare depth data for editing.

00:48:13.096 --> 00:48:16.366
And then we saw several ways,

00:48:16.366 --> 00:48:17.426
and we showed you several ways

00:48:17.426 --> 00:48:19.546
to apply new depth effects to

00:48:19.546 --> 00:48:20.206
your images.

00:48:20.556 --> 00:48:21.786
The first one was background

00:48:21.786 --> 00:48:23.946
effects using a built in Core

00:48:23.946 --> 00:48:24.626
Image filter.

00:48:25.286 --> 00:48:26.706
Then we had a custom darkness

00:48:26.706 --> 00:48:28.626
effect using a custom Core Image

00:48:28.626 --> 00:48:29.006
kernel.

00:48:29.956 --> 00:48:31.226
And then we showed you how you

00:48:31.226 --> 00:48:33.186
can apply your depth effect

00:48:33.486 --> 00:48:35.356
using a new CI filter.

00:48:36.546 --> 00:48:37.946
And then we saw how you can

00:48:37.946 --> 00:48:40.416
create a brand new 3-D effect

00:48:40.626 --> 00:48:41.256
using depth.

00:48:42.026 --> 00:48:43.616
I hope that this session will

00:48:43.616 --> 00:48:45.306
inspire you to use depth data

00:48:45.346 --> 00:48:46.626
into your own applications.

00:48:46.856 --> 00:48:47.926
And I can't wait to see what

00:48:47.926 --> 00:48:48.816
cool effects you'll come up

00:48:48.816 --> 00:48:48.996
with.

00:48:49.616 --> 00:48:51.586
For more information, please go

00:48:51.586 --> 00:48:52.936
to the [inaudible] at Apple.com.

00:48:54.556 --> 00:48:55.776
We have a couple related

00:48:55.776 --> 00:48:56.356
sessions.

00:48:56.696 --> 00:48:58.916
There's a session on Advances in

00:48:58.916 --> 00:49:00.286
Core Image that's going to take

00:49:00.286 --> 00:49:01.316
place later today.

00:49:01.366 --> 00:49:02.886
So we strongly encourage you to

00:49:02.956 --> 00:49:03.366
go there.

00:49:03.906 --> 00:49:04.456
Check it out.

00:49:04.456 --> 00:49:06.696
And there was a couple of

00:49:06.696 --> 00:49:08.676
session yesterday was doing

00:49:08.676 --> 00:49:11.196
Photo Kit and also how to

00:49:11.196 --> 00:49:12.826
capture depth with iPhone.

00:49:13.486 --> 00:49:15.376
And with that, I hope that you

00:49:15.376 --> 00:49:17.256
have a good rest of the WWDC.

00:49:17.516 --> 00:49:18.266
Thank you very much.