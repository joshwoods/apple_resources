WEBVTT

00:00:07.516 --> 00:00:16.500
[ Crowd Noises ]

00:00:22.251 --> 00:00:24.251
[ Applause ]

00:00:24.486 --> 00:00:27.876
>> Hi, everyone.

00:00:27.876 --> 00:00:28.996
I'm Donna Tom, and I'm a TextKit

00:00:28.996 --> 00:00:29.396
engineer.

00:00:30.046 --> 00:00:31.876
And today, my colleagues AppKit

00:00:31.876 --> 00:00:34.046
engineers Jeff Nadeau and Taylor

00:00:34.046 --> 00:00:35.006
Kelly will be joining me and

00:00:35.006 --> 00:00:36.606
we're all really excited to talk

00:00:36.606 --> 00:00:37.746
to you about advanced Touch Bar

00:00:37.746 --> 00:00:38.236
concepts.

00:00:39.526 --> 00:00:41.056
Now, hopefully most of you got a

00:00:41.056 --> 00:00:42.226
chance to watch or attend the

00:00:42.226 --> 00:00:43.226
Fundamental session earlier

00:00:43.226 --> 00:00:43.536
today.

00:00:44.126 --> 00:00:45.286
If you're following along at

00:00:45.286 --> 00:00:46.866
home, go watch that now.

00:00:47.686 --> 00:00:48.826
If you're here, please stay.

00:00:51.056 --> 00:00:52.116
It's a really great talk, I do

00:00:52.116 --> 00:00:53.196
recommend you go and watch it

00:00:53.196 --> 00:00:54.936
later if you've got the time.

00:00:55.196 --> 00:00:56.666
In it you've learned about how

00:00:56.666 --> 00:00:57.926
to create your own NSTouchBars

00:00:57.926 --> 00:00:59.066
and how to use their input

00:00:59.066 --> 00:01:00.446
capabilities to enhance the user

00:01:00.446 --> 00:01:03.066
experience in your app.

00:01:03.066 --> 00:01:04.256
And you can easily adopt Touch

00:01:04.256 --> 00:01:05.495
Bar by using just what you

00:01:05.495 --> 00:01:06.396
learned in that fundamental

00:01:06.426 --> 00:01:06.786
session.

00:01:07.346 --> 00:01:09.386
But you're probably here because

00:01:09.386 --> 00:01:10.686
you want something more to give

00:01:10.686 --> 00:01:11.886
your app that extra edge.

00:01:12.386 --> 00:01:13.596
Maybe you'd like to customize

00:01:13.596 --> 00:01:14.716
the standard bars offered by

00:01:14.716 --> 00:01:16.206
Touch Controls like the Mail

00:01:16.206 --> 00:01:17.506
app's email Autocomplete item.

00:01:18.626 --> 00:01:19.926
Or maybe you'd like to add a

00:01:19.926 --> 00:01:21.416
Scrubber to your app so the user

00:01:21.416 --> 00:01:22.516
can quickly scroll through and

00:01:22.516 --> 00:01:24.206
select content like the Calendar

00:01:24.206 --> 00:01:24.826
date selector.

00:01:26.036 --> 00:01:27.606
Or maybe, you'd even like to add

00:01:27.666 --> 00:01:29.166
your own completely custom

00:01:29.166 --> 00:01:30.826
control like the system color

00:01:30.826 --> 00:01:31.096
picker.

00:01:31.986 --> 00:01:33.446
Now, in this session, we are

00:01:33.446 --> 00:01:34.436
going to show you ways to build

00:01:34.436 --> 00:01:35.136
all of these things.

00:01:35.436 --> 00:01:36.866
We'll dive deep into techniques

00:01:36.866 --> 00:01:38.336
and best practices for

00:01:38.336 --> 00:01:39.486
customizing the standard

00:01:39.486 --> 00:01:40.876
components as well as building

00:01:40.876 --> 00:01:42.396
your own custom controls giving

00:01:42.396 --> 00:01:43.846
you the power and flexibility to

00:01:43.846 --> 00:01:45.056
build rich experiences for your

00:01:45.056 --> 00:01:45.416
users.

00:01:46.126 --> 00:01:49.336
So, first up, is to customizing

00:01:49.336 --> 00:01:49.826
TextBars.

00:01:49.826 --> 00:01:52.706
We're going to start by going

00:01:52.706 --> 00:01:54.846
over the standard items, then

00:01:55.446 --> 00:01:56.576
we'll talk about how to disable

00:01:56.576 --> 00:01:57.736
the standard items, and how to

00:01:57.736 --> 00:01:58.906
add your own custom items.

00:01:59.976 --> 00:02:01.146
And finally we'll learn about

00:02:01.146 --> 00:02:02.126
the Candidate List item and

00:02:02.476 --> 00:02:03.416
we'll take a look at how to

00:02:03.416 --> 00:02:04.886
build an email Autocomplete item

00:02:04.976 --> 00:02:06.036
similar to what you'd see in the

00:02:06.036 --> 00:02:06.446
Mail app.

00:02:11.106 --> 00:02:11.856
So, let's get started with

00:02:11.946 --> 00:02:12.456
standard items.

00:02:13.656 --> 00:02:14.726
Now, we built a lot of great

00:02:14.726 --> 00:02:15.936
functionality into the standard

00:02:15.936 --> 00:02:16.436
TextBars.

00:02:16.756 --> 00:02:18.276
If you're using a TextView or a

00:02:18.276 --> 00:02:19.556
TextField, guess what?

00:02:19.986 --> 00:02:21.136
These components support

00:02:21.136 --> 00:02:22.586
NSTouchBar right out of the box.

00:02:23.836 --> 00:02:24.966
Now, when a TextView or a

00:02:24.966 --> 00:02:26.836
TextField becomes the first

00:02:26.836 --> 00:02:27.936
responder on your app, it'll

00:02:27.936 --> 00:02:29.076
automatically get a bar

00:02:29.376 --> 00:02:30.496
populated with items that are

00:02:30.496 --> 00:02:31.596
driven by the properties and

00:02:31.596 --> 00:02:32.536
content of the control.

00:02:33.166 --> 00:02:34.786
So, by default, here's what you

00:02:34.916 --> 00:02:35.000
get.

00:02:36.956 --> 00:02:38.606
QuickType suggestions, which can

00:02:38.606 --> 00:02:39.846
be expanded and collapsed using

00:02:39.846 --> 00:02:40.826
that little angle bracket on the

00:02:40.826 --> 00:02:41.036
left.

00:02:42.026 --> 00:02:43.336
Top bar shows what it looks like

00:02:43.336 --> 00:02:44.486
when it's collapsed and the

00:02:44.486 --> 00:02:45.746
bottom bar shows what it looks

00:02:45.746 --> 00:02:48.226
like when it's expanded.

00:02:48.226 --> 00:02:49.506
You'll also get a character

00:02:49.506 --> 00:02:50.716
picker, for all those great

00:02:50.716 --> 00:02:51.186
emojis.

00:02:52.436 --> 00:02:54.066
And if rich text is enabled,

00:02:54.436 --> 00:02:56.756
you'll get a color picker,

00:02:57.496 --> 00:03:00.366
formatting controls, and

00:03:01.036 --> 00:03:02.066
alignment and list controls.

00:03:02.956 --> 00:03:04.286
And you get all of this for free

00:03:04.716 --> 00:03:05.976
when you use NSTextView or

00:03:05.976 --> 00:03:06.656
NSTextField.

00:03:06.856 --> 00:03:08.136
You don't have to write a single

00:03:08.136 --> 00:03:08.806
line of code.

00:03:09.376 --> 00:03:11.746
But, how does all of that

00:03:11.746 --> 00:03:12.386
actually work?

00:03:13.196 --> 00:03:16.346
Well, NSTextView and NSTouchBar

00:03:16.346 --> 00:03:17.736
are very tightly integrated in

00:03:17.736 --> 00:03:18.886
order to be provide all of that

00:03:18.886 --> 00:03:19.646
great functionality.

00:03:20.686 --> 00:03:22.496
Since the items in the bar may

00:03:22.496 --> 00:03:23.796
need to change depending on the

00:03:23.796 --> 00:03:24.946
contents of the entered text,

00:03:25.476 --> 00:03:27.516
NSTextView actually makes itself

00:03:27.826 --> 00:03:28.796
the delegate of its own

00:03:29.256 --> 00:03:30.246
NSTouchBar instance.

00:03:31.236 --> 00:03:32.146
And if you're using an

00:03:32.146 --> 00:03:33.936
NSTextField, remember that an

00:03:33.936 --> 00:03:35.486
instance of NSTextField serves

00:03:35.486 --> 00:03:36.516
as the field editor for the

00:03:36.516 --> 00:03:37.656
currently active TextField.

00:03:38.576 --> 00:03:39.896
And so when you place items in

00:03:39.896 --> 00:03:41.696
the TextField's bar, that's not

00:03:41.696 --> 00:03:43.266
the same instance of NSTouchBar

00:03:43.346 --> 00:03:44.186
that contains the standard

00:03:44.186 --> 00:03:44.660
items.

00:03:45.796 --> 00:03:47.226
The field editor's bar will be

00:03:47.226 --> 00:03:47.926
the one that contains the

00:03:47.926 --> 00:03:48.486
standard items.

00:03:49.166 --> 00:03:51.236
And while we're on the subject

00:03:51.236 --> 00:03:53.196
of the field editor, remember

00:03:53.196 --> 00:03:54.516
that the field editor is shared

00:03:54.516 --> 00:03:55.576
among all text fields in a

00:03:55.576 --> 00:03:57.376
window, so if you make changes

00:03:57.556 --> 00:03:58.636
to that field editor's bar,

00:03:59.026 --> 00:04:00.376
those changes are going to

00:04:00.656 --> 00:04:01.876
affect all the text fields in

00:04:01.876 --> 00:04:02.266
the window.

00:04:02.576 --> 00:04:03.786
And this is an important concept

00:04:03.786 --> 00:04:05.036
to keep in mind when working

00:04:05.036 --> 00:04:05.676
with text fields.

00:04:05.786 --> 00:04:08.516
So, now that we understand a

00:04:08.616 --> 00:04:09.976
little bit more about how these

00:04:09.976 --> 00:04:11.616
components work together, let's

00:04:11.616 --> 00:04:12.686
talk about how to disable the

00:04:12.686 --> 00:04:13.226
standard items.

00:04:13.226 --> 00:04:15.456
It's actually pretty simple.

00:04:15.916 --> 00:04:17.086
All you have to do is set the

00:04:17.086 --> 00:04:18.546
corresponding property on your

00:04:18.546 --> 00:04:19.745
textView or your textField.

00:04:19.745 --> 00:04:21.616
And when you set these

00:04:21.616 --> 00:04:23.296
properties, the textView will

00:04:23.296 --> 00:04:25.216
automatically get notified that

00:04:25.216 --> 00:04:26.596
its bar items need updating, so

00:04:26.596 --> 00:04:27.606
there's nothing else you have to

00:04:27.606 --> 00:04:27.946
do.

00:04:29.566 --> 00:04:30.576
QuickType and the character

00:04:30.576 --> 00:04:31.666
picker are each controlled by

00:04:31.666 --> 00:04:32.336
their own property.

00:04:33.486 --> 00:04:34.806
But the rest of the standard

00:04:34.806 --> 00:04:36.466
items are text styling controls

00:04:37.296 --> 00:04:39.196
and these will be present if

00:04:39.436 --> 00:04:42.026
rich text is enabled on your

00:04:42.026 --> 00:04:43.456
text field, and if it's not,

00:04:43.456 --> 00:04:46.076
then you won't get those items.

00:04:46.256 --> 00:04:47.496
Now, before you go and disable

00:04:47.496 --> 00:04:48.766
QuickType on all your text

00:04:48.766 --> 00:04:50.486
controls, please consider your

00:04:50.486 --> 00:04:50.876
users.

00:04:51.576 --> 00:04:54.466
I know some of you might not

00:04:54.556 --> 00:04:55.896
like to use the QuickType item,

00:04:56.356 --> 00:04:57.776
but I'd like to emphasize that

00:04:57.776 --> 00:04:59.146
your users might not share your

00:04:59.146 --> 00:04:59.626
preferences.

00:05:00.346 --> 00:05:02.686
In fact, your users can disable

00:05:02.866 --> 00:05:04.586
QuickType suggestions for

00:05:04.726 --> 00:05:05.636
themselves

00:05:05.746 --> 00:05:06.546
either through the System

00:05:06.546 --> 00:05:08.066
Preferences pane as shown here,

00:05:08.346 --> 00:05:09.876
or by customizing their Touch

00:05:09.876 --> 00:05:10.036
Bar.

00:05:10.536 --> 00:05:11.776
So, please, consider leaving

00:05:11.776 --> 00:05:13.066
QuickType enabled and allowing

00:05:13.066 --> 00:05:14.396
your users to make this decision

00:05:14.396 --> 00:05:14.966
for themselves.

00:05:17.576 --> 00:05:18.246
So, now that we know how to

00:05:18.246 --> 00:05:19.386
disable the standard items,

00:05:19.636 --> 00:05:20.806
let's talk about how to add your

00:05:20.806 --> 00:05:21.546
own custom items.

00:05:22.206 --> 00:05:25.026
So, here are a couple examples

00:05:25.026 --> 00:05:26.036
of items that have been added

00:05:26.036 --> 00:05:27.736
alongside the standard items in

00:05:27.736 --> 00:05:28.116
a TextBar.

00:05:29.306 --> 00:05:30.416
The bar on the top might look

00:05:30.416 --> 00:05:31.326
familiar if you've seen the

00:05:31.326 --> 00:05:32.086
Fundamentals talk.

00:05:32.586 --> 00:05:33.956
It has the Send Mail button

00:05:33.956 --> 00:05:35.016
placed all the way on the left.

00:05:36.086 --> 00:05:37.526
The bottom bar has a Select All

00:05:37.526 --> 00:05:38.656
button placed just to the right

00:05:38.656 --> 00:05:39.426
of the character picker.

00:05:40.256 --> 00:05:41.896
So, how do I go about adding

00:05:41.896 --> 00:05:43.246
buttons like these to my

00:05:43.456 --> 00:05:43.660
TextBar?

00:05:45.466 --> 00:05:46.616
Well, you might be tempted to

00:05:46.616 --> 00:05:47.656
put something like this in

00:05:47.656 --> 00:05:48.226
ViewDidLoad.

00:05:49.436 --> 00:05:50.696
Grab your textField's Touch bar,

00:05:51.266 --> 00:05:52.926
append your new button to the

00:05:52.926 --> 00:05:54.146
defaultItemIdentifiers and

00:05:54.836 --> 00:05:55.506
that's it, right?

00:05:56.726 --> 00:05:59.086
No. Please don't do this.

00:05:59.086 --> 00:06:00.686
You're going to have a bad time

00:06:00.686 --> 00:06:00.876
guys.

00:06:00.876 --> 00:06:03.586
And why? It's because the text

00:06:03.586 --> 00:06:06.036
view needs to be able to reset

00:06:06.036 --> 00:06:07.286
its bar items based on the

00:06:07.286 --> 00:06:08.266
current configuration.

00:06:08.836 --> 00:06:10.376
And so here's what's going to

00:06:10.376 --> 00:06:10.546
happen.

00:06:10.546 --> 00:06:12.696
You're going to just have a bar

00:06:12.696 --> 00:06:13.666
that looks something like this

00:06:13.666 --> 00:06:15.146
after you add your new button,

00:06:15.146 --> 00:06:15.966
which is just as you would have

00:06:15.966 --> 00:06:16.246
expect.

00:06:17.126 --> 00:06:19.056
But, if you the user disables

00:06:19.056 --> 00:06:20.116
rich text while your app is

00:06:20.116 --> 00:06:22.476
running, that text view will get

00:06:22.476 --> 00:06:23.746
notified and it's going to need

00:06:23.976 --> 00:06:24.956
to reset its bar items.

00:06:25.006 --> 00:06:26.716
And it's going to do this by

00:06:26.716 --> 00:06:28.076
removing all the existing items

00:06:28.106 --> 00:06:29.576
and then just recreating the

00:06:29.576 --> 00:06:30.716
ones it needs based on the

00:06:30.716 --> 00:06:31.586
current configuration.

00:06:32.936 --> 00:06:34.326
But remember, that the TextView

00:06:34.326 --> 00:06:35.826
is the delegate of its own

00:06:35.916 --> 00:06:36.736
NSTouchBar instance.

00:06:36.806 --> 00:06:38.196
So, it's going to recreate these

00:06:38.196 --> 00:06:39.316
items by calling its own

00:06:39.316 --> 00:06:40.186
implementation of

00:06:40.186 --> 00:06:41.396
makeItemForIdentifier.

00:06:42.196 --> 00:06:43.226
And so it will recreate the

00:06:43.226 --> 00:06:44.666
QuickType item, it'll recreate

00:06:45.896 --> 00:06:49.826
the character picker, but it's

00:06:50.066 --> 00:06:51.426
not going to know how to

00:06:51.426 --> 00:06:52.926
recreate your custom item.

00:06:53.736 --> 00:06:55.156
So, it just won't get recreated.

00:06:56.756 --> 00:06:57.966
Now to avoid this you're going

00:06:57.966 --> 00:06:58.806
to need an approach that works

00:06:58.806 --> 00:06:59.956
with the TextView and there are

00:06:59.956 --> 00:07:00.916
a couple of different ways to do

00:07:00.916 --> 00:07:01.136
that.

00:07:03.056 --> 00:07:04.476
The first approach is to use a

00:07:04.476 --> 00:07:05.976
higher-level responder to

00:07:05.976 --> 00:07:06.996
provide your custom item.

00:07:07.596 --> 00:07:08.696
And this is a good approach to

00:07:08.696 --> 00:07:09.916
use when it makes sense for your

00:07:09.916 --> 00:07:11.266
item to appear in more than one

00:07:11.266 --> 00:07:11.836
context.

00:07:12.296 --> 00:07:15.226
And our Send Mail bar from

00:07:15.226 --> 00:07:16.476
earlier is a good example of it.

00:07:17.196 --> 00:07:18.396
So, here, we have a Send Mail

00:07:18.396 --> 00:07:20.116
button and ideally we'd like

00:07:20.116 --> 00:07:21.576
this button to be present in the

00:07:21.576 --> 00:07:23.046
bar, when the Compose Mail

00:07:23.046 --> 00:07:23.746
window is open.

00:07:24.306 --> 00:07:25.826
It doesn't matter which TextView

00:07:25.826 --> 00:07:27.566
or which TextField within that

00:07:27.566 --> 00:07:28.886
window has a first responder.

00:07:28.926 --> 00:07:29.776
We want this button to be

00:07:29.776 --> 00:07:31.346
present for any of them.

00:07:31.446 --> 00:07:33.166
And so, this is a good situation

00:07:33.246 --> 00:07:34.346
in which to use a higher-level

00:07:34.346 --> 00:07:35.936
responder like a ViewController

00:07:35.936 --> 00:07:36.956
to provide your custom item.

00:07:37.636 --> 00:07:40.006
And here's what that might look

00:07:40.006 --> 00:07:40.500
like.

00:07:40.746 --> 00:07:41.816
Here we have our ViewController.

00:07:42.516 --> 00:07:44.346
We're going to override

00:07:44.346 --> 00:07:44.986
makeTouchBar.

00:07:45.676 --> 00:07:49.306
We'll create our custom Touch

00:07:49.306 --> 00:07:51.016
Bar item and set its view to the

00:07:51.076 --> 00:07:51.526
Send button.

00:07:52.136 --> 00:07:55.806
And then, we'll create our Touch

00:07:55.806 --> 00:07:57.746
Bar, we'll configure it with our

00:07:58.036 --> 00:07:59.326
custom item, and then we'll

00:07:59.326 --> 00:08:00.566
return it.

00:08:01.406 --> 00:08:02.226
Now, note the use of the

00:08:02.226 --> 00:08:03.326
otherItemsProxy here.

00:08:03.326 --> 00:08:04.876
And this is going to nest the

00:08:04.876 --> 00:08:06.066
bar items from the field editor

00:08:06.066 --> 00:08:07.496
so that they appear alongside

00:08:07.496 --> 00:08:08.186
our custom item.

00:08:09.316 --> 00:08:10.956
And that's a basic example of

00:08:10.956 --> 00:08:11.956
how to use a higher-level

00:08:11.956 --> 00:08:13.376
responder to provide a custom

00:08:13.376 --> 00:08:14.586
item along the standard items.

00:08:14.586 --> 00:08:17.596
So, now onto the second

00:08:17.596 --> 00:08:18.786
approach, subclassing

00:08:18.786 --> 00:08:19.556
NSTextView.

00:08:20.236 --> 00:08:21.376
Now this is a good approach to

00:08:21.376 --> 00:08:23.616
use when you have an item where

00:08:24.016 --> 00:08:25.506
you only want it to appear in

00:08:25.506 --> 00:08:27.446
the bar when your TextView is

00:08:27.446 --> 00:08:28.146
the first responder.

00:08:28.766 --> 00:08:31.276
And to see what I mean, let's

00:08:31.276 --> 00:08:32.076
take a look at the second

00:08:32.076 --> 00:08:32.876
example from earlier.

00:08:33.285 --> 00:08:34.535
Here we have a Select All button

00:08:34.635 --> 00:08:36.035
that selects all of the text in

00:08:36.035 --> 00:08:36.556
the TextView.

00:08:37.525 --> 00:08:39.106
Now in this case, we only want

00:08:39.106 --> 00:08:40.356
our button to appear when our

00:08:40.356 --> 00:08:41.546
TextView is first responder

00:08:41.546 --> 00:08:43.366
because it wouldn't really make

00:08:43.366 --> 00:08:44.275
a whole lot of sense for a

00:08:44.275 --> 00:08:45.696
Select All button to be there if

00:08:45.696 --> 00:08:46.836
nobody's editing any text.

00:08:48.266 --> 00:08:49.976
And so this situation is a good

00:08:49.976 --> 00:08:52.126
one to subclass NSTextView and

00:08:52.126 --> 00:08:53.426
put your button in that same

00:08:53.546 --> 00:08:54.686
NSTouchBar instance as the

00:08:54.686 --> 00:08:55.276
standard items.

00:08:55.936 --> 00:08:58.466
And so there's two methods

00:08:58.466 --> 00:08:59.716
you're going to want to override

00:08:59.716 --> 00:09:00.676
in your TextView subclass.

00:09:01.796 --> 00:09:02.226
One is

00:09:02.226 --> 00:09:04.026
updateTouchBarItemIdentifiers

00:09:04.696 --> 00:09:05.716
and you want to override this

00:09:05.716 --> 00:09:07.036
method because this is called

00:09:07.036 --> 00:09:07.946
each time the state of the

00:09:07.946 --> 00:09:09.546
TextView's bar needs changed.

00:09:10.526 --> 00:09:11.506
And this method is where you'll

00:09:11.506 --> 00:09:13.776
actually add the text bar to

00:09:13.776 --> 00:09:16.496
display your custom item, to the

00:09:16.496 --> 00:09:17.616
defaultItemIdentifiers array.

00:09:18.776 --> 00:09:20.016
And the second method to

00:09:20.016 --> 00:09:21.396
override is the delegate method

00:09:21.876 --> 00:09:23.046
makeItemForIdentifier.

00:09:23.046 --> 00:09:24.616
And you'll want to override this

00:09:24.616 --> 00:09:25.736
method because this is what the

00:09:25.736 --> 00:09:27.556
TextView uses to actually create

00:09:27.556 --> 00:09:28.156
its bar items.

00:09:28.956 --> 00:09:29.926
And so this method is where

00:09:29.926 --> 00:09:31.086
you'll create and you're

00:09:31.086 --> 00:09:32.346
configure your custom item.

00:09:34.056 --> 00:09:34.676
Now, with both of these

00:09:34.676 --> 00:09:35.826
approaches you're going to want

00:09:35.826 --> 00:09:37.496
to make sure that you call the

00:09:37.546 --> 00:09:39.046
superclass implementation before

00:09:39.046 --> 00:09:39.836
you do any of the work

00:09:39.836 --> 00:09:41.116
associated with your custom

00:09:41.116 --> 00:09:41.346
item.

00:09:41.796 --> 00:09:42.936
And by using this approach

00:09:43.106 --> 00:09:44.356
you'll ensure that your custom

00:09:44.356 --> 00:09:46.106
item will be recreated along

00:09:46.106 --> 00:09:47.866
with the standard items whenever

00:09:47.866 --> 00:09:49.166
the TextView needs to reset its

00:09:49.166 --> 00:09:49.326
bar.

00:09:49.996 --> 00:09:53.266
And that wraps up the two

00:09:53.266 --> 00:09:54.396
approaches for adding custom

00:09:54.396 --> 00:09:54.676
items.

00:09:55.186 --> 00:09:56.216
Let's shift gears and learn

00:09:56.216 --> 00:09:58.636
about the Candidate List item.

00:09:59.106 --> 00:09:59.956
The Candidate List item is a

00:09:59.956 --> 00:10:01.636
pretty nifty control for giving

00:10:01.636 --> 00:10:03.066
your users a list of contextual

00:10:03.066 --> 00:10:04.226
suggestions to choose from.

00:10:05.616 --> 00:10:06.426
And we'll refer to these

00:10:06.426 --> 00:10:07.666
suggestions as candidates.

00:10:08.366 --> 00:10:12.126
And this item is also tightly

00:10:12.126 --> 00:10:13.316
integrated with NSTextView.

00:10:13.926 --> 00:10:14.896
So, every TextView has a

00:10:14.896 --> 00:10:16.116
reference to the Candidate List

00:10:16.116 --> 00:10:18.096
in the bar, accessible via the

00:10:18.096 --> 00:10:19.556
candidateListTouchBarItem

00:10:19.556 --> 00:10:19.966
property.

00:10:21.076 --> 00:10:22.486
Now once again, remember the

00:10:22.486 --> 00:10:23.416
Candidate List you see with a

00:10:23.416 --> 00:10:25.256
TextField is actually in the bar

00:10:25.406 --> 00:10:26.506
associated with the window's

00:10:26.586 --> 00:10:27.856
field editor.

00:10:29.496 --> 00:10:31.296
Candidate data generally comes

00:10:31.436 --> 00:10:32.306
from these three sources.

00:10:33.376 --> 00:10:34.926
In the QuickType case, the data

00:10:34.926 --> 00:10:36.046
for the Candidates is supplied

00:10:36.046 --> 00:10:36.856
by NSSpellChecker.

00:10:37.966 --> 00:10:39.006
But the control can also be

00:10:39.006 --> 00:10:40.076
configured to show Candidates

00:10:40.076 --> 00:10:41.686
from other sources, like the

00:10:41.686 --> 00:10:43.176
system input method, which

00:10:43.176 --> 00:10:44.476
allows you to type Chinese,

00:10:44.476 --> 00:10:46.046
Japanese, Korean, or Indic

00:10:46.046 --> 00:10:47.166
characters using a Latin

00:10:47.166 --> 00:10:47.526
Keyboard.

00:10:47.576 --> 00:10:49.366
But what most of you are

00:10:49.366 --> 00:10:50.606
probably interested in is the

00:10:50.606 --> 00:10:51.876
ability to provide your own

00:10:51.876 --> 00:10:52.956
completely custom Candidates.

00:10:53.556 --> 00:10:54.356
And there are two different

00:10:54.356 --> 00:10:55.596
approaches your can take to do

00:10:55.596 --> 00:10:56.000
this.

00:10:57.796 --> 00:10:59.246
The first approach is to use a

00:10:59.246 --> 00:10:59.846
delegate method.

00:11:00.666 --> 00:11:01.636
The benefit of using this

00:11:01.636 --> 00:11:02.496
approach is that it's the

00:11:02.546 --> 00:11:03.806
simplest one since the TextField

00:11:03.806 --> 00:11:04.556
does most of the work.

00:11:05.186 --> 00:11:08.216
So, to use this approach, you'll

00:11:08.216 --> 00:11:09.646
implement a delegate method

00:11:09.906 --> 00:11:11.636
candidatesForSelectedRange in

00:11:11.716 --> 00:11:13.026
your TextField or your TextView.

00:11:13.856 --> 00:11:14.946
And you'll get the original text

00:11:14.946 --> 00:11:17.016
control, the field editor if

00:11:17.016 --> 00:11:19.086
applicable, and the range of the

00:11:19.086 --> 00:11:20.616
text, which you can then use to

00:11:20.616 --> 00:11:21.506
determine your Candidates.

00:11:22.346 --> 00:11:23.246
So, you'll simply return an

00:11:23.246 --> 00:11:24.446
array containing your custom

00:11:24.446 --> 00:11:25.316
Candidates, and they'll be

00:11:25.316 --> 00:11:26.336
displayed in the standard

00:11:26.336 --> 00:11:26.976
Candidate List.

00:11:27.806 --> 00:11:29.016
Now since this approach uses the

00:11:29.016 --> 00:11:30.806
standard list, there's nothing

00:11:30.806 --> 00:11:31.566
else you have to do.

00:11:31.626 --> 00:11:33.466
The TextView will do the rest.

00:11:35.096 --> 00:11:36.696
The second approach is to use a

00:11:36.696 --> 00:11:37.686
higher-level responder.

00:11:38.676 --> 00:11:39.896
And the benefit of this approach

00:11:39.896 --> 00:11:41.256
is it allows you to use model

00:11:41.256 --> 00:11:42.776
objects rather than strings for

00:11:42.776 --> 00:11:43.326
your Candidates.

00:11:45.456 --> 00:11:46.396
So, this is similar to the

00:11:46.456 --> 00:11:47.606
higher-level responder approach

00:11:47.606 --> 00:11:48.486
that we looked at a little bit

00:11:48.486 --> 00:11:49.856
earlier for adding custom items

00:11:49.856 --> 00:11:50.276
to your bar.

00:11:50.956 --> 00:11:52.026
Here, you'll use a view

00:11:52.026 --> 00:11:53.276
controller or some other object

00:11:53.606 --> 00:11:55.676
to create your own instance of

00:11:55.996 --> 00:11:57.276
NSCandidateListTouchBarItem and

00:11:57.276 --> 00:11:58.486
provide that instead of using

00:11:58.486 --> 00:11:59.036
the standard one.

00:12:00.496 --> 00:12:01.356
Now, this approach is a little

00:12:01.356 --> 00:12:02.316
bit more complex than the

00:12:02.316 --> 00:12:04.146
delegation one, but again it's

00:12:04.146 --> 00:12:05.786
really useful if you'd like to

00:12:05.786 --> 00:12:06.746
use model objects for your

00:12:06.746 --> 00:12:08.186
candidates instead of strings.

00:12:08.186 --> 00:12:10.776
And we'll go over this approach

00:12:10.776 --> 00:12:11.786
in greater detail a little bit

00:12:11.786 --> 00:12:12.096
later.

00:12:12.666 --> 00:12:14.896
But for now, let's take a look

00:12:14.896 --> 00:12:16.206
at implementing a simple version

00:12:16.206 --> 00:12:17.476
of the email Autocomplete item

00:12:17.736 --> 00:12:18.646
that we've been teasing you with

00:12:18.646 --> 00:12:19.506
since the beginning of this

00:12:19.506 --> 00:12:19.666
talk.

00:12:20.416 --> 00:12:21.236
We're going to use the

00:12:21.236 --> 00:12:22.386
delegation approach for this.

00:12:23.086 --> 00:12:26.056
But we have a slight problem

00:12:26.056 --> 00:12:26.236
here.

00:12:26.746 --> 00:12:27.926
Now, since our text field is

00:12:27.926 --> 00:12:30.066
intended for email addresses, it

00:12:30.116 --> 00:12:31.236
really wouldn't make a whole lot

00:12:31.236 --> 00:12:32.626
of sense for it to have emojis

00:12:32.626 --> 00:12:33.516
in it, or rich text.

00:12:34.936 --> 00:12:35.996
But if we turn those properties

00:12:35.996 --> 00:12:37.146
off on the bar, look at what

00:12:37.146 --> 00:12:38.536
happens when we collapse our

00:12:38.536 --> 00:12:39.126
Candidate List.

00:12:39.876 --> 00:12:40.976
You've kind of got this weird

00:12:40.976 --> 00:12:42.246
empty bar just sitting there,

00:12:42.246 --> 00:12:43.796
and that doesn't really look

00:12:43.796 --> 00:12:46.856
good, so we don't want that to

00:12:47.036 --> 00:12:47.196
happen.

00:12:47.196 --> 00:12:48.596
And we're going to prevent that

00:12:48.596 --> 00:12:50.996
from happening by turning off

00:12:50.996 --> 00:12:52.176
the collapsing functionality

00:12:52.326 --> 00:12:54.396
using the allowsCollapsing

00:12:54.396 --> 00:12:54.796
property.

00:12:54.796 --> 00:12:56.936
And when we set this property

00:12:57.636 --> 00:12:58.656
that little angle bracket on the

00:12:58.656 --> 00:13:00.516
left goes away and you can no

00:13:00.516 --> 00:13:02.586
longer collapse the list.

00:13:05.356 --> 00:13:06.566
But now, we have another

00:13:06.566 --> 00:13:06.986
problem.

00:13:06.986 --> 00:13:10.366
We set that allowsCollapsing

00:13:10.366 --> 00:13:12.786
property on the field editor

00:13:13.426 --> 00:13:15.556
Candidate List item and the

00:13:15.556 --> 00:13:17.026
field editor is shared among all

00:13:17.026 --> 00:13:18.106
the text fields in the window.

00:13:18.616 --> 00:13:19.966
And so, if we set the

00:13:19.966 --> 00:13:21.726
allowsCollapsing property on

00:13:21.726 --> 00:13:23.246
this field editor's Candidate

00:13:23.246 --> 00:13:24.866
List it's going to affect all of

00:13:24.866 --> 00:13:26.336
these text fields, which we

00:13:26.336 --> 00:13:26.876
might not want.

00:13:27.986 --> 00:13:28.846
And so we're going to solve this

00:13:28.846 --> 00:13:30.136
problem by providing our own

00:13:30.136 --> 00:13:32.006
field editor for our email

00:13:32.006 --> 00:13:33.466
TextField and then that way,

00:13:33.466 --> 00:13:34.816
when we modify its properties,

00:13:35.256 --> 00:13:36.066
it won't affect the shared

00:13:36.066 --> 00:13:36.356
editor.

00:13:36.976 --> 00:13:39.626
And so, to create the custom

00:13:39.626 --> 00:13:41.316
field editor, we'll subclass

00:13:41.316 --> 00:13:42.246
NSTextFieldCell.

00:13:42.246 --> 00:13:45.496
In our subclass, we're going to

00:13:45.496 --> 00:13:46.716
override fieldEditor for

00:13:46.716 --> 00:13:47.276
controlView.

00:13:47.886 --> 00:13:51.266
And then we'll create a

00:13:51.266 --> 00:13:52.376
fieldEditor and return it.

00:13:52.876 --> 00:13:53.926
And that's all there is to it.

00:13:54.376 --> 00:13:55.286
We're not adding any custom

00:13:55.286 --> 00:13:55.756
behavior.

00:13:55.756 --> 00:13:56.796
We're just providing our own

00:13:56.796 --> 00:13:58.436
instance of the stock NSTextView

00:13:59.396 --> 00:14:00.696
to use as the field editor

00:14:00.696 --> 00:14:01.776
whenever someone wants to edit

00:14:01.776 --> 00:14:03.036
the contents of our Text Field.

00:14:04.066 --> 00:14:05.186
And don't forget to set your

00:14:05.186 --> 00:14:06.236
TextField to use your new

00:14:06.236 --> 00:14:07.616
subclass, either through

00:14:07.616 --> 00:14:08.616
Interface Builder or

00:14:08.616 --> 00:14:09.306
Programatically.

00:14:11.156 --> 00:14:12.886
So, now, we can implement our

00:14:12.886 --> 00:14:13.906
textField delegate method.

00:14:14.156 --> 00:14:15.156
Here, we'll turn off the

00:14:15.156 --> 00:14:16.306
collapsing behavior of the field

00:14:16.306 --> 00:14:17.826
editor and return to our array

00:14:17.826 --> 00:14:18.576
of custom Candidates.

00:14:18.576 --> 00:14:20.076
And that's a simple

00:14:20.076 --> 00:14:21.036
implementation of email

00:14:21.036 --> 00:14:22.386
Autocomplete with the Candidate

00:14:22.386 --> 00:14:23.000
List item.

00:14:25.376 --> 00:14:26.326
Now earlier we touched on a

00:14:26.326 --> 00:14:27.716
second more complex approach for

00:14:27.716 --> 00:14:29.156
returning custom Candidates by

00:14:29.156 --> 00:14:30.156
providing your own Candidate

00:14:30.156 --> 00:14:31.356
List item from a higher-level

00:14:31.356 --> 00:14:31.756
responder.

00:14:32.756 --> 00:14:33.816
Now if you need finer grain

00:14:33.816 --> 00:14:35.146
control over the candidate list

00:14:35.146 --> 00:14:36.236
item, this is the way to go.

00:14:36.236 --> 00:14:37.356
And if you want to use this

00:14:37.356 --> 00:14:38.666
approach, here's what you'll

00:14:38.666 --> 00:14:41.216
have to do.

00:14:41.446 --> 00:14:42.936
First, you want to disable

00:14:42.936 --> 00:14:44.096
QuickType for your text field or

00:14:44.096 --> 00:14:44.316
view.

00:14:45.016 --> 00:14:46.226
Since you're providing your own

00:14:46.436 --> 00:14:47.586
Candidate List, there's no need

00:14:47.586 --> 00:14:48.330
for the standard one.

00:14:51.416 --> 00:14:53.326
Second, you want to implement

00:14:53.326 --> 00:14:55.156
the NSTouchBar delegate method

00:14:55.156 --> 00:14:56.396
makeItemForIdentifier.

00:14:57.056 --> 00:14:58.196
And this method is where you

00:14:58.386 --> 00:14:59.416
will create your custom

00:14:59.416 --> 00:15:00.556
Candidate List item.

00:15:01.756 --> 00:15:02.826
And if you're using model

00:15:02.826 --> 00:15:04.336
objects as your candidates, this

00:15:04.336 --> 00:15:05.496
is also where you're going to

00:15:05.496 --> 00:15:06.656
map your model objects into

00:15:06.656 --> 00:15:08.216
string representations that can

00:15:08.216 --> 00:15:09.126
be displayed in the Candidate

00:15:09.126 --> 00:15:09.616
List item.

00:15:10.886 --> 00:15:12.446
And so to do this, you're going

00:15:12.446 --> 00:15:13.686
to use this block property

00:15:13.686 --> 00:15:15.326
attributedStringForCandidate.

00:15:19.066 --> 00:15:20.956
Third, if you're using the model

00:15:20.956 --> 00:15:24.106
object candidates, you need,

00:15:24.316 --> 00:15:26.236
you're going to need to

00:15:27.416 --> 00:15:29.346
implement the delegate method

00:15:29.346 --> 00:15:30.936
endSelectingCandidateAt index

00:15:30.936 --> 00:15:32.836
and this is where you're going

00:15:32.836 --> 00:15:34.056
to provide a mapping in the

00:15:34.056 --> 00:15:35.776
other direction from user's

00:15:35.776 --> 00:15:37.006
candidate selection to an

00:15:37.006 --> 00:15:38.206
instance of your model object.

00:15:38.706 --> 00:15:42.556
And finally, you want to update

00:15:42.556 --> 00:15:43.456
the candidates that are

00:15:43.456 --> 00:15:45.676
displayed when someone types

00:15:45.676 --> 00:15:47.216
into your text field or view.

00:15:47.626 --> 00:15:48.536
And so you can do that by

00:15:48.536 --> 00:15:50.156
overriding controlTextDidChange

00:15:50.566 --> 00:15:52.236
and then calling setCandidates

00:15:52.306 --> 00:15:53.876
for selected range and string on

00:15:53.876 --> 00:15:55.906
your custom Candidate List item.

00:15:56.496 --> 00:15:59.316
And that wraps up customizing

00:15:59.316 --> 00:15:59.796
Text Bars.

00:16:00.746 --> 00:16:02.386
So, to recap, we covered two

00:16:02.386 --> 00:16:03.756
approaches for adding custom

00:16:03.756 --> 00:16:05.516
items in text bars and two

00:16:05.516 --> 00:16:06.756
approaches for providing custom

00:16:06.756 --> 00:16:07.996
candidates in the candidate bar.

00:16:08.076 --> 00:16:09.806
I encourage you all to try out

00:16:10.026 --> 00:16:11.416
customizing your text bars using

00:16:11.416 --> 00:16:12.316
these approaches that we

00:16:12.316 --> 00:16:13.036
recommended today.

00:16:13.036 --> 00:16:16.196
Now, next I'd like to invite

00:16:16.196 --> 00:16:17.486
Jeff Nadeau up to talk about

00:16:17.486 --> 00:16:19.166
NSScrubber, a control especially

00:16:19.166 --> 00:16:20.196
created for NS Touch Bar.

00:16:20.596 --> 00:16:20.756
Jeff?

00:16:21.516 --> 00:16:24.876
[ Applause ]

00:16:25.376 --> 00:16:25.956
>> All right, thank you.

00:16:26.716 --> 00:16:27.886
So, as Donna just said,

00:16:27.936 --> 00:16:29.366
NSScrubber is our very first

00:16:29.366 --> 00:16:30.286
Cocoa control that we've

00:16:30.286 --> 00:16:31.536
designed especially for the

00:16:31.536 --> 00:16:32.476
Touch Bar environment.

00:16:33.646 --> 00:16:35.326
And, the central theme of this

00:16:35.326 --> 00:16:36.916
control is taking your app's

00:16:36.916 --> 00:16:38.516
content and bringing it forward

00:16:38.516 --> 00:16:39.766
conveniently right at your

00:16:39.766 --> 00:16:40.456
fingertips.

00:16:40.456 --> 00:16:43.586
Now just some examples, we've

00:16:43.586 --> 00:16:44.616
been showing you this nice

00:16:44.616 --> 00:16:46.036
Calendar timeline as an example

00:16:46.036 --> 00:16:47.166
of NSScrubber, but in fact we

00:16:47.166 --> 00:16:48.486
use it in several places across

00:16:48.486 --> 00:16:49.346
the operating system.

00:16:49.786 --> 00:16:51.206
And two more of them are

00:16:51.706 --> 00:16:54.016
Safari's tab picker, and also

00:16:54.016 --> 00:16:55.676
Keynote's slide navigator, which

00:16:55.676 --> 00:16:57.216
appears while you're giving a

00:16:57.216 --> 00:16:58.336
presentation in Keynote.

00:16:58.336 --> 00:17:00.526
And just putting these side by

00:17:00.526 --> 00:17:02.056
side, you can tell that this

00:17:02.056 --> 00:17:03.376
control is very versatile.

00:17:03.376 --> 00:17:04.425
It's capable of expressing a

00:17:04.425 --> 00:17:06.276
wide variety of visual and

00:17:06.276 --> 00:17:07.465
interactive designs.

00:17:08.346 --> 00:17:11.116
But before we dive into any of

00:17:11.116 --> 00:17:12.266
the API, we should probably

00:17:12.266 --> 00:17:13.445
answer the question, what is

00:17:13.596 --> 00:17:14.046
NSScrubber?

00:17:14.986 --> 00:17:16.326
It's a collection-like control

00:17:16.965 --> 00:17:18.106
that is all about arranging a

00:17:18.106 --> 00:17:19.606
list of your app's content and

00:17:19.705 --> 00:17:20.756
then providing touch

00:17:20.756 --> 00:17:22.066
gesture-based highlighting and

00:17:22.106 --> 00:17:23.606
selection of that content using

00:17:23.606 --> 00:17:25.396
both tap and pan gestures.

00:17:26.406 --> 00:17:27.816
And if you used NSCollectionView

00:17:27.816 --> 00:17:29.256
before, this API is going to

00:17:29.256 --> 00:17:30.386
feel very familiar.

00:17:30.706 --> 00:17:32.256
However, it has been streamlined

00:17:32.256 --> 00:17:33.856
and adapted for the unique Touch

00:17:33.856 --> 00:17:34.596
Bar environment.

00:17:34.986 --> 00:17:38.596
Like NSCollectionView,

00:17:38.856 --> 00:17:40.606
NSScrubber has a compositional

00:17:40.606 --> 00:17:41.786
interface, which means that it

00:17:41.786 --> 00:17:42.826
delegates a lot of its

00:17:42.826 --> 00:17:44.006
responsibilities to other

00:17:44.006 --> 00:17:44.546
objects.

00:17:45.006 --> 00:17:46.486
And the best way to see these is

00:17:46.486 --> 00:17:47.646
to actually pull the control

00:17:47.646 --> 00:17:48.976
apart and take a look at each

00:17:48.976 --> 00:17:51.396
piece in turn.

00:17:51.396 --> 00:17:52.926
First, we have the control view

00:17:52.926 --> 00:17:54.366
itself, NSScrubber, which

00:17:54.366 --> 00:17:55.676
manages all of the user

00:17:55.676 --> 00:17:56.916
interaction with the control.

00:17:57.356 --> 00:17:58.396
It also provides a couple of

00:17:58.396 --> 00:18:00.156
nice cosmetic properties like

00:18:00.296 --> 00:18:02.086
backgrounds and other such

00:18:02.086 --> 00:18:02.416
things.

00:18:03.526 --> 00:18:05.876
Next, we also have the selection

00:18:05.876 --> 00:18:06.476
decoration.

00:18:06.516 --> 00:18:07.466
These are the views, which

00:18:07.466 --> 00:18:09.426
appear to indicate that a

00:18:09.486 --> 00:18:10.846
specific piece of content is

00:18:10.846 --> 00:18:11.426
selected.

00:18:11.536 --> 00:18:14.256
We have a dedicated layout

00:18:14.256 --> 00:18:16.046
object, which abstractly defines

00:18:16.046 --> 00:18:17.056
how the contents of the

00:18:17.056 --> 00:18:18.106
controller are arranged.

00:18:18.106 --> 00:18:20.046
And then, of course, we've got

00:18:20.046 --> 00:18:21.776
your content, which is provided

00:18:21.776 --> 00:18:23.186
using a data source protocol.

00:18:23.846 --> 00:18:26.216
Now, we're going to look at each

00:18:26.216 --> 00:18:27.376
of these pieces in turn;

00:18:27.926 --> 00:18:29.056
however, we should first look at

00:18:29.056 --> 00:18:30.226
what we can configure on the

00:18:30.226 --> 00:18:31.116
control view itself.

00:18:32.366 --> 00:18:33.926
And the first and most important

00:18:33.926 --> 00:18:34.816
thing is the mode of

00:18:34.816 --> 00:18:36.296
interaction, which is controlled

00:18:36.296 --> 00:18:37.336
appropriately enough with the

00:18:37.336 --> 00:18:38.006
mode property.

00:18:38.756 --> 00:18:40.576
NSScrubber has two primary modes

00:18:40.576 --> 00:18:41.226
of interaction.

00:18:41.786 --> 00:18:43.346
The first, called "fixed",

00:18:44.306 --> 00:18:47.866
offers a touch-based selection

00:18:47.866 --> 00:18:49.676
that directly selects and

00:18:49.726 --> 00:18:50.846
highlights the item underneath

00:18:50.846 --> 00:18:51.426
your touch.

00:18:52.286 --> 00:18:54.256
The second, "free", is kind of

00:18:54.256 --> 00:18:55.516
like a free wheel, which you can

00:18:55.516 --> 00:18:56.516
freely scroll the way that you

00:18:56.516 --> 00:18:57.716
would any other touch driven

00:18:57.716 --> 00:18:58.276
scroll view.

00:18:59.756 --> 00:19:00.916
Once you've chosen between these

00:19:00.916 --> 00:19:02.746
two modes, there's also the

00:19:02.746 --> 00:19:03.926
continuous property.

00:19:04.886 --> 00:19:05.946
This is a familiar name from

00:19:05.946 --> 00:19:07.656
several other Cocoa controls and

00:19:07.656 --> 00:19:09.426
we typically use it to mean that

00:19:09.426 --> 00:19:11.356
a control continuously in

00:19:11.356 --> 00:19:12.906
response to user interaction is

00:19:12.906 --> 00:19:14.706
updating its value or sending

00:19:14.706 --> 00:19:15.286
its action.

00:19:15.846 --> 00:19:19.686
Now, when continuous is false,

00:19:20.516 --> 00:19:22.476
in an NSScrubber you can see

00:19:22.476 --> 00:19:23.886
that tapping on an item and

00:19:23.886 --> 00:19:25.146
panning across highlights an

00:19:25.146 --> 00:19:26.986
item but the selection stays put

00:19:26.986 --> 00:19:28.286
until we finish our gesture and

00:19:28.286 --> 00:19:29.646
we commit a new selection.

00:19:29.716 --> 00:19:32.146
But if we turn it to true, we

00:19:32.146 --> 00:19:33.286
can see the effect in something

00:19:33.286 --> 00:19:34.186
like Safari.

00:19:34.886 --> 00:19:36.266
Where as we pan across tabs,

00:19:36.266 --> 00:19:38.566
they are immediately selected as

00:19:38.566 --> 00:19:39.586
your touch passes over each

00:19:40.296 --> 00:19:40.506
item.

00:19:41.636 --> 00:19:43.186
This also goes for free style

00:19:43.186 --> 00:19:44.356
scrubbers, for example, the

00:19:44.356 --> 00:19:45.696
Keynote slide navigator we just

00:19:45.696 --> 00:19:46.086
looked at.

00:19:46.416 --> 00:19:48.816
We can scroll through here, look

00:19:48.816 --> 00:19:50.076
at what, you know, navigate our

00:19:50.076 --> 00:19:51.406
content and then we can tap

00:19:51.406 --> 00:19:52.546
items to select them.

00:19:53.396 --> 00:19:55.006
But if we set continuous to

00:19:55.006 --> 00:19:58.176
true, just the act of scrolling

00:19:58.396 --> 00:20:00.066
is going to be fluidly and

00:20:00.066 --> 00:20:01.496
continuously updating the

00:20:01.496 --> 00:20:02.976
selection within the content.

00:20:03.046 --> 00:20:05.726
And so this gives us a very

00:20:06.056 --> 00:20:07.326
stark distinction between

00:20:07.326 --> 00:20:08.756
continuous being false, where

00:20:08.756 --> 00:20:10.036
selection is a very deliberate

00:20:10.036 --> 00:20:10.926
thing, which might be

00:20:10.926 --> 00:20:11.936
appropriate if it's kind of a

00:20:11.936 --> 00:20:13.376
heavyweight action, and

00:20:13.376 --> 00:20:15.406
continuous being true where

00:20:15.486 --> 00:20:16.626
navigating and selecting viewer

00:20:16.626 --> 00:20:18.436
content is very fast and fluid,

00:20:18.476 --> 00:20:20.066
and may be ideal for lightweight

00:20:20.066 --> 00:20:20.866
interactions.

00:20:21.336 --> 00:20:24.546
Once we've decided what we want

00:20:24.546 --> 00:20:25.886
or how we want to select our

00:20:25.886 --> 00:20:28.056
items, we need to decide what we

00:20:28.056 --> 00:20:29.106
want that selection to look

00:20:29.106 --> 00:20:29.406
like.

00:20:29.476 --> 00:20:30.546
And that's controlled with the

00:20:30.546 --> 00:20:32.016
selectionBackgroundStyle, and

00:20:32.016 --> 00:20:33.396
OverlayStyle properties.

00:20:34.216 --> 00:20:35.806
We provide two built-in styles.

00:20:35.936 --> 00:20:37.556
We have the outlineOverlay

00:20:37.556 --> 00:20:39.216
style, which is that nice bold

00:20:39.216 --> 00:20:40.276
white outline that you've seen

00:20:40.276 --> 00:20:41.546
in several of our examples.

00:20:42.116 --> 00:20:42.916
And then we also have a

00:20:42.916 --> 00:20:44.276
roundedBackground style, which

00:20:44.276 --> 00:20:45.776
looks great behind text items.

00:20:47.546 --> 00:20:49.116
Now if you're particularly

00:20:49.116 --> 00:20:50.126
observant, you may have noticed

00:20:50.126 --> 00:20:51.266
that the NSScrubber selection

00:20:51.266 --> 00:20:52.796
style declaration is not

00:20:52.796 --> 00:20:53.726
enclosed enumeration.

00:20:53.726 --> 00:20:54.576
It's actually a class.

00:20:55.156 --> 00:20:56.496
And so you can subclass this and

00:20:56.496 --> 00:20:57.786
define your own selection styles

00:20:57.786 --> 00:20:58.376
if you'd like.

00:21:01.066 --> 00:21:02.526
One other fun cosmetic option

00:21:02.526 --> 00:21:03.516
for selections is this

00:21:03.576 --> 00:21:05.256
floatSelectionViews property.

00:21:06.156 --> 00:21:08.006
When it's false, changing

00:21:08.006 --> 00:21:09.306
selection looks pretty much like

00:21:09.306 --> 00:21:09.866
you'd expect.

00:21:09.866 --> 00:21:11.126
The old selection disappears and

00:21:11.126 --> 00:21:11.946
then the new one appears

00:21:11.946 --> 00:21:12.516
immediately.

00:21:13.496 --> 00:21:15.446
But if we set this to true, we

00:21:15.446 --> 00:21:18.226
actually get a nice, smoothly

00:21:18.226 --> 00:21:19.666
floating and gliding selection,

00:21:19.666 --> 00:21:20.566
which is kind of a very cool

00:21:20.626 --> 00:21:21.000
effect.

00:21:24.526 --> 00:21:25.496
There's one other trick that you

00:21:25.496 --> 00:21:26.526
may have noticed in several of

00:21:26.526 --> 00:21:27.296
our examples.

00:21:28.366 --> 00:21:29.536
Some of these controls, when you

00:21:29.536 --> 00:21:30.996
scroll, flick, or pan through

00:21:30.996 --> 00:21:33.126
them, always glide smoothly so

00:21:33.126 --> 00:21:34.746
that some item always lands

00:21:34.816 --> 00:21:36.216
neatly in one place, in this

00:21:36.216 --> 00:21:36.966
case the center.

00:21:37.006 --> 00:21:38.266
And that's controlled with the

00:21:38.266 --> 00:21:39.436
itemAlignment property.

00:21:40.116 --> 00:21:41.396
Now by default this is none,

00:21:41.466 --> 00:21:42.526
which means that we won't do any

00:21:42.526 --> 00:21:43.636
kind of adjustment on your

00:21:43.636 --> 00:21:45.046
scroll, but if you set it to

00:21:45.046 --> 00:21:46.406
leading, trailing, or center,

00:21:46.686 --> 00:21:48.466
after a scroll event, flicking,

00:21:48.466 --> 00:21:49.886
panning, momentum, anything like

00:21:49.886 --> 00:21:51.796
that, will always adjust it so

00:21:51.796 --> 00:21:53.296
that some item appears neatly

00:21:53.296 --> 00:21:54.576
aligned with either a leading,

00:21:54.576 --> 00:21:55.716
trailing, or center of the

00:21:55.716 --> 00:21:56.000
control.

00:21:59.336 --> 00:22:01.216
Finally, NSScrubber as a couple

00:22:01.216 --> 00:22:02.616
of nice cosmetic options for the

00:22:02.716 --> 00:22:04.146
area behind your content,

00:22:04.276 --> 00:22:06.026
including a background color, or

00:22:06.056 --> 00:22:07.216
if you want to draw anything you

00:22:07.216 --> 00:22:08.256
like, you can place it in view

00:22:08.256 --> 00:22:09.086
behind your content.

00:22:10.336 --> 00:22:12.216
And we actually provide a named

00:22:12.216 --> 00:22:13.666
color on NSColor called the

00:22:13.666 --> 00:22:14.806
scrubberTexturedBackground

00:22:14.806 --> 00:22:17.026
color, which works great in the

00:22:17.026 --> 00:22:18.026
backgroundColor property to

00:22:18.026 --> 00:22:19.646
provide this cool textured

00:22:19.936 --> 00:22:21.236
vertically hashed appearance

00:22:21.236 --> 00:22:22.096
which you may have noticed in

00:22:22.096 --> 00:22:23.076
apps like Calendar.

00:22:23.616 --> 00:22:25.986
Now that seems like a lot of

00:22:25.986 --> 00:22:27.356
properties, but if we pull it

00:22:27.356 --> 00:22:28.546
all together, we can fully

00:22:28.546 --> 00:22:30.076
configure an NSScrubber in only

00:22:30.076 --> 00:22:31.006
a couple lines of code.

00:22:32.376 --> 00:22:34.196
So, we create our control, and

00:22:34.196 --> 00:22:35.446
then we assign it a layout, a

00:22:35.446 --> 00:22:36.816
delegate, and a dataSource.

00:22:36.856 --> 00:22:37.906
We won't dwell on this, but I

00:22:37.906 --> 00:22:38.896
promise we'll look at each of

00:22:38.896 --> 00:22:40.186
them in turn in just a moment.

00:22:41.296 --> 00:22:42.216
We decide how we want to

00:22:42.216 --> 00:22:43.246
interact with the control.

00:22:43.896 --> 00:22:45.006
In this case we want one that

00:22:45.006 --> 00:22:46.606
scrolls freely, but has a

00:22:46.606 --> 00:22:47.896
continuous selection as we

00:22:47.896 --> 00:22:48.266
scroll.

00:22:48.806 --> 00:22:50.036
And then we also want the

00:22:50.036 --> 00:22:51.226
itemAlignment to be center so

00:22:51.226 --> 00:22:53.136
that after we scroll, some item

00:22:53.136 --> 00:22:54.166
always lands neatly in the

00:22:54.166 --> 00:22:54.436
middle.

00:22:56.056 --> 00:22:56.896
Then we'll choose what we want

00:22:56.896 --> 00:22:58.226
our selection to look like, in

00:22:58.226 --> 00:22:59.066
this case we're going to apply

00:22:59.066 --> 00:23:00.416
both of the built-in effects.

00:23:00.606 --> 00:23:01.606
And we'll turn on that nice

00:23:01.606 --> 00:23:03.006
floating selection so that as

00:23:03.006 --> 00:23:04.456
the selection changes, it floats

00:23:04.456 --> 00:23:05.726
neatly between the views.

00:23:06.786 --> 00:23:07.816
And then finally we'll apply

00:23:07.816 --> 00:23:08.926
that cool textured background

00:23:08.926 --> 00:23:09.206
color.

00:23:09.896 --> 00:23:10.986
And with just these couple of

00:23:10.986 --> 00:23:12.276
lines of code, we've produced

00:23:12.276 --> 00:23:13.516
the blueprint for exactly

00:23:13.516 --> 00:23:14.576
Calendar's scrubber that we've

00:23:14.576 --> 00:23:15.546
been looking at this entire

00:23:15.546 --> 00:23:15.876
time.

00:23:16.686 --> 00:23:20.176
Now that we've configured the

00:23:20.176 --> 00:23:21.526
control the way that we'd like,

00:23:22.076 --> 00:23:23.456
we need to layout the items.

00:23:23.496 --> 00:23:25.126
And that's done with the

00:23:25.126 --> 00:23:26.276
NSScrubberLayout class.

00:23:27.226 --> 00:23:28.446
This defines the arrangement of

00:23:28.446 --> 00:23:29.396
all of the content within the

00:23:29.396 --> 00:23:31.096
control and it does this

00:23:31.096 --> 00:23:32.396
abstractly using these

00:23:32.396 --> 00:23:33.726
NSScrubberLayoutAttributes

00:23:33.726 --> 00:23:34.876
objects, which are essentially

00:23:34.876 --> 00:23:36.546
value types that bundle up in

00:23:36.546 --> 00:23:38.486
itemIndex, and where it should

00:23:38.486 --> 00:23:39.506
be laid out within the

00:23:39.506 --> 00:23:42.256
coordinate space of its content.

00:23:43.346 --> 00:23:45.126
We provide a couple of built in

00:23:45.126 --> 00:23:46.666
layouts that you can just pull

00:23:46.666 --> 00:23:47.736
off the shelf and use if you'd

00:23:47.736 --> 00:23:48.956
like to, you know, just really

00:23:48.956 --> 00:23:50.356
quickly get started and that

00:23:50.356 --> 00:23:51.746
includes a flow layout, which is

00:23:51.746 --> 00:23:54.256
comparable to NSCollectionView

00:23:54.256 --> 00:23:54.876
flow layout.

00:23:55.456 --> 00:23:56.346
But if you want to define your

00:23:56.346 --> 00:23:57.946
own, it's really not very hard.

00:23:58.216 --> 00:23:59.926
There's only three key methods

00:23:59.926 --> 00:24:00.576
that you really need to

00:24:00.576 --> 00:24:01.056
implement.

00:24:01.936 --> 00:24:03.956
The first, scrubberContentSize

00:24:03.996 --> 00:24:05.296
defines the entire size of

00:24:05.296 --> 00:24:06.926
everything in the control, and

00:24:07.066 --> 00:24:08.406
this defines how far we can

00:24:08.406 --> 00:24:09.446
scroll within all of the

00:24:09.446 --> 00:24:10.000
content.

00:24:11.256 --> 00:24:12.086
There is

00:24:12.086 --> 00:24:13.406
layoutAttributesForItems in

00:24:13.406 --> 00:24:15.846
rectangle, which provides a set

00:24:15.846 --> 00:24:17.246
of the attributes for every item

00:24:17.246 --> 00:24:18.576
that falls within some specific

00:24:18.576 --> 00:24:19.056
rectangle.

00:24:19.456 --> 00:24:20.546
And that might be the currently

00:24:20.546 --> 00:24:22.046
visible rectangle or it might be

00:24:22.046 --> 00:24:23.146
one that the user is about to

00:24:23.146 --> 00:24:24.126
scroll to and you want to get

00:24:24.126 --> 00:24:25.186
ready and lay everything out.

00:24:25.186 --> 00:24:27.406
And then finally,

00:24:27.406 --> 00:24:28.656
layoutAttributesForItem at

00:24:28.656 --> 00:24:29.776
index, so we can determine the

00:24:29.776 --> 00:24:31.756
layout for some specific item if

00:24:31.756 --> 00:24:33.056
we need to.

00:24:34.736 --> 00:24:36.476
The other half of the layout

00:24:36.476 --> 00:24:38.406
life cycle is invalidation.

00:24:39.396 --> 00:24:40.906
InvalidateLayout signals to the

00:24:40.906 --> 00:24:41.916
control that your layout has

00:24:41.916 --> 00:24:43.436
changed in some way and it needs

00:24:43.436 --> 00:24:45.346
to refresh new fresh layout

00:24:45.346 --> 00:24:46.766
information from the NSScrubber

00:24:46.766 --> 00:24:47.176
layout.

00:24:48.526 --> 00:24:49.706
Now, if your layout depends on

00:24:49.706 --> 00:24:50.696
certain information like the

00:24:50.696 --> 00:24:52.086
selection highlight or visible

00:24:52.086 --> 00:24:53.436
rectangle like maybe you want to

00:24:53.436 --> 00:24:55.026
make the selection be twice as

00:24:55.026 --> 00:24:57.056
large as every other item, you

00:24:57.056 --> 00:24:58.376
can optionally request that your

00:24:58.446 --> 00:25:00.366
automatically invalidated when

00:25:00.366 --> 00:25:01.306
those things change.

00:25:01.526 --> 00:25:02.416
And this prevents you from

00:25:02.416 --> 00:25:04.136
having to track that information

00:25:04.136 --> 00:25:05.466
yourself and manually call

00:25:05.466 --> 00:25:06.326
invalidate layout.

00:25:07.786 --> 00:25:09.716
Finally, after your layouts been

00:25:09.716 --> 00:25:11.706
invalidated, before we do any

00:25:11.706 --> 00:25:12.946
further layout passes, we'll

00:25:12.946 --> 00:25:14.336
call the prepare method on your

00:25:14.336 --> 00:25:15.066
layout object.

00:25:15.456 --> 00:25:16.696
The base implementation doesn't

00:25:16.696 --> 00:25:18.056
do anything but this is a great

00:25:18.056 --> 00:25:19.916
opportunity for your subclass to

00:25:20.146 --> 00:25:21.776
run some calculations, do some

00:25:21.776 --> 00:25:22.756
measurements, and prepare some

00:25:22.756 --> 00:25:24.206
caches so that subsequent

00:25:24.206 --> 00:25:25.596
outcalls are really fast.

00:25:26.186 --> 00:25:28.966
And that's all you need to do to

00:25:28.966 --> 00:25:29.866
put together a layout.

00:25:30.986 --> 00:25:31.966
Now that we've configured our

00:25:31.966 --> 00:25:33.356
control and we want, we know how

00:25:33.356 --> 00:25:34.266
we want to arrange all of our

00:25:34.266 --> 00:25:35.456
content, we need to get our

00:25:35.456 --> 00:25:36.826
content into the control in the

00:25:36.826 --> 00:25:37.616
first place.

00:25:39.416 --> 00:25:40.916
Content in NSScrubber is

00:25:40.916 --> 00:25:42.316
represented using simple views,

00:25:42.316 --> 00:25:43.436
subclasses of the

00:25:43.436 --> 00:25:45.496
NSScrubberItemView class, and

00:25:45.496 --> 00:25:46.416
that's comparable to

00:25:46.576 --> 00:25:47.506
NSTableCellView.

00:25:48.916 --> 00:25:50.556
Like NSTableCell, or like

00:25:50.556 --> 00:25:52.066
NSTable and NSCollectionView,

00:25:52.526 --> 00:25:54.046
NSScrubber provides a reuse

00:25:54.046 --> 00:25:54.936
queue so that you can

00:25:54.936 --> 00:25:56.476
efficiently recycle views as

00:25:56.476 --> 00:25:57.756
they cycle out of the control,

00:25:58.206 --> 00:25:59.496
rather than allocating a brand

00:25:59.496 --> 00:26:00.466
new one every time it's

00:26:00.466 --> 00:26:01.046
requested.

00:26:01.846 --> 00:26:03.396
The dataSource protocol for

00:26:03.496 --> 00:26:04.776
NSScrubber is really super

00:26:04.776 --> 00:26:05.166
simple.

00:26:05.386 --> 00:26:06.796
There's only two methods that

00:26:06.796 --> 00:26:07.556
you have to implement.

00:26:08.146 --> 00:26:09.356
The numberOfItems in the entire

00:26:09.356 --> 00:26:10.756
control, and then you just need

00:26:10.756 --> 00:26:12.516
to be able to prepare a view

00:26:12.516 --> 00:26:14.106
that represents a specific item.

00:26:15.716 --> 00:26:17.036
To aid you in this task, we have

00:26:17.036 --> 00:26:18.646
two built-in NSScrubberItemView

00:26:18.646 --> 00:26:19.426
subclasses.

00:26:19.556 --> 00:26:21.806
We have a TextItem and all you

00:26:21.806 --> 00:26:22.916
need to do is provide a string

00:26:22.916 --> 00:26:24.036
that you'd like to present and

00:26:24.036 --> 00:26:25.086
we'll present it in a way that

00:26:25.086 --> 00:26:26.446
is consistent with many similar

00:26:26.446 --> 00:26:27.606
controls across the operating

00:26:27.606 --> 00:26:27.976
system.

00:26:28.846 --> 00:26:30.086
And then we also have an image

00:26:30.086 --> 00:26:32.296
view class, which provides

00:26:32.296 --> 00:26:34.276
aspect fill presentation of your

00:26:34.276 --> 00:26:35.486
image and then allows you to

00:26:35.486 --> 00:26:36.986
specify an alignment beyond

00:26:37.876 --> 00:26:38.000
that.

00:26:38.726 --> 00:26:39.736
Now, if neither of these are

00:26:39.736 --> 00:26:40.906
exactly what you're looking for,

00:26:41.156 --> 00:26:42.306
you can alway subclass

00:26:42.356 --> 00:26:43.726
NSScrubberItemView and just do

00:26:43.726 --> 00:26:44.916
whatever drawing you'd like.

00:26:45.906 --> 00:26:47.166
When you do this, you get access

00:26:47.166 --> 00:26:48.486
to a couple of nice properties.

00:26:48.486 --> 00:26:49.506
You get isSelected and

00:26:49.506 --> 00:26:50.876
isHighlighted, which you can use

00:26:50.876 --> 00:26:52.076
to alter your drawing based on

00:26:52.076 --> 00:26:52.626
that state.

00:26:52.976 --> 00:26:53.796
And your drawing will be

00:26:53.796 --> 00:26:55.166
automatically invalidated when

00:26:55.166 --> 00:26:56.266
these change so you don't need

00:26:56.266 --> 00:26:57.256
to observe them yourself.

00:26:57.886 --> 00:26:59.766
And you can also override the

00:26:59.766 --> 00:27:01.176
applyLayoutAttributes method,

00:27:01.526 --> 00:27:03.176
which allows you to inspect and

00:27:03.176 --> 00:27:04.316
interpret the attributes, which

00:27:04.316 --> 00:27:05.456
were produced by the layout

00:27:05.456 --> 00:27:05.966
object.

00:27:06.546 --> 00:27:08.966
And that's how you provide

00:27:08.966 --> 00:27:09.446
content.

00:27:10.296 --> 00:27:12.116
Finally, we assume that the user

00:27:12.116 --> 00:27:13.756
is going to use this, this

00:27:13.756 --> 00:27:14.806
control and so we want to

00:27:14.806 --> 00:27:15.546
respond to that.

00:27:16.566 --> 00:27:17.996
And that's done using a delegate

00:27:17.996 --> 00:27:18.486
protocol.

00:27:19.186 --> 00:27:20.176
You can be informed when the

00:27:20.176 --> 00:27:21.596
selection changes, the highlight

00:27:21.596 --> 00:27:23.546
changes, and if the range of the

00:27:23.546 --> 00:27:24.636
visible items in the control

00:27:24.636 --> 00:27:26.056
changes due to either scrolling

00:27:26.056 --> 00:27:27.226
or layout.

00:27:28.096 --> 00:27:29.396
You can also be informed when

00:27:29.396 --> 00:27:31.236
interaction begins, ends, or is

00:27:31.236 --> 00:27:31.756
cancelled.

00:27:32.006 --> 00:27:33.226
And this might be useful for

00:27:33.226 --> 00:27:35.116
example, to create an undo

00:27:35.206 --> 00:27:36.606
grouping around a single

00:27:36.606 --> 00:27:37.716
interaction with the control.

00:27:37.716 --> 00:27:39.226
So, as the user is rapidly

00:27:39.226 --> 00:27:40.496
scrubbing through, you can

00:27:40.496 --> 00:27:42.556
bundle all of those changes into

00:27:42.556 --> 00:27:43.786
a single undo grouping.

00:27:44.716 --> 00:27:48.466
And that's all you need to do to

00:27:48.466 --> 00:27:49.256
put together your own

00:27:49.326 --> 00:27:49.946
NSScrubber.

00:27:49.946 --> 00:27:52.636
I hope you've, you've come up

00:27:52.636 --> 00:27:53.626
with some great ideas for

00:27:53.626 --> 00:27:54.776
content in your application you

00:27:54.776 --> 00:27:55.896
can surface with this control.

00:27:57.346 --> 00:28:00.666
But, we've -- between the

00:28:00.666 --> 00:28:03.066
Fundamentals talk and this one,

00:28:03.546 --> 00:28:04.446
we spent a lot of time

00:28:04.446 --> 00:28:05.546
explaining how to use AppKit's

00:28:05.546 --> 00:28:07.566
built-in controls and classes to

00:28:07.566 --> 00:28:08.606
really build up your Touch Bar

00:28:08.606 --> 00:28:09.216
experience.

00:28:10.066 --> 00:28:11.736
But if you want to, to really

00:28:11.736 --> 00:28:13.176
unleash your creativity and

00:28:13.176 --> 00:28:14.456
build something truly custom,

00:28:14.946 --> 00:28:16.136
you're going to want to stay put

00:28:16.136 --> 00:28:17.056
for the next section where

00:28:17.056 --> 00:28:18.096
Taylor is going to walk you

00:28:18.096 --> 00:28:19.746
through doing -- doing

00:28:20.056 --> 00:28:22.166
completely custom controls for

00:28:22.166 --> 00:28:22.716
Touch Bar.

00:28:23.776 --> 00:28:23.926
Thanks.

00:28:24.338 --> 00:28:26.338
[ Applause ]

00:28:27.616 --> 00:28:30.336
>> Here they go.

00:28:31.346 --> 00:28:35.446
Hello. So, when it comes to

00:28:35.446 --> 00:28:36.786
building custom controls for the

00:28:36.786 --> 00:28:38.506
Touch Bar there are four areas

00:28:38.506 --> 00:28:39.566
that you want to keep in mind.

00:28:40.186 --> 00:28:41.916
The first is handling the touch

00:28:41.916 --> 00:28:42.996
events that are coming in.

00:28:43.676 --> 00:28:45.506
Second is styling your view so

00:28:45.506 --> 00:28:46.616
it looks and feels at home in

00:28:46.616 --> 00:28:47.176
the Touch Bar.

00:28:47.956 --> 00:28:49.436
Third is making sure it's the

00:28:49.436 --> 00:28:51.076
right size and position amongst

00:28:51.076 --> 00:28:52.096
all the other controls.

00:28:52.586 --> 00:28:54.036
And finally it's tying

00:28:54.036 --> 00:28:55.386
everything together by applying

00:28:55.386 --> 00:28:56.396
a little bit of animation.

00:28:57.286 --> 00:28:58.626
Let's get started with event

00:28:58.626 --> 00:28:59.026
handling.

00:28:59.296 --> 00:29:01.196
Now the obvious thing here is

00:29:01.196 --> 00:29:02.876
that we have direct touches on

00:29:02.876 --> 00:29:03.126
the Mac.

00:29:04.126 --> 00:29:05.266
And I really want to qualify the

00:29:05.266 --> 00:29:07.006
difference between direct and

00:29:07.006 --> 00:29:07.776
indirect touches.

00:29:08.886 --> 00:29:09.946
Those of you who are might be

00:29:09.946 --> 00:29:11.386
iList developers are already

00:29:11.386 --> 00:29:12.526
familiar with this distinction

00:29:12.806 --> 00:29:14.236
where you have direct touches,

00:29:14.236 --> 00:29:14.936
where you're directly

00:29:14.936 --> 00:29:16.256
manipulating content on the

00:29:16.256 --> 00:29:18.116
iPhone or iPad versus the

00:29:18.116 --> 00:29:19.826
indirect touches on the Siri

00:29:19.826 --> 00:29:21.356
Remote's touch surface.

00:29:21.626 --> 00:29:22.336
Where you're remotely

00:29:22.336 --> 00:29:23.296
interacting content that's

00:29:23.296 --> 00:29:24.226
actually on the TV.

00:29:25.346 --> 00:29:26.966
On the new MacBook Pros, we have

00:29:27.086 --> 00:29:28.246
both of these in a single

00:29:28.246 --> 00:29:28.886
device.

00:29:29.656 --> 00:29:31.106
We've already had indirect

00:29:31.106 --> 00:29:32.456
touches on the gesture-rich

00:29:32.456 --> 00:29:33.826
trackpads, where you can get

00:29:33.826 --> 00:29:35.916
access to individual touches on

00:29:35.916 --> 00:29:36.466
that trackpad.

00:29:37.726 --> 00:29:39.006
Now, with the Touch Bar, we

00:29:39.006 --> 00:29:40.496
support having direct touches

00:29:40.496 --> 00:29:41.376
where you can directly

00:29:41.376 --> 00:29:42.656
manipulate content on the

00:29:42.656 --> 00:29:43.096
screen.

00:29:43.666 --> 00:29:46.756
So, the existing NSTouch class

00:29:46.756 --> 00:29:48.226
has now been extended to add a

00:29:48.226 --> 00:29:49.886
TouchType to describe whether it

00:29:49.886 --> 00:29:51.086
is this direct or indirect

00:29:51.086 --> 00:29:51.486
touch.

00:29:52.526 --> 00:29:53.926
For direct touches, you can now

00:29:53.926 --> 00:29:55.136
get the location of that touch

00:29:55.246 --> 00:29:56.146
provided some view.

00:29:56.696 --> 00:29:57.616
And providing that view is

00:29:57.616 --> 00:29:59.156
extremely important because it

00:29:59.156 --> 00:30:00.406
provides the coordinate space

00:30:00.406 --> 00:30:01.306
for what that point will be

00:30:01.306 --> 00:30:01.966
relative to.

00:30:03.016 --> 00:30:04.436
As an example, when the user

00:30:04.436 --> 00:30:06.576
taps down on the slider, we want

00:30:06.576 --> 00:30:07.606
to get the location of that

00:30:07.606 --> 00:30:09.486
touch, relative to the slider as

00:30:09.486 --> 00:30:11.126
a whole, and we can take that

00:30:11.126 --> 00:30:12.376
offset and simply divide it by

00:30:12.376 --> 00:30:14.016
the overall width to get our new

00:30:14.016 --> 00:30:14.446
value.

00:30:15.076 --> 00:30:16.116
It's pretty straightforward.

00:30:17.386 --> 00:30:19.066
Now, one very important

00:30:19.066 --> 00:30:20.526
difference with NSTouch and

00:30:20.526 --> 00:30:22.606
UITouch is that while UITouch is

00:30:22.606 --> 00:30:23.996
this long lived object whose

00:30:23.996 --> 00:30:25.536
location will update over time,

00:30:25.986 --> 00:30:27.156
NSTouch is essentially a

00:30:27.156 --> 00:30:28.766
value-type snapshot of that

00:30:28.766 --> 00:30:31.446
touch on -- at a certain point

00:30:31.446 --> 00:30:32.606
in time in that gesture.

00:30:33.226 --> 00:30:34.226
And you can use the identify

00:30:34.226 --> 00:30:35.956
property to tie a sequence of

00:30:35.956 --> 00:30:37.366
touches together when forming a

00:30:37.366 --> 00:30:37.826
gesture.

00:30:38.616 --> 00:30:39.976
So, as events are coming in

00:30:39.976 --> 00:30:41.376
through the Touch Bar, each of

00:30:41.376 --> 00:30:42.366
these events will contain a

00:30:42.366 --> 00:30:44.086
collection of one or more

00:30:44.086 --> 00:30:44.526
touches.

00:30:45.616 --> 00:30:46.636
And each of these touches are

00:30:46.636 --> 00:30:48.236
unique instances, so again the

00:30:48.236 --> 00:30:49.696
way you tie them together is by

00:30:49.696 --> 00:30:50.666
looking at that identity

00:30:50.666 --> 00:30:51.116
property.

00:30:52.166 --> 00:30:53.356
So, even when the user touches

00:30:53.356 --> 00:30:54.866
down with multiple fingers, we

00:30:54.866 --> 00:30:56.076
can distinguish which is the one

00:30:56.076 --> 00:30:58.986
we're tracking by comparing its

00:30:58.986 --> 00:31:00.616
identity to the one that we're

00:31:00.616 --> 00:31:01.016
tracking.

00:31:01.016 --> 00:31:02.666
We can make this a little bit

00:31:02.666 --> 00:31:03.816
more concrete with some code.

00:31:04.426 --> 00:31:05.656
So, we want to keep a variable

00:31:05.656 --> 00:31:06.856
to hold onto that opaque

00:31:06.856 --> 00:31:07.746
identity object.

00:31:08.326 --> 00:31:09.576
When we first get some touches

00:31:09.576 --> 00:31:10.986
on our view, we go through

00:31:10.986 --> 00:31:12.696
those, pick up the first one,

00:31:13.066 --> 00:31:14.506
and save its identity as the one

00:31:14.506 --> 00:31:15.076
we're tracking.

00:31:15.866 --> 00:31:17.056
Later, when additional touches

00:31:17.056 --> 00:31:18.576
come in, we go through the ones

00:31:18.576 --> 00:31:20.806
that have changed, and compare

00:31:20.806 --> 00:31:21.746
each of their identity to the

00:31:21.746 --> 00:31:23.156
one we're tracking to find our

00:31:23.156 --> 00:31:23.836
new touch.

00:31:24.266 --> 00:31:25.646
We can now use that new location

00:31:25.646 --> 00:31:27.496
to update any events in our

00:31:27.496 --> 00:31:27.786
view.

00:31:29.136 --> 00:31:30.336
Now, where do these events and

00:31:30.336 --> 00:31:31.166
touches come from?

00:31:31.836 --> 00:31:32.946
Well, one place are these

00:31:32.946 --> 00:31:34.506
existing NSResponder methods

00:31:34.686 --> 00:31:36.686
touchesBegan, Moved, Ended, and

00:31:36.686 --> 00:31:38.226
Cancelled, which will be called

00:31:38.226 --> 00:31:39.476
back over the lifecycle of our

00:31:39.476 --> 00:31:39.806
view.

00:31:40.636 --> 00:31:41.836
We can opt into receiving them

00:31:41.836 --> 00:31:43.166
by setting the allowedTouchTypes

00:31:43.166 --> 00:31:44.476
to include direct or indirect

00:31:44.476 --> 00:31:46.006
touches, but once you link on

00:31:46.006 --> 00:31:47.536
the Sierra SDK, you'll be

00:31:47.536 --> 00:31:48.666
automatically opted in to

00:31:48.666 --> 00:31:51.256
receiving direct touches.

00:31:51.396 --> 00:31:52.786
One really important method here

00:31:52.786 --> 00:31:53.916
is toucheisCancelled.

00:31:54.716 --> 00:31:55.516
While there's not really a

00:31:55.516 --> 00:31:57.016
notion of cancelling mouse

00:31:57.016 --> 00:31:58.286
tracking events, this is

00:31:58.286 --> 00:31:59.266
extremely important for the

00:31:59.266 --> 00:32:00.676
Touch Bar because it's so

00:32:00.676 --> 00:32:01.566
context sensitive.

00:32:02.316 --> 00:32:03.736
As the user switches active

00:32:03.736 --> 00:32:05.246
applications, or active windows,

00:32:05.576 --> 00:32:06.606
the content in the Touch Bar

00:32:06.606 --> 00:32:08.596
will reflect that and if the

00:32:08.596 --> 00:32:09.826
user's interacting with any

00:32:09.826 --> 00:32:11.376
views at that moment, we'll send

00:32:11.376 --> 00:32:12.846
touchesCancelled so it can clean

00:32:12.846 --> 00:32:14.566
up any event handling, but

00:32:14.566 --> 00:32:15.606
separate that from the user

00:32:15.606 --> 00:32:16.696
actually lifting their finger.

00:32:17.166 --> 00:32:19.236
However, for the most part, you

00:32:19.236 --> 00:32:20.006
actually don't have to worry

00:32:20.006 --> 00:32:21.436
about this, and you can just use

00:32:21.436 --> 00:32:22.686
gestureRecognizers.

00:32:23.236 --> 00:32:24.236
These have gained all these same

00:32:24.236 --> 00:32:26.206
methods to for subclasses to

00:32:26.206 --> 00:32:27.206
implement so they can handle

00:32:27.206 --> 00:32:28.616
touches, as well as the same

00:32:28.616 --> 00:32:29.996
opt-in method with the only

00:32:29.996 --> 00:32:30.966
difference here being your

00:32:30.966 --> 00:32:32.296
explicitly have to opt-in,

00:32:32.656 --> 00:32:33.806
there's no automatic link check.

00:32:35.186 --> 00:32:36.276
And pretty much you can use all

00:32:36.276 --> 00:32:37.556
the built in GestureRecognizers,

00:32:37.556 --> 00:32:38.886
which now work in the Touch Bar.

00:32:39.576 --> 00:32:40.666
For instance, the color picker

00:32:40.666 --> 00:32:42.086
simply uses a combination of

00:32:42.136 --> 00:32:43.776
press and pan recognizers to

00:32:43.776 --> 00:32:44.826
implement all of its event

00:32:44.826 --> 00:32:45.196
handling.

00:32:45.606 --> 00:32:46.836
It had to do no extra work.

00:32:46.836 --> 00:32:49.106
But it's important to remember

00:32:49.106 --> 00:32:50.576
even for these you still do have

00:32:50.576 --> 00:32:52.086
to opt them in to receiving

00:32:52.086 --> 00:32:53.546
direct touches when you do use

00:32:53.546 --> 00:32:55.906
them in the Touch Bar.

00:32:56.126 --> 00:32:57.256
Now, one really interesting

00:32:57.256 --> 00:32:58.356
context when it comes to event

00:32:58.356 --> 00:32:59.376
handling, are inside

00:32:59.376 --> 00:33:00.506
Press-and-Hold popovers.

00:33:01.326 --> 00:33:02.486
In the Fundamentals section you

00:33:02.486 --> 00:33:03.346
heard how you can set the

00:33:03.346 --> 00:33:04.666
Press-and-Hold Touch Bar of your

00:33:04.666 --> 00:33:06.936
NSTouchBar to have it when the

00:33:06.936 --> 00:33:08.086
user long presses on that

00:33:08.116 --> 00:33:09.766
button, for it to immediately

00:33:09.766 --> 00:33:10.796
present some very simple lists

00:33:10.796 --> 00:33:11.000
like UI.

00:33:12.586 --> 00:33:13.546
You can put your own custom

00:33:13.546 --> 00:33:14.826
views in here and as the user

00:33:14.826 --> 00:33:16.206
continues that gesture and pans

00:33:16.206 --> 00:33:17.816
over your view, you'll get call

00:33:17.816 --> 00:33:19.866
to touchesBegan, Moved, and

00:33:19.866 --> 00:33:21.466
Cancelled as they exit the view,

00:33:21.746 --> 00:33:22.726
and finally once they lift their

00:33:22.726 --> 00:33:23.846
finger, the Touch Bar will be

00:33:23.846 --> 00:33:24.406
dismissed.

00:33:25.306 --> 00:33:26.406
However, because of this very

00:33:26.406 --> 00:33:27.656
unique event handling model,

00:33:27.886 --> 00:33:29.016
GestureRecognizers are not

00:33:29.016 --> 00:33:30.366
supported in this context, so

00:33:30.416 --> 00:33:31.306
you have to use those

00:33:31.306 --> 00:33:32.226
NSResponder methods.

00:33:33.116 --> 00:33:34.236
However, again, outside of

00:33:34.296 --> 00:33:35.756
Press-and-Hold popovers it's so

00:33:35.756 --> 00:33:36.966
much simpler just to use

00:33:36.966 --> 00:33:37.836
GestureRecognizers.

00:33:39.506 --> 00:33:41.036
One very interesting aspect of

00:33:41.036 --> 00:33:42.656
the Touch Bar is around event

00:33:42.656 --> 00:33:43.376
modality.

00:33:44.266 --> 00:33:45.386
Since the Touch Bar is this

00:33:45.386 --> 00:33:47.016
input device akin to a keyboard

00:33:47.146 --> 00:33:48.486
it should always be responsive.

00:33:48.846 --> 00:33:50.106
Just because the user's dragging

00:33:50.106 --> 00:33:51.136
something around on the screen

00:33:51.136 --> 00:33:52.326
doesn't mean your keyboard stops

00:33:52.326 --> 00:33:52.716
working.

00:33:53.536 --> 00:33:54.796
So, even where you previously

00:33:54.796 --> 00:33:56.446
had a modal event-tracking loop,

00:33:56.836 --> 00:33:57.786
the Touch Bar will still be

00:33:57.786 --> 00:33:59.676
responsive and still be able to

00:33:59.676 --> 00:34:00.606
issue state changes.

00:34:01.346 --> 00:34:02.306
So, you might want to go back

00:34:02.306 --> 00:34:03.046
and actually look at those

00:34:03.046 --> 00:34:04.246
event-tracking loops to make

00:34:04.246 --> 00:34:05.266
sure they can handle the type of

00:34:05.266 --> 00:34:06.466
state changes that could occur.

00:34:07.786 --> 00:34:09.016
In addition, the Touch Bar

00:34:09.016 --> 00:34:10.616
itself is capable of multitouch.

00:34:10.996 --> 00:34:12.856
So, while the user's interacting

00:34:12.856 --> 00:34:14.295
with one control, they could

00:34:14.295 --> 00:34:15.735
begin and end interacting with

00:34:15.735 --> 00:34:16.136
another.

00:34:16.136 --> 00:34:17.716
And again, you want to make sure

00:34:17.716 --> 00:34:18.676
you can handle those state

00:34:18.676 --> 00:34:19.045
changes.

00:34:20.436 --> 00:34:22.116
However, once you do that,

00:34:22.116 --> 00:34:23.356
you're afforded a lot of really

00:34:23.356 --> 00:34:24.396
interesting interaction

00:34:24.396 --> 00:34:26.235
opportunities by combining all

00:34:26.235 --> 00:34:27.866
the input devices that exist on

00:34:27.866 --> 00:34:28.666
this device.

00:34:29.416 --> 00:34:30.596
You can create either really

00:34:30.596 --> 00:34:31.795
advanced work flows for your

00:34:31.795 --> 00:34:33.396
users or these kind of

00:34:33.396 --> 00:34:34.656
delightful experiences that the

00:34:34.656 --> 00:34:35.976
user's might discover by playing

00:34:35.976 --> 00:34:36.426
around.

00:34:37.386 --> 00:34:38.126
For instance, in the

00:34:38.126 --> 00:34:40.456
customization UI, we've added

00:34:40.516 --> 00:34:42.406
individual pan recognizers to

00:34:42.406 --> 00:34:44.416
each item, so that users can tab

00:34:44.416 --> 00:34:45.956
down with multiple fingers and

00:34:45.956 --> 00:34:47.536
reorder multiple items at once.

00:34:49.065 --> 00:34:50.966
Similarly, the color picker has

00:34:51.146 --> 00:34:52.525
Press-and-Pan recognizers on

00:34:52.525 --> 00:34:54.246
each individual slider, so you

00:34:54.246 --> 00:34:55.275
could be editing multiple

00:34:55.275 --> 00:34:57.156
components at once, or while

00:34:57.156 --> 00:34:58.496
your'e editing that color, you

00:34:58.496 --> 00:34:59.636
can save it to your favorites

00:34:59.756 --> 00:35:00.626
all at the same time.

00:35:00.626 --> 00:35:02.356
And that's just using

00:35:02.356 --> 00:35:03.036
Multi-Touch.

00:35:03.396 --> 00:35:04.246
Once you combine it in the

00:35:04.246 --> 00:35:05.526
keyboard or trackpad, you can

00:35:05.526 --> 00:35:06.596
really take things to the next

00:35:06.596 --> 00:35:08.266
level, such as being able to

00:35:08.266 --> 00:35:09.926
edit the color of your text as

00:35:09.926 --> 00:35:11.676
you're entering it, or editing

00:35:11.676 --> 00:35:13.476
properties of your cursor as

00:35:13.476 --> 00:35:14.326
you're moving around.

00:35:15.536 --> 00:35:16.486
So, I really encourage you to

00:35:16.546 --> 00:35:17.986
think about how you can easily

00:35:17.986 --> 00:35:19.486
use gestureRecognizers to add

00:35:19.486 --> 00:35:20.646
this event handling support for

00:35:20.646 --> 00:35:22.276
your app while also

00:35:22.276 --> 00:35:23.676
simul-handing these simultaneous

00:35:23.676 --> 00:35:24.296
state changes.

00:35:25.596 --> 00:35:26.846
Next, let's take a look at

00:35:26.846 --> 00:35:27.936
styling and appearance.

00:35:28.576 --> 00:35:30.746
And so, obviously the styling

00:35:30.746 --> 00:35:31.766
inside of the Touch Bar is

00:35:31.766 --> 00:35:33.396
extremely different from the

00:35:33.396 --> 00:35:34.616
[inaudible] on the main display.

00:35:35.246 --> 00:35:36.136
I'm going to cover a number of

00:35:36.136 --> 00:35:37.646
these areas, but I want to start

00:35:37.646 --> 00:35:38.506
with something that you might

00:35:38.506 --> 00:35:39.526
not have even noticed.

00:35:40.206 --> 00:35:40.996
This is something that you can

00:35:40.996 --> 00:35:42.356
only see by taking your MacBook

00:35:42.396 --> 00:35:44.086
Pro into different environments.

00:35:44.876 --> 00:35:46.006
So, our standard stock photos

00:35:46.006 --> 00:35:46.936
look something like this with

00:35:46.936 --> 00:35:49.006
nice even lighting, if you use

00:35:49.006 --> 00:35:49.936
it in a bright studio

00:35:49.936 --> 00:35:50.896
environment, or maybe even take

00:35:50.896 --> 00:35:51.866
it outside, it might look

00:35:51.866 --> 00:35:52.996
something closer to this.

00:35:53.746 --> 00:35:54.586
If you're like me you might

00:35:54.626 --> 00:35:55.876
primarily use it in the dark,

00:35:55.876 --> 00:35:57.466
and it's pretty cool how the

00:35:57.466 --> 00:35:59.116
blacks on that OLED display

00:35:59.116 --> 00:36:00.356
basically disappear.

00:36:01.236 --> 00:36:03.086
And finally, if you get pretty

00:36:03.086 --> 00:36:04.616
tired as it gets later on in the

00:36:04.616 --> 00:36:05.356
night, you might turn on the

00:36:05.356 --> 00:36:06.636
keyboard backlight and get that

00:36:06.636 --> 00:36:07.326
nice glow.

00:36:08.136 --> 00:36:09.246
And so, while physically the

00:36:09.246 --> 00:36:10.586
MacBook Pro looks very different

00:36:10.586 --> 00:36:11.936
in all these environments, the

00:36:11.936 --> 00:36:13.366
Touch Bar content is actually

00:36:13.366 --> 00:36:14.236
adjusting as well.

00:36:14.956 --> 00:36:16.056
The bezel colors of the

00:36:16.056 --> 00:36:17.516
different controls is adjusting

00:36:17.516 --> 00:36:19.696
to that ambient brightness, and

00:36:19.696 --> 00:36:21.116
even the glyphs within the

00:36:21.116 --> 00:36:23.006
controls is reacting to that

00:36:23.136 --> 00:36:24.326
white point change of the

00:36:24.326 --> 00:36:25.206
keyboard backlight.

00:36:26.216 --> 00:36:27.566
And so if you implementing your

00:36:27.566 --> 00:36:29.186
own custom controls, you want to

00:36:29.186 --> 00:36:29.966
make sure that you can do the

00:36:29.966 --> 00:36:30.386
same.

00:36:31.086 --> 00:36:32.036
And thankfully this is pretty

00:36:32.036 --> 00:36:33.976
easy by using system colors.

00:36:34.566 --> 00:36:36.226
These are existing named colors

00:36:36.226 --> 00:36:37.806
that semantically describe how

00:36:37.806 --> 00:36:39.606
they should be used, and once

00:36:39.606 --> 00:36:41.336
you go to draw with them, that's

00:36:41.336 --> 00:36:42.276
when they'll be dynamically

00:36:42.276 --> 00:36:43.366
resolved against their current

00:36:43.366 --> 00:36:45.026
context to determine what color

00:36:45.026 --> 00:36:46.706
should be drawn with, taking

00:36:46.706 --> 00:36:47.906
into consideration if it's being

00:36:47.906 --> 00:36:49.246
used in the Touch Bar versus

00:36:49.246 --> 00:36:50.826
Aqua, as well as whether the

00:36:50.826 --> 00:36:51.996
white point or brightness has

00:36:51.996 --> 00:36:52.496
changed.

00:36:53.886 --> 00:36:55.576
In addition, new in High Sierra

00:36:55.686 --> 00:36:57.146
is this expressive palette of

00:36:57.146 --> 00:36:59.496
colors that you can use to match

00:36:59.496 --> 00:37:00.976
system UI and have been

00:37:00.976 --> 00:37:02.326
specifically designed for the

00:37:02.326 --> 00:37:04.236
out glow appearance and for the

00:37:04.516 --> 00:37:07.086
Touch Bar.

00:37:07.286 --> 00:37:08.386
So, one important thing to keep

00:37:08.386 --> 00:37:09.696
in mind is how you draw with

00:37:09.696 --> 00:37:11.096
these colors in order to take

00:37:11.096 --> 00:37:12.296
advantage of all that context

00:37:12.296 --> 00:37:12.896
sensitivity.

00:37:13.526 --> 00:37:15.606
So, if you're using layers to

00:37:15.606 --> 00:37:17.066
draw your views, you might be

00:37:17.066 --> 00:37:18.816
tempted to init with frame,

00:37:18.816 --> 00:37:20.276
ViewDidLoad or immediate

00:37:20.276 --> 00:37:21.316
response to event handling,

00:37:21.646 --> 00:37:22.566
immediately update the

00:37:22.566 --> 00:37:23.616
properties of your layers.

00:37:24.406 --> 00:37:25.436
And you don't want to do this

00:37:25.436 --> 00:37:26.596
because when you get that CG

00:37:26.596 --> 00:37:28.196
color to set it on the layer,

00:37:28.196 --> 00:37:29.786
that will immediately resolve

00:37:29.786 --> 00:37:31.116
those RGB values against

00:37:31.116 --> 00:37:32.126
whatever the current context

00:37:32.126 --> 00:37:32.836
happens to be.

00:37:33.726 --> 00:37:34.656
So, as the whitepoint or

00:37:34.656 --> 00:37:35.866
brightness changes over time,

00:37:36.166 --> 00:37:37.546
your layers will stay exactly as

00:37:37.546 --> 00:37:38.926
they were at this moment.

00:37:40.106 --> 00:37:41.136
So, what should we do instead?

00:37:41.636 --> 00:37:42.456
Well, we can override this

00:37:42.456 --> 00:37:44.166
method called updateLayer and

00:37:44.286 --> 00:37:45.766
well, update our layers there.

00:37:46.386 --> 00:37:46.956
This will get called

00:37:46.956 --> 00:37:48.246
automatically for you when your

00:37:48.246 --> 00:37:49.836
view is displayed, such as the

00:37:49.836 --> 00:37:51.206
first time it's shown on screen

00:37:51.206 --> 00:37:52.176
or windows white point or

00:37:52.176 --> 00:37:53.166
brightness changes.

00:37:54.036 --> 00:37:55.466
And if you have a dynamic color

00:37:55.466 --> 00:37:56.596
that you actually want to set,

00:37:56.816 --> 00:37:57.736
it's important that you hold

00:37:57.736 --> 00:37:59.756
onto that color as an NSColor

00:38:00.156 --> 00:38:01.186
because again this maintains

00:38:01.186 --> 00:38:02.246
that semantic nature of the

00:38:02.246 --> 00:38:04.086
color as well as the context

00:38:04.086 --> 00:38:04.756
sensitivity.

00:38:05.776 --> 00:38:07.096
Any time that color changes, you

00:38:07.096 --> 00:38:08.486
just set needsDisplay to true

00:38:08.656 --> 00:38:10.046
and we'll recall this method for

00:38:10.046 --> 00:38:10.246
you.

00:38:10.806 --> 00:38:13.346
This same exact approach can be

00:38:13.346 --> 00:38:14.206
used if you're using

00:38:14.276 --> 00:38:15.906
DrawRectBasedViews, where here

00:38:15.906 --> 00:38:16.886
the only difference is that

00:38:16.886 --> 00:38:17.806
you're setting that color

00:38:18.106 --> 00:38:19.286
against the current context.

00:38:19.886 --> 00:38:22.566
So, that's how you can use these

00:38:22.566 --> 00:38:23.606
custom colors and your own

00:38:23.606 --> 00:38:24.306
custom drawing.

00:38:24.906 --> 00:38:25.896
However, a number of our

00:38:25.896 --> 00:38:27.186
controls support customization

00:38:27.186 --> 00:38:28.446
of their colors just out of the

00:38:28.446 --> 00:38:29.046
box.

00:38:29.856 --> 00:38:31.256
You can now set the bezel color

00:38:31.256 --> 00:38:32.956
of your NS buttons, the selected

00:38:32.956 --> 00:38:34.616
segment color or even the fill

00:38:34.616 --> 00:38:35.766
color of your sliders.

00:38:36.406 --> 00:38:37.456
You can use our built in system

00:38:37.456 --> 00:38:38.716
colors or even your own customer

00:38:38.716 --> 00:38:40.406
colors if you have some overall

00:38:40.406 --> 00:38:40.786
app theme.

00:38:41.726 --> 00:38:43.216
What's really cool here is that

00:38:43.216 --> 00:38:44.456
the text and image effects

00:38:44.456 --> 00:38:45.576
within these controls is

00:38:45.576 --> 00:38:46.866
actually adjusting depending on

00:38:46.866 --> 00:38:47.806
the lightness of the colors

00:38:47.806 --> 00:38:48.286
you're setting.

00:38:48.786 --> 00:38:50.206
You actually don't have to do

00:38:50.206 --> 00:38:52.566
any work to get that.

00:38:52.786 --> 00:38:53.486
One thing you might have seen

00:38:53.486 --> 00:38:54.886
across the system are these

00:38:54.966 --> 00:38:56.506
default button blue colors.

00:38:57.086 --> 00:38:58.306
And it's important to note that

00:38:58.306 --> 00:38:59.626
this not achieved by setting the

00:38:59.626 --> 00:39:00.876
systemBlue color as the

00:39:00.876 --> 00:39:01.596
bezelColor.

00:39:02.036 --> 00:39:02.916
There's actually a subtly

00:39:02.916 --> 00:39:04.086
different color that's used for

00:39:04.086 --> 00:39:05.746
these, and you can get that

00:39:05.776 --> 00:39:07.706
keyEquivalent to the return key,

00:39:08.076 --> 00:39:08.886
just like you would have done on

00:39:08.886 --> 00:39:09.586
the main display.

00:39:10.166 --> 00:39:12.706
One thing you might have noticed

00:39:12.706 --> 00:39:14.286
in these past few slides as well

00:39:14.286 --> 00:39:15.966
is that the Esc key has been

00:39:15.966 --> 00:39:17.156
replaced by this Done button.

00:39:17.156 --> 00:39:18.656
And this is pretty easy to

00:39:18.656 --> 00:39:19.686
achieve by setting the

00:39:19.686 --> 00:39:20.816
escapeKeyReplacement

00:39:20.816 --> 00:39:22.646
ItemIdentifier on your presented

00:39:22.716 --> 00:39:24.816
NSTouchBar and whatever control

00:39:24.816 --> 00:39:26.346
that references will be placed

00:39:26.346 --> 00:39:27.406
in that Esc key region.

00:39:28.566 --> 00:39:29.546
However, it's important to

00:39:29.546 --> 00:39:30.696
consider if an when you should

00:39:30.696 --> 00:39:31.596
be using this.

00:39:32.036 --> 00:39:33.176
It should really only be used

00:39:33.226 --> 00:39:34.536
when the user has entered into

00:39:34.536 --> 00:39:36.456
some modal context and they can

00:39:36.716 --> 00:39:38.236
use that control to exit that

00:39:38.236 --> 00:39:38.776
context.

00:39:39.606 --> 00:39:40.766
Any actions they take in this

00:39:40.766 --> 00:39:42.556
context should be undoable, so

00:39:42.556 --> 00:39:44.136
if I edit my photo here and tap

00:39:44.136 --> 00:39:45.746
Done, I can still undo that

00:39:45.746 --> 00:39:46.546
change afterwards.

00:39:47.736 --> 00:39:48.906
And finally, you don't want to

00:39:48.906 --> 00:39:50.166
be adding explicit constraints

00:39:50.166 --> 00:39:51.146
to this button to try and make

00:39:51.146 --> 00:39:52.326
it be the standard size of the

00:39:52.326 --> 00:39:52.936
Esc key.

00:39:53.386 --> 00:39:54.446
We'll automatically apply

00:39:54.446 --> 00:39:55.586
metrics to make it be that

00:39:55.586 --> 00:39:57.596
standard size as well as even

00:39:57.596 --> 00:39:58.996
adjust the padding around the

00:39:58.996 --> 00:40:00.806
text to fit the most characters

00:40:00.806 --> 00:40:01.296
possible.

00:40:02.356 --> 00:40:03.526
So, for instance, we found that

00:40:03.526 --> 00:40:05.726
the longest translation of Done

00:40:05.726 --> 00:40:06.776
is [foreign language] and even

00:40:06.776 --> 00:40:08.006
that is able to fit in with

00:40:08.006 --> 00:40:09.036
these adjusted metrics.

00:40:10.006 --> 00:40:11.806
However, as a last resort we

00:40:11.806 --> 00:40:13.276
will allow this control to grow

00:40:13.276 --> 00:40:14.546
in case there are some

00:40:14.786 --> 00:40:16.176
extenuating circumstances.

00:40:16.886 --> 00:40:19.056
Now another really important

00:40:19.056 --> 00:40:20.026
aspect of the styling in the

00:40:20.026 --> 00:40:21.146
Touch Bar is when it comes to

00:40:21.146 --> 00:40:21.676
the font.

00:40:22.616 --> 00:40:23.426
Now you might have noticed that

00:40:23.426 --> 00:40:24.516
the font has changed within the

00:40:24.516 --> 00:40:26.496
Touch Bar on the main display in

00:40:26.496 --> 00:40:28.406
Aqua, we use a standard font of

00:40:28.576 --> 00:40:30.836
San Francisco UI size 13.

00:40:31.296 --> 00:40:32.526
And in Touch Bar we use

00:40:32.526 --> 00:40:33.376
something actually closer to the

00:40:33.376 --> 00:40:35.406
Watch, San Francisco Condensed

00:40:35.546 --> 00:40:36.396
size 15.

00:40:36.906 --> 00:40:38.066
So, the family and the size have

00:40:38.066 --> 00:40:38.766
both changed.

00:40:39.436 --> 00:40:40.226
And those of you who have

00:40:40.226 --> 00:40:41.446
followed the font Mac font

00:40:41.446 --> 00:40:42.736
transition perhaps all the way

00:40:42.736 --> 00:40:44.616
from Chicago to Charcoal, to

00:40:44.616 --> 00:40:46.596
Lucida to Helvetica to San

00:40:46.596 --> 00:40:48.216
Francisco, know that you should

00:40:48.216 --> 00:40:49.526
not be hardcoding your fonts in

00:40:49.526 --> 00:40:51.256
your application, and instead

00:40:51.256 --> 00:40:52.716
you can use systemFont of size

00:40:52.716 --> 00:40:54.486
0, which will give you back this

00:40:54.526 --> 00:40:56.466
dynamic font that when used will

00:40:56.466 --> 00:40:57.766
be resolved against its current

00:40:57.766 --> 00:40:59.466
context, just like those system

00:40:59.466 --> 00:41:01.066
colors, and pick the right

00:41:01.066 --> 00:41:02.006
family and size.

00:41:03.026 --> 00:41:03.906
In addition, there's a weight

00:41:03.906 --> 00:41:05.086
variance that you can get

00:41:05.086 --> 00:41:07.576
thinner or bolder fonts, and

00:41:07.576 --> 00:41:08.386
another really interesting

00:41:08.386 --> 00:41:09.236
aspect of font you might have

00:41:09.236 --> 00:41:10.906
noticed are these monospaced

00:41:10.906 --> 00:41:12.136
digits used in things like the

00:41:12.136 --> 00:41:14.086
AVKit Player or even the

00:41:14.086 --> 00:41:15.946
component value of the sliders.

00:41:16.596 --> 00:41:17.996
And even as the value changes,

00:41:17.996 --> 00:41:19.346
those numbers aren't jiggling as

00:41:19.346 --> 00:41:20.226
the metrics adjust.

00:41:20.476 --> 00:41:21.536
They're monospaced.

00:41:22.246 --> 00:41:23.526
And so you can get this by using

00:41:23.526 --> 00:41:25.136
the monospacedDigitSystemFont of

00:41:25.136 --> 00:41:27.416
size weight to get this same

00:41:27.416 --> 00:41:27.826
effect.

00:41:28.816 --> 00:41:29.936
Now, there are actually a ton

00:41:29.936 --> 00:41:31.176
more interesting typographic

00:41:31.176 --> 00:41:32.426
features when it comes to San

00:41:32.426 --> 00:41:34.216
Francisco, and there are some

00:41:34.216 --> 00:41:35.506
great talks in the past few

00:41:35.506 --> 00:41:36.446
years that I'd recommend

00:41:36.446 --> 00:41:37.306
checking out if you're

00:41:37.306 --> 00:41:38.266
interested in learning more.

00:41:39.646 --> 00:41:40.816
However, the other important

00:41:40.816 --> 00:41:42.196
type of glyphs in the Touch Bar

00:41:42.196 --> 00:41:43.596
are, of course, images.

00:41:45.006 --> 00:41:47.786
And, since the Touch Bar is this

00:41:47.826 --> 00:41:49.706
P3 Retina display, all you need

00:41:49.706 --> 00:41:51.526
to provide are 2x assets for the

00:41:51.526 --> 00:41:52.426
images used there.

00:41:53.026 --> 00:41:53.846
However, they should be

00:41:53.846 --> 00:41:55.336
specifically designed for the

00:41:55.336 --> 00:41:55.826
Touch Bar.

00:41:56.226 --> 00:41:56.876
You shouldn't just take your

00:41:56.876 --> 00:41:58.326
toolbar icons and plop them in.

00:41:59.596 --> 00:42:00.866
In addition, you should be using

00:42:00.866 --> 00:42:01.776
template rendering to take

00:42:01.776 --> 00:42:02.796
advantage of those white point

00:42:02.796 --> 00:42:03.846
and brightness adjustments I

00:42:03.846 --> 00:42:04.616
mentioned earlier.

00:42:05.836 --> 00:42:07.256
To illustrate this, let's say

00:42:07.256 --> 00:42:08.176
we're making a custom light

00:42:08.216 --> 00:42:08.516
button.

00:42:09.116 --> 00:42:10.256
We've specifically designed it

00:42:10.256 --> 00:42:11.546
nicely for the Touch Bar, and

00:42:11.546 --> 00:42:12.936
we're using it alongside a bunch

00:42:12.936 --> 00:42:14.026
of other standard icons.

00:42:14.616 --> 00:42:15.416
For the most part it looks

00:42:15.416 --> 00:42:17.306
pretty good, except for later

00:42:17.306 --> 00:42:18.546
that night, we take it home and

00:42:18.546 --> 00:42:19.336
we turn on our computer

00:42:19.336 --> 00:42:20.716
backlight and it looks something

00:42:20.716 --> 00:42:21.366
like this.

00:42:21.936 --> 00:42:23.546
All the other icons adjust and

00:42:23.546 --> 00:42:24.936
our icon basically sticks out

00:42:24.936 --> 00:42:25.756
like a sore thumb.

00:42:26.596 --> 00:42:27.736
So, let's not do this.

00:42:28.146 --> 00:42:31.136
Instead what we can use, is

00:42:31.136 --> 00:42:32.276
provide an image that

00:42:32.276 --> 00:42:34.016
communicates its shape purely

00:42:34.016 --> 00:42:36.126
via the alpha channel and uses

00:42:36.126 --> 00:42:37.146
template rendering so that

00:42:37.146 --> 00:42:38.706
AppKit can take care of all of

00:42:38.706 --> 00:42:40.426
the different styling that might

00:42:40.426 --> 00:42:41.676
occur for that image such as the

00:42:41.676 --> 00:42:43.706
white or even the blue styling

00:42:43.826 --> 00:42:44.946
when the whitepoint is adjusted.

00:42:46.436 --> 00:42:47.496
Now, before you have your

00:42:47.496 --> 00:42:48.506
designers go off and create a

00:42:48.506 --> 00:42:49.826
bunch of awesome icon

00:42:49.826 --> 00:42:51.176
specifically for the Touch Bar

00:42:51.356 --> 00:42:52.376
to take advantage of template

00:42:52.376 --> 00:42:53.946
rendering, do be sure to check

00:42:53.946 --> 00:42:55.106
out all of the standard icons

00:42:55.106 --> 00:42:55.886
that the system already

00:42:55.886 --> 00:42:56.306
provides.

00:42:56.926 --> 00:42:57.816
There are really a lot of them

00:42:57.816 --> 00:42:58.936
here and the Human Interface

00:42:58.936 --> 00:42:59.976
Guidelines goes over all of

00:42:59.976 --> 00:43:00.146
them.

00:43:00.146 --> 00:43:01.826
And what's really cool is that

00:43:01.826 --> 00:43:02.996
these are all public constants

00:43:03.026 --> 00:43:04.716
provided by NSImage so you can

00:43:04.716 --> 00:43:06.066
very easily drop them into your

00:43:06.066 --> 00:43:07.716
application with really not a

00:43:07.716 --> 00:43:09.376
lot of work.

00:43:09.566 --> 00:43:11.236
So, those are some aspects of

00:43:11.236 --> 00:43:12.686
styling an appearance, what's

00:43:12.686 --> 00:43:13.886
really cool is that for the most

00:43:13.886 --> 00:43:15.096
part, you can just use system

00:43:15.096 --> 00:43:16.306
standard techniques and get a

00:43:16.306 --> 00:43:17.566
lot of this behavior for free.

00:43:19.036 --> 00:43:20.506
Next, let's talk about layout.

00:43:20.686 --> 00:43:23.056
In the Fundamentals section, you

00:43:23.056 --> 00:43:24.336
saw how the standard item layout

00:43:24.336 --> 00:43:25.586
is to simply stack the items

00:43:25.586 --> 00:43:27.006
along inside the Touch Bar.

00:43:27.726 --> 00:43:29.116
You can use flexible spaces to

00:43:29.116 --> 00:43:30.056
give your items a little bit of

00:43:30.056 --> 00:43:31.546
breathing room, or you can use

00:43:31.546 --> 00:43:32.916
the principal item to center a

00:43:32.916 --> 00:43:34.286
single or group of items.

00:43:35.526 --> 00:43:37.176
Now, layout in NSTouchBar works

00:43:37.176 --> 00:43:39.116
very similarly to NSStackView,

00:43:39.656 --> 00:43:40.826
where the items themselves

00:43:40.826 --> 00:43:42.166
provide their sizing information

00:43:42.596 --> 00:43:44.146
and NSTouchBar positions them

00:43:44.356 --> 00:43:45.206
based on that size.

00:43:46.376 --> 00:43:47.416
And when it comes to describing

00:43:47.416 --> 00:43:48.946
that size, it works exactly like

00:43:48.946 --> 00:43:49.816
it does outside of the Touch

00:43:49.816 --> 00:43:50.000
Bar.

00:43:52.226 --> 00:43:53.376
For instance, you do override

00:43:53.376 --> 00:43:54.816
intrinsicContentSize and

00:43:54.816 --> 00:43:55.836
calculate the size you want your

00:43:55.836 --> 00:43:57.186
control to be and just return

00:43:57.186 --> 00:43:57.406
that.

00:43:58.316 --> 00:43:59.946
In case any state changes, such

00:43:59.946 --> 00:44:01.136
as the button's title changing,

00:44:01.676 --> 00:44:02.706
and when you want to note that

00:44:02.706 --> 00:44:04.066
the intrinsicContentSize has

00:44:04.066 --> 00:44:05.526
changed, you can call

00:44:05.526 --> 00:44:07.146
invalidateIntrinsicContentSize

00:44:07.466 --> 00:44:08.886
and NSTouchBar will relay

00:44:08.886 --> 00:44:09.446
everything out.

00:44:10.766 --> 00:44:11.626
Another approach that you might

00:44:11.626 --> 00:44:13.186
have used in the past was to add

00:44:13.186 --> 00:44:14.556
an explicit widthConstraint to

00:44:14.556 --> 00:44:15.956
your control and then update

00:44:15.956 --> 00:44:17.006
that constant over time.

00:44:17.616 --> 00:44:19.306
This again works, the same way,

00:44:19.546 --> 00:44:21.256
and NSTouchBar will again lay

00:44:21.256 --> 00:44:22.486
everything out.

00:44:24.676 --> 00:44:25.816
When you're building custom

00:44:25.816 --> 00:44:27.306
controls, you also might have

00:44:27.306 --> 00:44:29.116
flexibly sized controls similar

00:44:29.116 --> 00:44:30.866
to NSSlider or NSScrubber, and

00:44:31.386 --> 00:44:32.586
here the only difference is that

00:44:32.586 --> 00:44:33.836
that simply doesn't have a width

00:44:33.876 --> 00:44:35.266
constraint, or it has an

00:44:35.266 --> 00:44:36.626
intrinsic content width of

00:44:36.626 --> 00:44:37.606
noIntrinsicMetric.

00:44:38.586 --> 00:44:39.936
NSTouch Bar will take all of the

00:44:39.936 --> 00:44:41.346
available space within the Touch

00:44:41.376 --> 00:44:43.146
Bar and divide it up amongst all

00:44:43.146 --> 00:44:44.256
these flexible controls.

00:44:44.946 --> 00:44:46.516
In this example, the slider is

00:44:46.516 --> 00:44:47.766
the only control in there so it

00:44:47.766 --> 00:44:49.046
takes up the entire application

00:44:49.046 --> 00:44:49.326
region.

00:44:50.426 --> 00:44:51.566
Now, if we want to restrict it

00:44:51.566 --> 00:44:53.046
to a minimum and maximum size,

00:44:53.546 --> 00:44:55.026
we can simply add inequality

00:44:55.026 --> 00:44:56.616
constraints just like we did

00:44:56.706 --> 00:44:57.576
outside the Touch Bar.

00:44:58.336 --> 00:45:00.056
NSTouchBar will follow that

00:45:00.056 --> 00:45:00.536
right along.

00:45:01.516 --> 00:45:02.616
What's really great about having

00:45:02.616 --> 00:45:04.626
this flexibility is, as the user

00:45:04.866 --> 00:45:06.406
customizes in additional items,

00:45:06.766 --> 00:45:08.176
they're still some flexibility

00:45:08.176 --> 00:45:09.356
around how big that control can

00:45:09.356 --> 00:45:10.916
be, and the user can really make

00:45:10.916 --> 00:45:12.296
the most out of their Touch Bar.

00:45:12.886 --> 00:45:15.266
So, that's how you can customize

00:45:15.266 --> 00:45:16.236
the sizing and layout of

00:45:16.296 --> 00:45:17.326
individual items.

00:45:17.556 --> 00:45:18.326
But you also might want to

00:45:18.326 --> 00:45:19.606
coordinate the layout across

00:45:19.606 --> 00:45:20.296
groups of items.

00:45:21.806 --> 00:45:23.506
One new thing in High Sierra is

00:45:23.506 --> 00:45:24.816
that prefersEqualWidths property

00:45:24.816 --> 00:45:26.326
on GroupTouchBarItem where you

00:45:26.326 --> 00:45:27.506
can have all the items within

00:45:27.506 --> 00:45:28.916
that group prefer to be equal

00:45:28.916 --> 00:45:29.156
width.

00:45:30.166 --> 00:45:31.266
What's cool is that this works

00:45:31.266 --> 00:45:32.516
with user customization.

00:45:32.796 --> 00:45:34.196
So, not only can users customize

00:45:34.196 --> 00:45:35.506
items in and out of this equal

00:45:35.506 --> 00:45:37.596
sizing group, but the equal

00:45:37.596 --> 00:45:39.466
sizing only effects the items

00:45:39.466 --> 00:45:40.656
that are actually present in the

00:45:40.656 --> 00:45:42.226
Touch Bar, it's not relative to

00:45:42.226 --> 00:45:43.706
all the possible items that the

00:45:43.706 --> 00:45:44.366
user could add.

00:45:45.376 --> 00:45:46.556
This also works really nicely

00:45:46.556 --> 00:45:47.356
with localization.

00:45:47.966 --> 00:45:48.726
In case one of these buttons

00:45:48.726 --> 00:45:49.866
becomes extremely long when

00:45:49.866 --> 00:45:51.536
localized, we'll choose to break

00:45:51.536 --> 00:45:52.886
that equal width rather than

00:45:52.956 --> 00:45:55.006
overflow the Touch Bar and then

00:45:55.006 --> 00:45:56.166
cause items to be hidden.

00:45:57.626 --> 00:45:59.436
However, sometimes that overflow

00:45:59.436 --> 00:46:00.196
might just happen.

00:46:00.386 --> 00:46:02.046
And that's where visibility

00:46:02.046 --> 00:46:03.126
priority comes into play.

00:46:04.716 --> 00:46:06.166
Here you see some start window

00:46:06.166 --> 00:46:07.546
UI that looks pretty nice in

00:46:07.546 --> 00:46:09.036
English, but when we initially

00:46:09.036 --> 00:46:10.406
run it in German, it looks

00:46:10.406 --> 00:46:11.286
something like this.

00:46:12.056 --> 00:46:13.586
There's no clipping, however the

00:46:13.586 --> 00:46:14.666
New Collection button has become

00:46:14.666 --> 00:46:15.006
missing.

00:46:15.656 --> 00:46:16.756
And the reason is that all the

00:46:16.756 --> 00:46:18.256
items in the Touch Bar can't fit

00:46:18.256 --> 00:46:19.506
in the space that we've allotted

00:46:20.056 --> 00:46:21.386
and so NSTouchBar has overflowed

00:46:21.386 --> 00:46:22.596
that New Collection button and

00:46:22.596 --> 00:46:22.966
hidden it.

00:46:23.616 --> 00:46:24.996
In this example, we might

00:46:24.996 --> 00:46:26.546
instead want to hide that

00:46:26.656 --> 00:46:27.976
Bookmarks button instead of the

00:46:27.976 --> 00:46:29.726
New Collection button and we can

00:46:29.726 --> 00:46:30.526
do that by setting its

00:46:30.526 --> 00:46:32.366
visibilityPriority to be lower

00:46:32.456 --> 00:46:33.446
than all of the rest.

00:46:33.936 --> 00:46:35.366
And NSTouchBar will detach the

00:46:35.366 --> 00:46:36.496
lower ones first.

00:46:37.356 --> 00:46:38.026
And this time we'll get

00:46:38.026 --> 00:46:39.536
something like this, which is a

00:46:39.536 --> 00:46:41.386
bit better but really it's not a

00:46:41.386 --> 00:46:42.706
great user experience to hide

00:46:42.746 --> 00:46:43.336
any items.

00:46:43.946 --> 00:46:44.966
So, in this case, we could

00:46:44.966 --> 00:46:46.036
probably do a bit better.

00:46:46.736 --> 00:46:48.026
And using the new Compression

00:46:48.026 --> 00:46:50.236
behavior in High Sierra, we can.

00:46:51.506 --> 00:46:52.966
So, in this example, we can note

00:46:52.966 --> 00:46:54.276
that the titles of the different

00:46:54.276 --> 00:46:55.276
buttons actually fully

00:46:55.276 --> 00:46:56.596
communicate what effect they'll

00:46:56.596 --> 00:46:56.886
have.

00:46:57.396 --> 00:46:59.186
And so instead of dropping any

00:46:59.186 --> 00:47:00.846
items, we can drop those hidden

00:47:00.846 --> 00:47:01.696
images instead.

00:47:02.626 --> 00:47:03.626
We can set the prioritize

00:47:03.626 --> 00:47:04.746
compression options of this

00:47:04.746 --> 00:47:06.666
group to be hideImages and now

00:47:06.666 --> 00:47:08.256
when we run in German, it looks

00:47:08.256 --> 00:47:08.836
like this.

00:47:09.696 --> 00:47:10.836
What's really cool is that this

00:47:10.836 --> 00:47:11.736
happens atomically.

00:47:12.186 --> 00:47:13.196
We don't end up with half the

00:47:13.196 --> 00:47:14.286
buttons having images and half

00:47:14.286 --> 00:47:15.616
of them not, it's an all or

00:47:15.616 --> 00:47:16.186
nothing thing.

00:47:16.846 --> 00:47:17.686
And there's really a lot of

00:47:17.686 --> 00:47:18.496
flexibility here.

00:47:19.036 --> 00:47:20.156
We can instead think that our

00:47:20.156 --> 00:47:22.926
icons are descriptive enough and

00:47:22.926 --> 00:47:24.816
opt to hide the text instead in

00:47:24.816 --> 00:47:25.886
which case we get this.

00:47:26.756 --> 00:47:28.066
And you can even go so far as if

00:47:28.066 --> 00:47:29.446
you have your own custom ways

00:47:29.446 --> 00:47:30.916
that your custom controls can

00:47:30.916 --> 00:47:33.166
compress, you can add additional

00:47:33.166 --> 00:47:34.616
options to these prioritize

00:47:34.616 --> 00:47:36.886
options to describe that your

00:47:36.886 --> 00:47:38.316
custom control should compress

00:47:38.416 --> 00:47:40.026
in those different ways.

00:47:40.676 --> 00:47:42.046
So, these are a few ways that

00:47:42.046 --> 00:47:43.196
you can use different group

00:47:43.236 --> 00:47:44.956
Touch Bar properties to control

00:47:44.956 --> 00:47:46.076
the group layout of your items.

00:47:46.716 --> 00:47:48.056
However, the container views

00:47:48.056 --> 00:47:48.926
that you're used to using

00:47:48.926 --> 00:47:50.546
outside the Touch Bar, can also

00:47:50.546 --> 00:47:51.476
be used within.

00:47:52.636 --> 00:47:53.566
There was a really great talk

00:47:53.566 --> 00:47:54.816
earlier today "Choosing the

00:47:54.816 --> 00:47:56.026
right Cocoa Container View" that

00:47:56.026 --> 00:47:56.836
discussed some of the

00:47:56.836 --> 00:47:58.426
differences between these as

00:47:58.456 --> 00:48:00.126
used outside the Touch Bar, but

00:48:00.126 --> 00:48:00.986
I'd like to highlight a few of

00:48:00.986 --> 00:48:02.076
the ways that you can use them

00:48:02.106 --> 00:48:02.476
within.

00:48:03.916 --> 00:48:05.476
You can use NSStackView to have

00:48:05.476 --> 00:48:06.766
really precise control of the

00:48:06.766 --> 00:48:08.566
spacing or sizing of your items,

00:48:08.826 --> 00:48:09.916
such as what Calendar's doing

00:48:09.916 --> 00:48:11.276
here where they've completely

00:48:11.276 --> 00:48:12.766
eliminated the spacing between

00:48:12.766 --> 00:48:13.426
these two buttons.

00:48:14.856 --> 00:48:15.936
You can also put that StackView

00:48:15.936 --> 00:48:17.556
into a ScrollView to enable

00:48:17.556 --> 00:48:19.096
scrollability of these small

00:48:19.096 --> 00:48:20.806
list of items right inside the

00:48:20.806 --> 00:48:21.256
Touch Bar.

00:48:21.806 --> 00:48:24.396
Jeff talked earlier about how

00:48:24.396 --> 00:48:26.126
you can use NSScrubber when you

00:48:26.126 --> 00:48:27.406
have these unbounded list of

00:48:27.406 --> 00:48:29.046
items where you want to maintain

00:48:29.046 --> 00:48:31.056
a selection over time as well as

00:48:31.056 --> 00:48:32.146
benefit from some of the other

00:48:32.146 --> 00:48:33.256
aspects that Scrubber can

00:48:33.256 --> 00:48:33.686
provide.

00:48:35.016 --> 00:48:36.786
Finally, you can go all the way

00:48:36.786 --> 00:48:38.366
to using NSCollectionView right

00:48:38.366 --> 00:48:39.866
in the Touch Bar to really have

00:48:39.906 --> 00:48:41.706
precise control of the layout,

00:48:42.096 --> 00:48:43.026
or completely custom

00:48:43.026 --> 00:48:44.496
interactions, such as what the

00:48:44.496 --> 00:48:45.516
favorites list in the color

00:48:45.516 --> 00:48:46.156
picker does.

00:48:46.766 --> 00:48:50.126
So, that's layout.

00:48:50.866 --> 00:48:51.716
What's really cool is that for

00:48:51.716 --> 00:48:52.896
the most part, layout works

00:48:52.896 --> 00:48:54.566
exactly like it does outside the

00:48:54.566 --> 00:48:55.896
Touch Bay, so any concepts

00:48:55.896 --> 00:48:57.136
you're used to are using, you

00:48:57.136 --> 00:48:58.236
can use within.

00:48:59.496 --> 00:49:00.686
Now finally, let's talk about

00:49:00.686 --> 00:49:02.156
how we can use layout to really

00:49:02.156 --> 00:49:03.056
tie all this together.

00:49:04.146 --> 00:49:05.456
Before we do that, I really want

00:49:05.456 --> 00:49:06.706
to reiterate that the Touch Bar

00:49:06.706 --> 00:49:08.376
is an input device and not this

00:49:08.376 --> 00:49:09.000
extra display.

00:49:09.666 --> 00:49:10.636
It's not the right venue for you

00:49:10.636 --> 00:49:11.536
to be showing off your different

00:49:11.536 --> 00:49:13.476
animation skills with animations

00:49:13.476 --> 00:49:14.566
that might be distracting from

00:49:14.566 --> 00:49:15.796
what the user's trying to focus

00:49:15.796 --> 00:49:17.196
on the main display.

00:49:17.196 --> 00:49:19.296
And any animations that you do

00:49:19.296 --> 00:49:20.956
add should always be relative to

00:49:20.956 --> 00:49:21.676
user input.

00:49:22.296 --> 00:49:23.596
And because that user input can

00:49:23.596 --> 00:49:25.416
change at any time, your

00:49:25.416 --> 00:49:26.036
animation should be

00:49:26.036 --> 00:49:27.326
interruptible and updatable.

00:49:28.516 --> 00:49:29.836
So, one obvious thing we might

00:49:29.836 --> 00:49:31.276
want to animate are the sizes of

00:49:31.276 --> 00:49:32.676
our items as they're changing.

00:49:33.646 --> 00:49:35.476
We saw earlier how we can add an

00:49:35.476 --> 00:49:36.826
explicit width constraint to

00:49:36.826 --> 00:49:38.666
control that size, and what's

00:49:38.666 --> 00:49:39.926
really great is that to actually

00:49:39.926 --> 00:49:41.756
animate that size change, all we

00:49:41.756 --> 00:49:43.166
need to do is use the animator

00:49:43.166 --> 00:49:44.616
proxy on that constraint and

00:49:44.616 --> 00:49:45.926
update its constant instead.

00:49:46.426 --> 00:49:47.636
And we get all the animation

00:49:47.636 --> 00:49:49.636
benefits that you'd expect, such

00:49:49.636 --> 00:49:51.256
as simultaneous animations and

00:49:51.256 --> 00:49:52.876
even interruptibility just with

00:49:52.876 --> 00:49:53.696
this one change.

00:49:54.266 --> 00:49:56.816
If instead we opted to use

00:49:56.816 --> 00:49:58.486
intrinsicContentSize to express

00:49:58.486 --> 00:49:59.976
the size of our items,

00:50:00.056 --> 00:50:00.246
and then

00:50:00.246 --> 00:50:01.416
invalidateIntrinsicContentSize

00:50:01.456 --> 00:50:03.236
to note it changed, what we can

00:50:03.236 --> 00:50:04.516
do here is we can wrap that in

00:50:04.516 --> 00:50:06.256
an animation group, set

00:50:06.256 --> 00:50:07.886
allowsImplicitAnimation to true,

00:50:08.146 --> 00:50:09.276
and then call layoutIfNeeded.

00:50:09.326 --> 00:50:11.056
And again we get all the same

00:50:11.056 --> 00:50:12.716
animation benefits that we saw

00:50:12.716 --> 00:50:13.506
in the other approach.

00:50:14.976 --> 00:50:16.256
Something else we might not want

00:50:16.256 --> 00:50:17.946
to animate is whether an item is

00:50:17.946 --> 00:50:18.786
flexible or not.

00:50:19.196 --> 00:50:20.476
So, we can see here as the item

00:50:20.476 --> 00:50:21.946
takes up all the available space

00:50:22.176 --> 00:50:24.516
animatedly, and the same exact

00:50:24.516 --> 00:50:25.496
technique of using that

00:50:25.496 --> 00:50:27.226
animation group can be used here

00:50:27.576 --> 00:50:28.556
with the only difference being

00:50:28.556 --> 00:50:30.216
the same as before, where when

00:50:30.216 --> 00:50:31.616
the item's considered flexible,

00:50:31.616 --> 00:50:34.116
it has a intrinsicContentSize of

00:50:34.116 --> 00:50:35.796
noIntrinsicMetric for its width.

00:50:37.326 --> 00:50:38.526
Now we can tie all this together

00:50:38.526 --> 00:50:39.636
and start to build something

00:50:39.636 --> 00:50:40.796
similar to the color picker

00:50:41.166 --> 00:50:42.556
where as you change the active

00:50:42.556 --> 00:50:44.366
item, it grows to take up all

00:50:44.366 --> 00:50:45.696
the available space and the

00:50:45.696 --> 00:50:47.356
other items shrink down.

00:50:48.876 --> 00:50:50.366
So, we can start by defining

00:50:50.366 --> 00:50:52.686
this custom AccordionView that

00:50:52.686 --> 00:50:53.996
has an active state as well as

00:50:53.996 --> 00:50:55.486
defines an intrinsicContentSize.

00:50:56.466 --> 00:50:58.416
When it's inactive, it has this

00:50:58.416 --> 00:50:59.776
small fixed size.

00:51:00.546 --> 00:51:01.676
However, once we set it to be

00:51:01.676 --> 00:51:03.306
active, we want it to have that

00:51:03.356 --> 00:51:04.936
flexible size that takes up all

00:51:04.936 --> 00:51:05.956
the available space.

00:51:06.166 --> 00:51:07.176
And again, we can use

00:51:07.176 --> 00:51:08.666
noIntrinsicMetric to achieve

00:51:08.666 --> 00:51:08.926
that.

00:51:10.186 --> 00:51:11.206
Now we stack a few of these

00:51:11.206 --> 00:51:12.606
items together in our Touch Bar,

00:51:12.606 --> 00:51:14.716
and we add pressRecognizers to

00:51:14.716 --> 00:51:15.686
each individual one.

00:51:16.896 --> 00:51:18.216
When the user taps down on one

00:51:18.216 --> 00:51:20.176
of our accordion views, we can

00:51:20.176 --> 00:51:22.346
handle that press and then take

00:51:22.346 --> 00:51:24.936
the oldActiveAccordionView and

00:51:24.936 --> 00:51:26.526
set it to be inactive, so to

00:51:26.526 --> 00:51:29.126
have that small fixed size, get

00:51:29.126 --> 00:51:31.126
the newActiveAccordionView and

00:51:31.126 --> 00:51:31.886
activate it.

00:51:32.636 --> 00:51:33.606
And finally using that

00:51:33.606 --> 00:51:35.356
allowsImplicitAnimations simply

00:51:35.356 --> 00:51:36.306
layout that change.

00:51:37.176 --> 00:51:38.776
And we get exactly what you'd

00:51:38.776 --> 00:51:39.346
expect.

00:51:39.516 --> 00:51:40.836
It's pretty straightforward.

00:51:41.446 --> 00:51:43.196
So, that's how you can animate

00:51:43.196 --> 00:51:44.596
different item size, but you

00:51:44.596 --> 00:51:45.446
also might want to animate the

00:51:45.446 --> 00:51:47.836
content within the items, such

00:51:47.836 --> 00:51:48.766
as the content within the

00:51:48.766 --> 00:51:49.446
different scrubber.

00:51:50.586 --> 00:51:52.126
Now, if you're using constraints

00:51:52.126 --> 00:51:53.456
or overriding layout and setting

00:51:53.456 --> 00:51:54.426
your frames or updating your

00:51:54.426 --> 00:51:55.946
properties there, what's really

00:51:55.946 --> 00:51:57.246
great is that there's no extra

00:51:57.246 --> 00:51:58.296
work needed to actually achieve

00:51:58.296 --> 00:51:58.676
this.

00:51:59.166 --> 00:52:00.606
So, as we resize this custom

00:52:00.606 --> 00:52:02.616
item animatedly, you'll see that

00:52:02.616 --> 00:52:04.326
the Scrubber's items flexibly

00:52:04.326 --> 00:52:06.546
resize down, fluidly resize down

00:52:07.206 --> 00:52:08.596
and even the images within them

00:52:08.646 --> 00:52:09.746
nicely resize up.

00:52:09.746 --> 00:52:11.936
And what's really cool is that

00:52:11.936 --> 00:52:13.136
there is no extra work needed on

00:52:13.136 --> 00:52:15.086
my part or by NSScrubber to

00:52:15.086 --> 00:52:15.886
achieve this effect.

00:52:16.516 --> 00:52:17.746
Because NSScrubber overrides

00:52:17.806 --> 00:52:19.486
layout to achieve all its layout

00:52:19.486 --> 00:52:22.526
and view properties, all of this

00:52:22.526 --> 00:52:23.636
came completely for free.

00:52:24.326 --> 00:52:27.106
The other type of content that

00:52:27.106 --> 00:52:28.256
you often use in your Touch Bar

00:52:28.466 --> 00:52:28.996
are buttons.

00:52:29.776 --> 00:52:31.046
Now as your state changes, you

00:52:31.046 --> 00:52:32.146
might in the past have updated

00:52:32.146 --> 00:52:33.226
the properties of these buttons,

00:52:33.706 --> 00:52:34.536
but you might want to achieve

00:52:34.536 --> 00:52:35.296
something similar to what

00:52:35.296 --> 00:52:36.676
FaceTime does where it actually

00:52:36.676 --> 00:52:38.256
animates those property changes.

00:52:39.066 --> 00:52:40.396
New in High Sierra is the

00:52:40.396 --> 00:52:41.486
ability to use the animator

00:52:41.486 --> 00:52:42.886
proxy on these buttons and

00:52:42.886 --> 00:52:43.946
update your properties there,

00:52:43.946 --> 00:52:45.336
and again you'll get these

00:52:45.336 --> 00:52:46.836
animations completely for free.

00:52:47.456 --> 00:52:49.936
If you focus in on that Remind

00:52:49.936 --> 00:52:51.316
Me Later button, you'll note

00:52:51.316 --> 00:52:52.496
that as the image position

00:52:52.496 --> 00:52:54.056
changes, so does the overall

00:52:54.056 --> 00:52:55.646
layout of the Touch Bar and we

00:52:55.646 --> 00:52:57.016
can combine all these approaches

00:52:57.106 --> 00:52:58.316
of setting the imagePosition

00:52:58.316 --> 00:52:59.676
against the animator and then

00:52:59.676 --> 00:53:01.186
using allowsImplicitAnimations

00:53:01.456 --> 00:53:02.266
to apply both of these

00:53:02.266 --> 00:53:05.906
animations all at the same time.

00:53:06.126 --> 00:53:07.346
Now, when it comes to building

00:53:07.346 --> 00:53:08.446
your own custom controls, you

00:53:08.676 --> 00:53:09.796
might also have completely

00:53:09.796 --> 00:53:11.206
custom animations that happen

00:53:11.206 --> 00:53:12.826
alongside item sizes, or maybe

00:53:12.826 --> 00:53:14.966
even independently, such as the

00:53:14.966 --> 00:53:16.896
fluid knob resize happens when

00:53:16.896 --> 00:53:18.286
you activate these sliders.

00:53:19.476 --> 00:53:20.356
Now there's a few different

00:53:20.356 --> 00:53:21.196
approaches you could actually

00:53:21.196 --> 00:53:22.946
use here, such as using the

00:53:22.946 --> 00:53:24.536
animator proxy on your custom

00:53:24.536 --> 00:53:26.356
view to animate built-in view

00:53:26.356 --> 00:53:27.756
properties or your own custom

00:53:27.756 --> 00:53:28.446
properties.

00:53:29.176 --> 00:53:30.716
You can also take explicit

00:53:30.716 --> 00:53:32.516
CAAnimations and add them to the

00:53:32.566 --> 00:53:35.466
content of that view, or if

00:53:35.466 --> 00:53:36.736
you're able to express this as a

00:53:36.736 --> 00:53:38.286
state change in your layout

00:53:38.286 --> 00:53:40.256
override, where you update your

00:53:40.256 --> 00:53:41.546
view properties there, you can

00:53:41.546 --> 00:53:42.696
again take advantage of that

00:53:42.696 --> 00:53:44.226
allowsImplicitAnimation call and

00:53:44.226 --> 00:53:45.786
actually do no extra work as

00:53:45.786 --> 00:53:47.636
part of animating that change.

00:53:49.026 --> 00:53:49.886
There was a talk from a few

00:53:49.886 --> 00:53:51.126
years ago that actually went

00:53:51.126 --> 00:53:52.226
into a lot of detail about these

00:53:52.286 --> 00:53:53.376
three different approaches and

00:53:53.376 --> 00:53:54.916
their pros and cons "Best

00:53:54.916 --> 00:53:56.256
Practices for Cocoa Animation."

00:53:56.736 --> 00:53:57.796
I'd recommend checking that out

00:53:57.796 --> 00:53:58.916
if you want to know more.

00:53:59.546 --> 00:54:02.176
So, we talked about a pretty

00:54:02.176 --> 00:54:03.606
wide variety of content today.

00:54:03.606 --> 00:54:04.946
And I hope you can take

00:54:04.946 --> 00:54:06.016
inspiration from some of these

00:54:06.016 --> 00:54:07.236
areas and actually go back and

00:54:07.236 --> 00:54:08.226
create some really rich Touch

00:54:08.226 --> 00:54:09.246
Bar content for your

00:54:09.246 --> 00:54:10.726
applications to really create a

00:54:10.726 --> 00:54:12.736
nice user experience, taking

00:54:12.736 --> 00:54:13.906
things like custom candidates in

00:54:13.906 --> 00:54:14.946
the Candidate List item,

00:54:15.316 --> 00:54:16.256
creating your own unique

00:54:16.256 --> 00:54:17.856
Scrubber layout, or combining

00:54:17.856 --> 00:54:18.896
gestureRecognizers in really

00:54:18.896 --> 00:54:21.206
unique ways to really make your

00:54:21.206 --> 00:54:22.296
UI pretty interesting.

00:54:23.076 --> 00:54:24.116
For more information, you can

00:54:24.116 --> 00:54:25.076
see this website where we have

00:54:25.076 --> 00:54:26.686
links to documentation and the

00:54:26.686 --> 00:54:27.946
Human Interface Guidelines.

00:54:28.586 --> 00:54:30.166
And most of the related sessions

00:54:30.166 --> 00:54:31.656
we have are in the past, but

00:54:31.656 --> 00:54:33.166
there's actually one tomorrow at

00:54:33.166 --> 00:54:35.056
the same time "Building Visually

00:54:35.056 --> 00:54:36.436
Rich User Experiences" that will

00:54:36.436 --> 00:54:37.586
actually go into a few tips and

00:54:37.586 --> 00:54:39.046
tricks of using Core Animation

00:54:39.386 --> 00:54:40.366
to achieve some of these really

00:54:40.366 --> 00:54:42.016
interesting effects that equally

00:54:42.016 --> 00:54:43.406
apply when used in the Touch

00:54:43.406 --> 00:54:43.660
Bar.

00:54:45.256 --> 00:54:46.446
That's it for our talk and I

00:54:46.446 --> 00:54:47.636
hope you guys have a great rest

00:54:47.636 --> 00:54:48.046
of your WWDC.

00:54:48.046 --> 00:54:48.976
Thank you.

00:54:49.508 --> 00:54:51.508
[ Applause ]