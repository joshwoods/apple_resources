WEBVTT

00:00:07.516 --> 00:00:15.500
[ Cheering ]

00:00:20.016 --> 00:00:21.476
[ Applause ]

00:00:21.476 --> 00:00:22.446
>> Good afternoon, everyone.

00:00:23.516 --> 00:00:25.616
[ Applause ]

00:00:26.116 --> 00:00:27.226
Welcome to Choosing the Right

00:00:27.226 --> 00:00:28.166
Cocoa Container View.

00:00:28.536 --> 00:00:29.746
My name is Raleigh Ledet.

00:00:30.186 --> 00:00:31.256
I'm an engineer on the AppKit

00:00:31.326 --> 00:00:32.456
team, and I'll be joined a

00:00:32.456 --> 00:00:33.676
little while later by Troy

00:00:33.676 --> 00:00:34.206
Stephens.

00:00:34.206 --> 00:00:35.366
Another engineer on the AppKit

00:00:35.366 --> 00:00:35.636
team.

00:00:35.936 --> 00:00:37.916
Let's get right into it and

00:00:38.186 --> 00:00:41.546
let's start by playing a game.

00:00:41.746 --> 00:00:43.516
Which of these is not like the

00:00:43.516 --> 00:00:43.696
other?

00:00:44.496 --> 00:00:46.446
We have five different views

00:00:46.446 --> 00:00:46.846
here.

00:00:47.926 --> 00:00:49.576
Which one of these views is not

00:00:49.576 --> 00:00:51.466
using the same style of basic

00:00:51.466 --> 00:00:52.816
container view as the other

00:00:52.816 --> 00:00:53.076
ones?

00:00:53.736 --> 00:00:55.306
Now, look carefully.

00:00:55.696 --> 00:00:56.876
It might be a little bit tricky,

00:00:57.496 --> 00:00:58.856
I see a disclosure there, I see

00:00:58.856 --> 00:00:59.986
some stuff that's indented.

00:01:00.636 --> 00:01:01.846
You've got in mind which one is

00:01:01.846 --> 00:01:03.266
not like the others?

00:01:03.266 --> 00:01:03.926
OK, here we go.

00:01:04.156 --> 00:01:06.656
If you choose the mail sidebar,

00:01:06.656 --> 00:01:07.426
you would be correct.

00:01:07.896 --> 00:01:09.076
The mail sidebar is an outline

00:01:09.076 --> 00:01:09.356
view.

00:01:09.886 --> 00:01:11.366
The other four are table views.

00:01:11.756 --> 00:01:14.036
Let's have one more round.

00:01:15.066 --> 00:01:16.826
Which of these three views has

00:01:16.826 --> 00:01:18.046
got a different base container

00:01:18.046 --> 00:01:19.416
view than the other ones?

00:01:19.806 --> 00:01:20.966
Now, hopefully from our last

00:01:20.966 --> 00:01:22.776
slide, you realize maybe it's

00:01:22.776 --> 00:01:23.566
not so easy.

00:01:24.746 --> 00:01:26.116
I see a disclosure triangle on

00:01:26.116 --> 00:01:26.666
one of them.

00:01:27.386 --> 00:01:28.496
You know which one is different?

00:01:29.416 --> 00:01:31.086
If you picked this one, you'd be

00:01:31.086 --> 00:01:31.516
correct.

00:01:31.766 --> 00:01:32.806
This is a grid view.

00:01:33.626 --> 00:01:35.066
The other two are collection

00:01:35.066 --> 00:01:35.516
views.

00:01:37.916 --> 00:01:39.556
My colleague Troy will take you

00:01:39.556 --> 00:01:40.546
on a brief tour of some of

00:01:40.546 --> 00:01:42.066
AppKit's more powerful and

00:01:42.066 --> 00:01:43.126
interesting container view

00:01:43.126 --> 00:01:43.606
classes.

00:01:44.226 --> 00:01:45.466
These are carefully designed,

00:01:45.756 --> 00:01:47.096
versatile and reusable

00:01:47.096 --> 00:01:48.576
components that you see employed

00:01:48.836 --> 00:01:49.826
throughout the system and

00:01:49.826 --> 00:01:51.076
third-party applications.

00:01:51.446 --> 00:01:52.286
And they're ready for you to

00:01:52.286 --> 00:01:54.326
pick up and use to easily build

00:01:54.326 --> 00:01:55.866
your own user interfaces.

00:01:56.366 --> 00:01:57.846
Interfaces composed from

00:01:57.846 --> 00:01:59.386
familiar standard components

00:01:59.556 --> 00:02:00.826
that people already know how to

00:02:00.826 --> 00:02:02.876
use, enabling them to quickly

00:02:02.876 --> 00:02:04.126
get up to speed and be

00:02:04.126 --> 00:02:05.416
productive using your amazing

00:02:05.416 --> 00:02:05.816
apps.

00:02:06.496 --> 00:02:07.716
Troy will outline the design

00:02:07.716 --> 00:02:09.566
purposes, capabilities and

00:02:09.566 --> 00:02:10.295
strong suits.

00:02:10.816 --> 00:02:12.056
Then I will turn to walk us

00:02:12.056 --> 00:02:12.776
through some interesting

00:02:12.776 --> 00:02:14.716
examples of real UI's and

00:02:14.716 --> 00:02:16.166
provide some helpful guidelines

00:02:16.556 --> 00:02:17.646
for how to choose the most

00:02:17.646 --> 00:02:19.056
suitable container views for

00:02:19.106 --> 00:02:20.746
your applications, from AppKit's

00:02:20.746 --> 00:02:21.766
extensive library.

00:02:22.426 --> 00:02:23.686
With that, I'd like to hand it

00:02:23.686 --> 00:02:24.156
over to Troy.

00:02:25.016 --> 00:02:26.896
[ Applause ]

00:02:26.896 --> 00:02:27.496
>> Thank you Raleigh.

00:02:28.686 --> 00:02:29.206
Hi, everyone.

00:02:30.586 --> 00:02:32.126
Before we leap right into our

00:02:32.126 --> 00:02:35.186
whirlwind tour, I'd like us to

00:02:35.186 --> 00:02:36.546
take just a moment to remind

00:02:36.546 --> 00:02:37.776
ourselves of some of the

00:02:37.776 --> 00:02:39.766
foundational aspects of AppKit's

00:02:39.766 --> 00:02:40.396
view system.

00:02:43.456 --> 00:02:44.946
What is a view in its most

00:02:44.946 --> 00:02:46.706
basic, fundamental, reductive

00:02:47.306 --> 00:02:49.276
geometric sense, but a rectangle

00:02:49.276 --> 00:02:50.636
on the screen, where you can

00:02:50.636 --> 00:02:51.696
present some content to your

00:02:51.696 --> 00:02:53.546
users that they can potentially

00:02:53.546 --> 00:02:54.236
interact with?

00:02:55.086 --> 00:02:56.016
And as you're preparing to

00:02:56.016 --> 00:02:57.426
present that content, one of the

00:02:57.426 --> 00:02:59.076
most basic things you need to do

00:02:59.406 --> 00:03:00.956
is determine and apply the

00:03:00.956 --> 00:03:01.896
desired layout.

00:03:02.056 --> 00:03:03.896
You want to figure out the sizes

00:03:03.896 --> 00:03:05.716
and positions of the items that

00:03:05.716 --> 00:03:06.516
you're going to present to the

00:03:06.516 --> 00:03:07.566
user; they may be items, they

00:03:07.566 --> 00:03:08.316
may be views.

00:03:09.326 --> 00:03:10.856
And AppKit provides a very

00:03:10.856 --> 00:03:12.336
powerful, generalized,

00:03:12.336 --> 00:03:14.036
open-ended auto layout systems

00:03:14.036 --> 00:03:15.066
that gives you all the parts

00:03:15.066 --> 00:03:16.726
that you need to build very

00:03:16.726 --> 00:03:18.816
intricate, arbitrary layouts

00:03:18.816 --> 00:03:20.246
that adapt to re-size.

00:03:20.966 --> 00:03:22.086
Component by component,

00:03:22.086 --> 00:03:23.556
constraint by constraint if you

00:03:23.556 --> 00:03:24.146
want to.

00:03:24.816 --> 00:03:26.186
But part of the take home point

00:03:26.186 --> 00:03:27.996
to our talk today is to remind

00:03:27.996 --> 00:03:29.476
you that there are also some

00:03:29.476 --> 00:03:30.826
existing solutions to a lot of

00:03:30.826 --> 00:03:32.876
the common user interface design

00:03:32.876 --> 00:03:33.996
patterns that you're going to

00:03:33.996 --> 00:03:35.646
want to put in your apps, we

00:03:35.646 --> 00:03:37.476
have lots of off-the-shelf parts

00:03:37.476 --> 00:03:39.586
in AppKit's vast storehouse of

00:03:39.666 --> 00:03:41.386
prefab view classes.

00:03:41.516 --> 00:03:43.996
So, whenever possible, you want

00:03:43.996 --> 00:03:44.736
to keep it simple.

00:03:44.736 --> 00:03:46.056
You want to reuse these common

00:03:46.056 --> 00:03:47.266
solutions that we've already

00:03:47.266 --> 00:03:47.976
designed for you.

00:03:50.556 --> 00:03:51.386
All of the views that we are

00:03:51.386 --> 00:03:52.446
going to talk about today

00:03:52.636 --> 00:03:54.476
accommodate arbitrary content.

00:03:54.476 --> 00:03:55.276
Even though you're using

00:03:55.276 --> 00:03:56.996
standard off-the-shelf parts,

00:03:57.376 --> 00:03:58.836
your views don't have to look

00:03:58.836 --> 00:03:59.366
prefab.

00:03:59.756 --> 00:04:01.446
You have complete latitude,

00:04:01.526 --> 00:04:03.436
creatively, to design your views

00:04:03.436 --> 00:04:04.196
however want.

00:04:04.466 --> 00:04:05.606
You can put whatever content you

00:04:05.606 --> 00:04:08.296
want in each of these.

00:04:08.746 --> 00:04:10.026
Let's start with a really simple

00:04:10.026 --> 00:04:10.616
example.

00:04:11.236 --> 00:04:12.406
Maybe the most basic thing we

00:04:12.406 --> 00:04:12.856
want to do.

00:04:12.856 --> 00:04:14.616
We have a series of views here.

00:04:14.616 --> 00:04:16.086
It doesn't matter what kind they

00:04:16.086 --> 00:04:17.116
are, they're just kind of black

00:04:17.116 --> 00:04:18.435
boxes to the layout system.

00:04:18.766 --> 00:04:19.776
And we want to lay them out in a

00:04:19.776 --> 00:04:20.625
linear fashion.

00:04:21.106 --> 00:04:22.656
Maybe in a row like this.

00:04:23.206 --> 00:04:24.246
Or, maybe vertically as a

00:04:24.246 --> 00:04:24.646
column.

00:04:25.716 --> 00:04:27.286
AppKit provides a really simple,

00:04:27.286 --> 00:04:29.306
easy-to-use solution for this,

00:04:29.636 --> 00:04:31.016
an invisible container view that

00:04:31.016 --> 00:04:32.986
we call NSStackView.

00:04:33.776 --> 00:04:35.586
StackView provides a really easy

00:04:35.586 --> 00:04:37.266
way for you to flow views in a

00:04:37.266 --> 00:04:39.056
single column or row, and

00:04:39.056 --> 00:04:40.336
without having to manage the

00:04:40.336 --> 00:04:41.366
auto layout constraints

00:04:41.366 --> 00:04:41.846
yourself.

00:04:41.876 --> 00:04:43.136
The neat thing about StackView

00:04:43.326 --> 00:04:44.646
is it presents a high-level

00:04:44.646 --> 00:04:45.486
easy-to-use API.

00:04:45.946 --> 00:04:47.246
Where you configure properties

00:04:47.366 --> 00:04:49.056
to specify the alignment, and

00:04:49.056 --> 00:04:50.306
metrics that you want, and

00:04:50.306 --> 00:04:51.456
StackView takes care of

00:04:51.456 --> 00:04:53.186
automatically managing all of

00:04:53.186 --> 00:04:54.396
the required layout constraints

00:04:54.396 --> 00:04:54.896
itself.

00:04:55.126 --> 00:04:56.276
This can become especially

00:04:56.276 --> 00:04:57.706
useful if you're going to have

00:04:57.706 --> 00:04:58.786
the content of your StackView

00:04:58.786 --> 00:04:59.716
dynamically change.

00:04:59.716 --> 00:05:00.556
You're adding and removing

00:05:00.556 --> 00:05:01.976
items, and you don't have to

00:05:01.976 --> 00:05:03.286
worry about updating layout

00:05:03.286 --> 00:05:04.246
constraints yourself.

00:05:05.276 --> 00:05:06.056
So, some of the things you can

00:05:06.056 --> 00:05:07.636
configure in a StackView include

00:05:07.796 --> 00:05:09.086
the edge insets, which are sort

00:05:09.086 --> 00:05:10.976
of like the margins around the

00:05:10.976 --> 00:05:12.396
area where your views are laid

00:05:12.396 --> 00:05:12.646
out.

00:05:13.236 --> 00:05:15.676
You can configure the alignment

00:05:15.676 --> 00:05:16.556
that you want for your views.

00:05:16.556 --> 00:05:17.816
So, in this case we might was to

00:05:18.026 --> 00:05:19.796
horizontally align our items on

00:05:19.796 --> 00:05:21.276
their setters, or right align

00:05:21.276 --> 00:05:22.326
them, or left align them.

00:05:22.446 --> 00:05:23.746
Or maybe we want all the items

00:05:23.746 --> 00:05:25.416
to be the same width and fill

00:05:25.416 --> 00:05:26.386
the available space.

00:05:26.386 --> 00:05:27.556
All of these things are pretty

00:05:27.556 --> 00:05:28.346
easy to configure with

00:05:28.376 --> 00:05:29.506
properties without having to

00:05:29.506 --> 00:05:30.466
mess with auto layout

00:05:30.466 --> 00:05:31.426
constraints yourself.

00:05:32.316 --> 00:05:33.546
The only thing you really need

00:05:33.546 --> 00:05:34.766
to be concerned with providing

00:05:34.766 --> 00:05:37.536
yourself is ensuring that each

00:05:37.536 --> 00:05:38.776
of your items that you put in

00:05:38.776 --> 00:05:40.226
the StackView has a well-defined

00:05:40.226 --> 00:05:40.466
height.

00:05:40.946 --> 00:05:42.596
Or, if it's a horizontal

00:05:42.596 --> 00:05:44.086
StackView, then you want to have

00:05:44.086 --> 00:05:45.086
well-defined widths.

00:05:45.366 --> 00:05:46.986
Now, often you can determine

00:05:46.986 --> 00:05:49.526
this base on some inherent size

00:05:49.526 --> 00:05:50.396
to your content, right?

00:05:50.396 --> 00:05:52.136
Here we have some labels, and

00:05:52.136 --> 00:05:53.086
because of the font that we

00:05:53.086 --> 00:05:54.146
chose, they have a certain

00:05:54.146 --> 00:05:54.946
height and we want to leave a

00:05:54.946 --> 00:05:56.116
certain amount of space above

00:05:56.116 --> 00:05:56.646
and below.

00:05:56.896 --> 00:05:58.376
So, the total natural height of

00:05:58.376 --> 00:05:59.476
each item ends up being

00:05:59.476 --> 00:06:01.196
determined by that label height.

00:06:02.086 --> 00:06:03.646
But once we set those up,

00:06:03.746 --> 00:06:04.876
StackView takes care of the

00:06:04.876 --> 00:06:05.296
rest.

00:06:06.036 --> 00:06:07.296
Spacing between items is

00:06:07.296 --> 00:06:08.436
configurable and doesn't even

00:06:08.436 --> 00:06:09.516
have to be uniform, there are

00:06:09.516 --> 00:06:10.606
lots of different options for

00:06:10.606 --> 00:06:10.956
that.

00:06:11.196 --> 00:06:12.776
So, it's really a very versatile

00:06:12.776 --> 00:06:13.096
view.

00:06:14.516 --> 00:06:16.456
StackView also has the ability

00:06:16.456 --> 00:06:17.976
to accommodate dealing with

00:06:17.976 --> 00:06:19.026
space constraints.

00:06:19.316 --> 00:06:20.626
So, if you want, you can put

00:06:20.726 --> 00:06:21.646
hundreds of items in a

00:06:21.646 --> 00:06:22.846
StackView, you can put in a

00:06:22.846 --> 00:06:24.136
scroll view if you want so that

00:06:24.136 --> 00:06:25.256
you can show more items than

00:06:25.256 --> 00:06:26.126
will fit in the window.

00:06:26.446 --> 00:06:27.686
But often times you may be using

00:06:27.686 --> 00:06:29.456
StackView in a context where you

00:06:29.456 --> 00:06:31.106
have inherently limited space.

00:06:31.576 --> 00:06:34.916
And StackView provides an API to

00:06:34.916 --> 00:06:36.256
deal with space limitations.

00:06:36.256 --> 00:06:37.776
It makes it very easy for you to

00:06:37.806 --> 00:06:39.916
specify how your stack should

00:06:39.916 --> 00:06:41.266
adapt on resize.

00:06:41.546 --> 00:06:43.166
And the way that you do that, is

00:06:43.166 --> 00:06:44.686
by identifying the relative

00:06:44.726 --> 00:06:46.806
priority of your views to

00:06:46.806 --> 00:06:47.416
StackView.

00:06:47.446 --> 00:06:48.996
So, we could tell it, say that

00:06:49.166 --> 00:06:50.756
view number two here is relative

00:06:50.756 --> 00:06:51.526
low priority.

00:06:51.716 --> 00:06:53.676
So, when space is really tight,

00:06:54.236 --> 00:06:55.436
the window is resized smaller,

00:06:55.436 --> 00:06:56.896
StackView will automatically

00:06:56.896 --> 00:06:59.256
eject those low priority views

00:06:59.856 --> 00:07:00.996
to make sure that your most

00:07:00.996 --> 00:07:01.806
important views are still

00:07:01.806 --> 00:07:02.556
presented to the user.

00:07:02.556 --> 00:07:03.556
This is very similar to the

00:07:03.556 --> 00:07:05.496
behavior you'll see in toolbars

00:07:05.496 --> 00:07:06.236
and in Touch Bar.

00:07:08.836 --> 00:07:10.416
StackView also provides the

00:07:10.416 --> 00:07:11.906
concept of gravity areas, which

00:07:11.906 --> 00:07:13.016
are sort of like sections.

00:07:13.226 --> 00:07:14.656
So, in a vertical StackView, you

00:07:14.656 --> 00:07:15.906
have top, center and bottom

00:07:15.906 --> 00:07:16.566
sections.

00:07:16.996 --> 00:07:18.416
In horizontal StackView, you

00:07:18.416 --> 00:07:19.786
have leading, center and

00:07:19.786 --> 00:07:21.496
trailing sections and notice

00:07:21.496 --> 00:07:22.986
that we're making a point of

00:07:23.116 --> 00:07:24.176
talking about things in terms of

00:07:24.176 --> 00:07:25.926
leading and trailing, rather

00:07:25.926 --> 00:07:28.226
than explicit left and right, by

00:07:28.226 --> 00:07:29.506
thinking in advance in these

00:07:29.506 --> 00:07:30.816
flexible terms, we're setting

00:07:30.816 --> 00:07:32.236
ourselves up to handle right to

00:07:32.236 --> 00:07:34.546
left layouts much more easily.

00:07:34.726 --> 00:07:36.456
So, in a left to right language

00:07:36.766 --> 00:07:38.076
the leading section will be on

00:07:38.076 --> 00:07:39.246
the left, the trailing section

00:07:39.246 --> 00:07:40.226
will be laid out on the right.

00:07:40.676 --> 00:07:42.186
But if we run our app in a

00:07:42.186 --> 00:07:43.876
language that flows text from

00:07:43.876 --> 00:07:46.386
right to left, then the leading

00:07:46.386 --> 00:07:47.196
and trailing sections

00:07:47.196 --> 00:07:48.386
automatically get swapped.

00:07:48.536 --> 00:07:49.726
And in fact, all of the sub

00:07:49.726 --> 00:07:51.116
views in that horizontal

00:07:51.116 --> 00:07:52.856
StackView get laid out in the

00:07:52.856 --> 00:07:53.666
opposite order.

00:07:53.996 --> 00:07:56.056
So, by encouraging us to think

00:07:56.056 --> 00:07:57.316
in the right terms in advance,

00:07:57.316 --> 00:07:58.706
StackView makes it really easy

00:07:58.966 --> 00:08:01.636
for our layouts to automatically

00:08:01.636 --> 00:08:02.656
adapt in right to left

00:08:02.656 --> 00:08:03.236
languages.

00:08:04.396 --> 00:08:05.676
StackViews are also

00:08:05.676 --> 00:08:06.316
compose-able.

00:08:06.996 --> 00:08:08.586
So, let's say we have a set of

00:08:08.586 --> 00:08:09.816
views here that we want to stack

00:08:09.816 --> 00:08:10.546
vertically, maybe some

00:08:10.546 --> 00:08:12.276
checkboxes, we can put them in a

00:08:12.276 --> 00:08:12.916
StackView.

00:08:13.366 --> 00:08:14.766
Now maybe we have a sidebar we

00:08:14.766 --> 00:08:15.666
want to put next to them.

00:08:16.196 --> 00:08:17.076
Well, we can take another

00:08:17.076 --> 00:08:17.986
StackView, a horizontal

00:08:17.986 --> 00:08:19.536
StackView and put those views in

00:08:19.536 --> 00:08:19.636
it.

00:08:20.836 --> 00:08:21.626
Maybe we want to put some

00:08:21.626 --> 00:08:22.986
buttons at the bottom, put those

00:08:22.986 --> 00:08:24.076
in a StackView and then take a

00:08:24.076 --> 00:08:26.056
fourth StackView and group those

00:08:26.056 --> 00:08:26.326
two.

00:08:26.996 --> 00:08:28.206
This is the kind of thing that

00:08:28.206 --> 00:08:29.326
we really love to do in

00:08:29.326 --> 00:08:30.586
programming whenever we can,

00:08:30.586 --> 00:08:30.836
right?

00:08:31.066 --> 00:08:32.486
To compose things well

00:08:32.486 --> 00:08:34.476
understood simple parts in a

00:08:34.476 --> 00:08:36.196
very modular way and it enables

00:08:36.196 --> 00:08:37.155
you to build things that are

00:08:37.155 --> 00:08:38.765
potentially complex but are

00:08:38.765 --> 00:08:39.996
really easy to maintain.

00:08:39.996 --> 00:08:41.556
So, there's a lot you can do

00:08:41.676 --> 00:08:42.885
just with StackView alone.

00:08:43.385 --> 00:08:46.506
And there was a great Mysteries

00:08:46.506 --> 00:08:47.796
of Auto Layout Talk a couple

00:08:47.796 --> 00:08:48.696
years ago that went into

00:08:48.696 --> 00:08:49.776
StackView in detail.

00:08:49.776 --> 00:08:50.916
Shows you how to configure it to

00:08:50.916 --> 00:08:51.706
get different effects.

00:08:51.706 --> 00:08:52.536
It's well illustrated.

00:08:52.536 --> 00:08:53.686
I highly recommend you check it

00:08:53.686 --> 00:08:53.866
out.

00:08:54.176 --> 00:08:56.336
As you know, sessions from past

00:08:56.336 --> 00:08:57.666
years are available in video

00:08:57.666 --> 00:08:59.136
form online on the developer's

00:08:59.136 --> 00:08:59.416
site.

00:08:59.696 --> 00:09:01.396
Also, in the auto layout guide,

00:09:01.396 --> 00:09:02.506
there is a section called "The

00:09:02.506 --> 00:09:04.126
Auto Layout Cookbook" that goes

00:09:04.126 --> 00:09:06.016
in great detail about different

00:09:06.016 --> 00:09:07.136
ways you can use StackViews and

00:09:07.136 --> 00:09:07.696
configure them.

00:09:09.166 --> 00:09:10.366
So, let's take what we just

00:09:10.366 --> 00:09:12.186
learned and try applying it to a

00:09:12.186 --> 00:09:13.286
new kind of layout that we want

00:09:13.286 --> 00:09:13.796
to implement.

00:09:13.796 --> 00:09:15.466
Let's say we've got this

00:09:15.466 --> 00:09:16.936
particular piece of UI from

00:09:17.126 --> 00:09:18.266
appearance preferences.

00:09:18.946 --> 00:09:20.326
Now, to me it looks like we've

00:09:20.326 --> 00:09:21.886
got a couple of lists here.

00:09:22.336 --> 00:09:23.736
We've got a list of labels on

00:09:23.736 --> 00:09:24.146
the left.

00:09:24.446 --> 00:09:25.746
And on the right, we have a list

00:09:25.746 --> 00:09:27.206
of corresponding controls.

00:09:27.816 --> 00:09:28.806
Both flowing downward.

00:09:28.806 --> 00:09:29.776
So, this might be a case, where

00:09:29.776 --> 00:09:31.736
we might naturally think, maybe

00:09:31.736 --> 00:09:33.136
this is a chance to use a couple

00:09:33.136 --> 00:09:34.546
of StackViews side-by-side to

00:09:34.546 --> 00:09:35.366
solve this problem.

00:09:36.576 --> 00:09:38.406
What we quickly find out as soon

00:09:38.406 --> 00:09:40.166
as we try that, is that these

00:09:40.166 --> 00:09:41.216
StackViews work great

00:09:41.216 --> 00:09:42.486
independently, but they're

00:09:42.486 --> 00:09:43.676
operating entirely without

00:09:43.676 --> 00:09:44.596
regard to one another.

00:09:44.596 --> 00:09:46.216
So, they each do a great job of

00:09:46.216 --> 00:09:47.726
stacking what they're given, but

00:09:47.726 --> 00:09:48.996
the problem is that a couple of

00:09:48.996 --> 00:09:50.946
our labels here on left no

00:09:50.946 --> 00:09:52.486
longer have the needed visual

00:09:52.486 --> 00:09:53.806
correspondence to the controls

00:09:53.806 --> 00:09:54.246
on the right.

00:09:54.736 --> 00:09:55.606
So, this is going to be a

00:09:55.606 --> 00:09:57.116
problem for usability for our

00:09:57.116 --> 00:09:57.186
app.

00:09:58.016 --> 00:09:59.796
You know, we could kluge this by

00:09:59.796 --> 00:10:01.266
maybe giving the appearance

00:10:01.266 --> 00:10:04.196
label an artificially larger

00:10:04.196 --> 00:10:04.976
height or something like that.

00:10:05.046 --> 00:10:06.696
But you know this is Cocoa, we

00:10:06.696 --> 00:10:07.486
don't kluge things.

00:10:07.486 --> 00:10:08.426
So, we really want to have an

00:10:08.426 --> 00:10:09.936
elegant, maintainable solution.

00:10:10.816 --> 00:10:13.266
So, the desire to do layouts

00:10:13.266 --> 00:10:14.086
like this in really easy,

00:10:14.086 --> 00:10:15.156
maintainable ways that was the

00:10:15.156 --> 00:10:16.456
impetus for the development of

00:10:16.456 --> 00:10:16.936
GridView.

00:10:17.716 --> 00:10:21.176
And as GridView, makes it easy

00:10:21.176 --> 00:10:22.486
for you to lay things out in

00:10:22.486 --> 00:10:23.946
coordinated rows and columns.

00:10:23.946 --> 00:10:25.266
It will align the corresponding

00:10:25.266 --> 00:10:26.816
views in a given row or column

00:10:26.816 --> 00:10:27.986
very nicely for you.

00:10:28.376 --> 00:10:30.386
And as with NSStackView, it does

00:10:30.386 --> 00:10:31.556
all of this, using very

00:10:31.556 --> 00:10:32.966
high-level API that doesn't

00:10:32.966 --> 00:10:35.236
require you to maintain the auto

00:10:35.236 --> 00:10:36.536
layout constraints yourself.

00:10:36.766 --> 00:10:37.796
You configure high-level

00:10:37.796 --> 00:10:39.266
properties to set the size,

00:10:39.516 --> 00:10:41.156
alignment and spacing of your

00:10:41.156 --> 00:10:41.936
rows and columns.

00:10:42.106 --> 00:10:43.246
And GridView takes care of the

00:10:43.246 --> 00:10:43.606
rest.

00:10:47.206 --> 00:10:48.556
Also, like StackView, GridView

00:10:48.556 --> 00:10:49.946
automatically adapts for right

00:10:49.946 --> 00:10:50.686
to left languages.

00:10:50.686 --> 00:10:51.866
So, in this particular layout,

00:10:51.866 --> 00:10:53.046
we'd expected in a right to left

00:10:53.046 --> 00:10:54.526
language the labels and the

00:10:54.526 --> 00:10:56.526
controls would swap and indeed

00:10:56.526 --> 00:10:57.806
that's what we get if we run in

00:10:57.806 --> 00:10:58.326
RTL.

00:11:00.856 --> 00:11:02.516
The "What's New in Auto Layout"

00:11:02.516 --> 00:11:03.886
Talk from last year was

00:11:03.886 --> 00:11:04.536
fantastic.

00:11:04.536 --> 00:11:05.606
And it goes into GridView in

00:11:05.606 --> 00:11:06.766
particular and all of its

00:11:06.766 --> 00:11:07.546
capabilities.

00:11:07.646 --> 00:11:08.686
I highly recommend you check

00:11:08.686 --> 00:11:09.216
that one out.

00:11:10.126 --> 00:11:11.786
So, now just with GridView and

00:11:11.786 --> 00:11:13.106
StackView, we've already got a

00:11:13.106 --> 00:11:14.036
lot of stuff we can do,

00:11:14.036 --> 00:11:14.806
especially if we take

00:11:14.806 --> 00:11:16.306
composition and modularity into

00:11:16.306 --> 00:11:16.736
account.

00:11:17.196 --> 00:11:18.546
These are great for really

00:11:18.716 --> 00:11:20.676
easily laying out and presenting

00:11:20.676 --> 00:11:21.666
arrays of views.

00:11:21.966 --> 00:11:23.376
But what if we need to do

00:11:23.376 --> 00:11:24.656
something that falls outside

00:11:24.656 --> 00:11:24.916
that?

00:11:26.456 --> 00:11:28.116
What if we need to deal with

00:11:28.116 --> 00:11:29.856
obviously other kinds of layouts

00:11:29.856 --> 00:11:30.656
that aren't so linear?

00:11:32.026 --> 00:11:33.996
But more importantly, what if we

00:11:33.996 --> 00:11:35.166
need to be able to support user

00:11:35.166 --> 00:11:35.656
interaction?

00:11:35.656 --> 00:11:36.766
Things like the ability for the

00:11:36.766 --> 00:11:37.946
user to select items, or

00:11:37.946 --> 00:11:39.506
drag-and-drop.

00:11:40.176 --> 00:11:42.296
Moreover, what if we don't know

00:11:42.296 --> 00:11:43.596
how many items we might be

00:11:43.596 --> 00:11:44.646
dealing with at runtime?

00:11:44.646 --> 00:11:45.936
Maybe based on the user's data

00:11:45.936 --> 00:11:47.726
set, we may have tens or

00:11:47.726 --> 00:11:49.236
hundreds of thousands of items

00:11:49.236 --> 00:11:49.706
to present.

00:11:49.706 --> 00:11:51.916
It kind of gets beyond the scope

00:11:51.916 --> 00:11:53.306
of what GridView and StackView

00:11:53.306 --> 00:11:54.216
are designed to do.

00:11:54.216 --> 00:11:55.506
You can put lots of items in

00:11:55.506 --> 00:11:56.296
them, you can put them in a

00:11:56.296 --> 00:11:57.916
scroll view, but they don't make

00:11:57.916 --> 00:11:59.416
any attempt to deal with

00:11:59.416 --> 00:12:00.886
efficient resource usage.

00:12:01.596 --> 00:12:03.336
Paging just the items in that

00:12:03.336 --> 00:12:04.776
are needed to display, and a

00:12:04.776 --> 00:12:05.646
little bit of extra for

00:12:05.646 --> 00:12:06.506
scrolling smoothly.

00:12:06.846 --> 00:12:08.456
So, we want to step beyond

00:12:08.456 --> 00:12:09.546
those, we're going to need to if

00:12:09.546 --> 00:12:10.646
we want to solve those kinds of

00:12:10.646 --> 00:12:11.156
problems.

00:12:12.426 --> 00:12:13.396
Let's start with an example

00:12:13.396 --> 00:12:15.276
where we focus on interactivity

00:12:15.276 --> 00:12:16.186
and scalability.

00:12:17.396 --> 00:12:18.996
What if next we want to build

00:12:18.996 --> 00:12:20.486
sort of a more interactive grid?

00:12:20.606 --> 00:12:21.706
And here's an example that's

00:12:21.706 --> 00:12:23.256
familiar from one of our system

00:12:23.256 --> 00:12:25.096
apps, Activity Monitor.

00:12:26.046 --> 00:12:27.456
Visually, what we've got here

00:12:27.766 --> 00:12:28.736
looks like a grid, right?

00:12:28.736 --> 00:12:29.966
We've got rows and columns.

00:12:30.306 --> 00:12:31.516
But the way that we're using it

00:12:31.516 --> 00:12:33.016
is really more as a list.

00:12:33.316 --> 00:12:35.496
So, we have items flowing down,

00:12:35.496 --> 00:12:37.386
each row represents a process.

00:12:37.746 --> 00:12:38.766
And we're using the columns

00:12:38.766 --> 00:12:40.886
going across to show different

00:12:40.886 --> 00:12:42.486
properties of each process.

00:12:42.926 --> 00:12:44.426
We want the user to be able to

00:12:44.426 --> 00:12:45.916
select items singly, and

00:12:45.916 --> 00:12:46.456
multiply.

00:12:47.006 --> 00:12:49.256
And since we're displaying

00:12:49.256 --> 00:12:50.996
columns of data, it'd be kind of

00:12:50.996 --> 00:12:52.396
nice if we gave the user a hint

00:12:52.396 --> 00:12:53.476
as to what's in each column.

00:12:53.476 --> 00:12:54.516
Also, we want to have a header

00:12:54.516 --> 00:12:55.826
view at the top where each

00:12:55.826 --> 00:12:56.646
column is labeled.

00:12:57.556 --> 00:12:58.806
Now, we can offer the user the

00:12:58.806 --> 00:13:00.596
opportunity to click on a column

00:13:00.596 --> 00:13:02.546
heading to get the app to

00:13:02.546 --> 00:13:04.056
automatically sort the list

00:13:04.186 --> 00:13:05.316
according to that column's

00:13:05.316 --> 00:13:05.806
property.

00:13:06.626 --> 00:13:08.736
We can let the user drag reorder

00:13:08.736 --> 00:13:11.076
columns to help them to sort of

00:13:11.076 --> 00:13:12.486
visualize relationships in

00:13:12.486 --> 00:13:14.016
whatever way is most useful to

00:13:14.016 --> 00:13:14.296
them.

00:13:14.886 --> 00:13:15.996
All of these capabilities are

00:13:15.996 --> 00:13:17.406
encapsulated in AppKit's

00:13:17.406 --> 00:13:18.226
NSTableView.

00:13:19.516 --> 00:13:21.666
TableView is an interactive

00:13:21.776 --> 00:13:22.866
vertical list view.

00:13:23.446 --> 00:13:24.486
We usually think of them as

00:13:24.486 --> 00:13:25.216
multicolumn.

00:13:25.216 --> 00:13:26.466
You see a lot of multicolumn

00:13:26.466 --> 00:13:27.326
TableViews around.

00:13:27.896 --> 00:13:28.996
But they're also just as great

00:13:28.996 --> 00:13:30.446
for displaying a simple single

00:13:30.446 --> 00:13:31.016
column list.

00:13:31.016 --> 00:13:32.176
And you'll see lots of cases

00:13:32.176 --> 00:13:33.486
where this is used throughout

00:13:33.486 --> 00:13:34.636
the system that may be hard to

00:13:34.636 --> 00:13:35.846
recognize, as Raleigh's pointed

00:13:35.846 --> 00:13:37.596
out, because the appearance is

00:13:37.596 --> 00:13:38.496
very customizable.

00:13:39.086 --> 00:13:40.676
Here are a couple of examples.

00:13:41.006 --> 00:13:41.846
A really simple one on the

00:13:41.846 --> 00:13:42.106
right.

00:13:42.106 --> 00:13:43.436
We've just got a list of textual

00:13:43.436 --> 00:13:43.786
labels.

00:13:43.786 --> 00:13:44.986
So, you can do that with

00:13:44.986 --> 00:13:45.606
TableView.

00:13:45.606 --> 00:13:47.366
On the left, this is also a

00:13:47.366 --> 00:13:48.706
TableView, where each item is

00:13:48.706 --> 00:13:49.936
represented by an image and a

00:13:49.936 --> 00:13:50.846
corresponding label.

00:13:51.776 --> 00:13:53.076
In a modern view based

00:13:53.076 --> 00:13:55.596
TableView, you can depict your

00:13:55.596 --> 00:13:57.096
items content anyway you want.

00:13:57.096 --> 00:13:58.556
Any view subtree that you can

00:13:58.556 --> 00:13:59.996
construct from AppKit's standard

00:13:59.996 --> 00:14:01.976
controls, your own custom views,

00:14:02.576 --> 00:14:04.546
you can use that to represent

00:14:04.546 --> 00:14:05.866
the items in your TableView.

00:14:05.866 --> 00:14:07.076
So, you have a lot of creative

00:14:07.076 --> 00:14:08.786
design latitude as to how your

00:14:08.786 --> 00:14:09.566
items are presented.

00:14:10.896 --> 00:14:12.576
TableView supports type

00:14:12.576 --> 00:14:14.536
selection, keyboard navigation,

00:14:14.536 --> 00:14:15.716
that's all done for you.

00:14:16.786 --> 00:14:18.616
And TableView also offers group

00:14:18.616 --> 00:14:18.876
rows.

00:14:18.876 --> 00:14:20.536
Sometimes it makes sense to

00:14:20.536 --> 00:14:21.936
group your items according to

00:14:21.936 --> 00:14:22.926
certain categories.

00:14:23.216 --> 00:14:24.406
And here we have an example.

00:14:25.186 --> 00:14:26.936
The top yellow box actually is

00:14:26.936 --> 00:14:28.326
outlining the header view, but

00:14:28.326 --> 00:14:29.496
below those, those other yellow

00:14:29.496 --> 00:14:31.276
boxes are outlining the group

00:14:31.276 --> 00:14:32.366
rows, which are sort of like

00:14:32.366 --> 00:14:33.986
headings, they can be any view

00:14:33.986 --> 00:14:35.256
you want, of your own design.

00:14:35.466 --> 00:14:36.266
And you can use those to

00:14:36.266 --> 00:14:37.506
categorize your items which are

00:14:37.506 --> 00:14:39.176
indented underneath them.

00:14:40.436 --> 00:14:41.906
Here's another example where

00:14:41.906 --> 00:14:43.116
we're using group rows.

00:14:43.786 --> 00:14:44.766
And you'll note that the group

00:14:44.766 --> 00:14:46.216
rows in this case, have

00:14:46.216 --> 00:14:47.306
different heights because we

00:14:47.306 --> 00:14:49.216
want to show a larger icon next

00:14:49.216 --> 00:14:49.586
to them.

00:14:49.886 --> 00:14:51.446
The item rows underneath them

00:14:51.446 --> 00:14:52.056
are shorter.

00:14:52.256 --> 00:14:53.596
And you can have variable row

00:14:53.596 --> 00:14:54.286
heights throughout your

00:14:54.286 --> 00:14:54.906
TableView.

00:14:56.026 --> 00:14:56.936
So, they're very flexible

00:14:56.936 --> 00:14:57.576
layout-wise.

00:14:57.856 --> 00:14:59.086
TableViews also support row

00:14:59.086 --> 00:15:00.286
actions you may be familiar with

00:15:00.286 --> 00:15:02.186
from iOS, where you can swipe on

00:15:02.186 --> 00:15:03.506
a row and that will reveal some

00:15:03.506 --> 00:15:04.706
action buttons or maybe

00:15:04.706 --> 00:15:06.096
instantly commit an action.

00:15:06.596 --> 00:15:08.186
TableViews also support change

00:15:08.186 --> 00:15:08.706
animation.

00:15:08.706 --> 00:15:10.106
So, if you have a model that's

00:15:10.106 --> 00:15:11.536
dynamically updating without the

00:15:11.536 --> 00:15:12.506
user doing anything, you can

00:15:12.506 --> 00:15:14.306
give them visual cues that items

00:15:14.306 --> 00:15:15.596
are being inserted and removed

00:15:15.596 --> 00:15:16.836
and they can see how their model

00:15:16.836 --> 00:15:17.416
is changing.

00:15:17.686 --> 00:15:18.456
Instead of just doing it

00:15:18.456 --> 00:15:19.306
instantaneously.

00:15:21.176 --> 00:15:23.076
Most importantly TableViews are

00:15:23.076 --> 00:15:24.886
scalable to large item counts.

00:15:24.886 --> 00:15:26.436
TableView is very cautious and

00:15:26.436 --> 00:15:27.656
sparing about instantiating

00:15:27.656 --> 00:15:29.216
views only for the items that it

00:15:29.216 --> 00:15:30.936
needs to display plus a little

00:15:30.936 --> 00:15:32.376
bit of prefetch area so that we

00:15:32.376 --> 00:15:33.896
can be ready to scroll smoothly

00:15:33.896 --> 00:15:34.906
when the user scrolls.

00:15:35.746 --> 00:15:37.506
TableView will recycle items

00:15:37.506 --> 00:15:38.636
that have been scrolled out of

00:15:38.636 --> 00:15:39.836
view rather than instantiating

00:15:39.836 --> 00:15:40.696
brand-new items.

00:15:40.866 --> 00:15:42.986
All of this enables it to scale

00:15:43.366 --> 00:15:44.766
very well so that you can have

00:15:44.766 --> 00:15:46.786
smooth scrolling and dynamic

00:15:46.786 --> 00:15:48.026
interaction with potentially

00:15:48.026 --> 00:15:49.346
very large item counts.

00:15:50.276 --> 00:15:52.206
TableView is very flexible as to

00:15:52.206 --> 00:15:53.576
how you get your content into

00:15:53.576 --> 00:15:53.666
it.

00:15:53.946 --> 00:15:55.016
You can use bindings, if you

00:15:55.016 --> 00:15:56.006
want to take a minimal code

00:15:56.006 --> 00:15:56.496
approach.

00:15:56.636 --> 00:15:57.646
Or you can use the row

00:15:57.646 --> 00:15:59.416
index-based data source API.

00:15:59.686 --> 00:16:00.886
It's very flexible that way.

00:16:01.106 --> 00:16:02.456
And all in all, it's a very

00:16:02.456 --> 00:16:04.626
versatile, easy way to present

00:16:04.966 --> 00:16:06.536
either tabular data or simple

00:16:06.536 --> 00:16:07.986
lists on macOS.

00:16:10.036 --> 00:16:11.506
There's a TableView programming

00:16:11.506 --> 00:16:12.746
guide for Mac that describes in

00:16:12.746 --> 00:16:14.036
great detail how to use

00:16:14.036 --> 00:16:14.656
TableView.

00:16:14.946 --> 00:16:16.626
Also the crafting modern Cocoa

00:16:16.626 --> 00:16:18.816
apps talk from last year goes

00:16:18.816 --> 00:16:20.126
through an example of creating

00:16:20.386 --> 00:16:22.206
and wiring up a modern view

00:16:22.206 --> 00:16:23.736
based TableView step-by-step.

00:16:23.736 --> 00:16:25.586
I highly recommend it.

00:16:26.436 --> 00:16:29.056
So, okay we've dealt with grids

00:16:29.056 --> 00:16:29.666
and lists.

00:16:29.666 --> 00:16:30.616
But what about if we want to

00:16:30.616 --> 00:16:32.006
deal with inherently tree-based

00:16:32.006 --> 00:16:32.296
data.

00:16:32.676 --> 00:16:34.086
What if we have something like

00:16:34.286 --> 00:16:35.986
files, within folders, within

00:16:35.986 --> 00:16:37.326
folders, or any other kind of

00:16:37.326 --> 00:16:38.706
hierarchical tree structured

00:16:38.706 --> 00:16:39.226
data model.

00:16:39.226 --> 00:16:41.646
Well, that's where NSOutlineView

00:16:41.646 --> 00:16:42.116
comes in.

00:16:42.786 --> 00:16:44.266
And OutlineView has all of the

00:16:44.266 --> 00:16:47.746
capabilities of a TableView,

00:16:47.746 --> 00:16:49.036
because it is a TableView.

00:16:49.306 --> 00:16:51.306
NSOutlineView is a subclass of

00:16:51.306 --> 00:16:52.116
NSTableView.

00:16:52.326 --> 00:16:53.346
So, everything you learned about

00:16:53.346 --> 00:16:54.516
TableView, all of its

00:16:54.516 --> 00:16:55.596
capabilities, all of that is

00:16:55.596 --> 00:16:56.656
applicable to OutlineView.

00:16:57.146 --> 00:16:58.856
On top of that, OutlineView

00:16:58.856 --> 00:17:00.496
graphs a hierarchical data

00:17:00.496 --> 00:17:00.826
model.

00:17:01.356 --> 00:17:03.486
So, it will track the model

00:17:03.486 --> 00:17:05.066
object that you tell it about,

00:17:05.296 --> 00:17:06.566
and their children, and those

00:17:06.566 --> 00:17:07.726
nodes children and so on.

00:17:08.465 --> 00:17:10.246
And user interface-wise, one of

00:17:10.246 --> 00:17:10.886
the nice things about

00:17:10.886 --> 00:17:12.246
OutlineView is it doesn't force

00:17:12.246 --> 00:17:14.296
your users to browse the entire

00:17:14.296 --> 00:17:15.976
displayed out tree all at once.

00:17:16.266 --> 00:17:17.006
You can start out

00:17:17.006 --> 00:17:18.476
programmatically with certain

00:17:18.476 --> 00:17:20.096
interior nodes disclosed or

00:17:20.126 --> 00:17:21.326
collapsed, however you want.

00:17:21.806 --> 00:17:23.536
And the user has the option by

00:17:23.536 --> 00:17:24.465
clicking the disclosure

00:17:24.465 --> 00:17:25.626
triangles, or you have the

00:17:25.626 --> 00:17:26.935
option programmatically to

00:17:26.935 --> 00:17:28.425
selectively disclose certain

00:17:28.425 --> 00:17:29.796
subtrees that are of interest to

00:17:29.796 --> 00:17:30.306
explore.

00:17:32.556 --> 00:17:33.636
Another nice thing that

00:17:33.636 --> 00:17:34.716
OutlineView is that it enables

00:17:34.716 --> 00:17:36.596
the user to explore multiple

00:17:36.596 --> 00:17:37.206
branches.

00:17:37.206 --> 00:17:38.806
Multiple subtrees of your

00:17:38.806 --> 00:17:40.246
hierarchy simultaneously.

00:17:40.246 --> 00:17:41.696
That can be very handy for

00:17:41.696 --> 00:17:43.486
example in finders' ListView

00:17:43.486 --> 00:17:44.616
when you have a subtree of

00:17:44.616 --> 00:17:45.636
folders and you want to move

00:17:45.636 --> 00:17:46.986
some files around within that.

00:17:47.706 --> 00:17:49.286
Very, very easy view to do that

00:17:49.886 --> 00:17:49.976
in.

00:17:51.256 --> 00:17:52.356
As I said, everything that

00:17:52.356 --> 00:17:53.526
applies to TableView also

00:17:53.526 --> 00:17:54.486
applies to OutlineView.

00:17:54.486 --> 00:17:55.656
So, the TableView programming

00:17:55.656 --> 00:17:56.686
guide is a great reference for

00:17:56.686 --> 00:17:56.946
this.

00:17:57.216 --> 00:17:58.166
And there's an OutlineView

00:17:58.166 --> 00:17:59.976
programming topics supplement

00:17:59.976 --> 00:18:01.786
that concisely sums up the

00:18:01.786 --> 00:18:03.756
differences between OutlineView

00:18:04.296 --> 00:18:06.116
and TableView.

00:18:06.166 --> 00:18:08.226
We also offer another option, if

00:18:08.226 --> 00:18:09.646
you have tree based data that

00:18:09.646 --> 00:18:10.556
you want the user to be able to

00:18:10.556 --> 00:18:12.366
browse, and we call that

00:18:12.366 --> 00:18:12.906
NSBrowser.

00:18:13.606 --> 00:18:14.866
Here's an example of an

00:18:14.866 --> 00:18:16.276
NSBrowser with two columns.

00:18:17.406 --> 00:18:19.056
The column on the left displays

00:18:19.056 --> 00:18:20.326
our sort of root level list of

00:18:20.326 --> 00:18:20.796
items.

00:18:21.046 --> 00:18:22.646
The column on the right displays

00:18:22.646 --> 00:18:23.926
the children of the item that's

00:18:23.926 --> 00:18:24.956
selected in the left-hand

00:18:24.956 --> 00:18:25.296
column.

00:18:26.446 --> 00:18:27.676
Here's another example that's

00:18:27.676 --> 00:18:29.586
similar to Finder's ColumnView.

00:18:30.186 --> 00:18:31.366
We have three columns here.

00:18:32.106 --> 00:18:33.416
A folder selected in the column

00:18:33.416 --> 00:18:34.136
on the left and then we're

00:18:34.136 --> 00:18:35.246
displaying the contents of that

00:18:35.246 --> 00:18:36.216
folder, and the preview on the

00:18:36.216 --> 00:18:36.466
right.

00:18:37.656 --> 00:18:40.156
So, NSBrowser is a column based

00:18:40.346 --> 00:18:41.546
drill down UI.

00:18:41.626 --> 00:18:43.626
As the user clicks to select an

00:18:43.626 --> 00:18:44.876
item in a column, we have

00:18:44.876 --> 00:18:46.316
additional columns to the right

00:18:46.316 --> 00:18:47.426
of that, or the left if we're

00:18:47.426 --> 00:18:48.236
running RTL.

00:18:48.576 --> 00:18:49.786
And the user can drill down in

00:18:49.786 --> 00:18:51.526
that way to navigate a

00:18:51.526 --> 00:18:52.766
particular branch of your tree.

00:18:54.056 --> 00:18:55.786
The columns are user sizable.

00:18:55.786 --> 00:18:56.726
So, the user can configure

00:18:56.726 --> 00:18:58.156
things to use horizontal space

00:18:58.156 --> 00:18:58.756
efficiently.

00:18:59.316 --> 00:19:01.476
It has new features like

00:19:01.476 --> 00:19:02.906
optional custom header views.

00:19:02.906 --> 00:19:04.226
You can put any view you want at

00:19:04.226 --> 00:19:05.236
the top of the column.

00:19:06.006 --> 00:19:07.166
And if you want to build a sort

00:19:07.166 --> 00:19:09.946
of browser-based master detail

00:19:09.946 --> 00:19:11.986
interface, you can offer a

00:19:11.986 --> 00:19:13.546
custom preview view controller

00:19:13.546 --> 00:19:14.286
to the browser.

00:19:14.286 --> 00:19:15.566
You configure it this way, then

00:19:15.566 --> 00:19:17.046
when the user drills down to a

00:19:17.046 --> 00:19:19.066
leaf node, you can display in

00:19:19.066 --> 00:19:21.096
the next column over a view that

00:19:21.096 --> 00:19:22.456
shows a detailed description of

00:19:22.456 --> 00:19:23.786
the properties of that object,

00:19:23.786 --> 00:19:25.956
as used here in this Finder's

00:19:25.956 --> 00:19:26.946
similar column view.

00:19:28.636 --> 00:19:31.386
A user interface difference

00:19:31.386 --> 00:19:32.886
versus outline view with

00:19:32.886 --> 00:19:33.616
NSBrowser.

00:19:33.616 --> 00:19:35.466
The user really can only explore

00:19:35.466 --> 00:19:36.776
one branch of your tree at a

00:19:36.776 --> 00:19:37.256
time.

00:19:37.256 --> 00:19:38.726
But for many cases, that's find

00:19:38.726 --> 00:19:39.926
and sufficient and it does have

00:19:39.926 --> 00:19:41.526
the advantage of using vertical

00:19:41.526 --> 00:19:42.756
space a bit more efficiently.

00:19:43.956 --> 00:19:45.446
There's a browser programming

00:19:45.446 --> 00:19:47.006
topics guide and also some

00:19:47.006 --> 00:19:48.806
sample code you can refer to, to

00:19:48.806 --> 00:19:50.046
get started using Browser.

00:19:51.376 --> 00:19:53.156
So, lastly, what about custom

00:19:53.156 --> 00:19:53.526
layouts.

00:19:53.526 --> 00:19:54.316
I mentioned we might want to

00:19:54.316 --> 00:19:55.736
branch out beyond grids and

00:19:55.736 --> 00:19:56.276
lists.

00:19:56.896 --> 00:19:58.546
That's where NSCollectionView

00:19:58.546 --> 00:19:59.106
comes in.

00:19:59.196 --> 00:20:00.126
NSCollectionView is a very

00:20:00.126 --> 00:20:01.256
flexible, versatile,

00:20:01.256 --> 00:20:03.376
customizable, and scalable item

00:20:03.376 --> 00:20:03.696
view.

00:20:04.796 --> 00:20:06.696
It supports arbitrary developer

00:20:06.696 --> 00:20:08.846
defined layouts if you want any

00:20:08.846 --> 00:20:10.156
series of rectangles that you

00:20:10.156 --> 00:20:11.536
can specify programmatically,

00:20:11.536 --> 00:20:12.926
you can plug into CollectionView

00:20:12.926 --> 00:20:14.376
as a layout and it will size and

00:20:14.376 --> 00:20:15.796
position your items accordingly.

00:20:16.926 --> 00:20:18.636
It also provides an easy wrapped

00:20:18.636 --> 00:20:20.166
layout called flow that flows

00:20:20.166 --> 00:20:21.536
the items as much as text might

00:20:21.536 --> 00:20:22.476
be flowed on a page.

00:20:22.476 --> 00:20:23.336
You can also float them in

00:20:23.336 --> 00:20:24.286
columns if you want.

00:20:25.736 --> 00:20:27.276
CollectionView supports the

00:20:27.276 --> 00:20:30.146
ability to divide your items

00:20:30.146 --> 00:20:31.466
into sections if you want.

00:20:31.466 --> 00:20:32.266
If you want to group them that

00:20:32.266 --> 00:20:32.476
way.

00:20:32.756 --> 00:20:34.296
Each section can optionally have

00:20:34.296 --> 00:20:35.976
a header view and a footer view.

00:20:35.976 --> 00:20:37.146
These are entirely of your own

00:20:37.146 --> 00:20:37.616
design.

00:20:38.846 --> 00:20:40.276
And it supports user interaction

00:20:40.276 --> 00:20:41.476
features, like the ability to

00:20:41.476 --> 00:20:43.366
select items, and drag-and-drop

00:20:43.366 --> 00:20:44.476
them around, both within the

00:20:44.476 --> 00:20:45.776
CollectionView for reordering,

00:20:45.976 --> 00:20:47.186
drag them out, drag them in.

00:20:48.636 --> 00:20:50.146
Item representation, as with

00:20:50.146 --> 00:20:51.046
view based TableView and

00:20:51.046 --> 00:20:52.116
OutlineView is arbitrary.

00:20:52.116 --> 00:20:54.026
Any view subtree you construct

00:20:54.026 --> 00:20:55.406
out of your own custom views,

00:20:55.576 --> 00:20:57.516
standard AppKit views as in this

00:20:58.876 --> 00:20:59.016
case.

00:20:59.356 --> 00:21:01.026
And like view based TableView

00:21:01.026 --> 00:21:02.536
and OutlineView, it's very smart

00:21:02.536 --> 00:21:04.166
about sparingly instantiating

00:21:04.166 --> 00:21:05.316
just the items it needs,

00:21:05.316 --> 00:21:06.356
recycling items.

00:21:06.356 --> 00:21:07.776
So that we can keep performance

00:21:07.776 --> 00:21:09.196
high even when dealing with a

00:21:09.196 --> 00:21:10.296
large number of items.

00:21:11.286 --> 00:21:12.876
It can also animate, inserts,

00:21:12.876 --> 00:21:13.816
deletes, and moves like

00:21:13.816 --> 00:21:14.826
TableView and OutlineView.

00:21:14.826 --> 00:21:16.316
And also, transitions between

00:21:16.316 --> 00:21:17.276
layouts as we saw.

00:21:17.856 --> 00:21:21.826
We had an entire session devoted

00:21:21.876 --> 00:21:23.566
to CollectionView two years ago.

00:21:24.056 --> 00:21:25.126
It's much more similar to

00:21:25.126 --> 00:21:27.866
UICollectionView now and there's

00:21:27.866 --> 00:21:29.266
a Cocoa slide collection code

00:21:29.266 --> 00:21:30.296
sample that went along with

00:21:30.296 --> 00:21:30.586
that.

00:21:30.586 --> 00:21:31.706
I highly recommend you check

00:21:31.746 --> 00:21:32.216
those out.

00:21:32.916 --> 00:21:35.186
So, we've looked at just 6

00:21:35.186 --> 00:21:37.206
views, 6 view classes out of

00:21:37.206 --> 00:21:38.836
AppKit's vast storehouse,

00:21:39.036 --> 00:21:40.366
prefab, off-the-shelf parts

00:21:40.366 --> 00:21:40.696
today.

00:21:41.106 --> 00:21:42.886
And already we've got a bunch of

00:21:42.886 --> 00:21:43.876
different capabilities.

00:21:44.176 --> 00:21:45.316
Because each of them is fairly

00:21:45.316 --> 00:21:46.556
versatile, we also have some

00:21:46.556 --> 00:21:48.276
overlap in what each of them can

00:21:48.276 --> 00:21:48.986
be used for.

00:21:48.986 --> 00:21:50.566
So, it'd be nice to have some

00:21:50.566 --> 00:21:51.756
guidance as to what's

00:21:51.756 --> 00:21:53.136
appropriate to use in different

00:21:53.136 --> 00:21:54.476
used-interface design

00:21:54.476 --> 00:21:56.386
situations, different use cases.

00:21:56.736 --> 00:21:58.176
So, to set us on the right road,

00:21:58.176 --> 00:21:59.186
give us some guidance, my

00:21:59.186 --> 00:22:00.406
colleague Raleigh Ledet is going

00:22:00.406 --> 00:22:02.016
to show you some use cases and

00:22:02.016 --> 00:22:03.336
help you get on the road to

00:22:03.336 --> 00:22:04.516
building fantastic UI's.

00:22:04.516 --> 00:22:05.416
>> Thank you, Troy.

00:22:05.606 --> 00:22:06.106
>> Thanks Raleigh.

00:22:07.516 --> 00:22:12.806
[ Applause ]

00:22:13.306 --> 00:22:15.436
>> So, by now you've got a good

00:22:15.436 --> 00:22:17.196
grasp on what's going on with

00:22:17.886 --> 00:22:18.946
each individual style of

00:22:18.946 --> 00:22:20.616
ContainerView, and you probably

00:22:20.616 --> 00:22:21.436
already know where you're going

00:22:21.436 --> 00:22:22.356
to use some of them in your

00:22:22.356 --> 00:22:22.976
application.

00:22:23.716 --> 00:22:24.576
But sometimes it's a little bit

00:22:24.576 --> 00:22:25.746
more difficult to choose.

00:22:26.106 --> 00:22:27.366
So, I want to take a step back

00:22:28.366 --> 00:22:30.526
and look at things as a whole,

00:22:30.526 --> 00:22:31.156
as a collective.

00:22:31.746 --> 00:22:33.696
To start off with, broadly, we

00:22:33.696 --> 00:22:35.906
can split our ContainerViews

00:22:35.906 --> 00:22:37.576
into two large categories.

00:22:38.086 --> 00:22:40.026
You have what, in StackView and

00:22:40.026 --> 00:22:41.416
GridView what we call our pure

00:22:41.566 --> 00:22:42.526
layout containers.

00:22:42.886 --> 00:22:44.006
And that's all they do is they

00:22:44.006 --> 00:22:46.586
provide layout for you so you

00:22:46.586 --> 00:22:47.736
don't have to deal with all of

00:22:47.736 --> 00:22:48.336
the constraints.

00:22:48.336 --> 00:22:49.546
They make it easier for you to

00:22:49.546 --> 00:22:50.496
do that kind of layout.

00:22:50.976 --> 00:22:52.106
They don't do any drawing or any

00:22:52.106 --> 00:22:52.616
selection.

00:22:53.426 --> 00:22:54.856
And then with CollectionView,

00:22:54.856 --> 00:22:55.996
TableView, OutlineView, and

00:22:55.996 --> 00:22:57.486
Browser, we have what we call

00:22:57.486 --> 00:22:59.376
the data back ContainerViews.

00:22:59.706 --> 00:23:00.876
And these views handle

00:23:00.876 --> 00:23:02.386
efficiently adding and removing

00:23:02.386 --> 00:23:04.046
views depending on the content

00:23:04.196 --> 00:23:05.776
that you provide with some sort

00:23:05.776 --> 00:23:06.926
of data source or bindings.

00:23:07.686 --> 00:23:09.146
If we take a look at the data

00:23:09.146 --> 00:23:11.536
source set of CollectionViews,

00:23:11.756 --> 00:23:12.906
we can break those up a little

00:23:12.906 --> 00:23:13.406
bit more.

00:23:13.546 --> 00:23:15.636
If you have tabular data, a good

00:23:15.636 --> 00:23:16.796
place to start might be

00:23:16.796 --> 00:23:17.946
TableView or OutlineView.

00:23:18.086 --> 00:23:19.696
If you have a tree structure

00:23:19.696 --> 00:23:21.106
style of data, you might want to

00:23:21.106 --> 00:23:22.176
look at OutlineView, no

00:23:22.176 --> 00:23:22.826
NSBrowser.

00:23:23.076 --> 00:23:25.336
If you have a grid style layout,

00:23:25.656 --> 00:23:26.656
or you really need to have

00:23:26.656 --> 00:23:28.116
custom layout, then you might

00:23:28.116 --> 00:23:29.266
want to start off looking at

00:23:29.266 --> 00:23:29.946
CollectionView.

00:23:30.516 --> 00:23:33.236
To bring this all together, I

00:23:33.236 --> 00:23:34.416
want to take a look at some case

00:23:34.416 --> 00:23:36.276
studies and some real examples.

00:23:36.666 --> 00:23:37.906
And let's start with mail.

00:23:38.296 --> 00:23:39.606
In particular, I want to start

00:23:39.606 --> 00:23:41.846
with message list of mail to

00:23:41.846 --> 00:23:43.576
figure out how did we come up

00:23:43.576 --> 00:23:44.846
with this design and why did we

00:23:44.846 --> 00:23:45.356
land here?

00:23:46.976 --> 00:23:49.826
So, let's start with our list of

00:23:50.796 --> 00:23:51.646
CollectionViews.

00:23:52.686 --> 00:23:54.236
And think about the different

00:23:54.236 --> 00:23:55.746
types of properties that your

00:23:55.746 --> 00:23:56.916
mail message list might have.

00:23:57.416 --> 00:23:59.336
Now, I don't know about you, but

00:23:59.336 --> 00:24:00.536
I have thousands of email

00:24:00.536 --> 00:24:01.776
messages in my inbox.

00:24:02.016 --> 00:24:03.866
So, your email client is going

00:24:03.866 --> 00:24:04.806
to need to be able to deal with

00:24:04.806 --> 00:24:06.236
an unbounded number of emails.

00:24:06.946 --> 00:24:07.946
So, immediately we're going to

00:24:07.946 --> 00:24:09.486
want to use one of the data back

00:24:09.486 --> 00:24:11.556
storage ContainerViews, so we

00:24:11.556 --> 00:24:13.056
get a nice efficient use of

00:24:13.056 --> 00:24:14.156
views and of memory and

00:24:14.156 --> 00:24:15.006
responsive scrolling.

00:24:15.586 --> 00:24:17.926
Of course, we're going to need

00:24:17.926 --> 00:24:19.956
selection, so we know which body

00:24:20.306 --> 00:24:22.756
of which email to show to the

00:24:22.756 --> 00:24:23.166
user.

00:24:23.996 --> 00:24:27.256
And each email has lots of

00:24:27.256 --> 00:24:27.946
properties.

00:24:28.486 --> 00:24:30.156
Such as the sender, subject,

00:24:30.156 --> 00:24:31.326
date, so forth.

00:24:32.296 --> 00:24:33.616
At this point, if you look at

00:24:33.616 --> 00:24:34.846
all the various properties, it

00:24:34.846 --> 00:24:36.096
starts to sound like you have

00:24:36.096 --> 00:24:37.206
tabular data here.

00:24:37.696 --> 00:24:39.266
And indeed, this isn't

00:24:39.266 --> 00:24:40.866
structured exactly like a tree,

00:24:40.866 --> 00:24:41.906
so we don't need CollectionView

00:24:41.906 --> 00:24:42.506
or Browser.

00:24:43.406 --> 00:24:46.486
But, think about it a little bit

00:24:46.486 --> 00:24:46.896
more.

00:24:47.986 --> 00:24:49.296
We can take all the email

00:24:49.296 --> 00:24:50.266
messages that are part of the

00:24:50.266 --> 00:24:51.716
same conversation and group them

00:24:51.716 --> 00:24:52.156
together.

00:24:52.156 --> 00:24:53.686
So, we can perhaps collapse

00:24:53.686 --> 00:24:53.956
them.

00:24:54.426 --> 00:24:56.206
And so, OutlineView becomes a

00:24:56.206 --> 00:24:57.246
great choice.

00:24:57.246 --> 00:24:58.686
And if you look at mail's

00:24:58.896 --> 00:25:00.086
classic view, if you turn that

00:25:00.086 --> 00:25:01.306
mode on, that's exactly what you

00:25:01.306 --> 00:25:02.626
have, you have an outline view

00:25:02.916 --> 00:25:05.316
with the body of the email in

00:25:05.316 --> 00:25:06.026
the panel below.

00:25:07.336 --> 00:25:09.826
This is great, but let's

00:25:09.826 --> 00:25:11.236
critique the use of space here.

00:25:12.016 --> 00:25:14.046
In particular, I want to talk

00:25:14.046 --> 00:25:16.396
about the body of the email

00:25:16.396 --> 00:25:16.706
here.

00:25:17.196 --> 00:25:19.246
I can't even view the entire

00:25:19.246 --> 00:25:20.456
message here without scrolling.

00:25:20.456 --> 00:25:21.766
And it's not a very long email

00:25:21.766 --> 00:25:22.436
that I have here.

00:25:23.446 --> 00:25:25.736
Now, as user, I can just add

00:25:25.736 --> 00:25:29.176
more space by changing the split

00:25:29.176 --> 00:25:30.726
view, but then I would subtract

00:25:30.726 --> 00:25:32.346
space away from the OutlineView

00:25:32.346 --> 00:25:33.536
and my list of messages, and I

00:25:33.536 --> 00:25:34.556
would have to scroll even more

00:25:34.556 --> 00:25:35.366
to find the messages I'm

00:25:35.366 --> 00:25:35.966
interested in.

00:25:36.596 --> 00:25:38.446
If we rearrange things a little

00:25:38.446 --> 00:25:40.286
bit, we can end up with this

00:25:40.286 --> 00:25:40.736
design.

00:25:41.446 --> 00:25:42.576
What we've done here, is we've

00:25:42.576 --> 00:25:44.196
used a complex table cell.

00:25:44.196 --> 00:25:45.866
So, it's a single column table

00:25:45.866 --> 00:25:48.326
view, and each cell is a complex

00:25:48.326 --> 00:25:49.596
cell, so, we put all the

00:25:49.596 --> 00:25:51.226
properties into this one cell.

00:25:51.456 --> 00:25:53.356
And this opens up the whole

00:25:53.356 --> 00:25:54.796
other side of the window that we

00:25:54.796 --> 00:25:56.596
can put the entire body of this

00:25:56.596 --> 00:25:57.586
particular email message.

00:25:57.586 --> 00:25:59.256
So, now as the user can read

00:25:59.256 --> 00:26:00.646
more of the email message with

00:26:00.646 --> 00:26:02.696
less scrolling, and since we

00:26:02.696 --> 00:26:04.096
have now a vertical split, no

00:26:05.136 --> 00:26:06.776
matter how the user changes the

00:26:06.776 --> 00:26:08.106
size of the split view, I'll

00:26:08.106 --> 00:26:09.046
always be able to see the same

00:26:09.046 --> 00:26:10.976
number of emails in the column

00:26:10.976 --> 00:26:14.406
list, so I won't have to change

00:26:14.406 --> 00:26:15.566
how often I have to scroll

00:26:15.566 --> 00:26:16.496
depending on how the split view

00:26:16.496 --> 00:26:17.016
is changed.

00:26:17.836 --> 00:26:21.026
Let's dig into this a little bit

00:26:21.026 --> 00:26:21.796
further and consider the

00:26:21.796 --> 00:26:22.566
trade-offs.

00:26:23.046 --> 00:26:25.846
One of the things is there's no

00:26:25.846 --> 00:26:26.416
way to sort.

00:26:26.416 --> 00:26:27.656
Without table headers, the user

00:26:27.656 --> 00:26:29.256
no longer has a way to sort.

00:26:29.256 --> 00:26:30.556
And changing that sort order can

00:26:30.556 --> 00:26:31.286
be very useful.

00:26:31.646 --> 00:26:33.006
So, mail had to go in and add

00:26:33.006 --> 00:26:35.076
additional control to allow the

00:26:35.076 --> 00:26:35.806
user to sort.

00:26:37.316 --> 00:26:38.846
User has less control over the

00:26:38.846 --> 00:26:39.896
size of each property.

00:26:40.486 --> 00:26:42.216
When it was individual columns

00:26:42.216 --> 00:26:43.206
they could change the size of

00:26:43.206 --> 00:26:44.766
the column and add more width

00:26:44.766 --> 00:26:45.976
for the sender for example, or

00:26:45.976 --> 00:26:47.266
maybe more width to the subject,

00:26:47.266 --> 00:26:48.086
so they could read more of the

00:26:48.086 --> 00:26:48.976
subject at a time.

00:26:49.876 --> 00:26:52.366
However, we gain the ability to

00:26:52.366 --> 00:26:53.846
provide emphasis on the most

00:26:53.846 --> 00:26:54.546
used content.

00:26:55.206 --> 00:26:56.436
So, for example if we look at

00:26:56.766 --> 00:26:58.746
just one of these cells, we have

00:26:59.256 --> 00:27:00.736
the sender of this email message

00:27:00.736 --> 00:27:02.056
in a nice bold text.

00:27:02.846 --> 00:27:04.266
And then we have over to the

00:27:04.766 --> 00:27:05.946
right of it we have the date.

00:27:05.946 --> 00:27:07.426
And we could put both of these

00:27:07.426 --> 00:27:08.826
in a StackView and let StackView

00:27:08.826 --> 00:27:11.976
automatically handle the layout

00:27:11.976 --> 00:27:13.436
of these two views right next to

00:27:13.436 --> 00:27:13.736
each other.

00:27:13.736 --> 00:27:14.756
So, as the date needs a little

00:27:14.756 --> 00:27:16.696
bit more space depending on the

00:27:16.696 --> 00:27:18.436
exact data, it will

00:27:18.436 --> 00:27:19.656
automatically take space from

00:27:19.656 --> 00:27:20.046
the sender.

00:27:21.256 --> 00:27:23.766
This is also similar with the

00:27:23.766 --> 00:27:24.266
subject.

00:27:24.266 --> 00:27:25.816
It's in a nice bold text, we can

00:27:25.816 --> 00:27:27.176
contrast that with the

00:27:27.176 --> 00:27:28.776
single-line preview of the body

00:27:28.776 --> 00:27:29.996
of the message which is in a

00:27:29.996 --> 00:27:31.026
greyer text.

00:27:31.026 --> 00:27:32.196
So, we can provide emphasis on

00:27:32.196 --> 00:27:33.576
the sender and then on the

00:27:33.576 --> 00:27:34.506
subject of the email.

00:27:35.026 --> 00:27:35.846
And we could put that in a

00:27:35.846 --> 00:27:37.706
StackView as well to line up

00:27:37.706 --> 00:27:38.886
with the size of the message.

00:27:39.726 --> 00:27:41.286
And we have the flags and a few

00:27:41.286 --> 00:27:42.516
other properties in here, we can

00:27:43.106 --> 00:27:44.556
put the rest of this and embed

00:27:44.556 --> 00:27:45.986
it inside of a GridView.

00:27:47.416 --> 00:27:48.786
So, we've ended up with a

00:27:48.786 --> 00:27:50.236
TableView for our mail list,

00:27:50.716 --> 00:27:52.696
which is composed of a GridView

00:27:52.696 --> 00:27:54.106
that has embedded StackViews

00:27:54.106 --> 00:27:56.946
inside of it.

00:27:57.206 --> 00:27:58.206
Next up, preview.

00:27:58.546 --> 00:27:59.626
In particular, the sidebar.

00:28:00.596 --> 00:28:03.566
So, I'm showing a PDF here of

00:28:03.566 --> 00:28:04.596
the US tax code.

00:28:05.116 --> 00:28:07.776
And we want to show on the

00:28:07.776 --> 00:28:09.466
sidebar a preview of each PDF

00:28:09.466 --> 00:28:09.886
page.

00:28:10.696 --> 00:28:12.146
So, let's start off again with

00:28:12.356 --> 00:28:14.756
all of our ContainerViews and

00:28:14.756 --> 00:28:15.896
think about the properties of

00:28:15.896 --> 00:28:16.176
our PDF.

00:28:16.176 --> 00:28:17.786
Well we can have a large number

00:28:17.786 --> 00:28:18.356
of pages.

00:28:18.926 --> 00:28:21.366
The US tax code is over 6500

00:28:21.366 --> 00:28:22.906
pages of PDF information.

00:28:22.906 --> 00:28:25.276
Of course it needs to be

00:28:25.276 --> 00:28:26.346
selectable, and it's even

00:28:26.346 --> 00:28:26.816
reorderable.

00:28:26.816 --> 00:28:27.876
Preview allows you to reorder

00:28:27.876 --> 00:28:29.316
the pages in the PDF and resave

00:28:29.316 --> 00:28:30.076
the document out.

00:28:30.136 --> 00:28:32.696
A feature if you don't about

00:28:32.696 --> 00:28:34.026
that I particularly like to use

00:28:34.026 --> 00:28:35.556
to take blank pages out of PDF

00:28:35.556 --> 00:28:36.666
documents and resave it that

00:28:36.666 --> 00:28:36.886
way.

00:28:37.356 --> 00:28:39.296
But this means we're going to

00:28:39.296 --> 00:28:40.176
need something that's going to

00:28:40.176 --> 00:28:41.216
be data source backed.

00:28:41.216 --> 00:28:42.596
So, again StackView and

00:28:42.596 --> 00:28:44.046
GridView, we'll take those out

00:28:44.046 --> 00:28:44.736
of contention.

00:28:45.226 --> 00:28:46.456
And we'll consider this a little

00:28:46.456 --> 00:28:46.816
further.

00:28:47.496 --> 00:28:49.176
We have a single column vertical

00:28:49.176 --> 00:28:49.616
layout.

00:28:49.936 --> 00:28:51.026
So, we're not going to need

00:28:51.126 --> 00:28:51.526
Browser.

00:28:54.496 --> 00:28:55.946
And we also need collapsible

00:28:55.946 --> 00:28:57.046
categories.

00:28:57.516 --> 00:28:59.946
That screenshot I showed you at

00:28:59.946 --> 00:29:00.856
the beginning, we had this

00:29:00.856 --> 00:29:02.546
little disclosure triangle next

00:29:02.546 --> 00:29:03.376
to the name of the PDF.

00:29:03.846 --> 00:29:05.946
Preview allows you to view more

00:29:05.946 --> 00:29:07.706
than one PDF at the same time in

00:29:07.706 --> 00:29:08.186
the window.

00:29:08.186 --> 00:29:09.416
And this works out really great

00:29:09.416 --> 00:29:10.956
to actually move pages between

00:29:10.956 --> 00:29:12.826
documents and rearrange things.

00:29:13.506 --> 00:29:15.246
And once we need collapsible

00:29:15.246 --> 00:29:17.996
categories TableView is out of

00:29:17.996 --> 00:29:18.776
the running and we're left with

00:29:18.776 --> 00:29:20.116
CollectionView or OutlineView.

00:29:21.316 --> 00:29:22.836
This gets to be a rather

00:29:22.836 --> 00:29:23.766
interesting choice here.

00:29:24.236 --> 00:29:25.316
Which one should we use?

00:29:25.956 --> 00:29:27.016
Well, what happens when we

00:29:27.016 --> 00:29:28.486
resize the sidebar here?

00:29:28.636 --> 00:29:30.356
You see that the previews of the

00:29:30.356 --> 00:29:32.716
pages grow in both the vertical

00:29:33.076 --> 00:29:35.326
and horizontal dimensions

00:29:35.466 --> 00:29:36.186
proportionally.

00:29:37.246 --> 00:29:38.406
Traditionally, this is something

00:29:38.406 --> 00:29:39.566
that would've taken more code

00:29:39.566 --> 00:29:40.696
with OutlineView for you to

00:29:40.696 --> 00:29:43.196
handle as you needed to adjust

00:29:43.296 --> 00:29:44.646
the row heights and handle that

00:29:44.646 --> 00:29:46.476
as the user is moving the split

00:29:46.476 --> 00:29:46.716
view.

00:29:47.416 --> 00:29:49.306
However, in macOS High Sierra,

00:29:49.486 --> 00:29:50.086
this is something that

00:29:50.086 --> 00:29:51.236
OutlineView can handle for you

00:29:51.236 --> 00:29:51.936
automatically.

00:29:52.466 --> 00:29:55.726
Let's dig a little bit further

00:29:55.726 --> 00:29:58.166
and look at another part of the

00:29:58.166 --> 00:29:59.356
interface with preview, and this

00:29:59.356 --> 00:30:00.346
is the contact sheet.

00:30:00.996 --> 00:30:02.376
And you notice the contact sheet

00:30:02.376 --> 00:30:03.796
also shows you a preview of the

00:30:03.796 --> 00:30:05.006
page, along with the page

00:30:05.006 --> 00:30:05.366
number.

00:30:06.116 --> 00:30:07.466
It looks a lot like the sidebar

00:30:07.466 --> 00:30:09.166
except you have a GridView of

00:30:09.166 --> 00:30:09.346
them.

00:30:10.266 --> 00:30:12.176
And this allows you to actually

00:30:12.446 --> 00:30:13.886
reuse your data source.

00:30:14.096 --> 00:30:15.206
If we use a CollectionView for

00:30:15.206 --> 00:30:17.056
both the sidebar and the contact

00:30:17.056 --> 00:30:18.946
sheet, we can reuse our data

00:30:18.946 --> 00:30:19.676
source code.

00:30:20.136 --> 00:30:21.186
So, that's great.

00:30:21.186 --> 00:30:22.546
And we're just going to change

00:30:22.546 --> 00:30:23.456
the flow layout for the

00:30:23.456 --> 00:30:24.156
CollectionView.

00:30:24.346 --> 00:30:26.476
And in fact, that's exactly what

00:30:26.476 --> 00:30:28.236
preview does, in this case.

00:30:30.696 --> 00:30:32.106
This is the Internet Accounts

00:30:32.436 --> 00:30:33.116
Preference pane.

00:30:33.116 --> 00:30:34.426
And I want to take a look at the

00:30:34.426 --> 00:30:35.506
account types right here.

00:30:35.846 --> 00:30:37.186
You click on an account type, a

00:30:37.186 --> 00:30:39.256
sheet comes down and you go

00:30:39.256 --> 00:30:40.476
ahead and enter the details so

00:30:40.476 --> 00:30:41.576
you can create that new account

00:30:41.576 --> 00:30:41.776
type.

00:30:43.236 --> 00:30:44.796
Again, we'll start off with our

00:30:45.036 --> 00:30:46.356
list of ContainerViews.

00:30:46.816 --> 00:30:48.816
And the account types, there's a

00:30:48.816 --> 00:30:49.916
small number of account types,

00:30:49.916 --> 00:30:51.756
there's only 10, we can put all

00:30:51.806 --> 00:30:54.946
of those and have just a little

00:30:54.946 --> 00:30:55.556
bit of scrolling.

00:30:55.556 --> 00:30:56.916
So, we don't need to worry about

00:30:56.916 --> 00:30:58.986
having views come in and out

00:30:59.446 --> 00:31:00.106
dynamically.

00:31:00.106 --> 00:31:01.916
It's a one-dimensional vertical

00:31:01.916 --> 00:31:02.376
layout.

00:31:02.616 --> 00:31:04.916
So, we're really limiting down

00:31:05.196 --> 00:31:07.046
to deciding between StackView

00:31:07.046 --> 00:31:07.706
and TableView.

00:31:08.236 --> 00:31:10.636
We don't need selection.

00:31:10.636 --> 00:31:11.436
In fact, each one of those

00:31:11.436 --> 00:31:12.176
items, there's a button.

00:31:12.176 --> 00:31:13.486
We don't want to provide a

00:31:13.486 --> 00:31:14.716
selection there, we want to drop

00:31:14.716 --> 00:31:16.826
the sheet down as soon as the

00:31:16.826 --> 00:31:17.956
user presses the button.

00:31:19.306 --> 00:31:20.656
So, this is really starting to

00:31:20.656 --> 00:31:21.586
look like a StackView.

00:31:22.306 --> 00:31:24.666
And given the requirements that

00:31:24.666 --> 00:31:25.796
I've laid out, this is exactly

00:31:25.796 --> 00:31:26.726
what I would recommend that you

00:31:26.726 --> 00:31:28.056
use today, is a StackView.

00:31:28.616 --> 00:31:31.856
But then the accounts preference

00:31:31.856 --> 00:31:33.066
pane is using a TableView.

00:31:34.126 --> 00:31:36.156
Part of the reason is

00:31:36.156 --> 00:31:36.776
historical.

00:31:37.956 --> 00:31:39.216
The Internet Accounts preference

00:31:39.216 --> 00:31:40.226
pane was written before we had

00:31:40.226 --> 00:31:41.666
StackView and AppKit, and it

00:31:41.666 --> 00:31:42.456
works just fine.

00:31:42.456 --> 00:31:43.526
You can tell TableView not to

00:31:43.526 --> 00:31:44.336
have a selection.

00:31:44.946 --> 00:31:46.166
The code's already in place.

00:31:46.166 --> 00:31:46.826
It works great.

00:31:47.326 --> 00:31:50.406
But if we dig into it a little

00:31:50.406 --> 00:31:51.516
bit more, if we scroll down to

00:31:51.516 --> 00:31:52.666
the bottom, there's this add

00:31:52.666 --> 00:31:53.276
other account.

00:31:53.426 --> 00:31:55.446
You click on that, 7 new account

00:31:55.446 --> 00:31:56.116
types are added.

00:31:56.846 --> 00:31:58.496
So, now we have 17 items to

00:31:58.496 --> 00:31:59.086
scroll through.

00:31:59.896 --> 00:32:01.716
StackView can handle this quite

00:32:01.716 --> 00:32:02.176
easily.

00:32:02.556 --> 00:32:04.196
But you have to manually start

00:32:04.196 --> 00:32:05.256
adding the items to the

00:32:05.256 --> 00:32:05.736
StackView.

00:32:06.206 --> 00:32:08.496
Not a lot of code.

00:32:08.496 --> 00:32:11.076
But at this point, the data is

00:32:11.076 --> 00:32:11.856
dynamic.

00:32:11.856 --> 00:32:12.836
I would start to lean toward

00:32:12.836 --> 00:32:13.946
using something that's data

00:32:13.946 --> 00:32:15.446
source back, and that you can

00:32:15.446 --> 00:32:16.776
just tell the table to reload

00:32:16.776 --> 00:32:18.266
and to provide the dynamic data

00:32:18.486 --> 00:32:19.366
from the data source.

00:32:19.616 --> 00:32:21.116
So, at this point, I would start

00:32:21.116 --> 00:32:22.026
recommending TableView.

00:32:24.876 --> 00:32:26.606
This is terminal's new remote

00:32:26.606 --> 00:32:27.096
connection.

00:32:27.936 --> 00:32:29.926
And this is a great example of

00:32:29.926 --> 00:32:30.636
NSBrowser.

00:32:31.336 --> 00:32:32.726
I want to critique this entire

00:32:33.056 --> 00:32:34.516
interface here, looking at the

00:32:34.516 --> 00:32:35.986
size and shape of the UI.

00:32:35.986 --> 00:32:37.896
In particular, the use of

00:32:37.896 --> 00:32:39.426
vertical space versus horizontal

00:32:39.426 --> 00:32:39.916
space.

00:32:40.486 --> 00:32:43.676
And I think the best way to

00:32:43.676 --> 00:32:46.286
examine this is to compare it to

00:32:46.286 --> 00:32:47.616
what it might look like if we

00:32:47.616 --> 00:32:49.076
used an outline view instead.

00:32:49.966 --> 00:32:52.456
Well, immediately, over on the

00:32:52.456 --> 00:32:55.196
right-hand side we have this big

00:32:55.196 --> 00:32:55.926
blank area.

00:32:55.926 --> 00:32:57.426
So, this is not really great use

00:32:57.426 --> 00:32:58.036
of space.

00:32:59.456 --> 00:33:02.186
Further, as the user turns down

00:33:02.186 --> 00:33:03.546
different services to look at

00:33:03.546 --> 00:33:05.376
the various servers, they'll end

00:33:05.376 --> 00:33:06.826
up with a lot of similar names

00:33:06.826 --> 00:33:07.646
and you'll have to do a lot of

00:33:07.646 --> 00:33:09.806
scrolling to find what you want.

00:33:09.806 --> 00:33:11.796
And lastly, I have two sets of

00:33:11.856 --> 00:33:13.116
plus and minus buttons.

00:33:13.836 --> 00:33:14.506
What do they do?

00:33:15.266 --> 00:33:16.726
Well, obviously, they might add

00:33:16.726 --> 00:33:18.196
servers and services, but which

00:33:18.196 --> 00:33:19.806
one adds servers and which one

00:33:19.806 --> 00:33:20.756
adds services?

00:33:22.296 --> 00:33:24.156
With Browser, we get a nice

00:33:24.216 --> 00:33:25.366
interactive division.

00:33:27.176 --> 00:33:29.946
It's very clear which column is

00:33:29.946 --> 00:33:31.496
for servers, which column is for

00:33:31.496 --> 00:33:34.406
services, which plus and minus

00:33:34.406 --> 00:33:35.706
button act on which column.

00:33:39.186 --> 00:33:42.206
But sometimes, one size does not

00:33:42.206 --> 00:33:42.606
fit all.

00:33:42.846 --> 00:33:44.366
And a canonical example of that

00:33:44.366 --> 00:33:44.956
is the Finder.

00:33:45.636 --> 00:33:46.656
The Finder has the segmented

00:33:46.656 --> 00:33:48.216
control so that you can browse

00:33:48.216 --> 00:33:50.196
your files by list view or by

00:33:50.196 --> 00:33:52.726
icon view, and by column view.

00:33:53.276 --> 00:33:56.136
So, given all the situation and

00:33:56.136 --> 00:33:57.296
type of data, the user might

00:33:57.296 --> 00:33:58.406
have their own preference, and

00:33:58.406 --> 00:33:59.706
you might have to implement more

00:33:59.706 --> 00:34:00.306
than one style.

00:34:00.306 --> 00:34:01.896
So, you have to consider this as

00:34:01.896 --> 00:34:02.176
well.

00:34:02.866 --> 00:34:04.856
As another example, here is a

00:34:04.856 --> 00:34:06.036
screenshot of Image Capture.

00:34:06.366 --> 00:34:07.766
These are images that had

00:34:07.766 --> 00:34:09.106
recently taken on my phone.

00:34:09.596 --> 00:34:10.656
And they showed up in Image

00:34:10.656 --> 00:34:11.906
Capture in an icon view.

00:34:12.315 --> 00:34:13.876
I can quickly find the photo I'm

00:34:13.876 --> 00:34:15.366
looking for and drag it over and

00:34:15.366 --> 00:34:16.386
copy to my desktop.

00:34:17.735 --> 00:34:19.916
But sometimes finding the photo

00:34:19.916 --> 00:34:20.856
can be a little bit difficulty,

00:34:20.856 --> 00:34:21.946
especially if I'm trying to find

00:34:21.946 --> 00:34:23.266
a movie that has a similar

00:34:24.876 --> 00:34:26.406
preview as one of the pictures.

00:34:27.676 --> 00:34:29.065
Well, user preferences has this

00:34:29.065 --> 00:34:30.186
little control way down here in

00:34:30.186 --> 00:34:32.126
the bottom, it's a segmented

00:34:32.126 --> 00:34:33.416
control, so it allows us to

00:34:33.416 --> 00:34:35.036
switch from icon view over the

00:34:35.036 --> 00:34:35.525
list view.

00:34:36.096 --> 00:34:37.025
Now, in list view, I've got a

00:34:37.025 --> 00:34:39.536
nice column here multiple

00:34:39.536 --> 00:34:39.956
columns.

00:34:39.956 --> 00:34:41.025
I can click on their headers,

00:34:41.545 --> 00:34:43.815
reorder it by type, and find the

00:34:43.815 --> 00:34:44.896
movie that I was looking for.

00:34:48.226 --> 00:34:50.746
And at last, I want to

00:34:50.746 --> 00:34:51.926
deconstruct the printer's

00:34:51.926 --> 00:34:52.786
preference pane here.

00:34:53.335 --> 00:34:55.936
We have an NSTableView here.

00:34:56.206 --> 00:34:58.726
It's using group row headers.

00:34:59.176 --> 00:35:01.316
It supports printers, faxes, and

00:35:01.316 --> 00:35:02.126
even scanners.

00:35:02.746 --> 00:35:05.036
And then over on the right-hand

00:35:05.036 --> 00:35:07.046
side, we have a tab less

00:35:07.046 --> 00:35:07.606
TabView.

00:35:08.126 --> 00:35:09.136
But we haven't talked about

00:35:09.136 --> 00:35:11.516
TabViews in this session at all

00:35:11.516 --> 00:35:12.726
yet, but I want to point out

00:35:12.726 --> 00:35:13.946
something very interesting about

00:35:13.946 --> 00:35:14.966
tab less TabViews.

00:35:15.096 --> 00:35:17.656
With a tab less TabView, you can

00:35:17.656 --> 00:35:19.426
set up your interface for the

00:35:19.426 --> 00:35:20.176
different types.

00:35:21.276 --> 00:35:22.606
For example, a printer is going

00:35:22.606 --> 00:35:23.256
to have very different

00:35:23.256 --> 00:35:24.776
properties, detailed properties,

00:35:24.776 --> 00:35:25.896
than a fax machine is going to

00:35:25.896 --> 00:35:26.156
have.

00:35:26.506 --> 00:35:27.556
So, I could set up those

00:35:27.676 --> 00:35:29.346
different properties in a tab

00:35:29.346 --> 00:35:30.466
less tab, and then

00:35:30.466 --> 00:35:32.096
programmatically select the tab

00:35:32.436 --> 00:35:33.366
as the user changes the

00:35:33.366 --> 00:35:34.566
selection in the TableView.

00:35:35.016 --> 00:35:36.146
And then the tab will do all the

00:35:36.146 --> 00:35:37.826
hard work of loading up the

00:35:37.826 --> 00:35:39.426
appropriate Zip file and adding

00:35:39.426 --> 00:35:40.976
the views in the view hierarchy

00:35:40.976 --> 00:35:41.826
automatically for me.

00:35:42.726 --> 00:35:43.966
We looked into the detail list,

00:35:43.966 --> 00:35:44.346
here.

00:35:44.696 --> 00:35:46.276
We can have a collection of

00:35:46.276 --> 00:35:47.836
StackViews here.

00:35:48.086 --> 00:35:49.376
And we'll break that down even

00:35:49.376 --> 00:35:49.756
further.

00:35:49.756 --> 00:35:51.166
We can see that we have GridView

00:35:51.166 --> 00:35:52.406
of the detail properties of

00:35:52.406 --> 00:35:53.466
their labels, and the detailed

00:35:53.466 --> 00:35:54.366
properties of the printer.

00:35:54.806 --> 00:35:57.266
And even the page size and the

00:35:57.266 --> 00:35:58.466
default printer and its

00:35:58.466 --> 00:36:00.216
associated pop-up menus.

00:36:01.146 --> 00:36:02.206
And now, with all of this in

00:36:02.206 --> 00:36:04.336
place when the user switches to

00:36:04.336 --> 00:36:06.006
Arabic, everything flips

00:36:06.006 --> 00:36:07.136
appropriately for the right to

00:36:07.136 --> 00:36:09.306
left language and an Arabic user

00:36:09.496 --> 00:36:11.316
has a great user experience.

00:36:14.636 --> 00:36:17.066
So, to review, AppKit has a

00:36:17.066 --> 00:36:19.086
number of ready-made views that

00:36:19.086 --> 00:36:20.636
could be used for many uses.

00:36:21.796 --> 00:36:23.616
Use the chart that I had earlier

00:36:23.616 --> 00:36:25.296
and use some of the use cases

00:36:25.296 --> 00:36:26.316
that I've talked about and how

00:36:26.316 --> 00:36:27.226
to breakdown your user

00:36:27.226 --> 00:36:29.076
interface, critique your space,

00:36:29.456 --> 00:36:31.076
and figure out which type of

00:36:31.076 --> 00:36:32.236
ContainerView best suits your

00:36:32.236 --> 00:36:32.456
needs.

00:36:32.566 --> 00:36:33.886
And don't forget that you can

00:36:33.886 --> 00:36:34.816
compose things.

00:36:35.126 --> 00:36:37.376
So, you can stick GridViews

00:36:37.376 --> 00:36:39.636
inside of StackViews and vice

00:36:39.636 --> 00:36:39.976
versa.

00:36:40.496 --> 00:36:44.516
Just to recap some of the learn

00:36:44.516 --> 00:36:45.676
more information that Troy had

00:36:45.676 --> 00:36:47.896
showed you earlier for StackView

00:36:47.896 --> 00:36:48.516
and GridView.

00:36:49.976 --> 00:36:51.226
Some more information for

00:36:51.226 --> 00:36:52.536
TableView, OutlineView and

00:36:52.536 --> 00:36:52.986
Browser.

00:36:55.396 --> 00:36:56.926
And lastly some more information

00:36:56.926 --> 00:36:57.716
for CollectionView.

00:36:59.116 --> 00:37:00.226
And of course, you can find

00:37:00.406 --> 00:37:01.546
links to all of this information

00:37:01.546 --> 00:37:03.076
and more at the more information

00:37:03.076 --> 00:37:05.236
for session 218 on the

00:37:05.236 --> 00:37:08.566
developer's site.

00:37:08.746 --> 00:37:09.806
Related sessions, we have

00:37:09.806 --> 00:37:12.286
"Advanced Touch Bar" later today

00:37:12.286 --> 00:37:13.756
at 5:10 where they will even

00:37:13.756 --> 00:37:15.536
talk a little bit about using

00:37:15.976 --> 00:37:17.126
some of these ContainerViews in

00:37:17.126 --> 00:37:17.736
the Touch Bar.

00:37:18.106 --> 00:37:19.276
And of course, please check out

00:37:19.276 --> 00:37:21.176
the Cocoa Development Tips, and

00:37:21.176 --> 00:37:21.976
they'll give you some more

00:37:21.976 --> 00:37:23.236
interesting tips.

00:37:23.836 --> 00:37:25.626
And with that, enjoy the rest of

00:37:25.626 --> 00:37:26.976
WWDC, thank you.

00:37:27.016 --> 00:37:28.000
[ Applause ]