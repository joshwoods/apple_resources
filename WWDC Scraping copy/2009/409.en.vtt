WEBVTT

00:00:13.970 --> 00:00:18.630
>> Good morning, and welcome to
Getting Started With Interface Builder.

00:00:18.629 --> 00:00:22.629
My name is Joey Hagedorn and I'm an
Engineer on the Interface Builder team.

00:00:22.629 --> 00:00:32.119
And today we're going to talk about building applications
with Interface Builder for Mac OS X and the iPhone.

00:00:32.119 --> 00:00:34.780
There's three main things we need to talk about today.

00:00:34.780 --> 00:00:38.939
First, laying out your application inside Interface Builder.

00:00:38.939 --> 00:00:46.879
And that's putting all the views and controls
into your application, and then configuring them

00:00:46.880 --> 00:00:52.370
such that they look and behave the way you want them to.

00:00:52.369 --> 00:00:57.559
Next, we'll talk about connecting that interface
that we build to the code that you write

00:00:57.560 --> 00:00:59.250
so your application does something interesting.

00:00:59.250 --> 00:01:04.280
And this consists of if you want
to make a button call some method,

00:01:04.280 --> 00:01:11.560
or if you want after a user does an
action you need to update the interface.

00:01:11.560 --> 00:01:15.340
And finally, we're going to talk
about the life cycle of a nib.

00:01:15.340 --> 00:01:19.480
What's File's Owner, and how does your view get on screen?

00:01:19.480 --> 00:01:26.760
So to talk about the first part, the easiest thing
to do is just build a simple sample application.

00:01:26.760 --> 00:01:28.730
This is the application we're going to build today.

00:01:28.730 --> 00:01:33.590
It's got a big map in the center
from the new MapKit framework.

00:01:33.590 --> 00:01:39.469
Some buttons along the bottom that take us to
a couple of predefined locations on the map.

00:01:39.469 --> 00:01:45.250
And across the top, there's a latitude,
longitude coordinate on the center of the map.

00:01:45.250 --> 00:01:49.709
So let's get started.

00:01:49.709 --> 00:01:53.929
OK. So I've got Xcode open here
and I'll create a new project.

00:01:53.930 --> 00:02:01.110
I'm going to choose a view-based application because
we just have one screen full of information to display.

00:02:04.189 --> 00:02:06.009
Just save it on the Desktop.

00:02:06.010 --> 00:02:10.920
[ Silence ]

00:02:10.919 --> 00:02:14.949
And I'll resize the window here.

00:02:16.280 --> 00:02:23.020
OK. So before we get started building the application,
I want to add a couple of resources to the project.

00:02:23.020 --> 00:02:26.230
The images for the buttons that we'll have along the bottom.

00:02:26.229 --> 00:02:32.289
So I'm going to down to my Downloads folder
and grab our images and just drag them

00:02:32.289 --> 00:02:36.509
into the Resources group to keep the project organized.

00:02:36.509 --> 00:02:38.719
Click Add.

00:02:38.719 --> 00:02:45.400
And also, because we'll be using the MapKit framework
today, I'm going to add that framework to the target.

00:02:45.400 --> 00:02:49.550
So to do that I'm going to the target's
group in the Groups and Files area.

00:02:49.550 --> 00:02:57.400
And I'm going to hold down Control and click
on the Applications Target, and choose Add

00:02:57.400 --> 00:03:04.810
and Existing Framework to pick MapKit and that's all set.

00:03:04.810 --> 00:03:09.120
Now, I'd like to review a couple
of files that came in the template.

00:03:09.120 --> 00:03:16.719
If we look in the classes group, we see there's the
Application Delegate, Header and Implementation file.

00:03:16.719 --> 00:03:21.629
And that contains some code for now that'll
get run when the application is launched.

00:03:21.629 --> 00:03:26.710
And also the PlaceMapViewController.

00:03:26.710 --> 00:03:32.080
When the application launches it'll ask
ViewController for its view to put it on the screen.

00:03:32.080 --> 00:03:38.810
And that ViewController is going to get its view from
inside the User Interface file, PlaceMapViewController.zib.

00:03:38.810 --> 00:03:42.009
So I'll double-click that now to open Interface Builder.

00:03:42.009 --> 00:03:47.159
[ Silence ]

00:03:47.159 --> 00:03:53.310
And what we see showed up on the
screen is this Document window

00:03:53.310 --> 00:03:57.759
and this is a representation of
what was contained inside that file.

00:03:57.759 --> 00:04:03.159
I'd like to draw your attention to the View icon,
which is the main view that we'll be presenting.

00:04:03.159 --> 00:04:10.099
And this view, it's already open but if we double-click
it, it brings forward the Editor window, which is.

00:04:10.099 --> 00:04:12.829
That's the view we want to put stuff in.

00:04:12.830 --> 00:04:17.330
So let's get started and start
adding elements to the interface.

00:04:17.329 --> 00:04:25.529
To get. To put elements on the screen we go over
to the library on the left-hand side of the screen,

00:04:25.529 --> 00:04:32.189
and this contains different objects
that we use in Cocoa Touch.

00:04:32.189 --> 00:04:40.410
If we were building a Mac OS X application, we would see
the objects that would be available to put in an OS X view.

00:04:40.410 --> 00:04:44.300
There's a couple of different ways we
can view the things in the library.

00:04:44.300 --> 00:04:49.840
As I go down to this Action menu
in the lower left-hand corner,

00:04:49.839 --> 00:04:53.669
I can choose to view as icons for a more condensed view.

00:04:53.670 --> 00:04:56.360
Or as small icons.

00:04:56.360 --> 00:05:00.250
But for now, I'll just view in the default layout.

00:05:00.250 --> 00:05:08.910
And I want to put a navigation bar at the top, so
I can click in this filter field and just type nav.

00:05:08.910 --> 00:05:14.770
It'll filter down and I just grab a navigation
bar and drop it in the top of our view.

00:05:14.769 --> 00:05:18.139
OK. So we've started building our interface.

00:05:18.139 --> 00:05:23.680
But this navigation bar has the default
blue style, and we want it to look black.

00:05:23.680 --> 00:05:29.800
So we click on it and bring our attention to the
Attributes Inspector on the right side of the screen.

00:05:29.800 --> 00:05:35.160
We want to change the style to black opaque.

00:05:35.160 --> 00:05:39.320
There's some other things about
the Inspector while I'm here.

00:05:39.319 --> 00:05:44.680
If I put my mouse over a given control on
the Inspector, it brings up a tool tip.

00:05:44.680 --> 00:05:48.680
And the tool tip not only displays a
description of what that control does.

00:05:48.680 --> 00:05:53.430
But it also shows you the API that's
related to that control.

00:05:53.430 --> 00:05:57.110
So you can correlate what you're doing in
Interface Builder to what you might see

00:05:57.110 --> 00:06:00.939
in other documentation or in other codes somewhere.

00:06:00.939 --> 00:06:04.170
There's a whole number of controls we can.

00:06:04.170 --> 00:06:08.330
Or options to edit on this view.

00:06:08.329 --> 00:06:12.009
But we only need to change it to black for now.

00:06:12.009 --> 00:06:20.680
We should also get a nice placeholder title, so I'll
just select it in the Editor view and double-click it.

00:06:20.680 --> 00:06:23.009
And I can edit it right in place.

00:06:23.009 --> 00:06:35.879
[ Silence ]

00:06:35.879 --> 00:06:37.240
OK. So that looks good.

00:06:37.240 --> 00:06:42.949
Now, I want to drag the toolbar to the
bottom, so again I'll go back to the library.

00:06:42.949 --> 00:06:45.750
Go to the filter field.

00:06:45.750 --> 00:06:48.329
Tool for Toolbar.

00:06:48.329 --> 00:06:50.050
And I'll drag that out.

00:06:50.050 --> 00:06:53.050
And as I bring it into the window, you'll notice,

00:06:53.050 --> 00:06:58.210
Interface Builder sees that we already have a black
styled navigation bar, so it tries to help set

00:06:58.209 --> 00:07:01.419
up some properties that we think might be appropriate.

00:07:01.420 --> 00:07:05.400
So it noticed the changes to the black style.

00:07:05.399 --> 00:07:11.489
Also, as I drag it towards the bottom of the
window it sort of clicks into place because that's

00:07:11.490 --> 00:07:15.629
where toolbars go and the guides are helping us out.

00:07:15.629 --> 00:07:21.149
One more thing, as I drag objects around
you might notice these blue dashed lines.

00:07:21.149 --> 00:07:29.250
The blue dashed lines are Interface Builder's HI guides and
they give us, if we were positioning buttons for example,

00:07:29.250 --> 00:07:33.009
they would help position them such that they
adhere to the user interface guidelines.

00:07:33.009 --> 00:07:34.659
So they can really help ease development.

00:07:34.660 --> 00:07:38.150
You don't have to go look that stuff up sometimes.

00:07:38.149 --> 00:07:44.129
Especially helpful for putting buttons
in a dialogue or something like that.

00:07:44.129 --> 00:07:47.009
So let's add another button to the toolbar.

00:07:47.009 --> 00:07:48.449
Go back to the library.

00:07:48.449 --> 00:07:53.170
Just drag that out.

00:07:53.170 --> 00:08:00.069
And the way UI toolbars work is they
arrange their contents from left to right.

00:08:00.069 --> 00:08:01.949
The framework does this for us.

00:08:01.949 --> 00:08:09.769
So if we want to have a button on either side of the
screen, we need to add a flexible space in between them

00:08:09.769 --> 00:08:13.349
that will grow to fill the available space.

00:08:13.350 --> 00:08:17.840
So I just grab one of those from the
library and it shows up as this dashed line.

00:08:17.839 --> 00:08:19.439
And that's only in Interface Builder.

00:08:19.439 --> 00:08:22.689
When it runs, there'll be nothing there.

00:08:22.689 --> 00:08:27.149
It'll just be the space.

00:08:27.149 --> 00:08:30.560
OK. So that's looking good.

00:08:30.560 --> 00:08:34.899
But we're still missing the main part
of our interface, which is that big map.

00:08:34.899 --> 00:08:40.259
So to do that I'll go back to the library
one more time and clear the filter field

00:08:40.259 --> 00:08:45.399
and find the map, and I'll just drag that in.

00:08:45.399 --> 00:08:49.529
Again, Interface Builder is trying to help with this.

00:08:49.529 --> 00:08:51.220
It resized it to be.

00:08:51.220 --> 00:08:58.550
To fit the available space between the navigation bar
and the toolbar, so I'll just drop that into place.

00:08:58.549 --> 00:09:04.689
While I'm talking about size, I'd like to bring your
attention to the Size Inspector to do more things with size.

00:09:04.690 --> 00:09:11.480
So we go over to the Inspector on the right-hand
side of the screen and click on the Ruler icon.

00:09:11.480 --> 00:09:15.259
And now we see properties related to the size.

00:09:15.259 --> 00:09:19.889
We can adjust the width or height
numerically, if that's helpful.

00:09:19.889 --> 00:09:23.649
And there's also a section on autosizing.

00:09:23.649 --> 00:09:32.299
What autosizing is in Cocoa and Cocoa
Touch, when a super view is resized we need

00:09:32.299 --> 00:09:37.399
to tell the subview how it should change relative to that.

00:09:37.399 --> 00:09:38.699
So it might grow with it.

00:09:38.700 --> 00:09:42.810
It might stay pinned to a certain side.

00:09:42.809 --> 00:09:48.169
So let's explore the autosizing
controls to see how they work.

00:09:48.169 --> 00:09:55.129
I'll select the Toolbar, and if I move my mouse
over the autosizing area, we'll see it animates

00:09:55.129 --> 00:09:57.559
and gives us an example of what'll happen.

00:09:57.559 --> 00:10:05.719
You can see that as the super view changes size, the
toolbar grows with the width of its contained view.

00:10:05.720 --> 00:10:09.540
But it stays pinned to the bottom and left and right.

00:10:09.539 --> 00:10:14.620
So on the iPhone, when does the super view change size?

00:10:14.620 --> 00:10:16.980
It's not like you're going to resize the window.

00:10:16.980 --> 00:10:19.070
The screens affect size.

00:10:19.070 --> 00:10:22.070
Well, that happens when you're rotating the view.

00:10:22.070 --> 00:10:29.580
So it's important to set up autosizing
on the iPhone as well as on the Desktop.

00:10:29.580 --> 00:10:33.810
So I'll explain this control also.

00:10:33.809 --> 00:10:42.299
Inside the box, there are arrows that indicate
that the view will grow with its super view.

00:10:42.299 --> 00:10:50.620
So if I disable this spring, as we call them, you
can see now in the animation that it's not going

00:10:50.620 --> 00:10:53.019
to resize with the width of its super view.

00:10:53.019 --> 00:10:57.429
To see how this looks when the device
rotates, I'll go to the top of the window

00:10:57.429 --> 00:11:01.769
and click this small arrow and we'll simulate a rotation.

00:11:01.769 --> 00:11:08.210
And we see that the toolbar doesn't really look
right anymore because it has the wrong configuration.

00:11:08.210 --> 00:11:09.509
So I can fix this.

00:11:09.509 --> 00:11:11.490
I can select it.

00:11:11.490 --> 00:11:17.710
Drag it to the width of the view and turn that back on.

00:11:17.710 --> 00:11:22.690
Now, around the outside of the
control we see these I-Beam figures.

00:11:22.690 --> 00:11:28.860
If I disabled the one on the bottom and enabled the one on
the top, that indicates that it'll stay a constant distance

00:11:28.860 --> 00:11:33.320
from the top of the screen rather
than the bottom of the screen.

00:11:33.320 --> 00:11:41.280
So now, if I rotate back to a portrait orientation,
we'll see that the toolbar did what it said it would,

00:11:41.279 --> 00:11:44.480
but this is probably not a desirable configuration.

00:11:44.480 --> 00:11:53.889
So to fix it I'll go back to Landscape,
select the Toolbar, and pin it to the bottom.

00:11:53.889 --> 00:11:59.350
Rotate and it's looking all right now.

00:11:59.350 --> 00:12:04.370
There's one more thing I wanted to do to
configure the map though, so I'll click on it,

00:12:04.370 --> 00:12:10.139
go back to the Attributes Inspector,
which is on the right side, the first tab.

00:12:10.139 --> 00:12:15.100
And I'd like it to display satellite
imagery as well as the road imagery.

00:12:15.100 --> 00:12:20.080
So I can just change the type to hybrid instead of map.

00:12:21.529 --> 00:12:23.089
So our interface is coming along.

00:12:23.090 --> 00:12:26.030
It's at the general layout.

00:12:26.029 --> 00:12:31.959
But we should add those images for the buttons.

00:12:33.080 --> 00:12:37.490
The first thing I'll want to do is change
their style from bordered to plain.

00:12:37.490 --> 00:12:39.460
So to do that I'll click the.

00:12:39.460 --> 00:12:43.810
Select the Toolbar and then I'll
click again to select the button.

00:12:43.809 --> 00:12:48.549
Hold down Shift, and select the other button as
well, because I'd like to add it to both of them.

00:12:48.549 --> 00:12:54.000
And I can edit more than one thing of the
same type with Interface Builder's Inspectors.

00:12:54.000 --> 00:12:59.899
I'll go up to the Style of the Bar
Button Item and change it to plain.

00:12:59.899 --> 00:13:01.789
Now the borders went away.

00:13:01.789 --> 00:13:04.059
But I need the images still.

00:13:04.059 --> 00:13:11.259
To get those I'll go back to the library on the left
side of the screen and choose the Media tab at the top.

00:13:11.259 --> 00:13:19.480
The contents of this tab are populated automatically
with the images and media in your project.

00:13:19.480 --> 00:13:25.820
So as long as the file is associated with
your project you'll see the images you need.

00:13:25.820 --> 00:13:38.430
I'm going to grab this Globe icon and put it on the left
button, and I just drag it and drop it into the button.

00:13:38.429 --> 00:13:46.789
And for the right button, which is the San Francisco
button, I'll grab the Golden Gate Bridge for an icon there.

00:13:46.789 --> 00:13:50.269
So our view looks pretty good right now.

00:13:50.269 --> 00:13:59.370
I'm going to go ahead and save this,
File and Save, and switch back to Xcode.

00:13:59.370 --> 00:14:08.330
Now that I'm in Xcode, I can build and run and try it out.

00:14:08.330 --> 00:14:13.560
OK. So we've got our interface that looks OK.

00:14:13.559 --> 00:14:16.169
It looks fine, but there's.

00:14:16.169 --> 00:14:19.439
The buttons still don't do anything and.

00:14:19.440 --> 00:14:21.460
But we've made a pretty good start.

00:14:21.460 --> 00:14:24.009
So let's talk about what we did for a little bit.

00:14:24.009 --> 00:14:34.970
[ Silence ]

00:14:34.970 --> 00:14:36.500
So we didn't do this.

00:14:36.500 --> 00:14:40.470
We didn't write a lot of code.

00:14:40.470 --> 00:14:43.350
But so what this is, is this is the whole implementation

00:14:43.350 --> 00:14:47.350
of the application we're writing
today without using Interface Builder.

00:14:47.350 --> 00:14:51.009
It includes a lot of extra code.

00:14:51.009 --> 00:14:54.639
Stuff like creating and configuring the UI.

00:14:54.639 --> 00:15:00.059
When I just dragged out the toolbar and added
the buttons to it, that's all I had to do.

00:15:00.059 --> 00:15:03.659
That code we never had to write.

00:15:03.659 --> 00:15:06.789
Interface Builder isn't generating it for us either.

00:15:06.789 --> 00:15:09.860
It's just not in our program anymore.

00:15:09.860 --> 00:15:17.250
There's also a big section of code that's devoted to
just positioning the different views on the screen.

00:15:17.250 --> 00:15:20.460
That's also code we didn't have to write.

00:15:20.460 --> 00:15:27.700
Now, there still is important code here and that's
to make the buttons do things when we click on them.

00:15:27.700 --> 00:15:31.190
And to talk about bringing some
more life to your interface I'd

00:15:31.190 --> 00:15:37.020
like to introduce Kelly Keenan to talk about connections.

00:15:37.019 --> 00:15:43.819
>> So I'd like to talk you about how to
make this project actually do something.

00:15:43.820 --> 00:15:49.290
So Joey started by giving us a
user interface that we can use.

00:15:49.289 --> 00:15:54.490
A view of our map and our buttons and our title.

00:15:54.490 --> 00:15:58.180
And now we need to make that actually do something.

00:15:58.179 --> 00:16:03.509
And as you know, the place where you
do that is in your code normally.

00:16:03.509 --> 00:16:12.600
So let's talk about how to interact between your code
and your views, and that's going to be the interaction

00:16:12.600 --> 00:16:19.710
between Interface Builder and Xcode, the
project with all your important code in it.

00:16:19.710 --> 00:16:25.980
And the way we're going to integrate with Xcode is by
going through the Document window in Interface Builder.

00:16:25.980 --> 00:16:34.909
We're going to use the Document window and pieces of it
in order to access the code that we've written in Xcode.

00:16:34.909 --> 00:16:37.240
And we do that.

00:16:37.240 --> 00:16:44.009
In the example that we're using today,
we're going to do that through File's Owner.

00:16:44.009 --> 00:16:53.659
File's Owner is going to represent the
ViewController that we have in Xcode.

00:16:53.659 --> 00:17:00.819
And that header code is going to look like this, OK?

00:17:00.820 --> 00:17:08.259
And we want to make sure that we can connect
our buttons to the actions that we write,

00:17:08.259 --> 00:17:12.650
the methods that we write in our project in Xcode.

00:17:12.650 --> 00:17:18.120
And to do that we have these two
methods here, zoomIn and zoomOut.

00:17:18.119 --> 00:17:22.899
And you can see that there's a
keyword in there called IBAction.

00:17:22.900 --> 00:17:27.600
Now, Interface Builder has access to
all of the code in your Xcode project.

00:17:27.599 --> 00:17:35.189
But you don't necessarily want to see every method that
you write and every instance variable that you write.

00:17:35.190 --> 00:17:42.150
So IBAction is a way to say to Interface
Builder that this is the method that I care,

00:17:42.150 --> 00:17:46.810
that I need to be able to access from MyViews.

00:17:47.960 --> 00:17:52.860
And if you ever want to look up the
definition of IBAction is actually just void.

00:17:52.859 --> 00:17:59.359
So when this is compiled it gets turned into void, so
it's nothing that changes your code when it's finished.

00:17:59.359 --> 00:18:02.159
It's just for Interface Builder to know about it.

00:18:02.160 --> 00:18:10.340
In the same way that we do actions to connect
methods, we're going to use IBOutlet as a keyword

00:18:10.339 --> 00:18:14.939
to tell Interface Builder what
instance variables we're interested in.

00:18:14.940 --> 00:18:17.450
And what properties we're interested in.

00:18:17.450 --> 00:18:22.920
In this example here, we're going to
connect our map and our navigation bar,

00:18:22.920 --> 00:18:26.410
because we need to do something with them in code.

00:18:26.410 --> 00:18:33.140
So we used the IBOutlet keyword to let Interface Builder
know that this is something that we're going to be using.

00:18:33.140 --> 00:18:41.250
Now, since we're using Properties I just want to remind
you that when we retain something we need to release it.

00:18:41.250 --> 00:18:46.000
So if I forget to do that, make sure you tell me.

00:18:46.000 --> 00:18:50.769
So let's go ahead and look at the demo.

00:18:50.769 --> 00:19:00.269
We have the view set up already that Joey made, and we have
these buttons that we would like to connect to something.

00:19:00.269 --> 00:19:06.879
And I showed you a little sample already that I want to be
able to connect them to those action methods that we have.

00:19:06.880 --> 00:19:09.930
The zoomIn and zoomOut methods.

00:19:09.930 --> 00:19:13.730
So let's go ahead and go to our Xcode project.

00:19:13.730 --> 00:19:18.940
Now, the template that we use set up a class for us already.

00:19:18.940 --> 00:19:19.490
The class.

00:19:19.490 --> 00:19:22.410
The PlaceMapViewController.

00:19:22.410 --> 00:19:25.340
Try to say that fast a few times.

00:19:25.339 --> 00:19:29.029
The PlaceMapViewController is going to be the controller

00:19:29.029 --> 00:19:34.670
that manages our PlaceMapView that
we have in Interface Builder.

00:19:34.670 --> 00:19:42.390
As you know, this is all part of the model view
controller paradigm, and this is the controller part,

00:19:42.390 --> 00:19:46.590
whereas the view we made in Interface Builder is that view.

00:19:46.589 --> 00:19:52.019
So the first thing we'd like to do is we'd
like to have that zoomIn and zoomOut method.

00:19:52.019 --> 00:19:59.539
So I'm going to add it here in our ViewController.

00:19:59.539 --> 00:20:06.039
And notice that I've used the IBAction
keyword for both of them.

00:20:06.039 --> 00:20:12.409
Great. So we have the zoomIn and zoomOut
methods declared, but we have no definition.

00:20:12.410 --> 00:20:15.330
We need to actually make them do something.

00:20:15.329 --> 00:20:17.869
So let's go to the implementation file.

00:20:17.869 --> 00:20:22.449
For the purposes of our demo today, I'm
going to delete everything that's in here

00:20:22.450 --> 00:20:26.370
at the moment and we'll start from scratch.

00:20:26.369 --> 00:20:32.059
And let's put in the zoomIn and zoomOut method.

00:20:32.059 --> 00:20:37.639
So these two methods do practically the same thing.

00:20:37.640 --> 00:20:46.000
The first thing they do is create a home coordinate, and
luckily, I've already determined what the locations are

00:20:46.000 --> 00:20:52.650
that I need for my demo today, so we're going to use those.

00:20:52.650 --> 00:20:55.910
Using the home coordinate we're
going to create a home region,

00:20:55.910 --> 00:21:01.910
and this is all part of the MapKit
framework that we added earlier.

00:21:01.910 --> 00:21:05.800
And feel free to look up the documentation for that later.

00:21:05.799 --> 00:21:11.000
I had to. It's not something I knew off the top of my head.

00:21:11.000 --> 00:21:18.039
So we use the home region to set the region of the map.

00:21:18.039 --> 00:21:18.990
It's great.

00:21:18.990 --> 00:21:23.460
I have this map property here that I haven't made yet.

00:21:23.460 --> 00:21:31.549
We need to be able to access the map from our
code so that we can change it and so the region

00:21:31.549 --> 00:21:35.740
to the coordinates that I've specified here.

00:21:35.740 --> 00:21:43.730
So let's go back to the header file and add a map property.

00:21:43.730 --> 00:21:52.150
And before I do that I'm going to
make sure that I import the MapKit.

00:21:52.150 --> 00:21:58.450
So let's add an instance variable for our MapView.

00:21:58.450 --> 00:22:04.240
And I'm going to add a property for it.

00:22:04.240 --> 00:22:11.269
And notice here that I've used the IBOutlet
keywords so that Interface Builder knows about it.

00:22:11.269 --> 00:22:17.589
Great. Since I've added a property, I
also want to go to the implementation file

00:22:17.589 --> 00:22:20.119
and make sure I synthesize that property.

00:22:20.119 --> 00:22:28.559
And the one thing I asked you to remind me to do is that
I retain that property, so I also need to release it.

00:22:28.559 --> 00:22:36.569
So in our dealloc method I released the
map and then called dealloc on super.

00:22:36.569 --> 00:22:39.169
OK. So now, I have.

00:22:39.170 --> 00:22:54.789
In the header file, I have a map and I have two methods
that I want to connect to MyView in Interface Builder.

00:22:54.789 --> 00:22:58.089
So let's go back to Interface Builder.

00:23:00.950 --> 00:23:03.480
I'm going to hide this for a minute.

00:23:03.480 --> 00:23:12.670
OK. So back in Interface Builder I need to be able to make
those connections between my methods and instance variables.

00:23:12.670 --> 00:23:21.140
So in this case, File's Owner is going to
represent that controller code that we wrote.

00:23:21.140 --> 00:23:30.330
And to make that happen I select File's Owner and
I go to the Identity Inspector in the attributes.

00:23:30.329 --> 00:23:32.809
In the Inspector, sorry.

00:23:32.809 --> 00:23:39.929
Go to the Identity Inspector and you'll notice
that at the top we set the class identity.

00:23:39.930 --> 00:23:48.490
And in this case, the template has already set it
for us, so this is set to the PlaceMapViewController.

00:23:48.490 --> 00:23:52.390
OK? Great.

00:23:52.390 --> 00:23:58.110
So File's Owner is a representation of our
controller that we just wrote which has

00:23:58.109 --> 00:24:01.159
that instance variable and it has the methods.

00:24:01.160 --> 00:24:04.170
So now, I want to make those connections.

00:24:04.170 --> 00:24:12.430
So to make those connections I'm going
to Control-click on File's Owner.

00:24:12.430 --> 00:24:17.240
Again, I Control-click or right click on File's Owner.

00:24:17.240 --> 00:24:24.120
And now I can see a list of all the outlets and
actions that are available in my controller.

00:24:24.119 --> 00:24:35.779
So the first thing I want to do here is I'd
like to connect the map to the map in MyView.

00:24:35.779 --> 00:24:42.420
So I just drag from the well on
the right-hand side to my MapView.

00:24:42.420 --> 00:24:48.830
And it might be difficult to see, but nothing
else highlights here except for the MapView.

00:24:48.829 --> 00:24:56.429
Interface Builder does a little bit to type check
to see what exactly will connect to this map.

00:24:56.430 --> 00:25:02.370
And we already said that the map was an
MKMapView, and here we have an MKMapView.

00:25:02.369 --> 00:25:16.549
So we select that, and now you can see in the Connections
head that we've connected the MapOutlet to the MapView.

00:25:16.549 --> 00:25:21.500
And now I want to connect to these
two actions, zoomIn and zoomOut.

00:25:21.500 --> 00:25:29.299
So to make those connections I'm actually going to
show you a different way that we can make connections.

00:25:29.299 --> 00:25:33.809
So there's two ways, and depending on
which way is more comfortable for you,

00:25:33.809 --> 00:25:37.639
you might choose to do the first way or the second way.

00:25:37.640 --> 00:25:44.680
So in this case I'm going to use
Control-drag instead of Control-click.

00:25:44.680 --> 00:25:53.100
So I'm going to select the button, and in this case, I
want the zoomOut button, and I'm going to Control-click

00:25:53.099 --> 00:25:56.909
and drag from the button to File's Owner.

00:25:56.910 --> 00:26:00.940
And now I get a list of the actions
that I can connect that button to.

00:26:00.940 --> 00:26:05.299
So I'm going to connect it to zoomOut.

00:26:05.299 --> 00:26:12.019
And again, with the other button I'm going
to select my zoomIn button and Control-click

00:26:12.019 --> 00:26:15.980
and drag from the button to File's Owner.

00:26:15.980 --> 00:26:22.059
I can see the zoomOut there's a dash next to it, meaning
that it's already connected to something, which is fine,

00:26:22.059 --> 00:26:26.730
because I wanted to connect this button
to zoomIn, so let's select zoomIn.

00:26:26.730 --> 00:26:33.660
Great. So now if I Control-click again on
File's Owner, I can see that the zoomIn

00:26:33.660 --> 00:26:39.210
and zoomOut actions are now connected as well as our map.

00:26:39.210 --> 00:26:43.960
Now, another thing you might notice in here is that
there is an outlet that was already connected for me,

00:26:43.960 --> 00:26:47.340
and that was done by the template for us.

00:26:47.339 --> 00:26:51.329
And that's the ViewOutlet.

00:26:51.329 --> 00:26:59.210
So our PlaceMapViewController is
actually a subclass of UIViewController.

00:26:59.210 --> 00:27:09.180
And just like we added an instance variable map to
our controller code, UIViewController has a ViewOutlet

00:27:09.180 --> 00:27:12.740
that we need to make sure it's connected as well.

00:27:12.740 --> 00:27:24.740
And in this case the template has already done that and
made sure that we connected the ViewOutlet to the view.

00:27:24.740 --> 00:27:31.609
So File's Owner is a representation
of our PlaceMapViewController.

00:27:31.609 --> 00:27:38.939
Great. Now, when exactly does this
ViewController object get created?

00:27:38.940 --> 00:27:50.500
To look at that I'm going to go back into the Xcode project
and there is another zib file here, the Main Window zib.

00:27:50.500 --> 00:27:53.009
And if I open that up.

00:27:53.009 --> 00:27:57.619
[ Silence ]

00:27:57.619 --> 00:28:02.779
And look at the Main Window zib,
we'll see it also has a view con.

00:28:02.779 --> 00:28:04.849
It also has a File's Owner.

00:28:04.849 --> 00:28:09.299
And if I select that we'll see that
its class is set to UIApplication.

00:28:09.299 --> 00:28:17.779
This Main Window zib is going to be the window that
gets launched when our application starts to run.

00:28:17.779 --> 00:28:26.000
Now, inside of the zib we have a PlaceMapViewController.

00:28:26.000 --> 00:28:32.960
And when I selected that you can see that
the class is set to PlaceMapViewController.

00:28:32.960 --> 00:28:38.100
This is where MyViewController is actually being created.

00:28:38.099 --> 00:28:46.709
So when the Main Window zib loads it
will create a PlaceMapViewController.

00:28:46.710 --> 00:28:55.789
We've set the PlaceMapViewController to the
other zib, the PlaceMapViewController zib.

00:28:55.789 --> 00:29:06.920
And so when one of these is created it needs
to open up the other zib and load that view.

00:29:06.920 --> 00:29:14.990
And we can see that that happens in the PlaceMapAppDelegate.

00:29:14.990 --> 00:29:23.420
In this case the view is loaded when we
add the controller's view to the window.

00:29:23.420 --> 00:29:27.220
So the window is open and created.

00:29:27.220 --> 00:29:34.170
It creates a controller, and the first time
that the ViewController accesses the view is

00:29:34.170 --> 00:29:43.240
when our other nib gets loaded
and everything in it gets created.

00:29:43.240 --> 00:29:53.279
OK? So we've made connections and we have seen how
things are connected and what's going to create what.

00:29:53.279 --> 00:29:58.500
So let's build and run and make sure
that those buttons actually worked.

00:29:58.500 --> 00:30:08.839
OK. So hopefully if I did everything right, if I click
on the zoomIn button that represents San Francisco.

00:30:08.839 --> 00:30:10.750
It did nothing.

00:30:12.519 --> 00:30:16.039
And the question here is what did I forget to do?

00:30:16.039 --> 00:30:24.210
Well, luckily I'm pretty sure that what I forgot
to do was save the file because everybody has

00:30:24.210 --> 00:30:27.230
to do something wrong in their demo, right?

00:30:27.230 --> 00:30:30.309
So let's try this again.

00:30:30.309 --> 00:30:32.139
Build and run.

00:30:32.140 --> 00:30:36.050
Stop the executable that's running and try it again.

00:30:36.049 --> 00:30:36.680
Ready. Set.

00:30:36.680 --> 00:30:38.759
You guys believe it'll work this time?

00:30:38.759 --> 00:30:39.759
>> [Audience] Yes.

00:30:39.759 --> 00:30:40.160
>> Are you sure?

00:30:40.160 --> 00:30:41.340
>> Heck, yes.

00:30:41.339 --> 00:30:43.109
>> I'm not so sure.

00:30:43.109 --> 00:30:45.009
OK. I'm going to try.

00:30:45.009 --> 00:30:47.500
Oh, thank goodness.

00:30:47.500 --> 00:30:54.000
Yay! OK. Does that place look familiar?

00:30:54.000 --> 00:30:55.000
>> [Inaudible].

00:30:55.000 --> 00:30:56.759
>> Yes. It's where we are.

00:30:56.759 --> 00:31:00.650
Surprise! ZoomOut hopefully does what it expects to do.

00:31:00.650 --> 00:31:01.660
It zooms out.

00:31:01.660 --> 00:31:03.560
Great. So we connected two buttons.

00:31:03.559 --> 00:31:05.569
Woohoo! OK.

00:31:05.569 --> 00:31:10.269
Now, the thing we didn't do yet is
set the latitude and longitude, OK?

00:31:10.269 --> 00:31:11.089
We have those.

00:31:11.089 --> 00:31:16.619
Joey put in a placeholder text for us
and expected me to make stuff happen.

00:31:16.619 --> 00:31:23.169
So we need to set the latitude and
longitude string in the navigation bar.

00:31:23.170 --> 00:31:30.080
So to do that let's go back to our ViewController
which we said is what manages our view.

00:31:30.079 --> 00:31:38.220
And in our ViewController we want to be able to access
that navigation bar so that we can change its title.

00:31:38.220 --> 00:31:44.370
So I need another instance variable here
and that's going to be a UINavigationBar.

00:31:44.369 --> 00:31:51.509
This way I can make the same kind of
connection and access this as well as the map.

00:31:51.509 --> 00:31:56.970
I'm also going to make it a property, and
since I've done that let's save the header

00:31:56.970 --> 00:32:02.039
and go to the implementation file
and make sure I synthesize it.

00:32:02.039 --> 00:32:06.240
And don't forget, I should release it.

00:32:06.240 --> 00:32:11.940
So great. We have a navigation bar
instance variable that we can access.

00:32:11.940 --> 00:32:14.990
Now, we need to actually do something.

00:32:14.990 --> 00:32:19.529
So I'm going to make a method called updateString.

00:32:19.529 --> 00:32:23.889
And I'm trying to remember right now.

00:32:23.890 --> 00:32:28.830
Yes. I'm just going to add my method right here.

00:32:28.829 --> 00:32:30.199
Great. OK.

00:32:30.200 --> 00:32:32.660
So I have this updateString method.

00:32:32.660 --> 00:32:36.519
It's going to take one parameter, a region.

00:32:36.519 --> 00:32:47.180
It's going to use that region to set a string
to the latitude and longitude of the map.

00:32:47.180 --> 00:32:57.630
And we're going to take that locationString and use it
to set the title of the top item of the navigation bar.

00:32:57.630 --> 00:33:05.640
OK. So that may be a little confusing and that's
because usually navigation bars are used to navigate

00:33:05.640 --> 00:33:08.180
through different screens of information.

00:33:08.180 --> 00:33:12.529
And to learn more about that I highly
recommend you stay for the next session.

00:33:12.529 --> 00:33:17.139
But for now I'm just going to use it
to make a title for my application.

00:33:17.140 --> 00:33:22.730
So again, I set the title of the
top item of my navigation bar.

00:33:22.730 --> 00:33:24.809
And great.

00:33:24.809 --> 00:33:29.569
So I never called this method anywhere.

00:33:29.569 --> 00:33:32.579
That's kind of a problem.

00:33:32.579 --> 00:33:40.889
So I need to update the locationString
any time my map changes.

00:33:40.890 --> 00:33:48.640
So in order to do that I need to know when the map changes.

00:33:48.640 --> 00:33:53.120
So the map has.

00:33:53.119 --> 00:33:57.399
The MapView has a Delegate Method.

00:33:57.400 --> 00:34:00.100
Now, a Delegate Method will.

00:34:00.099 --> 00:34:06.669
I can set my controller to be a delegate of the MapView.

00:34:06.670 --> 00:34:19.639
And if I implement this Delegate Method then any time
the MapView changes it's going to tell its delegate,

00:34:19.639 --> 00:34:23.629
in this case my PlaceMapViewController, that it changed.

00:34:23.630 --> 00:34:28.980
And it's going to call this method
mapView regionDidChangeAnimated.

00:34:28.980 --> 00:34:33.860
And that's going to allow me to
do something when the map changes.

00:34:33.860 --> 00:34:45.380
In this case, I am going to update the locationString
when the map changes to the MapView's new region.

00:34:45.380 --> 00:34:55.410
Great. So now I have a place where my
locationString is actually updated.

00:34:55.409 --> 00:35:01.289
So let's save that and go back to Interface Builder.

00:35:01.289 --> 00:35:09.730
And just to clean things up I'm going to close that main
window because we don't need to look at that anymore.

00:35:09.730 --> 00:35:12.389
And I need to make some connections.

00:35:12.389 --> 00:35:21.159
The first one is that if I Control-click again on
File's Owner I will get the Connections display.

00:35:21.159 --> 00:35:31.239
And I've added a navigation bar in here so I can make
the connection from the navigation bar to File's Owner.

00:35:31.239 --> 00:35:32.339
So I've made that connection.

00:35:32.340 --> 00:35:37.300
So now in my controller code I can
actually access that navigation bar.

00:35:37.300 --> 00:35:40.630
Now, the other thing I need to do is if I control.

00:35:40.630 --> 00:35:50.519
If I select the MapView and Control-click on it I actually
have an outlet in here for MapView called Delegate.

00:35:50.519 --> 00:35:56.730
So we need that Delegate Method, but we need the MapView
to know it has a delegate because it doesn't know

00:35:56.730 --> 00:36:01.010
that the ViewController wants to be its delegate right now.

00:36:01.010 --> 00:36:07.400
And so I can drag from the MapView's
delegate to File's Owner

00:36:07.400 --> 00:36:13.829
to say myViewController is going
to be the Delegate for the MapView.

00:36:13.829 --> 00:36:16.230
Great. I've made those connections.

00:36:16.230 --> 00:36:23.340
And before I forget, I'm going to save so that I
don't get embarrassed again by not having things work.

00:36:23.340 --> 00:36:26.010
And let's bring up Xcode again.

00:36:26.010 --> 00:36:31.730
[ Silence ]

00:36:31.730 --> 00:36:37.130
There is one more thing I want to
do before I run my application.

00:36:37.130 --> 00:36:45.059
And the thing is that when my MapView
loads right now it's going to have latitude

00:36:45.059 --> 00:36:49.420
and longitude still up there until the map changes.

00:36:49.420 --> 00:36:54.269
And so I need a place where I can make some.

00:36:54.269 --> 00:36:59.849
Do some custom changes before the
user actually sees MyViews.

00:36:59.849 --> 00:37:07.619
This is where it becomes important to know that the.

00:37:07.619 --> 00:37:16.929
Our ViewController has a method
that we can use called viewDidLoad.

00:37:16.929 --> 00:37:28.789
And now what this does is gives us a chance after the
super calls viewDidLoad to write our own custom code

00:37:28.789 --> 00:37:33.070
to do something before the user
sees the view as it's loaded.

00:37:33.070 --> 00:37:42.890
And in this case I want to update the
locationString to whatever region the map defaults to.

00:37:42.889 --> 00:37:53.579
So now if I save this and build and run, when it launches
you'll see the latitude and longitude has already been set.

00:37:53.579 --> 00:38:01.190
If I zoomIn, the string changes to the location of Moscone.

00:38:01.190 --> 00:38:04.579
And if I zoomOut it changes back.

00:38:04.579 --> 00:38:07.009
And that concludes our demo.

00:38:07.010 --> 00:38:14.610
[ Clapping ]

00:38:14.610 --> 00:38:16.769
So Joey showed us this code, OK?

00:38:16.769 --> 00:38:22.320
And there's a couple more things
that we can take out of here now.

00:38:22.320 --> 00:38:31.320
So one of the things that we can take out is
we no longer have to set targets and actions.

00:38:31.320 --> 00:38:40.360
So we did this by making connections in Interface
Builder between File's Owner and our buttons.

00:38:40.360 --> 00:38:46.430
So this is code we will never have
to write and never have to maintain.

00:38:46.429 --> 00:38:53.969
OK? The other thing is we looked
at that Main Window zib file,

00:38:53.969 --> 00:39:00.759
and in the Main Window zib file we saw the
ViewController and that it's being created there.

00:39:00.760 --> 00:39:05.200
So we no longer have to create
that window or the controller,

00:39:05.199 --> 00:39:09.659
because they're being created by loading the zib files.

00:39:09.659 --> 00:39:16.159
So again, the more code that we will
never have to write or maintain.

00:39:16.159 --> 00:39:23.899
And in the end, we managed to write 42%
less code than by using Interface Builder.

00:39:23.900 --> 00:39:30.519
This gives you an opportunity to focus writing
code on the stuff that's important to you.

00:39:30.519 --> 00:39:34.969
The stuff that makes your application unique and different.

00:39:34.969 --> 00:39:43.429
So we've talked about creating views in Interface Builder.

00:39:43.429 --> 00:39:48.879
How to make connections to those
views to your code in Xcode.

00:39:48.880 --> 00:39:53.010
And now I'd like to look at the life cycle of a nib.

00:39:53.010 --> 00:39:57.920
[ Silence ]

00:39:57.920 --> 00:40:02.220
And to do that let's ask a few questions of the nib.

00:40:02.219 --> 00:40:08.629
And the first is what object actually manages MyView?

00:40:08.630 --> 00:40:14.880
These are questions I ask myself in order to figure out
how I'm going to write my program and put it all together.

00:40:14.880 --> 00:40:19.690
And we just learned that the object
that manages your view is going

00:40:19.690 --> 00:40:23.690
to be a ViewController in the example that we showed.

00:40:23.690 --> 00:40:27.230
Yet other times it might be a different
kind of controller, and that's up to you

00:40:27.230 --> 00:40:29.699
and your code and what you need it to do.

00:40:29.699 --> 00:40:38.509
With the example we showed today we had a zib with a
view in it and we're using a ViewController to manage it.

00:40:38.510 --> 00:40:45.760
So how do we link our view to the ViewController?

00:40:45.760 --> 00:40:50.010
And we did that through File's Owner.

00:40:50.010 --> 00:40:57.060
So our ViewController was the owner of this zib
file with our view in it, and that gave us access

00:40:57.059 --> 00:41:02.460
to be able to make connections between the two

00:41:02.460 --> 00:41:04.179
So now. Great.

00:41:04.179 --> 00:41:16.449
I know that I can link my code to MyView, but what actually
is happening when I save an Interface Builder file?

00:41:16.449 --> 00:41:22.349
But what's happening is all of those
objects you dragged out of the library

00:41:22.349 --> 00:41:29.000
and used to create your user interface
are real live objects.

00:41:29.000 --> 00:41:36.860
So they're real buttons, real scroll bars, real MapViews.

00:41:36.860 --> 00:41:48.539
They are going to be saved out to your zib files.

00:41:48.539 --> 00:41:57.940
And that zib file you can df it so that
you can see changes that you've made,

00:41:57.940 --> 00:42:02.309
but it's not something you ever
want to edit or merge by hand.

00:42:02.309 --> 00:42:05.349
You always want to open it in Interface Builder.

00:42:05.349 --> 00:42:07.519
We add some extra information.

00:42:07.519 --> 00:42:14.800
This is our design time format, and we add some extra
information so that Interface Builder knows some stuff

00:42:14.800 --> 00:42:19.390
about your zib file that doesn't
need to be known at Runtime.

00:42:19.389 --> 00:42:25.219
So when you compile your project your
zib file is turned into a nib file.

00:42:25.219 --> 00:42:30.839
And you might have heard I sometimes
interchange nib and zib file.

00:42:30.840 --> 00:42:32.480
Sorry for that.

00:42:32.480 --> 00:42:34.500
I, just to clarify.

00:42:34.500 --> 00:42:37.639
A zib file is your design time format.

00:42:37.639 --> 00:42:40.269
And a nib files is a Runtime format.

00:42:40.269 --> 00:42:50.989
So the nib file is going to be launched on
your iPhone or on your Mac OS X app at Runtime.

00:42:50.989 --> 00:42:56.959
So when does the ViewController actually load MyView?

00:42:56.960 --> 00:43:00.780
Now, we briefly looked at this.

00:43:00.780 --> 00:43:05.370
And in our sample app this happened in the AppDelegate.

00:43:05.369 --> 00:43:16.880
So what happens is the ViewController that
we made as a subclass of UIViewController.

00:43:16.880 --> 00:43:22.230
And UIViewController, when we call View,
which why I said it was important to make sure

00:43:22.230 --> 00:43:27.230
that that ViewOutlet was connected
to the view in our zib file.

00:43:27.230 --> 00:43:34.820
The first time the ViewController accesses the
view it says, Did I already load this view or not?

00:43:34.820 --> 00:43:41.100
And if it didn't load the view already, the
ViewController is going to call loadView.

00:43:41.099 --> 00:43:43.269
Now, you don't want to call loadView yourself.

00:43:43.269 --> 00:43:46.710
Let the ViewController actually do this for you.

00:43:46.710 --> 00:43:52.949
But the loadView method is actually
calling a method called loadNibNamed

00:43:52.949 --> 00:43:56.669
and is passing the name and an owner and some options.

00:43:56.670 --> 00:43:59.990
And this is where the nib is actually being loaded.

00:43:59.989 --> 00:44:04.039
So the ViewController is loading the nib file for you.

00:44:04.039 --> 00:44:14.529
So the next question you ask is great, the
ViewController is in charge of loading MyView.

00:44:14.530 --> 00:44:16.860
But when do I get to configure MyView?

00:44:16.860 --> 00:44:23.880
And we showed an example of that, and that's in viewDidLoad.

00:44:23.880 --> 00:44:32.440
OK? So we let the super load do
anything in its viewDidLoad method first.

00:44:32.440 --> 00:44:39.019
And then you can use this method to customize
your view before the user actually sees it.

00:44:40.690 --> 00:44:45.590
So what happens when MyView is loaded?

00:44:45.590 --> 00:44:51.030
What's really going on here?

00:44:52.260 --> 00:44:57.550
Now, when we saved out our view,
I said they're real objects.

00:44:57.550 --> 00:45:01.269
We never write code for these objects.

00:45:01.269 --> 00:45:04.860
They're live, actual objects that we've saved out.

00:45:04.860 --> 00:45:08.079
So at Runtime they just get recreated.

00:45:08.079 --> 00:45:15.559
So we take that nib file, recreate the view.

00:45:15.559 --> 00:45:22.909
The window, the view, the navigation
bar we used, the MapView that we used

00:45:22.909 --> 00:45:26.940
and the buttons and the toolbar at the bottom.

00:45:26.940 --> 00:45:29.000
These are recreated.

00:45:29.000 --> 00:45:36.690
The connections that we made are then made, so we're
making the connections between those actions and outlets,

00:45:36.690 --> 00:45:42.389
the methods and instance variables that
we had, to the buttons and the views.

00:45:42.389 --> 00:45:45.230
Those things are all hooked up for you.

00:45:45.230 --> 00:45:53.289
And then methods like viewDidLoad are
called so that any customizations you need

00:45:53.289 --> 00:45:57.420
to do can then be done before the user sees the view.

00:45:57.420 --> 00:46:09.300
So today we talked about how to create an interface by
just dragging and dropping elements from Interface Builder

00:46:09.300 --> 00:46:16.640
into a design surface using real live
objects that you can configure directly

00:46:16.639 --> 00:46:20.730
on the design surface, such as double-clicking the buttons.

00:46:20.730 --> 00:46:26.869
Or using the Inspectors to edit
different properties of those objects.

00:46:26.869 --> 00:46:33.769
We then learned how to make connections between those views.

00:46:33.769 --> 00:46:42.610
So how to connect the methods that we wrote in
our code to the buttons that we made in our views.

00:46:42.610 --> 00:46:49.579
And the instance variables that we had in our code so
that we could access the different views that we had

00:46:49.579 --> 00:46:51.969
such as the MapView and the navigation bar.

00:46:51.969 --> 00:46:56.529
And we looked at the life cycle of a nib.

00:46:56.530 --> 00:47:03.740
What actually happens when your
nib is saved and then run later.

00:47:03.739 --> 00:47:12.859
And if you'd like more information about
Interface Builder, our Developer Tools Evangelist,

00:47:12.860 --> 00:47:16.329
Michael Jurewitz, can answer questions for you.

00:47:16.329 --> 00:47:27.480
But you can also find documentation for the Human Interface
Guidelines or the Interface Builder User Guide online.