WEBVTT

00:00:13.250 --> 00:00:14.160
>> Good morning, everybody.

00:00:14.160 --> 00:00:19.780
Welcome to session 424, The Introduction to
Cocoa and Cocoa Touch Development with Xcode.

00:00:19.780 --> 00:00:21.710
My name is Chris Espinosa.

00:00:21.710 --> 00:00:23.900
I'm the head of the Xcode Core Team.

00:00:23.899 --> 00:00:27.659
We got a pretty packed agenda for you today,
so we're going to jump right in to it.

00:00:27.660 --> 00:00:34.469
This is an introductory beginner session to the Apple
developer tools, and it applies equally to those

00:00:34.469 --> 00:00:37.859
of you developing for the iPhone as for the Mac OS.

00:00:37.859 --> 00:00:42.340
You're going to see a lot of redundancy here, a
lot of repetition from things you saw yesterday

00:00:42.340 --> 00:00:45.860
in the developer tools keynote if
you were there, and this morning,

00:00:45.859 --> 00:00:49.920
if you were in the introduction to iPhone development.

00:00:49.920 --> 00:00:55.100
But we're going to go a little more in-depth to the
concepts and practices of developing with Xcode.

00:00:55.100 --> 00:00:59.870
Instead of rushing by things, we're going
to go a little deeper into the build system,

00:00:59.869 --> 00:01:02.969
into creating new projects, and then to debugging.

00:01:02.969 --> 00:01:08.039
We're going to walk you through the whole basic
development process, and we're going to set you

00:01:08.040 --> 00:01:11.140
up to making the most of the rest of your week.

00:01:11.140 --> 00:01:16.739
Now the big picture is that development
for software is a cycle.

00:01:16.739 --> 00:01:23.329
First thing you need to do is design-- really helps
to start out with an idea of what you're trying to do,

00:01:23.329 --> 00:01:26.030
rather than jumping in and just writing code.

00:01:26.030 --> 00:01:31.120
Xcode doesn't help you much with that,
but the next step is starting a project

00:01:31.120 --> 00:01:34.750
and then editing your code-- going to cover a lot of that.

00:01:34.750 --> 00:01:38.370
Then you build your code and create
something that you can run.

00:01:38.370 --> 00:01:41.320
But before you run it, you need to test it.

00:01:41.319 --> 00:01:47.289
We're going to talk about the different ways that Xcode
helps you test your code even before you start executing it.

00:01:47.290 --> 00:01:53.590
Then you execute and debug it, then once it's
debugged and working, then you get to tune it.

00:01:53.590 --> 00:01:57.939
Other sessions cover tuning, we're not
going to talk about that very much today.

00:01:57.939 --> 00:02:00.959
Then you package it and deliver it to your customers.

00:02:00.959 --> 00:02:06.079
Those are also covered in different sessions
because they're different from Mac OS X and iPhone.

00:02:06.079 --> 00:02:10.359
We're going to cover the things
in common from edit through debug.

00:02:10.360 --> 00:02:15.190
Now first, you got to get the Xcode
tools on to your Macintosh, and yes,

00:02:15.189 --> 00:02:20.530
you need a Macintosh in order to
develop for the Mac OS X or iPhone.

00:02:20.530 --> 00:02:26.780
The easiest way to get them is when you buy a new Macintosh,
the Xcode tools are on your Mac OS X installation DVD,

00:02:26.780 --> 00:02:29.460
and you can just install them from there.

00:02:29.460 --> 00:02:35.240
But we're constantly updating the tools, and so
the newer tools are almost always available online.

00:02:35.240 --> 00:02:39.490
You sign up for the Apple developer
program, and you can download them--

00:02:39.490 --> 00:02:43.370
either just the straight Xcode
tools to develop for Mac OS X,

00:02:43.370 --> 00:02:47.090
or you download the iPhone SDK from the iPhone Dev Center.

00:02:47.090 --> 00:02:49.590
In most cases, when you download the iPhone SDK,

00:02:49.590 --> 00:02:53.890
that includes all the Xcode tools you
need, you don't need a separate download.

00:02:53.889 --> 00:02:57.469
And if you have already downloaded
the proper version of Xcode,

00:02:57.469 --> 00:03:01.629
you can usually just get the iPhone
SDK as an add-on for that.

00:03:01.629 --> 00:03:09.049
So you never have to download Xcode twice even if
you're developing from both Mac OS X and for the iPhone.

00:03:09.050 --> 00:03:14.450
When you install them, you get a new folder at the top
level of your hard disk called the developer folder.

00:03:14.449 --> 00:03:19.129
This is the center of your developer experiences
where you're going to be spending all of your time.

00:03:19.129 --> 00:03:24.139
Now you open it up, and there's a lot of things in
there, but the only thing that you particularly care

00:03:24.139 --> 00:03:29.459
about especially as a beginner is the
applications folder inside the developer folder.

00:03:29.460 --> 00:03:32.909
Let's take a look at that.

00:03:32.909 --> 00:03:35.579
Xcode is the integrated development environment.

00:03:35.580 --> 00:03:39.090
It's where you start new projects,
it's where you edit projects,

00:03:39.090 --> 00:03:42.060
it's where you launch projects,
it's where you debug projects.

00:03:42.060 --> 00:03:46.830
If you're developing iPhone applications, it's where
you install and configure software on your iPhone.

00:03:46.830 --> 00:03:51.020
It's where you'll be spending most of your time.

00:03:51.020 --> 00:03:56.320
Interface Builder is where you design graphic
user interfaces for the Mac OS X and the iPhone.

00:03:56.319 --> 00:03:59.889
It's where you're going to be spending
most of the remainder of your time.

00:03:59.889 --> 00:04:07.889
If you're a Mac OS X developer, you may use Quartz Composer
to develop animations and graphics for your application.

00:04:07.889 --> 00:04:10.299
You're going to be using Instruments to fine tune.

00:04:10.300 --> 00:04:12.880
That will be covered in sessions later in the week.

00:04:12.879 --> 00:04:18.629
There are some utilities, graphics tools,
and other performance tools that you'll use

00:04:18.629 --> 00:04:20.620
when you're more advanced on the platform.

00:04:20.620 --> 00:04:26.370
For this, we're only going to cover Xcode, and
we'll dabble a little bit into Interface Builder.

00:04:30.160 --> 00:04:33.870
Now, the developer folder is something
you're going to hear a lot.

00:04:33.870 --> 00:04:37.019
Well in fact, you can have multiple developer folders.

00:04:37.019 --> 00:04:43.799
Like I said, we update Xcode tools over time, and we
have this practice of releasing betas of new tools,

00:04:43.800 --> 00:04:49.680
and we don't recommend that you use a
beta toolset to develop production code.

00:04:49.680 --> 00:04:50.810
This leaves you with a dilemma.

00:04:50.810 --> 00:04:56.220
What if I want to ship something today,
but I'm using the beta toolset in order

00:04:56.220 --> 00:04:59.360
to experiment with APIs or new operating systems?

00:04:59.360 --> 00:05:05.420
Well, you can install 2 developer folders
side by side, and which Xcode you launch

00:05:05.420 --> 00:05:10.610
from which developer folder determines what
sets of compilers, what Interface Builder,

00:05:10.610 --> 00:05:13.750
what all other auxiliary programs you get.

00:05:13.750 --> 00:05:18.740
So you can have a standard developer folder
that's a production version on your machine.

00:05:18.740 --> 00:05:26.519
And then if you want to install a beta of a future developer
version for a future SDK, you can install that side by side,

00:05:26.519 --> 00:05:28.659
and then alternate between one and another.

00:05:28.660 --> 00:05:30.400
So you have the best of both worlds.

00:05:30.399 --> 00:05:34.889
You can develop production code with a
production environment with production compilers,

00:05:34.889 --> 00:05:38.860
or you can use our experimental
stuff for developing for a new OS.

00:05:38.860 --> 00:05:45.139
Now let's start with working with Xcode.

00:05:45.139 --> 00:05:49.709
The basic unit of Xcode you'll be
working with is the Xcode Project.

00:05:49.709 --> 00:05:55.769
Now project is the container that holds
all of the stuff you need to develop.

00:05:55.769 --> 00:05:58.109
First thing is your source code files.

00:05:58.110 --> 00:06:02.060
You're going to be writing source code
in text files, storing them on disk,

00:06:02.060 --> 00:06:04.920
and accessing them through the project file.

00:06:06.250 --> 00:06:08.300
There are also user interface files.

00:06:08.300 --> 00:06:13.699
They are usually called .xib or .nib or XIB or NIB files.

00:06:13.699 --> 00:06:16.029
You'll be editing those in Interface Builder.

00:06:16.029 --> 00:06:21.500
The third is a structure called a target.

00:06:21.500 --> 00:06:27.410
A target is a set of rules and instructions
for how to build a piece of software,

00:06:27.410 --> 00:06:30.340
an application, a library, something like that.

00:06:30.339 --> 00:06:35.849
The target is probably where you're going to be
spending most of your time doing project configuration,

00:06:35.850 --> 00:06:39.689
setting up settings and fine tuning things.

00:06:39.689 --> 00:06:42.889
And finally, there's the project file itself.

00:06:42.889 --> 00:06:48.050
A project can hold a lot of other things
than just resources in your interface files.

00:06:48.050 --> 00:06:54.889
You can configure your project to hold documentation,
additional information, you set up your project

00:06:54.889 --> 00:07:00.860
for source code management, you share your project
with other people; your project holds information

00:07:00.860 --> 00:07:04.470
about your screen layout in certain preferences.

00:07:06.949 --> 00:07:11.139
So each of these elements of your project has function.

00:07:11.139 --> 00:07:16.169
Now the project file-- we call it a project
file, but it's actually a directory.

00:07:16.170 --> 00:07:20.560
It has a lot of files inside that you'll
never-- or rarely see, it is a directory.

00:07:20.560 --> 00:07:28.589
But there's a lot of stuff that's stored in it and is
stored in a .pdx proj file inside that project wrapper.

00:07:28.589 --> 00:07:34.929
The main thing is that the project holds references to
all of the source code that is in your project folder.

00:07:34.930 --> 00:07:38.199
It has groups; yellow folders that organize those.

00:07:38.199 --> 00:07:39.889
So you can organize those arbitrarily.

00:07:39.889 --> 00:07:44.449
So no matter how your source code is laid
out on disk, you can organize it logically

00:07:44.449 --> 00:07:49.729
and conceptually inside the project window
using the yellow folders called Groups.

00:07:49.730 --> 00:07:55.530
It's got targets which are the organizing
principles for building build products,

00:07:55.529 --> 00:07:58.250
and we're going to use the term build product a lot.

00:07:58.250 --> 00:08:03.730
A build product is what you're trying to create--
an application, a library, something like that.

00:08:03.730 --> 00:08:06.200
It has executables.

00:08:06.199 --> 00:08:12.729
Executables are how you launch your build
product, launch it as a Macintosh application,

00:08:12.730 --> 00:08:17.240
launch it in the iPhone simulator,
launch it on an iPhone device.

00:08:17.240 --> 00:08:20.540
And executable is instructions for how to run software.

00:08:20.540 --> 00:08:26.180
And then finally, all of your user settings, your bookmarks
and history for going back and forth and finding stuff

00:08:26.180 --> 00:08:31.840
in your project, the window layout, if you like big
windows, small windows, tall windows, narrow windows.

00:08:31.839 --> 00:08:35.919
The last way you had your project set
up, that is stored on a per user basis.

00:08:35.919 --> 00:08:41.110
So if you share a project with other people, your
settings are yours, their settings are theirs.

00:08:41.110 --> 00:08:47.379
Breakpoints for debugging, when you set a breakpoint,
other developers will not hit that breakpoint for you.

00:08:47.379 --> 00:08:53.059
That's very convenient if you're working in a group
setting, and then other user specific configuration.

00:08:53.059 --> 00:09:01.279
Now, people will always say you're working with an
Xcode project, but the most crucial thing to remember is

00:09:01.279 --> 00:09:06.939
that the vast majority of the time you're working
in Xcode, you're focused on a single target.

00:09:06.940 --> 00:09:13.020
A target again is a set of instructions
for building one build product.

00:09:13.019 --> 00:09:16.909
One target, one build product, remember that.

00:09:16.909 --> 00:09:22.620
A target references some, maybe
all the files in the project.

00:09:22.620 --> 00:09:28.460
But if you have multiple targets in your project,
they can reference different sets or source files.

00:09:28.460 --> 00:09:33.860
A target contains build phases.

00:09:33.860 --> 00:09:41.899
Build phases are the steps that Xcode goes
through that turn your source into a product,

00:09:41.899 --> 00:09:51.379
and build rules determine how Xcode does that, how
it compiles source files, how it processes NIB files.

00:09:51.379 --> 00:10:00.740
And then for each build phase, a set of
build settings applies to that phase.

00:10:00.740 --> 00:10:06.930
These are parameters that change
the way that that build phase works.

00:10:06.929 --> 00:10:15.549
So when we go into the demo, you're going to see how
you use build settings to affect how code is built.

00:10:15.549 --> 00:10:18.539
>> You have groups of build settings called configurations.

00:10:18.539 --> 00:10:24.980
And so, you can have a debug configuration which is
all of your settings for building code for debugging,

00:10:24.980 --> 00:10:30.800
then your release configuration is all your
build settings for building code for production.

00:10:30.799 --> 00:10:33.949
Now, targets, you can have multiple
targets to build different things,

00:10:33.950 --> 00:10:38.980
and you can also have these things called
aggregate targets that build other targets.

00:10:38.980 --> 00:10:46.170
So if you have a series of iPhone applications, or if you
have a Mac application that has both the main application

00:10:46.169 --> 00:10:52.360
and then an auxiliary application, or a shared
library that is used in multiple applications,

00:10:52.360 --> 00:10:54.750
you can have multiple targets in one project,

00:10:54.750 --> 00:10:59.519
and then an overall aggregate target
that simply builds them all in sequence.

00:10:59.519 --> 00:11:10.079
So, now it's time for our first demo, I'd like to bring
Rick Ballard up from the Xcode team to show you the basics

00:11:10.080 --> 00:11:12.670
of how to start with building an Xcode project.

00:11:12.669 --> 00:11:12.860
Rick?

00:11:12.860 --> 00:11:14.039
[ Applause ]

00:11:14.039 --> 00:11:17.799
>> Thank you.

00:11:17.799 --> 00:11:19.389
Thanks, Chris.

00:11:19.389 --> 00:11:24.949
I'm going to take you through creating a new project
and then briefly step through looking at each

00:11:24.950 --> 00:11:27.300
of the things that Chris just talked about in Xcode.

00:11:27.299 --> 00:11:30.009
So, can we go to the demo machine please?

00:11:30.009 --> 00:11:43.419
[ Pause ]

00:11:43.419 --> 00:11:45.199
>> Great. Sorry about that.

00:11:45.200 --> 00:11:51.009
So, we're going to start out by finding
Xcode at the root of our disk here.

00:11:51.009 --> 00:11:57.679
[ Pause ]

00:11:57.679 --> 00:12:02.199
>> And you notice when I launch Xcode, the
first thing that comes up is our welcome screen.

00:12:02.200 --> 00:12:07.600
Xcode's welcome screen provides you a
convenient jumping off point to get started,

00:12:07.600 --> 00:12:14.600
either by creating your first new project or further
new projects, diving in to the tutorials and sample code

00:12:14.600 --> 00:12:21.120
that we provide, or exploring resources
that we have on developer.apple.com.

00:12:21.120 --> 00:12:26.340
On the right hand side, you notice that we provide a list
of the recent projects that you've been working with

00:12:26.340 --> 00:12:32.170
This makes it easy when you launch Xcode to jump
right back in to what you were working on last.

00:12:32.169 --> 00:12:36.729
If you ever close this window and want to get back
to it, you can find the Welcome to Xcode screen

00:12:36.730 --> 00:12:42.159
in Xcode's Help menu, but all of the functionality
here is also available in Xcode's menus

00:12:42.159 --> 00:12:46.139
such as new project, or finding your recent projects.

00:12:46.139 --> 00:12:51.370
We're going to start out here by creating a new
project, and this brings up the new project assistant.

00:12:51.370 --> 00:12:56.330
Xcode's new project assistant provides
a wealth of different types of projects

00:12:56.330 --> 00:13:01.290
to get you started quickly no matter what you want to build.

00:13:01.289 --> 00:13:07.699
The first decision that you make in a new project assistant
is the overall type of product that you're going to build.

00:13:07.700 --> 00:13:12.400
Now, none of the decisions that
you make here are irrevocable.

00:13:12.399 --> 00:13:17.409
If you change your mind about what you're building
later, you can edit your project, edit your settings,

00:13:17.409 --> 00:13:21.279
add new targets, to make whatever you want to make.

00:13:21.279 --> 00:13:26.519
But by making the appropriate decision now, you
let us start you off with the right kind of target,

00:13:26.519 --> 00:13:32.649
the most appropriate build settings, and some sample
code to help make it easy to get started quickly.

00:13:32.649 --> 00:13:37.829
On the Mac OS X side, you'll see that we
provide several different types of applications,

00:13:37.830 --> 00:13:44.930
different types of frameworks and libraries, and a number
of different types of plug-ins, both for applications

00:13:44.929 --> 00:13:49.379
and kernel extensions for the system, and things like that.

00:13:49.379 --> 00:13:56.220
On the iPhone side, all applications use Cocoa Touch, but
we give you a choice about the category of application

00:13:56.220 --> 00:14:01.649
that you're going to create, allowing us to
start you off with some appropriate sample code.

00:14:01.649 --> 00:14:05.000
The icon also supports a static library type.

00:14:05.000 --> 00:14:10.519
So if you want to share code among multiple iPhone
projects, you can use this to build into a static library,

00:14:10.519 --> 00:14:15.350
it gets built into every iPhone
application that wants to use it.

00:14:15.350 --> 00:14:19.950
You notice when you select a template, that we
provided a few options such as whether or not you want

00:14:19.950 --> 00:14:23.560
to start using Core Data, or a document-based architecture.

00:14:23.559 --> 00:14:25.729
Again, none of these decisions are irrevocable.

00:14:25.730 --> 00:14:30.940
But we'll start you out with a project already
set up to use these options if you want.

00:14:30.940 --> 00:14:36.470
We're going to start out today by creating a
very simple utility application for the iPhone,

00:14:36.470 --> 00:14:39.879
and I can choose where to put it and what to name it.

00:14:39.879 --> 00:14:42.509
So I'm going to call this "next big thing".

00:14:42.509 --> 00:14:47.909
Don't worry too much about what you want to
name it now, because we now make it really easy

00:14:47.909 --> 00:14:54.759
to rename not just your project, but the target that's
associated with it, build settings that go off it,

00:14:54.759 --> 00:15:00.059
and any other interface-related functionality
that might use the name that you've chosen here.

00:15:00.059 --> 00:15:09.500
So now we've got a project window up, and you can see in
the left hand side, I've got the structure of the project

00:15:09.500 --> 00:15:15.330
that Chris described to you, and in the right hand side,
I've got a detailed view of what I've got selected.

00:15:15.330 --> 00:15:21.530
I can flip through here and take a look at my source files,
which I'll automatically open up in the embedded editor

00:15:21.529 --> 00:15:28.740
when I select them, or which I can double-click to open
up in a separate editor if I prefer to work that way.

00:15:28.740 --> 00:15:35.690
I've got resource files, in this case, this iPhone template
comes with 3 different XIB files that comes to my interface.

00:15:35.690 --> 00:15:39.980
To edit these, I could go launch Interface
Builder or just double-click in here,

00:15:39.980 --> 00:15:42.340
and it will bring up Interface Builder for me.

00:15:42.340 --> 00:15:47.290
And you'll see, this is part of my
interface, the objects of my interface,

00:15:47.289 --> 00:15:51.740
and the interface for adding new objects to it and so forth.

00:15:53.159 --> 00:15:56.969
I've also got some references to frameworks in this project.

00:15:56.970 --> 00:16:04.899
These files here, like UIKit.framework is a reference
to UIKit on my disk, because my project happens to use

00:16:04.899 --> 00:16:07.569
that and a couple other frameworks to build.

00:16:07.570 --> 00:16:13.879
In the targets group, you can see that this project
came with one target, "the next big thing" target.

00:16:13.879 --> 00:16:17.220
That target produces the product that I'm going to run here.

00:16:17.220 --> 00:16:21.910
And I can just close it to take a look at the
different build phases and their contents.

00:16:21.909 --> 00:16:25.860
Like here is the phase where the
target compiles the source files,

00:16:25.860 --> 00:16:31.610
and you can see that it's got 6 different source
files that it's going to compile in this phase.

00:16:31.610 --> 00:16:35.580
Each of these objects here, whether a target or a project

00:16:35.580 --> 00:16:40.000
or even my file references also have some
additional settings you can drill down into

00:16:40.000 --> 00:16:44.039
by clicking the Get Info button in the
toolbar or using Get Info in the File menu.

00:16:44.039 --> 00:16:52.500
You see that I have executables here, this is where we store
settings that you want to use when running, like arguments

00:16:52.500 --> 00:16:57.139
and environment variables to the launch, and there
are a couple of other useful groups down here.

00:16:57.139 --> 00:17:01.569
Like if I'm setup to use source control,
I'll have my source control status available.

00:17:01.570 --> 00:17:08.600
Or I've got some smart groups which I can modify or
define myself in order to filter down to a specific set

00:17:08.599 --> 00:17:11.609
of files that I might want to look at frequently.

00:17:11.609 --> 00:17:15.679
Finally, you'll notice that the last
yellow group up here is my products group.

00:17:15.680 --> 00:17:21.650
This contains references to all the products
built by all the targets in my project.

00:17:21.650 --> 00:17:27.350
So you'll notice that there's a reference to "the next
big thing" application which is what this target builds.

00:17:27.349 --> 00:17:32.689
It's in red because the file doesn't exist
on disk yet, and it's telling me that.

00:17:32.690 --> 00:17:34.309
Why doesn't it exist?

00:17:34.309 --> 00:17:35.259
Well, I haven't built it yet.

00:17:35.259 --> 00:17:40.319
So at this point, I'm going to go ahead and build
and run this project, and in the status bar,

00:17:40.319 --> 00:17:45.939
it will show me my build status zip by quickly,
and then launch this application in the simulator.

00:17:45.940 --> 00:17:49.140
And you see, I've got my application up and running here,

00:17:49.140 --> 00:17:55.580
and the file reference is now black,
showing me that it does exist on disk.

00:17:55.579 --> 00:18:02.629
If I want, I can ask Xcode to actually show
me what it just built by right-clicking on it.

00:18:02.630 --> 00:18:11.980
Well, there's a Reveal in Finder command which--
here we go, I used a different keyboard mapping.

00:18:11.980 --> 00:18:18.079
I can Reveal in Finder and see the
application that I just built, and it's DCIM,

00:18:18.079 --> 00:18:20.470
which really iPhone developers is very useful to hang on to.

00:18:20.470 --> 00:18:24.049
And I've just got a project that I built.

00:18:24.049 --> 00:18:28.309
This is how easy it is to get started in
Xcode, and get up and running quickly.

00:18:28.309 --> 00:18:35.629
Let's dive in a bit deeper now into how you actually
go about building your project and how the build works.

00:18:35.630 --> 00:18:37.140
Chris?

00:18:37.140 --> 00:18:44.460
>> Now, we'll come back to building and editing the project
itself in a little while, but we're going to spend some time

00:18:44.460 --> 00:18:51.450
on editing the source code because even though
it's 2009, we as programmers still write most

00:18:51.450 --> 00:18:55.870
of our applications by typing characters into a text editor.

00:18:55.869 --> 00:19:06.369
And I know that text editing is a deeply personal issue
with very, very many programmers, sometimes weirdly so.

00:19:06.369 --> 00:19:14.879
And while Xcode-- we've set up the defaults for the text
editing behavior to be a great experience for most people.

00:19:14.880 --> 00:19:19.740
Everybody has their personal preferences,
and Xcode is highly configurable to adapt

00:19:19.740 --> 00:19:23.849
to the way you like to work with program text.

00:19:23.849 --> 00:19:31.500
We have syntax coloring, so you can choose whether
you like black on white text, white on black text,

00:19:31.500 --> 00:19:36.789
bold colors to distinguish the different
syntactic parts of your program or muted colors.

00:19:36.789 --> 00:19:43.240
You can choose different syntax colorings according to
your own working style or create your own syntax coloring,

00:19:43.240 --> 00:19:45.849
use different fonts and sizes and even styles.

00:19:45.849 --> 00:19:56.069
I happen to like my comments in swishy italics because
it gives that certain je ne sais quoi to my source code.

00:19:56.069 --> 00:19:58.179
[Laughter] Indentation is a big issue.

00:19:58.180 --> 00:20:03.070
Sometimes you have to use an indentation
style that fits in with your group,

00:20:03.069 --> 00:20:06.339
sometimes you prefer to have 4 spaces or 8 spaces.

00:20:06.339 --> 00:20:12.769
Xcode has a very flexible indentation system, you
can use spaces or tabs or a combination of both,

00:20:12.769 --> 00:20:16.519
and you can reinvent texts semantically on the fly.

00:20:17.619 --> 00:20:21.009
>> Some people think wrapping is a complete anathema,

00:20:21.009 --> 00:20:25.309
some people think wrapping is a
fundamental part of the editing experience.

00:20:25.309 --> 00:20:29.720
You can have either or both if
you like on a file by file basis.

00:20:32.880 --> 00:20:39.640
Some people like to see the majority of their editor showing
nothing but text, some people like to see line numbers

00:20:39.640 --> 00:20:44.440
and even column positions in order to get a numerical guide.

00:20:44.440 --> 00:20:46.500
They remember things by line number.

00:20:46.500 --> 00:20:48.569
You can see the line numbers in the gutter.

00:20:48.569 --> 00:20:53.349
You can see the column position in the
navigation bar at the top of your text editor.

00:20:53.349 --> 00:20:58.240
All of these are very easily controllable
in the View menu in Xcode.

00:20:58.240 --> 00:21:01.069
We have another feature that is
rarely seen in other editors.

00:21:01.069 --> 00:21:02.589
It's called Code Focus.

00:21:02.589 --> 00:21:10.000
Xcode knows semantically the nesting level of
your code even if the indentation is incorrect.

00:21:10.000 --> 00:21:17.420
We've got a very handy feature called Code Focus that shows
you in a highlighted form, it gradually dims back things

00:21:17.420 --> 00:21:19.200
that are further and further out of scope.

00:21:19.200 --> 00:21:24.630
So if you have-- and this is especially helpful if you have
a long switch statement with a lot of cases and you happen

00:21:24.630 --> 00:21:28.240
to have forgotten the closing brace or a colon somewhere--

00:21:28.240 --> 00:21:34.279
you can very easily see the compilerized view of your
program and see that the indentation doesn't happen

00:21:34.279 --> 00:21:38.819
to match the syntax, and where your case may be
following through when you didn't intend it to.

00:21:38.819 --> 00:21:46.349
You can even have that follow you as you type so it only
highlights the thing that you're working on right now.

00:21:46.349 --> 00:21:51.329
Now the second part of working with the
editor is not just looking at your text,

00:21:51.329 --> 00:21:56.559
but it's navigating around the different source files,
and Xcode has a number of different ways to move you

00:21:56.559 --> 00:22:01.500
from one place in the code to another
place in the code and back very rapidly.

00:22:01.500 --> 00:22:04.150
The navigation bar is the key thing we will be using.

00:22:04.150 --> 00:22:09.910
You can use it to move from file to file, you can use it
to move back and forward and when you're editing position

00:22:09.910 --> 00:22:17.029
in the current file as well as across multiple files, and
you can use the function pop-up right in the middle up there

00:22:17.029 --> 00:22:24.950
with the blue M to navigate to any function or method
in your code very-- in your current file very quickly.

00:22:24.950 --> 00:22:33.900
Also, a number of other controls on the far right
side navigate up and down the class hierarchy

00:22:33.900 --> 00:22:42.630
of the current class, jump directly to the header
file for this source file, or jump to any header file

00:22:42.630 --> 00:22:47.750
that this source file includes directly with the
pop-ups on the right side of the navigation bar.

00:22:47.750 --> 00:22:51.279
There's a command called Open Quickly
which is incredibly useful.

00:22:51.279 --> 00:22:58.619
You can use it to directly jump to any file or symbol in
your project or in anything that the header files include.

00:22:58.619 --> 00:23:03.089
Just type command-shift-d brings up the Open Quickly box,

00:23:03.089 --> 00:23:07.899
type the prefix string of what you're looking
for, press return, you're there instantly.

00:23:07.900 --> 00:23:13.460
If you're looking at a symbol in source file and you
want to know where it's defined, you Command-double-click

00:23:13.460 --> 00:23:17.289
that symbol and it jumps directly
there and shows you what it is,

00:23:17.289 --> 00:23:20.470
then you can hit the back arrow
and go back to where you were.

00:23:20.470 --> 00:23:26.980
There's also a pretty functional class browser which
shows you the entire class hierarchy of your application

00:23:26.980 --> 00:23:33.400
and all of the frameworks that it includes so that
you can navigate up and down class hierarchies.

00:23:34.559 --> 00:23:42.359
Finally, entering text is laborious, especially with
all of the long variable names that Xcode view--

00:23:42.359 --> 00:23:50.449
that the Cocoa and Cocoa Touch Frameworks use,
capitalization which is crucial in the name of Xcode itself

00:23:50.450 --> 00:23:53.259
as well as in the rest of the C language.

00:23:53.259 --> 00:23:58.759
Code Sense code completion really helps you
get accurate completion and also browsing

00:23:58.759 --> 00:24:03.930
of realistic and correct options as you type.

00:24:03.930 --> 00:24:06.259
You saw little of the code completion
yesterday in the keynote.

00:24:06.259 --> 00:24:10.549
We're going to have a better demo of code
completion coming up in just a few minutes.

00:24:10.549 --> 00:24:15.879
The most important thing is you can get that code
completion from the menus but you almost never will.

00:24:15.880 --> 00:24:23.940
Once you learn command-period for complete now--
control-period for complete now, control-comma for popping

00:24:23.940 --> 00:24:29.930
up the completion list, and control-/
to move from one placeholder to another.

00:24:29.930 --> 00:24:38.640
Once you get those memorized in your fingertips, you
will never leave the keyboard to type long passages

00:24:38.640 --> 00:24:41.530
of source code and have Xcode do most of the typing for you.

00:24:41.529 --> 00:24:43.660
It's really, really fast.

00:24:43.660 --> 00:24:49.009
Then another feature which is very useful when
you're reworking code is Edit All in Scope.

00:24:49.009 --> 00:24:56.150
You select a variable name, you choose Edit All in Scope,
and it will find all the instances of that variable name

00:24:56.150 --> 00:25:02.070
in the scope of the method that you're using and it will
allow you to mass edit those, and that's a very easy way

00:25:02.069 --> 00:25:08.319
to rename an instance variable, rename
a locale very quickly and reliably.

00:25:09.589 --> 00:25:17.279
Xcode also supports all the normal things you'd expect
to find in an IDE, Single File Find and Replace,

00:25:17.279 --> 00:25:23.819
as well as Project Wide Find and Replace that can
work either on plain text, regular expressions,

00:25:23.819 --> 00:25:31.250
finding definition sites or finding the uses
of-- all uses of any symbol in your project.

00:25:31.250 --> 00:25:37.839
There are refactorings for Objective-C that
allow you to rename a method globally across--

00:25:37.839 --> 00:25:45.679
or a class or a method globally across your source
code, hoist a method call up into a super class,

00:25:45.680 --> 00:25:49.990
or refactor certain methods in
the class down into a sub-class.

00:25:49.990 --> 00:25:53.759
You select the identifier you want
and you choose refactoring

00:25:53.759 --> 00:25:57.470
from the Refactor menu-- Refactor from Edit menu.

00:25:57.470 --> 00:26:01.180
There will be demos on that later on this week.

00:26:01.180 --> 00:26:07.660
But most importantly, if you're beginners and if you're
in the beginning session, you probably are, getting help,

00:26:07.660 --> 00:26:14.630
and finding out what you need to write is probably going
to be the most useful thing to you when using Xcode.

00:26:14.630 --> 00:26:19.640
The developer documentation window is going to be
the center of your existence for quite a while.

00:26:19.640 --> 00:26:26.580
It has the complete developer documentation on all of the
Cocoa and Cocoa Touch APIs, it has all of the user guides

00:26:26.579 --> 00:26:33.210
for using Xcode, and it has all the other information
about Mac OS X that you need to know in order

00:26:33.210 --> 00:26:39.230
to write effective Mac OS X and iPhone applications.

00:26:39.230 --> 00:26:49.380
If you get to this from the Help menu, there's some other
useful things in the Help menu, the Xcode Help and Welcome

00:26:49.380 --> 00:26:56.850
to Xcode as Rick demonstrated, the release notes which
as you move from version of Xcode to version of Xcode,

00:26:56.849 --> 00:26:59.319
you can see what's new and what's changed.

00:26:59.319 --> 00:27:07.450
The Search window in the Help menu not only searches the
Xcode documentation, but also searches all of Xcode's menu.

00:27:07.450 --> 00:27:13.900
So if you're looking for a function like, Where do I
re-indent, you just type re-indent into the Search menu

00:27:13.900 --> 00:27:19.790
and it will jump you directly to
the menu item that does that.

00:27:19.789 --> 00:27:26.299
So another thing that will really be useful for you as you
code, because the documentation window is big and it kind

00:27:26.299 --> 00:27:32.759
of takes up your whole screen, but we have a Quick
Help window that is small, that you can use to float

00:27:32.759 --> 00:27:40.410
above your code, and it will show you a little synopsis
of each function and API or method that you're using,

00:27:40.410 --> 00:27:45.060
and it will give you links directly to the
documentation for that if you want to read further,

00:27:45.059 --> 00:27:46.970
or the header file in which it's defined.

00:27:46.970 --> 00:27:51.490
If you want to see relatives of it or
what else is going on or see other things.

00:27:51.490 --> 00:27:56.410
Also it has links directly to sample
code that shows how that API is used.

00:27:56.410 --> 00:28:01.060
Quick Help is extremely useful while
you're coding, just to see what's going

00:28:01.059 --> 00:28:04.950
on to learn more about the APIs you're using.

00:28:04.950 --> 00:28:11.130
So now, I'd like to bring up Brent Shank from our Developer
Tools Documentation Group to take you through the basics

00:28:11.130 --> 00:28:14.810
of text editing and using documentation in Xcode.

00:28:16.000 --> 00:28:17.609
>> OK, I'm on the [inaudible] here.

00:28:17.609 --> 00:28:26.269
Great. So to do that, we can launch Xcode, and I'm going
to choose developer documentation from the Help menu,

00:28:26.269 --> 00:28:28.799
this will get me to the documentation window.

00:28:28.799 --> 00:28:35.649
And I'm going to search for an interesting sample
code project, something that uses an NSBezier path,

00:28:35.650 --> 00:28:39.290
so we draw something pretty and maybe an affine transform.

00:28:39.289 --> 00:28:42.629
So you can see how fast it is to
search all of the Apple documentation.

00:28:42.630 --> 00:28:44.620
You get instant results back.

00:28:44.619 --> 00:28:50.049
All right, so I see a lot of results here, let's choose
squiggles, that's one of my favorite sample code projects,

00:28:50.049 --> 00:28:55.990
and all you need to do to get this going
in Xcode is click the zip file link.

00:28:55.990 --> 00:29:02.529
Xcode asks you where you want to put it on your system,
you click Choose, and Xcode opens it up for you.

00:29:02.529 --> 00:29:05.690
Let's build a run and see what this does.

00:29:05.690 --> 00:29:07.420
So that built really fast.

00:29:07.420 --> 00:29:08.680
I'll maximize the window there.

00:29:08.680 --> 00:29:14.880
And as I click the mouse and move around, I can draw
pretty lines, and as I move the slider down here,

00:29:14.880 --> 00:29:20.140
they get rotated around the center of the
view and multiply, which is pretty cool.

00:29:20.140 --> 00:29:24.790
Well, to learn a little bit about Cocoa, I
want to modify this sample and in addition

00:29:24.789 --> 00:29:26.690
to drawing the lines, I want to draw some text.

00:29:26.690 --> 00:29:28.410
So we have to learn a few things.

00:29:28.410 --> 00:29:33.930
First thing we have to learn is how
this application is doing its drawing.

00:29:33.930 --> 00:29:36.350
Well, to figure that out, let's do a project-wide find.

00:29:36.349 --> 00:29:40.199
We're going to press command-shift-f
to bring up the project find panel,

00:29:40.200 --> 00:29:43.319
and I'm going to look for-- search for the word draw.

00:29:43.319 --> 00:29:49.019
Hopefully that will lead me to the right place,
but I want to search everything in the project.

00:29:49.019 --> 00:29:54.420
OK, so as you can see, we have a lot of hits
here, some things in comments and in the read-me.

00:29:54.420 --> 00:29:59.650
I want to narrow down my search and just
look for APIs that are defined in my project.

00:29:59.650 --> 00:30:05.280
So I can do that by selecting the definition
search from this menu on Quick Find.

00:30:05.279 --> 00:30:09.289
And here it is, I have one method,
the instance method called drawRect.

00:30:09.289 --> 00:30:10.629
That looks like a good place to start.

00:30:10.630 --> 00:30:12.640
I think that's where this application does the drawing.

00:30:12.640 --> 00:30:20.270
>> So notice you can view this first file edit right
from the embedded editor in the project find window,

00:30:20.269 --> 00:30:25.750
or if you're like me and you prefer to have a separate
editor window, all you need to do is double-click the result

00:30:25.750 --> 00:30:28.140
and that will open up from the separate editor.

00:30:28.140 --> 00:30:31.680
So, as Chris said, text editing is a very personal thing.

00:30:31.680 --> 00:30:34.500
So let's get personal for a minute.

00:30:34.500 --> 00:30:38.910
Let's go to Xcode's preferences and let's
check out the fonts and colors preference.

00:30:38.910 --> 00:30:44.310
This is where you can set all your preferences for the
font that is used in the editor, the colors that we used

00:30:44.309 --> 00:30:47.250
for syntax coloring, the size of the font and everything.

00:30:47.250 --> 00:30:50.650
I'm using the presentation font right
now, so everyone in the room can see it.

00:30:50.650 --> 00:30:54.730
But Xcode comes with a number of
pre-built themes that you can use.

00:30:54.730 --> 00:30:55.880
You can create your own themes.

00:30:55.880 --> 00:30:59.760
You can copy any of these default themes
and customize it just the way you want.

00:30:59.759 --> 00:31:01.750
And let's switch back to the presentation theme.

00:31:01.750 --> 00:31:08.589
If I'd select the text editing preference, this lets
you customize the controls that are shown in the editor.

00:31:08.589 --> 00:31:10.309
I'm going to turn a few things on here.

00:31:10.309 --> 00:31:16.059
I really like to see line numbers and column position,
and for some reason, I really like the page guide.

00:31:16.059 --> 00:31:19.659
Then we click Apply and get a preview of
that, and you can see in the text editor,

00:31:19.660 --> 00:31:22.660
I now see line numbers and the page guide.

00:31:22.660 --> 00:31:27.830
So when you first are getting to know Xcode, take
a while, launch the preferences, check them out,

00:31:27.829 --> 00:31:31.059
you can customize the editor just about any way you want to.

00:31:31.059 --> 00:31:34.069
So, let's go back to the source file here.

00:31:34.069 --> 00:31:39.109
One of my favorite features of the text editor
is the ability to temporarily get rid of code

00:31:39.109 --> 00:31:42.269
or parts of this source file that I'm
not concerned about at the moment.

00:31:42.269 --> 00:31:45.660
So for example in this case is
this long copyright statement.

00:31:45.660 --> 00:31:52.380
If you move the mouse over to the code folding ribbon next
to the line number column, all I need to do is click it

00:31:52.380 --> 00:32:00.230
and it temporarily goes away, and that's persisted if you
close this file and reopen it, and even if you quit Xcode.

00:32:00.230 --> 00:32:04.380
So it's a great way to focus in on
just the task at hand and in this case,

00:32:04.380 --> 00:32:07.230
it's learning what this drawRect method is doing.

00:32:07.230 --> 00:32:10.579
To please the demo gods, I'm going to open that up again.

00:32:10.579 --> 00:32:12.939
So let's see what drawRect is dong.

00:32:12.940 --> 00:32:15.830
It's a drawing gradient that's set up earlier in a class.

00:32:15.829 --> 00:32:18.879
It's using this NSAffineTransform to rotate the view,

00:32:18.880 --> 00:32:23.540
and then a couple of 4 loops here are
responsible for drawing each of the squiggles.

00:32:23.539 --> 00:32:29.839
So I think I can intervene here, add some code and
in addition to drawing the lines, draw some text.

00:32:29.839 --> 00:32:33.169
First thing I need to do is learn how to layout text.

00:32:33.170 --> 00:32:39.970
Well, let's go back to the documentation window,
figure out how to do that, laying out text.

00:32:39.970 --> 00:32:40.529
I can type.

00:32:40.529 --> 00:32:42.960
That sounds like a good phrase.

00:32:42.960 --> 00:32:46.039
Sometimes when you're searching for
phrases in the documentation window,

00:32:46.039 --> 00:32:49.019
it helps to change the match type to an exact match.

00:32:49.019 --> 00:32:53.049
So when I do that, first result, laying
out text along an arbitrary path,

00:32:53.049 --> 00:32:55.279
that looks like exactly what I was looking for.

00:32:55.279 --> 00:32:59.049
So this is a great article in the
text layout programming guide.

00:32:59.049 --> 00:33:04.549
It tells me that if I set up the Cocoa Text
System, I can get this layout manager object.

00:33:04.549 --> 00:33:07.869
And once I have a layout manager,
I can draw a text anywhere.

00:33:07.869 --> 00:33:08.679
So this is great.

00:33:08.680 --> 00:33:12.730
Let me copy some of this code over here.

00:33:12.730 --> 00:33:27.870
This looks like a good one to copy
also, and we'll also copy that one.

00:33:27.869 --> 00:33:32.979
OK, so imagine that all that code was pasted in haphazardly.

00:33:32.980 --> 00:33:39.470
So looking at the code that was pasted
in here, I want to indent it to be clean.

00:33:39.470 --> 00:33:44.900
And I could go and do that manually, but I know Xcode
has a function for doing that, just not sure where it is.

00:33:44.900 --> 00:33:48.530
Well as Chris said, you can use the
Help menu to find menu items in Xcode.

00:33:48.529 --> 00:33:51.119
So bring up the Help menu and in the
search field, we can type indent,

00:33:51.119 --> 00:33:54.500
and you can see that Xcode finds that menu item for me.

00:33:54.500 --> 00:33:56.160
It's buried somewhere in the Edit menu.

00:33:56.160 --> 00:33:58.150
So there are lots of little things like this in Xcode.

00:33:58.150 --> 00:34:02.900
They can be hard to find especially if you're getting
used to Xcode, use the search in the Help menu

00:34:02.900 --> 00:34:06.050
and you'll find all of these hidden gems.

00:34:06.049 --> 00:34:09.880
OK, let's change the string that
we're actually going to draw here.

00:34:09.880 --> 00:34:19.280
Great. So the next thing I need to do is
use variable names that are kind of generic.

00:34:19.280 --> 00:34:21.940
I like to make them a little more interesting.

00:34:21.940 --> 00:34:26.059
We notice I have a bunch of instances of layout
manager, and I could change them all individually,

00:34:26.059 --> 00:34:30.009
but that's kind of a pain, be really great
if Xcode could help me out with that.

00:34:30.010 --> 00:34:35.080
So to do that, I just need to select one of the
variable names and you see this little menu,

00:34:35.079 --> 00:34:40.000
this little arrow pops up next to it, and
I click down, I get a contextual menu.

00:34:40.000 --> 00:34:41.920
Edit All in Scope is the first item.

00:34:41.920 --> 00:34:48.130
You notice when I select that, all of the instances
of that variable in this scope are selected.

00:34:48.130 --> 00:34:52.480
And as I start typing, they all update.

00:34:52.480 --> 00:34:55.280
I can press up or down arrow to accept that.

00:34:55.280 --> 00:35:00.840
I can also activate Edit All in Scope
from the keyboard command-control-t.

00:35:00.840 --> 00:35:08.010
So if you're a keyboard person, you don't
have to leave the home ground to do that.

00:35:08.010 --> 00:35:10.510
And I'll press the down arrow and there we go.

00:35:10.510 --> 00:35:14.720
Xcode has a lot of powerful batch
editing features like this in the editor.

00:35:14.719 --> 00:35:20.639
So the next thing I need to do is, I have this
layout manager and I know it can draw a text for me,

00:35:20.639 --> 00:35:23.099
I just don't know what the name of that API is.

00:35:23.099 --> 00:35:29.389
Well, I could go and read the class reference for the
layout manager, or I could just let Xcode do it for me.

00:35:29.389 --> 00:35:34.400
So I'll start typing in a variable name
and you notice as I type some characters,

00:35:34.400 --> 00:35:39.240
Xcode is suggesting what it thinks is the
best possible choice for that variable.

00:35:39.239 --> 00:35:43.769
And I just need to control-period to accept that one,

00:35:43.769 --> 00:35:48.219
and I'm going to type a few characters
here, and What's Xcode doing here?

00:35:48.219 --> 00:35:49.619
Well, it's pretty smart.

00:35:49.619 --> 00:35:53.480
It knows all of the methods that
are defined on NSLayout Manager.

00:35:53.480 --> 00:35:57.699
And because I've started an Objective-C message to that,

00:35:57.699 --> 00:36:01.719
it's helpfully suggesting things
that I could call on that object.

00:36:01.719 --> 00:36:05.069
And as I cycle through the list
here, I see a bunch of good options.

00:36:05.070 --> 00:36:08.630
Problem is I'm not exactly sure which one of these I want.

00:36:08.630 --> 00:36:11.730
Well fortunately, Xcode can help you with that too.

00:36:11.730 --> 00:36:14.190
From the Help menu, I'm going to select Quick Help.

00:36:14.190 --> 00:36:17.090
Quick Help, as you saw yesterday in the State of the Union,

00:36:17.090 --> 00:36:21.360
is a small panel that brings the API
documentation right into the source code editor.

00:36:21.360 --> 00:36:24.470
So you don't have to leave your context,
you don't have to bring up the DOC window.

00:36:24.469 --> 00:36:27.959
It brings the essential information
to you right in the editor.

00:36:27.960 --> 00:36:33.820
I can continue cycling through the code completion
list and you notice as I do that, Quick Help updates,

00:36:33.820 --> 00:36:38.050
it gives me an abstract, the declaration
and some pointers to other documents

00:36:38.050 --> 00:36:42.460
and sample code projects that are applicable to this symbol.

00:36:42.460 --> 00:36:44.670
It even works with the code completion list.

00:36:44.670 --> 00:36:48.280
I can press control-comma to bring that up.

00:36:48.280 --> 00:36:51.750
And as I cycle through these, it looks
like I found what I'm looking for,

00:36:51.750 --> 00:36:53.380
a drag list for glyph range or point.

00:36:53.380 --> 00:36:58.039
I can hit Tab to select that, and
now I need to pass in a range.

00:36:58.039 --> 00:37:01.289
Fortunately, I pasted that above.

00:37:01.289 --> 00:37:03.940
And now, for the second argument, I need to add a point.

00:37:03.940 --> 00:37:12.099
And again, as I complete that, Quick Help helps me
understand which, what kind of argument this is.

00:37:12.099 --> 00:37:13.920
So I need an NSPoint.

00:37:13.920 --> 00:37:16.670
I'm pretty sure an NSBezier path will give me that.

00:37:16.670 --> 00:37:19.539
But to be sure, I want to go back to the documentation.

00:37:19.539 --> 00:37:24.119
I can command-option-double-click on that
symbol, and you notice I have a bunch

00:37:24.119 --> 00:37:27.159
of documentation sets here I installed on my system.

00:37:27.159 --> 00:37:33.349
I'm going to switch to the Snow Leopard
DOC set, and look at NSBezier path,

00:37:33.349 --> 00:37:37.579
look in the summary of the class reference here.

00:37:37.579 --> 00:37:41.619
And under the query paths task, there's
a current point method, I click on that,

00:37:41.619 --> 00:37:44.500
and that will return an NSPoint which is what I need.

00:37:44.500 --> 00:37:45.750
So this is good news.

00:37:45.750 --> 00:37:55.780
I'll go back to the code editor here and again, I'll just
start typing the NSBezier path object and Xcode is saving me

00:37:55.780 --> 00:37:58.769
so many keystrokes here, this is really fabulous.

00:37:58.769 --> 00:38:02.840
So, let's build and run and see what happens.

00:38:02.840 --> 00:38:04.230
All right.

00:38:04.230 --> 00:38:08.809
Well, something is happening there but the
text is kind of dark, I can't really read it.

00:38:08.809 --> 00:38:12.090
Again, let's go back to Xcode and
add a little bit more code.

00:38:12.090 --> 00:38:18.120
I want to change the font color and
the size of the text that's drawn.

00:38:18.119 --> 00:38:21.920
Again, there's a lot of API in
the text in Cocoa for doing this.

00:38:21.920 --> 00:38:27.430
I don't remember what it is, but I know I have this text
storage object and that's just a mutable attributed string,

00:38:27.429 --> 00:38:30.219
so I can add all kinds of attributes to it.

00:38:30.219 --> 00:38:35.959
Add attribute, there's one for adding multiple
attributes at a time or one at a time.

00:38:35.960 --> 00:38:37.519
So again, Xcode is being really helpful.

00:38:37.519 --> 00:38:43.849
In this case, let's add foreground color
and I think each squiggle has a color.

00:38:43.849 --> 00:38:50.299
Again, Xcode knows color property on squiggles and
completes that for me, and the range I want to use.

00:38:50.300 --> 00:38:57.900
Again, I can hit Tab to go to the next code sense
completion placeholder, and the range I'm going to pass in.

00:38:57.900 --> 00:38:59.780
Someone doesn't have wrapping turned on.

00:38:59.780 --> 00:39:02.480
What were you saying, Chris, about this being personal?

00:39:02.480 --> 00:39:04.170
Now, I can't get any work done.

00:39:04.170 --> 00:39:13.150
OK, we'll do that, and I want to add
one more, text storage and attribute.

00:39:13.150 --> 00:39:24.170
Let's add a font and let's add consistent
font, let's make it really large, make range.

00:39:24.170 --> 00:39:26.880
I could just copy and paste that, but it's good.

00:39:26.880 --> 00:39:29.440
So fast, in completing these things, I don't need to.

00:39:29.440 --> 00:39:31.690
OK, so that looks good.

00:39:31.690 --> 00:39:35.450
Let's build and run, see if I typed everything correctly.

00:39:35.449 --> 00:39:39.369
And now as I type-- as I move the
mouse around, we're drawing text.

00:39:39.369 --> 00:39:44.809
And the coolest part is when we rotate this,
we're now drawing text anyway we want to.

00:39:44.809 --> 00:39:50.199
So this is a pretty advanced Cocoa Text System
task, but Xcode made it pretty easy to learn it

00:39:50.199 --> 00:39:56.009
So the combination of Quick Help and the DOC window and
code completion makes it really easy and fast to get up

00:39:56.010 --> 00:39:58.410
and running with Xcode and Cocoa and Cocoa Touch APIs.

00:39:58.409 --> 00:40:01.129
Back to you, Chris.

00:40:01.130 --> 00:40:06.640
>> OK. So you've seen the basics of creating a project,
and you've seen the basics of editing text and getting help

00:40:06.639 --> 00:40:10.190
to figure out what you want to
put in your project source files.

00:40:10.190 --> 00:40:14.289
Now, we're going to go into building
and testing your project.

00:40:14.289 --> 00:40:19.750
>> Now, building is the process of compiling all
your sources and assembling all of the resources

00:40:19.750 --> 00:40:25.260
into an executable that Mac OS X
or the iPhone OS can actually run.

00:40:25.260 --> 00:40:27.530
When you build, you have 2 choices.

00:40:27.530 --> 00:40:33.300
One is that you can use our dedicated build results
window which is tuned to the task of building

00:40:33.300 --> 00:40:38.130
and getting build results and figuring out what's going
on in the build, or as you saw in the keynote yesterday,

00:40:38.130 --> 00:40:44.450
you can get most of the build results right
in your editor with our inline message bubbles

00:40:44.449 --> 00:40:47.379
for errors, warnings, and static analysis results.

00:40:47.380 --> 00:40:50.059
You can even go back and forth between the two

00:40:50.059 --> 00:40:52.809
It's pretty easy to do.

00:40:52.809 --> 00:40:58.449
The build process consists of taking
the list of build phases in your target,

00:40:58.449 --> 00:41:01.329
and processing every file in the build phase one by one.

00:41:01.329 --> 00:41:07.900
First, we take all of your resources, your strings,
your graphics, your NIB and XIB files and copying them

00:41:07.900 --> 00:41:11.630
into where they belong in the final build product.

00:41:11.630 --> 00:41:17.910
Second is, we take all of your sources and compile them and
they include their header files in order to be compiled.

00:41:17.909 --> 00:41:20.799
Now, both of these processes are fairly complex.

00:41:20.800 --> 00:41:22.920
The compiler one even a little more so.

00:41:22.920 --> 00:41:28.809
Under the covers, what Xcode is doing is, it's
actually invoking the kind of command line tools

00:41:28.809 --> 00:41:33.730
like the GCC compiler that you would see
executed from the makefile at the command line.

00:41:33.730 --> 00:41:41.360
In fact, when you're looking in the Xcode build results
window, you'll see a little icon over on the right edge,

00:41:41.360 --> 00:41:44.960
which if you click it, shows you exactly what's going on.

00:41:44.960 --> 00:41:52.579
This is the exact command line that if you copy and paste
it into the terminal and execute it, will compile that file

00:41:52.579 --> 00:41:57.029
and create the .0 executable file
that corresponds to that source file.

00:41:57.030 --> 00:42:05.670
Xcode is a thick, not a thin, a thick veneer on top of
the low level compilation tools that you're familiar

00:42:05.670 --> 00:42:12.400
with if you come from the Linux or makefile tradition, and
you can see exactly what Xcode is doing under the covers

00:42:12.400 --> 00:42:15.950
by looking at the individual build transcript to that step.

00:42:15.949 --> 00:42:20.519
You can even, by using control-click in the build
results window, you can get the full transcript

00:42:20.519 --> 00:42:23.869
to see the whole process of what Xcode is doing.

00:42:23.869 --> 00:42:32.509
And then finally, Xcode links your individual object files
from the individual source files with other static libraries

00:42:32.510 --> 00:42:41.000
and with the dynamic frameworks, in order to create the
binary that goes into your executable that's actually ran.

00:42:41.000 --> 00:42:50.010
Now there are a couple of tasks that are very, very
common in configuring your target to build properly,

00:42:50.010 --> 00:42:56.830
and you get at almost all of the things you want
to do on your target by choosing Edit Active Target

00:42:56.829 --> 00:42:59.819
from the Project menu, and you see the target inspector.

00:42:59.820 --> 00:43:03.170
In the general pane of the target inspector,
the first 2 things you're going to do.

00:43:03.170 --> 00:43:10.039
First is if you have one target that depends on another,
if you have an application that needs to have a static

00:43:10.039 --> 00:43:15.500
or dynamic library built first, or if you have an
aggregate target where you want to say build this target

00:43:15.500 --> 00:43:20.900
and then that target and that target,
you use the target dependencies panel

00:43:20.900 --> 00:43:23.400
in the general pane of the target inspector.

00:43:23.400 --> 00:43:27.820
There's a little Plus button on it, you click the
Plus button and you just add other targets to it.

00:43:27.820 --> 00:43:31.890
Whenever you build that target, it
will build the other targets first.

00:43:31.889 --> 00:43:35.789
It's the basic way you set up dependencies in Xcode.

00:43:35.789 --> 00:43:42.460
The second thing is that if your source
code uses a header file in the framework,

00:43:42.460 --> 00:43:44.670
you're going to need to link with that framework.

00:43:44.670 --> 00:43:48.150
Now normally, you just drag and drop the
framework on to your target and that works.

00:43:48.150 --> 00:43:54.240
But if you want to browse the frameworks and see
what else is available and what you need to add,

00:43:54.239 --> 00:43:58.959
or if you want to go get a static library
from somewhere, you use the linked libraries

00:43:58.960 --> 00:44:01.130
and framework pane in the general inspector.

00:44:01.130 --> 00:44:05.539
Again, you press the Plus button at the
bottom, a sheet drops down and shows you all

00:44:05.539 --> 00:44:08.349
of the frameworks and libraries that are available to you.

00:44:08.349 --> 00:44:10.789
You pick one, and it goes into the list.

00:44:10.789 --> 00:44:16.639
These are some very common tasks in managing
your target for what targets it depends on

00:44:16.639 --> 00:44:20.230
and what frameworks and linked libraries it depends on.

00:44:20.230 --> 00:44:26.400
Now I mentioned earlier that build settings are the
parameters that control how each build phase works.

00:44:26.400 --> 00:44:31.490
You're going to be spending a fair amount of
time changing build settings in your project.

00:44:31.489 --> 00:44:38.439
Build settings are specific values that are passed
to each tool as it executes each build phase.

00:44:38.440 --> 00:44:40.940
And they're organized into configurations.

00:44:40.940 --> 00:44:44.710
The basic configuration you'll get with
almost every Xcode project is a set

00:44:44.710 --> 00:44:49.789
of debug build settings, and a
set of release build settings.

00:44:49.789 --> 00:44:56.179
The debug build settings build an optimized version
usually for a single architecture for build speed

00:44:56.179 --> 00:45:00.569
that makes it very easy to debug and figure
out what's going wrong with your code,

00:45:00.570 --> 00:45:05.430
but doesn't provide the best user
experience for the end code.

00:45:05.429 --> 00:45:11.619
The release configuration is optimized, it
doesn't have as much debugger information in it,

00:45:11.619 --> 00:45:16.079
the code runs a lot faster, and it's packaged for delivery.

00:45:16.079 --> 00:45:21.139
So you pick one or the other, you can set
one thing common across all configurations,

00:45:21.139 --> 00:45:25.359
like your name is probably going to
be common across all configurations.

00:45:25.360 --> 00:45:30.980
And you can set things that are separate for
each configuration like the optimization level.

00:45:30.980 --> 00:45:34.820
Build settings are arranged into a hierarchy.

00:45:34.820 --> 00:45:38.740
Most of the time, you'll want to work
with build settings at the target level.

00:45:38.739 --> 00:45:43.619
And you do that by going to the
Project menu, Edit Active Target,

00:45:43.619 --> 00:45:47.139
and then clicking the Build tab in the target inspector.

00:45:47.139 --> 00:45:52.299
But sometimes, you may want to set a build
setting that applies to all of your targets.

00:45:52.300 --> 00:45:56.370
For example, if you want one optimization
level across all targets,

00:45:56.369 --> 00:46:00.079
you can set that at a higher level, at the project level.

00:46:00.079 --> 00:46:02.000
Here's the hierarchy in action.

00:46:02.000 --> 00:46:08.360
Xcode has certain defaults for every build setting that
you get, and so there are some things that are predefined

00:46:08.360 --> 00:46:12.710
by Xcode and a lot of things that are just left loose.

00:46:12.710 --> 00:46:19.490
When you create a project, some build settings are
created in that project that will apply to all targets

00:46:19.489 --> 00:46:22.250
in that project unless they're overridden.

00:46:22.250 --> 00:46:28.400
You can set very common things here if you happen to like
a certain style of warnings for example in the compiler.

00:46:28.400 --> 00:46:32.530
Set it at the project level, it will
apply to everything in that project.

00:46:32.530 --> 00:46:38.870
If you want to-- if you're building a
certain style of code, you set it there.

00:46:38.869 --> 00:46:48.019
And then finally, on a per-target basis, you can set things
that are characteristic of or specific for that target.

00:46:48.019 --> 00:46:54.759
So for example your-- the product name, what you're
building should really be set at the target level.

00:46:54.760 --> 00:46:59.810
Each level inherits from the previous
level and overrides it.

00:46:59.809 --> 00:47:04.389
If you know object oriented programming,
this should be a very, very familiar concept.

00:47:04.389 --> 00:47:10.449
The number one user error with Xcode is-- I set
this build setting and it didn't take effect.

00:47:10.449 --> 00:47:12.549
Well, where did you set it?

00:47:12.550 --> 00:47:14.550
I don't know.

00:47:14.550 --> 00:47:20.100
They usually set it at the project level, but they have
another setting at the target level that's overriding it.

00:47:20.099 --> 00:47:27.360
So always work from the bottom upward, from the target
to the project level when you want to set those settings.

00:47:27.360 --> 00:47:29.610
Certain tasks you do with build settings.

00:47:29.610 --> 00:47:31.090
There are hundreds of build settings.

00:47:31.090 --> 00:47:34.430
There are build settings for each individual
warning you can get out of the compiler.

00:47:34.429 --> 00:47:38.250
There are obscure build settings for certain
things you want to do with the linker.

00:47:38.250 --> 00:47:40.039
There are build settings for packaging.

00:47:40.039 --> 00:47:43.809
But really, there are only about 5 build
settings that you're going to be using

00:47:43.809 --> 00:47:47.449
on a routine basis as a beginner Xcode programmer.

00:47:47.449 --> 00:47:50.269
The first is the name of what you're building.

00:47:50.269 --> 00:47:54.559
When you create a new project, this is
set by default to the name of the project.

00:47:54.559 --> 00:47:57.739
But remember, the project is not the build product.

00:47:57.739 --> 00:48:02.019
You can change the name of what you're building at
any time without ever touching your project name.

00:48:02.019 --> 00:48:06.519
You go to the target, you look for the
product name build setting and you change it

00:48:06.519 --> 00:48:09.159
and that changes the name of the
application you're building.

00:48:09.159 --> 00:48:11.019
It's that easy.

00:48:11.019 --> 00:48:17.579
If you're including code from the outside, you'll need to
tell Xcode where to find the header files for that code.

00:48:17.579 --> 00:48:21.319
So Header Search Paths are a pretty common thing to change.

00:48:21.320 --> 00:48:26.670
Once again, you'll usually change this at the target
level, but you could change this at the project level

00:48:26.670 --> 00:48:33.599
if you have a bunch of targets that all refer
to the same external library for example.

00:48:33.599 --> 00:48:39.469
If you-- when Xcode builds its
intermediates and it builds its build product,

00:48:39.469 --> 00:48:41.539
it puts them in something called a build folder.

00:48:41.539 --> 00:48:46.469
By default, that build folder is located next
to your project file in your project folder.

00:48:46.469 --> 00:48:52.439
Some people want to put it on a scratch disk, some
people want to put it elsewhere consolidated in one place

00:48:52.440 --> 00:48:55.460
so that multiple projects can share their results.

00:48:55.460 --> 00:48:58.960
You can set the build products path in your build settings.

00:48:58.960 --> 00:49:04.260
You'll usually do that on a project level so
that all of the targets go in the same place.

00:49:05.559 --> 00:49:07.039
The next two are really important.

00:49:07.039 --> 00:49:08.759
I'm going to be spending a little time on them.

00:49:08.760 --> 00:49:14.940
This is the API, the SDK and the API for your application.

00:49:14.940 --> 00:49:19.340
When you write code, you have to choose
the model that you're writing for.

00:49:19.340 --> 00:49:23.910
You have to choose what operating system and what
version of the operating system you're writing it for.

00:49:23.909 --> 00:49:30.559
You choose an SDK, a software development kit, and that
has all of the APIs you're going to be coding against.

00:49:30.559 --> 00:49:33.019
It has all of the classes and all of their methods.

00:49:33.019 --> 00:49:35.500
But that doesn't lock you into running on that.

00:49:35.500 --> 00:49:39.289
You're going to run on that operating
system and all later ones of course.

00:49:39.289 --> 00:49:44.090
But also, you can make your code run on
earlier versions of the operating system

00:49:44.090 --> 00:49:48.019
by setting a separate build setting
called deployment target.

00:49:48.019 --> 00:49:50.469
And let me show you how those work.

00:49:50.469 --> 00:49:55.839
Deployment target in SDK lets you trade
off the features your application uses

00:49:55.840 --> 00:49:58.450
against the number of users you're going to reach.

00:49:58.449 --> 00:50:02.919
Because when Apple releases an operating system,
it has certain features, and then we upgrade it

00:50:02.920 --> 00:50:09.889
and it has more features, like in
iPhone OS 2.2 or in Mac OS X 10.5.

00:50:09.889 --> 00:50:17.779
And then another version comes on and it has still
more features, like in iPhone OS 3.0 or Snow Leopard.

00:50:17.780 --> 00:50:21.269
>> The problem is the newer OSs have fewer users.

00:50:21.269 --> 00:50:26.539
And if you lock yourself into a later OS, you're
restricting yourself to a smaller number of users.

00:50:26.539 --> 00:50:32.099
You'd rather reach the larger number of users
on the earlier systems even if that means

00:50:32.099 --> 00:50:35.480
that they won't get the features
of the newer operating system.

00:50:35.480 --> 00:50:37.900
We have 2 controls that help you do this.

00:50:37.900 --> 00:50:44.240
First is you set the deployment target for the earliest
version of the operating system you want to run on,

00:50:44.239 --> 00:50:50.239
like Xcode-- like Mac OS X 10.5 or iPhone OS 2.2.

00:50:50.239 --> 00:50:51.429
That sets a baseline.

00:50:51.429 --> 00:50:56.789
Your code won't run earlier than that, you may cut off some
customers, but it sets a baseline for your functionality

00:50:56.789 --> 00:50:59.920
and you can code with confidence against that.

00:50:59.920 --> 00:51:06.990
But then you set the SDK for the highest version of
the operating system whose features you want to use.

00:51:06.989 --> 00:51:09.479
Now, if you set them to be the same
thing, if the deployment target

00:51:09.480 --> 00:51:12.990
in the base says you cater the same thing,
then you're golden, that's pretty easy.

00:51:12.989 --> 00:51:16.819
You get all of the features of that operating
system, and you redraw all of the customers

00:51:16.820 --> 00:51:20.120
of that operating system in later, that's pretty easy.

00:51:20.119 --> 00:51:26.159
But if you want something that has a little more
reach and some more features, you move the bases--

00:51:26.159 --> 00:51:29.839
you move the SDK and the deployment target up.

00:51:29.840 --> 00:51:33.160
So if you want to write a Snow Leopard only application,

00:51:33.159 --> 00:51:39.149
or if you want to outride an iPhone OS 3.0
only application, you move both in tandem, OK?

00:51:39.150 --> 00:51:42.360
Now, the next thing takes work.

00:51:42.360 --> 00:51:49.420
If you set the deployment part target back
earlier, I guess this way because I'm mirrored.

00:51:49.420 --> 00:51:55.200
You get to run on earlier versions of the operating
system, but you have to do a little more work.

00:51:55.199 --> 00:52:01.219
Every time you call a new feature, you have to test
that feature to make sure it exists at runtime.

00:52:01.219 --> 00:52:08.980
So you set your deployment target for like iPhone OS 2.2
or Mac OS 10.5, even with your SDK at a higher level,

00:52:08.980 --> 00:52:13.269
and you get more features but you
have to work to access those features.

00:52:13.269 --> 00:52:21.199
Similarly, you can set it all the way back to say, Mac OS
X 10.4, iPhone OS 2.1 or 2.0, you get the maximum number

00:52:21.199 --> 00:52:25.889
of customers, but you have to do the maximum work to
make sure that every time you use one of the features

00:52:25.889 --> 00:52:29.500
in a later version of the operating
system, that it's available.

00:52:29.500 --> 00:52:34.250
These 2 controls are very important for
using new features and new operating systems,

00:52:34.250 --> 00:52:37.349
and reaching the maximum customers you want.

00:52:37.349 --> 00:52:46.339
Now with all of these controls, with all of these targets
and configurations, and SDKs and the multiple architectures,

00:52:46.340 --> 00:52:49.980
you have to control what you want
to build at any given time.

00:52:49.980 --> 00:52:53.409
Now, when you press the Build button,
you're only building one thing.

00:52:53.409 --> 00:52:57.139
When you click the Build button, you build one thing.

00:52:57.139 --> 00:53:01.049
And in a sample demo product, it's pretty simple.

00:53:01.050 --> 00:53:02.810
You have an application.

00:53:02.809 --> 00:53:09.029
Do you have one target in your project, and there is
one configuration of it, like the debug configuration.

00:53:09.030 --> 00:53:15.880
But as time goes on, you may add different targets
and maybe an aggregate target to build them all.

00:53:15.880 --> 00:53:22.329
You use the active target pop-up to
control which target you're going to build.

00:53:22.329 --> 00:53:24.630
Now, that's the debug configuration.

00:53:24.630 --> 00:53:28.320
You may also have a release configuration.

00:53:28.320 --> 00:53:34.240
When you want to build your product and distribute
it, you choose the release configuration.

00:53:34.239 --> 00:53:38.709
That gives you another set of options
and builds another set of executables.

00:53:38.710 --> 00:53:46.099
So you can build any target for any configuration just
by picking from active target and active configuration.

00:53:46.099 --> 00:53:52.319
Now, for most of our platforms for Mac OS X,
you have a choice of architectures to build for.

00:53:52.320 --> 00:53:55.750
For building debug, we generally build the architecture

00:53:55.750 --> 00:53:58.780
for the machine you're running on,
just one because it's pretty easy.

00:53:58.780 --> 00:54:02.170
But you want to deploy for people
who have multiple architectures.

00:54:02.170 --> 00:54:10.019
So, and if you're building for 10.5 for example,
you probably want to deploy PowerPC architecture

00:54:10.019 --> 00:54:16.509
and i386 architecture, and x86-64 architecture,
and you may not want to test those one by one.

00:54:16.510 --> 00:54:21.400
So we can use the active architecture
pop-up to pick along that access.

00:54:21.400 --> 00:54:28.030
So the combination of active target, active
configuration, active architecture picks one

00:54:28.030 --> 00:54:31.690
of these massive grid to build at a time.

00:54:31.690 --> 00:54:34.849
And you pick which one you want
to build and run at that time.

00:54:34.849 --> 00:54:37.809
Now, there's an additional control called Active SDK,

00:54:37.809 --> 00:54:42.539
and that you can use in different
ways for iPhone than for Mac OS X.

00:54:42.539 --> 00:54:49.969
The Active SDK overrides the base
SDK setting in your target.

00:54:49.969 --> 00:54:54.219
So if you're set up to work for the iPhone 3.0 device,

00:54:54.219 --> 00:54:57.669
that's what your code is written
for, that's what the base SDK is.

00:54:57.670 --> 00:55:03.200
But suppose you're not ready to deploy to the device yet,
you just want to debug and want to debug in the simulator.

00:55:03.199 --> 00:55:08.629
You change the Active SDK to the iPhone simulator SDK

00:55:08.630 --> 00:55:12.610
and then that overrides the SDK value
and lets you run in the simulator.

00:55:12.610 --> 00:55:17.599
Similarly, if you have a Leopard application,
you want to build it and you want to test it

00:55:17.599 --> 00:55:23.969
with the Snow Leopard APIs just to see how it builds
without having to commit to changing your project for that,

00:55:23.969 --> 00:55:27.480
then you choose Mac OS 10.6 SDK from the pop-up menu.

00:55:27.480 --> 00:55:34.429
These active menu-- active pop-ups, in the overview
pop-up is the most common place to see them.

00:55:34.429 --> 00:55:39.869
Let you-- give you fine grained control
over what you build at any given time.

00:55:39.869 --> 00:55:41.889
Once you build, you need to test.

00:55:41.889 --> 00:55:43.589
There are three ways to test.

00:55:43.590 --> 00:55:44.960
You can test before you run.

00:55:44.960 --> 00:55:46.740
You can test during your run.

00:55:46.739 --> 00:55:49.569
And you can test after you ran.

00:55:49.570 --> 00:55:53.330
Static analysis, you saw yesterday, is a
great way to test while you're building

00:55:53.329 --> 00:55:57.789
to have the compiler tell you the
logical problems it sees in your code.

00:55:57.789 --> 00:56:06.380
Unit tests allow you to test while you're building, then
debugging our various-- debugging your debug configuration,

00:56:06.380 --> 00:56:11.240
debugging release configurations, are
ways to test dynamically as you deploy,

00:56:11.239 --> 00:56:13.899
and then evaluating your application
afterwards with instruments.

00:56:13.900 --> 00:56:16.400
You'll see more of that later on in the week.

00:56:16.400 --> 00:56:24.670
Static analysis is a great way to see your code flow
and to see logical errors and memory leaks in your code.

00:56:24.670 --> 00:56:31.190
Unit tests are additional methods, additional software
you write in the course of writing your project that run

00:56:31.190 --> 00:56:35.599
through code while you're building to
test the code you've actually built.

00:56:35.599 --> 00:56:38.880
And your build will fail if your unit tests fail.

00:56:38.880 --> 00:56:42.410
It's a great way to verify that
code remains stable over time.

00:56:42.409 --> 00:56:46.569
If you change some code and the unit test
fails, you know you changed that code wrong.

00:56:46.570 --> 00:56:54.380
And then debugging, we have a full interactive debugger
which shows you call stacks, it shows calling parameters,

00:56:54.380 --> 00:56:59.059
it shows you the value of variables as you step through,
step-in to step-over, kinds of things we're used

00:56:59.059 --> 00:57:01.690
to if you've debugged C-based languages before.

00:57:01.690 --> 00:57:08.110
I want to bring up Rick Ballard again to walk
through a demo of building and testing your code.

00:57:08.110 --> 00:57:09.480
>> Thanks Chris.

00:57:09.480 --> 00:57:17.269
So I'm going to step you through building and
looking at build results, handling build errors,

00:57:17.269 --> 00:57:22.300
debugging a simple problem and some code,
and writing some unit tests for that problem.

00:57:22.300 --> 00:57:29.450
I want to start out with a simple demo
project here which also uses Bezier paths.

00:57:29.449 --> 00:57:35.039
And let's say that I've been working on this and I
built a little view that I'm going to use in this app

00:57:35.039 --> 00:57:38.420
to display different types of Bezier paths.

00:57:38.420 --> 00:57:41.909
I've just finished writing my drawRect
method, is where I left off.

00:57:41.909 --> 00:57:47.699
And now I want to see if the code
that I just wrote works as I expected.

00:57:47.699 --> 00:57:51.339
Well, I can go here and open up the build results window.

00:57:51.340 --> 00:57:57.720
And this is going to show me in
detail what happens when I build.

00:57:57.719 --> 00:58:01.599
So as you see, when I press Build, you'll
see it goes through each of the steps

00:58:01.599 --> 00:58:05.039
in the build process until it gets to the results.

00:58:05.039 --> 00:58:07.929
Here it shows me that I've a couple syntax errors.

00:58:07.929 --> 00:58:11.409
Up here, you see each of the issues
of this did and it will highlight them

00:58:11.409 --> 00:58:15.319
in the source code where the error occurs for me.

00:58:15.320 --> 00:58:18.050
You can also see that I have some controls here.

00:58:18.050 --> 00:58:22.630
If I want to see more information, I
can view all the steps in my build.

00:58:22.630 --> 00:58:27.390
I like to leave it on issues only most of the
time because that's usually what you care about.

00:58:27.389 --> 00:58:31.119
And I can change how I want to view
each of the items that show up here.

00:58:31.119 --> 00:58:37.420
So these are pretty easy to fix, just
got a typo and a missing semicolon.

00:58:37.420 --> 00:58:41.690
And if I rebuild, you'll see that
I know longer have any issues.

00:58:41.690 --> 00:58:42.990
I don't know if you caught there.

00:58:42.989 --> 00:58:46.319
It looked like I had a warning in
another source file a second ago.

00:58:46.320 --> 00:58:50.410
But because I didn't edit that source file this
time around, it didn't bother recompiling it.

00:58:50.409 --> 00:58:55.369
And since it didn't bother recompiling
it, it didn't report the warning I get.

00:58:55.369 --> 00:58:57.639
Now in a lot of places, you have to remember these things.

00:58:57.639 --> 00:59:03.400
But in Xcode, we make it really easy to go back
and find information about older build results

00:59:03.400 --> 00:59:06.650
that might still be relevant by
clicking on the All Results tab.

00:59:06.650 --> 00:59:12.869
And here you can see even though I didn't just compile this,
it'll show me the results that include this random warning

00:59:12.869 --> 00:59:16.549
and the source file that I'm not using yet.

00:59:16.550 --> 00:59:21.110
So now I've got this working, I can go ahead
and build and run and bring up my demo app

00:59:21.110 --> 00:59:27.730
and you can see I can change this zoom and the angle, and
switch between a few different types of Bezier curves.

00:59:27.730 --> 00:59:31.280
Now here, when I click in the line
path, you notice that nothing happens,

00:59:31.280 --> 00:59:33.360
this because I've got a bug in my code here.

00:59:33.360 --> 00:59:36.840
So let's go ahead and try and figure where that bug is.

00:59:36.840 --> 00:59:40.990
I'm going to go ahead and open
up my source file and scroll down

00:59:40.989 --> 00:59:45.949
or actually use the function pop-up
to jump right to my drawRect method.

00:59:45.949 --> 00:59:47.719
Well, that's what's responsible for drawings.

00:59:47.719 --> 00:59:50.769
So it seems like a pretty good place to
start trying to track down the problem.

00:59:50.769 --> 00:59:55.530
I'm just going to put a breakpoint near the
beginning of the method by clicking in the gutter.

00:59:55.530 --> 00:59:57.310
Make sure I'll put it one further down.

00:59:57.309 --> 01:00:00.940
And I'm going to go ahead and-- you
see that where it used to say "build

01:00:00.940 --> 01:00:03.780
and go" in the toolbar, it now says "build and debug."

01:00:03.780 --> 01:00:07.880
Because when I put a breakpoint in my
project, it automatically turned debugging on.

01:00:07.880 --> 01:00:12.670
If I want to switch back and not use breakpoints, I
can turn them off, but this is what I want right now.

01:00:12.670 --> 01:00:15.559
>> So I'm going to go ahead and hit Build and Debug.

01:00:15.559 --> 01:00:18.639
Now you notice, it's trying to draw right of the bat.

01:00:18.639 --> 01:00:20.420
So it's in my breakpoint already.

01:00:20.420 --> 01:00:25.289
And there's a new toolbar that showed up at the up
of my editor that includes some debugging controls.

01:00:25.289 --> 01:00:31.769
It lets me see the different threads, what my call stack
is, and it's got stepping controls and things like that.

01:00:31.769 --> 01:00:37.789
Now one thing I can do if I want, is press this
button to jump to a more traditional debugger window.

01:00:37.789 --> 01:00:41.449
This is what you saw on the slide and this
also shows you your call stack as well

01:00:41.449 --> 01:00:44.869
as a variable browser so you can look and see what's what.

01:00:44.869 --> 01:00:47.849
But most of the time, you don't even need that.

01:00:47.849 --> 01:00:53.559
We have this thing called data tips, which means I can
hover my mouse over any of these variables that are in scope

01:00:53.559 --> 01:00:56.889
and it will pop up a tip and show me some details about it.

01:00:56.889 --> 01:01:00.989
Here it shows me that this Rect-- it will
summarize its origin and bounds or I can draw them

01:01:00.989 --> 01:01:03.409
and look at each of these points in detail.

01:01:03.409 --> 01:01:07.750
Or what I really want to do here,
I think, is skip to the end

01:01:07.750 --> 01:01:11.309
where I'm placing another breakpoint here,
I'm going to hit the Continue button.

01:01:11.309 --> 01:01:15.710
And let's take a look at this Bezier
path that I should have.

01:01:15.710 --> 01:01:18.010
Well, here's the path.

01:01:18.010 --> 01:01:22.420
This is the first time that I came
up-- we knew that this works.

01:01:22.420 --> 01:01:27.440
So if I switch to mine and I jump to this
last breakpoint, shows the Bezier path.

01:01:27.440 --> 01:01:30.230
And you see that there is no Bezier path.

01:01:30.230 --> 01:01:31.570
I've got a nil path.

01:01:31.570 --> 01:01:33.920
That's probably why it's not drawing.

01:01:33.920 --> 01:01:40.490
So I'm going to quickly jump to where
I set this path, and I continue again.

01:01:40.489 --> 01:01:46.299
And let's trigger this breakpoint one more time.

01:01:46.300 --> 01:01:51.610
So here is where I generate a Bezier path
and then set it on myself for later use.

01:01:51.610 --> 01:01:58.400
You notice if I hover over each of the parts of
this line, I get individual step in to controls.

01:01:58.400 --> 01:02:03.079
That makes it really easy if I don't want to step
into the inner most part of this method to just step

01:02:03.079 --> 01:02:05.779
in to the outermost part by pressing this button.

01:02:05.780 --> 01:02:08.350
In this case, I actually do want
to step into the inner most part,

01:02:08.349 --> 01:02:12.190
because that's the method to generate the Bezier curve.

01:02:12.190 --> 01:02:16.480
So here, I can just start stepping to the
method to try and figure out what's wrong.

01:02:16.480 --> 01:02:19.320
I switched base in the type of path I want to draw.

01:02:19.320 --> 01:02:21.610
Oh, and I jumped right to the end.

01:02:21.610 --> 01:02:28.530
Well, it looks like I just forgot to write the code
to generate this particular type of Bezier path.

01:02:28.530 --> 01:02:35.800
Now, I have code here that I can paste in to
fix this, oops, that I can paste in to fix this.

01:02:35.800 --> 01:02:42.100
But before I do that, I want to make
sure that this doesn't happen again.

01:02:42.099 --> 01:02:46.449
Instead of just fixing my bugs and then
giving it the opportunity in the future

01:02:46.449 --> 01:02:48.909
when I come back and make more changes to this code.

01:02:48.909 --> 01:02:54.960
For regression to occur, for my Bezier path not to be
generated properly again, I want to point put in a unit test

01:02:54.960 --> 01:03:01.269
so that I have confidence that I can change the code and
know that the things that you used to work still work.

01:03:01.269 --> 01:03:05.309
And in fact, I'm going to put this
unit test in before I put the fix in.

01:03:05.309 --> 01:03:09.420
Because that lets me verify that
my fix works in the first place.

01:03:09.420 --> 01:03:12.240
So how do I get started building unit tests?

01:03:12.239 --> 01:03:13.779
It's pretty easy.

01:03:13.780 --> 01:03:15.810
First of all, I want to add a unit test target.

01:03:15.809 --> 01:03:18.889
I'm going to go to the project menu and say, "New target."

01:03:18.889 --> 01:03:25.339
And you see we have unit tests for both iPhone and
Mac OS X, and I'm going to call this "Bezier Tests,"

01:03:25.340 --> 01:03:31.840
this is a name of my target and opens up the target
inspector for me, but I don't need that quite yet.

01:03:31.840 --> 01:03:36.329
And now, I also need a test case class to run.

01:03:36.329 --> 01:03:40.889
So I'm going to create a new file from
the Objective-C test case class template.

01:03:40.889 --> 01:03:43.609
And this is a test case for my Bezier view class.

01:03:43.610 --> 01:03:47.110
So we'll call it Bezier view tests.

01:03:47.110 --> 01:03:49.079
And you see it gave me a couple of new files here.

01:03:49.079 --> 01:03:51.769
And it's ready for me to rate some test.

01:03:51.769 --> 01:03:58.000
So I'm going to go ahead, and I've
already written this test ahead of time.

01:03:58.000 --> 01:03:59.210
Paste this in.

01:03:59.210 --> 01:04:04.099
What this test does is, it's going to create a
new Bezier view, set the line path type on it,

01:04:04.099 --> 01:04:06.429
because that's what I'm trying to test here.

01:04:06.429 --> 01:04:10.769
Try and generate a Bezier path from
that view, and it's going to check

01:04:10.769 --> 01:04:13.650
and see if the path it got back was nil or not.

01:04:13.650 --> 01:04:17.940
And if it's not nil, the test will pass.

01:04:17.940 --> 01:04:21.789
Before I can go ahead and build this,
there are a couple of things I need to do.

01:04:21.789 --> 01:04:26.230
On this code here, I'm referencing Bezier
view, that's a class in my applications.

01:04:26.230 --> 01:04:34.000
So I need to import it, so that I can
actually see the decoration for the class.

01:04:34.000 --> 01:04:42.000
But my-- oh, another thing I want to do here is make sure
that my test case class is included in the right target.

01:04:42.000 --> 01:04:48.099
So what I did here was get info on the
source file, choose the Targets tab,

01:04:48.099 --> 01:04:50.940
and tell it that it belongs to the tests target.

01:04:50.940 --> 01:04:53.800
But that's the target that you compile this test.

01:04:53.800 --> 01:04:56.780
Finally, I need to view the link against that class.

01:04:56.780 --> 01:04:58.420
But that class is in my applications.

01:04:58.420 --> 01:04:59.940
It's not in the library.

01:04:59.940 --> 01:05:01.450
So there's something I can do.

01:05:01.449 --> 01:05:04.710
In some cases, you might just compile
that class in to your test bundle as well,

01:05:04.710 --> 01:05:10.050
like if you're doing an iPhone unit test
or depending on what your preferences are.

01:05:10.050 --> 01:05:15.019
The downside of that is that you have to recompile
all your classes in your text bundle if you do that.

01:05:15.019 --> 01:05:15.769
I don't want to do that.

01:05:15.769 --> 01:05:19.090
I want to link against my Bezier
view class out of my application.

01:05:19.090 --> 01:05:23.170
And so I'm going to do that by setting a
couple build settings in my test bundle.

01:05:23.170 --> 01:05:27.930
So I'm going to get info on my test bundle
and go to the build settings inspector.

01:05:27.929 --> 01:05:30.299
Now this is a long list of things to search through.

01:05:30.300 --> 01:05:32.480
You usually don't want to have
to look through the whole thing.

01:05:32.480 --> 01:05:36.159
Instead, you can use the search field
to find what you're looking for.

01:05:36.159 --> 01:05:38.519
So I'm looking for the bundle loader build setting.

01:05:38.519 --> 01:05:40.829
And you see when I search to tape that in, it just shows up.

01:05:40.829 --> 01:05:43.369
It will tell me all about this build setting if I want.

01:05:43.369 --> 01:05:49.789
And I'm going to say that the application, my application
is the loader for the-- this bundle that'll let me--

01:05:49.789 --> 01:05:53.259
that will cause the linker to find classes in it for me.

01:05:53.260 --> 01:05:58.270
The value I'm going to set here is the path to
that application in my build settings directory.

01:05:58.269 --> 01:06:00.190
It's a special build settings value.

01:06:00.190 --> 01:06:03.960
And so I can just set this by double-clicking
it and pasting that value.

01:06:03.960 --> 01:06:09.420
There's one other thing I have to do
here which is to set the test host

01:06:09.420 --> 01:06:12.280
which will this test to run in the application.

01:06:12.280 --> 01:06:19.250
So, when I run my unit test, it will launch the application,
inject the test bundle in to it, and run my test.

01:06:19.250 --> 01:06:21.940
And that is also the same application.

01:06:21.940 --> 01:06:27.539
Now, when I build my test bundle, it's going
to want to link against the application.

01:06:27.539 --> 01:06:30.309
But that means the application is
to be built present and up to date.

01:06:30.309 --> 01:06:35.489
And to make that happen, I'm going
to set a target dependency.

01:06:35.489 --> 01:06:39.379
So here, I click the plus button, add
a target dependency on my application.

01:06:39.380 --> 01:06:43.500
And now when I build my test target, it
will always build my application first.

01:06:43.500 --> 01:06:49.289
What that means now, is in-- when I make source changes to
my application, instead of building the application to see

01:06:49.289 --> 01:06:52.199
if it worked, I can always build my test bundle.

01:06:52.199 --> 01:06:58.259
And what that'll do is build the dependent target first, the
application target which will build the changes I just made,

01:06:58.260 --> 01:07:01.710
and then run the test that I have
in the test bundle which will verify

01:07:01.710 --> 01:07:04.679
that the changes I just made didn't break any of my test.

01:07:04.679 --> 01:07:11.079
It's a really nice work for once you have this setup just
always the test target to build any changes that you have.

01:07:11.079 --> 01:07:16.150
To do that, I have to set it as the active target
and I can use the overview pop-up to do that.

01:07:16.150 --> 01:07:18.670
So I'm selecting Bezier tests.

01:07:18.670 --> 01:07:23.420
So now I've got, in my test target,
the source file for my test,

01:07:23.420 --> 01:07:28.170
a dependency in the application
target, I've set my build settings.

01:07:28.170 --> 01:07:29.210
I should be good to go.

01:07:29.210 --> 01:07:35.289
When I build this target, a test target has a run script
phase as it's the last step which actually runs your test.

01:07:35.289 --> 01:07:43.750
So all I have to do here is click Builds, and
it's building my test target and running my test.

01:07:43.750 --> 01:07:49.440
And you can see it's telling me what architecture it's
running the test for, what test suite it's running.

01:07:49.440 --> 01:07:55.200
The test case, it's test new line Bezier path,
and the test failed which is what we expected

01:07:55.199 --> 01:07:59.210
because I haven't added the code to make this test pass yet.

01:07:59.210 --> 01:08:04.360
So now, I'm going to go and actually
implement that type of Bezier path.

01:08:04.360 --> 01:08:12.010
So I've got my separate code to make this
work, and I'm just going to paste this in...

01:08:12.010 --> 01:08:17.400
[ Pause ]

01:08:17.399 --> 01:08:19.389
>> ...and I'm going to go ahead and build again.

01:08:19.390 --> 01:08:24.480
And you'll see that it rebuilt my application
and ran my test and there were no issues.

01:08:24.479 --> 01:08:25.399
The test passed.

01:08:25.399 --> 01:08:30.789
And if you want to make sure, you can look at all messages
and see that-- yeah, it ran my test, the test passed.

01:08:30.789 --> 01:08:35.090
Great! And if you really want to
see, you can launch the application.

01:08:35.090 --> 01:08:38.630
I'm going to turn off breakpoints
here, so that it doesn't keep stopping.

01:08:38.630 --> 01:08:40.970
And it works.

01:08:40.970 --> 01:08:43.480
So testing is very, very valuable.

01:08:43.479 --> 01:08:48.699
We encourage you to add unit test
to your application and we think

01:08:48.699 --> 01:08:51.550
that this provides a great environment for you to do that.

01:08:51.550 --> 01:08:52.670
Back to you, Chris.

01:08:52.670 --> 01:08:54.010
>> Thank you.

01:08:54.010 --> 01:08:58.690
[ Applause ]

01:08:58.689 --> 01:08:59.419
>> Thank you Rick.

01:08:59.420 --> 01:09:05.470
In 70 minutes, we've taken you from the very beginning
of getting your DMG to install your developer tools

01:09:05.470 --> 01:09:11.420
through creating your first project, going through
the editor, navigation, help system, build system,

01:09:11.420 --> 01:09:15.539
writing unit tests, and debugging an
application, and getting ready for delivery.

01:09:15.539 --> 01:09:19.689
There are a lot of other things to learn about this week.

01:09:19.689 --> 01:09:23.500
There are some documentation overviews you should read.

01:09:23.500 --> 01:09:28.039
I encourage you to read, read, read the
online documentation to get an idea.

01:09:28.039 --> 01:09:29.010
It's a big product.

01:09:29.010 --> 01:09:29.989
It's a rich product.

01:09:29.989 --> 01:09:31.159
There's a lot in it.

01:09:31.159 --> 01:09:37.010
The best way to do-- to learn about it is to sit
and read our introductory and overview materials.

01:09:37.010 --> 01:09:40.190
There are a lot of great sessions
at the developer conference.

01:09:40.189 --> 01:09:40.399
35