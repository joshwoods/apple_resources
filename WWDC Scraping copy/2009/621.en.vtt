WEBVTT

00:00:12.900 --> 00:00:16.160
>> Good morning everybody.

00:00:16.160 --> 00:00:18.089
So, many Cake fans out there?

00:00:18.089 --> 00:00:18.350
>> Yeah!

00:00:18.350 --> 00:00:19.350
[ Applause and Cheers ]

00:00:19.350 --> 00:00:23.150
>> Well, hope you guys enjoyed the concert last night.

00:00:23.149 --> 00:00:24.879
So my name is Kjell Bronder.

00:00:24.879 --> 00:00:31.479
I'm an engineer on the Podcast Producer Team, and we're
going to be talking about Deploying Podcast Producer today.

00:00:31.480 --> 00:00:37.689
So as you've probably learned this week,
there's really 3 pieces to Podcast Producer.

00:00:37.689 --> 00:00:41.909
There's the capture piece, processing, and delivery.

00:00:41.909 --> 00:00:48.129
And today we're going to focus on the 2 last ones,
on how you can best set up and all the best practices

00:00:48.130 --> 00:00:50.600
for setting up the best processing grid possible.

00:00:50.600 --> 00:00:55.600
And then we're going to spend the second half of
the presentation talking about the Podcast Library

00:00:55.600 --> 00:00:58.530
and how you can customize it for your own needs.

00:00:58.530 --> 00:01:05.329
For the first part, I'm going to bring up my colleague,
George Cook, who's a consulting engineer with Apple,

00:01:05.329 --> 00:01:10.420
and he's going to go through some of the Best
Practices of Deploying Podcast Producer for you.

00:01:10.420 --> 00:01:12.269
So please welcome George Cook.

00:01:12.269 --> 00:01:14.769
[ Applause ]

00:01:14.769 --> 00:01:16.890
>> Thanks, Kjell.

00:01:16.890 --> 00:01:17.750
So welcome everyone.

00:01:17.750 --> 00:01:22.170
I'm a Consulting Engineer in Apple Education
Division, and I'm really happy to be here today

00:01:22.170 --> 00:01:24.859
to present to all of you Podcast Producer.

00:01:24.859 --> 00:01:28.980
But first, how many folks here were at the bash last night?

00:01:28.980 --> 00:01:33.500
So thank you for making it to a
9 a.m. session, first of all.

00:01:33.500 --> 00:01:41.870
And for those that didn't come to the bash last
night, well, I recorded it and I put it up on the web.

00:01:41.870 --> 00:01:47.340
Hold on a second, that's exactly one of the
things that Podcast Producer was designed for.

00:01:47.340 --> 00:01:53.390
It was designed so that you can
consistently take that content, present it,

00:01:53.390 --> 00:01:57.040
and distribute it to your target audience.

00:01:57.040 --> 00:02:04.180
And this is something that we see in education, this is
a need that Podcast Producer is really helping to fill.

00:02:04.180 --> 00:02:08.800
Today we're going to talk about 3 critical
components of Podcast Producer deployment.

00:02:08.800 --> 00:02:11.630
We're going to start with a Shared File System.

00:02:11.629 --> 00:02:17.069
So the Shared Filed System is really
the heart of Podcast Producer.

00:02:17.069 --> 00:02:23.409
The decisions you make when you deploy the Shared File
System are critical in determining the scalability

00:02:23.409 --> 00:02:27.789
of your deployment, high availability
of your deployment, et cetera.

00:02:27.789 --> 00:02:33.349
Next, we're going to talk about the Media
Processing and Encoding engine for Podcast Producer.

00:02:33.349 --> 00:02:36.109
This is the brain of Podcast Producer.

00:02:36.110 --> 00:02:39.450
And we're going to talk about how you can best deploy that.

00:02:39.449 --> 00:02:48.669
And then Kjell and Eric will come up and join us to talk
about the content delivery component of Podcast Producer.

00:02:48.669 --> 00:02:57.399
Based on Atom and RSS standards, a really exciting
new feature of Snow Leopard is the Podcast Library.

00:02:57.400 --> 00:03:01.409
Because this is so important, we are going to cover
that in-depth in the second half of this session.

00:03:01.409 --> 00:03:04.829
But there's one thing missing from
this picture and that's you.

00:03:04.830 --> 00:03:10.410
So I want to start off by talking a little
bit about Podcast Producer 1.0 Deployments.

00:03:10.409 --> 00:03:18.550
On the business side, there are hundreds of thousands of
podcasts available on iTunes Music Store in a directory.

00:03:18.550 --> 00:03:24.770
All that's available to anybody
that wants to download that content.

00:03:24.770 --> 00:03:33.500
There's also a lot of private use of podcasting in business,
and the example I'm going to use today is for BBC America.

00:03:33.500 --> 00:03:36.979
BBC America has a challenge.

00:03:36.979 --> 00:03:44.849
They need to get content out for editorial review
so that editors either onsite or offsite can review

00:03:44.849 --> 00:03:48.590
that content, comment on it, and approve that content.

00:03:48.590 --> 00:03:52.159
So we're going to take a look at their deployment.

00:03:52.159 --> 00:03:59.009
I'm really thrilled to have worked with many education
institutions on Podcast Producer deployments in education.

00:03:59.009 --> 00:04:06.459
And in fact, we recently hosted regional
conferences along with MacLearning.org.

00:04:06.460 --> 00:04:10.040
So MacLearning.org organized these conferences.

00:04:10.039 --> 00:04:16.339
They are held across the country, and you saw an example
if you came to one of the other Podcast Producer sessions,

00:04:16.339 --> 00:04:18.949
when NYU got up and talked about their deployment.

00:04:18.949 --> 00:04:21.529
We're going to take a look at another deployment.

00:04:21.529 --> 00:04:27.329
The exiting thing happening in education
is that there's a real change happening,

00:04:27.329 --> 00:04:33.229
and digital content is really a catalyst in that change.

00:04:33.230 --> 00:04:40.379
And at these conferences, our customers got up and
did presentations like this and talked to their peers

00:04:40.379 --> 00:04:45.939
about how content is being used by
students to produce their own content.

00:04:45.939 --> 00:04:52.540
How content is being distributed any place,
any time with capabilities like iTunes U.

00:04:52.540 --> 00:05:00.430
And all of this is very exciting and it's an
area that is fomenting change in education

00:05:00.430 --> 00:05:03.490
and it's really fun to work in this area.

00:05:03.490 --> 00:05:06.670
So let's talk about these deployments,
starting with BBC America.

00:05:06.670 --> 00:05:11.960
So BBC America is a large postproduction
facility in New York City.

00:05:11.959 --> 00:05:16.139
Like many large production facilities,
they are using Final Cut Studio.

00:05:16.139 --> 00:05:17.490
They have an Xsan deployed.

00:05:17.490 --> 00:05:24.300
And to organize their content and to collaborate
in work groups, they are using Final Cut Server.

00:05:26.389 --> 00:05:29.529
However, they had 2 challenges.

00:05:29.529 --> 00:05:34.229
These reviewers, these key decision
makers that need to review this content,

00:05:34.230 --> 00:05:37.850
sometimes they're not in the facility physically.

00:05:37.850 --> 00:05:43.140
The other thing that's a challenge for many
postproduction environments is viewing the content in a form

00:05:43.139 --> 00:05:44.849
that their actual audience will view it in.

00:05:44.850 --> 00:05:49.520
And Podcast Producer helped address both of these needs.

00:05:49.519 --> 00:05:54.799
So with Podcast Producer, they're taking content
from their video postproduction environment

00:05:54.800 --> 00:05:59.379
for publishing it via Final Cut
Server into Podcast Producer.

00:05:59.379 --> 00:06:05.889
That content is then distributed for mobile
clients any place any time, iPhone, iPod Touch,

00:06:05.889 --> 00:06:11.550
and also to HDTVs that are in reviewers'
homes or in their remote offices,

00:06:11.550 --> 00:06:18.430
so that they can actually view the content using the
same experience, the same type of visual experience

00:06:18.430 --> 00:06:20.509
that they're actual audience will view the content in.

00:06:20.509 --> 00:06:28.860
So this is great and they were able to do this without
any crazy customization or expensive solutions.

00:06:28.860 --> 00:06:31.470
And this is how their system works.

00:06:31.470 --> 00:06:38.850
Final Cut Server has this ability to run external
scripts transparently from the graphical interface.

00:06:38.850 --> 00:06:41.330
So they're leveraging that capability.

00:06:41.329 --> 00:06:43.979
It also allows you to pass variables.

00:06:43.980 --> 00:06:49.020
Final Cut Server is very rich in applying
metadata to Final Cut projects and media assets.

00:06:49.019 --> 00:06:53.409
So they take those-- that metadata
and they pass it into these scripts.

00:06:53.410 --> 00:06:56.670
And they also have the option to leverage Compressor.

00:06:56.670 --> 00:07:03.750
So they use a Compressor cluster, in their case,
to time code, visually time code this content.

00:07:03.750 --> 00:07:06.949
In that way a reviewer can say
specifically at a specific piece

00:07:06.949 --> 00:07:11.490
of time code there was an issue that
they would like to have changed.

00:07:11.490 --> 00:07:14.269
This is what their submission script looks like.

00:07:14.269 --> 00:07:15.279
It's very simple.

00:07:15.279 --> 00:07:18.029
And there are 2 highlighted areas here.

00:07:18.029 --> 00:07:24.379
They are pulling out some metadata from Final Cut Server,
and they're using that to post to a specific wiki.

00:07:24.379 --> 00:07:29.000
So they're-- that allows them to
use one Podcast Producer workflow,

00:07:29.000 --> 00:07:32.670
but post it to a specific wiki
that's associated with that project.

00:07:32.670 --> 00:07:37.210
That way these key decision makers can
use the wiki to comment on that content,

00:07:37.209 --> 00:07:40.669
to add their comments, and to approve that content.

00:07:40.670 --> 00:07:48.600
On the Podcast Producer side inside of the
workflow, they are just taking that value coming

00:07:48.600 --> 00:07:52.910
from their production environment and using that
to drive which wiki this content is posted to.

00:07:52.910 --> 00:08:01.790
So this is a very powerful example that shows you very
simple integration between a postproduction workflow

00:08:01.790 --> 00:08:07.310
into Podcast Producer and ultimately to
this audience of key decision makers.

00:08:07.310 --> 00:08:09.490
Next, we're going to take a look at North Carolina State.

00:08:09.490 --> 00:08:15.540
They were one of the institutions that presented
academics, in this case they presented at Duke University.

00:08:15.540 --> 00:08:20.110
And they're deployment of Podcast Producer
is very much a canonical deployment.

00:08:20.110 --> 00:08:22.040
They began with Open Directory.

00:08:22.040 --> 00:08:27.819
They wanted to integrate the services that Mac OS X Server
provides with their campus authentication infrastructure.

00:08:27.819 --> 00:08:33.399
So they did this by installing Open Directory
Master and then they piloted Podcast Producer.

00:08:33.399 --> 00:08:35.909
They set up a Podcast Producer server and try it out.

00:08:35.909 --> 00:08:37.350
This is what many institutions do.

00:08:37.350 --> 00:08:39.629
They start off with a single server.

00:08:39.629 --> 00:08:46.139
It worked really well, so they decided to deploy
a cluster to support their media processing needs.

00:08:46.139 --> 00:08:52.559
So they deployed Xgrid and tied all those
systems into an Xsan clustered file system.

00:08:52.559 --> 00:08:58.579
This allows them to scale their system up over time
to meet their growing needs in terms of capacity.

00:08:58.580 --> 00:09:04.009
They also did something that I always recommend my
customers do and they set up a Development and Test System.

00:09:04.009 --> 00:09:11.330
This allows them to develop new workflows
and test them before they go into production.

00:09:11.330 --> 00:09:17.680
It allows them to deploy new versions of software
and test them before they go into production.

00:09:17.679 --> 00:09:19.819
This is really important in a mission critical environment

00:09:19.820 --> 00:09:23.629
where you're delivering educational
content to a large audience.

00:09:23.629 --> 00:09:29.149
In their facility, they currently have
29 classrooms outfitted for capture.

00:09:29.149 --> 00:09:36.769
These systems are Mac minis bound securely to Podcast
Producer and they're capturing off of the projector loop.

00:09:36.769 --> 00:09:41.720
So they use a VGA capture device to capture
everything that's being deployed on the projector,

00:09:41.720 --> 00:09:46.899
whether it's a document camera,
a Windows notebook, or a MacBook.

00:09:46.899 --> 00:09:53.590
This has provided them with the flexibility to outfit
all of these classrooms in a very inexpensive way to get

00:09:53.590 --> 00:10:02.460
that content, present it as they want it presented
to their target audience and facilitate this change

00:10:02.460 --> 00:10:06.100
in education of any place, any time learning.

00:10:07.509 --> 00:10:12.289
Before we get into the meat of this, of my part of
the presentation, I thought it was important to go

00:10:12.289 --> 00:10:17.539
through a little checklist of factors
you need to consider for your deployment.

00:10:17.539 --> 00:10:19.500
>> Now first of all is how much content.

00:10:19.500 --> 00:10:24.049
How much content are you going to be
submitting into your Podcast Producer system?

00:10:24.049 --> 00:10:28.429
In the case of North Carolina State,
for example, they have 29 classrooms.

00:10:28.429 --> 00:10:32.899
They-- each one is capturing content
and submitting into the system.

00:10:32.899 --> 00:10:37.179
How regularly are they being used for that capacity?

00:10:37.179 --> 00:10:40.839
BBC, on the other hand, they're coming
out of a video production workflow.

00:10:40.840 --> 00:10:48.259
How many of these digital dailies, shorts and full blown
productions are doing and what's the length of that content.

00:10:48.259 --> 00:10:53.330
So, how much content are they actually
submitting into the system.

00:10:53.330 --> 00:10:59.560
What about this branding and dual source picture in
a picture, all these great effects that we now can do

00:10:59.559 --> 00:11:04.419
in Podcast Producer automatically, what are
you going to use in your actual environment?

00:11:04.419 --> 00:11:08.089
And how many versions are you going to encode?

00:11:08.090 --> 00:11:13.490
Are you going to create a version for Apple
TV, an iPod version, an audio only version?

00:11:13.490 --> 00:11:21.389
All of those factors are really important in determining
your computing grid and your Shared File System.

00:11:21.389 --> 00:11:30.330
This next set of questions are related to really
to your ingest network and your delivery network.

00:11:30.330 --> 00:11:31.990
So how would content-the content be captured?

00:11:31.990 --> 00:11:36.159
Are you going to be binding this camera agents like North
Carolina State or coming out of a production workflow

00:11:36.159 --> 00:11:46.589
in a custom way like BBC, or perhaps you're going to
have ad hoc capture from anywhere on a 3G network.

00:11:46.590 --> 00:11:53.560
That has implications on how you design
the content ingest side of your network.

00:11:53.559 --> 00:12:00.819
Where is that content going to be submitted
from, on campus, for instance at NC State,

00:12:00.820 --> 00:12:03.280
all those Mac Minis are tied into a 100-megabit network.

00:12:03.279 --> 00:12:08.289
They're wired into the network, so they
have a great path back to those servers.

00:12:08.289 --> 00:12:12.389
Again, network capacity needs to
be factored in to your deployment.

00:12:12.389 --> 00:12:14.840
And on the delivery side, what's the size of your audience?

00:12:14.840 --> 00:12:17.360
Are they on campus, on a college campus?

00:12:17.360 --> 00:12:19.769
Are they distributed around the world?

00:12:19.769 --> 00:12:24.929
The size of your audience needs to be
factored in in terms of your delivery network.

00:12:24.929 --> 00:12:28.849
And where is the audience, again,
local, remote, where are they?

00:12:28.850 --> 00:12:32.610
So those are factors to consider and
the main point here is to plan ahead.

00:12:32.610 --> 00:12:39.500
You need to plan ahead by factoring those
things in before you actually deploy

00:12:39.500 --> 00:12:41.389
So now let's get into deployment.

00:12:41.389 --> 00:12:46.159
And we're going to start here with the discussion
of the Shared File System for Podcast Producer.

00:12:46.159 --> 00:12:49.309
There are really 3 choices for Shared File System.

00:12:49.309 --> 00:12:51.169
The first is all-in-one.

00:12:51.169 --> 00:12:54.919
This is where all the services run on one server.

00:12:54.919 --> 00:12:58.459
The new Xserve has a great new capability.

00:12:58.460 --> 00:13:05.650
You can boot the OS from a solid state drive and you can
configure these 3 drives in it with hardware RAID to deliver

00:13:05.649 --> 00:13:09.240
that very high performance file system for Podcast Producer.

00:13:09.240 --> 00:13:13.039
This is a great setup for an all-in-one configuration.

00:13:13.039 --> 00:13:18.469
And this would typically be used in a pilot or in
a development system or for smaller implementation.

00:13:18.470 --> 00:13:27.350
If you're a small business and you need to do, you know, a
few podcasts a day, this is quite adequate for that purpose.

00:13:27.350 --> 00:13:32.570
If your needs grow and you have a lot of content
you produce then you might want to add RAID.

00:13:32.570 --> 00:13:39.800
So, Apple has partnered with Promise to
deliver a fully supported RAID solution

00:13:39.799 --> 00:13:42.459
that works extremely well at Podcast Producer.

00:13:42.460 --> 00:13:44.590
In this case, we're going to fully populate this RAID.

00:13:44.590 --> 00:13:50.840
We're going to use 7 drives in a RAID 5
configuration and another 7 drives in RAID 5.

00:13:50.840 --> 00:13:58.160
And perhaps, we create a RAID 50 out of these P2
LUNs, and then we have a couple of hot spares.

00:13:58.159 --> 00:14:04.469
That way if a drive fails, the system will
automatically rebuild the RAID without user interaction.

00:14:04.470 --> 00:14:11.320
This configuration is actually outlined and we have
scripts to configure your RAID on our support site.

00:14:11.320 --> 00:14:13.530
So that's the all-in-one configuration.

00:14:13.529 --> 00:14:18.480
Chances are, if you're adding that kind of storage,
you're probably going to have a fair amount

00:14:18.480 --> 00:14:20.830
of processing that you're going to be doing.

00:14:20.830 --> 00:14:28.250
So it's really easy in Snow Leopard to go
from this all-in-one configuration to NFS.

00:14:28.250 --> 00:14:32.320
In fact when you create an all-in-one, it
automatically creates the NFS infrastructure you need

00:14:32.320 --> 00:14:33.750
to add additional systems.

00:14:33.750 --> 00:14:36.429
All you have to do is bind those systems to the directory.

00:14:36.429 --> 00:14:41.500
They automatically mount the NFS file system,
and you're ready then to add extra nodes

00:14:41.500 --> 00:14:46.289
that will increase your media processing
and encoding capacity.

00:14:46.289 --> 00:14:52.089
You can also add additional delivery
nodes to support a larger audience.

00:14:52.090 --> 00:14:57.080
So NFS is a great configuration for the
medium-sized Podcast Producer deployment.

00:14:57.080 --> 00:15:00.650
And finally, Xsan.

00:15:00.649 --> 00:15:06.899
So Xsan is what North Carolina State
deployed and this is the best configuration

00:15:06.899 --> 00:15:12.899
for a highly scalable Podcast Producer deployment.

00:15:12.899 --> 00:15:16.789
Xsan is a clustered file system.

00:15:16.789 --> 00:15:23.839
In Xsan, you have redundancy throughout the system,
so high availability, multiple metadata controllers,

00:15:23.840 --> 00:15:27.509
make that Shared File System much
more reliable, multiple paths,

00:15:27.509 --> 00:15:32.330
Fibre Channel paths to the data, again increase reliability.

00:15:32.330 --> 00:15:38.740
Connected to that Xsan Shared File System, you now have
your Podcast Producer Servers, your media processing

00:15:38.740 --> 00:15:43.830
and encoding systems, and your
content archive and delivery systems.

00:15:43.830 --> 00:15:47.310
So Xsan is the best choice for highly-scalable deployment.

00:15:47.309 --> 00:15:53.689
Do that, you connect your camera machines, your
ad hoc agents and, of course, your clients.

00:15:53.690 --> 00:15:55.560
So those are the 3 basic choices.

00:15:55.559 --> 00:16:00.899
And let's just go through an analysis of
why you might choose one over the other.

00:16:00.899 --> 00:16:03.669
Well obviously if you want to deploy a single server,

00:16:03.669 --> 00:16:08.439
you use the all-in-one configuration,
that's the single server deployment.

00:16:10.110 --> 00:16:16.370
Another new feature in Snow Leopard is Express
Setup or a setup assistant that gives you--

00:16:16.370 --> 00:16:19.370
let's you choose express or standard setup.

00:16:19.370 --> 00:16:25.370
With the all-in-one and NFS configuration, you don't have
to have a SAN in place before you make that configuration,

00:16:25.370 --> 00:16:29.769
so it's really easy to set up Podcast Producer.

00:16:31.250 --> 00:16:34.830
If you want to use direct attached
storage, whether it's right in the Xserve

00:16:34.830 --> 00:16:39.100
or via a Promise RAID that's direct
attached, again, the all-in-one

00:16:39.100 --> 00:16:41.230
and NFS configurations are what you want to use for that.

00:16:41.230 --> 00:16:47.629
And then finally, if you want to scale this in terms
of media processing and encoding, you need Xgrid,

00:16:47.629 --> 00:16:50.639
you need multiple systems, well that be either NFS or Xsan.

00:16:50.639 --> 00:16:54.740
So, this begs the question of why
would you ever choose Xsan.

00:16:54.740 --> 00:16:57.120
Well the first reason is high availability.

00:16:57.120 --> 00:17:00.450
As I mentioned before, Xsan has built-in high availability.

00:17:00.450 --> 00:17:05.080
With Xsan you have this cluster file
system, multiple paths for the data.

00:17:05.079 --> 00:17:08.809
You have a very reliable clustered file system.

00:17:08.809 --> 00:17:15.679
In addition, when you deploy on Xsan, we're
going to talk more about how Podcast Producer

00:17:15.680 --> 00:17:20.000
and the grid also support high availability.

00:17:21.410 --> 00:17:28.140
Another feature of Xsan is the ability to take your storage
and allocate different parts of it for different purposes.

00:17:28.140 --> 00:17:34.340
For example, very protected storage for your
archive and a balance between protection

00:17:34.339 --> 00:17:37.079
and performance for your Shared File System.

00:17:37.079 --> 00:17:42.179
And for Scratch you might want to have just
the fastest possible storage available.

00:17:42.180 --> 00:17:47.900
With Xsan and affinities, you're able to
take a single volume and divide it up so

00:17:47.900 --> 00:17:51.130
that the most appropriate storage is
used for the most appropriate purpose.

00:17:51.130 --> 00:17:55.190
It is a very powerful feature of Xsan that
you don't get with those other choices.

00:17:55.190 --> 00:17:58.259
Xsan also makes it very easy to grow your file system.

00:17:58.259 --> 00:18:03.319
Over time your archive's going to grow
and you're going to need more space.

00:18:03.319 --> 00:18:08.759
With Xsan, you can add another RAID chassis to
your rack and now you've grown your file system.

00:18:08.759 --> 00:18:14.829
You have more storage available for
that growing archive of content.

00:18:14.829 --> 00:18:16.730
And finally, video workgroups.

00:18:16.730 --> 00:18:21.309
If you're already using Final Cut Studio and
you're in a larger production environment,

00:18:21.309 --> 00:18:24.679
chances are you already have an Xsan deployed.

00:18:24.680 --> 00:18:29.940
Integrating that video workgroup with Podcast
Producer is very easy with an Xsan environment.

00:18:29.940 --> 00:18:37.769
So this Xsan is ideal if you have both a video
workgroup, production workgroup like BBC,

00:18:37.769 --> 00:18:40.740
as well as the need to deploy a Podcast Producer.

00:18:40.740 --> 00:18:45.680
Let's take a look at how you would provision storage,

00:18:45.680 --> 00:18:50.500
one example of how you might provision
your storage for Podcast Producer.

00:18:50.500 --> 00:18:52.369
Promise has an E class chassis.

00:18:52.369 --> 00:18:55.879
This is the RAID chassis with Fibre Channel controllers.

00:18:55.880 --> 00:19:05.670
And to that, you can add a JBOD or Just a Bunch of Disks
chassis that increases your performance and capacity.

00:19:05.670 --> 00:19:11.570
So in this example we're going to use a two drive
LUN, a RAID 1 LUN, a protected LUN for metadata,

00:19:11.569 --> 00:19:15.210
that's very important, metadata is critical.

00:19:15.210 --> 00:19:20.069
We're also going to set up for 6 drive LUNs.

00:19:20.069 --> 00:19:24.950
These RAID 5 LUNs are going to
be put together into an affinity

00:19:24.950 --> 00:19:30.170
to give us the best possible balance
between performance and protection.

00:19:30.170 --> 00:19:35.519
Again, we're going to add some drives as
hot spares, that way if a drive fails,

00:19:35.519 --> 00:19:38.210
nobody has to go in and replace the drive.

00:19:38.210 --> 00:19:42.019
The RAID will automatically build
itself-- rebuild itself if a drive fails.

00:19:42.019 --> 00:19:49.079
And finally, we have these 3 remaining drives and we're
going to set those drives up for our Scratch area.

00:19:49.079 --> 00:19:54.009
And we might want to deploy them like North
Carolina State did and set up a Development

00:19:54.009 --> 00:19:57.279
and Test System that's tied into
the SAN and that's its playground.

00:19:57.279 --> 00:20:01.539
That's the area that that production--
that test system is going to use.

00:20:01.539 --> 00:20:06.950
That makes it really easy to move from a test
environment to deployment all in the same SAN.

00:20:06.950 --> 00:20:14.759
And again, we have scripts that configure the E and J
class chassis in exactly this way available on our site.

00:20:14.759 --> 00:20:19.569
>> So after you've configured these
RAIDs, it's very easy to set up Xsan.

00:20:19.569 --> 00:20:24.509
You can do it during server installation or
with Xsan admin and there's a specific option

00:20:24.509 --> 00:20:28.289
that optimizes Xsan for Podcast Producer.

00:20:28.289 --> 00:20:34.710
That's all done from the graph, from the GUI, and it's
a great way to get started with your Xsan configuration.

00:20:34.710 --> 00:20:43.340
So in summary, the Shared File System for Podcast Producer
should be set up to scale to fit your requirements.

00:20:43.339 --> 00:20:48.459
If you're a small business, the all-in-one
might be the best solution for you.

00:20:48.460 --> 00:20:54.430
If you're a small department in a school
or a K12 school that has a small number

00:20:54.430 --> 00:20:57.900
of podcast, all-in-one is a great way to start

00:20:57.900 --> 00:21:02.509
And it's easy again to move from
all-in-one to an NFS configuration.

00:21:02.509 --> 00:21:03.879
It's all set up for you.

00:21:03.880 --> 00:21:10.880
All you have to do is bind additional servers to
the directory and they are available as Xgrid nodes.

00:21:10.880 --> 00:21:21.110
And then finally for Xsan, if you want the most scalable,
highest performance and a highly available system

00:21:21.109 --> 00:21:25.829
for mission critical Podcast Producer
deployment, then Xsan is your best choice.

00:21:25.829 --> 00:21:30.710
There is an Xsan session following this session
that's going to go into much more detail

00:21:30.710 --> 00:21:33.870
on the nuts and bolts of configuring Xsan.

00:21:33.869 --> 00:21:37.649
So if you're the person that's going to be responsible
for the Shared File System, you might want to check

00:21:37.650 --> 00:21:42.030
that session out, either today or later online.

00:21:42.029 --> 00:21:46.069
The next component of your deployment is Xgrid.

00:21:46.069 --> 00:21:48.759
So Xgrid again is the brain of Podcast Producer.

00:21:48.759 --> 00:21:56.809
It's what takes these jobs in as workflows and then
distributes those workflow tasks to these computing nodes.

00:21:56.809 --> 00:22:06.339
The complexity of your workflow is the primary driver
that determines what you need in terms of a grid.

00:22:06.339 --> 00:22:14.519
So I did a little stream recording of this incredible new
tool that these gentlemen created for us, Podcast Composer.

00:22:14.519 --> 00:22:20.759
So Podcast Composer is this fabulous new tool that
allows us to do things like import multiple videos.

00:22:20.759 --> 00:22:23.410
We can do dual source imports.

00:22:23.410 --> 00:22:29.310
We have 2 sources of video now coming in that we want to
put together into, say, a picture and a picture composition.

00:22:29.309 --> 00:22:34.250
At the edit stage, we can add intro videos with
transitions to titles and have picture in a picture

00:22:34.250 --> 00:22:37.920
and automatic detection and chapter generation.

00:22:37.920 --> 00:22:45.130
And then we can export that content into multiple formats,
for iPod, for IO or Apple TV and we can publish it

00:22:45.130 --> 00:22:51.050
out to the wiki, to the Podcast Library, to Final Cut
Server, transfer it over to some other server for archive

00:22:51.049 --> 00:22:55.889
and then notify our target clients with
iChat, email or some other service.

00:22:55.890 --> 00:23:03.350
So what we're able to do now is build a very
complex workflow with very little effort.

00:23:03.349 --> 00:23:08.240
That's incredible, and thank you
very much for that capability.

00:23:08.240 --> 00:23:10.890
[Applause] So that is really great.

00:23:10.890 --> 00:23:16.410
However, this is complicated stuff
that they're doing and it has an impact

00:23:16.410 --> 00:23:20.870
on your processor requirements,
memory requirements, et cetera.

00:23:20.869 --> 00:23:25.500
So that needs to be factored in when you're
designing your Podcast Producer infrastructure.

00:23:25.500 --> 00:23:33.779
In Podcast Producer, tasks in a workflow
that run in parallel are distributed

00:23:33.779 --> 00:23:37.049
across your grid in a round robin fashion.

00:23:37.049 --> 00:23:41.609
So these jobs are distributed round
robin across these grid notes.

00:23:41.609 --> 00:23:46.179
It's important to understand when you're
deploying that the fastest CPUs are selected first.

00:23:46.180 --> 00:23:52.360
So if you have a heterogenous grid, the fastest
machines are going to be filled up first

00:23:52.359 --> 00:23:57.990
with Podcast Producer tasks before those
lower performance servers are ever accessed.

00:23:57.990 --> 00:24:02.490
So just an important factor when
you're deploying your grid to consider.

00:24:05.349 --> 00:24:09.449
As I mentioned before, if you want to take advantage
of the high availability features that are new

00:24:09.450 --> 00:24:12.819
with Snow Leopards, you need to have Xsan.

00:24:12.819 --> 00:24:18.099
So Xsan, again, is high availability on
the cluster file system and it extends now

00:24:18.099 --> 00:24:22.399
to the Xgrid controller as well as Podcast Producer.

00:24:22.400 --> 00:24:28.740
So if you have a mission critical deployment as
many of our larger customers in higher education do,

00:24:28.740 --> 00:24:36.710
this is a factor that you need to consider
when you're architecting your deployment.

00:24:36.710 --> 00:24:44.740
So when you're trying to figure what you need in terms of
your media and processing workflow, these are some pointers.

00:24:44.740 --> 00:24:49.720
First, create the typical workflows
that you're going to use.

00:24:49.720 --> 00:24:57.910
Review them with your creative staff, make sure you're
building the workflows that you're actually going to deploy.

00:24:57.910 --> 00:25:01.560
And then, submit the type of content
you're actually going to use.

00:25:01.559 --> 00:25:08.349
You can't take a one-minute video and test your grid
if you're going to be deploying 60-minute lectures.

00:25:08.349 --> 00:25:10.929
Test it with those 60-minute lectures.

00:25:10.930 --> 00:25:16.970
Use the type of content you're actually
going to be using and test for peak load.

00:25:16.970 --> 00:25:26.180
Typically in education, you see peaks and troughs in
terms of utilization, so you want to test for the peaks,

00:25:26.180 --> 00:25:31.130
so that when you're deploying, you're
successful when the system is loaded.

00:25:31.130 --> 00:25:37.700
So test for the peak load and that's also
is for your consumption of content as well.

00:25:37.700 --> 00:25:46.769
So try to anticipate those peak loads-- again for example in
education, in my market, at the end of the semester that's

00:25:46.769 --> 00:25:51.789
when all the students start downloading all
the podcast because they're trying to get ready

00:25:51.789 --> 00:25:55.480
for exams, you need to be ready for that.

00:25:55.480 --> 00:26:01.110
During these tasks monitor your
disk CPU and network utilization.

00:26:01.109 --> 00:26:03.009
There are great UNIX tools to do this.

00:26:03.009 --> 00:26:09.839
If you went to Stephen Parker's session, he's got some
great stuff, and built in the server admin we have tools

00:26:09.839 --> 00:26:13.629
that allow you to monitor this utilization.

00:26:13.630 --> 00:26:18.990
Collect and analyze your test data during
this process and make adjustments to your grid

00:26:18.990 --> 00:26:22.170
in your architecture based on your analysis.

00:26:22.170 --> 00:26:26.360
And then when you go into production,
continue to monitor this performance data.

00:26:26.359 --> 00:26:33.509
It's really important that you watch the system
and make sure it's behaving as expected over time.

00:26:33.509 --> 00:26:37.170
So this is really basic stuff that IT already understands.

00:26:37.170 --> 00:26:43.259
But the great thing about Xgrid and Xsan is that
it's really easy to scale this infrastructure.

00:26:43.259 --> 00:26:50.339
Over time if your media processing needs grow with
Xgrid, you just put another machine in the rack,

00:26:50.339 --> 00:26:54.009
attach it to the Shared File System,
bind it to the directory,

00:26:54.009 --> 00:26:57.289
and now you have more processing capability available.

00:26:57.289 --> 00:27:01.430
Same thing with Xsan, you need more
storage, put more storage in the rack,

00:27:01.430 --> 00:27:07.549
it's now available for additional capacity
in terms of your Shared File System.

00:27:08.930 --> 00:27:11.680
Some more pointers on the processing nodes.

00:27:11.680 --> 00:27:14.560
First of all, I mentioned RAM considerations.

00:27:14.559 --> 00:27:20.169
When you're testing those workflows, use TOP
[phonetic], make sure you're not paging the disk

00:27:20.170 --> 00:27:23.150
because obviously that's going to impact your performance.

00:27:23.150 --> 00:27:28.730
You want all your loaded grid to
actually be able to work in RAM.

00:27:28.730 --> 00:27:31.250
For example, we have this great new Xserves.

00:27:31.250 --> 00:27:33.579
They had 16 virtual cores.

00:27:33.579 --> 00:27:37.689
Each one of those cores can execute
one of these Podcast Producer task,

00:27:37.690 --> 00:27:42.620
so one server can do 16 things at a time, it's great.

00:27:42.619 --> 00:27:44.429
There are RAM considerations with that.

00:27:44.430 --> 00:27:48.640
A 3-gig Xserve is probably not a good choice.

00:27:48.640 --> 00:27:53.080
You're going to want more memory and in
your test, you'll be able to determine that.

00:27:53.079 --> 00:27:57.269
So take those workflows that you're actually
going to use and execute them on your grid

00:27:57.269 --> 00:28:01.279
and you'll know what the memory
footprint you need to have is.

00:28:01.279 --> 00:28:10.240
For NFS, we recommend that if you're under 8 nodes,
processing nodes, NFS works really, really well.

00:28:10.240 --> 00:28:14.819
However, if you go over 8 nodes, then
the protocol and the network start to get

00:28:14.819 --> 00:28:16.759
in the way and they become the bottleneck.

00:28:16.759 --> 00:28:22.129
So Xsan is really a better choice
for a larger scale deployment.

00:28:22.130 --> 00:28:28.180
Xsan again, in addition to providing the
scalability, also provides high availability.

00:28:28.180 --> 00:28:32.340
So it's the best combination for
scalability, high availability and performance.

00:28:32.339 --> 00:28:36.449
And if you have a video production workgroup
you want to integrate with Podcast Producer,

00:28:36.450 --> 00:28:41.370
Xsan is just the natural choice for that as well.

00:28:41.369 --> 00:28:46.239
So again in summary, the media processing and
encoding part of Podcast Producer we have to take

00:28:46.240 --> 00:28:52.019
in account the complexity of the
workflows built with Podcast Composer.

00:28:52.019 --> 00:28:55.539
What do they mean in terms of your processing needs?

00:28:55.539 --> 00:28:58.299
Take into account the round robin task distribution.

00:28:58.299 --> 00:29:02.940
How those tasks are going to be distributed on your
grid and that determines how you're going to architect

00:29:02.940 --> 00:29:06.920
that grid, fastest CPUs again being utilized first.

00:29:06.920 --> 00:29:13.690
Make the best Shared File System that match for your Xgrid.

00:29:13.690 --> 00:29:20.700
If you have-- if you plan to have a lot of Xgrid
nodes, don't plan on using NFS because the protocol,

00:29:20.700 --> 00:29:23.960
the network are going to be the bottleneck.

00:29:23.960 --> 00:29:29.640
And I always encourage my customers to
deploy a development and test server.

00:29:29.640 --> 00:29:36.710
In a mission critical environment, you want to have the
ability to test workflows, to test new versions of software,

00:29:36.710 --> 00:29:43.549
to load test your environment, and this development and
test server gives you the platform you need to do that.

00:29:43.549 --> 00:29:50.669
And so it's something that I always recommend my customers,
especially deploying larger deployments, to consider.

00:29:50.670 --> 00:29:53.900
So that's my piece of the presentation and next, again,

00:29:53.900 --> 00:29:58.540
I'm going to turn this over to these 2
extremely talented engineers that are part

00:29:58.539 --> 00:30:05.009
of a much bigger talented engineering
team to talk about the Podcast Library.

00:30:05.009 --> 00:30:10.539
[ Applause ]

00:30:10.539 --> 00:30:10.899
>> Thanks George.

00:30:10.900 --> 00:30:15.900
George has been setting up Podcast Producer all over the
country, and really if you have any questions about how

00:30:15.900 --> 00:30:18.970
to deploy Podcast Producer, he'll
be in the Lab this afternoon.

00:30:18.970 --> 00:30:20.880
You come talk to him.

00:30:20.880 --> 00:30:24.700
So for the second part of the presentation,
we're going to start looking at the Library.

00:30:24.700 --> 00:30:28.289
The Podcast Library is a brand new feature in Snow Leopard

00:30:28.289 --> 00:30:30.720
and we really think it's going to
be very powerful for a lot of you.

00:30:30.720 --> 00:30:35.730
So let's take a step back and look at this.

00:30:35.730 --> 00:30:40.500
With Podcast Producer, you're going
to be producing a lot of content.

00:30:40.500 --> 00:30:44.119
And what we wanted to do is have
a way to make it very easy for you

00:30:44.119 --> 00:30:47.799
to integrate publishing this content for your organization.

00:30:47.799 --> 00:30:53.740
So you may already have a particular web page that you'll
be showing your content through, maybe a web portal

00:30:53.740 --> 00:30:59.130
or you may be using an external service
that's going to publish the content.

00:30:59.130 --> 00:31:04.780
Well now with the Podcast Library, you can have a
central repository for all of your content that all

00:31:04.779 --> 00:31:09.109
of these external services or web pages can reflect.

00:31:09.109 --> 00:31:14.389
So the content will live and will
be served up by the Podcast Library.

00:31:14.390 --> 00:31:22.220
And these external services or web pages will be able--
allow you to create a custom front-end for your content.

00:31:22.220 --> 00:31:29.130
So as I said, the Podcast Library is a central repository,

00:31:29.130 --> 00:31:33.190
we're keeping the content and the
metadata in the same place.

00:31:33.190 --> 00:31:37.150
But we're not just serving up the content in any old way.

00:31:37.150 --> 00:31:39.810
We've created this new feature, what we call smart feeds.

00:31:39.809 --> 00:31:46.179
So think of smart feeds as what you're used to in the
finder with smart folders, or smart playlist in iTunes.

00:31:46.180 --> 00:31:52.740
You can create a query and all-- any content that
falls in that query, in response to that query,

00:31:52.740 --> 00:31:56.980
will be served up in this particular feed.

00:31:56.980 --> 00:32:00.339
For example, you could have let's say a user feed.

00:32:00.339 --> 00:32:04.339
So we say Professor A and all of the
content that Professor A has ever submitted

00:32:04.339 --> 00:32:07.349
to the Podcast Producer system would show up in his feed.

00:32:07.349 --> 00:32:15.179
And we're leveraging industry standards, like
Atom and RSS which makes it very easy for you

00:32:15.180 --> 00:32:22.420
to customize your web front-end for the Podcast
Library and show the content through your web portal.

00:32:22.420 --> 00:32:26.980
But it also makes it very easy as I said earlier to
integrate with external services, because there are a lot

00:32:26.980 --> 00:32:30.680
of services out there that already
know how to read RSS or Atom.

00:32:30.680 --> 00:32:38.470
And they can basically ingest this Atom or RSS
and show it in a way that they're best capable of.

00:32:39.869 --> 00:32:45.750
We also create a lot of feeds for you automatically
so that you don't have to worry about setting them up.

00:32:45.750 --> 00:32:50.839
For example, when you install a workflow, we'll
automatically create a feed for that workflow.

00:32:50.839 --> 00:32:56.299
When a new user submits contents to the Podcast Producer
system, we automatically create a feed for that user.

00:32:56.299 --> 00:33:00.769
And we'll be going over this in the demo in a few minutes.

00:33:00.769 --> 00:33:02.359
But we didn't just stop there.

00:33:02.359 --> 00:33:04.149
We've made it fully customizable.

00:33:04.150 --> 00:33:08.400
So you can write your own queries
in a very [inaudible]-like syntax

00:33:08.400 --> 00:33:12.960
to create your own custom feeds if
you have a very particular need.

00:33:12.960 --> 00:33:17.710
And we've also set up access controls so
you can set up access controls on the--

00:33:17.710 --> 00:33:23.930
on the different feeds, and we'll
talk about that in the last part.

00:33:23.930 --> 00:33:29.460
So just to come back and just to kind of make
sure we're on the same page about smart feeds,

00:33:29.460 --> 00:33:32.279
I've just got a little animation
here to show you how this works.

00:33:32.279 --> 00:33:35.099
So here we've set up 2 smart feeds.

00:33:35.099 --> 00:33:40.769
The first smart feed is going to serve up all of
the content that is tagged with the Physics keyword.

00:33:40.769 --> 00:33:48.240
The second is going to serve up all the content that
was ever published or submitted by Professor Einstein.

00:33:48.240 --> 00:33:55.950
So coming through our workflow here, we've got--
we have a submission from Physics 101 Of course,

00:33:55.950 --> 00:34:00.490
Einstein doesn't teach Physics 101
so that just goes into Physics feed.

00:34:00.490 --> 00:34:06.349
The same is true for Physics 102, and
it's going to show up in the Physics feed.

00:34:06.349 --> 00:34:11.880
But for Physics 523, Intro to Relativity, well,
Einstein actually does teach that so that's--

00:34:11.880 --> 00:34:15.660
that content is actually going to show up in both feeds.

00:34:15.659 --> 00:34:19.329
So now you really see it, and it's really just
like what you would expect when you're used

00:34:19.329 --> 00:34:22.239
to using smart folders and smart playlist in iTunes.

00:34:22.239 --> 00:34:30.179
One other thing that I'd like to point out
is that we're really moving towards Atom.

00:34:30.179 --> 00:34:34.509
We really think Atom is the future
for the syndication model.

00:34:34.510 --> 00:34:40.100
And one of the first reason is that Atom allows
us to have multiple enclosures per episode.

00:34:40.099 --> 00:34:47.750
So for those of you who are familiar with RSS, you know
that if you do-- with respect to the RSS specification,

00:34:47.750 --> 00:34:52.550
if you want to have multiple formats, if you want
to podcast your content and distribute your content

00:34:52.550 --> 00:34:57.150
in multiple formats, you have to maintain 3 different feeds.

00:34:57.150 --> 00:35:00.809
So in this example, let's say I
want to have an iPod version,

00:35:00.809 --> 00:35:03.929
I want to distribute an audio only
version, and an Apple TV version.

00:35:03.929 --> 00:35:07.649
I need to maintain 3 different RSS feeds.

00:35:07.650 --> 00:35:14.170
Well with Atom, there is direct support in the specification
to have multiple enclosures for a single episode.

00:35:14.170 --> 00:35:18.550
So I can now have the audio only, the
iPod video, and the Apple TV version

00:35:18.550 --> 00:35:22.870
in one episode in my Atom spec, in my Atom feed.

00:35:22.869 --> 00:35:28.440
And this is going to simplify it because now you
only have one feed that you have to maintain.

00:35:28.440 --> 00:35:34.740
Another interesting point with Atom is it provides a way
for us to extend the protocol right in the specification.

00:35:34.739 --> 00:35:40.339
We can extend Atom without breaking the
specification by declaring our own name space

00:35:40.340 --> 00:35:43.110
and we can provide you with even more information.

00:35:43.110 --> 00:35:49.539
So when you start playing with the Podcast Library and
we'll show this to you in the demo, we'll we've extended it

00:35:49.539 --> 00:35:52.300
to provide you with even more metadata than was actually--

00:35:52.300 --> 00:35:58.289
than initially supported by the Atom spec. So we can give
you information about the frame rate, for the duration,

00:35:58.289 --> 00:36:04.980
all types of different information that you
may choose to use or you can completely ignore.

00:36:04.980 --> 00:36:11.469
And if you want to, you could even extend Atom for your use
case, maybe you have some particular metadata that you would

00:36:11.469 --> 00:36:16.739
like to put into the Atom spec, well you can do that.

00:36:16.739 --> 00:36:21.389
So at this time, I'm going to bring up
Eric and he's going to bring you and browse

00:36:21.389 --> 00:36:23.980
through the library and show you what it looks like.

00:36:23.980 --> 00:36:24.519
>> Thank you Kjell.

00:36:24.519 --> 00:36:28.000
[Applause] Good morning.

00:36:28.000 --> 00:36:36.250
The Podcast Library is the new delivery masterpiece of
Podcast Producer and it makes the out of the box publishing

00:36:36.250 --> 00:36:44.820
and consuming very simple, and I'd
like to demonstrate that to you.

00:36:44.820 --> 00:36:47.320
So this is the Podcast Library root catalog.

00:36:47.320 --> 00:36:49.460
This is the highest level of the catalog.

00:36:49.460 --> 00:36:56.269
By default, we've created for you a set of
different catalogs for the user, for the workflows,

00:36:56.269 --> 00:36:59.559
and some others we're going to address in a minute.

00:36:59.559 --> 00:37:02.449
And in these catalogs, you have all the feeds.

00:37:02.449 --> 00:37:07.389
For example in these feeds, you
have all the different episodes,

00:37:07.389 --> 00:37:10.670
and again in these episodes you have all the attachments.

00:37:10.670 --> 00:37:20.820
One of the reason we are using Atom now is for getting this
new capability of adding multiple attachments per episodes

00:37:20.820 --> 00:37:25.530
but also as Kjell explained, they have
also the ability to extend it very easily

00:37:25.530 --> 00:37:29.130
by having metadata and all the additional informations.

00:37:29.130 --> 00:37:37.190
It's also super easy to use other tools such as iTunes
and other aggregators to get access to these Atom Feeds.

00:37:37.190 --> 00:37:46.990
So for instance if I subscribe in iTunes, it will
automatically load the Atom feed and get some of the content

00:37:46.989 --> 00:37:55.839
for me and then every time the Library updates these
feeds then tools such as iTunes are going to get notified

00:37:55.840 --> 00:38:01.640
and [inaudible] these feeds automatically for
me and then synchronize with my old devices.

00:38:01.639 --> 00:38:08.529
We're creating for you a lot of different
feeds, so you don't need an out of the box,

00:38:08.530 --> 00:38:12.130
you don't need to take care about that by yourself.

00:38:12.130 --> 00:38:17.309
We create a user feed for every time you are submitting
a new content from Podcast Capture, so if you're--

00:38:17.309 --> 00:38:22.769
for the first time you're using the Podcast
Capture, we're going to create a user feed for you.

00:38:22.769 --> 00:38:29.469
Also when you install your workflow with Podcast composer,
we're going to create a workflow feed automatically

00:38:29.469 --> 00:38:34.529
so then you'll have feeds you could share
with your students or with your colleagues.

00:38:34.530 --> 00:38:39.430
We're going to address the keyword feed,
which is a great addition in Podcast Composer.

00:38:39.429 --> 00:38:45.940
You could actually decide when creating a workflow to
add keywords for every single content going to be run

00:38:45.940 --> 00:38:49.280
through this workflow and the then
the content is going to appear

00:38:49.280 --> 00:38:51.710
in those different keywords feeds for you automatically.

00:38:51.710 --> 00:38:56.429
You can also generate history feeds so that
you can look at all the content produced today

00:38:56.429 --> 00:38:59.929
or yesterday or the couple of weeks before.

00:38:59.929 --> 00:39:08.619
And finally, there is a pool of feeds here where you
can create your own custom feeds, your own smart feeds.

00:39:08.619 --> 00:39:14.009
So let me demonstrate that and create a new user first.

00:39:14.010 --> 00:39:22.690
[ Pause ]

00:39:22.690 --> 00:39:24.010
>> Really?

00:39:24.010 --> 00:39:35.260
[ Pause ]

00:39:35.260 --> 00:39:38.970
>> OK one more time.

00:39:38.969 --> 00:39:40.009
No.

00:39:40.010 --> 00:39:45.550
[ Pause ]

00:39:45.550 --> 00:39:53.280
>> So I've just created a nice user
[laughter] from our group manager.

00:39:53.280 --> 00:40:00.460
And after creating this user, automatically
it's going to appear in these user feeds.

00:40:00.460 --> 00:40:04.070
Now let's create a workflow.

00:40:04.070 --> 00:40:11.550
Since I trust Podcast Composer
[laughter] I'm going to use this tool.

00:40:11.550 --> 00:40:23.310
>> So let me do my first workflow, create a montage
workflow, where I'm going to submit some content to it.

00:40:23.309 --> 00:40:31.539
I don't want to do any specific edition here but I
still want to generate a couple of different formats,

00:40:31.539 --> 00:40:36.239
and publish all the content in the Library.

00:40:36.239 --> 00:40:40.299
So here is the way you can set some keywords.

00:40:40.300 --> 00:40:45.570
And the cool point about this is every single
keyword you're going to add here are going to be set

00:40:45.570 --> 00:40:51.530
to the different generating medias that's
going to be produced by this workflow.

00:40:51.530 --> 00:40:56.250
And as you may have seen before, we do
already have some keywords feed here.

00:40:56.250 --> 00:41:06.699
So for example, if I like this workflow to publish
the resulting media to the WWDC and also some--

00:41:06.699 --> 00:41:17.049
to some additional things like to create a new
keyword, then these keywords are going to be used

00:41:17.050 --> 00:41:20.300
to create additional feeds that do not exist.

00:41:20.300 --> 00:41:25.570
So if I do that, I need you to try it
with me to deploy it to the server,

00:41:25.570 --> 00:41:30.050
if the server wants to work using maybe my account.

00:41:30.050 --> 00:41:41.180
No, OK. So the server does not want me install
anything or use my credentials, sorry for that.

00:41:41.179 --> 00:41:50.639
So-- so once the workflow is installed, Podcast
Library system does generate the feeds automatically

00:41:50.639 --> 00:41:54.469
and the feeds are going to appear
in the workflow feed lists here.

00:41:54.469 --> 00:42:00.399
Then it's going to look at all the existing
keywords feeds and create additional ones.

00:42:00.400 --> 00:42:07.639
And if I do then a recording with the new user I've just
created as you've seen and actually uses my new workflow,

00:42:07.639 --> 00:42:12.150
the content is going to be published at
the new user feed, to the workflow feed,

00:42:12.150 --> 00:42:17.930
and to those 2 different keywords,
those 2 different keywords feeds.

00:42:17.929 --> 00:42:26.609
One thing I would like to show you is if I tag
this very well and curl it through the terminal,

00:42:27.800 --> 00:42:32.910
so this is an XML file using the Atom specification.

00:42:32.909 --> 00:42:41.670
This path is an actually an episode and that displays all
the different information about the link to these episodes.

00:42:41.670 --> 00:42:47.900
But let me just show you instead
of a catalog, some content here.

00:42:47.900 --> 00:42:50.119
So this one has great content.

00:42:50.119 --> 00:42:55.289
This is a leaf of the library, this is the feed itself.

00:42:55.289 --> 00:43:04.750
So in this one, if I take-- if I take the
entry here, you see that you have a lot

00:43:04.750 --> 00:43:07.519
of information just for one single episode.

00:43:07.519 --> 00:43:11.590
But the very interesting parts are the attachments.

00:43:11.590 --> 00:43:17.360
So now we've developed attachments based on the workflow
different formats and for these different attachments,

00:43:17.360 --> 00:43:20.760
we also provide for you automatically
a set of different metadata.

00:43:20.760 --> 00:43:25.910
So if you want to build a UI on top of that or
actually sync that with any of your services,

00:43:25.909 --> 00:43:30.359
you may be able to use all these
informations to do something nice with it,

00:43:30.360 --> 00:43:33.829
like for example the video cut
that we are using for this format.

00:43:33.829 --> 00:43:40.219
Or the frame rates, or even some old
informations about the different tracks available,

00:43:40.219 --> 00:43:44.569
do you have any closed caption
tracks or video tracks, audio tracks.

00:43:44.570 --> 00:43:52.960
And we also have this new thing called PCP formats that
tells you if this content is actually low complexity element

00:43:52.960 --> 00:44:02.349
or is this SD or HD so then you can know if this is
actually a content you could use with the iPhone or the iPod

00:44:02.349 --> 00:44:06.500
or with your Apple TV or with your desktop platform.

00:44:08.369 --> 00:44:14.420
And finally, all the content that is produced
is actually installed on the system--

00:44:14.420 --> 00:44:16.710
on the file system, it's not set in the database.

00:44:16.710 --> 00:44:23.550
It's not actually put in any opaque
structure on the Podcast Library server.

00:44:23.550 --> 00:44:28.400
It's actually installed on the file system
and read by our systems and then cached.

00:44:28.400 --> 00:44:35.079
So at anytime you could actually look at it
and remove or add any additional element.

00:44:35.079 --> 00:44:42.110
So it's in cache library Podcast
Producer shared content by default.

00:44:42.110 --> 00:44:57.280
So let me just-- so in this place, if I go and look at
the content here organized by years, month, and date,

00:44:57.280 --> 00:45:01.500
if you look at the content here I've created.

00:45:01.500 --> 00:45:09.320
You see that every time you submit a content through Podcast
Capture, using a workflow, we're going to create a bundle.

00:45:09.320 --> 00:45:17.530
And in that bundle, we're going to install all the
different original files that have been submitted.

00:45:17.530 --> 00:45:21.030
We're going also to put all the different metadata coming

00:45:21.030 --> 00:45:28.120
from the Podcast Capture application including all the
metadata that we are going to generate server side for you

00:45:28.119 --> 00:45:31.690
so we have a lot of information here
that's going to be automatically added.

00:45:31.690 --> 00:45:40.130
And finally in the publish folder, we're going to
add all the different files that has been produced.

00:45:40.130 --> 00:45:47.000
So in that particular one, I've just submitted a
PDF file and this was my original file, out of this,

00:45:47.000 --> 00:45:50.170
thanks to the montage workflow,
we've created different videos.

00:45:50.170 --> 00:45:57.210
So we have this editing master, high quality master, but
also these different formats that you've decided to create

00:45:57.210 --> 00:46:02.780
for the iPod version, for example, including the
poster image so then we can have a nice image

00:46:02.780 --> 00:46:05.580
in your feeds for presenting the content.

00:46:05.579 --> 00:46:08.009
Thank you.

00:46:08.010 --> 00:46:13.000
[ Applause ]

00:46:13.000 --> 00:46:14.599
>> Thanks Eric.

00:46:15.800 --> 00:46:19.710
So what you've seen is we've been talking about feeds.

00:46:19.710 --> 00:46:26.559
And what we've really-- we really think is powerful is
we're going to provide you with Atom feeds and RSS feeds.

00:46:26.559 --> 00:46:31.230
And by doing this, we're providing you with
industry standards that you can now leverage

00:46:31.230 --> 00:46:36.159
to integrate with your own web pages or portals.

00:46:36.159 --> 00:46:40.759
So it's already as you saw in the demo, it
already works with aggregators like iTunes

00:46:40.760 --> 00:46:45.110
or any other Atom-aware or RSS-aware aggregator out there.

00:46:45.110 --> 00:46:52.039
You also have web applications that know how
to-- that provide a specific UI for Atom or RSS.

00:46:52.039 --> 00:46:59.750
But where this really becomes powerful is if you have
a particular need, if you need to present your content

00:46:59.750 --> 00:47:03.880
in a specific way, well you know
how, it's very easy to do so.

00:47:03.880 --> 00:47:09.940
You can write tailored applications or web-based
applications that can now just serve as a front-end

00:47:09.940 --> 00:47:14.760
to the Podcast Library so you can provide
your customers with the best experience

00:47:14.760 --> 00:47:19.100
to consume the content that resides in the Podcast Library.

00:47:19.099 --> 00:47:25.299
By doing this, we are providing you with a service and we're
making it very easy for the Podcast Producer system to serve

00:47:25.300 --> 00:47:31.850
up the content that you've been producing, but we allow
you to have the flexibility of deciding how you want

00:47:31.849 --> 00:47:36.210
to best show this to your end customers
and to your audience.

00:47:36.210 --> 00:47:41.550
And there's also existing services out there
that already know how to ingest RSS or Atom.

00:47:41.550 --> 00:47:44.340
So that makes integrating with them very easy as well.

00:47:44.340 --> 00:47:50.960
And well we work with out own teams
at Apple to make sure that this--

00:47:50.960 --> 00:47:56.449
we followed up on the story, and we've been working
very tightly with the iTunes U team to make sure

00:47:56.449 --> 00:48:00.480
that the integration with iTunes
U is as powerful as possible.

00:48:00.480 --> 00:48:09.519
And what we've done is we've made it extremely easy for
you now to tie in your Podcast Library feeds with iTunes U.

00:48:09.519 --> 00:48:17.670
So for those of you who know iTunes U, before you had to
go in there and create a course page and then populate it

00:48:17.670 --> 00:48:20.360
with all the metadata like the title, the description.

00:48:20.360 --> 00:48:24.530
You've provide it with maybe a logo and
then you would upload all the content

00:48:24.530 --> 00:48:26.620
that you wanted to have on your iTunes U site.

00:48:26.619 --> 00:48:34.779
What I'm really happy to say is when you have Snow Leopard
with the Podcast Library, you won't have to do that anymore.

00:48:34.780 --> 00:48:42.670
You'll create what we call a feed course page and then all
you have to do is copy the URL from your Podcast Library,

00:48:42.670 --> 00:48:49.389
give that to iTunes, iTunes U, sorry, and iTunes U
will build the course page for you automatically.

00:48:49.389 --> 00:48:51.769
What this means is we're going to get the title information.

00:48:51.769 --> 00:48:55.250
We're going to get, iTunes U is going to
get the title information, the description,

00:48:55.250 --> 00:48:59.199
the logo image from the feed and all of the content.

00:48:59.199 --> 00:49:02.480
ITunes U is going to download everything
and it's going to set up a page for you.

00:49:02.480 --> 00:49:10.800
You won't have to go in there and
manually upload all the content yourself.

00:49:10.800 --> 00:49:10.860
[ Applause ]

00:49:10.860 --> 00:49:17.370
>> But even better than that, with Atom, we have
multiple enclosures, so iTunes U understands this

00:49:17.369 --> 00:49:22.059
and they will automatically create a tab
per format so that your user can go in

00:49:22.059 --> 00:49:24.360
and see right away what format they want.

00:49:24.360 --> 00:49:29.599
If they want the Apple TV format, they can just click on
the Apple TV tab and they will have that content there.

00:49:29.599 --> 00:49:35.440
So the iTunes U is really going to be a great-- is going
to have a great ingestion story for the Podcast Library

00:49:35.440 --> 00:49:43.789
and we really think the Podcast Library is going to be
the easiest way for you to get your content to iTunes U.

00:49:43.789 --> 00:49:47.300
So let's look at-- look at customizing your feeds.

00:49:47.300 --> 00:49:52.250
We've talked about the Podcast Library and showed you
how we create a lot of the feeds for you automatically.

00:49:52.250 --> 00:49:54.800
But we understand that you're probably
going to have some custom needs

00:49:54.800 --> 00:49:58.440
and you're going to want to set up your feeds yourself.

00:49:58.440 --> 00:50:00.570
So you saw it with Eric.

00:50:00.570 --> 00:50:04.850
We'll automatically create user feeds for
you but we create the user feed for you

00:50:04.849 --> 00:50:07.969
when the user submits for the first time.

00:50:07.969 --> 00:50:13.059
But we also have a way for you to very easily
create a user feed before that user is ever logged

00:50:13.059 --> 00:50:16.889
into Podcast Composer, or Podcast Capture, sorry.

00:50:16.889 --> 00:50:21.859
>> So we have in the podcast command line
tool, there is now a command called addfeed

00:50:21.860 --> 00:50:24.650
and if you just tell it the short name
that you want to create the feed for,

00:50:24.650 --> 00:50:28.280
it automatically knows to create a
user feed and it will do it for you.

00:50:28.280 --> 00:50:33.040
Same thing with keyword feeds, you
just held the keyword you wanted to use

00:50:33.039 --> 00:50:35.969
and it will automatically create a keyword feed for you.

00:50:35.969 --> 00:50:41.059
But if you want to get fancy and you want to
do some more interesting things with the feeds

00:50:41.059 --> 00:50:45.670
and come up with some custom queries,
we've made that very easy for you to.

00:50:45.670 --> 00:50:49.900
All you need to specify is the name for
the feed, give it a short description,

00:50:49.900 --> 00:50:53.720
and you can specify the query with an SQL-like syntax.

00:50:53.719 --> 00:51:00.139
So here in this example you can see that this
wwdc09 feed is going to serve up all the content

00:51:00.139 --> 00:51:06.609
where the episode is title, where the
episode title contains the wwdc09 string.

00:51:06.610 --> 00:51:11.870
And we have a lot of different metadata that you can query
so you're going to be able to create really complex queries

00:51:11.869 --> 00:51:15.299
if you want or you have a custom need for it.

00:51:15.300 --> 00:51:19.830
You can query information like the title, summary, keywords.

00:51:19.829 --> 00:51:23.750
But there's also information about the
author, so the one who submitted the content,

00:51:23.750 --> 00:51:27.010
or when the content was actually
submitted with some date information.

00:51:27.010 --> 00:51:34.020
And to show that, Eric can come back up on
stage and he's going to show you how easy it is.

00:51:35.110 --> 00:51:36.170
>> Thank you.

00:51:36.170 --> 00:51:44.880
So I've just created a custom feed to test
it and I've created a feed that actually look

00:51:44.880 --> 00:51:49.579
at all the content that Kjell and I have created so far.

00:51:49.579 --> 00:51:58.049
So this was a really simple query to look at all the
content in the Library looking at all the metadata

00:51:58.050 --> 00:52:04.670
and querying all these properties to actually
then generate a feed out of all these episodes.

00:52:04.670 --> 00:52:09.409
So this is the result of the feed
and we have about 26 elements.

00:52:09.409 --> 00:52:16.099
But I'd like to create one additional feed that actually
restrict that query and look at all the content that Kjell

00:52:16.099 --> 00:52:23.500
and I have created that also contains the keywords wwdc09.

00:52:23.500 --> 00:52:28.780
So for that, I'm using the addfeed command line podcast--

00:52:28.780 --> 00:52:35.920
addfeed with specific query that is looking for the
authorship named Eric or the authorship named Kjell

00:52:35.920 --> 00:52:43.780
and I'm looking for all the keywords and I have
particularly want at the wwdc09 query-- keyword.

00:52:43.780 --> 00:52:50.810
So if I install this and if I go back and
refresh my custom feeds, now I have my feed 2,

00:52:50.809 --> 00:52:58.579
and this feed 2 has all these different
episodes that respond to the query,

00:52:58.579 --> 00:53:02.710
and I can say that I have about 14 episodes there.

00:53:02.710 --> 00:53:10.220
But I even want to restrict that a bit more and what
I'm going to do is actually to look for all the content

00:53:10.219 --> 00:53:14.069
that we've created so far using
this keyword but also restrict

00:53:14.070 --> 00:53:18.280
to only the content we have created
for this wwdc starting on Monday.

00:53:18.280 --> 00:53:28.220
So I'm going to add the date, actually filter
here, and just make sure it starts on the 8th.

00:53:28.219 --> 00:53:37.000
And by adding this query to the server, now
I have a third feed with only 10 elements

00:53:37.000 --> 00:53:44.150
and these are all the different episodes we have
created in all our different presentations this week.

00:53:44.150 --> 00:53:45.139
Thank you.

00:53:45.139 --> 00:53:50.549
>> So now you've seen how we've made
it so you can create really easy feeds

00:53:50.550 --> 00:53:55.180
by just installing Podcast Producer workflows and it
will take care of creating a lot of the feeds for you,

00:53:55.179 --> 00:54:00.069
and then if you really want to customize
this, you can create your own feeds.

00:54:00.070 --> 00:54:04.240
So now let's talk about controlling access.

00:54:04.239 --> 00:54:09.159
Of course we use Open Directory to authenticate
the different users and we have multiple ways.

00:54:09.159 --> 00:54:12.619
We support different authentication types.

00:54:12.619 --> 00:54:16.519
So of course we have Kerberos, Digest, and basic auth.

00:54:16.519 --> 00:54:23.630
The one thing to understand about the Podcast
Library is we control the access through the feeds.

00:54:23.630 --> 00:54:28.170
So you can think about this as maybe like
the dinner sitting on the kitchen table,

00:54:28.170 --> 00:54:33.380
well if I can get into the kitchen I will be able to
eat that dinner and it's the same thing with the feeds.

00:54:33.380 --> 00:54:35.280
I have access to content.

00:54:35.280 --> 00:54:39.050
I can have access to any content
that I can access through any feed.

00:54:39.050 --> 00:54:42.300
So I've access to the feed, I can then access the content.

00:54:42.300 --> 00:54:47.280
So we're not setting access controls
on the content, but just on the feeds.

00:54:47.280 --> 00:54:51.000
So just think of them as gateways to your content.

00:54:51.000 --> 00:54:56.570
And we have kind of 3 different modes of controlling access.

00:54:56.570 --> 00:55:01.240
By default and what you've seen in all
of the demos, there is no access control.

00:55:01.239 --> 00:55:05.959
It's just wide open, this is what we called world access.

00:55:05.960 --> 00:55:12.619
But maybe you want to restrict access to the entire
Podcast Library to a particular group of users or groups.

00:55:12.619 --> 00:55:14.079
We've made this very easy for you.

00:55:14.079 --> 00:55:19.500
And those of you who are already familiar
with server admin, all you have to do is set

00:55:19.500 --> 00:55:23.599
up a service access control list
for the Podcast Producer service.

00:55:23.599 --> 00:55:31.089
So if you restrict the SACL for Podcast Producer,
this also applies to the Podcast Library.

00:55:31.090 --> 00:55:35.800
So, only users who have access to the Podcast Producer
service will have access to the Podcast Library.

00:55:35.800 --> 00:55:44.210
So it makes it very easy for you to lock down
access to your library to user, group of users.

00:55:45.940 --> 00:55:49.309
But then we also have what we call lock down mode.

00:55:49.309 --> 00:55:55.779
And by turning on lock down mode, what you're doing
is you're enabling access controls for all the feeds.

00:55:55.780 --> 00:56:00.019
And whenever we create a feed, we
create it with an access control list.

00:56:00.019 --> 00:56:06.070
And by default, that access control list is
empty so that means that nobody has access to it

00:56:06.070 --> 00:56:08.769
if you turn on access controls for feeds.

00:56:08.769 --> 00:56:12.079
There's one exception and that's for the user feeds.

00:56:12.079 --> 00:56:17.239
Well when we create a user feed, we make sure that
that user has-- is on the access control list,

00:56:17.239 --> 00:56:21.209
so that they always have access to
the content that they have submitted.

00:56:22.500 --> 00:56:28.059
And if you're an administrator, well that bypasses
everything because you have access to see the whole system.

00:56:28.059 --> 00:56:33.099
So you can have full access to all
of the feeds and all of the content.

00:56:33.099 --> 00:56:38.159
The idea behind lock down is that you have to
give explicit permission to a particular user

00:56:38.159 --> 00:56:41.750
or groups for them to have access to a particular feed.

00:56:43.440 --> 00:56:49.110
So this provides a very granular
way of setting access controls.

00:56:49.110 --> 00:56:54.750
We've seen that you can have it world access or you can
lock down the whole systems to a particular user or groups,

00:56:54.750 --> 00:56:57.760
but we've also have-- have a way
of getting very granular about it.

00:56:57.760 --> 00:56:59.790
I'm going to walk you through that now.

00:56:59.789 --> 00:57:03.440
But before, we're talking about feeds here.

00:57:03.440 --> 00:57:06.519
But feeds are just another resource
type for Podcast Producer.

00:57:06.519 --> 00:57:11.719
Cameras, workflows, and feeds are all
resources that you can set access controls on.

00:57:11.719 --> 00:57:20.489
And for the Podcast Producer system, this access-- the whole
access control model is the same for all 3 resource types.

00:57:20.489 --> 00:57:25.109
So as I said, by default for the
feeds, everything is world accessible.

00:57:25.110 --> 00:57:30.570
But if you set a SACL for the Podcast
Producer system, you're basically locking

00:57:30.570 --> 00:57:36.150
down the whole Podcast Producer system for
whoever is in that service access control list.

00:57:36.150 --> 00:57:42.470
But you can also set access controls
for particular resource types.

00:57:42.469 --> 00:57:44.849
So, not for the resource, but the resource types.

00:57:44.849 --> 00:57:52.099
So this means that I can say that feeds are access-- are
world accessible which is by default, but that for cameras

00:57:52.099 --> 00:57:54.650
and workflows, users have to be logged in and that they're--

00:57:54.650 --> 00:57:59.070
we're going to enforce access controls
for those 2 resource types.

00:57:59.070 --> 00:58:04.330
But then of course you have multiple
instances of all of these resources.

00:58:04.329 --> 00:58:09.460
And we've also made it so that you can set
access controls on each individual resource.

00:58:09.460 --> 00:58:16.030
So we think we have a really granular
solution that will fit all of your needs

00:58:16.030 --> 00:58:20.120
and that you can decide what type
of access controls you want to set.

00:58:20.119 --> 00:58:28.079
And I'm just going to walk you through the decision
graph that happens on the Podcast Producer systems

00:58:28.079 --> 00:58:35.069
so you can understand how we decide and what
kind of enforcement we're doing to detect

00:58:35.070 --> 00:58:38.850
if the user has access to a particular resource or not.

00:58:38.849 --> 00:58:43.309
So when a user comes in, the first thing
that Podcast Producer system is going

00:58:43.309 --> 00:58:47.820
to check is there a SACL enabled
for the Podcast Producer system.

00:58:47.820 --> 00:58:52.130
If there is and the user isn't
in the SACL, we deny an access.

00:58:52.130 --> 00:58:58.789
If there is-- and there, then we'll just continue our graph.

00:58:58.789 --> 00:59:10.159
So the second question we're gong to ask is is there a
resource-- is there an ACL enabled for that resource type.

00:59:10.159 --> 00:59:14.719
Are we enforcing access controls for this
particular resource that they're trying to--

00:59:14.719 --> 00:59:17.829
the resource type that they're trying to access.

00:59:17.829 --> 00:59:22.219
So are we enforcing access controls for feeds, for example.

00:59:22.219 --> 00:59:25.509
If we're not, then we can grant them access.

00:59:25.510 --> 00:59:30.100
If we are, we're going to ask if
that particular user has access

00:59:30.099 --> 00:59:33.029
to this particular resource that they're trying to access.

00:59:33.030 --> 00:59:38.750
I think the easiest way to show you
this is to show you in demo again.

00:59:38.750 --> 00:59:45.539
So Eric is going to walk you through and show you how
we can set the access controls for particular feed.

00:59:45.539 --> 00:59:49.800
>> OK. So anyone could use the Library by default.

00:59:49.800 --> 00:59:54.600
If you want to restrict the usage of the Library
for everyone, which means to all the user you have

00:59:54.599 --> 01:00:00.130
in your phone directory system, you just have to
go and start your Server Admin, pick the server,

01:00:00.130 --> 01:00:05.599
go in Access and select the Podcast Producer service here.

01:00:05.599 --> 01:00:10.309
And by adding users or by adding groups,
you're going to restrict the usage

01:00:10.309 --> 01:00:15.179
of this service to some of the users you actually want.

01:00:15.179 --> 01:00:21.059
>> For example here, if you would like to open
it to everyone that's in your phone directory,

01:00:21.059 --> 01:00:27.849
you just had everyone a group and automatically this
is going to restrict your Library to all your users.

01:00:27.849 --> 01:00:38.099
If you'd like to even go further and lock down your
system by specifying a group of users or specific groups

01:00:38.099 --> 01:00:46.119
for specific feeds, you'll have to
enable ACLs at the whole library level.

01:00:46.119 --> 01:00:49.000
So for that, we have 3 command lines.

01:00:49.000 --> 01:00:56.139
The first command line is it gives you the ability to
actually enable the ACLs for the lock down strategy

01:00:56.139 --> 01:01:02.449
on all the Library, and this is going
to enable the lock down for the feeds.

01:01:02.449 --> 01:01:08.389
Once you have them that, by default, all the feeds
are going to be restricted to for the administrator

01:01:08.389 --> 01:01:12.460
and only the user feeds are going to
be useful, are going to be accessible

01:01:12.460 --> 01:01:16.940
by the user itself as well as the administrator.

01:01:16.940 --> 01:01:23.409
And then, so you could look at all the different
ACLs per feed by using the show ACL command line,

01:01:23.409 --> 01:01:30.849
and you can get the resource UID also by using a list
feeds or just by browsing the Library as an administrator,

01:01:30.849 --> 01:01:36.869
you'll be able to figure out about all
the different UID in the URL directly.

01:01:36.869 --> 01:01:45.309
And if you'd like to open some feeds such as this one, from
Nathan, if you'd like to open this feed to a specific user

01:01:45.309 --> 01:01:54.309
or for-- to a specific group then we have this add access
property for the pcast command line that will allow you

01:01:54.309 --> 01:01:59.250
to add a specific access to a specific
user for a specific resource.

01:01:59.250 --> 01:02:07.739
So for example, if I just copy/paste this here and
execute this command line, then the user, Eric,

01:02:07.739 --> 01:02:11.439
will have access to this particular field automatically.

01:02:11.440 --> 01:02:13.130
Thank you.

01:02:14.670 --> 01:02:20.670
>> So in summation, so what you learned from George's
part of the presentation is that you need to plan ahead.

01:02:20.670 --> 01:02:23.400
There's a lot of questions that you need to ask yourself

01:02:23.400 --> 01:02:29.210
about deploying Podcast Producer before you
even start setting up your first server.

01:02:29.210 --> 01:02:30.429
There's a lot of infrastructure.

01:02:30.429 --> 01:02:32.919
You need to determine what type of
file system you're going to use,

01:02:32.920 --> 01:02:37.619
how big and how many Podcast you
think you're going to be creating.

01:02:37.619 --> 01:02:39.799
How big of an Xgrid do you need.

01:02:39.800 --> 01:02:43.410
Basically, you're going to have to be
able to run a lot of tests to make sure

01:02:43.409 --> 01:02:47.949
that you have a general understanding
of what you're going to be producing.

01:02:47.949 --> 01:02:55.049
And now with the Podcast Library, we've made it extremely
easy for you to integrate with your existing web environment

01:02:55.050 --> 01:03:01.850
so that you can decide how you best want to show
your content to your audience and to your end users.

01:03:01.849 --> 01:03:07.809
Make sure that this is really customizable but you can
create your own feeds and you can specify your own queries

01:03:07.809 --> 01:03:12.880
so that you can have the best feeds and the
most intelligent feeds that fit your needs.

01:03:12.880 --> 01:03:18.430
And we have a very granular access control system
so that you can decide who has access and make sure

01:03:18.429 --> 01:03:22.929
that only the right people can
see the Podcast and your content.

01:03:24.159 --> 01:03:30.049
So for related sessions, so most of these have actually
already happened, and it's mostly if you're watching this

01:03:30.050 --> 01:03:32.230
in video, there are a lot of sessions this week.

01:03:32.230 --> 01:03:36.789
But what I really think is going to be a lot of fun is the
next session that's going to be right here in this room.

01:03:36.789 --> 01:03:41.029
We're going to be talking about the
technologies that empower podcast producers.

01:03:41.030 --> 01:03:43.620
I really encourage you to stay for that one.

01:03:43.619 --> 01:03:48.119
Also if you have any questions, if you-- about the
library or anything else we've shown you this week,

01:03:48.119 --> 01:03:55.139
we'll be down in the IT lab starting at noon and
we'll be happy to answer any of your questions.

01:03:55.139 --> 01:04:00.000
There were a lot of-- there are already a lot of
support resources out there for your deployments,

01:04:00.000 --> 01:04:06.619
so I'm going to leave this slide up and make sure you guys
can get the different URLs for what you're interested in.

01:04:06.619 --> 01:04:10.889
And there are really a lot of resources out there
already, and I really encourage you to take a look

01:04:10.889 --> 01:04:12.639
at the different K-based articles out there.