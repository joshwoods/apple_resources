WEBVTT

00:00:12.779 --> 00:00:17.079
>> My name is Payam Mirrashidi and
I'm an engineer on the iTunes store.

00:00:17.079 --> 00:00:22.179
Today I'm going to talk about an exciting
new API that allows you to do purchases

00:00:22.179 --> 00:00:24.239
in your applications, In App Purchase on iPhone.

00:00:24.239 --> 00:00:26.029
Let's start with an overview.

00:00:26.030 --> 00:00:34.490
I'm going to start by telling you what In App Purchase
is and what it isn't, what you need to do to implement

00:00:34.490 --> 00:00:40.170
In App Purchases in your applications, and
finally I'm going to have a small section

00:00:40.170 --> 00:00:43.359
on some financial details that
you're going to be interested in.

00:00:43.359 --> 00:00:45.780
So let's get started.

00:00:45.780 --> 00:00:51.480
What is In App Purchase?

00:00:51.479 --> 00:00:59.500
Store Kit framework is an In App payment engine
for doing purchases in your applications.

00:00:59.500 --> 00:01:03.289
So you need iPhone OS 3.0.

00:01:03.289 --> 00:01:12.459
It's for paid apps only and it allows you to do, it allows
you expanded functionality in your shipping applications.

00:01:12.459 --> 00:01:18.579
You can extend features that you ship with
the applications, that you compiled in,

00:01:18.579 --> 00:01:22.450
and sell those features to your customers.

00:01:22.450 --> 00:01:34.350
Or you can extend your application by accessing
features, content, services, stored up in the cloud.

00:01:34.349 --> 00:01:39.979
Store Kit presents your user, your
customers with the same App Store experience

00:01:39.980 --> 00:01:43.689
that they experienced for purchasing your application.

00:01:43.689 --> 00:01:50.530
It confirms their identity, collects payment,
sends them the same iTunes store receipt

00:01:50.530 --> 00:01:53.609
that they've already received when they bought your app.

00:01:53.609 --> 00:01:58.810
For you, you'll see the transactions
in your iTunes Connect reports.

00:01:58.810 --> 00:02:01.570
We'll talk about that later.

00:02:01.569 --> 00:02:04.479
So what are you going to sell?

00:02:04.480 --> 00:02:08.219
Store Kit doesn't define a business model for you.

00:02:08.219 --> 00:02:13.359
In fact, it supports a large number
of business models out of the box.

00:02:13.360 --> 00:02:20.940
You can sell content, you can sell functionality,
you've got a couple game levels in your app

00:02:20.939 --> 00:02:22.819
that you shipped but you're going to charge for those.

00:02:22.819 --> 00:02:24.930
You can sell access to services.

00:02:24.930 --> 00:02:27.629
You can also sell access to subscriptions.

00:02:27.629 --> 00:02:31.069
So let's go through each of these
and talk about what that means.

00:02:31.069 --> 00:02:39.259
Well there are some rules for using
Store Kit in an app purchase.

00:02:39.259 --> 00:02:42.129
Digital items only are supported.

00:02:42.129 --> 00:02:44.909
You can't sell physical goods or services.

00:02:50.509 --> 00:02:59.579
In addition, everything that you sell using the Store
Kit API whether it's content or services, subscriptions,

00:02:59.580 --> 00:03:05.750
all of those goods must be delivered
to the app from which it was purchased.

00:03:05.750 --> 00:03:15.629
In addition, you're required to provide whatever
you sold to all of a customer's devices.

00:03:15.629 --> 00:03:22.919
So a given account, they have 3 devices,
what you sell must be available on all 3.

00:03:22.919 --> 00:03:24.959
Let's go though some examples.

00:03:24.960 --> 00:03:31.480
Digital books, those are supported, but real books are not.

00:03:31.479 --> 00:03:36.479
Real books cannot be delivered to the
app from which they were purchased.

00:03:36.479 --> 00:03:43.039
If you've got a poker game and someone runs out of chips and
they want to keep playing, you can sell some poker chips.

00:03:43.039 --> 00:03:49.849
But what you can't do, is if you have a blackjack game,
you can't transfer those In App Purchases between apps.

00:03:49.849 --> 00:03:53.689
In App Purchases must be delivered to
the app from which they were purchased.

00:03:53.689 --> 00:04:00.439
So you can have some functionality that you ship
with your app and you're going to sell the customer

00:04:00.439 --> 00:04:03.340
that functionality to open it up for them, that's okay.

00:04:03.340 --> 00:04:10.610
But any kind of intermediate currency for
trading for virtual goods, it's not supported.

00:04:10.610 --> 00:04:13.570
It's not passed in functionality.

00:04:13.569 --> 00:04:21.969
The example I just gave is you've got a game, and
let's say you've got 10 levels that you've built.

00:04:21.970 --> 00:04:27.450
When a customer buys your app, they get access to 8 and
you're going to charge a small fee for those additional 2.

00:04:27.449 --> 00:04:29.659
That's fine, maybe some bonus content.

00:04:29.660 --> 00:04:38.170
You can imagine in a document, an app where to use it out
of the box, you don't really need the ability to save,

00:04:38.170 --> 00:04:41.730
but you want to charge a customer to add that functionality.

00:04:41.730 --> 00:04:42.850
That's supported.

00:04:42.850 --> 00:04:50.689
You can imagine a flight management application
where it can handle a single itinerary out of the box

00:04:50.689 --> 00:04:54.430
when someone downloads your application,
but you want to charge

00:04:54.430 --> 00:04:57.970
for managing additional itineraries, more of a pro feature.

00:04:57.970 --> 00:05:00.260
That's supported.

00:05:03.670 --> 00:05:05.670
Some service examples.

00:05:05.670 --> 00:05:09.629
You've got your iPhone, take a picture of a business card,

00:05:09.629 --> 00:05:14.860
have it sent up to the cloud, send
it back down, OCR with a V-Card.

00:05:14.860 --> 00:05:18.420
That's something that, that is a digital good
that can be delivered to your application.

00:05:18.420 --> 00:05:23.009
Same thing with voice transcription.

00:05:23.009 --> 00:05:26.469
You've got an audio file, we send it up
to the cloud, you get a transcript back.

00:05:26.470 --> 00:05:29.030
That's a supported feature.

00:05:29.029 --> 00:05:30.349
Same with voice over IP.

00:05:30.350 --> 00:05:32.090
Telephone service.

00:05:32.089 --> 00:05:38.509
But plumbing repairs, courier delivery, web
services, design, those are not supported.

00:05:38.509 --> 00:05:43.089
Those are not digital goods that
can be delivered to your app.

00:05:43.089 --> 00:05:44.369
Stop by subscriptions real quick.

00:05:44.370 --> 00:05:47.750
The subscriptions cause a little
bit of extra work on your part

00:05:47.750 --> 00:05:51.870
because Store Kit doesn't define a business model for you.

00:05:51.870 --> 00:05:54.310
Store Kit doesn't have a notion of a duration.

00:05:54.310 --> 00:05:57.009
It doesn't do renewal billing.

00:05:57.009 --> 00:06:02.610
These are features you'll have to implement yourself
if you want to support subscriptions in your app.

00:06:02.610 --> 00:06:09.910
You can, but you can support a monthly periodical,
daily comic strip or access to financial data.

00:06:09.910 --> 00:06:16.560
These are all features that you can sell, they
are services that you can sell using Store Kit.

00:06:16.560 --> 00:06:25.120
Now for a good user experience you want to make
sure your renewal billing cycle is something

00:06:25.120 --> 00:06:27.490
where you're not nagging the user constantly.

00:06:27.490 --> 00:06:28.620
So that's something you have to decide.

00:06:28.620 --> 00:06:31.329
Store Kit doesn't impose that on you.

00:06:31.329 --> 00:06:38.129
Some examples of what isn't going to be supported is, you
know, your local video store membership or gym renewal.

00:06:40.410 --> 00:06:41.950
How are items delivered?

00:06:41.949 --> 00:06:51.459
Well built-in items are those items that you built into
your app, maybe there's some information on a key list,

00:06:51.459 --> 00:06:56.539
maybe there's some code for an extra level,
you know in that multiple itinerary example.

00:06:56.540 --> 00:06:58.240
You ship with that.

00:06:58.240 --> 00:07:03.009
And when an In App Purchase goes
through, you unlock that feature.

00:07:03.009 --> 00:07:04.310
There's nothing else that needs to be done.

00:07:04.310 --> 00:07:11.810
All of the code, all of the content, you ship
with your app, you uploaded it to iTunes Connect.

00:07:11.810 --> 00:07:16.689
There's also server-delivered items for remote services.

00:07:16.689 --> 00:07:26.160
These are items, content, streaming services,
media, that you didn't ship with your app.

00:07:26.160 --> 00:07:27.330
These are remotely delivered.

00:07:27.329 --> 00:07:28.529
This is also supported.

00:07:28.529 --> 00:07:32.769
In fact, some applications may
support a combination of both.

00:07:32.769 --> 00:07:39.969
It's up to you, Store Kit doesn't
impose a business model on you.

00:07:39.970 --> 00:07:44.320
It's up to you to define what you're going
to sell, how you're going to sell it.

00:07:44.319 --> 00:07:45.439
All right let's talk about code.

00:07:45.439 --> 00:07:49.410
How are you going to do this?

00:07:49.410 --> 00:07:54.590
Well there are three steps to implementing
In App Purchase using Store Kit.

00:07:54.589 --> 00:07:57.399
The first thing you've got to do is
figure out what you're going to sell.

00:07:57.399 --> 00:08:03.269
Once you've figure that out, you define your metadata
of your products, and you upload it to iTunes Connect.

00:08:03.269 --> 00:08:06.669
Then you've got to write some code.

00:08:06.670 --> 00:08:09.259
We'll go through that in great detail.

00:08:09.259 --> 00:08:14.519
And finally, we give you an environment
called Sandbox to test it in.

00:08:14.519 --> 00:08:16.699
We'll talk about that as well.

00:08:16.699 --> 00:08:19.009
So let's get started.

00:08:19.009 --> 00:08:21.980
Defining the metadata for the products
that you want to sell.

00:08:21.980 --> 00:08:24.509
The first thing you've got to do is create an item list.

00:08:24.509 --> 00:08:26.430
What are you going to sell?

00:08:26.430 --> 00:08:29.980
Well everything you're going to sell needs
to have a name, it's got to be localizable,

00:08:29.980 --> 00:08:35.230
it needs to have a description,
it needs to have a price tier.

00:08:35.230 --> 00:08:41.930
Price tier is the same price tiers you're
already using for your applications.

00:08:41.929 --> 00:08:43.250
You already know what this is.

00:08:43.250 --> 00:08:46.179
99 cents and so on.

00:08:46.179 --> 00:08:50.109
And finally, you need to pick a Product ID.

00:08:50.110 --> 00:08:57.230
Product ID is the unique identifier
for each product you wish to sell.

00:08:57.230 --> 00:09:04.379
In this example, we've used reverse DNS to make sure
it's easy to make it unique across all the products.

00:09:04.379 --> 00:09:10.809
So once you've got your product list, you
need to upload this to iTunes Connect.

00:09:10.809 --> 00:09:17.919
Go to Manage Your Applications, you should find you
app, click on Manage In App Purchases and Create New.

00:09:17.919 --> 00:09:22.250
Let's get started with what you need to enter.

00:09:22.250 --> 00:09:23.779
Reference Name.

00:09:23.779 --> 00:09:30.769
Reference Name is the name that you give the
product internally within your organization.

00:09:30.769 --> 00:09:34.730
Most people will have this be in their own language.

00:09:34.730 --> 00:09:40.090
So a French developer will probably be in French,
Japanese developer will have it in Japanese.

00:09:40.090 --> 00:09:42.509
This is never exposed to the user.

00:09:42.509 --> 00:09:51.019
Your customer will never see this either on a receipt,
in their purchase history, or in your application.

00:09:51.019 --> 00:09:52.750
This is your name for the product.

00:09:52.750 --> 00:09:55.200
And there's Product ID.

00:09:55.200 --> 00:10:04.580
Product ID is a sequence of U2F8 letters and
numbers that uniquely identifies the product.

00:10:04.580 --> 00:10:10.490
It's important that when you create a
new product, that you pick a good name,

00:10:10.490 --> 00:10:17.009
and that's why we recommended a reverse DNS example before,
because once you enter it in here, you can't change it.

00:10:17.009 --> 00:10:18.509
So pick your Product ID wisely.

00:10:18.509 --> 00:10:20.980
Then you've got to pick the Type.

00:10:20.980 --> 00:10:23.279
Let's talk about that real quick.

00:10:23.279 --> 00:10:27.360
There are 3 types of In App Purchases.

00:10:27.360 --> 00:10:31.230
Consumables, Non-Consumables, and Subscriptions.

00:10:31.230 --> 00:10:35.350
Let's talk about these and what they mean.

00:10:35.350 --> 00:10:39.600
Non-Consumables, that's the default.

00:10:39.600 --> 00:10:46.830
Non-consumables are products with
built-in support in Store Kit.

00:10:46.830 --> 00:10:52.550
When a customer buys a Non-consumable one device,
they're automatically, with no additional work by you,

00:10:52.549 --> 00:10:56.329
going to be able to re-download it on another device.

00:10:56.330 --> 00:11:06.330
The same way that today when a customer buys your app on one
device and they put their credentials on another, you know,

00:11:06.330 --> 00:11:09.220
an iPod Touch, they get it for free on the other one.

00:11:09.220 --> 00:11:15.379
If you mark your items as Non-consumable,
that comes for free.

00:11:15.379 --> 00:11:18.519
There's no additional work for you.

00:11:18.519 --> 00:11:22.299
Consumables are those devices, which can be used up.

00:11:22.299 --> 00:11:29.579
You can imagine a game where you'd
get ammunition and you can run out.

00:11:29.580 --> 00:11:35.800
And when you run out, maybe want to get a little boost,
you can charge your customer a little more for a boost.

00:11:35.799 --> 00:11:45.490
So in that example, if you go to another device with
the same App Store username and password and you log in,

00:11:45.490 --> 00:11:47.500
in that example you really shouldn't get it again.

00:11:47.500 --> 00:11:50.899
You pay for it once, you consume it, and you move on.

00:11:50.899 --> 00:11:56.110
So consumables can be purchased multiple times.

00:11:56.110 --> 00:12:05.480
And furthermore, it's not required that a consumable
item be made available across multiple devices.

00:12:05.480 --> 00:12:10.930
You may choose to do so because maybe a
consumable is something that's a period of time.

00:12:10.929 --> 00:12:13.019
Store Kit doesn't define that and the rules

00:12:13.019 --> 00:12:19.870
around consumables let you determine how
to, how the customer consumes that product.

00:12:19.870 --> 00:12:21.389
Finally, there's Subscriptions.

00:12:21.389 --> 00:12:28.659
They have all the same rules around how Store Kit interacts
with them, except that they're required to be shared

00:12:28.659 --> 00:12:32.919
with all, across all devices for a given customer.

00:12:32.919 --> 00:12:41.769
What that means is if I buy a subscription to Real
Time Stock Quotes and I have a phone and an iPod Touch,

00:12:41.769 --> 00:12:45.379
I should be able to access them on both devices.

00:12:45.379 --> 00:12:51.970
Once you pick the type, you pick the Price Tier and this is,

00:12:51.970 --> 00:12:58.430
same Price Tiers you guys are already familiar
with by creating apps in iTunes Connect.

00:12:58.429 --> 00:13:02.679
Now the Cleared for Sale flag is interesting
because this is one where you can't change it later

00:13:02.679 --> 00:13:05.870
and what it means is, whether this item is cleared for sale.

00:13:05.870 --> 00:13:11.409
When you first create a product you don't have to
mark this, you can come back later when you're ready

00:13:11.409 --> 00:13:15.059
to deliver your, that product to your customers.

00:13:15.059 --> 00:13:21.859
In fact, you can imagine a case where you ship your app, you
don't clear it for sale, and then after a period of time,

00:13:21.860 --> 00:13:24.500
let's say a month or two, you can come back and check this.

00:13:24.500 --> 00:13:36.539
And suddenly you've extended your application, the
product shows up and you don't have to push new code.

00:13:36.539 --> 00:13:44.620
Localizations is something that the product supports,
it's a list of languages, and to localize two things

00:13:44.620 --> 00:13:49.320
as I mentioned earlier, to localize a
name or a product and the description.

00:13:49.320 --> 00:13:54.650
Now this isn't required, but you've
got to have at least one localization.

00:13:54.649 --> 00:14:00.860
Name and the description.

00:14:01.970 --> 00:14:08.610
Finally, you need to upload a screenshot of an
image that represents what your In App Purchase is.

00:14:08.610 --> 00:14:12.029
And with that, you click Save Changes and you're done.

00:14:12.029 --> 00:14:14.990
If you ever want to come back and edit that information,

00:14:14.990 --> 00:14:18.120
maybe to Clear for Sale flag, come
back and click on the name.

00:14:18.120 --> 00:14:23.200
So that's how you define the metadata
and upload it to iTunes Connect.

00:14:23.200 --> 00:14:24.960
That's the first step.

00:14:24.960 --> 00:14:28.320
Now let's write some code.

00:14:28.320 --> 00:14:31.250
Building a purchase workflow into your application.

00:14:31.250 --> 00:14:32.700
There are 10 steps to doing that.

00:14:32.700 --> 00:14:38.730
It sounds like a lot but we've broken them down for
you and actually, it's pretty simple to add this API.

00:14:38.730 --> 00:14:44.060
I would say deceptively simple to add this
API its port Store Kit in your application.

00:14:44.059 --> 00:14:48.129
First thing you've got to do is, you
know, validate access to the App Store.

00:14:48.129 --> 00:14:51.039
It's the parental controls on it.

00:14:51.039 --> 00:14:59.199
Load your catalog, fetch the details localized for
the customer and their locale, present the items,

00:14:59.200 --> 00:15:04.500
you've got to build the store, ask for payment.

00:15:04.500 --> 00:15:06.320
Payment comes back, did it go through?

00:15:06.320 --> 00:15:12.810
Validate the transaction, that's an important
step, we'll talk about that as we go through this.

00:15:12.809 --> 00:15:17.569
If everything's fine, the payment went
through, the transaction was valid,

00:15:17.570 --> 00:15:22.260
you unlock the feature, give the access to your customer.

00:15:22.259 --> 00:15:25.779
Remember the purchase, which is come
back the next time they launch your app,

00:15:25.779 --> 00:15:29.129
they have access to it, and finally support restore.

00:15:29.129 --> 00:15:30.720
Let's go through each of these in detail.

00:15:30.720 --> 00:15:35.670
It's a long list, but there's not
much you have to do for each one.

00:15:35.669 --> 00:15:37.889
Validate App Store Access.

00:15:37.889 --> 00:15:49.549
iPhone OS 3.0 supports parental controls for a
number of features and the App Store is one of them.

00:15:49.549 --> 00:15:56.099
You've got kids like me who buy any app with a pretty
icon, you'll probably turn this off on your phone.

00:15:56.100 --> 00:16:03.550
And here, Installing Apps, this, not only does it control
installing apps, but it also controls App Store Purchase.

00:16:03.549 --> 00:16:10.009
In addition, you're company's configuration
profile may have prevented you from buying apps

00:16:10.009 --> 00:16:14.500
and it also would've prevented
you from doing In App Purchases.

00:16:14.500 --> 00:16:17.759
But it's really easy to figure out whether that is.

00:16:17.759 --> 00:16:21.039
Is it PaymentQueue class and you call
Can't Make Payments, has a boolean,

00:16:21.039 --> 00:16:23.319
yeah the App Store is accessible or no it isn't.

00:16:23.320 --> 00:16:27.260
I would actually call the steps 0
because without this, you can't,

00:16:27.259 --> 00:16:31.939
without a positive response from
this, you can't do In App Purchase.

00:16:31.940 --> 00:16:34.730
So once you've got that out of
the way, you need your catalog.

00:16:34.730 --> 00:16:37.860
For built-in features, for features
that you've shipped with your app,

00:16:37.860 --> 00:16:43.070
you've probably got a key list
somewhere that defines your catalog.

00:16:43.070 --> 00:16:50.060
For remote features, chances are you've got, you've
got to go talk to a server somewhere with a database

00:16:50.059 --> 00:16:52.439
of the products and download that information.

00:16:52.440 --> 00:16:59.660
If you do that, you probably want to store it, sock the key
list away somewhere so you don't have to repeatedly do that.

00:16:59.659 --> 00:17:10.369
Once you've done that, it's time to integrate
the Store Kit and talk to the App Store.

00:17:10.369 --> 00:17:14.699
The first thing you need to do is fetch the
details that are relevant for your customer,

00:17:14.700 --> 00:17:17.600
in their language, in their price, with their storefront.

00:17:17.599 --> 00:17:23.389
Over 70 countries supported by the App Store,
you want to make sure that the prices you offer,

00:17:23.390 --> 00:17:26.240
you present to your customers, are relevant to them.

00:17:26.240 --> 00:17:32.799
How you do that is you create a set that contains
all of the Product IDs that you wish to sell.

00:17:32.799 --> 00:17:44.649
And from that, you create a ProductsRequest
object initialized with that set.

00:17:44.650 --> 00:17:51.820
Now something I should note is that most of the
interaction you'll have with the App Store is asynchronous

00:17:51.819 --> 00:17:56.500
which means we make, you'll make a
lot of use of delegates and observers.

00:17:56.500 --> 00:18:01.680
Like in this example, which is
I've got a ProductsRequestDelegate.

00:18:01.680 --> 00:18:06.360
When I make a request for a set of
products, at some point in the future,

00:18:06.359 --> 00:18:12.139
Store Kit is going to call back and
let me know what the response was.

00:18:12.140 --> 00:18:17.800
So once I've built up my ProductsRequest
object, I got my delegate, I say Sstart.

00:18:17.799 --> 00:18:24.169
That's, Store Kit is now going to communicate with the App
Store, the App Store is going to look up those products,

00:18:24.170 --> 00:18:31.720
integrates with iTunes Connect, look up your,
what you've uploaded, it's going to respond back.

00:18:31.720 --> 00:18:39.509
And then you're going to get a notification
on your observer, excuse me, on your delegate.

00:18:39.509 --> 00:18:42.730
You're going to get the didReceiveResponse message.

00:18:42.730 --> 00:18:43.640
What does that contain?

00:18:43.640 --> 00:18:49.660
Well, it's got two fields, two
properties that are going to interest you.

00:18:49.660 --> 00:18:52.300
First, one is products.

00:18:52.299 --> 00:19:03.490
This is the list of items you requested and are available in
the App Store right now, in your customer's current locale.

00:19:03.490 --> 00:19:09.950
invalidProductIdentifiers are the list of
the Product IDs that we couldn't look up.

00:19:09.950 --> 00:19:12.690
The App Store, you know, went to
the database, couldn't find it.

00:19:12.690 --> 00:19:13.509
Now why could that be?

00:19:13.509 --> 00:19:17.750
Well you may have forgotten to enter in iTunes Connect.

00:19:17.750 --> 00:19:24.049
Maybe you mistyped the Product ID either
in your code, or in iTunes Connect.

00:19:24.049 --> 00:19:26.230
Could be that you forgot to mark it Cleared for Sale.

00:19:26.230 --> 00:19:28.740
You launched your app and not available.

00:19:28.740 --> 00:19:36.829
Or, and it's important to note that the App
Store is a distributed worldwide application.

00:19:36.829 --> 00:19:39.759
When you make a change in iTunes
Connect, it does take some time

00:19:39.759 --> 00:19:44.420
for that information to replicate across all the servers.

00:19:44.420 --> 00:19:48.610
So give it some time, when you make a change, when
you go mark Cleared for Sale, give it some time.

00:19:48.609 --> 00:19:54.299
It doesn't take that long, but it's not instantaneous.

00:19:54.299 --> 00:20:02.349
So with the products list, these are the products that
were available, right now in your customer's locale,

00:20:02.349 --> 00:20:08.119
you can get the localized title for your
product, the description and the price.

00:20:08.119 --> 00:20:13.500
If you remember back at the beginning when we created
the product, we had the name, description, and the tier.

00:20:13.500 --> 00:20:17.619
This translates directly into this API call.

00:20:17.619 --> 00:20:21.099
So with that, you can present the items for selection.

00:20:21.099 --> 00:20:26.439
This is code that you have to write.

00:20:26.440 --> 00:20:29.539
Store Kit doesn't provide a store user interface for you.

00:20:29.539 --> 00:20:35.500
Store Kit doesn't define how you're going to present it
for your user, whether it's going to be within the app,

00:20:35.500 --> 00:20:40.819
stand-alone store somewhere in your app, in
the Preferences, that's a decision up to you.

00:20:40.819 --> 00:20:46.490
Store Kit doesn't impose a business model on you.

00:20:46.490 --> 00:20:50.660
So once you built your store and you've
presented the item for selection,

00:20:50.660 --> 00:20:58.180
the customer's going to, you know,
click it, make a purchase.

00:20:58.180 --> 00:21:00.259
It's time to request payment.

00:21:00.259 --> 00:21:01.700
Request payment's pretty simple too.

00:21:01.700 --> 00:21:09.200
You create a payment object with
either the product that they selected,

00:21:09.200 --> 00:21:14.650
that was back from the PproductsResponse
object from the previous slide,

00:21:14.650 --> 00:21:17.150
or you can create a payment object
straight from the Product ID.

00:21:17.150 --> 00:21:19.050
Either will work.

00:21:19.049 --> 00:21:22.599
Now you have a Payment object.

00:21:24.410 --> 00:21:33.070
With that Payment object, you get a reference to
the PaymentQueue, and added TransactionObserver.

00:21:33.069 --> 00:21:39.109
Once again, TransactionObserver here is going
to give you a call back when the communication,

00:21:39.109 --> 00:21:42.699
Store Kit communication with the App Store succeeds.

00:21:42.700 --> 00:21:47.500
And then you call addPayment with that payment.

00:21:47.500 --> 00:21:50.339
You call PaymentQueue, you add a payment to the queue.

00:21:50.339 --> 00:21:58.740
What the PaymentQueue's going to do, is going to take a copy
of your payment object and create a payment transaction.

00:21:58.740 --> 00:22:06.849
That payment transaction represents what
you're trying to sell to the customer.

00:22:06.849 --> 00:22:15.429
Store Kit then communicates with the App
Store and presents a dialogue to the user.

00:22:15.430 --> 00:22:18.990
The customer then decides, is going
to get to decide synchronously,

00:22:18.990 --> 00:22:22.170
interactively, do they want to make this purchase?

00:22:22.170 --> 00:22:25.940
Or do they decline this purchase?

00:22:25.940 --> 00:22:30.529
That's a dialogue that they get right there.

00:22:30.529 --> 00:22:32.750
Now if they haven't logged in, they're going to have

00:22:32.750 --> 00:22:36.869
to present their user credentials right
then, their App Store user credentials.

00:22:36.869 --> 00:22:42.459
Once they make a decision, control is
passed right back to your application

00:22:42.460 --> 00:22:52.920
and your TransactionObserver's
updatedTransactions method is going to be called.

00:22:52.920 --> 00:22:54.529
So how does that work?

00:22:54.529 --> 00:23:00.629
For each transaction in the queue,
you're going to go through

00:23:00.630 --> 00:23:03.230
and you can look at the state of all those transactions.

00:23:03.230 --> 00:23:06.769
The first one's Purchasing.

00:23:06.769 --> 00:23:12.680
You can imagine a situation where a customer's on a
train, they're playing with your app, they click by,

00:23:12.680 --> 00:23:16.110
they're excited, and they go into a tunnel.

00:23:16.109 --> 00:23:21.689
So you added the payment to the PaymentQueue, but
now Store Kit can't go connect to the App Store.

00:23:21.690 --> 00:23:23.430
Those transactions are going be state Purchasing.

00:23:23.430 --> 00:23:28.029
There could be a lot of different reasons why a
transaction is state Purchasing and all this means,

00:23:28.029 --> 00:23:33.829
is that it's currently in progress, it's not completed.

00:23:33.829 --> 00:23:35.740
At some point, it will get completed.

00:23:35.740 --> 00:23:40.000
Another state is Purchased.

00:23:40.000 --> 00:23:45.220
Purchased means that the customer, when
presented with a dialogue, they agreed,

00:23:45.220 --> 00:23:52.549
they entered their credentials affirmatively,
and payment on the App Store was collected.

00:23:52.549 --> 00:24:00.970
State Restored, this is how you're going to
be able to implement giving access to all

00:24:00.970 --> 00:24:05.269
of a customer's purchases across all of their devices.

00:24:05.269 --> 00:24:09.859
State Restored means when the customer was
presented with the dialogue to agree to the purchase,

00:24:09.859 --> 00:24:15.899
they entered their credentials, when they went to the App
Store the App Store decided that was a non-consumable,

00:24:15.900 --> 00:24:23.620
that the customer had purchased previously and so
is not going to charge the user for that purchase.

00:24:23.619 --> 00:24:31.319
That transaction to the user was free.

00:24:31.319 --> 00:24:35.889
And lastly is state Failed which is the
customer either declined their purchase,

00:24:35.890 --> 00:24:39.220
or they didn't enter their credentials in right.

00:24:43.849 --> 00:24:48.139
When you get a response, a Purchased or Restored,

00:24:48.140 --> 00:24:55.070
that's when you unlock the feature
that you're selling to your customer.

00:24:55.069 --> 00:24:56.779
Purchased or Restored.

00:24:56.779 --> 00:25:03.210
In both of those cases, the App Store has collected
payment if necessary, if it was a brand new purchase,

00:25:03.210 --> 00:25:07.950
and your customer has an expectation of receiving something.

00:25:07.950 --> 00:25:11.690
It could be a feature you unlocked, it
could be some content you're downloading,

00:25:11.690 --> 00:25:18.039
it could be access to a server, access to server content.

00:25:20.910 --> 00:25:29.019
Now it's very important for you to validate these purchases.

00:25:29.019 --> 00:25:37.430
Just because Store Kit responded hey this worked, how do you
know for sure that this is a transaction from the App Store?

00:25:37.430 --> 00:25:41.460
Well transactions contain a transactionReceipt.

00:25:41.460 --> 00:25:49.250
It's a cryptographic signed chunk of data that contains
some information that's going to be interesting to you.

00:25:49.250 --> 00:25:54.849
It's signed by Apple, it's going to contain
the Product ID of what the customer bought,

00:25:54.849 --> 00:25:59.079
it's going to contain your unique ID for your application,

00:25:59.079 --> 00:26:04.429
it's going to contain when the transaction
happened, a unique transaction identifier.

00:26:04.430 --> 00:26:16.580
And most importantly, you can take this transaction receipt,
send it to Apple via a web service, and have Apple validate

00:26:16.579 --> 00:26:21.859
by the App Store, the App Store validates it, this
is a transaction that originated in the App Store,

00:26:21.859 --> 00:26:24.490
it's a record in the database for that transaction.

00:26:24.490 --> 00:26:26.660
Let's go through that in detail.

00:26:26.660 --> 00:26:34.890
So I've got my app, I requested payment from the App
Store, payment went through and I got a transactionReceipt.

00:26:34.890 --> 00:26:36.580
What do I do with it?

00:26:36.579 --> 00:26:44.869
Well, what I'm going to do is post it
to my server, because I trust my server.

00:26:44.869 --> 00:26:47.809
A server's in my co lo, it's under my direct control.

00:26:47.809 --> 00:26:52.029
So I'm going to take that transaction
receipt, post it to my server,

00:26:52.029 --> 00:26:57.799
and then my server is going to post it to the App Store.

00:26:57.799 --> 00:27:05.339
My server, your server, may choose to store
that transaction receipt in a database somewhere

00:27:05.339 --> 00:27:09.079
at some kind of logging it or audit facility.

00:27:10.170 --> 00:27:14.340
Here's the URL for the service to verify receipt,

00:27:14.339 --> 00:27:18.789
buy.itunes.apple.com/verifyReceipt,
it's a really simple service.

00:27:18.789 --> 00:27:24.289
It's just a JavaScript object notation post content.

00:27:24.289 --> 00:27:34.259
So you create adjacent object with a receipt-data
field, and put in there the transaction receipt data

00:27:34.259 --> 00:27:38.819
that you received back from the Store Kit
transaction observer transaction object.

00:27:38.819 --> 00:27:47.439
You take that, you post it to your server,
and have your server post it to the App Store.

00:27:47.440 --> 00:27:52.090
The App Store now is going to take that transaction
receipt, it's going to verify the signature,

00:27:52.089 --> 00:27:58.109
it's going to go to the database, make sure that this is an
authentic transaction, make sure that payment was required,

00:27:58.109 --> 00:28:02.740
it showed up, and it's going to respond back with verified.

00:28:02.740 --> 00:28:05.880
Well, status 0 means verified.

00:28:05.880 --> 00:28:09.370
Any other status means it wasn't verified.

00:28:09.369 --> 00:28:19.029
Now your server, which you trust, can
store away that this is a transaction

00:28:19.029 --> 00:28:21.670
that legitimately occurred on the App Store.

00:28:21.670 --> 00:28:27.100
And your server can come back to your
app and say hey, this transaction's good.

00:28:27.099 --> 00:28:32.279
Go and unlock the feature, go and unlock the product,
go and unlock the service that the customer just bought.

00:28:32.279 --> 00:28:43.049
Let's talk about unlocking purchases real quick
because your customers may quit at any time.

00:28:43.049 --> 00:28:49.619
Your customers may be on a train and they got their
App Store purchase, they got the finished transaction,

00:28:49.619 --> 00:28:54.229
everything happened, but that they went in a
tunnel and suddenly the transaction, you know,

00:28:54.230 --> 00:28:56.170
they don't have access to the internet anymore.

00:28:56.170 --> 00:28:57.519
So what happens then?

00:28:57.519 --> 00:29:06.029
Well the PaymentQueue is persistent and not only that,
transactions within the PaymentQueue are persistent.

00:29:06.029 --> 00:29:13.769
This means that it's really up to you to determine the
policy about when to remove things from the PaymentQueue.

00:29:13.769 --> 00:29:19.720
You should only do it when you've
confirmed access to the product, or service,

00:29:19.720 --> 00:29:22.589
or subscription that your customer just purchased.

00:29:22.589 --> 00:29:27.259
If you have to go up to the cloud and
say hey this purchase happened, you know,

00:29:27.259 --> 00:29:36.900
maybe its part of your transaction receipt process, store
that this customer now has access to this subscription.

00:29:36.900 --> 00:29:42.009
You need to do that before removing
the transaction from the queue.

00:29:42.009 --> 00:29:46.849
You remove transactions from the queue by calling
the finishTransaction API with the transaction.

00:29:46.849 --> 00:29:58.469
This is critical because this means that any kind of
network issues, battery issues, the battery ran out

00:29:58.470 --> 00:30:04.670
and you couldn't go remove the transaction,
all of this is dealt with because

00:30:04.670 --> 00:30:07.279
of this persistent nature of these queues.

00:30:07.279 --> 00:30:14.420
But you need to confirm access before removing
the transactions from the queue not after.

00:30:14.420 --> 00:30:19.500
So once you've made the transaction, you
know, you've got to remember the purchase.

00:30:19.500 --> 00:30:26.319
The next time the user, your customer launches your
app, they shouldn't have to pay for it again so,

00:30:26.319 --> 00:30:30.569
you know, put a boolean in a key list somewhere.

00:30:30.569 --> 00:30:32.220
Support Item Restore.

00:30:32.220 --> 00:30:39.799
Well, as I mentioned previously, you must
make your customer's purchases available

00:30:39.799 --> 00:30:44.700
on all of their devices for their account.

00:30:44.700 --> 00:30:50.559
Just like apps today, where a customer
buys it on one device and they go

00:30:50.559 --> 00:30:54.049
to another device, they're not going to get charged.

00:30:54.049 --> 00:30:57.269
In App Purchases are going to work the same way.

00:30:57.269 --> 00:31:02.029
If they wipe their phone, they
re-download your app for free,

00:31:02.029 --> 00:31:04.879
they must have access to the products
they purchased from you.

00:31:04.880 --> 00:31:08.550
How's that going to work?

00:31:08.549 --> 00:31:19.009
If we've got an iPhone over here and I buy an app,
today the App Store makes it easy and all I've got

00:31:19.009 --> 00:31:21.759
to do is get the App over on my iPod Touch.

00:31:21.759 --> 00:31:25.220
I can go buy it, and re-download for free.

00:31:25.220 --> 00:31:28.120
Items need to behave the same way.

00:31:28.119 --> 00:31:37.989
An item bought over here on the iPhone, needs to
be made available over here on the iPod Touch.

00:31:37.990 --> 00:31:40.130
Same for Restores.

00:31:43.109 --> 00:31:53.509
When you restore a device, when a customer restores a device
they must have access to your application, to your product.

00:31:53.509 --> 00:31:54.829
So how's that going to work?

00:31:54.829 --> 00:32:09.299
Well, you could just depend on the Restored state
which is customer, if they buy the same product twice,

00:32:09.299 --> 00:32:10.970
they're not going to be charged a second time.

00:32:10.970 --> 00:32:12.600
You could just depend on that.

00:32:12.599 --> 00:32:17.149
But you can do better, you can create a
much better user experience with Store Kit.

00:32:17.150 --> 00:32:24.570
Store Kit allows you to have, create functionality
where you can provide user interface for your customer,

00:32:24.569 --> 00:32:30.049
which is give me everything I bought on one button.

00:32:30.049 --> 00:32:37.680
The API for that, it's on PaymentQueue,
and its restoreCompletedTransactions.

00:32:37.680 --> 00:32:46.860
restoreCompletedTransactions is going to communicate with
the App Store and Store Kit is going to have available,

00:32:46.859 --> 00:32:57.719
in that device's transaction queue, all of the
transactions that the user has purchased on that account.

00:32:57.720 --> 00:33:04.579
This is why it's so easy for you to provide
products across the line of devices.

00:33:04.579 --> 00:33:09.000
If the user has 3 devices, they just go click the
Restore Purchases button on all 3 of those devices.

00:33:09.000 --> 00:33:17.690
If I have access to a subscription, I just
go click on that and it should show up.

00:33:17.690 --> 00:33:18.820
Pretty simple.

00:33:18.819 --> 00:33:23.279
Of course, once you call a restoreCompletedTransactions
on the PaymentQueue,

00:33:23.279 --> 00:33:26.750
you're going to get back transactions in the StateRestored.

00:33:26.750 --> 00:33:31.279
This means that the customer was
not charged for those products.

00:33:31.279 --> 00:33:38.819
So those are the 10 steps for integrating with Store Kit.

00:33:38.819 --> 00:33:40.960
There wasn't a lot of code there.

00:33:40.960 --> 00:33:43.279
It's deceptively simple.

00:33:43.279 --> 00:33:49.180
It is easy to integrate with the App
Store and integrate into your application.

00:33:49.180 --> 00:33:54.690
You've got a couple classes, a couple delegate
methods, Store Kit takes care of the rest.

00:33:54.690 --> 00:33:57.470
Store Kit isn't imposing a business model on you.

00:33:57.470 --> 00:34:02.890
The reason this code is so short is because
all the logic, all the business model is code

00:34:02.890 --> 00:34:05.610
that you have to write in your application.

00:34:08.289 --> 00:34:14.550
Now you built your app, it's time to test.

00:34:14.550 --> 00:34:15.250
How do you do that?

00:34:15.250 --> 00:34:18.750
Well, we've got the Sandbox.

00:34:18.750 --> 00:34:24.980
Sandbox is for testing In App Purchase
only and it's got a few restrictions.

00:34:24.980 --> 00:34:30.869
One of them is you can only use it from a device.

00:34:30.869 --> 00:34:38.509
It's important to note that Sandbox isn't a mode
on your phone, there isn't some button hidden away

00:34:38.510 --> 00:34:41.950
in some preference somewhere that says turn on Sandbox.

00:34:41.949 --> 00:34:49.639
The way Sandbox is enabled is to transfer
an application onto a device via Xcode.

00:34:49.639 --> 00:34:58.039
Only applications that were transferred to
a device by Xcode can access the Sandbox.

00:34:58.039 --> 00:35:05.460
If you have an application downloaded from
the App Store, that cannot access the Sandbox.

00:35:05.460 --> 00:35:10.179
Invoices aren't sent from the Sandbox either.

00:35:10.179 --> 00:35:16.079
Sandbox is there for you to test
your Store Kit API implementation.

00:35:21.570 --> 00:35:26.080
And you need a separate Apple ID to test in the Sandbox.

00:35:26.079 --> 00:35:29.759
Your production account that you're
using to make your own app purchases

00:35:29.760 --> 00:35:33.740
or your tester's production account,
that's not going to work in the Sandbox.

00:35:33.739 --> 00:35:42.939
And furthermore, just like, in the real App
Store, accounts are tied to a specific country.

00:35:42.940 --> 00:35:48.300
You need to create an account for
each country you want to test in.

00:35:48.300 --> 00:35:53.170
Now you'll want to do that if you're localizing into a
number of languages to see what the currencies are like,

00:35:53.170 --> 00:35:57.369
that you set things up right, see what the
names are right, is it fitting into your app.

00:35:57.369 --> 00:36:02.630
So you'll want to create an account
for each country you want to test.

00:36:02.630 --> 00:36:07.920
And a Sandbox account can't be used
to test any other Store feature.

00:36:07.920 --> 00:36:15.170
Sandbox is there to text Store Kit API in your application.

00:36:15.170 --> 00:36:20.269
Furthermore if I make a stronger statement,
which is your application installed by Xcode.

00:36:20.269 --> 00:36:28.559
Now since these accounts are required and
there's a unique email address per account,

00:36:28.559 --> 00:36:30.799
the reason we need a unique email address.

00:36:30.800 --> 00:36:35.560
Well the reason we need an email
address is, if you forget the password

00:36:35.559 --> 00:36:38.570
to your account, we need a way to send it to you.

00:36:38.570 --> 00:36:42.300
And accounts need a unique email
address, we recommend using +

00:36:42.300 --> 00:36:50.120
It turns out a lot of mail servers ignore
everything between the + and the @ sign

00:36:50.119 --> 00:36:52.809
for determining which inbox to deliver the mail to.

00:36:52.809 --> 00:36:54.159
Mine does.

00:36:54.159 --> 00:37:02.019
So if I want to create a test account to test in
the USA versus creating a test account in the UK,

00:37:02.019 --> 00:37:08.750
I would do payam+usa@example.com or payam+uk@example.com.

00:37:08.750 --> 00:37:17.420
When I create these accounts, email sent to
payam+uk@example.com will be sent to payam@example.com.

00:37:17.420 --> 00:37:24.789
Then we can have one inbox receiving all of the messages.

00:37:24.789 --> 00:37:28.110
Now here is the most important thing,
if there's one thing you walk away

00:37:28.110 --> 00:37:31.769
from the presentation today, it
should be this point right here.

00:37:31.769 --> 00:37:40.199
Before you start testing in the Sandbox, go to the
Settings application, click on Store, and Sign Out.

00:37:40.199 --> 00:37:42.839
Let me repeat that.

00:37:42.840 --> 00:37:46.000
Before you start testing your application in the Sandbox,

00:37:46.000 --> 00:37:51.650
go to the Settings application, click
on Store, and click on Sign Out.

00:37:51.650 --> 00:38:02.400
The reason for this is, as I mentioned there is no mode for
Sandbox, there isn't a checkbox or anything in Settings.

00:38:02.400 --> 00:38:09.280
So if you logged in and you launch your app with
your production account logged in to your device,

00:38:09.280 --> 00:38:11.360
Store Kit is just going to use that account.

00:38:11.360 --> 00:38:15.019
You're not going to get a chance to
enter a different account's credentials.

00:38:15.019 --> 00:38:24.690
Now if you're not logged in and you launch your application,
Store Kit will pop up, the authentication dialogue

00:38:24.690 --> 00:38:27.099
and you'll get an opportunity to
enter your Sandbox credentials.

00:38:27.099 --> 00:38:29.519
So I'm going to repeat that one more time.

00:38:29.519 --> 00:38:38.869
Before you start testing, Sign Out,
and then launch your app to test.

00:38:38.869 --> 00:38:44.960
Creating users is pretty simple, you go to iTunes Connect,
Manage Users, In App Purchase Test User, Create New.

00:38:44.960 --> 00:38:52.840
You've got to enter this information, as I mentioned, the
information, the security information below is mainly there,

00:38:52.840 --> 00:38:59.079
it's only there so we can send
you a password if you forget it.

00:39:01.909 --> 00:39:04.369
Click Save.

00:39:04.369 --> 00:39:10.049
So that's how to test in the Sandbox.

00:39:10.050 --> 00:39:11.550
That's it.

00:39:11.550 --> 00:39:13.450
Pretty simple huh?

00:39:13.449 --> 00:39:18.369
Store Kit is a deceptively simple API to integrate with.

00:39:18.369 --> 00:39:26.150
Testing, writing the code, all those things,
you're going to be able to sell products

00:39:26.150 --> 00:39:29.940
in your store pretty quickly when
you integrate with Store Kit.

00:39:29.940 --> 00:39:32.300
Let's talk about financials real quickly.

00:39:32.300 --> 00:39:36.610
And it's quickly because well, there's not much to say.

00:39:36.610 --> 00:39:38.800
The rules are the same as applications.

00:39:38.800 --> 00:39:40.930
You already know all the rules.

00:39:40.929 --> 00:39:48.809
You get 70%, payment schedule is the same,
royalties are the same, reports are all the same.

00:39:48.809 --> 00:39:54.090
Well, they're not all the same,
we actually did add some fields.

00:39:54.090 --> 00:39:59.800
The vendor ID fields contains the Product
ID, remember that unique product identifier

00:39:59.800 --> 00:40:02.090
that we said all the way back in iTunes Connect?

00:40:02.090 --> 00:40:05.070
The vendor ID field contains the Product ID.

00:40:05.070 --> 00:40:11.640
And the parent identifier field contains
the Apple's unique identifier for your app.

00:40:11.639 --> 00:40:18.759
So with the vendor ID and the parent ID you can
determine which apps are selling which products.

00:40:18.760 --> 00:40:21.630
And that's it.

00:40:21.630 --> 00:40:28.329
If you have questions, if you don't have them now,
you can email Mark and he'll answer them for you.