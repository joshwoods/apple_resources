WEBVTT

00:00:12.550 --> 00:00:14.710
>> Well this is Improving Accessibility in Web Applications.

00:00:14.710 --> 00:00:20.380
My name is James Craig, I am an engineer in the
OS X server team on collaboration tools project.

00:00:20.379 --> 00:00:27.640
To begin with I want to talk about
what we're going to learn today.

00:00:28.809 --> 00:00:33.359
So the first half of the presentation will
be about universal design, what it is,

00:00:33.359 --> 00:00:39.420
and how you can use universal design techniques to improve
the accessibility and usability of all of your products,

00:00:39.420 --> 00:00:42.510
whether they are physical products or software products.

00:00:42.509 --> 00:00:46.729
And also by doing so you'll gain a lot of other
benefits including search engine optimization,

00:00:46.729 --> 00:00:49.449
so you can drive more traffic to your web applications.

00:00:49.450 --> 00:00:59.460
And then we'll finish with a demo of some specific keyboard
techniques for keyboard accessibility in web applications.

00:00:59.460 --> 00:01:08.640
And then the second half of the presentation is going to be
more about accessibility - certain disabilities of people

00:01:08.640 --> 00:01:16.049
that may use your website, assistive technologies that they
use as well, some common sense principles that you can think

00:01:16.049 --> 00:01:20.859
about when you're developing your
websites and web applications...

00:01:20.859 --> 00:01:25.579
and some specific techniques for making
those web applications accessible,

00:01:25.579 --> 00:01:31.069
especially new techniques using some new
emerging specifications from the W3C.

00:01:31.069 --> 00:01:36.069
But to begin with I want to talk about
what I mean by the word accessibility.

00:01:36.069 --> 00:01:42.629
Just by a show of hands, how many people here have what
they think is an understanding of the word accessibility?

00:01:42.629 --> 00:01:43.189
Most of you.

00:01:43.189 --> 00:01:48.620
So it's one of those terms like design where it means
something slightly different to everyone that hears it.

00:01:48.620 --> 00:01:54.310
So for the purposes of this presentation,
I'm going to be using it to talk

00:01:54.310 --> 00:01:57.519
about accessibility for people with disabilities...

00:01:57.519 --> 00:02:00.310
web accessibility or software accessibility
for people with disabilities.

00:02:00.310 --> 00:02:05.829
So that might include someone with a dexterity
impairment, so they may have a hand tremor and not be able

00:02:05.829 --> 00:02:13.030
to use a mouse in the same way as a non-disabled user, may
have a hearing impairment, may have a vision impairment

00:02:13.030 --> 00:02:17.979
and use some assistive technology such as
the screen reader; which speaks the contents

00:02:17.979 --> 00:02:20.500
of the screen to them so they can understand it.

00:02:20.500 --> 00:02:26.710
We'll talk about that a little bit more, but for now I
want to talk about the broader topic of universal design.

00:02:28.219 --> 00:02:34.139
What I mean by this is design that's so thoughtful
of that it works for everyone from the start,

00:02:34.139 --> 00:02:39.279
as opposed to something that needs to be
patched for the disabled as an afterthought.

00:02:39.280 --> 00:02:41.610
So you guys have all seen examples of this.

00:02:41.610 --> 00:02:48.590
Probably the most quintessential one is a curb
cut, like a wheelchair ramp on a sidewalk.

00:02:48.590 --> 00:02:50.640
They're required by law within the U.

00:02:50.639 --> 00:02:50.809
S.

00:02:50.810 --> 00:02:54.810
at least, by the Americans With Disabilities
Act, for people using wheelchairs.

00:02:54.810 --> 00:02:56.000
But if you think about it...

00:02:56.000 --> 00:03:02.610
people pushing baby strollers, people riding
bikes, delivery personnel pulling packages,

00:03:02.610 --> 00:03:05.310
you probably use them on the way to the airport.

00:03:05.310 --> 00:03:10.030
In fact in the U.K. they don't call these curb cuts or
wheelchair ramps, they actually call them 'pram' ramps.

00:03:10.030 --> 00:03:10.680
Pram is like U.

00:03:10.680 --> 00:03:10.860
K.

00:03:10.860 --> 00:03:12.330
slang for a baby carriage.

00:03:12.330 --> 00:03:16.350
So they've kind of completely removed this from
their minds from the concept of a disability,

00:03:16.349 --> 00:03:20.859
and it's just these are baby carriage
ramps but wheelchair users use them too.

00:03:20.860 --> 00:03:23.800
So it's a good design that works for everyone.

00:03:24.930 --> 00:03:29.920
Also caption broadcast content you're probably
familiar with, again required by law for people

00:03:29.919 --> 00:03:32.789
with hearing impairments, but think about who uses these.

00:03:32.789 --> 00:03:40.840
You've probably used it last time either at the gym or
maybe the airport on your way here to the conference.

00:03:40.840 --> 00:03:47.370
And you're starting to see some product design, or physical
products that take universal design into consideration.

00:03:47.370 --> 00:03:55.640
So this is the new iPod Shuffle that's the first, or
one of the first iPods that had a spoken interface,

00:03:55.639 --> 00:03:59.750
first one that had a completely spoken
interface, and it can now be used...

00:03:59.750 --> 00:04:04.729
you click a button on the headphone and
it speaks the track that's playing to you,

00:04:04.729 --> 00:04:08.310
or you click and hold to listen to the playlist.

00:04:08.310 --> 00:04:15.629
And it can be completely used by someone who is completely
blind, and it's probably the first iPod that could do

00:04:15.629 --> 00:04:23.939
that until the new release of the iPhone
VoiceOver this week, which I'm real excited about.

00:04:23.939 --> 00:04:30.930
You're also going to see some universal design trends in
graphic design, especially as it applies to web design.

00:04:30.930 --> 00:04:36.750
So this is the Flickr homepage, very well known site.

00:04:36.750 --> 00:04:42.629
A good example of the kind of web "2.0 trends".

00:04:42.629 --> 00:04:49.620
One of the graphic design trends that came about around
the time that the site launched was these large text

00:04:49.620 --> 00:04:53.180
and big buttons stuff that's easy to see for everyone,

00:04:53.180 --> 00:04:57.379
and whether or not they may have
low vision or vision impairment.

00:04:57.379 --> 00:05:01.350
Also these larger clickable areas, for
example the upload and organize section.

00:05:01.350 --> 00:05:07.510
It's a large target area so you can move your mouse to
it quickly and click on it before you really even think

00:05:07.509 --> 00:05:10.909
about it, also works better for
somebody that may have a hand tremor

00:05:10.910 --> 00:05:15.230
and has trouble getting to a small spot on the screen.

00:05:15.230 --> 00:05:19.790
So that's some graphic design techniques
for some product design stuff.

00:05:19.790 --> 00:05:27.210
Let's talk about some specific techniques for you
and your website; stuff that you can implement...

00:05:27.209 --> 00:05:29.659
today for that matter.

00:05:29.660 --> 00:05:34.020
In this section I'll be talking about
semantic markup, progressive enhancement,

00:05:34.019 --> 00:05:38.209
captions and transcriptions, and full keyboard access.

00:05:38.209 --> 00:05:45.599
Semantic markups - so by a show of hands, how
many of you consider yourselves web developers?

00:05:45.600 --> 00:05:52.260
A few. And how many of you are Cocoa developers
that have some web development experience?

00:05:52.259 --> 00:05:54.039
OK, so mostly web developers, that's good.

00:05:54.040 --> 00:05:59.340
So this is going to be very, very familiar to you, a
good base for universal design is this semantic markup.

00:05:59.339 --> 00:06:05.369
They've been talking about it on the standard
Eastern blogs for almost a decade now I guess.

00:06:05.370 --> 00:06:13.750
So first of all I want to show you...

00:06:13.750 --> 00:06:20.209
that you really can't see the difference between semantic
markup and non-semantic markup from a visual perspective.

00:06:20.209 --> 00:06:24.379
In other words which is which here, you can't really
tell because one could be using table based layout,

00:06:24.379 --> 00:06:28.240
one could be using CSS, one could be
using all inline styles, one could be...

00:06:28.240 --> 00:06:32.790
using only DIVs versus headings.

00:06:32.790 --> 00:06:38.540
So that the point of this is just to show you that
semantic markup doesn't get you anything visually,

00:06:38.540 --> 00:06:43.950
but you're going to get a lot of other
benefits when you start to use semantic markup.

00:06:46.709 --> 00:06:48.750
So here we've got a page...

00:06:48.750 --> 00:06:53.670
and the heading up at the top says All About Widgets.

00:06:53.670 --> 00:06:59.620
And so other users in the room, myself included, can
see that All About Widgets is bold and it's larger text

00:06:59.620 --> 00:07:06.550
than the surrounding text, and so we can infer from the
visual style that that is the main heading on the page.

00:07:06.550 --> 00:07:13.129
And the web developer has decided to use a
DIV to describe it, DIV is just a generic tag

00:07:13.129 --> 00:07:22.339
and actually puts the style right in there; which is fine
but it doesn't go as, it's not as useful as it could be.

00:07:22.339 --> 00:07:27.399
Instead they should just call it what it is -
describe it by the self describing semantic markup.

00:07:27.399 --> 00:07:33.109
So in this case the first level heading on the page, so
we're going to use a heading level one tag, which is an H1.

00:07:33.110 --> 00:07:40.580
And you're going to start to see a lot of benefits, so
from the developer's standpoint it minimizes your markup,

00:07:40.579 --> 00:07:46.069
it makes it easier to maintain
when you can style this H1 in CSS,

00:07:46.069 --> 00:07:50.230
and it gives you better selectors, more specific selectors.

00:07:50.230 --> 00:07:52.640
You get a lot of search engine benefits too.

00:07:52.639 --> 00:07:57.629
All search engine algorithms are
different, but it's widely known that text

00:07:57.629 --> 00:08:04.139
within heading tags actually gets a higher
priority in search engine optimization algorithms.

00:08:04.139 --> 00:08:09.769
And the reason is because if this page
is, really is actually all about widgets,

00:08:09.769 --> 00:08:15.839
then the widgets is a search term being in that
heading, it's at a higher probability that the rest

00:08:15.839 --> 00:08:18.639
of the page content is going to be about that as well.

00:08:18.639 --> 00:08:25.349
Sometimes spammers will try to fake that,
but we do a good job of weeding them out.

00:08:25.350 --> 00:08:32.670
In addition to the development
benefits and the search engine benefits,

00:08:32.669 --> 00:08:39.379
this is going to provide some nice user interface
for people that can't necessarily see the screen.

00:08:39.379 --> 00:08:42.799
So I mentioned a blind user might be using a
screen reader before, so instead of having...

00:08:42.799 --> 00:08:46.899
instead of just hearing the text all about widgets,

00:08:46.899 --> 00:08:50.730
now because you've used semantic markup they
can hear something a little bit more appropriate

00:08:50.730 --> 00:08:54.389
such as heading level 1, All About Widgets.

00:08:55.980 --> 00:08:58.870
I also want to talk about progressive enhancement.

00:08:58.870 --> 00:09:06.090
The idea behind progressive enhancement is
that you make something work for everyone,

00:09:06.090 --> 00:09:13.879
and you make it work even better, or you may it work best
for people using the latest technology or modern technology.

00:09:13.879 --> 00:09:16.820
So a good example of progressive enhancement is CSS.

00:09:16.820 --> 00:09:25.750
If we start with our baseline technique of using semantic
markup, then all web users can actually see that content,

00:09:25.750 --> 00:09:34.580
even users that are using a command line browser like
Links on Unix; almost nobody has used in 15 years.

00:09:34.580 --> 00:09:40.389
And so then we style it with CSS and people using
modern browsers can actually see your presentation style

00:09:40.389 --> 00:09:43.330
that you've set up for them.

00:09:43.330 --> 00:09:48.730
Another technology that's more commonly associated
with progressive enhancement is JavaScript,

00:09:48.730 --> 00:09:51.279
and we could probably spend a whole
session talking about that,

00:09:51.279 --> 00:09:54.000
but I just want to give you one
example of progressive enhancement.

00:09:54.000 --> 00:09:56.799
So this is the Google homepage...

00:09:56.799 --> 00:09:59.589
I'm sure you're all very familiar with this one.

00:09:59.590 --> 00:10:06.690
It's visually at least; it's been relatively
unchanged for the past decade or so.

00:10:06.690 --> 00:10:11.090
It still has the Google logo in it, still
has the search box, and the search button.

00:10:11.090 --> 00:10:15.970
So you type your search term in and you hit enter,
or you type your search term in, click the button.

00:10:15.970 --> 00:10:19.990
You go to another page to present with
a list of results for that search term.

00:10:19.990 --> 00:10:26.350
A couple of years ago they added a little bit of
JavaScript that goes off, and kind of in the background

00:10:26.350 --> 00:10:31.330
as you're searching, does that search for you and
brings you back a list of potential search terms,

00:10:31.330 --> 00:10:34.509
common search terms that you might be searching for.

00:10:34.509 --> 00:10:38.679
And so this is a good way of still
providing that baseline functionality.

00:10:38.679 --> 00:10:44.739
It still works like it always has, but now it works
a little bit better for users that have JavaScript,

00:10:44.740 --> 00:10:48.120
which at this point is almost all web surfers.

00:10:52.279 --> 00:10:58.480
Now captions and transcriptions are really
a topic we could spend an entire session on.

00:10:58.480 --> 00:11:03.450
I'm going to talk about these just briefly, but captions if
you're not familiar, they're just like broadcast captions,

00:11:03.450 --> 00:11:10.190
or at least with web content they're just like broadcast
captions with synced text that goes along with a video file.

00:11:10.190 --> 00:11:16.500
Transcriptions are usually a plain text
document that goes along with an audio file

00:11:16.500 --> 00:11:19.889
such as a plain text transcription of a speech.

00:11:19.889 --> 00:11:30.949
This is a screenshot of some caption content on the
Apple.com site - one of the iPod marketing videos...

00:11:30.950 --> 00:11:32.780
commercial, excuse me.

00:11:32.779 --> 00:11:39.529
And you get a lot of benefits from
captions and transcriptions as well.

00:11:39.529 --> 00:11:44.439
The main one that you guys are probably
going to notice quickly is the...

00:11:44.440 --> 00:11:50.650
is that now if you actually have that text
data associated with these multimedia files,

00:11:50.649 --> 00:11:54.860
search engines recently have started
indexing all of that content.

00:11:54.860 --> 00:12:00.850
So if you have an audio file and you've got a plain
text copy of it, then the search engine can find

00:12:00.850 --> 00:12:03.940
that plain text webpage, which links to the audio file.

00:12:03.940 --> 00:12:06.130
You can find what it is you're looking for.

00:12:06.129 --> 00:12:10.929
Same thing with captions in video, in fact a lot of caption,

00:12:10.929 --> 00:12:16.389
or a lot of video services now have actually started
letting you link to a particular spot in the video.

00:12:16.389 --> 00:12:21.049
So the search engines can index that content
and then you can link directly to the spot

00:12:21.049 --> 00:12:24.409
in the video where that search term appears.

00:12:25.940 --> 00:12:31.520
Kevin earlier said that CNET TV had captions with
videos, and its Google traffic went up 30 percent.

00:12:31.519 --> 00:12:35.319
That's a huge number, I mean if
you think about it CNET TV had...

00:12:35.320 --> 00:12:38.500
almost all of their content was videos online.

00:12:38.500 --> 00:12:43.990
So now that they've captioned it, they get this huge boost
in traffic from users doing search terms and clicking

00:12:43.990 --> 00:12:46.350
on a link in Google that brings them to their CNET TV site.

00:12:46.350 --> 00:12:57.210
So this is something that can translate into more traffic,
more users, and potentially more money for you guys as well.

00:12:57.210 --> 00:13:02.570
Now I wanted to talk a little bit more
in depth about full keyboard access.

00:13:02.570 --> 00:13:05.930
It's a topic that...

00:13:07.009 --> 00:13:13.279
seems pretty straightforward, but a lot of people make
very common mistakes, including well known websites,

00:13:13.279 --> 00:13:20.120
well known quality developers, who either don't think about
stuff or it kind of gets pushed to the back of the project.

00:13:20.120 --> 00:13:24.779
And so there's some common mistakes that
we'll talk about, and how to avoid them.

00:13:24.779 --> 00:13:29.250
I want to talk a little bit about tab order in
browsers, what it is and how you can control it

00:13:29.250 --> 00:13:33.950
to make your websites more usable to the
keyboard, and then we'll have a demonstration.

00:13:33.950 --> 00:13:42.110
So this is the new WhiteHouse.gov site, great
website, love the fact that they are video blogging

00:13:42.110 --> 00:13:46.759
and providing lots of transparent information public.

00:13:46.759 --> 00:13:53.360
When you tab into this page, the developers made
one mistake though, when you tab into the page,

00:13:53.360 --> 00:13:57.970
and by tab I mean you hit the tab key on your
keyboard and it moves the keyboard focus into the page

00:13:57.970 --> 00:14:00.350
so you can get around without using the mouse.

00:14:00.350 --> 00:14:04.800
When you tab in you're first focused on
this email field up in the top right.

00:14:04.799 --> 00:14:08.199
You hit tab again, moves to the Zip field.

00:14:08.200 --> 00:14:11.820
You hit tab again, it moves to the Get Updates button.

00:14:11.820 --> 00:14:17.320
That's pretty logical, it's a type in your
information here and you can receive updates.

00:14:17.320 --> 00:14:21.980
And if you hit tab again, it kind of disappears
and you can't really tell where you are.

00:14:21.980 --> 00:14:25.600
Maybe you could figure out, OK you're
probably over here on this set of links.

00:14:25.600 --> 00:14:27.560
Hit tab again and you can't see where you are.

00:14:27.559 --> 00:14:29.000
Hit tab again, you can't see where you are.

00:14:29.000 --> 00:14:34.590
You're still navigating throughout the page, but a sighted
user using the keyboard can't determine where they are

00:14:34.590 --> 00:14:37.180
so they can't use the webpage effectively.

00:14:37.179 --> 00:14:41.309
In fact when it gets down to these plain text links here,

00:14:41.309 --> 00:14:45.429
the default keyboard focus is hidden,
so you can't really see where you are.

00:14:45.429 --> 00:14:50.039
So we're going to show you how to
hide the default keyboard focus,

00:14:50.039 --> 00:14:56.079
but actually style it to where you can
still see where you are in different method.

00:14:57.090 --> 00:15:01.370
The Bank of America website, not a
great website, very secure, very useful.

00:15:01.370 --> 00:15:09.480
But when you first get to the website your
keyboard jumps to this online ID field,

00:15:09.480 --> 00:15:12.899
this username field that's over in the...

00:15:12.899 --> 00:15:19.449
top left, and that appears to me that
they're trying to make the form more usable

00:15:19.450 --> 00:15:21.210
because that's probably what most people use.

00:15:21.210 --> 00:15:25.360
That's probably what most people do when they come
to the Bank of America website, is immediately login.

00:15:25.360 --> 00:15:27.029
Hit tab again, it goes to the sign in button.

00:15:27.029 --> 00:15:28.500
That's still pretty useful.

00:15:28.500 --> 00:15:31.110
Hit tab again, you're still in that form.

00:15:31.110 --> 00:15:34.509
That's a fairly logical order, even
though it's slightly out of order.

00:15:34.509 --> 00:15:37.350
And then you click around some more
and just kind of watch the focus here.

00:15:37.350 --> 00:15:42.860
It still is in that section, moves back up to
the links up above it, the links down here.

00:15:42.860 --> 00:15:46.879
And then at this point it kind of
jumps out of that whole section.

00:15:46.879 --> 00:15:49.970
It jumps down here to the Go button as you tab again.

00:15:49.970 --> 00:15:56.940
It becomes an illogical tab order here, and then it goes
back up to the top, the main navigation over to the sidebar,

00:15:56.940 --> 00:16:00.300
and finally to some of these other
form elements that are nothing.

00:16:00.299 --> 00:16:05.579
Now from an outside perspective, it
appears to me that they were trying

00:16:05.580 --> 00:16:09.000
to do the right thing and make that login form more useful.

00:16:09.000 --> 00:16:12.330
But as part of that ended up...

00:16:12.330 --> 00:16:18.810
not necessarily paying attention to how that change
affected the rest of the navigation on the page.

00:16:18.809 --> 00:16:25.199
And so we're going to talk about a technique for changing
that default navigation, and how to do it a new way.

00:16:25.200 --> 00:16:33.920
So again, tab order in browsers is when you hit the tab
key and you move the keyboard focus through the page.

00:16:33.919 --> 00:16:40.329
Now the default tab order is source code order,
so the first interactive element that appears

00:16:40.330 --> 00:16:45.060
in the HTML is the first thing that gets focus,
and the next interactive element that appears

00:16:45.059 --> 00:16:50.069
in the HTML is the next thing that gets focus, and
you move through it in general source code order.

00:16:50.070 --> 00:16:54.280
You can override that with an HTML
attribute called tab index.

00:16:54.279 --> 00:16:57.000
It's been around in HTML for a long time.

00:16:57.000 --> 00:17:02.460
Originally it only applied to links and formulas; that is...

00:17:03.470 --> 00:17:06.210
elements in the browser that were interactive by default.

00:17:06.210 --> 00:17:11.220
So you can move your keyboard focus to a
link and click on it and activate that link,

00:17:11.220 --> 00:17:17.009
or you can move your keyboard focus to a form element and
type in some information, or press the button or what not.

00:17:17.009 --> 00:17:23.559
[ Silence ]

00:17:23.559 --> 00:17:30.909
It also allowed change of the default tab order, so you
can say this link, you tab to this link before you tab

00:17:30.910 --> 00:17:38.650
to anything in the normal source code order;
which can be useful, but can be misused as well.

00:17:38.650 --> 00:17:45.830
So recently, and I mean it's in the past year or
2, there have been some extensions to tab index.

00:17:45.829 --> 00:17:52.369
Now it applies to any DOM element, anything that can
be rendered in the browser can receive keyboard focus.

00:17:52.369 --> 00:17:55.739
So that includes generic elements like DIVs and SPANs.

00:17:55.740 --> 00:18:01.099
It also includes stuff like list items and paragraphs,
and it doesn't make sense at first why you would want

00:18:01.099 --> 00:18:06.990
to make those things keyboard focusable, but as you
see the demo it'll make a little bit more sense.

00:18:06.990 --> 00:18:12.250
And you can still override the default order where you
could put stuff in order before the source code order,

00:18:12.250 --> 00:18:17.619
but now you can also add elements to the default tab
order, or remove them from the default tab order.

00:18:17.619 --> 00:18:22.959
So if you use tab index equals 0, which is a new
extension, it just puts it in source code order -

00:18:22.960 --> 00:18:28.600
suddenly it makes this other element focusable in
addition to all those native focusable elements.

00:18:28.599 --> 00:18:36.939
And to give you a demo of how to maintain visible
keyboard focus and use the new tab index techniques,

00:18:36.940 --> 00:18:39.019
I'm going to bring Chris Plazak up to the stage.

00:18:39.019 --> 00:18:40.009
Chris?

00:18:40.009 --> 00:18:47.129
[ Applause ]

00:18:47.130 --> 00:18:48.710
>> Thanks James.

00:18:48.710 --> 00:18:55.130
So today I want to talk about using keyboard access to
improve the usability and accessibility of your websites,

00:18:55.130 --> 00:18:58.780
not just for users with disabilities, but for everyone.

00:18:58.779 --> 00:19:04.869
So the web page I'm going to use for this demo
is here, and we have some content at the top,

00:19:04.869 --> 00:19:08.339
we have a list in the middle, and
then some content at the bottom.

00:19:08.339 --> 00:19:14.069
And we want to make this into something more
like a desktop app like Mail for example,

00:19:14.069 --> 00:19:20.629
where you have a list of messages, you can tab into
them, tab out of them, move around with the keyboard.

00:19:20.630 --> 00:19:26.120
So the first thing we do, if we just try to tab
through this right now, I'll press the tab key.

00:19:26.119 --> 00:19:32.309
We get to this link at the top, we skip over all
the elements, and we get to the link at the bottom.

00:19:32.309 --> 00:19:37.529
So the first thing we want to do is to bring these
elements in the list back into the tab order.

00:19:37.529 --> 00:19:42.769
So let's go to the code, and to do that...

00:19:42.769 --> 00:19:48.019
it's not hard, I'll just start setting
the tab index for all of these.

00:19:48.019 --> 00:19:57.379
And here that says item 1 so maybe I'll say, that
should tab index 1, tab index 2, 3, and so on.

00:19:57.380 --> 00:20:02.650
I'm going to copy and paste the rest
of these for the sake of gravity.

00:20:02.650 --> 00:20:06.490
So we have up to 10.

00:20:06.490 --> 00:20:09.099
So let's see that and see what happens.

00:20:09.099 --> 00:20:13.369
So I'll press tab for the first time, I get to item 1.

00:20:13.369 --> 00:20:18.989
As I go through this list, get to item 10,
press it again now I'm back at the top.

00:20:18.990 --> 00:20:20.950
Press it again, where will I go?

00:20:20.950 --> 00:20:22.519
All the way to the bottom.

00:20:22.519 --> 00:20:26.789
So I've brought these elements into the
tab order, but that's not really correct.

00:20:26.789 --> 00:20:31.210
I've tabbed first to the items in the list, and
then I jump around a lot which isn't real ideal.

00:20:31.210 --> 00:20:36.759
So instead of explicitly setting these elements to numbers,

00:20:36.759 --> 00:20:41.220
which you can imagine if this list grew
large would become a real pain to manage.

00:20:41.220 --> 00:20:51.250
Instead we can just set them to 0, and what 0
does is explicitly tell Safari in this case,

00:20:51.250 --> 00:20:55.079
to just put the items in the order
that they come in, in the source code.

00:20:55.079 --> 00:20:56.980
So where will they appear in your DOM?

00:20:56.980 --> 00:20:59.970
That's where it will be in the tab order.

00:20:59.970 --> 00:21:02.620
So if we try this again...

00:21:02.619 --> 00:21:10.099
first tab brings me to the link, next tab brings me to
item 1, so on through the list until I get to the end.

00:21:10.099 --> 00:21:12.980
So that looks pretty good so far.

00:21:12.980 --> 00:21:18.160
We can tab through all the items now, we're
enhancing the usability of our website,

00:21:18.160 --> 00:21:20.650
but this list doesn't really look that great.

00:21:20.650 --> 00:21:24.470
It doesn't look like a Mail app or
something that you see on the desktop,

00:21:24.470 --> 00:21:27.410
that we really want to mirror in this web application.

00:21:27.410 --> 00:21:33.680
So instead of relying on the default
tab order, default style of the tab,

00:21:33.680 --> 00:21:37.860
we can change that style to make
it look more like a selection.

00:21:37.859 --> 00:21:45.119
So I'm going to paste in something that will change
the color, the font color, of the items in the list;

00:21:45.119 --> 00:21:49.879
and change the background color of the
items in the list when they become active.

00:21:49.880 --> 00:21:52.010
So let's take a look at how that looks.

00:21:52.009 --> 00:21:56.650
Tab in, and now as I'm tabbing around
I've a pretty nice looking focus

00:21:56.650 --> 00:22:00.190
in the background; starting to look more like a list.

00:22:00.190 --> 00:22:07.620
If you look closely, we still have that tiny keyboard
focus ring border around that slight blue hazy object,

00:22:07.619 --> 00:22:10.529
and that doesn't look that great in this case.

00:22:10.529 --> 00:22:14.420
So we can remove that with just another line.

00:22:14.420 --> 00:22:22.140
We can set the outline to 0, which will remove any
visual indication that keyboard focus is there.

00:22:22.140 --> 00:22:24.590
So now when we tab through it...

00:22:24.589 --> 00:22:30.679
all we have is just this nice selection in the
background, which looks pretty good but notice I didn't do

00:22:30.680 --> 00:22:37.100
that until I had added another visual indication
that said where is keyboard focus at the time.

00:22:37.099 --> 00:22:40.500
You don't want to remove the outline
and then leave your users in the dark

00:22:40.500 --> 00:22:44.109
as to where the keyboard focus actually is.

00:22:44.109 --> 00:22:46.000
So we're doing pretty good.

00:22:46.000 --> 00:22:50.099
I can tab through all these items,
but say my web application starts

00:22:50.099 --> 00:22:52.769
to grow and I have 1,000 items in this list.

00:22:52.769 --> 00:22:59.029
I don't want to make users tab through every
single item in the list, just to get to the bottom.

00:22:59.029 --> 00:23:05.490
What I'd really like is to be able to tab into the
list, tab out of the list, and move on just like Mail

00:23:05.490 --> 00:23:08.230
and other applications where the lists do.

00:23:08.230 --> 00:23:14.890
So to do that, we're going to use this JavaScript function.

00:23:14.890 --> 00:23:21.050
And in this function which changes focus, it's not
completely filled out yet, what we're going to do is check

00:23:21.049 --> 00:23:26.619
if the event coming in is a key code of 40.

00:23:26.619 --> 00:23:31.549
And now obviously everyone here knows what key
code of 40 is, I don't have to say what it is.

00:23:31.549 --> 00:23:38.990
It's the down arrow key, so this says when a down
arrow key comes in, I'm going to do something.

00:23:38.990 --> 00:23:43.809
And what that is I'm going to leave that
as a mystery until we get to that part.

00:23:43.809 --> 00:23:50.639
So to make sure that this function is called,
we need to install the JavaScript handler,

00:23:50.640 --> 00:23:53.940
and I'm going to do that by copying some code

00:23:55.700 --> 00:24:01.750
... and then install some JavaScript
handlers on each one of these list items.

00:24:01.750 --> 00:24:08.670
Alright, so each one of these list items now says
on key down, so when someone presses the key down,

00:24:08.670 --> 00:24:13.330
when the keyboard focus is on this
item, call this JavaScript method.

00:24:13.329 --> 00:24:18.279
And this JavaScript method will call this thing here.

00:24:18.279 --> 00:24:23.049
Now notice I only have tab index of 0 on the first element.

00:24:23.049 --> 00:24:25.579
The other ones do not have tab index of 0.

00:24:25.579 --> 00:24:31.000
So what that means is that these other elements
in the list will not be in the tab order.

00:24:31.000 --> 00:24:37.900
So I'll tab to the first thing, when I press tab again
I'll leave the other items and skip right over them.

00:24:37.900 --> 00:24:41.660
So that'll be important because we
don't want to tab through all of them.

00:24:41.660 --> 00:24:50.340
So now we need to make this JavaScript handler
do something, and what we want it to do...

00:24:50.339 --> 00:24:53.679
is to change focus.

00:24:53.680 --> 00:25:01.230
So using some JavaScript frameworks to just simplify, what
shouldn't be too hard, is that we get the next element

00:25:01.230 --> 00:25:04.839
from the current element, which just
pulls out the next element in DOM order.

00:25:04.839 --> 00:25:07.919
Obviously it'll be the next list item here.

00:25:07.920 --> 00:25:15.560
We set the tab index to 0 here, which is important,
because that brings this element into the tab order

00:25:15.559 --> 00:25:19.730
that Safari has in its internal mechanisms.

00:25:19.730 --> 00:25:25.819
So we bring it into the tab order by setting
tab index to 0, and then we call focus on it.

00:25:25.819 --> 00:25:26.909
Alright, so that should be enough.

00:25:26.910 --> 00:25:29.200
Let's see how this works.

00:25:29.200 --> 00:25:33.330
We'll reload it, I tab to the first
item, alright tab to item 1.

00:25:33.329 --> 00:25:38.069
If I press tab again right now,
I'll leave the list, that works.

00:25:38.069 --> 00:25:42.609
So if I go back to item 1 and I press
the down key, which I'll do now,

00:25:42.609 --> 00:25:45.189
I start to move through these items in the list.

00:25:45.190 --> 00:25:46.900
Alright, that's pretty good.

00:25:46.900 --> 00:25:50.730
So I can tab out of this list, I can go back to it,

00:25:50.730 --> 00:25:56.160
and if I start tabbing back I'm now using
the tab key to move forward and back.

00:25:56.160 --> 00:26:00.700
Notice all of the sudden my items
are all in the tab order again.

00:26:00.700 --> 00:26:07.150
So the only one that isn't there is an item
10 because I have an arrow down to that,

00:26:07.150 --> 00:26:09.780
once I arrow down to that now this is in the list as well.

00:26:09.779 --> 00:26:11.230
So what happened here?

00:26:11.230 --> 00:26:18.089
We were maintaining keyboard focus only on the first
element, and trying to use the arrow keys to set focus

00:26:18.089 --> 00:26:25.689
on the other ones, but we forgot one important part and
that was removing the previous element from the tab order.

00:26:25.690 --> 00:26:30.440
So with this method here, we added all
of these elements into this tab order,

00:26:30.440 --> 00:26:33.460
but we forgot to remove the previous one.

00:26:33.460 --> 00:26:35.170
So in that case all of them were there.

00:26:35.170 --> 00:26:40.110
So how do we remove it from the tab order?

00:26:40.109 --> 00:26:47.740
We're going to use something, we're going to
use an extension tab index by setting it to -1.

00:26:47.740 --> 00:26:58.170
Setting it to -1 tells Safari to remove this item from
your list of things in the tab order; so just takes it out.

00:26:58.170 --> 00:27:05.730
So now if we try this, reload, we'll tab in,
we can tab down a few items, I can tab out.

00:27:05.730 --> 00:27:10.349
If I tab back in, and I can tab immediately back out of it.

00:27:10.349 --> 00:27:16.269
So now as I tab through these, I'm
just on the item that I last left.

00:27:16.269 --> 00:27:24.079
So with just a few tags, few extra attributes
and JavaScript handlers, not too much code,

00:27:24.079 --> 00:27:29.519
we've made our website a lot more
usable and not just for people

00:27:29.519 --> 00:27:33.829
who have problems using the mouse
or so on, but for everyone.

00:27:33.829 --> 00:27:39.199
So we can bring this to this natural conclusion,
and I have an even more enhanced version

00:27:39.200 --> 00:27:43.610
where we maintain a disabled state for
the list when it doesn't have focus.

00:27:43.609 --> 00:27:46.569
We can arrow up and down through the list...

00:27:46.569 --> 00:27:53.539
and I can also click on items in the list, because
universal design is not just about addressing people

00:27:53.539 --> 00:28:00.559
with disabilities, but everyone's needs for
how they can interact with the computer.

00:28:00.559 --> 00:28:02.839
Alright, James?

00:28:05.049 --> 00:28:13.180
>> So so far within the keyboard access section, we've
learned some common mistakes and how to avoid them;

00:28:13.180 --> 00:28:19.049
such as maintaining a visible keyboard at
focus, and maintaining logical tab order.

00:28:19.049 --> 00:28:26.349
We also learned some new extensions to the tab index
attribute, some of which is going to make a lot more useful.

00:28:26.349 --> 00:28:30.459
And Chris showed us a demo of maintaining
that visible keyboard focus.

00:28:30.460 --> 00:28:36.160
I noticed he only removed that focus ring
once he had already set up another style.

00:28:36.160 --> 00:28:42.390
And talked about a technique that's known as roaming
tab index, and roaming tab index is a search term

00:28:42.390 --> 00:28:47.020
that you can use to find out more
about that particular technique online.

00:28:47.019 --> 00:28:54.869
But I want to shift here from talking about universal
design, so that is from techniques that you can use

00:28:54.869 --> 00:29:03.039
to benefit all users including those with disabilities;
some more specific techniques and information about users

00:29:03.039 --> 00:29:07.470
with disabilities, so people that
might need special considerations.

00:29:07.470 --> 00:29:09.360
So again, some of the disabilities we've talked about...

00:29:09.359 --> 00:29:13.969
I mentioned the wheelchair ramp,
the curb cut, at the beginning.

00:29:13.970 --> 00:29:20.329
Typically wheelchair users don't have much problem
accessing the internet because most of them have full range

00:29:20.329 --> 00:29:27.659
of their hands, full range motion of their
hands, and usually sight and hearing.

00:29:27.660 --> 00:29:39.070
But quadriplegic users, rather dexterity impaired users
may have trouble actually pressing keys on the keyboard.

00:29:39.069 --> 00:29:46.179
Hearing impaired users may have trouble accessing multimedia
content, which is why we need captions and transcriptions.

00:29:46.180 --> 00:29:50.789
And finally we're going to talk mostly
today about vision impaired users.

00:29:50.789 --> 00:29:52.869
That includes people that are completely blind.

00:29:52.869 --> 00:29:54.939
It also includes...

00:29:55.950 --> 00:30:01.940
people that are called low vision,
or legally blind; that is they have,

00:30:01.940 --> 00:30:04.529
they can see somewhat but they've got very, very bad vision.

00:30:04.529 --> 00:30:10.529
And this also includes the aging population, other
people that kind of just lose some of their vision

00:30:10.529 --> 00:30:14.690
as they get older, which will include all of us I'm sure.

00:30:14.690 --> 00:30:20.240
So we're going to talk about assistive technologies.

00:30:20.240 --> 00:30:25.380
Has anybody, by a show of hands, who
here knows what assistive technology is?

00:30:25.380 --> 00:30:25.980
Not too many.

00:30:25.980 --> 00:30:32.069
OK, we're going to talk about some accessibility principles
that come from the web content accessibility guidelines,

00:30:32.069 --> 00:30:38.919
and then we're going to talk a lot about web application
accessibility, and then more specific techniques.

00:30:38.920 --> 00:30:47.710
So assistive technology is a broad term that refers
to both hardware and software tools that people

00:30:47.710 --> 00:30:54.910
with disabilities use to access the computer,
to help them access resources and other...

00:30:55.980 --> 00:30:59.200
other things in the same way that...

00:30:59.200 --> 00:31:01.279
with the same degree of...

00:31:01.279 --> 00:31:08.599
access that other people have.

00:31:08.599 --> 00:31:13.389
So one example of assistive technology, so this is hardware

00:31:13.390 --> 00:31:19.200
so the screen shot is actually what's
called a refreshable Braille display.

00:31:19.200 --> 00:31:25.160
Most of them work with OS X, some of
them work with other computers as well.

00:31:25.160 --> 00:31:32.029
What it is, is it's a row of pens that raise up and down,
and display the text that's rendered on the screen in a way

00:31:32.029 --> 00:31:35.079
that a blind or a deaf blind user can see it.

00:31:35.079 --> 00:31:37.699
There's also alternate pointing devices.

00:31:37.700 --> 00:31:43.680
Some people will use eye trackers that they could
actually look at a particular spot on the screen,

00:31:43.680 --> 00:31:48.190
it'll move a pointing cursor like a mouse
cursor, to that spot, interact with it.

00:31:48.190 --> 00:31:56.500
Some people use alternate keyboard devices, so I mentioned
some paraplegic users will use what's called a sip

00:31:56.500 --> 00:31:57.240
and puff tube.

00:31:57.240 --> 00:32:03.359
It's just a little tube, they have very limited range of
motion, but they can either suck in or blow out on this tube

00:32:03.359 --> 00:32:08.579
and it gives them a few keystrokes
that they can emulate a keyboard.

00:32:08.579 --> 00:32:13.169
There's also one called a Head Wand, so some people
have limited range of motion and it's essentially

00:32:13.170 --> 00:32:18.170
like a long stick on their head that they can use
to press a key on the keyboard in front of them.

00:32:18.170 --> 00:32:19.930
So that's some of the hardware assistive technologies.

00:32:19.930 --> 00:32:23.259
There's a lot of software assistive technologies as well,

00:32:23.259 --> 00:32:27.009
and several of these are built in
right into your Mac OS X desktop.

00:32:27.009 --> 00:32:29.529
They've been around for a long time.

00:32:29.529 --> 00:32:34.039
Speech output, I'm sure you've all
heard, also known as text to speech.

00:32:34.039 --> 00:32:38.430
And there's also speech command software,
so that includes both the speakable items

00:32:38.430 --> 00:32:40.769
that are built in to where you can say...

00:32:40.769 --> 00:32:47.109
phone number for John Doe, and your computer
will speak the phone number back to you.

00:32:47.109 --> 00:32:53.289
Or also third party dictation software
such as Dragon or Mac Speech.

00:32:54.700 --> 00:32:59.410
There's some utilities that you
can find in the system preferences.

00:32:59.410 --> 00:33:03.210
This includes sticky keys, so some
people who have a limited range

00:33:03.210 --> 00:33:07.180
of motion might have trouble pressing
2 keyboard keys at the same time.

00:33:07.180 --> 00:33:12.029
So if we hit command S to save, somebody might
have trouble hitting those both at the same time,

00:33:12.029 --> 00:33:15.410
so they could hit the command key and then the S key.

00:33:15.410 --> 00:33:20.640
And Mouse Keys are a way to use the arrow keys, or the...

00:33:20.640 --> 00:33:25.560
9 key track pad to move the mouse cursor around the screen.

00:33:25.559 --> 00:33:31.200
And there's also screen readers, and Chris is going to demo
the built in screen reader Voice Over for you in a minute.

00:33:31.200 --> 00:33:40.049
But screen readers are usually an audio only
interface that allow mostly blind and low vision users

00:33:40.049 --> 00:33:43.210
to get a mental model, or a picture,
of what's on the screen.

00:33:43.210 --> 00:33:48.370
So as they're moving their keyboard focus around the
screen, it not only tells them the text that's rendered

00:33:48.369 --> 00:33:51.229
on the screen, but it tells them
other information about that.

00:33:51.230 --> 00:33:52.829
So in the previous example we heard...

00:33:52.829 --> 00:33:59.829
or the previous semantic markup example, not
only would they hear the text all about widgets,

00:33:59.829 --> 00:34:01.899
but they might hear some semantic information about that;

00:34:01.900 --> 00:34:09.340
some other meta data such as the
fact that that's a heading level 1.

00:34:10.469 --> 00:34:12.679
So accessibility principles.

00:34:12.679 --> 00:34:18.419
Is anybody here familiar with the
Web Content Accessibility Guidelines?

00:34:18.420 --> 00:34:20.900
One person, OK, a few people.

00:34:20.900 --> 00:34:27.920
Good. So there's a new specification, or rather a
recommendation, now from the W3C, came out in December.

00:34:27.920 --> 00:34:36.750
The Web Content Accessibility Guidelines 2.0, and it's a
big document but at its highest level it's very simple.

00:34:36.750 --> 00:34:41.969
It's these common sense principles that you can use, and
these are easy to remember, write them down and just think

00:34:41.969 --> 00:34:45.079
about them as you go through your development cycle.

00:34:45.079 --> 00:34:47.610
One is the content must be perceivable.

00:34:47.610 --> 00:34:53.590
So in the broadcast caption example
earlier, there was somebody on the screen

00:34:53.590 --> 00:34:55.880
and one of the girls was actually speaking.

00:34:55.880 --> 00:34:59.789
So in order to make that perceivable
to somebody with a hearing impairment,

00:34:59.789 --> 00:35:01.500
you had to render the text on the screen.

00:35:01.500 --> 00:35:03.190
So that's an example of perceivability.

00:35:03.190 --> 00:35:07.769
Another thing is like if there's an image on
the screen and a blind person can't see it,

00:35:07.769 --> 00:35:12.090
so there's got to be some alternative text
that they can hear that describes that image.

00:35:13.630 --> 00:35:15.340
Also make content operable.

00:35:15.340 --> 00:35:19.610
So if we have something that looks like
a button and it acts like a button,

00:35:19.610 --> 00:35:23.950
when you click on it with your mouse you should
also be able to move the keyboard focus to it,

00:35:23.949 --> 00:35:29.329
and click on it as you could with the keyboard by
hitting probably the Enter button or Space button.

00:35:31.099 --> 00:35:32.779
All content must be understandable.

00:35:32.780 --> 00:35:40.920
So this is a little bit more abstract, but a good
example of that is the heading example previously,

00:35:40.920 --> 00:35:47.090
to where the text all about widgets was perceivable
but it wasn't completely understandable to all users

00:35:47.090 --> 00:35:51.280
until you use the semantic markup to
associate that heading role with that text;

00:35:51.280 --> 00:35:56.900
so now everyone that can see the screen can
tell it's a heading based on the visual style,

00:35:56.900 --> 00:36:01.680
but everyone that can't hear the screen can hear
additional markups, or additional meta data spoken

00:36:01.679 --> 00:36:05.279
such as heading level 1 all about widgets.

00:36:05.280 --> 00:36:10.360
And the fourth one, all content must be robust,
is the most abstract of these but it basically...

00:36:10.360 --> 00:36:15.329
a good way of thinking about this is that to
provide your content in a variety of ways.

00:36:15.329 --> 00:36:20.779
So not everybody's going to be able to access all content
in the same way, even if you make it completely accessible.

00:36:20.780 --> 00:36:29.490
So for example, if somebody, you may have a web blog
and on the blog listing page there's a list of entries.

00:36:29.489 --> 00:36:35.429
Well that particular page may not be accessible to
all users, but that user that it's not accessible

00:36:35.429 --> 00:36:39.250
to may have an RSS reader that they can use.

00:36:39.250 --> 00:36:43.960
And so by providing that content in another way, you've
made it more robust and they can download the RSS feed

00:36:43.960 --> 00:36:50.369
and access the same content in a different
way that's more appropriate for them.

00:36:51.699 --> 00:36:55.489
And finally I want to talk about
web application accessibility.

00:36:55.489 --> 00:37:03.639
Some new problems that have arisen due to the fact that up
until a couple of years ago most of the web accessibility...

00:37:05.840 --> 00:37:11.090
tools and techniques were all focused from document
accessibility, not web application accessibility.

00:37:11.090 --> 00:37:17.450
So there's new problems now that a lot of big sites
are using web applications, or applications on the web.

00:37:17.449 --> 00:37:20.299
We're going to talk a little bit about WAI-ARIA,

00:37:20.300 --> 00:37:25.430
it's short for the Web Accessibility Initiative
Accessible Rich Internet Applications.

00:37:25.429 --> 00:37:30.710
In fact it's a new emerging technology
from the W3C, it's got a lot of support

00:37:30.710 --> 00:37:36.300
from all major browsers, vendors, and operating systems.

00:37:36.300 --> 00:37:40.800
We're going to have a demonstration of those
technologies as well as a screen reader demonstration.

00:37:40.800 --> 00:37:43.420
So what I mean by new problems...

00:37:43.420 --> 00:37:51.190
now when the web was originally developed in the late
'80s early '90s, it was mainly scientists that wanted

00:37:51.190 --> 00:37:55.619
to share research papers with each other.

00:37:55.619 --> 00:38:04.150
So the first browser, the first HTML documents and
browsers, were all focused around document semantics;

00:38:04.150 --> 00:38:07.440
like you'd have headings, and paragraphs,
and lists, and tables,

00:38:07.440 --> 00:38:13.159
and then some interactive elements too
like links and basic form elements.

00:38:13.159 --> 00:38:15.679
But if you think about...

00:38:15.679 --> 00:38:24.319
how we've been using the web over the past 5 years or so,
a lot of the websites that you keep going back to on a day

00:38:24.320 --> 00:38:29.960
in day out basis are full blown web
applications that just masquerade as a web page,

00:38:29.960 --> 00:38:34.970
or they're actually acting as a
web application within a web page.

00:38:34.969 --> 00:38:38.049
So this is an example of a web application.

00:38:38.050 --> 00:38:42.900
This is Mobile Me web mail, and there's
a lot of new semantics that come along

00:38:42.900 --> 00:38:51.240
with web application user interface helmets that just
don't exist in HTML, don't exist in semantic markup.

00:38:51.239 --> 00:38:58.519
And so one example that I want to point out here, is up on
the top left side we've got a list of tabs - inbox, drafts,

00:38:58.519 --> 00:39:04.190
sent, trash, and junk email - and we can tell by looking
at that first one, or sighted users can tell by looking

00:39:04.190 --> 00:39:09.030
at that first one, that it's selected and
by being selected it's mutually exclusive.

00:39:09.030 --> 00:39:12.150
The other 4 are not selected.

00:39:12.150 --> 00:39:16.720
And also since that one is selected, all
the rest of the content on the right portion

00:39:16.719 --> 00:39:20.230
of the page is sublevel content within the inbox.

00:39:20.230 --> 00:39:27.110
And if we were to click one of the other tabs, then the
inbox content will go away and we'll see some other content.

00:39:27.110 --> 00:39:32.150
There's no tab element in HTML,
there's no semantic equivalent of that.

00:39:32.150 --> 00:39:37.480
And there's no semantic equivalent of marking
something selected, short of maybe some form element.

00:39:37.480 --> 00:39:43.199
But nothing to make a tab selected, and no way to indicate
that to an assistive technology such as a screen reader.

00:39:43.199 --> 00:39:47.779
There's also, that was a full blown web application.

00:39:47.780 --> 00:39:51.070
There's also some hybrid web applications
that are on web pages,

00:39:51.070 --> 00:39:54.430
so this is a content page from the app about Com Site.

00:39:54.429 --> 00:40:05.389
It's a document about the iPod Nano, but when you watch the
video it pops open this dialogue, so the dialogue kind of,

00:40:05.389 --> 00:40:11.789
actually this player application, you've got some new things
too on there like a play button, a progress indicator.

00:40:11.789 --> 00:40:16.789
There's no semantic HTML markup for a progress
indicator to show you where you are within the movie.

00:40:16.789 --> 00:40:22.009
There's also no way to indicate that a
particular DIV, or no standard that would indicate

00:40:22.010 --> 00:40:28.030
that particular DIV is a dialogue if it can be
closed by clicking out of this Close button.

00:40:29.039 --> 00:40:37.940
And so... as a solution to those new problems, a
bunch of companies working together within the W3C

00:40:37.940 --> 00:40:44.740
on a standard called WAI-ARIA, Accessible Rich Internet
Applications from the Web Accessibility Initiative.

00:40:44.739 --> 00:40:51.899
And in short what it allows you to do is to take web pages,
or portions of web pages, and declare them as applications

00:40:51.900 --> 00:40:58.769
and have those web pages send other states and properties
and role information about the application to...

00:40:58.769 --> 00:41:05.389
an accessibility API through way of the
browser, so that the assistive technology

00:41:05.389 --> 00:41:10.750
like a screen reader can convey that information to a user.

00:41:12.460 --> 00:41:18.710
So the way you use this is first of all, what we learned in
the last demo, manage keyboard focus on complex UI widgets,

00:41:18.710 --> 00:41:22.869
because if you have applications that
are in web pages on the web you want them

00:41:22.869 --> 00:41:25.549
to kind of behave like desktop applications do.

00:41:25.550 --> 00:41:29.180
So in the first example we showed you
how, within a list, a complex UI...

00:41:29.179 --> 00:41:31.739
like a large selectable list.

00:41:31.739 --> 00:41:37.719
You don't want to tab through every item in that
list, it becomes tedious, especially if it's something

00:41:37.719 --> 00:41:45.579
like a mail list might have several hundred
or several thousand messages in the table.

00:41:47.280 --> 00:41:49.019
And then you want to assign semantic roles.

00:41:49.019 --> 00:41:52.800
Now in addition to the universal
design aspect of keyboard focus,

00:41:52.800 --> 00:41:58.019
we need to tell assistive technology
users what something is.

00:41:58.019 --> 00:42:00.650
So we need to make something understandable.

00:42:00.650 --> 00:42:07.519
We also need to make all of the rest of the information
perceivable, and we'll do that via states and properties.

00:42:07.519 --> 00:42:11.840
So this is a screen shot of the desktop application iTunes.

00:42:11.840 --> 00:42:15.280
But say we were to masquerade or...

00:42:15.280 --> 00:42:19.060
take an interface like this and put it on the web...

00:42:19.059 --> 00:42:24.980
to where we've got a couple of lists in the middle here
and your web application may look something like this -

00:42:24.980 --> 00:42:28.940
a few lists and a search box, and
some other buttons at the bottom.

00:42:28.940 --> 00:42:34.019
So say the user was focused on that
search field up on the top right,

00:42:34.019 --> 00:42:37.750
and they wanted to get down to these buttons
over there that are on the bottom left.

00:42:37.750 --> 00:42:41.469
If you were to make everything focusable it would be very
tedious, because they'd have to tab through all the items

00:42:41.469 --> 00:42:43.029
in this list, all the items in that list.

00:42:43.030 --> 00:42:47.150
So instead what they do is they hit
tab once, moves over to this section.

00:42:47.150 --> 00:42:52.400
They can use the arrow keys up and down, tab
again, moves over to the main content table.

00:42:52.400 --> 00:42:58.019
They can hit the arrow key up and down, and then finally
over to the buttons that they're trying to get to.

00:42:58.019 --> 00:43:04.909
And so that's a way of managing keyboard focus,
and Chris talked about that in his previous demo.

00:43:04.909 --> 00:43:07.909
Another thing we're going to do
is assign those semantic roles,

00:43:07.909 --> 00:43:12.379
so we're going to take interface
elements and make them understandable.

00:43:12.380 --> 00:43:18.940
Keep in mind those accessibility principles -
perceivable, operable, understandable, and robust.

00:43:18.940 --> 00:43:24.889
So in order to make those understandable, how do
we make this particular element understandable?

00:43:24.889 --> 00:43:30.089
Sighted users in the room can infer from
the visual style that it's a volume slider.

00:43:30.090 --> 00:43:33.220
It's got some icons around it...

00:43:33.219 --> 00:43:37.259
it may be labeled volume, but what
is a slider in a web page?

00:43:37.260 --> 00:43:40.380
There's no semantic markup equivalent for that.

00:43:40.380 --> 00:43:45.769
So in order to do this we need to take whatever element
we're using and assign it a role, say this is a role slider

00:43:45.769 --> 00:43:52.539
so that somebody that's used to desktop
applications that have sliders can understand that.

00:43:52.539 --> 00:43:53.650
Same thing with this control.

00:43:53.650 --> 00:43:58.289
In Cocoa this is called a segmented control,
but we've got something like this in HTML.

00:43:58.289 --> 00:44:05.500
It's kind of like a set of radio buttons, and if you
press one of these, they're all mutually exclusive, right?

00:44:05.500 --> 00:44:10.349
You press the one on the right side and the other 2 pop out.

00:44:10.349 --> 00:44:15.739
So it's kind of like radio buttons, but you web
developers in the audience I'm sure know have tried

00:44:15.739 --> 00:44:19.659
to style radio buttons in semantic HTML before.

00:44:19.659 --> 00:44:22.109
You can do it but it takes a lot of hacks.

00:44:22.110 --> 00:44:26.960
You either take that native form element and
you make it almost completely transparent,

00:44:26.960 --> 00:44:30.639
or you position it off screen and
put a representation of it onscreen.

00:44:30.639 --> 00:44:36.019
So instead of using those hacks, we can take
another element instead of that semantic input,

00:44:36.019 --> 00:44:42.420
and actually just give it the semantics that that input
would have, so we're going to say this is the role

00:44:42.420 --> 00:44:47.010
of radio even though it may be
used in a spam tag or an LI tag.

00:44:47.010 --> 00:44:51.540
[ Silence ]

00:44:51.539 --> 00:44:58.829
And finally, we're going to make these controls perceivable
by giving other states and properties to the user.

00:44:58.829 --> 00:45:05.269
So on the case of the slider, what else might they
need to know about besides the fact that it's a slider?

00:45:05.269 --> 00:45:10.050
Well they need to know what the
volume is at that particular time.

00:45:10.050 --> 00:45:17.190
So in this case we can perceive that
it's about 45 percent or so volume.

00:45:17.190 --> 00:45:22.280
Also and the set of radio buttons, we need
to know which one is checked or pressed.

00:45:23.380 --> 00:45:25.769
So in order to do that I'm going to
bring Chris back up to the stage.

00:45:25.769 --> 00:45:31.800
He's going to introduce the screen reader VoiceOver,
and I encourage you guys to learn it as much as you can,

00:45:31.800 --> 00:45:36.000
and then talk about how to use some
WAI-ARIA states, properties, and roles.

00:45:36.000 --> 00:45:37.210
>> Thanks James.

00:45:37.210 --> 00:45:41.809
So before we get into how to modify our
web pages to make them more accessible,

00:45:41.809 --> 00:45:44.809
I just want to talk a little bit about VoiceOver.

00:45:44.809 --> 00:45:50.049
So as James mentioned, VoiceOver is a screen
reader that ships with every single Macintosh.

00:45:50.050 --> 00:45:55.610
It's on over 30 million Macs worldwide,
and it's been around for 5 years.

00:45:55.610 --> 00:46:00.370
So the easiest way to turn on VoiceOver
is to go to system preferences.

00:46:00.369 --> 00:46:04.859
Inside of system preferences it's
in the universal access tab,

00:46:04.860 --> 00:46:10.660
and I'll find that most easily by typing turn VoiceOver on.

00:46:10.659 --> 00:46:11.960
It's down in the corner.

00:46:11.960 --> 00:46:16.820
Once I click that, there's a seeing
tab and VoiceOver's here.

00:46:16.820 --> 00:46:24.360
So when I click the on button the first thing that will
happen to VoiceOver in Snow Leopard, is that it will display

00:46:24.360 --> 00:46:31.140
and speak whether you want to go on
a tutorial journey through VoiceOver.

00:46:31.139 --> 00:46:35.449
And if you have an hour or so before your
flight back today, or wherever you're going,

00:46:35.449 --> 00:46:39.309
it may be worth going through this tutorial
to learn about how to use VoiceOver.

00:46:39.309 --> 00:46:45.130
You need to use the keyboard, there's some other
commands that you can use to get around the screen.

00:46:45.130 --> 00:46:47.410
So I'm going to turn VoiceOver on now.

00:46:47.409 --> 00:46:49.119
>> [ Computer: ] Welcome to VoiceOver.

00:46:49.119 --> 00:46:51.659
VoiceOver speaks descriptions of items on the screen,

00:46:51.659 --> 00:46:56.219
and can be used to control the
computer using only your keyboard.

00:46:56.219 --> 00:47:00.219
If you already know how to use
VoiceOver, press the V key now.

00:47:00.219 --> 00:47:01.179
VoiceOver on.

00:47:01.179 --> 00:47:05.149
>> Alright, I already know how to use
VoiceOver so I'm going to start it right away.

00:47:05.150 --> 00:47:08.110
You can of course press the learn more and go through that.

00:47:08.110 --> 00:47:09.809
I'm sure you'll be enlightened.

00:47:09.809 --> 00:47:15.369
So the first thing you might notice when VoiceOver starts,
is that there's 2 visual indications on the screen.

00:47:15.369 --> 00:47:21.369
There is a caption panel on the bottom,
which displays everything that is spoken,

00:47:21.369 --> 00:47:25.289
and there's a black border around an item.

00:47:25.289 --> 00:47:28.949
And this indicates what is in the VoiceOver cursor.

00:47:28.949 --> 00:47:33.199
This means what is the VoiceOver
user selecting at this time?

00:47:33.199 --> 00:47:38.579
So I can move around the screen with just VoiceOver
and the keyboard, and get to every element.

00:47:38.579 --> 00:47:43.420
>> [ Computer: ] When using this computer, I
would like assistance with seeing, securing tab...

00:47:43.420 --> 00:47:46.369
keyboard tab, 3 or 4, mouse tab...

00:47:46.369 --> 00:47:50.670
>> So by just listening to audio
cues and synthesized speech,

00:47:50.670 --> 00:47:57.250
I can completely control my computing
environment, using just the keyboard in this case.

00:47:57.250 --> 00:47:58.829
>> [ Computer: ] VoiceOver off.

00:47:58.829 --> 00:48:07.799
>> Alright, so let's go to the web and see how we can change
our web page to make it more accessible to VoiceOver users.

00:48:07.800 --> 00:48:10.670
So what we have here is something that looks like a toolbar.

00:48:10.670 --> 00:48:14.139
We have some buttons over here,
and we have something that looks

00:48:14.139 --> 00:48:18.139
like a radio button or a segmented control on this side.

00:48:18.139 --> 00:48:24.319
The question is, you've done all this work to make
it look nice and pretty and look like a web app,

00:48:24.320 --> 00:48:26.280
what does it look like to a VoiceOver user?

00:48:26.280 --> 00:48:27.890
So I'm going to turn on VoiceOver.

00:48:27.889 --> 00:48:29.379
>> [ Computer: ] VoiceOver on.

00:48:29.380 --> 00:48:31.160
Blank... before the application...

00:48:31.159 --> 00:48:32.210
list 3 items.

00:48:32.210 --> 00:48:39.500
>> Alright, so before we take a look at how these
things sound, I'd like everybody to close their eyes.

00:48:39.500 --> 00:48:46.719
And you're going to listen to what VoiceOver
says, and see if you can notice anything wrong.

00:48:46.719 --> 00:48:47.359
>> [ Computer: ] Blank...

00:48:47.360 --> 00:48:48.789
get new mail.

00:48:48.789 --> 00:48:50.719
Blank, compose new message.

00:48:50.719 --> 00:48:52.129
Blank, delete.

00:48:52.130 --> 00:48:53.200
End of list.

00:48:53.199 --> 00:48:54.730
List 3 items.

00:48:54.730 --> 00:48:58.949
List small icons, large icons.

00:48:58.949 --> 00:49:02.559
>> Alright everybody open your eyes now.

00:49:02.559 --> 00:49:03.969
So what did we notice?

00:49:03.969 --> 00:49:05.339
>> [ Computer: ] VoiceOver off.

00:49:05.340 --> 00:49:07.070
>> When we were going through these items?

00:49:07.070 --> 00:49:13.280
Well the first thing it said that this was a
get new mail link, compose link, and so on.

00:49:13.280 --> 00:49:16.160
Those things aren't really links, those are buttons.

00:49:16.159 --> 00:49:18.769
So we'd like to describe them as buttons.

00:49:18.769 --> 00:49:20.610
The other part was over here.

00:49:20.610 --> 00:49:24.039
First it didn't tell us that this was
a radio button or segmented control,

00:49:24.039 --> 00:49:28.320
or anything that would give us an
indication of how this thing actually works.

00:49:28.320 --> 00:49:34.920
In fact it didn't give us any type information at
all, it just said list, small icon and large icon.

00:49:34.920 --> 00:49:41.360
So to a VoiceOver user, as you just were for a few moments,
you might realize that this might be a little bit confusing

00:49:41.360 --> 00:49:44.630
when you're navigating through the web page.

00:49:44.630 --> 00:49:54.010
So we're going to use ARIA to modify this web page,
and see if we can make it a little bit better.

00:49:57.079 --> 00:50:03.590
So here this line, I have the code that has
the get new mail, compose new mail buttons.

00:50:03.590 --> 00:50:08.940
And what we're going to do here
is just say role equals button.

00:50:08.940 --> 00:50:15.679
And that is an ARIA attribute that
defines what kind of type this element is.

00:50:15.679 --> 00:50:21.989
So I'll paste them for all 3, let's go back to Safari,
turn on VoiceOver quickly, and get some guidance.

00:50:21.989 --> 00:50:22.539
>> [ Computer: ] VoiceOver on.

00:50:22.539 --> 00:50:23.639
Get new mail button.

00:50:23.639 --> 00:50:25.420
Compose new message button.

00:50:25.420 --> 00:50:27.710
Delete button.

00:50:27.710 --> 00:50:28.760
VoiceOver off.

00:50:28.760 --> 00:50:32.890
>> Great, so now these things just
said they're buttons instead of links.

00:50:32.889 --> 00:50:37.909
So already with just 1 extra attribute,
that didn't change the visual indication,

00:50:37.909 --> 00:50:41.259
it didn't make you reorganize your
web page or do anything extra.

00:50:41.260 --> 00:50:42.700
You've made this more understandable.

00:50:42.699 --> 00:50:47.000
Now our other problem was these radio buttons.

00:50:47.000 --> 00:50:52.289
So as you can imagine, there's also
an area role for these radio buttons

00:50:52.289 --> 00:50:56.480
and we can assign those by saying, role equals radio.

00:50:56.480 --> 00:50:59.539
So I'm going to do that for these 3 items.

00:51:00.829 --> 00:51:03.289
We can save that.

00:51:03.289 --> 00:51:04.289
>> [ Computer: ] VoiceOver on.

00:51:04.289 --> 00:51:05.320
Safari.

00:51:05.320 --> 00:51:07.720
>> And now let's see what it says
when we move over these items.

00:51:07.719 --> 00:51:08.739
>> [ Computer: ] End of list.

00:51:08.739 --> 00:51:09.909
List 3 items.

00:51:09.909 --> 00:51:10.929
List.

00:51:10.929 --> 00:51:13.019
>> I'll reload the page first.

00:51:13.019 --> 00:51:13.789
>> [ Computer: ] Safari.

00:51:13.789 --> 00:51:15.489
Stop. Get new...

00:51:15.489 --> 00:51:17.489
delete... end of list.

00:51:17.489 --> 00:51:18.549
List 3 items.

00:51:18.550 --> 00:51:20.260
List view radio button.

00:51:20.260 --> 00:51:22.220
Small icon view radio button.

00:51:22.219 --> 00:51:24.519
Large icon view radio button.

00:51:24.519 --> 00:51:27.519
>> Nice. Now it says radio button.

00:51:27.519 --> 00:51:32.599
So we only have 1 more issue to resolve,
and that is what about this thing here?

00:51:32.599 --> 00:51:35.199
It says, it looks like it's selected right?

00:51:35.199 --> 00:51:40.569
You can imagine if you press the other ones they would
also appear selected, but it didn't say it was selected.

00:51:40.570 --> 00:51:42.390
>> [ Computer: ] List view radio button.

00:51:42.389 --> 00:51:43.429
VoiceOver off.

00:51:43.429 --> 00:51:49.369
>> So we want to use another ARIA attribute to
make sure that this first one, which is here,

00:51:49.369 --> 00:51:54.849
which has the active class on it, reports
that it is the selected radio button.

00:51:54.849 --> 00:52:01.059
So we're going to add another area
attribute called ARIA checked equals true.

00:52:01.059 --> 00:52:03.909
Reload the page, turn on VoiceOver.

00:52:03.909 --> 00:52:04.579
>> [ Computer: ] VoiceOver on.

00:52:04.579 --> 00:52:05.759
>> Let's get to the same item.

00:52:05.760 --> 00:52:06.070
>> [ Computer: ] Delete...

00:52:06.070 --> 00:52:08.130
end of... list 3...

00:52:08.130 --> 00:52:09.050
list view...

00:52:09.050 --> 00:52:10.940
selected radio button.

00:52:10.940 --> 00:52:13.909
>> Good, so now it says it's the selected radio button.

00:52:13.909 --> 00:52:20.539
So all the information is there for the
VoiceOver user to interact with your web app.

00:52:20.539 --> 00:52:22.110
>> [ Computer: ] HTML content.

00:52:22.110 --> 00:52:26.880
>> If we put all the pieces together that
we've learned, with the keyboard focus, ARIA,

00:52:26.880 --> 00:52:32.390
we can get a very compelling web app, not just for
sighted users, but also for users with disabilities.

00:52:32.389 --> 00:52:34.559
So let's go through this with VoiceOver.

00:52:34.559 --> 00:52:35.179
>> [ Computer: ] Blank.

00:52:35.179 --> 00:52:36.349
Focusable content.

00:52:36.349 --> 00:52:37.819
Before the application widgets.

00:52:37.820 --> 00:52:39.110
List 3 items.

00:52:39.110 --> 00:52:40.320
Get new mail button.

00:52:40.320 --> 00:52:41.800
Compose new message button.

00:52:41.800 --> 00:52:43.000
Delete button.

00:52:43.000 --> 00:52:44.000
End of list.

00:52:44.000 --> 00:52:44.869
List 3 items.

00:52:44.869 --> 00:52:47.190
List view selected radio button.

00:52:47.190 --> 00:52:49.280
Small icon view radio button.

00:52:49.280 --> 00:52:51.820
Press small icon view radio button.

00:52:51.820 --> 00:52:53.780
Large icon view radio button.

00:52:53.780 --> 00:52:56.560
Small icon view selected radio button.

00:52:56.559 --> 00:52:58.900
>> So notice the selection changed to the one I just chose.

00:52:58.900 --> 00:52:59.889
>> [ Computer: ] Item 1 group.

00:52:59.889 --> 00:53:02.839
>> I can press the tab key, I'm
just pressing the tab key now.

00:53:02.840 --> 00:53:03.670
>> [ Computer: ] Focusable content.

00:53:03.670 --> 00:53:05.070
Item 1 group.

00:53:05.070 --> 00:53:08.570
>> Notice that VoiceOver moves with me
because I've managed the keyboard focus.

00:53:08.570 --> 00:53:10.210
I can use the arrow keys in this case.

00:53:10.210 --> 00:53:11.579
>> [ Computer: ] Item 2 group.

00:53:11.579 --> 00:53:13.929
Item 8 group.

00:53:13.929 --> 00:53:17.250
>> So VoiceOver also follows and announces what's going on,

00:53:17.250 --> 00:53:21.170
so you don't even need to use the
VoiceOver special commands to get around.

00:53:21.170 --> 00:53:27.639
If you've made it universally usable
for everyone, it affects everyone.

00:53:27.639 --> 00:53:29.719
>> [ Computer: ] VoiceOver off.

00:53:29.719 --> 00:53:34.629
>> So by adding accessibility to
your web app, it's not difficult.

00:53:34.630 --> 00:53:36.420
It expands your user base.

00:53:36.420 --> 00:53:44.300
It will help you avoid any legal complications with any
government regulations, and it's the right thing to do.

00:53:44.300 --> 00:53:47.010
So James, back to you.

00:53:47.010 --> 00:53:52.200
[ Applause ]

00:53:52.199 --> 00:53:54.480
>> Thank you Chris.

00:53:56.539 --> 00:53:57.820
So what did we learn so far?

00:53:57.820 --> 00:54:05.340
Again at the beginning we were talking about universal
design, how you can use these principles and techniques

00:54:05.340 --> 00:54:12.220
to increase the usability and accessibility of
your websites and web applications for all users.

00:54:12.219 --> 00:54:18.119
And we learned some specific techniques about keyboard
focus management, the roaming tab index technique.

00:54:18.119 --> 00:54:23.489
We also learned about web accessibility, a variety of
disabilities, and assistive technologies that users

00:54:23.489 --> 00:54:27.369
with those disabilities sometimes use to access web content.

00:54:27.369 --> 00:54:33.089
And we learned about some accessibility principles
from the Web Content Accessibility Guidelines.

00:54:33.090 --> 00:54:38.500
And those are that content, again, must be
perceivable, operable, understandable, and robust.

00:54:38.500 --> 00:54:45.369
And again, I encourage you to think about these 4 principles
as you're developing your websites and web applications.

00:54:45.369 --> 00:54:50.529
And Chris just showed us a little bit about
VoiceOver and some specific techniques of using ARIA

00:54:50.530 --> 00:54:55.440
to enhance the accessibility of your web applications.

00:54:56.670 --> 00:55:04.070
But if there's just a few things that I want you to take
away today, it's first of accessibility is the right thing

00:55:04.070 --> 00:55:10.110
to do, and not just because some
users have special considerations

00:55:10.110 --> 00:55:13.010
that need to be accounted for, also there are...

00:55:13.010 --> 00:55:14.940
but also because it's the law.

00:55:14.940 --> 00:55:16.630
There are regulations...

00:55:16.630 --> 00:55:22.480
some of you have probably heard of section
508, or the Americans With Disabilities Act;

00:55:22.480 --> 00:55:25.389
both of which now are applying to electronic resources.

00:55:25.389 --> 00:55:30.699
You may have heard some litigation
about Target and Ramada and Priceline,

00:55:30.699 --> 00:55:33.509
were fighting some litigation a few years back

00:55:33.510 --> 00:55:38.450
But not just because it's the right thing
to do, but also because it affects everyone,

00:55:38.449 --> 00:55:44.269
and I don't mean just the standard user that you could
consider disabled, but all of us as we get older,

00:55:44.269 --> 00:55:49.110
we're going to have limited range of
motion, maybe limited range of sight.

00:55:49.110 --> 00:55:57.180
In fact, I heard a statistic that 12 percent
of all males are color blind in some sort.

00:55:57.179 --> 00:56:01.440
Now a lot of them don't even realize
it, but that's probably about...

00:56:01.440 --> 00:56:04.829
5 or 10 people in this room have
some form of color blindness.

00:56:04.829 --> 00:56:08.119
A lot of times they won't tell you, or
sometimes they don't even know about it.

00:56:08.119 --> 00:56:10.619
And so this includes everyone including the people

00:56:10.619 --> 00:56:15.779
that could typically be considered disabled
as well as everyone who's getting older.

00:56:15.780 --> 00:56:17.650
And also that accessibility helps you.

00:56:17.650 --> 00:56:23.860
Remember we talked about some of these universal design
techniques, and accessibility techniques are going to build

00:56:23.860 --> 00:56:26.690
up search engine rankings, and search engine optimization.

00:56:26.690 --> 00:56:32.820
And by doing so, you're going to be able to drive
more traffic to your website, which in turn can be...

00:56:32.820 --> 00:56:38.019
can turn into more money for you, more sites on your...

00:56:38.019 --> 00:56:40.099
more eyes on your products.

00:56:40.099 --> 00:56:45.299
And also if you make it more usable using these
universal design techniques and accessibility techniques,

00:56:45.300 --> 00:56:50.360
you make it more usable to your users so they end up
getting happier and they come back as repeat users,

00:56:50.360 --> 00:56:55.000
which also means a higher user base and
potentially more money for you guys.

00:56:55.000 --> 00:57:00.289
I'm going to show this slide again, then
we're going to have some Q and A panels,

00:57:00.289 --> 00:57:03.559
but Vicky Murley is the Safari technologies evangelist.

00:57:03.559 --> 00:57:06.829
I encourage you to email her with your questions.

00:57:06.829 --> 00:57:10.259
There's more information on the Apple
Accessibility website and Safari Dev Center.

00:57:10.260 --> 00:57:17.280
The new specification, the emerging technology we
talked about was called WAI-ARIA from the W3C site,

00:57:17.280 --> 00:57:22.540
and you can find that online as well
as a new O'Reilly book that came

00:57:22.539 --> 00:57:25.769
out this spring called Universal
Design For Web Applications.

00:57:25.769 --> 00:57:28.130
That covers a lot of the same topics
that we talked about today.