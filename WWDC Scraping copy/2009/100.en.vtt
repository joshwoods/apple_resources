WEBVTT

00:00:13.349 --> 00:00:18.469
>>So this session will be a pretty good framework
for the rest of the week to figure out, you know,

00:00:18.469 --> 00:00:21.649
what it takes to create great iPhone applications.

00:00:21.649 --> 00:00:26.659
And many of you here today, perhaps you already
have an iPhone application currently on the store

00:00:26.660 --> 00:00:31.929
and it may not be doing as well as you'd like or you
want to make sure your next applications really good.

00:00:31.929 --> 00:00:34.149
Well we will definitely take care of you today.

00:00:34.149 --> 00:00:39.109
Whereas the rest of you, perhaps you have yet to start an
iPhone application or you have started and you're trying

00:00:39.109 --> 00:00:40.899
to figure out, what's the process, right?

00:00:40.899 --> 00:00:45.049
What's the best, what are the best
steps to deliver something really great?

00:00:45.049 --> 00:00:46.989
And we'll take care of you as well.

00:00:46.990 --> 00:00:52.130
Essentially there are 4 critical phases to
successful iPhone user interface design.

00:00:52.130 --> 00:00:56.219
The first phase is the foundation
phase and this is where you kind

00:00:56.219 --> 00:00:58.769
of understand the paradigm shifts
that have occurred on the iPhone.

00:00:58.770 --> 00:01:05.630
And this kind of like undoes a lot of the status quo that's
in your head and lets you innovate and think of new ways

00:01:05.629 --> 00:01:08.569
of solving problems for a Multi-Touch device.

00:01:08.569 --> 00:01:11.250
The second phase is product definition.

00:01:11.250 --> 00:01:14.930
This is probably the most important phase
that we'll talk about today and this is

00:01:14.930 --> 00:01:17.240
where you chart the course for your application.

00:01:17.239 --> 00:01:21.119
Where you figure out what it is that
you're going to deliver to your customers.

00:01:21.120 --> 00:01:26.340
The third phase is design and prototype and
this phase actually has 3 subphases to it.

00:01:26.340 --> 00:01:30.700
And in it we'll talk about, you know, understanding
the basics of iPhone user interface design

00:01:30.700 --> 00:01:35.990
and then we'll tackle paper prototyping, which is
a really valuable tool to figure out how to work

00:01:35.989 --> 00:01:38.429
out your application on paper before you touch the tools.

00:01:38.430 --> 00:01:41.830
It will save you a lot of time in the
end and you'd be surprised at how many

00:01:41.829 --> 00:01:46.200
of the most successful iPhone applications
took the time to paper prototype upfront.

00:01:46.200 --> 00:01:49.430
And then the last phase is polish and refinement.

00:01:49.430 --> 00:01:55.420
This is where you take a stable but average application
and you turn it into a solid and amazing application.

00:01:55.420 --> 00:01:58.180
So let's go ahead and get started.

00:01:58.180 --> 00:02:02.220
Here we have a great quote by Marshall
McLuhan, "We become what we behold.

00:02:02.219 --> 00:02:05.159
We shape our tools and then our tools shape us."

00:02:05.159 --> 00:02:08.189
And nowhere is this more true than on the iPhone.

00:02:08.189 --> 00:02:10.770
The iPhone truly is a revolutionary device.

00:02:10.770 --> 00:02:16.450
If you think of it as just another Smartphone,
you'll miss out on a wealth of opportunities.

00:02:16.449 --> 00:02:22.780
Finally we have a persistently connected device, a mobile
platform inside of our pocket that has an accelerometer,

00:02:22.780 --> 00:02:29.199
a GPS, a compass now, a camera, a fully featured
web browser, every feature that you would need,

00:02:29.199 --> 00:02:33.259
every input that you would need to make a
great application is available to you guys.

00:02:33.259 --> 00:02:35.949
All you have to do is dream up the next great thing.

00:02:35.949 --> 00:02:42.409
But to truly understand the paradigm shifts that have
occurred, we need to travel all the way back to 1970.

00:02:42.409 --> 00:02:49.430
As you know, shortly after we got done with punch
card computing we entered the terminal computing age.

00:02:49.430 --> 00:02:51.490
And this was marvelous at the time.

00:02:51.490 --> 00:02:56.360
But the problem with terminal computing is
that it's very formulaic and verbose by nature.

00:02:56.360 --> 00:02:59.620
And because of that it's like acquiring a second language.

00:02:59.620 --> 00:03:03.250
It isn't approachable by the average officer worker.

00:03:03.250 --> 00:03:07.150
So along came a great invention called the
mouse and the graphical user interface.

00:03:07.150 --> 00:03:10.780
And the graphical user interface democratized computing.

00:03:10.780 --> 00:03:16.740
It allowed that office worker who was used to walking over
to a physical filing cabinet and rifling through folders

00:03:16.740 --> 00:03:19.330
and documents and taking them over to their desk,

00:03:19.330 --> 00:03:23.480
to approach this virtual desktop with
virtual folders and virtual files.

00:03:23.479 --> 00:03:24.489
It was a 1 to 1 knack.

00:03:24.490 --> 00:03:25.570
They totally got it.

00:03:25.569 --> 00:03:31.439
And the only abstraction or the intermediary that they
needed to interact with their files and documents,

00:03:31.439 --> 00:03:34.539
was a mouse which they could just
move with their hand and click, right?

00:03:34.539 --> 00:03:36.620
So it's totally approachable.

00:03:36.620 --> 00:03:43.140
And as you know over the past 3 years we have matured the
graphical user interface on Apple platforms significantly.

00:03:43.139 --> 00:03:50.599
But when the iPhone was released we changed many of the
rules and today we're going to talk about those changes.

00:03:50.599 --> 00:03:55.930
With the desktop, we were guaranteed an accuracy
of 1 pixel by 1 pixel square and we were restricted

00:03:55.930 --> 00:04:00.270
to 1 input, 1 point of interaction at a time.

00:04:00.270 --> 00:04:03.960
Whereas with Multi-Touch, now we
have a variable accuracy rate, right?

00:04:03.960 --> 00:04:08.090
It's between 22 to 55 pixels depending
on the size of the person's finger

00:04:08.090 --> 00:04:10.469
and how they actually use their finger on the screen.

00:04:10.469 --> 00:04:15.030
And not only that we have up to 5
simultaneous inputs at a time to keep track of.

00:04:15.030 --> 00:04:18.519
So a lot of the interaction metaphors that
have just been standard fare, expected,

00:04:18.519 --> 00:04:23.240
yeah that's what we use, are no longer necessarily relevant.

00:04:23.240 --> 00:04:25.540
The first are scroll bars.

00:04:25.540 --> 00:04:29.720
Scroll bars, because they're so
small on a small form factor device,

00:04:29.720 --> 00:04:33.130
they're very difficult to interact
with physically with your finger.

00:04:33.129 --> 00:04:35.120
But more than that, they're unnecessary.

00:04:35.120 --> 00:04:40.769
If you think about it, when you sit down to a table with
a stack of papers, you don't grab some arbitrary control

00:04:40.769 --> 00:04:42.889
on the desk to move from page 1 to page 2.

00:04:42.889 --> 00:04:48.519
You simply slide off page 1 to get to page 2 with your
hand and now you can do the same thing on the iPhone.

00:04:48.519 --> 00:04:52.729
So scroll bars are now more informational
then they are functional.

00:04:52.730 --> 00:04:55.310
Another great change are dropdown menus.

00:04:55.310 --> 00:04:59.120
They simply do not scale well and
still say finger size friendly.

00:04:59.120 --> 00:05:02.980
And because of this we had to come up with
new controls and 1 of those are Pickers.

00:05:02.980 --> 00:05:06.170
Pickers are great for predefined
datasets and they're very tactile.

00:05:06.170 --> 00:05:10.080
They're very approachable, which we'll
get into more detail in a second.

00:05:10.079 --> 00:05:16.669
The most important change that's occurred is we've opened
up the opportunity for direct manipulation for our users.

00:05:16.670 --> 00:05:22.670
Now without requiring the intermediary, the mouse, to
interact with your data, now that you can use your hands

00:05:22.670 --> 00:05:28.840
and interact with your data directly, there's a wide array
of possibilities that have opened up to you as a developer.

00:05:28.839 --> 00:05:34.449
Direct manipulation has different
flavors and different implementations.

00:05:34.449 --> 00:05:36.629
We'll talk about 4 right now.

00:05:36.629 --> 00:05:38.569
The first is tapping for immediate effect.

00:05:38.569 --> 00:05:39.959
This is very straightforward.

00:05:39.959 --> 00:05:42.699
Everybody get this, you know, standard fare button.

00:05:42.699 --> 00:05:44.529
You tap a button, something happens, right?

00:05:44.529 --> 00:05:48.079
Or like a whack a mole game, you tap on the
things on the screen and they disappear.

00:05:48.079 --> 00:05:53.019
This is very approachable and this is kind of like
the lowest common denominator for direct manipulation.

00:05:53.019 --> 00:05:56.259
A second type is sequential tapping.

00:05:56.259 --> 00:06:02.879
We see this a lot on other platforms and usually when
a user encounters an application for the first time,

00:06:02.879 --> 00:06:07.699
they'll do sequential tapping only
after tapping and dragging has failed.

00:06:07.699 --> 00:06:09.949
This is tapping and dragging.

00:06:09.949 --> 00:06:14.459
And the reason why this is so approachable
and so expectable that 9 times

00:06:14.459 --> 00:06:19.180
out of 10 the average customer will try this
first, is because it maps to the real world.

00:06:19.180 --> 00:06:24.449
If you think about it, if you had a table and a pencil
on the table and you wanted to put it in a cup holder,

00:06:24.449 --> 00:06:26.479
you wouldn't touch the pencil and touch the cup holder.

00:06:26.480 --> 00:06:29.800
You would pick up the pencil and drag it
over and drop it inside of the cup holder.

00:06:29.800 --> 00:06:33.120
So dragging with a Multi-Touch screen is intuitive.

00:06:33.120 --> 00:06:36.939
It's what everybody expects and it's 1 of
the things that your customers will say,

00:06:36.939 --> 00:06:40.959
this makes it feel like an iPhone application
instead of just another application.

00:06:40.959 --> 00:06:47.279
With that said, you know, not one of these
is the one size fits all, end all, solution.

00:06:47.279 --> 00:06:50.579
You actually have to figure out which
one maps to your application most.

00:06:50.579 --> 00:06:54.819
Because you can see sequential tapping in our own
application for like mail, where we tap a message

00:06:54.819 --> 00:06:57.540
and then we choose from a folder, that's sequential tapping.

00:06:57.540 --> 00:07:00.010
We don't actually drag the message into a folder.

00:07:00.009 --> 00:07:03.360
But there's other examples where it would be relevant.

00:07:03.360 --> 00:07:09.199
Here we have abstraction, intentional abstraction and
you know I just got done expounding on how great it is

00:07:09.199 --> 00:07:14.819
that we no longer need abstraction but there's certain
contexts and genres where abstraction is really important.

00:07:14.819 --> 00:07:15.870
One of those is games.

00:07:15.870 --> 00:07:18.160
If you imagine you had like a shooting game, right,

00:07:18.160 --> 00:07:20.630
and all you had to do was tap all the
bad guys that showed up on the screen?

00:07:20.629 --> 00:07:21.680
It would be really easy.

00:07:21.680 --> 00:07:23.189
It would be approachable.

00:07:23.189 --> 00:07:25.959
It would be intuitive but it would be really easy.

00:07:25.959 --> 00:07:29.539
It would become very repetitive really quickly, right?

00:07:29.540 --> 00:07:33.800
So in some of these scenarios you
actually want to introduce abstraction.

00:07:33.800 --> 00:07:38.689
So by requiring the user to, you know, drag around a radical
around the screen, maybe they're using the accelerometer

00:07:38.689 --> 00:07:44.759
to move the radical and have a separate control to actually
fire the weapon, this creates a heightened level of stress.

00:07:44.759 --> 00:07:47.579
This is something that you wouldn't
want to do in a productivity application

00:07:47.579 --> 00:07:51.379
but it can be the difference between
a boring game and a fun game.

00:07:51.379 --> 00:07:54.110
So you know don't think that one is better than the other,

00:07:54.110 --> 00:07:57.400
it's just one is more favorable
for a certain type of application.

00:07:57.399 --> 00:08:02.929
So those are the interaction metaphors that have
changed, the paradigm shifts that we've seen.

00:08:02.930 --> 00:08:06.560
Now let's talk about the design
changes, the way things look.

00:08:06.560 --> 00:08:14.089
As you know on the iPhone we don't have
tool tips and we don't have rollover states.

00:08:14.089 --> 00:08:17.119
That's something that's very tricky
to do on a Multi-Touch screen.

00:08:17.120 --> 00:08:20.459
So we needed a way to visually
represent when something's a button.

00:08:20.459 --> 00:08:26.229
And many of you may have noticed that the way we tell if
something is a button, the way we communicate to our users

00:08:26.230 --> 00:08:29.470
that something is a button, is by rounding the corners.

00:08:29.470 --> 00:08:35.389
Anytime you see a rounded corner, most likely that's a
button or you know a linear ingredient, some kind of shine,

00:08:35.389 --> 00:08:40.610
some kind of sense of tactile-ness to it, that
usually connotes that something is a button.

00:08:40.610 --> 00:08:45.500
And in places like tool bars where we don't round the
corner of every single item inside of the toolbar,

00:08:45.500 --> 00:08:52.860
we use like again texture, depth, right, because we have an
inner shadow inside of each of these items and that connotes

00:08:52.860 --> 00:08:56.860
that even though this bar is glossy, you
automatically think this bar is interactive.

00:08:56.860 --> 00:09:01.360
Each one of these items are also interactive
even though they don't have rounding points.

00:09:01.360 --> 00:09:08.690
So the take away would be, you know, apply a sense of depth,
texture, weight, lighting, to any element that you want

00:09:08.690 --> 00:09:10.810
to feel compelling or tappable to your users.

00:09:10.809 --> 00:09:13.739
So that was the foundation.

00:09:13.740 --> 00:09:18.110
Super straightforward, it's just nice to get it out
of the way and you know kind of like get you to think

00:09:18.110 --> 00:09:20.800
in a new direction for the iPhone visually.

00:09:20.799 --> 00:09:22.069
Now let's talk about product definition.

00:09:22.070 --> 00:09:29.720
For most platforms the development
cycle is comprised of maybe 5

00:09:29.720 --> 00:09:34.009
or 6 percent being design and usually
that time is spent up front.

00:09:34.009 --> 00:09:40.090
Whereas with the iPhone, we recommend at
least half of your time be devoted to design.

00:09:40.090 --> 00:09:44.320
Many of you might be thinking, I'm an engineer, right?

00:09:44.320 --> 00:09:45.000
I'm not a designer.

00:09:45.000 --> 00:09:47.480
I don't make things look pretty in PhotoShop all day.

00:09:47.480 --> 00:09:51.070
So this half is something I'm either gonna
relegate to somebody else or I'm just gonna skip.

00:09:51.070 --> 00:09:57.170
But when I'm talking about design, I'm referring
to the process of scoping out your application,

00:09:57.169 --> 00:10:03.740
figuring out your hierarchy, mapping out the flow, figuring
out the objects, all the things that most engineers enjoy.

00:10:03.740 --> 00:10:07.710
So when I say design I'm not just talking about
drawing things or making things look pretty.

00:10:07.710 --> 00:10:09.930
I'm talking about being intentional.

00:10:09.929 --> 00:10:16.479
No one manufacturers an object that you buy in the real
world without taking a lot of time to design it up front.

00:10:16.480 --> 00:10:19.039
You don't build a house without laying out blueprints.

00:10:19.039 --> 00:10:20.519
No one builds as they go.

00:10:20.519 --> 00:10:25.220
And yet on so many other platforms that's
the way people approach software development.

00:10:25.220 --> 00:10:32.740
So to illustrate this, today we're going to look at a tried
and true example, we're gonna take iPhoto on the desktop

00:10:32.740 --> 00:10:37.039
and show you its conversions to photos on the iPhone.

00:10:37.039 --> 00:10:41.519
Invariably every single feature starts out
with a long list of nice to have features.

00:10:41.519 --> 00:10:46.919
And the problem with this is you end up building a
container and shoehorning features into that container.

00:10:46.919 --> 00:10:51.309
And it doesn't necessarily take care of all of your
customers, everybody has a pet feature that they want

00:10:51.309 --> 00:10:56.739
and everybody is just kind of like lackluster
about the eventual product that this produces.

00:10:56.740 --> 00:11:03.370
So it's important to remember that your goal is to
define a solution and not a collection of features.

00:11:03.370 --> 00:11:08.509
The very best applications on the iPhone are
those that solve a problem for a customer.

00:11:08.509 --> 00:11:18.019
And one of the best ways to make sure that you accurately
define a solution instead of just creating a container,

00:11:18.019 --> 00:11:20.750
is by crafting an application definition statement.

00:11:20.750 --> 00:11:27.950
An application definition statement
is comprised of three distinct parts.

00:11:27.950 --> 00:11:30.250
The first part is your differentiator.

00:11:30.250 --> 00:11:35.080
This is what's going to set your application
apart from all your other customers.

00:11:35.080 --> 00:11:39.570
Whether it's you know easy to use,
visually robust, whatever,

00:11:39.570 --> 00:11:41.410
this is what you're going to use to make your mark.

00:11:41.409 --> 00:11:44.579
It's what you do special with your solution.

00:11:44.580 --> 00:11:47.020
The second component is your actual solution.

00:11:47.019 --> 00:11:50.100
What problem are you going to solve for me as the customer?

00:11:50.100 --> 00:11:53.070
And the final component is your intended audience.

00:11:53.070 --> 00:11:58.750
And it's really important that you be as precise
as possible about who your intended customer is.

00:11:58.750 --> 00:12:05.200
If your intended customer were a traveling businessman
and he spends most of his time inside the airport,

00:12:05.200 --> 00:12:11.870
then you'd want a very monochromatic, you know, very
productivity oriented, scalable, clean application.

00:12:11.870 --> 00:12:17.200
But if your intended audience was a fireman and his
context is a burning building, you're gonna use, you know,

00:12:17.200 --> 00:12:22.900
honking buttons that say locate my teammates,
locate me or whatever, with overly saturate colors.

00:12:22.899 --> 00:12:27.009
So identifying who your intended audience
is is supremely important in figuring

00:12:27.009 --> 00:12:30.360
out what your application is going to look like in the end.

00:12:30.360 --> 00:12:37.019
So here we have the application definition statement for
iPhoto on the desktop, easy to use, digital photo editing,

00:12:37.019 --> 00:12:40.639
organizing and sharing for casual and amateur photographers.

00:12:40.639 --> 00:12:42.899
You can see that easy to use is our differentiator.

00:12:42.899 --> 00:12:45.569
This is what's gonna set iPhoto apart from competitors.

00:12:45.570 --> 00:12:46.920
It's easy to use.

00:12:46.919 --> 00:12:54.360
And we have three solutions inside of this ADS,
digital photo editing, organizing and sharing

00:12:54.360 --> 00:12:57.629
and our intended audience are casual
and amateur photographers.

00:12:57.629 --> 00:13:01.980
And as small as this application definition
statement is, that long list of features

00:13:01.980 --> 00:13:07.110
that you just saw were all the features required
to implement this application definition statement.

00:13:07.110 --> 00:13:13.269
And this is the UI necessary to implement those
features or those solutions and as you can imagine most

00:13:13.269 --> 00:13:16.990
of these would not map well to the iPhone.

00:13:16.990 --> 00:13:20.980
It would be very difficult to make these finger friendly.

00:13:20.980 --> 00:13:25.310
But more than that, when looking at our
customers, looking at our users of iPhoto,

00:13:25.309 --> 00:13:32.219
of the three solutions only one was prime,
only one was core to all of our customers.

00:13:32.220 --> 00:13:35.350
For instance, organizing, everybody
loves that their photo --

00:13:35.350 --> 00:13:40.230
they want their photos to be organized but very few
people actually take the time to organize their photos.

00:13:40.230 --> 00:13:42.909
Most people just scroll through a long list, right?

00:13:42.909 --> 00:13:48.610
That's why we've come up with things like places, faces and
events, to take that organization burden off of the user.

00:13:48.610 --> 00:13:52.710
An even smaller subset actually
takes the time to edit their photos.

00:13:52.710 --> 00:13:56.889
In the digital age film is cheap so people
take a lot of photos and if they find one

00:13:56.889 --> 00:13:58.319
that they don't like, they just delete it.

00:13:58.320 --> 00:14:02.740
They don't actually take the time to rotate
it, crop it and adjust all the levels.

00:14:02.740 --> 00:14:07.810
So sharing was the one solution that
everybody does, everybody shares their photos,

00:14:07.809 --> 00:14:11.399
whether it be through a slideshow with
people that are around them or emailing

00:14:11.399 --> 00:14:14.289
or uploading to a mobile media web server.

00:14:14.289 --> 00:14:20.789
So with that in hand we were able to craft an
application definition statement, easy to use,

00:14:20.789 --> 00:14:24.240
digital photo sharing, for casual iPhone users.

00:14:24.240 --> 00:14:31.399
Just circling back on the intended audience,
many developers punt on the intended audience.

00:14:31.399 --> 00:14:34.659
They say, iPhone Users in their
application definition statement.

00:14:34.659 --> 00:14:37.379
It's really important that you be as precise as possible.

00:14:37.379 --> 00:14:43.889
The reason for this, if we change the end to professional
photographers we'd end up with Aperture for the iPhone,

00:14:43.889 --> 00:14:47.720
a completely different application,
just by changing our intended audience.

00:14:47.720 --> 00:14:51.620
And to take it further, if we use
medical imaging we'd end up with MIMS

00:14:51.620 --> 00:14:54.519
or some other kind of imaging application on the iPhone.

00:14:54.519 --> 00:14:58.240
Even though it's easy to use and
it's digital photo sharing, right?

00:14:58.240 --> 00:15:02.110
So it's supremely important that
you figure out all three components.

00:15:03.179 --> 00:15:05.649
Once you have figured out your
application definition statement,

00:15:05.649 --> 00:15:10.929
the very next step is to begin
to actively filter out features.

00:15:10.929 --> 00:15:16.019
And we have a nice little mantra for you
guys that you may want to write down.

00:15:16.019 --> 00:15:21.579
You want to pick the few features most
frequently used by the majority of your users

00:15:21.580 --> 00:15:25.970
that are most appropriate for the mobile context.

00:15:25.970 --> 00:15:30.200
This is a great way to see if a feature can hold its own.

00:15:30.200 --> 00:15:33.690
Basically you're using your application
definition statement as like a filter,

00:15:33.690 --> 00:15:36.830
an ultimate check sum for your entire application.

00:15:39.850 --> 00:15:44.360
And here we are back at our original
list of features for iPhoto.

00:15:44.360 --> 00:15:47.159
And our new application definition statement is at the top

00:15:47.159 --> 00:15:54.939
and once we apply it you can see only a small
subset will actually make it in to Photos on iPhone.

00:15:54.940 --> 00:15:58.300
And everybody knows how Photos on iPhone
works, its super straight forward.

00:15:58.299 --> 00:16:03.829
You start out with a list of albums, you choose
an album and then you browse visually on a grid,

00:16:03.830 --> 00:16:08.570
you see you know which photo might I
be interested in and once you tap one

00:16:08.570 --> 00:16:10.840
of these photos you inspect that photo in full screen.

00:16:10.840 --> 00:16:16.129
And the toolbar at the bottom only
houses actions that pertain to sharing,

00:16:16.129 --> 00:16:17.830
the solution that we're trying to provide.

00:16:17.830 --> 00:16:21.150
You can do a slideshow, you can skip through the photos,

00:16:21.149 --> 00:16:25.230
you can upload to a MobileMe Gallery
and you can email the photos.

00:16:25.230 --> 00:16:30.550
And as simple as Photos is, it's one of the
most valuable applications on the iPhone.

00:16:30.549 --> 00:16:36.139
So when you're doing this to your own application
and you end up with a little small list of features

00:16:36.139 --> 00:16:38.830
that you're going to implement, understand that just

00:16:38.830 --> 00:16:44.320
because your application is simple doesn't mean
it won't be very valuable to your customers.

00:16:44.320 --> 00:16:48.720
So that's product definition, really, really important.

00:16:48.720 --> 00:16:51.970
Take the time to craft an application definition statement.

00:16:51.970 --> 00:16:57.610
I would challenge you that if you look at the most
successful applications that are on the store,

00:16:57.610 --> 00:17:04.130
over 70 % took the time to write an application
definition statement, they'll tell you if you ask them.

00:17:04.130 --> 00:17:08.610
So now let's talk about design and prototype.

00:17:08.609 --> 00:17:15.849
First we're going to start out
with understanding the basics.

00:17:15.849 --> 00:17:21.859
Here we have a great quote from T.S. Eliot, "You
must understand the rules before you can break them."

00:17:21.859 --> 00:17:27.029
And how many of you knew that the next slide
would be the human interface guidelines?

00:17:27.029 --> 00:17:30.000
[laughter] There was a mean for
a while that the HIG is dead.

00:17:30.000 --> 00:17:30.920
The HIG is not dead.

00:17:30.920 --> 00:17:36.990
In fact it's very much alive and it matters more
today than ever, especially with the iPhone.

00:17:36.990 --> 00:17:40.450
The human interface guidelines contain a wealth of knowledge

00:17:40.450 --> 00:17:44.180
that have been contributed to by
our engineers and our designers.

00:17:44.180 --> 00:17:47.700
They've taken a lot of time to
solve various edge cases for you

00:17:47.700 --> 00:17:51.299
and implement standardized controls
that our customers are used to.

00:17:51.299 --> 00:17:56.059
So if you treat the human interface guidelines as a
quick reference guide, you'll miss a lot of nuance,

00:17:56.059 --> 00:17:59.690
a lot of understanding of why things are the way they are.

00:17:59.690 --> 00:18:06.240
So our recommendation for you is that you read through the
human interface guideline cover to cover, read linearly.

00:18:06.240 --> 00:18:08.450
Don't use it as a quick reference guide.

00:18:08.450 --> 00:18:13.630
You will gain invaluable insight
into why something is the way it is.

00:18:13.630 --> 00:18:19.080
But as you know, a book is a book
and there are many things that those

00:18:19.079 --> 00:18:24.960
who read human interface guidelines don't quite understand
or they implement incorrectly and so I'm going touch

00:18:24.960 --> 00:18:30.710
on what we consider to be the basics of iPhone user
interface design right now so that there's no confusion,

00:18:30.710 --> 00:18:33.900
so that you guys can deliver stellar experiences.

00:18:33.900 --> 00:18:42.580
The basics loosely consist of Multi-Touch input, navigation,
lists, tool bars, tab bars and general aesthetics.

00:18:42.579 --> 00:18:48.240
So let's talk about Multi-Touch input first.

00:18:48.240 --> 00:18:53.500
As you know, we've worked really hard to make the
standard keyboard that comes with the iPhone as polished

00:18:53.500 --> 00:18:57.380
as it can be, as approachable and intuitive
as it can be for a Multi-Touch keyboard.

00:18:57.380 --> 00:19:05.060
But one of the best things about a Multi-Touch keyboard
is that you can draw any custom controls that you need

00:19:05.059 --> 00:19:07.859
for your application on the screen at any time.

00:19:07.859 --> 00:19:12.189
So finally we're away from this
age of WASD means up, down, left,

00:19:12.190 --> 00:19:17.360
right and hitting the 5 key on
a numb pad equals select, right?

00:19:17.359 --> 00:19:21.569
Now if you need a control that is
tools, then you draw a tool control.

00:19:21.569 --> 00:19:25.409
And if you need another language on the keyboard,
you draw another language on the keyboard.

00:19:25.410 --> 00:19:29.950
This is incredibly adaptive and pretty much the
sky's the limit in terms of whatever you need to draw

00:19:29.950 --> 00:19:32.450
on the screen you can let the user interact with.

00:19:32.450 --> 00:19:37.150
And the best part about Multi-Touch controls is
that it can go away when you don't need them, right?

00:19:37.150 --> 00:19:38.820
They don't have to be in the face of the user.

00:19:38.819 --> 00:19:42.079
They can be immersed inside of the application.

00:19:44.930 --> 00:19:53.090
So now let's talk about some things you can
actually implement inside of your own applications.

00:19:53.089 --> 00:19:57.119
You want to make sure you minimize the amount of
text entry inside of your application and you want

00:19:57.119 --> 00:19:59.759
to hold it off until the very last minute.

00:19:59.759 --> 00:20:03.799
The reason is when someone downloads your application
for the first time, they want to get going,

00:20:03.799 --> 00:20:07.750
they want to explore, they want to see what it is,
they want to like -- it's like touring a house.

00:20:07.750 --> 00:20:08.839
They want to check out every room.

00:20:08.839 --> 00:20:11.379
They don't want to have to fill
out a form to check out your house.

00:20:11.380 --> 00:20:14.660
They don't want to have to enter their name,
address, email, log in, set up a password,

00:20:14.660 --> 00:20:17.450
get redirected to a website, all this stuff.

00:20:17.450 --> 00:20:21.580
If you really need that information from
your users, save it until the last minute

00:20:21.579 --> 00:20:25.159
where they just cannot go any further before they
give you this information and try to chunk it

00:20:25.160 --> 00:20:27.890
out so that it's a little more approachable.

00:20:27.890 --> 00:20:30.730
Data entry for the most part, whether
it's on a Multi-Touch screen

00:20:30.730 --> 00:20:34.329
or a tactile keyboard, data entry
is not fun, no one enjoys it.

00:20:34.329 --> 00:20:35.240
That's why it's a profession.

00:20:35.240 --> 00:20:36.740
People get paid to do it.

00:20:36.740 --> 00:20:40.339
So minimize the amount that you require your users to do it.

00:20:40.339 --> 00:20:45.849
A great way that you can minimize it is by assuming what 80
% of your customers are going to enter in the first place.

00:20:45.849 --> 00:20:51.750
If you can offer a predefined list of choices, then most
of your customers can just tap something on the screen

00:20:51.750 --> 00:20:57.819
and let the other 20 % customize
the values for whatever they need.

00:20:57.819 --> 00:21:03.470
And one last note about entry, remember
everything that you can about your customers.

00:21:03.470 --> 00:21:06.720
If I enter my name and address in your
application once, I don't ever want to have

00:21:06.720 --> 00:21:10.509
to enter it again unless I go on vacation or I move.

00:21:10.509 --> 00:21:16.589
So take the time to pay attention to your customers
and beyond just like entering your name and address,

00:21:16.589 --> 00:21:21.799
there's some really nice touches that we've seen only
a small amount of applications take the time to do.

00:21:21.799 --> 00:21:28.559
If you notice that your user every morning at 8:00 A.M.
goes to a specific tab in a certain category to look

00:21:28.559 --> 00:21:33.200
at something, maybe it's like a news story
genre or whatever, then wouldn't it be cool

00:21:33.200 --> 00:21:36.789
when they launch their application at 8:00
A.M. you took them there automatically?

00:21:36.789 --> 00:21:38.629
Forget about saving state.

00:21:38.630 --> 00:21:39.760
You can become personal.

00:21:39.759 --> 00:21:41.299
You can become adaptive to your customer.

00:21:41.299 --> 00:21:44.829
You can really make it feel like this
application has a relationship with them.

00:21:44.829 --> 00:21:49.049
All the data's there, you're able to record these
things so why not take it to the next level?

00:21:49.049 --> 00:21:53.799
Now let's talk about navigation.

00:21:53.799 --> 00:21:55.930
Navigation is super straight forward on the iPhone.

00:21:55.930 --> 00:22:01.880
Basically we move from left to right with right to left
screen pushes when you move down through the hierarchy.

00:22:01.880 --> 00:22:05.430
But one of the critical components
that we see obliterated time

00:22:05.430 --> 00:22:09.200
and time again is the title area and then in the nav bar.

00:22:09.200 --> 00:22:12.630
The title is super, super important to your customers.

00:22:12.630 --> 00:22:15.810
It's like holding the hand of a
child as they cross the street.

00:22:15.809 --> 00:22:18.950
It lets them know where they are inside
of your application at all times.

00:22:18.950 --> 00:22:21.130
It's like it lets them form a mental array.

00:22:21.130 --> 00:22:28.640
If you take the title area away, customers immediately
feel disoriented, whether it's rational or not.

00:22:28.640 --> 00:22:33.160
There's a psychological process that goes on where
they feel frustrated inside of your application.

00:22:33.160 --> 00:22:38.740
I've seen too many applications that I hit
their icon on the springboard, I launch the app,

00:22:38.740 --> 00:22:43.240
I look at their splash screen, I see their logo in
the nav bar on the home screen, I drill down 2 levels

00:22:43.240 --> 00:22:45.700
and I still see the logo in the title bar area.

00:22:45.700 --> 00:22:49.700
I assure you if I've gone through all that
work, I know who made this application, right?

00:22:49.700 --> 00:22:52.470
I don't need to see your logo 3 levels deep inside your app.

00:22:52.470 --> 00:22:55.460
Main menu fine, if I haven't made a
choice in the hierarchy, no problem.

00:22:55.460 --> 00:22:56.220
Put your logo there.

00:22:56.220 --> 00:22:59.230
But as soon as I move down a level,
I need to see where I am.

00:22:59.230 --> 00:23:02.610
So make sure that you honor the
title bar area inside of the nav bar.

00:23:02.609 --> 00:23:08.069
The next thing that you want to
do is enable standard navigation.

00:23:08.069 --> 00:23:12.960
If your application is an application that's not
a game, then you should use standard navigation.

00:23:12.960 --> 00:23:17.769
The reason for this is that it's approachable,
it's intuitive, everybody knows what to expect.

00:23:17.769 --> 00:23:22.109
You'll notice that our back buttons don't just say
the word back and they don't just have a back arrow.

00:23:22.109 --> 00:23:25.500
They actually tell you what the
name of the previous screen was.

00:23:25.500 --> 00:23:30.440
If you find that you're getting into trouble, that the
back button is getting too long unwieldy, just truncate it.

00:23:30.440 --> 00:23:36.289
Say 12 characters and no more or one word and no more or
if the previous screen had like 3 different data types

00:23:36.289 --> 00:23:39.849
like photos, video and audio, just call it media.

00:23:39.849 --> 00:23:45.029
It just has to be enough of a tell to let the
user know what the previous screen was about.

00:23:47.750 --> 00:23:52.700
And then one final note, avoid
home buttons and breadcrumb trails.

00:23:52.700 --> 00:23:59.319
Home buttons are usually employed by applications
that are very deep and usually those applications feel

00:23:59.319 --> 00:24:02.859
as though they merit a home button
to save the user some time.

00:24:02.859 --> 00:24:06.949
But the catch is that home buttons are
actually very destructive for the average user.

00:24:06.950 --> 00:24:12.100
The reason is if you put a home button in the top left
hand corner of the screen and I've moved 6 or 7 levels deep

00:24:12.099 --> 00:24:18.019
in a hierarchy and I instinctively tap the top level of the
screen, which almosr every single one of your users will do

00:24:18.019 --> 00:24:22.269
to move back 1 level, I end up at the
main screen and I've lost 6 decisions.

00:24:22.269 --> 00:24:23.250
This is very destructive.

00:24:23.250 --> 00:24:24.759
This is very frustrating.

00:24:24.759 --> 00:24:30.150
If your application's performant, a user will not mind
tapping the top left hand part of the screen 6 times

00:24:30.150 --> 00:24:35.820
because it will be really fast and it will give them
granular control over how many levels they want to move up.

00:24:35.819 --> 00:24:41.839
So if you really do need to implement a home button, put
it anywhere other than the top left hand part of screen

00:24:41.839 --> 00:24:43.679
and breadcrumbs simply enough do not scale.

00:24:43.680 --> 00:24:51.519
After about 3 or 4 levels in a breadcrumb tree you start
to wrap or scroll and then all you gain is 1 extra level

00:24:51.519 --> 00:24:56.079
of explicitness beyond the title bar and a
back button that reflects the previous screen.

00:24:56.079 --> 00:24:59.569
So avoid both at all costs.

00:25:01.529 --> 00:25:07.470
Another important thing for navigation bars, use
standard controls for adding items to a list.

00:25:07.470 --> 00:25:12.049
The standard location for the add button
is the top right hand corner of the screen.

00:25:12.049 --> 00:25:14.200
This is where users will come to expect it to be.

00:25:14.200 --> 00:25:19.240
If you have the mutable list, most people
instinctively looked in the top right to add an item.

00:25:19.240 --> 00:25:23.470
Obviously there's extra cases where you have an edit
button or whatever and the add button moves to the toolbar

00:25:23.470 --> 00:25:26.640
at the bottom but if you can, put it in the top right.

00:25:26.640 --> 00:25:34.759
And then finally segmented controls are a great
way to increase the productivity of your users.

00:25:34.759 --> 00:25:39.069
It lets you show either similar or mutually
exclusive information in the same list

00:25:39.069 --> 00:25:41.710
and it can rapidly sort and filter
based on a segmented control.

00:25:41.710 --> 00:25:45.799
So now let's talk about lists.

00:25:45.799 --> 00:25:50.000
Lists are where you're going to spend a lot
of your time if you're a standard application.

00:25:50.000 --> 00:25:52.680
Lists are how you're going to present data to your users.

00:25:52.680 --> 00:25:55.519
And lists are comprised of 2 different table types.

00:25:55.519 --> 00:26:00.450
The first is a plain table and you can tell you're looking
at a plain table because the cells stretch from edge to edge

00:26:00.450 --> 00:26:04.789
of the screen and you're afforded category
dividers and an index view on the right

00:26:04.789 --> 00:26:07.430
so that you can scroll quickly through a list.

00:26:07.430 --> 00:26:09.980
Plain tables are incredibly performant.

00:26:09.980 --> 00:26:11.289
They're very efficient.

00:26:11.289 --> 00:26:14.750
If you have long lists of information,
go with a plain table.

00:26:14.750 --> 00:26:19.589
Group tables on the other hand are
a little more graphically robust.

00:26:19.589 --> 00:26:24.399
The cells are offset from the edges of the
screen and you can have implicit grouping

00:26:24.400 --> 00:26:28.140
or explicit grouping with labels above each subsection.

00:26:28.140 --> 00:26:30.430
This is a great way to chunk information.

00:26:30.430 --> 00:26:34.539
If you have 3 phone numbers in a group table you don't
need to put a label up above that says phone numbers

00:26:34.539 --> 00:26:40.190
because it's implied by having 3 phone numbers all
next to each other and offset from the other items.

00:26:40.190 --> 00:26:46.080
Another great recommendation for group tables
is that you use category icons on the left.

00:26:46.079 --> 00:26:53.189
A lot of people view category icons as if they were
eye candy, just something that makes things look nice.

00:26:53.190 --> 00:26:59.400
But they actually have a very tangible benefit
to efficiency and productivity of your users.

00:26:59.400 --> 00:27:05.370
The reason for this is that the human mind, when it
comes to a screen, imparts its shapes and colors first

00:27:05.369 --> 00:27:07.529
and then it breaks down to individual words.

00:27:07.529 --> 00:27:09.460
And if you're from the United States you go from top left

00:27:09.460 --> 00:27:11.890
to bottom right reading all the words
until you find one that you like.

00:27:11.890 --> 00:27:17.670
If you have category icons you can simply
go from icon to icon and when you feel

00:27:17.670 --> 00:27:21.310
like you've found the icon that's right
for you, you read the label next to it

00:27:21.309 --> 00:27:22.940
and if that's right then you tap the row.

00:27:22.940 --> 00:27:28.680
So you can save your user half the time it would take
to find something in a list by having category icons.

00:27:28.680 --> 00:27:35.400
And if you employ color then your users can actually take it
a step further and develop spatial memory and know exactly

00:27:35.400 --> 00:27:40.440
where on the screen that item is or where that color is
without even having to read or parse any of the glitz.

00:27:40.440 --> 00:27:48.220
So category icons can be a huge buff for performance of
your application in terms of productivity and efficiency.

00:27:48.220 --> 00:27:52.610
Here we have disclosure indicators.

00:27:52.609 --> 00:27:59.019
Disclosure indicators are our way of showing a user
that something's tappable, that this row is interactive.

00:27:59.019 --> 00:28:05.109
On the web the visual metaphor is blue text with an
underline but those aren't very finger friendly hit targets

00:28:05.109 --> 00:28:08.269
so the way we let you know that this entire cell,

00:28:08.269 --> 00:28:12.639
this entire row is tappable is by
using the grey disclosure indicator.

00:28:12.640 --> 00:28:18.850
The grey arrow is distinct in behavior
from the blue disclosure button.

00:28:18.849 --> 00:28:21.359
The advance disclosure button has
a completely different behavior.

00:28:21.359 --> 00:28:27.079
We see a lot of apps opt for this just because it's prettier
but actually it's supposed to have a different behavior.

00:28:27.079 --> 00:28:32.399
The blue disclosure button means if you tap anywhere
on the row other than the button, you go to that item.

00:28:32.400 --> 00:28:36.450
Whereas if you tap the button itself,
you go to an ancillary or details view

00:28:36.450 --> 00:28:41.210
for the item, so an important distinction there.

00:28:41.210 --> 00:28:47.160
Pickers we touched on earlier, pickers are really
great for predefined datasets and especially

00:28:47.160 --> 00:28:50.480
if you have multiple columns in a dataset.

00:28:50.480 --> 00:28:56.880
Earlier we talked about how most users don't want to take
the time to enter text and so this also solves that problem.

00:28:56.880 --> 00:29:02.450
You can imagine that how much more difficult it
would be for me to enter September on a keyboard,

00:29:02.450 --> 00:29:07.650
9th and then 2007 as opposed to
just flicking my finger on a picker.

00:29:07.650 --> 00:29:13.670
Because within 3 swipes on a picker you can go
through 12 items, so they're very efficient.

00:29:13.670 --> 00:29:21.340
Tool bars house the actions, the verbs of your application
and for the most part they shouldn't have textual labels.

00:29:21.339 --> 00:29:26.779
The icons should be descriptive enough to
let the user know what it's going to do.

00:29:26.779 --> 00:29:29.549
And if the icon's not descriptive
enough, if it's too generic,

00:29:29.549 --> 00:29:32.149
then it's more than likely going to
be a container for other actions.

00:29:32.150 --> 00:29:35.790
You've seen like action sheet icons and things like that.

00:29:35.789 --> 00:29:40.839
So make sure that you don't put textual labels on a toolbar
and make sure that a toolbar pertains either to the entirety

00:29:40.839 --> 00:29:46.779
of the application or just the
screen that it's above or below.

00:29:48.869 --> 00:29:52.199
Tab bars are not tool bars.

00:29:52.200 --> 00:29:54.890
Tab bars are our highest abstraction in the iPhone.

00:29:54.890 --> 00:29:58.400
They house the containers, the
categories, the modes of your application

00:29:58.400 --> 00:30:02.150
and when you change tabs there shouldn't
be animation in the content area.

00:30:02.150 --> 00:30:03.310
The content should just blip.

00:30:03.309 --> 00:30:09.399
And you'll notice that with the tab bar we have
textual labels beneath them and for the most part,

00:30:09.400 --> 00:30:12.100
a solid tab bar icon is one that's like a silhouette,

00:30:12.099 --> 00:30:15.689
something that you can imagine you know using
a flashlight and casting a shadow on the wall.

00:30:15.690 --> 00:30:19.960
That makes a really good tab bar icon
because the mind can parse out the shapes

00:30:19.960 --> 00:30:22.559
without having to look at a lot of fine grain detail.

00:30:22.559 --> 00:30:26.389
So how do you know when to use the tab bar?

00:30:26.390 --> 00:30:31.009
We have a really good example for this, this is
a hypothetical version of the iPod application.

00:30:31.009 --> 00:30:34.009
Imagine if the iPod application
didn't ship with the tab bar.

00:30:34.009 --> 00:30:36.809
What would the implications be for the user?

00:30:36.809 --> 00:30:41.509
Well the first is that every single time you launch
the app if you didn't have something in Now Playing,

00:30:41.509 --> 00:30:45.809
you would start with this long list of categories
and say your favorite category was genre.

00:30:45.809 --> 00:30:47.789
Say that's how you like to sort your music.

00:30:47.789 --> 00:30:49.839
Well you'd be out of luck because you'd have to scroll down.

00:30:49.839 --> 00:30:52.740
It would be below the fold every
single time you launch the app.

00:30:52.740 --> 00:31:02.539
And the crazy thing is or the logical thing is that
people favor 1, 2, 3 different ways of sorting their music

00:31:02.539 --> 00:31:05.430
over all the others and they rarely
dabble with all these other categories.

00:31:05.430 --> 00:31:08.150
So why present this visual noise?

00:31:08.150 --> 00:31:13.370
With a tab bar, a user can customize
which categories are in which position.

00:31:13.369 --> 00:31:18.269
So if I'd like, I can put genre in the first position so
that every time I launch the app I'm looking at genres

00:31:18.269 --> 00:31:20.839
or every time I launch the app I'm looking at songs.

00:31:20.839 --> 00:31:25.629
This is a great way to cater to your customers and
because you can't guess which one they're going to favor,

00:31:25.630 --> 00:31:30.580
you allow them to use customization
to get which one they favor.

00:31:30.579 --> 00:31:36.099
Applications however that don't have more than 5 tabs don't
have the ability to edit or rearrange the tab bar so it's

00:31:36.099 --> 00:31:40.789
on you to figure out what the order
is going to be for the tab bar icons.

00:31:40.789 --> 00:31:45.220
We recommend that the most important or the
most frequently used items be on the far left

00:31:45.220 --> 00:31:49.130
and then you go off from there toward the right.

00:31:49.130 --> 00:31:56.680
There is another recommendation that we'd like to make and
that is if you can find a way of putting featured, live,

00:31:56.680 --> 00:32:03.890
dynamic, fresh content into a tab this makes a
remarkably better experience for your application.

00:32:03.890 --> 00:32:08.590
The reason is, people will launch your application
without having something in mind that they need to do

00:32:08.589 --> 00:32:12.819
or that they want to do but instead they
can launch your application and just browse,

00:32:12.819 --> 00:32:16.139
hear what other people are talking
about with regard to this genre.

00:32:16.140 --> 00:32:20.420
And you'd be surprised, you think that
you know my app is about power tools.

00:32:20.420 --> 00:32:22.230
No one wants to talk about power tools.

00:32:22.230 --> 00:32:27.230
Everybody loves to talk about something and if inside of
your application, you facilitate the ability for people

00:32:27.230 --> 00:32:32.720
to either feature something or talk about something,
people will launch your application far more often then

00:32:32.720 --> 00:32:35.720
if it's only when they have something
in mind like purchasing a power tool

00:32:35.720 --> 00:32:38.950
or entering a new power tool that
they've purchased recently.

00:32:38.950 --> 00:32:44.009
This will increase the use of your application and the
more people use your application, the more likely they are

00:32:44.009 --> 00:32:48.230
to share it with their friends and family or their friends
and family will see them using it and say hey what's that?

00:32:48.230 --> 00:32:48.950
What are you using?

00:32:48.950 --> 00:32:53.330
So incorporating fresh or dynamic content
into your application is a great way

00:32:53.329 --> 00:32:56.649
to extend the life and the relevance of your application.

00:32:56.650 --> 00:33:02.660
And if you were to put fresh or featured content, as
you know you'd put in the first position, far left.

00:33:02.660 --> 00:33:08.340
You can see that in the iTunes app and the App Store app.

00:33:08.339 --> 00:33:12.379
So our final section on the basics, general aesthetics.

00:33:12.380 --> 00:33:15.450
Basically you want to put the most
important information at the top of the list

00:33:15.450 --> 00:33:18.630
and the least frequently used at the bottom of the list.

00:33:18.630 --> 00:33:24.300
With that said however, just because content is
below the fold doesn't mean it's dead like in the web

00:33:24.299 --> 00:33:28.220
because on the iPhone we have inertia based
lists and people love to play with lists.

00:33:28.220 --> 00:33:32.069
They'll throw them up and down just as like you know a game.

00:33:32.069 --> 00:33:36.250
And because of that, if someone comes to a list
and they see something that they don't want,

00:33:36.250 --> 00:33:39.960
if it's not relevant to what they're
looking for, they'll happily throw the list.

00:33:39.960 --> 00:33:45.250
And where this applies is mostly for those of you
who are thinking of doing ad generated applications,

00:33:45.250 --> 00:33:49.960
if you put your advertisement at the bottom
of the screen, you anchor it into the chrome.

00:33:49.960 --> 00:33:54.590
Then your user is quickly going to
learn to just defocus from the chrome

00:33:54.589 --> 00:33:57.990
and look at the content and totally
ignore your advertisement.

00:33:57.990 --> 00:34:04.059
So instead if you would tactfully, tastefully
interleave your advertisement inside the content area,

00:34:04.059 --> 00:34:07.819
whenever they're scrolling like a long
article or whatever and there's a very clean,

00:34:07.819 --> 00:34:12.719
nice advertisement interleaved every 3 paragraphs
or whatever, when it goes by your user is going

00:34:12.719 --> 00:34:16.629
to pay attention to it, they're going to look at it and
the tap-through rate's going to increase dramatically.

00:34:16.630 --> 00:34:22.110
Try to use standard controls whenever possible.

00:34:22.110 --> 00:34:27.400
If there's a control that exists for something
that you're trying to do, use the standard control.

00:34:27.400 --> 00:34:32.019
Not just because we made it and we want you to
use our logos but because it's approachable.

00:34:32.019 --> 00:34:33.480
The average user knows what it means.

00:34:33.480 --> 00:34:36.449
They don't have to figure out a custom
control and there won't be overlap

00:34:36.449 --> 00:34:39.529
from controls that do something slightly different.

00:34:39.530 --> 00:34:43.320
It improves the entire platform as a
whole when you use standardized controls.

00:34:43.320 --> 00:34:48.019
And then finally, make things clean.

00:34:48.019 --> 00:34:49.730
Make things look really good.

00:34:49.730 --> 00:34:52.969
If your application is list centric
we recommend that you look

00:34:52.969 --> 00:34:56.480
at the context application and just rip it off, bar none.

00:34:56.480 --> 00:35:02.659
Look at the labels, the values of
the fonts, the waiting, the spacing.

00:35:02.659 --> 00:35:05.440
You notice how each element is offset from one another?

00:35:05.440 --> 00:35:07.900
We don't have text flush with the edge of the cell.

00:35:07.900 --> 00:35:11.599
We don't have an image flush with the
edge of the screen, things like that.

00:35:11.599 --> 00:35:13.799
You want a screen to look physically sound.

00:35:13.800 --> 00:35:16.800
Like you could stack these up in the
real world and it would make sense,

00:35:16.800 --> 00:35:19.019
that it would look clean, it would look approachable.

00:35:19.019 --> 00:35:26.599
So those were the basics, for the most part straightforward.

00:35:26.599 --> 00:35:30.779
If there's anything that you feel like I rushed
through, consult the human interface guidelines.

00:35:30.780 --> 00:35:33.970
We cover everything in far more
depth than what I just talked about.

00:35:33.969 --> 00:35:37.980
So now let's talk about application styles.

00:35:37.980 --> 00:35:41.869
Earlier we were figuring out what
type of application you have, right?

00:35:41.869 --> 00:35:46.460
What your application definition statement's going to be.

00:35:46.460 --> 00:35:52.510
Once you have that figured out then it's time to figure
out what silo, what category do you map to closest?

00:35:52.510 --> 00:35:55.850
So you can figure out how other people
have solved problems similar to yours.

00:35:55.849 --> 00:36:00.779
And the best way to do that is to
throw your application onto this grid.

00:36:00.780 --> 00:36:05.560
You can see that the two primary axes are content and usage.

00:36:05.559 --> 00:36:08.239
If your application were to land
in the top right hand corner,

00:36:08.239 --> 00:36:13.059
you would end up with a productivity
application or what we call serious tool.

00:36:13.059 --> 00:36:16.529
A great example of a serious tool is mail.

00:36:16.530 --> 00:36:22.430
Serious tools are highly scalable, highly
performant and are productivity-centric.

00:36:22.429 --> 00:36:28.739
So basically your user is focusing on getting something
done, either getting something made, changed or done

00:36:28.739 --> 00:36:34.159
and because of that you want the user interface
to kind of just go away, to just disappear.

00:36:34.159 --> 00:36:39.049
It doesn't get in the way of the user
and it facilitates their ability to work

00:36:39.050 --> 00:36:42.080
And in mail as you know it's very scalable, right?

00:36:42.079 --> 00:36:47.569
Not only do we have multitudes of messages but we
have multiple mailboxes and multiple accounts as well.

00:36:47.570 --> 00:36:55.059
And because of that the UI has to be far
more standard than if it were a game.

00:36:55.059 --> 00:37:00.690
Fun tools are just as productive as
serious tools or maybe slightly less.

00:37:00.690 --> 00:37:05.869
But the thing that's interesting about them is
instead of forcing you from point A to point B

00:37:05.869 --> 00:37:11.259
and know exactly what you're doing, fun tools allow
you to explore so like you can be very intentional.

00:37:11.260 --> 00:37:17.380
I'm going to the pizza place and give me the
address and give me the directions but on your way

00:37:17.380 --> 00:37:21.440
to the pizza place you can be thinking,
what's around the pizza place?

00:37:21.440 --> 00:37:25.940
And you can see that because it's
more graphically rich, you can browse.

00:37:25.940 --> 00:37:28.420
You can see what are the other elements
that are around the pizza place?

00:37:28.420 --> 00:37:30.789
What other things might be relevant to me?

00:37:30.789 --> 00:37:37.929
So a fun tool allows you to explore and still be productive
and because of that you want to minimize the hierarchy

00:37:37.929 --> 00:37:43.369
so whereas a serious tool will have a large, rich, expansive
hierarchy, a fun tool should have a minimal hierarchy

00:37:43.369 --> 00:37:51.219
but allow you to kind of almost branch off
at any moment, very similar to the web.

00:37:51.219 --> 00:37:54.609
Fun entertainment, everybody knows its games, right?

00:37:54.610 --> 00:37:57.840
It's any type of application that's super immersive.

00:37:57.840 --> 00:38:03.670
Something that just invites the user in and they
have an experience, they experience a story.

00:38:03.670 --> 00:38:06.309
Because of this we recommend that you use custom controls.

00:38:06.309 --> 00:38:09.969
This is one of the few categories where we're
like, please don't use standard controls.

00:38:09.969 --> 00:38:15.230
You want to make sure that your controls honor the
convention so like perhaps your main menu button is

00:38:15.230 --> 00:38:18.500
in the top left or your back button is in
the top left but you want your controls

00:38:18.500 --> 00:38:20.889
to reflect the story of your application.

00:38:20.889 --> 00:38:25.400
They want to visually match the
atmosphere of your application

00:38:25.400 --> 00:38:27.389
and you want to minimize the amount of hierarchy.

00:38:27.389 --> 00:38:31.839
The best applications are those that you know give
you a main menu, play game and you're playing a game.

00:38:31.840 --> 00:38:36.730
If you have to go 3 or 4 levels before you can play a game,
that's usually a bad sign and that usually causes a lot

00:38:36.730 --> 00:38:43.490
of frustration and people will stop the game before
they even get going to see how valuable the game is.

00:38:43.489 --> 00:38:48.429
Here we have serious entertainment and even
though it sounds like an oxymoron it's really not.

00:38:48.429 --> 00:38:54.710
Serious entertainment is the most
hyper-efficient way you can provide your user

00:38:54.710 --> 00:38:57.639
to browse content that has absolutely no productivity.

00:38:57.639 --> 00:39:00.960
We could argue maybe educational
content who has productivity

00:39:00.960 --> 00:39:09.099
but serious entertainment lets you see some things
that are available to you but it's very scalable.

00:39:09.099 --> 00:39:15.400
You can imagine the iTunes Store and the App Store have
lots of content that the user needs to be able to navigate

00:39:15.400 --> 00:39:20.599
and so serious entertainment lets you parse that
information, navigate efficiently but in the end you end

00:39:20.599 --> 00:39:29.690
up watching a video or downloading a game or whatever,
so potential hierarchal and moderately graphical.

00:39:29.690 --> 00:39:34.369
You can see that this list is a little
more graphically rich than the mail list

00:39:34.369 --> 00:39:38.789
but for the most part it's still very efficient.

00:39:38.789 --> 00:39:41.529
If you're not in any of the corners, then you're a utility.

00:39:41.530 --> 00:39:47.150
And utilities are the fast food applications
of the iPhone and that's not a bad thing.

00:39:47.150 --> 00:39:50.389
Utilities are incredibly successful.

00:39:50.389 --> 00:39:56.750
When you approach designing a utility, a nice rule of
thumb is when you finish with the screen if you can set it

00:39:56.750 --> 00:39:59.960
on you know a dock and put it on a bookshelf 6 feet away,

00:39:59.960 --> 00:40:02.750
if you can still understand the user
interface, then that's a good utility.

00:40:02.750 --> 00:40:06.079
You want to make sure that they're super narrow in scope.

00:40:06.079 --> 00:40:09.099
Usually you navigate among one level of peers, right?

00:40:09.099 --> 00:40:10.630
You don't have multiple levels of peers.

00:40:10.630 --> 00:40:14.050
So like for the weather app we have
multiple cities and it's just details

00:40:14.050 --> 00:40:17.710
for each city and you're swiping, using pagination.

00:40:17.710 --> 00:40:21.769
The best utilities are gone in 60 seconds.`

00:40:21.769 --> 00:40:28.110
They're -- you launch it, you get
information, you quit the app.

00:40:28.110 --> 00:40:31.920
So even though we gave you some you know
very explicit guidelines around each

00:40:31.920 --> 00:40:35.200
of these application types, there
are no hard and fast rules.

00:40:35.199 --> 00:40:41.519
Some of the best applications mix and borrow from all
the different genres, if they truly are an outlier

00:40:41.519 --> 00:40:47.679
and they aren't necessarily right in 1 of the corners.

00:40:47.679 --> 00:40:53.079
So now let's talk about paper prototyping.

00:40:53.079 --> 00:41:01.460
Our ardent recommendation for you is that you work out your
entire application on paper before you even touch the tools.

00:41:01.460 --> 00:41:06.309
You can be ramping up with the tools, you can be learning
about the tools, but don't write code that you plan

00:41:06.309 --> 00:41:10.139
on shipping until you've worked out every screen on paper.

00:41:10.139 --> 00:41:12.889
Many of you are thinking, that
sounds like a waste of my time.

00:41:12.889 --> 00:41:18.639
Why would I take the time to draw pretty pictures
on paper when I could be getting to work?

00:41:18.639 --> 00:41:21.920
The reason is, paper is cheap.

00:41:21.920 --> 00:41:24.220
It's really cheap when it comes to the time spent.

00:41:24.219 --> 00:41:29.179
If you draw out a screen and you work out every single
screen in the entire flow of your application on paper

00:41:29.179 --> 00:41:34.659
and you realize there's an educates there, I totally didn't
account for it here, you crumple up 2 pieces of paper

00:41:34.659 --> 00:41:39.329
and you throw it away and you start again as
opposed to throwing away 3 days worth of code.

00:41:39.329 --> 00:41:44.009
So it's really important that you take the
time to work out your interface on paper.

00:41:44.010 --> 00:41:46.800
And for those of you who feel like
you know I'm not an artist.

00:41:46.800 --> 00:41:47.610
I don't draw.

00:41:47.610 --> 00:41:53.740
If you can draw a square and write a label inside the
square, you can prototype your entire interface on paper.

00:41:53.739 --> 00:42:02.189
And we've seen some really great applications that the
developer took the time to prototype on paper and it's,

00:42:02.190 --> 00:42:05.570
I mean I have yet to see an application that the
developer took the time to prototype on paper

00:42:05.570 --> 00:42:08.840
that wasn't fantastic, that wasn't exceptional.

00:42:08.840 --> 00:42:16.010
Anybody can do it and instead of me sitting here
and expounding on the value of paper prototyping,

00:42:16.010 --> 00:42:21.490
we have a guest who's going to share with you their
experience developing applications on the iPhone

00:42:21.489 --> 00:42:29.269
by working them out on paper first and forehand and that
is Verner Yonik [assumed spelling] from Cultured Code.

00:42:29.269 --> 00:42:36.119
>>Hello, when we develop things for the iPhone we
only had 2 months time because we wanted to be ready

00:42:36.119 --> 00:42:40.940
for the App Store launch last year
and what we did to make this happen

00:42:40.940 --> 00:42:52.349
in 2 months is we spent 1 month designing the app
entirely and then 1 month coding the app, 1 of the app.

00:42:52.349 --> 00:42:58.449
And it really turned out that if you have the entire app
designed on sketches first that its way easier to code later

00:42:58.449 --> 00:43:01.279
on because you know exactly where you want to go.

00:43:01.280 --> 00:43:06.980
And today I want to share 3 design stories
with you during the design process of things

00:43:06.980 --> 00:43:10.269
and I'm going to start with tap bar versus tool bar.

00:43:10.269 --> 00:43:17.750
Since Things is a task management application, it's a
utility, sorry, it's a productivity style application

00:43:17.750 --> 00:43:20.980
and it's easy to use the navigation metaphor.

00:43:20.980 --> 00:43:28.139
So we knew we wanted to do that and the question
was is it possible to have a tab bar at the bottom?

00:43:28.139 --> 00:43:35.139
We liked this idea very much because it's very easy to
switch between your to-dos and your projects for instance.

00:43:35.139 --> 00:43:43.239
So that's why we tried this sketch and it turns
out there is a few problems with this approach.

00:43:43.239 --> 00:43:49.529
First of all we knew that the tabs at the
bottom wouldn't suffice in the long term.

00:43:49.530 --> 00:43:53.850
We wanted to add more so we would have to have that...

00:43:53.849 --> 00:43:56.289
things and we didn't like that as much.

00:43:56.289 --> 00:44:03.849
The next problem is that switching wouldn't
be so quick after all because if you look

00:44:03.849 --> 00:44:08.150
at the to-dos we offer different lists
that you can put your to-do's into.

00:44:08.150 --> 00:44:11.619
So even though you tap on the bottom
of to-dos you still have to navigate

00:44:11.619 --> 00:44:17.529
into the different lists place so
it's not that quick of switching.

00:44:17.530 --> 00:44:22.290
One possible solution for this would have
been to have a segmented control at the top

00:44:22.289 --> 00:44:26.099
and then have the user switch lists
with that but the problem here is

00:44:26.099 --> 00:44:30.599
that you don't really educate the
user what those icons actually mean.

00:44:30.599 --> 00:44:34.079
So we didn't like this either.

00:44:34.079 --> 00:44:40.230
And then of course the biggest problem is inside
a list you want the user to be able to do certain,

00:44:40.230 --> 00:44:49.059
perform certain actions like moving items to other lists
or filtering the current lists by due dates for instance.

00:44:49.059 --> 00:44:54.659
And even more important you want the user
to be able to add to-dos to the current list

00:44:54.659 --> 00:44:58.000
and where do you put all those
action buttons or those actions?

00:44:58.000 --> 00:44:59.420
Where do you want to put them?

00:44:59.420 --> 00:45:05.869
You can already see that we had a hack here that the
+ in the lower right corner actually adds a to-do

00:45:05.869 --> 00:45:09.969
to the current list so it's a tab bar
item that operates on the current list

00:45:09.969 --> 00:45:13.419
which is not really what you're supposed to do.

00:45:13.420 --> 00:45:21.820
So we really felt that the tab bar is not the way to
go and instead of using this instantaneous navigation

00:45:21.820 --> 00:45:28.610
that is available at all times, we decided to offer
the navigation completely from the home screen.

00:45:28.610 --> 00:45:31.160
So this is on the left side.

00:45:31.159 --> 00:45:35.049
So all lists are accessible from this home screen.

00:45:35.050 --> 00:45:41.440
And it turns out this worked really beautifully
because now we had space at the bottom for a tool bar

00:45:41.440 --> 00:45:47.250
and inside lists we could offer different
tools to the user that he can use.

00:45:47.250 --> 00:45:54.199
And this is actually how we shipped
version 1 out of our app.

00:45:57.000 --> 00:46:00.539
The next story is adding to-dos.

00:46:00.539 --> 00:46:05.489
When you're inside a list you want to be able to add
to-dos to the current list and we thought about where

00:46:05.489 --> 00:46:12.279
to put the + button in the screen and one obvious
choice would have been the upper right corner

00:46:12.280 --> 00:46:16.290
but we knew we wanted an Edit button
there because you would have to be able

00:46:16.289 --> 00:46:21.000
to rearrange to-dos or to delete them so that was no option.

00:46:21.000 --> 00:46:24.769
The other side is no option either because
you have to use that for navigation.

00:46:24.769 --> 00:46:31.900
So the only place left was the tool bar and we
have different tools in our tool bar depending

00:46:31.900 --> 00:46:40.460
on what list you're actually in and we wanted a + to be
at a consistent position so the user always knows blindly

00:46:40.460 --> 00:46:46.650
where he has to tap in order to add a
new to-do so we chose the left side.

00:46:46.650 --> 00:46:54.920
And what's even more important when you design a task
management app is whenever the user gets out his iPhone

00:46:54.920 --> 00:47:01.250
and launches the app, he always has to be
able to quickly add a new to-do to his data.

00:47:01.250 --> 00:47:07.090
He doesn't want to navigate complex hierarchies
until he's able to actually add a to-do.

00:47:07.090 --> 00:47:15.840
So in every screen we wanted to have a + button at the same
position and what that meant is that even in the home screen

00:47:15.840 --> 00:47:22.650
where you're not inside a current list, you still have
the + button at the lower left corner and what happens

00:47:22.650 --> 00:47:28.650
when you press that + button is it just
adds the to-do into the inbox by default.

00:47:30.119 --> 00:47:37.059
Now inside a list, this is the next list for
example, if you press the + button you would assume

00:47:37.059 --> 00:47:43.989
that that would add the to-do to the current list but if
you think about the use case where the user just takes

00:47:43.989 --> 00:47:48.379
out his iPhone on his way and wants
to add a new to-do quickly,

00:47:48.380 --> 00:47:51.099
he might not want to add it to the current list he's in.

00:47:51.099 --> 00:47:53.779
He might want to add it to the inbox.

00:47:53.780 --> 00:48:00.630
So we thought about how do we offer these two options,
adding to the current list and adding to the inbox.

00:48:00.630 --> 00:48:04.960
And one solution would have been to
just have two buttons at the bottom,

00:48:04.960 --> 00:48:08.500
one for adding to the current list, one inbox button.

00:48:08.500 --> 00:48:13.769
And we didn't like this approach for two
reasons, first it crowds the tool bar.

00:48:13.769 --> 00:48:20.809
You already have quite a few action buttons there so that's
not that nice and then also both buttons actually bring

00:48:20.809 --> 00:48:28.429
up a very similar sheet because in both cases you would
have to enter a title, a note, a due date to the to-do

00:48:28.429 --> 00:48:33.129
so it's very similar what comes up yet you have
two buttons and you have to convey the difference

00:48:33.130 --> 00:48:37.730
or you might add an icon and that's not so easy to do.

00:48:37.730 --> 00:48:39.740
So we didn't like this either.

00:48:40.789 --> 00:48:47.769
The solution we went for then is that you only have
one + button at the bottom and this is what comes up.

00:48:47.769 --> 00:48:52.789
At the top you can enter the title, the notes, the due date
and at the bottom you can just choose the list you want this

00:48:52.789 --> 00:48:58.730
to go to and it's always pre-populated with the
current list that you're in but you can easily switch

00:48:58.730 --> 00:49:02.559
to the inbox or any other list if you want to.

00:49:02.559 --> 00:49:06.099
So this was the solution for adding to-dos.

00:49:06.099 --> 00:49:09.489
This is how we shipped version 1.0.

00:49:09.489 --> 00:49:12.519
The last story is our quick entry sheet.

00:49:12.519 --> 00:49:14.570
This is the sheet I just showed you.

00:49:14.570 --> 00:49:17.700
That's how we called it, quick entry.

00:49:17.699 --> 00:49:24.289
And we shipped version 1.0 with this and our users
told us that it's not very quick because a lot

00:49:24.289 --> 00:49:32.769
of the time what you want to do is you just
want to add a title to to-do and then save it.

00:49:32.769 --> 00:49:38.210
And the steps you have to perform in order to do
that is bring up the sheet, then you tap on title,

00:49:38.210 --> 00:49:43.380
then you type in the title, you tap
Save and then you tap Save again, right?

00:49:43.380 --> 00:49:52.269
And that's a lot of steps that you have to perform to do
such a basic action and so we went back to the drawing board

00:49:52.269 --> 00:49:55.630
and really tried to optimize for this scenario.

00:49:55.630 --> 00:50:04.450
And the constraints where we wanted the user to be able
to type in the title right away when the sheet comes up

00:50:04.449 --> 00:50:10.329
and also we didn't want any UI elements to
be obscured by the keyboard that is visible.

00:50:10.329 --> 00:50:12.299
So those were the two constraints.

00:50:12.300 --> 00:50:16.420
And this is an initial sketch of how we try to do that.

00:50:16.420 --> 00:50:22.530
At the top you still have the title and then below that
there's only the icons to tell you this is a Tag Notes

00:50:22.530 --> 00:50:30.620
and Due Date section and then this
Create In list element at the bottom.

00:50:30.619 --> 00:50:38.440
This is a PhotoShop markup we did it from that
sketch and this solves the problem but we didn't

00:50:38.440 --> 00:50:43.950
like this version either because what happens
here is first it's not very extensible.

00:50:43.949 --> 00:50:50.159
As soon as you add more attributes to a
to-do, say a person that is attached to it,

00:50:50.159 --> 00:50:58.179
you don't really have more space there at the tags, notes,
due date part and secondly and more importantly you have

00:50:58.179 --> 00:51:04.839
to think about what happens once you say add a few tags to
this so you tap on the Tags button, then you add two tags

00:51:04.840 --> 00:51:10.780
and now you're back to the screen and you can't really
fit all the tags that the user entered in that small space

00:51:10.780 --> 00:51:15.510
so you would have to rebuild the UI after you've done that.

00:51:15.510 --> 00:51:25.220
And rebuilding the UI and not presenting the user with
the familiar layout is something we didn't want to do.

00:51:25.219 --> 00:51:32.539
So we didn't like this and the solution
we went for is to simplify this even more.

00:51:32.539 --> 00:51:36.460
Right here we tried to just cram
too much into too little space.

00:51:36.460 --> 00:51:44.039
So the further simplification [laughter] was
just to let the user type in the title, right,

00:51:44.039 --> 00:51:48.840
this was the use case that we wanted to optimize for
and then you can just press the Add Details button

00:51:48.840 --> 00:51:53.840
that transform this view into a more
complex one if you want to be more specific.

00:51:53.840 --> 00:51:57.400
We almost like this.

00:51:57.400 --> 00:52:05.519
We had a slight variation because we still wanted
the user to quickly move this to-do to the inbox

00:52:05.519 --> 00:52:11.030
so we added this Create In field at the bottom.

00:52:11.030 --> 00:52:14.210
And this is actually the solution that we ship now.

00:52:14.210 --> 00:52:21.849
If you press the Add Details what happens is the keyboard
slides away and you get the tags notes and due date part.

00:52:21.849 --> 00:52:26.549
You can tap on those to specify
them, you tap Save and you're done.

00:52:26.550 --> 00:52:32.100
And one question we had, ok so we
optimized for the standard pace.

00:52:32.099 --> 00:52:34.089
You just enter a title and that's it.

00:52:34.090 --> 00:52:36.660
But what about if you actually enter more?

00:52:36.659 --> 00:52:40.989
If you enter text and notes, no, you have to --

00:52:40.989 --> 00:52:45.099
there's this intermediary step where
you have to press the Add Details button

00:52:45.099 --> 00:52:49.150
and did this actually make the quick
entry slower than it was before?

00:52:49.150 --> 00:52:50.349
We didn't know that.

00:52:50.349 --> 00:52:55.139
So we actually counted the taps that you needed.

00:52:55.139 --> 00:53:00.139
In the old version this is on the left
and in the new version on the right.

00:53:00.139 --> 00:53:07.859
And in all but one cases the new version had
less taps and there's one case where it's equal.

00:53:07.860 --> 00:53:17.090
So we were satisfied with that and this is
as I said how we shipped the current version.

00:53:17.090 --> 00:53:20.539
Ok so that was three design stories.

00:53:20.539 --> 00:53:24.059
There's way more to tell and way more sketches.

00:53:24.059 --> 00:53:33.099
One thing that we really found is that if you
sketch out the application first then it's very easy

00:53:33.099 --> 00:53:40.059
to see conceptual flaws and fix them early in the process
rather then spending much time coding and then figuring

00:53:40.059 --> 00:53:42.710
out oh this doesn't even work conceptually.

00:53:42.710 --> 00:53:46.309
And then the coding part, if you have all the sketches done,

00:53:46.309 --> 00:53:49.820
goes really quick because you know
exactly where you want to go to.

00:53:49.820 --> 00:53:54.480
>>So that's Things, a fantastic serious tool for the iPhone.

00:53:54.480 --> 00:53:58.960
One more note about the value of paper prototyping.

00:53:58.960 --> 00:54:06.269
Say you are incapable of doing the actual high fidelity
design stuff at the end, this is a great product.

00:54:06.269 --> 00:54:11.199
Like when you work out all your screens on
paper, this is a great handoff to a design firm

00:54:11.199 --> 00:54:13.809
when you say make this application look great.

00:54:13.809 --> 00:54:18.610
Or if you are a designer and you can't code,
you work out all this and then you hand this off

00:54:18.610 --> 00:54:21.059
to a programmer and say make this reality.

00:54:21.059 --> 00:54:23.139
It makes everybody's lives a lot better.

00:54:23.139 --> 00:54:27.379
Everybody knows what it's like to work with a designer and
a designer comes in an hour before it's supposed to ship

00:54:27.380 --> 00:54:33.430
and say, about that one screen, that's not going to work
so can you go ahead and throw away a weeks worth of code?

00:54:33.429 --> 00:54:37.399
So paper prototyping is great for everybody
involved no matter what kind of shop you have,

00:54:37.400 --> 00:54:40.769
whether it's a large organization or a small team.

00:54:40.769 --> 00:54:46.960
So now let's talk about polish and refinement.

00:54:48.530 --> 00:54:55.019
Polish and refinement is how you take an average application
and you turn it into something that's just a stand out.

00:54:55.019 --> 00:54:56.369
It's just everybody wants to have it.

00:54:56.369 --> 00:54:58.210
It's really compelling.

00:54:58.210 --> 00:55:03.710
And the way that you go about doing that is by taking
your finished application and then going through this list

00:55:03.710 --> 00:55:05.960
and just making sure that you have all your bases covered.

00:55:05.960 --> 00:55:10.780
You want to make sure that you employ the latest
technologies, add excitement where relevant

00:55:10.780 --> 00:55:17.100
and then you want to approach application differentiation
by employing a few things that we'll talk about in a moment.

00:55:17.099 --> 00:55:22.250
So the first thing that you want to
do is look at iPhone OS 3.0 and figure

00:55:22.250 --> 00:55:25.519
out what technologies map to your application.

00:55:25.519 --> 00:55:28.519
Which technologies would be relevant to your users?

00:55:28.519 --> 00:55:29.900
Search and scope bars are great.

00:55:29.900 --> 00:55:34.940
They're new, they let you really quickly filter
down search results, they're given away for free

00:55:34.940 --> 00:55:37.950
so implement them if it makes sense for your application.

00:55:37.949 --> 00:55:43.649
You want to take the time to do a 29 by
29 pixel icon for Settings and Spotlight.

00:55:43.650 --> 00:55:47.519
If people are searching for your application
in the new spotlight area in OS 3.0,

00:55:47.519 --> 00:55:51.610
you want to make sure your application
looks as good as it can.

00:55:51.610 --> 00:55:58.370
First notifications, if your application merits push
notifications, make sure that you really think out what kind

00:55:58.369 --> 00:56:00.219
of notifications that you're going to give to the user.

00:56:00.219 --> 00:56:06.369
It's easy to just go you know crazy and have notifications
for almost everything but you want to really think out,

00:56:06.369 --> 00:56:08.670
which things does a user want to be notified?

00:56:08.670 --> 00:56:13.150
Because when you notify a user you're going to
be interrupting them doing something else, right?

00:56:13.150 --> 00:56:17.099
So you really want to make sure that you think
through how is this going to affect the user?

00:56:17.099 --> 00:56:21.389
Would a user perceive this notification as
valuable, would they want to know, would they care?

00:56:21.389 --> 00:56:27.889
Copy and paste, user's going to expect it
really quick so make sure that you take the time

00:56:27.889 --> 00:56:30.139
to implement copy and paste if it makes sense.

00:56:30.139 --> 00:56:35.179
And make sure that when you do implement it that you
only implement it in places that it really makes sense

00:56:35.179 --> 00:56:39.750
so like you don't want your users to copy and
paste headers and labels and things like that.

00:56:39.750 --> 00:56:43.679
You want them to be able to copy and paste content
and you can be really smart about how you format

00:56:43.679 --> 00:56:49.199
that content whenever they paste it somewhere
else or insert it into a mail message.

00:56:49.199 --> 00:56:54.179
Undo and redo, this takes a lot of thought
because every application's different.

00:56:54.179 --> 00:56:59.250
There's no hard line like this is the way you approach
undo and redo but really think about the implications

00:56:59.250 --> 00:57:01.050
of undo and redo inside of your application.

00:57:01.050 --> 00:57:07.660
Think about scope, if I do this here and I move up 3
levels in a hierarchy and then I hit undo, what happens?

00:57:07.659 --> 00:57:11.009
Really think about those edge cases for
your users because they're going to want,

00:57:11.010 --> 00:57:18.230
they're going to want what they expect to happen
and not necessarily what you think is ideal.

00:57:18.230 --> 00:57:22.699
Once you've done that you want to circle back
and implement animation where appropriate.

00:57:22.699 --> 00:57:30.019
And here we have a nice list of animations that
ship with the operating system on the phone.

00:57:30.019 --> 00:57:34.329
Here the example that you can see is the music store.

00:57:34.329 --> 00:57:38.029
We use animation in the music store not only
to let you know when something's playing

00:57:38.030 --> 00:57:43.280
but when you purchase an item we animate
that track into the purchase tab.

00:57:43.280 --> 00:57:48.800
The reason why we animate it into that position is
to (a) let you know that your purchase was successful

00:57:48.800 --> 00:57:55.330
and (b) where to go to look for that purchase without
necessarily taking out of the purchasing context, right?

00:57:55.329 --> 00:58:00.250
Other great examples are deleting notes, we have the
little genie effect for the page goes into the trashcan.

00:58:00.250 --> 00:58:03.869
That's our way of equating crumbling up a
piece of paper and throwing it in the trash.

00:58:03.869 --> 00:58:08.179
Moving mail, we take the same generic
mail icon in the top left every time

00:58:08.179 --> 00:58:11.009
but then we animate it into the folder that you've selected.

00:58:11.010 --> 00:58:14.220
The reason is you can imagine if you're
moving email messages and you don't know

00:58:14.219 --> 00:58:16.319
where it went, that can be really stressful.

00:58:16.320 --> 00:58:17.690
You could be like, did I move it to the right place?

00:58:17.690 --> 00:58:21.970
And we don't want to throw an alert every time,
your mail was successfully moved to whatever folder

00:58:21.969 --> 00:58:25.739
so we use animation to kind of just
get out of the way of the user.

00:58:25.739 --> 00:58:31.539
Revealing map filters, the map curIs up and it shows
these controls and the reason why we curl the map is

00:58:31.539 --> 00:58:35.110
to let you know that you are still
in the context of the map.

00:58:35.110 --> 00:58:40.210
These controls pertain to the map that is above it.

00:58:40.210 --> 00:58:47.059
Changing photos, the reason why we animate our photos when
you swipe to change is because if you had a stack of photos

00:58:47.059 --> 00:58:50.960
on a real table and you swiped the
top photo, it would move to the side.

00:58:50.960 --> 00:58:52.619
It wouldn't just disappear, right?

00:58:52.619 --> 00:58:56.269
So we use animation because that's what maps reality.

00:58:56.269 --> 00:59:00.559
A good rule of thumb for animation is, does it
make sense in the real world and if it does,

00:59:00.559 --> 00:59:03.190
does it communicate something inside of my application?

00:59:03.190 --> 00:59:08.429
And if you can pass those two tests then it's
more than likely a good place for animation.

00:59:08.429 --> 00:59:14.319
Selecting Pages in Safari, everybody understands
the metaphor of an 8 by 10 sheet of white paper

00:59:14.320 --> 00:59:21.230
as representing a page and so each of these pages represents
a web page and each web page has its own sub-navigation.

00:59:21.230 --> 00:59:27.269
And in Springboard when you press and hold down an
icon, all the icons start shaking and quivering, right?

00:59:27.269 --> 00:59:31.619
And it's either because the icons are excited about
being moved to the first screen or they're afraid

00:59:31.619 --> 00:59:33.750
because they're about to be deleted and rated bad.

00:59:33.750 --> 00:59:36.590
[laughter] Either way, you know when you're in Edit mode.

00:59:36.590 --> 00:59:40.610
You know when you know you're interacting
with your icons in this level so it's safe,

00:59:40.610 --> 00:59:43.900
it's communicative and it tells a story for the user.

00:59:43.900 --> 00:59:50.070
So here's some good guidelines for
animation, use it to educate your user.

00:59:50.070 --> 00:59:56.120
Use it to inform them without, you know, being just
in their face all the time, being heavy handed.

00:59:56.119 --> 00:59:58.089
Avoid animating everything just because you can.

00:59:58.090 --> 01:00:02.120
We make it very easy with core
animation and avoid gratuitous animation.

01:00:02.119 --> 01:00:05.849
Everybody has gone to one of those websites where it says
click here and you try to click here and the button moves,

01:00:05.849 --> 01:00:07.889
right and you try to click there and the button moves?

01:00:07.889 --> 01:00:10.929
That's a joke on the web but we've seen a few applications

01:00:10.929 --> 01:00:15.289
that do this unintentionally just
because they overused animation.

01:00:15.289 --> 01:00:19.079
So make sure it makes sense.

01:00:19.079 --> 01:00:21.639
Another great thing that you can think about implementing,

01:00:21.639 --> 01:00:24.989
coming back and implementing into
your application, is sound.

01:00:24.989 --> 01:00:33.559
Sound is probably one of the most valuable and undervalued
items inside of third party applications on the iPhone.

01:00:33.559 --> 01:00:37.230
If you think about it you can watch a movie
with subtitles and you can enjoy that movie

01:00:37.230 --> 01:00:40.990
but how much more enjoyable is it
with a soundtrack and sound effects?

01:00:40.989 --> 01:00:46.339
The catch to adding sound to your application is that if you
put it in one place you're more than likely going to have

01:00:46.340 --> 01:00:49.809
to put it everywhere else because if you
launch an application and it's silent,

01:00:49.809 --> 01:00:54.469
you don't notice that it's silent until you hit one
button and a door comes up and it goes [noise] like that

01:00:54.469 --> 01:00:57.869
and then once you hit the button and it goes away
and it doesn't make a sound, something feels wrong.

01:00:57.869 --> 01:01:01.009
And then the rest of the application
automatically feels wrong.

01:01:01.010 --> 01:01:03.620
So if you are going to approach
sound, make sure you go the distance.

01:01:03.619 --> 01:01:07.670
You have to make sure that if you put
it in one place, you put it everywhere.

01:01:07.670 --> 01:01:10.519
And with that said, make sure you
use the proper audio channels

01:01:10.519 --> 01:01:13.519
so you can look this up in the human interface guidelines.

01:01:13.519 --> 01:01:18.489
There's nothing worse then having a customer that
just loves your application, say it's a game.

01:01:18.489 --> 01:01:19.269
They're just in love with it.

01:01:19.269 --> 01:01:20.820
They can't put it down, right?

01:01:20.820 --> 01:01:24.809
And they want your application, say they're in
school in a classroom or in a business meeting,

01:01:24.809 --> 01:01:27.039
underneath the conference table and they launch that app

01:01:27.039 --> 01:01:30.509
and it goes [noise] even though
the ringer switch was off, right?

01:01:30.510 --> 01:01:34.270
That's going to create this bad feeling for your customer

01:01:34.269 --> 01:01:36.710
and every time they see your app
they're going to feel embarrassed again.

01:01:36.710 --> 01:01:37.650
They're not going to want to use it.

01:01:37.650 --> 01:01:41.280
I mean this is kind of like an anecdote but it's
really important that you use the right channels

01:01:41.280 --> 01:01:42.880
because there's other things like the iPod.

01:01:42.880 --> 01:01:45.280
You don't want to hijack the music channel.

01:01:45.280 --> 01:01:49.910
If someone wants to use your app and listen
to their songs in the background as well.

01:01:49.909 --> 01:01:54.269
So think about it, evaluate it, it
could be what separates you between,

01:01:54.269 --> 01:01:56.679
it could be the differentiator
between you and your competitors.

01:01:56.679 --> 01:02:01.609
If you do everything else right and then you
add sound that could just be the last straw.

01:02:01.610 --> 01:02:04.809
Here we have some really good examples of tactile design.

01:02:04.809 --> 01:02:07.159
These user interfaces feel physical.

01:02:07.159 --> 01:02:13.230
They feel tactile and interactive and you can imagine
if these were physical objects put on a bookshelf,

01:02:13.230 --> 01:02:16.300
you'd be willing to pay significant
amounts of money for them.

01:02:16.300 --> 01:02:20.610
You know you have some really nice
wood, some leather and some aluminum.

01:02:20.610 --> 01:02:26.280
The cost to produce these materials virtually is next to
nothing yet when you approach this application on the store,

01:02:26.280 --> 01:02:32.820
as compared to a white list, you're far more motivated to
part with more money just because it's visually robust.

01:02:32.820 --> 01:02:41.420
And to explain the value of animation, sound, and
tactile materials, I have Mark Drudene [assumed spelling]

01:02:41.420 --> 01:02:47.360
from Tapbots who's going to share with you the process
of their development of Convertbot and Weightbot.

01:02:47.360 --> 01:02:58.180
>>Hi my name's Mark and I must disclose that public speaking
is basically my kryptonite so [laughter] bear with me.

01:02:58.179 --> 01:03:05.099
I'm here today to talk about our approach to
providing a great user experience in our applications

01:03:05.099 --> 01:03:10.579
and so to start off, when we build our
applications the first thing we do is,

01:03:10.579 --> 01:03:16.230
the most important part is providing a great
story or a concept and basically that story

01:03:16.230 --> 01:03:22.070
and concept dictates how our apps going to look, how it's
going to sound, how it's going to work and even as far

01:03:22.070 --> 01:03:25.140
as what features go into our applications.

01:03:25.139 --> 01:03:27.119
And so what is our story?

01:03:27.119 --> 01:03:29.859
It's pretty simple and we have it
on our website on the adopt page.

01:03:29.860 --> 01:03:41.110
If you look at it is says we build utility robots that are
fun, focused and easy to use and so what does that mean?

01:03:41.110 --> 01:03:43.860
Well if you look, listen closely I said utility robots.

01:03:43.860 --> 01:03:48.480
I didn't say we build utility apps or
utility robot apps and the concept behind

01:03:48.480 --> 01:03:52.050
that is we want our applications to become the device.

01:03:52.050 --> 01:03:58.910
So the way we want to think of our applications
is if you are holding Convertbot in your hand,

01:03:58.909 --> 01:04:03.399
you're not holding an iPhone with
our app running on your iPhone.

01:04:03.400 --> 01:04:07.070
You're holding Convertbot, this physical device.

01:04:07.070 --> 01:04:15.440
And so that just, it really allows us to apply
a certain look and feel to our application.

01:04:15.440 --> 01:04:21.059
We don't need to, we're not constrained by the way
apps are supposed to look and because we're trying

01:04:21.059 --> 01:04:27.750
to provide our own story, provide an experience
in our application that everyone else can enjoy.

01:04:27.750 --> 01:04:30.969
And so if you look at our applications what does that say?

01:04:30.969 --> 01:04:36.879
Well they're very mechanical because we want them to be like
robots and they're very tactile-looking so when you look

01:04:36.880 --> 01:04:40.869
at the buttons we want the users to feel
like they want to touch it, you know.

01:04:40.869 --> 01:04:41.949
They want to press that button.

01:04:41.949 --> 01:04:48.000
Like I don't know about you but when I was a little
kid whenever I saw switches and like you know any knobs

01:04:48.000 --> 01:04:50.989
and things like that, I always wanted to touch
them and turn them and see what would happen.

01:04:50.989 --> 01:04:53.319
And so that's kind of the effect
that we want with our interface.

01:04:53.320 --> 01:04:56.760
We want people to wander, what
happens if I press that button?

01:04:56.760 --> 01:04:58.320
What happens if I turn that dial?

01:04:58.320 --> 01:05:04.220
And they kind of have an expectation as far as how it's
going to work but they're not quite sure so they need

01:05:04.219 --> 01:05:07.299
to experience it and so that's what we do.

01:05:07.300 --> 01:05:16.450
And for example, there's a unit you want to convert
from and a unit you want to convert to and you know

01:05:16.449 --> 01:05:21.939
that the buttons are there but you don't know exactly
what they do and so and normally selecting a unit

01:05:21.940 --> 01:05:24.139
or a category is a very mundane boring task.

01:05:24.139 --> 01:05:26.480
You don't really, you know, it's something
that you don't really think about.

01:05:26.480 --> 01:05:30.650
It's something you have to do to get the
numbers you want to convert from and to.

01:05:30.650 --> 01:05:36.190
And so what we wanted to do is provide an enjoyable
experience and even just doing something as simple as that.

01:05:36.190 --> 01:05:44.500
So what we do is we reward our users for
interacting with our device or with our application.

01:05:44.500 --> 01:05:46.079
So how do we reward them?

01:05:46.079 --> 01:05:49.569
Well we use sound and animation to help sell our stories.

01:05:49.570 --> 01:05:55.289
So when they hit that button they hear sounds and
they see it animate out and it builds upon that story

01:05:55.289 --> 01:05:57.639
that this is an actual, physical robot device.

01:05:57.639 --> 01:06:00.239
This is not just some random application.

01:06:00.239 --> 01:06:03.809
So we really, we keep drilling down to that focus point

01:06:03.809 --> 01:06:09.049
that we build robot utilities that
are fun, focused and easy to use.

01:06:09.050 --> 01:06:14.820
We keep, I usually write that down wherever I'm
brainstorming or I even put it on a sticky on my computer

01:06:14.820 --> 01:06:21.309
and I keep remembering back to that point because
everything we do on this application has to say that phrase

01:06:21.309 --> 01:06:25.659
and that's how we provide this cohesive,
you know, it's a single experience.

01:06:25.659 --> 01:06:35.389
And I guess as an analogy imagine this, imagine that you
saw a poster for a Transformers movie, you saw screen shots,

01:06:35.389 --> 01:06:41.099
you didn't see the movie, you didn't see the actual
trailer and you have this expectation cause it looks great

01:06:41.099 --> 01:06:47.259
as a still and you expect that these robots to make
great sounds, to animate, you know and just be amazing.

01:06:47.260 --> 01:06:52.980
And imagine if you went to the movie and it was basically
stop motion animation and they had no sound effects?

01:06:52.980 --> 01:06:56.820
You would totally lose that immersion you know.

01:06:56.820 --> 01:06:59.630
And we kind of think about that with our applications.

01:06:59.630 --> 01:07:04.710
When they're using our application and it looks like it
should do things, it looks like it should be animated,

01:07:04.710 --> 01:07:10.780
it looks like it should be based on reality and if it
doesn't provide that experience then it's kind of a letdown.

01:07:10.780 --> 01:07:13.640
So we kind of want to match that expectation.

01:07:13.639 --> 01:07:18.889
They don't know what's exactly going to happen but
we want to match that expectation but we also want

01:07:18.889 --> 01:07:23.879
to make it even better so that's how we
think about creative ways to animate.

01:07:23.880 --> 01:07:29.210
And make sure, it's real important that
your animations tie in to your core focus,

01:07:29.210 --> 01:07:31.980
your concept and so our direction is really important.

01:07:31.980 --> 01:07:34.190
We don't put in random sound just for the sake of it.

01:07:34.190 --> 01:07:35.829
We don't put in random animations.

01:07:35.829 --> 01:07:40.059
It's all to a point and it all goes
back to this being a robotic device.

01:07:40.059 --> 01:07:43.929
So whatever your core concept is,
you want to stick with that.

01:07:43.929 --> 01:07:51.449
And the last thing I have to say is you know the
bottom line for us and the most important thing

01:07:51.449 --> 01:07:56.710
to take away is you've got to have that concept, you've
got to know why you're building it and that basically leads

01:07:56.710 --> 01:08:00.260
to everything that you're doing on the
app, even what functionality goes in there.

01:08:00.260 --> 01:08:02.710
Because our core motto is, it's focus too.

01:08:02.710 --> 01:08:04.690
And so we don't add a ton of features.

01:08:04.690 --> 01:08:10.000
We want to keep it what the core feature of that application
is and we want to stick to it and then we can put a lot

01:08:10.000 --> 01:08:20.789
of polish around that instead of
having a ton of things to work with.

01:08:20.789 --> 01:08:26.010
And so yeah and let's see [inaudible
audience comment] Thanks.

01:08:26.010 --> 01:08:32.970
[ Applause ]

01:08:32.970 --> 01:08:35.619
>>So I want to be very respectful to you guys time.

01:08:35.619 --> 01:08:36.840
I know we're running short.

01:08:36.840 --> 01:08:39.110
I'll be as quickly as possible.

01:08:39.109 --> 01:08:42.159
We talked about 2 significant paradigm
shifts that have occurred today.

01:08:42.159 --> 01:08:46.899
The first was direct manipulation and how
that applies to user interface design.

01:08:46.899 --> 01:08:53.549
The second was tactile design and Tapbots just gave
a great example of how important tactile design is

01:08:53.550 --> 01:08:59.130
but there's a third paradigm shift it's really important and
it's really valuable and that's called transparent design.

01:08:59.130 --> 01:09:03.159
Transparent design has 2 distinct manifestations.

01:09:03.159 --> 01:09:09.609
The first is design that goes about getting out of the
way of the user and being as contextual as possible.

01:09:09.609 --> 01:09:12.979
So a great example, we get an alert, we maintain contacts.

01:09:12.979 --> 01:09:15.849
Instead of hijacking the whole screen,
we just dim out the background.

01:09:15.850 --> 01:09:16.390
It's motile.

01:09:16.390 --> 01:09:19.990
You have to acknowledge the alert
but its transient at the same time.

01:09:19.989 --> 01:09:21.599
It maintains context.

01:09:21.600 --> 01:09:27.010
Another great example is when you're
writing a text in messages.

01:09:27.010 --> 01:09:30.159
You get these suggestions, suggestion words, right?

01:09:30.159 --> 01:09:31.430
They're not where you're typing.

01:09:31.430 --> 01:09:36.079
We don't hijack where you're typing so you could ignore them
if you'd like and as soon as you move on they disappear.

01:09:36.079 --> 01:09:38.079
So they're very transient by nature.

01:09:38.079 --> 01:09:42.479
And when you send a message, everybody has seen this.

01:09:42.479 --> 01:09:43.839
Very few people take the time to notice it.

01:09:43.840 --> 01:09:48.800
It's not this way now in 3.0 but previously we
needed to keep you from sending another message,

01:09:48.800 --> 01:09:53.920
keep you from typing another message
while we were sending the existing message

01:09:53.920 --> 01:09:59.890
and so we use this transient modal block that covers
up the keyboard and let's you know the status.

01:09:59.890 --> 01:10:05.030
Even though this is modal and it prevents you from typing,
very few users ever notice it or mind that it's in the way.

01:10:05.029 --> 01:10:12.059
So these are great examples but the second variation that
I was talking about earlier, where it's most important,

01:10:12.060 --> 01:10:15.030
transparent design is most important, is video games.

01:10:15.029 --> 01:10:20.170
Because when you play a video game on a console, you
don't look at your hand while you hold the controller.

01:10:20.170 --> 01:10:21.069
You look at the screen.

01:10:21.069 --> 01:10:23.869
You get immersed into the content
and you just play the game.

01:10:23.869 --> 01:10:25.670
You want the controls to just evaporate.

01:10:25.670 --> 01:10:28.590
You want the phone to become an extension of your body.

01:10:28.590 --> 01:10:33.760
And so to explain this process and to talk
about their story, we have Capcom today.

01:10:33.760 --> 01:10:37.170
>>[foreign language] Good morning everyone.

01:10:37.170 --> 01:10:38.010
He is Takeshi.

01:10:38.010 --> 01:10:41.010
I am Sareda [assumed spelling] from Capcom.

01:10:41.010 --> 01:10:45.590
[ Foreign language ]

01:10:45.590 --> 01:10:49.029
>>Capcom is a Japanese gaming company.

01:10:49.029 --> 01:10:55.349
You may notice us by game title like
Street Fighter or Resident Evil.

01:10:55.350 --> 01:11:06.740
[foreign language] Over there in Japan
also we have a big movement for iPhone.

01:11:06.739 --> 01:11:17.649
[foreign language] There are many game designers
get inspired by the unique user interface

01:11:17.649 --> 01:11:21.659
of iPhone and they rush into development.

01:11:21.659 --> 01:11:25.960
[foreign language] But there's one important thing,

01:11:25.960 --> 01:11:39.010
important fact that unique user interface
does not warrant interesting game experience.

01:11:39.010 --> 01:11:45.670
[ Foreign language ]

01:11:45.670 --> 01:11:52.010
>>We have one question for you, do you
really want to tilt for every game?

01:11:52.010 --> 01:12:02.510
[ Foreign language ]

01:12:02.510 --> 01:12:12.210
>>I would say user interface defines game
design and game design defines user interface.

01:12:12.210 --> 01:12:17.230
Today we want to talk about this forgettable fact.

01:12:17.229 --> 01:12:26.009
[foreign language] This is a user
interface of Resident Evil for iPhone.

01:12:26.010 --> 01:12:35.030
[ Foreign language ]

01:12:35.029 --> 01:12:45.009
>>People around us who likes iPhone asked us or said to
us, I want to defeat zombies by tapping on the screen.

01:12:45.010 --> 01:12:50.869
[ Foreign language ]

01:12:50.869 --> 01:12:59.319
>>If tapping can kill zombies then zombies
doesn't have enough time to attack.

01:13:00.439 --> 01:13:01.589
[laughter] Right?

01:13:01.590 --> 01:13:10.690
[foreign language] It's actually
no thrill, no fun as a game.

01:13:10.689 --> 01:13:21.009
[foreign language] It's something
like real survival in safari.

01:13:21.010 --> 01:13:27.539
It's more exciting then zoo touring, am I correct?

01:13:27.539 --> 01:13:33.100
[foreign language] Let's get back to
the things about UI, user interface.

01:13:33.100 --> 01:13:41.740
[foreign language] We apply for
this game, we apply virtual path.

01:13:41.739 --> 01:13:53.949
[foreign language] Actually some people
say virtual path is an easy solution

01:13:53.949 --> 01:13:58.929
[foreign language] but it's not true actually.

01:13:58.930 --> 01:14:09.010
[foreign language] The most games apply
what is called simple matrix D path.

01:14:09.010 --> 01:14:16.199
[ Foreign language ]

01:14:16.199 --> 01:14:27.010
>>It's no secret that it's very easy to invent
actually but the [inaudible] can be very bad.

01:14:27.010 --> 01:14:34.390
[ Foreign language ]

01:14:34.390 --> 01:14:43.020
>>Actually users tend to think he is
controlling D path by his tip of his finger

01:14:43.020 --> 01:14:47.780
but actually the ball of finger is center.

01:14:47.779 --> 01:14:57.170
[foreign language] So there is a big difference
between what it looks and how it walks.

01:14:57.170 --> 01:15:12.010
[foreign language] To clear this issue, to avoid
this issue, we developed analog -n-drag type D path.

01:15:12.010 --> 01:15:17.810
[ Foreign language ]

01:15:17.810 --> 01:15:32.480
>>A direction can be more precisely detected by dragged
picture rather than a single touch point detection.

01:15:32.479 --> 01:15:38.149
[foreign language] Now we've moved on to the icons.

01:15:38.149 --> 01:15:48.469
[foreign language] The icons of Resident Evil
changes according to the game situations,

01:15:48.470 --> 01:15:56.710
the number of button changes, the shape, the graphics
of icon changes according to the game situation.

01:15:56.710 --> 01:16:03.579
[foreign language] Actually this is very, very important.

01:16:03.579 --> 01:16:10.289
This makes it very easy for first
time player to understand how to play.

01:16:10.289 --> 01:16:24.010
[foreign language] Virtual path with ingenuity
like this we like to name Visual path.

01:16:24.010 --> 01:16:31.400
[ Foreign language ]

01:16:31.399 --> 01:16:40.869
>>Visual path is not physically fixed UI so you can
use whole screen like a canvas and you can draw,

01:16:40.869 --> 01:16:44.140
you can design whatever you want, whatever you need.

01:16:44.140 --> 01:16:53.710
[foreign language] Today we have three ideas to share
with you, actually idea this is what we've come up with,

01:16:53.710 --> 01:17:02.079
not in consideration but we hope that
those going to be something suggestive.

01:17:02.079 --> 01:17:13.779
[foreign language] A person icon, person
icon chose the game player feels fear.

01:17:14.970 --> 01:17:24.820
[foreign language] A red colored
icon shows the status is in danger.

01:17:24.819 --> 01:17:36.639
[foreign language] Shaking, moving icons
shows the situation is getting tense.

01:17:36.640 --> 01:17:47.010
[foreign language] In this way visual path
has more wider flexibility, possibility.

01:17:47.010 --> 01:17:59.650
[ Foreign language ]

01:17:59.649 --> 01:18:09.739
>>The most important thing for game designer
is to provide users a good gaming experience.

01:18:09.739 --> 01:18:17.010
Not showing off the uniqueness of game, user interface.

01:18:17.010 --> 01:18:27.829
[ Applause ]

01:18:27.829 --> 01:18:29.100
>>Appreciate you guys being patient.

01:18:29.100 --> 01:18:31.090
I know you're eager to go to other sessions.

01:18:31.090 --> 01:18:36.550
The take away for this session is that crunch an
application definition statement, take the time, do it.

01:18:36.550 --> 01:18:38.180
It will save you a lot of time in the end.

01:18:38.180 --> 01:18:42.329
Prototype your interface on paper and then polish
and refine until you really have something great

01:18:42.329 --> 01:18:44.529
and don't release until you have something really great.

01:18:44.529 --> 01:18:44.979
Thanks very much.

01:18:44.979 --> 01:18:46.009
Appreciate it.

01:18:46.010 --> 01:18:54.900
[ Applause and music ]