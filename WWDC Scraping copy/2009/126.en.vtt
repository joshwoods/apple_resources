WEBVTT

00:00:12.550 --> 00:00:13.690
>> Technology.

00:00:13.689 --> 00:00:17.149
My name is Eric Seymour and I manage
the VoiceOver engineering team at Apple.

00:00:17.149 --> 00:00:19.159
And I want to thank everyone for coming tonight.

00:00:19.160 --> 00:00:22.690
We know that there are other things you
could be doing, other labs, other sessions.

00:00:22.690 --> 00:00:25.440
It's been a long exciting week, perhaps a long day.

00:00:25.440 --> 00:00:28.800
The fact that you're here tells us
how much you care about accessibility.

00:00:28.800 --> 00:00:31.000
We certainly care too and we definitely appreciate it.

00:00:31.000 --> 00:00:31.980
So thank you for coming.

00:00:31.980 --> 00:00:35.410
So, tonight you're going to learn all about how

00:00:35.409 --> 00:00:39.649
to make your applications accessible
with our accessibility APIs in Mac OS X.

00:00:39.649 --> 00:00:44.189
Before we get into the technical meat of the presentation,
I'm going to spend a few minutes up front talking

00:00:44.189 --> 00:00:47.539
about accessibility from the product perspective.

00:00:47.539 --> 00:00:53.589
And this is important because this is how
users who are using accessible technology

00:00:53.590 --> 00:00:56.600
with your application are going
to view Mac OS X in your app.

00:00:56.600 --> 00:00:59.380
They're going to view it through the
lens of accessibility if you will.

00:00:59.380 --> 00:01:03.870
So Mac OS X shipped several targeted
accessibility technologies.

00:01:03.869 --> 00:01:08.060
Perhaps you're familiar with them in
our Universal Access preferences pane.

00:01:08.060 --> 00:01:13.820
You've got seeing and hearing and keyboard and mouse and
track pad, things that focus on specific special needs.

00:01:13.819 --> 00:01:17.899
And some of these things have migrated
over into just regular mainstream use.

00:01:17.900 --> 00:01:25.180
For example, like zoom, I know plenty of people who are
sighted with no visual impairment and use zoom all the time.

00:01:25.180 --> 00:01:30.150
Also, some of these features work without
any additional work in your applications.

00:01:30.150 --> 00:01:35.359
And some of these features work with
cooperation with your applications,

00:01:35.359 --> 00:01:37.590
like VoiceOver and of course, that's why you're here.

00:01:37.590 --> 00:01:43.320
Your implementations of the NS accessibility
APIs help us provide accessibility for end users.

00:01:43.319 --> 00:01:47.169
Now, the other thing that you might
notice, especially if you've got experience

00:01:47.170 --> 00:01:54.650
with Mac OS X is sprinkled throughout the operating
system are great universal access features and designs.

00:01:54.650 --> 00:02:01.580
So for example, the magnified doc, or magnifying a font for
a phone number or other things are useful for everybody,

00:02:01.579 --> 00:02:05.399
not just somebody with a specific visual
impairment for example in this case.

00:02:05.400 --> 00:02:11.640
And so these are things that have sprinkled
throughout other products, not just Mac OS X.

00:02:11.639 --> 00:02:12.759
Let me just name a few.

00:02:12.759 --> 00:02:16.009
In the last year, we've added closed caption support.

00:02:16.009 --> 00:02:19.139
We are the first to offer this for digital media.

00:02:19.139 --> 00:02:24.069
You can go to the iTunes Store, purchase closed
caption content and run it on any of our players.

00:02:24.069 --> 00:02:25.299
We've built it into QuickTime.

00:02:25.300 --> 00:02:26.990
So it's a really great feature.

00:02:26.990 --> 00:02:29.100
And again, good universal design.

00:02:29.099 --> 00:02:33.859
This is good for folks who have a specific need
for this but it's also just useful for everybody.

00:02:33.860 --> 00:02:36.930
And then another one is Talking iPods.

00:02:36.930 --> 00:02:41.370
I'm sure you've seen or heard or
perhaps even own a Talking iPod.

00:02:41.370 --> 00:02:44.900
Another great example of universal
design where certainly somebody

00:02:44.900 --> 00:02:47.950
with a visual impairment could
benefit from one of the devices.

00:02:47.949 --> 00:02:50.319
But also, it's just a cool device, right?

00:02:50.319 --> 00:02:55.180
I mean, who doesn't want to have their
track names read and their menus spoken.

00:02:55.180 --> 00:02:56.650
And then there's VoiceOver.

00:02:56.650 --> 00:03:00.409
So VoiceOver is screen access technology for Mac OS X.

00:03:00.409 --> 00:03:06.159
And basically, it speaks items that are on the
screen, it speaks as a result of user action,

00:03:06.159 --> 00:03:10.599
it uses sound effects to embellish the
experience when you can't see the screen.

00:03:10.599 --> 00:03:15.159
It's basically a spoken interface
or an audible interface in fact.

00:03:15.159 --> 00:03:19.109
And VoiceOver has believe it or not
been shipping now for five years.

00:03:19.110 --> 00:03:22.110
For five years we've been here talking about VoiceOver.

00:03:22.110 --> 00:03:24.120
And it's pretty exciting.

00:03:24.120 --> 00:03:31.590
We've done a lot of cool innovations, but perhaps the most
important thing that's happened is VoiceOver now runs on

00:03:31.590 --> 00:03:35.969
and is installed on well over 30
million compu0ters worldwide.

00:03:35.969 --> 00:03:37.300
Which is really a phenomenal number.

00:03:37.300 --> 00:03:40.980
This is orders of magnitude more than
any shipping screen reader on the planet.

00:03:40.979 --> 00:03:46.959
And what this means for you as developers, when you make the
decision to add accessibility or to improve accessibility

00:03:46.960 --> 00:03:53.800
in your application for an end user, the barrier to
entry for that end user is completely eliminated.

00:03:53.800 --> 00:03:58.060
All that end user needs to use your
application is a Mac, whether it's theirs

00:03:58.060 --> 00:04:00.000
or a friend's or the library or in a school.

00:04:00.000 --> 00:04:02.819
Every single Macintosh is ready for your app.

00:04:02.819 --> 00:04:07.479
Whereas on some other systems, an end user
might have to pay up to 1000 dollars just

00:04:07.479 --> 00:04:10.039
to equip the computer to work with your application.

00:04:10.039 --> 00:04:13.789
So this is a really big deal and this really
is the cornerstone of universal design.

00:04:13.789 --> 00:04:15.959
It's got to be available everywhere on every system.

00:04:15.960 --> 00:04:21.269
So we've also and this started
about two years ago with Leopard,

00:04:21.269 --> 00:04:24.609
we also pioneered really fantastic plug-and-play Braille.

00:04:24.610 --> 00:04:30.500
In fact, I read a quote the other
day on one of the discussion boards

00:04:30.500 --> 00:04:35.839
where somebody not only said Apple has clearly the
easiest to configure Braille but it's the most fun.

00:04:35.839 --> 00:04:39.089
Right? And so how great is that when we actually produce,

00:04:39.089 --> 00:04:42.810
you know take a relatively technical thing
that's a big headache to configure and we make it

00:04:42.810 --> 00:04:45.410
so easy that users are starting to say it's fun.

00:04:45.410 --> 00:04:48.170
That's really, what we want to go for.

00:04:48.170 --> 00:04:53.650
And so because of all of this, we're pretty
proud to have received the Access Award

00:04:53.649 --> 00:04:55.319
from the American Foundation for the Blind.

00:04:55.319 --> 00:04:58.610
And this is basically for pushing
accessibility into our products,

00:04:58.610 --> 00:05:01.819
for pushing accessibility into the iTunes ecosystem.

00:05:01.819 --> 00:05:05.269
So really, we're quite proud of this.

00:05:05.269 --> 00:05:08.039
And so where, that brings us to now.

00:05:08.040 --> 00:05:10.030
Right? So everything I've talked about is Leopard.

00:05:10.029 --> 00:05:12.009
We've been shipping Leopard for a while now.

00:05:12.009 --> 00:05:16.980
And in the meantime, behind the scenes,
our team has been working feverishly

00:05:16.980 --> 00:05:21.259
to bring the greatest Snow Leopard
VoiceOver and Accessibility features ever.

00:05:21.259 --> 00:05:28.129
So we've significantly improved VoiceOver for
features, for performance, for enhancements, bug fixes.

00:05:28.129 --> 00:05:32.329
We've really, really worked hard and we're
going to bring we think a fantastic release.

00:05:32.329 --> 00:05:34.069
There's far too much to show here.

00:05:34.069 --> 00:05:36.750
However, there's one feature that's worth showing.

00:05:36.750 --> 00:05:38.810
And the reason we want to show it is because we think

00:05:38.810 --> 00:05:43.220
that it marks perhaps the turning point
in what it means to be a screen reader.

00:05:43.220 --> 00:05:44.780
So let me explain.

00:05:44.779 --> 00:05:48.269
So if you take a look at this screen,
if you can see the screen,

00:05:48.269 --> 00:05:52.930
it's a website with a bunch of nicely laid out content.

00:05:52.930 --> 00:05:58.939
There's so much visual information on this screen,
that if I'm sighted, I can look at and very,

00:05:58.939 --> 00:06:03.759
very quickly and efficiently go to the thing I'm
interested in and interact with it right away.

00:06:03.759 --> 00:06:10.120
Unfortunately, if I can't see the screen
so much visual information is lost.

00:06:10.120 --> 00:06:11.819
Efficiency is lost.

00:06:11.819 --> 00:06:18.279
Basically even with modern screen reading technology, the
elements on the screen typically are boiled down into a list

00:06:18.279 --> 00:06:21.029
for the end user because it's all
coming through a speech engine.

00:06:21.029 --> 00:06:22.059
You know things are just spoken.

00:06:22.060 --> 00:06:22.589
So I lose.

00:06:22.589 --> 00:06:23.459
How big is that thing?

00:06:23.459 --> 00:06:24.639
Where was it placed?

00:06:24.639 --> 00:06:27.719
Was the image really big taking the center of the page?

00:06:27.720 --> 00:06:29.570
Or not? How do I know?

00:06:29.569 --> 00:06:30.560
I don't really know.

00:06:30.560 --> 00:06:32.069
And it's really hard to use.

00:06:32.069 --> 00:06:36.129
I've got to you know remember keystrokes
and filter my way through.

00:06:36.129 --> 00:06:41.509
And so screen reader users actually become quite adept
perhaps far more advanced than nonscreen reader users

00:06:41.509 --> 00:06:44.789
because they have to do more steps to get the job done.

00:06:44.790 --> 00:06:46.110
And we really want to solve that.

00:06:46.110 --> 00:06:53.490
We want users to be able to use their computer
or their device without having to read a manual

00:06:53.490 --> 00:06:55.150
and without having a steep learning curve.

00:06:55.149 --> 00:07:01.089
And we want to give back, actually, we want to
give for the first time spatial layout information.

00:07:01.089 --> 00:07:07.969
And so we thought what if we take this information and
we lay it into the track pad, the Multi-Touch track pad

00:07:07.970 --> 00:07:15.570
that every user today purchases and for the most part
hasn't really been focusing on as a screen reader user.

00:07:15.569 --> 00:07:16.800
And so this is what we've done.

00:07:16.800 --> 00:07:21.980
We've taken content from the screen and we lay it
directly into the track pad so that all you have

00:07:21.980 --> 00:07:25.189
to do is touch the pad and it's
as if you're touching the screen.

00:07:25.189 --> 00:07:29.959
And you hear sound effects and speech and you can move
your finger around the pad and know what you're touching.

00:07:29.959 --> 00:07:32.649
So I can tell how big that image is in the middle.

00:07:32.649 --> 00:07:35.000
I can tell where the title is, I know where the menu bar.

00:07:35.000 --> 00:07:38.500
I can very quickly rip across the
page and go from point A to point B

00:07:38.500 --> 00:07:40.639
without having to filter through dozens of elements.

00:07:40.639 --> 00:07:45.919
So the spatial layout piece is totally
there and most importantly ease of use.

00:07:45.920 --> 00:07:48.640
Because the learning curve is what it should be.

00:07:48.639 --> 00:07:51.879
I should be able to touch the track pad and
it should do what I thought it should do.

00:07:51.879 --> 00:07:54.750
And so we really think we've got
a profound advancement here.

00:07:54.750 --> 00:07:56.829
This is going to be coming to VoiceOver for Snow Leopard.

00:07:56.829 --> 00:08:00.089
And really the best way to experience
this is just to show you.

00:08:00.089 --> 00:08:04.500
And so to do that, my colleague here,
David Tseng who works for VoiceOver

00:08:04.500 --> 00:08:08.009
on Quality is going to give you a demonstration.

00:08:08.009 --> 00:08:12.980
[ Applause ]

00:08:12.980 --> 00:08:13.640
>> Thanks everyone.

00:08:13.639 --> 00:08:14.399
Hi everyone.

00:08:14.399 --> 00:08:19.609
My name is David Tseng and I am a
QA Engineer on the VoiceOver team.

00:08:19.610 --> 00:08:23.920
And I'm really pleased today to
be able to show you VoiceOver

00:08:23.920 --> 00:08:28.790
and some of the new features in
Snow Leopard that we have coming up.

00:08:28.790 --> 00:08:36.820
So I will go ahead and first start VoiceOver
using the Start command, which is Command-F5.

00:08:36.820 --> 00:08:43.120
>> VoiceOver on, mail, window,
inbox, 5 messages, 5 unread, toolbar.

00:08:43.120 --> 00:08:43.960
>> Alright, great.

00:08:43.960 --> 00:08:51.360
So, the first thing I want to point your attention
to is a few of the visual features of VoiceOver,

00:08:51.360 --> 00:08:57.019
which allows for great collaboration between
the VoiceOver user and a sighted user.

00:08:57.019 --> 00:09:01.809
And it also allows you to follow along
as I move around the user interface.

00:09:01.809 --> 00:09:09.659
So the first thing is the caption panel, which
shows everything in print that VoiceOver speaks.

00:09:09.659 --> 00:09:15.939
And there's also a VoiceOver cursor,
which currently is on the toolbar.

00:09:15.940 --> 00:09:17.440
And it's a rectangular highlight.

00:09:17.440 --> 00:09:26.390
And it allows you to follow me as I move around
in the user interface and highlights the focus.

00:09:26.389 --> 00:09:34.019
So today I wanted to go through something that we all
pretty much do every day, which is read and send email.

00:09:34.019 --> 00:09:42.549
And I'm just going to go ahead and use the keyboard and
navigate around and give you a feel of how VoiceOver reads.

00:09:42.549 --> 00:09:45.649
>> Mailboxes, table, one row selected.

00:09:45.649 --> 00:09:46.879
Column 1 of 1.

00:09:46.879 --> 00:09:49.789
Inbox, mailbox, 5 unread.

00:09:49.789 --> 00:09:57.370
>> So I just want to stop and point out that you heard
VoiceOver reading quite a bit of information just there.

00:09:57.370 --> 00:10:03.210
The mailboxes table, column 1 of
1 and it also says the selection.

00:10:03.210 --> 00:10:10.019
So you'll, for a VoiceOver user, all that
information is really actually really essential.

00:10:10.019 --> 00:10:15.049
The name of the item, the role of
the item and what has selection.

00:10:15.049 --> 00:10:19.769
So I will continue and go and select a mailbox.

00:10:19.769 --> 00:10:25.220
>> Interact with mailboxes table,
row 2 of 13 selected, column 1 of 1.

00:10:25.220 --> 00:10:29.040
Inbox, mailbox, 5 unread, edit text, send.

00:10:29.039 --> 00:10:30.849
Mailbox level 1.

00:10:30.850 --> 00:10:38.009
Trash, mailbox 1 unread, level 1, send,
mailbox, inbox, mailbox, 5 unread, level 1.

00:10:38.009 --> 00:10:41.319
Interact with messages table, row 1 of 5.

00:10:41.320 --> 00:10:46.070
Status from Jean LeTeam, Jean LeTeam, subject import.

00:10:46.070 --> 00:10:49.500
You meet for lunch, meet for lunch.

00:10:49.500 --> 00:10:54.779
>> Alright, so I'm just going to read that
message using a keyboard command, VoiceOver J.

00:10:54.779 --> 00:10:56.350
>> Text, Hi David.

00:10:56.350 --> 00:10:57.720
How is demo going?

00:10:57.720 --> 00:10:59.149
Hope everything is doing fine.

00:10:59.149 --> 00:11:02.370
Don't forget to show the cool gesture supporting VoiceOver.

00:11:02.370 --> 00:11:06.539
How about grabbing lunch before the
Accessibility lab in the afternoon tomorrow?

00:11:06.539 --> 00:11:08.419
Patti.

00:11:08.419 --> 00:11:09.139
>> Alright, great.

00:11:09.139 --> 00:11:18.409
So you'll notice that again VoiceOver is reading a lot of
text and there's quite a lot of information being conveyed.

00:11:18.409 --> 00:11:21.509
And also there's a lot of keyboard commands involved.

00:11:21.509 --> 00:11:29.769
I think I must have pressed around 10 keyboard
hotkeys in total to achieve the task of reading mail.

00:11:29.769 --> 00:11:36.750
So there's always, there's something
missing from this whole exercise.

00:11:36.750 --> 00:11:46.960
I really have no understanding at all of
the user interface currently on the screen.

00:11:46.960 --> 00:11:53.690
And in order to deal with that as Eric
mentioned, we put in this feature that allows me

00:11:53.690 --> 00:11:57.820
to touch, really touch the UI using my track pad.

00:11:57.820 --> 00:12:05.310
So instead of trying to explain it further,
I'm going to just show you how that works.

00:12:05.309 --> 00:12:06.839
>> Stop interact.

00:12:06.840 --> 00:12:13.470
>> And I will turn it on using another command.

00:12:13.470 --> 00:12:17.980
>> Track pad command 1, Close toolbar,
Close button, Zoom button,

00:12:17.980 --> 00:12:23.899
Minimize button, Zoom button, inbox 5 messages, 1 unread.

00:12:23.899 --> 00:12:28.669
>> And as you can see, there's a
highlight that shows you exactly where I am

00:12:28.669 --> 00:12:32.889
and we've turned that on for demo purposes.

00:12:32.889 --> 00:12:36.809
>> Toolbar, Messages, Toolbar button.

00:12:36.809 --> 00:12:41.609
Messages, table, 1 row selected,
status, blank from Patti Hoa.

00:12:41.610 --> 00:12:48.840
Subject Meet for lunch, date received, June 5th
2009, 5 mailboxes, table, vertical splitter.

00:12:48.840 --> 00:12:51.639
Mailboxes, table, one row selected.

00:12:51.639 --> 00:12:52.309
Mail Activity.

00:12:52.309 --> 00:12:53.679
Horizontal splitter.

00:12:53.679 --> 00:12:57.859
Mail Activity, Hide Mail Activity Button.

00:12:57.860 --> 00:13:01.039
Mailbox Actions, Menu button, vertical splitter.

00:13:01.039 --> 00:13:03.620
Message content, scrolled area.

00:13:03.620 --> 00:13:05.850
>> Alright, so was that quick?

00:13:05.850 --> 00:13:12.500
Around 10 seconds sweep of my finger across the
track pad, I've actually gotten more information

00:13:12.500 --> 00:13:16.899
from this screen reader than I think I've
ever had with any other screen reader.

00:13:16.899 --> 00:13:20.480
I really have a good understanding of where things are.

00:13:20.480 --> 00:13:26.779
For example, I know that you have your usual
Close, Minimize, and Zoom buttons on the top left.

00:13:26.779 --> 00:13:29.319
You have a toolbar spanning the width of the window.

00:13:29.320 --> 00:13:35.060
There's a mailboxes table, separated by a
vertical splitter from the messages table

00:13:35.059 --> 00:13:40.779
and a horizontal splitter separating
that from the messages content area.

00:13:40.779 --> 00:13:46.490
So that type of information was really
unavailable to screen reader users before this.

00:13:46.490 --> 00:13:54.820
And now we think that it's, it's great that we have
it and it really allows me to understand what's going

00:13:54.820 --> 00:13:57.840
on on the screen, what's prominent on the screen.

00:13:57.840 --> 00:14:03.930
And it allows me to go back to a
piece of UI if I know where it is.

00:14:03.929 --> 00:14:11.039
So I'm going to reply to Patti and
tell her that I would love to do lunch.

00:14:11.039 --> 00:14:15.029
>> Interact with message content, scroll area, two items.

00:14:15.029 --> 00:14:17.539
Message headers text from text.

00:14:17.539 --> 00:14:19.709
Hi David, interact with text.

00:14:19.710 --> 00:14:24.400
Word, tomorrow, reply, now in window, RE meet for lunch.

00:14:24.399 --> 00:14:31.929
Toolbar, sure, semi space, let's do it exclaim.

00:14:31.929 --> 00:14:35.059
Subject. Close button.

00:14:35.059 --> 00:14:36.750
Subject edit text.

00:14:36.750 --> 00:14:39.059
Subject minimize, Zoom button.

00:14:39.059 --> 00:14:40.889
To zoom button.

00:14:40.889 --> 00:14:44.460
Toolbar, characters, interact with toolbar.

00:14:44.460 --> 00:14:45.850
Send button.

00:14:45.850 --> 00:14:49.790
>> And I'm just going to double-tap
this and go ahead and send the message.

00:14:49.789 --> 00:14:54.949
>> Press, now in window, interact with
dialogue for window RE meet for lunch,

00:14:54.950 --> 00:14:58.410
cannot send message using the server SMTP.me.

00:14:58.409 --> 00:15:02.689
Sending a message content to, servers,
tape edit, SMTP server list.

00:15:02.690 --> 00:15:09.050
>> Alright, so looks like we have some
connectivity issues, but that's how Gestures work

00:15:09.049 --> 00:15:22.779
and I'll go ahead and pass it off back to Eric.

00:15:22.779 --> 00:15:23.110
Thanks.

00:15:23.110 --> 00:15:23.169
[ Applause ]

00:15:23.169 --> 00:15:23.549
>> Good job.

00:15:23.549 --> 00:15:23.829
>> Thanks.

00:15:23.830 --> 00:15:28.420
>> OK, so the support that you saw,
Gesture Support, is built into VoiceOver.

00:15:28.419 --> 00:15:31.939
It uses the standard accessibility APIs
which you're just about to learn about.

00:15:31.940 --> 00:15:36.910
So it's not like this is some newfangled thing where it's
going to require tons of support by a third party apps.

00:15:36.909 --> 00:15:39.779
It just works by taking advantage of existing APIs.

00:15:39.779 --> 00:15:46.949
So to talk about those APIs I'd like to invite
another colleague, Patti Hoa on stage to get started.

00:15:46.950 --> 00:15:49.610
>> OK. Well thank you Eric.

00:15:49.610 --> 00:15:51.950
That was a great demo of the VoiceOver.

00:15:51.950 --> 00:15:58.060
Now that you've seen a demo of VoiceOver, you're
probably wondering well how does VoiceOver interact

00:15:58.059 --> 00:15:59.519
with the application?

00:15:59.519 --> 00:16:01.860
Well to do that I'm going to give you an overview

00:16:01.860 --> 00:16:10.580
of the accessibility technology that
we have on the Mac OS X platform.

00:16:10.580 --> 00:16:10.639
[ Period of silence ]

00:16:10.639 --> 00:16:15.840
So, after I give you an overview of the accessibility
technology, then I'm going to have Greg come up

00:16:15.840 --> 00:16:23.610
and show you how to determine how accessible
your application with some of the tools we have.

00:16:23.610 --> 00:16:27.550
And offer you some solutions on how
to accessorize your application.

00:16:27.549 --> 00:16:36.159
So in order to tell you about the accessibility
technology I'll first tell you what are some

00:16:36.159 --> 00:16:43.209
of the available assistive applications we have for
the Mac OS X CD that you have right in your hand.

00:16:43.210 --> 00:16:47.600
And I'll explain to you what the accessibility hierarchy is,

00:16:47.600 --> 00:16:53.730
what are some of the accessibility
information you can obtain from UI elements.

00:16:53.730 --> 00:17:01.440
Then later on I'll show you or take you through how
VoiceOver interacts with the objects in your application.

00:17:01.440 --> 00:17:06.380
And lastly I'll explain to you what
the NSAccessibility Protocol is.

00:17:06.380 --> 00:17:07.670
So VoiceOver.

00:17:07.670 --> 00:17:10.900
VoiceOver is considered an assistive application.

00:17:10.900 --> 00:17:18.680
By that I mean application that takes advantage of the
accessibility API we have on the Mac OS X platform.

00:17:18.680 --> 00:17:23.880
Now there are many other assistive
applications that comes with the Mac OS X CD.

00:17:23.880 --> 00:17:30.510
One of them is the Accessibility
Inspector which is a tool that helps you

00:17:30.509 --> 00:17:34.069
to analyze how accessible your application is.

00:17:34.069 --> 00:17:37.149
And later in a demo we'll show you how to use this tool.

00:17:37.150 --> 00:17:45.950
In addition, we have many other tools that help, that
takes advantage of the accessibility API for things

00:17:45.950 --> 00:17:51.220
like UI interaction recording and UI automation testing.

00:17:51.220 --> 00:17:58.640
And some of those tools are like the instruments, the
Watch Me Do feature of Automater and GUI scripting.

00:17:58.640 --> 00:18:03.790
For today's purpose, I'm going to talk
about VoiceOver and focus on that.

00:18:03.789 --> 00:18:11.329
So one of the questions you may have about
VoiceOver is well how does it access the information

00:18:11.329 --> 00:18:14.799
about the interface in your application?

00:18:14.799 --> 00:18:23.759
Well to do that I'll give you a simple
graphical user interface as an example.

00:18:23.759 --> 00:18:26.599
And you'll hear me often abbreviate it as GUI.

00:18:26.599 --> 00:18:33.519
So in this example, we have just a very
simple window with a button in there.

00:18:33.519 --> 00:18:39.839
And this button just have an image
with a little triangle in as the image.

00:18:39.839 --> 00:18:44.939
Well, we can interpret as maybe a
Forward button or a Play button.

00:18:44.940 --> 00:18:48.330
For today's purpose, we're going
to just say this is a Play button.

00:18:48.329 --> 00:18:51.349
So visually, we see these three objects.

00:18:51.349 --> 00:18:56.779
We see your application, we see the
window and we see a button with an image.

00:18:56.779 --> 00:19:05.660
Well, for assistive applications, they need an alternative
interface to access this very graphical user interface.

00:19:05.660 --> 00:19:14.360
And to do that, we take advantage of
this proxy object called AXUIElementRef.

00:19:14.359 --> 00:19:22.929
It's a very light object that reference the actual object
that represent the GUI that you see, object you see.

00:19:22.930 --> 00:19:31.930
So in this example, an application, we know internally
it's implemented with an NSApplication object.

00:19:31.930 --> 00:19:38.060
We have an AXUIElementRef that access these Cocoa objects.

00:19:38.059 --> 00:19:43.759
So the AXUIElementRef can access many
accessibility information about object.

00:19:43.759 --> 00:19:49.390
One of which is the role of the object,
which tells you what type of UI it is.

00:19:49.390 --> 00:19:54.490
In this case, an application object
will have a role of AXApplication.

00:19:54.490 --> 00:19:57.309
And that will be the same for like a window.

00:19:57.309 --> 00:20:04.789
A window will have an AXUIElementRef with a
role of AXWindow and the same with a button too.

00:20:04.789 --> 00:20:13.980
And the way these AXUIElementRef are represented is in
a tree hierarchy with a parent-child hierarchy level.

00:20:13.980 --> 00:20:20.019
So for example, in this particular GUI
will see that the window is a child of the

00:20:20.019 --> 00:20:23.389
that application and the button is a child of the window.

00:20:23.390 --> 00:20:28.150
And vice versa, the window is the parent of the button.

00:20:28.150 --> 00:20:33.740
Now as a Cocoa developer, you know the way
this GUI is implemented is slightly different.

00:20:33.740 --> 00:20:39.349
Right? You have an NSApplication object
with a NSWindow object and inside

00:20:39.349 --> 00:20:43.919
of it there's the NSButton object
which contains the NSButtonCell.

00:20:43.920 --> 00:20:50.279
And you may also know that the window also
have a frame layer and also a content layer.

00:20:50.279 --> 00:20:57.980
So obviously this is many layers, more layers than
that's relevant for the accessibility hierarchy.

00:20:57.980 --> 00:21:05.910
So what Cocoa has is a concept called
ignoring elements that allows to you

00:21:05.910 --> 00:21:13.590
in essence not expose certain layers
for the accessibility hierarchy.

00:21:13.589 --> 00:21:18.399
And so in this case, NSView and
NSButton are by default ignored.

00:21:18.400 --> 00:21:23.590
And by, when I say ignored, it doesn't mean that
all the children are hidden you know in any sense.

00:21:23.589 --> 00:21:26.980
It just means that we pass right through those layers.

00:21:26.980 --> 00:21:35.319
So in this case the window, NSWindow layer because the
NSView and the NSButton layers are ignored by default,

00:21:35.319 --> 00:21:39.079
it pass right through to the NSButtonCell layer.

00:21:39.079 --> 00:21:43.470
So with that, we're able to do a 1 to 1 mapping back

00:21:43.470 --> 00:21:50.240
to the alternative user interface
that contains these AXUIElementRef.

00:21:50.240 --> 00:21:53.250
So let's take a look at the button as an example.

00:21:53.250 --> 00:22:00.569
And let's see what kind of information can
VoiceOver obtain about this piece of UI element.

00:22:00.569 --> 00:22:07.129
Well by default you can always get the role information
which is, which tells you what type of UI it is.

00:22:07.130 --> 00:22:08.890
In this case it's AXButton.

00:22:08.890 --> 00:22:14.020
And then the role description gives you a
user-friendly description for that type of UI.

00:22:14.019 --> 00:22:15.200
In this case it's button.

00:22:15.200 --> 00:22:24.740
And then we have attributes like parent and earlier
you saw the parent-child hierarchy for this GUI

00:22:24.740 --> 00:22:31.200
or graphical user interface and you know
that the parent of that button is the window.

00:22:31.200 --> 00:22:32.450
So that's what we return here.

00:22:32.450 --> 00:22:40.610
And then we have attribute like the AXTitle,
the AX top level UI element and by default most

00:22:40.609 --> 00:22:48.729
of your UI will have the window as the top level UI
element, but if your UI sits inside a sheet or a drawer,

00:22:48.730 --> 00:22:53.870
then you want to return that sheet
or the drawer as the UI element.

00:22:53.869 --> 00:23:00.559
Then we have attributes such as enabled
that tells you the enabled state of that UI.

00:23:00.559 --> 00:23:06.669
Now obviously if it's not enabled, then it's
probably grayed out or dimmed out in the interface.

00:23:06.670 --> 00:23:12.070
Then you have focus that tells you
whether or not it has the keyboard focus.

00:23:13.599 --> 00:23:18.019
Now, many of the buttons have labels associated with them.

00:23:18.019 --> 00:23:23.019
Now in this, so if you do then you provide the AXTitle.

00:23:23.019 --> 00:23:27.019
But in this case we actually have an image for this button.

00:23:27.019 --> 00:23:33.900
So what you want to do is actually provide the
AXDescription for it and you know because you

00:23:33.900 --> 00:23:36.430
as a developer know what this button will do.

00:23:36.430 --> 00:23:38.830
So you have to provide description.

00:23:38.829 --> 00:23:43.569
In this case, you know, we know this is a
Play button, so you return the string play.

00:23:44.619 --> 00:23:51.909
Now we also have attributes for the position and
size that tells you where this UI sits on the screen.

00:23:51.910 --> 00:23:57.570
Now these attributes allows VoiceOver to
draw its VoiceOver cursor around the UI,

00:23:57.569 --> 00:24:02.169
which is that black rectangular box you see around the UI.

00:24:02.170 --> 00:24:07.660
And then for some UIs they have
an action associated with it.

00:24:07.660 --> 00:24:16.400
By action I don't mean actions for what this button can
do, but I mean actions that more of a user input action.

00:24:16.400 --> 00:24:20.680
So we know that for a button usually
you can mouse click to press it.

00:24:20.680 --> 00:24:27.799
So in this case, there's a AXPress action for this button.

00:24:27.799 --> 00:24:32.950
Now, when VoiceOver land on this button, it'll
probably say something like "play button".

00:24:32.950 --> 00:24:42.390
And that's because VoiceOver used two attributes in
specific, one is the AXDescription which has the string play

00:24:42.390 --> 00:24:45.400
and the role description which has the string button.

00:24:45.400 --> 00:24:49.410
So with those two alone VoiceOver
is able to speak "play button".

00:24:49.410 --> 00:24:55.910
Now you see that whole list of attributes
that's available for the Button UI element.

00:24:55.910 --> 00:25:02.630
Well, if you just use a standard Cocoa widget like
an NSButton or such, you'll get all of this for free.

00:25:02.630 --> 00:25:07.070
AppKit will provide accessibility
information for that button.

00:25:07.069 --> 00:25:10.609
The only thing you will need to
provide is the AXDescription.

00:25:10.609 --> 00:25:17.289
And that's because AppKit has no
idea what your button would do.

00:25:17.289 --> 00:25:22.329
So, now you know how VoiceOver access
the information from your interface.

00:25:22.329 --> 00:25:28.980
The next question you may well have how does VoiceOver
interact with the objects in your application?

00:25:28.980 --> 00:25:37.069
So to know that I want to first tell you that VoiceOver
sits on a separate process than your application.

00:25:37.069 --> 00:25:42.889
And the way VoiceOver access accessibility
information from your application is

00:25:42.890 --> 00:25:49.100
through the accessibility API which
we often abbreviate as AX API.

00:25:49.099 --> 00:25:57.629
And then the AX API will take that request and you know
sends it off to the application that's in interest.

00:25:57.630 --> 00:26:05.370
So to show you, give you a more detailed explanation on
how that interaction works, I'm going to use the example

00:26:05.369 --> 00:26:11.109
of the AXRoleDescription when VoiceOver
asks for that particular attribute.

00:26:11.109 --> 00:26:17.899
So what happens is VoiceOver first
gets that button AXUIElementRef.

00:26:17.900 --> 00:26:26.470
And as you know goes through the AX API and asks for the
role description, that request goes over to the AppKit side

00:26:26.470 --> 00:26:30.710
or your application and since your
application is a Cocoa application,

00:26:30.710 --> 00:26:37.220
that AppKit accessibility infrastructure
would handle that request first.

00:26:37.220 --> 00:26:42.220
Alright? So the AppKit sees that
button AXUIElementRef and says oh,

00:26:42.220 --> 00:26:49.420
I can map this to the actual Cocoa object
which in this case is the NSButtonCell.

00:26:49.420 --> 00:26:57.220
By default, you should know that it's the cell of the
control that handles the accessibility information.

00:26:57.220 --> 00:27:02.819
OK? So in this case, AppKit will
make a request to the NSButtonCell.

00:27:02.819 --> 00:27:09.240
And it does that through the NSAccessibility
protocol which are a bunch of methods that allows you

00:27:09.240 --> 00:27:13.349
to access accessibility information for a Cocoa object.

00:27:13.349 --> 00:27:17.939
And one of those methods is called
accessibilityAttributeValue

00:27:17.940 --> 00:27:21.120
that takes the attribute as a parameter.

00:27:21.119 --> 00:27:25.129
So in this case, the one we're interested
in is the role description attribute.

00:27:25.130 --> 00:27:28.630
But note that I have a different
constant there for the attribute.

00:27:28.630 --> 00:27:32.600
It's called NSAccessibilityRoleDescription.

00:27:32.599 --> 00:27:35.980
That's equivalent to the AXRoleDescription.

00:27:35.980 --> 00:27:39.680
This is the AppKit version of the constant.

00:27:39.680 --> 00:27:45.299
So the AXRoleDescription is equivalent
to NSAccessibilityRoleDescription.

00:27:45.299 --> 00:27:52.139
For your purpose when you're coding, you'll be
using the NSAccessibility version of the constant.

00:27:52.140 --> 00:27:55.540
Alright, so AppKit sends this request to the button cell

00:27:55.539 --> 00:27:59.069
and the button cell says oh I got
a request for the role description.

00:27:59.069 --> 00:28:01.289
Well I know my role description is button.

00:28:01.289 --> 00:28:04.549
So I'll return that as the string.

00:28:04.549 --> 00:28:07.680
So now AppKit gets that answer back.

00:28:07.680 --> 00:28:16.330
It bundles the information back into the
AXUIElementRef and sends it across to VoiceOver.

00:28:16.329 --> 00:28:20.000
And that's how VoiceOver is able to speak button.

00:28:20.000 --> 00:28:27.809
So now you see how the interaction work and I want to
talk a little bit about the NSAccessibility protocol.

00:28:27.809 --> 00:28:36.869
By the way, the NSAccessibility protocol is not the
same as the Accessibility API that I mentioned earlier.

00:28:36.869 --> 00:28:43.069
The Accessibility API or AX API is
used for assistive applications.

00:28:43.069 --> 00:28:51.369
You as a developer of Cocoa application should focus
on the NSAccessibility API that I'm showing here.

00:28:51.369 --> 00:28:55.089
Now you've seen one of them which is
the accessibility attribute value.

00:28:55.089 --> 00:28:58.329
It's probably one of the ones you'll be using most often

00:28:58.329 --> 00:29:03.849
to provide additional accessibility
information or tweak some information.

00:29:03.849 --> 00:29:13.839
Now there are other methods like the one that returns
the list of attributes or there's a method that tells you

00:29:13.839 --> 00:29:19.980
if an attribute is settable and sets it if you need it to.

00:29:19.980 --> 00:29:28.160
Also, there's the parameterized version of the method
that takes, basically takes an additional parameter.

00:29:28.160 --> 00:29:38.080
And also if your UI has some user interaction for,
then you need to provide the action that this hears,

00:29:38.079 --> 00:29:41.889
you know like for example the AXPress action I mentioned.

00:29:41.890 --> 00:29:50.410
And here's a list of some of the actions that are supported
like the AXPress action, AXShowMenu action, etcetera.

00:29:50.410 --> 00:29:53.130
And also we have some other methods.

00:29:53.130 --> 00:29:58.190
For example, the accessibility hit
test, which takes a point on the screen

00:29:58.190 --> 00:30:02.289
and tells you what is the UIElement underneath.

00:30:02.289 --> 00:30:07.059
It's used in applications like the Accessibility Inspector.

00:30:07.059 --> 00:30:09.700
And the Gesture support in VoiceOver.

00:30:09.700 --> 00:30:16.350
And also you have a focus UI element which
tells you what has the keyboard focus.

00:30:16.349 --> 00:30:19.409
And also the accessibilityIsIgnored.

00:30:19.410 --> 00:30:27.840
This is the method that allows you to determine if your UI
should be exposed in the accessibility hierarchy or not.

00:30:27.839 --> 00:30:32.289
So by default we know for example that NSView is ignored.

00:30:32.289 --> 00:30:39.690
Well if you have a custom NSView and you want
to expose it in the accessibility hierarchy,

00:30:39.690 --> 00:30:43.430
basically you know allow VoiceOver to see it,

00:30:43.430 --> 00:30:49.640
then you may want to consider taking a
look at this method and override that.

00:30:49.640 --> 00:30:53.350
And also we have some notification support.

00:30:53.349 --> 00:30:59.559
Now this is very useful because it tells you what
are the changes that's occurring on the screen.

00:30:59.559 --> 00:31:04.109
So you know things like keyboard focus
changes, selection changes, etcetera.

00:31:04.109 --> 00:31:10.099
By default, if you use Cocoa with just
these all done automatically for you.

00:31:10.099 --> 00:31:15.929
But if you have some custom NSView and you want to
be, you know you might want to take a look at this

00:31:15.930 --> 00:31:19.279
and see if you need to provide some
of these notifications yourself.

00:31:19.279 --> 00:31:26.230
And if you do, we have API called
NSAccessibilityPostNotification that allows you

00:31:26.230 --> 00:31:29.069
to basically provide those notifications.

00:31:29.069 --> 00:31:32.990
So in a nutshell, this is NSAccessibility protocol.

00:31:32.990 --> 00:31:39.589
I know this is a lot of information, but the good
news is that if you use standard Cocoa widgets,

00:31:39.589 --> 00:31:45.169
you wouldn't have to do much at all because
AppKit will do most of this work for you.

00:31:45.170 --> 00:31:51.410
OK? And with that, I'm going to now
turn over to Greg Hughes to show you how

00:31:51.410 --> 00:31:57.210
to determine how accessible your
application is and offer you some

00:31:57.210 --> 00:32:00.380
of the solutions on how to accessorize your application.

00:32:00.380 --> 00:32:03.640
>> So as Patti said, I'm going to show
you how to audit your application.

00:32:03.640 --> 00:32:09.350
And by audit I mean how you can examine your application
for the areas where accessibility could be improved.

00:32:09.349 --> 00:32:13.099
And that includes areas where accessibility
is lacking completely

00:32:13.099 --> 00:32:18.619
and areas where the accessibility information just
isn't quite enough or you could add more information

00:32:18.619 --> 00:32:21.329
and it would be really helpful to a VoiceOver user.

00:32:21.329 --> 00:32:27.579
And so to demo this, I'm going to use
the old Apple example called Sketch.

00:32:27.579 --> 00:32:39.970
It has been a developer example back in Leopard and
its also available in the Snow Leopard Developer Tools.

00:32:39.970 --> 00:32:41.370
[ Period of silence ]

00:32:41.369 --> 00:32:43.309
So here we have Sketch.

00:32:43.309 --> 00:32:47.019
We have a main, pretty simple window
where we can draw shapes.

00:32:47.019 --> 00:32:48.299
We have a Tool Palette.

00:32:48.299 --> 00:32:50.740
And also a Tool Inspector.

00:32:50.740 --> 00:32:55.460
Whenever looking at accessorizing an application,
the first thing I always use is VoiceOver.

00:32:55.460 --> 00:33:00.309
I find it gives me a pretty quick way to
look at the overview of the application.

00:33:00.309 --> 00:33:03.859
There's also another tool, Accessibility
Inspector which I'll show you after.

00:33:03.859 --> 00:33:06.990
So I'm going to start VoiceOver.

00:33:06.990 --> 00:33:17.299
[ Background noise ]

00:33:17.299 --> 00:33:25.220
And it looks like we don't have sound.

00:33:25.220 --> 00:33:25.390
[ Background noise ]

00:33:25.390 --> 00:33:27.970
>> Log on, building line output.

00:33:27.970 --> 00:33:34.380
Sketch window, graphics, now in
window, sample, 100%, pop-up button.

00:33:34.380 --> 00:33:40.430
>> OK, so now we have VoiceOver on and we just
heard that we're currently on a pop-up button.

00:33:40.430 --> 00:33:44.190
So when looking at an application, I
always try to start at the top level.

00:33:44.190 --> 00:33:46.630
I look at the window level of the application.

00:33:46.630 --> 00:33:51.310
So I'm going to bring up VoiceOver's window
Chooser which shows me a list of current windows.

00:33:51.309 --> 00:33:53.349
>> VoiceOver Help menu, six items.

00:33:53.349 --> 00:34:00.259
>> Since we'll assume I forgot the command, we have a really
nice help system where I can look up any command line voice.

00:34:00.259 --> 00:34:01.970
>> Control option question.

00:34:01.970 --> 00:34:03.860
>> Where I can look up any command with VoiceOver.

00:34:03.859 --> 00:34:10.539
>> Commands Help menu, Commands Help menu, 13, 10
items, Window Chooser menu, control option F2, F2.

00:34:10.539 --> 00:34:12.489
Window Chooser menu, 3 items.

00:34:12.489 --> 00:34:14.719
>> So here we have the Window Chooser.

00:34:14.719 --> 00:34:17.209
And we see the first problem with this application.

00:34:17.210 --> 00:34:19.199
One of our windows is just called untitled.

00:34:19.199 --> 00:34:24.409
And that doesn't really give a VoiceOver user
much information for what that window contains.

00:34:24.409 --> 00:34:31.000
So if I arrow down to that window, we'll see the VoiceOver
cursor, the small black bar highlight around the toolbar.

00:34:31.000 --> 00:34:33.329
>> Preview current, untitled.

00:34:33.329 --> 00:34:37.789
>> And so we see now in this tool palette,
instead of untitled, this should say Tool Palette

00:34:37.789 --> 00:34:41.170
or something more, or something appropriate.

00:34:41.170 --> 00:34:45.760
So if we continue now and look at the Tool
Palette and at the items inside of it.

00:34:45.760 --> 00:34:47.860
>> Selected radio button one of five.

00:34:47.860 --> 00:34:49.510
Radio button two of five.

00:34:49.510 --> 00:34:51.940
Radio button three of five.

00:34:51.940 --> 00:34:57.130
>> We see that the radio buttons, the buttons on
this Tool Palette, don't provide a description.

00:34:57.130 --> 00:35:02.660
And arguably, or most of you, many developers might
argue that radio button really isn't accurate here

00:35:02.659 --> 00:35:04.670
because they don't look like a radio button.

00:35:04.670 --> 00:35:08.010
But to a VoiceOver user, it behaves
exactly like a radio button.

00:35:08.010 --> 00:35:11.640
Only one of these can be selected at a
time and when you select another one,

00:35:11.639 --> 00:35:14.349
the one that was selected becomes deselected.

00:35:14.349 --> 00:35:17.409
So from an accessibility standpoint, these are radio buttons

00:35:17.409 --> 00:35:20.369
but we just don't have a description,
we don't know what they do.

00:35:20.369 --> 00:35:23.579
So if we continue on and look at another window.

00:35:23.579 --> 00:35:27.590
>> Window, Window Chooser menu, three
items, preview current graphics.

00:35:27.590 --> 00:35:31.030
Window 3.32, edit text content selected.

00:35:31.030 --> 00:35:37.050
>> So we see here that we just heard
3.32 edit text content selected.

00:35:37.050 --> 00:35:40.670
We don't really know what this value means.

00:35:40.670 --> 00:35:44.070
And if we move along to another edit box in this window.

00:35:44.070 --> 00:35:47.340
>> 131.00 edit text content selected.

00:35:47.340 --> 00:35:50.539
>> So we have a lot of information
and the information is accurate.

00:35:50.539 --> 00:35:53.440
But there's more information that
could be told to a VoiceOver user.

00:35:53.440 --> 00:35:55.559
There's more information that could be output.

00:35:55.559 --> 00:35:57.259
And that's a label for these fields.

00:35:57.260 --> 00:35:59.610
There's really no contextual information.

00:35:59.610 --> 00:36:02.300
I could move around and infer here that the label

00:36:02.300 --> 00:36:07.590
to the left width is what is supposed
to go along with this edit text.

00:36:07.590 --> 00:36:15.690
But it'd be much better if the developer here could provide
a label for this field programmatically so that we know

00:36:15.690 --> 00:36:19.740
from a VoiceOver standpoint what
we should output as the label.

00:36:19.739 --> 00:36:24.929
>> 3.32 edit text content, 18.4% slider.

00:36:24.929 --> 00:36:27.619
>> And here for the slider, we just hear a percentage.

00:36:27.619 --> 00:36:35.940
So again, the output isn't wrong, it's just not the
best output that could be provided to a VoiceOver user.

00:36:35.940 --> 00:36:40.909
The percentage represents where the slider is, but it
doesn't tell me that it's really going to be a pixel value.

00:36:40.909 --> 00:36:45.909
It doesn't tell me that 3.32 value
that's displayed next to the slider.

00:36:48.530 --> 00:36:50.710
And if I jump now back to the main window.

00:36:50.710 --> 00:36:54.130
>> Window, Window Chooser menu,
three items, preview current sample.

00:36:54.130 --> 00:36:56.880
100%, pop-up button.

00:36:56.880 --> 00:36:59.670
>> Here when auditing your application, you'd go through

00:36:59.670 --> 00:37:03.920
and make sure you can do the entire
workflow using just VoiceOver.

00:37:03.920 --> 00:37:07.289
Alternatively the entire workflow using just the keyboard.

00:37:07.289 --> 00:37:11.730
And with Sketch, we quickly find out that we
can't add any shapes without using the mouse.

00:37:11.730 --> 00:37:16.909
This program requires you to move the mouse,
click and drag in order to add a shape.

00:37:16.909 --> 00:37:19.319
And so this is a part of accessibility
that's really important.

00:37:19.320 --> 00:37:24.530
And that's making sure that your application can be used by
users who might not have enough mobility to use the mouse

00:37:24.530 --> 00:37:27.220
or users who might be using just VoiceOver.

00:37:27.219 --> 00:37:30.389
And therefore not have access to the mouse.

00:37:30.389 --> 00:37:35.859
And the last problem we'll see here is that this
drawing area is not accessible with VoiceOver.

00:37:35.860 --> 00:37:39.039
If I try to move to it now.

00:37:39.039 --> 00:37:39.250
[ Tones ]

00:37:39.250 --> 00:37:45.019
I just get an error sound, meaning that
there are no more elements to move to.

00:37:45.019 --> 00:37:51.000
And this is because this is a custom view and
by default NSViews are ignored by accessibility.

00:37:51.000 --> 00:37:57.230
Because they could be representing anything and it's up
to the developer to implement accessibility for that view.

00:37:57.230 --> 00:38:00.760
So now I'd like to show you Accessibility Inspector.

00:38:00.760 --> 00:38:01.960
>> VoiceOver off.

00:38:01.960 --> 00:38:08.099
[ Period of silence ]

00:38:08.099 --> 00:38:13.230
>> And Accessibility Inspector is another
great tool for auditing your application.

00:38:13.230 --> 00:38:16.289
But I personally find it much more
handy when I'm programming.

00:38:16.289 --> 00:38:18.969
To use it, you just hover your mouse over any component.

00:38:18.969 --> 00:38:21.000
Here I'll hover over one of the buttons.

00:38:21.000 --> 00:38:24.119
And we see all of the accessibility
information that's returned.

00:38:24.119 --> 00:38:27.679
So when I'm auditing an application,
I find this a bit overwhelming.

00:38:27.679 --> 00:38:31.509
I don't really know what's missing, I
don't know what really should be there.

00:38:31.510 --> 00:38:37.710
For example here, it's tough to notice quickly by looking
at this that there's no title or there's no description.

00:38:37.710 --> 00:38:41.579
Whereas with VoiceOver we saw that in a matter of seconds.

00:38:41.579 --> 00:38:45.719
When I switch and I'm programming, it's really
nice here to make sure that the proper title

00:38:45.719 --> 00:38:48.269
or the proper description is returned or that any

00:38:48.269 --> 00:38:53.389
of these other values are actually what
I'm sending back from my application.

00:38:53.389 --> 00:38:58.119
One nice thing about Accessibility Inspector is
that you can lock on to an element using Command-F7.

00:38:58.119 --> 00:39:04.150
And you see here it highlighted
the button in a light shade of red.

00:39:04.150 --> 00:39:11.990
And with Accessibility Inspector, I can navigate now up and
down the accessibility tree with the pop-up button here.

00:39:11.989 --> 00:39:18.919
So I can go up to the container and then all the way up to
the window and look at the accessibility information there.

00:39:18.920 --> 00:39:25.119
And this is really helpful when you're trying to find
problems with the accessibility hierarchy because in order

00:39:25.119 --> 00:39:29.789
for VoiceOver and other assistive applications to
work properly, the accessibility hierarchy needs

00:39:29.789 --> 00:39:34.509
to be intact both going up the
tree and coming back down the tree.

00:39:34.510 --> 00:39:40.300
So this is a nice way to be able to find those
problems and navigate through your application.

00:39:40.300 --> 00:39:41.900
So now we've looked at our application.

00:39:41.900 --> 00:39:47.940
We've seen the problems with it and we've seen areas
that were lacking accessibility information completely

00:39:47.940 --> 00:39:52.090
and also areas where the accessibility
information could be improved.

00:39:52.090 --> 00:39:56.550
Specifically in Sketch, we saw six problems.

00:39:56.550 --> 00:40:02.880
The first problem was the window, the Tool Palette didn't
have a description and we didn't know what was in that.

00:40:02.880 --> 00:40:06.190
We just heard untitled from the VoiceOver window Chooser.

00:40:06.190 --> 00:40:12.230
Next we saw the buttons in the Tool
Palette didn't have descriptions,

00:40:12.230 --> 00:40:16.849
landing on them we heard radio
button 1 of 5, radio button 4 of 5.

00:40:16.849 --> 00:40:19.719
And the radio button part was accurate,
but we really need a description.

00:40:19.719 --> 00:40:23.779
We need to know that this is the Circle
tool or this is the Selection tool.

00:40:23.780 --> 00:40:32.840
Next we saw that in the Inspector, the edit fields
and other controls in the Inspector didn't have labels

00:40:32.840 --> 00:40:39.500
and so an assistive technology user would have to try to
navigate around and infer what value they were changing.

00:40:39.500 --> 00:40:44.210
And in most applications, there would be a fair
amount of success, but depending on the layout,

00:40:44.210 --> 00:40:46.550
this can be really tricky for a VoiceOver user.

00:40:46.550 --> 00:40:49.800
And it ends up requiring a lot of guessing.

00:40:49.800 --> 00:40:53.240
So here's where we could improve accessibility.

00:40:53.239 --> 00:40:57.250
We also saw that VoiceOver didn't really
give us informative output for the slider.

00:40:57.250 --> 00:41:01.019
We heard a percentage instead of the value
that the slider is actually representing.

00:41:01.019 --> 00:41:03.739
And this is just kind of the inherent nature of sliders.

00:41:03.739 --> 00:41:08.419
They provide a value back to the programmer of the
application, which then has to interpret that value.

00:41:08.420 --> 00:41:13.260
Well, for accessibility reasons
it's good for that interpreted value

00:41:13.260 --> 00:41:17.570
to also be returned over the accessibility API.

00:41:17.570 --> 00:41:22.460
We then saw that the application didn't
have, provide full keyboard access.

00:41:22.460 --> 00:41:25.409
The application required the user to use the mouse.

00:41:25.409 --> 00:41:28.759
And this is a really big part of
accessibility as I mentioned a minute ago.

00:41:28.760 --> 00:41:34.780
And it's making sure that your application has multiple
methods of navigation, multiple methods of input.

00:41:34.780 --> 00:41:37.010
Specifically the keyboard and mouse.

00:41:37.010 --> 00:41:41.620
Last we saw that the canvas area was inaccessible.

00:41:41.619 --> 00:41:48.929
This is because it's in NSView and there's no accessibility
information added here and AppKit could really only guess.

00:41:48.929 --> 00:41:54.779
Unfortunately we're not mind readers yet and we
don't know what a custom view is going to contain.

00:41:54.780 --> 00:42:00.510
So here's also another area where there is no
accessibility information in this application.

00:42:00.510 --> 00:42:04.820
During this talk, I'm not going to have a
chance to get to accessorizing this custom view.

00:42:04.820 --> 00:42:09.190
But there's going to be a really great talk
on Friday about advanced accessibility.

00:42:09.190 --> 00:42:15.119
And it'll pretty much pick up where we left off and talk
about customizing or sorry, accessorizing your custom views.

00:42:15.119 --> 00:42:19.549
And it'll use Sketch as the example
view in accessorizing that

00:42:19.550 --> 00:42:22.050
So now we have our list of problems.

00:42:22.050 --> 00:42:26.880
So what you would generally do with this list is just
like any other bug or enhancement you're working on,

00:42:26.880 --> 00:42:32.410
prioritize them based on what's the most important
area of your application to be accessible.

00:42:32.409 --> 00:42:37.309
Sometimes it's tempting to grab the low hanging
fruits but generally it's more important

00:42:37.309 --> 00:42:40.230
to do the area that's used more often by users.

00:42:40.230 --> 00:42:47.440
So here we're just going to go through
them in the order that we found.

00:42:47.440 --> 00:42:53.789
Generally here we probably want to start with the canvas,
but unfortunately since that's the most difficult,

00:42:53.789 --> 00:42:57.380
we will start just as I said in
the order that we found them.

00:42:57.380 --> 00:43:04.230
So the first one was that the window title, that
we didn't have a description for the Tool Palette.

00:43:05.829 --> 00:43:10.819
For argument sake, let's assume here that
the developer didn't want to have a title.

00:43:10.820 --> 00:43:18.340
Generally or sorry, all the time if there was a title, this
title would be provided over the Accessibility API for us.

00:43:18.340 --> 00:43:22.780
So assuming that for whatever reason the developer
didn't want to have a title as in this case,

00:43:22.780 --> 00:43:24.810
we're going to have to provide a description.

00:43:24.809 --> 00:43:25.829
And specifically we're going

00:43:25.829 --> 00:43:29.759
to use the NSAccessibilityDescriptionAttribute
to provide that description.

00:43:29.760 --> 00:43:36.900
This is a human readable, localized string that should
be in all lower case and you want to make sure not

00:43:36.900 --> 00:43:39.680
to confuse this with the role description.

00:43:39.679 --> 00:43:42.049
This description is going to tell us what the button does.

00:43:42.050 --> 00:43:43.430
For example, the word print.

00:43:43.429 --> 00:43:44.750
It's not going to tell us that it's a button.

00:43:44.750 --> 00:43:50.139
And you want to also make sure not to
include the role in the description.

00:43:50.139 --> 00:43:53.920
Otherwise you'll get output like Print button button.

00:43:53.920 --> 00:43:56.070
So how do you provide this?

00:43:56.070 --> 00:43:59.580
Well the easiest way is to use Interface Builder.

00:43:59.579 --> 00:44:03.869
And in Interface Builder all you do is bring
up the Inspector for any object you want

00:44:03.869 --> 00:44:10.039
to add this accessibility description to and
in the Inspector there's an Accessibility tab.

00:44:10.039 --> 00:44:13.659
And you can add the description or the help right in there.

00:44:13.659 --> 00:44:22.059
And just like the rest of your project, you would
want to localize this with the rest of your nib.

00:44:22.059 --> 00:44:24.210
However this isn't always an option.

00:44:24.210 --> 00:44:28.190
Specifically in this case, you can't add a
description in Interface Builder on Windows

00:44:28.190 --> 00:44:30.980
because the assumption is that there will always be a title.

00:44:30.980 --> 00:44:35.079
But in some cases you don't always have an object
in Interface Builder that you can add this to

00:44:35.079 --> 00:44:38.750
or maybe you add something to your nib programmatically.

00:44:38.750 --> 00:44:41.309
So we also have ways to do this programmatically.

00:44:41.309 --> 00:44:49.389
On the class level, you can override the methods
accessibilityAttributesNames which returns a list of all

00:44:49.389 --> 00:44:52.239
of the attributes that that object supports.

00:44:52.239 --> 00:44:59.689
And accessibilityAttributeValue, which given a specific
accessibility value returns the value for that attribute.

00:44:59.690 --> 00:45:02.190
So these have a few downfalls.

00:45:02.190 --> 00:45:04.460
They need to be used in the right place.

00:45:04.460 --> 00:45:10.389
Specifically on the class level, now these are
going to be used for all instances of that class.

00:45:10.389 --> 00:45:14.719
So if you had a button class that was used all over
your application it might be difficult to do this

00:45:14.719 --> 00:45:18.519
on the class level because all
of your buttons don't mean print.

00:45:18.519 --> 00:45:25.440
So here we can also use accessibilitySetOverride
forAttribute.

00:45:25.440 --> 00:45:29.340
And this allows us, given a single
object, to set the accessibility override.

00:45:29.340 --> 00:45:35.340
So this takes a value in the attribute that we
want to override and it sets it on that object.

00:45:35.340 --> 00:45:40.019
The two important things to remember when
using accessibilitySetOverride is first

00:45:40.019 --> 00:45:42.440
that this shouldn't be used for dynamic values.

00:45:42.440 --> 00:45:44.420
This should be used for a value that stays the same.

00:45:44.420 --> 00:45:48.079
For example, we saw with the description of this window.

00:45:48.079 --> 00:45:49.779
That's not going to change.

00:45:49.780 --> 00:45:53.860
If something is going to change a
lot, then we don't want to use this.

00:45:53.860 --> 00:46:00.769
But also we want to use this specifically only
for description, title, sorry, it's description,

00:46:00.769 --> 00:46:03.420
title UI element, linked UI element and help.

00:46:03.420 --> 00:46:07.300
And there are quite a few reasons for this.

00:46:07.300 --> 00:46:10.820
You can come and talk to any one of
us later if you're really interested.

00:46:10.820 --> 00:46:16.080
But for now let's just take this on the assumption
there's only these four this should be used for.

00:46:16.079 --> 00:46:22.019
So we've solved the problem now or we've seen a few
solutions on how we can add a description to the window.

00:46:22.019 --> 00:46:23.449
How about the buttons?

00:46:23.449 --> 00:46:27.399
Well we could use any of those existing,
any of those three methods that we just saw.

00:46:27.400 --> 00:46:33.079
But we found that a lot of you have a
lot of images all over your application.

00:46:33.079 --> 00:46:36.569
And so for Snow Leopard we have a
great new API and some great new ways

00:46:36.570 --> 00:46:41.090
to add accessibility information on these images.

00:46:41.090 --> 00:46:47.300
So given an object that is an NSImage,
you can do setAccessibilityDescription

00:46:47.300 --> 00:46:49.640
and provide a description for that image.

00:46:49.639 --> 00:46:53.609
Now, automatically this description
will be picked up by some Cocoa objects,

00:46:53.610 --> 00:46:56.039
specifically in our case the NSButtonCell.

00:46:56.039 --> 00:46:59.329
And that description will be used automatically.

00:46:59.329 --> 00:47:03.819
But now we have an even easier way to
provide accessibility descriptions on images.

00:47:03.820 --> 00:47:08.110
And that's that we've built in strings file support.

00:47:08.110 --> 00:47:15.260
So as an example, let's assume we have our circle
image here that's loaded as an NSImage or even used

00:47:15.260 --> 00:47:19.620
in Interface Builder as the content of a button cell.

00:47:19.619 --> 00:47:26.109
If in our project we created a file called
AccessibilityImageDescriptions.strings.

00:47:26.110 --> 00:47:29.079
We could add a line that says circle equals circle tool.

00:47:29.079 --> 00:47:36.909
Now automatically AppKit is going to see this, attach
this as the, link this as the image description

00:47:36.909 --> 00:47:39.679
and then the NSButtonCell will use that automatically.

00:47:39.679 --> 00:47:47.019
And this is really, really helpful because now it allows
me to isolate where I'm adding all these descriptions.

00:47:47.019 --> 00:47:51.900
So rather than go through my code and find where all
these buttons are or where all the images are loaded,

00:47:51.900 --> 00:47:57.730
I can just add this one strings file in one place
and add all the image descriptions right there.

00:47:57.730 --> 00:48:01.329
The one slight downside is that
this image description now is going

00:48:01.329 --> 00:48:05.230
to be used every time that image shows up in your UI.

00:48:05.230 --> 00:48:11.420
So if you have something like an Add button, and
in one location in your UI it meant add person,

00:48:11.420 --> 00:48:18.050
in another location it meant add mailbox, adding in a line
entry here isn't really the best solution because you want

00:48:18.050 --> 00:48:20.260
to have a different entry for both buttons.

00:48:20.260 --> 00:48:23.930
So you would have to choose another programmatic solution.

00:48:25.349 --> 00:48:30.929
So now we've seen how to add descriptions and we
can move along to how we can improve the interface,

00:48:30.929 --> 00:48:35.159
how we can add labels for some of these UI elements.

00:48:35.159 --> 00:48:36.969
So this is really, really simple.

00:48:36.969 --> 00:48:40.159
And like description, we can do it in Interface Builder.

00:48:40.159 --> 00:48:45.309
We can just control-drag from the object we
want to label to the label and select title.

00:48:45.309 --> 00:48:49.570
And the easiest way to remember this is just
like anything else in Interface Builder.

00:48:49.570 --> 00:48:53.380
You always start at the object that
needs to know about the other object.

00:48:53.380 --> 00:48:57.309
In this case, the text field needs
to know what its label is.

00:48:57.309 --> 00:49:02.329
And then you just select title.

00:49:02.329 --> 00:49:06.590
So again like any of the other accessibility
attributes, we can also do this in code.

00:49:06.590 --> 00:49:15.280
We can override the accessibility attribute names to make
sure that we're returning NSAccessibility title attribute.

00:49:15.280 --> 00:49:20.340
Sorry, title UI attribute in this
array of support attributes.

00:49:20.340 --> 00:49:25.289
And then we'd return the appropriate element
when asked for the title UI attribute.

00:49:25.289 --> 00:49:30.389
As we saw earlier, this is also
one of the appropriate attributes

00:49:30.389 --> 00:49:34.039
or one of the safe attributes to
use with set accessibility override.

00:49:34.039 --> 00:49:37.159
So we could do that on the object level as well.

00:49:37.159 --> 00:49:42.139
Now with NSAccessibility TitleUI element, you'd
almost always want to do this on the object level.

00:49:42.139 --> 00:49:48.819
There would be very, very few cases where you would want all
objects of a single class to have the same TitleUI element.

00:49:48.820 --> 00:49:49.620
[ Period of silence ]

00:49:49.619 --> 00:49:54.929
So if we move along to the slider.

00:49:54.929 --> 00:49:59.969
The slider gave us a percentage value, it
didn't give us the actual value of the slider.

00:49:59.969 --> 00:50:03.619
So here again we want to provide more informative output.

00:50:03.619 --> 00:50:12.500
And for the slider, the way that we're going to do that
is through the NSAccessibilityValueDescriptionAttribute.

00:50:12.500 --> 00:50:17.269
Unfortunately since we saw that this is both a
dynamic value and not one of the safe values to use

00:50:17.269 --> 00:50:21.690
with set accessibility override, we're
going to have to do this on the class level.

00:50:22.840 --> 00:50:26.170
And here we're going to override
these same two methods again.

00:50:26.170 --> 00:50:29.960
accessibilityAttributeValue and accessibilityAttributeNames.

00:50:29.960 --> 00:50:34.199
And this is the third time I've shown this
and it's because it's really important

00:50:34.199 --> 00:50:36.899
that you think of these two methods together.

00:50:36.900 --> 00:50:40.780
Anything that you support in accessibilityAttributeValues
has to be one

00:50:40.780 --> 00:50:44.150
of the values returned by accessibilityAttributeNames.

00:50:44.150 --> 00:50:50.340
I can say I personally have countless times added all
the code to accessibilityAttributeValues but not added

00:50:50.340 --> 00:50:55.750
that I added the value, the attribute
to accessibilityAttributeNames.

00:50:55.750 --> 00:51:01.480
So then that information was never used because any
client didn't know that my object was supporting

00:51:01.480 --> 00:51:04.829
for example NSAccessibility value description.

00:51:04.829 --> 00:51:09.650
So it's really important here to make
sure that these two methods are in synch.

00:51:09.650 --> 00:51:12.630
That they both support the same attributes.

00:51:12.630 --> 00:51:18.250
And you also want to try to remember
not to add an object to the array twice.

00:51:18.250 --> 00:51:24.000
As you'll see in the demo, we're going to
append NSAccessibilityValueDescriptionAttribute

00:51:24.000 --> 00:51:26.230
onto the array of attributes that super supports.

00:51:26.230 --> 00:51:26.880
[ Period of silence ]

00:51:26.880 --> 00:51:37.900
So the last problem we saw that we're going to be
able to address here is the full keyboard navigation.

00:51:37.900 --> 00:51:41.430
How can we add keyboard navigation to this application?

00:51:41.429 --> 00:51:46.159
Unfortunately that alone could take up an
entire presentation because there are tons

00:51:46.159 --> 00:51:47.859
of different techniques and tons of different ways.

00:51:47.860 --> 00:51:50.670
And it's really application specific.

00:51:50.670 --> 00:51:55.900
Generally the best course of action is
to add menu items and keyboard shortcuts.

00:51:55.900 --> 00:52:02.360
But maybe your application is more graphical and
might require different technique or more keystrokes

00:52:02.360 --> 00:52:08.890
or arrow navigation to allow full keyboard
access to a user who might not use the mouse.

00:52:08.889 --> 00:52:13.579
So for accessibility purposes here where we
can look at examples of the accessibility API,

00:52:13.579 --> 00:52:18.319
we really now have four issues that we can deal with.

00:52:18.320 --> 00:52:21.070
First again was the title of the window.

00:52:21.070 --> 00:52:26.350
And I'm going to show you how we can solve this now with
all of our accessibility APIs that we've talked about.

00:52:26.349 --> 00:52:28.849
We're going to choose some and implement them.

00:52:28.849 --> 00:52:36.380
Here to fix this, I'm going to choose to use
the accessibilitySetOverride forAttribute method

00:52:36.380 --> 00:52:40.000
on the NSAccessibilityDescriptionAttribute.

00:52:41.230 --> 00:52:48.670
For the buttons in the toolbar, I'm going to use
the AccessibilityImageDescriptions strings file.

00:52:48.670 --> 00:52:53.470
And there we can have one isolated place where we add
all of our image descriptions for all of our buttons

00:52:53.469 --> 00:52:58.319
and it will automatically be used by the Cocoa buttons.

00:52:58.320 --> 00:53:01.750
[ Period of silence ]

00:53:01.750 --> 00:53:04.139
Then we saw the Title UI elements.

00:53:04.139 --> 00:53:09.279
And the easiest way to do this is just in Interface
Builder, we're going to link up the controls

00:53:09.280 --> 00:53:15.310
to the element that we want as the label.

00:53:15.309 --> 00:53:15.369
[ Period of silence ]

00:53:15.369 --> 00:53:18.819
And lastly for the slider that gave
us a percentage rather than a value,

00:53:18.820 --> 00:53:21.170
this is probably the hardest one we're going to do.

00:53:21.170 --> 00:53:26.030
But as you'll see in a moment, it's still really,
really simple and it doesn't take much time at all.

00:53:26.030 --> 00:53:29.600
And this is that we're going to
have to subclass NSSliderCell.

00:53:29.599 --> 00:53:35.610
And override the two methods accessibilityAttributesNames
and accessibility attribute description.

00:53:36.780 --> 00:53:41.130
Sorry, accessibilityAttributeValue is the other method.

00:53:41.130 --> 00:53:42.410
[ Period of silence ]

00:53:42.409 --> 00:53:48.719
So here we have our game plan for how we
can go ahead and begin accessorizing Sketch.

00:53:48.719 --> 00:53:51.980
And we can get right into it.

00:53:51.980 --> 00:54:03.769
[ Period of silence ]

00:54:03.769 --> 00:54:06.400
So here we have our Sketch project.

00:54:06.400 --> 00:54:13.079
And as we said the first thing we wanted to look
at and fix was the title of that Tool Palette.

00:54:13.079 --> 00:54:15.190
[ Period of silence ]

00:54:15.190 --> 00:54:18.289
So here I have the Tool Palette controller.

00:54:18.289 --> 00:54:21.400
And I can find the windowDidLoad method.

00:54:21.400 --> 00:54:21.460
[ Period of silence ]

00:54:21.460 --> 00:54:27.960
And in this method, I'm just going
to add two very simple lines of code.

00:54:27.960 --> 00:54:32.809
[ Period of silence ]

00:54:32.809 --> 00:54:37.659
[ Background noise ]

00:54:37.659 --> 00:54:42.509
[ Period of silence ]

00:54:42.510 --> 00:54:46.960
And so here the first line of code is
just generating a localized string.

00:54:46.960 --> 00:54:49.400
This is important to remember with
all of the accessibility API.

00:54:49.400 --> 00:54:55.220
You want to make sure that these strings, just like
your UI are localized appropriately for the interface.

00:54:55.219 --> 00:54:58.659
So here we're going to generate a
localized string for Tool Palette.

00:54:58.659 --> 00:55:02.250
And then we're going to use set accessibility
override for the window and we're going

00:55:02.250 --> 00:55:07.820
to set the override for NSAccessibilityDescriptionAttribute.

00:55:07.820 --> 00:55:15.490
Here one other little tidbit that's really useful, I know
that window in this case supports accessibility description.

00:55:15.489 --> 00:55:17.899
But as Patti said earlier, buttons don't.

00:55:17.900 --> 00:55:22.710
So if for example I had an IB outlet to a button,

00:55:22.710 --> 00:55:28.490
this wouldn't work because the button isn't
what I set the accessibility override on.

00:55:28.489 --> 00:55:30.189
It's the button cell.

00:55:30.190 --> 00:55:39.519
And so there it's a really nice way to approach that is that
there's a method called NSAccessibility unignore descendent.

00:55:39.519 --> 00:55:44.780
And so you can use NSAccessibility unignore
descendent on self, that will return the button cell

00:55:44.780 --> 00:55:47.630
and then you can set the override on the button cell.

00:55:47.630 --> 00:55:52.880
And so that's a really common mistake that a lot
of developers make that you need to make sure

00:55:52.880 --> 00:55:58.940
that you're setting the value on the appropriate controller,
the controller that handles the accessibility information.

00:55:58.940 --> 00:56:07.059
[ Period of silence ]

00:56:07.059 --> 00:56:11.960
So now we saw, the next thing we saw was that
we wanted to add a description to the buttons.

00:56:11.960 --> 00:56:17.130
And the way to do this as I said, the solution
I chose here was to use the new Snow Leopard API

00:56:17.130 --> 00:56:22.260
of AccessibilityImageDescriptions strings file.

00:56:22.260 --> 00:56:25.940
I have already written so I don't
have to type it over again.

00:56:25.940 --> 00:56:31.849
[ Period of silence ]

00:56:31.849 --> 00:56:36.389
And here we have really simple entries
like circle equals circle tool.

00:56:36.389 --> 00:56:40.609
And you'll notice that circle is
the exact name of the image.

00:56:40.610 --> 00:56:43.019
And that's obviously the important part here.

00:56:43.019 --> 00:56:48.110
That's what links up the image description to
the image that your application is going to load.

00:56:48.110 --> 00:56:51.380
So that's all I need to do here and this
is what makes the strings file really nice.

00:56:51.380 --> 00:56:54.210
I don't have to go through my code
and find where these images are used.

00:56:54.210 --> 00:56:55.970
I just add this one file.

00:56:55.969 --> 00:57:02.789
Next we saw that the items in the
Inspector didn't have title UI elements.

00:57:02.789 --> 00:57:05.969
They didn't provide that contextual information.

00:57:05.969 --> 00:57:08.939
So we're going to open up the Inspector.

00:57:08.940 --> 00:57:11.980
[ Period of silence ]

00:57:11.980 --> 00:57:15.019
[ Background noise ]

00:57:15.019 --> 00:57:17.610
And as I said, this is really simple.

00:57:17.610 --> 00:57:26.039
All I do is Control-drag from the object I want
to label, to the label, and then select title.

00:57:26.039 --> 00:57:31.000
And so I've already done this for the
rest of the controls in this window.

00:57:31.000 --> 00:57:33.369
Here's also a good thing to point out.

00:57:33.369 --> 00:57:39.400
The description is really easy to set
right here if I wanted to or the help.

00:57:39.400 --> 00:57:43.950
So that's all there is to adding those labels.

00:57:43.949 --> 00:57:46.909
I'll just save that.

00:57:46.909 --> 00:57:50.250
[ Period of silence ]

00:57:50.250 --> 00:57:51.840
And back to Xcode.

00:57:51.840 --> 00:57:55.780
Now the last thing I said we were
going to do is subclass NSSliderCell.

00:57:55.780 --> 00:58:00.970
And this is the most difficult thing we're going to do
for accessorizing this application only because we have

00:58:00.969 --> 00:58:04.649
to subclass and a lot of developers
we found are afraid of sub classing.

00:58:04.650 --> 00:58:07.650
But it's nothing you need to be
afraid of for the NSSliderCell.

00:58:07.650 --> 00:58:11.050
It's really not that much work to add this accessibility.

00:58:11.050 --> 00:58:11.580
[ Period of silence ]

00:58:11.579 --> 00:58:20.509
So here I'm going to just add a new
file and it's an Objective-C class.

00:58:20.510 --> 00:58:21.110
[ Period of silence ]

00:58:21.110 --> 00:58:30.260
And I'm going to name it accordingly, according
to the naming convention of this project.

00:58:30.260 --> 00:58:36.750
Now here's a good point to note when
doing accessibility of your project.

00:58:36.750 --> 00:58:40.139
Sometimes it's really nice to keep accessibility
completely out of the rest of your code.

00:58:40.139 --> 00:58:44.799
And by that I mean create an accessibility
files for each of your classes.

00:58:44.800 --> 00:58:47.590
And you can create protocols for your class.

00:58:47.590 --> 00:58:52.510
In the class of this project, our accessibility
code is interweaved within the rest of the code,

00:58:52.510 --> 00:58:55.570
which has its advantages and its disadvantages.

00:58:55.570 --> 00:58:59.680
So for your project you generally want to
choose one of those two and stick to it.

00:58:59.679 --> 00:59:02.779
Like the rest of coding conventions.

00:59:02.780 --> 00:59:05.610
[ Period of silence ]

00:59:05.610 --> 00:59:09.170
So here we have our pixel slider.

00:59:09.170 --> 00:59:14.809
And this isn't going to inherit from NSObject, it's
just going to be, it's going to be an NSSliderCell.

00:59:15.929 --> 00:59:31.799
[ Period of silence ]

00:59:31.800 --> 00:59:35.340
And the implementation again is pretty simple.

00:59:35.340 --> 00:59:36.600
We just have these two methods.

00:59:36.599 --> 00:59:39.849
The first one, accessibilityAttributeNames.

00:59:39.849 --> 00:59:45.920
And this method as I said earlier is going to return an
array of all of the attributes that our object supports.

00:59:45.920 --> 00:59:51.159
Well our object is going to support all of
the attribute names that super supports along

00:59:51.159 --> 00:59:56.940
with NSAccessibilityValueDescriptionAttribute.

00:59:56.940 --> 01:00:03.340
Then we have, sorry, then we have
accessibilityAttributeValue.

01:00:03.340 --> 01:00:09.610
And as I said, all this method does is given a
specific value it needs to return the attribute.

01:00:09.610 --> 01:00:19.430
So given NSAccessibilityValueDescriptionAttribute, we're
going to return a localized string representing the number.

01:00:19.429 --> 01:00:25.399
And so here it looks a bit complex, but it's just
localizing the number format so that if your locale is set

01:00:25.400 --> 01:00:30.070
to use a comma instead of a period, we'll
properly use a comma instead of a period here.

01:00:30.070 --> 01:00:33.490
And then importantly, we don't want
to have to deal with everything else

01:00:33.489 --> 01:00:35.669
because super already knows how to deal with it.

01:00:35.670 --> 01:00:41.550
So if we're asked for something like our frame or
our position on screen, we just pass that call off

01:00:41.550 --> 01:00:45.230
to NSSliderCell because the NSSliderCell knows where we are.

01:00:45.230 --> 01:00:51.329
[ Period of silence ]

01:00:51.329 --> 01:00:57.429
So the last important thing here is to tell
that slider to use our custom slider cell.

01:00:58.929 --> 01:01:12.239
[ Period of silence ]

01:01:12.239 --> 01:01:13.759
And that's it.

01:01:13.760 --> 01:01:18.930
Here we have our accessorized Sketch application.

01:01:18.929 --> 01:01:27.599
[ Period of silence ]

01:01:27.599 --> 01:01:36.139
And if I start VoiceOver we can verify that all of our
accessibility information has shown up in this application.

01:01:36.139 --> 01:01:41.710
>> VoiceOver on, Sketch window
sample, 100%, pop-up button, window,

01:01:41.710 --> 01:01:45.110
Window Chooser menu, three items, graphics, Tool Palette.

01:01:45.110 --> 01:01:48.970
>> Here we see the Tool Palette has the
appropriate name in the Window Chooser.

01:01:48.969 --> 01:01:56.389
>> Selection tool, selected radio button, 1 of 5, Rectangle
tool, radio button 2 of 5, Circle tool, radio button 3 of 5.

01:01:56.389 --> 01:02:01.069
>> We see that all of the tools in the Tool Palette
have the appropriate descriptions that were brought

01:02:01.070 --> 01:02:06.880
in from the strings file automatically
with very little work on our part.

01:02:06.880 --> 01:02:08.440
>> Window Tool palette.

01:02:08.440 --> 01:02:09.369
Window Chooser menu.

01:02:09.369 --> 01:02:11.019
Pre current graphics.

01:02:11.019 --> 01:02:16.210
Window fit, yellow at 3.32, line
width edit text content selected.

01:02:16.210 --> 01:02:17.470
>> So here we now hear the label.

01:02:17.469 --> 01:02:20.329
We heard 3.32 line width.

01:02:20.329 --> 01:02:23.000
Because line width was the label for that field.

01:02:23.000 --> 01:02:26.389
>> 131.00, width edit text content selected.

01:02:26.389 --> 01:02:29.739
>> And again we heard that width,
we heard width after the value.

01:02:29.739 --> 01:02:33.769
So that's telling us that width is the label for this field.

01:02:33.769 --> 01:02:35.210
If I now go up to the slider.

01:02:35.210 --> 01:02:38.730
>> 3.3.32, line width slider.

01:02:38.730 --> 01:02:41.500
>> Now we hear 3.32 line width slider.

01:02:41.500 --> 01:02:50.599
Which is much more informative to a VoiceOver user
than 18.4% as we heard earlier when we did our demo.

01:02:50.599 --> 01:02:51.230
>> VoiceOver off.

01:02:51.230 --> 01:02:55.679
>> So just as we saw before, we can
now use Accessibility Inspector.

01:02:55.679 --> 01:02:56.559
[ Period of silence ]

01:02:56.559 --> 01:03:11.739
And we can see now for this button, we properly have an AX
description which tells us what this button is representing.

01:03:11.739 --> 01:03:16.269
So we go through it again, just we did with VoiceOver and
use Accessibility Inspector to look at the rest of this UI

01:03:16.269 --> 01:03:20.329
to verify that everything that we've done works.

01:03:20.329 --> 01:03:26.519
The one last thing that I've gone ahead and done
is that I've added full keyboard navigation.

01:03:26.519 --> 01:03:31.489
So I can use hot keys or VoiceOver
commands to go to these menu options.

01:03:31.489 --> 01:03:40.929
And the object is drawn for me and I can then use the
Inspector here to move it anywhere on the screen I want.

01:03:40.929 --> 01:03:52.899
[ Period of silence ]

01:03:52.900 --> 01:03:57.059
So now we saw that it was really simple to
add all of the accessibility information.

01:03:57.059 --> 01:04:00.670
It probably took me about three or
four minutes to add the information

01:04:00.670 --> 01:04:03.970
to our application and it makes a huge difference.

01:04:03.969 --> 01:04:09.169
We still have that canvas area which again I encourage
you to go to the talk on Friday on Advanced Accessibility.

01:04:09.170 --> 01:04:11.880
But the rest of it we have a vast improvement.

01:04:11.880 --> 01:04:14.670
Before we couldn't get to the button,
we didn't know what windows were called

01:04:14.670 --> 01:04:19.050
and there was no contextual information
in the Tool Inspector.

01:04:19.050 --> 01:04:23.430
So we've made a huge difference in a very
short amount of time on this application.

01:04:23.429 --> 01:04:26.149
And really it doesn't take much effort.

01:04:26.150 --> 01:04:30.930
The biggest challenge is to just go in
and start auditing your applications.

01:04:30.929 --> 01:04:32.829
And so we have some final thoughts.

01:04:32.829 --> 01:04:36.699
And throughout this talk, the first thing
we saw was that accessibility provides a lot

01:04:36.699 --> 01:04:40.549
of great benefits for both you and your end users.

01:04:40.550 --> 01:04:46.120
For you it allows you to do a lot of GUI scripting, it
allows you to use instruments in a more powerful way.

01:04:46.119 --> 01:04:49.679
It also allows you to use Automater Watch Me Do.

01:04:49.679 --> 01:04:55.989
And these are all important tools when trying
to reproduce bugs or script certain unit tests

01:04:55.989 --> 01:04:59.409
or script just general tests for your application.

01:04:59.409 --> 01:05:04.079
Without accessibility information, all
of these things are much more difficult.

01:05:04.079 --> 01:05:07.029
For your end users, they get all
that, all those same benefits.

01:05:07.030 --> 01:05:11.170
They can use scripting to automate different tasks.

01:05:11.170 --> 01:05:17.720
But it also extends your marketability to the VoiceOver
audience, to users who are using assistive technology.

01:05:17.719 --> 01:05:23.089
And there are just two, there are two
main steps that you need to remember

01:05:23.090 --> 01:05:25.590
about your application on how to accessorize.

01:05:25.590 --> 01:05:29.850
It can be a bit overwhelming to look at
an application, wonder where to start.

01:05:29.849 --> 01:05:34.420
And then the first is just either you use
Accessibility Inspector or my personal favorite,

01:05:34.420 --> 01:05:39.950
VoiceOver to audit your application, to look
at where do you need accessibility information?

01:05:39.949 --> 01:05:45.089
And generally you'll be a bit surprised
at how much information is already there.

01:05:45.090 --> 01:05:51.730
Then once you've analyzed your application, look at the APIs
and figure out what API is appropriate for your problem.

01:05:51.730 --> 01:05:55.630
And most often, it's just a simple
Interface Builder solution

01:05:55.630 --> 01:05:58.910
to either add a description or add a title UI element.

01:05:58.909 --> 01:06:04.089
There's a lot of resources available.

01:06:04.090 --> 01:06:10.680
There is a contact at Apple, Eric Hope, but we also have
a really great public developer list for accessibility.

01:06:10.679 --> 01:06:15.139
And Apple engineers read this list and
generally respond in a really timely manner.

01:06:15.139 --> 01:06:19.559
But also the community responds with a lot of
helpful information if you have any questions.

01:06:19.559 --> 01:06:22.969
I'd strongly recommend using this list.

01:06:22.969 --> 01:06:28.029
There's also the accessibility documentation
and we have a great new website which has a lot

01:06:28.030 --> 01:06:32.350
of accessibility information both
developer related and end user related.

01:06:32.349 --> 01:06:36.929
So if you're just generally interested in accessibility
at Apple, this is a great resource as well.