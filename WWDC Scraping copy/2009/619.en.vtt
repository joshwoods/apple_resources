WEBVTT

00:00:12.550 --> 00:00:13.370
>> My name is Tommy Hann.

00:00:13.369 --> 00:00:19.699
I'm a Consulting Engineer and had been focusing for
the past few years primarily on 802.1X and Wireless.

00:00:19.699 --> 00:00:23.559
Before we get started, I kind of like
to get an idea of who's in the audience.

00:00:23.559 --> 00:00:29.039
How many people here have already implemented 802.1X?

00:00:29.039 --> 00:00:34.719
OK, good. How many people are working
towards implementing 802.1X?

00:00:34.719 --> 00:00:36.009
Excellent.

00:00:36.009 --> 00:00:42.349
So one more question, how many people have
implemented 802.1X over a wired network?

00:00:43.549 --> 00:00:47.929
There we go [laughs] successfully.

00:00:47.929 --> 00:00:48.890
Very good, OK good.

00:00:48.890 --> 00:00:51.250
This will be a good grade for the session.

00:00:51.250 --> 00:00:54.320
So why 802.1X?

00:00:54.320 --> 00:00:56.520
Why do we care about 802.1X?

00:00:56.520 --> 00:01:03.330
Well first of all, 802.1X is port based
network acces controller think of it

00:01:03.329 --> 00:01:06.599
as authenticating to get on to your network.

00:01:06.599 --> 00:01:08.250
But why is so popular?

00:01:08.250 --> 00:01:16.040
Well as it turns out, the Wi-Fi alliance
requires 802.1X for enterprise wireless security.

00:01:16.040 --> 00:01:22.030
And as a result, 802.1X is very, very common
place or becoming very common place in the market

00:01:22.030 --> 00:01:25.609
But then the question always comes up, well why 802.1X?

00:01:25.609 --> 00:01:30.989
Can't we use WPA or WPA2, PSK or WPA personal?

00:01:30.989 --> 00:01:32.309
You know isn't that secure?

00:01:32.310 --> 00:01:35.590
Well yes, WPA and WPA2 are very secure.

00:01:35.590 --> 00:01:42.350
However, with any PSK technology, you have a
single password that protects your network.

00:01:42.349 --> 00:01:48.169
So that password is compromised n some way, you then
have to change it, you know, when all your machines,

00:01:48.170 --> 00:01:51.420
all your access points, or your switches, et cetera.

00:01:51.420 --> 00:02:03.719
So the point is that 802.1X actually provides
individual authentication to the network.

00:02:03.719 --> 00:02:12.270
Now that by individual, that could be user credentials,
it could be machine credentials but it offers the ability

00:02:12.270 --> 00:02:17.040
for each individual entity to have
their own credentials to the networks.

00:02:17.039 --> 00:02:20.429
So that, if that-- if those credentials are compromised,

00:02:20.430 --> 00:02:23.290
well then it's really easy to change
it just for that one user.

00:02:23.289 --> 00:02:31.159
Now I'm saying kind of implied with the question, 802.1X
is not just a wireless-- are used on for wireless security.

00:02:31.159 --> 00:02:33.729
It can also be used on ethernet as well.

00:02:33.729 --> 00:02:39.869
So what were-- what Apple has done is we've
implemented a Supplicant, an 802.1X supplement--

00:02:39.870 --> 00:02:45.259
Supplicant in Mac OS X and in the iPhone OS.

00:02:45.259 --> 00:02:53.969
In addition, the back-- the back end component
server for 802.1X is typically RADIUS.

00:02:53.969 --> 00:02:58.120
So Apple has also implemented RADIUS
in our Mac OS X server offering.

00:02:58.120 --> 00:02:59.659
So here's what we're going to cover today.

00:02:59.659 --> 00:03:02.609
We'll start out with a quick introduction to 802.1X,

00:03:02.610 --> 00:03:07.190
just to make sure everybody is kind
of on the same level playing field.

00:03:07.189 --> 00:03:12.840
We'll talk briefly about the RADIUS of
service built-in to Mac OS X server.

00:03:12.840 --> 00:03:20.939
Then we'll talk about configuring of-- configuring
802.1X both for Mac OS X and for the iPhone OS.

00:03:20.939 --> 00:03:23.069
We'll talk about deployment strategies.

00:03:23.069 --> 00:03:28.889
If you've got thousands of machines or
thousands of iPod Touch devices, for example,

00:03:28.889 --> 00:03:32.339
how would you go about deploying those with 802.1X.

00:03:32.340 --> 00:03:34.810
And then finally, we'll talk a
little bit about trouble shooting,

00:03:34.810 --> 00:03:38.340
some troubleshooting techniques for 802.1X connections.

00:03:38.340 --> 00:03:40.800
There will be a couple of demos scattered through out.

00:03:40.800 --> 00:03:44.560
And then of course we'll have a time for Q&A at the end.

00:03:44.560 --> 00:03:48.849
Now before we get started, I kind of
wanted to throw up architectural slide.

00:03:48.849 --> 00:03:52.000
Now understand, this is more conceptual than anything else.

00:03:52.000 --> 00:03:59.900
The point I wanted to make with this slide though is
that 802.1X kind of sits in between TCP/IP Connectivity

00:03:59.900 --> 00:04:04.340
in your physical interfaces, whether
that be ethernet or wireless.

00:04:04.340 --> 00:04:09.340
Now in reality, again this side
is technically correct in reality.

00:04:09.340 --> 00:04:13.800
Once you've authenticated, that layer kind
of comes out and the connectivity is there.

00:04:13.800 --> 00:04:20.340
But the point is before you can do anything on
the network, you've gotta authenticate via 802.1X.

00:04:20.339 --> 00:04:23.199
So let's get started with an overview then.

00:04:23.199 --> 00:04:29.639
So as I said 802.1X is port-based network access control.

00:04:29.639 --> 00:04:33.279
And by that what I mean is at the
point of network attachment.

00:04:33.279 --> 00:04:36.829
Until you authenticate to the network, the port is not open.

00:04:36.829 --> 00:04:39.019
You can't do anything on the network.

00:04:39.019 --> 00:04:41.479
We'll talk a little bit more about that in a few minutes.

00:04:41.480 --> 00:04:48.310
Now, the actual authentication is handled via what we
call EAP types, Extensible Authentication Protocol.

00:04:48.310 --> 00:04:51.100
We'll talk in a little bit more depth about that as well.

00:04:51.100 --> 00:04:55.170
And 802.1X commonly utilizes PKI.

00:04:55.170 --> 00:04:58.970
So use certificates for both client
and server authentication.

00:04:58.970 --> 00:05:02.030
Again, we'll get into a little bit
more detail about that as well.

00:05:02.029 --> 00:05:07.479
Now when you talk about 802.1X, there are
actually three components that are involved.

00:05:07.480 --> 00:05:10.790
The client side is called a "Supplicant."

00:05:10.790 --> 00:05:14.790
So if somebody asks you, does your Supplicant
support PEAP or something like that?

00:05:14.790 --> 00:05:21.240
What they're asking is, does the software, when
your client that does 802.1X does it support PEAP?

00:05:21.240 --> 00:05:27.220
Now on the other end is the authentication
server, the authentication server is

00:05:27.220 --> 00:05:29.460
where the client actually authenticates too.

00:05:29.459 --> 00:05:33.669
And as I said, the server authenticates
to the client in some cases as well,

00:05:33.670 --> 00:05:36.780
we'll talk about that in just a few minutes.

00:05:36.779 --> 00:05:41.619
But more commonly, the authentication
server is handled with radius.

00:05:41.620 --> 00:05:44.220
So radius is the authentication server.

00:05:44.220 --> 00:05:48.970
And then in the middle is this-- middle-- kind of
middle man if you will, called an "Authenticator."

00:05:48.970 --> 00:05:53.760
And this might be an access point or it might be
an ethernet switch and it passes the messages back

00:05:53.759 --> 00:05:57.550
and forth between the Supplicant
and the Authentication Server.

00:05:57.550 --> 00:06:04.379
So here's kind of a diagram of how 802.1X
would fit in with a wireless connection.

00:06:04.379 --> 00:06:12.250
So here's a client that wants to attach to an access
point to gain access to resources on the network.

00:06:12.250 --> 00:06:16.839
Initially, the port for access to the network is close.

00:06:16.839 --> 00:06:20.569
So there's nothing the client can do
initially until after it authenticates.

00:06:20.569 --> 00:06:27.019
Now during the initial process of associating to the
access point, there's a security negotiation that goes

00:06:27.019 --> 00:06:29.959
on between the supplicant and the access point.

00:06:29.959 --> 00:06:37.039
And from that negotiation, it's determined that
802.1X will be needed to authenticate to this network.

00:06:37.040 --> 00:06:42.310
So at that point, an 802.1X authentication
session is started.

00:06:42.310 --> 00:06:47.589
And again, understand that the authentication happens
between the client and the authentication server,

00:06:47.589 --> 00:06:53.329
the authenticator just passes--
passes the messages back and forth.

00:06:53.329 --> 00:07:01.039
Now, after a successful authentication, what's
called the "Pairwise Master Keys" are determined both

00:07:01.040 --> 00:07:05.010
at the client side and at the authentication server side.

00:07:05.009 --> 00:07:10.250
But the authenticator, the access point in
this case needs to know what that PMK is.

00:07:10.250 --> 00:07:19.579
So upon a successful 802.1X authentication, the
server passes that PMK to the-- to the access point.

00:07:19.579 --> 00:07:23.750
And then during the 4-Way Handshake
between the client and the access point,

00:07:23.750 --> 00:07:26.759
the actual keys to use for inscription are determined.

00:07:26.759 --> 00:07:33.079
And then at that point, the port is open so
now the client has access to the network.

00:07:33.079 --> 00:07:36.519
You can access other network resources et cetera.

00:07:36.519 --> 00:07:42.719
So that's kind of how 802.1X plays in a wireless situation.

00:07:42.720 --> 00:07:50.170
So we talked about EAP types, I briefly mentioned EAP types.

00:07:50.170 --> 00:07:54.410
EAP types are what actually perform
the actual authentication.

00:07:54.410 --> 00:07:58.230
There's four kind of really common EAP types.

00:07:58.230 --> 00:08:00.560
EAP-- starting with EAP-TLS.

00:08:00.560 --> 00:08:10.009
The idea behind EAP-TLS is that both the client and the
server uses a certificate to authenticate to the other.

00:08:10.009 --> 00:08:17.849
So the client instead of typing any username and password,
instead it uses a certificate to authenticate to the server.

00:08:17.850 --> 00:08:20.010
And then the upset happens as well.

00:08:20.009 --> 00:08:25.909
The server uses a certificate to authenticate to the
client, thus preventing a man in the middle attack.

00:08:25.910 --> 00:08:30.370
Now, it's-- it can be difficult to manage
lots of certificates if you've got, you know,

00:08:30.370 --> 00:08:33.759
thousands or even tenths of thousands of clients.

00:08:33.759 --> 00:08:40.139
So PEAP and TTLS, very similar
technologies, instead of using certificates

00:08:40.139 --> 00:08:44.529
on the client side, they allow for username and password.

00:08:44.529 --> 00:08:49.470
So from the server side, we still use a certificate
but the clients use username and password.

00:08:49.470 --> 00:08:52.570
That's the idea behind TTLS and PEAP.

00:08:52.570 --> 00:08:57.920
And then finally, EAP-MD5, now
EAP-MD5 is very common on ethernet.

00:08:57.919 --> 00:09:06.610
However, MD5 will not work over wireless because it doesn't
have the ability to pass that PMK back to the access point.

00:09:06.610 --> 00:09:10.370
So typically MD5 is what we'll
see on an ethernet connection.

00:09:10.370 --> 00:09:16.580
Now there are others you might run into the next
two LEAP and EAP-FAST are both Cisco Technologies.

00:09:16.580 --> 00:09:22.800
LEAP actually was around in early days when WEP
was the only wireless security protocol we have.

00:09:22.799 --> 00:09:30.969
And it kind of introduces the concept of
individual logins or authentication sessions

00:09:30.970 --> 00:09:33.779
to the network as supposed to a shared key.

00:09:33.779 --> 00:09:42.100
Now LEAP is, since then replaced with newer
technologies such as TTLS and PEAP or EAP-FAST

00:09:42.100 --> 00:09:45.149
to get another EAP type developed by Cisco.

00:09:45.149 --> 00:09:52.610
And then finally EAP-SIM, EAP-SIM utilizes existing GSM
technology, you know, similar to the SIMs in your iPhone's.

00:09:52.610 --> 00:10:00.019
So these are the EAP types, the things that
actually perform the authentication via 802.1X.

00:10:00.019 --> 00:10:03.559
Now we talked a little bit about PKI,
this is actually a pretty big subject.

00:10:03.559 --> 00:10:09.829
But I just wanted to give you the top level,
what's important to understand about PKI in 802.1X.

00:10:09.830 --> 00:10:16.700
So as we talk about-- if you use TLS as EAP type, you would
use a client side certificate fore the authentication.

00:10:16.700 --> 00:10:21.520
>> So optionally, you know, a client's
side certificate can be used.

00:10:21.519 --> 00:10:28.389
Most of the EAP types also define a server side
certificate, so that's another area where PKI is used.

00:10:28.389 --> 00:10:31.919
But let's talk about the server side for just a second.

00:10:31.919 --> 00:10:36.759
If you compare this to a web server
for example, a secure web server,

00:10:36.759 --> 00:10:39.970
the way it's used in 802.1X is slightly different.

00:10:39.970 --> 00:10:50.050
So in the case of a web server, I type in let's say, you
know https.www.example.com and I'm given a certificate form

00:10:50.049 --> 00:10:57.719
that server, well if within that certificate,
I see www.example.com, well I know that because

00:10:57.720 --> 00:11:02.060
of domain name look ups that I just got
to that server and it told me who it was.

00:11:02.059 --> 00:11:06.149
And I'm pretty sure that that is
the server that I thought it was.

00:11:06.149 --> 00:11:12.689
However, with 802.1X, when I'm authenticating,
I'm authenticating to get on the networks.

00:11:12.690 --> 00:11:13.900
So I'm on the network yet.

00:11:13.899 --> 00:11:15.669
I can't do a DNS look up.

00:11:15.669 --> 00:11:23.599
I can't verify the server that I'm authenticating
against is www.example.com or whatever it might be.

00:11:23.600 --> 00:11:32.639
In addition, there is no way to tie or there's no
correlation between the SSID, the wireless network name,

00:11:32.639 --> 00:11:35.439
and the server that I'm authenticating again.

00:11:35.440 --> 00:11:40.830
So really there's no way that the machine
by itself can validate the certificate.

00:11:40.830 --> 00:11:46.580
So as a result, a human has to at some point
validate the certificate at least one time.

00:11:46.580 --> 00:11:51.550
Now that can happen the first time you
try to authenticate against this network.

00:11:51.549 --> 00:11:56.500
Or you might-- if your network administrator
supporting, you know, thousands of machines,

00:11:56.500 --> 00:12:01.389
you might want to pre-trust that certificate upfront.

00:12:01.389 --> 00:12:07.330
So whenever you're using PKI from a server
certificate perspective with 802.1X,

00:12:07.330 --> 00:12:12.080
a human has to get involved upfront
to trust that certificate.

00:12:12.080 --> 00:12:17.680
Now, let's talk a little bit more about
this explicit trust of certificates.

00:12:17.679 --> 00:12:23.889
So if you look at a certificate chain, maybe a root,
any number of intermediate CAs and then a Leaf Cert,

00:12:23.889 --> 00:12:27.580
you can trust at any level within that chain.

00:12:27.580 --> 00:12:32.570
So for example, you might trust the actual RADIUS server.

00:12:32.570 --> 00:12:38.890
OK so, whether it be part of a chain
that comes directly from the root CA

00:12:38.889 --> 00:12:40.699
or from an intermediate CA, it doesn't matter.

00:12:40.700 --> 00:12:44.550
You're trusting the specific server itself.

00:12:44.549 --> 00:12:49.529
Now if you're in a very large organization and
maybe you have multiple RADIUS servers, you know,

00:12:49.529 --> 00:12:57.100
lots of RADIUS servers, it maybe difficult to trust every
one of those, a pre-trust to everyone of those servers.

00:12:57.100 --> 00:13:02.040
So another strategy might be to set
the trust at the intermediate CA level.

00:13:02.039 --> 00:13:11.889
And basically what you're saying by doing that is any
certificate that's issued by the CA will be trusted for EAP.

00:13:11.889 --> 00:13:17.699
So when you set trust for EAP on that
intermediate, you're saying any certificates issued

00:13:17.700 --> 00:13:22.440
by that CA-- intermediate CA would then be trusted.

00:13:22.440 --> 00:13:25.840
So that's a good strategy maybe for a large organization.

00:13:25.840 --> 00:13:32.879
Now you could also trust at the root CA level, however, I
would warn against this, be very careful with this at least.

00:13:32.879 --> 00:13:40.710
If for example you were to trust for EAP something like
VeriSign or some other well known certificate authority.

00:13:40.710 --> 00:13:47.590
Basically, what you've just said is any certificate issued
from that certificate authority is going to be trusted,

00:13:47.590 --> 00:13:51.740
which means anybody can go out and buy a
certificate and perform a man in the middle attack.

00:13:51.740 --> 00:13:52.700
So be careful with that.

00:13:52.700 --> 00:13:57.920
But I think trusting at the intermediate
CA level is probably a good strategy.

00:13:57.919 --> 00:14:02.829
And of course, we can't trust-- you
can't trust a self signed certificate.

00:14:02.830 --> 00:14:07.870
So let's kind of look at Wired 802.1X.

00:14:07.870 --> 00:14:14.879
The idea behind Wired 802.1X is you're protecting
an ethernet jack, maybe in a public location.

00:14:14.879 --> 00:14:19.840
So what you're protecting against is somebody walking
into your organization, a business school, whatever,

00:14:19.840 --> 00:14:23.970
plugging in an ethernet cable and they're on your network.

00:14:23.970 --> 00:14:27.790
So before they can actually get on your
network if it's protected with 802.1X,

00:14:27.789 --> 00:14:30.889
they have to authenticate to get on to the network.

00:14:30.889 --> 00:14:35.029
Now this is somewhat challenging when compared to wireless.

00:14:35.029 --> 00:14:42.049
If we look back at where 802.1X
fit in to the wireless scenario,

00:14:42.049 --> 00:14:45.459
there is that security negotiation that happened upfront.

00:14:45.460 --> 00:14:50.830
And through that security negotiation, it was
determined that 802.1X was required to get

00:14:50.830 --> 00:14:53.820
on to this network, to authenticate to the network.

00:14:53.820 --> 00:14:56.660
With ethernet, you don't have that security negotiation.

00:14:56.659 --> 00:15:03.879
So there's no way the computer knows that it
needs to authenticate to get on to the networks.

00:15:03.879 --> 00:15:10.970
So therefore you must basically
pre-configure ethernet to know about 802.1X.

00:15:10.970 --> 00:15:18.519
Now this is actually very similar to another wireless
scenario, and that's when you use 802.1X WEP.

00:15:18.519 --> 00:15:25.889
So you're using 802.1X to authenticate to the wireless
network, but then you're using WEP for inscription.

00:15:25.889 --> 00:15:29.909
And the thing is during that security
negotiation that happens up front,

00:15:29.909 --> 00:15:37.019
the computer can't tell the difference
between plain old WEP and 802.1X WEP.

00:15:37.019 --> 00:15:42.259
So the computer again doesn't know that it
needs to perform that 802.1X authentication,

00:15:42.259 --> 00:15:45.110
so it kind of a similar situation in wireless.

00:15:45.110 --> 00:15:49.550
Now what we see quite often in conjunction
with 802.1X, and this is over wired

00:15:49.549 --> 00:15:52.849
or wireless, we see Dynamic VLAN switching.

00:15:52.850 --> 00:15:59.740
And the idea behind that is when you authenticate to get
on the network, depending on what credentials you use

00:15:59.740 --> 00:16:04.110
to authenticate, you maybe put
into one VLAN or a different VLAN.

00:16:04.110 --> 00:16:09.379
So for example in a school environment, if
a student were to authenticate via 802.1X,

00:16:09.379 --> 00:16:17.019
that machine maybe put into a student VLAN that has access
to their work, you know, their student server et cetera.

00:16:17.019 --> 00:16:22.460
But if a teacher or an administrator were to authenticate
based on those credentials, the machine would be put

00:16:22.460 --> 00:16:26.560
in to a different VLAN that might
have access to different resources.

00:16:26.559 --> 00:16:36.259
So we think quite often Dynamic VLAN
switching used in conjunction with 802.1X.

00:16:36.259 --> 00:16:41.210
OK, so let's talk about Apple's implementation of 802.1X.

00:16:41.210 --> 00:16:46.950
That's kind of an overview now let's talk about how Apple's
implemented it, and starting out with Mac OS X server.

00:16:46.950 --> 00:16:53.780
As I talked about previously, the back end, the
authentication servers typically implemented with RADIUS.

00:16:53.779 --> 00:17:03.220
And as part of Mac OS X server, specifically in this case,
Snow Leopard, we've implemented a FreeRADIUS version 2.1.3.

00:17:03.220 --> 00:17:12.420
A very, very powerful open source RADIUS implementation,
full featured, really a nice implementation of RADIUS.

00:17:12.420 --> 00:17:18.039
However, with our GUI that we've put on top of this,
you can literally implement the server in five minutes.

00:17:18.039 --> 00:17:23.529
It's pretty incredible how easy it
is to set up such a powerful server.

00:17:23.529 --> 00:17:28.910
In addition, we've integrated directory
services to a-- to the RADIUS process.

00:17:28.910 --> 00:17:36.700
What I mean by that is the RADIUS server understands
how to look up in directory services whatever user

00:17:36.700 --> 00:17:39.600
or a computer might be trying to authenticate.

00:17:39.599 --> 00:17:44.179
So you don't have to retype all of your users that
are already in Open Directory or active directory.

00:17:44.180 --> 00:17:48.560
You don't have to retype all those users and put
them in the RADIUS server instead it just knows how

00:17:48.559 --> 00:17:51.819
to look that up through the Open Directory APIs.

00:17:51.819 --> 00:17:58.909
Now in addition to the GUI, we've also created
a command line utility called "radiusconfig."

00:17:58.910 --> 00:18:04.410
And this allows you to access maybe some of the
settings that the GUI does not allow you to get to.

00:18:04.410 --> 00:18:10.440
Now, so basically what we've done, we've taken
a very, very powerful open source RADIUS server

00:18:10.440 --> 00:18:14.950
and put a really nice interface on
top of it, very easy to implement.

00:18:14.950 --> 00:18:18.930
So now let's look at the client
side starting out with Mac OS X.

00:18:18.930 --> 00:18:21.930
Let's take a look at the Snow Leopards Supplicant.

00:18:21.930 --> 00:18:29.720
The way we've chosen to implement 802.1X in Snow
Leopard is via three modes what we call modes,

00:18:29.720 --> 00:18:34.750
a user mode, a system mode and a login window mode.

00:18:34.750 --> 00:18:39.880
And something new in Snow Leopard, you can
actually use multiple modes at the same time.

00:18:39.880 --> 00:18:43.470
So we'll talk a little bit about that [laughs].

00:18:43.470 --> 00:18:44.710
[ Applause ]

00:18:44.710 --> 00:18:50.410
>> OK, so let's talk about these modes in a little
bit more detail starting with the user mode.

00:18:50.410 --> 00:18:59.470
The idea behind user mode is that the authentication
session is initiated via the logged-in user.

00:18:59.470 --> 00:19:02.160
OK, so think about that for a second.

00:19:02.160 --> 00:19:09.440
It requires that the user be logged-in to the machine before
the session kicks off and it's kicked off using preferences

00:19:09.440 --> 00:19:14.870
or keychain items out of that user's
preferences or keychains.

00:19:14.869 --> 00:19:18.529
So again, it's initiated by the logged-in user.

00:19:18.529 --> 00:19:22.210
Now in contrast with that is something
we call the "system mode."

00:19:22.210 --> 00:19:28.910
The system mode is actually initiated by the
system itself regardless of what user is logged-in.

00:19:28.910 --> 00:19:33.269
And in fact, it can take off even before users logged-in.

00:19:33.269 --> 00:19:41.559
So at boot for example, a system mode may initiate
that authentication, maybe using a machine certificate

00:19:41.559 --> 00:19:46.169
for the credential to authenticate to
the network before user even logs-in.

00:19:46.170 --> 00:19:51.529
So you're setting it login window and the
machine is already authenticated to the network.

00:19:51.529 --> 00:19:54.889
So that's the idea behind user mode and system mode.

00:19:54.890 --> 00:20:01.530
I forgot to mention, system mode uses system preferences
and keychain items out of the system keychain.

00:20:01.529 --> 00:20:03.549
Now think about this for a second.

00:20:03.549 --> 00:20:10.309
Think about machines that are bound to an external
directory, say Open Directory or Active Directory.

00:20:10.309 --> 00:20:17.730
Well if you're using user mode, there's kind of a problem
here, let me kind of describe that for just a second.

00:20:17.730 --> 00:20:21.480
>> I like to think of this as the
chicken and the egg scenario.

00:20:21.480 --> 00:20:31.630
So to authenticate to a-- to login to my computer, if I'm
bound to an external directory, I've got to authenticate

00:20:31.630 --> 00:20:36.570
against that directory before I can even
login to my machine, 'cause my user,

00:20:36.569 --> 00:20:40.769
the user I'm logging in as is stored
on that external directory.

00:20:40.769 --> 00:20:45.960
But to reach the directory server,
the computer must be on the network

00:20:45.960 --> 00:20:50.470
which means it must have already authenticated via 802.1X.

00:20:50.470 --> 00:20:55.900
Well until authenticate via 802.1X,
I've got to be logged-in to my computer.

00:20:55.900 --> 00:21:01.840
So you kind of see the problem here that a user profile

00:21:01.839 --> 00:21:07.379
or user mode does not really work in
the case of an external directory.

00:21:07.380 --> 00:21:13.800
Now system mode would but system mode
doesn't allow for the individual logins.

00:21:13.799 --> 00:21:17.970
So as a result, we've created something
called login window mode.

00:21:17.970 --> 00:21:26.799
The idea behind login window mode is that login window
is responsible for the 802.1X authentication session.

00:21:26.799 --> 00:21:34.349
So whatever username and password is typed in at
login window, that username and password is used

00:21:34.349 --> 00:21:38.209
to authenticate the computer to
the-- via 802.1X to the network.

00:21:38.210 --> 00:21:43.840
And then one set authentication is
successful, we're now on the network.

00:21:43.839 --> 00:21:48.639
That same username and password is used to
authenticate against the external directory.

00:21:48.640 --> 00:21:55.750
Now the current credentials again, are typed
in at the username and password prompt,

00:21:55.750 --> 00:22:02.609
any resources does the preferences and keychain items
come form the system preferences and the system keychain.

00:22:02.609 --> 00:22:07.500
So does that make sense, the idea behind login window mode?

00:22:07.500 --> 00:22:13.880
OK good. So then I also mentioned that we can kind
of mixed modes now, this is new is Snow Leopard.

00:22:13.880 --> 00:22:19.130
So real common example of this might
be, first of all we create a system--

00:22:19.130 --> 00:22:25.890
we create a system profile, to implement a
system mode and maybe we configure it with TLS.

00:22:25.890 --> 00:22:31.680
So we're going to use the client side certificate
and maybe that certificate is a machine certificate.

00:22:31.680 --> 00:22:36.690
So at boot, the machine will automatically
authenticate to the network so that when I'm

00:22:36.690 --> 00:22:39.580
at login window, the machines already on the network.

00:22:39.579 --> 00:22:43.699
And it's authenticated as the machine itself, not the user.

00:22:43.700 --> 00:22:49.250
So at that point, I might use Apple Remote Desktop to
mange that machine, I may even be able to see the directory

00:22:49.250 --> 00:22:53.440
if it's configured, if the directory
is configured to be on that network.

00:22:53.440 --> 00:22:58.509
But then when a user walks up to that machine, we don't
know what user at this point but when a user walks up to

00:22:58.509 --> 00:23:01.529
that machine and types in a username and password.

00:23:01.529 --> 00:23:08.930
Well that username and password is then used
to start a new 802.1X authentication session

00:23:08.930 --> 00:23:10.269
and it's kicked off by login window.

00:23:10.269 --> 00:23:15.319
And then when that user logs back
out, we go back to the system profile.

00:23:15.319 --> 00:23:23.099
So that's a very common way that we'll use mixed modes
within Snow Leopard, again a new feature in Snow Leopard.

00:23:23.099 --> 00:23:29.099
So let's look how this-- look at how this translates to
the interface, the GUI that we've created around this.

00:23:29.099 --> 00:23:35.819
So we, you configure-- what we call
802.1X profiles in system preferences.

00:23:35.819 --> 00:23:39.349
So you would go to system preferences,
you'd select the interface you want,

00:23:39.349 --> 00:23:44.379
in this case it's AirPort, and
then you click the Advance button.

00:23:44.380 --> 00:23:48.630
And when you click the Advance button, it
brings up another panel that has several tabs

00:23:48.630 --> 00:23:52.360
and you notice one of those tabs is 802.1X.

00:23:52.359 --> 00:23:55.699
This is where you would add the various profile types.

00:23:55.700 --> 00:24:00.390
The system profile, the login window
profile and the user profile.

00:24:00.390 --> 00:24:04.560
So this is where you would configure
it via system preferences.

00:24:04.559 --> 00:24:07.700
Now as far as certificate trust goes, we talked a little bit

00:24:07.700 --> 00:24:14.630
about at some point somebody needs
to trust the server side certificate.

00:24:14.630 --> 00:24:18.200
Certificates in Mac OS X are stored in the keychains,

00:24:18.200 --> 00:24:22.080
in which keychain depends on which
profile type your configuring.

00:24:22.079 --> 00:24:26.539
Again, we've talked about system and
login window using the system keychain

00:24:26.539 --> 00:24:30.009
and the user profile uses, the user's keychain.

00:24:30.009 --> 00:24:33.200
And we can explicitly trust at any level.

00:24:33.200 --> 00:24:37.059
Now there's a new GUI in Snow Leopard,
I think you really appreciate this.

00:24:37.059 --> 00:24:41.789
And if you look down at the bottom,
there's this Configure Trust button.

00:24:41.789 --> 00:24:47.849
And what does, that pops up a new dialogue and at
this dialogue, you can actually drag a certificate in.

00:24:47.849 --> 00:24:51.789
So if you've got the file, the certificate
file, you can drag that certificate

00:24:51.789 --> 00:24:54.789
in and that sets a trust for this profile.

00:24:54.789 --> 00:24:56.349
[ Applause ]

00:24:56.349 --> 00:25:02.549
>> And then also there's another tab called "servers."

00:25:02.549 --> 00:25:09.919
So we can now actually create a list of
servers that are only valid for this SSID.

00:25:09.920 --> 00:25:18.100
So one of the problems that we've seen in the past is if a
dialogue pops up and there's user sitting at the machine,

00:25:18.099 --> 00:25:23.949
that user may not have any idea if the certificate
presented in that dialogue as valid or not.

00:25:23.950 --> 00:25:29.850
So as an administrator, what you can do is
create a list of the servers and only the servers

00:25:29.849 --> 00:25:33.099
that are valid for this particular profile.

00:25:33.099 --> 00:25:40.779
And if one of those servers is not-- certificate is
not presented during the connection, it just fails.

00:25:40.779 --> 00:25:44.180
So the user does not have to be involved anymore.

00:25:44.180 --> 00:25:45.930
So that's a little bit on certificate trust.

00:25:45.930 --> 00:25:51.950
In addition to doing this in the GUI, there
are some additions to the security tool,

00:25:51.950 --> 00:25:57.200
the security command line tool that allows you
to import certificates and set the trust as well.

00:25:57.200 --> 00:26:04.519
So for example, if you type security
dump-trust-settings, you will see all the trust settings

00:26:04.519 --> 00:26:07.190
for the certificates installed in your keychains.

00:26:07.190 --> 00:26:14.070
Now if you put the -d switch at the end, you're going to
see those in the admin domain, those that might be used

00:26:14.069 --> 00:26:18.200
by any user or process within the computer.

00:26:18.200 --> 00:26:25.680
Or if you leave off the -d, you'll see all the trust
settings within the user domain, so the trust specifically

00:26:25.680 --> 00:26:31.950
for that user, so again, a new GUI
that we've implemented in Snow Leopard.

00:26:31.950 --> 00:26:39.009
So at this point, I think what I'm going
to do is perform a demo using Mac OS X.

00:26:39.009 --> 00:26:44.980
[ Pause ]

00:26:44.980 --> 00:26:49.509
>> OK, so what I've got set up
here is a small 802.1X network.

00:26:49.509 --> 00:26:52.629
I've actually got a server hidden back here on a laptop.

00:26:52.630 --> 00:26:57.700
I've got AirPort Extreme Base Station
which is going to be my authenticator

00:26:57.700 --> 00:27:01.580
and it requires 802.1X authentication
to get on to the network.

00:27:01.579 --> 00:27:08.220
So here from my client, I'm going to
start out with something very simple.

00:27:08.220 --> 00:27:10.950
I'm just going to click on the AirPort menu.

00:27:10.950 --> 00:27:12.380
Here's my network.

00:27:12.380 --> 00:27:14.010
I'm just going to select it.

00:27:14.009 --> 00:27:18.990
[ Pause ]

00:27:18.990 --> 00:27:21.829
>> Type in my credentials.

00:27:21.829 --> 00:27:25.009
I'm going to trust this certificate.

00:27:25.009 --> 00:27:29.569
[ Pause ]

00:27:29.569 --> 00:27:31.679
>> And now I'm connected to the network.

00:27:31.680 --> 00:27:37.350
I didn't really have to setup a profile but let me
just insure that I really am connected to the network.

00:27:37.349 --> 00:27:38.980
I'm going to bring up Safari.

00:27:38.980 --> 00:27:41.529
And I've got a web server set up here in my private network.

00:27:41.529 --> 00:27:44.109
So we'd see the page loaded, we're on the network.

00:27:44.109 --> 00:27:46.589
Now what happened under the hood here?

00:27:46.589 --> 00:27:54.919
If we go back to system preferences, we're going to click
on Network, where we're using the AirPort interface,

00:27:54.920 --> 00:28:03.150
and notice first of all that we have a Disconnect button,
that we are connected to an 802.1X protected network.

00:28:03.150 --> 00:28:11.009
If we click on Advance, we'll see that,
first of all, the wireless network was added

00:28:11.009 --> 00:28:20.079
to our AirPort preferred networks list and a
user profile was created that will now be used

00:28:20.079 --> 00:28:22.099
for the future to connect to this network.

00:28:22.099 --> 00:28:23.879
So all this happened under the hood.

00:28:23.880 --> 00:28:27.890
I didn't actually have to come here to set that up.

00:28:27.890 --> 00:28:36.460
Now, if I wanted to remove this profile at this point,
what I would do is click Disconnect, go back click Advance.

00:28:36.460 --> 00:28:39.009
I'd remove the preferred network.

00:28:39.009 --> 00:28:44.089
[ Pause ]

00:28:44.089 --> 00:28:44.919
>> I'm sorry.

00:28:44.920 --> 00:28:49.450
I would remove the preferred network [laughs], apply that.

00:28:49.450 --> 00:28:55.039
I did click Advance again, this
time click on the 802.1X tab.

00:28:55.039 --> 00:29:00.089
I'll remove that profile, click OK and apply.

00:29:00.089 --> 00:29:03.919
So that's how you-- and so what happened under the hood?

00:29:03.920 --> 00:29:11.050
We have a template built-in that understands
kind of the most common 802.1X configurations.

00:29:11.049 --> 00:29:15.569
So that automatic template was
used and I as a user did not have

00:29:15.569 --> 00:29:20.919
to explicitly set all the settings
for that 802.1X connection.

00:29:20.920 --> 00:29:26.920
Now on the other hand, what I might
want to do is set up a system profile.

00:29:26.920 --> 00:29:31.900
So I'm going to go back to network,
back to AirPort, advanced.

00:29:31.900 --> 00:29:40.080
And this time I'm going to click on the 802.1X tab and I'm
going to specify that I want to create a system profile.

00:29:40.079 --> 00:29:45.710
Now with the system profile, you have
to save some sort of credentials.

00:29:45.710 --> 00:29:50.920
This could be a certificate or an identity actually
which is the certificate and the private key.

00:29:50.920 --> 00:29:55.340
If I were using TLS I'd have to
use a client side certificate.

00:29:55.339 --> 00:30:01.539
In this case, I'm just going to use a username
and password and I've got a generic one set up.

00:30:04.160 --> 00:30:07.440
I'm going to select my wireless network.

00:30:07.440 --> 00:30:11.549
And in this case, I'm just going
to allow both TTLS and PEAP.

00:30:11.549 --> 00:30:15.269
>> Now if I wanted to configure this
further, I could click on configure,

00:30:15.269 --> 00:30:19.930
and this is where I could set the in
or off type in the outer identity.

00:30:19.930 --> 00:30:21.870
In my case, I don't need that.

00:30:21.869 --> 00:30:28.049
Now, here's the GUI I was talking about, here's
the configured trust dialog and so what I've done,

00:30:28.049 --> 00:30:34.149
I've already obtain my certificates from
the server that I'm authenticating against.

00:30:34.150 --> 00:30:49.900
So I'm going to drag this RADIUS server certificate
here, I'll click OK, click OK again, and I'll apply that.

00:30:49.900 --> 00:30:53.440
And we're now connected with the system profile.

00:30:53.440 --> 00:30:59.140
And I can verify that again by going to
my web server and I'll just refresh that

00:30:59.140 --> 00:31:01.500
and sure enough there we are, we're connected.

00:31:01.500 --> 00:31:05.849
Now what's nice about this, I can log out at this point.

00:31:05.849 --> 00:31:12.949
But I'm going to stay connected or authenticated
against, with 802.1X to this wireless network.

00:31:12.950 --> 00:31:17.240
So at this point, the machine is still
on the network, and by the way we can see

00:31:17.240 --> 00:31:22.910
that at the login window because we have an IP address.

00:31:22.910 --> 00:31:29.820
So at this point, I'm authenticated to the
network using that 802.1X system profile.

00:31:29.819 --> 00:31:31.759
So I'm going to log back in.

00:31:31.759 --> 00:31:39.890
And now what I'm going to do is I'm also
going to create a login window profile.

00:31:39.890 --> 00:31:48.700
So we go to network, again, we'll
click on AirPort, advanced, 802.1X,

00:31:48.700 --> 00:31:52.289
and this time I'm going to create a login window profile.

00:31:52.289 --> 00:31:55.879
Now with the login window profile, we
don't know who's going to be login in.

00:31:55.880 --> 00:31:58.960
So we're not going to type in any credentials at this point.

00:31:58.960 --> 00:32:01.470
We're just going to leave that blank.

00:32:01.470 --> 00:32:04.089
But for the wireless network, certainly
we have to select that.

00:32:04.089 --> 00:32:09.259
And then again, I'm going to configure
the trust on the server side certificate.

00:32:09.259 --> 00:32:12.059
So I'll grab my certificate here.

00:32:12.059 --> 00:32:13.579
I'll drag that in.

00:32:13.579 --> 00:32:20.970
Oh, and I should mention by the way this Plus
button allows me to select a certificate file

00:32:20.970 --> 00:32:23.700
which is what I'm really doing by dragging it in.

00:32:23.700 --> 00:32:26.680
You could also select a certificate from the keychain.

00:32:26.680 --> 00:32:32.779
So if the certificate or certificates you're
interested in are already installed in your keychains,

00:32:32.779 --> 00:32:35.559
you can simply select them from the keychain.

00:32:35.559 --> 00:32:37.539
In this case I drag the certificate in.

00:32:37.539 --> 00:32:43.940
I'm going to click OK, click OK again, and apply that.

00:32:45.289 --> 00:32:51.559
So now what I've done is I've created both
the system profile and a login window profile.

00:32:51.559 --> 00:32:57.440
And previously, I ban this machine to Open
Directory, so I'm going to log out at this point.

00:32:57.440 --> 00:33:01.350
And again when we log out, we should
still be connected to the network.

00:33:01.349 --> 00:33:07.509
And we can verify that again with the IP address.

00:33:07.509 --> 00:33:11.490
Now this time I'm going to attempt
to login with a network user.

00:33:11.490 --> 00:33:15.009
So I'm going to use the user Kevin.

00:33:15.009 --> 00:33:19.720
[ Pause ]

00:33:19.720 --> 00:33:27.400
>> Now if you watched this what happened was we
just disassociated from the wireless network.

00:33:27.400 --> 00:33:34.769
We re-associated to the wireless network and
authenticated via 802.1X using the user name Kevin.

00:33:34.769 --> 00:33:41.740
OK, so we disconnected, if you will, the system
mode and reconnected using a login window mode.

00:33:41.740 --> 00:33:48.859
Now if all went well, we should be able to see our server
and sure enough we do, we see our server and also just

00:33:48.859 --> 00:33:55.240
to show you that really was the network user,
there's Kevin and you see network user there.

00:33:55.240 --> 00:34:03.009
So that's an example of how you might implement
both a system profile and a login window profile.

00:34:03.009 --> 00:34:06.410
[ Applause ]

00:34:06.410 --> 00:34:09.809
[ Pause ]

00:34:09.809 --> 00:34:14.989
>> OK, so that's the Mac-- that's how we
implemented the supplicant in Mac OS X.

00:34:14.989 --> 00:34:17.649
Now, let's switch gears a little
bit and look at the iPhone OS.

00:34:17.650 --> 00:34:25.099
How did we implement a supplicant 802.1X
supplicant for the iPhone and the iPod Touch?

00:34:25.099 --> 00:34:32.589
Well it's-- first of all, you have to understand
the concept that an iPod or an iPhone is not

00:34:32.590 --> 00:34:35.180
at multi-user device like a Macintosh is.

00:34:35.179 --> 00:34:38.079
With the Macintosh, you login, right?

00:34:38.079 --> 00:34:39.529
And who are you login as?

00:34:39.530 --> 00:34:42.390
I don't know, some user, whatever
user credentials you typed in.

00:34:42.389 --> 00:34:45.349
With the iPhone it's really a single-user device.

00:34:45.349 --> 00:34:52.039
So you real only have what's analogous
to the user mode on Mac OS, OK.

00:34:52.039 --> 00:34:54.420
So there's no login window mode, no system mode.

00:34:54.420 --> 00:34:56.889
And actually in reality it's almost like a system mode.

00:34:56.889 --> 00:35:03.389
I don't know, it's kind of confusing but to
understand that it's just a single mode, OK.

00:35:03.389 --> 00:35:06.049
So the connection is very similar to Mac OS X,

00:35:06.050 --> 00:35:11.530
I simply select the wireless network via
negotiation, security negotiation happens.

00:35:11.530 --> 00:35:15.410
It's determined that I need to use
802.1X and then the supplement--

00:35:15.409 --> 00:35:19.969
supplicant kicks in and authenticates me to the network.

00:35:19.969 --> 00:35:27.449
And it's implemented via in automatic profile template very
similar to the way Mac OS was and it will work as I said,

00:35:27.449 --> 00:35:32.299
you know, from most configurations of 802.1X.

00:35:32.300 --> 00:35:40.100
And of course, certificate trust still the
same in Mac OS X, I'm sorry, in the iPhone OS.

00:35:40.099 --> 00:35:46.880
And once you've created this automatic
profile, it auto-joins very similar

00:35:46.880 --> 00:35:50.099
to the way the Macintosh would auto-join a network.

00:35:50.099 --> 00:35:55.250
And if you want to get rid of that profile,
you simply forget the wireless network.

00:35:55.250 --> 00:35:57.909
And I'll actually go through a demo of that as well.

00:35:57.909 --> 00:36:00.230
So here's an example-oops, let's do this again.

00:36:00.230 --> 00:36:08.570
Here's an example, here's the iPhone and
I'm going to tap on the 802.1X test network.

00:36:08.570 --> 00:36:11.160
Once I do that, the security negotiation happens.

00:36:11.159 --> 00:36:14.730
It's determined that I need to use 802.1X to authenticate.

00:36:14.730 --> 00:36:20.159
So I type in a username and password, I prompt, I
type that in, and then presented with a certificate.

00:36:20.159 --> 00:36:25.500
Again, very similar to Mac OS X, I could
look at-- look deeper at that certificate,

00:36:25.500 --> 00:36:28.110
get a little bit more information about that certificate.

00:36:28.110 --> 00:36:32.260
And then once I trust that certificate,
then I'm on the network.

00:36:32.260 --> 00:36:37.520
So the connection by selecting a wireless
network is very similar to Mac OS X.

00:36:37.519 --> 00:36:45.050
However, maybe as an administrator whose deploying
lots of the iPhones or iPod Touch devices,

00:36:45.050 --> 00:36:50.580
you might want to pre-configure a profile for your users.

00:36:50.579 --> 00:36:55.519
So there's a toll that you can get off the
internet called the "iPhone Configuration Utility."

00:36:55.519 --> 00:36:57.570
How many people have used this so far?

00:36:57.570 --> 00:36:58.970
OK, great.

00:36:58.969 --> 00:37:04.839
So you can use this to create an 802.1X profile.

00:37:04.840 --> 00:37:10.190
You can explicitly trust certificates
just like you would with Mac OS X.

00:37:10.190 --> 00:37:16.710
This is where you would set up things like what
EAP type you're using, PEAP, TTLS, TLS, etcetera.

00:37:16.710 --> 00:37:22.699
For using TLS, you need a client side identity,
this is the application you would use to configure

00:37:22.699 --> 00:37:26.589
that and apply that to your 802.1X profile.

00:37:26.590 --> 00:37:35.070
And what's really nice, you can actually sign or trust this
profile and then email it out to your users or maybe post it

00:37:35.070 --> 00:37:42.430
on a secure website or something so that the user might have
to type in a username and password to get on to the website.

00:37:42.429 --> 00:37:49.359
And once they get this profile, you simply install
it, installs on the iPhone or the iPod Touch

00:37:49.360 --> 00:37:52.280
and at that point, you're set and ready to go.

00:37:52.280 --> 00:37:57.830
So it's a really easy way for you as an
administrator to set up a profile for your users.

00:37:57.829 --> 00:38:04.619
So we have the Authentication tab, this is where you
set up your authentication types, your EAP types.

00:38:04.619 --> 00:38:10.759
If you want you can pre-determine the username
that's going to be used or you can live that blank.

00:38:10.760 --> 00:38:15.240
And then finally, here's where you
set up the trust for the certificates.

00:38:15.239 --> 00:38:21.549
So let's do a demo really quick of using
the iPhone to connect to a wireless network.

00:38:21.550 --> 00:38:23.000
And to do that--

00:38:23.000 --> 00:38:29.710
[ Pause ]

00:38:29.710 --> 00:38:30.929
>> -- OK, so here I am.

00:38:30.929 --> 00:38:38.079
I would like to join my iPhone to the same
protected network that we were connecting to earlier.

00:38:38.079 --> 00:38:42.210
So what I'm going to do is click
on settings or tap on settings.

00:38:42.210 --> 00:38:46.210
And then I'm going to tap on Wi-Fi
to connect to the wireless network.

00:38:46.210 --> 00:38:48.530
Now that same network shows up here.

00:38:48.530 --> 00:38:50.340
So I'll tap on that.

00:38:50.340 --> 00:38:54.000
Now it understands that I need to
type in a username and password.

00:38:54.000 --> 00:39:02.099
[ Pause ]

00:39:02.099 --> 00:39:04.980
>> I got you.

00:39:04.980 --> 00:39:07.269
And I simply click on Join.

00:39:07.269 --> 00:39:12.349
It's asking me do I want to accept
the certificate from the server.

00:39:12.349 --> 00:39:13.969
And sure enough there we are.

00:39:13.969 --> 00:39:18.230
We are now connected to the wireless--
well, no we're not quite connected.

00:39:18.230 --> 00:39:21.469
There we are, now we are connected to the wireless network.

00:39:21.469 --> 00:39:29.509
I'll tap on Safari-- oops, I'll tap on Safari and reload
that webpage and sure enough we're actually connected

00:39:29.510 --> 00:39:34.940
to the wireless network and authenticate it via 802.1X.

00:39:34.940 --> 00:39:43.329
Now if I wanted to remove this automatic profile that I
just created I would click on settings, go back to Wi-Fi,

00:39:43.329 --> 00:39:51.269
and what I'm going to do for that wireless
network is I'm going to forget the network.

00:39:51.269 --> 00:40:00.070
And so what that just did, it removed the profile
and the certificate associated with that profile.

00:40:00.070 --> 00:40:07.880
So that's how you would just simply join a
wireless network and authenticate via 802.1X.

00:40:07.880 --> 00:40:12.119
But what if somebody has created a profile for me

00:40:12.119 --> 00:40:16.869
so that it would automatically configure
the iPhone to connect to that network?

00:40:16.869 --> 00:40:19.819
>> Well, it just so happens that somebody did that for me.

00:40:19.820 --> 00:40:22.059
Actually, I did that for me.

00:40:22.059 --> 00:40:27.619
And so, if I go to my email, as you see, we're not
connected top a network here, if I go to my email

00:40:27.619 --> 00:40:34.059
and look in this demo folder, there's an email
that I sent to myself that includes a profile.

00:40:34.059 --> 00:40:43.940
So all I have to do to install this profile
on the iPhone, is select it, oops, select it.

00:40:43.940 --> 00:40:46.900
Now it's starting the installation process.

00:40:46.900 --> 00:40:48.630
I'm going to install that.

00:40:48.630 --> 00:40:54.890
Yes, I do want to install that now.

00:40:54.889 --> 00:41:02.000
Now, I did not say the username and
password, so I have to type that in.

00:41:02.000 --> 00:41:12.659
[ Pause ]

00:41:12.659 --> 00:41:15.779
>> And it's installing the profile.

00:41:15.780 --> 00:41:17.980
I simply tap Done.

00:41:17.980 --> 00:41:28.530
And I can watch here on my server that the authentication
is occurring and I am now connected to that network.

00:41:28.530 --> 00:41:35.490
So there you go [applause] that's how you use a
profile, configure via iPhone Configuration Utility.

00:41:35.489 --> 00:41:37.919
So let's get back over to the slides.

00:41:37.920 --> 00:41:46.610
So now that we've looked at how you configure
both Mac OS X and the iPhone OS for 802.1 X.

00:41:46.610 --> 00:41:48.980
Let's talk a little bit about deployment.

00:41:48.980 --> 00:41:55.230
How do you deploy this for lots and lots of
devices, hundreds or thousands of devices?

00:41:55.230 --> 00:42:05.269
So a new feature in Snow Leopard is the ability
to import and export X profiles, all three types.

00:42:05.269 --> 00:42:12.840
So you basically set up your machine with whatever profile
or profiles you want, make sure they work properly,

00:42:12.840 --> 00:42:19.050
and then you simply click this new Export button
or Export pop-up menu, and it exports the profile.

00:42:19.050 --> 00:42:23.800
You can have a single profile, like
for example, a single system profile

00:42:23.800 --> 00:42:28.030
or you might have all three profile types in a single file.

00:42:28.030 --> 00:42:36.180
And then you can then import that profile,
again, using the GUI within system preferences.

00:42:36.179 --> 00:42:44.349
In addition to the new GUI, networksetup, the command line
tool now offers the ability to import and export profiles.

00:42:44.349 --> 00:42:48.589
So the same functionality could be accomplished in a script.

00:42:48.590 --> 00:42:53.789
[Applause] Thank you.

00:42:53.789 --> 00:43:00.719
So, the idea here is you set up a machine, create the
profile, export it, and then you can use something

00:43:00.719 --> 00:43:08.439
like Apple Remote Desktop to send that profile out to the
machine and networksetup to import it into your machine.

00:43:08.440 --> 00:43:14.150
So you don't physically have to touch all of your
machines anymore to configure them for 802.1X.

00:43:14.150 --> 00:43:18.570
Now there's one additional step that may
be needed, depending on the profile type.

00:43:18.570 --> 00:43:24.900
If you're configuring TLS, so you have an individual
identity, and again an identity is a certificate

00:43:24.900 --> 00:43:32.360
and a private key, whenever you configure
a user profile or a system profile,

00:43:32.360 --> 00:43:37.260
you need to associate that identity to the profile.

00:43:37.260 --> 00:43:47.210
So there's an additional switch for networksetup, one
is settlsidentityonuserprofile, I have to read that

00:43:47.210 --> 00:43:52.550
but I can never remember it, or
settlsidentityonsystemprofile.

00:43:52.550 --> 00:43:57.660
So again, just to kind of an additional step
you may need to do if you're configuring TLS.

00:43:58.760 --> 00:44:00.280
So let's look at an example.

00:44:00.280 --> 00:44:06.840
How of you attended the scripting session where
they went to a CA and downloaded an identity?

00:44:06.840 --> 00:44:13.250
OK. So imagine if you've got a web server setup,
it's your certificate authority and yo could login

00:44:13.250 --> 00:44:16.309
to that web server and request a certificate et cetera.

00:44:16.309 --> 00:44:22.909
Well, you can do that with the script as well, so with the
script, you may go up, grab your identity, user or machine,

00:44:22.909 --> 00:44:32.230
download it, save it to your machine, and then using these
commands, you would import a profile and set the identity.

00:44:32.230 --> 00:44:36.599
So starting with import, I'm sorry, starting with security,

00:44:36.599 --> 00:44:41.529
the command line tool security,
you would import that identity.

00:44:41.530 --> 00:44:46.010
And by the way, that -x option is
new in Snow Leopard and what that is,

00:44:46.010 --> 00:44:49.410
is when you import that identity, it is secure.

00:44:49.409 --> 00:44:52.379
You are not allowed to export it back out.

00:44:52.380 --> 00:44:58.329
So you import your identity, and again, that
could be a user identity or a machine identity.

00:44:58.329 --> 00:45:03.909
You then use security to add the trusted search.

00:45:03.909 --> 00:45:06.500
So this is the server certificate, alright?

00:45:06.500 --> 00:45:08.190
So we're doing the entire configuration.

00:45:08.190 --> 00:45:13.480
We take the server sides certificate,
import that, and we trust it for EAP.

00:45:13.480 --> 00:45:16.460
We then import the profile.

00:45:16.460 --> 00:45:20.179
In this case, we're importing, I believe a system profile.

00:45:20.179 --> 00:45:22.779
Or actually, in this case, we're importing all profiles.

00:45:22.780 --> 00:45:25.450
So it depends on what was actually exported.

00:45:25.449 --> 00:45:28.409
And then finally, that extra step that I was talking about,

00:45:28.409 --> 00:45:33.429
you need to associate the identity to
the profile that you just imported.

00:45:33.429 --> 00:45:41.279
So here's an example of how you could completely
script exporting and importing profiles.

00:45:41.280 --> 00:45:50.100
Now, another way that people deploy lots of
devices, lots of machines, is via imaging.

00:45:50.099 --> 00:45:54.650
So the basic idea is you set up your
machine, create an image of that machine,

00:45:54.650 --> 00:45:57.170
and send that image out to all your other machines.

00:45:57.170 --> 00:46:02.619
So let's look at how 802.1X profiles
translate in the imaging process.

00:46:02.619 --> 00:46:04.920
So first of all, user profile.

00:46:04.920 --> 00:46:11.610
Actually, a user profile does not really image properly
because there's a binding between the interface

00:46:11.610 --> 00:46:15.000
and the profile, and that binding
stored in the ByHost preferences.

00:46:15.000 --> 00:46:20.349
And as you know, ByHost preferences
are specific for each machine.

00:46:20.349 --> 00:46:27.480
So a better way to handle setting up a user
profile during the imaging process would be

00:46:27.480 --> 00:46:34.880
to create a post image script that's automatically
launched and would create the profile for you.

00:46:34.880 --> 00:46:40.039
As far as the system profile goes,
the system profile images just fine.

00:46:40.039 --> 00:46:44.800
However, understand that you're taking
in an exact copy of your master machine

00:46:44.800 --> 00:46:47.100
and putting that on all your other machines.

00:46:47.099 --> 00:46:50.869
So that means whatever saved credentials
were on your master machine,

00:46:50.869 --> 00:46:53.329
would also be copied down to all your other machines.

00:46:53.329 --> 00:47:00.230
So all your machines would authenticate via
the system profile with the same credentials,

00:47:00.230 --> 00:47:05.940
either a certificate or a username and password credentials.

00:47:05.940 --> 00:47:07.130
Now, that maybe what you want.

00:47:07.130 --> 00:47:08.369
That may be fine.

00:47:08.369 --> 00:47:16.739
However, if you want individual credentials per
machine, again, you would use networksetup and associate

00:47:16.739 --> 00:47:21.939
that identity, machine or user, to the system profile.

00:47:21.940 --> 00:47:24.900
And then finally, a login window profile, that just works.

00:47:24.900 --> 00:47:27.160
That does exactly what you would expect.

00:47:27.159 --> 00:47:32.710
The profile is copied from one machine to another, and
since you don't know what user is logging in, it just works,

00:47:32.710 --> 00:47:36.240
whatever credentials are typed at
the login window, they just work.

00:47:36.239 --> 00:47:42.009
So this is how 802.1X profiles
translate in the imaging process.

00:47:42.010 --> 00:47:44.620
So now, let's look at deployment on the iPhone.

00:47:44.619 --> 00:47:46.929
Well, or iPod Touch.

00:47:46.929 --> 00:47:48.559
We've really already talked about this.

00:47:48.559 --> 00:47:54.179
Because there's, you know, it's really a single
mode, there's you don't login to your iPhone,

00:47:54.179 --> 00:48:01.369
the way you would implement or deploy 802.1X
on lots of iPhones or iPod Touch devices is

00:48:01.369 --> 00:48:05.219
with the IPCU, the iPhone Configuration Utility.

00:48:05.219 --> 00:48:10.529
So you'd create your profiles the way you want them,
and then figure out how to get those on to the iPhone.

00:48:10.530 --> 00:48:16.660
You could do it through the iPhone Configuration Utility,
you could do it on a web server, you could do it via email.

00:48:16.659 --> 00:48:19.199
So whatever works for you.

00:48:19.199 --> 00:48:20.549
OK, so that's deployment.

00:48:20.550 --> 00:48:22.470
Let's now look at trouble shooting.

00:48:22.469 --> 00:48:24.679
We've added a couple things here as well.

00:48:24.679 --> 00:48:30.009
So in terms of troubleshooting, one thing I've
learned in several years of troubleshooting 802.1X,

00:48:30.010 --> 00:48:33.730
is don't immediately think that the problem is 802.1X.

00:48:33.730 --> 00:48:38.429
To get on to a network using 802.1X, there's
a lot of things that come in play here.

00:48:38.429 --> 00:48:40.679
For example, DHCP is very important.

00:48:40.679 --> 00:48:47.179
You may actually authenticate to the network via 802.1X
and never get an IP address or something like that.

00:48:47.179 --> 00:48:49.969
So usually, where I start are the client log files.

00:48:49.969 --> 00:48:53.419
And again, don't look just for 802.1X information.

00:48:53.420 --> 00:48:55.730
Look for any kind of network operations.

00:48:55.730 --> 00:49:00.650
Look for EAP, that's the actual authentication
process, see if you can find out what's going there.

00:49:00.650 --> 00:49:05.639
If that doesn't work for you, maybe the
next step is go to the authenticator log.

00:49:05.639 --> 00:49:11.619
So for example an access point, I can see that
the client has associated to the access point,

00:49:11.619 --> 00:49:18.839
and then what I should see is that the access point is
trying to authenticate the user to the RADIUS server.

00:49:18.840 --> 00:49:21.370
If I never see the authentication,
well that's where it's breaking.

00:49:21.369 --> 00:49:27.000
It's never-- it would be a wireless issue in that case
and it's never authenticating to the access point.

00:49:27.000 --> 00:49:34.099
And then of course you can look at the RADIUS log
files, the authentication server log files, so,

00:49:34.099 --> 00:49:36.650
to see if the authentication was successful.

00:49:36.650 --> 00:49:39.660
And of course, if the RADIUS server
is pointed to a back end directory,

00:49:39.659 --> 00:49:46.849
you might want to look at the directory server
files, log files to see what's going on there.

00:49:46.849 --> 00:49:49.809
Again, as I mentioned, DHCP is very important.

00:49:49.809 --> 00:49:54.789
So if everything else looks like it worked properly
and you're still not able to access the internet

00:49:54.789 --> 00:50:00.400
or your network resources, check
the DHCP server log files to see

00:50:00.400 --> 00:50:03.789
if you ever issued an IP address or renewed your lease.

00:50:03.789 --> 00:50:07.739
And of course, if none of that works,
you can always resort to packet traces,

00:50:07.739 --> 00:50:11.250
and you can do that via TCP dump and WireShark.

00:50:11.250 --> 00:50:16.380
Actually, I really like WireShark
for analyzing our connections.

00:50:16.380 --> 00:50:21.849
>> Now something that you can do if all
of that doesn't tell you what you need,

00:50:21.849 --> 00:50:26.199
doesn't help you solve the problem,
you can actually turn on Debug Logging.

00:50:26.199 --> 00:50:35.429
So for the Mac OS X supplicant, you can turn on
debug logging with the defaults write command.

00:50:35.429 --> 00:50:40.429
And basically, what you're doing is creating
this file called com.apple.eapolclient,

00:50:40.429 --> 00:50:45.579
and it sits in /Library/Preferences/SystemConfiguration/,
and it's a plist.

00:50:45.579 --> 00:50:52.190
And within that plist is this flag called
LogFlags, and it has a value of -1.

00:50:52.190 --> 00:51:00.159
If that file exists with the LogFlags switch set
to -1, EAPol will spit out a bunch of log files

00:51:00.159 --> 00:51:03.980
and they're stored in /var/log/eapolclient/.

00:51:03.980 --> 00:51:09.019
So that's how you turn on debug
logging for EAPol in Mac OS X.

00:51:09.019 --> 00:51:15.269
Also, you can turn on DHCP debug logging
with the ipconfig setverbose to 1.

00:51:15.269 --> 00:51:21.059
So this is how you can get a little
bit more information on Mac OS X.

00:51:21.059 --> 00:51:26.710
Now, in terms of iPhone OS, how do you
get more information from the iPhone?

00:51:26.710 --> 00:51:31.829
Well first of all, you use iPhone
configuration utility to download the logs

00:51:31.829 --> 00:51:34.920
from the iPhone and then view them on your computer.

00:51:34.920 --> 00:51:39.840
But before you can do that, you've actually
gotta turn on debug logging on the iPhone.

00:51:39.840 --> 00:51:42.579
And before you can do that, you've actually got--

00:51:42.579 --> 00:51:48.019
you actually have to expose the GUI
within the iPhone configuration utility.

00:51:48.019 --> 00:51:53.059
So to expose that GUI, use defaults
write again, and this time,

00:51:53.059 --> 00:51:57.750
you're writing to com.apple.iPhoneConfigurationUtility.

00:51:57.750 --> 00:52:03.309
And you're basically turning on
EnableDebugLoggingInterface by using Yes.

00:52:03.309 --> 00:52:09.190
Once you do that, a new tab will
show up in IPCU called "Logging."

00:52:09.190 --> 00:52:14.750
And under the logging tab, you
can then turn on 802.1X logging.

00:52:14.750 --> 00:52:20.019
So this is how you turn on debug logging
from the iPhone Configuration Utility

00:52:20.019 --> 00:52:22.610
and then use that same utility to download the logs.

00:52:22.610 --> 00:52:30.160
So that's it for a little bit more
information, here are some contacts.

00:52:30.159 --> 00:52:31.440
Let's summarize.

00:52:31.440 --> 00:52:40.950
So Apple has built-in what I think are very robust
supplicants both in Mac OS X and in the iPhone OS.

00:52:40.949 --> 00:52:47.719
We support an external directory in which--
we support that in three different ways.

00:52:47.719 --> 00:52:53.359
We support that with system profile
and the login window profile

00:52:53.360 --> 00:52:57.710
and then we also support standard user
authentication with the user profile.

00:52:57.710 --> 00:53:02.929
You can deploy as we talked about via imaging

00:53:02.929 --> 00:53:09.639
or with the new commands networksetup
when iPhone use IPCU for deployment.

00:53:09.639 --> 00:53:10.859
And so that's it.

00:53:10.860 --> 00:53:13.670
That's our supplicants for Mac OS X and iPhone.