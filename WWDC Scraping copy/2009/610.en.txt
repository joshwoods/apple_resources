---
Title:  Mac OS X Server State of the Union
Year:   2009
Web:    https://nonstrict.eu/wwdcindex/wwdc2009/610/

[!] This transcript has potential transcription errors.
---

 You know, it's been eight years since Apple introduced the first version of Mac OS X server. And throughout that time, we've tried to keep the same philosophy as to how we've designed the product. Built on Mac OS X, we've taken a scalable, industrial strength foundation of Unix, Open Source, and Open Standards. We've integrated that with easy to use server tools, and on top of that we've layered innovative services and applications. So today we're going to dive in to what's new with Snow Leopard server, and it is our best release yet.

 [ Audience member: ] Whew!

[ Laughter ]

 So first we've started off by improving a lot of the administration tools in Mac OS X server, really making it easier to manage and deploy. And I'm just going to give you a sample of a few of the refinements we've made here. We've made installation and set up a lot more streamlined. You no longer have to declare ahead of time the size and purpose of your server installation.

[ Applause ]

We've improved server migration, so now the server can migrate data from existing hardware onto a new server.

We've improved the Airport configuration, so Snow Leopard server can manage your Airport base station including things like port mapping, DHP configuration, and DNS for both the server and Airport; so all of your services are accessible from anywhere on the internet.

[ Applause ]

We've added certificate management into server preferences, so now integrated SSL server management is available throughout the whole server product.

And we have improved server administration for large sites too. Server admin can now manage groups of servers based on any organization you'd like, and we have the ability to manage dynamic groups of servers for things updating criteria like server load. So these are just a few examples of some of the refinements we've made to server admin to make the server easier to manage and deploy.

As you've heard today, there are a lot of great new technologies in Snow Leopard, and we've taken advantage of these in Snow Leopard server to deliver a fully 64-bit server with much greater performance than its predecessor. And so to tell you more details about this, I'd like to invite to the stage Senior Engineering Manager from the Mac OS X server group, [inaudible name].

 So we have some great performance numbers to share with you today, but first let's talk about 64-bit and multicross capability, and at the end we're going to look at specific numbers.

Start with 64-bit... as you saw in earlier sessions, we now have this great 64-bit foundation, and what we did on the server side is we made all of our services 64-bit also, so they can take full advantage of that 64-bit OS and the latest hardware underneath. So let's take a look at what that means. From the server performance prospective there are four things we care about 64-bit. The first one is address space - the large address space that services keep more stuff in the memory, so that you don't have to access expensive disk I/O.

For example, they submitted a contour is now 64-bit, and you can now cache many, many more items in the memory and that really improves the overall performance of the file system, especially when lots of files are being accessed simultaneously. And the same benefit goes for the database as well, with large address space.

Next, Simon mentioned in a previous session the system calls are efficient on 64-bit systems.d So services such as a web server that makes a lot of calls, gets some boost from that as well. Third computation - 32-bit software gets accessed through 4 general purpose registers, while 64-bit gets 16, 4 times as many. And that means any computationally intensive software such as HPC applications running on Xgrid, or encryption algorithms gets huge performance by moving to 64-bit. And lastly, 64-bit kernel enables us to increase the OS resource indication significantly, and here's an example.

So this is the maximum number of processes that you can have on the system. With the 32-bit kernel the maximum was 2,500, and this was the scalability bottleneck for the webserver, the FAT server that we have. With 64-bit kernel, that number the limit is dynamic, so as you have more memory that increases and that made the scalability of our web server significantly better.

So those are key benefits of 64-bit for the server platform, and now let's talk about multicore. A couple of years ago we started to work with core OS engineers to make sure every subcomponent of the OS is optimized for multicore, and here are some of the changes... that went into Snow Leopard.

Lots of fundamental enhancements at the really low level. So we did things like including Scheduler, and make sure it can take advantage of multiple cores, then that worked great, but then the memory subsystem couldn't keep up with it, so we had to include the virtual memory, done, good job. And now the networking was a bottleneck, so we have to multithread IP route lock, improve send file command, and so on and on and on. It was a lot of work, but at the end it all came together and effort really, really paid off.

And here to showcase some data... this is a benchmark and actually taking the CPU Ultilization data while the test is running. Leopard server saturated three cores, but couldn't take the rest of the cores, so 62 % of the CPU was idle, being wasted. With a smaller process server running on the same hardware, it took advantage of every single core and also all the subsystem of the OS, was just humming along, and of course as a result the performance data was over twice as high compared to Leopard Server. So with this new OS we have this great ability to really take advantage of the latest and fastest hardware that's fully loaded. This is an example configuration, this is what we use when we measure for our file services performance.

So this is really great news for the server product. And one last thing I want to mention is that we achieved this high end scalability without sacrificing the low end performance. Mac Mini with 2 gigabytes of memory, is an excellent small business server and Snow Leopard server runs great on those mini configurations, but the same OS simply scales up and takes full advantage of the extra hardware capabilities when it's running on Xserve. So that I think is a great accomplishment, and we are really happy and proud of that.

So with the 64-bit server, and multicore optimized OS, let's look at the performance numbers. Our web server performance increased by 80 %, 1.8X of Leopard server. Not bad. And the NFS number doubled, and this is using the industry standard spec as a sfs benchmark. And lastly this is even better, 2.3 times Leopard server. So the performance is looking pretty good, it's just like getting 1 Xserve for free when you upgrade to Snow Leopard, so we're really happy about that.

Alright, so that's performance and next let's talk about communication services. Snow Leopard server includes a set of robust, open standards based services including mail, chat, calendar, and now contacts - the Address Book server, and we're going to talk about each one of these starting with mail. In Snow Leopard server we have not just a mail server, but the complete mail solution.

We of course have POP, iMAP, and SMTP, but we also have virus and spam filtering services, mailing list server, remote access, web access, and [Inaudible] solution all built into the product. And in the Snow Leopard server we have a brand new mail server engine. We picked up this excellent open source project called DOVEcot.

[ Applause ]

And DOVEcot was already very high performance and also highly reliable and also very secure, but we made additional improvements on top of it to make it even better. For example, we optimized the heck out of it, to make sure we can take full advantage of that 64-bit OS.stdylh We also added some core to it that better integrates Apple technologies as well. So let's take a look at the performance. So this is Sun's messaging server, running on a SPARC Enterprise box, using industry standard spec mail, this scored 17,000. Snow Leopard Server on Xserve scored 28,000 almost 29.

So we are quite happy about this.

[ Applause ]

And by the way the Snow Leopard server is over 10 times improvement from Leopard server. Okay, on the reliability front... the new mail server has a self healing capability where it automatically detects corruptions and repair it. So for example, if the power goes out and when the mail server starts back up, one of the indices are corrupted, mail server automatically finds it, fixes it, and just moves along. So you no longer have to do any manual maintenance with the database. And if you're looking for... that single point of failure, the active crosslink is built right into the design of the new mail server as well.

You can start with two nodes and you can grow to end. And here's some of the examples of upper integration. We of course have ease of set up and management, we even configure the client software for you so it will automatically point to the mail server or the parameters are set right.

And the mail cluster sits on top of Xsan and we've made some changes to the Xsan set up assistant, so all you have to do is simply select mail crosslink from the popup menu, and the set up assistant for Xsan automatically configures all the file system Panthers optimized for mail clustering. Of course the server is also integrated into Mac OS X security and authenticaion infrastructure, Open Directory, Kerberos, service access control and so on.

The mail server's also communicating with big servers, so we the mailing list archive is always synchronized between the two services. We also modified a mail server speed, seamlessly integrated with the new mobile access server, so the mobile clients can have easy access to the mail and we're going to talk about this functionality a little bit more later.

And lastly we added support for server side mail rules, which means you can filter mail messages before they get to your client's mail application. So for example, you can filter all the mail in this traffic carefully monitoring, so only the important business and personal message get to your iPhone, which has limited screen. So that's the mail server.

We have a brand new engine, high performance, high reliability, and also great Apple integration. Next iChat. Didn't make too many changes this time around, but there are a few I want to highlight. First we analyzed and addressed, all the, scalability bottlenecks. So while we don't have any detailed data just yet, looks like we more than doubled the scalability of iChat server and Snow Leopard server. On the functional feature front, we also added support for all the buddy lists as Craig mentioned earlier, and that function now can be turned on or off on a per group basis to give you more flexibility.

And on the security front, we also added support for active directories native digest authentication, as well as support for kerberos multirealm, which means iChat server now works much better in the active directory, open directory combo environment. And lastly, our server as always is open standards based, which means it's fully compatible with all the XMPP and Jabber compliant servers out there, such as Google Talk, and you can easily fit in with them.

And that's Chat Server, and what I'm going to do now is invite Christopher [ Inaudible ]  to the stage so he can talk about the rest of the communication services and also collaboration services.

 So as you know, Snow Leopard has been all about refining and operating the foundations of the operating system, and we did our fair share of that with the X server as you saw in Kazu's presentation.

We also decided to add a few new features and services, and I'm going to go through some of those some starting with iCal server. So for those of you unfamiliar with iCall server, it's a fully featured calendaring system that allows you to schedule meetings with people in your organization, deal with availability, manage availability, things like that.

It also has support for delegation, so you can have people who are delegated to manually manage a room or maybe have an administrative assistant manage the calendars for others. And like all services in Mac OS X server, it's designed for high performance and lastly but certainly not leastly important, is it's completely standards based unlike many of the calendaring systems we've all been using for the last few years, and learning to love some.

The standard we are using is called CalDAV, and it's now an IETF RFC. The standard that we're actually heavily involved in, and we're helping to... have one of the vendors to ship the first commercial CalDAV implementation, we find things and we actually try to push changes back up into the standard that will help everybody, benefit everybody. There have been a few attempts to come up with a calendaring standard in the past.

None of them have really gotten any traction, and with CalDAV we're finally starting to see a traction, some traction, lots of traction in fact. So these are companies that have already deployed, or are in the middle of deploying calendar servers, clients or other calendaring related applications. So I think it's really clear that, as IMAP, POP, and SMTP are to email, CalDAV is definitely going to be the calendaring.

So CalDAV is the standard for calendaring, it's great to have a standard finally. So that's kind of an overview of iCal server, let me get into some of the things that are new. Starting with just some protocol enhancements, so the first one is something that we noticed as we were developing our server. It's called Implicit Scheduling.

The spec originally called for clients to understand most of the logic when it came to managing, scheduling, and shuffling events around between people. And it turns out that that actually can be very fragile, so we helped to implement, helped to define a new standard called implicit scheduling where all that logic really just moves into the server, and the server manages all of that.

And there are two major benefits to that. First, is that it's much easier to write clients, which is a good thing for anybody who wants to write a client. And number 2 of course is that because the server's managing all of the data and you don't have to worry about a client that had a problem, the data integrity is greatly increased.

We've also added push notification, so clients are immediately updated or notified when there's an update to an event And we've added attendee look ups for CalDAV, and what I mean by that is in Leopard look ups, the attendees, were done through open directory or LDAP, and that turned out to be a problem when you wanted to do things like provide remote access, because then you had to poke a hole in your firewall for LDAP.

You really don't want to do that, so now everything runs through CalDAV, there's no need for... no need for poking holes in your firewall, and it's much easier to write clients as well because clients only need to know about CalDAV. So this is a good new feature. And lastly we've added the ability for attendees in an event to reply to an event with the textual message to the organizer in the event.

So moving onto more end user facing features, Snow Leopard now contains a full blown web based calendar client The web client is basically a complete CalDAV client, it's a very rich web application like you'd expect, you can drag and drop events, have multiple calendars. You can invite people, view they're free/busy, all the things you would expect to be able to do in something like iCal. So what this means is that now everybody in your organization, regardless of whether or not they have iCal or some other CalDAV client, has access to their calendaring system.

So this is going to be great for cross platform. Next we put a lot of work into enhancing our interoperability with non CalDAV systems. So most clients, most calendar clients support a protocol called iMIP. And iMIP is basically a way for invitations to be sent and responded to over email. In general fixed on by the clients, so it can be kind of a problem if you're just going client to client.

So what we did is we embedded iMIP directly into the CalDAV server. So what that means is I can invite people from my organization using CalDAV, or anybody else outside of my organization, just using their email address, and the server manages sending those invitations out, accepting the responses, collating the data, and making sure everything's all up to date. So this works great with things like Google Calendars, Outlook, and Yahoo Calendar; any other calendar for that matter.

And lastly, I'm going to talk a little bit about performance, so the team spent a lot of time improving performance for Snow Leopard. They did a lot of analysis, they wrote benchmarks, they ran simulation after simulation... and they are able to get the performance of the server up dramatically - 7 to 10 times. I guess that means 7 to 10 free Xserves for you people.

And so that's great, so simulations are great but it's really important for us to... it's really important for us to find a way to really verify that this would actually work in the real world. So we went and found a really large company that has probably more meetings than most companies in this world, and I'm happy to say that they've completely deployed iCal server, and iCal as their sole... calendaring system.

[ Applause ]

So that lets you know that iCal server is ready for big companies like Apple. So enough talking about features, I'm going to ask Wilfredo Sanchez to come up and give you a demo of some of the features that we've added for Snow Leopard.

[ Applause ]

 Good afternoon. I'm Wilfredo and I manage the iCal server engineering team at Apple. I'm just going to show you a couple of the highlighted features that you'll see in Snow Leopard and Snow Leopard server related to calendaring. Just go over to the demo machine, OK.

So now let's, for the sake of example, let's say that a university called Moeller University has decided to deploy iCal server on their campus for use by their faculty, staff, and their students. And say, I'll start out here as a student... and iCal here should look familiar to those of you using Leopard.

By deploying iCal server, the university is basically provided a standards based CalDAV service to all of their users, and here I can store all of my meetings rather than just on my machine on the CalDAV server, which means that I can access it from any machine that has access to net server.

And so you see here in blue I've got all my course work, I've got some Phys Ed stuff, sports that I'm doing in the morning, and then some social things I'm doing in the afternoon. Now that in and of itself is somewhat interesting, but really where CalDAV comes into play is when you can do some scheduling things in it, interact with other people. So I'm going to go ahead and create a meeting here on my projects calendar, because I want to meet with the professor about a project.

And let's just call that project "meeting". And one thing is I need to find a room to book that in, so I'm just going to go ahead and start typing building number, and all the rooms in that building show up in a list here, and they're all marked as available.

So you can see right here in this view what's available to access, so I'm just going to go ahead and book something in this room. And then I'm going to start inviting some folks, so the professor that I want to meet with is named Arthur. So I start to type his name and now iCal is doing a query via HTTP protocol, to the CalDAV server to find out what users are available. Now in Leopard, this was actually done via an open directory based lookup. At this point the client no longer needs to bind to open directory in order for this to work.

[ Applause ]

This lookup is happening directly to the calendar server, and that means that there's no issues between synchronizing data or... basically this data's authoritative from the calendar server. And so I'm going to go ahead and invite a couple other folks - Iris and Morgan... and aside from doing lookups just on the directory service, iCal also checks your address book.

So here I'm going to invite somebody names Alyssa, and Alyssa does not have an account on the calendaring system here, because she's not a student at Moeller. So I'm going to just enter her email address from my address book in here, which iCal will do for me. And so in Leopard you can really do this, but what will happen now is the calendar server will get this email address and actually behind the scenes send an IMAP message out to Alyssa that she can then process. So I'm going to go ahead and send that out, that looks good.

I'm going to hide this, and switch over to Alyssa's case. Now Alyssa uses Gmail to read her email, and as you can see here she just got an email message inviting her to a project meeting. And you see there's an HTML formatted message in here with the date of the event and all the information that's relevant to it - in Google and there are many other applications that do this sort of thing, actually give you some affordance for accepting the meeting right, and the email clients, so I'm just going to go ahead and accept that. And if I go over to my calendar you can see that, in fact this meeting got in here. Oh, wrong week.

That's so confusing. Next again, alright there it is. I guess I'd advanced too much in iCal. OK, thanks. And you can see that here, you know, there's the meeting and you can see like all the relevant information about it. So we'll go ahead and exit that. Now let's say now I'm the professor that got this email message, and I'm kind of out on the go so I don't have a machine with iCal right in front of me. So I'm going to just borrow somebody else's computer and use a standard web browser on their machine, happens to be Safari.

Let me actually get this link here... and Moeller University has actually put the calendar on their homepage, so there's a couple of interesting things to note here. One is that if you use Leopard, you know that we had a web based calendar for groups and now this is actually available to individual users.

Another thing is that this is no embeddable, so you can take any website and actually, like you could embed a You Tube video onto a website, you can now embed the user web calendar which we inherited from the wiki product, and embed that into your homepage which is kind of spiffy. And finally, kind of cool is that all of this is actually a rich calendaring UI, so it's not just a read only view. As you can see here, I've been invited to a couple of things, I've got to test that, what I was doing.

And here's that project meeting that I was invited to, and I can go ahead and accept that here, and there it is on my calendar. Similarly I can do things like create a new meeting, just call that whatever, and I can, just like I could in iCal actually add some attendees in here. So I'm going to go ahead and add Cyrus like I did before, there he is doing attendee look up just like he could on iCal.

And kind of cooler is you can actually see that the free/busy information is displayed up on here, just like you would on iCal. So it' s full on, rich web calendar experience here. And that's all I have to show for you. If you have any more you want to see, come by our talk tomorrow, and thanks.

[ Applause ]

 Thanks Alfredo. Alright, so that's iCal server. Some protocol enhancements, we've greatly improved the performance, a great web client. I encourage all of you who are considering calendaring systems to take a look at this. It's ready for large organizations, and I think it's going to work out great for all of you.

It's working out great for us at Apple even. So next, I'm going to talk about a new service called Address Book server. So Address Book Server is a service, based service, that allows people to take their contacts, which they normally would have had in a local address book, and store them up on a server and manage them just as they would if they were local contacts.

The benefit here is that they can get to these contacts from any various computers that they may be using. So sticking to our theme of standards and Mac OS X server, Address Book Server is based on a new standard called CardDAV, and some of you may have noted that CardDAV sounds an awful lot like CalDAV, and there's a good reason for that.

The people who designed CalDAV or defined that standard, also are the people who are defining the CardDAV standard. And what they've done is actually taken kind of the base levels of CalDAV, taken the calendar part out, and put contacts in instead - in this case using vCard as a format. The benefits here are that the standard will end up getting pushed through more quickly because the base layers were already taken care of. And it also makes it easy to write products that use both CalDAV and CardDAV because the protocols are so similar.

And people and events go together very well, so there are a lot of opportunities there. So servers are only half the story, need clients so I'm happy to say that Snow Leopard Address Book has full support for CardDAV. One thing you'll notice looking at this is that it looks just the way Address Book has always looked, which means that when somebody starts using CardDAV rather than local contacts, there's nothing new for them to learn.

It operates exactly the same way as Address Book has always operated. Another... since the contacts are stored on the server, you're probably wondering well what happens if I can't get to the server? Well Address Book has full offline support for contacts, so if somebody can't get to their server or they're traveling, they still have all of their contacts listed, cached locally. They're able to edit, delete, add new contacts, treat them just the way they normally would. When they get back on the network and connect to the server, just automatically syncs up to the server and the server's got the final versions with no user interaction.

Additionally, because this is embedded inside of Address Book, Address Book also has API's. So applications like mail app, iCal, and a lot of applications that developers developed, take advantage of these APIs. And if you take advantage of those APIs you automatically get access to these CardDAV contacts You don't have to do anything else. Another feature we've added into Address Book Server is support for a global Address Book.

So what that means is that CardDAV allows people to manage their personal contacts, once they configure the CardDAV account they also get the ability to search over your corporate, or your organizational LDAP or open directory contact store. So gives them access to all of the people in your organization at the same time.

So Address Book Server, brand new service in Mac OS X server, we're very excited about it. We're excited that there's a standard that we could build this on top of, and hopefully people will find it very useful. So that's all I've got for our communications section, so mail got a brand new engine, great engine. Lots of new enhancements in iChat server, iCal servers and performance enhancements, great web clients, minimal operability enhancements, and our new service Address Book Server.

So from here, I want to move onto collaboration. So in Leopard we shipped a suite of web collaboration tools, included things like wiki, group blogs, group mailing lists, calendars, it contained a really great WYSIWYG editing engine, and it made it very, very easier for people to collaborate with documents on the web. And before I get into... I want to talk a little bit about what happened at Apple.

So we obviously use our own software, and so as soon as we had a product ready, the Leopard product ready, we deployed a server for our own use inside the server engineering organization, and it became the prime location for all of our documents, our specifications, our prototype documents, our user interaction documents, and we used it very heavily. Other people at Apple, other groups, started to hear about this crazy wiki thing that we were using, and asked if they could get their projects put up under our server.

And so of course we said yes, the more people the merrier, and I just checked the other day and we have almost 500 projects living on this server at Apple now. So anyway, the point is that 500 different groups are using this product at Apple. It's become a critical part of the way they get their work done, the way they document things, the way they track things, and so we were really excited to see that happen. I anticipate that when we actually advertise to people, it will be 5,000 wiki's within a year.

So anyway, moving on, new features. So in Leopard server we made it pretty easy to create wikis. In Snow Leopard server we're making it incredibly easy. We've got a new web based assistant for setting up a wiki, and it takes basically 3 clicks. Give your wiki a name, choose a theme, decide who you want to have access to it, you're done.

It literally takes 30 seconds. Next, a feature called My Page, and My Page does a few different things. One of the most important things is it provides what we call an updates page, which gives you a way to manage the vast amount of information that you have. In an organization like Apple where we have 500 wikis, it's very difficult to find information and to monitor information.

And so the updates page gives you a way to decide which people you'd like to follow, and once you've done that, you basically get an event stream that shows you all of the things that have happened across all of the projects you care about - new pages that have been added, pages that have been edited, comments on pages, and things such as that.

In addition to that, that's still a lot of data and so we came up with some ways to make it really easy to triage data, there are ways to mark pages as favorites, you can come back to them later, quick ways to scroll through and mark things as read, the ability to create smart filters so that you can track in more minute detail things you really care about. It's become actually pretty useful to us as we built Snow Leopard, because we were living on this before we actually shipped as part of testing Snow Leopard.

So a couple of other features in My Page - it provides some jumping off points to things like your web calendar, your personal web calendar, your personal web mail, and a long standing feature is that it also allows users to change their open directory passwords through the web.

[ Applause ]

My Page, and again 500 wikis, it's a lot of data. With Leopard we didn't have a way to search cross multiple wikis and that makes it very difficult to find the information you're after. With Snow Leopard, it's super simple, one query goes across all the wikis you have access to, and it makes it incredible easy to find that needle in that haystack of data that you've got in your organization. Next is Quick Look, which I think is my favorite feature.

Leopard server made it incredibly easy for people to upload documents of any type into a wiki page, and that was great. The problem was that if somebody wanted to view that page, that document, they then had to download it to their desktop system and then view it in the desktop. That could be a problem because you may not have the application required to view that document.

You may even be on a platform that doesn't even support that application, so what we did is we took a look at... took advantage of the same Quick Look technology that's in Mac OS X Desktop, and moved it over to the server. So what happens now is that if somebody uploads a document of any type to the wiki, the next person who wants to come and look at that document simply clicks on the Quick Look icon, and they get a beautifully rendered version of that document directly in the web browser.

And you're going to see a demo of this, it's actually pretty amazing. And a little more on the development side. So after we shipped the Leopard server version of our collaboration suite, the first thing that happened is a lot of system administrators, developers came, started writing into the forums and asking are there ways that we can customize this? And we're like sure, you can like customize the look and feel, and they were happy with that.

But the next question was, how can we make it do things that are relevant to what we do... in our organization, are unique to what we do in our organization? So happy to say that we've added some new customization hooks to allow you to do... actually add new functionality into the wiki.

So an example might be that you could add a new button to the toolbar, which would allow users when they're editing pages, to click the button and add a widget that you guys have developed, that's very specific to what you do, and have that embedded directly into the wiki page. Or another example is you could write a plug in that scanned the content of wiki pages as they were saved, maybe noticed certain text phrases, and did something special with that, and you'll see an example of that in a minute.

So lastly on the collaboration front, we've completely optimized the wiki for iPhone, put a lot of work into this and basically made the iPhone a first class citizen when it comes to browsing the content in our web collaboration suite. So it's got full My Page implementation, the ability to search across the wikis, the ability to tag wikis, to add comments onto wikis. We made sure that anything that gets rendered, renders really beautifully on the iPhone.

And so this is a great feature for people who happen to be away from their computer and really want to get back to that data from the organization. So I'm going to stop talking for a minute and let John Anderson come up on stage and show you a demo of some of these features I've just talked about. Thanks.

[ Applause ]

 Thanks Chris. So as he mentioned, I'm John Anderson. I'm the manager of the wiki Server team, and today I'm going to be showing you 3 features in the wiki server. The first is that it's really easy to create wikis via the web, and then I'm also going to show you how to search across multiple wikis simultaneously to find the information you're looking for. I'm also going to show you how to preview documents using Quick Look, without having to download them. And I'm also going to be going over an example of what you can do with some of our new theme developer features.

But first... turn on my demo here... First I'm going to start at the server homepage. So we redesigned the server homepage for Snow Leopard, and we think it serves as a great jumping off point to all the services you have enabled on your server. But for right now, I'm going to go ahead and click on the wiki link.

So here we can see I've set up a wiki server for Moeller University, and there's two schools that have wikis on here - the School of Biology, and the School of Computer Science. I'm going to go ahead and add a new wiki for the School of Medicine. You can see how easy this is. So I click on "create a new wiki," and I'll make this the School of Medicine.

And here you can see the next step is it's choosing a theme for your wiki. We had a lot of great themes in Leopard, and we've added even more for Snow Leopard. I'm going to be boring and just pick the Apple theme, and click "next." And here, now this is really cool, you can actually go in and if it's a private wiki, instead of assigning a single group to it, you can assign any combination of users and groups to this with any different reading and writing privileges.

And I'm not going to be showing it to you today, but you can actually set up multiple admins as well, which is really nice. For the sake of this...

[ Applause ]

... for the sake of this demo I'm going to make the wiki public, and just require users to log in to read it. And when I click "create" that's it, I've got a wiki. So really, really simple.

I can click the "go to wiki" link and there's my new wiki. So the thing that you'll probably find is that when it's this easy to create wikis, you're going to start having a lot of wikis propagate in your wiki server, and everybody's going to want one. And so we created a cross wiki search mechanism now that makes it really easy to find content across all the wikis on your server. And I'm going to demonstrate this here by searching inside this wiki for the word "class". It's a school, so I should be able to find that. But since I'm only searching in this wiki, and it's a brand new one I just created, I'm not seeing any results.

However if I click the "search all wikis and blog links", you can see search results across multiple wikis. And in this search page I can actually specify sort order, I can filter by type, I can filter by tag. Anybody who's familiar with Leopard we could do all this stuff here, but one thing that we added here is the concept of smart filters, and I'll show you how that works.

I can click "save as a smart filter" and I'll just call this classes. Click "save" and now I have a link that I can click on at any point to replay this search, and any parameters I've entered into it, with one click. So really, really cool. The other thing that I can do is I can star pages. This means that I can search for starred pages later.

When you do search results you can see which pages are starred, so it's a easy way to remember which pages you're interested in. So that's cross script search, but what if you want to just keep track of updates to the wiki server? That's why we created the updates page, and if I click the "updates" link... so here you can see all of the changes that have happened on this server since I last read it, since I last looked at it. And this provides you an easy way to triage through your documents.

So I can go through page by page, I think I have about three pages here, and click "mark these as read" and you can see that the pages disappear, and this page is actually live updating. So I don't actually have to refresh the page for changes to show up, and I have somebody offstage that just made a few changes, and you can see that they disappeared onscreen.

So that's pretty cool.

[ Applause ]

So that's cross wiki searching, and the updates page, but the next thing I want to show you... we worked really hard on this and it's really impressive, is Quick Look. And so to demonstrate that I'm going to click on this recently changed science project page, and you can see one of our great new Snow Leopard themes. But this page actually has a numbers document attached to it.

Now this demo machine probably doesn't have numbers on it, and so I think that... or it may be a thing where it's a huge document, a gigantic keynote presentation for example, and you don't want to have to download it to look at it. And that's where Quick Look comes in. And so if I click on this icon here, I can see Quick Look right here in my browser window, and I can look at the document.

[ Applause ]

If I want to see it in more detail, I can even click on it and zoom in and pan around. So yeah, we worked really hard on this and I think it's a really impressive feature. I think you're really going to like it, and that's Quick Look.

[ Applause ]

So lastly I want to talk a little bit about themes. Now in Leopard, developers could use themes to customize the look and feel of their site, and they could add JavaScript to add their own functionality. One of the things we did for Snow Leopard was add developer hooks that you can use to watch for content changes on pages.

This means that in your themes you can more easily develop widgets that insert into your page, you can pull data from your own web services, or you can even write data detectors like the one we're going to use as an example here, that will search through content and automatically enrich it. So what I'm going to do to demonstrate this, we've actually built a custom theme which adds course info popups to content whenever it's pasted in.

So I'm going to start with some text... nobody wants to sit here and watch me type. So I'll just copy out of Text Edit, and I'm going to do a cross wiki search for the undergraduate courses page. And here you can see I'd already started the page, and I can see it in the Quick Search. So this particular school has my custom theme already selected, so I'm going to click on the "edit" button.

Now if anybody who's not familiar with the wiki, we have a really world class editing environment, it's all WYSIWYG and it's very non intimidating to users. I'm going to go ahead and paste in my text, so there it is. Now before I hit "save" I'm going to explain a little bit about what this example theme does. It registers for notifications when the content is changing, and when that happens it's going to look for match strings for course numbers.

It's getting those out of a database in a web service. So if I click save... you can see it's automatically linked up, these two course numbers it found in the content, and if I click on it you can see information about the course. We made this in a couple of days' time for the sake of the demo, and I'm really looking forward to seeing what you guys can do with these new theme hooks.

And so...

[ Applause ]

So that in a nutshell is the wiki server. You've seen how you can create wikis in just a few clicks, you could search across all the wikis at one time, you can Quick Look documents rather than having to download them and open them in an application, and our theme tools are actually much more powerful than ever before. So and with that, I'm going to bring Chris back up on stage.

Thanks.

[ Applause ]

 Thanks John. So there are web collaboration tools, we've got some great new features that I think anybody who deploys this will find that their users are going to love, because it's really easy to use, really powerful, and it's really, really advancing the state of user authored content. So one last thing before I move into another service, is standards and APIs.

So I just want to make the point that we have hundreds of standards that are supported in Mac OS X server, everything from the mail server to even the wiki, which supports XML, RPCs, and things like that. So I just want to encourage everybody that when it comes time to write applications, to think about using standards whenever possible. A lot of them are old, a couple of them are new. CalDAV and CardDAV, I think that's a really important space to be paying attention to.

It's not all about scheduling meetings or about managing personal contacts, but when you take contacts and events and put them together, there are a lot of unique things you can do, and if you use standards it's going to work with our stuff, and that's an important thing for us. OK, so moving on to one last new service on the Mac OS X server, which we've called Mobile Access Server. So Mobile Access Server, as its name implies, provides a way to let you give mobile access to data or services on your intranet.

So we all know that VPN does that, but this is a little bit different. We are not... it's not intended to provide access to your network necessarily; it's intended to provide access to specific types of content. So in our case, your calendar server, your mail server, your contact server, or a specific website.

Now like VPN it's very secure, it's got strong encryption, it's got support for throttling back failed authentications, it's got full access control and support, control lists support, and it's very, very secure. But unlike VPN, it doesn't require any special software on the client, and that's the unique thing about this. It really makes it easy to give access to certain things on your intranet.

And because it doesn't' require any special client software, it also means it works on any platform whether that's a mobile device, Mac OS X server, or any other platform for that matter. So X Mobile Access Server, we think it's going to be great for small businesses that don't really want to have to deal with VPN and getting clients configured properly to work with VPN. So that's what I've got for communications and collaboration, and I'm going to ask Kazu to come back onstage and he's got some very exciting things to talk to you about related to the podcasting world.

[ Applause ]

 OK, Podcast Producer. So how many of you know what Podcast Producer is? Good. How many of you are using it or planning on deploying it soon? Good. And hopefully after this presentation there will be more. So then those of you who are not familiar with Podcast Producer, here's a quick one minute overview of what it is. It's a complete end-to-end solution that let's you easily and automatically create podcasts and also deliver them to the end users.

It's a collection of services that's tightly integrated. On the client side we have this application called Podcast Capture, which lets end user capture audio and video information by enabling the user to start and stop remote or local cameras, it could even record your local computer screen, or take an existing file that was created by other applications.

And what the Podcast Capture application does is automatically send that information to the server, or the workflow engine, which in turn does a processing like appending watermarks, transitions, adding introduction movie, encoding into different file formats, maybe one for iPhone and Apple TV and so on. And this workflow engine could be just a single machine, we all know that the single machine can do a lot of stuff, or it could be a set of servers.

And Podcast Producer has a built in clustering capability, so that it uses Xgrid to automatically distribute the computation to all the available resources. And when that podcast is created, we also have a facility to automatically publish and deliver that content to the end users. So it's a complete a end-to-end solution that lets you capture, process, and deliver. And this is what it looks like on the client side, very simple.

So what's under the hood is very powerful and sophisticated, but to the end user all it takes is just a few clicks, and you can produce a really nice looking podcast. And technology was adopted very well, received very well by our customers. It's been used in a variety of ways in the market. For example there are dailies using it to produce or automate the content processing for their publications. And there are also companies making employee training videos using Podcast Producer.

But it's been especially received well by higher education, since it's a natural fit for capturing lectures and producing podcasts. So what I'm going to do now is invite a guest speaker who can tell us their experience deploying Podcast Producer. Please welcome Dr. Elise Eisenberg from New York University College of Dentistry.

[ Applause ]

 Good afternoon. New York University College of Dentistry is the third oldest and the largest dental school in the country. We graduate more than 8 percent of all dentists in the United States, and we've a very global, significant outreach. The Office of Informatics provides multimedia and technical support to all of our faculty and our students. We do web and programming development. We're responsible for all classroom and clinical AV support, and we run the podcasting and iTunes initiatives. Beginning in 2008 we were looking at lecture recording and we wanted to address a variety of different issues.

We wanted to find a location to be able to archive all of our recordings, we wanted to have faculty have access to all of the recordings, not just the ones for their class. We wanted the ability for students who were going to outreach and to rotations outside of the school, to be able to hear all of the recordings, not miss anything when they weren't there.

We wanted to have a more interactive learning experience for our students. We were looking for the best solution at the lowest cost, and that unquestionably Podcast Producer. We deployed Podcast Producer in September of 2008. This is our network set up. We have 10 headless Mac Minis installed in our lecture rooms and seminar rooms.

They connect to a MacPro Server. We're a small IT department, we didn't have access to a data room or a data center, and we were going to be doing this ourselves, and MacPro Server was the best solution for us. The recordings are processed on the server, they're sent out to iTunes U, and the students access the recordings by using a learning manifest system many of you know as Sakai.

At NYU it's called Alex. When we first deployed this in August of 2008, we started to deploy it into... set it up, we discovered a couple of issues. One was we went to make sure the Mac Minis were secure. We had some initial camera binding issues, and we also had to figure out exactly how we were going to start and stop the recordings.

We looked at putting a keyboard next to the Mac Minis, we looked at iPod Touch and VNC connection into the Mac Minis, and we also explored Web interfaces. What we decided to do was create a student podcasting service. The students are the ones that most care about the recordings, it's in their best interests, they are there in the classroom. It made the most sense to have them start and stop the recordings, and we created a web interface to help them do it.

This is the web interface, it sits on the Mac Pro Server. It's just a website on the Mac Pro Server, and it contains all the classrooms where recordings can be done. Student in the podcast service clicks on one of the rooms, when they click on one of the rooms they get another website, but this one is on the Mac Mini in that room. They select the course that they're going to be recording for... they fill in the title of the lecture, any description that they might want, and they start the recording. And when the lecture is done, they stop the recording.

They also have the ability to cancel the recording if there's a problem. This is the workflow. For faculty it's transparent, they connect to the AV rack and begin the lecture. For the students they start the recording, when they start the recording the Mac Mini is capturing the audio from the AV rack. We also have a device from a company called Epiphan that's able to capture the video portion, or the material that's going through the LCD projector.

It can be presentations, it can be movies, but they can capture all of that. The Mac Mini captures both the audio as well as the video, sends it over to the Mac Pro Server, and it's processed and sent out to iTunes U. So again, in September 2008 we fully deployed Podcast Producer for audio, and in March 2009 we added the video component.

One of the most important things to keep in mind is that it didn't change the workflow in terms of the time it took to send something to iTunes U. The audio files are sent within 30 to 60 minutes after recordings are complete, and the video takes about an hour to two, it can vary based on the time of the lecture, but it's generally in that time frame. At this point we have 4,000 files uploaded, and more than 160,000 files that have been downloaded.

So lessons learned: our local Apple educational team helped us with a two day Podcast Producer seminar that helped tremendously in understanding how to use Podcast Producer. We did it ourselves and one of the nice things about Podcast Producer is its extensibility, and its configurability. It allowed us to set up the system just the way we needed it to be. We love Apple Remote Desktop. Many of you use it, it's a wonderful tool, it really helps us in our environment, we just use it all the time.

For us, having a great relationship between IT and AV was really important. It helps in terms of being able to make sure that anything going on in the classroom, any issues can be taken care of, and that was really important to us. In discussions I've had with other schools, it's important as well to them. The other piece was buy in from faculty and administration. Very important to make sure that there is complete buy in, that training that we did with faculty, with students really helped as well.

I'd like to show you a little snippet of one of our recordings, and when you see it there's a couple of things: 1 is the transition. The Podcast Producer takes care of the transition from the introduction to the actual recording itself. In front of all of our recordings we have a copyright notice which you'll hear. The other thing to look at is the faculty who's doing the presentation, is actually using the mouse pointer and is annotating the slide.

It's very cool.

[ Silence ]

 This area... this area, those are your taste buds. And again, look at the high concentration of cells in the lamina propria. And if you look at the bottom, here's a duct, which is attached somewhere along the line to that gland.

 Thank you.

 OK, now let's talk about what's new in Snow Leopard Server. Podcast Producer 2 has a lot of new features, but since we only have limited time today, we're going to talk about three of them. However this year we have four sessions dedicated to Podcast Producer, so if you're interested you have plenty of opportunity to learn all about it throughout the week.

Feature number 1 is the Dual Source Video. Podcast Producer 2 now can record two video sources simultaneously, which is ideal for lectures and presentations like this one. But typically the one of the sources is a camera that's recording the presenter, and another one is recording the computer screen, the presentation software content.

And what Podcast Producer 2 does is take those two sources, and create picture in picture podcast for you. And here is a screenshot, looks pretty nice. We also... ship a few different Apple design layouts with different options, so you can pick and choose the look and feel you like. Lastly it has this automatic transition feature that you're going to see the demo in a few minutes. So that's feature number 1.

Feature number 2 is Podcast Composer, which is our new visual workflow editor that lets you create your own workflows. With this you have control over pretty much every aspect of creating podcasts. And of course again, adds your own custom artwork such as company logos for watermarking, or copyright notice for introduction on videos. And all you have to do is simply drag just those two files into application's window, Podcast Composer takes care of the rest for you.

And it also uploads the file directly to the server, or have an option to do so, so the newly created workflow is available immediately to the end users. And what I want to do now is to invite Kjell Bronder to the stage. He's one of the engineers from Podcast Producer team, so he can give us a demo of those two new features.

 So I'm really excited to show you one of my favorite features of Podcast Producer 2. And what I'm going to show you is the dual source. I'm going to show you how easy we've made it to create real good looking picture in picture podcasts, and how easy it is.

So what I'm going to do here is I'm going to open a keynote presentation that I've prepped here, and I'm just going to open Podcast Capture here. And what I'm going to do is I'm going to select the dual source capture here.. and we're going to start recording.

So start the recording, and start Keynote. So welcome to this year's episode of The Essence of the Monument. Today we're going to be talking about one of the most famous cathedrals in the world, Notre Dame de Paris. It took over 200 years to build this cathedral. With its flying buttresses, Gargoyles, rose windows, it's one of the finest examples of French Gothic architecture in the world. I hope you enjoyed this podcast, and I'll see you all next time.

[ Applause ]

So I've paused the podcast using the, pausing the recording, sorry, using a hot key. So now I'm just going to quit out of Keynote, and all I have to do now is publish my recording. This is a little information I've entered here, I'm just going to choose the podcast I want to go to.

This is the Essence of the Monument... going to call this Notre Dame de Paris... give it a little description, then I copy here... and we're going to submit. So now Podcast Capture is uploading the content, both video sources, to the Podcast Producer server that's right under here, and the Podcast Producer server is now going to process the content and publish it.

So you might be wondering, how does this server know what to do with this content? Well that's where the Podcast Producer workflow comes into play. Podcast Producer workflow is really the podcasting recipe. It tells the server what to do with the content, and as Kazu mentioned, we have great new application in Snow Leopard called Podcast Composer.

So that's what I'm going to show you now. I have a copy here of the workflow that we just submitted to, and I'm going to open this with Podcast Composer. And as you can see, we've broken the workflow down into seven different stages. And I'm just going to walk you through them now.

The first is just some general information about this workflow, so you can see we specified the workflow name for example, and this is the workflow name that was provided to me, that I chose in Podcast Capture. The second stage is the import stage, this is the funnel. This is where you tell Podcast Producer what type of content this workflow is going to accept.

We have single source, which is like in Leopard where you could have a screen recording or a video recording; can do dual source, which is what we just did to do a picture in picture podcast. And finally this other cool feature called montage, which allows you to submit a full array of documents that will then render into a slideshow leveraging Quick Look technology.

Then once you've specified that, we can move to the editing stage. This is where all the branding occurs. You can set your intro video, you can set your watermark, you can choose the way you want to do your titling, you can set your transitions, and really there's a lot of things you can do here and we're really going to go into detail, on this stage in particular, on our Wednesday session in "Podcast Composer In Depth."

So I'd encourage you to come to that one. Once you define the kind of editing you want to do, you have to decide what kind of versions you want to encode your content to. So you can see in this workflow we're exporting to a iPod and iPhone version, and Apple TV version, and an audio only version. But I might want to go to some other versions, and you can see here that Podcast Composer has automatically detected that I've Compressor installed on this machine, and I can now leverage the compressor encoding settings straight in my Podcast Producer workflow.

[ Pop ]

We'll get to the iChat. So once you've created all your different versions, you can see that you need to publish it. So we also have this awesome new feature called Podcast Library, which makes it really easy to publish all your content, and it's also a central repository for all of your content and archives. You can also see that we have all the other publishing destinations that I'm sure you all have come to know and love, like the Apple wiki, and we even have this new feature that allows you to submit to another workflow, and thus chain workflows together.

And, as you just heard with a nice little sound, we have the notification step. And here this workflow sends out an iChat to notify the submitting user when their content has been successfully processed. We can also send out emails, but we can also notify particular services. For example, we can notify the iTunes store Podcast Directory that there's new content in our feed, and that it needs to update its directory.

Finally the last stage here is just a general summary, and gives you a quick overview what your Podcast Producer workflow is going to do. So you can see here we're doing a dual source import, we're encoding to three different formats, we're publishing the contents to library, and we're sending out an iChat notification.

Podcast Composer then let's me either save it locally, so I can come back and work on my work for later, or deploy it straight to the server, straight from the application. So let's hide Podcast Composer for the moment, and go take a look at this iChat notification. So you can see here in my iChat notification I have some links already... to the content. So I'm just going to follow this link here to iTunes, and refresh my podcast here.

You can see it's downloaded my content, and I'm going to play this back.

[ Music ]

While this is playing back, I'm just going to show you everything that we've been doing. So that's the intro video. We've got some dynamic titling that's rendered using Quartz Composer, using the information that I entered.

And here you can see we have the slides, and automatically the talking head is going to appear. So what's happening here? Well we're doing image analysis, and we're detecting when the slides been static for a certain amount of time, and once the client's had enough time to read the slides, we can then push them back and bring in the talking head. What's going to happen in a few seconds, right here? And then once this slide changes again, we can then bring them into the main screen so you can concentrate on the slides.

[ Applause ]

So that's Podcast Composer, and also how easy it is to make really great looking picture in picture podcasts with Podcast Producer 2. Thank you.

[ Applause ]

 Thanks, Kjell. He's our demo god. Alright, feature number 3 is Podcast Library that Kjell just mentioned, and it's our repository and delivery engine. And using Podcast Library you can actually host your own iTunes new content at your own site, and we work real closely with iTunes engineers so that setting it up and managing iTunes U is really easy. So people like that.

The Podcast Producer also archives everything in the Library by default, so the raw media file that was captured by end user and sent to the server, as well as the resulting podcast, all different flavors of it, all of it automatically gets archived for long-term storage and organization. And of course it has a built in ATOM RSS feed engine as well for the publishing and delivery of the content.

So those are 3 features in Podcast Producer 2, but we have a lot of other new features including web based capture GUI, fail over support, and montage that Kjell just mentioned. So if you're interested, we have a session dedicated to talking about every single one of these in detail tomorrow, called "What's New for Podcast Producer 2?"

So hopefully you're going to be able to attend that. Next, let's take a quick look at architecture of Podcast Producer. As you can see here, it's very open and modular, which means any developer can expand or customize or integrate Podcast Producer with their own software or networking infrastructure, much like how New York University did with their own web GUI. It's very flexible. And the last thing I want to talk about is technologies on the Podcast Producer.

As you saw in the last 10 to 15 minutes, it's a very visually appealing and attractive product, and we achieved that by taking advantage of rich media features that built into Snow Leopard, and I want to highlight a few of them. The first one is QuickTime. We use QuickTime 10's new capture API for recording from camera, or capturing computer screen. And on the processing side, we also use QuickTime for encoding into different formats.

Next Quartz Composer. So with the fancy transitions that you saw, or the flying text in the title, watermarking, was all done by Quartz Composer. And the third are the client side applications - the Composer and Capture - use Core Animation to enhance this experience, so the sliding window content that you saw was all done using Core Animation. And there are many other technologies that we depend on, some of them are media related, such as Xgrid for scalability, and iChat Messaging Framework for notification.

And the key point here is that Snow Leopard is feature rich OS release, and all this technology's available not just to Apple engineers like us, but to any developers such as yourselves. So if you're interested, we have a session on Friday to talk about how Podcast Producer takes advantage of all different features built into Mac OS X. Hope you're going to be able to make that. And that's all I have today, so now I'd like to give the stage back to Greg for wrap up.

Thank you.

 Alright, thank you Kazu. So that's Snow Leopard server. We have a fully 64-bit server with up to 2 times the performance of its predecessor. We have some great new features in the communication suite in the Apple Wiki server, and as you saw, great new features in Podcast Producer. Snow Leopard server is going to be available, along with the desktop in September. And it's available at a great new price of $499 for an unlimited client license.

[ Applause ]

No client access fees. And so that's it. We have sessions throughout the week. As Kazu mentioned there's a great session going in depth on what's new in Podcast Producer tomorrow. We also have 2 full sessions on calendaring and contacts for Mac, iPhone, and Mac OS X server; and labs in the information technologies lab throughout the week. So I hope to see you there! Thank you very much.
