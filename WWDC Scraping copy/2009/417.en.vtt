WEBVTT

00:00:13.050 --> 00:00:14.320
>> Good morning, everyone.

00:00:14.320 --> 00:00:15.200
How are you today?

00:00:15.199 --> 00:00:20.929
Welcome to session 417, Managing
the iPhone Development Process.

00:00:20.929 --> 00:00:24.800
My name is Nitin Mishra and I work
in the iPhone Developer Programs.

00:00:24.800 --> 00:00:30.039
And today, we're going to take a step back from the code
and we're going to talk about the various processes, tools,

00:00:30.039 --> 00:00:35.769
and Web Portals that you're going to be interacting
with during our iPhone development process.

00:00:35.770 --> 00:00:41.650
For those of you who are new to iPhone Development, we're
going to walk you through the steps from taking your idea,

00:00:41.649 --> 00:00:47.399
getting it installed in the Simulator, and installing it
on a device, and the very steps incorporated with that.

00:00:47.399 --> 00:00:51.899
And then, building it for distribution to the App Store.

00:00:51.899 --> 00:00:58.560
For some of you who may already have some experience with
that process, we're going to talk to you a little bit more

00:00:58.560 --> 00:01:03.620
about the different tools and processes
that are available to you

00:01:03.619 --> 00:01:08.030
to help refine your applications
and make more powerful updates.

00:01:08.030 --> 00:01:12.120
And so, we'll be covering different
processes that you can do.

00:01:12.120 --> 00:01:17.219
And lastly, for those of you who are savvy with the
iPhone Development Process, we're going to talk to you

00:01:17.219 --> 00:01:24.609
about four new feature in iPhone OS 3.0 and the
different processes you're going to have to engage

00:01:24.609 --> 00:01:30.120
in with the iPhone Developer Program Portal in
order to get these features working on your device.

00:01:30.120 --> 00:01:34.939
So, a roadmap for today will be
covering the following six steps.

00:01:34.939 --> 00:01:39.009
The first, setting up your Development
Team, then we'll go into building

00:01:39.010 --> 00:01:42.430
and installing your development
applications and best practices for it.

00:01:42.430 --> 00:01:47.680
After that, we'll talk a little bit
more about iPhone OS 3.0 features.

00:01:47.680 --> 00:01:52.720
And then, we'll step into refining you
application and delivering powerful updates.

00:01:52.719 --> 00:01:58.250
And then lastly, we'll cover preparing your application
for distribution in the App Store and then finally,

00:01:58.250 --> 00:02:01.140
submitting your application to the App Store.

00:02:01.140 --> 00:02:11.610
So, the iPhone Developer universe or solar system, as I
pointed out, is a, it all revolves around free iPhone SDK.

00:02:11.610 --> 00:02:17.880
And with that, you're able to develop your applications in
the Simulator, really testing it, get a feel for the code

00:02:17.879 --> 00:02:24.479
and then when you're ready to take the next step, you'll
be interacting with the iPhone Developer Program Portal

00:02:24.479 --> 00:02:30.919
and then iTunes Connect, which is what
your interface is to the App Store.

00:02:30.919 --> 00:02:36.030
After you've gotten your application running on the
Simulator and you're ready to take that next step

00:02:36.030 --> 00:02:42.479
in your development process and start debugging
and testing your applications on a device,

00:02:42.479 --> 00:02:45.659
you're going to need to be in the iPhone Developer Program.

00:02:45.659 --> 00:02:51.469
And, by enrolling in that program, you'll get
access to the iPhone Developer Program Portal.

00:02:51.469 --> 00:02:56.109
This is what you'll use to obtain the
various assets, certificates, provisions,

00:02:56.110 --> 00:02:59.470
that you'll need to get your application
running on the device

00:02:59.469 --> 00:03:02.960
and then get your application uploaded to the App Store.

00:03:02.960 --> 00:03:08.200
So, a lot of you might be asking why
do I need to enroll in a program?

00:03:08.199 --> 00:03:14.819
If I can get the SDK for free, why should I have to
enroll in a program to get it running on my own device?

00:03:14.819 --> 00:03:18.500
And the simple answer to this is really about trust.

00:03:18.500 --> 00:03:27.509
All applications that run on the iPhone are signed by
Apple and therefore, the device inherently trusts them.

00:03:27.509 --> 00:03:33.590
In order to get your applications installed
on a device, you're going to need a gateway

00:03:33.590 --> 00:03:38.539
into getting your application inherently
signed by Apple as well.

00:03:38.539 --> 00:03:45.340
And, once you've done this, this verifies your identity
to the world, that Apple trusts you as a developer.

00:03:45.340 --> 00:03:50.039
For example, you wouldn't want another
company distributing their applications

00:03:50.039 --> 00:03:53.599
and installing them in devices under your name.

00:03:53.599 --> 00:03:59.979
So, going through this process ensures that our shared
customers all know that this application is coming from you,

00:03:59.979 --> 00:04:04.989
it's been trusted by Apple and that
the device happily accepts running it.

00:04:04.990 --> 00:04:11.930
To get your application running on a
device, you only need two things from Apple.

00:04:11.930 --> 00:04:18.490
The first is a Signing Certificate, which is ultimately
approved by Apple and chained to the Apple Root

00:04:18.490 --> 00:04:21.730
and you use this to sign your application.

00:04:21.730 --> 00:04:25.740
The second piece you'll need then,
is a Provisioning Profile.

00:04:25.740 --> 00:04:32.199
A Provisioning Profile is essentially a key, which unlocks
your device and allows your application to run on it.

00:04:32.199 --> 00:04:37.089
The profile itself is also signed by
Apple so these two pieces, in connection,

00:04:37.089 --> 00:04:39.810
allow you to build and install your applications.

00:04:39.810 --> 00:04:46.230
Now, let's cover the iPhone Developer Program Portal.

00:04:46.230 --> 00:04:54.569
In it, there's 5 steps which you're going to be engaging
in, which is setting up your iPhone Development Team,

00:04:54.569 --> 00:05:02.519
obtaining these code Signing Certificates, setting up an
App ID or an identifier for your application, and then,

00:05:02.519 --> 00:05:07.279
assigning your devices, which you've
targeted for development.

00:05:07.279 --> 00:05:12.989
And lastly, the Provisioning Profile, which you will
use to ultimately build and install your application.

00:05:12.990 --> 00:05:15.110
So let's start with Teams.

00:05:15.110 --> 00:05:22.060
For those of you enrolled in the iPhone Developer Program,
as either a company or as, a company in the Standard

00:05:22.060 --> 00:05:28.740
or Enterprise Program, you can assign 3
different levels of team responsibility.

00:05:28.740 --> 00:05:31.210
The first level is the Team Member.

00:05:31.209 --> 00:05:35.579
A Team Member only has 2 functions in the Program Portal.

00:05:35.579 --> 00:05:42.199
They can download a Code Signing Certificate
and download a Provisioning Profile.

00:05:42.199 --> 00:05:49.009
Now, a Team Member is usually someone, you primary developer
in your company and you want them focused on the coding,

00:05:49.009 --> 00:05:51.659
getting the device up, and running,
or getting the application up

00:05:51.660 --> 00:05:53.820
and running, and really making sure it's great.

00:05:53.819 --> 00:05:56.889
So they only really need this level of responsibility.

00:05:56.889 --> 00:06:00.740
They don't want to interact with the
portal too much, they don't really need to.

00:06:00.740 --> 00:06:05.829
The second level of responsibility is the Team Admin.

00:06:05.829 --> 00:06:13.269
A Team Admin has the responsibilities of the Team Member,
but in addition, they can approve certificate requests

00:06:13.269 --> 00:06:18.839
from anybody on the team as well as
create and approve Provisioning Profiles.

00:06:18.839 --> 00:06:24.669
So a Team Admin would essentially be a Team Lead,
who's kind of managing a group and they can kind

00:06:24.670 --> 00:06:27.930
of handle the management of the
certificates and the provisions.

00:06:27.930 --> 00:06:32.370
And the last level of responsibility is the Team Agent.

00:06:32.370 --> 00:06:36.689
The Team Agent is person who originally
enrolled in the program.

00:06:36.689 --> 00:06:42.879
They're the primary contact for your team and they're
the ones who were accepted and verified by Apple

00:06:42.879 --> 00:06:45.279
and who are the ultimate trusted authority.

00:06:45.279 --> 00:06:51.789
In addition to the above responsibilities of the Team Admin
and the Team Member, the Team Agent is the lone person

00:06:51.790 --> 00:06:57.750
on the Team who can create and download the Distribution
Certificate, which is used to build your application

00:06:57.750 --> 00:07:02.379
when you're ready to upload it to the App
Store, the Distribution Provisioning Profile,

00:07:02.379 --> 00:07:07.670
as well as Push Notification Certificates
for those of you who are ready

00:07:07.670 --> 00:07:10.640
to start using the Apple Push Notification Service.

00:07:10.639 --> 00:07:18.479
And lastly, the Team Agent is the person who's ultimately
responsible for signing all the legal contracts,

00:07:18.480 --> 00:07:25.310
whether it be in iTunes or the different program
license agreements for the iPhone Developer Program.

00:07:25.310 --> 00:07:30.430
So, from that, let's move on to Certificates.

00:07:30.430 --> 00:07:36.389
There are 4 different types of certificates which
you can obtain in the iPhone Developer Program Portal

00:07:36.389 --> 00:07:40.159
and all of them are rooted to the Apple Root Certificate.

00:07:40.160 --> 00:07:44.260
There are very few Root Certificates in the
world for those of you who are familiar with it

00:07:44.259 --> 00:07:50.079
and the Apple Root Certificate is ultimately,
what is trusted by the iPhone iPod Touch,

00:07:50.079 --> 00:07:54.810
Mac OS X and as was, the iPhone Developer Program Portal.

00:07:54.810 --> 00:08:01.269
Hanging off that Apple Root Certificate is the World
Wide Developer Relations Intermediate Certificate.

00:08:01.269 --> 00:08:08.680
This is issued by the Apple Root and this is actually,
what issues all your iPhone Development Certificates,

00:08:08.680 --> 00:08:12.889
which include your iPhone Development
Code Signing Certificate,

00:08:12.889 --> 00:08:19.740
which is what you use to sign Development Applications
when you're in the testing, designing, debugging phase.

00:08:19.740 --> 00:08:27.120
It issues the iPhone Distribution Code Signing Certificate,
which is very similar to the Development Certificate

00:08:27.120 --> 00:08:32.009
in functionality, but it's the only
certificate that is accepted by the App Store

00:08:32.009 --> 00:08:34.759
when you're ready to upload your application.

00:08:34.759 --> 00:08:38.939
The last two certificates are for
the Push Notification Service.

00:08:38.940 --> 00:08:47.180
The World Wide Developer Relations Intermediate Certificate
Authority issues your Development Client SSL Certificate,

00:08:47.179 --> 00:08:53.489
which is used to connect your Notification Server
to the Apple Push Notification Sandbox Service.

00:08:53.490 --> 00:08:56.360
This is when you're just playing
around with Push Notifications,

00:08:56.360 --> 00:09:00.019
trying to get it to run on your development devices.

00:09:00.019 --> 00:09:04.449
And lastly, the Push Notification
Production SSL Certificate.

00:09:04.450 --> 00:09:09.540
This is what you're going to install on your Production
Notification Servers and what is ultimately going

00:09:09.539 --> 00:09:15.629
to send all the notifications to the millions
of devices that are available on the App Store,

00:09:15.629 --> 00:09:18.919
applications on the App Store, pardon me.

00:09:18.919 --> 00:09:23.259
To request all of these certificates,
there's only, it's the same process.

00:09:23.259 --> 00:09:28.919
You're going to utilize the Certificate
Assistant, which comes with every Mac OS X system.

00:09:28.919 --> 00:09:34.469
So let's take a little closer look at how
you go through requesting these certificates.

00:09:34.470 --> 00:09:38.800
The first thing you're going to do is
launch the Keychain Access application,

00:09:38.799 --> 00:09:42.000
which is found in your Utilities folder in Applications.

00:09:42.000 --> 00:09:47.460
On the new Mac, you'll see it's blank here
and that there's no certificates requested.

00:09:47.460 --> 00:09:53.639
But, what you're going to do is in the New File Menu, you're
going to request a certificate from a certificate authority,

00:09:53.639 --> 00:09:59.539
that being the World Wide Developer Relations Intermediate
Certificate, the Certificate Authority we just discussed.

00:09:59.539 --> 00:10:06.649
From there, you'll be prompted to enter the name
of your Private Key as well as specify how you want

00:10:06.649 --> 00:10:10.459
to send the certificate sign in request to Apple.

00:10:10.460 --> 00:10:18.009
In this case, we're just going to save it to the disk and
manually upload it via iPhone Developer Program Portal.

00:10:18.009 --> 00:10:24.840
You'll save the file to your desktop and then navigate to
Safari, where you'll go to the Developer Program Portal.

00:10:24.840 --> 00:10:26.889
This is available in the iPhone Dev Center.

00:10:26.889 --> 00:10:33.949
It'll be a link on the right and for those of you enrolled
in the program, you'll see a link to the program portal.

00:10:33.950 --> 00:10:39.009
In the Certificate section of the portal
is where you'll actually navigate to it

00:10:39.009 --> 00:10:42.720
and click the Request Certificate button.

00:10:42.720 --> 00:10:45.970
You'll go through the process of these
instructions, which you just went through,

00:10:45.970 --> 00:10:52.100
and you'll upload the Certificate Signing
Request file you just created to the portal.

00:10:52.100 --> 00:10:57.889
Once clicking Submit, it will be routed to the
appropriate person to approve the Certificate Request.

00:10:57.889 --> 00:11:05.090
In this particular case, the user is also an Admin on
the Team, so can approve the Certificate Signing Request.

00:11:05.090 --> 00:11:10.889
If you're a Team Member uploading your Certificate
Request, you'll need to wait for an Admin or the Team Agent

00:11:10.889 --> 00:11:15.289
to approve the certificate for you
before it's available for download.

00:11:15.289 --> 00:11:23.039
After approving the certificate, it's available within
seconds to whoever, to all the users on the Team.

00:11:23.039 --> 00:11:26.529
Now, what happens after downloading the certificate?

00:11:26.529 --> 00:11:33.500
You'll get it from the portal as a .CER file and the
next step you'll take is to double-click on the file,

00:11:33.500 --> 00:11:40.570
and it will open again, the Keychain Access
application, which we were just talking about.

00:11:40.570 --> 00:11:46.580
Now, to reiterate what we were talking about before, about
the chain of trust and how the application has to root back

00:11:46.580 --> 00:11:51.580
to the Apple Certificate, you'll see
that in your System Root Keychain,

00:11:51.580 --> 00:11:55.129
you'll see the Apple Root CA, or Apple Root Certificate.

00:11:55.129 --> 00:11:59.159
It comes with every Mac system.

00:11:59.159 --> 00:12:05.129
In your System Keychain now, you'll find the World
Wide Developer Relations Intermediate Certificate.

00:12:05.129 --> 00:12:09.179
This is installed automatically
whenever you install the iPhone SDK.

00:12:09.179 --> 00:12:15.199
And lastly, once you've double-clicked
it, your iPhone Developer Certificate,

00:12:15.200 --> 00:12:18.410
you'll see this in your Keychain and your login Keychain.

00:12:18.409 --> 00:12:22.799
Now, you'll notice the difference here
is that in this particular Keychain,

00:12:22.799 --> 00:12:26.919
I have both the public and private key for my certificate.

00:12:26.919 --> 00:12:33.679
Both of these are necessary in order
to sign your code and your application.

00:12:33.679 --> 00:12:40.129
The Apple Private Key as well as the World Wide Developer
Relations Intermediate Private Key will not be available

00:12:40.129 --> 00:12:40.899
to you.

00:12:40.899 --> 00:12:47.850
But, the private key needs to be installed
in order for you to sign your application.

00:12:47.850 --> 00:12:52.050
If you're on a different Mac than the one
in which you've requested your certificate,

00:12:52.049 --> 00:12:55.399
you will be unable to sign your application.

00:12:55.399 --> 00:13:02.470
You can actually export the keys from Mac to Mac,
but the private key is unique to you and it's used

00:13:02.470 --> 00:13:08.779
to identify your identity and you are the
person who is actually signing the application.

00:13:10.090 --> 00:13:15.110
So if you are interested in Code Signing and learning
a little bit more about the private public key

00:13:15.110 --> 00:13:19.340
and the cryptology behind it, there was
an Assigning Your Application an Identity

00:13:19.340 --> 00:13:21.889
with Code Signing session earlier this week.

00:13:21.889 --> 00:13:27.120
Obviously, you're not going to be able to attend it
now, but when these sessions are available on video,

00:13:27.120 --> 00:13:31.909
it will be a good resource for you to go learn
a little bit more about the science behind it.

00:13:31.909 --> 00:13:34.860
So, let's move on to devices.

00:13:34.860 --> 00:13:42.779
Devices are needed to, you need to input your devices into
the iPhone Developer Program Portal because it identifies

00:13:42.779 --> 00:13:50.750
to Apple that you, the developer, are using this specific
device or set of devices for development purposes.

00:13:50.750 --> 00:13:58.500
Every iPhone and iPod Touch, as it rolls off the factory
line, is assigned a unique Device Identifier, or UDID.

00:13:58.500 --> 00:14:05.000
It's a 40 character string and its unique to your
specific device and there's no other one in the world.

00:14:05.000 --> 00:14:13.970
The UDID is what actually needs to be input into the Program
Portal in order to allow your device to be associated

00:14:13.970 --> 00:14:20.290
with the Provisioning Profiles and allow you to ultimately
install your applications on these specific devices.

00:14:20.289 --> 00:14:24.889
You can find it in 3 different
places, on 3 different applications.

00:14:24.889 --> 00:14:31.629
The first thing, iTunes, as you can see, the
identifier string here is your device identifier

00:14:31.629 --> 00:14:35.639
and you can copy it straight from
iTunes right into the portal.

00:14:35.639 --> 00:14:39.399
The second place you'll find it
is the Xcode Organizer Window.

00:14:39.399 --> 00:14:45.569
Again, it's the identifier string,
and is unique across all devices

00:14:45.570 --> 00:14:48.740
and it's the same string that you would find in iTunes.

00:14:48.740 --> 00:14:54.259
And the third place is the iPhone Configuration Utility,
which is a free application available from Apple,

00:14:54.259 --> 00:14:58.870
which is an intermediate between
Xcode and iTunes and it's very helpful

00:14:58.870 --> 00:15:03.759
for iPhone Development and it's also obtained there.

00:15:03.759 --> 00:15:06.379
So, let us move onto App IDs.

00:15:06.379 --> 00:15:15.899
App IDs are a unique string, which identifies your
application or suite of applications to the world.

00:15:15.899 --> 00:15:21.360
It's similar to a UDID for a device,
but this identifies your application.

00:15:21.360 --> 00:15:29.289
It consists of 2 parts; an App ID Prefix, which
is a unique, 10 digit, random string generated

00:15:29.289 --> 00:15:33.349
by Apple, as well as a Bundle Identifier.

00:15:33.350 --> 00:15:36.389
The Bundle Identifier can be anything you wish.

00:15:36.389 --> 00:15:44.799
It's defined by you, the developer, and it's most
common to put the reverse DNS string in place of it.

00:15:44.799 --> 00:15:49.029
However, you can also put a Wildcard character in here,

00:15:49.029 --> 00:15:53.079
which allows you to use the same App
ID to build all of your applications.

00:15:53.080 --> 00:15:56.900
In this case, that Wildcard character would be an asterisk.

00:15:56.899 --> 00:16:01.389
So let's talk a little bit more about
this Wildcard versus Explicit App IDs

00:16:01.389 --> 00:16:06.009
and why you would want to use one or the other.

00:16:06.009 --> 00:16:13.189
A Wildcard App ID again, consists of the 10 digit unique
string generated by Apple, followed by an asterisk.

00:16:13.190 --> 00:16:19.470
What I'm able to do with this is use it
and build one single Provisioning Profile.

00:16:19.470 --> 00:16:23.769
From there, I can use that same
Provisioning Profile to build all 3

00:16:23.769 --> 00:16:28.750
of my applications, or 3 to infinite applications of course.

00:16:28.750 --> 00:16:32.889
This is very, very helpful when
you're just getting started out.

00:16:32.889 --> 00:16:38.559
And for those of you brand new to the iPhone Developer
Program, you'll notice that there's a Provisioning Assistant

00:16:38.559 --> 00:16:42.389
which guides you through all of these steps.

00:16:42.389 --> 00:16:45.519
And in it, it actually creates a Wildcard App ID.

00:16:45.519 --> 00:16:52.590
This way, you can use the same single item to build all your
applications, you can build all of the sample code available

00:16:52.590 --> 00:16:55.759
in the Reference Library and you
can really, just kind of play around

00:16:55.759 --> 00:16:59.250
and get a feel for how everything's working together.

00:16:59.250 --> 00:17:03.120
On the other hand, you could have Explicit App IDs.

00:17:03.120 --> 00:17:07.099
Now, your Explicit App ID is again going
to be that unique, 10-digit string,

00:17:07.099 --> 00:17:11.109
but then it's followed by the CF
Bundle Identifier of your application.

00:17:11.109 --> 00:17:18.099
In this particular case, when using Explicit App IDs, you'll
actually have to build a separate Provisioning Profile

00:17:18.099 --> 00:17:24.779
for each application that you're working on because
each Provisioning Profile will contain a single App ID.

00:17:24.779 --> 00:17:29.589
From there, you would use those 3 Provisioning
Profiles and you'd select between them

00:17:29.589 --> 00:17:34.259
in Xcode in order to build your 3 applications.

00:17:34.259 --> 00:17:40.089
Now, why would you want to use a Explicit App ID?

00:17:40.089 --> 00:17:45.149
It seems much easier just to use a
Wildcard App ID to use everything.

00:17:45.150 --> 00:17:47.519
And, there's 2 reasons for this.

00:17:47.519 --> 00:17:49.529
The first, security.

00:17:49.529 --> 00:17:56.430
For those of you who might be in-house developers,
or using Provisioning to Beta test your application

00:17:56.430 --> 00:18:05.009
with Ad Hoc Distribution, an Explicit App ID uniquely ties
this Single Provisioning Profile to a single application.

00:18:05.009 --> 00:18:10.650
If you're developing a bunch of applications that you
don't necessarily want to be getting spread around,

00:18:10.650 --> 00:18:18.060
you would use an Explicit App ID to tie, to
make a one to one correlation between your 2,

00:18:18.059 --> 00:18:19.779
between your application and your Provision.

00:18:19.779 --> 00:18:25.309
It's primarily, a security measure, but
it is very good for keep a tighter control

00:18:25.309 --> 00:18:28.309
over your applications and their distribution.

00:18:28.309 --> 00:18:36.539
The second reason you'd want to use an Explicit App ID
though, is to utilize the features in iPhone OS 3.0.

00:18:36.539 --> 00:18:40.629
We're going to talk a little bit more
about that later, but keep that in mind

00:18:40.630 --> 00:18:45.500
and that's why you really want to
identify your applications uniquely.

00:18:45.500 --> 00:18:52.869
So, the last step in this process in the iPhone Developer
Program Portal is to create this Provisioning Profile.

00:18:52.869 --> 00:18:55.739
The Provisioning Profile which
unlocks your device and allows you

00:18:55.740 --> 00:19:00.900
to install either your single or
multiple applications on your device.

00:19:00.900 --> 00:19:07.120
The Provisioning Profile itself is going to
consist of a set iPhone Development Certificates.

00:19:07.119 --> 00:19:10.669
Now, this can be a single certificate
for an individual user,

00:19:10.670 --> 00:19:14.200
as well as up to all the certificates for your Team Members.

00:19:14.200 --> 00:19:17.289
It allows you to pick and chose
who can sign the applications

00:19:17.289 --> 00:19:21.319
and who do you want to be able to install the applications.

00:19:21.319 --> 00:19:26.409
The second piece of the Provisioning Profile is
going to be the devices, which we entered earlier.

00:19:26.410 --> 00:19:33.560
The devices themselves, this will limit, if the unique
device identifier is not in the Provisioning Profile,

00:19:33.559 --> 00:19:38.000
Xcode will not allow the installation
of the application on that device.

00:19:38.000 --> 00:19:41.930
And the third piece of these Provisioning
Profiles is the App ID.

00:19:41.930 --> 00:19:47.830
Again, a Wildcard App ID for single use with
multiple applications, an Explicit App ID for a one

00:19:47.829 --> 00:19:52.029
to one correlation between your
Provision and your application.

00:19:52.029 --> 00:20:03.819
All these 3 items go into the Single Provisioning Profile,
which is then installed on both your Mac and your iPhone.

00:20:03.819 --> 00:20:05.200
So, let's move on.

00:20:05.200 --> 00:20:07.039
We've gotten the Provisioning Profile ready.

00:20:07.039 --> 00:20:08.619
We've gotten our certificates.

00:20:08.619 --> 00:20:13.459
So now, you're ready to build and go and
get your applications installed on a device.

00:20:13.460 --> 00:20:18.720
To do this, we're going to go through a demo
here, through the Portal and then into Xcode.

00:20:18.720 --> 00:20:22.490
So let me switch over to the demo machine here.

00:20:22.490 --> 00:20:26.240
So, what I'm going to do is first log
into the program portal and kind of go

00:20:26.240 --> 00:20:29.259
through these basic steps we went through just now.

00:20:29.259 --> 00:20:31.170
Show you how they work in action.

00:20:31.170 --> 00:20:38.690
So, I'll log into the iPhone Developer
Center and here we go.

00:20:38.690 --> 00:20:45.720
So as you can see I'm first logged into the
Dev Center where I can obtain the free SDK,

00:20:45.720 --> 00:20:51.289
as well as read the countless amounts of documentation,
getting started videos which walk you through the features,

00:20:51.289 --> 00:20:57.250
the APIs of frameworks as well as
access to the 3.0 Beta and GM seed.

00:20:57.250 --> 00:21:01.690
On the right hand Nav I see a link here
to the iPhone Developer Program Portal

00:21:01.690 --> 00:21:05.120
and here's the main Home screen
that you'll be interacting with.

00:21:05.119 --> 00:21:11.859
Now, as you can see, as I discussed earlier, there
is the iPhone Developer Provisioning Assistant.

00:21:11.859 --> 00:21:16.740
This'll actually walk you through, step-by-step,
all the steps that we just went through,

00:21:16.740 --> 00:21:22.150
including creating new certificate, assigning your
device, creating an App ID and creating the provision.

00:21:22.150 --> 00:21:25.950
So this is very, very handy if you're
just getting started right out of the box,

00:21:25.950 --> 00:21:29.250
trying to get some applications installed on your device.

00:21:29.250 --> 00:21:36.039
In the Team section, I'll see that I'm here logged in as
the team agent and I've got one team member, Clark Cox,

00:21:36.039 --> 00:21:40.730
he's the ultimate coder, he's awesome
and so, he's ready to get started.

00:21:40.730 --> 00:21:43.440
So, I navigate to the Certificate section.

00:21:43.440 --> 00:21:49.390
Here I see Clark as a team member has
submitted a certificate signing request to me.

00:21:49.390 --> 00:21:55.750
So, I will approve Clark's signing request and
that way it will be available to him to download

00:21:55.750 --> 00:21:58.900
so he can really get started coding here.

00:21:58.900 --> 00:22:02.470
So, as it's pending, pending issue it takes a few seconds

00:22:02.470 --> 00:22:07.410
and now his certificate is now
approved and available to him.

00:22:07.410 --> 00:22:13.390
Under devices, you'll see that I already entered
Clark's device, he found it in Xcode, e-mailed it to me

00:22:13.390 --> 00:22:17.040
and I input it in the portal already for him.

00:22:17.039 --> 00:22:21.099
I'll go to the App ID section, and
again you'll see I have three here.

00:22:21.099 --> 00:22:28.149
One development wild card which is the simple
asterisk character and then a few explicit App IDs.

00:22:28.150 --> 00:22:34.570
As you can see on the right, which we'll discuss later, you
can see that the development wild card App ID is unavailable

00:22:34.569 --> 00:22:37.019
for Push Notification and In App purchase.

00:22:37.019 --> 00:22:39.970
We'll discuss that in more detail later.

00:22:39.970 --> 00:22:45.990
So lastly, I'm going to create a provisioning profile
for Clark so he can get started on his development

00:22:45.990 --> 00:22:50.319
and start testing our great application on his device.

00:22:50.319 --> 00:22:52.210
Creating the profile is fairly simple.

00:22:52.210 --> 00:22:55.910
I just name the profile whatever
I want, name it Clark's profile.

00:22:55.910 --> 00:22:58.670
I can select his certificate.

00:22:58.670 --> 00:23:04.130
I can also select my own as team agent, however,
my code is horrible, so I'm going to leave it

00:23:04.130 --> 00:23:07.560
to Clark to do that, and I'll select an App ID.

00:23:07.559 --> 00:23:10.049
So, here I'm going to select the
development wild card App ID

00:23:10.049 --> 00:23:14.389
so that Clark can just hammer away on multiple applications.

00:23:14.390 --> 00:23:16.790
And lastly, I'll select Clark's device.

00:23:16.789 --> 00:23:21.210
So, I've got my 3 pieces, my certificate,
my App ID and my UDIDs

00:23:21.210 --> 00:23:25.640
and I see that Clark now has a
provisioning profile available to him.

00:23:25.640 --> 00:23:30.440
So from that, I'm going to turn you over to Clark,
who's actually going to show you how it's done.

00:23:30.440 --> 00:23:37.670
>>Alright, thanks a lot.

00:23:37.670 --> 00:23:39.000
>>Thank you.

00:23:39.000 --> 00:23:46.779
>>Okay to start off I've got a simple project here and
I'm ready to take it from the Simulator onto the device.

00:23:46.779 --> 00:24:00.160
As you can see here, I'll launch it, it
runs in the Simulator and isn't that cool?

00:24:01.500 --> 00:24:04.130
Alright, so I'm ready to take that to an actual device.

00:24:04.130 --> 00:24:06.660
I can do that in 4 steps.

00:24:06.660 --> 00:24:12.550
The first thing I need to do is install the
developer's certificate that Nitin created for me.

00:24:12.549 --> 00:24:18.919
I've already downloaded these ahead of time, so I'll
just double-click this and go into the Keychain.

00:24:18.920 --> 00:24:22.910
As you can see, I've got my certificate
and my private key here.

00:24:22.910 --> 00:24:25.650
The private key was already installed
on this machine ahead of time

00:24:25.650 --> 00:24:28.320
because this is what I used to request the certificate.

00:24:28.319 --> 00:24:33.619
If it weren't here, I would have to go to that
machine, export from the Keychain, and import it here.

00:24:33.619 --> 00:24:38.659
It's a essential that you have the private
key otherwise you will not be able to sign.

00:24:38.660 --> 00:24:43.230
The next thing I need to install
is the provisioning profile.

00:24:43.230 --> 00:24:49.480
Again, I'll double-click that and in this
case, it opened iPhone Configuration Utility

00:24:49.480 --> 00:24:52.849
but that's fine because the end result is the same.

00:24:52.849 --> 00:24:55.929
It installed it on my Mac.

00:24:55.930 --> 00:25:01.279
Now I'm going to go into Xcode and
bring up the Provisioning Profiles.

00:25:01.279 --> 00:25:04.829
I'm also going to attach my device.

00:25:09.900 --> 00:25:14.269
You can see that Xcode knows that
this Provisioning Profile can be used

00:25:14.269 --> 00:25:17.500
with this particular device because
it contains a unique identifier.

00:25:17.500 --> 00:25:24.769
To install the profile on my device, all I
need to do is drag from here to my device.

00:25:24.769 --> 00:25:26.960
As you can see now, it's installed.

00:25:26.960 --> 00:25:31.210
Had my device been plugged in when I
initially added the provisioning profile,

00:25:31.210 --> 00:25:33.120
Xcode would have done this automatically.

00:25:33.119 --> 00:25:39.379
But I did it manually just to show you what you
need to do if you actually have to do this later.

00:25:40.539 --> 00:25:48.009
As you can see the app identifier's a wild card, so
I can use any bundle identifier that starts with com.

00:25:48.009 --> 00:25:52.349
Now I'm ready to actually build my application.

00:25:52.349 --> 00:25:55.709
First thing I need to do is verify a few settings.

00:25:57.069 --> 00:26:03.379
I'm going to open my target build settings
and find the code signing identity.

00:26:03.380 --> 00:26:07.340
I don't need to change this because Xcode knows

00:26:07.339 --> 00:26:11.859
and can match the beginning part of
the string with my certificate name.

00:26:11.859 --> 00:26:18.309
So since my certificate name starts with iPhone developer,
it automatically knows to go ahead and match it with that.

00:26:18.309 --> 00:26:25.679
This allows me to keep the same setting in the build
settings without causing source code control conflicts

00:26:25.680 --> 00:26:29.250
with different developers changing
it and then checking it in.

00:26:29.250 --> 00:26:31.579
So that setting I've verified.

00:26:31.579 --> 00:26:36.740
Now the next thing I need to verify is my App ID.

00:26:36.740 --> 00:26:40.210
So, again, I'll go into the target
info and go to Properties.

00:26:40.210 --> 00:26:43.019
Now because I had that wild card app identifier,

00:26:43.019 --> 00:26:46.700
I don't really have to change anything
here, because it starts with com.

00:26:46.700 --> 00:26:48.000
anything after that is gravy.

00:26:48.000 --> 00:26:50.109
I can put whatever I want there.

00:26:50.109 --> 00:26:58.189
So now, I make sure I'm building for
the device SDK, and I'm ready to go.

00:26:58.190 --> 00:27:06.650
Xcode builds my project, installs it on my
phone, it will wake up here in just a second...

00:27:13.150 --> 00:27:21.370
and there's my really cool application,
running on the phone.

00:27:21.369 --> 00:27:23.149
>>Thank you Clark.

00:27:23.150 --> 00:27:28.310
So as you can see, building and installing can
be very, very simple, right out of the box.

00:27:28.309 --> 00:27:33.190
There's no problem and another great feature which
is available now, is that for those of you who may be

00:27:33.190 --> 00:27:38.470
on multiple teams, you can now have multiple certificates.

00:27:38.470 --> 00:27:44.630
They're, now you don't need to set your different
certificates in different Keychains or different logins.

00:27:44.630 --> 00:27:48.900
So, that's a great new feature available now
so it makes the hassle definitely much less,

00:27:48.900 --> 00:27:52.190
if you're developing on multiple different teams.

00:27:52.190 --> 00:28:01.830
So, let's move on to using iPhone US 3.0 features and what
you're going to need in the Program portal to enable these.

00:28:01.829 --> 00:28:09.210
So the 4 features I want to talk a little bit more
about today, is the Apple Push Notification Service,

00:28:09.210 --> 00:28:13.950
In Out purchases, sharing Keychain data between applications

00:28:13.950 --> 00:28:18.710
and then lastly hardware accessory
integration with your iPhone application.

00:28:18.710 --> 00:28:21.130
What do these all have in common?

00:28:21.130 --> 00:28:23.440
Again, it's the App ID.

00:28:23.440 --> 00:28:27.340
The App ID is identifying your application to the world.

00:28:27.339 --> 00:28:31.740
It is saying that this application
is being used explicitly for this use

00:28:31.740 --> 00:28:35.120
and nobody else in the world can have it, it's yours.

00:28:35.119 --> 00:28:38.099
So let's start with Apple Push Notification Service.

00:28:38.099 --> 00:28:44.459
As many of you are familiar with it, the Apple Push
Notification Service is essentially a remote tap

00:28:44.460 --> 00:28:48.970
on the shoulder from your notification
server to your application,

00:28:48.970 --> 00:28:53.470
notifying the user that something great
is waiting for them in your application.

00:28:53.470 --> 00:28:57.069
Now, what do you need in the portal to get these done?

00:28:57.069 --> 00:29:01.119
As we mentioned earlier, there's
2 items you're going to need.

00:29:01.119 --> 00:29:09.259
The first is a client SSL certificate that's
installed on your notification server and allows you

00:29:09.259 --> 00:29:14.140
to connect your notification server to
the Apple Push Notification Service.

00:29:14.140 --> 00:29:21.840
Now this is slightly different from the certificates we were
using earlier for code signing and its purpose is different.

00:29:21.839 --> 00:29:27.269
These certificates are SSL certificates which
are essentially just creating a handshake

00:29:27.269 --> 00:29:29.769
between your notification server and the service.

00:29:29.769 --> 00:29:33.759
They're not being used for code signing
or to authenticate your identity,

00:29:33.759 --> 00:29:41.829
and that's why these SSL certificates do actually, they
don't contain your name, but instead contain the App ID

00:29:41.829 --> 00:29:45.629
for the application which is receiving notifications.

00:29:45.630 --> 00:29:52.510
So in this case, the certificate
is for com., com.domain.appname.

00:29:52.509 --> 00:30:00.029
Only the person who owns that App ID can ever send
notifications to an application with that bundle identifier.

00:30:00.029 --> 00:30:04.519
So, you're ensured that nobody else
in the world can obtain a certificate

00:30:04.519 --> 00:30:08.430
for your application and send notifications to your app.

00:30:08.430 --> 00:30:15.580
So, now that you've gotten your certificate to connect to
the service, you're going to need a provisioning profile.

00:30:15.579 --> 00:30:20.949
Now this is going to be slightly different than
the profiles we created earlier in that it's going

00:30:20.950 --> 00:30:28.920
to have one additional item inside of it and this is going
to be an Apple Push Notification Service Entitlement.

00:30:28.920 --> 00:30:37.710
The very act of creating a certificate actually puts this
entitlement in the list, into your provisioning profile.

00:30:37.710 --> 00:30:43.890
So after you've enabled an App ID for push
notifications, you'll recreate your Provisioning Profile,

00:30:43.890 --> 00:30:50.100
it will detect that you have enabled this for push and
that it will put these bits inside your application.

00:30:50.099 --> 00:30:56.719
This is what actually allows the device to look for these
notifications as they're coming in, since they're being sent

00:30:56.720 --> 00:31:01.799
to a specific application with a specific bundle identifier.

00:31:01.799 --> 00:31:07.240
Now, there was a session earlier this week, again on
Apple Push Notification Service, so if you're interested

00:31:07.240 --> 00:31:13.210
in getting a little more in depth on how it works, how
to set up your servers and your application itself,

00:31:13.210 --> 00:31:16.600
you can view the video for this session when it's available.

00:31:16.599 --> 00:31:22.169
Now the second 3.0 feature that
you're going to need to interact

00:31:22.170 --> 00:31:26.090
with the iPhone Developer Program
Portal is In App Purchases.

00:31:26.089 --> 00:31:32.959
In App Purchases or Micro Purchases, are the ability for you
to offer additional add-ons to your application to users,

00:31:32.960 --> 00:31:44.400
such as new game levels or ammunition
or some sort of monetary In App funds.

00:31:44.400 --> 00:31:51.080
Now in the Program portal, again in the App ID section,
what you're going to do is navigate to the application

00:31:51.079 --> 00:31:54.829
which you're building, which you
want to use In App Purchases for.

00:31:54.829 --> 00:31:57.689
You'll see two check boxes here in the App ID section.

00:31:57.690 --> 00:32:02.630
The first being to enable the application
for push notification and the second being

00:32:02.630 --> 00:32:05.600
to enable the application for In App Purchase.

00:32:05.599 --> 00:32:12.289
Clicking on the In App Purchase check box then will send
this data over to iTunes Connect and we haven't talked

00:32:12.289 --> 00:32:18.200
about iTunes Connect in detail yet, but iTunes Connect
is where you'll be managing the items and the parts

00:32:18.200 --> 00:32:22.500
and the SKUs that you'll be offering to your customers.

00:32:22.500 --> 00:32:27.720
In iTunes Connect, you'll navigate
to the Manage In App Purchases module

00:32:27.720 --> 00:32:31.809
and from there you'll create a new In App purchase.

00:32:31.809 --> 00:32:37.649
Now if you have an existing application on the
App Store, you'll be able to do this right away

00:32:37.650 --> 00:32:40.460
and you can go start testing In App Purchases.

00:32:40.460 --> 00:32:45.960
However if you're just getting started, you have
a brand new App and you want to test it with the

00:32:45.960 --> 00:32:53.049
In App Purchase Sandbox, what you'll get is a drop-down
menu of the specific bundle identifiers or App IDs

00:32:53.049 --> 00:32:55.750
which you've registered for In App Purchase.

00:32:55.750 --> 00:33:01.940
So you'll select which application you're working on and
what you want to set up for and from there iTunes will set

00:33:01.940 --> 00:33:08.350
up the various metadata for your purchases, including
the SKUs, the pricing tiers and the localization.

00:33:08.349 --> 00:33:14.869
To complete the process you'll go back to Xcode and
that's where you'll be working with the StoreKit APIs

00:33:14.869 --> 00:33:21.669
to build your application and test it with the In App
Purchase Sandbox service and then when you're ready

00:33:21.670 --> 00:33:25.580
to push your application live to the world, then all your

00:33:25.579 --> 00:33:30.059
In App Purchases will be tested
and available to your application.

00:33:30.059 --> 00:33:34.609
So there was an In App Purchase session
yesterday which I hope you did catch.

00:33:34.609 --> 00:33:39.289
Again, we'll check it out on video
if you were unable to attend it.

00:33:39.289 --> 00:33:47.529
So the next, the third iPhone OS 3.0 feature
that's available, is Keychain Access Sharing.

00:33:47.529 --> 00:33:54.309
Now the Keychain Access we talked about a little earlier
with certificates, but the Keychain is actually an area

00:33:54.309 --> 00:33:59.359
on the device as well, which allows
you to read and write data from.

00:33:59.359 --> 00:34:04.639
In iPhone OS 2.0, every application
shared a specific slice of the Keychain

00:34:04.640 --> 00:34:07.880
in that it could only read and write data from there.

00:34:07.880 --> 00:34:14.690
But in iPhone OS 3.0, you have the ability to
share this data across multiple applications.

00:34:14.690 --> 00:34:22.349
So if you are doing a single sign-on perhaps, you can
share this log in information across the applications.

00:34:22.349 --> 00:34:28.480
So if you had a mail application, your user
could log in, put in their username and password,

00:34:28.480 --> 00:34:33.070
and then when they're ready to go to their
calendar application, they don't have to log in.

00:34:33.070 --> 00:34:34.809
That data is being shared.

00:34:34.809 --> 00:34:42.340
So it's a really great feature, very helpful for enterprise
users, if you're sharing game scores, it's very scalable

00:34:42.340 --> 00:34:46.000
and can be used in a variety of different ways.

00:34:46.000 --> 00:34:50.519
Again, the common input in this is going to be your App ID.

00:34:50.519 --> 00:34:55.179
In this case, it's going to be that ten
digit random string that Apple generates.

00:34:55.179 --> 00:35:02.029
So this App ID prefix is unique to you the
developer and it is your slice of the Keychain Again,

00:35:02.030 --> 00:35:07.080
nobody else in the world will have it, so you don't
have to worry about other developers mining data

00:35:07.079 --> 00:35:15.519
from your application or accessing the data you are storing,
is yours and yours alone to share amongst your applications.

00:35:15.519 --> 00:35:18.340
Now how do you actually do this?

00:35:18.340 --> 00:35:19.990
That's a different question.

00:35:19.989 --> 00:35:26.329
So the first thing you're going to do is create a
provisioning profile with the App ID prefix of your choice,

00:35:26.329 --> 00:35:31.110
whichever one you want to use if you have
multiple ones, you can use that slice.

00:35:31.110 --> 00:35:36.910
All of the applications which you want to share
data between, have to have this same App ID prefix.

00:35:36.909 --> 00:35:43.599
So that's the one requirement in order to share this,
because they're all accessing the same area of the Keychain.

00:35:43.599 --> 00:35:50.469
The second thing you're going to do is add this
Keychain Access group entitlement to your Xcode project.

00:35:50.469 --> 00:35:56.589
Now Xcode is great and handles all of these
entitles seamlessly and invisibly to the user,

00:35:56.590 --> 00:36:01.690
but since not everybody wants to actually
write or share data between applications,

00:36:01.690 --> 00:36:05.179
this is the one step you're going to have to do manually.

00:36:05.179 --> 00:36:13.339
In Xcode you'll go to the New File menu and add a
code signing entitlements plist to your project.

00:36:13.340 --> 00:36:20.070
You can name the plist whatever you want, but best
practice is just to name it entitlements.plist.

00:36:20.070 --> 00:36:25.370
From there you'll actually see that there's
a default entitlement inside of that file,

00:36:25.369 --> 00:36:28.199
which is the get task allow or debug prefix.

00:36:28.199 --> 00:36:31.829
It allows you to access the debugger on the application.

00:36:31.829 --> 00:36:37.279
So what you're going to do is you're going to actually add a
new entitlement for these applications that are sharing data

00:36:37.280 --> 00:36:43.560
and this is going to be an array which
is called, Keychain-access-groups.

00:36:43.559 --> 00:36:50.469
And this is then the next step is that
you'll specify the first item of your array.

00:36:50.469 --> 00:36:55.859
This is going to be your ten digit App
ID prefix that we talked about earlier.

00:36:55.860 --> 00:37:01.180
Now this is actually going to be the only time you'll
ever have to input this ten digit prefix anywhere.

00:37:01.179 --> 00:37:06.679
Xcode seamlessly handles the handling of the prefix
in all other cases but in this particular one,

00:37:06.679 --> 00:37:10.409
this is the only time you'll actually
enter this ten digit string in.

00:37:10.409 --> 00:37:17.500
So you'll enter your ten digit string and then you'll,
followed by a period, followed by any string of your choice.

00:37:17.500 --> 00:37:19.539
You can name the access group whatever you want.

00:37:19.539 --> 00:37:22.670
In this case I think it's your access group.

00:37:22.670 --> 00:37:26.440
It's completely up to you and the
only thing important is that all

00:37:26.440 --> 00:37:29.960
of your applications share the same access group name.

00:37:29.960 --> 00:37:35.539
From there you'll actually navigate to
the target build settings and you'll see

00:37:35.539 --> 00:37:41.559
that there's a code signing entitlement field and there,
since we're actually adding an entitlement that we want

00:37:41.559 --> 00:37:47.480
to write into your App bundle, you're going to
enter the entitlements.plist file we just created.

00:37:47.480 --> 00:37:55.170
From there you can build and go and your
entitlements will be written into your application.

00:37:55.170 --> 00:38:02.539
The last step in this Keychain Access sharing is going to
be to actually specify your access group in the code itself

00:38:02.539 --> 00:38:08.710
and this is done using the KSecAttrAccess
group symbol in the security framework and you'll see

00:38:08.710 --> 00:38:16.690
that I've defined my access group here, which is my ten
digit prefix, followed by the access group name and as long

00:38:16.690 --> 00:38:23.700
as I use this in all of my projects, I'll be able to share,
read and write data between my multiple applications.

00:38:23.699 --> 00:38:31.789
So there's a great example of this in Action and in
Practice in the In House App Development session for iPhone

00:38:31.789 --> 00:38:38.090
and if you're a little more curious about the security
behind the iPhone and how this Keychain works,

00:38:38.090 --> 00:38:43.460
you can view the Creating Secure
iPhone and MacOS X Application session.

00:38:43.460 --> 00:38:50.809
So the last feature I want to talk to you about today in 3.0
is integrating your applications with hardware accessory.

00:38:50.809 --> 00:38:56.039
And there's you know, multiple protocols which you'll
be sending between your application to actually talk

00:38:56.039 --> 00:38:58.230
to the accessory but the one I want to focus

00:38:58.230 --> 00:39:04.619
on today is programming your App ID
prefix into your hardware application.

00:39:04.619 --> 00:39:09.869
What this allows, if you set this ten
digit prefix as a property in your file,

00:39:09.869 --> 00:39:17.190
what happens is that whenever your customers actually
plug in the device to your hardware accessory,

00:39:17.190 --> 00:39:21.369
it'll bring up any applicable applications in the App Store.

00:39:21.369 --> 00:39:22.719
So it's a really great feature.

00:39:22.719 --> 00:39:26.539
It just detects this is an application
that works with this device.

00:39:26.539 --> 00:39:31.539
It allows your user to download the application
immediately from the App Store and then start running it.

00:39:31.539 --> 00:39:37.389
So all that's needed in there is to input your
ten digit prefix into the accessory itself.

00:39:37.389 --> 00:39:41.299
So again there was a Creating iPhone Apps
that Communicate with Accessories session,

00:39:41.300 --> 00:39:43.080
which really talks about this in more detail.

00:39:43.079 --> 00:39:48.119
So if you're really interested in doing
that, you should check that session out.

00:39:51.570 --> 00:39:55.330
So, let's move on to refining your applications.

00:39:55.329 --> 00:40:00.369
For this session I'd like to introduce Christian who's
going to talk to you a little bit more about this.

00:40:00.369 --> 00:40:01.889
Christian.

00:40:03.940 --> 00:40:05.950
>> Thanks.

00:40:05.949 --> 00:40:09.239
So I have a question for you all.

00:40:09.239 --> 00:40:15.349
How many of you would like to have glowing
reviews for your applications in the App Store?

00:40:15.349 --> 00:40:19.210
No complaints about crashes or
something not working right away.

00:40:19.210 --> 00:40:21.659
Can I see a show of hands?

00:40:21.659 --> 00:40:23.989
Yeah, that's what I thought.

00:40:23.989 --> 00:40:27.179
Well my name's Christian and I'm here
to talk to you today about setting

00:40:27.179 --> 00:40:32.089
up a Beta program for your testers for your application.

00:40:32.090 --> 00:40:36.559
So, setting up a Beta program has five steps.

00:40:36.559 --> 00:40:42.179
The first one is collecting some information about the
Beta testers you've recruited in your Beta program,

00:40:42.179 --> 00:40:46.129
specifically the App IDs that Nitin mentioned before.

00:40:46.130 --> 00:40:49.950
Then we'll be taking that information
and going to the program portal

00:40:49.949 --> 00:40:53.619
and generating an Ad Hoc provisioning profile.

00:40:53.619 --> 00:40:56.710
This lets you take your application
and give it out to the folks

00:40:56.710 --> 00:41:00.170
that you've just entered and recruited into your program.

00:41:01.190 --> 00:41:06.139
Once you have that provisioning profile and the additional
cert that goes with it, we're going to go over to Xcode

00:41:06.139 --> 00:41:11.190
and we're going to put that in and build the application
with the Ad Hoc provisioning profile and then we're going

00:41:11.190 --> 00:41:16.960
to ship it out, give it to our testers and have them
install it and finally we're going to get some feedback

00:41:16.960 --> 00:41:19.409
if something were to go wrong, back from our users.

00:41:19.409 --> 00:41:22.750
To show you all this I'm going to go to demo.

00:41:22.750 --> 00:41:30.059
All right, so for this demo I'm going to be doing,
I'm going to kind of have a split personality.

00:41:30.059 --> 00:41:34.659
I'm going to spend part of it as kind of your
average Beta tester and go through the steps

00:41:34.659 --> 00:41:36.769
that they need to go to to get into your Beta program.

00:41:36.769 --> 00:41:41.800
Then I'm going to switch over to an admin user and show
what the administrator needs to do and then finally

00:41:41.800 --> 00:41:45.490
at the end I'm going to switch back to the Beta
tester user and show you what they're going to do

00:41:45.489 --> 00:41:48.399
to install the device and get feedback back to you.

00:41:48.400 --> 00:41:56.410
So to start off here I'm logged in as my Beta tester user
and you'll see that I've got this iPod Touch right here

00:41:56.409 --> 00:42:04.889
in my hand and I'm just going to plug it in and you'll see
that after a minute or two you're going to see a pop-up here

00:42:04.889 --> 00:42:14.150
in iTunes and so my administrator for my Beta program
said, I need to get him the UDID for my device.

00:42:14.150 --> 00:42:20.970
So if I select the device here and I click on serial number,
I can get the UDID for that and then I've got to copy

00:42:20.969 --> 00:42:23.149
and paste it into an email and send it off to them.

00:42:23.150 --> 00:42:25.510
So that's one way you can do this.

00:42:25.510 --> 00:42:29.220
Another way that Nitin mentioned earlier is
you can use Xcode, but you don't really want

00:42:29.219 --> 00:42:31.489
to tell a Beta tester to download the Xcode package.

00:42:31.489 --> 00:42:35.159
If they're not a developer, they're
never going to need all of that stuff.

00:42:35.159 --> 00:42:41.129
So we have a third product called the iPhone
Configuration Utility that kind of fills the void there.

00:42:41.130 --> 00:42:48.390
OK and what the iPhone Configuration Utility does is it
lets you manage devices, applications, provisioning profiles

00:42:48.389 --> 00:42:51.690
and also configuration profiles, something
we won't be going over in this demo.

00:42:51.690 --> 00:42:59.240
So if you go here under Devices, you'll see that
the iPod Touch that I just plugged in, is now here.

00:42:59.239 --> 00:43:02.459
You'll see that the device identifier
is listed there as well.

00:43:02.460 --> 00:43:05.860
So again, I can just copy and paste this into an email

00:43:05.860 --> 00:43:09.730
or I can click the Share button here in
the toolbar and this is really handy.

00:43:09.730 --> 00:43:16.519
Because what this is going to do is IPCU will generate a
device info file which has the name of the device, the UDID,

00:43:16.519 --> 00:43:21.739
and other little bits of information and just drop
them into an email that I can send off to anybody.

00:43:21.739 --> 00:43:30.679
So I'll just click the Share/Tell and then send this
over to my administrator and then just hit Send --

00:43:30.679 --> 00:43:36.429
and then just hit Send -- and it's all just going to go off.

00:43:36.429 --> 00:43:37.799
OK, so that's it.

00:43:37.800 --> 00:43:39.990
As a Beta tester, that's all you need to do.

00:43:39.989 --> 00:43:46.989
So let's switch over now to our administrator
and see what things are like on their side.

00:43:46.989 --> 00:43:51.469
Oops, that shouldn't be open and
that shouldn't be there either.

00:43:51.469 --> 00:43:58.989
OK. So on this side of things you'll see I now have an email
from my Beta tester with that device info file in there.

00:43:58.989 --> 00:44:01.589
I'm just going to double-click on it.

00:44:01.590 --> 00:44:04.340
I'm going to go ahead and add this to the library.

00:44:04.340 --> 00:44:07.730
Now you'll see as the administrator,
I also have IPCU installed here.

00:44:07.730 --> 00:44:11.679
IPCU is handy here because it lets me
aggregate all of the devices that I'm going

00:44:11.679 --> 00:44:14.289
to be putting into my Beta program, into one spot.

00:44:14.289 --> 00:44:20.309
So I'm going to go ahead and click, oh I
accidentally left the device plugged in.

00:44:20.309 --> 00:44:22.199
Sneaky. So there we go.

00:44:22.199 --> 00:44:25.119
Now we've added it and we've got
this and a couple of other devices

00:44:25.119 --> 00:44:29.659
that we already have collected from other Beta testers.

00:44:29.659 --> 00:44:38.159
So the next step in this process is going over to the
iPhone Developer Portal and uploading all these UDID's.

00:44:38.159 --> 00:44:45.559
As you can imagine, I could copy and paste all of these
things into the portal or I could use a simpler way.

00:44:45.559 --> 00:44:52.610
IPCU lets me select all of these devices and export
them in one file that has all of the devices in it.

00:44:52.610 --> 00:44:58.300
So I'm just going to export this file and call
it my Beta testers, just put it on my desktop.

00:44:58.300 --> 00:45:01.450
And then I'm going to leave IPCU for now.

00:45:01.449 --> 00:45:07.739
And then at this point I'm going to go over to
the iPhone Developer Portal and add the devices

00:45:07.739 --> 00:45:11.119
and generate the certificate and do all
the things you need to do on the portal.

00:45:11.119 --> 00:45:15.500
So we'll go here and log in.

00:45:15.500 --> 00:45:22.739
So the first thing I need to do here in the portal is
I need to input the devices I just exported from IPCU.

00:45:22.739 --> 00:45:27.819
So just select Devices, now normally you're
probably used to adding devices here one by one

00:45:27.820 --> 00:45:31.920
by clicking the Add Device button, you've
probably noticed this Upload Device button next

00:45:31.920 --> 00:45:33.760
to it and always wondered, what's that about.

00:45:33.760 --> 00:45:34.960
Well we're going to show you.

00:45:34.960 --> 00:45:41.460
I'm going to click Upload Device and I'm just
going to choose that Beta tester file from IPCU.

00:45:41.460 --> 00:45:49.280
Then I'm going to submit them and once this loads
here, you're going to see that all the devices

00:45:49.280 --> 00:45:52.150
from IPCU are now here lickity-split, no problem.

00:45:52.150 --> 00:45:55.460
No manual text entry, this is much easier.

00:45:55.460 --> 00:46:02.059
So now that we have the devices in, the next thing that we
need to do in order to generate an Ad Hoc profile is we need

00:46:02.059 --> 00:46:05.099
to make sure we have a distribution
certificate ready for us to use.

00:46:05.099 --> 00:46:09.409
So I'm going to visit the Certificates
portion of the portal and normally

00:46:09.409 --> 00:46:11.629
by default it shows you the development certificates.

00:46:11.630 --> 00:46:15.890
We're going to move over to the side one
and choose Distribution and you'll see

00:46:15.889 --> 00:46:19.230
that I've already generated a distribution certificate here.

00:46:19.230 --> 00:46:24.619
All apps that are signed for Ad Hoc and App Store
Distribution need to use a distribution certificate.

00:46:24.619 --> 00:46:28.529
So I'm just going to download this and stash
it in my Downloads folder for the time being.

00:46:28.530 --> 00:46:29.670
So that's there.

00:46:29.670 --> 00:46:37.220
So now we've got devices and a certificate, the next thing
that my provisioning profile is going to need is an App ID.

00:46:37.219 --> 00:46:42.000
So I visit the App ID section here and I've already put one

00:46:42.000 --> 00:46:45.380
in for my amazing application I'm
going to Beta test, right there.

00:46:45.380 --> 00:46:46.530
So I'm just going to copy and paste that.

00:46:46.530 --> 00:46:47.840
I'm going to need that in Xcode later.

00:46:47.840 --> 00:46:52.420
But the long and short of it is, I'm just going to
use this App ID and just hold it in my head for now.

00:46:52.420 --> 00:46:57.400
So now I've got devices, certificate, App ID,
we're ready to make a provisioning profile.

00:46:57.400 --> 00:46:58.420
Let's go over to Provision.

00:46:58.420 --> 00:47:05.090
And again, normally by default it shows you the development
provisions, but this is different, I'm distributing.

00:47:05.090 --> 00:47:11.519
So I'm going to click on the Distribution Certificates
and I'm going to go ahead and select a new profile.

00:47:11.519 --> 00:47:15.630
I'm doing Ad Hoc distribution here again, it
lets me just give it to a set number of folks.

00:47:15.630 --> 00:47:20.869
Going to put that in here and then I'm going to call this
the My App Beta provisioning profile, already there for me

00:47:20.869 --> 00:47:25.900
and then I'm going to choose the My App App ID.

00:47:25.900 --> 00:47:30.490
For all of the devices that I want in my Beta program
here, I'm just going to Select All and remove Clark.

00:47:30.489 --> 00:47:31.809
I don't want Clark in my Beta program.

00:47:31.809 --> 00:47:36.219
You can choose who goes in, this allows you to
do as many combinations of people as you want

00:47:36.219 --> 00:47:38.859
for as many different target audiences as you like.

00:47:38.860 --> 00:47:40.610
And then submit.

00:47:40.610 --> 00:47:45.769
So now this is going to go and generate the profile
for me and if we take a look at the details here,

00:47:45.769 --> 00:47:51.190
you'll see that we've got My App, that's the App ID
that I put in before, the distribution certificate

00:47:51.190 --> 00:47:55.159
that I showed you and we have the five
devices that we pulled out of IPCU.

00:47:55.159 --> 00:48:00.059
So I'm going to download this provisioning
profile, all right that's local here.

00:48:00.059 --> 00:48:00.619
All right.

00:48:00.619 --> 00:48:07.179
So now I've got the two things I need on my computer in
order to prepare this application for Ad Hoc distribution.

00:48:07.179 --> 00:48:10.109
A certificate and a mobile provision.

00:48:10.110 --> 00:48:11.690
Let's go here to my Downloads folder.

00:48:11.690 --> 00:48:18.289
I'm going to take the certificate and I'm just going to
drag it on top of Keychain Access and you'll see here

00:48:18.289 --> 00:48:22.139
in Keychain Access now, I've got
an iPhone distribution certificate.

00:48:22.139 --> 00:48:26.799
So we're good there and I now have a mobile provision.

00:48:26.800 --> 00:48:32.530
I'm going to go here and just drop that on top
of Xcode and if we go to the Xcode Organizer,

00:48:32.530 --> 00:48:36.760
you'll see in the provisioning profiles, I
now have the My App Beta Provisioning profile.

00:48:36.760 --> 00:48:39.150
So now I've got those two things installed.

00:48:39.150 --> 00:48:41.740
Now here's my app, here's the project here in Xcode.

00:48:41.739 --> 00:48:45.849
I'm going to need to do some things in order
to prepare this for Ad Hoc distribution.

00:48:45.849 --> 00:48:53.460
First of them is quite simply I want to switch this over
to the device SDK and I want it to build for release.

00:48:53.460 --> 00:48:56.740
In addition to building for release,
I also want to switch it here

00:48:56.739 --> 00:49:02.339
in the settings over to using the distribution profile.

00:49:02.340 --> 00:49:07.550
You'll see that it currently matches the certificate
that I found, so this is going to work no problem.

00:49:07.550 --> 00:49:16.850
The next thing I need to do is go here on my target,
bring up the Info window for that and I'm going to need

00:49:16.849 --> 00:49:20.839
to provide the App ID that I set up in the portal earlier.

00:49:20.840 --> 00:49:22.880
So I'm just going to paste that in.

00:49:22.880 --> 00:49:29.720
OK so now we've got that set and the final thing that I
need to do is I need to add an entitlement to this project.

00:49:29.719 --> 00:49:33.299
Nitin mentioned earlier this idea of Get/Task/Allow.

00:49:33.300 --> 00:49:40.530
Basically this is an entitlement that tells the device if
it should allow a debugger to attach to a running process.

00:49:40.530 --> 00:49:45.660
Since this is Ad Hoc, this is something that you're
giving out to users, you want to turn that off.

00:49:45.659 --> 00:49:51.710
So I'm going to just go here and say new
file and create an entitlements file,

00:49:51.710 --> 00:49:56.530
oops and we're going to call it entitlements.plist.

00:49:56.530 --> 00:50:00.680
You can name it anything you like,
I'm just keeping it simple.

00:50:00.679 --> 00:50:06.669
And then you'll see by default, Get/Task/Allow is
listed here and it's on, so I'm going to turn it off.

00:50:06.670 --> 00:50:11.610
So now I've added the .plist, I'm going to save
it and then I'm also going to go back to my target

00:50:11.610 --> 00:50:21.390
and here when it says, for the code signing entitlements
item, I'm just going to put in the name of the .plist,

00:50:21.389 --> 00:50:26.859
entitlements, typing on stage, never fun.

00:50:26.860 --> 00:50:30.880
entitlements.plist.

00:50:32.030 --> 00:50:36.120
All right, so there we go.

00:50:36.119 --> 00:50:38.779
All right so to recap what we've done here in Xcode.

00:50:38.780 --> 00:50:43.230
We've chosen the distribution provisioning
profile, we've added the entitlements,

00:50:43.230 --> 00:50:46.099
and we specified the App ID that I used in the portal.

00:50:46.099 --> 00:50:47.170
So we should be good.

00:50:47.170 --> 00:50:50.849
I'm going to go here and I'm going to select Build.

00:50:50.849 --> 00:50:55.289
The build succeeded and I'm going
to go to the Products folder here

00:50:55.289 --> 00:50:58.699
and I'm going to reveal the product in the Finder.

00:50:58.699 --> 00:51:04.000
So this is the application that I
want to give out to my Beta testers.

00:51:04.000 --> 00:51:10.760
All I'm going to do is I'm going to just package this up,
going to zip it up and then I'm going to write a new email

00:51:10.760 --> 00:51:14.620
with that and I'm also going to take the
provisioning profile that I downloaded

00:51:14.619 --> 00:51:19.000
from the portal and add that right there.

00:51:19.000 --> 00:51:24.829
So these are the two things that my Beta tester is
going to need in order to run the App on their device.

00:51:24.829 --> 00:51:31.900
So let me send this off to them.

00:51:31.900 --> 00:51:33.050
All right, my App Beta.

00:51:33.050 --> 00:51:36.050
Going to send it.

00:51:36.050 --> 00:51:39.420
All right and now we're done with the admin side of things.

00:51:39.420 --> 00:51:41.289
Let's switch back over to our Beta tester.

00:51:41.289 --> 00:51:47.719
All right, so for our Beta tester,
we're going to check our email here

00:51:47.719 --> 00:51:52.859
and we have the provisioning profile
and the application in our email.

00:51:52.860 --> 00:51:58.050
So what I'm going to do is, I'm going to take the
provisioning profile and again, the user can just drag

00:51:58.050 --> 00:52:03.970
and drop this on top of the iTunes icon, but iTunes doesn't
have any facility for managing provisioning profiles.

00:52:03.969 --> 00:52:07.169
So if you wind up having a tester that
winds up doing a lot of Beta tests for you,

00:52:07.170 --> 00:52:11.440
it's hard for them to know how many provisioning
profiles they have and manage all that.

00:52:11.440 --> 00:52:13.630
IPCU makes this a lot easier for Beta testers.

00:52:13.630 --> 00:52:19.800
So we're just going to take this icon, drop it on top of
IPCU and we're going to go ahead and add it to our library.

00:52:19.800 --> 00:52:25.030
So you'll see now here in the provisioning profile
library we have the Beta provisioning profile.

00:52:25.030 --> 00:52:30.769
And then I'm going to take the application
that the administrator sent to me,

00:52:30.769 --> 00:52:34.610
bring it to the Desktop and unzip it and do the same thing.

00:52:34.610 --> 00:52:40.210
Just drag it on top of IPCU, yes I want to
open it, go ahead and add it to the library

00:52:40.210 --> 00:52:43.389
and now you'll see my applications library I've got my app.

00:52:43.389 --> 00:52:50.039
So at this point I'm going to just take my device
over here and plug it in and again you'll see it pop

00:52:50.039 --> 00:52:57.159
up in IPCU very shortly and all I need to do
to install the provisioning profile in the App

00:52:57.159 --> 00:53:02.969
on here is just select the device here in
the source list, choose provisioning profiles

00:53:02.969 --> 00:53:09.250
and install the My App Beta provisioning
profile and install the application.

00:53:09.250 --> 00:53:12.719
It's going to take a moment to copy
over and we're successfully on there.

00:53:12.719 --> 00:53:17.759
So let's go over to the device real quick
and let's pretend we're the Beta tester.

00:53:17.760 --> 00:53:23.210
So I'm going to unlock my device
and sure enough, here is my app.

00:53:23.210 --> 00:53:27.519
So I went one above Clark with my
application and I have two buttons.

00:53:27.519 --> 00:53:28.800
Put a lot of work into this.

00:53:28.800 --> 00:53:31.250
I'm the PM a project manager, so bear with.

00:53:31.250 --> 00:53:36.429
This does two things, it writes to the console, so
we're going to write to the console a little bit

00:53:36.429 --> 00:53:41.659
and you'll see why in a second and then my
favorite button in any app, the Crash button.

00:53:41.659 --> 00:53:43.149
So now we've crashed.

00:53:43.150 --> 00:53:45.369
So can still do that good.

00:53:45.369 --> 00:53:48.710
So we're going to switch back over to the demo machine here.

00:53:48.710 --> 00:53:55.550
Now let's pretend that I'm a user and I've just found a
crasher on my device and I want to provide information back

00:53:55.550 --> 00:53:59.810
to the administrator for my Beta program,
like hey like you know your App crashed.

00:53:59.809 --> 00:54:03.710
So normally I would just write an email
and put the steps to reproduce in there.

00:54:03.710 --> 00:54:09.000
But then the App administrator would also probably
want some diagnostic information from the device.

00:54:09.000 --> 00:54:13.690
Well since I have the device plugged in here
in IPCU, I can look at the device console

00:54:13.690 --> 00:54:18.920
and specifically once I show the console, I can filter
based on the application that's logged to console.

00:54:18.920 --> 00:54:25.990
So my app's name is My App and sure enough, here are all
the different console messages that are from my application.

00:54:25.989 --> 00:54:31.059
So I can simply select them and
save that selection as a text file.

00:54:31.059 --> 00:54:33.019
So I can easily pop that in an email.

00:54:33.019 --> 00:54:35.690
Also crash logs are usually pretty handy.

00:54:35.690 --> 00:54:41.200
Let's hide this and go over to console, so all of
the crash logs from a device are usually copied

00:54:41.199 --> 00:54:45.179
over to a machine and the path is a little bit long.

00:54:45.179 --> 00:54:52.649
It's in the user'sLibrary Logs folder, but when you drill
down here you'll find this .crash file for the application

00:54:52.650 --> 00:54:58.139
and you can just drag that into an email, along with
the device log, send that back to the administrator,

00:54:58.139 --> 00:55:01.639
along with the steps to reproduce and
you've provided some valuable feedback.

00:55:01.639 --> 00:55:06.109
When it comes to dealing with crash logs,
there's a great Tech Note, 2151, look that up.

00:55:06.110 --> 00:55:09.640
It gives you all sort of information
about dealing with crash logs.

00:55:09.639 --> 00:55:11.829
So at this point I'd like to go back to slides.

00:55:11.829 --> 00:55:17.579
[ Applause ]

00:55:17.579 --> 00:55:22.909
Thanks. All right, so now we found out how
to effectively administer a Beta program.

00:55:22.909 --> 00:55:27.789
The five steps again, just to make sure we're clear
is, you need to collect the device information

00:55:27.789 --> 00:55:30.460
from your Beta testers after you've recruited them.

00:55:30.460 --> 00:55:36.090
Afterwards you're going to need to go over to the
iPhone Developer Portal and put in those UDID's,

00:55:36.090 --> 00:55:41.250
get the right certificate, and the right App
ID and generate an Ad Hoc provisioning profile.

00:55:41.250 --> 00:55:43.969
In Xcode you're going to need to
set up that provisioning profile,

00:55:43.969 --> 00:55:47.559
as well as the certificate and
sign your application using that.

00:55:47.559 --> 00:55:52.000
Then you've got to send that all out and solicit
feedback from users and let them know how to do that.

00:55:52.000 --> 00:55:58.010
So at this point I'd like to bring Nitin back on stage to
talk about preparing your application for distribution.

00:55:58.010 --> 00:56:02.640
[ Applause ]

00:56:02.639 --> 00:56:06.529
>> All right, thank you very much Christian.

00:56:06.530 --> 00:56:08.100
The Beta testing is fantastic.

00:56:08.099 --> 00:56:14.219
I mean it's much better to identify these crashes early
than read it in the review section of the App Store.

00:56:14.219 --> 00:56:14.689
All right?

00:56:14.690 --> 00:56:19.630
So it's a great technique and it's very
simple to kind of manage it and administer.

00:56:19.630 --> 00:56:22.289
So let's move on to preparing for distribution.

00:56:22.289 --> 00:56:26.279
At this point your App is, it's refined,
it's honed, it's a well oiled machine.

00:56:26.280 --> 00:56:29.070
You want to get it out in the world
and start seeing a little return

00:56:29.070 --> 00:56:31.769
on all this investment that you've been making.

00:56:31.769 --> 00:56:35.509
So preparing for distribution, there's three types.

00:56:35.510 --> 00:56:38.830
The first obviously, App Store Distribution.

00:56:38.829 --> 00:56:44.880
The second, Ad Hoc Distribution which allows you
to install your applications on up to 100 devices.

00:56:44.880 --> 00:56:48.800
As Christian just navigated through those waters.

00:56:48.800 --> 00:56:55.470
And the third, Enterprise or In House Distribution and
this is for those developers who are developing proprietary

00:56:55.469 --> 00:57:01.129
in house applications that aren't really fit for,
suitable for other people in the App Store obtaining it.

00:57:01.130 --> 00:57:07.570
The Enterprise Distribution model, distribution
mechanism is identical to the Ad Hoc distribution

00:57:07.570 --> 00:57:12.660
that Christian just went over, where you'll
be distributing your compiled App bundle

00:57:12.659 --> 00:57:17.029
and the provisioning profile used
to build it to all of your users.

00:57:17.030 --> 00:57:22.110
But let's get back to the App Store,
that's what we're really interested in.

00:57:22.110 --> 00:57:28.610
You'll be managing your applications for distribution,
in iTunes Connect, which is another web portal.

00:57:28.610 --> 00:57:33.690
This is going to be where you manage
all the aspects of distribution.

00:57:33.690 --> 00:57:38.019
We've got the Development portal for your
development aspects and then iTunes Connect

00:57:38.019 --> 00:57:40.449
for when you're ready to really manage this.

00:57:40.449 --> 00:57:46.730
So iTunes Connect consists of several modules, but the
one that you really want to pay attention to immediately,

00:57:46.730 --> 00:57:50.099
before you even start coding is the Contracts module.

00:57:50.099 --> 00:57:53.900
You'll actually have two different kinds of contracts.

00:57:53.900 --> 00:57:56.579
The first is for free applications.

00:57:56.579 --> 00:58:00.449
That you're going to have by default
when you first log in to iTunes.

00:58:00.449 --> 00:58:05.809
You'll need to submit it, but the turnaround time
for that is very, very quick and you want to get

00:58:05.809 --> 00:58:11.940
into the iTunes Connect as soon as possible if
you're developing free or commercial applications,

00:58:11.940 --> 00:58:18.190
you want to log in and get these contracts prepared
so that you're not waiting for them to get approved

00:58:18.190 --> 00:58:21.860
and set up when you're ready to distribute your application.

00:58:21.860 --> 00:58:29.450
So in parallel with your coding, get up in there and really
take some time to fill out these applications and contracts

00:58:29.449 --> 00:58:35.829
because you may need to review them with a legal
person in your company or send them around for review.

00:58:35.829 --> 00:58:42.049
So it's important just to get in there, get a head start
on it so it's not hamstringing you later down the process.

00:58:42.050 --> 00:58:47.120
The second thing you want to do in parallel
with your development is to take some time

00:58:47.119 --> 00:58:53.460
to set your application apart by creating
some really compelling artwork and metadata.

00:58:53.460 --> 00:59:00.159
The App Store presents you with a window that you can
invite your users to really kind of grab the application

00:59:00.159 --> 00:59:02.509
and increase their kind of desire for it.

00:59:02.510 --> 00:59:05.110
So it is your store front to the world.

00:59:05.110 --> 00:59:10.370
So it's important that you don't just cobble
together some screen shots at the very last minute,

00:59:10.369 --> 00:59:15.190
but spend some time to really think about how you
want to present this application to the world,

00:59:15.190 --> 00:59:21.900
whether it be just the screen shots and icon, but also with
the description of your application and perhaps you want

00:59:21.900 --> 00:59:26.800
to incorporate reviews of some people, some
esteemed colleagues or some journalists

00:59:26.800 --> 00:59:30.269
by Ad Hoc distribution who have tested it before.

00:59:30.269 --> 00:59:37.579
So there's a lot of metadata that you can provide
including the artwork but also links to your support site,

00:59:37.579 --> 00:59:42.380
links to some other, your website which may have
other applications that you're distributing.

00:59:42.380 --> 00:59:48.610
So get in there and start really thinking
about your metadata beforehand because you want

00:59:48.610 --> 00:59:54.570
to present the best product to the
world to really skyrocket it to the top.

00:59:54.570 --> 00:59:59.450
Now iTunes Connect consists of several modules.

00:59:59.449 --> 01:00:04.480
The first we talked about which was your contracts,
which you want to manage and get in early.

01:00:04.480 --> 01:00:07.670
But you can also manage iTunes Connect to users.

01:00:07.670 --> 01:00:15.510
So if you have a legal representative or a technical
person who really works on providing the metadata

01:00:15.510 --> 01:00:21.430
and if you have perhaps a business analyst who
needs access to some sales and financial reports,

01:00:21.429 --> 01:00:26.169
you can add them in the Manage
Users modules in iTunes Connect.

01:00:26.170 --> 01:00:29.599
Another module available is your Sales
and Training Reports and this is kind

01:00:29.599 --> 01:00:32.289
of the most exciting when your App starts taking off.

01:00:32.289 --> 01:00:38.349
You can see your geographic breakdown by
territory of where your sales are coming from

01:00:38.349 --> 01:00:43.819
and you can really garner some really great business
intelligence from these reports that are available.

01:00:43.820 --> 01:00:49.420
In addition there is the Financial module which
is probably pretty important to most people,

01:00:49.420 --> 01:00:53.340
where you can track where all your money is
coming from and how much your App is making.

01:00:53.340 --> 01:00:56.760
And this is available by version as well.

01:00:56.760 --> 01:01:01.750
There's the Manage Your Applications module, which
is where you'll be uploading your application as well

01:01:01.750 --> 01:01:06.679
as associated metadata and lastly
there's an area for promo codes.

01:01:06.679 --> 01:01:12.000
So you can actually create up to
50 promo codes for each version

01:01:12.000 --> 01:01:15.969
of your application and these are redeemable for 4 weeks.

01:01:15.969 --> 01:01:21.879
So this is a great way to really get the word out
about your application once you've uploaded it.

01:01:21.880 --> 01:01:24.750
So let's move on to submitting to the App Store.

01:01:24.750 --> 01:01:29.610
You got your contracts in place, you're set up,
your metadata is really great, really compelling,

01:01:29.610 --> 01:01:34.070
the artwork just fascinating, you're going to
need to build your application for distribution.

01:01:34.070 --> 01:01:40.690
Now as Christian showed earlier, you're going to need
two items to build this distribution-ready application.

01:01:40.690 --> 01:01:44.070
The first is your distribution code signing certificate.

01:01:44.070 --> 01:01:49.940
Again this is similar to your development code
signing certificate but it has an extension in it

01:01:49.940 --> 01:01:54.900
which the App Store requires in order
to accept your application for upload.

01:01:54.900 --> 01:02:01.039
This signifies that this build was by the
team agent or authorized by the team agent

01:02:01.039 --> 01:02:08.619
who is the primary legal contact and makes sure
that nobody else on is distributing or sorry,

01:02:08.619 --> 01:02:12.489
uploading some development build which
might not be ready for distribution.

01:02:12.489 --> 01:02:18.059
So really it's a check to ensure that this is
really the one you want uploaded to the App Store.

01:02:18.059 --> 01:02:25.029
And the second piece is your distribution provisioning
profile which contains that distribution certificate,

01:02:25.030 --> 01:02:29.530
your application ID and for the App
Store it actually contains no devices

01:02:29.530 --> 01:02:31.940
since all you'll be doing is uploading the application.

01:02:31.940 --> 01:02:39.789
You'll head to the Managing Your Application module which
is where you'll be uploading the zipped file which you've,

01:02:39.789 --> 01:02:45.170
you'll build your project in Xcode,
compress your product and then upload

01:02:45.170 --> 01:02:48.110
that zip file to your Managing Your Application.

01:02:48.110 --> 01:02:52.349
So with that I'm going to bring up Clark again
who's going to show you some best practices

01:02:52.349 --> 01:02:55.949
for setting up your project for distribution.

01:02:55.949 --> 01:02:56.139
Clark.

01:02:56.139 --> 01:02:58.559
>> Thanks Nitin.

01:03:02.150 --> 01:03:07.730
OK we're back on my machine and this time I'm going to
do something quite similar to what I did the first time,

01:03:07.730 --> 01:03:10.570
except now I'm building for distribution.

01:03:10.570 --> 01:03:15.400
Again I've downloaded the certificate and the
provisioning profile, install the certificate.

01:03:15.400 --> 01:03:16.940
I double-click it.

01:03:16.940 --> 01:03:22.230
If I look in Keychain Access, you'll see
that now I have the distribution certificate

01:03:22.230 --> 01:03:25.240
as well, with the Admin's private key.

01:03:25.239 --> 01:03:34.789
You have to get the admin key separately because you're
not likely on the same machine that initially requested it.

01:03:34.789 --> 01:03:37.599
So I've got those two pieces there.

01:03:37.599 --> 01:03:43.339
Next what I need to do is just as
before, install the Provisioning Profile.

01:03:43.340 --> 01:03:50.960
I can do that like, by double-clicking as before, I
can drag it to Xcode's icon or I can just drag it here.

01:03:50.960 --> 01:03:53.400
They all have the same end result.

01:03:53.400 --> 01:03:54.510
OK so I've installed that.

01:03:54.510 --> 01:03:56.920
You can see a couple differences from before.

01:03:56.920 --> 01:03:59.500
This has an explicit application ID.

01:03:59.500 --> 01:04:05.460
I did that so I can show you later what that
entails and it does not include any devices.

01:04:05.460 --> 01:04:09.670
That's because this profile is not going to
be used for installing directly on a device,

01:04:09.670 --> 01:04:13.119
it's just used for building for distribution.

01:04:14.489 --> 01:04:15.799
OK I've got that set up.

01:04:15.800 --> 01:04:18.200
I'm going to go back to my project.

01:04:19.489 --> 01:04:25.479
Now I could, just as Christian did, just switch
to release and change the settings and so on,

01:04:25.480 --> 01:04:30.190
but that can cause conflicts in source
control management if someone just wants

01:04:30.190 --> 01:04:34.139
to build a release version for their personal device.

01:04:34.139 --> 01:04:41.049
So what I'm going to do is go to my project, go to
Configurations and create another configuration.

01:04:41.050 --> 01:04:44.940
These are basically buckets of build
settings that are kept separate.

01:04:44.940 --> 01:04:49.869
I want to start with my release
configuration and then duplicate it.

01:04:49.869 --> 01:04:52.230
I'll name it App Store.

01:04:52.230 --> 01:04:56.630
Now this configuration at this point is
identical to my release configuration.

01:04:56.630 --> 01:05:00.640
But I can change its settings without
affecting my release configuration.

01:05:00.639 --> 01:05:10.059
So now I'm going to go to my target's build settings
and I'm going to switch my code signing identity

01:05:10.059 --> 01:05:15.049
to iPhone Distribution as opposed to iPhone Developer.

01:05:15.050 --> 01:05:21.289
Now again, I just need the iPhone Distribution part,
not the whole name, because Xcode knows automatically

01:05:21.289 --> 01:05:24.320
to match based on that initial sub-string.

01:05:24.320 --> 01:05:29.350
You'll also notice here that what I
expected to match would be this profile,

01:05:29.349 --> 01:05:33.329
however it doesn't match because
of the application identifier.

01:05:33.329 --> 01:05:34.630
So that's the next thing I'm going to set.

01:05:34.630 --> 01:05:39.640
I'm going to go to Properties and this
is where I would set the identifier.

01:05:39.639 --> 01:05:42.460
I'd get it from the profile.

01:05:42.460 --> 01:05:45.659
It just this part without the ten digit prefix.

01:05:45.659 --> 01:05:50.869
I'll copy that, close that and just paste it there.

01:05:53.219 --> 01:05:59.750
Now I've got the provisioning profile installed, I've got
the certificate installed, I've got my build settings set up

01:05:59.750 --> 01:06:03.139
and I've got my App ID set appropriately.

01:06:03.139 --> 01:06:10.129
Now I just need to make sure I'm using the device
SDK and I'm building my App Store configuration.

01:06:10.130 --> 01:06:11.420
So I'll choose that.

01:06:11.420 --> 01:06:13.550
This time I'm just going to build, not build and run

01:06:13.550 --> 01:06:17.950
because the Provisioning Profile won't allow
it to be installed on my particular device.

01:06:17.949 --> 01:06:20.829
Running wouldn't mean anything.

01:06:20.829 --> 01:06:29.389
So I build it, the build succeeded and now I'm going
to go into the Finder and show my built product.

01:06:29.389 --> 01:06:33.519
Here's the actual binary and next to it
you're see the dsym [assumed spelling] file.

01:06:33.519 --> 01:06:38.590
This contains descriptions of the various
symbols in my applications, line numbers,

01:06:38.590 --> 01:06:41.450
variable names, function names, etcetera.

01:06:41.449 --> 01:06:43.369
I need to keep this around.

01:06:43.369 --> 01:06:47.739
Because it's tied directly to this
particular build of my application.

01:06:47.739 --> 01:06:50.899
There's a unique identifier in
both and they need to match up.

01:06:50.900 --> 01:06:56.720
Even if I were to rebuild this project with no
changes, it would have a different unique identifier

01:06:56.719 --> 01:07:00.119
and it would not match up with that particular symbol file.

01:07:00.119 --> 01:07:02.839
This is important later when you get crash reports back,

01:07:02.840 --> 01:07:08.720
if you want a symbol rich crash log,
as opposed to just numeric offsets.

01:07:08.719 --> 01:07:10.839
So I'm going to want to keep that.

01:07:10.840 --> 01:07:19.250
What I need for actually uploading to the store,
I just need to take my application, compress it,

01:07:19.250 --> 01:07:23.630
now this file is what I'll end
up uploading to iTunes Connect.

01:07:23.630 --> 01:07:29.930
It's a good idea to use the Finder to do this compression
because it preserves all the appropriate metadata.

01:07:29.929 --> 01:07:35.929
There are command line options to do the same but by
default the zip command line tool does not preserve the

01:07:35.929 --> 01:07:37.879
appropriate metadata.

01:07:37.880 --> 01:07:44.579
So I've got this which is what I would upload, now I would
need to save this somewhere on my hard disk where Spotlight,

01:07:44.579 --> 01:07:52.900
the system search and indexing tool, can find it for
later, in case heaven forbid, I get any crash reports back.

01:07:54.030 --> 01:08:01.680
So preparing for distribution, all I needed was the
distribution certificate, the distribution profile,

01:08:01.679 --> 01:08:06.429
I need to make sure that I set the
appropriate App ID in my info.plist,

01:08:06.429 --> 01:08:10.629
make sure I'm using the appropriate
signing identity in my build settings.

01:08:10.630 --> 01:08:19.900
When I build I need to make sure to save this file and
zip up this file and there's my product, ready for upload.

01:08:19.899 --> 01:08:22.009
Thanks and with that I'll go back to Christian

01:08:22.010 --> 01:08:28.530
[ Applause ]

01:08:28.529 --> 01:08:30.289
>> All right so thank you very much Clark.

01:08:30.289 --> 01:08:35.050
Clark's now taken our application, put it
up in the store and it's a rousing success.

01:08:35.050 --> 01:08:36.779
We're very happy with how it's turned out.

01:08:36.779 --> 01:08:41.479
So once the release is out there, there's a couple
of just little tips we like to pass on to folks.

01:08:41.479 --> 01:08:44.649
Keep in mind once you're out there in the wild.

01:08:44.649 --> 01:08:46.609
The first one is, promotional codes.

01:08:46.609 --> 01:08:48.269
Nitin mentioned this earlier.

01:08:48.270 --> 01:08:50.030
Be sure to use the promotional codes.

01:08:50.029 --> 01:08:51.899
You get 50 per version.

01:08:51.899 --> 01:08:56.109
Send them out there, give them to your friends,
bloggers, get the word out about your application.

01:08:56.109 --> 01:08:58.829
So don't forget to use promotional codes.

01:08:58.829 --> 01:09:03.569
Next up, don't forget to review
your reviews on the App Store.

01:09:03.569 --> 01:09:09.099
Sometimes good issues come up here and be responsive
to what folks have to say about your application.

01:09:09.100 --> 01:09:11.930
Make sure you take a look and respond
to the commentary there.

01:09:11.930 --> 01:09:19.570
And then the final thing is that iTunes Connect offers you
a list of crashes that are most common for your application.

01:09:19.569 --> 01:09:24.090
Make sure you visit iTunes Connect,
download these and then just drag them

01:09:24.090 --> 01:09:28.029
into the crash logs portion of the Xcode Organizer.

01:09:28.029 --> 01:09:32.380
Clark mentioned earlier to keep the
dsym file for your application around.

01:09:32.380 --> 01:09:36.090
What this does here in the Organizer is
actually going to find that dsym file

01:09:36.090 --> 01:09:38.860
and match the crash log to it so it can symbolicate it.

01:09:38.859 --> 01:09:43.189
Give you useful information out of that crash log.

01:09:43.189 --> 01:09:50.269
So for more on this, tomorrow there's one session still
in the future, it's called Publishing on the App Store.

01:09:50.270 --> 01:09:53.580
That's at 2 o'clock on the Presidio tomorrow,
make sure you go and take a look at that

01:09:53.579 --> 01:09:57.449
for more information about getting your App on the Store.

01:09:57.449 --> 01:10:04.309
So in conclusion, today we've talked about what
it takes to set up your development environment.

01:10:04.310 --> 01:10:10.860
The different profiles and certificates, App IDs, the
different players and the website you need to go to.

01:10:10.859 --> 01:10:16.429
We also walked you through what it takes to install an
application on a device versus running it in the Simulator.

01:10:16.430 --> 01:10:24.320
We've talked about taking the four great new features in
iPhone OS 3.0 and setting up your application to use them.

01:10:24.319 --> 01:10:29.090
We've talked about setting up of Beta programs, so
that you can get good testing feedback from users,

01:10:29.090 --> 01:10:33.300
get your App out there and make sure
that it's rock solid for release.

01:10:33.300 --> 01:10:38.050
We've talked about steps you need to do to get
your App ready to go out and finally we've talked

01:10:38.050 --> 01:10:42.659
about getting your App onto the App
Store and the steps involved with that.

01:10:42.659 --> 01:10:46.149
We have a lab today at 3:30 in iPhone Lab A.

01:10:46.149 --> 01:10:51.769
We won't have time for Q and A today, we're out of time
unfortunately, but please come there, ask us your questions

01:10:51.770 --> 01:10:55.610
and let us know if you've been having any issues.

01:10:55.609 --> 01:11:00.210
For questions please email Mike Jurewitz,
his information's here on the slide.

01:11:00.210 --> 01:11:05.869
For documentation, the iPhone OS reference library
has a ton of information involving all of this.

01:11:05.869 --> 01:11:12.729
Also I mentioned specifically, Tech Note 2151, that's
for dealing with crash logs from iPhone OS applications.