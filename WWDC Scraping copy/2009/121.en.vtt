WEBVTT

00:00:13.169 --> 00:00:13.710
>> Welcome.

00:00:13.710 --> 00:00:15.470
What a great day for accessibility.

00:00:15.470 --> 00:00:19.130
What a great week for accessibility
in general, not just at Apple.

00:00:19.129 --> 00:00:22.980
Welcome to Session 121, iPhone Accessibility.

00:00:22.980 --> 00:00:24.519
My name is Eric Seymour.

00:00:24.519 --> 00:00:29.500
I manage the VoiceOver Engineering Team at Apple and
I cannot tell you, we cannot tell you how happy we are

00:00:29.500 --> 00:00:31.980
to be here today to talk to you about this topic.

00:00:31.980 --> 00:00:40.730
We get so many requests for adding accessibility
features to iPhone and for adding VoiceOver to iPhone.

00:00:40.729 --> 00:00:46.089
And so it's just a thrill to finally be here on stage to
actually be able to show it to you today and show you how

00:00:46.090 --> 00:00:48.760
to make your applications work really well with it.

00:00:48.759 --> 00:00:51.339
So we're going to get straight to it.

00:00:51.340 --> 00:00:53.170
It's going to come in two parts.

00:00:53.170 --> 00:00:58.800
First, I'm going to give you a quick overview of
iPhone accessibility features for the iPhone 3GS

00:00:58.799 --> 00:01:01.029
and then I'm going to give you a demonstration

00:01:01.030 --> 00:01:06.549
And then my colleague Chris Fleizach is going to come on
stage and tell you how to make your applications work well

00:01:06.549 --> 00:01:10.750
with some of these features, with all of these features.

00:01:10.750 --> 00:01:12.540
OK, so let's get to it.

00:01:12.540 --> 00:01:20.650
So, perhaps you recall seeing this screenshot
during Phil's introduction of iPhone 3GS on Monday.

00:01:20.650 --> 00:01:24.780
And this is the new accessibility
settings panel on the device.

00:01:24.780 --> 00:01:31.719
And it showed up in the keynote for a very short period
of time but this was marked an incredibly important day

00:01:31.719 --> 00:01:37.319
for blind users around the world and this is what we
suspected before this slide made it into the keynote.

00:01:37.319 --> 00:01:41.000
That the impact that this has had, that
the message of releasing this product

00:01:41.000 --> 00:01:43.579
on the blindness community is unbelievable.

00:01:43.579 --> 00:01:45.140
It's been off the charts this week.

00:01:45.140 --> 00:01:46.799
Really, really incredible.

00:01:46.799 --> 00:01:49.289
So, I'm going to walk through the features.

00:01:49.290 --> 00:01:50.970
First, VoiceOver.

00:01:50.969 --> 00:01:58.359
So, VoiceOver is screen access technology that allows
somebody who's blind or visually impaired to use the device.

00:01:58.359 --> 00:02:01.989
So effectively, it speaks things that are on the screen.

00:02:01.989 --> 00:02:04.509
It speaks as a result of user activity.

00:02:04.510 --> 00:02:07.730
It plays sound effects to help embellish that experience.

00:02:07.730 --> 00:02:14.469
So it's effectively, it's a spoken interface with some
extra sound effects to make it a really rich experience.

00:02:14.469 --> 00:02:19.259
And so to put VoiceOver into iPhone, there
were a couple of important things that we did.

00:02:19.259 --> 00:02:23.469
VoiceOver, perhaps some of you
know is a technology that we have

00:02:23.469 --> 00:02:26.909
in several products now, most notably
on our desktop platform.

00:02:26.909 --> 00:02:33.469
So it's a very feature-rich mature screen reading
application for users who are visually impaired.

00:02:33.469 --> 00:02:37.139
And to move that into iPhone, we
had to make it iPhone simple.

00:02:37.139 --> 00:02:44.759
We had to take something that is relatively mature that's
based a lot on keyboard activity because of its roots

00:02:44.759 --> 00:02:50.299
but make it available on a device that has no
keyboard for users that have an expectation

00:02:50.300 --> 00:02:54.310
that it's really approachable, really usable,
really fun and we think we've done that.

00:02:54.310 --> 00:03:00.229
The other thing we needed to do is create an
experience where it's safe to touch the device.

00:03:00.229 --> 00:03:05.310
So when you can see the screen, you explore
with your eyes, you control with touch.

00:03:05.310 --> 00:03:11.490
But when you can't see the screen, you need to be able
to explore with touch safely without pressing buttons

00:03:11.490 --> 00:03:13.800
or doing things that you didn't intend to do.

00:03:13.800 --> 00:03:18.830
And then when you're ready to do that, do a few gestures
to actually make the phone do interesting things.

00:03:18.830 --> 00:03:20.020
And so we've done both of those things.

00:03:20.020 --> 00:03:23.020
So I'm going to demo that in a few minutes.

00:03:23.020 --> 00:03:23.930
We've added Zoom.

00:03:23.930 --> 00:03:26.140
Now this is full screen zoom.

00:03:26.139 --> 00:03:28.519
This doesn't replace the zoom that exists on the phone.

00:03:28.520 --> 00:03:32.670
All the zoom features that you know and
love, pinching in Safari, and in mail,

00:03:32.669 --> 00:03:35.199
and in maps, all of that stuff just works.

00:03:35.199 --> 00:03:36.549
This is a full screen zoom.

00:03:36.550 --> 00:03:40.780
It zooms the entire screen up to 500 percent.

00:03:40.780 --> 00:03:46.169
So because of this, it uses a different gesture set
which I'm going to demonstrate quickly in a few minutes.

00:03:46.169 --> 00:03:51.389
We've added White on Black which for some
visually impaired users makes it more comfortable

00:03:51.389 --> 00:03:55.139
and easier to see the screen.

00:03:55.139 --> 00:04:02.229
Mono Audio, so for somebody with a hearing impairment on
one side, this sends both channels of audio to both ears.

00:04:02.229 --> 00:04:06.219
And then what we think of this neat
little feature, Speak Auto-text.

00:04:06.219 --> 00:04:12.539
So, you know these bubbles that appear when you are typing
along to suggest a correction or misspelling or to notify

00:04:12.539 --> 00:04:18.719
of a misspelling, this will actually speak what
pops up automatically with text-to-speech synthesis.

00:04:18.720 --> 00:04:24.700
And so really good if you're using zoom and
that bubble pops up and it's panned off screen

00:04:24.699 --> 00:04:29.420
but we actually think it's going to be useful for all
users just because sometimes even as a sighted user,

00:04:29.420 --> 00:04:32.550
I myself just stare at the keyboard
and I might miss what's popping up.

00:04:32.550 --> 00:04:35.040
So it's a nice convenience feature too.

00:04:35.040 --> 00:04:41.370
And then there's how we turn on these
features and this is really important.

00:04:41.370 --> 00:04:45.560
You can turn it on of course from the
phone and the reason that's important is

00:04:45.560 --> 00:04:48.430
because we want you to try all these features with your app.

00:04:48.430 --> 00:04:53.650
And so you just drill down to the panel, turn the things
on that you want and start moving around and using them

00:04:53.649 --> 00:04:56.379
with your application to see how well it works.

00:04:56.379 --> 00:05:01.800
If you need these features as a user before you can
even get into the phone, it's also really important

00:05:01.800 --> 00:05:04.270
that you can turn it on from iTunes
which of course you can do.

00:05:04.269 --> 00:05:12.069
So when you see your main panel in iTunes for iPhone
3GS, you'll see a button here, Configure Universal Access

00:05:12.069 --> 00:05:15.790
and that will open a little panel and then you
can choose the features that you want to turn on,

00:05:15.790 --> 00:05:18.420
click OK and suddenly they're enabled in your phone.

00:05:18.420 --> 00:05:24.150
Your phone will start talking or you'll
have zoom features or any of the others.

00:05:24.149 --> 00:05:28.370
So, I am going to give you a demo of the phone.

00:05:28.370 --> 00:05:33.120
Alright, so here's a phone and I'm going to turn it on.

00:05:33.120 --> 00:05:37.280
Let's go in.

00:05:37.279 --> 00:05:42.539
We'll go to Settings and we'll go to General.

00:05:42.540 --> 00:05:44.460
And here is our new button.

00:05:44.459 --> 00:05:48.310
See the Accessibility button here, I'm going to press it.

00:05:48.310 --> 00:05:50.240
And here are the new features in our panel.

00:05:50.240 --> 00:05:53.660
I'm going to spend a few moments on Zoom and
then I'm going to spend time on VoiceOver.

00:05:53.660 --> 00:05:55.400
So let's go into Zoom first.

00:05:55.399 --> 00:05:56.449
We'll just turn it on.

00:05:56.449 --> 00:06:00.439
So, Zoom, full screen zoom, uses a three-finger gesture.

00:06:00.439 --> 00:06:02.250
Basically I take three fingers.

00:06:02.250 --> 00:06:05.399
Double tap to zoom in, double tap to zoom out.

00:06:05.399 --> 00:06:09.459
And when I'm in, I can move around.

00:06:09.459 --> 00:06:12.599
I can trough as one would expect.

00:06:12.600 --> 00:06:19.240
I can increase zoom by double tap
and push up and push down like so.

00:06:19.240 --> 00:06:22.009
Let's go somewhere else.

00:06:22.009 --> 00:06:30.060
So, I go to Notes and if I'm doing
a control which requires panning,

00:06:30.060 --> 00:06:33.389
it automatically will pan with
me as I move around the screen.

00:06:33.389 --> 00:06:33.899
So that's it.

00:06:33.899 --> 00:06:35.649
It's really simple.

00:06:35.649 --> 00:06:38.370
And so that's Zoom.

00:06:41.540 --> 00:06:49.100
And now I will go to Accessibility and
turn Zoom off and we'll go to VoiceOver.

00:06:49.100 --> 00:06:51.530
Alright, so here's VoiceOver.

00:06:51.529 --> 00:06:55.369
>> VoiceOver on, Settings, Accessibility, Plug-in.

00:06:55.370 --> 00:07:01.939
>> So already VoiceOver is speaking to me and it's speaking
descriptions of the screen and I'm just going to go Home.

00:07:01.939 --> 00:07:03.019
>> Messages.

00:07:03.019 --> 00:07:08.310
>> Now remember how I talked about having the ability to
touch anything on the screen and be in a safe environment,

00:07:08.310 --> 00:07:09.790
so that I'm not actually doing anything yet.

00:07:09.790 --> 00:07:10.629
I'm just exploring.

00:07:10.629 --> 00:07:13.719
So here are the ways that you explore with VoiceOver.

00:07:13.720 --> 00:07:15.040
I can just touch the screen.

00:07:15.040 --> 00:07:19.180
>> Photos, Calculator, Notes, Voice Memos.

00:07:19.180 --> 00:07:21.340
>> I can drag around the screen.

00:07:21.339 --> 00:07:26.469
>> Web, Calculator, Clock, Notes, iTunes.

00:07:26.470 --> 00:07:29.770
>> And you'll notice you hear this ticking sounds
and that tells me when I'm crossing a boundary.

00:07:29.769 --> 00:07:32.469
So right away if I can't see the screen.

00:07:32.470 --> 00:07:33.370
>> Screen curve none.

00:07:33.370 --> 00:07:35.300
>> Which by the way we can simulate for you.

00:07:35.300 --> 00:07:37.740
>> Ca-- Photos, Camera, Weather.

00:07:37.740 --> 00:07:39.389
>> You can see how important that becomes.

00:07:39.389 --> 00:07:43.490
I'm going to turn it back on for demo purposes.

00:07:43.490 --> 00:07:49.530
Now you also might notice this black and white box
that's around, around the Weather icon right now

00:07:49.529 --> 00:07:52.509
and that's the VoiceOver cursor and
that's the last thing that's spoken.

00:07:52.509 --> 00:07:56.339
It's the thing that's selected and as I move my finger--

00:07:56.339 --> 00:07:58.539
>> Clock, Notes, Voice Memos.

00:07:58.540 --> 00:08:00.870
>> -- that follows me around the screen.

00:08:00.870 --> 00:08:03.970
And I can also move it around simply by flicking.

00:08:03.970 --> 00:08:06.630
>> Notes, Clock, Calculator, Settings, iTunes.

00:08:06.629 --> 00:08:09.069
>> And this assures that I can get
to every element on the screen.

00:08:09.069 --> 00:08:13.170
So if the screen is really dense with elements
and I can't quite get my finger on the one I want,

00:08:13.170 --> 00:08:15.819
I can get near it and then I can flick left or right.

00:08:15.819 --> 00:08:16.610
>> Settings, iTunes.

00:08:16.610 --> 00:08:18.199
>> For example if I touch up the Title Bar.

00:08:18.199 --> 00:08:21.310
>> 9:07 a.m., status power 85 percent battery power.

00:08:21.310 --> 00:08:24.790
Status 9:07 a.m. 100 percent WiFi signal.

00:08:24.790 --> 00:08:26.500
9:08 a.m. Clock.

00:08:26.500 --> 00:08:31.319
>> So I can get the things and then I can
move around within them very, very easily.

00:08:31.319 --> 00:08:37.299
OK, so the next thing I might want to do of course is
interact with something and the way I would do that,

00:08:37.299 --> 00:08:42.509
the most common way is to just do a simple double
tap and what's nice about this is I don't have

00:08:42.509 --> 00:08:45.230
to double tap on the phone icon here for example.

00:08:45.230 --> 00:08:50.480
I can double tap anywhere on the screen and
it will go to where the VoiceOver cursor is.

00:08:50.480 --> 00:08:53.789
>> Phone, phone number 529.

00:08:53.789 --> 00:08:54.990
Delete number.

00:08:54.990 --> 00:08:56.149
Delete. Delete.

00:08:56.149 --> 00:08:59.629
>> OK, and I can just press buttons.

00:08:59.629 --> 00:09:04.379
>> 5, 5, 6, 6, 7, 7.

00:09:04.379 --> 00:09:04.879
>> Like so.

00:09:04.879 --> 00:09:07.200
So it's very simple to interact with the device.

00:09:07.200 --> 00:09:07.840
Let's go home.

00:09:07.840 --> 00:09:09.690
Trust that I could make a phone call if I wanted to.

00:09:09.690 --> 00:09:11.950
Let's look at a few other things.

00:09:11.950 --> 00:09:19.140
So, we've made every application that Apple
produces and ships on iPhone 3GS accessible.

00:09:19.139 --> 00:09:20.929
And I obviously can't show them all here.

00:09:20.929 --> 00:09:22.409
So I'm just going to show a couple.

00:09:22.409 --> 00:09:23.649
I'm going to go to Stocks.

00:09:23.649 --> 00:09:25.629
>> Stocks.

00:09:25.629 --> 00:09:34.090
Stocks, Dow Jones industrial average 8,793.74 up 54.72.

00:09:34.090 --> 00:09:36.620
Change of 0.63 percent.

00:09:36.620 --> 00:09:39.100
>> So, automatically and this happens on a lot of screens,

00:09:39.100 --> 00:09:41.889
it will read summary information for
me right when I go into the screen.

00:09:41.889 --> 00:09:43.870
It gives me what I want to know usually very quickly.

00:09:43.870 --> 00:09:46.310
And then I can move around here same way.

00:09:46.309 --> 00:09:54.189
>> Dow, NASDAQ, S&P, Apple Incorporated 140.92
have 0-- Google Inc-- Yahoo Incorporated.

00:09:54.190 --> 00:10:01.400
>> Now the other important thing that I want to point out
is that we've really tried to uncover and do a complete job,

00:10:01.399 --> 00:10:05.539
uncover all the nooks and crannies of the user
interface and go to great detail to make it accessible.

00:10:05.539 --> 00:10:08.039
So for example, even the graph works.

00:10:08.039 --> 00:10:12.549
>> May 4th, March 30th, February 24th, January 20th, 3--st yl8

00:10:12.549 --> 00:10:18.500
>> And this is important because we know that there are so
many graphical aspects to iPhone applications especially

00:10:18.500 --> 00:10:25.059
in your applications and we've provided API which
we think will help you do this with minimal effort.

00:10:25.059 --> 00:10:27.769
So Chris is going to be talking
about that in a little while.

00:10:27.769 --> 00:10:36.579
Let's go out of here and, so another very important
application to users, especially visually impaired users,

00:10:36.580 --> 00:10:42.770
well all users, but important that
we get it right, is web browsing.

00:10:42.769 --> 00:10:44.189
>> Safari, Apple Link.

00:10:44.190 --> 00:10:52.040
>> And I'm happy to say that what iPhone gave us with Touch
provides probably the most realistic web browsing experience

00:10:52.039 --> 00:11:00.539
of any screen reader to date and that's because
I can simply touch anywhere on the screen.

00:11:00.539 --> 00:11:04.009
>> [Inaudible] of Apple and Universal Access logos.

00:11:04.009 --> 00:11:06.539
For more than 20 years, Apple  has provided--

00:11:06.539 --> 00:11:09.980
>> I can basically touch anywhere on the
screen and now I instantly know the layout.

00:11:09.980 --> 00:11:14.230
Now this is important because on any other
screen reading application for example,

00:11:14.230 --> 00:11:17.700
on a desktop I just have a keyboard
and so I'm moving between elements.

00:11:17.700 --> 00:11:19.290
Now I can actually touch the screen.

00:11:19.289 --> 00:11:21.819
I know it's there, I know what
the graphic designers had in mind.

00:11:21.820 --> 00:11:28.280
So it's really, really-- it's really fan-- it's
actually profound for users of this technology.

00:11:28.279 --> 00:11:29.709
And of course I can find anything.

00:11:29.710 --> 00:11:31.870
>> The new iPhone 3GS includes a screen reader.

00:11:31.870 --> 00:11:37.889
The new iPhone 3GS includes a screen reader, full screen
magnification and other new accessibility features.

00:11:37.889 --> 00:11:39.169
Learn more, Link.

00:11:39.169 --> 00:11:40.620
Mac OS X Snow Leopard disk.

00:11:40.620 --> 00:11:40.810
[ Simultaneous Talking ]

00:11:40.809 --> 00:11:42.039
>> So I'm showing you read all.

00:11:42.039 --> 00:11:43.769
>> Mac OS X Snow Leopard.

00:11:43.769 --> 00:11:49.100
>> And I can pause speaking by
just doing a tap with two fingers.

00:11:49.100 --> 00:11:58.500
So expert screen reader users expects in their web browsing
experience the ability to jump around to find elements very,

00:11:58.500 --> 00:12:04.240
very quickly and we really wanted to bring this
to iPhone but the challenge was how do we do that

00:12:04.240 --> 00:12:08.399
and keep the gesture set simple so that there's
not a lot to learn and it's really intuitive

00:12:08.399 --> 00:12:10.490
and we think we've come up with a good way to do that.

00:12:10.490 --> 00:12:17.279
So for example, I might want to jump between all the
headers in the document or all the links or all the images

00:12:17.279 --> 00:12:19.569
so that I don't have to wade through the other stuff.

00:12:19.570 --> 00:12:23.860
And what we've come up with is a concept called
the rotor and the rotor is like turning a dial

00:12:23.860 --> 00:12:26.899
on the iPod, or excuse me, on the iPhone.

00:12:26.899 --> 00:12:29.699
>> Links, Form Element, Visited Links, Non-Visited Links.

00:12:29.700 --> 00:12:31.580
>> Just think of it like turning a dial.

00:12:31.580 --> 00:12:36.629
>> Visited Links, Non-Visit-- Images,
Characters, Words, Headers.

00:12:36.629 --> 00:12:38.240
>> And there's headers.

00:12:38.240 --> 00:12:41.549
>> iPod shuffle, Heading Level 4, Link, [inaudible].

00:12:41.549 --> 00:12:47.769
Heading Level 4, Link, Products, Heading Level 3.

00:12:47.769 --> 00:12:53.590
>> So really, really, really powerful
web browsing capabilities.

00:12:53.590 --> 00:12:57.180
Alright, so, of course iPhone is also a great iPod.

00:12:57.179 --> 00:12:58.259
>> iPod.

00:12:58.259 --> 00:12:59.059
>> Let's go with iPod.

00:12:59.059 --> 00:13:01.129
Let's pick a track.

00:13:01.129 --> 00:13:02.539
>> Big Whisky and the Groogrux King.

00:13:02.539 --> 00:13:08.129
iTunes Pass, Big Whisky and-- Lying in the Hands of God.

00:13:08.129 --> 00:13:10.899
[Background music] Dave Matthews'
Band, Lying in the Hands of God.

00:13:10.899 --> 00:13:11.120
[ Inaudible Remark ]

00:13:11.120 --> 00:13:14.909
>> Big Whisky and the Groogrux King, iTunes Pass, iPod.

00:13:14.909 --> 00:13:18.209
>> So of course iPod is fully accessible,
everything is fully accessible,

00:13:18.210 --> 00:13:20.120
but there are a couple of nice
things I want to point out here.

00:13:20.120 --> 00:13:26.220
First is you may have noticed I paused music without
pressing an actual tangible button on the screen

00:13:26.220 --> 00:13:32.000
and we determined that sometimes you want to do something on
the phone where you don't really want to fumble like pausing

00:13:32.000 --> 00:13:38.350
and playing music, like answering and hanging up a phone
call or ending a phone call, like pausing and playing video

00:13:38.350 --> 00:13:43.779
and so we've invented this two finger
double tap kind of does the right thing

00:13:43.779 --> 00:13:46.519
and so for example since I was just playing music.

00:13:46.519 --> 00:13:52.579
[Music] I can pause and play that music
really, really easily from anywhere.

00:13:52.580 --> 00:13:58.540
The other thing you might notice, actually I'm going to ask
you to notice in a second is that we do really great ducking

00:13:58.539 --> 00:14:04.009
and this improves the experience when your listening
to text to speech so much when you're using your iPod.

00:14:04.009 --> 00:14:09.269
[ Music ]

00:14:09.269 --> 00:14:14.529
[ Voice Over ]

00:14:14.529 --> 00:14:18.720
>> So you hear the video ducking, I mean the audio ducking.

00:14:18.720 --> 00:14:22.110
OK, so that's iPod.

00:14:22.110 --> 00:14:26.639
Now you might be asking the question
how does this work with my application

00:14:26.639 --> 00:14:29.429
that we're producing, does this only work with Apple stuff.

00:14:29.429 --> 00:14:36.289
And so like our other accessibility technologies on other
platforms we have full accessibility API that we've designed

00:14:36.289 --> 00:14:42.309
and we have gone to great lengths to burn it into
all of the UIKit controls so that it's there for you

00:14:42.309 --> 00:14:45.069
and in a lot of cases just works automatically.

00:14:45.070 --> 00:14:48.970
And so to illustrate that I'm just going to go
into an application that's from the App Store.

00:14:48.970 --> 00:14:52.160
I'm going to go into Urban Spoon.

00:14:52.159 --> 00:14:54.009
>> Urban Spoon.

00:14:54.009 --> 00:14:56.049
Urban Spoon, Location, Button.

00:14:56.049 --> 00:15:03.209
>> Now Urban Spoon, like all of you, had no idea
about any of these features until this week,

00:15:03.210 --> 00:15:11.740
so this is stock right down from the App Store, no changes,
no accessibility in mind and here's how well it works.

00:15:11.740 --> 00:15:21.629
>> ...Indonesian, Indian-- Indian, dollar sign, dollar
sign, dollar sign, dollar sign, picker item adjustable.

00:15:21.629 --> 00:15:25.330
>> Wow, so pretty accessible but
it also shows a couple of things.

00:15:25.330 --> 00:15:29.150
For example, we were able to pick out
those dollar signs and speak them.

00:15:29.149 --> 00:15:34.500
This is Urban Spoon's opportunity for example to say
well we really want to say high roller or low roller

00:15:34.500 --> 00:15:39.539
or some other thing that reflects how they want
to articulate what that dollar sign value means,

00:15:39.539 --> 00:15:44.289
and so we provide tools to do that and Chris is
going to talk about those in a couple of minutes

00:15:44.289 --> 00:15:50.799
and so let's do a Shake for the fun of it.

00:15:50.799 --> 00:15:51.500
[ Noise ]

00:15:51.500 --> 00:15:58.720
[ Voice Over ]

00:15:58.720 --> 00:16:05.170
>> I mean really actually even-- even I was astounded
by how accessible it is just right off the shelf

00:16:05.169 --> 00:16:09.360
and so we're hoping that-- we think that
you're going to experience the same thing

00:16:09.360 --> 00:16:14.720
and then for the few things you can embellish, it
will make a really fantastic experience for our users.

00:16:14.720 --> 00:16:20.710
Alright, so I just want to end on one
thing and I'm going to go into Settings.

00:16:20.710 --> 00:16:26.180
So some of you might be wondering [background voice
over] how does this work for international customers.

00:16:26.179 --> 00:16:27.279
So I'm going to show you.

00:16:27.279 --> 00:16:31.389
We're going to go International.

00:16:31.389 --> 00:16:35.220
Francais. Deutsch.

00:16:35.220 --> 00:16:46.490
Italiano. English

00:16:46.490 --> 00:16:51.620
>> So we ship over 20 voices with iPhone 3GS.

00:16:51.620 --> 00:16:55.600
VoiceOver is localized for all of them, totally works.

00:16:59.269 --> 00:17:03.500
[Applause] So with that, I'd like to invite
my colleague Chris on stage to tell you how

00:17:03.500 --> 00:17:05.180
to make it all work in your applications.

00:17:05.180 --> 00:17:06.090
[ Applause ]

00:17:06.089 --> 00:17:09.199
>> Thanks Eric.

00:17:11.660 --> 00:17:12.490
That is a great demo.

00:17:12.490 --> 00:17:17.250
So as you've seen we've done a lot of work to
make all the Apple apps accessible out of the box.

00:17:17.250 --> 00:17:22.930
Now I'm going to talk about how to make
your app accessible and we've spent a lot

00:17:22.930 --> 00:17:24.670
of effort to make this as easy as possible.

00:17:24.670 --> 00:17:30.769
We don't want to make it an onerous or burdensome task
and I think you'll find that we've done just that.

00:17:30.769 --> 00:17:39.569
So the UIAccessibility API is new for iPhone 3.0 and it
allows your app to provide information about the elements

00:17:39.569 --> 00:17:42.970
on the screen to an assistive application like VoiceOver.

00:17:42.970 --> 00:17:48.710
So before I dive in to the protocol,
and we start looking at the details,

00:17:48.710 --> 00:17:53.539
let me just give you a quick overview
of how accessibility works on the phone.

00:17:53.539 --> 00:17:58.190
We have VoiceOver which runs in the background and your app.

00:17:58.190 --> 00:18:05.120
Now your app might have a button like Start and
VoiceOver would like to get some information about that.

00:18:05.119 --> 00:18:14.529
So using the UIAccessibility protocol, VoiceOver
will ask your app for the button at this position.

00:18:14.529 --> 00:18:20.279
Your app then says this button is at this
position, it turns that information to VoiceOver

00:18:20.279 --> 00:18:25.539
and then VoiceOver is able to get the text and say start.

00:18:25.539 --> 00:18:32.409
So the first thing to know about iPhone Accessibility
API is that it's simple and if you use UIKit for most

00:18:32.410 --> 00:18:36.140
of your controls, a large amount of
the work is already done for you.

00:18:36.140 --> 00:18:42.430
In fact most apps you only really need to provide a
few labels for some elements that appear as images

00:18:42.430 --> 00:18:48.460
or maybe need a little bit more
descriptive information about them.

00:18:48.460 --> 00:18:50.779
So let's look at the API.

00:18:50.779 --> 00:18:55.549
The Attributes API has six things and that's it.

00:18:55.549 --> 00:19:02.319
Most of them you won't even need to use,
so I won't go through all of them here.

00:19:02.319 --> 00:19:06.990
We'll go through the common ones and then we'll look at
some of the ones that you won't need to use as often.

00:19:06.990 --> 00:19:17.380
So the most common attributes you'll need to implement are--
is accessibilityElement which is a Boolean that determines

00:19:17.380 --> 00:19:21.980
if this object is accessible and
that means it's visible to VoiceOver.

00:19:21.980 --> 00:19:28.430
So importantly, this means that this
object and traditionally it's a UIView

00:19:28.430 --> 00:19:35.570
that it does not have anymore information below it in any
subviews and its superview does not return any information.

00:19:35.569 --> 00:19:37.899
So this UIView is sort of the end of the line.

00:19:37.900 --> 00:19:41.300
This is the thing that's going
to give you all the information;

00:19:41.299 --> 00:19:49.750
accessibilityLabel is the textual representation for
this element and Start button that we saw before,

00:19:49.750 --> 00:19:55.890
accessibilityLabel would be the start
and that's an NSString, so pretty simple.

00:19:55.890 --> 00:20:01.440
With just those two things you're going to
get 85 percent of the way there for your app.

00:20:01.440 --> 00:20:08.740
Another common attribute that you may or may not need to
change are accessibilityTraits and traits are a new concept

00:20:08.740 --> 00:20:14.799
for the iPhone 3.0 SDK, a little bit
different from the desktop accessibility.

00:20:14.799 --> 00:20:19.079
>> And these are a set of traits that you OR together

00:20:19.079 --> 00:20:24.210
and they help define the status,
the type and state for the element.

00:20:24.210 --> 00:20:31.009
Now, UIKit controls has already returned the appropriate
traits and other information for a variety of states.

00:20:31.009 --> 00:20:36.869
So that means if you need to return more trait
information, you should OR that with super

00:20:36.869 --> 00:20:39.909
so you get everything UIKit already throws in there.

00:20:39.910 --> 00:20:46.200
So let's look a little bit about
the traits and see an example.

00:20:46.200 --> 00:20:49.210
So I have all the traits listed here.

00:20:49.210 --> 00:20:57.000
We have things like button, link, whether it is a keyboard
key, whether it is an image, these are all well documented.

00:20:57.000 --> 00:21:01.920
There are some documents available
already for UIAccessibility protocols,

00:21:01.920 --> 00:21:05.710
so I'm not going to go through all of
these, but let's take a little look

00:21:05.710 --> 00:21:10.390
about where traits would fit in on a screen like this.

00:21:10.390 --> 00:21:15.880
So obviously we have a button up
in the top where we have a button.

00:21:15.880 --> 00:21:22.230
The picture would be labeled as an image
as that's what it is and on the bottom,

00:21:22.230 --> 00:21:27.890
we have something where the trait would say it
is not enabled because that icon is dimmed out

00:21:27.890 --> 00:21:30.250
and if you press it, nothing will happen in that case.

00:21:30.250 --> 00:21:36.309
So, we'll look a little bit more traits in the demo and
see how we can use them to make our app more accessible.

00:21:36.309 --> 00:21:43.440
So the other accessibility attributes
are there, you may need to use them,

00:21:43.440 --> 00:21:49.019
but most likely if your app is a standard UIKit
based app, you won't need to look at these.

00:21:49.019 --> 00:21:54.379
The accessibilityFrame is the onscreen
rectangle for the UIElement.

00:21:54.380 --> 00:21:58.000
If you're using UIViews, that's done automatically for you,

00:21:58.000 --> 00:22:02.359
so you never need to change accessibilityFrame
for anything that's a UIView.

00:22:02.359 --> 00:22:07.219
The accessibilityHint is a way for you
to give a little bit more information

00:22:07.220 --> 00:22:11.799
about what happens when an element is pressed.

00:22:11.799 --> 00:22:16.149
So we'll go into that but you can think
of this as just informing the user

00:22:16.150 --> 00:22:20.370
if the case is not really clear
what will happen when you press it.

00:22:20.369 --> 00:22:26.349
accessibilityValue is a way to
return some textual information

00:22:26.349 --> 00:22:29.269
that is different from the label and more dynamic.

00:22:29.269 --> 00:22:36.759
So the easiest way to think about this is a slider, so you
might have something where the slider is a volume slider.

00:22:36.759 --> 00:22:43.589
In that case, the accessibilityLabel would be volume,
but the accessibility value would be 75 percent

00:22:43.589 --> 00:22:49.389
so that allows us to distinguish between the two.

00:22:49.390 --> 00:22:51.600
So, how do we add accessibility?

00:22:51.599 --> 00:22:53.119
It's really, really easy.

00:22:53.119 --> 00:22:55.919
We are going to go through the easiest ways first.

00:22:55.920 --> 00:23:03.310
So, simple information can be added through Interface
Builder and in 3.0 SDK, you'll see there is this new pane

00:23:03.309 --> 00:23:10.629
in the Interface Builder that allows you
to change some accessibility information.

00:23:10.630 --> 00:23:14.440
So the other picture on this screen is
from the demo that we're going to use.

00:23:14.440 --> 00:23:18.880
It's just a UIView, a window with
a bunch of different UIViews.

00:23:18.880 --> 00:23:25.800
The blue UIView is selected in this case and we see
that some of the information is already filled in.

00:23:25.799 --> 00:23:27.589
One that it's enabled.

00:23:27.589 --> 00:23:31.179
Two that it is not an accessibilityElement.

00:23:31.180 --> 00:23:33.539
So, what are the fields in this pane?

00:23:33.539 --> 00:23:37.210
We can determine if accessibility
is on or off for an element.

00:23:37.210 --> 00:23:43.960
That is the accessibility flag and that tells us if
this UIView will return information to VoiceOver.

00:23:43.960 --> 00:23:49.500
There is the accessibility label which we can change,
the accessibility hint we can change and traits,

00:23:49.500 --> 00:23:52.990
which you can select and you don't
need to crazy with the traits just

00:23:52.990 --> 00:23:55.400
because there are check boxes that you can check.

00:23:55.400 --> 00:23:59.840
You only want to pick the ones that
are most appropriate for this element.

00:24:01.259 --> 00:24:06.029
So once you've added accessibility information
to your app, you're going to want to test it

00:24:06.029 --> 00:24:10.829
and Eric showed how you can test it with VoiceOver,
but when you're in the mode, you're in the zone,

00:24:10.829 --> 00:24:14.789
and you don't want to sync your app over
to your phone and turn on the VoiceOver,

00:24:14.789 --> 00:24:19.089
we've added an Accessibility Inspector to the simulator.

00:24:19.089 --> 00:24:24.509
So in the simulator and this is not
just for iPhone 3GS, this is in the SDK,

00:24:24.509 --> 00:24:29.509
in Settings and then in General,
there is now an Accessibility tab.

00:24:29.509 --> 00:24:36.799
When you go there, there is an Accessibility Inspector that
you can turn on and you get this little floating window.

00:24:36.799 --> 00:24:41.980
You can move this around so that you can click on things
and this Accessibility Inspector works a lot like VoiceOver.

00:24:41.980 --> 00:24:44.059
So, you click once to select something.

00:24:44.059 --> 00:24:48.529
That gives you information about it,
then you double-click to activate it.

00:24:48.529 --> 00:24:54.379
You can also minimize this window by clicking that
little Close button and then you can use the simulator

00:24:54.380 --> 00:24:57.890
like you normally do and just click to activate things once.

00:24:57.890 --> 00:25:06.320
Alright, so now I'm going to show you a demo and we're
going to start to look at how to make your app accessible.

00:25:09.039 --> 00:25:14.349
Alright, so here is the app that
we're going to make accessible.

00:25:14.349 --> 00:25:19.199
Let me just run through this and
we can get a feel for what it does.

00:25:19.200 --> 00:25:26.830
So I have a formula and as I change values, it
just sort of redraws a graph in different values.

00:25:26.829 --> 00:25:30.389
I can type something in here and
that will also change the graph.

00:25:30.390 --> 00:25:39.110
I can click here and then that sort of gives
me values for different portions of the graph.

00:25:39.109 --> 00:25:47.639
I have a Table button which brings in this view
and shows me lots of buttons and I have this thing

00:25:47.640 --> 00:25:50.380
which will start animating the graph automatically.

00:25:50.380 --> 00:25:58.140
Now the first thing you're thinking is how
can I get this app, I need this right now?

00:25:58.140 --> 00:26:01.720
Well, it should be available to you as a developer sample.

00:26:01.720 --> 00:26:09.009
If not yet, hopefully very soon and then once you get
that app you're going to wonder how accessible is this.

00:26:09.009 --> 00:26:18.200
So let's go and turn on the Accessibility
Inspector and we'll go to the-- Here, now it's on.

00:26:18.200 --> 00:26:23.690
So I can click things and it tells me information
about them such as the label in the frame.

00:26:23.690 --> 00:26:30.610
Here this tells me the label is general, the
trait is a button, and it also tells me the frame.

00:26:30.609 --> 00:26:32.049
So let's go home.

00:26:32.049 --> 00:26:35.919
So now, notice that the app is on the other screen.

00:26:35.920 --> 00:26:41.890
If I just try to switch over, it's not going to work,
so I'm going to minimize this and then switch over.

00:26:41.890 --> 00:26:46.150
I'll open up my app and now we can start examining things.

00:26:46.150 --> 00:26:48.320
So, I can click up here.

00:26:48.319 --> 00:26:49.299
Here is a label.

00:26:49.299 --> 00:26:53.169
It tells me that information automatically at static text.

00:26:53.170 --> 00:26:57.880
Here's a text field with the value,
but notice it does not have any label,

00:26:57.880 --> 00:27:01.050
so if I went to this, it would just say 0.15.

00:27:01.049 --> 00:27:05.159
Slider, same type of thing, I only have a value, no label.

00:27:05.160 --> 00:27:15.620
Down here at this button, it just says
button, it doesn't tell me what it does.

00:27:15.619 --> 00:27:20.379
Same with this thing over here, it's another
button, and here this doesn't tell me what it does.

00:27:20.380 --> 00:27:25.980
It just says visit our webpage but we don't
know if it is a button or a link or whatever.

00:27:25.980 --> 00:27:33.650
The graph is also a black box to
us because it's rather dynamic.

00:27:33.650 --> 00:27:39.840
This is not a standard UIKit control and we're going to
look at how to make that accessible in a few minutes.

00:27:39.839 --> 00:27:59.859
OK, so let's go to Xcode and alright, I'll just
open up the Xcode project again and we'll open

00:27:59.859 --> 00:28:07.949
up our Interface Builder first and we'll see what we can do.

00:28:07.950 --> 00:28:15.069
So, the first thing we get to is this
text field and let's add a label to this.

00:28:15.069 --> 00:28:19.069
We can call this Alpha, so we know that's Alpha.

00:28:19.069 --> 00:28:22.740
Now here's something I want to do.

00:28:22.740 --> 00:28:29.059
I have this little label that says Alpha equals right
next to the text box, but the text field also says Alpha

00:28:29.059 --> 00:28:35.159
and I don't want to make my app overly complicated with
lots of little labels all over the place, so in this case,

00:28:35.160 --> 00:28:40.430
I can just turn off accessibility for this
UI label so that it doesn't have to show up

00:28:40.430 --> 00:28:44.049
and so the user can get all the
information right in the text field.

00:28:44.049 --> 00:28:48.509
The slider also doesn't have a label,
so I can add that, something like Alpha.

00:28:48.509 --> 00:29:01.240
How about these buttons, no labels again, so for these
ones we can do something like show table and this one also,

00:29:01.240 --> 00:29:05.559
there's no label so we'll say start animating.

00:29:05.559 --> 00:29:07.829
Finally, we have this UIView.

00:29:07.829 --> 00:29:16.159
Notice that it's not enabled with accessibility,
so before we go into any big detail about how

00:29:16.160 --> 00:29:20.900
to make this graph accessible and all that
stuff, let's just see if we can make it show up.

00:29:20.900 --> 00:29:28.940
So, we'll say it's enabled and we'll say
it's graph for now and we'll save that.

00:29:28.940 --> 00:29:33.450
We'll run it and we'll see what happens.

00:29:33.450 --> 00:29:36.600
Alright, so I click there and all
of a sudden the label says Alpha.

00:29:36.599 --> 00:29:38.039
Alright, so things are working.

00:29:38.039 --> 00:29:43.460
I can no longer click on my Alpha here
because we've made that not accessible.

00:29:43.460 --> 00:29:46.840
My slider says Alpha.

00:29:46.839 --> 00:29:52.149
My graph now just says graph, so
that's good, it now appears.

00:29:52.150 --> 00:29:57.420
I have a Show Table button and a Start Animating button.

00:29:57.420 --> 00:30:02.930
Alright, so with just a few simple things in Interface
Builder, we've made this app a lot more accessible.

00:30:02.930 --> 00:30:08.460
All of a sudden, a VoiceOver user will know what
these buttons do and what's going on in the screen.

00:30:08.460 --> 00:30:13.269
So, there's a few more things we can do in
Interface Builder with some of the traits.

00:30:13.269 --> 00:30:23.970
>> So, let's go back and go back to Interface Builder
and see what traits we can use to change this.

00:30:23.970 --> 00:30:24.990
So here's an easy one.

00:30:24.990 --> 00:30:26.660
Visit our webpage.

00:30:26.660 --> 00:30:31.600
Now this would open up a webpage in
Safari that the user would browse to.

00:30:31.599 --> 00:30:38.459
So in that case we should say this thing is a
link because it opens up and opens up in Safari.

00:30:38.460 --> 00:30:46.960
Alright. So, another thing we noticed, you may have
noticed, is that when I press this button, it plays a sound

00:30:46.960 --> 00:30:53.319
and there's also a trait that says play sound.

00:30:53.319 --> 00:31:00.109
This is not a normal kind of trait that you think would
be important but when a VoiceOver user presses a button

00:31:00.109 --> 00:31:06.959
and activates it, VoiceOver automatically plays a sound and
that's so the VoiceOver user knows what they've just done.

00:31:06.960 --> 00:31:12.350
So if you play a sound and VoiceOver plays
a sound all kind of shenanigans break loose.

00:31:12.349 --> 00:31:16.969
So you don't want to both play a sound at the same
time and you can do that by saying this plays a sound.

00:31:16.970 --> 00:31:20.970
VoiceOver, you don't need to play a sound.

00:31:20.970 --> 00:31:23.210
Finally, we have this graph here.

00:31:23.210 --> 00:31:28.710
All we've done is just mail this one in and we'll
say it's a graph but we can also say it's an image

00:31:28.710 --> 00:31:33.180
so that the VoiceOver user doesn't get confused-- Is
this a control, what am I supposed to do with this graph?

00:31:33.180 --> 00:31:35.380
We can just save some image for now.

00:31:35.380 --> 00:31:45.340
So save that, run it again and
see if our changes took place.

00:31:45.339 --> 00:31:47.839
So here we have a link and it says play sound.

00:31:47.839 --> 00:31:50.869
It looks like I chose the wrong one but you get the idea.

00:31:50.869 --> 00:31:52.319
That link may also play a sound.

00:31:52.319 --> 00:31:55.079
I didn't click on it for all you know.

00:31:56.390 --> 00:32:00.410
Here the graph, it's-- it now has a trait as an image.

00:32:00.410 --> 00:32:01.620
So that's good.

00:32:01.619 --> 00:32:04.909
So with just a few clicks in the
check boxes we didn't go crazy.

00:32:04.910 --> 00:32:10.910
We've added a lot of accessibility to our app.

00:32:12.339 --> 00:32:19.809
Alright. So that will get you at least 85 percent
of the way there for accessibility for your app.

00:32:19.809 --> 00:32:21.289
It was that easy.

00:32:21.289 --> 00:32:28.049
So we also have ways to add accessibilities
to UIViews that are created programmatically

00:32:28.049 --> 00:32:30.940
or anything that you need to do in the code.

00:32:30.940 --> 00:32:34.630
And that can be done either through
setting accessibility attributes

00:32:34.630 --> 00:32:38.760
or by overriding the accessibility methods in an instance.

00:32:38.759 --> 00:32:39.930
So let's look at how that works.

00:32:39.930 --> 00:32:46.529
So, all of the accessibility attribute
methods have setters with them.

00:32:46.529 --> 00:32:51.730
And if you have an object that doesn't change
its label overtime, it's just there on the screen

00:32:51.730 --> 00:32:57.519
and it has something static like in this example
we have a UIControl that would be a Play button.

00:32:57.519 --> 00:33:01.069
You can set it right when you instantiate the object.

00:33:01.069 --> 00:33:05.069
So here what we've done is we say
setIsAccessibilityElement:YES.

00:33:05.069 --> 00:33:11.069
That means VoiceOver can see this and we say
setAccessibilityLabel to play and we're done.

00:33:11.069 --> 00:33:17.179
Ship it. But there are some other cases
that are a little bit more tricky.

00:33:17.180 --> 00:33:21.220
You might have a UIView that's label changes overtime.

00:33:21.220 --> 00:33:24.569
So you might think as something like a MyTemperatureView

00:33:24.569 --> 00:33:29.450
and in this UIView it would get some data
from somewhere and display temperature.

00:33:29.450 --> 00:33:35.850
So to make this accessible, we'll
first override isAccessibilityElement.

00:33:35.849 --> 00:33:37.589
Return yes for that.

00:33:37.589 --> 00:33:41.459
We'll override accessibilityLabel
to use some data model that we have.

00:33:41.460 --> 00:33:47.230
In this case I have something called cityWeather and
that can return me the current temperature string.

00:33:47.230 --> 00:33:51.990
So that can be returned to the accessibilityLabel
and be updated whenever the data model changes.

00:33:51.990 --> 00:33:59.950
I also have some accessibilityTraits here and I've added a
new one and that's the UIAccessibilityTraitSummaryElement.

00:33:59.950 --> 00:34:08.480
So this trait allows you to choose one element in your
app that when your app starts, VoiceOver will find

00:34:08.480 --> 00:34:12.780
and use the information from it to give an overview of that.

00:34:12.780 --> 00:34:17.550
So if this is some sort of weather app,
VoiceOver would start the app and it would say,

00:34:17.550 --> 00:34:21.030
"Application name, 75 degrees Fahrenheit."

00:34:21.030 --> 00:34:24.090
So without doing anything, the
VoiceOver user will get an overview

00:34:24.090 --> 00:34:26.760
of the most important information your app has to offer.

00:34:26.760 --> 00:34:28.540
Now you don't need to add this to your app.

00:34:28.539 --> 00:34:34.840
Not every app has a summary element that you want to
define but you may have something that requires that.

00:34:34.840 --> 00:34:36.829
I noticed I also OR'd with super.

00:34:36.829 --> 00:34:43.500
So I can get what other traits come through UIKit for free.

00:34:43.500 --> 00:34:49.780
So with those accessibility attribute methods,
we're able to adorn our UIViews and Elements

00:34:49.780 --> 00:34:53.750
with almost all the information VoiceOver needs to operate.

00:34:53.750 --> 00:34:58.489
There are also a few cases though that VoiceOver needs
to know when something has changed on the screen.

00:34:58.489 --> 00:35:03.269
And we can use notifications to tell
VoiceOver when something has happened.

00:35:03.269 --> 00:35:08.340
We have two notifications, one is
screen changed, one is layout changed.

00:35:08.340 --> 00:35:11.710
The screen change is when a whole new screen comes in,

00:35:11.710 --> 00:35:14.730
maybe it slides in from the bottom,
all the elements are different.

00:35:14.730 --> 00:35:21.780
In this example if I press the Bookmarks button
I'll get a screen that looks like this and I want

00:35:21.780 --> 00:35:24.269
to post a notification that says,

00:35:24.269 --> 00:35:28.340
UIAccessibilityPostNotification
(UIAccessibilityNotificationScreenChanged).

00:35:28.340 --> 00:35:33.470
Now that's a lot to type but don't worry
if you use autocomplete it's not that bad.

00:35:33.469 --> 00:35:39.000
So layout change is a little bit different and that
will be something more like if I press the Edit button.

00:35:39.000 --> 00:35:45.760
Now when I press the Edit button, I get a few new
elements in the screen but generally it's the same screen.

00:35:45.760 --> 00:35:51.180
So to inform VoiceOver of this change, I can
post a layout change notification instead.

00:35:51.179 --> 00:35:57.730
Alright, so let's look at how we can do this in the code.

00:35:57.730 --> 00:36:07.570
So I'm going to go back to Xcode
and we'll see what we can do.

00:36:07.570 --> 00:36:13.420
So, there's a few things we're going to
do to make this even better experience.

00:36:13.420 --> 00:36:17.990
I'm going to tell what they are because you don't know yet.

00:36:17.989 --> 00:36:22.000
And some of the things we missed out on were hints.

00:36:22.000 --> 00:36:24.449
We didn't add any hints.

00:36:24.449 --> 00:36:28.679
We didn't have-- we've had some few elements
that sort of change their behavior overtime.

00:36:28.679 --> 00:36:34.049
So the first thing I want to do
is change the Stopwatch button.

00:36:34.050 --> 00:36:40.610
And the Stopwatch button, what it did when
you pressed it on it started animating

00:36:40.610 --> 00:36:43.260
but when you pressed it again it stopped animating.

00:36:43.260 --> 00:36:49.800
So in that case the label sort of
changes when it goes from start to stop.

00:36:49.800 --> 00:36:57.740
So I can also update my label when that happens
and I'm going to find out the right place.

00:36:57.739 --> 00:37:03.409
And Stopwatch button was pressed.

00:37:03.409 --> 00:37:08.269
And here we're going to change the label
to be something a little bit more accurate.

00:37:08.269 --> 00:37:18.030
So I'll say Stopwatch set accessibilityLabel and
here is a state where it is changed from on to off

00:37:18.030 --> 00:37:24.780
and if it's now off, pressing it again will start animating.

00:37:24.780 --> 00:37:32.590
Likewise if I go from off to on
pressing it again will stop animating.

00:37:32.590 --> 00:37:38.940
So now I can change my label a little bit more
dynamically based on updating conditions in the app.

00:37:38.940 --> 00:37:41.940
Now the Stopwatch is a little bit of a strange creature.

00:37:41.940 --> 00:37:43.690
I'm really not sure what it does.

00:37:43.690 --> 00:37:51.579
It can start animating, stop animating but we can also add
a hint for this and I might want to that in viewDidLoad

00:37:51.579 --> 00:38:00.539
and then I can say Stopwatch set
accessibilityHint and I'll just toggles animation.

00:38:03.360 --> 00:38:06.660
So the user gets a little bit more
context of what was going on.

00:38:06.659 --> 00:38:14.839
So our GraphView right now, all we did was make an
accessibilityElement and we said that this was a graph.

00:38:14.840 --> 00:38:16.200
That's all we had.

00:38:16.199 --> 00:38:18.119
We can add a little bit more information to that.

00:38:18.119 --> 00:38:23.929
We can tell it it's a graph when the
Alpha value equals whatever it equals.

00:38:23.929 --> 00:38:26.039
So that won't be too hard.

00:38:26.039 --> 00:38:30.929
We're going to override accessibilityLabel
in the graphing view to do that.

00:38:30.929 --> 00:38:36.799
So I'm going to copy some code and pastes that.

00:38:36.800 --> 00:38:40.930
So now my accessibilityLabel will return
a string with format that says graph

00:38:40.929 --> 00:38:45.440
with Alpha of and then it paste in the right Alpha.

00:38:45.440 --> 00:38:49.190
So that will give a little bit
more context to a VoiceOver user.

00:38:49.190 --> 00:38:54.159
The last thing I want to show is posting a notification.

00:38:54.159 --> 00:38:57.389
So we do have a case where a new screen comes in.

00:38:57.389 --> 00:39:07.389
When I press this Table button, we get a whole new
screen that slides in and then also one that goes away.

00:39:07.389 --> 00:39:16.879
So we can-- here we want to post a notification
and I'll do that and Table button was pressed.

00:39:16.880 --> 00:39:19.000
And right at the end,

00:39:19.000 --> 00:39:31.170
I can say UIAccessibilityPostNotification UI accessibility
screen change notification and we don't need an argument.

00:39:31.170 --> 00:39:34.289
So it's much easier when I have autocomplete.

00:39:34.289 --> 00:39:39.449
Alright, so let's run it and see what
Accessibility Inspector tells us happened.

00:39:39.449 --> 00:39:46.309
So if I click on the graph, all of a
sudden it says graph with Alpha of 0.15.

00:39:46.309 --> 00:39:52.079
If I change the slider and look at it again,
it says graph of Alpha with a new value.

00:39:52.079 --> 00:39:57.940
So we've added a little bit more dynamicism
to our app with just a little bit of code.

00:39:57.940 --> 00:40:00.309
Let's check out this button over here.

00:40:00.309 --> 00:40:04.969
The label says start animating and it gives
me a hint which says toggles animation.

00:40:04.969 --> 00:40:12.129
If I press it, now the label says stop animating.

00:40:12.130 --> 00:40:17.010
So the VoiceOver user would know that if
I press this now it will stop animating.

00:40:17.010 --> 00:40:19.490
>> So that's pretty good.

00:40:19.489 --> 00:40:25.619
If I show this table, nothing happens now because
only VoiceOver listens to those notifications

00:40:25.619 --> 00:40:30.239
but rest assured the right thing will happen.

00:40:30.239 --> 00:40:38.649
Alright, so there it was, setting accessibility attributes.

00:40:38.650 --> 00:40:43.840
That's all you need to know to adorn your
UIViews with the right accessibility information

00:40:43.840 --> 00:40:50.890
to give users the best experience they can.

00:40:50.889 --> 00:40:58.049
So that will probably cover 95 percent of all the cases
for accessibility that you'll need to do in your app

00:40:58.050 --> 00:41:02.850
and we hope this will be a really easy experience
and something that won't be onerous or burden.

00:41:02.849 --> 00:41:07.449
It may even be fun when you can play
around and try it out with VoiceOver.

00:41:07.449 --> 00:41:11.730
Now, we haven't talked about some other cases
that you might have been wondering about,

00:41:11.730 --> 00:41:15.400
that is namely, how do we make the graph accessible?

00:41:15.400 --> 00:41:22.559
This looks like one UIView that draws a bar
line and is a little bit more complicated

00:41:22.559 --> 00:41:25.289
than some of the UIViews we've seen so far.

00:41:25.289 --> 00:41:33.610
So we have a protocol called the Accessibility Container
protocol that allows a UIView with separate subelements

00:41:33.610 --> 00:41:36.349
to return information about those subelements.

00:41:36.349 --> 00:41:44.819
So in this case we have one subelement that told
us something about January 1st and right next

00:41:44.820 --> 00:41:51.900
to it we have another subelement that
told us something about another date.

00:41:51.900 --> 00:41:59.440
So to implement the Accessibility Container protocol,
a UIView no longer is an accessibilityElement

00:41:59.440 --> 00:42:06.010
because its self doesn't return accessibility
information but it instead implements this three methods,

00:42:06.010 --> 00:42:10.360
accessibilityElementCount, returns the
number of elements this UIView has.

00:42:10.360 --> 00:42:18.990
accessibilityElementAtIndex which is just the element
from zero to the count and indexOfAccessibilityElement

00:42:18.989 --> 00:42:22.439
which gives you the location in the list of this element.

00:42:22.440 --> 00:42:27.809
So sort of like an array function that you can
call and get the right element that you want.

00:42:27.809 --> 00:42:38.829
So to make this as easy as possible, you can wrap
up all this accessibility information in an instance

00:42:38.829 --> 00:42:44.989
of UIAccessibilityElement which is a new class
in UIKit that you can create and it's made

00:42:44.989 --> 00:42:49.259
so that you can stick what you need
to into this object and return it.

00:42:49.260 --> 00:42:53.320
So let's see a little bit how this works.

00:42:53.320 --> 00:43:01.100
We have a object that you want to return information for
and we have a UIAccessibilityElement and what you want

00:43:01.099 --> 00:43:04.699
to do is first, initWithAccessibilityContainer

00:43:04.699 --> 00:43:09.629
and the Accessibility Container is the
UIView that contains it, obviously.

00:43:09.630 --> 00:43:12.059
In this case we'll call it the stockGraphView.

00:43:12.059 --> 00:43:17.849
Then we stick the right information into it like the
accessibilityLabel, in this case it will be January 1st

00:43:17.849 --> 00:43:22.860
and so on and we can do that by saying
chartPart.accessibilityLabel = this

00:43:22.860 --> 00:43:25.970
and then we need to set the accessibilityFrame

00:43:25.969 --> 00:43:31.849
Remember this is the onscreen rectangle that defines
where this object is and it is important to set it

00:43:31.849 --> 00:43:36.039
for this element because it's not a UIView.

00:43:36.039 --> 00:43:40.309
UIKit doesn't know where this object actually is onscreen.

00:43:40.309 --> 00:43:47.329
So you can do that by setting the accessibilityFrame
with the rectangle and then finally you want to add this

00:43:47.329 --> 00:43:50.539
to a list of children that you can keep around in reference.

00:43:50.539 --> 00:43:55.800
So at this point, I'm just going to show you some

00:43:55.800 --> 00:44:00.000
of the Accessibility Container
protocol and we'll see how that works.

00:44:00.000 --> 00:44:07.699
[ Pause ]

00:44:07.699 --> 00:44:12.079
>> So what are we going to make happen
with the Accessibility Container protocol?

00:44:12.079 --> 00:44:19.360
Well we have this graph and it's a UIView and it draws
some stuff and it also has these strange buttons here

00:44:19.360 --> 00:44:21.940
which don't like buttons but I can click on them.

00:44:21.940 --> 00:44:25.740
They don't look like buttons because
they're just NSStrings drawn at a point.

00:44:25.739 --> 00:44:30.629
Now, I want to take those NSStrings and
return accessibility information for them.

00:44:30.630 --> 00:44:37.750
Send them back through accessibility so that VoiceOver can
get to them and now they can press on them because right now

00:44:37.750 --> 00:44:41.389
if VoiceOver went to this, all it would
be able to do is just touch on this graph.

00:44:41.389 --> 00:44:46.779
Alright. So to do that we're going to go to graphing view.

00:44:46.780 --> 00:44:51.840
We no longer need this accessibilityLabel
so I'll just remove it

00:44:51.840 --> 00:44:56.070
because the graphing view no longer
returns information about accessibility.

00:44:56.070 --> 00:45:06.360
It returns children that have accessibility information
and the first thing I'm going to do is paste in the outline

00:45:06.360 --> 00:45:10.780
of what we want for the container protocol.

00:45:10.780 --> 00:45:17.110
So we have an isAccessibilityElement that will
be no because that's not an accessibilityElement.

00:45:17.110 --> 00:45:20.820
We have accessibilityElementCount
which is the number of children it has.

00:45:20.820 --> 00:45:29.090
The ElementAtIndex which is the element at that index and
the index of this object and notice how I've done this,

00:45:29.090 --> 00:45:35.720
I just referenced a function that we haven't yet defined
that will return an array and give me the right information

00:45:35.719 --> 00:45:38.089
so I can call normal array methods to do most of the work.

00:45:38.090 --> 00:45:42.059
I can call count on it object at index and index of object.

00:45:42.059 --> 00:45:45.889
So now we have the outline of this.

00:45:45.889 --> 00:45:52.440
We want to define this accessibility children
method which will make the right children for us.

00:45:52.440 --> 00:45:57.920
So I'm going to copy this in and paste it in.

00:45:57.920 --> 00:46:02.230
So what I have here will return the array only if the array

00:46:02.230 --> 00:46:06.170
and it will only make the array
if it has not been made already.

00:46:06.170 --> 00:46:09.030
You don't want to remake your accessibilityElements
over and over again.

00:46:09.030 --> 00:46:12.490
That's expensive and wasteful and
VoiceOver will get confused.

00:46:12.489 --> 00:46:16.549
So you can make an array, keep it
around and then just return that array.

00:46:16.550 --> 00:46:22.140
So my accessibility children is
a ivar for the class.

00:46:22.139 --> 00:46:26.909
We instance with it NSMutableArray and then we return it.

00:46:26.909 --> 00:46:31.789
So the next question is, how do we make the
UIAccessibilityElements and have some code.

00:46:31.789 --> 00:46:34.809
It's quite a lot that I'm going to
paste in but it's not complicated.

00:46:34.809 --> 00:46:39.250
A lot of it is just duplicated over and over again.

00:46:39.250 --> 00:46:45.269
So for my first element, I have a
graph element and that will sort

00:46:45.269 --> 00:46:50.070
of represent the picture of the graph at this point.

00:46:50.070 --> 00:46:55.400
So I make this element, I initWithAccessibilityContainer
self cause self is a container for it.

00:46:55.400 --> 00:47:01.050
I set the accessibilityLabel to graph at this point.

00:47:01.050 --> 00:47:03.269
We can do more later if we wanted to.

00:47:03.269 --> 00:47:06.289
I set the accessibilityTraits to the trait image.

00:47:06.289 --> 00:47:12.369
You know what, I don't have to OR it with super
here because super is just accessibilityElement.

00:47:12.369 --> 00:47:15.730
It's not, there's nothing else
behind it that gives us information

00:47:15.730 --> 00:47:19.230
and then I add that object to my list of children.

00:47:19.230 --> 00:47:23.829
So I add this object first so that
VoiceOver will reach it first.

00:47:23.829 --> 00:47:28.500
Eric demoed where you can flick with your
finger to get through the elements in order.

00:47:28.500 --> 00:47:31.159
Well the order is determined by things like this.

00:47:31.159 --> 00:47:35.210
So I put the graph first so that the
VoiceOver user gets to this object first.

00:47:35.210 --> 00:47:39.470
Now, we want to make accessibilityElements for each button.

00:47:39.469 --> 00:47:44.019
So I have similar type of code, I have button 1,

00:47:44.019 --> 00:47:49.210
I initWithAccessibilityContainer self
and then I set that label for this.

00:47:49.210 --> 00:47:50.079
And what is the label?

00:47:50.079 --> 00:47:57.630
Well if you remember, it's something like F of
negative pi over 2 and F of 0 and F of pi over 2.

00:47:57.630 --> 00:48:01.360
So I'll just set that as the accessibilityLabel,
F of negative pi over 2.

00:48:01.360 --> 00:48:07.110
I'll give this a button trait because that's what we
want it to behave like and add it to my list of children.

00:48:07.110 --> 00:48:12.630
I then do the same thing for button 2 and for button 3.

00:48:12.630 --> 00:48:17.640
Alright, so we got those buttons
made, we stuck them in the array.

00:48:17.639 --> 00:48:21.409
We're almost there except for one
more thing, we have to set the frame

00:48:21.409 --> 00:48:26.059
so that VoiceOver knows where on
screen to find these things.

00:48:26.059 --> 00:48:34.889
So once again I will paste a large amount of code
in and how I'm going to find this frame is I'm going

00:48:34.889 --> 00:48:40.099
to use my accessibilityFrame to
base my calculations off of it.

00:48:40.099 --> 00:48:43.159
So we have this graphing view and it's a UIView.

00:48:43.159 --> 00:48:50.239
We know where it exists on screen and we can find out
where it exists on screen by saying self accessibilityFrame

00:48:50.239 --> 00:48:55.419
and then use that information to set my
buttons' frames to the various things.

00:48:55.420 --> 00:48:58.210
So I'll set my height and width to something static

00:48:58.210 --> 00:49:06.880
that I found is appropriate then button 1
accessibilityFrame starts somewhere close to the left side

00:49:06.880 --> 00:49:10.480
and starts somewhere down on the bottom as width and height.

00:49:10.480 --> 00:49:12.679
Button 2 starts over in the middle.

00:49:12.679 --> 00:49:15.089
Button 3 starts over at the end.

00:49:15.090 --> 00:49:18.450
So I do all that and I just found this by trial and error.

00:49:18.449 --> 00:49:21.779
I'm sure you can think of more creative ways to do this.

00:49:21.780 --> 00:49:29.290
Finally, I have the graph accessibilityFrame which
starts at the top and then goes down to the buttons.

00:49:29.289 --> 00:49:31.599
Alright, so we have all this accessibility information.

00:49:31.599 --> 00:49:37.670
We'll run it and we'll see what happens.

00:49:37.670 --> 00:49:45.710
So now when I click here, notice it's
only selecting part of the graph.

00:49:45.710 --> 00:49:48.929
That's because we have an accessibilityElement
just for that graph.

00:49:48.929 --> 00:49:52.279
Notice it also says graph and it's
an image just like we said.

00:49:52.280 --> 00:49:55.000
I can now click her on these buttons.

00:49:55.000 --> 00:50:04.480
Here is F of negative pi over 2, F of 0, and F of pi
over 2 and as a VoiceOver user I can now click on them

00:50:04.480 --> 00:50:12.800
and then go here and get the information that a sighted
user also gets and I can do that for all the buttons.

00:50:12.800 --> 00:50:19.630
>> So we've taken what was a very custom UIView, one that
drew a graph and took NSStrings and drew them at points

00:50:19.630 --> 00:50:24.990
and we've changed them into the necessary
information so that VoiceOver users could get to them.

00:50:24.989 --> 00:50:26.709
Now, you might think what about the graph?

00:50:26.710 --> 00:50:27.780
Can we do a better job?

00:50:27.780 --> 00:50:31.130
I'll leave that as an exercise to the reader.

00:50:34.460 --> 00:50:41.340
So that's the Accessibility Container
protocol and that is the Accessibility API.

00:50:41.340 --> 00:50:43.180
That's all there is to it.

00:50:43.179 --> 00:50:50.730
You can make all your apps accessible using just this API
just like we've done with all the Apple internal apps.

00:50:50.730 --> 00:50:55.130
As you've seen most of the work is already done
for you so you probably won't even have to do some

00:50:55.130 --> 00:50:57.170
of the complicated stuff we did at the end.

00:50:57.170 --> 00:51:02.700
Now, there's a few good ideas that you should
keep in mind when you're crafting your labels

00:51:02.699 --> 00:51:05.369
and other information for VoiceOver users.

00:51:05.369 --> 00:51:07.929
Be concise and short with your labels.

00:51:07.929 --> 00:51:12.609
Don't be overly expressive and say this
button adds a city to the table view.

00:51:12.610 --> 00:51:21.870
That might be very nice and loquacious but what the
user really wants is something short and concise

00:51:21.869 --> 00:51:24.480
that will get them to do what they want to do.

00:51:24.480 --> 00:51:27.519
So say "add city" instead.

00:51:27.519 --> 00:51:31.420
Don't include the type of information in the label.

00:51:31.420 --> 00:51:38.269
So you don't need to say "remove city button" because the
button is part of the traits, instead just say remove city.

00:51:38.269 --> 00:51:43.619
Otherwise, the VoiceOver user will hear remove
city button button and that's not good for anybody.

00:51:43.619 --> 00:51:48.650
If you have a hint, there's a few things to remember.

00:51:48.650 --> 00:51:51.010
First, you don't always need a hint.

00:51:51.010 --> 00:51:54.590
When you do need a hint, it's because
when you perform an action

00:51:54.590 --> 00:51:59.789
on this object the result is not
obvious based on its context.

00:51:59.789 --> 00:52:05.750
So a good example I like to think of is in
iTunes Store, there's table rows and if you touch

00:52:05.750 --> 00:52:09.239
on a table row it plays a preview of the song.

00:52:09.239 --> 00:52:13.189
So a good hint for that would be "plays a preview."

00:52:13.190 --> 00:52:17.720
A bad hint will be "pressing here will
play a preview of the current song."

00:52:17.719 --> 00:52:23.339
One because it's not very concise, obviously it will play
a preview of the current song that's why you're on it

00:52:23.340 --> 00:52:29.760
and you also, it's bad because it's defined
as "pressing here" and you don't want

00:52:29.760 --> 00:52:33.570
to tell the VoiceOver user how
they will interact with this object

00:52:33.570 --> 00:52:37.769
because maybe they don't press here maybe they
swipe or maybe they do some other gesture.

00:52:37.769 --> 00:52:43.309
So instead just give a short overview of what
will happen when this object is activated.

00:52:43.309 --> 00:52:51.460
So to wrap up, accessibility expands
this iPhone community that has grown

00:52:51.460 --> 00:52:55.630
so large to include as many people as possible.

00:52:55.630 --> 00:53:00.349
Your apps, just like being an important
part of the iPhone story,

00:53:00.349 --> 00:53:02.960
are going to be an important part
of the accessibility story.

00:53:02.960 --> 00:53:10.019
Already people are talking, will other apps be
accessible and it's up to you now to make sure they are.

00:53:10.019 --> 00:53:14.889
We've shown you that it's not easy,
burdensome or hard to do this.

00:53:14.889 --> 00:53:21.159
So hopefully by at this point through the
talk all your apps actually are accessible

00:53:21.159 --> 00:53:22.920
and you're uploading them to the App Store right now.

00:53:22.920 --> 00:53:27.260
I'll be a little bit disappointed if they're not.

00:53:27.260 --> 00:53:33.480
Once you've done that, make sure to test with Inspector and
once you get your new 3GS phone, test it with VoiceOver.

00:53:33.480 --> 00:53:38.460
I think it'll be pretty fun to see what your
app sounds like to someone who can't see

00:53:38.460 --> 00:53:45.099
and if you're really brave you can close your eyes and see
if you can use your app without seeing what's going on.

00:53:45.099 --> 00:53:48.170
Here's the requisite information about more information.

00:53:48.170 --> 00:53:53.250
You'll find there's a VoiceOver Manual, there
is UIAccessibility programming documents.

00:53:53.250 --> 00:54:01.159
Hopefully, this example app will be available and all of
this will be on the website shortly, if not there now.