WEBVTT

00:00:12.550 --> 00:00:13.570
>> Hi everybody.

00:00:13.570 --> 00:00:15.429
Welcome to Session 111.

00:00:15.429 --> 00:00:16.309
NSImage in Snow Leopard.

00:00:16.309 --> 00:00:19.910
My name is Ken Ferry, I'm an engineer
in the Cocoa Frameworks Group.

00:00:19.910 --> 00:00:22.329
So, today we're going to talk about NSImage.

00:00:22.329 --> 00:00:22.849
Why is this?

00:00:22.850 --> 00:00:27.429
Because we've done a lot of work on it for Snow
Leopard and we think you'll like what we did.

00:00:27.429 --> 00:00:29.000
So we'd like to tell you.

00:00:29.000 --> 00:00:32.899
We tried to make it simpler, more
consistent in terms of behavior.

00:00:32.899 --> 00:00:35.140
We've tried to improve its performance.

00:00:35.140 --> 00:00:40.079
And we've also improved the integration with other
frameworks on the system, in particular the integration

00:00:40.079 --> 00:00:43.750
with Quartz is much tighter and with CGImage
in particular, if you're aware of what that is,

00:00:43.750 --> 00:00:46.219
and if you're not, you know, we'll get to it.

00:00:46.219 --> 00:00:53.679
Okay. So the first part of the talk is going to
be about the changes that we've made for 10.6.

00:00:53.679 --> 00:00:58.409
In order to do that we're really going to have, we're going
to need to talk about the Core Architecture of NSImage.

00:00:58.409 --> 00:01:00.479
So let's get going on that.

00:01:00.479 --> 00:01:04.609
One thing I want you to keep in mind, usually when you think
of an image, you're going to think of something like this.

00:01:04.609 --> 00:01:07.150
A photograph say, this is a photograph my father took.

00:01:07.150 --> 00:01:08.109
Pretty nice I think.

00:01:08.109 --> 00:01:12.870
However, for the purposes of this talk, we also
want you to keep in mind images of this sort.

00:01:12.870 --> 00:01:17.100
These are, these are interface images that the
user would not necessarily think of as images.

00:01:17.099 --> 00:01:18.159
Icons and such.

00:01:18.159 --> 00:01:22.709
The distinction might be the one, the images that
you own, versus the images that your user owns.

00:01:22.709 --> 00:01:27.429
And it turns out that just these sorts of images
have somewhat different issues associated with them.

00:01:27.430 --> 00:01:29.220
So keep both in mind.

00:01:29.219 --> 00:01:29.609
All right.

00:01:29.609 --> 00:01:34.030
So, so if there's one thing that
an image is good for its drawing.

00:01:34.030 --> 00:01:39.219
So, so let's just run down and, and see
what happens when you ask an image to draw.

00:01:39.219 --> 00:01:40.900
What is the sequence of events, okay?

00:01:40.900 --> 00:01:44.430
So suppose you have something like
this Pages icon, all right.

00:01:44.430 --> 00:01:48.280
The first thing to realize is that
even as a user you might be aware

00:01:48.280 --> 00:01:51.120
that the Pages icon is available in multiple sizes, okay.

00:01:51.120 --> 00:01:55.740
There's a 16 x 16, a 32 x 32, 48,
all the way Hup to 512 x 512.

00:01:55.739 --> 00:01:57.769
Different bitmaps associated with it.

00:01:57.769 --> 00:02:00.170
And that's reflected in the API.

00:02:00.170 --> 00:02:04.950
So NSImage itself is actually a
container for what we call NSImage Reps.

00:02:04.950 --> 00:02:09.330
And in this case, there's going to be one Rep for
each of these different size bitmaps associated, okay.

00:02:09.330 --> 00:02:11.670
And we'll discuss NSImage Reps a little bit more later.

00:02:11.669 --> 00:02:13.959
Anyway, when you're asked to draw what happens?

00:02:13.960 --> 00:02:16.610
Well, you have a location that you're going to draw in.

00:02:16.610 --> 00:02:18.310
It's called NSGraphics Context.

00:02:18.310 --> 00:02:20.580
There's a rectangle in the Context.

00:02:20.580 --> 00:02:26.680
We look at that rectangle, we select
the best representation, and we draw it.

00:02:26.680 --> 00:02:30.010
Okay. We'll fill this page, we'll fill
this picture out a little bit more later.

00:02:30.009 --> 00:02:33.629
But even that is enough to start
talking about some differences.

00:02:33.629 --> 00:02:37.650
In 10.5, this was the name of the method
that did the representation selection.

00:02:37.650 --> 00:02:40.819
In 10.6, it's a little bit different,
it takes more arguments.

00:02:40.819 --> 00:02:45.919
So in, there was just one argument in
10.5, Device, this was a dictionary.

00:02:45.919 --> 00:02:52.979
Okay. It describes something like a window, it would say
like "This is 8 bit and it's RGB," something like that.

00:02:52.979 --> 00:02:58.159
In 10.6, we take these three arguments, a Rect,
a Context, and Hints, which is a dictionary.

00:02:58.159 --> 00:02:59.250
Let's discuss what those are.

00:02:59.250 --> 00:03:00.530
All right.

00:03:00.530 --> 00:03:04.539
Well, the Rect is the rectangle where
the image is being asked to draw.

00:03:04.539 --> 00:03:08.379
The Context is this drawing location,
it's this object that encompasses it.

00:03:08.379 --> 00:03:16.620
And it includes information such as what are, what is the
relationship of the units that the Rect is in to pixels.

00:03:16.620 --> 00:03:18.379
That's information that's in the context.

00:03:18.379 --> 00:03:25.990
Okay. And that's exactly the information that is required to
pick the most appropriate size bitmap for that pages icon.

00:03:25.990 --> 00:03:27.750
Okay. Just for one example.

00:03:27.750 --> 00:03:30.490
There's other information that might
be in there, such as whether it's gray.

00:03:30.490 --> 00:03:34.189
Maybe if you're printing, or one bit if
you're faxing or something like that.

00:03:34.189 --> 00:03:37.669
So, and all of these things can play into
which representation is most appropriate.

00:03:37.669 --> 00:03:44.769
And the main thing to realize is just focus on
this, oh, I didn't tell you what the Hints was.

00:03:44.770 --> 00:03:49.850
The Hints are sort of extra information
that you can provide, it's optional.

00:03:49.849 --> 00:03:54.769
And it can also be used to override aspects
that we would otherwise infer from the Context.

00:03:54.770 --> 00:03:59.810
And, and I want to just point out, just ask you to look
at this again because it's going to keep coming up.

00:03:59.810 --> 00:04:04.449
This Rect, Context, Hints triple is
going to be key in all the new APIs.

00:04:04.449 --> 00:04:07.719
Okay. Anyway that's the information
we need for Representation Selection.

00:04:07.719 --> 00:04:10.859
Just the dictionary before was not good
enough, what would, so how did it work?

00:04:10.860 --> 00:04:16.259
Actually, it was using an internal method before
in 10.5 for actual representation selection.

00:04:16.259 --> 00:04:20.349
Okay. So let's fill out that picture a little bit more.

00:04:20.350 --> 00:04:24.620
Something else that NSImage will do when
it's being asked to draw is it will cache.

00:04:24.620 --> 00:04:25.639
Okay, great.

00:04:25.639 --> 00:04:26.949
What's the point?

00:04:26.949 --> 00:04:32.579
The point is that if you're asking image to draw
repeatedly to the same destination, then we can render this,

00:04:32.579 --> 00:04:39.919
this hopefully optimized object, which when you,
which can be drawn down to context faster, repeatedly.

00:04:39.920 --> 00:04:47.430
And the reason I wanted to bring this up
is, you know, surprise, there are changes.

00:04:47.430 --> 00:04:53.009
In this, this caching business was, was a little bit
confusing in 10.5 because there are a whole bunch

00:04:53.009 --> 00:04:56.519
of different methods that, that you can
set on NSImage that had to do with caching.

00:04:56.519 --> 00:04:59.490
And unfortunately, they affected more than just performance.

00:04:59.490 --> 00:05:03.379
Some of them would affect even things such
as where the image would end up drawing.

00:05:03.379 --> 00:05:04.980
How much of the screen it took up.

00:05:04.980 --> 00:05:07.340
And, and that's not really how we want caching to work.

00:05:07.339 --> 00:05:12.049
In 10.6, hopefully, it will just be a
matter of something you can't even tell

00:05:12.050 --> 00:05:14.319
if it's there unless you're using instruments to profile it.

00:05:14.319 --> 00:05:17.569
Or unless it's so slow that you usually can tell.

00:05:17.569 --> 00:05:24.310
So, and this is part of what I mean by, by making, making
it simpler, and behave more the way you expect it to.

00:05:24.310 --> 00:05:31.000
So these are all methods that are defined on NSImage
that can help control caching and they're all deprecated.

00:05:31.000 --> 00:05:33.199
And their deprecated without replacement.

00:05:33.199 --> 00:05:37.939
And it's not that functionality has been removed,
it's more like it's just not necessary anymore

00:05:37.939 --> 00:05:41.620
because we are doing a better job
of invalidating the cache on our own

00:05:41.620 --> 00:05:46.040
and we don't need as much advice about how to do it.

00:05:46.040 --> 00:05:49.350
Okay, so there's still more changes in caching.

00:05:49.350 --> 00:05:56.210
One change that is mostly an implementation detail,
but it leaks out in a few places, is that in 10.5

00:05:56.209 --> 00:05:59.139
and earlier we would cache to an offscreen window.

00:05:59.139 --> 00:06:02.680
Okay. It sort of makes sense in
that if you're drawing to a window,

00:06:02.680 --> 00:06:05.319
maybe it makes sense for your cache to be some other window.

00:06:05.319 --> 00:06:07.740
Okay. Seems like it could make sense.

00:06:07.740 --> 00:06:11.759
But, but there are a couple ways
in which that's not optimal.

00:06:11.759 --> 00:06:12.920
It's kind of heavyweight.

00:06:12.920 --> 00:06:17.350
Windows turned out to be a scarce resource, sort
of like file descriptors and as our apps get bigger

00:06:17.350 --> 00:06:22.180
and more complicated, the fact that you
could run out of windows was a problem.

00:06:22.180 --> 00:06:24.620
And when you do run out of windows, it's fairly dire.

00:06:24.620 --> 00:06:27.269
The system does not do very well.

00:06:27.269 --> 00:06:29.969
So, so that's hopefully not going to happen anymore.

00:06:29.970 --> 00:06:33.680
And also, it's just, it's just
rather bigger than it needs to be.

00:06:33.680 --> 00:06:38.459
The CGImage which is a Quartz type is a
very good representation for a Cache for us.

00:06:38.459 --> 00:06:40.799
So we're going to do that.

00:06:40.800 --> 00:06:46.970
Okay. So there was a class that represented the
drawing that was backed by a window NSCachedImageRep.

00:06:46.970 --> 00:06:52.240
Okay. And you see it has a method WindowinRect, that's
the Rect within the window where the image is cached.

00:06:52.240 --> 00:06:55.129
So that whole thing has to be deprecated, which is fine.

00:06:55.129 --> 00:06:59.659
It still works, but we're not going to use it
internally and we would suggest that you not use it

00:06:59.660 --> 00:07:03.860
in your own apps, you know, going forward.

00:07:03.860 --> 00:07:08.110
Okay. Oh and, and the difference between
the images is that they're, you'll see,

00:07:08.110 --> 00:07:14.920
but they're being used all the way throughout the,
the app kit internals now in hopefully an optimal way.

00:07:14.920 --> 00:07:19.090
And, and part of that means is, is that
we're going to be able to supply one

00:07:19.089 --> 00:07:21.199
of our most common feature requests for NSImage.

00:07:21.199 --> 00:07:24.529
Which is I want to take this NSImage
and I want to get a CGImage out of it.

00:07:24.529 --> 00:07:25.509
For those that.

00:07:25.509 --> 00:07:27.389
[ Chuckles ]

00:07:27.389 --> 00:07:29.269
[ Clapping ]

00:07:29.269 --> 00:07:33.250
Okay. I was going to explain my,
my, why you might want this.

00:07:33.250 --> 00:07:34.420
But apparently, you guys know.

00:07:34.420 --> 00:07:37.460
I'm still going to say.

00:07:37.459 --> 00:07:39.979
So why, why would you want this?

00:07:39.980 --> 00:07:43.340
Mostly because you're interacting
with other APIs that deal in CGImages.

00:07:43.339 --> 00:07:44.649
That's the most common reason.

00:07:44.649 --> 00:07:49.609
One of them for example is, but we're also taking
care to try to make more APIs take NSImages,

00:07:49.610 --> 00:07:51.430
as you'll see in the talk that's appropriate.

00:07:51.430 --> 00:07:55.650
CALayer, for example, in 10.6 actually can
directly take an NSImage as its contents.

00:07:55.649 --> 00:07:58.359
You don't need to get a CGImage for that.

00:07:58.360 --> 00:08:02.350
But, that aside, we're still making
it easier to extract CGImages.

00:08:02.350 --> 00:08:05.770
And we're also making it really easy to take
a CGImage and represent it as an NSImage.

00:08:05.769 --> 00:08:08.579
That's the second image with CGImage Size.

00:08:08.579 --> 00:08:10.969
That wasn't superhard in Leopard.

00:08:10.970 --> 00:08:13.290
But that was certainly much easier to implement.

00:08:13.290 --> 00:08:16.800
But, nevertheless, it's extremely easy now and its colorful.

00:08:16.800 --> 00:08:22.020
However, usually when people want to get the CGImage
they want to say, they want a method called CGImage

00:08:22.019 --> 00:08:24.899
on NSImage, and this one takes three parameters.

00:08:24.899 --> 00:08:26.759
So that's not, that's not quite what people want.

00:08:26.759 --> 00:08:28.920
So what. Why did we do that?

00:08:28.920 --> 00:08:34.560
Well the problem is that a CGImage is just not capable of
capturing all the information that's in an NSImage, okay.

00:08:34.559 --> 00:08:38.909
And so we need more, we need to
know more to give you a CGImage.

00:08:38.909 --> 00:08:40.459
The CGImage is just a flat bitmap.

00:08:40.460 --> 00:08:46.080
Okay. It's not going to be able to represent those,
for example, in this case of the size, these,

00:08:46.080 --> 00:08:48.280
this pages icon, it's available in multiple sizes.

00:08:48.279 --> 00:08:51.250
It's not going to be able to rep, able
to represent all three at the same time.

00:08:51.250 --> 00:08:54.500
Another example is that an NSImage can be backed by a PDF.

00:08:54.500 --> 00:08:56.639
Okay. Or a window, the way we were showing before.

00:08:56.639 --> 00:09:00.750
And, and CGImage is not going to be able to
do that to preserve all of that information.

00:09:00.750 --> 00:09:06.029
So what it can do instead is, I've
been calling it a snapshot.

00:09:06.029 --> 00:09:10.039
Think of, it's just a flat bitmap,
but, but, so I'm three-dimensional.

00:09:10.039 --> 00:09:16.149
Okay. And you can't represent me all the visuals
that I encompass as a single, flat 2D image.

00:09:16.149 --> 00:09:24.419
However, if you fix the camera angle, that you're looking
at me in, and fix a box that you're trying to look at,

00:09:24.419 --> 00:09:29.279
then you can produce a 2D image, which represents
me from that angle, and is an accurate reproduction.

00:09:29.279 --> 00:09:30.779
And that's what the CGImage is going to be.

00:09:30.779 --> 00:09:38.500
So when you pass a Rect and a Context, and this Hints
thing, then you're going to be able to get a CGImage,

00:09:38.500 --> 00:09:42.970
which if you draw it in the same
Rect as you passed, in that context,

00:09:42.970 --> 00:09:46.629
would be the same as the NSImage
drawn in that Rect, in that Context.

00:09:46.629 --> 00:09:50.529
Okay. So it's sort of like the image from an angle.

00:09:50.529 --> 00:09:53.970
Okay. So that's the CGImage.

00:09:53.970 --> 00:10:00.840
There is one sort of unfortunate little tweak to
that that I, which is that the Rect that we pass

00:10:00.840 --> 00:10:03.440
in is not actually a Rect, it's a pointer to a Rect.

00:10:03.440 --> 00:10:04.680
Let's see why that is.

00:10:04.679 --> 00:10:10.769
Okay, suppose that the place, the Rect that you're
passing in is not pixel aligned in the Context, all right.

00:10:10.769 --> 00:10:13.110
So these lines are supposed to
represent where pixel boundaries are.

00:10:13.110 --> 00:10:14.490
And this is the Rect you're actually drawing.

00:10:14.490 --> 00:10:17.039
And suppose the NSImage is actually just backed by a PDF.

00:10:17.039 --> 00:10:19.230
Like I said, NSImage can be vector based.

00:10:19.230 --> 00:10:21.860
So if it's just drawing, it's just going to draw.

00:10:21.860 --> 00:10:26.669
You can render a PDF into a rectangle that
has nothing to do with pixels and that's fine.

00:10:26.669 --> 00:10:30.379
However, if you want to get a CGImage for
this, there's going to be a bit of a problem,

00:10:30.379 --> 00:10:34.409
because we can't give you something that's,
that's some fractional number of pixels wide.

00:10:34.409 --> 00:10:38.029
We would have to give you something that's,
what we can do is we can give you something

00:10:38.029 --> 00:10:42.789
that covers this larger rectangle in the
Context that, that is pixel integral, okay.

00:10:42.789 --> 00:10:47.159
And we can fill our own drawing into
that and hand you back a CGImage,

00:10:47.159 --> 00:10:50.829
which is an appropriate snapshot of that larger Rect.

00:10:50.830 --> 00:10:53.060
So, so how does this end up working?

00:10:53.059 --> 00:10:56.649
It's, it sounds a little harder to
explain I think than it is in practice.

00:10:56.649 --> 00:11:03.539
But the deal is that if you pass this Rect to the
method, and when it comes back, if you draw the CGImage

00:11:03.539 --> 00:11:12.539
in the Rect you get out, that's the same as if you'd
drawn the NSImage in the Rect that you passed in.

00:11:12.539 --> 00:11:13.209
Okay.

00:11:13.210 --> 00:11:13.730
[ Chuckles ]

00:11:13.730 --> 00:11:16.850
Whatever. It works okay in practice I think.

00:11:16.850 --> 00:11:17.430
[ Chuckles ]

00:11:17.429 --> 00:11:18.149
All right.

00:11:18.149 --> 00:11:21.799
So, okay, so that's fine except you
might say well, well that's great.

00:11:21.799 --> 00:11:25.500
I understand why you need all these parameters,
but, but sometimes I don't have a NSGraphicsContext.

00:11:25.500 --> 00:11:29.129
I need to make one of these CG, I need to get out
one of these CGImages at a time when I'm not drawing.

00:11:29.129 --> 00:11:31.460
Do I expect you to make an NSGraphicsContext?

00:11:31.460 --> 00:11:37.450
No. These are acceptable parameters for all three arguments.

00:11:37.450 --> 00:11:38.210
Null, nil, nil.

00:11:38.210 --> 00:11:39.509
So that's perfectly straightforward.

00:11:39.509 --> 00:11:42.039
And it's just that they each have a defined meaning.

00:11:42.039 --> 00:11:42.409
All right.

00:11:42.409 --> 00:11:43.719
What do they mean?

00:11:43.720 --> 00:11:49.950
Well Null is pretty much going to mean that you pass the
most natural rectangle you could possibly draw the image

00:11:49.950 --> 00:11:51.960
in maybe, I don't know, if you think there is such a thing.

00:11:51.960 --> 00:11:56.129
Which is the origin 00 and then the size of the image.

00:11:56.129 --> 00:12:01.679
And then there's this tweak business about
pixel integral, which I'll explain in a second.

00:12:01.679 --> 00:12:01.739
[ Chuckles ]

00:12:01.740 --> 00:12:07.919
And nil for context means we're just going
to assume it's as if you had made a window

00:12:07.919 --> 00:12:10.879
on the main display in the most natural way.

00:12:10.879 --> 00:12:12.929
That's the kind of context it's going to be.

00:12:12.929 --> 00:12:18.409
And, and the reason we'd even say things like main
display is that it impacts things like color space,

00:12:18.409 --> 00:12:20.639
because the different displays
can have different color spaces.

00:12:20.639 --> 00:12:22.799
And hints nil, that's a little bit more obvious.

00:12:22.799 --> 00:12:25.359
I mean it means you didn't provide any extra information.

00:12:25.360 --> 00:12:28.930
And, and now if I go back and what's this
business about the pixel integral thing?

00:12:28.929 --> 00:12:33.729
It just means that the, that the CGImage that
we're going to pass back to you will never have any

00:12:33.730 --> 00:12:36.539
of that padding on the outside like I was just saying.

00:12:36.539 --> 00:12:41.659
Instead of getting the padding, what you might get instead
is that there might be some anti-aliasing artifacts

00:12:41.659 --> 00:12:44.370
because we might have had to inflate the
Rect a little bit from what you've passed us.

00:12:44.370 --> 00:12:48.759
And, anyway, regardless, that's what that is.

00:12:48.759 --> 00:12:52.179
Okay. And, and I really did just
want to emphasize this contract.

00:12:52.179 --> 00:12:56.079
Because it's the one really important
thing about the API, okay.

00:12:56.080 --> 00:13:01.639
Drawing the CGImage in the Rect you get out is the
same as drawing the NSImage in Rect you pass in.

00:13:01.639 --> 00:13:05.110
And you know nothing else about the CGImage.

00:13:05.110 --> 00:13:11.789
So for example, suppose you have an NSImage, which
was natively just backed by a single CGImage.

00:13:11.789 --> 00:13:15.189
Okay. That really is, all of its data
is encompassed in just a single CGImage.

00:13:15.190 --> 00:13:18.950
Well then, that CGImage is always going
to be a valid return from this method,

00:13:18.950 --> 00:13:22.050
no matter what Rect, no matter what context you pass in.

00:13:22.049 --> 00:13:25.819
Because it does entirely encompass
all of the information of the NSImage.

00:13:25.820 --> 00:13:30.260
So in particular, you know, even if you pass
a 3 x 3, you might get back a 27 x 27 CGImage.

00:13:30.259 --> 00:13:31.429
You can't tell.

00:13:31.429 --> 00:13:35.750
But this is what you can tell:, that it
does capture the drawing of the NSImage.

00:13:35.750 --> 00:13:41.769
Okay. So all of this talk of snapshoting
and caching and rendering PDFs in business.

00:13:41.769 --> 00:13:43.350
Is this starting to sound expensive?

00:13:43.350 --> 00:13:45.230
I don't know, maybe.

00:13:45.230 --> 00:13:48.730
But, I'd like to say that it's not.

00:13:48.730 --> 00:13:52.629
That it's only going to be doing work in the
cases where you would want the work done.

00:13:52.629 --> 00:13:54.470
And a lot of that is because I
haven't showed you all the API yet.

00:13:54.470 --> 00:14:02.440
There's also the same method has been added down at the
Image Rect level, CGImageForProposedRect:context:hints.

00:14:02.440 --> 00:14:04.110
All right.

00:14:04.110 --> 00:14:04.889
And what is this going to do?

00:14:04.889 --> 00:14:08.409
Well to do that let, let's go ahead and
now talk about exactly what NSImageRep is.

00:14:08.409 --> 00:14:14.850
So NSImageRep, the really distinction in NSImageRep
then is image, that NSImageRep is built for subclassing.

00:14:14.850 --> 00:14:16.690
Very, very similar to NSView.

00:14:16.690 --> 00:14:22.320
Okay. In the AppKit, we have a bunch of different
classes, and each of them represents the,

00:14:22.320 --> 00:14:24.700
the way it works is you just override the draw method.

00:14:24.700 --> 00:14:27.450
And you produce the drawing, whatever it is.

00:14:27.450 --> 00:14:30.330
So in the case of a BitmapImageRep,
it's going to draw the bitmap.

00:14:30.330 --> 00:14:32.970
In the case of a PDFImageRep, we
override draw, we draw the PDF.

00:14:32.970 --> 00:14:37.100
In the case of NSCIImageRep, that's like a CoreImage.

00:14:37.100 --> 00:14:38.940
We override Draw, and we'll just draw that.

00:14:38.940 --> 00:14:43.540
This CacheImageRep, I told you that that represents
drawing back via a window and it's deprecated.

00:14:43.539 --> 00:14:45.539
But, but it's still there.

00:14:45.539 --> 00:14:50.919
So okay. Yeah and it's, it's there to be a subclass.

00:14:50.919 --> 00:14:56.250
If you think about NSView, most people have a subclass,
have NSView, or at least they're aware it's pretty easy.

00:14:56.250 --> 00:15:02.070
The one method you really have to override is DrawRect,
and in that method, you're drawing in to the view's bounds.

00:15:02.070 --> 00:15:03.970
That's the location of you're feeling, filling.

00:15:03.970 --> 00:15:05.070
NSImageRep is the same way.

00:15:05.070 --> 00:15:08.060
You, except you override draw, that's
the only method you really have to.

00:15:08.059 --> 00:15:11.889
And you, the rectangular you're filling is 00 Image Size.

00:15:11.889 --> 00:15:12.899
That's it, okay.

00:15:12.899 --> 00:15:13.980
That's all you really have to do.

00:15:13.980 --> 00:15:18.360
And it's worth pointing out because NSImageRep
doesn't look like it's that easy to subclass.

00:15:18.360 --> 00:15:21.269
It has all these other methods that you look at
and you say I don't know how to implement these.

00:15:21.269 --> 00:15:26.039
Things like colorSpaceName, bitsPerSample,
pixelsWide, pixelsHigh.

00:15:26.039 --> 00:15:31.389
Okay, well, the thing to understand about those
is that they're used for representation selection.

00:15:31.389 --> 00:15:33.049
Okay. These are best effort methods.

00:15:33.049 --> 00:15:38.129
When you say colorSpaceName, what you're
saying is this is a good color space for me.

00:15:38.129 --> 00:15:38.480
All right.

00:15:38.480 --> 00:15:44.100
Or with the pixelsWide it's saying if you're drawing into
something that's this many pixels wide, please choose me.

00:15:44.100 --> 00:15:49.550
Okay. Which means, and if you don't, so that's
interesting both from a subclassing point of view,

00:15:49.549 --> 00:15:53.969
and also as a caller's point of view, to realize
that despite the names, these aren't, you don't,

00:15:53.970 --> 00:15:55.620
shouldn't necessarily believe these things.

00:15:55.620 --> 00:15:57.879
Because they're only best effort.

00:15:57.879 --> 00:16:02.419
Though in the case of something like bitmapImageRep,
yeah, it's definitely in our contract that pixelsWide has

00:16:02.419 --> 00:16:05.789
to be the actual number of pixels in the bitmap.

00:16:05.789 --> 00:16:06.959
Okay. And, yeah and they're optional.

00:16:06.960 --> 00:16:08.040
So you don't have to do it.

00:16:08.039 --> 00:16:10.849
Later in the talk I'm going to show you
an example of subclassing in NSImageRep.

00:16:10.850 --> 00:16:12.879
You'll see how easy it is.

00:16:12.879 --> 00:16:15.799
Okay, but the whole point of this is I want
to talk about this other new method we added,

00:16:15.799 --> 00:16:18.719
the CGImageForProposedRect:context:hints.