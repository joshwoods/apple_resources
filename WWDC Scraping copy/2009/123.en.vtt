WEBVTT

00:00:12.810 --> 00:00:17.000
>> Good afternoon and welcome iPhone
View Controller Techniques.

00:00:17.000 --> 00:00:21.509
My name is Evan Doll and I work on
iPhone Applications and Frameworks.

00:00:21.510 --> 00:00:25.660
How many of you in the audience have
already written an iPhone application?

00:00:25.660 --> 00:00:26.050
Most people.

00:00:26.050 --> 00:00:33.460
OK, cool. So you're experienced with UIKit and you probably
understand the role of View Controllers in your application.

00:00:33.460 --> 00:00:36.590
What I want to show you today is how you
can adopt some really awesome features

00:00:36.590 --> 00:00:38.660
in your application without writing a ton of code.

00:00:38.659 --> 00:00:43.250
And you're probably going to be interested as
well to hear about some additions and improvements

00:00:43.250 --> 00:00:47.009
to the View Controller classes in iPhone OS 3.0.

00:00:47.009 --> 00:00:49.329
Now, if you're just getting started
writing up an application,

00:00:49.329 --> 00:00:51.500
there's going to be a lot for you-- here for you as well.

00:00:51.500 --> 00:00:54.679
We want to make sure you get started
with a solid foundation.

00:00:54.679 --> 00:00:59.579
You understand the role of View Controllers in your app, and
we also want to show you some techniques that you can use

00:00:59.579 --> 00:01:03.210
when it's time to take your application to the next level.

00:01:03.210 --> 00:01:05.120
So what are we going to cover today?

00:01:05.120 --> 00:01:09.030
We're going to start with the quick
overview of View Controllers.

00:01:09.030 --> 00:01:12.189
So regardless of your level of experience,
if you're a beginner or an expert,

00:01:12.189 --> 00:01:15.230
there's going to be something for
you here, so stay tuned in.

00:01:15.230 --> 00:01:21.680
After that, we're going to cover five new
features of View Controllers in iPhone OS 3.0.

00:01:21.680 --> 00:01:26.510
These additions are going to help you solve
some common problems and really, you know,

00:01:26.510 --> 00:01:29.450
add a level of shine to your application.

00:01:29.450 --> 00:01:32.460
And finally, we're going to talk about
best practices, carrying on a little bit

00:01:32.459 --> 00:01:35.429
from the previous session on iPhone
Application Architecture.

00:01:35.430 --> 00:01:41.860
I'm going to show you some things to avoid, some
things to do, and basically, avoiding unsupported usage

00:01:41.859 --> 00:01:49.170
so that you can keep your application working well
with minimum of headaches on future iPhone OS releases.

00:01:49.170 --> 00:01:53.930
So let's get started with, you know,
a quick overview of View Controllers;

00:01:53.930 --> 00:01:57.160
where they fit in your app and what they do for you.

00:01:57.159 --> 00:02:01.530
I want to make sure again that we're on the
same page before we get into the new cool stuff.

00:02:01.530 --> 00:02:04.719
This stuff is pretty cool, too, but not as cool or new.

00:02:04.719 --> 00:02:09.800
[Laughter] So let's start with the sort of high
level picture of the design of iPhone applications.

00:02:09.800 --> 00:02:12.240
And Alex talked about this a little bit in the last session.

00:02:12.240 --> 00:02:16.560
But if you think about it, you know, the applications
that you've used on the iPhone, both first party

00:02:16.560 --> 00:02:20.640
or third party applications, they tend
to be made up of multiple screens,

00:02:20.639 --> 00:02:25.099
and each of these screens has a distinct role,
tries to do, you know, one or few things well,

00:02:25.099 --> 00:02:30.060
and has been connected to other screens
in your application using one of a couple

00:02:30.060 --> 00:02:33.319
of common application flows or application design patterns.

00:02:33.319 --> 00:02:38.319
So if you look here, you know, the Recipes App
is our favorite poster child in terms of demos.

00:02:38.319 --> 00:02:44.539
And here, an enthusiastic, over-enthusiastic UI designer
has tried to cram the entire app into one screen.

00:02:44.539 --> 00:02:46.979
It's a little bit overwhelming for the user.

00:02:46.979 --> 00:02:52.139
And really, what we want is something more like this,
where at the top level, we've got a list of recipes,

00:02:52.139 --> 00:02:57.589
and as we drill down, you select the recipe, you can
view the details of the recipe, you select the picture,

00:02:57.590 --> 00:02:59.689
and you can view the picture in greater detail.

00:02:59.689 --> 00:03:05.319
So in this way, you know, you're not trying fit a bunch of
stuff onto this small screen, and your app is approachable

00:03:05.319 --> 00:03:10.750
and understandable by your user because it
matches the design of other apps on the iPhone.

00:03:10.750 --> 00:03:14.240
So we've got this new sort of ideas
about design in our heads.

00:03:14.240 --> 00:03:18.260
The next step is to figure out how to
tie each of these screens together.

00:03:18.259 --> 00:03:21.810
And the idea here is that controllers
play a pretty central role.

00:03:21.810 --> 00:03:27.400
And there are two ways that I could think about
the role controller's play in your application.

00:03:27.400 --> 00:03:30.840
The first is as a connector between the model and the view.

00:03:30.840 --> 00:03:35.229
You've seen probably a million model view controller
diagrams this week, you know, we've been, we were always,

00:03:35.229 --> 00:03:37.699
you know, pounding the pavement with that message.

00:03:37.699 --> 00:03:42.159
But really, you know, controllers help to
mediate between model and view objects.

00:03:42.159 --> 00:03:44.699
They allow you to populate your views with data.

00:03:44.699 --> 00:03:49.689
And when changes need to be communicated back to your
model, they facilitate that as well, and analyze your model

00:03:49.689 --> 00:03:56.879
and your view to be much more reusable,
maintainable, all that good buzzword happy stuff.

00:03:56.879 --> 00:04:01.019
The second role is that controllers
are typically the objects

00:04:01.020 --> 00:04:03.340
where you're going to implement your application logic.

00:04:03.340 --> 00:04:08.659
So, decisions about how to respond to different
types of user actions like button presses,

00:04:08.659 --> 00:04:12.319
table row selections, shaking the phone, anything like that.

00:04:12.319 --> 00:04:18.139
But your controllers are typically going to be
the starting point for your application logic.

00:04:18.139 --> 00:04:22.069
So really, think about controllers
as the brains of your application.

00:04:22.069 --> 00:04:25.420
Hope there aren't any zombies in the audience.

00:04:25.420 --> 00:04:28.430
So from there, what do we need?

00:04:28.430 --> 00:04:30.069
We need a starting point for our controllers.

00:04:30.069 --> 00:04:36.209
There's a lot of common things that controllers
need to do in almost every application.

00:04:36.209 --> 00:04:39.989
The first thing is loading a view from
an Interface Builder file, from a NIB,

00:04:39.990 --> 00:04:43.069
and sort of being responsible for
managing the contents of that NIB.

00:04:43.069 --> 00:04:45.540
So that's a really common need.

00:04:45.540 --> 00:04:50.439
Another really common thing is responding
to appearing and disappearing on the screen.

00:04:50.439 --> 00:04:52.329
You may want to prepare some data for display, you know,

00:04:52.329 --> 00:04:55.459
start loading some data from the
Internet or from a database.

00:04:55.459 --> 00:04:58.659
And when you disappear, that's often a
good time to save data or it'd be to clear

00:04:58.660 --> 00:05:01.070
out some state that you don't want hanging around.

00:05:01.069 --> 00:05:06.519
There are a couple of other things which are common,
elements that are common to iPhone applications

00:05:06.519 --> 00:05:09.750
such as presenting modal content and interface rotation.

00:05:09.750 --> 00:05:11.910
The controllers are a good place for that too.

00:05:11.910 --> 00:05:18.460
So as we were working on-- this is some applications
at Apple, you know, Mail and iPod and all that stuff,

00:05:18.459 --> 00:05:21.769
we wanted a starting point for our controller logic.

00:05:21.769 --> 00:05:24.459
So we came up for the class called the UIViewController.

00:05:24.459 --> 00:05:26.299
You've probably seen this slide before.

00:05:26.300 --> 00:05:31.020
You know, UIViewController is the basic
building block of your application logic.

00:05:31.019 --> 00:05:33.500
It's responsible for managing a screen full of content.

00:05:33.500 --> 00:05:38.230
And typically, you'll subclass UIViewController
for each screenful in your application.

00:05:38.230 --> 00:05:44.110
And then that view controller will sort of tie together
the data and the views that are going on in that screen.

00:05:44.110 --> 00:05:44.930
And that's all well and good.

00:05:44.930 --> 00:05:49.079
You've got a single view controller
managing a single slice of your application.

00:05:49.079 --> 00:05:54.519
But what you really want to do is tie these things
together, connect them to build an application.

00:05:54.519 --> 00:05:55.899
And there are a couple ways of doing that.

00:05:55.899 --> 00:06:02.699
There are these container view controllers which you can
use to plug individual view controller subclasses together.

00:06:02.699 --> 00:06:06.120
The first one, which you may be
familiar with, is UINavigationController.

00:06:06.120 --> 00:06:12.530
And it manages a stack of view controllers
presenting a hierarchy of data to the user.

00:06:12.529 --> 00:06:15.659
The second one is UITabBarController.

00:06:15.660 --> 00:06:20.439
And UITabBarController also manages multiple view
controllers but it's different from an app controller.

00:06:20.439 --> 00:06:21.850
These view controllers are parallel.

00:06:21.850 --> 00:06:22.720
They're separate.

00:06:22.720 --> 00:06:26.140
Each of them kind of has their own
little world in your application.

00:06:26.139 --> 00:06:32.089
So, we're going to take a brief look at some key aspects
of the Navigation and Tab Bar Controllers, real quick,

00:06:32.089 --> 00:06:39.029
and then after that, a couple of other things we're going
to get into the new and cool stuff in iPhone OS 3.0.

00:06:39.029 --> 00:06:44.339
So with the Navigation Controller, as I mentioned, your
users can be drilling down into a hierarchy of data.

00:06:44.339 --> 00:06:47.339
And the key operations here are pushing and popping.

00:06:47.339 --> 00:06:51.759
That's what allows you to move around
within the stack, transitioning views in

00:06:51.759 --> 00:06:54.730
and out, and keeping the Navigation Bar in sync.

00:06:54.730 --> 00:06:59.740
And if there's only one method that you're
familiar with on UINavigationController,

00:06:59.740 --> 00:07:03.280
that method should be pushViewController animated.

00:07:03.279 --> 00:07:09.179
That's going to be the method that you call in response
to button presses or table row selections in order

00:07:09.180 --> 00:07:14.900
to transition a new view onto the screen as
you drill down into the hierarchy of data.

00:07:14.899 --> 00:07:22.129
So as you see here, we select a table row, we go down
another level, we do it again, view the details per person,

00:07:22.129 --> 00:07:23.779
we can pop that by hitting the "Back" button.

00:07:23.779 --> 00:07:28.609
So in that case, it's actually pretty rare
that you will call popViewController directly.

00:07:28.610 --> 00:07:33.490
It's something that typically happens
automatically as a result of the "Back" button press.

00:07:33.490 --> 00:07:36.990
Pushing is what you're really going to be responsible for.

00:07:36.990 --> 00:07:39.329
So that's UINavigationController.

00:07:39.329 --> 00:07:42.490
The other class that I want to
mention is UITabBarController,

00:07:42.490 --> 00:07:48.170
and it has several separate self-contained modes, and
each of these modes is represented by a view controller.

00:07:48.170 --> 00:07:54.550
The tab bar down at the bottom of the screen is updated to
match each of these view controllers that it's managing.

00:07:54.550 --> 00:07:59.300
And the user is going to tap the tab bar
to initiate a switch between these modes.

00:07:59.300 --> 00:08:02.670
So typically, what's going to happen, you're
going to set up your Tab Bar Controller.

00:08:02.670 --> 00:08:04.949
You're going to give it an array of view controllers.

00:08:04.949 --> 00:08:07.839
And from there, you just kind of let it do its own thing.

00:08:07.839 --> 00:08:09.579
The user is going to tap the tab bar.

00:08:09.579 --> 00:08:11.879
It will switch between different modes.

00:08:11.879 --> 00:08:12.389
It's rare.

00:08:12.389 --> 00:08:17.379
It's possible, but it's rare that you're going
to, you know, programatically change the selection

00:08:17.379 --> 00:08:23.379
in the Tab Bar Controller, except for a situation
like application launch or something like that.

00:08:23.379 --> 00:08:28.879
One really common goal in many applications, many
of the most full featured complex apps out there,

00:08:28.879 --> 00:08:35.980
like the iPod App, the Youtube App, the App Store or Music
Store, is to combine a tab bar at the bottom of the screen

00:08:35.980 --> 00:08:37.570
with navigation at the top of the screen.

00:08:37.570 --> 00:08:40.760
This is a really common thing you
want to do in an iPhone app.

00:08:40.759 --> 00:08:45.500
And the way this is going to work is that your
top level view controller is a Tab Bar Controller.

00:08:45.500 --> 00:08:49.350
This is the one whose view you add to the window.

00:08:49.350 --> 00:08:52.230
And from there, the Tab Bar Controller
you know, has multiple children,

00:08:52.230 --> 00:08:56.039
some of those children may be UINavigationControllers.

00:08:56.039 --> 00:09:02.569
So each of those Navigation Controllers in turn,
can have its own separate stack of view controllers.

00:09:02.570 --> 00:09:06.879
So these stacks are distinct, and the user can
toggle between these different navigation stacks

00:09:06.879 --> 00:09:11.210
by pressing the tab bar at the bottom of
the screen; so that's how that sort of,

00:09:11.210 --> 00:09:13.350
is put together in a complex application.

00:09:13.350 --> 00:09:21.540
Finally, the last you know, overview topic that I want
to cover is presenting modal content in you application.

00:09:21.539 --> 00:09:26.839
And the situation where you're going to want to do
this is when your user needs to add some new data

00:09:26.840 --> 00:09:30.940
or pick from some existing data
that's already in their application.

00:09:30.940 --> 00:09:34.070
And the key with modal content is
that it covers the entire screen.

00:09:34.070 --> 00:09:38.840
The user is in this mode and needs to either,
you know, add or pick the data or maybe cancel

00:09:38.840 --> 00:09:42.399
out of it before they get back to
the main flow of your application.

00:09:42.399 --> 00:09:47.699
So here's an example in the Clock App, when we want to
add a new alarm, you hit the "+" button up at the top

00:09:47.700 --> 00:09:50.200
of the screen, and a view controller is presented modally.

00:09:50.200 --> 00:09:55.530
It takes it to full screen, it goes away when you hit the
"Cancel" button and you're back in the main flow of the app.

00:09:55.529 --> 00:10:01.720
Similarly, in the text messaging application,
you can hit that "Compose" button at the top

00:10:01.720 --> 00:10:07.680
to show a new message composition and we're going to
present an additional mode of view controller on top of that

00:10:07.679 --> 00:10:09.029
for picking someone from your address book.

00:10:09.029 --> 00:10:15.439
So we call presentModalViewController once, we call
it again, and then we dismiss them one after another,

00:10:15.440 --> 00:10:18.370
get back to the original state of the application.

00:10:18.370 --> 00:10:25.039
>> Now, Modal View Controllers are a great way to
display some other functionality into your application

00:10:25.039 --> 00:10:30.769
when we expose a few view controllers that are
ready for you to present in your application.

00:10:30.769 --> 00:10:33.539
The first one which you are probably
familiar with is the image picker.

00:10:33.539 --> 00:10:39.549
This is how you integrate with the user's
photo album and a camera in your iPhone app.

00:10:39.549 --> 00:10:43.779
The second ready to present view controller
you may have used as well is the people picker,

00:10:43.779 --> 00:10:50.350
and it allows you to select a contact from your address
book and integrate that into the application somehow.

00:10:50.350 --> 00:10:56.509
Now on iPhone OS 3.0, there are a couple of new ready to
present view controllers that you can use in your app.

00:10:56.509 --> 00:10:59.039
The first one is the mail compose view controller.

00:10:59.039 --> 00:11:04.629
So now on iPhone OS 3.0, you don't need to have
the user exit your application to send an email.

00:11:04.629 --> 00:11:06.189
It can all happen in your process.

00:11:06.190 --> 00:11:12.280
They can compose the message, they can send it, and
they don't have to leave your app, which is really cool.

00:11:12.279 --> 00:11:16.769
A second ready to present view controller on this new
in iPhone OS 3.0, there's actually a session going

00:11:16.769 --> 00:11:20.789
on about it right now as you'd see, you should definitely
check out the video, alright, is the media picker.

00:11:20.789 --> 00:11:26.149
This allows you to get you know, your user's
playlists and albums and songs into your app

00:11:26.149 --> 00:11:29.389
to use them in cool, interesting, unforeseen ways.

00:11:29.389 --> 00:11:32.600
So presenting modal content is really key.

00:11:32.600 --> 00:11:38.779
You're actually going to see some example of
presenting modal content later in today's talk.

00:11:38.779 --> 00:11:42.759
If you want to know more about view controllers,
if this is a little fast for you 'cause,

00:11:42.759 --> 00:11:44.559
you know, we're just kind of covering the basis.

00:11:44.559 --> 00:11:47.989
First, I encourage you to check out WWDC 2008 on iTunes.

00:11:47.990 --> 00:11:49.220
There are a couple of sessions.

00:11:49.220 --> 00:11:52.240
In particular, they cover this
in really, really great depth,

00:11:52.240 --> 00:11:55.159
"Understanding View Controllers"
and "Mastering View Controllers".

00:11:55.159 --> 00:11:57.669
I believe this is still available for download.

00:11:57.669 --> 00:12:02.419
Also, just a little bit of shameless self-promotion,
the iPhone Application Programming Course at Stanford,

00:12:02.419 --> 00:12:05.819
all the videos, lecture slides, assignments, handouts.

00:12:05.820 --> 00:12:06.700
It's all online.

00:12:06.700 --> 00:12:07.150
It's all free.

00:12:07.149 --> 00:12:08.439
You can download it.

00:12:08.440 --> 00:12:11.110
Check it out and produce at your leisure.

00:12:11.110 --> 00:12:19.060
And finally, tomorrow morning, 9 to 11:45 AM in
iPhone Lab A is the iPhone View Controllers Lab.

00:12:19.059 --> 00:12:23.779
So if you have specific questions about using view
controllers in your application or some use case

00:12:23.779 --> 00:12:27.240
that we didn't expect, in order to figure
out how to make it work, come and talk to us.

00:12:27.240 --> 00:12:31.820
I'm going to be there, a bunch of other UIKit engineers
will be there, and we can get your questions answered.

00:12:31.820 --> 00:12:36.290
So at this point, let's get in to the good stuff.

00:12:36.289 --> 00:12:40.189
We'll talk about some new features in iPhone OS 3.0.

00:12:40.190 --> 00:12:46.670
And as I mentioned, there's 5 features we're going to
cover: Contextual toolbars, flipping in your application,

00:12:46.669 --> 00:12:51.879
mixing interface orientations, alternate
landscape UI, and full screen layout.

00:12:51.879 --> 00:12:53.850
So let's start with contextual toolbars.

00:12:53.850 --> 00:12:59.740
The idea with contextual toolbars is that, you know,
the iPhone, it doesn't have a menu bar up at the top

00:12:59.740 --> 00:13:06.159
of the screen, and the next best place to put sort
of contextual actions the user may want to perform

00:13:06.159 --> 00:13:10.509
on what they're currently viewing is in
a toolbar at the bottom of the screen.

00:13:10.509 --> 00:13:13.629
And you've seen this well used
in the Mail App on the iPhone.

00:13:13.629 --> 00:13:17.600
As you navigate through the Mail App, the contents
of the toolbar at the bottom of the screen change.

00:13:17.600 --> 00:13:22.670
If I were to go one additional level in here, you'd
see how we get a bunch of controls for deleting

00:13:22.669 --> 00:13:25.289
and transferring your message, all that sort of stuff.

00:13:25.289 --> 00:13:27.789
And so in our Recipes Application,
we want to have something similar.

00:13:27.789 --> 00:13:31.449
At this top of the recipe list, we've got a couple controls.

00:13:31.450 --> 00:13:37.290
We want to change the sorter or maybe view settings for
the application or view this handy-dandy utensils view.

00:13:37.289 --> 00:13:41.669
Or when we view the details for a recipe, watch
here at the bottom of the screen as it changes.

00:13:41.669 --> 00:13:44.019
We select the recipe and the toolbar items change.

00:13:44.019 --> 00:13:45.029
This is really common.

00:13:45.029 --> 00:13:46.579
A lot of apps want to do this.

00:13:46.580 --> 00:13:50.379
And we wanted to make it dead simple
for you to adopt in your application.

00:13:50.379 --> 00:13:53.710
So how do we do this?

00:13:53.710 --> 00:13:59.750
The key now is that navigation controllers
may optionally choose to display a toolbar.

00:13:59.750 --> 00:14:03.450
It appears at the bottom of the
screen and the content of, you know,

00:14:03.450 --> 00:14:07.250
the area where the top view controller
is displayed is automatically resized

00:14:07.250 --> 00:14:09.649
to accommodate the toolbar at the bottom.

00:14:09.649 --> 00:14:13.840
So we've got a toolbar, where did
the toolbar items come from?

00:14:13.840 --> 00:14:19.879
The second edition is that each view
controller can have an array of toolbar items.

00:14:19.879 --> 00:14:27.980
So you would allocate and you would set an array of items
on each view controller and then as navigation occurs,

00:14:27.980 --> 00:14:31.289
the toolbar is going to be automatically
updated to match where you are.

00:14:31.289 --> 00:14:36.870
So the key here is that you don't need to access the toolbar
directly and say, you know, set the items, you can just,

00:14:36.870 --> 00:14:40.210
you know, set them on the view
controllers, and it will be automatically--

00:14:40.210 --> 00:14:43.900
the toolbar will be automatically updated to match.

00:14:43.899 --> 00:14:45.549
One thing worth mentioning here is

00:14:45.549 --> 00:14:51.120
that the hidesBottomBarWhenPushed property is
respected for toolbars as well as tab bars.

00:14:51.120 --> 00:14:57.259
You've probably been using hidesBottomBarWhenPushed in
situations like the iPod Application where the tab bar is

00:14:57.259 --> 00:15:00.720
at the bottom of the screen but then it
slides out when you're viewing Now Playing.

00:15:00.720 --> 00:15:06.730
So you set hidesBottomBarWhenPushed to Yes on the view
controller which we'd like to hide that bottom bar.

00:15:06.730 --> 00:15:12.120
And this works just as well for toolbars if there's
a situation, and we'll see it on some of movies here

00:15:12.120 --> 00:15:16.679
where we want the toolbar to just
go away and animate out correctly.

00:15:16.679 --> 00:15:22.239
So let's-- oh, that brings me to a very good
point which is toolbars versus tab bars.

00:15:22.240 --> 00:15:23.159
What's the difference?

00:15:23.159 --> 00:15:27.909
You know, they have pretty similar names, and actually
in the very, very first data version of the SDK,

00:15:27.909 --> 00:15:30.639
they were the same class which is kind of crazy.

00:15:30.639 --> 00:15:34.370
But toolbars are really all about performing actions,

00:15:34.370 --> 00:15:37.129
and they use momentary highlighting
to indicate what you've pressed.

00:15:37.129 --> 00:15:40.240
But then, once you take your finger
off, the highlighting goes away.

00:15:40.240 --> 00:15:44.610
Tab bars are all about indicating modes.

00:15:44.610 --> 00:15:48.690
They stay highlighted, the highlighting
is persistent, and really,

00:15:48.690 --> 00:15:52.820
when the user presses on a tab
bar item they expect a mode change

00:15:52.820 --> 00:15:55.570
but they don't expect a lot of
other stuff to happen, alright.

00:15:55.570 --> 00:16:00.070
It can be very disconcerting and confusing
to the user if they tap on the tab bar item

00:16:00.070 --> 00:16:02.230
and some other stuff happens in your app.

00:16:02.230 --> 00:16:07.120
So that will be one sort of recommendation in
terms of how to use toolbars versus tab bars.

00:16:07.120 --> 00:16:10.549
You know, toolbars are for actions, tab bars are for modes.

00:16:10.549 --> 00:16:14.539
Another thing worth mentioning is that your
application may have, you know, one or the other,

00:16:14.539 --> 00:16:20.099
but I'm hard pressed to think of it of a situation
where you'd want both, a contextual toolbar

00:16:20.100 --> 00:16:21.720
and a tab bar at the bottom of the screen.

00:16:21.720 --> 00:16:24.600
First of all, that's going to be
taking up a big chunk of space.

00:16:24.600 --> 00:16:28.580
And second, I don't know, I just can't think
of any apps where that would make sense.

00:16:28.580 --> 00:16:29.990
But who knows, maybe.

00:16:29.990 --> 00:16:34.330
My recommendation would be choose one or the other.

00:16:34.330 --> 00:16:39.730
So let's look at how we actually use a contextual toolbar
with some code sample and a little bit of you know,

00:16:39.730 --> 00:16:41.430
eye candy to really drive the point down.

00:16:41.429 --> 00:16:46.149
So right now, we've got a navigationController, it's
been added, its view has been added to the window,

00:16:46.149 --> 00:16:47.730
and right now, there's no toolbar anywhere.

00:16:47.730 --> 00:16:52.759
And what we really want is for a toolbar to show
up in that space at the bottom of the screen.

00:16:52.759 --> 00:16:59.210
So the first thing we do, there's a property on
UINavigationController, toolbarHidden, it defaults to "Yes,"

00:16:59.210 --> 00:17:06.140
and kind of you know, inverse negative,
toolbarHidden set to "No" which shows the toolbar.

00:17:06.140 --> 00:17:11.800
And when we do this, you'll see the toolbar
magically materializes at the bottom of the screen.

00:17:11.799 --> 00:17:13.409
So we've got the toolbar now.

00:17:13.410 --> 00:17:14.720
We want to populate it with some content.

00:17:14.720 --> 00:17:20.160
And as I mentioned, we're not going to access
the toolbar and set these items directly.

00:17:20.160 --> 00:17:26.910
What we really want to do is set the items on the view
controller, in this case, the recipe list view controller.

00:17:26.910 --> 00:17:32.470
So I create this array of items, and I'm going to set it on
the recipe list view controller and by virtue of doing that,

00:17:32.470 --> 00:17:36.029
the toolbar is automatically updated to match.

00:17:36.029 --> 00:17:41.399
And then finally, we want some different items
when reviewing the details for our recipe, right?

00:17:41.400 --> 00:17:45.660
So we're getting the recipe detailedViewController
ready to display.

00:17:45.660 --> 00:17:49.570
We're going to set its toolbar items
to some array of different items.

00:17:49.569 --> 00:17:54.379
And then when we push the view controller, you'll
notice without accessing the toolbar directly,

00:17:54.380 --> 00:17:58.550
the toolbar updates to show the new items.

00:17:58.549 --> 00:18:02.720
So that's how you use contextual
toolbars in your application.

00:18:02.720 --> 00:18:08.259
The key here, first of all, is that each view
controller may have its own list of toolbar items

00:18:08.259 --> 00:18:11.809
and the navigation controller will
automatically update the toolbar to stay

00:18:11.809 --> 00:18:14.579
in sync with where your users navigate it to.

00:18:14.579 --> 00:18:17.119
And again, don't confuse tab bars and toolbars.

00:18:17.119 --> 00:18:18.250
There's a big difference.

00:18:18.250 --> 00:18:23.750
And if you, you know, use one when you should be using
the other, it can be very confusing for your user.

00:18:23.750 --> 00:18:25.559
So those are contextual toolbars.

00:18:25.559 --> 00:18:30.639
The next topic that I want to cover
is flipping in your application.

00:18:30.640 --> 00:18:32.460
So, you've seen this in a lot of places.

00:18:32.460 --> 00:18:37.850
The Stocks Application uses flipping, you know, very well,
you can tap that little button at the bottom of the screen,

00:18:37.849 --> 00:18:41.449
flip over, change some things around, go
back to the main flow of the application.

00:18:41.450 --> 00:18:48.460
So a flip UI is a really convenient way to present some sort
of auxiliary views, settings, something that is an essential

00:18:48.460 --> 00:18:52.740
to the core application flow, but
it sort of tangentially related.

00:18:52.740 --> 00:18:57.029
So we wanted to make this really, really
easy for you to do in your application.

00:18:57.029 --> 00:19:03.349
There was some sample code for this on iPhone OS
2.X. The issue there was that it involved a sort

00:19:03.349 --> 00:19:07.589
of intermediate view controller that contained
both the front and the back side view controllers.

00:19:07.589 --> 00:19:12.449
There's about a little bit more heavyweight than
it should have been given how commonly people want

00:19:12.450 --> 00:19:14.140
to do this in their applications.

00:19:14.140 --> 00:19:15.890
So we want to make it really easy.

00:19:15.890 --> 00:19:19.910
And if you think about it, you know, this act of
flipping you application here in the Recipes App,

00:19:19.910 --> 00:19:25.100
you hit the Settings button, go to some settings,
hit the Done button, go back to the main screen.

00:19:25.099 --> 00:19:27.629
It's a lot like presenting a modal view controller, right?

00:19:27.630 --> 00:19:33.510
Your user is in this mode, they need to, you know,
finish the settings and then hit the Done button,

00:19:33.509 --> 00:19:35.710
and then they go back to the main flow of their application.

00:19:35.710 --> 00:19:41.509
So what we decided to do was actually
extend modally presented view controllers

00:19:41.509 --> 00:19:44.119
to include different presentation styles.

00:19:44.119 --> 00:19:51.609
So if you look in UIViewController.h or in the
documentation, there are now three modal transition styles

00:19:51.609 --> 00:19:54.589
that you can use when presenting and dismissing modally.

00:19:54.589 --> 00:20:00.049
The first one is the default, you've been using it, you
know, since iPhone OS 2.0, it's the Cover Vertical style

00:20:00.049 --> 00:20:05.099
which will cause a view controller to come up from the
bottom of the screen and go away in the same direction.

00:20:05.099 --> 00:20:09.529
And there are two new styles, the
Horizontal Flip and the Cross Dissolve.

00:20:09.529 --> 00:20:11.950
We're going to be talking about the
Cross Dissolve a little bit later.

00:20:11.950 --> 00:20:15.400
For now, let's focus on the Horizontal Flip.

00:20:15.400 --> 00:20:19.060
>> So in addition to defining these
styles, we added a new property

00:20:19.059 --> 00:20:22.710
to UIViewController which is the modalTransitionStyle.

00:20:22.710 --> 00:20:24.090
This is per view controller.

00:20:24.089 --> 00:20:28.759
This is a setting that you set on the
view controller that will be presented.

00:20:28.759 --> 00:20:31.529
So here's how you use them.

00:20:31.529 --> 00:20:35.859
You first set the modalTransitionStyle, as I mentioned,
on the view controller that's going to be presented.

00:20:35.859 --> 00:20:39.419
So in this case, I would set it
on the settings view controller

00:20:39.420 --> 00:20:41.460
in the Recipes App, not the one on the front side.

00:20:41.460 --> 00:20:45.569
It's unique to every view controller
that is to be presented.

00:20:45.569 --> 00:20:50.970
And then I just call the regular presentModalViewController
animated, dismissModalViewController animated,

00:20:50.970 --> 00:20:54.480
and that modalTransitionStyle will be respected.

00:20:54.480 --> 00:20:57.529
So let's take a look at how this
actually works in the Recipes Application.

00:20:57.529 --> 00:21:00.660
I don't believe the sample code
is on the attendee's site yet,

00:21:00.660 --> 00:21:05.210
but it will be up there pretty
shortly for you to mess around with.

00:21:05.210 --> 00:21:06.590
So here's the Recipes App again.

00:21:06.589 --> 00:21:07.909
We've got the toolbar at the bottom.

00:21:07.910 --> 00:21:14.890
We've got that Settings buttons and we want that Settings
button to flip over to the settings for the Recipes App.

00:21:14.890 --> 00:21:20.470
So the first step as we're preparing the setting view
controller here referred to as the backViewController,

00:21:20.470 --> 00:21:24.059
we're going to set the modalTransitionStyle,
and this is something that persists.

00:21:24.059 --> 00:21:29.819
You set it once on the view controller and that
will last through the presentation, dismissal.

00:21:29.819 --> 00:21:34.480
If you present it again, you just need to
set it one time on your view controller.

00:21:34.480 --> 00:21:40.620
So as we set that, we'll then call the regular
presentModalViewController animated method.

00:21:40.619 --> 00:21:43.839
And here, we're pressing "Yes" for
the animation property, of course.

00:21:43.839 --> 00:21:46.699
And what this will do when the
user hits that Settings button,

00:21:46.700 --> 00:21:50.580
we're going to flip over to the
back side of the application.

00:21:50.579 --> 00:21:58.099
And now, when we want to go back to the main application
flow, we don't' need to set the modalTransitionStyle again,

00:21:58.099 --> 00:22:04.049
we just call dismissModalViewControllerAnimated and
we'll go back to the main flow of the application.

00:22:04.049 --> 00:22:05.720
Pardon me for a second.

00:22:06.730 --> 00:22:09.980
[Applause] Yeah, yeah, right.

00:22:09.980 --> 00:22:14.670
So, yeah, you know, this used to be
pretty complicated on iPhone OS 2.0.

00:22:14.670 --> 00:22:15.740
There was a lot of code.

00:22:15.740 --> 00:22:21.160
There was a lot of boilerplate code you had to bring in
from a template to get this working in your application.

00:22:21.160 --> 00:22:23.110
Now, it's easy to integrate anywhere.

00:22:23.109 --> 00:22:25.479
It's, you know, just a couple lines of code.

00:22:25.480 --> 00:22:28.809
You set the modalTransitionStyle
and you present and dismiss.

00:22:28.809 --> 00:22:33.289
Yeah, so that's something we got a lot of
feedback about and we want to make it easier.

00:22:33.289 --> 00:22:38.559
This next topic, we probably got even more feedback
about and it's mixing interface orientations

00:22:38.559 --> 00:22:41.389
in your view controller-based application.

00:22:41.390 --> 00:22:45.950
Ton of feedback about this, this is heavily, heavily
requested, and we wanted to make it work for some

00:22:45.950 --> 00:22:49.110
of the most commonly requested use cases.

00:22:49.109 --> 00:22:51.309
And there are two cases that we're most interested in.

00:22:51.309 --> 00:22:55.099
And the first one is a case of modally presented content.

00:22:55.099 --> 00:22:58.819
As you can see, we're going back to modally
presented view controllers a lot today.

00:22:58.819 --> 00:23:05.319
So back at the main screen, you'll notice this
little utensils toolbar item down in the lower left.

00:23:05.319 --> 00:23:12.480
And when we tap this, we want to show just, you know, just
in case you forgot what utensils you had in your covered,

00:23:12.480 --> 00:23:14.740
remind you what you've got, and this is a landscape view.

00:23:14.740 --> 00:23:19.730
There are a lot of other applications where the
main flow of the application is in portrait,

00:23:19.730 --> 00:23:23.460
but then there's some modal view control
that you want to present its landscape only.

00:23:23.460 --> 00:23:26.090
So this wasn't really supported on iPhone OS 2.0.

00:23:26.089 --> 00:23:31.089
All of your view controllers had to support pretty
much the same set of interface orientations.

00:23:31.089 --> 00:23:34.149
Otherwise your-- the behavior was kind of unexpected.

00:23:34.150 --> 00:23:40.880
But now, if we tap on this utensils button, you'll notice
that we present this thing in landscape, and the tool--

00:23:40.880 --> 00:23:43.950
this set of part at the top of the
screen updates itself automatically.

00:23:43.950 --> 00:23:46.380
We're going to do this in slow
motion, don't worry if you blinked

00:23:46.380 --> 00:23:49.640
and missed it, I promise there was no sleight of hand.

00:23:49.640 --> 00:23:54.900
So if we hit "Done" now, we're going to return
to the main flow of our application in portrait.

00:23:54.900 --> 00:24:00.940
The Status Bar is back to the portrait
orientation and everything is as it was before.

00:24:00.940 --> 00:24:04.299
The other case is within the navigation stack.

00:24:04.299 --> 00:24:06.139
So this was another common request.

00:24:06.140 --> 00:24:10.730
A lot of applications want to have portrait view controller,
portrait view controller, portrait view controller,

00:24:10.730 --> 00:24:13.309
and then some leaf node which is rotatable.

00:24:13.309 --> 00:24:20.339
You may have seen this in Mail on iPhone OS 2.0 where
Mail was not rotatable except for the attachment view.

00:24:20.339 --> 00:24:24.009
You could rotate attachments and then hit the
"Back" button from there and you would be restored

00:24:24.009 --> 00:24:27.089
into portrait in the main flow of your application.

00:24:27.089 --> 00:24:34.159
So if you check it out here, we're viewing the photo
detail for a recipe and this view is rotatable.

00:24:34.160 --> 00:24:37.120
The previous one in the stack is not rotatable.

00:24:37.119 --> 00:24:44.359
So when this-- we rotate here, the automatic
interface rotation occurs automatically

00:24:44.359 --> 00:24:47.189
and we hit the "Back" button, and we're back in portrait.

00:24:47.190 --> 00:24:48.950
So it was kind of a crazy transition.

00:24:48.950 --> 00:24:49.600
I'll do it again.

00:24:49.599 --> 00:24:52.369
Well, there's that one.

00:24:52.369 --> 00:24:53.819
Go back to portrait here.

00:24:53.819 --> 00:24:59.960
You rotate, hit the "Back" button, it's back in portrait.

00:24:59.960 --> 00:25:02.130
So how do we do this?

00:25:02.130 --> 00:25:08.070
The key here is, well first of all, mixed interface
orientations are now supported in two situations:

00:25:08.069 --> 00:25:11.639
Presenting modally, and within a navigation stack.

00:25:11.640 --> 00:25:12.340
And the key here is

00:25:12.339 --> 00:25:17.879
to implement -shouldAutorotateToInterfaceOrientation:
in the expected manner.

00:25:17.880 --> 00:25:21.710
And the key is to return YES for
the orientations that you support.

00:25:21.710 --> 00:25:27.230
This is a way to indicate to the view controller
presentation machinery what orientations are okay

00:25:27.230 --> 00:25:29.490
for this view controller and which ones are not supported.

00:25:29.490 --> 00:25:32.099
And you really want your implementation here to be simple.

00:25:32.099 --> 00:25:36.669
And if you find yourself writing a ton of code
in shouldAutorotateToInterfaceOrientation,

00:25:36.670 --> 00:25:39.410
and you're checking with the five or six
other objects, "Hey, should I rotate?

00:25:39.410 --> 00:25:40.759
Should I not?"

00:25:40.759 --> 00:25:46.589
and you're checking maybe even your own current interface
orientation, that may be not exactly what we're expecting

00:25:46.589 --> 00:25:49.389
out of shouldAutorotateToInterfaceOrientation.

00:25:49.390 --> 00:25:55.170
So we want to keep it simple and we want to
keep it about design time, not run time logic.

00:25:55.170 --> 00:26:01.789
So let's take a look at a couple example
implementations of shouldAutorotateToInterfaceOrientation.

00:26:01.789 --> 00:26:04.579
So the first example is a portrait-only view controller.

00:26:04.579 --> 00:26:07.500
And this is actually the default implementation right here.

00:26:07.500 --> 00:26:15.150
So we're only returning YES here if the proposed interface
orientation is portrait; so simple stuff, portrait only.

00:26:15.150 --> 00:26:17.990
Another example of view controller
is one that's landscape-only,

00:26:17.990 --> 00:26:21.430
like the utensils view controller
that we were looking at before.

00:26:21.430 --> 00:26:26.120
So here, we're only returning YES if
the interface orientation is landscape.

00:26:26.119 --> 00:26:29.179
Sorry, if I was standing in front of that.

00:26:29.180 --> 00:26:31.830
If we wanted to support both portrait and landscape,

00:26:31.829 --> 00:26:34.199
you might have an implementation
where you order these two together.

00:26:34.200 --> 00:26:41.269
So that's like the photo detail view
controller that we were looking at previously.

00:26:41.269 --> 00:26:45.849
So let's look now at how we actually
mix these interface orientations.

00:26:45.849 --> 00:26:52.990
So here in the case with the utensils view, the recipe list
view controller only supports portrait, it's not rotatable.

00:26:52.990 --> 00:26:56.519
And then the utensils view controller
supports landscape orientations.

00:26:56.519 --> 00:26:59.220
It returns YES for landscape left and landscape right.

00:26:59.220 --> 00:27:05.829
So when we call presentModalViewController here with the
utensils as utensils view controller as our argument,

00:27:05.829 --> 00:27:09.789
you'll notice the status bar automatically
moves over, the view comes up in landscape,

00:27:09.789 --> 00:27:16.409
and then the user can rotate their photo to look
at this incredibly compelling content in landscape.

00:27:16.410 --> 00:27:21.200
When they dismiss they hit the "Done" button, the status
bar automatically updates and then back in portrait.

00:27:21.200 --> 00:27:24.299
You'll notice here, there's really no any new API.

00:27:24.299 --> 00:27:28.500
It's just supported via the existing
shouldAutorotateToInterfaceOrientation method.

00:27:28.500 --> 00:27:35.259
There's no secret sauce you need to set up, just implement
shouldAutorotateToInterfaceOrientation and it works.

00:27:35.259 --> 00:27:39.039
So as I mentioned, the other case
is within the navigation stack.

00:27:39.039 --> 00:27:41.000
And I should be, maybe a little bit more specific here.

00:27:41.000 --> 00:27:45.119
What we now support is a case where you've
got a portrait-only navigation stack

00:27:45.119 --> 00:27:48.309
and tell your leaf note and that one is rotatable.

00:27:48.309 --> 00:27:54.579
So all of a sudden, you're in landscape with this leaf node
whether it's, you know, a photo or an email attachment,

00:27:54.579 --> 00:27:57.809
whatever, and you want to pop back
to something that's portrait-only.

00:27:57.809 --> 00:28:00.210
And that's the case specifically that we now support.

00:28:00.210 --> 00:28:03.090
We got a lot of request for this, and
every single person who has asked for it,

00:28:03.089 --> 00:28:05.569
that was the case that they were trying to do.

00:28:05.569 --> 00:28:10.319
So here, the photo view controller supports
both portrait and landscape orientations.

00:28:10.319 --> 00:28:13.470
The previous view controller in
the stack, the recipe detail view,

00:28:13.470 --> 00:28:16.589
for whatever reason, we've decided
it only supports portrait.

00:28:16.589 --> 00:28:21.669
So as long as we indicate our support
via the shouldAutorotate implementations,

00:28:21.670 --> 00:28:27.940
when we hit the Back button here after rotating
the landscape, of course, you'll notice this kind

00:28:27.940 --> 00:28:35.789
of crazy transition where everything slides out vertically
and the previous view comes in already in portrait.

00:28:35.789 --> 00:28:38.329
So that's that.

00:28:38.329 --> 00:28:38.879
No new API.

00:28:38.880 --> 00:28:43.730
It indicates supported orientations via
-shouldAutorotateToInterfaceOrientation,

00:28:43.730 --> 00:28:46.799
and this is new to iPhone OS 3.0.

00:28:46.799 --> 00:28:49.869
Next stop.

00:28:51.009 --> 00:28:55.759
[ Applause ]

00:28:55.759 --> 00:29:00.539
>> Next stop is alternate landscape UI and
this is another heavily requested thing.

00:29:00.539 --> 00:29:07.720
And actually, what we're going to see here is this actually
combines two of the last topics we've just talked about;

00:29:07.720 --> 00:29:13.309
mixing interface orientations and
using custom modal transition styles.

00:29:13.309 --> 00:29:16.889
In this case, the Cross Dissolve modal transition style.

00:29:16.890 --> 00:29:22.270
So you've all seen the iPod application, and you know
that when you're browsing around in these table views,

00:29:22.269 --> 00:29:27.339
when you rotate the phone, you all of a sudden
go to this different mode, the tab bar goes away,

00:29:27.339 --> 00:29:30.709
the navigation bar goes away, and you're in
this totally, totally different, you know,

00:29:30.710 --> 00:29:34.380
sort of optional additional mode for the application.

00:29:34.380 --> 00:29:40.200
And we got a lot of API requests actually, requesting things
like, you know, "I want to be able to hide the tab bar

00:29:40.200 --> 00:29:43.620
in this particular area or I want to
be able to fadeout the navigation bar".

00:29:43.619 --> 00:29:47.419
And it turns out a lot of those
requests were actually asking for this,

00:29:47.420 --> 00:29:51.090
they wanted to present an alternate
landscape UI in their application.

00:29:51.089 --> 00:29:55.959
So we want to make this easy for
you in your application as well.

00:29:55.960 --> 00:30:01.329
If-- folks out there who have done it, I know their Quicken
app does a great job presenting an alternate landscape UI.

00:30:01.329 --> 00:30:08.269
Hopefully those folks can, you know, delete
a bunch of code and do things the easier way

00:30:08.269 --> 00:30:12.609
after all their hard work has gone noticed by users.

00:30:12.609 --> 00:30:18.399
>> So here when we rotate the phone out of
the recipe list, or the recipe detail view,

00:30:18.400 --> 00:30:24.350
we want to show a little card view, you know, browsing
through your card book of recipes, I don't know,

00:30:24.349 --> 00:30:26.379
probably like cover flow, they kind of matches.

00:30:26.380 --> 00:30:28.650
So how do we do this?

00:30:28.650 --> 00:30:35.050
As I mentioned, we're going to
use mixed interface orientations

00:30:35.049 --> 00:30:37.210
in the context of presenting modal view controller.

00:30:37.210 --> 00:30:42.009
So we've got two view controller; the one that's
underneath is in portrait, and the one that we're going

00:30:42.009 --> 00:30:45.019
to be presenting, the card view, is landscape-only.

00:30:45.019 --> 00:30:51.139
And the next step is to observe UIDevice
orientation change notifications.

00:30:51.140 --> 00:30:55.759
So this is a case where we don't want to opt
into the standard interface autorotation stuff

00:30:55.759 --> 00:31:00.190
because that's really geared toward a single
view that remains on screen as we're rotating

00:31:00.190 --> 00:31:02.130
from portrait to landscape or vice versa.

00:31:02.130 --> 00:31:06.940
That single view changes shape, maybe animates itself
a little bit, but that's not what we want here.

00:31:06.940 --> 00:31:09.970
We want to show an entirely different view.

00:31:09.970 --> 00:31:14.610
So, we're going to observe this UIDevice
orientation change notifications.

00:31:14.609 --> 00:31:20.909
And when we hear about a rotation to landscape,
we're gonna present the card view controller.

00:31:20.910 --> 00:31:26.430
And when we rotate back to portrait, we're
going to dismiss that card view controller.

00:31:26.430 --> 00:31:31.660
And we're going to do it all using the modalTransitionStyle,
the CrossDissolve modalTransitionStyle.

00:31:31.660 --> 00:31:37.509
And we're going to see, there we go, alright.

00:31:37.509 --> 00:31:43.230
So this is again leveraging a couple of things that
we've already talked about in the presentation today.

00:31:43.230 --> 00:31:49.000
So, starting with the recipe card view controller, our
implementation of shouldAutorotateToInterfaceOrientation,

00:31:49.000 --> 00:31:53.710
we just returned YES for either
landscape left or landscape right.

00:31:53.710 --> 00:31:57.150
You'll also notice that the status bar
up at the top of the screen is black.

00:31:57.150 --> 00:32:01.430
So we want to enforce that as well
in our viewWillAppear method.

00:32:01.430 --> 00:32:06.690
After we call the super-- the super implementation,
we're going to set the status bar style

00:32:06.690 --> 00:32:10.990
on the application to the black opaque style.

00:32:10.990 --> 00:32:15.180
Conversely and view will disappear, we're going
to set the status bar style back to default.

00:32:15.180 --> 00:32:19.570
Now let's assume that the main UI bar
application uses the default status bar style.

00:32:19.569 --> 00:32:26.169
If we really wanted to be super clever here, we'll probably,
you know, save away the original style in viewWillAppear

00:32:26.170 --> 00:32:29.289
and then restore it in viewWillDisappear
but that didn't quite fit on the slide.

00:32:29.289 --> 00:32:33.500
So I just kind of assumed that we're in
default in the main flow of the application.

00:32:33.500 --> 00:32:35.200
So that's the card view.

00:32:35.200 --> 00:32:42.130
Now, the second step as I mentioned was to listen
to UIDevice orientation change notifications.

00:32:42.130 --> 00:32:42.950
And we do this first.

00:32:42.950 --> 00:32:46.150
Let's say that we're going to take this
all off in our application delegate.

00:32:46.150 --> 00:32:53.320
In our applicationDidFinishLaunching method maybe
we want to begin observing this notification.

00:32:53.319 --> 00:32:58.210
So the notification is
UIDeviceOrientationDidChangeNotification.

00:32:58.210 --> 00:33:02.710
And so anytime the device orientation changes,
it's going to invoke this method on us,

00:33:02.710 --> 00:33:07.430
on the app delegate called deviceOrientationDidChange.

00:33:07.430 --> 00:33:09.330
Let's look at the implementation of that method.

00:33:09.329 --> 00:33:12.419
So here we go, deviceOrientationDidChange.

00:33:12.420 --> 00:33:18.080
And the first thing we're going to do
is get the current device orientation.

00:33:18.079 --> 00:33:22.500
We're then going to perform a few checks to
figure out if this is an appropriate time

00:33:22.500 --> 00:33:25.680
to show the landscape card view controller.

00:33:25.680 --> 00:33:29.860
So we first check, see whether the
orientation is landscape or not.

00:33:29.859 --> 00:33:35.979
If that's true, we also want to check and make sure we don't
have a different modal view controller already presented.

00:33:35.980 --> 00:33:40.519
And the third check we want to make for
the case of the Recipes Application,

00:33:40.519 --> 00:33:44.660
because the recipe photo view is
rotatable, we don't want to show

00:33:44.660 --> 00:33:47.620
that in the cover flow view when
you're viewing the recipe view.

00:33:47.619 --> 00:33:53.379
So we check whether the top view controller handles
landscape or not, and if it doesn't do landscape,

00:33:53.380 --> 00:33:57.420
then it's going to need appropriate
for us to show that card view.

00:33:57.420 --> 00:34:03.450
So, if all these conditions evaluate to YES, we're
going to get our card view controller, ready to go,

00:34:03.450 --> 00:34:09.920
and we're going to set the modalTransitionStyle
on it to CrossDissolve modalTransitionStyle.

00:34:09.920 --> 00:34:14.340
And then just as we've done, you know, a bunch
of times already today and however many times

00:34:14.340 --> 00:34:18.430
in your application, presentModalViewController animated.

00:34:18.429 --> 00:34:25.759
So that would cause the application to
fade into this cover flow-esque mode.

00:34:25.760 --> 00:34:31.270
It's-- maybe card flow is the right word for it
when the user rotates the device to landscape.

00:34:31.269 --> 00:34:37.090
So now we need to implement the other half of that
method, of the deviceOrientationDidChange method.

00:34:37.090 --> 00:34:38.039
So here we go.

00:34:38.039 --> 00:34:40.920
And the other half the if-- of the if statement.

00:34:40.920 --> 00:34:47.380
If the orientation is portrait and our currently
presented modalViewController is the cardViewController,

00:34:47.380 --> 00:34:51.950
so this is just a kind of simple check here
to make sure it actually has been presented.

00:34:51.949 --> 00:34:54.799
Then, we're going to dismiss that modalViewController.

00:34:54.800 --> 00:35:01.510
We call dismissModalViewControllerAnimated, we want
YES animation, so it'll just cross dissolve out.

00:35:01.510 --> 00:35:07.370
And because mixed interface orientations are supported
with modally presented view controllers, this just works.

00:35:07.369 --> 00:35:10.559
So if we go back here, we rotate
the device back to portrait,

00:35:10.559 --> 00:35:13.190
we're going to fade back to the main UI in our application.

00:35:13.190 --> 00:35:17.970
So hopefully this should make it really easy for you
to adopt an alternate landscape UI in your application.

00:35:17.969 --> 00:35:22.289
Hopefully it's not too insane or gratuitous
but I look forward to checking it out.

00:35:22.289 --> 00:35:23.009
Yeah.

00:35:23.010 --> 00:35:29.060
[ Applause ]

00:35:29.059 --> 00:35:32.219
>> Alright, so that was alternate landscape UIs.

00:35:32.219 --> 00:35:34.529
We used view controllers here.

00:35:34.530 --> 00:35:39.190
We present and dismiss modally
in response to device rotation,

00:35:39.190 --> 00:35:42.369
and we used one of this new modal transitions styles.

00:35:42.369 --> 00:35:48.789
Finally, the last new feature that I
want to cover is full screen layout.

00:35:48.789 --> 00:35:54.800
And the idea here is that in the Photos Application,
for example, when the user is viewing a photo,

00:35:54.800 --> 00:35:59.690
they can scale that thing up and it can occupy the entire
screen including the area underneath the navigation bar,

00:35:59.690 --> 00:36:02.240
underneath the status bar, even at the top of the screen.

00:36:02.239 --> 00:36:06.509
A lot of people want to this when they've got
really compelling especially user-generated content

00:36:06.510 --> 00:36:09.240
that they want to just fill the entire screen with.

00:36:09.239 --> 00:36:12.009
So we wanted to support this as well in the Recipes App.

00:36:12.010 --> 00:36:20.270
As you might expect, now when you view a recipe photo,
you'll notice that recipe photo content can fill

00:36:20.269 --> 00:36:23.360
up the entire screen including
the area under the status bar.

00:36:23.360 --> 00:36:26.710
So I'm going to show you how to do this.

00:36:26.710 --> 00:36:31.539
The first step is to cause the
navigation bar to overlap your content.

00:36:31.539 --> 00:36:36.489
And this is actually something that
has been supported since iPhone OS 2.X,

00:36:36.489 --> 00:36:40.329
what you do is you make your navigation bar translucent.

00:36:40.329 --> 00:36:47.049
And if you're in the context of a navigation controller
and you set its navigation bar to be translucent,

00:36:47.050 --> 00:36:52.340
the content will automatically be positioned
in the space underneath the navigation bar.

00:36:52.340 --> 00:36:58.370
To be more specific, this has always worked if
your top view controller's view is a scroll view,

00:36:58.369 --> 00:37:00.889
and it's worked since iPhone OS 2.0.

00:37:00.889 --> 00:37:07.639
And we extended this to work for all views for
application that are linked on or after iPhone OS 2.2.

00:37:07.639 --> 00:37:12.690
So if you're working with iPhone OS 2.2
or later, any view should be positioned

00:37:12.690 --> 00:37:16.530
in the area underneath the navigation
bar if the navigation bar is translucent.

00:37:16.530 --> 00:37:22.240
But the next step that's a little bit more complicated
is getting the status bar to overlap our content as well.

00:37:22.239 --> 00:37:26.539
By default, content just does not
appear underneath the status bar.

00:37:26.539 --> 00:37:34.650
And people tried some ways of making this work on iPhone
OS 2.X and some of them worked, and some sort of worked,

00:37:34.650 --> 00:37:36.710
and then they broke, and all that sort of stuff.

00:37:36.710 --> 00:37:43.889
I'm going to show you the fully espoused supported
way for you to do this in your application.

00:37:43.889 --> 00:37:49.909
To overlap the status bar with your content in a navigation
or tab bar based app or even when they combines nav bars

00:37:49.909 --> 00:37:53.199
and tab bars, you first want to make sure that your window

00:37:53.199 --> 00:37:57.609
and the containing view controller
are sized to the full screen.

00:37:57.610 --> 00:38:02.559
So this means when you create your window, if you create
in code, maybe you're creating your NIB, in which case,

00:38:02.559 --> 00:38:09.880
it should already be sized to the full screen size, you're
going to use the value of UIScreen mainScreen bounds,

00:38:09.880 --> 00:38:14.070
if you're not turning any area off the
top of the screen for the status bar.

00:38:14.070 --> 00:38:16.769
The same thing goes for your containing view controller.

00:38:16.769 --> 00:38:20.340
So in this case of the Recipes App, when
we size this view controller to start with,

00:38:20.340 --> 00:38:24.600
we don't want it to be the application
frame, we want it to be the full screen,

00:38:24.599 --> 00:38:27.639
we want it to take up the full area of the window.

00:38:27.639 --> 00:38:31.779
The navigation bar and tab bar,
no, sorry, navigation controller

00:38:31.780 --> 00:38:39.660
and tab bar controller are both intelligent enough
to position their content in such a way that if it,

00:38:39.659 --> 00:38:44.259
how should I say this, navigation controller,
you might worry that the navigation bar is going

00:38:44.260 --> 00:38:46.540
to overlap the status bar now at the top of the screen.

00:38:46.539 --> 00:38:50.190
But the navigation controller actually
handles that for you automatically.

00:38:50.190 --> 00:38:56.510
The navigation bar is shifted down by the height
of the status bar even if it's full screen.

00:38:56.510 --> 00:39:01.390
And then the key here to indicate
to the containing view controller

00:39:01.389 --> 00:39:05.679
that it should actually size its
content using the full screen is

00:39:05.679 --> 00:39:10.739
to set this property wantsFullScreenLayout
to YES on your view controller.

00:39:10.739 --> 00:39:17.819
So in the case of the Recipes Application, we're going to
set that property to YES on the recipes photoViewController.

00:39:17.820 --> 00:39:23.860
Now, important to mention here is that the
status bar style change is still up to you.

00:39:23.860 --> 00:39:28.590
So, after you've, you know, you've got this full
screen window, full screen navigation controller,

00:39:28.590 --> 00:39:31.950
one of your view controllers in the
stack has wantsFullScreenLayout YES,

00:39:31.949 --> 00:39:37.069
you still need to call the UI application
method to update the status bar style.

00:39:37.070 --> 00:39:38.660
So, kind of a lot of stuff here.

00:39:38.659 --> 00:39:43.539
Let's look at some code and hopefully that
will help to illustrate what's going on.

00:39:43.539 --> 00:39:45.739
So here's the full screen aspect.

00:39:45.739 --> 00:39:48.509
When we're creating our window, we're
sizing it, we're calling it with frame,

00:39:48.510 --> 00:39:54.330
we're going to call UIScreen mainScreen bounds
to get the frame that we're using for the window.

00:39:54.329 --> 00:39:59.920
Again, if you're using Interface Builder, you might
just want to check out your mainwindow.zib and check it

00:39:59.920 --> 00:40:02.760
out but it should already be full screen.

00:40:02.760 --> 00:40:07.310
So we call initWithFrame and we use that fullScreenFrame.

00:40:07.309 --> 00:40:10.659
And then the key here and this is probably
different from how you're doing it right now

00:40:10.659 --> 00:40:18.099
in you iPhone OS 2.X-based app is let's say our
top-level view controller is a navigation controller.

00:40:18.099 --> 00:40:24.829
>> To correctly work with full screen layout, we want
the navigation controller's frame to also be full screen.

00:40:24.829 --> 00:40:28.009
In this case, on the iPhone, it's 320 x 480.

00:40:28.010 --> 00:40:34.640
So don't use UIScreen mainScreen application frame
here, just use the bounds of your full screen window.

00:40:34.639 --> 00:40:43.389
Next, we're getting our photoViewController ready to
display, and we want it to be positioned under both,

00:40:43.389 --> 00:40:45.179
you know, the navigation bar and the status bar.

00:40:45.179 --> 00:40:50.069
And to indicate that it should go under the status
bar as well, we set wantsFullScreenLayout to YES,

00:40:50.070 --> 00:40:55.090
just a simple Boolean property, set it
and forget it, whatever, it's good to go.

00:40:55.090 --> 00:40:58.610
And then we're going to push that view controller.

00:40:58.610 --> 00:41:02.740
The last thing to do is ensure that we
update the bar styles to match here.

00:41:02.739 --> 00:41:07.589
We're going to update the application
StatusBarStyle to the BlackTranslucent style

00:41:07.590 --> 00:41:12.180
so that the content showing through,
you know, so you can see it.

00:41:12.179 --> 00:41:15.429
Additionally, we're going to set the
navigationController.navigationBar,

00:41:15.429 --> 00:41:19.210
we're going to set up a couple of properties
here, the bar style is just purely for looks,

00:41:19.210 --> 00:41:22.159
so we want that cool BlackTranslucent navigation bar

00:41:22.159 --> 00:41:25.449
when we're viewing the recipe photo
just like in a Photos App on the phone.

00:41:25.449 --> 00:41:30.659
But the key here is setting the translucent
property on the navigation bar to YES.

00:41:30.659 --> 00:41:34.579
And that will cause-- that's the
other domino that used to fall

00:41:34.579 --> 00:41:41.750
for the navigation controller will size its top
view controller's content to fit the full screen.

00:41:41.750 --> 00:41:45.179
Then when we're popping, we need
to revert this stuff, you know.

00:41:45.179 --> 00:41:51.889
And again here, this assumes that the bar style on the
status bar and the navigation bar both the default style,

00:41:51.889 --> 00:41:55.920
you might want to do something more intelligent like
cashing the original bar style and then restoring it.

00:41:55.920 --> 00:42:01.389
But the key here is that we need to restore
both the application status bar style

00:42:01.389 --> 00:42:07.159
and the navigationController.navigationBar.translucent
property and then we'll be back exactly

00:42:07.159 --> 00:42:11.190
where we were before we viewed this full screen view.

00:42:11.190 --> 00:42:19.349
So, picture is worth a thousand words, we're going
to go ahead and select this photo here, go in.

00:42:19.349 --> 00:42:24.079
You'll notice that the navigation bar and the
status bar both update as we go in when we push.

00:42:24.079 --> 00:42:25.789
And we can then zoom in.

00:42:25.789 --> 00:42:27.759
You'll see that that content really is full screen.

00:42:27.760 --> 00:42:35.420
When we hit the Back button, navigation bar reverts to its
old appearance and the status bar does its thing as well.

00:42:35.420 --> 00:42:40.170
So now you can integrate this in your application
in a fully supported way that we'll continue to work

00:42:40.170 --> 00:42:45.010
on future iPhone software releases which is always nice.

00:42:45.010 --> 00:42:50.890
[ Applause ]

00:42:50.889 --> 00:42:51.960
>> So what did we just see?

00:42:51.960 --> 00:42:56.119
There's a few things to keep in mind here
when you want to do full screen layout.

00:42:56.119 --> 00:43:00.199
First of all, again, ensure the window and the
containing view controllers are full sized.

00:43:00.199 --> 00:43:05.069
Set the wantsFullScreenLayout property to
YES on the view controller to be displayed.

00:43:05.070 --> 00:43:08.630
Use the translucent bar styles on
the navigation bar and the status bar

00:43:08.630 --> 00:43:12.440
and then restore the original bar
styles when you're going away.

00:43:12.440 --> 00:43:19.019
So that covers our little selection
of new features in iPhone OS 3.0.

00:43:19.019 --> 00:43:20.809
Hope you all adopt them in your applications.

00:43:20.809 --> 00:43:26.340
Yeah, you don't have to write a ton of code
to get some pretty cool visual effects.

00:43:26.340 --> 00:43:29.030
And now I want to talk about some best practices,

00:43:29.030 --> 00:43:32.780
and it's not talked about earlier in
the application architecture talk.

00:43:32.780 --> 00:43:35.930
And you've probably been hearing elsewhere at
the conference, there's somethings you need to do

00:43:35.929 --> 00:43:41.599
that will really help the robustness of your application
and ensure that you avoid some potential headaches

00:43:41.599 --> 00:43:47.259
in the future with, you know, iPhone software
releases down the road in the foreseeable future.

00:43:47.260 --> 00:43:52.490
And the first topic that I'd like to
mention is respecting the view hierarchy.

00:43:52.489 --> 00:43:53.399
What does this mean exactly?

00:43:53.400 --> 00:44:00.190
There are some system views that have their own
internal view hierarchies that are not documented.

00:44:00.190 --> 00:44:03.079
These internal view hierarchies are only subject to change.

00:44:03.079 --> 00:44:06.250
And it's kind of the whole point
of abstraction and encapsulations.

00:44:06.250 --> 00:44:08.059
It's something like the navigation bar.

00:44:08.059 --> 00:44:12.360
We expose UINavigationBar, you can use it in
all different places, but the actual contents

00:44:12.360 --> 00:44:16.950
of UINavigationBar are not documented
either in API or in the docs.

00:44:16.949 --> 00:44:21.159
So making assumptions about what
it contains can be dangerous.

00:44:21.159 --> 00:44:24.019
The same goes for navigation and tab bar controllers.

00:44:24.019 --> 00:44:30.090
Each of these controllers have a set of views
and making assumption about what's contained

00:44:30.090 --> 00:44:32.440
within these views can be very dangerous.

00:44:32.440 --> 00:44:37.820
Finally, some of the other view controllers the
ready to present view controllers like the camera,

00:44:37.820 --> 00:44:40.330
the address book, all that sort of stuff.

00:44:40.329 --> 00:44:46.659
You really want to avoid making potentially
dangerous assumptions about what's in those views.

00:44:46.659 --> 00:44:52.710
So in particular, what I would ask you to
avoid doing, both for your benefit and mine,

00:44:52.710 --> 00:44:57.429
is to avoid manipulating the subviews
of any of these opaque system views.

00:44:57.429 --> 00:45:01.599
Also, adding your own subviews is probably something
that may work under particular circumstances.

00:45:01.599 --> 00:45:06.219
You can always make assumptions about
how that might change in the future.

00:45:06.219 --> 00:45:09.779
So if you find yourself in your code doing
something like walking up the superview hierarchy,

00:45:09.780 --> 00:45:15.860
and then walking down into some subviews, subview
object in the next 3 subviews, object in the next 2,

00:45:15.860 --> 00:45:22.680
and then do a little bit of stuff and hey, it works,
chip it, it might not be the best thing to do.

00:45:22.679 --> 00:45:27.879
So I would really encourage you, in this case, to try
working with the system frameworks, not against them.

00:45:27.880 --> 00:45:31.960
The full screen layout, example, is one example of this.

00:45:31.960 --> 00:45:34.820
We weren't able to support that well in iPhone OS 3.0.

00:45:34.820 --> 00:45:37.900
A lot of folks kind of handled their own solutions to it.

00:45:37.900 --> 00:45:43.250
We now have a better way for you to do it that will
continue to work on future iPhone software releases.

00:45:43.250 --> 00:45:51.519
If there are cases where you're finding yourself needing to
dig around in view hierarchies, you know, do what you will,

00:45:51.519 --> 00:45:59.159
but I first beg you to file a bug at bugreport@apple.com
and request the behavior that we haven't yet exposed to you.

00:45:59.159 --> 00:46:02.319
The more we hear your feedback, the
more we can make intelligent decisions

00:46:02.320 --> 00:46:06.300
about what API are worth focusing on
on future iPhone software releases.

00:46:06.300 --> 00:46:14.630
The next topic I wanted to mention
is container view controllers.

00:46:14.630 --> 00:46:19.170
And container view controllers are things like
navigation controllers, tab bar controllers,

00:46:19.170 --> 00:46:24.720
and those two in particular are really designed
from the get-go to contain other view controllers.

00:46:24.719 --> 00:46:30.159
And if you find yourself writing your own code which,
you know, writing your own container view controller,

00:46:30.159 --> 00:46:35.099
you might want to just pause for a second and ask
yourself if it's really what you intend to do.

00:46:35.099 --> 00:46:40.190
It's, I don't want to say that it's not something you
should do period, there's, you know some example code

00:46:40.190 --> 00:46:44.950
that we've published which does this, which has one
view controller which contains another view controller.

00:46:44.949 --> 00:46:50.929
You just need to make sure that there are
certain methods which you will need to pass

00:46:50.929 --> 00:46:55.690
from the containing view controller to the contained
view controller to ensure that it works properly

00:46:55.690 --> 00:47:01.840
and we don't necessarily have the facilities
to fully support that as API right now.

00:47:01.840 --> 00:47:08.269
One example of this where you can now switch over to some
public API is for flipping and crossfading view controllers.

00:47:08.269 --> 00:47:12.050
So you can use the modal transition styles
now, present the view controller modally,

00:47:12.050 --> 00:47:16.870
and you won't need to have this wrapper view
controller that maybe contains a bunch of other ones.

00:47:16.869 --> 00:47:19.460
So, a bit of advice.

00:47:19.460 --> 00:47:24.980
Next, I want to talk a little bit
about navigation bar appearance.

00:47:24.980 --> 00:47:28.449
What's going on here when you're
using a UINavigationController?

00:47:28.449 --> 00:47:32.169
Obviously, when you're just using a
navigation bar by itself in your application,

00:47:32.170 --> 00:47:33.909
you can do, you know, whatever you want with it.

00:47:33.909 --> 00:47:35.089
You can size it.

00:47:35.090 --> 00:47:37.210
You can position it, all that sort of stuff.

00:47:37.210 --> 00:47:43.849
But when you're using a UINavigationController,
the navigation controller owns the navigation bar.

00:47:43.849 --> 00:47:47.889
There are certain properties which are OK for
you to manipulate, and there are properties

00:47:47.889 --> 00:47:52.199
which are actually pretty dangerous for
you to make assumptions about or change.

00:47:52.199 --> 00:47:59.919
So, properties that are OK to change include bar style,
obviously, the tint color, even the translucency.

00:47:59.920 --> 00:48:07.110
Some properties which are dangerous to
manipulate include the frame and the hidden value.

00:48:07.110 --> 00:48:14.300
So really I mean the navigation controller because it's
responsible for sizing and positioning the navigation bar

00:48:14.300 --> 00:48:21.070
in an intelligent way and sizing and positioning other views
relative to that navigation bar, if you go in under the hood

00:48:21.070 --> 00:48:26.039
and move around navigation bar, you might
start to see some unexpected behavior.

00:48:26.039 --> 00:48:28.539
So you'll notice I called that hidden here.

00:48:28.539 --> 00:48:30.500
A lot of people want to hide the navigation bar.

00:48:30.500 --> 00:48:34.670
What's the best supported way to do
this with a navigation controller?

00:48:34.670 --> 00:48:36.460
I would encourage you to check

00:48:36.460 --> 00:48:41.829
out the -setNavigationBarHidden:animated:
method on UINavigationController.

00:48:41.829 --> 00:48:46.329
And this method has actually been
beefed up a lot on iPhone OS 3.0

00:48:46.329 --> 00:48:51.130
and now supports animating horizontally
during pushes and pops.

00:48:51.130 --> 00:48:55.240
So if you want to, you know, hide or show the
navigation bar while you're pushing and popping it,

00:48:55.239 --> 00:49:01.949
have that navigation bar go with the incoming or outgoing
view controller, you can call setNavigationBarHidden:YES

00:49:01.949 --> 00:49:06.579
or NO animated:YES from within your
viewWillAppear or viewWillDisappear method

00:49:06.579 --> 00:49:11.170
and you should get the right behavior there
in terms of the navigation bar appearance.

00:49:11.170 --> 00:49:17.190
So let's say that maybe on the top level of
our Recipes Application, the recipes list,

00:49:17.190 --> 00:49:22.960
we don't want to display the navigation bar right up the
bat, we want to use the full available screen real estate

00:49:22.960 --> 00:49:25.880
and we want to just, you know, fill
it all up with our list of recipes.

00:49:25.880 --> 00:49:29.750
But then when we view a recipe, we want that
navigation bar to come in, because otherwise,

00:49:29.750 --> 00:49:31.989
you won't be able to navigate it back, right?

00:49:31.989 --> 00:49:39.359
So what we'll do here, this is actually the implementation
of viewWillAppear for the recipe list view controller.

00:49:39.360 --> 00:49:44.360
So we call super and then we call
self.navigationController, setNavigationBarHidden:Yes

00:49:44.360 --> 00:49:48.260
and we pass along the animated flag that we've got.

00:49:48.260 --> 00:49:53.020
The implementation of the next view controller, the recipe
detail view controller, would be similar to this except

00:49:53.019 --> 00:49:55.300
that you're passing NO for NavigationBarHidden.

00:49:55.300 --> 00:50:00.769
You could also implement this in
viewWillDisappear instead on the recipe list.

00:50:00.769 --> 00:50:09.110
So if we have that in place, we then select the recipe,
and we call setNavigationBarHidden:NO animated:YES

00:50:09.110 --> 00:50:12.789
as it's appearing, and the navigation
bar will come in from the right side

00:50:12.789 --> 00:50:16.539
of the screen looking just like you would expect it to.

00:50:16.539 --> 00:50:22.119
>> You can navigate back, the navigation bar will
again hide itself and you're back at the root

00:50:22.119 --> 00:50:26.659
of your application since navigation bar.

00:50:26.659 --> 00:50:31.730
So you'll notice this is one of a few bits
of new functionality that I've been covering.

00:50:31.730 --> 00:50:34.659
Well, there isn't necessary new API for
it, so it's not going to jump out at you

00:50:34.659 --> 00:50:36.389
if you're just browsing through the header.

00:50:36.389 --> 00:50:43.129
The documentation does mention it, but you know,
keep in mind that we've added some subtle changes

00:50:43.130 --> 00:50:46.170
to the view controller classes in iPhone OS 3.0.

00:50:46.170 --> 00:50:51.070
Mixing interface orientations is
another great example of this.

00:50:51.070 --> 00:50:57.390
One additional topic that I want to mention is that
of Interface Builder and view controller integration.

00:50:57.389 --> 00:51:00.619
So a lot of people ask, when should I use interface builder?

00:51:00.619 --> 00:51:03.569
I mean some view controllers maybe make
sense, maybe it doesn't make sense.

00:51:03.570 --> 00:51:07.030
What's the rule of thumb for most applications?

00:51:07.030 --> 00:51:13.330
And I would say really it's almost always recommended to
use Interface Builder in tandem with your view controllers.

00:51:13.329 --> 00:51:16.110
It's especially useful if you got
a really complex view hierarchy.

00:51:16.110 --> 00:51:22.070
You've got some containing view and it's got a bunch
of labels and text fields and other sort of, you know,

00:51:22.070 --> 00:51:27.780
views in there that need custom positioning 'cause
it's really painful to lay that stuff out in code,

00:51:27.780 --> 00:51:30.440
get the centering and the sizing, all that stuff right.

00:51:30.440 --> 00:51:33.559
Interface Builder makes it easy to verify
that, you know, what you see is what you get.

00:51:33.559 --> 00:51:39.989
The one case where Interface Builder is maybe
not as useful in some iPhone applications is

00:51:39.989 --> 00:51:44.199
if your view controller's view is just a table view, right?

00:51:44.199 --> 00:51:48.449
Because the appearance of the table view isn't
really customizable in Interface Builder,

00:51:48.449 --> 00:51:52.500
it's defined by the table view data source and delegate.

00:51:52.500 --> 00:51:57.219
So in that case, it might not make
sense for you to use Interface Builder.

00:51:57.219 --> 00:52:02.189
Actually, that's what the UITableViewController
view controller subclass is designed for.

00:52:02.190 --> 00:52:06.889
It's just simply UIs where you got a
table view filling up the whole screen.

00:52:06.889 --> 00:52:10.929
This is a good time to mention also the
idea of one view controller per NIB.

00:52:10.929 --> 00:52:16.489
So in an application with many screens and
many view controllers managing those screens,

00:52:16.489 --> 00:52:23.299
you'll often have multiple NIBs and each NIB will be owned
by a view controller subclass, and they'll make connections

00:52:23.300 --> 00:52:31.130
between the view controller and elements of that NIB via
the File's Owner, this little translucent orange box,

00:52:31.130 --> 00:52:34.780
which is a sort of a proxy for the
object which is loading the NIB.

00:52:34.780 --> 00:52:40.730
Anytime you create a view controller, using init
with NIB name and bundle, specify the NIB name.

00:52:40.730 --> 00:52:46.960
What that does really is later cause the NIB to be
loaded with the view controller as the File's Owner.

00:52:46.960 --> 00:52:51.860
So you can make connections between the view
controller and the view or anything else

00:52:51.860 --> 00:52:54.920
in the NIB via the File's Owner property.

00:52:54.920 --> 00:53:04.070
As far as NIBs and memory management go, there are 3
topics I'd like to mention here that are worth knowing.

00:53:04.070 --> 00:53:09.550
The first is that top-level nib objects are autoreleased.

00:53:09.550 --> 00:53:13.440
This behavior is different from what
you might be used to on Mac OS X.

00:53:13.440 --> 00:53:18.639
So any top-level nib objects, and by top-level nib
objects, I mean any of these objects which you may drag

00:53:18.639 --> 00:53:25.759
out into the main window, the main sort of
top level UI of your NIB Interface Builder.

00:53:25.760 --> 00:53:30.400
Any of those objects you might drag out are going
to be autoreleased after the nib has been loaded.

00:53:30.400 --> 00:53:32.690
So if you want to keep them around, you need to retain them.

00:53:32.690 --> 00:53:37.840
And the most common way to do this is via IBOutlets
where you can drag your connection from the File's Owner

00:53:37.840 --> 00:53:44.430
or from some other object to these top-level
objects, and that will cause them to stick around.

00:53:44.429 --> 00:53:50.099
Second related topic is that an IBOutlet
without a setter is just setting directly

00:53:50.099 --> 00:53:54.000
into an instance variable will be retained by default.

00:53:54.000 --> 00:53:59.730
And this behavior again is different from
what you might be used to on Mac OS X.

00:53:59.730 --> 00:54:06.260
So the tricky thing here is that you may have a case
where you've got an IBOutlet on an instance variable.

00:54:06.260 --> 00:54:07.580
You don't have a setter defined.

00:54:07.579 --> 00:54:09.069
You don't have a setter method implemented.

00:54:09.070 --> 00:54:09.940
You don't have a property.

00:54:09.940 --> 00:54:11.119
You don't have synthesized property.

00:54:11.119 --> 00:54:16.639
You don't-- you're not retaining this thing anywhere,
but you still need to release it in your -dealloc method.

00:54:16.639 --> 00:54:21.099
The reason is actually because in
the absence of a setter method,

00:54:21.099 --> 00:54:25.670
it will go through this standard
sister method called setValueForKey.

00:54:25.670 --> 00:54:30.230
And setValueForKey will retain its
argument as it's setting the value.

00:54:30.230 --> 00:54:36.000
So really for the best clarity here, you're
going to want to declare a property or just,

00:54:36.000 --> 00:54:37.880
you know, implement your own setter method.

00:54:37.880 --> 00:54:42.809
In that way, it's really obvious to you the fact
that you've retained this object in a setter method

00:54:42.809 --> 00:54:47.099
or in a synthesized property with the
retained attribute, it's then really obvious

00:54:47.099 --> 00:54:51.289
that this thing needs to be released
in your -dealloc method.

00:54:51.289 --> 00:54:57.550
Finally, and Alex mentioned this in the previous talk
on iPhone App Architecture, there's this new method

00:54:57.550 --> 00:55:01.170
on UIViewController which a lot
of people ask for -viewDidUnload.

00:55:01.170 --> 00:55:08.340
So in the case where you get a memory warning, and your view
controller's view will probably be released but not always

00:55:08.340 --> 00:55:13.610
because in some situations that it's being displayed in
its top view controller and navigation stack, for example,

00:55:13.610 --> 00:55:15.300
we don't want to throw that view controller's view away.

00:55:15.300 --> 00:55:18.730
And it was tricky before iPhone OS 3.0 to know

00:55:18.730 --> 00:55:24.170
when exactly your view had been dropped
and when the view was still around.

00:55:24.170 --> 00:55:30.900
So there's a new method -viewDidUnload which
is a good place for you to empty out to release

00:55:30.900 --> 00:55:37.119
and set to nil any IBOutlets especially if you've got
a view controller with the view and that has, you know,

00:55:37.119 --> 00:55:40.619
several subviews, and maybe you've
got IBOutlets to those subviews,

00:55:40.619 --> 00:55:45.269
this is the place to release and nil out those IBOutlets.

00:55:45.269 --> 00:55:50.710
Another method which is actually isn't here on the
slides but is good to know about as well, is -viewLoaded,

00:55:50.710 --> 00:55:56.539
which you can call on a view controller and sort of
non-distractibly say, "Hey, is your view loaded or not?"

00:55:56.539 --> 00:56:01.099
Because calling viewControllerView
will always return the view.

00:56:01.099 --> 00:56:06.409
If the view has been unloaded as the result to the
memory warning, calling viewControllerView will cause it

00:56:06.409 --> 00:56:11.829
to be reloaded which is kind of a counterproductive
thing to do if you just got memory warning.

00:56:11.829 --> 00:56:20.829
So these are some useful hints for Interface Builder
integration with view controllers in your app.

00:56:20.829 --> 00:56:22.349
So that just about does it.

00:56:22.349 --> 00:56:27.130
In summary, I'd first like to encourage you to
build your application using view controllers.

00:56:27.130 --> 00:56:33.440
They include a lot of built-in functionality for really
common, you know, paradigms in iPhone applications.

00:56:33.440 --> 00:56:35.139
We use them in our system apps.

00:56:35.139 --> 00:56:39.359
We're moving-- almost all of our system
applications, use view controllers.

00:56:39.360 --> 00:56:44.170
We're living on them just like you are and we'd
encourage you to use view controllers in your app.

00:56:44.170 --> 00:56:50.730
In iPhone OS 3.0, we've gotten a lot of feedback for our
developers about what's important and what was missing

00:56:50.730 --> 00:56:53.240
from the view controller then we tried to add that in there.

00:56:53.239 --> 00:56:57.799
So in addition to, you know, fixing, you know,
filling holes, there's a lot of cool new functionality

00:56:57.800 --> 00:57:02.180
that you can adopt in your application
without needing to roll it all by yourself.

00:57:02.179 --> 00:57:08.069
You know, we want you to spend time on the aspects of
your application which are truly unique and interesting.

00:57:08.070 --> 00:57:09.800
We, you know, you're time is limited.

00:57:09.800 --> 00:57:14.230
We don't want you to waste time reinventing
the wheel doing a cover flow view.

00:57:14.230 --> 00:57:16.539
And finally, you know, follow best practices.

00:57:16.539 --> 00:57:19.559
It's going to save you a lot of headaches down the road.

00:57:19.559 --> 00:57:24.480
And again, let you focus on, you know, doing
cool stuff in your application and not worry

00:57:24.480 --> 00:57:27.719
about whether some bit of code might break in the future.

00:57:27.719 --> 00:57:35.939
For more information, Matt Drance is of course your
constant companion out there in the evangelism world.

00:57:35.940 --> 00:57:39.450
The Documentation is getting updated everyday.

00:57:39.449 --> 00:57:43.869
We're adding more and more view controller
content, working on a lot of great stuff there,

00:57:43.869 --> 00:57:50.029
and the View Controller's Lab, which I mentioned previously
on the talk, tomorrow morning, iPhone Lab A, I think.

00:57:50.030 --> 00:57:55.030
If it's not iPhone Lab A, just
look around for me and tackle me.

00:57:55.030 --> 00:57:59.070
That'll be going on from 9 a.m. to noon.

00:57:59.070 --> 00:58:00.480
Don't actually tackle me.

00:58:00.480 --> 00:58:00.849
That's it.