WEBVTT

00:00:12.990 --> 00:00:16.100
>> I'm Chris Nebel, your host for this morning.

00:00:16.100 --> 00:00:21.330
I'll be joined later by Michael Gorbach, who's
also on the Automation Team just like me.

00:00:22.629 --> 00:00:31.460
And so, this is all about writing applications and
AppleScript, and if you want to write an application

00:00:31.460 --> 00:00:35.789
in Mac OS X, you want to be using the Cocoa frameworks.

00:00:35.789 --> 00:00:44.129
Cocoa is where Apple puts all of their, all of our effort,
all of the tools are designed to work well with Cocoa.

00:00:44.130 --> 00:00:47.780
Use our stuff and your work will go much easier.

00:00:47.780 --> 00:00:53.049
Now, Cocoa was originally designed for
Objective-C, but that's actually not required.

00:00:53.049 --> 00:00:57.750
These days, you can use any number of languages
thanks to technologies we call Cocoa bridges.

00:00:57.750 --> 00:01:04.099
The idea is that there is a little bridge piece that sits
in between your favorite language and the Cocoa framework

00:01:04.099 --> 00:01:05.919
and allows them to talk back and forth together.

00:01:05.920 --> 00:01:10.409
So for instance, we've been shipping bridges
for Python and Ruby on the system since Leopard.

00:01:10.409 --> 00:01:16.869
There are a variety of bridges out there for other
languages, JavaScript, there's one for Lisp and so on.

00:01:16.870 --> 00:01:19.600
But the one we're interested in today is AppleScript.

00:01:19.599 --> 00:01:27.129
Oh, and by the way, if I start to sound kind of slowed
down a bit, it's not because I'm hung over or anything

00:01:27.129 --> 00:01:33.509
from last night, which was very good by the way, I'm
trying to do what they told me to do in rehearsal

00:01:33.510 --> 00:01:37.340
so I don't sound quite so much
like a hyper-caffeinated squirrel.

00:01:37.340 --> 00:01:44.370
Anyway, so, we're going to talk some about what's new in
AppleScript, and there are some changes in Snow Leopard,

00:01:44.370 --> 00:01:49.060
lots of refinements just like the rest of the system,
and we'll spend most of the time talking about how

00:01:49.060 --> 00:01:52.710
to write a Cocoa application using AppleScript.

00:01:52.709 --> 00:01:55.009
So first up, AppleScript.

00:01:55.010 --> 00:01:59.859
For those of you who aren't quite as familiar
with AppleScript, AppleScript is the original

00:01:59.859 --> 00:02:03.769
and in many ways still the premiere
in automation language in Mac OS X.

00:02:03.769 --> 00:02:08.939
It was designed with a very readable English-like
syntax, designed to be easy to read and to write,

00:02:08.939 --> 00:02:11.650
and its big schtick is controlling other applications.

00:02:11.650 --> 00:02:15.379
You've actually been seeing AppleScript a fair
bit at this show, even if you didn't realize it.

00:02:15.379 --> 00:02:21.019
Anytime, like during the keynote where they appear to press
one button and whole bunch of windows scramble around,

00:02:21.020 --> 00:02:23.450
that's an AppleScript setting things up for them.

00:02:23.449 --> 00:02:26.889
AppleScript is also very useful for doing automated testing.

00:02:26.889 --> 00:02:32.209
Microsoft uses the AppleScript to do all of
their regression testing for Microsoft Office.

00:02:32.210 --> 00:02:38.050
It's very useful in workflows, a lot of print and publishing
houses use AppleScript to drive their whole process.

00:02:38.050 --> 00:02:41.950
For instance, if you see a real estate
catalog or weather map, odds are very,

00:02:41.949 --> 00:02:45.280
very good that it was produced using AppleScript.

00:02:47.030 --> 00:02:48.659
So what's new in Snow Leopard?

00:02:48.659 --> 00:02:50.079
We've got a bunch of different things.

00:02:50.080 --> 00:02:52.870
There are some developer improvements,
things that are relevant

00:02:52.870 --> 00:02:55.819
if you are writing an application that uses AppleScript.

00:02:55.819 --> 00:03:00.049
There are a bunch of language improvements if
you're writing something actually in AppleScript.

00:03:00.050 --> 00:03:05.560
And there are a number of tool improvements as well,
better syntax coloring, better logging and multi-threading

00:03:05.560 --> 00:03:08.000
which actually affects all of those areas.

00:03:08.000 --> 00:03:13.969
So to show you some of that, I'd like to
introduce Michael Gorbach to do the demo.

00:03:13.969 --> 00:03:14.780
Thank you.

00:03:14.780 --> 00:03:19.340
[ Applause ]

00:03:19.340 --> 00:03:20.039
>> Morning everyone.

00:03:20.039 --> 00:03:22.000
Thank you for showing up despite the bash.

00:03:22.000 --> 00:03:24.069
We really appreciate you being here.

00:03:24.069 --> 00:03:31.689
So we're going to talk about AppleScript, and
AppleScript as Chris said, is Apple's automation range.

00:03:31.689 --> 00:03:41.460
It is an expert at interacting with other
applications, and that's going to be our first demo.

00:03:41.460 --> 00:03:42.730
Here we go.

00:03:42.729 --> 00:03:47.599
So I'm going to start off a script,
and this is Script Editor,

00:03:47.599 --> 00:03:51.599
which is Apple's main environment
for editing for AppleScripts.

00:03:51.599 --> 00:03:54.829
It ships on every Mac and you can pull it
up on your computer right now if you want.

00:03:54.830 --> 00:03:59.890
We're going to be interacting with
an application called Sketch.

00:03:59.889 --> 00:04:03.029
Sketch is a demo app that we've
been working with for some time.

00:04:03.030 --> 00:04:07.939
It's designed to demonstrate script
ability and drawing perimeters in Cocoa.

00:04:07.939 --> 00:04:15.310
So one thing I want to point out on this
script before I give Sketch a start,

00:04:15.310 --> 00:04:19.530
is that we've really improved syntax
highlighting in Script Editor.

00:04:19.529 --> 00:04:23.849
We've changed the colors up a bit so that it's
much easier to differentiate them from each other.

00:04:23.850 --> 00:04:27.500
It's a lot clearer now to see the
differences between scripting terminology,

00:04:27.500 --> 00:04:31.850
user terminology, addition terminology, and so on.

00:04:31.850 --> 00:04:36.090
Actually, this is a surprisingly big deal,
because it makes AppleScript a lot easier to debug

00:04:36.089 --> 00:04:40.699
and it makes it a lot easier to make sense
of what your script is doing and why.

00:04:40.699 --> 00:04:46.170
So I'm going to start up this script and just
started up Sketch, and it's drawing us some circles.

00:04:46.170 --> 00:04:49.610
I'm going to click on another script.

00:04:49.610 --> 00:04:58.520
Start that and the red circles are turning green now, and
I'm going to click on one more script and start that, too,

00:04:58.519 --> 00:05:01.129
and the circles are starting to disappear as you can see.

00:05:01.129 --> 00:05:04.649
So if you stare at this for a while,
there's actually a pattern going on.

00:05:04.649 --> 00:05:08.969
We have 3 scripts running, yes they're running at
the same time, that's multi-threaded AppleScript.

00:05:08.970 --> 00:05:11.080
I'll give you a second to ponder on that.

00:05:11.079 --> 00:05:16.469
[ Applause ]

00:05:16.470 --> 00:05:20.400
Just to prove to you that this isn't some kind
of a trick, script editor is still responsive;

00:05:20.399 --> 00:05:23.179
we can start and stop scripts; we can access the logs;

00:05:23.180 --> 00:05:26.650
Sketch is still responsive; and
everything works as expected.

00:05:26.649 --> 00:05:31.279
So one of these scripts is drawing the red
circles, the second is turning them green,

00:05:31.279 --> 00:05:34.029
and the third is sort of an AppleScript garbage collector.

00:05:34.029 --> 00:05:39.359
It's aging the circles over a few steps and
fading their color and slowly deleting them.

00:05:42.209 --> 00:05:49.299
So there are also a few things I want to point out
about improvements in the Script Editor app itself.

00:05:49.300 --> 00:05:52.480
We've really improved the logging quite a bit for scripts.

00:05:52.480 --> 00:05:56.410
The log is now always on, so you don't
have to specifically enable that logging.

00:05:56.410 --> 00:06:00.380
It's just always there for you so
you can debug when you need it.

00:06:00.379 --> 00:06:04.860
We've added dynamic filterings so that while your script
is running you can choose whether you're viewing events,

00:06:04.860 --> 00:06:07.569
groupwise or both.

00:06:07.569 --> 00:06:12.269
We can see that the result of the script
is now displayed in the log as well

00:06:12.269 --> 00:06:15.779
as any log statements from your scripting that's running.

00:06:19.870 --> 00:06:24.209
And the last thing that I wanted to point out was that we've
added a little feature, which is going to be real useful

00:06:24.209 --> 00:06:28.229
to those of you who are developing
Cocoa apps using circularity.

00:06:28.230 --> 00:06:28.950
There it is.

00:06:28.949 --> 00:06:31.539
You can see we've got the raw Apple
event information coming up.

00:06:31.540 --> 00:06:34.920
I'm going to try to zoom on it for you.

00:06:34.920 --> 00:06:36.500
There you go, come on, come on, come on.

00:06:36.500 --> 00:06:37.560
There you go.

00:06:37.560 --> 00:06:40.079
[ Applause ]

00:06:40.079 --> 00:06:44.599
We know how much you are for character
codes, so we wanted to show them to you.

00:06:44.600 --> 00:06:48.280
That's all for Script Editor, and
I'll bring Chris back up on stage.

00:06:48.279 --> 00:06:49.789
>> Thank you, Michael.

00:06:49.790 --> 00:06:53.390
OK, so to recap.

00:06:53.389 --> 00:06:56.180
AppleScript in Snow Leopard, tool improvements.

00:06:56.180 --> 00:06:59.129
One thing that Michael kind of skimmed over,
but you might have noticed in the message--

00:06:59.129 --> 00:07:02.959
in the menu bar is that Script Editor
is not called Script Editor anymore.

00:07:02.959 --> 00:07:07.329
It's been renamed to AppleScript Editor
and moved to the utilities folder

00:07:07.329 --> 00:07:10.289
to streamline the applications folder a bit.

00:07:10.290 --> 00:07:14.790
It is now fully multi-threaded, taking advantage of
multi-threaded AppleScripts so you can run a number

00:07:14.790 --> 00:07:17.720
of scripts at the same time and
they all interact smoothly together.

00:07:17.720 --> 00:07:22.490
The event logging has been improved so, in particular,
you don't have to decide ahead of time what you want

00:07:22.490 --> 00:07:24.310
to look at in the log like you did before.

00:07:24.310 --> 00:07:29.160
You can just run the script and then switch
the various bits on and off as you need them.

00:07:29.160 --> 00:07:34.340
And finally, finer grained syntax coloring, so all the
different parts of speech have their own independent styles,

00:07:34.339 --> 00:07:41.429
and you can also specifically distinguish application
terms from scripting edition terms, which is really helpful

00:07:41.430 --> 00:07:47.329
for when you're debugging scripts and want to make
sure the right events are going to the right places.

00:07:47.329 --> 00:07:52.199
In the language, lots of refinements, a
lot of bug fixes, a lot of old bug fixes.

00:07:52.199 --> 00:07:57.509
The, this is-- actually one of the oldest
bugs fixed in Snow Leopard is the first one.

00:07:57.509 --> 00:08:01.629
So do you remember, who here uses text item delimiters?

00:08:01.629 --> 00:08:02.269
In AppleScript?

00:08:02.269 --> 00:08:03.169
Yeah. A bunch of people?

00:08:03.170 --> 00:08:06.400
OK. So do you remember in the documentation
there's this little note

00:08:06.399 --> 00:08:10.899
about how text item delimiters is actually a
list, but only the first one actually matters?

00:08:10.899 --> 00:08:12.589
Yeah, we can remove that qualifier now.

00:08:12.589 --> 00:08:13.579
They all matter.

00:08:13.579 --> 00:08:15.319
So you know, finally implemented that after...

00:08:15.319 --> 00:08:16.339
[ Applause ]

00:08:16.339 --> 00:08:20.250
...some number of years I'm not going to admit to.

00:08:20.250 --> 00:08:22.250
There have been a number of performance improvements.

00:08:22.250 --> 00:08:28.250
We've improved the start-up time of the interpreter itself;
a number of individual operations have been improved.

00:08:28.250 --> 00:08:32.340
We do not-- AppleScript does not
depend on the Windows server anymore.

00:08:32.340 --> 00:08:37.570
AppleScript itself can now be run completely
headlessly, which is a big deal for production servers.

00:08:37.570 --> 00:08:40.710
[ Applause ]

00:08:40.710 --> 00:08:41.730
Thank you.

00:08:41.730 --> 00:08:45.440
Should point out that-- things that--
this is just AppleScript itself.

00:08:45.440 --> 00:08:50.110
Things your script uses might still depend on the
Window server, so maybe some kinks to work out there,

00:08:50.110 --> 00:08:53.710
but at least all our stuff does
not depend on the Window server.

00:08:53.710 --> 00:08:59.879
We've improved Unicode and Local supports more,
so we now work better with Unicode-only Locals

00:08:59.879 --> 00:09:03.210
and custom date formatting, things like that.

00:09:03.210 --> 00:09:05.480
And there's a complete list in
the AppleScript release notes.

00:09:05.480 --> 00:09:16.120
Those are live now on the Snow Leopard reference library--
library which you can get to through your ABC account.

00:09:16.120 --> 00:09:20.570
Developer improvements-- and some of these actually play
both ways, but they're-whether you're writing an app

00:09:20.570 --> 00:09:23.250
that uses AppleScript, or you're using AppleScript itself.

00:09:23.250 --> 00:09:25.850
First thing is, it's all 64-bit.

00:09:25.850 --> 00:09:29.250
So if you've got a 64-bit app, you can use AppleScript.

00:09:29.250 --> 00:09:32.789
It's, the language is 64-bit, all of
the scripting additions are 64-bit,

00:09:32.789 --> 00:09:37.299
all of the applications that we
provide are 64-bit, all stack.

00:09:37.299 --> 00:09:40.250
The other thing is that-- the big
thing is that it's all thread-safe now.

00:09:40.250 --> 00:09:42.299
AppleScript now works on background threads,

00:09:42.299 --> 00:09:46.699
it works on multiple threads simultaneously,
and it takes care of its own logging.

00:09:46.700 --> 00:09:54.750
So all that-- all that GCD stuff that you've been hearing
about all week, you can use that with AppleScript.

00:09:54.750 --> 00:09:59.220
Now you can throw an AppleScript onto,
onto a background work queue and it's fine.

00:09:59.220 --> 00:10:04.210
What this means is that as scripters,
you get more responsive applications.

00:10:04.210 --> 00:10:09.850
Like Script Editor, like AppleScript Editor, you were seeing
before and as an after developer it means that if you want

00:10:09.850 --> 00:10:11.790
to run a script, like Mail, it has its Mail rules.

00:10:11.789 --> 00:10:16.569
If you have an app that can somehow attach an Outlook
script action to something, you can run that script

00:10:16.570 --> 00:10:19.320
on a background thread and keep
your main UI thread responsive.

00:10:19.320 --> 00:10:22.340
So your users get a better experience.

00:10:22.340 --> 00:10:28.950
But, see we have at least some enthusiasts in the audience.

00:10:28.950 --> 00:10:31.820
So scripting additions may or may not be thread-safe.

00:10:31.820 --> 00:10:35.650
To the extent that we-- that they can
be made, made thread-safe, we have,

00:10:35.649 --> 00:10:42.029
but some of them do inherently main-thread-only things,
in particular, user interface, to display dialog.

00:10:42.029 --> 00:10:51.490
It's arranged so that such additions like that will execute
on the main thread, and the system takes care of itself.

00:10:51.490 --> 00:10:55.850
The third party additions will need to flag
themselves as to whether or not they're thread-safe.

00:10:55.850 --> 00:10:59.060
By default, it's assumed that they're not thread-safe.

00:10:59.059 --> 00:11:04.439
So if you're having a scripting addition which actually
is thread-safe, then it needs to say so in its Info.plist.

00:11:04.440 --> 00:11:09.700
There are details on how to do this in Tech Note 1164,
which is all about how to write a scripting addition.

00:11:09.700 --> 00:11:16.540
And a third kind of big thing, is an improved
security model for scripting additions.

00:11:16.539 --> 00:11:21.649
This actually came about in-- it
actually started to kick in in 10.5.4.

00:11:21.649 --> 00:11:26.509
The-- because you tell scripting to tell some
other application to do scripting addition,

00:11:26.509 --> 00:11:32.240
that scripting addition actually loads, and it executes
in that other process, so this means you're doing a form

00:11:32.240 --> 00:11:37.210
of code injections which opens up some
vulnerabilities, so we've been plugging those.

00:11:37.210 --> 00:11:43.110
And the, the big change in Snow Leopard was simply to
make the-- like I said it was actually added in 10.5.4--

00:11:43.110 --> 00:11:47.330
what we've done is made the scheme of it more
general and easier for developers to work with.

00:11:47.330 --> 00:11:51.870
We went to some pains to make sure
that it was as compatible as possible.

00:11:51.870 --> 00:11:56.740
So 99% of you won't need it, won't
actually need to change your scripts at all.

00:11:56.740 --> 00:12:02.000
Ideally, you do want to move scripting addition
calls outside of tell blocks or use tellMe to.

00:12:02.000 --> 00:12:08.659
That way it goes to your application not what-- not
whoever else you're telling like Finder or what not.

00:12:08.659 --> 00:12:10.309
You can see the AppleScript notes for details.

00:12:10.309 --> 00:12:15.009
Like I said, this is not essential because we did try to
be compatible, but it's sort of good practice to do this.

00:12:15.009 --> 00:12:18.500
A lot of developers have been going on about this for years.

00:12:18.500 --> 00:12:22.750
That's like, oh, but you know, move your addition calls
out of tell blocks, they don't need to be in there.

00:12:22.750 --> 00:12:24.370
Well, now it's just a little more important.

00:12:24.370 --> 00:12:29.840
If you are writing a scripting addition, there
is a new bit of information that you can add,

00:12:29.840 --> 00:12:32.680
you should add to your scripting addition which is contact,

00:12:32.679 --> 00:12:36.359
which is basically where does the
scripting addition actually need to run.

00:12:36.360 --> 00:12:40.269
Does it really need to run that other process
or can it really just be run anywhere?

00:12:40.269 --> 00:12:43.149
It can be run locally if it has to.

00:12:43.149 --> 00:12:45.059
Try to make this as general as possible.

00:12:45.059 --> 00:12:47.000
Again, do see Tech Note 1164.

00:12:47.000 --> 00:12:51.899
If you've got a scripting addition that is
misbehaving and, or not behaving as well as you'd like,

00:12:51.899 --> 00:12:57.139
and you would like the developer to fix
it, this is the thing to bug them about.

00:12:58.649 --> 00:13:05.149
So summing up on AppleScript, lots and
lots of refinements, various good bits,

00:13:05.149 --> 00:13:10.289
few new smallish, can't even say the word features, sorry.

00:13:10.289 --> 00:13:13.419
Improved tools, AppleScript editor has
a number of substantial improvements.

00:13:13.419 --> 00:13:17.049
In general, AppleScript is now, oh,
what I like to call future compatible.

00:13:17.049 --> 00:13:19.529
So 64-bit machines, it works nicely there.

00:13:19.529 --> 00:13:23.870
It's all thread-safe so it works with all the multi-core,
or multi-threading stuff that's been introduced.

00:13:23.870 --> 00:13:27.840
So that's AppleScript.

00:13:27.840 --> 00:13:30.350
Moving on to AppleScript and Cocoa.

00:13:30.350 --> 00:13:33.420
AppleScript and Cocoa are not all new to each other.

00:13:33.419 --> 00:13:37.449
Since 10.2, I believe it is, we've been
shipping AppleScript Studio which allows you

00:13:37.450 --> 00:13:43.200
to write basically full fetched Cocoa applications
with real UIs and in AppleScript and you know,

00:13:43.200 --> 00:13:49.790
eventually people will hit the point where Display Dialog
just isn't doing it anymore, so you want to, you know, real,

00:13:49.789 --> 00:13:52.500
real UI, progress bars, yada, yada, yada.

00:13:52.500 --> 00:13:54.549
OK, you could use AppleScript Studio.

00:13:54.549 --> 00:14:01.919
The thing is that AppleScript Studio is not really
Cocoa the way the rest of the world gets to see it.

00:14:01.919 --> 00:14:05.719
The Objective-C of Python, Ruby,
all the people using Cocoa bridges.

00:14:05.720 --> 00:14:12.509
So to clarify this, we're going to look at
a bit of an old example, Currency Converter.

00:14:12.509 --> 00:14:15.279
This one's been kicking around since the early NeXT days.

00:14:15.279 --> 00:14:18.059
Funny little thing, I've got it showing the Euro sign here,

00:14:18.059 --> 00:14:21.649
Currency Converter actually pre-dates
the Euro by like 10 years.

00:14:23.179 --> 00:14:28.129
So one of the things that Currency Converter is designed
to show off is model view controller separation.

00:14:28.129 --> 00:14:30.740
This is a basic design pattern in the Cocoa world.

00:14:30.740 --> 00:14:34.799
The model is in this case, the actual
math of doing the currency conversion.

00:14:34.799 --> 00:14:36.789
It's the application's view of the world.

00:14:36.789 --> 00:14:42.649
The view is the actual UI, the buttons and text
fields, and the controller mediates between those two.

00:14:42.649 --> 00:14:46.240
So we're going to look at the controller code here.

00:14:46.240 --> 00:14:48.080
So first, here's the studio version.

00:14:48.080 --> 00:14:52.930
In AppleScript Studio, you associate a
script with an individual interface element.

00:14:52.929 --> 00:14:59.069
In this case, the convert button, and you do this using
a special palette that's specific to AppleScript Studio.

00:14:59.070 --> 00:15:03.480
When the button is clicked, it sends
a clicked message to the script

00:15:03.480 --> 00:15:05.730
and that-- so that handler has to be named clicked.

00:15:05.730 --> 00:15:09.950
It's specific to the user interface gesture.

00:15:09.950 --> 00:15:14.660
And in order to refer to the various text
fields, you actually refer to them in terms

00:15:14.659 --> 00:15:18.509
of their UI hierarchy, where are
they laid out in the window.

00:15:18.509 --> 00:15:23.450
Which is a little awkward because it means
when your UI changes, when it gets reorganized,

00:15:23.450 --> 00:15:27.610
quite frequently your code will have to
change, too, which is kind of annoying.

00:15:27.610 --> 00:15:34.340
So for comparison, let's look at the Objective-C version
and I realize that a bunch of you are like, whoa, dude,

00:15:34.340 --> 00:15:38.509
AppleScript is on the sign-out side, not
Objective-C, what are you doing here?

00:15:38.509 --> 00:15:43.860
Relax. The important, the important part here
is the concept, pay attention to concepts.

00:15:43.860 --> 00:15:48.009
If the syntax really, really bugs you, try
squinting a little bit so the punctuation goes away.

00:15:48.009 --> 00:15:49.980
I find that works pretty well.

00:15:49.980 --> 00:15:52.850
So here it is.

00:15:52.850 --> 00:15:57.629
First thing is that in Objective-C you would define a class,

00:15:57.629 --> 00:16:02.480
and this is sort of the basics of
defining a class in Objective-C.

00:16:02.480 --> 00:16:06.230
And you can actually define any number
of classes in the same file, which may--

00:16:06.230 --> 00:16:10.420
it gives you the freedom to organize your code one
way or the other, whether you want to put them all

00:16:10.419 --> 00:16:13.439
in one file or split them across separate files.

00:16:13.440 --> 00:16:16.470
The other thing to notice here is
that it's inheriting from NSObject

00:16:16.470 --> 00:16:22.670
and its object is the base class that
everything inherits from in Cocoa.

00:16:22.669 --> 00:16:29.419
The way the button action works, is that a button in
Interface Builder-- you hook it up to an action method,

00:16:29.419 --> 00:16:31.959
and this action method can really be named anything.

00:16:31.960 --> 00:16:38.019
So in this case it's called convert and a single object
could contain a number of different action methods,

00:16:38.019 --> 00:16:41.480
so the one object could serve as the
controller of a bunch of different objects.

00:16:41.480 --> 00:16:43.649
It's actually not possible in Studio.

00:16:43.649 --> 00:16:45.590
So again, more flexibility for you.

00:16:45.590 --> 00:16:53.030
And when you want to refer to the interface elements,
the class defines a number of what are called ID outlets,

00:16:53.029 --> 00:16:59.289
basically properties, and these are connected in Interface
Builder to the text field, to the text field elements,

00:16:59.289 --> 00:17:05.119
and Cocoa takes care of the rest, takes care of
actually hooking, hooking these up at run time.

00:17:05.119 --> 00:17:08.789
So in your code, you just refer to the properties,
and you never have to worry about exactly

00:17:08.789 --> 00:17:10.329
where these things are in the user interface.

00:17:10.329 --> 00:17:16.490
So again, you, your code never has to be changed.

00:17:16.490 --> 00:17:21.990
The basic point here is that AppleScript Studio
is not Cocoa the way everyone else sees it.

00:17:21.990 --> 00:17:25.970
There are a lot of places where you
do not use standard Cocoa tools.

00:17:25.970 --> 00:17:30.610
They're kind of, a bunch of custom stuff Interface
Builder that's only relevant to AppleScript Studio.

00:17:30.609 --> 00:17:35.869
You can't use a lot, you can't use most of standard
Cocoa documentation, because AppleScript Studio has kind

00:17:35.869 --> 00:17:40.369
of its own way of expressing things, so
you have to use the Studio documentation.

00:17:40.369 --> 00:17:42.649
You cannot use the standard Cocoa community.

00:17:42.650 --> 00:17:51.050
One of the interesting things about bridged Cocoa languages
like Python and Ruby is that the difference between Python

00:17:51.049 --> 00:17:54.389
and Ruby Cocoa code and Objective-C
Cocoa code is pretty minor.

00:17:54.390 --> 00:17:58.259
You can still, if you know any one of
them, you can read any of the others.

00:17:58.259 --> 00:18:03.329
So you can show, you know, Python programmers can show
their code to, you know, an Objective-C programmer,

00:18:03.329 --> 00:18:04.789
and they can basically figure out what's going on.

00:18:04.789 --> 00:18:09.180
They'll like, well, OK, this is a little
weird, but yeah, I recognized all this stuff.

00:18:09.180 --> 00:18:10.810
That doesn't work in AppleScript Studio.

00:18:10.809 --> 00:18:12.990
It's just too different.

00:18:12.990 --> 00:18:16.839
And perhaps worst of all, you can't even
use a lot of standard Cocoa framework,

00:18:16.839 --> 00:18:21.319
because AppleScript Studio relies a lot
on custom glue code to provide that kind

00:18:21.319 --> 00:18:25.619
of AppleScript Studio special experience, and if
it's not there, you just can't use the framework.

00:18:25.619 --> 00:18:31.000
Well, you can, actually, but you have to go through this
raw call method of syntax, which is really, really gross.

00:18:31.000 --> 00:18:38.559
So the goal here is to make AppleScript development
for Cocoa look like all of the other languages.

00:18:38.559 --> 00:18:40.389
So two steps to that.

00:18:40.390 --> 00:18:44.810
First step is deprecating AppleScript Studio.

00:18:44.809 --> 00:18:46.859
Deprecated does not mean dead.

00:18:46.859 --> 00:18:49.319
You can still-- all your deployed applications still work,

00:18:49.319 --> 00:18:53.309
so your users aren't in any danger
of being cut off any time soon.

00:18:53.309 --> 00:18:58.039
All the development tools are still there, so you
can continue to maintain your existing projects.

00:18:58.039 --> 00:19:02.319
Some of the features have been hidden, in particular
the AppleScript palette in Interface Builder.

00:19:02.319 --> 00:19:05.069
This is the magic defaults right command to turn it on.

00:19:05.069 --> 00:19:11.659
This is in the AppleScriptObjC release notes, by the
way, so you don't have to write this down right now.

00:19:11.660 --> 00:19:19.850
But you should be migrating your projects
to the new stuff which is AppleScriptObjC.

00:19:19.849 --> 00:19:22.990
AppleScriptObjC is new framework in Snow Leopard.

00:19:22.990 --> 00:19:28.980
It is a Cocoa bridge built very much along the lines of
the other language bridges like Ruby Cocoa or PyObjC.

00:19:28.980 --> 00:19:31.890
So and this gives you a much more consistent experience.

00:19:31.890 --> 00:19:35.600
It's a consistent experience, consistent
with the other development languages,

00:19:35.599 --> 00:19:38.509
so you use the tools the same way everyone else does.

00:19:38.509 --> 00:19:44.359
You can use documentation, because there's a minor syntactic
fill up you have to do in order to actually use it.

00:19:44.359 --> 00:19:48.599
You can use the community like I was talking about
before, because people can actually understand your code.

00:19:48.599 --> 00:19:52.789
It's very much like what they're used
to, and you can use any Objective-C API

00:19:52.789 --> 00:19:55.950
in the system immediately, no questions asked.

00:19:55.950 --> 00:20:03.069
It brings AppleScript into line with all the other
languages so normal Cocoa techniques just work.

00:20:03.069 --> 00:20:09.460
Oh, and added bonus, it gives us a new acronym
which is pronounceable in polite company.

00:20:09.460 --> 00:20:14.960
[laughter] So if you hear anyone refer to, if you
hear, we've been calling it ASOC internally for months,

00:20:14.960 --> 00:20:17.269
so if you hear anyone say ASOC,
that's what they're talking about.

00:20:17.269 --> 00:20:19.700
Marketing would like to see us use the full name, but ASOC.

00:20:19.700 --> 00:20:26.529
So to show a little bit of how this works, we're
going to do kind of a Rosetta Stone approach.

00:20:26.529 --> 00:20:35.319
We've got the converter controller code from Objective-C
over here on the left and we're going to fill this

00:20:35.319 --> 00:20:38.470
in on the right with the AppleScriptObjC version.

00:20:38.470 --> 00:20:43.210
And two big things to know, one thing
is that we're going to go line for line.

00:20:43.210 --> 00:20:47.220
It actually matches up nearly line
for line with the Objective-C.

00:20:47.220 --> 00:20:52.390
The other thing is that we did not add any
new AppleScript syntax to do any of this.

00:20:52.390 --> 00:20:54.000
It's all existing AppleScript syntax.

00:20:54.000 --> 00:20:55.880
If you're a reasonably experienced AppleScript programmer,

00:20:55.880 --> 00:20:58.990
you've seen all of this stuff before,
and it means basically the same thing.

00:20:58.990 --> 00:21:02.069
But it's now being applied to called Cocoa Objects.

00:21:02.069 --> 00:21:05.079
So first thing is the class definition.

00:21:05.079 --> 00:21:08.759
So AppleScript's equivalent of a class is a script object,

00:21:08.759 --> 00:21:12.559
so you design a script object to
make it inherent from NSObjects.

00:21:12.559 --> 00:21:15.470
The way you do that in AppleScript
is, you give it a parent property,

00:21:15.470 --> 00:21:20.240
but the unique thing in AppleScriptObjC is now
you give it a parent property of class NSObjects.

00:21:20.240 --> 00:21:23.269
So this is an object that inherits from NSObject.

00:21:23.269 --> 00:21:26.039
Next we'll add the outlet properties.

00:21:26.039 --> 00:21:30.990
AppleScript has of course-- has properties--
that's just what they're called in AppleScript.

00:21:30.990 --> 00:21:36.730
So we define 3 of those and give them
all an initial value of missing value.

00:21:36.730 --> 00:21:38.440
Missing value, two things about this.

00:21:38.440 --> 00:21:42.269
One is that missing value is AppleScript's
equivalent to Objective-C's nil.

00:21:42.269 --> 00:21:47.329
So anytime you see nil in Objective-C,
think missing value and vice versa.

00:21:47.329 --> 00:21:52.919
The other thing is that, Interface Builder will pick up on
any properties in your script that have an initial value

00:21:52.920 --> 00:21:55.570
of missing value and will treat those as ID outlets.

00:21:55.569 --> 00:21:57.269
So when you drag to connect in Interface Builder,

00:21:57.269 --> 00:22:01.369
they'll show up in that little pop-up
menu, makes life a little more convenient.

00:22:01.369 --> 00:22:10.119
The convert method in Objective-C turns
into a convert handler in AppleScript

00:22:10.119 --> 00:22:17.449
and AppleScriptObjC handlers all use positional
parameters, and the name here is a little interesting.

00:22:17.450 --> 00:22:21.610
So notice that the name of the original method
is not convert, it's actually "convert:".

00:22:21.609 --> 00:22:24.799
That's what they call a selector in Objective-C.

00:22:24.799 --> 00:22:30.569
So the rule for translating those to AppleScript is you
take all the colons and you change them to underscores,

00:22:30.569 --> 00:22:34.609
you mush them all together, that's the handler
name and the parameters come after that.

00:22:34.609 --> 00:22:39.609
This is, by the way, the exact same rule that Python and
Ruby use for their bridges, so if you're familiar with one

00:22:39.609 --> 00:22:41.559
of those, then you know this immediately.

00:22:41.559 --> 00:22:52.079
When you want to call a method on an object, you
simply invoke handler, a handler of that object.

00:22:52.079 --> 00:22:56.579
There are a few different syntaxes you
can use to do this, using objects method,

00:22:56.579 --> 00:22:59.559
amountField floatValue in this case,
and notice the parenthesis at the end.

00:22:59.559 --> 00:23:02.399
This is a function call after all.

00:23:02.400 --> 00:23:04.940
There are a few different syntaxes you can use to do this.

00:23:04.940 --> 00:23:09.299
We're using this particular one simply because
it matches the Objective-C order the best,

00:23:09.299 --> 00:23:12.210
and because it's the most, the most compact.

00:23:12.210 --> 00:23:17.940
There are other-- there are two
others, we'll see them in a minute.

00:23:17.940 --> 00:23:20.950
Any of them works, of course, it's just
a matter of taste which one you use.

00:23:20.950 --> 00:23:23.210
Same deal for the rate field.

00:23:23.210 --> 00:23:29.210
And to do the conversion, this is
a slightly more advanced version

00:23:29.210 --> 00:23:32.809
of that method that, that colon to underscore translation.

00:23:32.809 --> 00:23:39.079
So the original method in Objective-C was called,
is called convertAmount:amount atrate:rate

00:23:39.079 --> 00:23:48.230
So that whole name becomes convertAmount_amount
atrate_ as you can see on the slide.

00:23:48.230 --> 00:23:51.089
And finally, calling another method to set the float value.

00:23:51.089 --> 00:23:58.019
You notice the setFloatvalue: in Objective-C, in, in
Objective-C, so it's setFloatvalue_ in AppleScript.

00:23:58.019 --> 00:24:02.829
And here's another one of those syntaxes, that instead of
saying objects method you can say tell object to method.

00:24:02.829 --> 00:24:04.059
Purely a matter of taste.

00:24:04.059 --> 00:24:05.909
I happen to like the way this one read.

00:24:05.910 --> 00:24:09.540
And that's it.

00:24:09.539 --> 00:24:13.460
That's our complete AppleScriptObjC
converter controller definition.

00:24:13.460 --> 00:24:13.809
[ Applause ]

00:24:13.809 --> 00:24:23.819
So there are a few things you will need to know that
are not in that Rosetta Stone example, and by the way,

00:24:23.819 --> 00:24:28.210
this is all in the AppleScriptObjC release notes, so
don't worry too much about taking notes right now.

00:24:28.210 --> 00:24:31.230
You can look it up in the Snow
Leopard reference library afterwards.

00:24:31.230 --> 00:24:36.680
First big thing is identifiers.

00:24:36.680 --> 00:24:39.240
Anything you use with AppleScript Objective-C has

00:24:39.240 --> 00:24:42.279
to be considered a user identifier
as far as AppleScript is concerned.

00:24:42.279 --> 00:24:45.210
This is one of the things about
AppleScript that distinguishes very clearly

00:24:45.210 --> 00:24:48.569
between user identifiers and application-defined
identifiers.

00:24:48.569 --> 00:24:53.519
Things that are effectively reserved by applications
or AppleScript or scripting descriptions.

00:24:53.519 --> 00:24:58.369
So if you ever hit a conflict, you can force
AppleScript to consider the thing, a user identifier,

00:24:58.369 --> 00:25:02.619
by putting it in vertical bars, pikes some people call them.

00:25:02.619 --> 00:25:07.739
So for instance, NSColor has a method called
Set which sets the current drawing color.

00:25:07.740 --> 00:25:11.859
But Set is already a reserved word in
AppleScript used for a variable assignment.

00:25:11.859 --> 00:25:15.490
So if we're going to call it as a method, stick it
in vertical bars, like you can see in the slide.

00:25:15.490 --> 00:25:19.390
So it's set and then the parenthesis
to actually invoke the function.

00:25:19.390 --> 00:25:20.330
Same deal for balance.

00:25:20.329 --> 00:25:22.129
Balance is another thing defined by AppleScript.

00:25:22.130 --> 00:25:23.790
It's a property of rectangles.

00:25:23.789 --> 00:25:26.339
So call it as a function, vertical bars.

00:25:26.339 --> 00:25:31.609
As a general rule, if you're ever in doubt,
just throw them in, the compiler will strip them

00:25:31.609 --> 00:25:34.049
out if they're not necessary, and they
won't harm anything if they're there.

00:25:34.049 --> 00:25:37.799
So that's identifiers.

00:25:37.799 --> 00:25:39.500
Referring to classes in constants.

00:25:39.500 --> 00:25:42.289
This is something you'll have to do with some frequency.

00:25:42.289 --> 00:25:47.109
Classes are considered to be elements
and constants, like numerated values,

00:25:47.109 --> 00:25:51.259
are considered to be properties of the current application.

00:25:51.259 --> 00:25:59.109
So for instance we can refer to current applications
class NSColor or current application NSCalibrated

00:25:59.109 --> 00:26:02.519
and RGB color phase, say that 3 times fast.

00:26:02.519 --> 00:26:07.269
Now, obviously throwing in the current application
all the time makes the script a little noisy,

00:26:07.269 --> 00:26:11.680
more difficult to read, so a trick we discovered
almost immediately is to hoist these things

00:26:11.680 --> 00:26:16.890
out into top level properties in your script
and that way, so you can set them up initially,

00:26:16.890 --> 00:26:22.700
and in the body of your script, you just refer
to NSColor or NSCalibrated or RGB color phase,

00:26:22.700 --> 00:26:29.870
so it's more compact, easier to read, saves you some typing.

00:26:29.869 --> 00:26:34.319
Referring to self, self and Objective-C
is the same thing as me in AppleScript.

00:26:34.319 --> 00:26:36.519
Me is the current script object.

00:26:36.519 --> 00:26:43.660
So if you want to get a property of yourself, you have to
say of me or my, my radius, radius of me, either works.

00:26:43.660 --> 00:26:50.200
Methods like we discussed before, you tell, you can tell
me, tell an object, me in this case, tell me to or my.

00:26:50.200 --> 00:26:52.980
So tell me to set me to display.

00:26:52.980 --> 00:27:00.329
This is how you tell a view in, in Objective,
in Cocoa that it needs to redraw itself.

00:27:00.329 --> 00:27:06.919
If you want to invoke your super classes, the implementation
of a method, you want to call it the inherited version

00:27:06.920 --> 00:27:10.070
in Objective-C, this would be super method.

00:27:10.069 --> 00:27:12.500
In AppleScript, this concept already exists.

00:27:12.500 --> 00:27:13.759
Uses the keyword continues.

00:27:13.759 --> 00:27:17.109
So for instance, say continue init
any time you write an initializer,

00:27:17.109 --> 00:27:20.619
the first thing you're going to do is continue init.

00:27:22.250 --> 00:27:25.670
Data translation, this gets a little interesting.

00:27:25.670 --> 00:27:30.590
So there're a lot of basic value types that
haven't put equivalents in Cocoa and AppleScripts,

00:27:30.589 --> 00:27:35.429
so things like strings, lists versus
arrays, dictionaries versus records.

00:27:35.430 --> 00:27:42.529
In general, you can pass an AppleScript
option, an AppleScript native type

00:27:42.529 --> 00:27:44.849
to a Cocoa call, and it just does the right thing.

00:27:44.849 --> 00:27:51.480
So for instance you can pass a, just an AppleScript double
equivalented string anywhere that an NSString is expected.

00:27:51.480 --> 00:27:54.700
You can pass an AppleScript list
to anywhere an NSArray is expected.

00:27:54.700 --> 00:27:59.620
You, you could pass records where,
where an NS Dictionary's expected.

00:27:59.619 --> 00:28:08.589
Keys that you use in the record turn into the strings keys
in the NSDictionary and if you want to use a structure

00:28:08.589 --> 00:28:13.409
like an NSRange or NSReg or something like
that, you can express that either as the record

00:28:13.410 --> 00:28:19.769
where you explicitly name the keys and notice their
length is reserved by AppleScript by vertical bars again,

00:28:19.769 --> 00:28:23.019
or you can just do it as a list where
you just list the members in order.

00:28:23.019 --> 00:28:29.559
So both of those ranges there at the end, it's an NSRange,
are of the exact same value, location of 0, length of 4.

00:28:29.559 --> 00:28:36.200
So that's when you're going from
AppleScript to Objective-C Cocoa.

00:28:36.200 --> 00:28:39.830
When you're going the other direction,
it's manual translation.

00:28:39.829 --> 00:28:43.669
Whenever you're passed a Cocoa object,
it stays a Cocoa object by default.

00:28:43.670 --> 00:28:49.070
The main point here is that that's so you
can continue to call Cocoa methods on it.

00:28:49.069 --> 00:28:53.509
You cannot invoke Cocoa methods on what
is actually just an AppleScript value.

00:28:53.509 --> 00:29:00.049
So in this case, we're being passed an NSString, and because
it stays an NSString, we can call substring index on it,

00:29:00.049 --> 00:29:03.970
or you know, string by replacing characters
or something, something to that effect,

00:29:03.970 --> 00:29:06.519
and the result of that will be another NSString.

00:29:06.519 --> 00:29:09.190
Now, if you actually need to do
something AppleScript specific,

00:29:09.190 --> 00:29:12.500
you actually need a AppleScript
string, you can use coercion.

00:29:12.500 --> 00:29:15.880
So you just say, as text, now it's an AppleScript string.

00:29:15.880 --> 00:29:18.360
So you can pass it to say display dialog.

00:29:18.359 --> 00:29:24.329
One thing to watch out for here, I've seen some scripts
that are kind of compulsive about coercing stuff

00:29:24.329 --> 00:29:29.319
that the first thing they do as soon as they call
a function is as text, as number, as, as whatever.

00:29:29.319 --> 00:29:32.339
If you do that, then you are cutting
yourself off from the Cocoa world.

00:29:32.339 --> 00:29:37.990
You're turning into an AppleScript value and can
therefore no longer call Cocoa methods on that object.

00:29:37.990 --> 00:29:41.120
Only you can't use it at all, but
you're cutting yourself off from it,

00:29:41.119 --> 00:29:43.639
so be careful from this, so be careful about that.

00:29:43.640 --> 00:29:54.200
Now just because Cocoa objects stay as Cocoa objects does
not mean that you cannot use AppleScript idioms on them.

00:29:54.200 --> 00:29:58.299
We went to some trouble to make these
things work where they actually make sense.

00:29:58.299 --> 00:30:00.829
So for instance you can call order documents,

00:30:00.829 --> 00:30:04.960
order documents returns an NSArray and
it stays an NSArray in AppleScript.

00:30:04.960 --> 00:30:08.079
But even so, you can still call repeat with DNDocs on it.

00:30:08.079 --> 00:30:10.250
You can loop over it as if it's a list.

00:30:10.250 --> 00:30:14.150
You can get the first item, you can
get the last item, those all work.

00:30:14.150 --> 00:30:20.680
If you are dealing with a property of an Objective-C
object, like for instance the display name of a document,

00:30:20.680 --> 00:30:24.450
you can refer to that as if it's a,
as if it's an AppleScript property.

00:30:24.450 --> 00:30:30.160
You don't even need the, you don't even need the
parenthesis as, to show that it's a method call,

00:30:30.160 --> 00:30:34.519
it's just treated as a property,
so you can even set it that way.

00:30:34.519 --> 00:30:36.089
So very convenient.

00:30:36.089 --> 00:30:43.480
Last bit and I will confess this part is not
in the release notes, NSError** parameters.

00:30:43.480 --> 00:30:50.410
There are a number of Cocoa calls that return
an object by reference as an output parameter.

00:30:50.410 --> 00:30:53.950
Typically you see these with NSErrors that you want--

00:30:53.950 --> 00:30:58.279
that give you detailed information
about why a particular call failed.

00:30:58.279 --> 00:31:00.859
The basic function result just tells you that it did fail.

00:31:00.859 --> 00:31:03.509
The NSError tells you why.

00:31:03.509 --> 00:31:07.279
So if you want to call one of these
things, then you pass one of two things.

00:31:07.279 --> 00:31:11.059
If you don't care about the output value, and you
just don't want to see it, pass missing value.

00:31:11.059 --> 00:31:17.269
Missing value is the equivalent of nil, so that just says,
Naw, don't care, don't, fail, didn't fail, eeh, whatever.

00:31:17.269 --> 00:31:22.950
If you do care exactly why it failed, and you
want to examine the object, then pass reference.

00:31:22.950 --> 00:31:30.009
Remember reference is actually a class in AppleScript, and
what this does is that the output object will appear as part

00:31:30.009 --> 00:31:35.549
of the function result instead of getting just the value,
the basic function result, you'll actually get a list.

00:31:35.549 --> 00:31:38.190
First the function value, then the output parameter.

00:31:38.190 --> 00:31:42.049
If you had more than one output parameter,
you'd get more objects in that list.

00:31:42.049 --> 00:31:45.759
This is the same thing that Python
and PyObjC use incidentally.

00:31:45.759 --> 00:31:49.660
For instance, in this case, we're
calling RemoveItemAtPath_error.

00:31:49.660 --> 00:31:54.000
So the first one, just passing
value, throw it away, who cares.

00:31:54.000 --> 00:31:57.400
The second one, pass reference and now we get a list back.

00:31:57.400 --> 00:32:04.390
The false tells us that it failed and
then it's their object tell us why.

00:32:04.390 --> 00:32:09.880
Now, if you get invoked as a function that matches
this kind of thing, this will happen, for instance,

00:32:09.880 --> 00:32:15.650
if you're trying to make your own NSDocuments sub-class
because all the reading methods take an NSError** parameter.

00:32:15.650 --> 00:32:26.880
AppleScriptObjC will pass to you kind of this
magic object which represents the pointer, so you,

00:32:26.880 --> 00:32:29.060
that will either be missing value, which means, you know,

00:32:29.059 --> 00:32:31.679
whoever called you didn't care, so,
that's the first thing you check.

00:32:31.680 --> 00:32:38.769
If our error, if our error's not missing value, then you
can fill in by referring to the contents of that object,

00:32:38.769 --> 00:32:44.349
so make an NSError object set contents
of out error to the error and that's it.

00:32:44.349 --> 00:32:50.179
This same technique actually works for any
pointer style param-- output pointer parameter.

00:32:51.210 --> 00:32:57.529
But NSError is the most common case.

00:32:57.529 --> 00:32:58.970
So enough of me babbling at you.

00:32:58.970 --> 00:33:04.160
Let me get Michael Gorbach back up here to show
you a bit about how it's done, what it looks like.

00:33:04.160 --> 00:33:05.370
Michael.

00:33:05.369 --> 00:33:12.689
>> OK, so best way to explain ASOC is to, to sort of
compare it to the way that we used to do things in Studio,

00:33:12.690 --> 00:33:17.410
and I think if we do that, it will really show you
what the advantages are moving to the ASOC world.

00:33:17.410 --> 00:33:19.390
So that's what we're going to do.

00:33:19.390 --> 00:33:24.570
We're going to start with an example called Task List.

00:33:24.569 --> 00:33:26.980
So it is a very simple app.

00:33:26.980 --> 00:33:39.980
It is a simple task as it allows you to enter a few things
you need to get done, sort them, set priorities, and so on.

00:33:39.980 --> 00:33:41.630
Maybe you've seen this before.

00:33:41.630 --> 00:33:46.420
So we originally wrote this as a Studio
example of filling a table view with data

00:33:46.420 --> 00:33:49.680
and using the data source features of Studio.

00:33:49.680 --> 00:33:53.250
So Cocoa developers used to have to do things this way, too.

00:33:53.250 --> 00:33:55.700
But, recently they've gotten a feature called Bindings,

00:33:55.700 --> 00:33:59.420
which really saves you from having
to write a lot of this code.

00:33:59.420 --> 00:34:00.070
How much code?

00:34:00.069 --> 00:34:09.489
Well, if you look at this example, kind of goes on
and on and you know, on, and it's about 250 lines

00:34:09.489 --> 00:34:12.629
of code even without the long comments here.

00:34:12.630 --> 00:34:18.320
So what if you could get rid of all of
this code, or almost all of this code?

00:34:18.320 --> 00:34:19.800
Bindings can do that for you.

00:34:19.800 --> 00:34:26.390
Bindings is topology that Cocoa people have had for some
time and now we can bring it to you when you move to ASOC.

00:34:26.389 --> 00:34:34.379
So we're going to take this example and rewrite it
using bindings and using ASOC or AppleScriptObjC.

00:34:35.750 --> 00:34:37.489
That's all.

00:34:37.489 --> 00:34:43.569
[ Applause ]

00:34:43.570 --> 00:34:48.460
Seven lines of code to do pretty much the
same thing that the original Studio app did.

00:34:48.460 --> 00:34:55.470
I'm going to show it to you to
make sure you believe me here.

00:34:55.469 --> 00:34:58.459
And Bindings is making this magic happen.

00:34:58.460 --> 00:34:59.579
Binding is set up in the name.

00:34:59.579 --> 00:35:04.829
We're not going to discuss them in detail here because
this isn't really a Binding session, but remember,

00:35:04.829 --> 00:35:08.819
Bindings in Studio-- in ASOC work just
the same way that they work in Cocoa.

00:35:08.820 --> 00:35:13.510
Ask any Cocoa developer, watch any
Cocoa session, look at any Cocoa example

00:35:13.510 --> 00:35:17.040
and you figure out how to make this happen.

00:35:17.039 --> 00:35:22.389
So this is a pretty good example,
but it's showing you Bindings,

00:35:22.389 --> 00:35:26.839
and it's showing you that ASOC can make you more
productive and cut down on the code you have to write.

00:35:26.840 --> 00:35:30.950
But, writing less code is not the
only thing that ASOC can give you.

00:35:30.949 --> 00:35:35.189
ASOC also gives you the access to the
functionality of all our system frameworks.

00:35:35.190 --> 00:35:39.950
Everything that every Cocoa developer has had
access to for years, everything you recreate,

00:35:39.949 --> 00:35:43.669
you can get your hands on it, and you
can get your hands on it immediately.

00:35:43.670 --> 00:35:49.950
So this example's all right, but now if I start it up
again, my tasks are gone, it's not really very persistent,

00:35:49.949 --> 00:35:54.319
doesn't show me my tasks I need to see them, it doesn't
show me them in I-Cal, it doesn't show me them in Mail.

00:35:54.320 --> 00:35:56.910
It's not really much use for anybody.

00:35:56.909 --> 00:36:02.179
But it turns out we have a Cocoa framework on the
system for this purpose, it's called CalendarStore.

00:36:02.179 --> 00:36:09.279
And what it does is, it integrates with Mail's tasks
and I-Cal's to-dos, and it shows you them right

00:36:09.280 --> 00:36:12.600
where you need them, and it allows
the apps to control that list.

00:36:12.599 --> 00:36:16.670
So we're going to add a little bit of code
to this example and rewrite it and add it

00:36:16.670 --> 00:36:19.559
at code so that it works with CalendarStore.

00:36:19.559 --> 00:36:25.519
So the tasks that we put into this app
synchronize with the ones in I-Cal.

00:36:29.050 --> 00:36:32.570
So this actually is the CalendarStore
version of the example.

00:36:32.570 --> 00:36:37.730
There's two things I wanted to point out about the code,
but before I do that, I just want to run it for you.

00:36:37.730 --> 00:36:41.789
We added-- to make this happen we added
about 60 or 80 lines o`f code, one more file.

00:36:41.789 --> 00:36:45.650
So it's still about half the size of the
Studio example, and it does a whole lot more.

00:36:45.650 --> 00:36:51.639
And here's what I mean, so, you know, we can add a task.

00:36:51.639 --> 00:36:55.369
If you go to I-Cal, there's our tasks.

00:36:55.369 --> 00:37:01.839
We can add a few more, and set a priority.

00:37:01.840 --> 00:37:11.650
As soon as you go back to I-Cal, there they are.

00:37:11.650 --> 00:37:14.510
[ Applause ]

00:37:14.510 --> 00:37:18.120
So, there were a few things that I
wanted to point out about this code.

00:37:18.119 --> 00:37:23.259
First thing to note is that Cocoa-- is that
S-group has created an app delegate for us here

00:37:23.260 --> 00:37:26.020
and there's some entry points and
exit points that you're going to want

00:37:26.019 --> 00:37:28.009
to know about when you start writing ASOC apps.

00:37:28.010 --> 00:37:30.300
First one here is awake from nib.

00:37:30.300 --> 00:37:35.269
So it looks just like the awake from nib that you
used in studio, but you know, we've lost the spaces

00:37:35.269 --> 00:37:39.639
and we've changed the capitalization to match the
Cocoa way of doing things, but it is your entry point

00:37:39.639 --> 00:37:44.019
for when your options get exploded from the nib,
which happens generally when your program starts.

00:37:44.019 --> 00:37:47.929
Another important thing to know
is application will terminate.

00:37:47.929 --> 00:37:54.389
This is a method that does get run when you're program is
about to exit and it's useful when you need to save stay

00:37:54.389 --> 00:37:57.159
or do some cleanup work before you get out.

00:37:57.159 --> 00:38:00.329
There's also will become update
and will reside active if you need

00:38:00.329 --> 00:38:04.789
to do some active when your app activates and deactivates.

00:38:04.789 --> 00:38:08.759
So we can go through a little bit of the
CalendarStore code which is in another file,

00:38:08.760 --> 00:38:14.310
to point out some of the ASOC syntax
that Chris mentioned earlier.

00:38:14.309 --> 00:38:18.340
Over here we have the shortcut
for classes that Chris discussed.

00:38:18.340 --> 00:38:22.590
We're just defining some properties
in the top level of the script

00:38:22.590 --> 00:38:27.710
so that it's easier, and so that
we write less code later on.

00:38:27.710 --> 00:38:35.699
We have a parent to indicate what class we are sub-classing,
and we have some properties which will be filled in later.

00:38:35.699 --> 00:38:43.339
So one thing to know on this slide, is that we are calling
addObject, which is a Cocoa method on a Cocoa object

00:38:43.340 --> 00:38:47.950
or Objective-C object, but the parameter that we
are passing is actually an AppleScript record.

00:38:47.949 --> 00:38:52.699
This is the really convenient automatic
conversion of parameters that Chris mentioned.

00:38:52.699 --> 00:38:56.919
So the AppleScript record will get converted
into a Cocoa or Objective-C dictionary

00:38:56.920 --> 00:38:59.260
and everything will work just as expected.

00:38:59.260 --> 00:39:05.910
We'll use regular AppleScript syntax to reference our keys.

00:39:05.909 --> 00:39:14.250
Another thing to point out is that over here we're using a
repeat loop and tasks is actually not an AppleScript list,

00:39:14.250 --> 00:39:17.030
but an NSArray, a Cocoa or an Objective-C object.

00:39:17.030 --> 00:39:21.060
So many of the common constructs that you
use in AppleScript have been updated now

00:39:21.059 --> 00:39:24.000
so that they work as expected with certain Cocoa objects.

00:39:24.000 --> 00:39:28.559
In these two eyes, it's very convenient
that we can use access

00:39:28.559 --> 00:39:34.519
we can use regular AppleScript property accessers to get
at the, at the properties of Objective-C or Cocoa objects,

00:39:34.519 --> 00:39:40.159
ACaf is an object from CalendarStore and we're
just accessing its priority and its title

00:39:40.159 --> 00:39:45.529
and we can even set them with very similar syntax.

00:39:45.530 --> 00:39:51.910
Finally, I want to point out the use of
NSError as Chris discussed in a few slides ago.

00:39:51.909 --> 00:39:59.399
So this is CalendarStore's remove task error method
which may fail and may return user visible error

00:39:59.400 --> 00:40:01.730
of some kind so you can display what went wrong.

00:40:01.730 --> 00:40:07.050
We're passing reference here which is a class
and we're interested in getting the result back.

00:40:07.050 --> 00:40:09.630
So the result is actually an AppleScript list.

00:40:09.630 --> 00:40:14.440
We check item 1 which is going to be a void to
indicate whether the method has succeeded or failed

00:40:14.440 --> 00:40:21.150
and if the method did fail, we will get
item 2 and that will contain our error.

00:40:21.150 --> 00:40:27.500
So we showed you an ASOC an example here to try
to explain that ASOC can make you more productive

00:40:27.500 --> 00:40:30.190
and can really enhance the capabilities
of what you can do for your users.

00:40:30.190 --> 00:40:35.139
You really get access to areas of the system
that you've never had access to before.

00:40:35.139 --> 00:40:37.819
But, we want you to start writing ASOC code this week.

00:40:37.820 --> 00:40:39.590
We want you to really dive into it.

00:40:39.590 --> 00:40:47.320
So the best way to do it, we just had to show you another
example that can take you through creating an ASOC project

00:40:47.320 --> 00:40:49.789
from scratch so that you know where to start.

00:40:49.789 --> 00:40:53.279
The example we're going to do is actually called Dot View.

00:40:53.280 --> 00:40:57.180
Dot View is an example that many
Cocoa developers probably seen before.

00:40:57.179 --> 00:41:03.159
It's just a simple example that draws a dot with
a particular color and radius on the screen.

00:41:03.159 --> 00:41:04.309
Why are we showing this to you?

00:41:04.309 --> 00:41:07.639
Well for you Studio developers, doing graphics primitives--

00:41:07.639 --> 00:41:11.710
even simple things, was almost
impossible in AppleScript Studio.

00:41:11.710 --> 00:41:17.349
So now you can do it, now you can do it easily, and
I just wanted to show you how to make that happen.

00:41:17.349 --> 00:41:20.019
So we're going to create Dot View from scratch.

00:41:20.019 --> 00:41:27.360
We're going to create a new AppleScript
Objective-C application.

00:41:27.360 --> 00:41:36.309
We have a beautiful icon here and we can call it Dot View.

00:41:36.309 --> 00:41:43.529
So Xcode will open up and it will create a skeleton
application delegate for us which will include some

00:41:43.530 --> 00:41:46.700
of the entry and exit points that I discussed earlier.

00:41:46.699 --> 00:41:52.049
The, there's also an application we'll finish launching and
prepoint which is separate from the nib and also get started

00:41:52.050 --> 00:41:54.920
when your app has finished its loading process.

00:41:54.920 --> 00:41:59.090
And we're going to put together Dot View step by step.

00:41:59.090 --> 00:42:04.730
So the first thing we want to do is add a few
properties, which are, as I disused already,

00:42:04.730 --> 00:42:07.610
shortcuts so we can type less during
the rest of this script.

00:42:07.610 --> 00:42:12.010
We'll be having these two Cocoa classes often
during our code and we just want to save

00:42:12.010 --> 00:42:15.660
on some typing, or maybe save demo monkey some typing.

00:42:15.659 --> 00:42:21.609
So we're going to add another set of
properties which are going to be key to the app,

00:42:21.610 --> 00:42:25.160
and this is going to be the parameters
that we use to draw our circle.

00:42:25.159 --> 00:42:32.599
We have a center, a radius and a color.

00:42:32.599 --> 00:42:32.839
[ Silence ]

00:42:32.840 --> 00:42:35.190
All right.

00:42:35.190 --> 00:42:39.150
So actually, small change.

00:42:40.469 --> 00:42:44.299
We are writing a drawing out, so what
we're going to need to do is sub-class

00:42:44.300 --> 00:42:47.260
and skew which is Cocoa's primitive
class for doing drawings.

00:42:47.260 --> 00:42:54.030
We're going to create a new file and
it's going to be an add FC sub-class.

00:42:54.030 --> 00:42:56.750
Xcode is going to help us out.

00:42:56.750 --> 00:43:01.119
Going to call it, Xcode is going to help
us out by creating a skeleton for the main,

00:43:01.119 --> 00:43:04.359
the important methods that NSU sub-class has to implement.

00:43:04.360 --> 00:43:10.920
There's an equith frame, which is going to be the code
that's going to get run when your view is first created

00:43:10.920 --> 00:43:15.700
and there's draw act which is going to be the code that is
going to get run for the main drawing part of your view.

00:43:15.699 --> 00:43:19.259
It's going to get run also.

00:43:19.260 --> 00:43:28.860
So you can do what I did earlier, add our convenience
properties here, and create the first 3 parameters

00:43:28.860 --> 00:43:30.170
that we're going to use to draw a circle.

00:43:30.170 --> 00:43:36.990
The thing that I didn't get a chance to point out
here is that we have X and Y coming into the center.

00:43:36.989 --> 00:43:45.039
This is an example of using, of using point and, in
Cocoa point in AppleScript syntax so we have a list here

00:43:45.039 --> 00:43:48.440
which is going to get converted to
a point as an Objective-C expected.

00:43:48.440 --> 00:43:57.010
So we could fill in our initialization code to
set the 4 parameters that we're going to need.

00:43:57.010 --> 00:44:00.700
One thing to point out here is, we're using
continue to call out to our super classes

00:44:00.699 --> 00:44:02.699
and put implementation of an equith frame.

00:44:02.699 --> 00:44:08.189
Very important that we let our super class finish
its initialization before we start doing our work.

00:44:08.190 --> 00:44:12.090
Another important point is that
we are calling return me here.

00:44:12.090 --> 00:44:14.110
Me is like self in Objective-C.

00:44:14.110 --> 00:44:15.890
It's the object in question.

00:44:15.889 --> 00:44:21.029
It's the object's method that's being called on
and we do want to return it from our initializing.

00:44:23.010 --> 00:44:27.600
Finally, you want to add some code to draw a rect.

00:44:27.599 --> 00:44:32.750
This code uses an aspasure [assumed spelling] path which
is a Cocoa class that does basic line drawing for us.

00:44:32.750 --> 00:44:37.539
I'm not going to go into the detail of how and
aspasure path works, but again, as I said earlier,

00:44:37.539 --> 00:44:41.440
you can go to the Cocoa Objective-C
documentation, you could figure out how this works

00:44:41.440 --> 00:44:45.869
and you can translate it quite easily,
line by line from Objective-C into ASOC.

00:44:45.869 --> 00:44:50.420
It's much easier than you would expect.

00:44:50.420 --> 00:44:55.940
And we will add a few more methods to make all this
happen, we need to track the mouse and we need to make sure

00:44:55.940 --> 00:45:01.070
that we draw and redraw our view when we
set the radius and when we set the color.

00:45:01.070 --> 00:45:05.760
So we've got most of the code done, but we still need a nib.

00:45:05.760 --> 00:45:10.780
About, with regards to nibs, we need
to-- we know that in ASOC nibs works

00:45:10.780 --> 00:45:13.480
in the same way as they do in Cocoa or Objective-C.

00:45:13.480 --> 00:45:17.480
There's no special Studio weirdness
going on in terms of how you create nibs.

00:45:17.480 --> 00:45:21.639
So just to prove that to you, we can take the
nib from the Cocoa version of this project,

00:45:21.639 --> 00:45:24.079
we can drag it right into this one
and it's going to work just fine.

00:45:24.079 --> 00:45:31.849
So I'm going to go ahead and delete the example
nib that the template has created for us,

00:45:31.849 --> 00:45:45.569
and I'm going to find the Cocoa nib, and I'm going to
drag it into the resources here and I'm going to copy it.

00:45:48.809 --> 00:45:54.340
I'm going to save our code and if the gods
are with us, we will successfully run.

00:45:58.650 --> 00:45:59.240
And we do.

00:45:59.239 --> 00:45:59.299
[ Applause ]

00:45:59.300 --> 00:46:03.110
So there's a start for you in ASOC.

00:46:06.500 --> 00:46:11.519
Give that some colors, adjust the point,
the center of the circle and so on.

00:46:11.519 --> 00:46:15.429
So pulling examples from Objective-C to ASOC is very easy.

00:46:15.429 --> 00:46:20.119
You gain new capabilities you never used to be able
to do line drawing in any kind of the same way.

00:46:20.119 --> 00:46:21.569
It's a pretty big deal.

00:46:21.570 --> 00:46:25.580
The last thing I want to point out about this
code is, it's significantly shorter and easier

00:46:25.579 --> 00:46:28.069
to read than the original Objective-C example.

00:46:28.070 --> 00:46:31.140
Partly because, you don't have
to deal with memory management,

00:46:31.139 --> 00:46:33.319
we synthesize access and set aside the properties for you.

00:46:33.320 --> 00:46:34.470
We use a garbage collection.

00:46:34.469 --> 00:46:37.589
It's a lot easier than things used
to be in the world of Objective-C

00:46:37.590 --> 00:46:42.400
and of course we have the AppleScript
syntax that everybody loves.

00:46:42.400 --> 00:46:43.519
We know you do.

00:46:43.519 --> 00:46:47.349
Thank you, and I'll give the stage back to Chris.

00:46:47.349 --> 00:46:52.839
>> So all sorts of things you can
do now using AppleScriptObjC.

00:46:52.840 --> 00:47:00.610
That said, there are a few little
caveats I'm legally obliged to tell you.

00:47:03.699 --> 00:47:04.629
[presenter speaking extremely fast] Void where prohibited.

00:47:04.630 --> 00:47:05.289
Some assembly required.

00:47:05.289 --> 00:47:06.099
Action figures not included.

00:47:06.099 --> 00:47:07.309
This is not an offer to sell securities.

00:47:07.309 --> 00:47:09.279
Any resemblance to real persons,
living or dead, is purely coincidental.

00:47:09.280 --> 00:47:10.680
No animals were harmed in the testing of this product.

00:47:10.679 --> 00:47:11.779
Contents may settle during shipment.

00:47:11.780 --> 00:47:12.790
Use only with proper ventilation.

00:47:12.789 --> 00:47:14.509
Keep away from open flames and avoid inhaling fumes.

00:47:14.510 --> 00:47:16.600
Do not use while operating a motor
vehicle or heavy equipment.

00:47:16.599 --> 00:47:19.429
Apply only to affected area; if condition
persists, consult your physician.

00:47:19.429 --> 00:47:21.219
Amy be too intense for some viewers.

00:47:21.219 --> 00:47:22.619
Post office will not deliver without postage.

00:47:22.619 --> 00:47:23.789
Best if used before date on carton.

00:47:23.789 --> 00:47:24.389
Times are approximate.

00:47:24.389 --> 00:47:25.389
Slightly enlarged to show detail.

00:47:25.389 --> 00:47:26.179
Colors may fade over time.

00:47:26.179 --> 00:47:27.149
Content has been edited for your screen.

00:47:27.150 --> 00:47:28.340
Not affiliated with the American Red Cross.

00:47:28.340 --> 00:47:29.890
At participating locations only.

00:47:29.889 --> 00:47:30.139
[ Applause ]

00:47:30.139 --> 00:47:43.000
I was careful to select things that are sort of
technically, technically true for AppleScriptObjC,

00:47:43.000 --> 00:47:45.719
but of course these are not the important ones.

00:47:45.719 --> 00:47:55.699
The important ones, first off, this is not, this
is not a free transition for you admittedly.

00:47:55.699 --> 00:48:00.230
There is work that AppleScript Studio people will have
to put in if you're going to transfer your apps over.

00:48:00.230 --> 00:48:01.699
You will have to rewrite a lot of code.

00:48:01.699 --> 00:48:09.980
However, as you saw from the examples, rewrite quite
frequently means throw away, and even where you do have

00:48:09.980 --> 00:48:15.010
to rewrite, we've typically found that
the AppleScriptObjC code is about 30

00:48:15.010 --> 00:48:19.420
to 50% smaller that the equivalent Studio code.

00:48:19.420 --> 00:48:23.260
There are a few things that do
not work correct, do not work.

00:48:23.260 --> 00:48:26.910
We concede, just so you don't waste your time.

00:48:26.909 --> 00:48:31.500
First, you only get access to Objective-C
functions, not plain C functions.

00:48:31.500 --> 00:48:41.670
The second big thing is that structure bridging
only applies to NSPoint, NSSize, NSRange and NSRect.

00:48:41.670 --> 00:48:45.730
Now this covers just about everything that all
the structure types that exist with the kit,

00:48:45.730 --> 00:48:50.260
with the sole exception of NSDecimal-- NSDecimalNumber.

00:48:50.260 --> 00:48:58.210
So I'm not giving any guarantees about
those 2 for 2, for the final version.

00:48:58.210 --> 00:49:04.030
However, there is one big one that we are definitely
fixing because it just didn't quite make the seed in time,

00:49:04.030 --> 00:49:07.410
it is all supposed to be 64-bit, but
there's a fairly nasty little bug

00:49:07.409 --> 00:49:10.159
with garbage collection so it reaps objects prematurely.

00:49:10.159 --> 00:49:13.529
So for the time being, run at 32-bit.

00:49:13.530 --> 00:49:17.190
We know exactly where the fix is, like I
said, it just didn't make the seed in time.

00:49:17.190 --> 00:49:25.929
We will fix it, but in the mean time,
stick with 32-bit, you'll be a lot happier.

00:49:25.929 --> 00:49:33.539
So like I, like Michael was saying, the big win here is you
get access to all of Cocoa, and I don't just mean the code,

00:49:33.539 --> 00:49:38.019
but that's a huge part, you get access
to convenience features like Bindings.

00:49:38.019 --> 00:49:40.239
You get access to power features like CalendarStore.

00:49:40.239 --> 00:49:42.229
Stuff you really couldn't do before.

00:49:42.230 --> 00:49:47.159
You get access to new features like we don't
know, because we haven't created them yet.

00:49:47.159 --> 00:49:49.429
The point is, we don't have to know.

00:49:49.429 --> 00:49:52.119
As soon as they show up, as soon
as an interface is published,

00:49:52.119 --> 00:49:58.309
you can use it along with all the other Cocoa programmers,
and at the same time, it is still regular AppleScript.

00:49:58.309 --> 00:50:00.989
You can do all of the AppleScripting
stuff that you're used to.

00:50:00.989 --> 00:50:06.489
You can control other applications, you can use all
your existing AppleScript libraries, it all just works.

00:50:06.489 --> 00:50:12.750
So it's a very, very nice combination and really brings
you into the same world as all the other Cocoa programmers.

00:50:12.750 --> 00:50:17.130
So AppleScript winds up being a first
class citizen, not a sort of, like,

00:50:17.130 --> 00:50:21.150
weird cousin in the corner like AppleScript Studio was.

00:50:23.320 --> 00:50:30.100
To sum up, AppleScript is future compatible now.

00:50:30.099 --> 00:50:34.759
It's 64-bits, so it's compatible with, so it's
fully compatible with hardware going forward,

00:50:34.760 --> 00:50:41.190
and it's now thread-safe and that means GCD safe
so all this multi-core, multi-threading craziness,

00:50:41.190 --> 00:50:44.039
you can use AppleScript right along with it.

00:50:44.039 --> 00:50:48.920
If you want to create full blown applications like I
said, display dialog just ain't doing it for you anymore,

00:50:48.920 --> 00:50:54.369
write a code co-application and this means write a
Cocoa application using standard Cocoa techniques.

00:50:54.369 --> 00:50:58.569
Use the language you want, whether that be AppleScript, you
know, if you really want to switch to Objective-C or Python

00:50:58.570 --> 00:51:04.150
or Ruby, you can, it's very straight forward since
you're using the same coding techniques as everyone else,

00:51:04.150 --> 00:51:10.340
there's a consistent experience across all Cocoa
development languages, so you can use standard tools,

00:51:10.340 --> 00:51:12.720
you can use standard community,
you can use standard documentation,

00:51:12.719 --> 00:51:15.349
you just have to learn that little syntactic translation.

00:51:15.349 --> 00:51:18.199
You can do that in your head with a little practice.

00:51:18.199 --> 00:51:22.409
AppleScript Studio is deprecating, doesn't
mean dead, you can keep using it for now,

00:51:22.409 --> 00:51:30.000
but try to move to AppleScriptObjC, that's where
all the action is going to be in the future.

00:51:30.000 --> 00:51:35.289
Should you have further questions you can contact
Matt Drance, the Framework Technologies Evangelist.

00:51:35.289 --> 00:51:39.369
Sal Soghoian is the AppleScript product-marketing manager.

00:51:39.369 --> 00:51:42.679
And if you want to read about it
yourself, go to the attendee site

00:51:42.679 --> 00:51:45.599
and in particular go to the Snow Leopard reference library.

00:51:45.599 --> 00:51:48.829
That's where the-- and look in the
release notes section for AppleScript.

00:51:48.829 --> 00:51:54.539
That's where the AppleScript release notes are,
that's where the AppleScriptObjC release notes are.

00:51:54.539 --> 00:51:54.809
25