WEBVTT

00:00:12.740 --> 00:00:13.650
>> Hi everyone.

00:00:13.650 --> 00:00:15.259
My name is Antoine.

00:00:15.259 --> 00:00:19.820
I work as part of the rich media team in
the Internet Technologies Group at Apple

00:00:19.820 --> 00:00:24.460
and today's session will be a hands
on session, so mostly focused on code.

00:00:24.460 --> 00:00:29.730
All about HTML 5, Media support and
Safari 4.0 and Safari in iPhone 3.0.

00:00:29.730 --> 00:00:36.570
And all the code that we'll be going through today is
actually already available to you from the attendee website,

00:00:36.570 --> 00:00:44.810
so you can just log on to www.apple.com/wwdc/attendee,
go to session 205 and just download the code.

00:00:44.810 --> 00:00:50.359
So once this session is over you'll be able to reflect on
what we learn today, look at the code, play around with it,

00:00:50.359 --> 00:00:55.759
modify it any way you want to and well
basically you'll have a ball with it I guess.

00:00:55.759 --> 00:01:01.689
And well you'll be required to use Safari
4.0 to be able to view this content.

00:01:01.689 --> 00:01:06.219
It's the minimal as far as that will be needed for this.

00:01:06.219 --> 00:01:10.549
I'll be joined on stage a little bit later by my colleague
Eric Carlson, who has really been taking care a lot

00:01:10.549 --> 00:01:17.120
of the engineering in WebKit for media support
and he'll be giving us some great demo's later on.

00:01:17.120 --> 00:01:25.520
And the session is really about learning how to use
these new technologies for practical integration

00:01:25.519 --> 00:01:31.159
because all these key technologies are really going to be
able to give you a great media experience in the browser

00:01:31.159 --> 00:01:33.030
and there are really three things you need to worry about.

00:01:33.030 --> 00:01:38.349
The first thing is going to be the video element
itself and that's what gives you media in your webpage.

00:01:38.349 --> 00:01:42.049
You just drop in a video element, point to your
resource and it will start playing right away.

00:01:42.049 --> 00:01:43.420
That's very easy.

00:01:43.420 --> 00:01:47.650
We'll also have the audio elements in
HTML 5 and we do support that in Safari.

00:01:47.650 --> 00:01:53.020
We won't be talking about it much today, but all of
the technology, attributes, properties and etcetera

00:01:53.019 --> 00:01:55.700
that we'll learn today about video,
directly applies to audio.

00:01:55.700 --> 00:01:58.980
So you'll be learning about two things side by side today.

00:01:58.980 --> 00:02:04.609
And so these video elements integrate
really nicely into other web technologies.

00:02:04.609 --> 00:02:10.020
For example the DOM and as media plays and through
the life cycle as your media playback on your webpage,

00:02:10.020 --> 00:02:12.850
you'll be getting events through the DOM as it plays back

00:02:12.849 --> 00:02:16.379
and we'll be leveraging those in
code today to do a variety of things.

00:02:16.379 --> 00:02:19.199
We'll be tracking the media state in particular.

00:02:19.199 --> 00:02:23.669
And finally the other way around is when you
want your script to interact with the video

00:02:23.669 --> 00:02:26.299
and you'll be using Media APIs again through the DOM.

00:02:26.300 --> 00:02:28.719
So you'll get a pointer to the
video element and you'll be able

00:02:28.719 --> 00:02:33.729
to program it right away using
simple DOM calls in JavaScript.

00:02:33.729 --> 00:02:37.159
OK, before we get into the code which
will really be the bulk of this session,

00:02:37.159 --> 00:02:41.109
I'd like to put the whole video effort,
the video element effort, in context.

00:02:41.110 --> 00:02:45.240
And the context is really that
the web today is all about media.

00:02:45.240 --> 00:02:50.830
It can range from news website, using video for
newscasts from websites like YouTube are all

00:02:50.830 --> 00:02:58.600
about user generated content, Internet radio
websites are providing TV experiences and etcetera.

00:02:58.599 --> 00:03:03.310
And to give you an idea of how much media is on the
web today, you just look, you just have to listen

00:03:03.310 --> 00:03:06.939
to Ryan Junee [assumed spelling] from
YouTube who was recently sharing some metrics

00:03:06.939 --> 00:03:11.329
about how much content is uploaded to YouTube every
day and as of today, which was actually a month ago

00:03:11.330 --> 00:03:16.390
so might be even higher, 20 hours of video
are uploaded to YouTube every minute.

00:03:16.389 --> 00:03:23.689
So I can hear the gears spinning in everyone's heads and
it's actually 3.3 years worth of content every single day.

00:03:23.689 --> 00:03:29.840
So not only there are a lot of people watching stuff, I'm
sure all of you here are watching YouTube pretty often,

00:03:29.840 --> 00:03:33.780
it's also about people creating media and that's
what makes media so important on the web today.

00:03:33.780 --> 00:03:37.319
And so that's why we're doing the video element really.

00:03:37.319 --> 00:03:42.629
It's that media on the web right now is all
about plug-ins, and plug-ins are cumbersome.

00:03:42.629 --> 00:03:46.109
Plug-ins don't integrate well and
plug-ins are inherently limited.

00:03:46.110 --> 00:03:51.220
And if you think about it, the most, the first
type of media that we had on the web was images

00:03:51.219 --> 00:03:53.680
and do you use plug-ins for images, no you don't.

00:03:53.680 --> 00:03:54.900
Because the browser supports that.

00:03:54.900 --> 00:03:56.140
It's pretty obvious.

00:03:56.139 --> 00:03:58.739
And really the video element is all about this.

00:03:58.740 --> 00:04:01.850
It makes it so much easier for you to author video content.

00:04:01.849 --> 00:04:06.989
You just put in a video element, just like you would
an image and that's really all you've got to do.

00:04:06.990 --> 00:04:09.200
And it's also about integration with broad technologies.

00:04:09.199 --> 00:04:11.449
A plug-in is really just a black box.

00:04:11.449 --> 00:04:15.129
Whereas an element inherently will
integrate with anything on the webpage.

00:04:15.129 --> 00:04:19.550
For example, technologies like CSS, cascading
style sheets, so you can style video elements just

00:04:19.550 --> 00:04:21.990
like you would style any other part of your webpage.

00:04:21.990 --> 00:04:26.259
But also the DOM so you can interact and
program your content directly with JavaScript.

00:04:26.259 --> 00:04:31.980
But it's not just about how easy it's going to be
for you developers and authors to create content,

00:04:31.980 --> 00:04:37.980
it's also about the experience that the users will get
and having a high level technology like the video element,

00:04:37.980 --> 00:04:44.250
lets implementers like ourselves, take it and integrate
it in a very optimized fashion in computers and devices.

00:04:44.250 --> 00:04:49.689
Because you need to remember, it's not all about
8 core Mac Pro's, how about iPhone's for example.

00:04:49.689 --> 00:04:51.060
These are a lot more constrained.

00:04:51.060 --> 00:04:57.759
Very efficient at certain task though, so in with the
video element on iPhone, we can take this and implement it

00:04:57.759 --> 00:05:04.399
in a very efficient way on a limited device as
well as a super powerful powerhouse of a computer.

00:05:04.399 --> 00:05:05.539
And it's not just about this.

00:05:05.540 --> 00:05:09.129
It's also, a video element tells the browser here's a video.

00:05:09.129 --> 00:05:12.759
A plug-in just says well here's a piece of
content, something else will take care of,

00:05:12.759 --> 00:05:14.990
another process, you don't know whatever this is.

00:05:14.990 --> 00:05:17.810
It might turn out to be a video but
it might turn out not to be a video.

00:05:17.810 --> 00:05:23.490
But the browser knows that the video element is video and
that means the browser can provide a built in experience

00:05:23.490 --> 00:05:25.439
for video playback that will be really rich.

00:05:25.439 --> 00:05:31.050
So for example on iPhone, when you play back a video
element, you'll get the gorgeous full-screen user interface

00:05:31.050 --> 00:05:35.319
that you would get to play back any
media on any native iPhone application.

00:05:35.319 --> 00:05:38.349
And we'll take a look at this in a minute.

00:05:38.350 --> 00:05:44.250
And really a key point and I think it's a
mantra that whole teams try to keep going after,

00:05:44.250 --> 00:05:46.509
is that media should be a first class citizen on the web.

00:05:46.509 --> 00:05:50.449
Just like images, just like a lot of other things,
media should be the first class citizen on the web

00:05:50.449 --> 00:05:57.219
and I'll probably say that a few more times this session and
it's really what keeps us going with this whole initiative.

00:05:57.220 --> 00:06:00.040
And to do that we need to make it part of Open Standards.

00:06:00.040 --> 00:06:06.080
That's how technology innovation on the web should be done
and HTML 5 is the key driving standard for all of this

00:06:06.079 --> 00:06:10.759
and it's a joint effort between the WHAT Working Group
and all of the implementers out there, including Apple.

00:06:10.759 --> 00:06:13.430
Obviously at the forefront of this technology.

00:06:13.430 --> 00:06:20.400
And so all of this started way back in March of 2007, with
a f irst working draft of HTML 5 and very soon after that

00:06:20.399 --> 00:06:27.859
and later this year, we already had experimental support
in WebKit [inaudible] on both Windows and obviously MacOS X

00:06:27.860 --> 00:06:30.280
with QuickTime support and other browsers did it as well.

00:06:30.279 --> 00:06:33.159
That's the whole point of adding
web technologies to our standards.

00:06:33.160 --> 00:06:36.300
So Firefox and Opera also had experimental versions.

00:06:36.300 --> 00:06:40.759
And WebKit is an open source framework, it's not
just for Mac and Windows and people that work

00:06:40.759 --> 00:06:45.659
on the GTK Portal also made sure they have a
nice media backing for media on that platform.

00:06:45.660 --> 00:06:50.420
And already in January 2008, less than
a year after the first draft came out,

00:06:50.420 --> 00:06:54.040
Safari 3.1 was the first commercially
available shipping browser

00:06:54.040 --> 00:06:58.069
to support video element, both on Mac and on Windows.

00:06:58.069 --> 00:06:59.329
And we kept going.

00:06:59.329 --> 00:07:03.339
Other contributers in the WebKit sphere,
like the key people provided full support

00:07:03.339 --> 00:07:10.089
and earlier this year provided the first [inaudible] preview
of Safari 4.0 which had greatly enhanced video support,

00:07:10.089 --> 00:07:13.049
matching the latest iteration of the specs.

00:07:13.050 --> 00:07:18.270
And very, you've heard obviously about Chrome,
which is a Google browser using WebKit again

00:07:18.269 --> 00:07:21.279
and these guys have made sure to provide
also support for the video element.

00:07:21.279 --> 00:07:22.679
So you can rely on this browser as well.

00:07:22.680 --> 00:07:28.110
So you've seen almost every browser that you
get to which one is the missing element here.

00:07:28.110 --> 00:07:35.970
And that brings us to today and today we have Safari 4.0
and Safari on iPhone OS 3.0, both supporting the latest

00:07:35.970 --> 00:07:41.860
and greatest in video technology with the video element
up to date with the last spec from the WHATWG and W3C.

00:07:41.860 --> 00:07:46.379
And Firefox 3.5 is about to come out
and also support the video element.

00:07:46.379 --> 00:07:52.819
So all of this made it possible for early adopters to start
kicking in and use this technology and this will be the case

00:07:52.819 --> 00:07:55.949
of all of you after the session right,
we'll know all there is to know about video.

00:07:55.949 --> 00:08:03.759
And a website like YouTube, not exactly a lightweight, if
I can say so, actually showed right here a couple weeks ago

00:08:03.759 --> 00:08:08.319
in Google IO, an experimental version
of YouTube using only HTML 5

00:08:08.319 --> 00:08:11.420
and this speaks volumes about how ready this technology is.

00:08:11.420 --> 00:08:15.970
Because their demo was literally the same
experience that you would get with a plug-in.

00:08:15.970 --> 00:08:21.590
They could reimplement exact same features, except they were
only using the video element and some JavaScript DOM APIs

00:08:21.589 --> 00:08:27.539
and they actually even have a few more features and
you should go and check it out, youtube.com/html5

00:08:27.540 --> 00:08:31.330
and I think this really shows that
we're all on the right track.

00:08:31.329 --> 00:08:34.870
Not only from a technology point of view,
but also we already have early adopters

00:08:34.870 --> 00:08:37.429
that make a strong case for video on the web.

00:08:37.429 --> 00:08:43.909
So I think that pretty much sets the scene and I'd like
to show you right now the demo that we'll be building.

00:08:43.909 --> 00:08:52.939
And so I was just talking about YouTube recently and YouTube
gives you a video experience that is very custom to YouTube.

00:08:52.940 --> 00:08:55.720
It, nothing else will look just like it right?

00:08:55.720 --> 00:09:03.620
So what we want to do here is we want to
create our own custom media experience.

00:09:03.620 --> 00:09:07.000
So here if you've been to the CSS Effect session yesterday,

00:09:07.000 --> 00:09:10.059
in the same place at the same time,
you seen a lot about Wilco.

00:09:10.059 --> 00:09:15.539
And Wilco is this amazing band and they have provided
us with a lot of access to build demo's for this WWDC

00:09:15.539 --> 00:09:21.929
and they have a DVD that's came out that's come out
called, Ashes American Flags and we took a song of it

00:09:21.929 --> 00:09:25.789
for the purpose of this demo, you also get in
the sample code so you can play around with it

00:09:25.789 --> 00:09:28.289
and you'll have the whole code to build this.

00:09:28.289 --> 00:09:34.799
What this is is the video playing front and center on
the page, but also providing custom control that look

00:09:34.799 --> 00:09:36.509
and feel like the rest of the Wilco website.

00:09:36.509 --> 00:09:42.330
So you notice the types are the same, using custom font,
blocky, that's really the kind of design that Wilco wants

00:09:42.330 --> 00:09:44.389
and that's the kind of experience we want to provide.

00:09:44.389 --> 00:09:46.840
But we do a lot of pretty advanced things.

00:09:46.840 --> 00:09:52.210
Like for example we can Scrub, we can Seek and Jump
through Times, we can control volume with a slider.

00:09:52.210 --> 00:09:57.629
You notice how smooth and easy interface is with
traditions and nice you know, sophisticated fit and finish.

00:09:57.629 --> 00:10:00.490
So that's what we're going to be building today.

00:10:00.490 --> 00:10:07.379
And although it might look maybe a bit complex, you will
see it's actually fairly simple to implement all of this.

00:10:07.379 --> 00:10:11.230
And so our first step will be about
what I call setting the stage.

00:10:11.230 --> 00:10:15.570
It'll be really just starting with our page
without any video and just putting a video element

00:10:15.570 --> 00:10:17.840
and make video playback happen in our webpage.

00:10:17.840 --> 00:10:19.519
So this is what it's going to look like.

00:10:19.519 --> 00:10:23.179
I'm going to have this video right
in front center of our website.

00:10:23.179 --> 00:10:26.339
We'll hover on it and we have the
default QuickTime Lite controls.

00:10:26.340 --> 00:10:31.540
And we'll be able to Seek, Scrub, Play, Pause
and etcetera and these are going to be build

00:10:31.539 --> 00:10:33.370
in controls provided directly by a platform.

00:10:33.370 --> 00:10:36.720
You will be writing very little code here.

00:10:36.720 --> 00:10:38.830
OK and our webpage is very simple.

00:10:38.830 --> 00:10:45.300
It's just an HTML page linking to a script file and a style
CSS file as well and we'll be going through adding code

00:10:45.299 --> 00:10:47.679
to all three of those files as we go along.

00:10:47.679 --> 00:10:51.139
So let's step into the code right away.

00:10:54.750 --> 00:11:00.139
So here's I'm going to load my first
step and I'm going to bring the HTML file

00:11:00.139 --> 00:11:01.490
in the browser and let's see what it looks like.

00:11:01.490 --> 00:11:04.149
OK, we have basically an empty area for our video.

00:11:04.149 --> 00:11:11.120
And if we look at our code, we just have a DIV with
a class video player and that's where we'll put all

00:11:11.120 --> 00:11:13.889
of the structure we'll need for our video player.

00:11:13.889 --> 00:11:18.370
So right now it doesn't do much, links to the script
and CSS files and I'd like to take a look at these.

00:11:18.370 --> 00:11:22.669
The script file doesn't do much, resize the window
just so it fits nicely for the purpose of this demo.

00:11:22.669 --> 00:11:24.019
Nothing major here.

00:11:24.019 --> 00:11:29.139
And the style just provides the basic styling,
like the backdrops on the background and you know,

00:11:29.139 --> 00:11:33.960
some basic positioning and sizing for the
video which will be width and height 100%

00:11:33.960 --> 00:11:36.259
and you can already see we'll be
able to use styling for the video.

00:11:36.259 --> 00:11:45.309
OK so first thing we've got to do is remove this
and add our little piece of the code to get started.

00:11:45.309 --> 00:11:48.229
Oops, OK, accept.

00:11:48.230 --> 00:11:51.289
Except that doesn't, oh sorry.

00:11:51.289 --> 00:11:56.189
Classic. So we drop in a video element and
it looks exactly like an image element.

00:11:56.190 --> 00:12:00.290
For example, an image points with a
source attribute to the image on the web

00:12:00.289 --> 00:12:03.519
and here we're just using source
attribute to point to our video.

00:12:03.519 --> 00:12:08.649
And if we save that and go straight back to the code
to, sorry to the presentation, we have the first string

00:12:08.649 --> 00:12:13.569
of video sitting there but it doesn't know
how to play and it doesn't do anything at all.

00:12:13.570 --> 00:12:20.470
So what we want to do next is to make it play automatically
and there's a very useful attribute here called autoplay

00:12:20.470 --> 00:12:26.320
and if we just turn it on, we got autoplay going
right away and what autoplay does is as soon

00:12:26.320 --> 00:12:29.350
as the media has enough content
loaded, it will start playing back

00:12:29.350 --> 00:12:33.470
and you don't have to do anything in particular here.

00:12:33.470 --> 00:12:39.519
OK so, we don't have any controls showing so
it would be nice to have that going as well.

00:12:39.519 --> 00:12:43.579
So let's just add a little bit more
code, simple control attributes,

00:12:43.580 --> 00:12:46.350
reload the page and now we have our built in controls.

00:12:46.350 --> 00:12:51.389
And with a very small amount of code, you basically have
your video experience right in your browser, right now.

00:12:51.389 --> 00:12:55.759
OK let's see what it looks like on iPhone.

00:12:55.759 --> 00:13:00.620
Because we got great support on iPhone OS 3.0
as well, that's brand new to that version.

00:13:00.620 --> 00:13:05.450
So let's drop our HTML files right into
the simulator here and let's look at this.

00:13:05.450 --> 00:13:11.680
So it seems that there is a video playback that
might happen here, but it's a default appearance.

00:13:11.679 --> 00:13:14.839
We'd like it to look tailor made for our content.

00:13:14.840 --> 00:13:16.480
For example, we'd like to show a poster frame.

00:13:16.480 --> 00:13:21.170
We'd like to show a frame from the video that would make it
clear to the user what kind of content they'd be looking at.

00:13:21.169 --> 00:13:24.779
So lucky for us there is an attribute just for that.

00:13:24.779 --> 00:13:31.470
The poster attribute lets you point to an image
on the network and that will be displayed instead

00:13:31.470 --> 00:13:33.970
of the video, until playback actually starts.

00:13:33.970 --> 00:13:39.379
So we reload and we have this great frame that we
already prepared beforehand and if we start tap on it,

00:13:39.379 --> 00:13:47.340
we go into the built in, great looking media experience on
iPhone, you can Scrub, you can Play and Pause and etcetera.

00:13:47.340 --> 00:13:53.009
And once again, we did almost no work and when
we tap Done, we can just go back to our webpage.

00:13:53.009 --> 00:14:00.569
[ applause ]

00:14:00.570 --> 00:14:00.820
Thank you.

00:14:00.820 --> 00:14:03.900
So that was really easy and in fact, I
wouldn't be surprised some of you walked

00:14:03.899 --> 00:14:05.669
out right now, that's all you need to know right.

00:14:05.669 --> 00:14:09.839
OK well please stick around because you know,
we'll be doing all the rest of the cool stuff.

00:14:09.840 --> 00:14:14.240
And what we'll learn about today at this stage, is
just about the core attributes from the video element.

00:14:14.240 --> 00:14:16.810
So we know about source obviously, that's really simple.

00:14:16.809 --> 00:14:22.369
We know about controls as well, which lets you put on the
built in controller, autoplay starts playing automatically

00:14:22.370 --> 00:14:27.570
as soon as enough data is loaded without you needing to
do any kind of scripting technique or anything like that

00:14:27.570 --> 00:14:30.050
and also the poster attribute which
lets you point to an image

00:14:30.049 --> 00:14:34.209
that will just be displayed instead
of the video until it starts playing.

00:14:34.210 --> 00:14:37.519
And there are other attributes that we don't talk
to you about that I'd like to mention briefly.

00:14:37.519 --> 00:14:40.909
If you don't have autoplay but you still
want to keep loading the data right away,

00:14:40.909 --> 00:14:45.079
you can use autobuffer to start loading
the data even though you don't play yet

00:14:45.080 --> 00:14:48.639
and loop, which just loops the video indefinitely.

00:14:48.639 --> 00:14:58.199
So there is however the small problem about browsers or
browser without any plural form, that do not provide built

00:14:58.200 --> 00:15:04.180
in support for this great technology and we actually have
a good story and good scenario to handle these cases.

00:15:04.179 --> 00:15:09.479
Any of the code that you would have right now, it could
be plug-in or it could be code that you want to display

00:15:09.480 --> 00:15:12.070
to say well you know, you really [inaudible] browser

00:15:12.070 --> 00:15:16.610
because this is just not a good experience,
not good enough to enjoy this website.

00:15:16.610 --> 00:15:22.370
Well you can take all that content and just put it as a
child of your video element and that means that if a browser

00:15:22.370 --> 00:15:25.340
or the browser that doesn't support video, encounters this,

00:15:25.340 --> 00:15:27.800
it can just fall back to whatever
content is underneath that.

00:15:27.799 --> 00:15:31.370
So in that case we'll just fall back to
using a plug-in to display our movie.

00:15:31.370 --> 00:15:34.840
You could display an error message
of some kind here as well.

00:15:34.840 --> 00:15:39.850
And we won't go into a lot of detail today about
this, we want to focus on things that actually work

00:15:39.850 --> 00:15:43.930
and Vicki Murley our web technologies
evangelist will spend a lot of time talking

00:15:43.929 --> 00:15:49.949
about building compatible website using web technologies
like this one, tomorrow in Russian Hill at 5 pm

00:15:49.950 --> 00:15:52.160
and she'll be focusing a fair bit about video.

00:15:52.159 --> 00:15:54.409
So go to this session if you're really interested about this

00:15:54.409 --> 00:15:58.500
and you'll learn all the various
techniques we have for fallback.

00:16:00.139 --> 00:16:01.659
OK so that was step one.

00:16:01.659 --> 00:16:04.389
Let's get into a little bit more serious coding.

00:16:04.389 --> 00:16:07.830
And step two will be about providing the
basic media controls and starting to learn

00:16:07.830 --> 00:16:10.090
about events and the media APIs that we have.

00:16:10.090 --> 00:16:17.700
And so what we will have here is simply the Play and
Pause buttons, with just a toggle and a Volume button

00:16:17.700 --> 00:16:20.670
and these will control the playback
state and the mute state.

00:16:20.669 --> 00:16:22.429
OK, so that's all we've got to do here.

00:16:22.429 --> 00:16:24.329
Pretty simple.

00:16:24.330 --> 00:16:29.350
So let's step back a little bit of theory here and
you've got to listen up, even though it's theory,

00:16:29.350 --> 00:16:34.680
because it's really the key point that will be driving
the entire presentation, the entire code we'll be building

00:16:34.679 --> 00:16:37.059
and what matters with media is the evenflow.

00:16:37.059 --> 00:16:41.500
The media engine is not something you can only talk
to with APIs but it's also something that are going

00:16:41.500 --> 00:16:44.500
to keep you informed at all times
of what's going on inside of it.

00:16:44.500 --> 00:16:47.779
So in a typical webpage you load it, it has a video.

00:16:47.779 --> 00:16:52.879
As it gets loaded the video, we get a request
to the cloud saying I need that video.

00:16:52.879 --> 00:16:58.320
The video data starts coming into the browser and as
soon as it starts going in, we are already getting events

00:16:58.320 --> 00:17:03.150
and we can get those DOM events straight back into the
JavaScript and these events might be progress events.

00:17:03.149 --> 00:17:07.319
For example, I've got [inaudible] of data, it could be load
events saying I've got everything or it can be an event

00:17:07.319 --> 00:17:09.450
that says I've got enough data and starts playing.

00:17:09.450 --> 00:17:14.160
So if that were the case we could go back into
the page with media APIs and start playback.

00:17:14.160 --> 00:17:18.600
So our video starts playing, but we keep getting data
so we'll be getting more information from the cloud

00:17:18.599 --> 00:17:21.740
and more progress into the JavaScript,
in which case we'll be able

00:17:21.740 --> 00:17:24.390
to provide more information back
into the video, more interaction.

00:17:24.390 --> 00:17:26.070
And that goes on and on.

00:17:26.069 --> 00:17:31.009
So that's the key design power we'll be using
throughout this session is about how you respond

00:17:31.009 --> 00:17:35.269
to events before you want to program
your video and vice versa.

00:17:35.269 --> 00:17:40.819
OK so let's go back into the code for step two which
is all about providing the simple media controls.

00:17:40.819 --> 00:17:45.710
So at this point we'll be focusing only on the desktop.

00:17:45.710 --> 00:17:48.509
Let's load our second step.

00:17:48.509 --> 00:17:54.359
OK and let's see what this looks like in the browser.

00:17:54.359 --> 00:17:57.589
OK so at this stage we've got our video
still and it's not autoplaying anymore.

00:17:57.589 --> 00:18:02.159
We removed all this and we've got buttons
but they don't do anything at this stage.

00:18:02.160 --> 00:18:03.029
They hover and etcetera.

00:18:03.029 --> 00:18:07.859
That's just things you can do easily
enough in CSS, so let's look at our HTML.

00:18:07.859 --> 00:18:09.859
We don't have the autoplayer controls anymore.

00:18:09.859 --> 00:18:14.369
We got rid of those because we want
to provide this experience ourselves.

00:18:14.369 --> 00:18:21.119
Sorry, and we've got some basic controls wrapped
into a DIV, Play button and a Volume button.

00:18:21.119 --> 00:18:26.879
OK and in the CSS we'll notice that we'll drive the labels

00:18:26.880 --> 00:18:31.570
of the Play button basically using the
content property and based on other selectors.

00:18:31.569 --> 00:18:36.799
So whenever the button will be under an element that has a
playing class, or a pause class, it will update it's state.

00:18:36.799 --> 00:18:40.669
So the states will be CSS classes,
they'll be driving the presentation.

00:18:40.670 --> 00:18:45.860
And if you'll go into our HTML just to make sure we actually
have a label saying that we can play because it's paused,

00:18:45.859 --> 00:18:50.619
we have the pause class put onto our video
player and the video player, our container,

00:18:50.619 --> 00:18:55.359
will always have classes applied to it to
update the visuals of the presentation.

00:18:55.359 --> 00:18:58.729
So that's an important point before we
get going and I want to clear that up.

00:18:58.730 --> 00:19:01.829
And in terms of scripts, we've just
got a little bit more already in there.

00:19:01.829 --> 00:19:09.409
We have a video player class, that will be associated with
a container, so it will be pointed to our video player here

00:19:09.410 --> 00:19:11.580
and we'll keep track of that container
and a few other objects.

00:19:11.579 --> 00:19:12.939
For example the video.

00:19:12.940 --> 00:19:18.779
So we get a pointer to this video and that will be the
object in the DOM that will be triggering the events

00:19:18.779 --> 00:19:21.319
and be implementing all the media
APIs that we'll be able to call.

00:19:21.319 --> 00:19:26.439
So all the code I will be writing will really
often be interacting directly with the video.

00:19:26.440 --> 00:19:28.759
Now we got to point it to the Play
button and the Volume button.

00:19:28.759 --> 00:19:34.500
And we also have a handle event method implementing our
video player and we do that because it's a built in feature

00:19:34.500 --> 00:19:39.349
of DOM events, if you implement this function on
an object, whenever you have an event listener

00:19:39.349 --> 00:19:42.459
to use this object's event handler,
this will be the entry point.

00:19:42.460 --> 00:19:49.170
So that means that you can have event handling local,
always scoped to your instance object, very powerful.

00:19:49.170 --> 00:19:54.630
OK and finally we just instantiated that video player
with a reference to that container so we actually get it

00:19:54.630 --> 00:19:56.530
on screen and hook up the controls to our video.

00:19:56.529 --> 00:20:00.579
OK so at this stage we don't do much
and start to put up some action there.

00:20:00.579 --> 00:20:04.569
So the first thing we've got to do obviously is
we want to listen to click events on our buttons.

00:20:04.569 --> 00:20:11.500
OK so Play button and Volume button are now
listening to events for click and using this,

00:20:11.500 --> 00:20:13.170
our instance object, as the event handler.

00:20:13.170 --> 00:20:16.009
This means all the events will go through handle event.

00:20:16.009 --> 00:20:21.400
OK we're set up to switch based on event type,
we'll be dealing with a variety of events here.

00:20:21.400 --> 00:20:24.090
So the first one we're interested in is click.

00:20:24.089 --> 00:20:29.149
OK so we have two different targets, Play
button and the Volume button and based on that

00:20:29.150 --> 00:20:33.340
if we hit the Play button we want toggle play state,
if it's the Volume button we want toggle mute.

00:20:33.339 --> 00:20:36.609
So let's implement those methods, these will be very simple.

00:20:36.609 --> 00:20:41.740
First one is toggle play state and that's the first
time we're going to see a property from the DOM APIs

00:20:41.740 --> 00:20:44.269
for Media Elements and that one is Pause.

00:20:44.269 --> 00:20:48.109
If we look at our video and query if it's
paused, we can know what kind of action to take.

00:20:48.109 --> 00:20:51.659
If it's paused we want to play, if
it wasn't paused we'd want to pause.

00:20:51.660 --> 00:20:54.290
And to play it we simply call the play method on the video,

00:20:54.289 --> 00:20:58.170
if we want to pause we simply call
the pause method on the video.

00:20:58.170 --> 00:21:02.100
OK, Mute, Toggle Mute, is going to be very similar.

00:21:02.099 --> 00:21:08.149
We just look at the muted property and assign it's
exact opposite so that it will actually toggle.

00:21:08.150 --> 00:21:13.769
OK so we should actually have enough information
now to get the basics of our UI working.

00:21:13.769 --> 00:21:14.950
So let's play.

00:21:14.950 --> 00:21:15.990
It plays perfect.

00:21:15.990 --> 00:21:20.779
We can click again, it will pause
and hitting this, will mute.

00:21:20.779 --> 00:21:27.200
OK but as you'll notice, the buttons are not actually
in sync, the UI doesn't change when we click on it.

00:21:27.200 --> 00:21:30.769
OK we haven't actually done any work
for that, so that will make sense.

00:21:30.769 --> 00:21:36.000
So let's go back into our code and what we need to do is
update the classes on the container so that it changes

00:21:36.000 --> 00:21:42.480
from playing to pausing and etcetera so
that the CSS have changed to update the UI.

00:21:42.480 --> 00:21:49.160
OK so traditionally I think what you would do is just
say OK, so when we toggle the play state I'm going

00:21:49.160 --> 00:21:52.029
to update the playing or the pause class in the container.

00:21:52.029 --> 00:21:54.529
Well that would be the wrong approach in that case.

00:21:54.529 --> 00:22:00.940
Because the playback state in the video may change
at any given time from a variety of sources.

00:22:00.940 --> 00:22:05.299
It might not just be the user interaction that you're
providing, it might be for example the network stalls,

00:22:05.299 --> 00:22:07.019
there's not enough data, it stops playing.

00:22:07.019 --> 00:22:08.170
And in that case what do you do?

00:22:08.170 --> 00:22:13.080
You don't' know from that simple code that you
need to refresh the UI to match that state.

00:22:13.079 --> 00:22:16.279
Well that's where we're going to be using those
DOM events because the DOM events are always going

00:22:16.279 --> 00:22:19.099
to be feeding us information about
the state of the media player.

00:22:19.099 --> 00:22:20.339
OK so let's go back.

00:22:20.339 --> 00:22:24.750
We're adding event listeners on
our buttons with click events

00:22:24.750 --> 00:22:26.890
and we can do something extremely similar for the video.

00:22:26.890 --> 00:22:28.360
We're just using DOM APIs.

00:22:28.359 --> 00:22:35.449
OK so our video implements that event listener like any
other element and we'll listen to three events on it.

00:22:35.450 --> 00:22:39.730
Play for whenever we start playback,
Pause whenever we move to pause state

00:22:39.730 --> 00:22:41.180
and Volume change whenever the volume changes.

00:22:41.180 --> 00:22:43.230
In our case, whenever we'll be muting.

00:22:43.230 --> 00:22:47.730
OK so we need to handle those events
to actually update our UI.

00:22:47.730 --> 00:22:54.940
So we'll start by putting a play and pause event handler
and we'll also want an event handler for volume change.

00:22:54.940 --> 00:23:00.390
And you'll notice that all three of them do the exact
same thing which is to call reflect state in CSS,

00:23:00.390 --> 00:23:04.300
all we'll do is make sure we have the
right CSS classes on our container.

00:23:04.299 --> 00:23:08.700
So let's implement that function.

00:23:08.700 --> 00:23:12.970
OK so reflect state in CSS starts with a
video player class which we always want

00:23:12.970 --> 00:23:14.720
to have in our video player container right.

00:23:14.720 --> 00:23:21.900
If it's muted it will add the muted class into our classes
array and if it's paused it will add the pause class

00:23:21.900 --> 00:23:27.290
or otherwise the playing class and once we're done
compiling these classes, we join them with wide spaces

00:23:27.289 --> 00:23:29.599
and assign it to the class name of our container.

00:23:29.599 --> 00:23:35.859
OK so at this state, at this stage we'll
have all our states updated directly

00:23:35.859 --> 00:23:38.669
when the playback state changes for example and here we go.

00:23:38.670 --> 00:23:40.500
Play/Pause, that works.

00:23:40.500 --> 00:23:45.299
And Mute will display our strike through
state that we have already set up in CSS.

00:23:45.299 --> 00:23:51.440
OK so we made these events here, the pause
events will let us update the UI and etcetera,

00:23:51.440 --> 00:23:56.000
you always want to tie the user UI updates to an event.

00:23:56.000 --> 00:23:57.720
That's really key.

00:23:57.720 --> 00:24:02.829
OK so that means that we don't really need our pause
class here because now we are intelligent enough

00:24:02.829 --> 00:24:05.759
to do all of this class management ourselves.

00:24:05.759 --> 00:24:12.289
So what we need to do is instead of that,
have a call to reflect state in CSS right here

00:24:12.289 --> 00:24:14.740
and do it whenever we instantiate our controller.

00:24:14.740 --> 00:24:18.279
OK so we reload, everything looks fine.

00:24:18.279 --> 00:24:19.450
That's great.

00:24:19.450 --> 00:24:22.710
So you'll notice this one feature we
used to have that we don't have anymore.

00:24:22.710 --> 00:24:23.900
We don't autoplay.

00:24:23.900 --> 00:24:27.009
We have to let the user actually click Play,
which is you know, it's a decent experience

00:24:27.009 --> 00:24:28.619
but that's not what we want in our cases.

00:24:28.619 --> 00:24:34.609
So the only thing we're going to do here, well we
just listen to another event, it's all about events.

00:24:34.609 --> 00:24:37.299
So a useful event to listen to is Can't Play Through.

00:24:37.299 --> 00:24:40.849
That means that the engine has enough
data, it thinks it can play through all

00:24:40.849 --> 00:24:43.740
to the end if the network conditions remain stable.

00:24:43.740 --> 00:24:48.130
OK so we'll listen to this, we'll
just add yet another event handler,

00:24:48.130 --> 00:24:51.210
nothing major here and all we'll do is call play on a view.

00:24:51.210 --> 00:24:53.600
OK let's see how that goes.

00:24:53.599 --> 00:24:55.969
Reload our page and it start playing automatically.

00:24:55.970 --> 00:25:02.490
And you'll notice here again, the UI was
already wired up correctly but the call

00:25:02.490 --> 00:25:07.109
to play was not coming from the
click interaction for example.

00:25:07.109 --> 00:25:12.769
And if we had put the UI sync into the actually click
interaction, we would have had to write extra code

00:25:12.769 --> 00:25:15.440
to handle the case where the media
starts playing automatically.

00:25:15.440 --> 00:25:19.990
So relying on events will make sure that
you always reflect the correct state.

00:25:19.990 --> 00:25:21.009
OK so that's done.

00:25:21.009 --> 00:25:22.869
That's all we need to do.

00:25:22.869 --> 00:25:28.139
And we just learned about a slew of new events and there
are lots of media events and we're not going to cover all

00:25:28.140 --> 00:25:32.290
of them so all the ones you see dimmed are events that
we haven't talked about or we might even not talk about.

00:25:32.289 --> 00:25:34.099
And the ones in orange are the ones we already talked about.

00:25:34.099 --> 00:25:37.779
Can't play through, tells you that
you can't basically autoplay.

00:25:37.779 --> 00:25:39.960
Pause and play, playback state has changed.

00:25:39.960 --> 00:25:41.819
And volume change, the volume's changed.

00:25:41.819 --> 00:25:43.200
Simple enough.

00:25:43.200 --> 00:25:49.420
And converse, we have APIs to control the engine, not
just let it tell us about it's state, but also control it.

00:25:49.420 --> 00:25:52.220
So play and pause methods for example
and immediate [inaudible].

00:25:52.220 --> 00:25:56.430
We'll also learn about some key coding techniques here.

00:25:56.430 --> 00:26:01.340
The first one is that you want user action
to update the media engine and that's it.

00:26:01.339 --> 00:26:06.099
When we get a click on Play, we just play and
when we get a click on Pause, we just pause.

00:26:06.099 --> 00:26:08.099
We don't update the user interface.

00:26:08.099 --> 00:26:12.619
We only update the user interface when the
media engine tells us it's ready to do so.

00:26:12.619 --> 00:26:16.349
And that lets us update the UI at any time to be in sync

00:26:16.349 --> 00:26:19.659
with the media playback and to
always ensure that's the case.

00:26:19.660 --> 00:26:23.060
And finally, a really interesting
design pattern is that our code

00:26:23.059 --> 00:26:25.349
in the JavaScript knows very little about the presentation.

00:26:25.349 --> 00:26:32.789
All it knows is about states and the CSS will be providing
the logic and styling to display the right information.

00:26:32.789 --> 00:26:37.339
So the JavaScript doesn't know it needs to display a
Play or Pause label for the Play/Pause toggle button,

00:26:37.339 --> 00:26:45.769
but the CSS does and that lets the script handle interaction
and logic and the style, well handle style and presentation.

00:26:45.769 --> 00:26:49.619
OK so let's go to step three now and crank it up a notch.

00:26:49.619 --> 00:26:51.289
We'd like to provide progress bars.

00:26:51.289 --> 00:26:55.259
That's obviously pretty standard thing you
provide in a media playback experience.

00:26:55.259 --> 00:26:57.970
And what we'll have here is we'll have two bars.

00:26:57.970 --> 00:27:02.079
One that will display how much data has been loaded
and one that will gradually fill up as we play,

00:27:02.079 --> 00:27:07.269
you can see it up on the left, as we play through
the content and we want to have to make sure

00:27:07.269 --> 00:27:11.440
that this stops whenever we pause
and this resumes whenever we play.

00:27:11.440 --> 00:27:17.360
OK so let's get right back into the code.

00:27:19.109 --> 00:27:22.759
So let's load our step three here and
let's look at what it does so far.

00:27:22.759 --> 00:27:23.879
Well there's little new.

00:27:23.880 --> 00:27:27.470
It has the same behavior, autoplay, play
and pause still work, muting as well

00:27:27.470 --> 00:27:30.539
and it has basically a placeholder for our progress bars.

00:27:30.539 --> 00:27:34.710
Our progress bars will always snap to the left
and right edges of the Play and Pause buttons,

00:27:34.710 --> 00:27:38.059
which means that you know, it's kind of cool
with CSS, you can make things very flexible.

00:27:38.059 --> 00:27:43.919
So if we end up having a bigger video later, we changed
the assets, the styling in CSS will be very flexible

00:27:43.920 --> 00:27:45.720
and just update the size of the progress bar.

00:27:45.720 --> 00:27:47.620
OK that'll be very efficient.

00:27:47.619 --> 00:27:52.319
So let me load the right code for this.

00:27:52.319 --> 00:27:53.000
I'm sorry.

00:27:53.000 --> 00:27:58.440
Let's look at some of the changes we have in our HTML here.

00:27:58.440 --> 00:28:01.299
We add a little extra structure to be
able to deal with our progress bar.

00:28:01.299 --> 00:28:05.960
So we got one for the loaded bar and one for the
play bar and also we changed our source and strictly

00:28:05.960 --> 00:28:12.620
for demo purposes, we have a CGI script that's
going to throttle the data rate for our video,

00:28:12.619 --> 00:28:17.389
sorry the network rate for our video so that we can
actually see progress as it's come in as opposed

00:28:17.390 --> 00:28:19.930
to something really fast for local video right.

00:28:19.930 --> 00:28:20.990
So just ignore that.

00:28:20.990 --> 00:28:23.009
It's only for demo purposes.

00:28:23.009 --> 00:28:27.289
And we have CSS already in place for our progress bars

00:28:27.289 --> 00:28:33.859
and one interesting thing is we'll be updating basically
the width for loaded and played dynamically and we made,

00:28:33.859 --> 00:28:40.250
you'll look at this yourself, we made it so that we'll
be able to simple percentages to size these bars.

00:28:40.250 --> 00:28:45.650
So the script will only say well, I'm half
way through the bar will be 50% width.

00:28:45.650 --> 00:28:52.750
That will be very simple and once again we'll let CSS take
care of the complexity of handling sizing and etcetera.

00:28:52.750 --> 00:28:56.390
OK so if we go back into our script,
we've got a few minor modifications.

00:28:56.390 --> 00:28:58.320
We've got a pointer to our loading
bar and we've got a pointer

00:28:58.319 --> 00:29:01.409
to our play bar, well once you update those obviously.

00:29:01.410 --> 00:29:05.490
And something we're going to want to keep track
of at all times is the duration of the video.

00:29:05.490 --> 00:29:11.240
Because whenever we'll be filling those bars, it will always
be a ratio based on the duration of the content right.

00:29:11.240 --> 00:29:17.039
OK so the first thing that we want to do is have our
own instant property duration, set it to 0 and we want

00:29:17.039 --> 00:29:21.069
to cache this property, instead of always querying
the engine whenever we'll have an interaction

00:29:21.069 --> 00:29:25.669
that requires knowing what the duration is, it would be nice
if we could just cache this information whenever it changes

00:29:25.670 --> 00:29:29.070
and well obviously there's an event for that right.

00:29:29.069 --> 00:29:32.929
Duration change will tell you whenever
the video duration changes.

00:29:32.930 --> 00:29:36.940
OK so we need to handle this event just
like we handled a bunch of other events.

00:29:36.940 --> 00:29:41.590
Let's put it right here and we'll call
got duration, which is a new function.

00:29:41.589 --> 00:29:45.720
OK let's put it in right here.

00:29:45.720 --> 00:29:49.880
OK got duration and all we'll do is query
the duration of our video and just cache it.

00:29:49.880 --> 00:29:53.430
That let the engine do what it
has to do and not have to worry

00:29:53.430 --> 00:29:56.410
about providing us the duration each time we ask it for it.

00:29:56.410 --> 00:29:59.570
We can do it with a cached value
which will make it more efficient.

00:29:59.569 --> 00:30:01.309
So this is we don't really do anything yet.

00:30:01.309 --> 00:30:06.609
What we need to do is start tracking progress
and this is again, all done with events right.

00:30:06.609 --> 00:30:12.129
So another event listen for our video, one for progress and
one for load and we need both because load just tells you

00:30:12.130 --> 00:30:14.950
when everything is completely loaded and
you might think well we don't need that,

00:30:14.950 --> 00:30:17.049
we can just infer that from progress events right.

00:30:17.049 --> 00:30:20.639
When progress is 100% or whatever,
that means we've loaded everything.

00:30:20.640 --> 00:30:25.660
But in the case where your video is actually cached or
if it's local, you wouldn't want to get progress events,

00:30:25.660 --> 00:30:28.860
it's instantaneous, so you want to
have both events so you can deal both

00:30:28.859 --> 00:30:32.949
with network conditions and local
conditions, which is our case.

00:30:32.950 --> 00:30:38.470
OK so we need to handle those events now,
so once again just more event handling.

00:30:38.470 --> 00:30:41.059
Progress and load both call the same function.

00:30:41.059 --> 00:30:42.309
Got more data.

00:30:42.309 --> 00:30:44.299
OK it's all about data events.

00:30:44.299 --> 00:30:51.039
So let's handle those right here and whenever we get
more data, we'll look at the buffer property in our video

00:30:51.039 --> 00:30:53.009
and it just tells us how much data is there

00:30:53.009 --> 00:30:57.049
and it has various ranges depending
on which parts of the video is loaded.

00:30:57.049 --> 00:31:02.009
In our case we'll just simplify it and just look at
the first range, 0 and just get the end position.

00:31:02.009 --> 00:31:07.789
That tells us how much data has been loaded and we divide
that by the duration and then we multiply by 100 and add a %

00:31:07.789 --> 00:31:12.519
to it so that we can type it right away in our
CSS so now we can just assign it to our loaded bar

00:31:12.519 --> 00:31:14.369
to width style, make it our presentation.

00:31:14.369 --> 00:31:16.299
And that's fairly easy.

00:31:16.299 --> 00:31:21.359
So let's look at this and look at our content
and we should see a bar, there you go.

00:31:21.359 --> 00:31:24.379
We see a bar filling in right here as data comes in.

00:31:24.380 --> 00:31:30.190
And once again, the code we write in the script is so
simple, we're just updating the percentages by looking

00:31:30.190 --> 00:31:33.580
at a buffered amount of content we got and the duration.

00:31:33.579 --> 00:31:35.089
OK, fairly easy.

00:31:35.089 --> 00:31:40.459
So now we want to do something similar for the played
bar, but instead of looking at the buffered content,

00:31:40.460 --> 00:31:42.840
we want to know where we are in the video.

00:31:42.839 --> 00:31:48.399
And so looking at progress and load events, we want to know
about when time changes and once again there's an event

00:31:48.400 --> 00:31:54.190
for that which is the time of the event and whatever
time of day you'll get a call back through events.

00:31:54.190 --> 00:31:57.910
And what is great about this is you don't have to
provide your own JavaScript time or anything like that.

00:31:57.910 --> 00:32:03.700
The video will have its own finely tuned timer that will
[inaudible] these events when it matters and automatically

00:32:03.700 --> 00:32:07.390
when the video will play or pause, it will
stop triggering these events so you don't need

00:32:07.390 --> 00:32:09.650
to even worry about what the state of the media is.

00:32:09.650 --> 00:32:12.100
OK so let's handle that event.

00:32:12.099 --> 00:32:13.719
Just one more to add to the list.

00:32:13.720 --> 00:32:17.200
It's very repetitive but it's simple enough.

00:32:17.200 --> 00:32:19.740
And we have a time change function
that we'll want to implement now.

00:32:19.740 --> 00:32:25.779
OK and it's very similar to the function that we had
before for got more data, instead this time we'll look

00:32:25.779 --> 00:32:31.069
at the current time of video, a new property,
divided by the duration, make that a percentage again

00:32:31.069 --> 00:32:34.119
and just apply it to the play bar width style.

00:32:34.119 --> 00:32:39.759
OK so it's just the same thing except two different
elements with different data and there you go.

00:32:39.759 --> 00:32:44.680
We've got a darker bar filling up, we got
a loaded bar right here, dark you know,

00:32:44.680 --> 00:32:50.500
darker gray and we got our maroon colored playing
bar right here filling up and we'll pause,

00:32:50.500 --> 00:32:54.470
it will automatically stop filling up, because the
time of the events won't be going through anymore

00:32:54.470 --> 00:32:58.900
and soon as they start going through
again, we'll be updating our playing bar.

00:32:58.900 --> 00:33:01.990
OK, well that's all we need to do for step three.

00:33:01.990 --> 00:33:05.740
We got our progress bars going, both
for progress of loading, thank you.

00:33:05.740 --> 00:33:11.819
And for actually progress in a playback experience.

00:33:11.819 --> 00:33:17.309
OK so I hope you're bearing with me here because
we're going to take it once again a bit further now.

00:33:17.309 --> 00:33:21.329
Oops sorry, it got away, I got ahead of myself.

00:33:21.329 --> 00:33:24.569
Let's step back and actually look at what we learned about.

00:33:24.569 --> 00:33:28.559
We already knew about the can't play through
events and all those events are in white here,

00:33:28.559 --> 00:33:33.519
but we also learned about these new orange events,
duration change, whenever duration changes,

00:33:33.519 --> 00:33:39.059
load and progress for progress events and
completion of progress and time of this for whenever,

00:33:39.059 --> 00:33:40.929
whenever the actually playback time change.

00:33:40.930 --> 00:33:44.029
And we learned about some new API's,
we learned about buffered property

00:33:44.029 --> 00:33:45.990
which tells us how much data has been loaded.

00:33:45.990 --> 00:33:51.430
We learned about content which shows us in seconds how
much data has been played and also the duration property

00:33:51.430 --> 00:33:55.289
which well simple enough, it just tells
us what the duration of the media is.

00:33:55.289 --> 00:33:58.389
And a couple tips that we'll learn about.

00:33:58.390 --> 00:34:03.570
First of all it might make sense if you cached
properties that you'll be requesting often enough

00:34:03.569 --> 00:34:08.469
and that will take a load off the media engine because
the media engine is already quite busy you know,

00:34:08.469 --> 00:34:13.139
just doing the video playback which
is already a lot of work.

00:34:13.139 --> 00:34:18.879
And also make sure you simplify as much as possible,
the kind of changes you need to make through CSS,

00:34:18.880 --> 00:34:23.050
through JavaScript, so that it's as simple
as setting a percentage value for example.

00:34:23.050 --> 00:34:26.400
And let the CSS take care of the
heavy lifting of making sure

00:34:26.400 --> 00:34:31.639
that percentage value will actually work
in your workflow, in your layout, sorry.

00:34:31.639 --> 00:34:39.309
OK so OK I've got a little technical
difficulty with the clicker here.

00:34:39.309 --> 00:34:46.009
OK, do we have a spare clicker maybe.

00:34:46.010 --> 00:34:53.880
[ no speaking ]

00:34:53.880 --> 00:34:54.910
OK we don't.

00:34:54.909 --> 00:34:58.889
All right, so I'll do it from the
podium if that's all right.

00:34:58.889 --> 00:35:03.609
Except that doesn't work either.

00:35:03.610 --> 00:35:09.250
OK, OK so it looks like the clicker has gone back to life.

00:35:09.250 --> 00:35:11.239
All right.

00:35:11.239 --> 00:35:13.329
All right, step four, thank you.

00:35:13.329 --> 00:35:14.989
Step four will be about scrubbing.

00:35:14.989 --> 00:35:17.459
We've got our progress bars and now
we want to make them interactive.

00:35:17.460 --> 00:35:21.250
We want to provide a scrubber that
will be able to drag and click to move.

00:35:21.250 --> 00:35:22.050
So let's look at this.

00:35:22.050 --> 00:35:25.019
We'll have a little block here, I'll
display the elapsed timer underneath

00:35:25.019 --> 00:35:28.259
and we'll just be able to click on that, drag it around.

00:35:28.260 --> 00:35:34.280
We'll be able to change our current time and click
also to specific positions to just seek directly.

00:35:34.280 --> 00:35:38.010
OK again, let's go back straight to the code.

00:35:38.010 --> 00:35:46.390
And let's take a look at what we have to get going.

00:35:47.449 --> 00:35:53.949
OK so before we start even the code, we already
have our play head, our scrubber, already in place.

00:35:53.949 --> 00:35:58.339
The reason I didn't do it is that, doing
code with you is it's simple enough.

00:35:58.340 --> 00:36:02.000
We'll just need to update it's position, just
like we update the width of the play bar,

00:36:02.000 --> 00:36:04.260
we'll just update the position of the scrubber.

00:36:04.260 --> 00:36:08.070
It's simple enough, so I don't think it
was worth going through that in particular.

00:36:08.070 --> 00:36:11.330
OK let's look at the HTML.

00:36:11.329 --> 00:36:13.079
We have our scrubber right here.

00:36:13.079 --> 00:36:19.369
It has a thumb, which is the actual little block
that we will be dragging and it has the time

00:36:19.369 --> 00:36:24.409
which will be displayed underneath to show the elapsed
time and we'll have another time here for the duration,

00:36:24.409 --> 00:36:27.940
that'll be displayed on top of the progress bars.

00:36:27.940 --> 00:36:31.179
OK if we look at our script, we've got
a few more things already in there.

00:36:31.179 --> 00:36:35.989
First of all we've got pointers to our scrubber, to
our lapsed time display and to our duration display

00:36:35.989 --> 00:36:45.309
and also we've got a few, we have a few utility methods
already in there to pretty print times to provide a second,

00:36:45.309 --> 00:36:52.670
sorry a float number in seconds and just get in
nicely human-readable string to display into our UI.

00:36:52.670 --> 00:36:58.010
OK so first thing we're going to want
to do is do something with the duration.

00:36:58.010 --> 00:36:59.800
We already know how to handle the duration.

00:36:59.800 --> 00:37:05.410
We listen to the duration change event and
we already know we can cache it and etcetera.

00:37:05.409 --> 00:37:10.739
So to update the duration display, we just
need to add a little bit more code here.

00:37:10.739 --> 00:37:14.009
So let's just do that.

00:37:14.010 --> 00:37:20.510
Easy. So all we got to do is take our duration, put it into
pretty print time to get a human readable version of it

00:37:20.510 --> 00:37:23.240
and pipe it into our inner text
property of our duration display.

00:37:23.239 --> 00:37:26.849
And if we just reload that now, there you go.

00:37:26.849 --> 00:37:29.559
We already have the duration provided
right away on the display here.

00:37:29.559 --> 00:37:30.279
That was very easy.

00:37:30.280 --> 00:37:32.440
That was just another line of code.

00:37:32.440 --> 00:37:35.240
OK so we want to do something very
similar to the elapsed time.

00:37:35.239 --> 00:37:38.919
We already have the events to deal with
change of time, it's the time of day event

00:37:38.920 --> 00:37:41.720
and the articles are time change function.

00:37:41.719 --> 00:37:48.329
And so just like we updated the duration display,
we want to update oops wrong one, I'm sorry,

00:37:48.329 --> 00:37:54.049
we want to update the elapsed time display
inner text, to be the video current time.

00:37:54.050 --> 00:38:02.660
OK load that and as the scrubber moves along, we've got the
time displaying, the actual lapse time right underneath it.

00:38:02.659 --> 00:38:04.670
OK so that was simple enough.

00:38:04.670 --> 00:38:07.930
And in fact, if we look at this time
change function, we can see that we also,

00:38:07.929 --> 00:38:12.769
that's also where we update the left position
of our scrubber, which was already in the code.

00:38:12.769 --> 00:38:17.340
OK [inaudible] code and we already have
the play head/scrubber already moving along

00:38:17.340 --> 00:38:19.120
and the times being displayed.

00:38:19.119 --> 00:38:21.079
So now we need to take care of the interaction.

00:38:21.079 --> 00:38:24.480
We need to take care of the dragging
interaction to do the scrubbing and what we want

00:38:24.480 --> 00:38:28.260
to do is map the mouse events to the change of current time.

00:38:28.260 --> 00:38:29.560
Basically right?

00:38:29.559 --> 00:38:33.829
OK so once again, I already have a
little bit of built in code in here.

00:38:33.829 --> 00:38:39.920
We already have a pointer to our scrubber and we
already have a mouse down event listener attached to it

00:38:39.920 --> 00:38:43.200
and we already have code to deal with that mouse down event.

00:38:43.199 --> 00:38:45.519
When we get a mouse down, we'll start scrubbing.

00:38:45.519 --> 00:38:50.920
In fact, our drag interaction will be about mouse moves
and mouse stops as well, to keep on going as we scrub.

00:38:50.920 --> 00:38:52.900
Scrubbing is really about moving the mouse.

00:38:52.900 --> 00:38:57.840
So whenever we get a mouse move we'll update the scrub and
we'll, whenever we get a mouse up we'll call Nscrubbing.

00:38:57.840 --> 00:39:02.480
OK. And I already have some skeleton
code for these functions.

00:39:02.480 --> 00:39:08.690
So for example, start scrubbing, we'll add event listeners
for mouse move and mouse up so we can try the move the mouse

00:39:08.690 --> 00:39:12.929
and it already has code to remove those event
listeners whenever the scrubbing is done.

00:39:12.929 --> 00:39:16.309
OK but we need still to fill in these blocks of code here.

00:39:16.309 --> 00:39:23.289
And the first thing we've got to do is
like I said, our UI will always adapt

00:39:23.289 --> 00:39:25.380
to whatever metrics you provide in your CSS.

00:39:25.380 --> 00:39:29.140
So the playing the bar, the progress
bar might actually be any size.

00:39:29.139 --> 00:39:34.059
You really don't want to make an assumption of the size
of this because it might be changed to be anything.

00:39:34.059 --> 00:39:37.670
So I always say you know, make sure your script
doesn't know too much about your presentation.

00:39:37.670 --> 00:39:41.190
In that case, the script is providing a
direction that's directly based on you know,

00:39:41.190 --> 00:39:44.110
spacial values, things that are on the user interface.

00:39:44.110 --> 00:39:49.150
So what we want to do is to make sure that
we always know the size of this progress bar

00:39:49.150 --> 00:39:53.940
and to that we'll have a new utility function called
update progress bar bounds and we'll want to call

00:39:53.940 --> 00:39:56.809
that whenever we need to know what
the metrics of that progress bar is.

00:39:56.809 --> 00:40:02.610
OK and we store those metrics in the progress bar
bounds property on our instance and this will just come

00:40:02.610 --> 00:40:07.500
through a single call in the dump called
getBoundingClientRect(), another new feature in Safari 4

00:40:07.500 --> 00:40:13.199
and calls that in progress bar will tell us the
position in the accordion system, the whole webpage,

00:40:13.199 --> 00:40:18.139
which is the same accordion system we'll be handling event
with, so it's very relevant and also the width and height.

00:40:18.139 --> 00:40:22.599
Width is really going to be what matters
because what we want to be able to say is,

00:40:22.599 --> 00:40:28.069
well the duration of the video is this, the width of our
playing bar is this and based on these two information,

00:40:28.070 --> 00:40:33.450
we can infer how many pixels re-sent in a second
and that's basically what we're going to do now.

00:40:33.449 --> 00:40:39.819
OK so when we start scrubbing, we're going
to want to do a variety of different things.

00:40:39.820 --> 00:40:43.019
First thing we're going to do is we're
going to update the progress bar bounds.

00:40:43.019 --> 00:40:47.759
Every time we have a user interaction, we want to make sure
we have the right info about the bounds of the progress bar.

00:40:47.760 --> 00:40:49.290
OK. So we got that covered.

00:40:49.289 --> 00:40:52.909
And the second thing we're doing
is we're going to store a property

00:40:52.909 --> 00:40:55.769
on our object that entails how many seconds per pixel.

00:40:55.769 --> 00:41:01.099
So that's easy, we just take the duration and divide it by
the available width to drag and that width is the same width

00:41:01.099 --> 00:41:04.079
as the progress bar minus the size of the
scrubber, because we want the scrubber

00:41:04.079 --> 00:41:06.799
to fit nicely to the end of the progress bar.

00:41:06.800 --> 00:41:11.080
OK so you'll notice here we're going to pause
the video as well and why do we do that.

00:41:11.079 --> 00:41:12.409
There are very good reasons.

00:41:12.409 --> 00:41:15.759
The first one is that we'll get a lot better performance.

00:41:15.760 --> 00:41:21.250
The scrubbing and setting current time will be extremely
fast in the media engine if the video is actually paused.

00:41:21.250 --> 00:41:25.139
So that's one good argument but the second
argument is really about user experience.

00:41:25.139 --> 00:41:29.039
Imagine we just let the video play as
soon as we change the current time.

00:41:29.039 --> 00:41:33.750
Well obviously a scrubber already updates
whenever the time changes, so imagine we move,

00:41:33.750 --> 00:41:37.480
stop moving but keep on holding the
scrubber and the media starts playing.

00:41:37.480 --> 00:41:41.650
Well the scrubber will move but usually when
you're dragging something it remains stationary

00:41:41.650 --> 00:41:43.769
under your mouse until you stop dragging.

00:41:43.769 --> 00:41:47.000
That's another reason why we want to pause.

00:41:47.000 --> 00:41:50.800
And so that we can actually restore the
playback state when we're done scrubbing,

00:41:50.800 --> 00:41:55.250
we want to store that in an instance property,
we'll call it was playing when scrubbing began

00:41:55.250 --> 00:41:58.559
and make sure it's just the opposite
or the pause state of our video.

00:41:58.559 --> 00:42:01.639
So then when we're done, we can
resume playback if we were playing.

00:42:01.639 --> 00:42:04.159
Because we're pausing right here.

00:42:04.159 --> 00:42:10.199
OK and finally we need to record a little
bit more state about our current playback UI.

00:42:10.199 --> 00:42:13.460
The first thing we want to track is our
current time when we started our interaction.

00:42:13.460 --> 00:42:17.470
So scrubbing start time is the current
time when you mouse down on the scrubber

00:42:17.469 --> 00:42:22.159
and scrubbing start X is the position
of the event when we start scrubbing.

00:42:22.159 --> 00:42:29.099
So that will, with this information, will be able to infer
the delta of time whenever you interact with the scrubber.

00:42:29.099 --> 00:42:35.929
OK so we got, all we need to do here and now we need to
actually update the current time as we'll be dragging along.

00:42:35.929 --> 00:42:39.839
OK so let's prorate the interaction
for this and it's very simple.

00:42:39.840 --> 00:42:45.120
First of all we'll look at how many pixels we've interacted,
events will tell us about mouse position, pixels.

00:42:45.119 --> 00:42:49.619
So we'll take the current position
of the events only on X and subtract

00:42:49.619 --> 00:42:53.480
from that the start position that we had for the event.

00:42:53.480 --> 00:42:57.210
OK and that will tell us how many
pixels we've dragged since we started.

00:42:57.210 --> 00:43:04.380
OK. And now we'll take the delta N pixel and
multiply it by the number of seconds per pixel

00:43:04.380 --> 00:43:07.380
and that tells us the delta in time, in seconds.

00:43:07.380 --> 00:43:12.820
And all we've got to do now is just add that to the
start time that we had and assign it to current time.

00:43:12.820 --> 00:43:15.750
And that is all we need to actually do the scrubbing.

00:43:15.750 --> 00:43:21.880
And you notice here again, we do not change the position
of the scrubber, this will be done through the event flow.

00:43:21.880 --> 00:43:25.530
Whenever we change the current time here,
we'll get a time of that event and the time

00:43:25.530 --> 00:43:28.680
of the event we'll call the function that
will lay out the progress bar and the scrubber

00:43:28.679 --> 00:43:31.159
and the code is already there and
you don't need to change it.

00:43:31.159 --> 00:43:35.329
So once again, let the events change the UI.

00:43:35.329 --> 00:43:39.210
OK and we just need to do a little
cleaning up when the interaction is over.

00:43:39.210 --> 00:43:44.679
So here all we've got to do is check on our
was playing when scrubbing began property

00:43:44.679 --> 00:43:47.919
and make sure we resume playback if that was true.

00:43:47.920 --> 00:43:53.019
If it's not true, it was already paused and since
we're already paused, we don't need to do anything.

00:43:53.019 --> 00:43:57.989
So let's reload this and fortunately
enough, we'll be able to scrub.

00:43:57.989 --> 00:44:00.019
Look at this.

00:44:00.019 --> 00:44:01.840
And look at the scrubbing performance.

00:44:01.840 --> 00:44:03.850
It's actually amazing.

00:44:03.849 --> 00:44:07.690
You're just scrubbing here and it just is so responsive.

00:44:07.690 --> 00:44:09.929
That's the kind of support you
get from video in our browser.

00:44:09.929 --> 00:44:14.559
OK but we can't click anywhere yet and
that's the next step and it's just going

00:44:14.559 --> 00:44:16.820
to be a lot more of what we've already been doing.

00:44:16.820 --> 00:44:21.410
So the first thing we want to do is we want to
have a click event listener on our progress bar.

00:44:21.409 --> 00:44:26.000
OK so actually it's on the loaded bar, we only
want to scrub to a place we've already loaded,

00:44:26.000 --> 00:44:28.309
click in on there and we'll just need to deal with this.

00:44:28.309 --> 00:44:35.119
So let's go back to our click event handlers
and let's just add another case so that

00:44:35.119 --> 00:44:38.589
when the loaded bar is the current
target, we'll call this very long name

00:44:38.590 --> 00:44:42.010
but very descriptive, setVideoTimeFromClickinProgressBar.

00:44:42.010 --> 00:44:44.390
OK and finally we'll just implement this.

00:44:44.389 --> 00:44:49.750
So we'll put the code close to where we had the
scrubbing code because it really belongs in the same area

00:44:49.750 --> 00:44:56.539
and whenever we'll get that call, we'll update the progress
bar bounds again, do a little math to figure out where

00:44:56.539 --> 00:45:01.610
in the loaded bar we are, the fraction that we are
in the width of the loaded bar based on the X event

00:45:01.610 --> 00:45:03.430
and just assign a current time based on that.

00:45:03.429 --> 00:45:09.619
And we'll also do a little clipping to make sure we don't
assign a time that's less than 0 or more than the duration.

00:45:09.619 --> 00:45:15.980
Cool, and once again, this will just work because we don't
need to update the position of the scrubber ourselves,

00:45:15.980 --> 00:45:19.429
it's already done with the time of day events handler.

00:45:19.429 --> 00:45:24.710
So we've got everything done directly
and it's still blazingly fast.

00:45:24.710 --> 00:45:27.559
OK, so we're done with that step.

00:45:30.400 --> 00:45:31.480
[Applause] Thanks.

00:45:31.480 --> 00:45:36.670
And that's really, that's it, that was the most advanced
thing we'll do today and that still was a fairly easy.

00:45:36.670 --> 00:45:41.769
The hard bit I would say is just dealing with mouse
interaction, but the media integration was dead easy right

00:45:41.769 --> 00:45:46.409
So let's go back, let's focus on some of the
coding techniques that went through here again.

00:45:46.409 --> 00:45:51.299
So first of all, because we want to let
CSS take care of a lot of the presentation,

00:45:51.300 --> 00:45:54.850
you don't want to make your UI metrics
you know, constants, you know, code,

00:45:54.849 --> 00:45:57.009
that just dirty, that's what a bad programmer would do.

00:45:57.010 --> 00:46:02.670
What you want to do is create a UI metrics in real time at
all times and that's where we got the get [inaudible] method

00:46:02.670 --> 00:46:07.570
in the DOM for using this method you can simply get
the actual position and size of any element in the DOM.

00:46:07.570 --> 00:46:10.510
So very easy and a very powerful concept in programming.

00:46:10.510 --> 00:46:16.690
And also you want to pause while you scrub so that you
get a lot better performance first and a better experience

00:46:16.690 --> 00:46:20.200
so that the scrubber always remains
stationary under your mouse.

00:46:20.199 --> 00:46:22.169
And that leads us to the last step.

00:46:22.170 --> 00:46:23.750
The whole logic is done.

00:46:23.750 --> 00:46:25.019
Now it's all about the fit and finish.

00:46:25.019 --> 00:46:30.230
We want our UI to be just amazing to the user
and to do that we'll be using CSS Transitions,

00:46:30.230 --> 00:46:35.480
we provide for less implicit UI animations and
if you were in our session that other people

00:46:35.480 --> 00:46:40.409
on our team yesterday presented, here at
the same time on the CSS Effects yesterday,

00:46:40.409 --> 00:46:42.739
you seen a lot about this and you
already know how cool it is.

00:46:42.739 --> 00:46:47.319
But for those who might not have been here, well
you'll see what we can do with a little bit of CSS.

00:46:47.320 --> 00:46:52.510
And what we'll do is that we'll hover the view
only then will provide the controls and we have

00:46:52.510 --> 00:46:56.890
that with a nice little animation, an
opacity and translation and do the same thing

00:46:56.889 --> 00:46:59.469
for the Volume slider and that really brings our UI to life.

00:46:59.469 --> 00:47:02.779
That's what a rich media experience is about on the web.

00:47:02.780 --> 00:47:05.010
OK let's go right back into the code.

00:47:05.010 --> 00:47:10.540
[ no speaking ]

00:47:10.539 --> 00:47:12.750
And load our fifth step to see where we're at.

00:47:12.750 --> 00:47:16.150
In fact we're exactly the same
stage, save for the volume slider.

00:47:16.150 --> 00:47:18.970
I'm not going through the code for this
because we're doing with the volume slider,

00:47:18.969 --> 00:47:21.279
the exact same thing we're doing with the scrubber here.

00:47:21.280 --> 00:47:24.500
Instead of looking at current time,
we're just looking at the volume change.

00:47:24.500 --> 00:47:29.130
So it's a nice and functional volume slider and
you'll be able to look at it in the sample code.

00:47:29.130 --> 00:47:32.280
OK but we have no transitions whatsoever here.

00:47:32.280 --> 00:47:35.610
OK so that's what we're going to be doing ourselves.

00:47:35.610 --> 00:47:43.530
So first off we want to make sure our controls
are off by default and we don't see those.

00:47:43.530 --> 00:47:49.720
OK so let's look, oops sorry, this is not,
so if we look at our controls right here,

00:47:49.719 --> 00:47:56.049
we want to make sure that by default they are faded
out, so opacity 0 and slightly [inaudible] as well.

00:47:56.050 --> 00:48:00.850
So let's put that in, opacity 0, WebKit
transform translate wide by 100%.

00:48:00.849 --> 00:48:03.369
100% is actually 100% of the height of the controls.

00:48:03.369 --> 00:48:10.089
So since the control is already at the bottom
of the page and they're 100 pixels high predict

00:48:10.090 --> 00:48:14.320
that translation will just lay them
out underneath the video on the Y axis.

00:48:14.320 --> 00:48:21.600
OK what we need is another state for whenever we're actually
hovering over the controls, to actually show the controls.

00:48:21.599 --> 00:48:26.000
So let's add the over pseudo class in our video
player and match controls only in that state

00:48:26.000 --> 00:48:28.849
to make opacity 1 and our translation to be 0.

00:48:28.849 --> 00:48:31.500
OK so let's take a look at this.

00:48:31.500 --> 00:48:35.519
Controls are off by default and
when we're over it it just snapped.

00:48:35.519 --> 00:48:37.409
OK so that's good enough but we don't want them to snap.

00:48:37.409 --> 00:48:40.339
We really wish we could have those
really rich transitions right.

00:48:40.340 --> 00:48:46.079
So traditionally you'd be writing like as much code as
we've written so far just to do this little animation

00:48:46.079 --> 00:48:48.960
in JavaScript and that would be a waste of time

00:48:48.960 --> 00:48:52.849
and also it wouldn't be very performant
on more [inaudible] devices like iPhone.

00:48:52.849 --> 00:48:58.630
Well what we're going to do here is just add two
lines of CSS and with those two lines we're just going

00:48:58.630 --> 00:49:03.070
to say whenever we change the opacity
of WebKit transform that elements,

00:49:03.070 --> 00:49:08.370
we want to transition that change during 0.5 seconds.

00:49:08.369 --> 00:49:14.190
And in fact, if you'll look at our content
now, look at this, we have built in transitions

00:49:14.190 --> 00:49:17.659
without writing any logic simply
declarative CSS to take care of that.

00:49:17.659 --> 00:49:19.429
But we're not-- [Applause] Thanks.

00:49:19.429 --> 00:49:23.509
But our job is not quite done yet.

00:49:23.510 --> 00:49:28.260
If you notice, it actually sticks under
so we really wish we could clip that.

00:49:28.260 --> 00:49:33.390
So if we go back to our video player, we'll just
add a simple overflow rule, set that to event

00:49:33.389 --> 00:49:37.089
and now the controls really just
pop in from within the video.

00:49:37.090 --> 00:49:40.670
OK great. So let's do something similar
for the video, for the volume slider.

00:49:40.670 --> 00:49:44.400
We'll just do more of the same.

00:49:44.400 --> 00:49:51.380
So we have a slider here, we'll set up the default
state to be opacity 0, translate X by 88 pixels,

00:49:51.380 --> 00:49:55.930
set up the duration for the transition and
the properties opacity and WebKit transform

00:49:55.929 --> 00:50:00.089
and just add another state for hovering on the volume.

00:50:00.090 --> 00:50:01.610
OK super simple.

00:50:01.610 --> 00:50:04.260
Set up opacity 1, translate 0, reload.

00:50:04.260 --> 00:50:07.610
OK that was really easy.

00:50:07.610 --> 00:50:11.660
It was just doing just applying the
same technique that we already learned.

00:50:11.659 --> 00:50:13.549
So now I'd like to do something better.

00:50:13.550 --> 00:50:15.960
Our video should be front and center.

00:50:15.960 --> 00:50:19.610
We really want to be able to focus on it
when we just want to be watching the video,

00:50:19.610 --> 00:50:22.720
not actually playing with any other part of the webpage.

00:50:22.719 --> 00:50:27.399
So to do that we actually have an X array [assumed
spelling] element in our tree which is called Dimmer

00:50:27.400 --> 00:50:31.570
and it's basically going to be a layer of black
content, it will be put in between the body

00:50:31.570 --> 00:50:34.830
and the video player to just dim the background of our page.

00:50:34.829 --> 00:50:37.319
And we already have a little bit
of script to take care of that.

00:50:37.320 --> 00:50:43.720
Whenever we'll click on our video, we'll make sure
the dimmer is on and whenever we click on the dimmer,

00:50:43.719 --> 00:50:48.529
oops sorry, whenever we click on the dimmer
we'll make sure the dimmer goes away and we'll do

00:50:48.530 --> 00:50:53.380
that by calling this function callSetNSPlayback
and all that will do is turn on

00:50:53.380 --> 00:50:56.760
or off the enhanced playback class on our body.

00:50:56.760 --> 00:51:00.740
OK so what we need to do in the CSS is provide
a little bit of styling for that dimmer.

00:51:00.739 --> 00:51:06.529
So let's put it in.

00:51:06.530 --> 00:51:09.269
OK so we got our dimmer here.

00:51:09.269 --> 00:51:15.019
By default it will be opacity 0, it'll transition into
opacity and whenever we got the enhanced playback class

00:51:15.019 --> 00:51:19.960
as a parent of the dimmer, we'll just make the opacity 0.9.

00:51:19.960 --> 00:51:25.079
OK let's look at this, click on this and
we get a nice fade of the background.

00:51:25.079 --> 00:51:29.380
So already our video really pops out
and we've got a much better experience.

00:51:29.380 --> 00:51:35.630
But you know, since the beginning I made a big, big
point about making sure we build our CSS so that

00:51:35.630 --> 00:51:39.269
at all times we'll be able to change
the metrics of that container so that

00:51:39.269 --> 00:51:42.809
if we have a bigger video we can just
expand it very easily and etcetera.

00:51:42.809 --> 00:51:46.980
So really we should just be able to change
the width and height of our whole player

00:51:46.980 --> 00:51:50.889
and just have it snap all its controls
and etcetera, as soon as we change it.

00:51:50.889 --> 00:51:53.150
So let's just do that.

00:51:53.150 --> 00:51:58.119
Let's create a new state when we've got
NS playback on for our video player.

00:51:58.119 --> 00:52:03.519
And that state will just change its position in width
and height, to make sure it fills up the screen as much

00:52:03.519 --> 00:52:06.679
as possible to look good and relocate it as well.

00:52:06.679 --> 00:52:08.419
So let's do that.

00:52:08.420 --> 00:52:10.900
Click on it and our video's a lot bigger.

00:52:10.900 --> 00:52:16.000
But it doesn't transition yet and surely applying
a transition here is going to be really heavy duty.

00:52:16.000 --> 00:52:20.929
We're not just doing a little opacity fade here, we're
going to redraw and resize a lot of content in our page,

00:52:20.929 --> 00:52:24.049
all that on top of video, that must be pretty heavy.

00:52:24.050 --> 00:52:27.940
Well I'm pretty sure you know what I'm
getting at here, turns out it's not at all.

00:52:27.940 --> 00:52:32.250
All we have to do is again, set up the
transition width, height and top, a duration,

00:52:32.250 --> 00:52:37.159
one second which is the same duration as it
takes to fade the content and look at this.

00:52:37.159 --> 00:52:39.989
We click on and it just resizes everything.

00:52:39.989 --> 00:52:43.829
Look at the play bar resizing concurrently,
the code doesn't do anything here.

00:52:43.829 --> 00:52:45.009
It's all based in CSS.

00:52:45.010 --> 00:52:51.560
[ applause ]

00:52:51.559 --> 00:52:56.429
And that's really, really, really powerful and once again
the script knows very little about this interaction.

00:52:56.429 --> 00:52:58.289
In fact the script knows barely anything.

00:52:58.289 --> 00:53:03.029
And that's all we have to do today building
the code and that's all the features you'll get

00:53:03.030 --> 00:53:05.660
in sample code you'll be able to
download from the attendee site.

00:53:05.659 --> 00:53:08.509
So let's wrap up on some techniques we used here.

00:53:08.510 --> 00:53:13.660
First of all, we triggered transitions
completely declaratively.

00:53:13.659 --> 00:53:20.079
Again you set states with CSS classes, using JavaScript but
the transition and the heavy lifting is all done in the CSS

00:53:20.079 --> 00:53:25.619
and really, you really need to make sure CSS handles the
complex presentation and let the script handle the logic.

00:53:25.619 --> 00:53:32.829
But we have a little bit more because this is
all we have time to cover in you know an hour.

00:53:32.829 --> 00:53:38.920
But we can do so much more with the powerful features in
Safari 4 and I'd like to bring up Eric Carlson on stage,

00:53:38.920 --> 00:53:44.690
my esteemed colleague and the guy who implemented all
this great technology in WebKit recently and he's going

00:53:44.690 --> 00:53:47.240
to show you how we can take this all to the next level.

00:53:47.239 --> 00:53:53.250
So Eric, if you just move to the demo
machine on the display, we'll be in business.

00:53:53.250 --> 00:54:06.820
>> OK. So what we have here, we took the, we took
the DVD that Wilco has just shipped and thought

00:54:06.820 --> 00:54:13.330
about what it would take to make a
full DVD-like experience in the web.

00:54:13.329 --> 00:54:16.909
Since we have all this, since we
have all this wonderful content.

00:54:16.909 --> 00:54:30.539
So we encoded, we grabbed all the audio and video
from the DVD and encoded it as an MPEG4 file.

00:54:30.539 --> 00:54:36.590
We did an SD encode to H.264 AAC.

00:54:36.590 --> 00:54:40.570
We ended up with a movie that's
just almost an hour and a half.

00:54:40.570 --> 00:54:42.760
You can see from here.

00:54:42.760 --> 00:54:56.820
About 700 MB and because we, because Antoine wrote the demo
to adapt to the media, there's absolutely nothing that has

00:54:56.820 --> 00:54:59.920
to change here to deal with this large file.

00:54:59.920 --> 00:55:06.150
So we have a much bigger file, it's almost an
hour and a half long, a very high data rate,

00:55:06.150 --> 00:55:17.760
because we're using QuickTime for media playback and we're
playing it on Snow Leopard here, we have QuickTime X,

00:55:17.760 --> 00:55:27.060
we have the enhancement to QTKit
and the experience is, is wonderful.

00:55:27.059 --> 00:55:39.090
We've got quick seeking, we've got good sync and we
didn't have to do anything at all to our, to our code.

00:55:39.090 --> 00:55:54.059
Now on a DVD, you often have extra information and in order
for somebody using the DVD to get at the extra information,

00:55:54.059 --> 00:56:00.960
you usually have to leave the video and go
to a menu and we didn't want to do that.

00:56:00.960 --> 00:56:07.519
We don't want to force the user to go out of context.

00:56:07.519 --> 00:56:15.400
So instead, we just put it on the backside of the video.

00:56:17.440 --> 00:56:23.079
And using a little bit of CSS, we won't actually go in,

00:56:26.670 --> 00:56:31.119
we won't actually go into the code
here but the CSS is dead simple.

00:56:31.119 --> 00:56:36.739
We're just applying rotation on it.

00:56:36.739 --> 00:56:42.989
We have the DIV with all of this
information on the backside of the video

00:56:42.989 --> 00:56:50.759
and because the video element is just
another element, you can see that the opacity

00:56:50.760 --> 00:56:54.790
on this backside lets the video
play through and if you watch,

00:56:54.789 --> 00:57:01.420
what you're seeing is the video is actually being
rotated and playing through backwards and it's not

00:57:01.420 --> 00:57:07.010
because we're asking QuickTime to flip
the video around and play it backwards,

00:57:07.010 --> 00:57:12.500
it's because the video element is just
another element and the and WebKit

00:57:12.500 --> 00:57:17.639
which is orchestrating the playback,
is able to do the right thing.

00:57:17.639 --> 00:57:20.799
Because it knows how to deal with video.

00:57:20.800 --> 00:57:31.539
So we have here a list of all of the songs on
the album and when the mouse hovers over a title,

00:57:31.539 --> 00:57:40.110
we're changing the location of the DIV on the
right with all of the meta data and images

00:57:40.110 --> 00:57:46.610
and we've got a simple CSS transition on
it and of course it does the right thing.

00:57:46.610 --> 00:57:55.890
Click on a title, we instantly seek to it and there we are.

00:57:55.889 --> 00:57:59.199
We play it back.

00:57:59.199 --> 00:58:03.929
Reduce the size, look at the back again, everything scales.

00:58:03.929 --> 00:58:07.869
Again, it's the power of CSS.

00:58:07.869 --> 00:58:21.869
But, so all of the, all of the meta data that you see
there is actually just being, is in JSON structure

00:58:21.869 --> 00:58:26.230
and of course we can have lots of extra information too.

00:58:26.230 --> 00:58:34.449
So I'm going to use the keyboard shortcut here and
you'll see that we also are able to put the album

00:58:34.449 --> 00:58:45.239
and song information in, in line with the video playback
and as I seek from song to song, with the keyboard,

00:58:45.239 --> 00:58:52.099
we're easily able to show them over top of the
video and then fade it out, again using CSS

00:58:52.099 --> 00:58:59.019
and because we're using CSS for the
display here, it's really easy to keep it

00:58:59.019 --> 00:59:06.960
in context and give a really good user experience.

00:59:06.960 --> 00:59:12.190
So we thought why not include extra information.

00:59:12.190 --> 00:59:18.389
So we have also, we also have lyrics for some of the songs.

00:59:18.389 --> 00:59:26.299
I'm going to use a keyboard shortcut here to seek to
a section where there's some interesting information

00:59:26.300 --> 00:59:37.850
and because we're already responding in the code to time
update events, it's simple to keep the lyrics in sync

00:59:37.849 --> 00:59:45.009
with the video, because we're using CSS for
the display there's absolutely nothing to it.

00:59:45.010 --> 00:59:52.830
[ applause ]

00:59:52.829 --> 00:59:56.009
We see them from the back, we see them from the front.

00:59:56.010 --> 01:00:01.540
[ no speaking ]

01:00:01.539 --> 01:00:12.000
So what we've done here is we've taken the code that
we built up in the first part of the session which,

01:00:12.000 --> 01:00:23.659
if you download the code later and look, you'll see that
with comments and everything, there were about 300 lines

01:00:23.659 --> 01:00:32.259
of JavaScript, which isn't much and
by adding less than another 300 lines,

01:00:32.260 --> 01:00:44.630
we're able to add all this extra sophistication and really
create a very rich, DVD-like experience within the context

01:00:44.630 --> 01:00:53.160
of the page and really adding to the,
adding to the DVD experience as well.

01:00:54.500 --> 01:00:55.460
Thank you.

01:00:55.460 --> 01:01:03.000
>> Yeah, I think basically what it boils down to
is that mixing some simple things was really simple

01:01:03.000 --> 01:01:07.570
and making these really advanced things were actually
not that much extra work and you can really take it

01:01:07.570 --> 01:01:09.660
to the next level with all the technology you provide us.

01:01:09.659 --> 01:01:13.139
So I'm really curious to see what
you're going to be doing with this.

01:01:13.139 --> 01:01:15.619
And I'd like to wrap up our session right now.

01:01:15.619 --> 01:01:20.579
So really I think what we discussed
is all about how simple and

01:01:20.579 --> 01:01:24.349
yet powerful the integration of the
video element is in your webpage.

01:01:24.349 --> 01:01:26.299
It's just another HTML element.

01:01:26.300 --> 01:01:29.710
You just have an image with an IMG element,
you just have a video with a video element.

01:01:29.710 --> 01:01:36.650
It's just that simple and without, with barely like
typing another 16 characters you've got enough information

01:01:36.650 --> 01:01:39.160
to tell the engines to provide you
with a great built in experience

01:01:39.159 --> 01:01:43.250
with a nice controls, both on iPhone and on the desktop.

01:01:43.250 --> 01:01:46.250
And you can do way, you can do way much more.

01:01:46.250 --> 01:01:51.059
You can style and even use very
sophisticated styling like transitions

01:01:51.059 --> 01:01:53.519
and transform and apply that to your video with CSS.

01:01:53.519 --> 01:01:55.949
Because once again, it's just another HTML element.

01:01:55.949 --> 01:01:58.849
And likewise the DOM just works with video.

01:01:58.849 --> 01:02:04.759
You'll get events whenever the video playback stops
or resumes or the timing changes and etcetera.

01:02:04.760 --> 01:02:10.880
And you'll be using, you have a variety of rich
API's to control the video through user interaction.

01:02:10.880 --> 01:02:14.880
But more importantly, all this is ready to employ today.

01:02:14.880 --> 01:02:17.710
We have fallback mechanism and we've got the technology.

01:02:17.710 --> 01:02:24.639
And it's important in both iPhone and desktop, in fact if
you think about it, on iPhone OS 3.0, this video is the only

01:02:24.639 --> 01:02:27.539
and best way to provide video experience in a browser.

01:02:27.539 --> 01:02:30.449
So that makes it very compelling to use video right away.

01:02:30.449 --> 01:02:37.329
Because what do you want to do really is to give your video
content available to anyone, both on iPhone and on desktop.

01:02:37.329 --> 01:02:42.630
And also remember that we have support
and fallback for non WebKit browsers.

01:02:42.630 --> 01:02:46.150
Well more importantly it's not just about WebKit browser,

01:02:46.150 --> 01:02:53.950
it's really about you know, the
less capable legacy browsers, right.

01:02:53.949 --> 01:02:55.639
And well that's all we got today.

01:02:55.639 --> 01:02:58.960
And I'd like you to contact Vicki Murley, vicki@Apple.com.

01:02:58.960 --> 01:03:00.929
She's our web technologies evangelist.

01:03:00.929 --> 01:03:05.349
She knows all about this and she'll be able to direct
you and help you with whatever questions you have.

01:03:05.349 --> 01:03:09.489
We have great documentation so obviously there's
the HTML 5 spec, you can go and look that up.

01:03:09.489 --> 01:03:11.889
We're in sync, we will always continue to be in sync.

01:03:11.889 --> 01:03:14.879
We always support the latest standards in Safari and WebKit.

01:03:14.880 --> 01:03:18.210
But we also have great documentation
on developer [inaudible] Safari,

01:03:18.210 --> 01:03:23.809
we have the visual effects guide focusing more on CSS
and the nice tuning effects that we had in our session.

01:03:23.809 --> 01:03:27.599
We also developed expansions for
the video element for example.

01:03:27.599 --> 01:03:28.719
So go look at this.