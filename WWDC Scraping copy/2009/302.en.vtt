WEBVTT

00:00:12.550 --> 00:00:16.859
>> My name is Assana Fard, and welcome to WWDC 2009.

00:00:16.859 --> 00:00:20.439
We will be talking about all things graphics on the phone.

00:00:20.440 --> 00:00:25.560
So we're going to start our session by going over
the technologies available to you a little bit,

00:00:25.559 --> 00:00:30.089
and then we'll spend most of the time getting
into more detail about each and one of them.

00:00:30.089 --> 00:00:34.530
And towards the end we'll talk a little bit
about comparing and contrasting the features,

00:00:34.530 --> 00:00:39.270
the performance, just what's best for your application.

00:00:39.270 --> 00:00:41.780
So first the UI Kit.

00:00:41.780 --> 00:00:45.960
UI Kit is what you use to design and
implement your applications user interface.

00:00:45.960 --> 00:00:51.700
It's your bag of goodies controlled,
pre-built widgets that you're going to use.

00:00:51.700 --> 00:00:56.060
Quartz 2D is the drawing engine of iPhone graphics.

00:00:56.060 --> 00:01:00.450
It's really the workhorse of the drawing engine.

00:01:00.450 --> 00:01:03.770
Core Animation is your 2D compositing system.

00:01:03.770 --> 00:01:07.490
Everything that you see on the display
on iPhones goes through Core Animation.

00:01:07.489 --> 00:01:10.339
So it's really just the soul of the iPhone.

00:01:10.340 --> 00:01:18.400
And then we'll talk a little bit about OpenGL ES, which
is the API behind all of the iPhone games currently.

00:01:18.400 --> 00:01:23.219
So how do these all fit in before we jump
into actually talking about each of them?

00:01:23.219 --> 00:01:25.469
So the typical application has app controls.

00:01:25.469 --> 00:01:31.319
And these are your buttons, your widgets, the
classes that help you interact with your user,

00:01:31.319 --> 00:01:34.059
your accelererometer, the sliders, and everything.

00:01:34.060 --> 00:01:37.189
So that's what you use your UI Kit for.

00:01:37.189 --> 00:01:41.349
Then you have some 2D graphics, and
that's going to be done using Quartz 2D.

00:01:41.349 --> 00:01:46.419
And of course, UI Kit gets its content from Quartz
2D, so those two are also related with each.

00:01:46.420 --> 00:01:50.799
And then finally Core Animation,
which is your composite engine.

00:01:50.799 --> 00:01:55.099
Again, everything that gets drawn on
the phone is using Core Animation.

00:01:55.099 --> 00:01:57.599
And Core Animation is what talks to the display hard drive.

00:01:57.599 --> 00:02:04.419
And then on the 3D side we hav=e OpenGL ES, which talks to
the graphics hardware, and it connects to Core Animation

00:02:04.420 --> 00:02:09.009
through a bridge layer called EQAL, and
we'll talk about this a little bit later.

00:02:09.009 --> 00:02:14.449
And in turn Core Animation uses OpenGL ES for its rendering.

00:02:14.449 --> 00:02:17.209
So, UI Kit is the heart of CocoaTouch.

00:02:17.210 --> 00:02:23.740
It's the thing that gives you these
prebuilt widgets with standard behavior.

00:02:23.740 --> 00:02:30.409
It's what you use to communicate to your
user, with your applications interface.

00:02:30.409 --> 00:02:35.960
It gives you beautiful prebuilt
widgets with standard behavior,

00:02:35.960 --> 00:02:38.909
and these are behaviors that that
user can actually understand.

00:02:38.909 --> 00:02:41.120
Your iTune was designed with a phone in mind.

00:02:41.120 --> 00:02:46.039
So it, it lends itself to being, to a handheld device.

00:02:46.039 --> 00:02:53.479
Its transitions, its stage, they're all there
to convey this state change to your user.

00:02:53.479 --> 00:03:01.769
Let's talk about just a one more thing that, it's also what
gives you events; event handling comes all from UI Kits.

00:03:01.770 --> 00:03:03.640
And we're going to, we're interested in the view.

00:03:03.639 --> 00:03:04.619
Now what is a view?

00:03:04.620 --> 00:03:11.310
A view is nothing but the rectangular region on your
display where you get events from and you put your data in.

00:03:11.310 --> 00:03:17.090
Again, UI Kit gives you beautiful standard
widgets, gives you buttons, and sliders,

00:03:17.090 --> 00:03:19.819
and pictures, and textfields, everything.

00:03:19.819 --> 00:03:22.900
And they all come with this predefined behavior.

00:03:22.900 --> 00:03:26.460
It give your application this consistency,
a professional look.

00:03:26.460 --> 00:03:29.340
And again, a behavior that the user can relate to.

00:03:29.340 --> 00:03:32.490
When you're switching views you
don't want your user to be surprised

00:03:32.490 --> 00:03:36.070
by what happens, you want that nice slide to animation.

00:03:36.069 --> 00:03:37.539
And they're layer-backed.

00:03:37.539 --> 00:03:38.359
And this is important.

00:03:38.360 --> 00:03:39.990
And I'll touch on that on the next slide.

00:03:39.990 --> 00:03:44.500
What it means is that there is a Core
Animation layer for every UI view.

00:03:44.500 --> 00:03:46.349
And again, we'll talk about this in a little bit.

00:03:46.349 --> 00:03:52.269
They're easy to use, you can either use them in interface
field, or just drag and drop them, or you can click to them.

00:03:52.270 --> 00:03:56.550
They're available in terms of programmatic coding.

00:03:56.550 --> 00:03:59.090
So let's talk a little bit about the views.

00:03:59.090 --> 00:04:04.689
The views are what we really want to
work with in terms of UI interface.

00:04:04.689 --> 00:04:08.370
Again, they're this rectangular region on
the display where you put your data in.

00:04:08.370 --> 00:04:16.269
And UI Kit provides a high level interface to
very common and most used drawing operations.

00:04:16.269 --> 00:04:21.719
Like setting your background colors, setting
your button colors, writing text, getting images.

00:04:21.720 --> 00:04:27.150
And this is what you use to customize
these views to your own application.

00:04:27.149 --> 00:04:29.029
As I mentioned they are layer-backed.

00:04:29.029 --> 00:04:34.699
And what it is, is that, again, there's a
Core Animation layer backing up every UI view.

00:04:34.699 --> 00:04:37.459
And with Core Animation comes animation, which is great.

00:04:37.459 --> 00:04:41.359
So these UI widgets have properties that can be animated.

00:04:41.360 --> 00:04:47.740
And best of all these animations are all built in, so
your swishes, your fades, your flips and transitions,

00:04:47.740 --> 00:04:51.269
they all come in prefilled with your widgets that you use.

00:04:51.269 --> 00:04:54.719
And again, you don't have to do
any work, which is wonderful.

00:04:54.720 --> 00:05:02.950
And if you don't like any of these, obviously you can
subclass your view, customize it, draw your own artwork.

00:05:02.949 --> 00:05:08.479
So UI Kit is, as most of you might know,
it's a huge library of a lot of classes.

00:05:08.480 --> 00:05:11.689
I'm going to pull out a few that
are interesting for graphics.

00:05:11.689 --> 00:05:15.389
UI Image. UI Image gives you all
of your image drawing classes.

00:05:15.389 --> 00:05:21.740
If you want to load an image into interface, draw
into different view, different color, create a new image.

00:05:21.740 --> 00:05:23.590
This is what you use.

00:05:23.589 --> 00:05:30.709
UI Color gives you device color across your
app and across your view, which is nice.

00:05:30.709 --> 00:05:35.379
Font and Labels, this is what you want
to use to get text onto your interface.

00:05:35.379 --> 00:05:41.610
And UI Screen gives you some information about your
display, [inaudible] In addition to these classes,

00:05:41.610 --> 00:05:45.530
there are a bunch of utility functions
that are handy for graphics.

00:05:45.529 --> 00:05:52.889
There's some that help you fill in a rectangle and just
do outlines and general simple graphics operations.

00:05:52.889 --> 00:05:57.879
There's some utility functions that
allow you to create a single JPEG file

00:05:57.879 --> 00:06:00.990
out of your view, which is really nice and handy.

00:06:00.990 --> 00:06:06.019
And the last one is important for us; you can
retrieve your graphics context out of your view.

00:06:06.019 --> 00:06:12.859
And this is going to be what you're going to need if
you're customizing your viewer for [inaudible] So going

00:06:12.860 --> 00:06:15.650
to take a look at the little demo that we have.

00:06:15.649 --> 00:06:23.129
It's not a very fancy demo, but it's a catalog
of everything that UI Kit provides for you.

00:06:23.129 --> 00:06:27.029
So this little application, it shows, you
know, you have your buttons, of course.

00:06:27.029 --> 00:06:31.209
And again, with all of these widgets
the behavior comes built in.

00:06:31.209 --> 00:06:34.709
So you have a list of controls if you want to
look and see what you want to use, you know,

00:06:34.709 --> 00:06:38.829
customize sliders, standard sliders, so on.

00:06:38.829 --> 00:06:43.120
I want to go show you a couple; a
search bar is one of my favorites.

00:06:43.120 --> 00:06:47.689
So you get this search bar, with it, of
course, comes the keyboard access, great.

00:06:47.689 --> 00:06:54.589
You can type in your name, well,
and it comes with a spell checker.

00:06:54.589 --> 00:06:59.659
And again, text entering everything is
prebuilt in and you cancel, and so on.

00:06:59.660 --> 00:07:04.439
So again a lot of behavior that you don't
really have to deal with that's prebuilt in.

00:07:04.439 --> 00:07:05.790
Let's see, what else do we have?

00:07:05.790 --> 00:07:08.400
Oh, transitions.

00:07:08.399 --> 00:07:16.069
flipping boom right in your pocket, you don't have
to do anything, and this is fading between images.

00:07:16.069 --> 00:07:20.300
And again, this is just built right out of your
UI Kit; you don't have to do anything with them.

00:07:20.300 --> 00:07:22.500
Let's get images, oh, I like this one.

00:07:22.500 --> 00:07:26.040
This is just taking an image and
plopping it into the UIView.

00:07:26.040 --> 00:07:31.879
And effectively it's creating a
little slideshow right out of the box.

00:07:31.879 --> 00:07:36.019
So again, this, this is available a sample code.

00:07:36.019 --> 00:07:40.789
You can take home, you can download this
from the developer website and play with it.

00:07:40.790 --> 00:07:44.270
And again, it's a nice catalogue of
what's available to you through UI Kit.

00:07:44.269 --> 00:07:50.149
If you want to read more, the iPhone Application
Programming Guide is a great resource.

00:07:50.149 --> 00:07:53.419
There's also the iPhone Human Interface
Guideline, which is not so much in terms

00:07:53.420 --> 00:07:55.680
of programming, but in terms of application design.

00:07:55.680 --> 00:07:57.100
It gives you a lot of guidelines.

00:07:57.100 --> 00:08:00.540
And, of course, iPhone OS Technology review.

00:08:00.540 --> 00:08:02.660
Quartz 2D.

00:08:02.660 --> 00:08:07.400
Quartz 2D is the heart of the drawing engine in iPhone OS..

00:08:07.399 --> 00:08:09.649
It's also the same as Mac, but we're talking about iPhone.

00:08:09.649 --> 00:08:13.909
It's the thing that draws everything, gets
its contents from different technologies.

00:08:13.910 --> 00:08:16.500
Now let's look at this image, this images on the screen.

00:08:16.500 --> 00:08:20.500
Everything here was drawing using Quartz 2D.

00:08:20.500 --> 00:08:29.759
The image in the top left was a PDF file, it has a nice
soft border, it has that translucent guitar blended onto it.

00:08:29.759 --> 00:08:34.279
The next two are patterns, that I think that's
a soccer ball or something, or the kidney.

00:08:34.279 --> 00:08:37.579
They're used using patterns, again, really easy to use.

00:08:37.580 --> 00:08:40.400
The little seismic graph, there is purely path.

00:08:40.399 --> 00:08:44.799
It's a really intricate path, but
it's again, just done using paths.

00:08:44.799 --> 00:08:49.219
It's of course text, and all this not of English,
it's we have some Korean, or whatever it is.

00:08:49.220 --> 00:08:52.269
And my favorite in this take, the grape.

00:08:52.269 --> 00:08:52.939
I love it.

00:08:52.940 --> 00:08:55.200
It's a bunch of circles with shadings on it.

00:08:55.200 --> 00:09:02.500
And again, you can get great looking graphics
just by using this components in Quartz 2D.

00:09:02.500 --> 00:09:03.620
So let's take a look at it again.

00:09:03.620 --> 00:09:05.210
It's a sophisticated drawing engine.

00:09:05.210 --> 00:09:12.240
Its little vector-based geometry, so it has primitives
that it builds on and creates more intricate shapes.

00:09:12.240 --> 00:09:17.539
In addition to graphics it also supports text and
images and PDF's, and a whole bunch of other stuff.

00:09:17.539 --> 00:09:19.969
And we'll go through this a little bit more.

00:09:19.970 --> 00:09:25.300
It's used by a higher-level frameworks,
like UI Kit gets its content from Quartz 2D.

00:09:25.299 --> 00:09:30.219
And of course, when you customize your view
you will be using Quartz 2D to do the drawings.

00:09:30.220 --> 00:09:35.399
And historically we refer to that Quartz
Graphics, and you might hear me mention CG

00:09:35.399 --> 00:09:38.409
or Core Graphics, all the same thing basically.

00:09:38.409 --> 00:09:39.399
Let's take a look.

00:09:39.399 --> 00:09:42.459
So basic primitives, what are the
basic primitives, you have?

00:09:42.460 --> 00:09:44.750
Point, of course, you can't get more basic than that.

00:09:44.750 --> 00:09:46.789
And you have lines, and arcs, and curves.

00:09:46.789 --> 00:09:51.019
And you know, these are all very easy,
they're building blocks up to Quartz 2D.

00:09:51.019 --> 00:09:56.970
You could, you kind of build on top of, you
combine them to create really nice images.

00:09:56.970 --> 00:10:01.860
You have rectangles, and circles, there are
variances in a circle, like this eclipse.

00:10:01.860 --> 00:10:07.800
You can stroke them, fill them again, a
lot of flexibility in what you can do.

00:10:07.799 --> 00:10:15.579
It's a Quartz Path, and again it takes a path and you
add building blocks to this path, and it allows you to,

00:10:15.580 --> 00:10:22.290
you know, you can add to your lines and basic
primitives lines and rectangles and arcs to the path.

00:10:22.289 --> 00:10:25.549
And you can close your path, so
now you can fill it if you want.

00:10:25.549 --> 00:10:34.229
And you can stoke the path that it's closed or not,
and changes color, and again a lot of flexibility.

00:10:34.230 --> 00:10:36.289
It supports a gradient.

00:10:36.289 --> 00:10:38.879
Now there are two kinds of gradients.

00:10:38.879 --> 00:10:46.220
There is the linear gradient, like the blue box on the
left, there, that goes just from light blue to dark blue.

00:10:46.220 --> 00:10:51.690
And it's a really nice gradient for, I
don't know, some of your backgrounds,

00:10:51.690 --> 00:10:54.490
or you see it all over the phone,
people use this nice gradient.

00:10:54.490 --> 00:11:00.620
The second type, type is the radial gradient,
which is what you see in the pink ball.

00:11:00.620 --> 00:11:06.240
And this is a good example of taking just a boring
little circle and adding this gradient on it.

00:11:06.240 --> 00:11:10.350
And now it looks like a really cool looking
sphere, but it's really just a circle

00:11:10.350 --> 00:11:13.310
with a radial gradient on it, that goes from pink to white.

00:11:13.309 --> 00:11:15.839
And finally the last image is interesting.

00:11:15.840 --> 00:11:18.180
It's got a 3 point gradient, which by itself is nice.

00:11:18.179 --> 00:11:22.219
It goes pink to green to orange, but what's
important there is that it has been drawn

00:11:22.220 --> 00:11:24.509
through a mask, and that's how you get the letter B.

00:11:24.509 --> 00:11:29.629
So again, you take your building blocks, you
combine them to get really sophisticated images,

00:11:29.629 --> 00:11:32.360
with just really no codes, it's a very little code.

00:11:32.360 --> 00:11:33.470
And simple coding.

00:11:33.470 --> 00:11:35.870
We support images.

00:11:35.870 --> 00:11:39.929
There just 6 to 8 image types that we support on the phone.

00:11:39.929 --> 00:11:43.049
Our preferred image type is a paint file.

00:11:43.049 --> 00:11:47.019
So if you possibly can convert your
data to paint, that would be great.

00:11:47.019 --> 00:11:52.449
If not, of course we support the rest of the image sites.

00:11:52.450 --> 00:11:56.360
PDF supports, so the phone has
a really nice rich PDF support.

00:11:56.360 --> 00:12:01.180
You can load in single page PDFs, multi
page PDFs, you can jump around them,

00:12:01.179 --> 00:12:04.339
draw them into views, create new ones out of them.

00:12:04.340 --> 00:12:10.370
Just again, a nice set of PDF support functionality.

00:12:10.370 --> 00:12:14.830
It's important to remember that their drawing
order matters if you're as a painter model.

00:12:14.830 --> 00:12:19.030
So, which means what comes next
modifies what was there before.

00:12:19.029 --> 00:12:23.970
So let's draw this, build us a little flier
for just I want to get this point across.

00:12:23.970 --> 00:12:25.800
It's important; it's not a layer-based drawing.

00:12:25.799 --> 00:12:28.289
So in here we have a wide rectangle.

00:12:28.289 --> 00:12:29.629
We're going to put a gradient on it.

00:12:29.629 --> 00:12:36.230
And this gradient has replaced the white; it has
blended into the white and modified the white rectangle.

00:12:36.230 --> 00:12:38.610
We're going to put that opaque image on it.

00:12:38.610 --> 00:12:43.360
Now this opaque image has replaced
portions of the gradient that it covers.

00:12:43.360 --> 00:12:47.379
So again, if you want to do gradient
it has already to be modified.

00:12:47.379 --> 00:12:51.710
We put a little transparent, so
I don't know if you guys can see,

00:12:51.710 --> 00:12:55.420
you can see through it that's getting
blended into the image.

00:12:55.419 --> 00:13:00.699
So you can see through the stars, you can see their image
on the gradient, but again, the image has been modified.

00:13:00.700 --> 00:13:04.940
And finally we put a little nice Italian Velo stamp on it.

00:13:04.940 --> 00:13:07.250
And we have our flier.

00:13:07.250 --> 00:13:12.679
And again, if it's not very much work,
it's really easy to use this stuff.

00:13:12.679 --> 00:13:19.120
So the heart of Quartz 2D is a Quartz Context, a CG context.

00:13:19.120 --> 00:13:22.419
.And a CG Context is nothing but
a destination for your drawing.

00:13:22.419 --> 00:13:25.449
So you draw an image, you're drawing it into the CG context.

00:13:25.450 --> 00:13:28.400
You draw it past, it's going through CG context.

00:13:28.399 --> 00:13:31.899
It is used by higher applications,
like UI Kit and Core Animation.

00:13:31.899 --> 00:13:37.509
And again, your application, when you want to draw
you want to get the CGcontext and draw into it.

00:13:37.509 --> 00:13:39.740
And it's also continued for graphics state.

00:13:39.740 --> 00:13:41.860
Now what is a graphics state?

00:13:41.860 --> 00:13:46.669
So in a lot of 2D programming -models what
you do is you want to draw your primitive.

00:13:46.669 --> 00:13:50.079
You set a bunch of attributes,
and then you draw your primitive.

00:13:50.080 --> 00:13:54.270
And then the next time you want to draw this
primitive you have to reset attributes and draw again,

00:13:54.269 --> 00:13:57.000
or change one and set all of them and try again.

00:13:57.000 --> 00:14:01.039
What we do in Quartz 2D is we save that stage for you.

00:14:01.039 --> 00:14:05.899
So these attributes are, they're just parameters
that control the way your drawing looks.

00:14:05.899 --> 00:14:07.689
So let's take a look at this example.

00:14:07.690 --> 00:14:09.020
Here we have a path.

00:14:09.019 --> 00:14:11.049
It's just a star.

00:14:11.049 --> 00:14:12.509
Let's say we, want to fill it.

00:14:12.509 --> 00:14:19.490
So we set the fill color attribute, and the
next time we draw it it's filled to the blue.

00:14:19.490 --> 00:14:23.169
So let's say now we want to also stroke this path.

00:14:23.169 --> 00:14:30.259
So all we have to do is set the stroke color, redraw
their path, and now we're a filled stroke star.

00:14:30.259 --> 00:14:32.769
You want to transform it, you can
just set the transformation,

00:14:32.769 --> 00:14:38.189
and again redraw and you get accumulated parameters.

00:14:38.190 --> 00:14:43.940
I do it in a lot of these parameters you can, you can
change line with, and you know, change pattern and dash it.

00:14:43.940 --> 00:14:47.430
And my favorite, you can add a
shadow, which is just a parameter.

00:14:47.429 --> 00:14:53.109
And boom, you get this beautiful shadow on your
path, and again, you can see this global alha.

00:14:53.110 --> 00:14:57.190
There are very, very many more of this
pamphlets, so you can read the, read about.

00:14:57.190 --> 00:15:02.430
But again, graphic state saves your state,
and you don't have to worry about it.

00:15:02.429 --> 00:15:06.379
Now how do we get access to the CGContext?

00:15:06.379 --> 00:15:08.110
It's really, really easy.

00:15:08.110 --> 00:15:12.240
What you do is you subclass UIView and
then you implement your drawRect method.

00:15:12.240 --> 00:15:16.409
And the first thing you do in drawRect
method is called UIGraphicsGetCurrentContext.

00:15:16.409 --> 00:15:22.709
This is what gives you your current context, your
graphics context that you're going to use to render into.

00:15:22.710 --> 00:15:24.850
So let's take a look at an example.

00:15:24.850 --> 00:15:27.170
So here we have subclass UIView.

00:15:27.169 --> 00:15:30.509
We're implementing our drawRect method,
and again the first thing we do CGContext,

00:15:30.509 --> 00:15:33.569
xContext, myContext, UIGraphicsGetCurrentContext.

00:15:33.570 --> 00:15:37.800
And now at this point we have our current
context that we're going to draw into.

00:15:37.799 --> 00:15:45.159
So before I move on I want to bring to your attention
that on the iPhones the [inaudible] system is flipped.

00:15:45.159 --> 00:15:49.819
So origin is in the top left corner,
and unlike the Cocoa developers,

00:15:49.820 --> 00:15:53.210
if you're Cocoa app developers you
know the origin is in the bottom left.

00:15:53.210 --> 00:15:56.220
So be mindful of this one change.

00:15:56.220 --> 00:16:00.860
So OK, great, so now we have our graphics
context, and let's draw some drawings.

00:16:00.860 --> 00:16:04.789
And here I'm going to draw a blue rectangular shape.

00:16:04.789 --> 00:16:07.649
So the first thing we do is we want to get our geometry.

00:16:07.649 --> 00:16:13.250
CGRect, myRect, now I'm just going to call
this CGRect Made, it takes four arguments:

00:16:13.250 --> 00:16:15.929
the orgin, XMY, and a width, and a height.

00:16:15.929 --> 00:16:19.739
So let's make the rectangle that's 40, 40.

00:16:19.740 --> 00:16:23.549
And give it a width of 240 by 120.

00:16:23.549 --> 00:16:28.969
Now we need to set some parameters in this
rectangle on this right before we draw it.

00:16:28.970 --> 00:16:30.830
So I want to fill it with blue.

00:16:30.830 --> 00:16:32.410
So what we're going to do is CG context.

00:16:32.409 --> 00:16:34.240
set out CG fill color.

00:16:34.240 --> 00:16:38.830
And the arguments, all the CG calls,
the first argument is your context.

00:16:38.830 --> 00:16:40.790
So of course we give it myContext.

00:16:40.789 --> 00:16:45.750
The next 3 arguments are the color-red, green, and blue.

00:16:45.750 --> 00:16:47.669
In here we're going to give it, make it a blue.

00:16:47.669 --> 00:16:49.819
So we're going to set red on green to zero.

00:16:49.820 --> 00:16:50.870
And full intensity blue.

00:16:50.870 --> 00:16:53.419
And the last argument is your opacity.

00:16:53.419 --> 00:16:57.409
So on the phone, 1.0 fully opaque, 0 fully transparent.

00:16:57.409 --> 00:17:00.939
So we're going to make our blue color fully opaque.

00:17:00.940 --> 00:17:04.420
And the last thing we need to do is show our rectangle.

00:17:04.420 --> 00:17:10.750
So CGContext FillRect again, it's a CG call we give it
context after the first argument, and then a rectangle.

00:17:10.750 --> 00:17:14.259
So but we have a blue rectangle on 40, 40.

00:17:14.259 --> 00:17:16.339
Really, really easy to use.

00:17:16.339 --> 00:17:19.490
Now let's make more changes to our rectangle.

00:17:19.490 --> 00:17:21.430
Let's showcase with a green color.

00:17:21.430 --> 00:17:24.890
Again we don't have to worry about this
little color, we've already set it once,

00:17:24.890 --> 00:17:28.120
we've all ready filled our rectangle with no problem.

00:17:28.119 --> 00:17:34.729
All we do is CGContext R, RGB stroke color,
which is very similar to the fill color in terms

00:17:34.730 --> 00:17:37.660
of arguments, but it's such a short color.

00:17:37.660 --> 00:17:45.730
So again, CGContext, my context is the first argument,
let's green blue indicates green, a full intensity green,

00:17:45.730 --> 00:17:49.539
and it's fully opaque, so we give it a 1.0 for transparency.

00:17:49.539 --> 00:17:54.730
And then set context stroke with Rect with
width, that's the stroke our rectangle,

00:17:54.730 --> 00:17:57.980
and the width is the width of the stroke line around it.

00:17:57.980 --> 00:17:59.039
It's in this case 10.

00:17:59.039 --> 00:18:04.029
So again, context is always your argument
into your CGCalls and our rectangle.

00:18:04.029 --> 00:18:06.319
So let's see, there we go.

00:18:06.319 --> 00:18:09.960
We have this green [inaudible] border around the rectangle.

00:18:09.960 --> 00:18:11.670
Again, it's really easy to use.

00:18:11.670 --> 00:18:13.750
The building blocks are the key to this.

00:18:13.750 --> 00:18:17.650
You take a path, you start the path
and you add the link blocks to it.

00:18:17.650 --> 00:18:24.380
And, and you, it allows you to create this really
intricate arbitrary shapes, which is not very much work.

00:18:24.380 --> 00:18:26.320
So let's look at this demo we have.

00:18:26.319 --> 00:18:31.409
All right, so we have a little demo
of course, it's really not too fancy.

00:18:31.410 --> 00:18:33.240
But it's very similar to the UI catalog.

00:18:33.240 --> 00:18:37.279
Again, all sorts of samples so you can download
it and look at how we done, done this stuff.

00:18:37.279 --> 00:18:42.039
And it's usually a list of Primitives we
have and just features that we support.

00:18:42.039 --> 00:18:46.809
So you know, of course, you can have your lines, and
rectangles, they can be filled, they can be stroked,

00:18:46.809 --> 00:18:49.859
they can be, you know, patterned,
I think that's in a different area.

00:18:49.859 --> 00:18:53.479
I mean, who doesn't like curves, I like curves.

00:18:53.480 --> 00:19:00.240
So this is how you get curves And again,
you want to see how we do to give support.

00:19:00.240 --> 00:19:02.039
Really easy to take a look at these.

00:19:02.039 --> 00:19:03.599
I want to let you, what else do we have?

00:19:03.599 --> 00:19:05.509
Gradients, I love gradients.

00:19:05.509 --> 00:19:08.220
I would grade it, oops, did I click on the wrong thing?

00:19:08.220 --> 00:19:08.920
There we go.

00:19:08.920 --> 00:19:15.910
So again, different ways of doing gradient, linear
gradient, which doesn't get as much credit as the radial.

00:19:15.910 --> 00:19:22.519
But I like the linear gradients, use it everywhere, and
so on, so you can take a look at this and just kind of,

00:19:22.519 --> 00:19:25.819
like get a pattern, you know, if you want.

00:19:25.819 --> 00:19:27.879
Take a look at this and see what works for you.

00:19:27.880 --> 00:19:33.620
And again, it's just an example
of how to build on this primitive.

00:19:33.619 --> 00:19:38.299
All right, let's go back to slides.

00:19:38.299 --> 00:19:43.339
So in terms of reading material, of course the Quartz
CD Programming Guide, the great excellent guide.

00:19:43.339 --> 00:19:45.809
It's available on the developer's side.

00:19:45.809 --> 00:19:52.819
And we always are commanded for a Grammy, but of course this
is a book written by a couple of very, very expert folks.

00:19:52.819 --> 00:19:53.789
And it's a great book.

00:19:53.789 --> 00:19:55.470
It has sample code in it.

00:19:55.470 --> 00:19:57.910
It gets really into the detail of every one of these.

00:19:57.910 --> 00:20:01.830
And it has scenarios and, again, really wonderful work.

00:20:01.829 --> 00:20:03.569
We really recommend it.

00:20:03.569 --> 00:20:05.960
So Core Animation.

00:20:05.960 --> 00:20:09.759
Core Animation is really the heart and soul of iPhone OS.

00:20:09.759 --> 00:20:12.309
It's the thing that composites everything.

00:20:12.309 --> 00:20:16.609
Again, if a pixel is on your phone
it has gone through Core Animation.

00:20:16.609 --> 00:20:18.459
It's a layer-based framework.

00:20:18.460 --> 00:20:19.640
It's really easy to use.

00:20:19.640 --> 00:20:20.850
Layers are your building blocks.

00:20:20.849 --> 00:20:24.009
So you basically take these building
blocks and composite them together.

00:20:24.009 --> 00:20:29.359
It's a post-transparency of face, and you
know by compositing these layers together,

00:20:29.359 --> 00:20:37.929
it allows for really visually appealing applications,
with really not very much work on your part.

00:20:37.930 --> 00:20:40.680
It supports a lot of the different media.

00:20:40.680 --> 00:20:46.650
Your layers data can come from video, it can come
from, you know, Quartz 2D, it can come from UI Kit.

00:20:46.650 --> 00:20:52.280
Again, it takes your layers regardless of where
the contents came from and composites them.

00:20:52.279 --> 00:20:56.220
It's very nice, it's GP accelerated, so it's efficient.

00:20:56.220 --> 00:20:58.509
It loops really fast and smoothly.

00:20:58.509 --> 00:21:08.589
And once again it proves your ability to get this
intricate fabulous looking image out of the simple layers.

00:21:08.589 --> 00:21:11.599
So the heart of Core Animation is the layer.

00:21:11.599 --> 00:21:15.549
A layer is nothing but a 2D surface in a 3D world.

00:21:15.549 --> 00:21:19.930
And what that means is that it really
doesn't understand about 3D-ness of it,

00:21:19.930 --> 00:21:23.810
but these layers can be placed in, again, a 3D space.

00:21:23.809 --> 00:21:26.799
and then sometimes referred to this as 2-1/2 D.

00:21:26.799 --> 00:21:28.730
And it does that really, really well.

00:21:28.730 --> 00:21:36.039
It continues for animations, so and I'll talk
about this a little bit more in later slides.

00:21:36.039 --> 00:21:40.039
The content comes again from different
places like Quartz 2D and united frameworks.

00:21:40.039 --> 00:21:44.349
And a property change invokes the animation.

00:21:44.349 --> 00:21:47.469
And animations are implicit, meaning
you don't have to really worry about it.

00:21:47.470 --> 00:21:51.930
And again we'll get into this in a little bit.

00:21:51.930 --> 00:21:53.769
So there's several layers, types.

00:21:53.769 --> 00:21:57.980
I'm not really going to talk about these today.

00:21:57.980 --> 00:22:04.539
There is a Core Animation session tomorrow at 9, which is
I think one of the best sessions this, this year at WWDC,

00:22:04.539 --> 00:22:07.210
so please attend that if you're interested in this.

00:22:07.210 --> 00:22:11.579
John has a lot of great information
for you, and it's full of eye candy.

00:22:11.579 --> 00:22:13.569
I've seen it several times the other day, still love it.

00:22:13.569 --> 00:22:18.049
So please attend that session if you're
interested in different layer types.

00:22:18.049 --> 00:22:20.599
So let's talk about the two aspects of layers.

00:22:20.599 --> 00:22:22.500
The two aspects of properties and animation.

00:22:22.500 --> 00:22:23.890
So let's talk about priorities

00:22:23.890 --> 00:22:27.350
A layer can have geometry.

00:22:27.349 --> 00:22:34.199
This is the basic property unit, a dotted
line is my geometry, is my border of my layer.

00:22:34.200 --> 00:22:36.309
It can have a background.

00:22:36.309 --> 00:22:37.809
And again, I like fading.

00:22:37.809 --> 00:22:40.839
So it has the nice gradient background in this example.

00:22:40.839 --> 00:22:45.659
You can have a border, a nice rounded border here.

00:22:45.660 --> 00:22:48.820
It can have sublayers, and this is
important, because this is where you get

00:22:48.819 --> 00:22:51.679
into building this layer tree of information.

00:22:51.680 --> 00:22:57.039
You know, every day you can have a sublayer
and they all get composited together again

00:22:57.039 --> 00:22:59.319
to give you that beautiful visual effect.

00:22:59.319 --> 00:23:04.289
The content comes, it has content, and
again it comes from anywhere you want.

00:23:04.289 --> 00:23:07.680
In this case I've added some pics content to my sublayers.

00:23:07.680 --> 00:23:13.640
And again, you can have opacity and mask, and again a
lot of properties that we're not going to cover today.

00:23:13.640 --> 00:23:19.130
But all of these properties involve
animation, and we'll talk about this.

00:23:19.130 --> 00:23:26.070
Now intensive animation, that's the second part of the
layer, why is it that we all like animation so much?

00:23:26.069 --> 00:23:30.779
Animation adds that visual feedback to your application.

00:23:30.779 --> 00:23:34.829
Its in real life it makes sure you
really don't see jaggy motions.

00:23:34.829 --> 00:23:39.470
Everything is smooth, except for my hands.

00:23:39.470 --> 00:23:43.180
But short of my hands, things are normally smooth.

00:23:43.180 --> 00:23:47.190
And animation gives that effect,
it makes your app more real.

00:23:47.190 --> 00:23:51.279
It gives it more; again, it conveys the state change.

00:23:51.279 --> 00:23:56.149
You know, you're transitioning between views;
your user isn't ever going to be surprised.

00:23:56.150 --> 00:23:59.130
What happened to my, you know, I was
looking at a page, where did it go?

00:23:59.130 --> 00:24:01.600
Well the transition to it, it's smooth.

00:24:01.599 --> 00:24:05.879
And it adds that extra jazz to your application.

00:24:05.880 --> 00:24:09.800
And there are two real concepts with Core Animation.

00:24:09.799 --> 00:24:13.889
Again, the fact that there are layers and all
composited together in one animation loop.

00:24:13.890 --> 00:24:16.470
And the second thing is that animations are implicit.

00:24:16.470 --> 00:24:18.630
And what does that mean?

00:24:18.630 --> 00:24:21.200
It means that you don't have to deal with timers.

00:24:21.200 --> 00:24:23.559
You don't have to monkey around with your animation.

00:24:23.559 --> 00:24:27.329
You don't have to worry about, oh, my
God, what is my geometry on slide 25?

00:24:27.329 --> 00:24:28.659
It doesn't matter.

00:24:28.660 --> 00:24:31.340
You change your property, Core
Animation will animate for you.

00:24:31.339 --> 00:24:36.909
Asynchronistically behind your back, things just
happen, and you just concentrate on what you want to do

00:24:36.910 --> 00:24:39.860
in your application instead of worrying about the animation.

00:24:39.859 --> 00:24:44.809
Anyone who has coded to timers know what a pain they are.

00:24:44.809 --> 00:24:46.690
So let's take a look at a couple of examples.

00:24:46.690 --> 00:24:51.049
So you have loaded this beautifulCore
Animation logo in arts layers.

00:24:51.049 --> 00:24:53.430
And let's say we want to fade it away.

00:24:53.430 --> 00:24:56.950
So opacity, one of the properties, we set it to 0 again.

00:24:56.950 --> 00:25:01.259
And I find OS 0 fully transparent, 1.0 fully opaque.

00:25:01.259 --> 00:25:07.509
So, boom. As soon as this line of code executes, your
logo fades away, you don't have to worry about it.

00:25:07.509 --> 00:25:11.529
Let's say if you want to bring it back,
so we can reset its opacity to 1.0.

00:25:11.529 --> 00:25:14.740
And as soon as that line executes your logo fades back in.

00:25:14.740 --> 00:25:18.370
And again, beautiful, it's simple,
easy; it's done behind your back.

00:25:18.369 --> 00:25:21.419
Let's look at more cases-transactions.

00:25:21.420 --> 00:25:24.060
Transactions combine multiple animations together.

00:25:24.059 --> 00:25:25.289
So let's look at this.

00:25:25.289 --> 00:25:30.799
So let's say we want to say blueLayer, I want you to
fade, and I want the green also fade at the same time.

00:25:30.799 --> 00:25:36.460
So the moment this code executes they both
simultaneously, asynchronistically fade away.

00:25:36.460 --> 00:25:39.950
And this one is my favorite example.

00:25:39.950 --> 00:25:43.930
You can change more than just one
kind, or one property under layers.

00:25:43.930 --> 00:25:48.470
So in this case I'm going to make my blue fade,
and also shrink as it's fading, and I want,

00:25:48.470 --> 00:25:50.750
I want the green layers to just walk away from us.

00:25:50.750 --> 00:25:54.140
So, boom, everything gets done.

00:25:54.140 --> 00:25:56.170
Again, asynchronistically behind your back.

00:25:56.170 --> 00:25:57.580
Very nice.

00:25:57.579 --> 00:26:02.299
I'm going to touch a little bit
on the different animation types.

00:26:02.299 --> 00:26:04.829
Again, I don't want to get into too much of Core Animation,

00:26:04.829 --> 00:26:08.069
you can read about this stuff and
also go to John's session tomorrow.

00:26:08.069 --> 00:26:10.579
But there's just basic animation.

00:26:10.579 --> 00:26:15.789
And the gist of that is go from
point A to point B, boom you're done.

00:26:15.789 --> 00:26:17.409
There's the Keefer [phonetic] animations.

00:26:17.410 --> 00:26:22.980
And the gist of that is go from A, to B, to C,
to D, etc, and you provide the key frames for us

00:26:22.980 --> 00:26:26.240
and Core Animation does the bouncing between them.

00:26:26.240 --> 00:26:28.799
Again, really simple model.

00:26:28.799 --> 00:26:33.389
We have transitions, and the transitions
are just a cross state between 2 states.

00:26:33.390 --> 00:26:35.790
You know, a cross state from my state A to state B.

00:26:35.789 --> 00:26:40.409
And finally group animations, or animation groups,

00:26:40.410 --> 00:26:45.110
and what there are is sasically grouping
multiple animations in one animation loop.

00:26:45.109 --> 00:26:45.909
Really easy.

00:26:45.910 --> 00:26:48.620
Really easy to implement.

00:26:48.619 --> 00:26:52.139
So we've talked like 3 F or 4 frame words.

00:26:52.140 --> 00:26:57.780
And these 3 are the 3 that really are tangled together
and they interact with each other quite a bit.

00:26:57.779 --> 00:27:01.779
Now let me show you this app, it's a solitaire app.

00:27:01.779 --> 00:27:07.000
And the interesting thing about it is that the user has,

00:27:07.000 --> 00:27:12.759
the developer has chosen very wisely
what part of which frame he uses.

00:27:12.759 --> 00:27:17.779
So right off the bat the welcomes
page is nothing but the UI Kit.

00:27:17.779 --> 00:27:20.009
You know, it provides the button for a why not.

00:27:20.009 --> 00:27:22.089
He's not going to worry about using anything else.

00:27:22.089 --> 00:27:27.539
So all he did is customize the buttons to his own liking.

00:27:27.539 --> 00:27:31.170
So let's play a game, oops, let me try a new game.

00:27:31.170 --> 00:27:36.840
So what's happening here is that every
one of these cards is a UI Field.

00:27:36.839 --> 00:27:44.789
And he has customized them, he has subclassed them,
and he has used Quartz 2D, actually these are all done

00:27:44.789 --> 00:27:50.490
in Quarts 2D, to draw the artwork on
the front and back of the cards, great.

00:27:50.490 --> 00:27:59.849
But if he's still using Core Animation's implicit animation
to just do the moving of the cards so if they are going

00:27:59.849 --> 00:28:03.719
from point A to point B, there is no reason
to actually do anything more with that.

00:28:03.720 --> 00:28:09.930
Now if I pick up a card and we move it around, so
that events are coming from your UI Kit, great.

00:28:09.930 --> 00:28:14.470
The movement is explicit animation by Core Animation.

00:28:14.470 --> 00:28:21.579
So he's modified Core Animation to do what exactly
he wants to and not do the implicit animation.

00:28:21.579 --> 00:28:28.059
However, the more can let it go again, implicit
animation and core animation, go from Point A to Point B.

00:28:28.059 --> 00:28:32.210
Now I want to show you one more thing,
and I don't know if you'll see it up here.

00:28:32.210 --> 00:28:38.289
So when I flip these cards over, I don't know if you can
see, the cards, it seems like they're flipping in 3D space.

00:28:38.289 --> 00:28:41.409
And this is what they call 2-1/2D animation.

00:28:41.410 --> 00:28:45.170
Again, this is still all 2D layers,
they're not really going in 3D.

00:28:45.170 --> 00:28:50.240
But Core Animation has this fantastic way of
making them look like they're flipping in 3D.

00:28:50.240 --> 00:28:55.329
And again, this is just implicit
animation done by Core Animation.

00:28:55.329 --> 00:28:58.659
Very nice and simple to use.

00:28:58.660 --> 00:29:05.050
And the best thing about these is that you don't have
to do any work, cause this really comes with your layer.

00:29:05.049 --> 00:29:05.669
Excellent.

00:29:05.670 --> 00:29:10.140
So again, and he's again picked and
chosen what to use out of UI Kit.

00:29:10.140 --> 00:29:11.960
These are all the standard UI Kit uses.

00:29:11.960 --> 00:29:17.220
And if you don't have to code it why bother coding it?

00:29:17.220 --> 00:29:19.860
Use what comes with the applications.

00:29:19.859 --> 00:29:26.639
So again, the take home message here is if you
don't have to, you don't have to, if you need it,

00:29:26.640 --> 00:29:32.020
don't use everyone of the frameworks; just
use what works best for your applications.

00:29:32.019 --> 00:29:37.039
Reading materials: Core Animation Programming
Guide, again, available on the Developer website.

00:29:37.039 --> 00:29:37.849
You can download it.

00:29:37.849 --> 00:29:46.049
And also Animation Text and Timing Program
guides, also available on the Developer site.

00:29:46.049 --> 00:29:48.970
So let's talk a little bit about OpenGL ES.

00:29:48.970 --> 00:29:52.720
And before we get into OpenGL ES
I just want to talk about OpenGL.

00:29:52.720 --> 00:29:53.809
What is OpenGL?

00:29:53.809 --> 00:29:57.039
OpenGL is nothing but a softer
interface to graphics hardware.

00:29:57.039 --> 00:29:59.299
And it's been around for along time.

00:29:59.299 --> 00:30:01.700
It's defined by those [inaudible] GL specifications.

00:30:01.700 --> 00:30:03.580
So it's an open standard.

00:30:03.579 --> 00:30:09.879
And it's not necessarily a 3D graphics API,
although it's been used for one for a long time.

00:30:09.880 --> 00:30:12.420
And you know this slide isn't going to do its justice,

00:30:12.420 --> 00:30:17.100
but I'm going to quickly just go
over the gist of what OpenGL does.

00:30:17.099 --> 00:30:24.869
In summary, it takes vertices, which are points in
3D in the space, basically, and pixels at its input.

00:30:24.869 --> 00:30:28.299
And it applies some for whatwe would
call visual operations on them.

00:30:28.299 --> 00:30:30.889
And it pops out at a pixels that are your last image.

00:30:30.890 --> 00:30:32.630
Now what are their visual operations?

00:30:32.630 --> 00:30:36.730
So, it can transform on a state
space and create the geometry.

00:30:36.730 --> 00:30:39.900
It can shrink themand rotate them,
you know, all of these goodies.

00:30:39.900 --> 00:30:44.350
It can apply pervertix [phonetic] operations like lighting,

00:30:44.349 --> 00:30:48.049
if you want to look to your records
and again transformation.

00:30:48.049 --> 00:30:54.619
And then it goes through and tessellates the geometry
into time roles and rasterizes it into pixels.

00:30:54.619 --> 00:30:59.849
And now we have these pixels that we can apply for pixel
operations through them, like texture mapping, or shading,

00:30:59.849 --> 00:31:03.189
or just, you know, colored look-up whatever you want.

00:31:03.190 --> 00:31:07.430
And the gist of it is that he does all of this
and pops our pixels into the frame buffer.

00:31:07.430 --> 00:31:10.980
And the frame buffer could be onscreen,
frame buffer could display hardware.

00:31:10.980 --> 00:31:15.549
Or an off-screen frame buffer in
the phone you have access to SBO's.

00:31:15.549 --> 00:31:19.700
And so that's really a simplified
version of what OpenGL does.

00:31:19.700 --> 00:31:23.059
And I have a little reptile dude
here we're going to look at.

00:31:23.059 --> 00:31:26.039
So this dude is all vertices.

00:31:26.039 --> 00:31:28.369
And these vertices are transformed.

00:31:28.369 --> 00:31:30.309
And this is the kind of I don't know if you can see.

00:31:30.309 --> 00:31:33.329
So,here's the tesellation of these vertices on the reptile.

00:31:33.329 --> 00:31:37.809
And they're really, the vertices are
just nothing but collection of triangles.

00:31:37.809 --> 00:31:41.429
And the triangles end up getting rasterized..

00:31:41.430 --> 00:31:46.730
So at the end of the day we have pixels
for every single point of our reptile.

00:31:46.730 --> 00:31:52.579
And we apply a visual operations to these
pixels, and then there comes a texture map,

00:31:52.579 --> 00:31:57.889
gecko or reptile, or some sort, I don't know.

00:31:57.890 --> 00:32:00.860
So that's what OpenGL does.

00:32:00.859 --> 00:32:06.699
OpenGL ES is, again, it's a softer interface
to graphics hardware for imbedded systems.

00:32:06.700 --> 00:32:10.160
It's a sub-set; it's a lean version of OpenGL.

00:32:10.160 --> 00:32:12.460
Again, it's defined by an open standard.

00:32:12.460 --> 00:32:14.220
So open specifications.

00:32:14.220 --> 00:32:20.220
And it's high performance, because it was
designed for these embedded smaller systems.

00:32:20.220 --> 00:32:28.019
And the nice thing about it is that it doesn't have a
lot of the redundancies and just obsolete feature sets

00:32:28.019 --> 00:32:31.819
that OpenGL has kind of accumulated over the years.

00:32:31.819 --> 00:32:35.139
It's, one thing to note is that he
also doesn't have a softer path.

00:32:35.140 --> 00:32:39.310
So the version of app correctness is
really on the developer's shoulders.

00:32:39.309 --> 00:32:43.210
Although you do something wrong,
you quickly see, nothing draws.

00:32:43.210 --> 00:32:51.529
So let's take a look at on OpenGL ES a state of
place in a bigger platform, just in the world.

00:32:51.529 --> 00:32:56.339
OpenGL ES is the framework that talks to graphics hardware.

00:32:56.339 --> 00:33:00.339
And on the other side the basic windows
system API, what would that might be under?

00:33:00.339 --> 00:33:03.509
Mac is the Windows server, and the
phone it happens to be something else.

00:33:03.509 --> 00:33:05.509
It talks to the display hard drive.

00:33:05.509 --> 00:33:13.250
And the two of them connect to each other with this really
thin bridge framework called OpenGL ES platform called API.

00:33:13.250 --> 00:33:16.250
That's where they sit in the grand scheme of things.

00:33:16.250 --> 00:33:20.160
Now EAGL is that bridge layer on the phone.

00:33:20.160 --> 00:33:25.120
All it does is it defines an interface
within the operating system and OpenGL ES.

00:33:25.119 --> 00:33:27.899
It's the thing that manages your context.

00:33:27.900 --> 00:33:34.890
And again, it does nothing more than just hand this
context back to the operating system for composition.

00:33:34.890 --> 00:33:38.780
And here is how it looks on the phone.

00:33:38.779 --> 00:33:41.329
What is the naked windows system API?

00:33:41.329 --> 00:33:42.220
It's Core Animation.

00:33:42.220 --> 00:33:46.559
Again, Core Animation is the thing that
draws everything on the screen and the phone.

00:33:46.559 --> 00:33:50.450
And OpenGL ES platform API, it's called EAGL.

00:33:50.450 --> 00:33:59.220
And, I want to also bring to attention that Core
Animation uses OpenGL ES for its composition, so.

00:33:59.220 --> 00:34:00.850
compositing.

00:34:00.849 --> 00:34:06.259
That's all I'm going to say about OpenGL
right now, except there are a lot of sessions.

00:34:06.259 --> 00:34:06.819
You should go to them.

00:34:06.819 --> 00:34:09.219
I will mention them at the end of the session.

00:34:09.219 --> 00:34:14.769
So the last thing I want to mention
is how do you, so you decided you want

00:34:14.769 --> 00:34:17.449
to write an OpenGL app, how would
you go about starting this?

00:34:17.449 --> 00:34:21.129
The nice thing besides is that Cocoa Touch
has a really wonderful template for it,

00:34:21.130 --> 00:34:24.090
and this is what I'm going to just how you quickly.

00:34:24.090 --> 00:34:27.710
It does all of the set-up for you, so
you don't have to really worry about it.

00:34:27.710 --> 00:34:30.800
And then all you have to do is
reimplement it, just draw a view.

00:34:30.800 --> 00:34:33.590
So let's take a look at this.

00:34:33.590 --> 00:34:36.160
I'm going to build a little quick app for you.

00:34:36.159 --> 00:34:46.679
So, OK, let's open Xcode, and we close
that guy, and open a new project.

00:34:46.679 --> 00:34:51.259
So right here when you open a new
project there is OpenGL ES application.

00:34:51.260 --> 00:34:55.800
Let's choose that and name it our demo.

00:34:55.800 --> 00:34:58.350
Whoops, demo.

00:34:59.849 --> 00:35:06.509
All right, so let's just build and run
this little app that we just created.

00:35:06.510 --> 00:35:06.960
There we go.

00:35:06.960 --> 00:35:10.340
So this is what comes right out of the box for you.

00:35:10.340 --> 00:35:13.860
It's a little quad that's rotating, very nice.

00:35:13.860 --> 00:35:19.990
So let's take a look at what you can do
to modify this to your own application.

00:35:19.989 --> 00:35:22.500
So we opened a EAGL view file, excuse me.

00:35:22.500 --> 00:35:29.530
And all you have to do, there's some setup at the
beginning, and all I want to point to you is you scroll down

00:35:29.530 --> 00:35:36.290
and there is the drawView method that is
there hard [inaudible] this little app.

00:35:36.289 --> 00:35:39.239
It's what's drawing, what's doing
this drawing, it has all the set ups.

00:35:39.239 --> 00:35:44.819
So all you have to do is actually put
your own code in this, in this method.

00:35:44.820 --> 00:35:48.650
Actually, they've even a comment to
replace me with this implementation.

00:35:48.650 --> 00:35:54.139
So that really you can get an OpenGL game going.

00:35:54.139 --> 00:35:56.009
All right, so that's all I'm going to say on that.

00:35:56.010 --> 00:36:04.740
[ silence ]

00:36:04.739 --> 00:36:10.889
>> So learning more reading material,
of course there's OpenGL ES 2.0 book.

00:36:10.889 --> 00:36:12.319
It's a good book.

00:36:12.320 --> 00:36:17.750
The developer website has some documentation
on, of course, OpenGL ES and the iPhone.

00:36:17.750 --> 00:36:26.360
And the Red book is always good reading for OpenGL if
anyone cares to actually learn OpenGL before its OpenGL ES.

00:36:26.360 --> 00:36:33.300
And OpenGL.org has a ton of information on
OpenGL, just the API, and just information.

00:36:33.300 --> 00:36:37.410
It's not the easiest reading, but
it's really, really powerful.

00:36:37.409 --> 00:36:41.069
Great! So, again we talked about our frameworks.

00:36:41.070 --> 00:36:44.490
These are the four main frameworks available to you.

00:36:44.489 --> 00:36:47.669
Again, the question is which one do you use for your apps?

00:36:47.670 --> 00:36:53.059
And the answer is not necessarily any one, you
have to use a combination that works for you.

00:36:53.059 --> 00:36:55.960
So we've picked a few examples, and let's talk about it.

00:36:55.960 --> 00:36:58.289
So here we have this application.

00:36:58.289 --> 00:37:02.699
On the top there is nothing, if
you think UI Kit and Quartz 2D.

00:37:02.699 --> 00:37:05.019
On the top it's just a table view.

00:37:05.019 --> 00:37:07.130
It's a UI Kit table view that is customized.

00:37:07.130 --> 00:37:11.730
They've painted the buttons, they've put
their own text in, their put gradients on it.

00:37:11.730 --> 00:37:15.070
And again, just a UI to table view plopped in.

00:37:15.070 --> 00:37:25.059
The bottom, that little nice jagged line that's kind of
going up nicely, that is done, that is done using Quartz 2D.

00:37:25.059 --> 00:37:29.759
Again, they took a view and they subclassed it
and used Quartz 2D to do their -own drawings.

00:37:29.760 --> 00:37:32.010
And both of them in the same view, and it works for them.

00:37:32.010 --> 00:37:35.820
Why not? You know, they could have used Quartz 2D
to actually -implement the top section, but why?

00:37:35.820 --> 00:37:36.320
Why bother?

00:37:36.320 --> 00:37:38.080
It comes for them free.

00:37:38.079 --> 00:37:40.829
Let's take a look at another example.

00:37:40.829 --> 00:37:46.789
The solitaire example was again another good
choice of, it's a good app of good choices.

00:37:46.789 --> 00:37:52.659
What they did it's a combination of Quartz 2D
and Core Animation, also UI Kit in some sense,

00:37:52.659 --> 00:37:58.329
because they picked what UI Kit offers in terms of
buttons, and you know, the scroll bars and everything.

00:37:58.329 --> 00:38:04.849
But then what they did is, indeed, in the main body of the
game they used Core Animation for all of their animations.

00:38:04.849 --> 00:38:09.639
And as much as possible they used the implicit
animation, so they didn't even have to worry about it.

00:38:09.639 --> 00:38:16.150
And then they subclassed and used Quartz 2D to do the
intricate drawings and just the artwork that they wanted.

00:38:16.150 --> 00:38:18.490
Again, a good combination.

00:38:18.489 --> 00:38:25.689
Color flow is another example of really complex animation.

00:38:25.690 --> 00:38:30.420
As you know if you want to swish [inaudible]
or word kind of falls in or falls out.

00:38:30.420 --> 00:38:32.630
And it's again, really complex animation.

00:38:32.630 --> 00:38:35.740
And they're using Core Animation for that,
which is great, that's what Core Animation,

00:38:35.739 --> 00:38:38.709
they should do, it's just it works really well for them.

00:38:38.710 --> 00:38:43.519
But then you flip your album, and you don't
need to worry about using anything else.

00:38:43.519 --> 00:38:49.469
UI Kit gives you the flip, it gives you
the table view, and again, why not, use it.

00:38:49.469 --> 00:38:54.329
And the last thing I want to mention with
touch fighter game, which is an OpenGL ES app.

00:38:54.329 --> 00:38:59.110
And again, if you're writing a game,
OpenGL ES, that's your best bet.

00:38:59.110 --> 00:39:01.019
3D modeling, OpenGL ES.

00:39:01.019 --> 00:39:03.759
And you know you can use Core Animation
to do some of the animations,

00:39:03.760 --> 00:39:06.900
but for the most part that's the framework to use.

00:39:06.900 --> 00:39:12.090
Again, we, we talk about all these frameworks,
and they're supposed to make your life easier.

00:39:12.090 --> 00:39:14.100
They're not supposed to make your app busier.

00:39:14.099 --> 00:39:22.369
So use, use what works for you, and is, for example, UI
Kit's high level interface to graphic operations is enough

00:39:22.369 --> 00:39:25.480
for you, then don't bother getting
into Quartz 2D, you don't h-ave to.

00:39:25.480 --> 00:39:27.929
If it's not enough, then get into Quartz 2D.

00:39:27.929 --> 00:39:33.109
If, if the implicit animations are not enough
for you, then get into explicit animations.

00:39:33.110 --> 00:39:35.769
But if you don't have to why bother?

00:39:35.769 --> 00:39:40.329
The other nice thing about using UI Kit
for what it comes with is that it, again,

00:39:40.329 --> 00:39:47.170
it gives your application just consistency both over your
app, and also over the rest of the apps on the phone.

00:39:47.170 --> 00:39:48.800
So that's really nice.

00:39:48.800 --> 00:39:50.519
You don't want your user to be surprised.

00:39:50.519 --> 00:39:55.690
User uses buttons and uses UI elements,
and they expect a behavior.

00:39:55.690 --> 00:39:58.920
And UI Kit gives you that expected behavior.

00:39:58.920 --> 00:40:02.340
So again, how do you choose?

00:40:02.340 --> 00:40:07.789
We talk a lot about frameworks, but you
might still not be clear how to choose.

00:40:07.789 --> 00:40:08.769
And we don't know.

00:40:08.769 --> 00:40:13.750
You know, there are tradeoffs based on
features that some performance ease of use.

00:40:13.750 --> 00:40:18.199
The framework, each of them have their own
strengths, and then for different needs.

00:40:18.199 --> 00:40:19.699
You know, we don't know what you're trying to do.

00:40:19.699 --> 00:40:25.239
In need of an application that's truly just
customizing their GUI to do something is very different

00:40:25.239 --> 00:40:29.189
than the touch fighter fame that's
[inaudible] 3D game under [=inaudible].

00:40:29.190 --> 00:40:37.579
So we put together some scenarios that we
thought might be common among the developers.

00:40:37.579 --> 00:40:42.519
And we tried to kind of figure out
what framework works best for these.

00:40:42.519 --> 00:40:46.009
So, first category, standard GUI.

00:40:46.010 --> 00:40:48.650
Well, UI Kit was born to do thist, of course.

00:40:48.650 --> 00:40:52.610
It's easy to use; it has these huge features that
we've been talking about it on and off today.

00:40:52.610 --> 00:40:54.640
And of course it's very fast.

00:40:54.639 --> 00:40:55.369
It's efficient.

00:40:55.369 --> 00:40:58.239
It runs on top of Core Animation, so it's nice.

00:40:58.239 --> 00:41:01.769
You want, you think GUI, use UI Kit.

00:41:01.769 --> 00:41:02.559
Custom GUI.

00:41:02.559 --> 00:41:07.519
Custom GUI, and this is where we talk about when
you subclass a view and you make it general,

00:41:07.519 --> 00:41:10.469
basically, and Quartz 2D is your best bet here.

00:41:10.469 --> 00:41:17.599
It gives you the graphics context, and you can use it
to draw, again, intricate states and whatever you want.

00:41:17.599 --> 00:41:21.880
And the features that is very rich,
obviously, and it's fast.

00:41:21.880 --> 00:41:29.079
Now here I put UI Kit, I've given
the UI Kit a little bit of credit.

00:41:29.079 --> 00:41:37.719
And reason for that is that it, it does some, it, it has
a, it, it provides an interface to graphics operations.

00:41:37.719 --> 00:41:41.849
You know there are still ways to customize it, but, and
we talked about this, you know there are ways to put,

00:41:41.849 --> 00:41:47.529
bring images into interface and add text, and
that might just be enough for what you want.

00:41:47.530 --> 00:41:52.430
I mean that might be enough customization
for your, for your GUI.

00:41:52.429 --> 00:41:57.899
Also if you noticed that Core Animation, I
should mention this, ah, you can read that.

00:41:57.900 --> 00:42:01.280
So Core Animation, we put Core Animation in there.

00:42:01.280 --> 00:42:05.900
And the reason for that is that if your custom GUI
does some custom animations, of course then you want

00:42:05.900 --> 00:42:13.480
to use Core Animation and its explicit animations to do
some of the transitions, or whatever you want to customize.

00:42:13.480 --> 00:42:14.550
They all perform well.

00:42:14.550 --> 00:42:20.130
Of course, Core Animation and Quartz 2D perform the best.

00:42:20.130 --> 00:42:23.730
2D graphics-again Quartz 2D is your bet here.

00:42:23.730 --> 00:42:27.039
It does, that's what it does, it loves doing 2D graphics.

00:42:27.039 --> 00:42:29.849
And it's fast, its at a full features set.

00:42:29.849 --> 00:42:31.960
It's the thing to do.

00:42:31.960 --> 00:42:41.300
UI Kit gets some credit here, mainly because it,
again, it does provide some API's to doing 2D drawing.

00:42:41.300 --> 00:42:44.110
And if that's enough for you, by all means use it.

00:42:44.110 --> 00:42:47.240
You don't have to get further down into the frameworks.

00:42:47.239 --> 00:42:53.779
And I put Core Animation in there just because it also
does a lot of, it gives you the validity to do a lot

00:42:53.780 --> 00:42:59.400
of the compositing and layering of your customizations.

00:42:59.400 --> 00:43:04.619
2D animation, of course, Core Animation,
that's what it does best.

00:43:04.619 --> 00:43:10.659
Across the board it has great feature set, it's
really fast, it's efficient, it's easy to use.

00:43:10.659 --> 00:43:14.920
You know the layers are just really
lightweight and easy to implement.

00:43:14.920 --> 00:43:21.490
Again, UI Kit does give you a little bit
of interface with some of these animations.

00:43:21.489 --> 00:43:25.539
And if that's what you want, if it's enough, it, it's fast.

00:43:25.539 --> 00:43:35.349
2-1/2D, of course, Core Animation's calling in
life is 2-1/2D, across the board- Core Animation,

00:43:35.349 --> 00:43:39.219
Core Animation, Core Animation-easy, is again fast.

00:43:39.219 --> 00:43:41.459
It's what gives you what you want.

00:43:41.460 --> 00:43:43.280
And the same with 3D.

00:43:43.280 --> 00:43:45.190
3D graphics is OpenGL.

00:43:45.190 --> 00:43:47.170
OpenGL is your best bet,.

00:43:47.170 --> 00:43:47.680
OpenGL ES.

00:43:47.679 --> 00:43:53.199
You want to use it and it's got a huge feature set, let's
you do anything you want pretty much, and it's fast.

00:43:53.199 --> 00:43:56.980
It's, again, it runs on the GPU, and it's just very fast.

00:43:56.980 --> 00:44:03.250
Now, on the ease of use I didn't give it its
highest score, mainly because it's just OpenGL.

00:44:03.250 --> 00:44:05.190
Yes, it's not easy to use.

00:44:05.190 --> 00:44:08.480
It's a sophisticated API, it takes some learning.

00:44:08.480 --> 00:44:12.920
So I don't want you, I don't want anyone to
think that oh, quickly I can jump in and boom.

00:44:12.920 --> 00:44:14.230
Yeah, it takes some learning too.

00:44:14.230 --> 00:44:22.480
And finally, 3D animation, the same way-OpenGL is what
you really want to do if you're doing 3D animation.

00:44:22.480 --> 00:44:25.300
Core Animation, got itself into the slide also literate.

00:44:25.300 --> 00:44:30.750
And the reason is that it does some, like
we talked, we saw the flipping of the cards.

00:44:30.750 --> 00:44:35.739
Again, it's 2-1/2 the animations, but it
does have the concept of 3D in essence space.

00:44:35.739 --> 00:44:37.299
So see what you can do.

00:44:37.300 --> 00:44:42.269
If you can actually use Core Animation
for your 3D animation, by all means.

00:44:42.269 --> 00:44:48.699
it's a lot simpler, and it's a whole
lot easier to code than OpenGL is.

00:44:48.699 --> 00:44:52.289
So who's the winner?

00:44:53.429 --> 00:44:54.429
I don't know.

00:44:54.429 --> 00:44:57.460
So let's look at just the categories that we talked about.

00:44:57.460 --> 00:45:00.220
So standard GUI, of course, UI Kit wins.

00:45:00.219 --> 00:45:02.849
We've talked, I mean it's hands down.

00:45:02.849 --> 00:45:07.639
Custom GUI, we're going to give this one to
Quartz 2D, again, just because it's easy to use.

00:45:07.639 --> 00:45:12.219
And it gives you a lot of flexibility.

00:45:12.219 --> 00:45:15.769
2D graphics, that's Quartz 2D, there is no question there.

00:45:15.769 --> 00:45:24.530
Again, you, you have a lot of building blocks and
really easy ways to put them together and build them.

00:45:24.530 --> 00:45:25.430
Let's see, where was I?

00:45:25.429 --> 00:45:26.929
2D animation, Core Animation.

00:45:26.929 --> 00:45:31.319
And of course 2-1/2D graphics,
that is Core Animation absolutely.

00:45:31.320 --> 00:45:35.410
And all of the 3D's, 3D graphi=cs just goes to OpenGL ES.

00:45:35.409 --> 00:45:37.480
So these are your winners.

00:45:37.480 --> 00:45:41.170
but over the weekend my college Derek
and I were, we were talking about this.

00:45:41.170 --> 00:45:44.730
And we really wanted to come up with one
framework, we thought it would be great

00:45:44.730 --> 00:45:46.929
to just have this one framework that's the winner.

00:45:46.929 --> 00:45:49.819
You want to say blah, whatever.

00:45:49.820 --> 00:45:56.470
So we went to my phone and we're looking at all
the apps that I had, and we learned 2 things.

00:45:56.469 --> 00:45:59.299
The first thing was that I needed to really buy more apps.

00:45:59.300 --> 00:46:00.720
I don't have enough apps.

00:46:00.719 --> 00:46:06.489
The second thing is that we really don't know who the
winner is, because you guys are just really creative.

00:46:06.489 --> 00:46:13.759
We looked at how each of these apps were using these
frameworks and API's, and we were blow away by the way

00:46:13.760 --> 00:46:16.790
and the combination of permutations
that you guys were using.

00:46:16.789 --> 00:46:23.509
And again, we, we don't know who we, we don't know
what to say, so we've decided the winner is you guys,

00:46:23.510 --> 00:46:26.430
because you use this stuff in ways
that we can't even imagine.

00:46:26.429 --> 00:46:34.099
And its really fun for us to just implement them and sit
back and watch you guys use them in these fantastic ways.

00:46:34.099 --> 00:46:36.429
So that's that.

00:46:36.429 --> 00:46:42.119
So for more information, our evangelist
is the fabulous Allan Schaffer.

00:46:42.119 --> 00:46:44.859
And I don't see him; he's back there.

00:46:44.860 --> 00:46:48.630
And documentation, of course you can get
documentation from the Apple website.

00:46:48.630 --> 00:46:48.720
1