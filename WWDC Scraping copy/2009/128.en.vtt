WEBVTT

00:00:12.759 --> 00:00:13.800
>> Good morning.

00:00:13.800 --> 00:00:14.770
>> Good morning.

00:00:14.769 --> 00:00:18.879
>> I'm Bret Victor, I'm the UI
Designer and Engineer at Apple.

00:00:18.879 --> 00:00:25.259
And next hour, we're going to talk a
little bit about UI design prototyping.

00:00:25.260 --> 00:00:31.280
Now I'm sure that many of you have had the experience
where you spend a lot of time working on a piece of code

00:00:31.280 --> 00:00:38.390
and then someone comes along and redesigns the App and you
have to take all that code, throw it out and start over.

00:00:38.390 --> 00:00:44.299
Maybe even more of you have had almost the opposite
experience where a, great design idea has come up

00:00:44.299 --> 00:00:48.469
but you just don't have time to
rearchitect the App or start over,

00:00:48.469 --> 00:00:51.750
so you end up shipping something
that's not as good as it could be.

00:00:51.750 --> 00:00:55.179
You have to save the good stuff for Version 2.

00:00:55.179 --> 00:00:58.710
Prototyping is a way of avoiding both these problems.

00:00:58.710 --> 00:01:02.750
Allowing you to ship the App that
you want to ship and ship it on time.

00:01:02.750 --> 00:01:08.530
But even more than that, prototyping is a way of coming
up with those great design ideas in the first place.

00:01:08.530 --> 00:01:11.299
Ideas that take your design in entirely new directions.

00:01:11.299 --> 00:01:17.689
The word prototyping means different things to different
people so we're going to start off with the basics.

00:01:17.689 --> 00:01:19.370
What is UI prototyping?

00:01:19.370 --> 00:01:20.540
Why should you do it?

00:01:20.540 --> 00:01:22.970
And who's involved in the process?

00:01:22.969 --> 00:01:25.849
So we're going to quickly lay this
groundwork and then I'm going to take you

00:01:25.849 --> 00:01:28.409
over to the demo machine to show you how it's done.

00:01:28.409 --> 00:01:30.899
Prototyping, prototyping is a skill.

00:01:30.900 --> 00:01:34.830
You can't learn the skill just by having someone
talk at you; you really have to see it in action.

00:01:34.829 --> 00:01:41.219
So I'm going to start with a Photoshop mockup of an App,
I'm going to start, create an Xcode project from scratch

00:01:41.219 --> 00:01:49.609
and just build up a prototype on stage to let you
experience what it's like to go through that process.

00:01:49.609 --> 00:01:51.569
Let's get started.

00:01:51.569 --> 00:01:54.009
What is UI prototyping?

00:01:54.010 --> 00:01:56.870
Prototyping is a stage of the development process.

00:01:56.870 --> 00:02:00.410
So let's take a closer look at that.

00:02:00.409 --> 00:02:04.719
Every App begins with an idea.

00:02:04.719 --> 00:02:10.520
You get an idea for an App, you get this vision in your
head of what the App is going to be, what it should do.

00:02:10.520 --> 00:02:15.409
Now for many developers, the next step is to start coding.

00:02:15.409 --> 00:02:18.859
So you fire up Xcode, you say, what's my class hierarchy?

00:02:18.860 --> 00:02:19.800
What's my data model?

00:02:19.800 --> 00:02:22.710
You get into it and we see this all the time.

00:02:22.710 --> 00:02:28.320
The problem is that once the developer spends all the
time building up this App, they finally get to use it

00:02:28.319 --> 00:02:30.780
and it doesn't match their initial vision at all.

00:02:30.780 --> 00:02:33.400
Basically they shot from the hip and they missed.

00:02:33.400 --> 00:02:39.150
So we always ask developers: before you
start coding, at least draw a picture.

00:02:39.150 --> 00:02:43.840
And this could be a sketch on a napkin, you can do
it in Photoshop or Omnigraphal or Keynote, whatever.

00:02:43.840 --> 00:02:48.050
The point is you get that vision out
of your head into a more concrete form

00:02:48.050 --> 00:02:51.000
where you can analyze it and still make changes easily.

00:02:51.000 --> 00:03:00.719
So this is a good process for some Apps, but other Apps,
particularly iPhone Apps, where you're really trying

00:03:00.719 --> 00:03:04.650
to innovate in the UI, it's not quite enough.

00:03:04.650 --> 00:03:10.760
And the reason is, it could be very hard to predict from
a picture in Photoshop how that App is going to behave

00:03:10.759 --> 00:03:13.829
when it's in your hand, underneath your fingers.

00:03:13.830 --> 00:03:20.680
There's a whole range of both ideas and problems, which
only come up when you're actually playing with the App.

00:03:20.680 --> 00:03:25.450
A further issue here is that frequently
these stages are handled by different people.

00:03:25.449 --> 00:03:31.369
The mockup is created by the designer, who
hands it over to the developer to build.

00:03:31.370 --> 00:03:38.590
Then when it's finally built, the designer comes up with
new ideas, notices problems, but by that time it's too late.

00:03:38.590 --> 00:03:46.390
The developer has to push back on the designer's ideas
and so this can lead to tension on the development team

00:03:46.389 --> 00:03:53.719
So suboptimal designs and suboptimal team
environment, the solution is to prototype.

00:03:53.719 --> 00:04:00.419
Prototyping is something you do after you draw the
visual mockups but before you start coding the App.

00:04:00.419 --> 00:04:03.639
And what exactly is this prototype?

00:04:03.639 --> 00:04:09.049
A prototype is a living mockup.

00:04:09.050 --> 00:04:11.080
A prototype is a living mockup.

00:04:11.080 --> 00:04:14.660
Now it's executable.

00:04:14.659 --> 00:04:19.339
You create it in Xcode, you build and go, you
run on the device, but it's closer in spirit

00:04:19.339 --> 00:04:21.829
to that visual mockup than a fully-fledged App.

00:04:21.829 --> 00:04:24.969
It's almost a facade of an App.

00:04:24.970 --> 00:04:29.970
You implement little bits of UI, just enough to
be able to explore them and see how they feel.

00:04:29.970 --> 00:04:32.260
You don't actually implement any functionality.

00:04:32.259 --> 00:04:36.819
And I'm going to be showing you
plenty of examples during the demo.

00:04:36.819 --> 00:04:41.800
But first, let's take a look at why you
would want to create one of these things.

00:04:41.800 --> 00:04:44.530
Well there are two main goals of prototyping.

00:04:44.529 --> 00:04:45.529
Two different goals.

00:04:45.529 --> 00:04:50.789
You can prototype because you want to explore
the design or you can prototype so you

00:04:50.790 --> 00:04:54.210
to communicate your ideas to somebody else.

00:04:54.209 --> 00:05:00.219
Exploring the design is about starting with that
Photoshop mockup, finding out what actually works,

00:05:00.220 --> 00:05:02.540
what doesn't and coming up with new ideas.

00:05:02.540 --> 00:05:05.580
It's an iterative process and it works like this.

00:05:05.579 --> 00:05:09.990
You have your prototype in some state and there's
some UI element in the design that you want

00:05:09.990 --> 00:05:12.540
to try out; you want to see how it actually feels.

00:05:12.540 --> 00:05:15.400
So you just throw it into the prototype
as quickly as possible.

00:05:15.399 --> 00:05:22.120
Take five minutes, hack something together, that's good
enough to let you play with it, understand how it feels.

00:05:22.120 --> 00:05:24.639
And you try it out.

00:05:24.639 --> 00:05:29.069
And as you do, as you play with it, you're going
to notice problems, things that don't feel right.

00:05:29.069 --> 00:05:36.930
But we're all smart people and in the course of discovering
those problems we're going to think of new ideas.

00:05:36.930 --> 00:05:39.579
Those ideas that come up feed back to the beginning.

00:05:39.579 --> 00:05:39.959
[ Laughter ]

00:05:39.959 --> 00:05:47.099
So we try those out; we see what works, what
doesn't, come up with new ideas, try those out

00:05:47.100 --> 00:05:51.560
and it's this polishing process
that allows your App to evolve.

00:05:51.560 --> 00:05:57.620
Evolve from something that looks good in Photoshop
to something that feels really great in your hand.

00:05:57.620 --> 00:06:01.280
The other reason to prototype is to communicate your ideas.

00:06:01.279 --> 00:06:08.019
So say you have an idea for an App and you want to pitch
it; pitch it to your boss or your client or investor.

00:06:08.019 --> 00:06:12.680
There are, there are a few different ways of getting
that vision out of your head and into theirs.

00:06:12.680 --> 00:06:16.379
The most simplest of course is
you can just describe it to them.

00:06:16.379 --> 00:06:18.800
But this is really ripe for miscommunication.

00:06:18.800 --> 00:06:21.550
Especially when it's an engineer talking to an investor.

00:06:21.550 --> 00:06:26.500
What you say is not going to be what
they hear and that can lead to disaster.

00:06:26.500 --> 00:06:30.379
So you can try pitching a static picture.

00:06:30.379 --> 00:06:32.959
This works really well for static
media like pitching a website.

00:06:32.959 --> 00:06:39.419
But if you're pitching a picture of your iPhone App,
you're relying on another person to imagine the behavior

00:06:39.420 --> 00:06:42.330
of your App and imagine it the same way that you do.

00:06:42.329 --> 00:06:45.349
And frequently it just doesn't work out.

00:06:45.350 --> 00:06:48.150
Ideally you'll just build the App and give it to them right?

00:06:48.149 --> 00:06:52.939
But the whole point of pitching is to get the approval
of the resources to build the App in the first place.

00:06:52.939 --> 00:06:58.269
So you can't do that but you can do the next
best thing, which is to build the prototype.

00:06:58.269 --> 00:07:02.930
You take a short amount of time, build something
that looks and feels like the actual App

00:07:02.930 --> 00:07:04.590
but you don't actually implement any functionality.

00:07:04.589 --> 00:07:09.379
You can give this to the other person, let them play
with it, let them understand your idea and you can say

00:07:09.379 --> 00:07:14.439
to that person, if you green light
this project, we will deliver this.

00:07:14.439 --> 00:07:18.019
We will deliver an App that looks
and feels exactly like this.

00:07:18.019 --> 00:07:20.299
And that is a powerful way to pitch.

00:07:20.300 --> 00:07:25.740
So two reasons to prototype, to explore
the design or communicate your ideas.

00:07:25.740 --> 00:07:28.780
In the demo today, I'm going to
be focusing on the first one.

00:07:28.779 --> 00:07:31.889
Focusing on prototyping as a way of evolving your design.

00:07:31.889 --> 00:07:40.930
But keep in mind of the skills that you learn as a
prototyper can also be used for making great demos.

00:07:40.930 --> 00:07:43.980
Finally, who's involved in this process.

00:07:43.980 --> 00:07:47.580
Well from a design perspective, there
are three types of development teams.

00:07:47.579 --> 00:07:51.250
There is the developer or team of developers.

00:07:51.250 --> 00:07:55.189
May not necessarily have much design
expertise and that's fine.

00:07:55.189 --> 00:07:58.839
Developers can use our human interface
guidelines, they can use Interface Builder,

00:07:58.839 --> 00:08:02.299
they can put together a solid conventional UI.

00:08:02.300 --> 00:08:06.699
But if you want to innovate in the UI,
you really need some design expertise.

00:08:06.699 --> 00:08:11.519
And frequently, that's in the form of a
designer and developer working together.

00:08:11.519 --> 00:08:16.430
You also sometimes come across the people
who can do it all and that's great.

00:08:16.430 --> 00:08:23.340
But I'm going to be presenting prototyping today as
something that a designer and developer do together.

00:08:23.339 --> 00:08:27.889
Prototyping is a collaboration between
the designer and the developer.

00:08:27.889 --> 00:08:34.569
Ideally sitting at the same desk, at the same time one in
Xcode, one in Photoshop, just jamming together synching

00:08:34.570 --> 00:08:38.300
up every ten minutes to play with the
prototype and discuss new directions.

00:08:38.299 --> 00:08:40.259
It's an activity that they do together.

00:08:40.259 --> 00:08:46.309
So that's prototyping from a really high level

00:08:46.309 --> 00:08:47.469
Now I'd like to show you how it's done.

00:08:47.470 --> 00:08:52.529
What we're going to do here is going to have a demo,
which will last for most of the rest of the session.

00:08:52.529 --> 00:08:56.639
I'm going to present you with an idea for a great new App.

00:08:56.639 --> 00:09:02.189
We're going to kind of work through the
design, our hypothetical designer is going

00:09:02.190 --> 00:09:08.690
to be giving us visual mockups and we're going to use these
mockups as a starting point for the prototyping process.

00:09:08.690 --> 00:09:12.710
We'll go through that and what we're going to
find is that the design we end up with is going

00:09:12.710 --> 00:09:15.030
to be very different from the design we start with.

00:09:15.029 --> 00:09:23.509
So let me tell you about the App that
we're going to be designing today.

00:09:23.509 --> 00:09:29.470
You wake up one morning with an amazing idea.

00:09:29.470 --> 00:09:33.610
Because you have seen the future of human communication.

00:09:33.610 --> 00:09:34.509
[ Laughter ]

00:09:34.509 --> 00:09:39.789
You know everyone is talking about Facebook and
Twitter and whatnot, but to you that's all old news.

00:09:39.789 --> 00:09:48.209
You have seen further and you know that soon,
everybody will be communicating in the form of LOLcats.

00:09:48.210 --> 00:09:50.210
[ Laughter ]

00:09:50.210 --> 00:09:52.210
[ Applause ]

00:09:52.210 --> 00:10:04.320
So for those of you who are fortunate enough to be
unfamiliar with LOLcats, this is an internet fad

00:10:04.320 --> 00:10:07.760
which involves finding an adorable
picture of a cat, sticking a caption on it

00:10:07.759 --> 00:10:11.689
in mangled English and that's really about it.

00:10:11.690 --> 00:10:15.330
So there are dozens of websites
devoted to collecting these images.

00:10:15.330 --> 00:10:22.210
There are tools that allow you to make them more
easily, but no one has ever thought of -- until you --

00:10:22.210 --> 00:10:28.259
No one has ever thought of using
LOLcats as the basis of a chat program.

00:10:28.259 --> 00:10:29.529
LOLchats.

00:10:29.529 --> 00:10:35.759
[ Laughter ]

00:10:35.759 --> 00:10:48.230
This is a revolutionary new App that allows you to
send a message to friends in the form of cat pictures.

00:10:48.230 --> 00:10:48.450
[ Applause ]

00:10:48.450 --> 00:10:48.670
[ Inaudible audience comment]

00:10:48.669 --> 00:10:48.889
[ Laughter ]

00:10:48.889 --> 00:10:54.029
I expect to see five of these on
the App Store tomorrow morning.

00:10:54.029 --> 00:10:56.539
[ Laughter ]

00:10:56.539 --> 00:11:03.719
So you come up with this idea, you're super excited
you know, you even do the math, it all works out and,

00:11:03.720 --> 00:11:06.129
[ Laughter ]

00:11:06.129 --> 00:11:11.600
You decide that you have to go ahead with
this idea; that you have to make LOLchats.

00:11:11.600 --> 00:11:13.110
So let's do that right now.

00:11:13.110 --> 00:11:16.389
Let's design this App.

00:11:16.389 --> 00:11:18.019
Where do we begin.

00:11:18.019 --> 00:11:21.730
Well the way a lot of people, the way
a lot of people approach the design

00:11:21.730 --> 00:11:24.210
of their App is they start thinking about the functionality.

00:11:24.210 --> 00:11:25.980
What does the App do?

00:11:25.980 --> 00:11:28.810
In this case, this is a messaging App right?

00:11:28.809 --> 00:11:31.599
So it has to send messages and receive messages.

00:11:31.600 --> 00:11:35.580
And then you know this kind of leads to thinking
okay, sending messages means sending to the,

00:11:35.580 --> 00:11:38.840
sending data to the server, it's a particular
format and our backend has to handle it and it has

00:11:38.840 --> 00:11:44.940
to use a push notification service and you
start spiraling through this technology quicksand.

00:11:44.940 --> 00:11:48.820
Where you're thinking more about
the implementation than the design.

00:11:48.820 --> 00:11:51.620
Design is about looking at things
from the user's perspective.

00:11:51.620 --> 00:11:59.220
So you have to back up and you have to say
okay, our user, let's even give him a name: Bob.

00:11:59.220 --> 00:12:00.450
Our user Bob.

00:12:00.450 --> 00:12:02.520
Bob wants to send a message.

00:12:02.519 --> 00:12:07.039
Bob pulls his phone out of his
pocket, he taps on your App icon.

00:12:07.039 --> 00:12:11.179
What does Bob want to see at that very moment?

00:12:11.179 --> 00:12:14.769
Well in this case, we can take a
cue from the other messaging Apps

00:12:14.769 --> 00:12:18.250
on a phone; SMS, email even making a phone call.

00:12:18.250 --> 00:12:22.740
What's the very first thing that
happens in any of those Apps?

00:12:22.740 --> 00:12:26.259
You choose the message it's going to because
that's the first thing on Bob's mind right?

00:12:26.259 --> 00:12:28.399
He's thinking, I want to send messages to Sarah.

00:12:28.399 --> 00:12:31.779
The first thing he wants to do is put in Sarah.

00:12:31.779 --> 00:12:35.079
Then Bob wants to compose the message.

00:12:35.080 --> 00:12:38.800
In this case the message consists of a
picture of a cat with some text on it.

00:12:38.799 --> 00:12:40.849
People often like working back to front.

00:12:40.850 --> 00:12:44.759
They like to establish the scene
before putting objects into the scene

00:12:44.759 --> 00:12:48.029
so Bob probably next wants to choose his background photo.

00:12:48.029 --> 00:12:50.439
He wants to choose the picture of a cat.

00:12:50.440 --> 00:12:54.200
Then he'll type the message on top of it.

00:12:54.200 --> 00:12:56.180
Are we done?

00:12:56.179 --> 00:13:00.579
Well no, because if you look at the quick
sketch on the right, the text is in front

00:13:00.580 --> 00:13:02.860
of the cat's face, it's in the wrong place.

00:13:02.860 --> 00:13:06.970
So there's another step here, which
involves arranging these objects.

00:13:06.970 --> 00:13:11.040
Now once everything looks perfect, Bob will send it off.

00:13:11.039 --> 00:13:12.209
So you see what we did here.

00:13:12.210 --> 00:13:19.379
We walked through a typical usage scenario from the
perspective of a typical user and compiled this list

00:13:19.379 --> 00:13:22.840
of tasks that the user wants to do in sequence.

00:13:22.840 --> 00:13:27.540
And this task list forms the flow of our application.

00:13:27.539 --> 00:13:30.089
This is going to be the backbone of our design.

00:13:30.090 --> 00:13:36.600
Now for the sake of time today, we're going to
concentrate just on the middle three of these five tasks.

00:13:36.600 --> 00:13:40.170
We already know what it's like to use People
Picker and sending it off isn't very interesting,

00:13:40.169 --> 00:13:47.229
so we're going to do our prototyping around choosing
a photo, typing in the caption and arranging them.

00:13:47.230 --> 00:13:53.670
So we've determined this flow, we hand it off to our
designer, who goes off and does her crazy Photoshop magic

00:13:53.669 --> 00:14:00.159
and comes back with a design and here's what she gives us.

00:14:00.159 --> 00:14:04.889
So this is a 4-page design.

00:14:04.889 --> 00:14:07.639
What's going on in this first page?

00:14:07.639 --> 00:14:11.529
Well our designer was saying, okay we're probably
going to have hundreds of photos of cats,

00:14:11.529 --> 00:14:13.819
we need to break them into categories somehow.

00:14:13.820 --> 00:14:15.940
A good category scheme might be by mood.

00:14:15.940 --> 00:14:19.210
If you want to send a happy message you tap
on the happy icon and you get happy cat.

00:14:19.210 --> 00:14:24.060
If you want to send, if you're sleepy, you can
tap on the tired icon and choose the tired cat.

00:14:24.059 --> 00:14:26.069
It's a reasonable category scheme.

00:14:26.070 --> 00:14:29.530
So you see, on the first page we
choose a mood, choose a category.

00:14:29.529 --> 00:14:34.589
So I flip over to the second page where I have
an image browser, choose the image we want.

00:14:34.590 --> 00:14:39.680
Third page, type in the caption and then
on the fourth page we can move them around.

00:14:39.679 --> 00:14:45.099
That looks like a good starting point for the design.

00:14:45.100 --> 00:14:46.649
Good starting point.

00:14:46.649 --> 00:14:56.709
So we're going to go over to the demo machine and
start prototyping and see what comes out of it.

00:14:56.710 --> 00:15:05.769
Before I get started, before I get started, I want to
say I'm going to be throwing code around pretty quickly.

00:15:05.769 --> 00:15:10.029
It's not critical that you follow all, every line of code.

00:15:10.029 --> 00:15:15.279
This is more about how to approach a project; kind of how
to think about it and there are a hundred other sessions

00:15:15.279 --> 00:15:22.339
at WWDC about coding so don't get too hung
up if you missed a line of code or two.

00:15:22.340 --> 00:15:26.980
Just try to follow what I'm doing and why I'm doing it.

00:15:26.980 --> 00:15:33.899
[ Silence ]

00:15:33.899 --> 00:15:36.850
I'm going to create a new project.

00:15:36.850 --> 00:15:41.769
It's going to be a Windows based application,
which is as bare bones as we can get.

00:15:41.769 --> 00:15:43.059
Call it LOLchats.

00:15:43.059 --> 00:15:49.839
Going to drag in a couple of things here.

00:15:49.840 --> 00:15:54.460
I'm dragging a folder called images,
which have the art assets.

00:15:54.460 --> 00:15:58.320
That our designer is going to be
feeding us throughout this process.

00:15:58.320 --> 00:16:03.430
And I'm also going to drag in a little
bit of code called UI View Editions,

00:16:03.429 --> 00:16:07.049
which have some handy methods for
prototyping; I'll show those to you.

00:16:07.049 --> 00:16:12.089
There's not, there's not too much here.

00:16:12.090 --> 00:16:19.940
It's, I'm just adding a constructor to iView called view
a parent which is, it creates a view with a super, super,

00:16:19.940 --> 00:16:26.090
super view and then calling out things like
XY with height with explicit properties.

00:16:26.090 --> 00:16:29.830
The reason being that we're going to
be moving views around all the time.

00:16:29.830 --> 00:16:31.910
That's basically all we're going
to be doing is moving views around.

00:16:31.909 --> 00:16:35.019
So it's helpful to have those called out as properties.

00:16:35.019 --> 00:16:38.000
Other than that, there are no tricks up
my sleeve; I'm starting from scratch.

00:16:38.000 --> 00:16:38.070
So,

00:16:38.070 --> 00:16:38.690
[ Clearing throat ]

00:16:38.690 --> 00:16:46.700
Let's take a look at the view tree; I'm
going to be coming back to this a lot

00:16:46.700 --> 00:16:50.890
because basically our entire App is
going to be constructed in the view tree.

00:16:50.889 --> 00:16:53.639
Right now there is one view; it is the window.

00:16:53.639 --> 00:16:56.439
We're going to create a subview called root.

00:16:56.440 --> 00:17:00.020
This is going to be a subclass of UIView,
it's going to take up the entire window

00:17:00.019 --> 00:17:02.679
and this is going to serve as our, our base of operations.

00:17:02.679 --> 00:17:09.789
This is where the action is going to happen.

00:17:09.789 --> 00:17:13.899
Let me do that.

00:17:13.900 --> 00:17:15.290
Create a file called root.

00:17:15.289 --> 00:17:21.909
And it's init method which is called when root is first
created, I am going to set it sized to the window size

00:17:21.910 --> 00:17:27.670
and I'm going to give it a nice red background color
just so when I first test it we know it's there.

00:17:27.670 --> 00:17:34.110
Open the App delegate, I'm going, and the application
didn't finish launching I'm going to instantiate root,

00:17:34.109 --> 00:17:38.589
as a subview of the window and that is the last
time we're going to touch the App delegate.

00:17:38.589 --> 00:17:43.750
Everything from now on is going
to happen in, in the view tree.

00:17:43.750 --> 00:17:52.180
So here we can see our nice red root taking up the entire
window and now we're ready to start prototyping the App.

00:17:52.180 --> 00:17:56.940
So where do we begin?

00:17:56.940 --> 00:17:59.720
Every prototype begins in exactly the same way.

00:17:59.720 --> 00:18:03.110
Every stage in every prototype begins exactly the same way.

00:18:03.109 --> 00:18:08.369
The first step is always get the picture on the screen.

00:18:08.369 --> 00:18:13.649
Take that visual mockup that your designer
made in Photoshop and put it onto the device.

00:18:13.650 --> 00:18:20.590
And there's a number of reasons why we always begin
this way and I will show those to you after we do it.

00:18:20.589 --> 00:18:26.289
So here in the view tree I'm going to add a
subview of root, it's going to be a UI image view,

00:18:26.289 --> 00:18:32.789
which simply displays a static picture, and we're just
going to use the PNG file that our designer gave us

00:18:32.789 --> 00:18:35.430
for the first page of our four page design.

00:18:35.430 --> 00:18:39.610
Just simply going to put it on the screen.

00:18:39.609 --> 00:18:44.029
Over here in root's init method,
that is going to be one line of code.

00:18:44.029 --> 00:18:48.740
We're going to instantiate UI image
view as a subview of root.

00:18:48.740 --> 00:18:56.279
And we're going to set its image to that PNG file.

00:18:56.279 --> 00:18:59.920
Build and go.

00:18:59.920 --> 00:19:04.120
So why do we begin by putting this picture on the screen?

00:19:04.119 --> 00:19:05.049
There's a number of reasons.

00:19:05.049 --> 00:19:11.589
One of them is that it is already valuable
in this state; we can already learn from it.

00:19:11.589 --> 00:19:17.079
What you see here looked fine in Photoshop,
it looks fine up here in this simulator.

00:19:17.079 --> 00:19:22.000
It's not until you actually run on the device
and try to hit those icons that you realize

00:19:22.000 --> 00:19:24.890
that those rows are way too close together.

00:19:24.890 --> 00:19:31.970
The tip of your finger actually covers almost two full rows
and it's really uncomfortable to try to hit those targets.

00:19:31.970 --> 00:19:35.900
You can't tell that from the static, you can't
tell that from the picture on the screen.

00:19:35.900 --> 00:19:40.810
You have to see that on the device
and try to interact with it.

00:19:40.809 --> 00:19:44.480
So for the sake of this demo, I'm going to
be running everything in this simulator just

00:19:44.480 --> 00:19:46.339
so it's up on the screen and you can see it.

00:19:46.339 --> 00:19:50.919
But when you're prototyping, you always run
on the device because that's the entire point

00:19:50.920 --> 00:19:53.490
of prototyping is to see how things feel.

00:19:53.490 --> 00:19:57.009
So we already discovered a problem here.

00:19:57.009 --> 00:20:00.589
These are too close together; that is easy enough to solve.

00:20:00.589 --> 00:20:06.369
Our designer gives us a new PNG which
has been spaced out a little more.

00:20:06.369 --> 00:20:11.259
And we run that on the device.

00:20:11.259 --> 00:20:17.579
We try interacting with it and
it feels a lot more comfortable.

00:20:17.579 --> 00:20:21.730
The second reason we always begin by
putting the static picture on the screen is

00:20:21.730 --> 00:20:25.630
that it gives us a starting point to
build out the rest of the prototype.

00:20:25.630 --> 00:20:29.690
We can say, okay, given this, what
do we want to explore now?

00:20:29.690 --> 00:20:31.660
What do we want to learn.

00:20:31.660 --> 00:20:37.190
And I think what we want to explore right
now is navigating among those four pages.

00:20:37.190 --> 00:20:41.880
We want to see what it feels like to go from page
to page to see if there is any awkward transitions.

00:20:41.880 --> 00:20:49.120
In a real App, the way that you navigate between
pages is you use the UI navigation controller.

00:20:49.119 --> 00:20:52.969
But that's kind of heavy machinery
for what we're trying to do here.

00:20:52.970 --> 00:20:58.009
You know it requires a bunch of other view controllers
and it instantiates views and requires support objects

00:20:58.009 --> 00:21:03.170
and configuration and you know we just want to get
some pictures on the screen and slide them around.

00:21:03.170 --> 00:21:08.620
So the easiest thing is to just do exactly that.

00:21:08.619 --> 00:21:12.219
Over here in the view tree, I'm going
to add a few more subviews of root.

00:21:12.220 --> 00:21:17.140
So we're going to add one UI image
view, one static picture for each page

00:21:17.140 --> 00:21:20.030
and simply use those mockups that our designer gave us.

00:21:20.029 --> 00:21:22.609
And we're simply going to slide them around.

00:21:22.609 --> 00:21:24.689
It's going to look like this.

00:21:24.690 --> 00:21:30.269
First page is going to be on the screen and the
other views are still in the view tree but still kind

00:21:30.269 --> 00:21:32.789
of hanging out off the right edge of the window.

00:21:32.789 --> 00:21:38.319
And then as we page through, we simply slide then
onto the window, slide them off the left side.

00:21:38.319 --> 00:21:43.389
This is not how a UI navigation controller
works but it's super easy for us to implement.

00:21:43.390 --> 00:21:48.400
So we're just going to do it that way.

00:21:48.400 --> 00:22:02.180
So here in root I'm going to add one UI image view per page.

00:22:02.180 --> 00:22:08.029
So now we're just instantiating static
pictures for each page in the design.

00:22:08.029 --> 00:22:12.389
And I'm going to add a property to root called page index;

00:22:12.390 --> 00:22:16.980
which simply says which page is currently
on the screen, zero, one, two or three.

00:22:16.980 --> 00:22:18.470
We implement that here.

00:22:18.470 --> 00:22:22.150
Again it's not critical that you follow
this code but it's pretty straightforward.

00:22:22.150 --> 00:22:24.720
When I set the page index, I do a bounce check.

00:22:24.720 --> 00:22:31.100
I begin an animation block and then go through each subview,
each page, setting its X coordinate to either offstage

00:22:31.099 --> 00:22:35.230
to the left, offstage to the right or right on the screen.

00:22:35.230 --> 00:22:40.250
And I'm going to set the initial page to zero.

00:22:40.250 --> 00:22:44.910
So now we have a property which
supposedly slides these views around.

00:22:44.910 --> 00:22:46.860
How do we test it?

00:22:46.859 --> 00:22:52.509
Well it's, there's one really easy way of testing
anything which is just throw in the touch handler.

00:22:52.509 --> 00:22:59.549
So here I'm implementing the touch send method which
is called when, when a finger goes up on the device.

00:22:59.549 --> 00:23:06.750
What we're saying here basically is any time a touch is,
happens anywhere, we're going to slide to the next page.

00:23:06.750 --> 00:23:10.569
Let's see how it works.

00:23:10.569 --> 00:23:16.519
So a little initial animation which we can
ignore and so here we have our first page

00:23:16.519 --> 00:23:18.650
and I can say oh I want to see happy cats, tap.

00:23:18.650 --> 00:23:21.330
I want to see this cat, tap.

00:23:21.329 --> 00:23:22.319
I'm on this page.

00:23:22.319 --> 00:23:23.639
Maybe I go to the next page.

00:23:23.640 --> 00:23:25.240
So we're already sliding through views.

00:23:25.240 --> 00:23:30.059
We, there's just a little handful of code;
we didn't have to mess with controllers.

00:23:30.059 --> 00:23:33.409
We're already starting to experience what
it's like to navigate between the pages.

00:23:33.410 --> 00:23:38.450
But what we really want to see here is
what it's like to go back and forth.

00:23:38.450 --> 00:23:40.509
Right now we're just going forth.

00:23:40.509 --> 00:23:44.529
We want to be able to go back.

00:23:44.529 --> 00:23:49.039
The right way of course of handling going back is you
have this button going up here on the navigation bar

00:23:49.039 --> 00:23:51.849
but I don't want to deal with putting
buttons in the view tree.

00:23:51.849 --> 00:23:53.259
I don't even want to deal with hit testing.

00:23:53.259 --> 00:23:57.559
What's the simplest thing I could possibly do?

00:23:57.559 --> 00:24:03.909
Well why don't we say that any touch above
this line, this horizontal line right here,

00:24:03.910 --> 00:24:07.140
any touch up in this area will take us back.

00:24:07.140 --> 00:24:10.480
Any touch down here will take us forward.

00:24:10.480 --> 00:24:13.190
So root right now is one giant button.

00:24:13.190 --> 00:24:17.440
I'm basically segmenting it into two giant buttons.

00:24:17.440 --> 00:24:19.539
And that's easy enough to do.

00:24:19.539 --> 00:24:20.649
Here end touch is ended.

00:24:20.650 --> 00:24:23.330
I say, was the touch at the top of the screen?

00:24:23.329 --> 00:24:24.609
Was it up in that navigation bar?

00:24:24.609 --> 00:24:30.439
If it was, I go back a page, if so, I go forward a page.

00:24:30.440 --> 00:24:31.799
Build and go.

00:24:31.799 --> 00:24:33.509
You can say, oh let's see.

00:24:33.509 --> 00:24:34.839
I want a happy cat.

00:24:34.839 --> 00:24:36.069
I want this cat.

00:24:36.069 --> 00:24:38.299
Wait, go back, I wanted that cat instead.

00:24:38.299 --> 00:24:39.690
Go to the next page.

00:24:39.690 --> 00:24:41.680
Oh wait, go back and change my caption.

00:24:41.680 --> 00:24:44.890
I can see what it's like to navigate between these pages.

00:24:44.890 --> 00:24:51.640
I didn't have to set up any controllers I didn't even have
to create you know, custom views or anything like that.

00:24:51.640 --> 00:24:57.020
I'm just using those static mockups that
our designer gave us from Photoshop.

00:25:00.039 --> 00:25:10.279
So here we can navigate around and see if
there's any strange transitions between pages.

00:25:10.279 --> 00:25:22.470
You know, I'm finding that the transition between
this page and this page feels really awkward to me.

00:25:22.470 --> 00:25:30.019
I think the reason is whenever you have a collection of
thumbnails, not just on the phone, but in any context,

00:25:30.019 --> 00:25:36.049
when you have, you have a collection of thumbnails and
you select one of them, you select this thumbnail image,

00:25:36.049 --> 00:25:39.500
the next thing you always want
to see is the full-size image.

00:25:39.500 --> 00:25:43.829
You know, here I, I'm looking around, I
choose my cats, a little picture of a cat.

00:25:43.829 --> 00:25:47.419
I tap on it, the next thing I want to see is a nice big cat.

00:25:47.420 --> 00:25:48.840
I want to see the cat I chose.

00:25:48.839 --> 00:25:51.569
But instead what I get is almost claustrophobic.

00:25:51.569 --> 00:25:54.039
I have this big navigation bar up here, a big keyboard here,

00:25:54.039 --> 00:25:57.109
and a bunch of text in the middle
and I can't even see the cat I chose.

00:25:57.109 --> 00:26:00.159
He's all covered up.

00:26:00.160 --> 00:26:04.210
So this is, this could be a problem with the design.

00:26:04.210 --> 00:26:10.269
But at the same time this is not a very
faithful prototype of this particular page.

00:26:10.269 --> 00:26:14.559
Because when we first come to this
page, the text won't be there yet.

00:26:14.559 --> 00:26:19.259
We'll come to this page, the upper half
will be empty and we'll type text into it.

00:26:19.259 --> 00:26:26.829
So I think we need to understand what it's
like to come to this page and add text to it.

00:26:28.019 --> 00:26:31.289
Basically the static mockup of this page is not cutting it.

00:26:31.289 --> 00:26:33.440
So here's what we're going to do.

00:26:33.440 --> 00:26:46.539
The, third UI image view there, we're going to replace that
with a custom subclass of UI image view called caption page.

00:26:46.539 --> 00:26:51.569
And what I've done here, you know it looks
simple, but it's an extremely important pattern

00:26:51.569 --> 00:26:55.099
and it almost forms the basis of this style of prototyping.

00:26:55.099 --> 00:27:00.579
You start out by just slapping static pictures
on the screen, putting down UI image views.

00:27:00.579 --> 00:27:04.250
Whenever you need to dive deeper on one
of them, whenever you need to explore more

00:27:04.250 --> 00:27:10.670
than that static picture is letting you, you pull
it out into its own class and that gives you a place

00:27:10.670 --> 00:27:14.090
where you can add behavior, add
methods, add subviews as needed.

00:27:14.089 --> 00:27:17.639
So let's do that.

00:27:17.640 --> 00:27:25.340
We're going to create a new subview of UI image view,
subclass of UI image view, call it caption page.

00:27:25.339 --> 00:27:29.839
Going to add one line of code to its init method,

00:27:29.839 --> 00:27:34.349
which simply sets its page background
to the mockup that we're already using.

00:27:34.349 --> 00:27:43.019
Over here in root we're going to hook it up, we're
going to replace the instantiation of a static picture

00:27:43.019 --> 00:27:46.109
with the instantiation of our custom class.

00:27:46.109 --> 00:27:49.809
Now when we run it, it should behave
exactly as it did before.

00:27:49.809 --> 00:27:59.299
The only difference being that this page now has its own
class and we have a space where we can start customizing it.

00:27:59.299 --> 00:28:04.190
So I think the first thing that we need to do is get
rid of this text that, this text is currently baked

00:28:04.190 --> 00:28:10.549
into the image background and we need, we want to explore
what it's like to add text when we're coming to this page.

00:28:10.549 --> 00:28:14.059
So we need to get rid of this text that's baked in.

00:28:14.059 --> 00:28:23.139
We ask our designer for a new image and she hands
over a caption page background and here we are.

00:28:23.140 --> 00:28:29.580
Now we're ready to prototype adding text to this page.

00:28:29.579 --> 00:28:31.980
How do we do that?

00:28:31.980 --> 00:28:36.289
Well there's actually no API for
directly interacting with a keyboard,

00:28:36.289 --> 00:28:39.930
so we're going to have to create a
hidden UI text view or text field

00:28:39.930 --> 00:28:42.470
and give it focus, trap changes to that text field.

00:28:42.470 --> 00:28:48.319
Then we want to render the text in our
custom font which means that we have to drop

00:28:48.319 --> 00:28:52.609
down to core graphics and load
a a CT font ref and -- time out.

00:28:52.609 --> 00:28:56.729
I have just spent more than 10
seconds talking about technology.

00:28:56.730 --> 00:29:03.110
If you're prototyping and you spend more than 10
seconds talking about technology, you need to stop,

00:29:03.109 --> 00:29:06.839
take a step back and say, how can I fake this.

00:29:06.839 --> 00:29:09.279
It's too much hassle to do it the right way.

00:29:09.279 --> 00:29:15.700
How can I fake this most easily and simply and
still get at the essence of that interaction?

00:29:15.700 --> 00:29:19.529
How do we fake text rendering in this case?

00:29:19.529 --> 00:29:21.299
Well that's easy.

00:29:21.299 --> 00:29:28.849
We turn to our designer, who's looking in Photoshop and you,
and we say, can you render me out some, some images please.

00:29:28.849 --> 00:29:36.039
I need an image that says I and I can,
can has, basically one for each word.

00:29:36.039 --> 00:29:42.899
So our designer takes 10 seconds, creates these
five images in Photoshop, hands them over to you.

00:29:42.900 --> 00:29:48.790
Over in our view tree on our side, we create a subview
of caption page, which is again the UI image view,

00:29:48.789 --> 00:29:54.329
static picture, which simply cycles through
those images that our designer gave us.

00:29:54.329 --> 00:30:00.949
So let's do that.

00:30:00.950 --> 00:30:08.069
Over here in caption page I'm going to add an
instance variable for the subview and to keep track

00:30:08.069 --> 00:30:16.869
of which caption is currently being shown, then in caption
page init method, I'm going to instantiate a UI image view

00:30:16.869 --> 00:30:19.429
but I'm not going to give it an image yet.

00:30:19.430 --> 00:30:25.240
That's going to happen in this method expand caption,
which simply cycles through the numbers one through five,

00:30:25.240 --> 00:30:30.630
sets the caption to that particular image
and then positions it nicely on the screen.

00:30:30.630 --> 00:30:32.340
Now how do we test this out?

00:30:32.339 --> 00:30:34.079
The same way we did before.

00:30:34.079 --> 00:30:36.230
We just throw in a touch handler.

00:30:36.230 --> 00:30:40.390
So here's implementing the touch and send method.

00:30:40.390 --> 00:30:43.490
Any time you touch anywhere it's
going to call it expand caption.

00:30:43.490 --> 00:30:47.470
Now let's see what happens.

00:30:47.470 --> 00:30:48.180
So here's my App.

00:30:48.180 --> 00:30:54.160
I can say, I want to see happy cats, I want to see this
cat, I'll type in some text, tap, tap, tap, tap, tap.

00:30:54.160 --> 00:30:56.900
Now there we go.

00:30:56.900 --> 00:31:00.910
Fake keyboard, fake text, it's good enough.

00:31:00.910 --> 00:31:03.430
It's good enough for understanding its interaction.

00:31:03.430 --> 00:31:06.140
Why is it good enough?

00:31:06.140 --> 00:31:09.690
Because we already know what it's
like to type on the iPhone keyboard.

00:31:09.690 --> 00:31:11.400
That's not what we're trying to prototype here.

00:31:11.400 --> 00:31:20.060
What we're trying to prototype is coming to this page
and adding text to it and this hack is perfectly adequate

00:31:20.059 --> 00:31:24.389
for exploring that particular interaction
for understanding what that's like.

00:31:24.390 --> 00:31:28.880
So we have to still type a loose end on this page.

00:31:28.880 --> 00:31:33.920
Right now if I tap anywhere, it's
going to expand the caption.

00:31:33.920 --> 00:31:37.700
We still want to be able to go back and forward,
so I'm going to do the same trick I did before.

00:31:37.700 --> 00:31:42.610
Any touch above this line, any touch up in here
is going to take us back and to go forward.

00:31:42.609 --> 00:31:46.549
How do we go forward from this page.

00:31:46.549 --> 00:31:49.759
Maybe we didn't think about that during the design.

00:31:49.759 --> 00:31:54.029
Well let's say for now hitting
the return key takes you forward.

00:31:54.029 --> 00:31:55.829
Maybe we'll revisit that later.

00:31:55.829 --> 00:32:00.789
So we'll say any touch below this line will take us forward.

00:32:02.279 --> 00:32:03.980
That's real easy to do.

00:32:03.980 --> 00:32:04.940
Here touch is ended.

00:32:04.940 --> 00:32:06.680
We say what's that touch at the top?

00:32:06.680 --> 00:32:07.460
What's that at the bottom?

00:32:07.460 --> 00:32:09.200
Is that the top or the bottom?

00:32:09.200 --> 00:32:14.650
We call super implementation which passes the event up
the responder chain to root, the root does the slide pages

00:32:14.650 --> 00:32:18.700
around thing that root does, otherwise
we expand the caption.

00:32:18.700 --> 00:32:23.740
It goes like this, I can choose my mood.

00:32:23.740 --> 00:32:26.880
I want this cat, type, type, type, type, type.

00:32:26.880 --> 00:32:27.990
Wait go back.

00:32:27.990 --> 00:32:29.779
I wanted this cat instead.

00:32:29.779 --> 00:32:34.779
Change the caption, hit return,
I go to the next page, go back.

00:32:34.779 --> 00:32:38.700
We're really starting to understand what it's
like to navigate through this App and this is

00:32:38.700 --> 00:32:42.890
like you know a couple dozen lines of code.

00:32:44.359 --> 00:32:48.059
So now let's take a look at this page.

00:32:48.059 --> 00:32:49.279
The arrange page.

00:32:49.279 --> 00:32:53.039
The entire point of this page is a custom interaction.

00:32:53.039 --> 00:32:57.069
We are, the point of this page is
that we can drag the text around.

00:32:57.069 --> 00:33:01.230
And so the static mockup is definitely not cutting it here.

00:33:01.230 --> 00:33:02.110
So we need to,

00:33:02.109 --> 00:33:02.169
[ Clearing throat ]

00:33:02.170 --> 00:33:08.120
We need to dive deeper on this page and
implement dragging this text around.

00:33:08.119 --> 00:33:10.979
I'm going to do it the same way we did before.

00:33:10.980 --> 00:33:19.809
Replace the last UI image view with its own class and moving
a little more quickly now, we're going to give it a subview,

00:33:19.809 --> 00:33:22.940
which is going to be a subclass
of UI image view called caption,

00:33:22.940 --> 00:33:27.330
which is just going to be a static picture
that knows how to drag itself around.

00:33:27.329 --> 00:33:48.349
Let me create the arrange page and
over in root I'm going to hook it up.

00:33:48.349 --> 00:33:54.839
So replacing the picture of the arrange page
with an instantiation of our custom class.

00:33:54.839 --> 00:33:59.159
Over here in arrange pages init method, I'm going to

00:33:59.160 --> 00:33:59.860
[ Clearing throat ]

00:33:59.859 --> 00:34:06.149
Set the background, instantiate this caption class which
we haven't created yet and position it next to that

00:34:06.150 --> 00:34:08.420
on the screen and that's all we have to do there.

00:34:08.420 --> 00:34:12.150
Now let's quickly create that caption class.

00:34:16.250 --> 00:34:22.590
We're going to set its background image
and implement some touch handlers.

00:34:22.590 --> 00:34:26.079
Here's three lines of code to make any view drag-aroundable.

00:34:26.079 --> 00:34:31.840
Basically saying how much has the touch moved since
the last touch and adding that to our current position.

00:34:31.840 --> 00:34:34.400
Now we can get our hands on this view and drag it around.

00:34:34.400 --> 00:34:38.920
Let's see what it's like.

00:34:38.920 --> 00:34:46.150
I choose my mood, choose my cat, type in some
text, go to the next page, drag it around.

00:34:46.150 --> 00:34:51.019
This is really starting to feel like a convincing App.

00:34:53.219 --> 00:35:00.239
And again, the point of this process is not to just
chug through these steps, but at every point you stop,

00:35:00.239 --> 00:35:02.919
you play with it, you say, what feels good?

00:35:02.920 --> 00:35:04.210
What feels bad?

00:35:04.210 --> 00:35:05.329
What new questions have come up?

00:35:05.329 --> 00:35:06.869
What can I learn from this?

00:35:06.869 --> 00:35:08.309
Even something as simple as this.

00:35:08.309 --> 00:35:12.039
Just being able to drag text around on a background.

00:35:12.039 --> 00:35:14.309
There's so much that we can learn from this.

00:35:14.309 --> 00:35:16.219
So, so many ideas come up.

00:35:16.219 --> 00:35:20.489
For example, what should happen if I do this?

00:35:20.489 --> 00:35:21.919
Should it rewrap?

00:35:21.920 --> 00:35:23.460
Should it rewrap and right-justify?

00:35:23.460 --> 00:35:24.840
Maybe the text should get smaller.

00:35:24.840 --> 00:35:26.890
Maybe there should be a slider to make the text smaller.

00:35:26.889 --> 00:35:29.480
Maybe we could use two-finger pinch
to make the text smaller.

00:35:29.480 --> 00:35:34.500
Just, maybe there should be buttons to change
the justification from left to right or maybe,

00:35:34.500 --> 00:35:39.730
maybe it should snap, like Keynote or Omnigraphal
where it snaps to the center or snaps to the edges.

00:35:39.730 --> 00:35:46.980
Lots and lots of ideas can come up, can come out of
just being able to drag an image around on a background.

00:35:46.980 --> 00:35:53.159
This happens all the time.

00:35:54.769 --> 00:36:04.329
But you know what's, what's really bugging me about this
right now is the transition between this page and this page.

00:36:04.329 --> 00:36:07.909
This feels really weird to me.

00:36:07.909 --> 00:36:15.440
Here we have our text on top of our background and then
on the next page we have, we also have our text on top

00:36:15.440 --> 00:36:21.690
of the background, but it's the same thing but it's
in two different places, it's on two different pages.

00:36:21.690 --> 00:36:25.829
Like the only change here is the keyboard sliding
out to the left, which is itself kind of weird.

00:36:25.829 --> 00:36:32.659
And so this feels really awkward having
the same thing on two different pages.

00:36:32.659 --> 00:36:35.369
So what can we do about this?

00:36:35.369 --> 00:36:38.029
You know this looked fine in Photoshop.

00:36:38.030 --> 00:36:44.190
It's not until we're actually feeling what it's like to
navigate between the pages that we notice this awkwardness.

00:36:44.190 --> 00:36:48.990
You know it almost feels like this
page shouldn't even be here.

00:36:48.989 --> 00:36:53.469
Like maybe we could merge this page and this page.

00:36:53.469 --> 00:36:58.509
Merge the functionality and be able to
arrange things directly from this page.

00:36:58.510 --> 00:37:03.290
I mean that might not work because there's this keyboard in
the way, but maybe we could get rid of the keyboard somehow,

00:37:03.289 --> 00:37:06.139
like if there's a button to make
the keyboard go down or something.

00:37:06.139 --> 00:37:08.099
Maybe it could go away automatically.

00:37:08.099 --> 00:37:12.650
I'm not really sure yet, but the
point is this idea has come up.

00:37:12.650 --> 00:37:21.550
We have the idea of somehow getting rid of this
page and merging its functionality into this page.

00:37:21.550 --> 00:37:25.030
And when new ideas come up, a prototyper
has to jump on them.

00:37:25.030 --> 00:37:27.630
Has to say, let's try it.

00:37:27.630 --> 00:37:33.720
Don't get dragged into meetings and talk about for
hours whether you should have this page here or not.

00:37:33.719 --> 00:37:40.559
Just try it out, throw it into the prototype, see how it
feels, even if you haven't thought it all the way through.

00:37:40.559 --> 00:37:42.940
So we're going to do that.

00:37:42.940 --> 00:37:47.500
What we're going to do, the last arrange
page, we're just going to chop it out

00:37:47.500 --> 00:37:51.900
and then on the caption page we're going
to change its subview to an instance

00:37:51.900 --> 00:37:54.970
of our caption class, which knows how to drag itself around.

00:37:54.969 --> 00:37:58.099
We're just going to try that out, see how it feels.

00:37:58.099 --> 00:38:03.299
So over here in root, I'm just
going to get rid of arrange page.

00:38:03.300 --> 00:38:07.269
I realize I've only created this class
five minutes ago; now it's already gone.

00:38:07.269 --> 00:38:10.579
That's how things go when you're prototyping.

00:38:10.579 --> 00:38:16.110
Over here in caption page, we're going
to instantiate, instead of UI image view,

00:38:16.110 --> 00:38:19.420
instantiate the caption class, which
knows how to drag itself around.

00:38:19.420 --> 00:38:23.990
And then over in caption we want to get rid of
its initial image so initially it appears blank.

00:38:23.989 --> 00:38:27.099
So three little changes to the code.

00:38:27.099 --> 00:38:28.429
Let's see how it feels.

00:38:28.429 --> 00:38:34.009
Change my mood, change my cat, type in
some text and I can drag the text around.

00:38:34.010 --> 00:38:37.520
So that seems nice.

00:38:37.519 --> 00:38:40.679
We still have this keyboard problem right?

00:38:40.679 --> 00:38:46.279
That we want the keyboard to get out of the
way when we start, when we're arranging things.

00:38:46.280 --> 00:38:52.019
But one of the great things about having a working
prototype in this state is you don't have to imagine

00:38:52.019 --> 00:38:55.969
when would be the right thing, when
would be the right time to do this.

00:38:55.969 --> 00:39:00.939
You can actually play with it and ask yourself, what are
you expecting to happen and when are you expecting it

00:39:00.940 --> 00:39:04.340
to happen you know, because there's
all these possibilities here.

00:39:04.340 --> 00:39:06.400
Maybe there's a button to make the keyboard go away.

00:39:06.400 --> 00:39:09.150
Maybe it will go away when I touch down on the text.

00:39:09.150 --> 00:39:13.680
Maybe it will go away when I kind of
drag the text past the keyboard region.

00:39:13.679 --> 00:39:18.819
But when I'm actually playing with it what
I'm expecting to happen is I'm expecting

00:39:18.820 --> 00:39:23.000
that keyboard to go away as soon as the text is moved.

00:39:23.000 --> 00:39:26.880
That's what seems to feel right to me
because as soon as I move the text,

00:39:26.880 --> 00:39:30.460
I feel like I'm in arrange mode
and I want the App to respect that.

00:39:30.460 --> 00:39:34.800
I want the App to say, oh he's in arrange
mode now, we're going to get out of his way.

00:39:34.800 --> 00:39:37.620
So that's my hunch.

00:39:37.619 --> 00:39:41.539
That's kind of what I'm expecting
by playing with this prototype.

00:39:41.539 --> 00:39:45.639
Let's try it out, throw it in, see how it actually feels.

00:39:51.329 --> 00:40:10.829
So over here in caption, we're going to add a method called
page, which simply returns the page that the caption's on.

00:40:10.829 --> 00:40:13.429
Basically casts the super view.

00:40:13.429 --> 00:40:17.179
Then over here in touch is moved,
we're going to simply notify our page

00:40:17.179 --> 00:40:21.409
that the caption moved and end touch was ended.

00:40:21.409 --> 00:40:26.940
We're going, if it was tapped, we're going to
notify the page that the caption was tapped.

00:40:26.940 --> 00:40:32.710
Then over in caption page, we're
going to pick up those methods.

00:40:34.239 --> 00:40:40.739
And when the caption's moved, we want the keyboard
to go away and then we also kind of decided

00:40:40.739 --> 00:40:45.849
to make the keyboard come back, let's say if we
tap on the text, the keyboard will come back.

00:40:45.849 --> 00:40:51.150
Again, there's no real easy way to use the
real keyboard, so we're going to fake it.

00:40:51.150 --> 00:40:59.829
We're just going to rip this keyboard out of the background
image and basically give the keyboard its own view

00:40:59.829 --> 00:41:05.549
and now we're able to slide it up and down and we
can pretend that it's the real iPhone keyboard.

00:41:09.170 --> 00:41:14.320
So here I'm adding instance variable to keep
track of our keyboard that we're adding.

00:41:14.320 --> 00:41:18.900
Over here in caption pages init method we're
going to replace the background with a background

00:41:18.900 --> 00:41:24.900
that does not have the keyboard baked in and
instead add the subview for the keyboard.

00:41:24.900 --> 00:41:30.119
And then let's implement those
messages coming up from caption.

00:41:30.119 --> 00:41:36.690
When the caption is moved these begin an animation block
and move the keyboard down off the bottom of the screen.

00:41:36.690 --> 00:41:41.519
When the caption is tapped we move
the keyboard up to its rightful place.

00:41:41.519 --> 00:41:46.190
Let's try it out.

00:41:46.190 --> 00:41:52.590
So I can say, I want happy cats, I want this
cat, type some text in, start dragging it,

00:41:52.590 --> 00:41:55.460
keyboard nicely gets out of my
way; I can put it wherever I want.

00:41:55.460 --> 00:42:01.099
If I want the keyboard back I can tap
on it and the keyboard comes back.

00:42:02.929 --> 00:42:09.469
So this is a nice little prototype.

00:42:09.469 --> 00:42:15.459
This really lets us understand all of
the basic interactions of this App.

00:42:15.460 --> 00:42:22.559
And there's a lot we can learn just from playing
with this from just throwing static pictures around

00:42:22.559 --> 00:42:26.759
and understanding how it feels to transition between them.

00:42:26.760 --> 00:42:31.570
But you know, let's say our designer's
playing with this prototype

00:42:31.570 --> 00:42:37.660
and something feels kind of off about the entire App.

00:42:37.659 --> 00:42:42.170
It's, this App seems kind of frontloaded.

00:42:42.170 --> 00:42:45.240
You know this is supposed to be a silly,
fun App about trading LOLcats right?

00:42:45.239 --> 00:42:49.039
But you don't actually see anything
that looks like a LOLcat until Page 3.

00:42:49.039 --> 00:42:50.730
You have to make all these decisions first.

00:42:50.730 --> 00:42:54.980
You have to choose your mood, choose your
cat, type in text and it's still kind

00:42:54.980 --> 00:43:00.469
of all covered up and it's not, the App's not fun.

00:43:00.469 --> 00:43:02.209
So let's say we go home for the night.

00:43:02.210 --> 00:43:04.980
The designer's thinking about this.

00:43:04.980 --> 00:43:14.380
The designer's going to bed thinking about this and then at
two thirty in the morning wakes up with this eureka moment.

00:43:14.380 --> 00:43:16.360
This always happens to me at two thirty in the morning.

00:43:16.360 --> 00:43:21.160
So the designer's thinking about how we're prototyping this,

00:43:21.159 --> 00:43:24.239
we merged those last two pages,
we had, it used to be four pages.

00:43:24.239 --> 00:43:26.789
We had a caption page and arrange
page, we consolidated that.

00:43:26.789 --> 00:43:29.429
We consolidated that functionality to a single page.

00:43:29.429 --> 00:43:33.579
And the designer's thinking, well maybe
we can do that for all of the pages.

00:43:33.579 --> 00:43:39.500
Maybe we can consolidate all four of
them into one single page somehow.

00:43:39.500 --> 00:43:42.380
So the designer comes into work the next day all fired up

00:43:42.380 --> 00:43:48.750
and for the next five hours there's just this crazy
whirlwind of Photoshop and proudly presents you,

00:43:48.750 --> 00:43:52.119
at the end of the day, with the new design.

00:43:52.119 --> 00:43:55.500
And it looks like this.

00:43:55.500 --> 00:43:58.460
So it's all one page.

00:43:58.460 --> 00:44:00.769
You start off with the picture on the left.

00:44:00.769 --> 00:44:04.269
You know it already, from Page 1 it
looks like a LOLchat, it looks fun.

00:44:04.269 --> 00:44:06.019
And there's these tabs along the bottom.

00:44:06.019 --> 00:44:08.239
And you hit the first tab and the
mood browser kind of slides

00:44:08.239 --> 00:44:10.539
up from the bottom and you know, you choose your mood.

00:44:10.539 --> 00:44:17.529
And the third page, on the third picture you can
see the picture browser slides up and you can,

00:44:17.530 --> 00:44:19.870
like it's got the sideways dial thing going on.

00:44:19.869 --> 00:44:21.170
You slide it back, left and right.

00:44:21.170 --> 00:44:25.250
It changes the background image and if you
hit on the caption it brings up the keyboard

00:44:25.250 --> 00:44:28.840
and you know it's all one page and it looks fun
and the designer is super excited about this

00:44:28.840 --> 00:44:31.230
because we're always super excited
when we come up with new ideas.

00:44:31.230 --> 00:44:37.579
And she's basically saying, let's throw out everything
we've done and go off in this complete new direction.

00:44:39.369 --> 00:44:43.529
I call this moment the revelation.

00:44:43.530 --> 00:44:49.290
The moment when someone realizes, you know,
our existing design is kind of garbage

00:44:49.289 --> 00:44:53.019
and here's something completely
different that's so much better.

00:44:53.019 --> 00:45:02.980
And one of the purposes of prototyping is to move the
revelation as early as possible in the development process.

00:45:02.980 --> 00:45:10.800
So when it happens, and if you're lucky, it will happen,
you're not throwing out weeks of solid engineering effort.

00:45:10.800 --> 00:45:15.490
You're throwing out, you know, you're throwing
out a hundred line prototype you run in a day.

00:45:15.489 --> 00:45:23.319
But even more than that, notice that the idea for this
new design came out of prototyping the old design.

00:45:23.320 --> 00:45:29.500
Prototyping the old design let us both understand the
problem with it and gave us a hint to the solution.

00:45:29.500 --> 00:45:35.300
When we merged those two last pages, that's what
gave the designer the idea to merge all of the pages.

00:45:35.300 --> 00:45:39.710
So we might throw out that last
prototype, but it wasn't a waste at all

00:45:39.710 --> 00:45:43.329
because it served its purpose of generating ideas.

00:45:43.329 --> 00:45:47.299
I'm not going to take you through
the code for this prototype.

00:45:47.300 --> 00:45:51.720
It's the same collection of hacks
and tricks I already showed you.

00:45:51.719 --> 00:45:56.379
I do want to show you the view tree at a higher level
because there's a subtle difference in the approach.

00:45:56.380 --> 00:45:59.500
So we begin this prototype the way
we always begin every prototype,

00:45:59.500 --> 00:46:03.489
which is simply getting the picture on the screen.

00:46:03.489 --> 00:46:08.589
It's already valuable like that and as you're
about to see, it provides a starting point

00:46:08.590 --> 00:46:10.720
to building up the rest of the prototype.

00:46:10.719 --> 00:46:15.000
What we do, now in the last design, it was four pages.

00:46:15.000 --> 00:46:18.340
So we started exploring what it's
like to navigate among those pages.

00:46:18.340 --> 00:46:22.320
Here it's just one page, but one
page with a lot of stuff on it.

00:46:22.320 --> 00:46:27.500
So the approach we use here is to break it down.

00:46:27.500 --> 00:46:32.719
We basically say, the stuff on this page,
what do we want to explore right now?

00:46:32.719 --> 00:46:34.659
And let's say it's that funny tab bar on the bottom.

00:46:34.659 --> 00:46:36.849
We want to know what it's like to interact with that.

00:46:36.849 --> 00:46:39.839
So we rip that out of the background
image, give it its own view.

00:46:39.840 --> 00:46:45.090
Now in this case we want to interact with it so we
would probably call that out into its own class.

00:46:45.090 --> 00:46:48.180
We can explore that, learn from it.

00:46:48.179 --> 00:46:51.089
When we're done with that we'd say,
okay, what do we want to explore now?

00:46:51.090 --> 00:46:54.050
Well how about this funny mood browser over here.

00:46:54.050 --> 00:46:56.590
That's supposed to slide up and
down when we hit the first tab.

00:46:56.590 --> 00:46:59.950
So rip that out of the background
image, give it its own view,

00:46:59.949 --> 00:47:03.000
now we're able to slide it up and
down when we hit the first tab.

00:47:03.000 --> 00:47:07.099
Likewise when we hit the second tab, there's
that picture browser that slides up and down.

00:47:07.099 --> 00:47:09.329
We want to see what that feels like.

00:47:09.329 --> 00:47:12.809
And of course there's the keyboard which
slides up and down when you're entering text.

00:47:12.809 --> 00:47:23.869
So basically what we're doing here is identifying the
moving parts of the design step-by-step and pulling them

00:47:23.869 --> 00:47:27.539
out into their own subviews so we can move them around.

00:47:27.539 --> 00:47:30.179
And that forms the basis of our layer tree.

00:47:30.179 --> 00:47:37.559
And then any of these we want to dive deeper on, say the
photo browser, we'd call that out into its own class.

00:47:37.559 --> 00:47:39.489
Maybe add subviews to that.

00:47:39.489 --> 00:47:43.849
Basically just kind of drill down until we
reach the level of fidelity that we want;

00:47:43.849 --> 00:47:49.000
that lets us explore what we want to about the App.

00:47:49.000 --> 00:47:55.289
So let me show you this proto.

00:47:55.289 --> 00:47:56.309
It looks like this.

00:47:56.309 --> 00:48:01.690
So from Page 1 we already have a
LOLchat basically on the screen.

00:48:01.690 --> 00:48:04.789
Maybe it's the last one that you made;
maybe it's the last one that you received.

00:48:04.789 --> 00:48:06.019
Whatever. It still looks kind of fun.

00:48:06.019 --> 00:48:11.179
We have this little translucent mood browser I can say I
want to see happy cats and it brings up the first happy cat

00:48:11.179 --> 00:48:13.929
and then I have like this little slidey thing down here.

00:48:13.929 --> 00:48:17.549
I can kind of slide down through
them and see which one looks nice

00:48:17.550 --> 00:48:21.630
or I can even kind of tap and go through them one by one.

00:48:21.630 --> 00:48:27.280
This UI element right here, this
control is really important --

00:48:27.280 --> 00:48:33.320
kind of the entire design is hinged around this custom
control here so this was prototyped with some fidelity.

00:48:33.320 --> 00:48:39.100
This was maybe, maybe a couple pages of
code to get all the interactions here

00:48:39.099 --> 00:48:41.889
because the App basically lives or dies by this control.

00:48:41.889 --> 00:48:43.679
We have to know how it feels.

00:48:43.679 --> 00:48:50.109
But, so I can like choose the cat that I want and I can
tap on caption, the keyboard comes up same fake keyboard,

00:48:50.110 --> 00:48:53.690
same fake text that we had before, same thing
that we learned from the other prototype.

00:48:53.690 --> 00:48:58.700
When I start moving the text the keyboard
goes away and I can go back and switch

00:48:58.699 --> 00:49:01.210
to this cat instead and drag this around.

00:49:01.210 --> 00:49:04.300
That's a fun little App.

00:49:05.340 --> 00:49:06.680
It's a fun little App.

00:49:06.679 --> 00:49:09.969
It feels really different than the last design.

00:49:09.969 --> 00:49:17.539
And you know, playing with it we start realizing
this feels kind of like, kind of like a canvas.

00:49:17.539 --> 00:49:23.860
You know, like a mini Keynote or Omnigraphal where you have,
where you're dragging around objects on top of a background

00:49:23.860 --> 00:49:26.900
and then you have like little toolboxes
which pop up from the bottom.

00:49:26.900 --> 00:49:34.619
It's a very different feel and when we're
thinking in this mode, it kind of gives you ideas.

00:49:34.619 --> 00:49:38.949
You start thinking, well if this is about
dragging objects around on top of a canvas,

00:49:38.949 --> 00:49:42.129
what other objects might we want to drag around?

00:49:42.130 --> 00:49:47.160
It's just text block right now, but we
could drag out, what else could we drag out?

00:49:47.159 --> 00:49:50.239
Maybe like little bits of clipart or something.

00:49:50.239 --> 00:49:54.179
Like if you could grab a hat and put it on
top of the cat or sunglasses or you know,

00:49:54.179 --> 00:49:55.909
pimp the cat out in gold chains or something like that.

00:49:55.909 --> 00:49:56.690
That could be fun.

00:49:56.690 --> 00:49:57.889
That could be cool.

00:49:57.889 --> 00:50:02.989
And so again, when a new idea comes
up, a prototyper says, let's try it.

00:50:02.989 --> 00:50:04.319
Let's just try it.

00:50:04.320 --> 00:50:09.850
So the designer takes five minutes, puts together a
grid of random clipart, you know, we take five minutes,

00:50:09.849 --> 00:50:17.889
five or ten minutes to kind of add another tab down
here and we get a prototype that looks like this.

00:50:17.889 --> 00:50:22.529
So same thing as before except we have
this other tab down here called stickers.

00:50:22.530 --> 00:50:25.100
And again this is all fake.

00:50:25.099 --> 00:50:30.799
It's one big image, no hit testing no matter where I
start dragging from here I'm going to get the cool shades.

00:50:30.800 --> 00:50:32.580
But look, I can put the cool shades on the cat,

00:50:32.579 --> 00:50:32.639
[ Laughter ]

00:50:32.639 --> 00:50:35.789
I can put the text down here.

00:50:35.789 --> 00:50:39.599
I can say, oh what about this cat
and kind of move the shades onto him

00:50:39.599 --> 00:50:42.799
and say oh the text should be up
here instead and change the text.

00:50:42.800 --> 00:50:46.960
And now this, this is pretty awesome.

00:50:46.960 --> 00:50:51.349
[ Laughter ]

00:50:51.349 --> 00:50:55.739
[ Applause ]

00:50:55.739 --> 00:50:57.759
You cannot go wrong with cats in sunglasses.

00:50:57.760 --> 00:50:58.220
[ Laughter ]

00:50:58.219 --> 00:51:03.169
So this little feature almost transformed the App.

00:51:03.170 --> 00:51:05.079
It really took it to a new level.

00:51:05.079 --> 00:51:08.599
It's actually a really cool feature because it
allows people to personalize their messages.

00:51:08.599 --> 00:51:12.869
If they're sending a birthday message they can like
put the birthday hat on top of the cat or whatever.

00:51:12.869 --> 00:51:19.119
But the point here is that the idea for this
feature came out of prototyping this new design.

00:51:19.119 --> 00:51:25.339
And the idea for the new design came
out of prototyping the old design.

00:51:25.340 --> 00:51:28.800
Prototyping generates ideas.

00:51:28.800 --> 00:51:31.990
Prototyping takes your design in new directions.

00:51:31.989 --> 00:51:37.909
I do this every day and believe
me I see this happen constantly.

00:51:37.909 --> 00:51:44.609
I want to wrap up by quickly going
over a little of what we've learned.

00:51:44.610 --> 00:51:50.640
The approach to prototyping that I've shown you
today, always begins with the same first step.

00:51:50.639 --> 00:51:55.029
Take that static mockup, put it on the screen.

00:51:55.030 --> 00:51:59.850
It's already valuable like that and it gives you
a starting point for building up a prototype.

00:51:59.849 --> 00:52:05.099
You can say if this static mockup is not
cutting it, what more do I need to add

00:52:05.099 --> 00:52:08.059
to it so I can really understand the design?

00:52:08.059 --> 00:52:13.849
And you add behavior where necessary or you break
off smaller pictures from that larger picture,

00:52:13.849 --> 00:52:19.460
give them their own views and then kind of recursively
apply this procedure to those pictures you broke off.

00:52:19.460 --> 00:52:24.240
You add behavior, break those down if necessary,
just kind of keep drilling down until you get the,

00:52:24.239 --> 00:52:30.269
get to the level of fidelity you need to
really understand all aspects of the design.

00:52:30.269 --> 00:52:33.619
This is one style of prototyping.

00:52:33.619 --> 00:52:40.489
It's not the only style, but the style that works really
well for a designer and developer working together

00:52:40.489 --> 00:52:43.859
because it's basically about just
taking those Photoshop mockups directly

00:52:43.860 --> 00:52:46.370
and bringing them to life as quickly as possible.

00:52:46.369 --> 00:52:52.119
But the, the point that I really want
you to remember from this talk is more

00:52:52.119 --> 00:52:56.480
about the prototyper's attitude; the mindset.

00:52:56.480 --> 00:52:59.139
The three aspects of that attitude.

00:52:59.139 --> 00:53:00.659
The first one is enthusiasm.

00:53:00.659 --> 00:53:03.799
A prototyper says, let's try it.

00:53:03.800 --> 00:53:08.980
You're going to be surrounded by people who push
back on new ideas or people who want to drag you

00:53:08.980 --> 00:53:13.130
into a meeting and talk about them for hours and hours.

00:53:13.130 --> 00:53:20.530
A prototyper's role is to just jump on new ideas, bring
them to life and show people whether they're good or bad.

00:53:20.530 --> 00:53:23.110
If it's a good idea, you've proven it's a good idea.

00:53:23.110 --> 00:53:29.200
And even if it's a bad idea, frequently that will
be the seed from which great ideas will grow.

00:53:29.199 --> 00:53:32.000
So you always say, let's try it.

00:53:32.000 --> 00:53:35.349
The second aspect here is faking it.

00:53:35.349 --> 00:53:38.079
When you're a prototyper, there's no shame in faking it.

00:53:38.079 --> 00:53:44.250
If you don't know how to pop up the keyboard you simply grab
a picture of the keyboard, stick it in and simply move on.

00:53:44.250 --> 00:53:47.230
You know when a, when a prototyper
is faced with a new challenge,

00:53:47.230 --> 00:53:49.760
you immediately start thinking, how can I fake this?

00:53:49.760 --> 00:53:50.900
What corners can I cut?

00:53:50.900 --> 00:53:57.369
How can I get to the essence of this
idea as quickly and simply as possible.

00:53:57.369 --> 00:53:58.789
You fake it.

00:53:58.789 --> 00:54:05.789
And the third aspect here, which sounds a little
funny, but is a prototyper has to be brave.

00:54:05.789 --> 00:54:11.869
You know, we're all trained as engineers and when
we're given a problem, we can't help but see all

00:54:11.869 --> 00:54:15.329
of the work that's required to
create a complete robust solution.

00:54:15.329 --> 00:54:20.869
We can't help but understand all the planning
that's required to build out that solution.

00:54:20.869 --> 00:54:27.569
And it takes, it takes a certain kind of courage
to understand the scope of that work and still say,

00:54:27.570 --> 00:54:30.519
I'm going to implement that feature
in the next five minutes.

00:54:30.519 --> 00:54:31.380
And I don't even know how.

00:54:31.380 --> 00:54:33.800
I'm just going to jump in and start improvising.

00:54:34.900 --> 00:54:37.599
Prototyping is a skill.

00:54:37.599 --> 00:54:39.349
It's a different skill than engineering.

00:54:39.349 --> 00:54:41.449
It takes practice.

00:54:41.449 --> 00:54:46.149
It takes practice to learn the mindset, it
takes practice to build up your bag of tricks.

00:54:46.150 --> 00:54:52.920
I hope that I've shown that it can be enormously rewarding
and that what you get out of it are ideas and designs

00:54:52.920 --> 00:54:55.480
that you just would not have come up with any other way.

00:54:55.480 --> 00:55:01.530
If you'd like more information, you can talk to
Matt Drance, he's our App Frameworks Evangelist

00:55:01.530 --> 00:55:03.900
or Eric Hope, he's our User Experience Evangelist.