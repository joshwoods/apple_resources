WEBVTT

00:00:13.000 --> 00:00:20.929
[ Applause ]

00:00:20.929 --> 00:00:22.149
>> Good afternoon.

00:00:22.149 --> 00:00:27.919
This is such a unique WWDC because
we have not one OS about to show,

00:00:27.920 --> 00:00:34.260
but two OSs that are about to show;
Snow Leopard and iPhone for you.

00:00:34.259 --> 00:00:42.679
Now I know that a lot of you came for the Mac, and a lot of
you came for the iPhone, but one thing that's wonderful is

00:00:42.679 --> 00:00:47.179
that there's such a great intersection
between those two platforms.

00:00:47.179 --> 00:00:52.149
Of course a number of you have applications
that's span both, this is fantastic.

00:00:52.149 --> 00:00:56.079
But I'm sure everyone is also interested
to hear about the tools,

00:00:56.079 --> 00:01:00.030
and we have a session this afternoon
that's dedicated to the tools.

00:01:00.030 --> 00:01:09.939
Of course it's the same tools for both platforms, but
maybe more importantly both those platforms are OS X.

00:01:09.939 --> 00:01:14.590
OS X is the mother of those two platforms, or the umbrella.

00:01:14.590 --> 00:01:21.710
So thanks for coming today, there's 5,200 of you.

00:01:21.709 --> 00:01:27.119
Nowadays I guess I should say there's
5,200 friends, so welcome here.

00:01:27.120 --> 00:01:35.580
But one statistic that's kind of very interesting
is that 60% of you have never attended a WWDC.

00:01:35.579 --> 00:01:44.539
So keeping that in mind, all the long timers
and the one who have the first WWDC today,

00:01:44.540 --> 00:01:48.790
we've devised this kick off in an agenda in two parts.

00:01:48.790 --> 00:01:56.810
First we'll talk about what's new and different, you
know, all the things that happened over the last year.

00:01:58.319 --> 00:02:05.199
And then we talk about things that are constant, things
that are beautiful, things that you can count on.

00:02:05.200 --> 00:02:11.000
So first to talk about what's new and exciting,
I'd like to ask my long time colleague Bud Tribble,

00:02:11.000 --> 00:02:13.009
VP, Software Technology to come on stage.

00:02:13.009 --> 00:02:21.289
[ Applause ]

00:02:21.289 --> 00:02:27.120
>> Thanks Bertrand and as he says,
welcome everyone to WWDC '09.

00:02:27.120 --> 00:02:36.030
And Bertrand's going to talk about a bit later about some of
the really enduring software principles that we've employed

00:02:36.030 --> 00:02:38.770
at Apple over the past 10 years and even longer.

00:02:38.770 --> 00:02:43.390
But before he does that, I want to talk a
bit about what's changed since last year,

00:02:43.389 --> 00:02:48.409
and I'll talk about the iPhone
landscape for a bit, the Mac landscape,

00:02:48.409 --> 00:02:57.120
and then I want to spotlight actually three
technologies each in the iPhone and the Mac that are new

00:02:57.120 --> 00:03:03.009
over the last year; and they were mentioned this
morning, but I really want to sort of zoom in on them

00:03:03.009 --> 00:03:08.340
and emphasize them a bit because I think they're
very important, if nothing else just to encourage you

00:03:08.340 --> 00:03:13.800
to attend sessions and explore them and
find out about them later in the conference.

00:03:13.800 --> 00:03:23.540
So first of all, the landscape has obviously changed with
the iPhone, and we spoke about it this morning - incredible,

00:03:23.539 --> 00:03:30.120
1 billion downloads and it's hard to envision what
that really means, but I did a few calculations.

00:03:30.120 --> 00:03:38.409
That's actually downloads at a rate that
exceeds the NTSC frame rate, 30 times a second.

00:03:38.409 --> 00:03:45.020
Another way of thinking about that is how often
apps are created and uploaded to the store?

00:03:45.020 --> 00:03:52.710
And from the numbers this morning, about every 10 minutes,
24x7, somebody creates an app and uploads it to the store.

00:03:52.710 --> 00:03:55.510
So this is incredible, we've never seen anything like this.

00:03:55.509 --> 00:04:03.509
And of course, reflected in this is the opportunity
for all of you who are developing iPhone apps,

00:04:03.509 --> 00:04:12.389
and exercising your creativity and your innovation,
and surprising us about every 10 minutes.

00:04:12.389 --> 00:04:16.000
Now associated with that huge opportunity, what we're seeing

00:04:16.000 --> 00:04:20.740
and Bertrand mentioned there's 60%
of you new `to WWDC the first time.

00:04:20.740 --> 00:04:28.470
This is a diverse community, and by diversity I mean people
developing apps coming at it from all sorts of angles,

00:04:28.470 --> 00:04:34.690
and in addition to traditional developers, very
outside the box, nontraditional developers.

00:04:34.689 --> 00:04:39.240
So of course we've got the large traditional
developers here, and you know who those are,

00:04:39.240 --> 00:04:44.280
but we also got the small garage developers,
sort of the truisms of the world for those of you

00:04:44.279 --> 00:04:46.209
who saw that story and followed that story.

00:04:46.209 --> 00:04:54.519
We've got a ton of nontraditional consumer companies,
companies that don't think of themselves as being

00:04:54.519 --> 00:05:01.469
in the software business; like Wells Fargo,
Coca-Cola has an app, ESPN has an app,

00:05:01.470 --> 00:05:05.400
Target has an app where you can go and choose gifts.

00:05:05.399 --> 00:05:09.189
So companies that are in the package
goods or consumer goods,

00:05:09.189 --> 00:05:13.009
Johnson & Johnson who we saw this
morning, an app for diabetics.

00:05:13.009 --> 00:05:20.420
So a ton of you are from these other industries
that are sort of new to developing in general.

00:05:20.420 --> 00:05:28.710
And then there's IT groups developing apps for their
own employees, and the IT groups are new to the iPhone

00:05:28.709 --> 00:05:34.449
and they're sort of there developing apps whether they
like it or not, because their employees want apps.

00:05:34.449 --> 00:05:37.879
And then finally, game developers
coming to the iPhone in droves.

00:05:37.879 --> 00:05:43.769
So an incredibly diverse community, you can sort of look
around you and I hope you take the time to meet other people

00:05:43.769 --> 00:05:48.189
and get some other perspectives
as you're here at the conference.

00:05:48.189 --> 00:05:56.050
Switching over to the Mac environment; now I think no one
can argue at this point that the Mac is not mainstream.

00:05:56.050 --> 00:06:02.560
It's a mainstream platform, arguably the
best operating system out there today.

00:06:02.560 --> 00:06:09.240
If you did the math this morning, in terms of
active Mac users, you saw that there was in excess

00:06:09.240 --> 00:06:11.550
of 30 million active Mac users out there.

00:06:11.550 --> 00:06:14.990
So again, this is incredible opportunity.

00:06:17.230 --> 00:06:19.620
I like to point this out, this is great.

00:06:19.620 --> 00:06:25.600
If you ever take the time to wander
around a college campus, or K-12 school...

00:06:25.600 --> 00:06:30.560
you're just blown away by the number of Macs
and that's a huge leading indicator out there.

00:06:30.560 --> 00:06:37.220
There are many campuses that have in excess of 50%
of the studPents with Macs, and that's students who,

00:06:37.220 --> 00:06:41.230
they're deciding what they want to buy and
what they want to run and they choose Mac.

00:06:41.230 --> 00:06:45.910
And as they move out in the workforce, I
think this is a huge leading indicator.

00:06:45.910 --> 00:06:53.260
One reason for this, and this was covered this
morning, is that the Mac is a great client

00:06:53.259 --> 00:06:56.639
that fits in anywhere - at home or at work.

00:06:56.639 --> 00:07:05.240
And by anywhere I mean into a Microsoft environment, whether
it's running MS Office apps, Microsoft file and print,

00:07:05.240 --> 00:07:10.290
Active Directory in Windows apps, and now new
with Snow Leopard, starting in Snow Leopard

00:07:10.290 --> 00:07:15.319
as was mentioned this morning -
integration with Microsoft Exchange.

00:07:15.319 --> 00:07:20.319
And that sort of completes the picture
to make Mac the universal client,

00:07:20.319 --> 00:07:24.939
and it's one huge reason for its surge in popularity.

00:07:24.939 --> 00:07:30.839
Now to sort of shift gears to some
technologies I want to spotlight,

00:07:30.839 --> 00:07:34.369
there's three technologies on the
Mac and three on the iPhone.

00:07:34.370 --> 00:07:35.959
They were mentioned this morning by...

00:07:35.959 --> 00:07:40.079
as I told you, I want to emphasize the importance of them.

00:07:40.079 --> 00:07:42.829
Starting out with the iPhone...

00:07:42.829 --> 00:07:52.149
and there's three words I would use to describe
these sorts of technology - radio, radio, radio.

00:07:52.149 --> 00:07:56.669
These are technologies that leverage
the radios in the iPhone,

00:07:56.670 --> 00:08:02.129
and as you know the iPhone is crammed full of radios.

00:08:02.129 --> 00:08:10.139
You have location GPS radio, and now going to the
magnetic compass, you have peer-to-peer over Bluetooth,

00:08:10.139 --> 00:08:14.459
you have push notification over the cell phone radio link.

00:08:14.459 --> 00:08:16.979
We saw the ZipCar this morning

00:08:16.980 --> 00:08:22.819
An app I ran into recently that
leverages location is GeoTwitter,

00:08:22.819 --> 00:08:28.069
which is great, you can attach a map to your Twits...

00:08:28.069 --> 00:08:30.310
to your Twitters.

00:08:30.310 --> 00:08:36.559
With the compass in there you have an extra piece
of functionality with the iPhone 3G S in addition

00:08:36.559 --> 00:08:42.059
to orienting yourself in a map
orient, the direction of the phone.

00:08:42.059 --> 00:08:46.329
Peer to Peer leverages the Bluetooth radio, and as we saw,

00:08:46.330 --> 00:08:51.259
finding other people who want to
play a game in the local area...

00:08:51.259 --> 00:08:55.370
trading information on an ad hock basis.

00:08:55.370 --> 00:08:59.810
Collaboration applications, I think we haven't
even scratched the surface of what's possible here,

00:08:59.809 --> 00:09:05.399
and of course this is possible because you have such
a high concentration now in the world of iPhones,

00:09:05.399 --> 00:09:09.740
that you're actually likely to run
into someone else with an iPhone.

00:09:09.740 --> 00:09:18.070
Then finally Push Notification, and as was mentioned this
morning, this is going to open up a whole new area of apps,

00:09:18.070 --> 00:09:24.120
not just instant messaging type apps, but apps that
have to notify a doctor or cardiologist for example

00:09:24.120 --> 00:09:27.350
that something is going wrong with a patient in the ICU.

00:09:27.350 --> 00:09:31.840
By the way I noticed that this patient
has a pacemaker that's malfunctioning,

00:09:31.840 --> 00:09:35.009
I don't think that was mentioned this
morning, if you look closely there.

00:09:35.009 --> 00:09:38.539
[ Laughter ]

00:09:38.539 --> 00:09:44.459
One of the important things about Push Notification
on the iPhone is that it's a system level service.

00:09:44.460 --> 00:09:52.019
What that means is that it can operate at the system
level, and receive notifications and notify the user

00:09:52.019 --> 00:09:57.049
without draining the battery the way that
running an app continuously in the background.

00:09:57.049 --> 00:10:02.959
You can imagine 20 apps trying  to run continuously
in the background and pull from notifications.

00:10:02.960 --> 00:10:07.680
This system service collects them centrally and then only...

00:10:07.679 --> 00:10:14.939
runs the app when the user requests
that; a huge savings on battery life.

00:10:14.940 --> 00:10:23.200
To look at the Mac now, these three technologies which
were mentioned this morning, have one huge thing in common.

00:10:23.200 --> 00:10:28.640
And that is that they're keeping up with
what the Silicon guys are doing to us.

00:10:28.639 --> 00:10:35.819
Intel and others keep putting more transistors into our
computers, and the challenge is for us and for you guys

00:10:35.820 --> 00:10:38.470
to leverage those transistors with software.

00:10:38.470 --> 00:10:45.800
And each of these is a case where we have technology new
to Snow Leopard that maximally leverages those transistors.

00:10:45.799 --> 00:10:50.229
I call it the full employment act for transistors.

00:10:50.230 --> 00:10:52.190
64-bits...

00:10:52.190 --> 00:10:57.810
we mentioned this morning about the increased address
space, but it's not just about increased address space.

00:10:57.809 --> 00:11:03.829
With 64-bits you've got twice the number
of registers on the Intel architecture.

00:11:03.830 --> 00:11:10.889
That means increased performance, in
some case greatly increased performance.

00:11:10.889 --> 00:11:12.419
It also means...

00:11:12.419 --> 00:11:21.399
it means that you can do a better job at
securing the processor running applications.

00:11:21.399 --> 00:11:26.199
It's a hard to exploit ABI, if
arguments are passed in registers,

00:11:26.200 --> 00:11:30.340
that they can't be exploited on the stack; no execute heap.

00:11:30.340 --> 00:11:34.340
We took the opportunity in Snow Leopard
to make no execute heap the default,

00:11:34.340 --> 00:11:39.300
so all the apps running in 64-bits have No Execute heap.

00:11:39.299 --> 00:11:42.009
Stronger heap checks, we have stronger
heap integrity checks.

00:11:42.009 --> 00:11:47.580
So it's not just an address space story, it's
a performance story and it's a security story.

00:11:47.580 --> 00:11:54.480
Grand Central Dispatch; a ton of sessions later this week
on Grand Central Dispatch, but this is all about the fact

00:11:54.480 --> 00:11:58.789
that the microprocessor designers
are throwing more cores at us.

00:11:58.789 --> 00:12:06.039
2-way, 4-way, 8-way, coming 16-way and more;
many cores what Intel likes to call it.

00:12:06.039 --> 00:12:09.899
But the challenge is how do we
take advantage of that in software?

00:12:09.899 --> 00:12:15.159
And Grand Central Dispatch is a system level
service, it's a language extension to C

00:12:15.159 --> 00:12:18.579
and objective C, so they can packetize pieces of works.

00:12:18.580 --> 00:12:21.639
Now it doesn't parallelize your app for you.

00:12:21.639 --> 00:12:26.480
If the app doesn't have any parallelism
in it, it can't magically create that.

00:12:26.480 --> 00:12:32.190
But for that parallelism that you do have,
it lets you very easily use design patterns

00:12:32.190 --> 00:12:36.010
to take full advantage of the cores on the processor.

00:12:36.009 --> 00:12:37.259
And this is...

00:12:37.259 --> 00:12:42.860
it's throughout the system, if you run top for example,
you'll see the number of work queues in each process.

00:12:42.860 --> 00:12:47.370
If you run Xcode and run Instruments,
there's now a new instrument called Dispatch,

00:12:47.370 --> 00:12:50.850
and there's more on this later this
afternoon and more sessions later in the week.

00:12:50.850 --> 00:12:56.470
Please go find out about Grand Central
Dispatch, and use it in your applications.

00:12:56.470 --> 00:13:03.600
Last but not least, most of the transistors doing
processing in your computer are not in the CPU.

00:13:03.600 --> 00:13:05.420
They're actually in the GPU.

00:13:05.419 --> 00:13:09.309
And the challenge is can we use
those for anything besides graphics?

00:13:09.309 --> 00:13:19.849
And the answer is yes, and the key to that is OpenCL
which at runtime would do compile of your OpenCL code,

00:13:19.850 --> 00:13:24.090
and it can throw that code either on the CPU or on the GPU.

00:13:24.090 --> 00:13:30.340
Here you see one line change, change
your context from type GPU to type CPU.

00:13:30.340 --> 00:13:38.090
You can debug your code on the CPU, change that
flag, and run it on the GPU with the afterburners on.

00:13:38.090 --> 00:13:46.730
And there's no better way to illustrate these last few
points than to demo it, and I want to ask Richard S.

00:13:46.730 --> 00:13:53.330
Wright, senior software engineer from Software Bisque
to come on up and give us a demo of those last 2 points,

00:13:53.330 --> 00:13:58.110
taking maximum advantage using
Grand Central Dispatch and OpenCL.

00:13:58.110 --> 00:14:00.009
Thank you.

00:14:00.009 --> 00:14:08.149
[ Applause ]

00:14:08.149 --> 00:14:14.470
>> So this is the planet Mars, and you're looking at
the next version of Seeker running on Snow Leopard.

00:14:14.470 --> 00:14:21.470
At Software Bisque our products range
from research grade telescope control...

00:14:21.470 --> 00:14:24.710
to educational products like Seeker.

00:14:24.710 --> 00:14:28.120
Seeker's an interactive solar system
simulator that allows us to visit things

00:14:28.120 --> 00:14:32.200
like planets, moons, and even man-made satellites.

00:14:32.200 --> 00:14:36.770
And it's available in both desktop
and full dome planetarium editions.

00:14:36.769 --> 00:14:39.449
Here we are at Earth, let's turn
on a constellation of satellites.

00:14:39.450 --> 00:14:42.460
There are different kinds of satellites.

00:14:42.460 --> 00:14:46.920
There's geosynchronous, communication
satellites, weather satellites, etc.,

00:14:46.919 --> 00:14:49.099
and each of these satellites requires hundreds

00:14:49.100 --> 00:14:55.370
of full double precision computations per
frame to calculate its position in orbit.

00:14:55.370 --> 00:14:58.720
Another type of satellite is Space Junk.

00:14:58.720 --> 00:15:04.370
Shown here in red, these can be anything from
spent rocket boosters to little flecks of paint,

00:15:04.370 --> 00:15:06.889
but traveling at tens of thousands of miles per hour.

00:15:06.889 --> 00:15:11.879
And if you're traveling in space, you
don't want to run into one of these guys.

00:15:11.879 --> 00:15:16.620
Now you can see that over 12,000 objects, we're
having a bit of a performance challenge here.

00:15:16.620 --> 00:15:22.490
Our frame rate is down to 5, and you can see
one of our CPU cores completely maxed out.

00:15:22.490 --> 00:15:26.409
The solution to this was Snow Leopard's
Grand Central Dispatch

00:15:26.409 --> 00:15:30.230
Let's turn it on and see what happens.

00:15:30.230 --> 00:15:34.629
With Grand Central Dispatch we're able to automatically
distribute the workload of all these satellites

00:15:34.629 --> 00:15:41.009
across all the CPU cores, and our frame rate goes
from 5 to 30 frames per second; pretty dramatic.

00:15:41.009 --> 00:15:47.120
[ Applause ]

00:15:47.120 --> 00:15:53.470
Now multithreading with pthreads,
to be kind, it's a little tedious.

00:15:53.470 --> 00:15:56.930
Grand Central Dispatch was quick and easy.

00:15:56.929 --> 00:16:03.049
It took maybe 15 minutes and about a dozen lines
of code to make the jump to Grand Central Dispatch

00:16:03.049 --> 00:16:08.339
for these computations; and the result speaks for itself.

00:16:08.340 --> 00:16:10.610
Let's head to Saturn now.

00:16:10.610 --> 00:16:17.539
As you can see, Seeker is all about real time interactivity,
or in this case greater than real time interactivity.

00:16:17.539 --> 00:16:22.250
Here we'll speed up time so we can see the
moons of Saturn going around the planet.

00:16:22.250 --> 00:16:24.389
It's pretty cool.

00:16:24.389 --> 00:16:29.460
Well in addition to satellites, our customers also
wanted to be able to represent the asteroid field.

00:16:29.460 --> 00:16:34.120
Now asteroid orbits are computationally
a bit simpler than satellite motion.

00:16:34.120 --> 00:16:36.110
But this time the problem was one more of scale.

00:16:36.110 --> 00:16:40.789
Let's turn toward the sun and turn on the
ecliptic, and I'll show you what I mean.

00:16:40.789 --> 00:16:47.399
At the beginning of the 20th century,
we knew of less than 500 asteroids.

00:16:47.399 --> 00:16:48.340
OK, no sweat.

00:16:48.340 --> 00:16:54.180
Over the next 100 years though, that
catalogue had grown to 40,000 asteroids

00:16:54.179 --> 00:17:01.539
and in the last 10 years we're
now up to over 400,000 asteroids.

00:17:01.539 --> 00:17:09.009
What you're seeing here is every single object
catalogued by the Minor Planet Center as of this week.

00:17:09.009 --> 00:17:16.589
[ Applause ]

00:17:16.589 --> 00:17:24.159
For this number of computations, Snow Leopard's OpenCL is
the solution and we offloaded these calculations to the GPU.

00:17:24.160 --> 00:17:29.529
We couldn't have even attempted this many asteroids
using a CPU technology, even on a multicore system,

00:17:29.529 --> 00:17:33.250
and you can see we're hardly even touching the CPU.

00:17:33.250 --> 00:17:38.819
So here we are back at Earth, the
satellites and asteroids on at the same time.

00:17:40.059 --> 00:17:47.059
Snow Leopard uniquely allows us to make use of every
computational resource in our system simultaneously;

00:17:47.059 --> 00:17:50.889
thus enabling the next version
of Seeker in an astronomical way.

00:17:50.890 --> 00:17:52.009
Thank you.

00:17:52.009 --> 00:18:01.180
[ Applause ]

00:18:01.180 --> 00:18:05.440
>> Thank you Richard, great illustration
of Grand Central Dispatch in OpenCL.

00:18:05.440 --> 00:18:13.970
So to wrap up what's changed, we've looked
at the iPhone landscape, the Mac landscape,

00:18:13.970 --> 00:18:20.069
highlighted some key technologies that will be important
going forward, and I'd like to invite Bertrand back

00:18:20.069 --> 00:18:25.379
up to talk about the underlying DNA, the constant
things, the big constants that have stood us

00:18:25.380 --> 00:18:27.600
in good stead over the last decade and longer.

00:18:27.599 --> 00:18:30.009
So Bertrand I'll turn it back to you.

00:18:30.009 --> 00:18:35.829
[ Applause ]

00:18:35.829 --> 00:18:43.439
>> So let's talk about what's the same, and this
is sameness both in terms of time and also sameness

00:18:43.440 --> 00:18:47.019
of course between the Mac and the iPhone.

00:18:47.019 --> 00:18:54.549
And I've chosen three topics that are really
dear to my heart: structure, APIs, and UI.

00:18:54.549 --> 00:18:57.399
So first structure.

00:18:57.400 --> 00:19:03.250
Now this is a picture that you may have seen
before, if you attended a previous WWDC.

00:19:03.250 --> 00:19:07.500
It's actually the same picture that we've shown since 2001.

00:19:07.500 --> 00:19:11.750
It's the structural composition of the system.

00:19:11.750 --> 00:19:19.740
At the bottom you have UNIX and it's actually a little
more than UNIX, it's everything that's known UI.

00:19:19.740 --> 00:19:25.049
That's where the power of Mac OS X comes
from, and in fact we'll have a session just

00:19:25.049 --> 00:19:28.720
after this one to cover a kind of this layer.

00:19:28.720 --> 00:19:31.269
Next layer up, graphics.

00:19:31.269 --> 00:19:35.430
That's what makes Mac OS X and
your applications really sexy.

00:19:35.430 --> 00:19:41.230
That's all the multimedia technologies,
both on the Mac and on the iPhone.

00:19:41.230 --> 00:19:46.880
And we'll have a session this afternoon as well on graphics.

00:19:46.880 --> 00:19:50.770
Then we have frameworks of all kinds, and
actually there's no session this afternoon

00:19:50.769 --> 00:19:58.460
because there's sessions the entire week on frameworks,
on the various frameworks that make both our platforms.

00:19:58.460 --> 00:20:05.430
And on top of that of course you have applications, both
our applications, system applications, both under Mac

00:20:05.430 --> 00:20:12.470
and the iPhone, and your application because
we are using of course all the same APIs.

00:20:12.470 --> 00:20:18.490
So you may wonder OK, so why is
structure kind of something that matters?

00:20:18.490 --> 00:20:25.009
And it tremendously matters to me,
because Mac OS X is pretty hefty.

00:20:25.009 --> 00:20:28.890
This is the size of the my question
when you look at the sources,

00:20:28.890 --> 00:20:35.950
over half a million source files,
and 36 gigabytes or so of sources.

00:20:35.950 --> 00:20:41.650
Just to put that into perspective, there's
digital code - that's well known - the DNA,

00:20:41.650 --> 00:20:51.530
the human DNA has about 3 billion base-pairs - you
know, ATCG, 2-bits per pair, so that's about a gigabyte.

00:20:51.529 --> 00:20:58.720
Now I'm not claiming that we have achieved any
close to the degree of sophistications that you get

00:20:58.720 --> 00:21:03.009
with DNA, we still have a few years to progress.

00:21:03.009 --> 00:21:06.019
[ Laughter ]

00:21:06.019 --> 00:21:10.549
And when you have that kind of size
of information, if you're not careful,

00:21:10.549 --> 00:21:14.859
if you don't lay your things properly, you end up with this.

00:21:16.019 --> 00:21:22.819
So that's why we work very hard at making sure
the layering of what we do is kind of pristine,

00:21:22.819 --> 00:21:29.899
and in each release we kind of improve on the layering
whenever we detect that there's something to improve on.

00:21:29.900 --> 00:21:33.560
And so there's a number of patterns
that we apply to our layering.

00:21:33.559 --> 00:21:35.649
One pattern is something I call split.

00:21:35.650 --> 00:21:39.960
When you have something that's
fairly deep you split it in 2.

00:21:39.960 --> 00:21:43.890
Perfect example of that is front end and back end,

00:21:43.890 --> 00:21:48.790
and we've done that multiple times,
take for example Safari as an example.

00:21:48.789 --> 00:21:55.909
We have Safari application, both under Mac and
the iPhone, but we have where most of the code is,

00:21:55.910 --> 00:21:58.930
the back end of Safari - WebKit, WebCore.

00:21:58.930 --> 00:22:04.640
And this is a very important pattern, and I think it
should be very important for you too because I know some

00:22:04.640 --> 00:22:10.250
of you have fairly large applications, but
also because you may want to span both the Mac

00:22:10.250 --> 00:22:14.259
and the iPhone, and you can share the back end.

00:22:14.259 --> 00:22:19.859
Another pattern that we apply is
what I call abstracting, factorizing.

00:22:19.859 --> 00:22:26.309
This is when we notice that there's a same kind of
functionality in 2 applications, or several applications,

00:22:26.309 --> 00:22:29.960
and we try to make it available for all applications.

00:22:29.960 --> 00:22:34.450
We try to encapsulate that functionality in the library.

00:22:34.450 --> 00:22:45.430
There are many examples of that, for example for persistency
calldata is a way to extract persistency for applications.

00:22:45.430 --> 00:22:52.420
You could even say that Grand Central Dispatch, what
we've done by putting those libraries or Dispatch Library

00:22:52.420 --> 00:22:56.390
as we call it as the lowest level,
is an abstraction of multithreading.

00:22:56.390 --> 00:23:04.210
Then the third pattern I want to cover is when
you have something that doesn't smell too good,

00:23:04.210 --> 00:23:09.210
something say from the past, but something
you important for your customer base.

00:23:09.210 --> 00:23:13.390
So you want to keep that functionality,
but what you don't want to do is

00:23:13.390 --> 00:23:16.259
with that functionality, affect your future plans.

00:23:16.259 --> 00:23:21.559
And so what's really important there is to fence it off.

00:23:21.559 --> 00:23:23.909
And make sure it works.

00:23:25.119 --> 00:23:32.599
So those are some of the patterns that we've used to
kind of keep our layering totally proper, obviously yes,

00:23:32.599 --> 00:23:39.500
and they have enabled us for example, to move onto the
iPhone when we did that jump a few years ago, very,

00:23:39.500 --> 00:23:43.789
very easily because our layering is proper.

00:23:43.789 --> 00:23:48.500
So that's the structure, let's talk about APIs.

00:23:48.500 --> 00:23:55.849
And if you want, APIs are kind of the layer,
sorry, it's the planes between the layers.

00:23:55.849 --> 00:23:59.439
They are the ways to communicate between different layers.

00:24:00.950 --> 00:24:09.299
Now maybe a more kind of formal definition can be found
in the dictionary, but we also use several synonyms.

00:24:09.299 --> 00:24:17.509
Sometimes we say header file for API,
or the documented API, or public API.

00:24:17.509 --> 00:24:24.700
The things that's important here is that if you want to
use some functionality, and it's not in your header file

00:24:24.700 --> 00:24:30.890
or it's not documented, or it's labeled as private API.

00:24:30.890 --> 00:24:32.530
Well don't choose it, right?

00:24:32.529 --> 00:24:40.579
Because your application may break, even during
a software event which wouldn't be too good.

00:24:40.579 --> 00:24:46.429
So one characteristic of API is that
they have to really fit well together,

00:24:46.430 --> 00:24:50.940
and one standard technique for that is object orientation.

00:24:50.940 --> 00:24:54.870
This has been known for a number of decades.

00:24:54.869 --> 00:24:59.989
And we've chosen, a long time ago, in fact
I think that Bud made the decision

00:24:59.990 --> 00:25:05.120
to use an object oriented language that we call Objective C.

00:25:05.119 --> 00:25:09.989
Now don't be scared OK, if you
are new to the Objective C world.

00:25:09.990 --> 00:25:17.690
This is mostly C, this is a superset of seeds
that adds objects and classes and methods;

00:25:17.690 --> 00:25:23.070
but most of the syntactical construct of
C, at the heart of Objective C is a runtime

00:25:23.069 --> 00:25:27.939
that makes it very dynamic and
brings things like introspection.

00:25:27.940 --> 00:25:32.519
And this language has enabled us
to create high level frameworks

00:25:32.519 --> 00:25:37.859
that are object oriented, things like Cocoa and Cocoa Touch.

00:25:37.859 --> 00:25:42.959
We gained a lot of benefit from object
orientation, and you gain a lot of benefit.

00:25:42.960 --> 00:25:46.850
For example, there's a lot of behaviors
that are very automatic.

00:25:46.849 --> 00:25:53.219
You just call a method and all the minutiae
here, what has to happen happens for you.

00:25:53.220 --> 00:26:00.200
It's easy to use in an object oriented
environment, because you instant shared a class.

00:26:00.200 --> 00:26:03.960
It's easy to customize, you just subclass.

00:26:03.960 --> 00:26:10.370
And in general it's easy to capture the intent that
you have when you program, and I think that notion

00:26:10.369 --> 00:26:15.199
of capturing the intent is very important for programming.

00:26:15.200 --> 00:26:23.830
Now also, and this is maybe a more kind of subjective and
personal view, I think object orientation is very elegant.

00:26:23.829 --> 00:26:27.169
It's kind of like this bridge, le Viaduc de Millau...

00:26:27.170 --> 00:26:36.670
that's functional, is elegant, and also was finished
under budget; which is very rare for public works.

00:26:36.670 --> 00:26:41.509
And you may notice that if you're new to
object orientations, that sometimes you have

00:26:41.509 --> 00:26:46.769
to write less code in order to get your application.

00:26:46.769 --> 00:26:50.950
Now another aspect of APIs is their longevity.

00:26:50.950 --> 00:26:53.630
If you think of it - Open, Read, Write...

00:26:53.630 --> 00:26:59.160
those APIs were designed some 40 years ago.

00:26:59.160 --> 00:27:05.840
The Cocoa APIs, the foundation APIs, were
designed something like 20 years ago.

00:27:05.839 --> 00:27:09.730
Even in graphics land, OpenGL, 15 years ago.

00:27:09.730 --> 00:27:16.450
So APIs last a very long time, and so we are
very careful when we put a new API out there,

00:27:16.450 --> 00:27:24.080
and so we have a process internally to make
sure our APIs are the greatest possible quality.

00:27:24.079 --> 00:27:29.669
First an API starts as a private
API, just for us, not for you.

00:27:30.829 --> 00:27:35.799
And we iterate on it until we are happy with it.

00:27:35.799 --> 00:27:44.690
In fact, we iterate until it's kind of perfect, in the sense
that we don't know what to change in order to improve on it.

00:27:44.690 --> 00:27:47.680
That's an internal review process.

00:27:47.680 --> 00:27:53.600
At some point we put that in a seed, and that's where
you are involved, and that's where we are waiting to hear

00:27:53.599 --> 00:27:57.379
from you on whether the API does the job, is it complete?

00:27:57.380 --> 00:28:03.940
And it's really important that we get that
feedback on API always, because we're are going

00:28:03.940 --> 00:28:07.130
to then shape our product and then we commit.

00:28:07.130 --> 00:28:11.480
As much as possible we commit forever.

00:28:11.480 --> 00:28:17.319
We try really hard to make sure your applications
keep working generation after generation.

00:28:17.319 --> 00:28:24.379
So this is the same process that we
use for the Mac, and for the iPhone.

00:28:24.380 --> 00:28:32.100
In fact there's a lot of shared APIs, and there's more
and more shared APIs as time progresses like Call Data -

00:28:32.099 --> 00:28:34.980
it's making its appearance on the iPhone for you.

00:28:34.980 --> 00:28:38.140
It's been a long time API on the Mac, and vice versa.

00:28:38.140 --> 00:28:42.870
Call location is now in Snow Leopard.

00:28:42.869 --> 00:28:50.949
So we have a lot of care that goes into our API design.

00:28:50.950 --> 00:28:53.590
Let me talk about UI.

00:28:53.589 --> 00:29:00.839
You know I mentioned elegance, talking about APIs,
but usually elegance is associated of course to UI.

00:29:00.839 --> 00:29:06.319
And for UI to be elegant, the first criteria
is that it has to be really functional.

00:29:06.319 --> 00:29:10.419
It has to do its job right, and it has to be easy to use.

00:29:10.420 --> 00:29:18.940
Any child can use these widgets that we have on
the iPhone that these nicknames are Wheels of Time.

00:29:18.940 --> 00:29:25.269
Now similarly on the Mac, I think it's very
obvious when you know a little bit about cosmology

00:29:25.269 --> 00:29:28.670
which way is the present days and
which way is the past days.

00:29:28.670 --> 00:29:34.740
You don't need to explain that, you don't need
to label this is backwards, this is forward.

00:29:34.740 --> 00:29:38.599
The model is implicit in the UI.

00:29:38.599 --> 00:29:47.959
And so I really exalt you to spend a lot of time in your
applications on great UI, it has to be super functional,

00:29:47.960 --> 00:29:54.289
it has to be super easy to use, and you
don't want to forget there's a wow factor;

00:29:54.289 --> 00:29:57.599
because that's how you get an edge over the competition.

00:29:59.769 --> 00:30:04.960
So structure, APIs, UI.

00:30:04.960 --> 00:30:08.970
These are things that haven't changed
over the last few years.

00:30:08.970 --> 00:30:12.390
They are the constants of big constants.

00:30:12.390 --> 00:30:17.270
Now Bud talked about things that changed
like how is the iPhone changed in landscape?

00:30:17.269 --> 00:30:23.730
A few years ago, three, four years ago it didn't exist.

00:30:23.730 --> 00:30:25.490
How is it Mac is in mainstream?

00:30:25.490 --> 00:30:28.450
Five years ago this was unthinkable.

00:30:28.450 --> 00:30:35.000
And the incredible new technologies that we
have to follow the present and the future.

00:30:35.000 --> 00:30:44.289
Now we have, I believe two great platforms for you, and
what's really great is that they share a lot in common.

00:30:44.289 --> 00:30:46.200
That's OS X.

00:30:46.200 --> 00:30:52.920
So that's kind of the technology aspect of it, but then
there's a business side of it where between the iPhone,

00:30:52.920 --> 00:31:04.250
the iPod touch, and the Macs we now have over 70 million
devicpes and computers you can target for your applications.

00:31:04.250 --> 00:31:09.839
So we've a great technology, a great market...

00:31:09.839 --> 00:31:12.369
the ball is now in your court.

00:31:12.369 --> 00:31:14.009
Thank you.

00:31:14.009 --> 00:31:22.160
[ Applause ]