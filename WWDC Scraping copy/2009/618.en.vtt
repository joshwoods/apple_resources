WEBVTT

00:00:12.550 --> 00:00:17.660
>> Auto-enrolling with Microsoft Certificate
Authority, Making the Magic Happen.

00:00:17.660 --> 00:00:28.589
This is an iPhone, great device for typing scripts
into the notes or something like that, nice way.

00:00:29.629 --> 00:00:32.679
Gratuitous keynote transition.

00:00:32.679 --> 00:00:38.840
All right, enterprise identities, so
if you're in an enterprise environment,

00:00:38.840 --> 00:00:44.690
if you're just in a large organization, you probably
use a lot of certificate identities for lot of things.

00:00:44.689 --> 00:00:47.379
If you've been to any of the phone
sessions, they've talked about some

00:00:47.380 --> 00:00:51.090
of the auto-enrollment there through
SCP and some of the other stuff.

00:00:51.090 --> 00:00:54.630
This gets further into that but
how to do it on the desktop side.

00:00:54.630 --> 00:00:58.000
So why do you want a certificate VPN access?

00:00:58.000 --> 00:01:03.960
You might require certificate authentication 802.1X website,

00:01:03.960 --> 00:01:06.950
you might have a client site certificate
that you want authentication to.

00:01:06.950 --> 00:01:14.189
So we've got a rather robust certificate implementation,
the problem is it can require user interaction.

00:01:14.189 --> 00:01:17.629
If your current-- whose doing 802.1X
authentication with certificates right now?

00:01:17.629 --> 00:01:19.899
Reasonable amount of people.

00:01:19.900 --> 00:01:21.960
Who wants to do it?

00:01:21.959 --> 00:01:22.819
A few more, good.

00:01:22.819 --> 00:01:27.489
All right, so this will hopefully help you out here because
there's definitely an element of user interaction that has

00:01:27.489 --> 00:01:32.799
to be required right now 'cause every
certificate is individualized for each machine

00:01:32.799 --> 00:01:35.509
or each user that you're running this on.

00:01:35.510 --> 00:01:38.329
We have no current method for auto-enrolling.

00:01:38.329 --> 00:01:41.000
We're kind of kicking around some ways how we can fix that.

00:01:41.000 --> 00:01:42.750
But right now we don't have that.

00:01:42.750 --> 00:01:45.620
So this is why we wanted to figure this out.

00:01:45.620 --> 00:01:50.340
So if you look at how the other half lives,
Microsoft has its certificate authority.

00:01:50.340 --> 00:01:54.710
Clients respond to a policy, the directory to auto enroll.

00:01:54.709 --> 00:01:59.739
They generate a CSR, get it signed,
import it, put it into local store.

00:01:59.739 --> 00:02:03.299
Done as the machine not necessarily as
the user, so you have a machine identity.

00:02:03.299 --> 00:02:06.090
In more of our business environment
that's what they're looking for.

00:02:06.090 --> 00:02:09.129
In the educational environment, you
typically want to do this all by a user.

00:02:09.129 --> 00:02:11.150
You have a lot more multi-user systems.

00:02:11.150 --> 00:02:14.840
That's possible as well to get certificates that way.

00:02:14.840 --> 00:02:19.680
Most users never even know, I mean that's the beauty about
this, is that it's all just done automatically for you

00:02:19.680 --> 00:02:23.969
under the covers, 802.1X is configured and all the rest.

00:02:23.969 --> 00:02:28.379
So, let's take a look at how you would
interact with this if you are on a map.

00:02:28.379 --> 00:02:35.919
So here we have our Mac, crack open
Safari, and you can actually go to--

00:02:35.919 --> 00:02:41.449
the certificate authority has a web server for it.

00:02:41.449 --> 00:02:51.959
Going to ask you for authentication, and then you've
got a little web interface that you can go through,

00:02:51.960 --> 00:02:59.960
make a little easier for you guys to see, and you'd
request the certificate, user certificate and this is

00:02:59.960 --> 00:03:04.080
where your users probably go off the tracks.

00:03:04.080 --> 00:03:06.190
[Laughter] So we'd rather they not have to do that.

00:03:06.189 --> 00:03:09.180
So how can we figure this out through
scripting, how can we use that to kind

00:03:09.180 --> 00:03:12.490
of satisfy our needs here and get this working?

00:03:12.490 --> 00:03:17.500
So it's web-based, works with IIS so you've
got to have that on it and a nice thing

00:03:17.500 --> 00:03:20.389
about this is its kerb authenticated to that webpage.

00:03:20.389 --> 00:03:24.789
When I went there, you saw that I had to type
in credentials but it is fully kerb enabled.

00:03:24.789 --> 00:03:28.299
So if you do have a kerb ticket or
something else, you could use that instead

00:03:28.300 --> 00:03:31.180
which takes one more element of
user interaction out of that.

00:03:31.180 --> 00:03:34.129
So that's important, we'll key on that in a little bit.

00:03:34.129 --> 00:03:38.659
But really I have absolutely no idea
how this actually works on the PC side.

00:03:38.659 --> 00:03:42.060
But we have managed to reverse engineer it on the Macs.

00:03:42.060 --> 00:03:44.439
And that's what I'm here to talk about.

00:03:44.439 --> 00:03:46.229
So how do we do this?

00:03:46.229 --> 00:03:52.609
Well we knew it was a website from what you saw just
right over there and we know that with careful application

00:03:52.610 --> 00:03:58.250
of advance scripting technologies, we should
be able to hack anything together, right?

00:03:58.250 --> 00:04:02.319
So we'd seen it, we know what it works like, now
we just got to find out what's in the middle.

00:04:02.319 --> 00:04:06.400
So first of all, we had to worry about credentials.

00:04:06.400 --> 00:04:11.409
Obviously you have to be authenticated to get this, you're
passing up a private key or certificate request, sorry,

00:04:11.409 --> 00:04:14.039
and you're getting back a public key that comes back.

00:04:14.039 --> 00:04:17.939
You need to be able to know that you're the
person that's supposed to be doing that.

00:04:17.939 --> 00:04:21.060
So a level of authentication is required.

00:04:21.060 --> 00:04:25.780
Now, we also know that it's kerb enabled,
all AD users can get kerb credentials,

00:04:25.779 --> 00:04:32.039
all AD-bound machines can get kerb credentials as
that machine, boom, we've got the problem solved.

00:04:32.040 --> 00:04:38.170
So, log on to the web CA and in this case and
I'll show you this when we get back to the demo.

00:04:38.170 --> 00:04:40.009
You can just do a kinit as a user.

00:04:40.009 --> 00:04:42.610
For the script we actually do a k and that is the machine.

00:04:42.610 --> 00:04:47.550
And then you can get back in the Safari, you'll
see your kerb tickets and do all the work there.

00:04:47.550 --> 00:04:50.030
So we got the authentication part done.

00:04:50.029 --> 00:04:53.169
Now we needed to know what was
actually being passed back and forth.

00:04:53.170 --> 00:04:54.920
Because you could see through that web interface

00:04:54.920 --> 00:04:58.490
that you can actually send everything
up and get the certificate back.

00:04:58.490 --> 00:05:04.850
So that was using Safari doing view source, looking at what
the source of that page was and then getting into tcpdump

00:05:04.850 --> 00:05:07.680
and actually seeing what the actual communication is.

00:05:07.680 --> 00:05:12.500
So that got kind of fun and we saw some of the stuff
that was getting passed back and forth and we said "Hey,

00:05:12.500 --> 00:05:14.819
you know, Curl can do a lot of fun things."

00:05:14.819 --> 00:05:19.879
You can post things with Curl, you can get things with
Curl, so we can probably figure this out in the Curl.

00:05:19.879 --> 00:05:25.909
There was a few bits though that we didn't understand,
that we didn't know exactly how it's going on.

00:05:25.910 --> 00:05:27.020
So we binged for it.

00:05:27.019 --> 00:05:27.229
[ Laughter ]

00:05:27.230 --> 00:05:27.439
[ Applause ]

00:05:27.439 --> 00:05:35.230
>> What's the-- that's not supposed to get applause.

00:05:35.230 --> 00:05:36.569
[Laughter] What's the past tense of bing?

00:05:36.569 --> 00:05:39.689
We're wondering bonged, bunged.

00:05:39.689 --> 00:05:41.259
None of those are good.

00:05:41.259 --> 00:05:47.209
Bing didn't come back with anything so we alphaed for it,

00:05:47.209 --> 00:05:52.659
alpha got us WolframAlpha isn't
sure what to do with your input.

00:05:52.660 --> 00:05:56.670
[Laughter] So that didn't work out very well.

00:05:56.670 --> 00:05:59.020
So, then we Google.

00:05:59.019 --> 00:06:05.089
And we came back with a few hits, what was most annoying for
me is the top two or three were questions that I had posted

00:06:05.089 --> 00:06:08.219
on some forums asking how this has worked.

00:06:08.220 --> 00:06:09.280
[ Laughter ]

00:06:09.279 --> 00:06:10.339
[ Applause ]

00:06:10.339 --> 00:06:14.899
>> It sounds like you may have found
yourself in that same position.

00:06:14.899 --> 00:06:18.919
So if Google doesn't work, what happens?

00:06:18.920 --> 00:06:25.180
Well, if you're like me and you have some
brilliant people working underneath you,

00:06:25.180 --> 00:06:29.120
you can make it somebody else's problem.

00:06:29.120 --> 00:06:34.810
So first I asked Josh, and Josh got some of the pieces.

00:06:34.810 --> 00:06:38.610
He came up with a pretty crappy sed
statement that I'll show you in a little bit,

00:06:38.610 --> 00:06:42.410
that actually does some cool stuff
that I didn't have time to figure out.

00:06:42.410 --> 00:06:47.370
Although I'm sure given the proper application
of effort on my behalf, it would have been easy.

00:06:47.370 --> 00:06:59.889
But, there were a few things that Josh couldn't get
and so ooh, luckily I have somebody else that works

00:06:59.889 --> 00:07:11.339
for me who's used to wrestling pigs which seemed
rather apropos for this particular problem.

00:07:11.339 --> 00:07:20.119
So Tim actually found out some cool stuff with how to get
the certificates directly out of Active Directory via DSCL.

00:07:20.120 --> 00:07:23.600
Because once you actually enroll
yourself, the public key becomes available

00:07:23.600 --> 00:07:28.580
in directory services, it's published
through Active Directory

00:07:28.579 --> 00:07:33.789
And I will note on the side notes and this is something
that's personally been-- something I've been interested in,

00:07:33.790 --> 00:07:40.500
in Snow Leopard definitely try working with encrypting email
to other people with their search from Active Directory

00:07:40.500 --> 00:07:44.000
because we can now do that and we've
had some good success with that.

00:07:44.000 --> 00:07:47.410
Active Directory, LDAP, and some
other places can vent certificates,

00:07:47.410 --> 00:07:50.550
public keys for encryption so you
can use that to send an email.

00:07:50.550 --> 00:07:53.500
If you don't know what that means, just keep on working.

00:07:53.500 --> 00:07:56.670
All right, so now for the script.

00:07:56.670 --> 00:08:00.680
So we'll poke through this a little bit but I
wanted to show you two things to keep in mind.

00:08:00.680 --> 00:08:03.920
First of all is credentialing, one of the cool things

00:08:03.920 --> 00:08:08.100
that I didn't really realized until
after doing scripts for a while.

00:08:08.100 --> 00:08:12.170
Once you've been bound in Active
Directory, you do have a local key tab.

00:08:12.170 --> 00:08:16.640
That's the shared secret between your
system and Active Directory in this case.

00:08:16.639 --> 00:08:24.829
You can use that to get credentials without having to know
the password for the machine just using kinit-k, all right.

00:08:24.829 --> 00:08:33.740
So kinit-k as root will get you a kerb credential for the
machine that you're on as long as it's been bound into AD.

00:08:33.740 --> 00:08:38.710
And then you can run the rest of your script
as the machine with machine credentials.

00:08:38.710 --> 00:08:43.269
Which means you can hit that web enrollment CA
with Curl and not have to worry about passing

00:08:43.269 --> 00:08:46.210
in a plain text or anything else like that.

00:08:46.210 --> 00:08:56.940
The problem with this is for 2k8 environments we've been
having some funkiness and imagine, if you will, a waffle.

00:08:56.940 --> 00:09:01.720
I tried to get them to put a waffle graphic
'cause we weren't quite sure when it was going

00:09:01.720 --> 00:09:03.110
to work and we're still working on the issue.

00:09:03.110 --> 00:09:06.940
They didn't have any waffles, they yelled
at me for bringing last minute requests.

00:09:06.940 --> 00:09:10.570
I then asked for a construction cone
but they didn't have that either.

00:09:10.570 --> 00:09:18.350
They did find a waffle cone [laughter] which I
thought was actually going to be a real great graphic

00:09:18.350 --> 00:09:21.180
but then it apparently didn't pass muster.

00:09:21.179 --> 00:09:27.169
So imagine if you will a waffle cone, a nice summer
time treat in the bottom corner to keep in your mind

00:09:27.169 --> 00:09:32.759
as a mnemonic here that for 2k8 environments kinit-k,
you might have to play around with and see if it works

00:09:32.759 --> 00:09:39.629
and definitely with the GM-- with the stuff that you got
today with that developer release that you got at WWDC,

00:09:39.629 --> 00:09:44.649
make sure that you test that, make sure that you're
interested in using that in your environments.

00:09:44.649 --> 00:09:47.059
Try, look through the stuff, if it doesn't work,

00:09:47.059 --> 00:09:51.319
please file bugs on that 'cause we're very
interested in getting feedback on that.

00:09:51.320 --> 00:09:53.070
Fair enough?

00:09:53.070 --> 00:09:56.260
All right, as-- just as a quick question.

00:09:56.259 --> 00:09:58.309
Who's using actual 2k8?

00:09:58.309 --> 00:10:03.039
OK, a couple of hands out there, who's
actually using it at a 2k8 functional level?

00:10:03.039 --> 00:10:07.419
Yeah, all right, so this is not huge issue.

00:10:07.419 --> 00:10:11.319
And while I've got hands on the air,
who knows their total cost of ownership?

00:10:11.320 --> 00:10:13.090
[ Laughter ]

00:10:13.090 --> 00:10:16.710
>> See, nobody ever raises a hand when I ask that.

00:10:16.710 --> 00:10:19.280
That's another story for another session.

00:10:19.279 --> 00:10:26.610
All right, another cool thing, you'll notice the new in
Snow Leopard badge up there, nonexportable certificates,

00:10:26.610 --> 00:10:32.279
some people have been asking this for a while
in 10.5 and earlier if you imported a key pair,

00:10:32.279 --> 00:10:38.829
a public key and a private key, anybody that had admin
access to the system could export that private key.

00:10:38.830 --> 00:10:44.259
If you're in a very security conscious environment or if
you're using certificates for things such as authentication

00:10:44.259 --> 00:10:49.909
to VPNs and stuff like that and you don't want your
users scrolling around and putting that certificate

00:10:49.909 --> 00:10:55.509
on another system that's not company owned or
organizationally owned, you've got some issues there.

00:10:55.509 --> 00:11:05.110
So cool thing in 10.6 is that security -x will prevent
the private key from being exported, all right.

00:11:05.110 --> 00:11:09.629
So you'll have a public key and a private key that
are stored in the key chain but if you're admin,

00:11:09.629 --> 00:11:12.939
even if you're root, you have no way
of exporting that private key out,

00:11:12.940 --> 00:11:15.410
so fun thing to keep in mind, so new to Snow Leopard.

00:11:15.409 --> 00:11:20.939
All right, now let's go back to the demo
to kind of show you the script at work.

00:11:20.940 --> 00:11:29.590
Director utility were bound in AD and this is
where I pass the hoop over my floating assistant.

00:11:29.590 --> 00:11:31.980
No kerb 5 credentials in the cache.

00:11:31.980 --> 00:11:44.700
I'm going to do SH, I'm going to grab my script
up here as root, done in bash to make Nigel cry.

00:11:47.600 --> 00:11:49.470
One identity imported!

00:11:49.470 --> 00:12:03.379
And now if I go up to key chain access and I go down to the
system, you'll actually see a computer certificate here.

00:12:03.379 --> 00:12:09.100
This was actually what was imported, you'll see it's for
computers, the name is MacBook, scroll back through here,

00:12:09.100 --> 00:12:14.230
client authentication, email protection,
whatever your template on the server's set up to be,

00:12:14.230 --> 00:12:18.930
plus actually getting a URL to
download the CA and everything else.

00:12:18.929 --> 00:12:27.169
So this should be fully usable for things like 802.1X
authentication, VPN authentication, even for email signing.

00:12:27.169 --> 00:12:33.779
So you could use the same way of doing it without actually
using it as the machine but using as the user instead.

00:12:33.779 --> 00:12:38.100
Now we're going against a 2k3 domain controller,

00:12:38.100 --> 00:12:43.100
so if we do a klist you can see that
I now have the kerb credentials.

00:12:43.100 --> 00:12:50.100
The kerb TGT and the service ticket for the web
server and if I quit Safari just to prove to you

00:12:50.100 --> 00:12:55.830
that there's nothing going on behind the scenes
and I go back to that certificate enrollment site,

00:12:55.830 --> 00:12:58.200
I don't get asked for authentication again.

00:12:58.200 --> 00:13:06.009
So that's the actual kerb authentication
leveraging the kinit -k.

00:13:06.009 --> 00:13:10.960
If you look at the script real quick it's not that advanced.

00:13:10.960 --> 00:13:13.210
We kind of do some enrolling.

00:13:13.210 --> 00:13:17.340
We set up the CSR and some other
stuff, taken a couple of arguments.

00:13:17.340 --> 00:13:22.940
I got to switch in here, the switch between 2k8 and user
and machine so you can do everything you want there.

00:13:22.940 --> 00:13:28.150
Check the status, DS config AD,
a lot of OpenSSL-- excuse me.

00:13:28.149 --> 00:13:32.620
We'll make this a little bigger so you can see
it a little easier and we'll get this posted.

00:13:32.620 --> 00:13:37.679
A lot of OpenSSL work so you can
actually generate the certificate request.

00:13:37.679 --> 00:13:40.389
Here is the kinit -k to go for the machine name.

00:13:40.389 --> 00:13:47.549
Here is if you're on 2k8 how to get a password with the ugly
way of taking it out of the Active Directory plist file.

00:13:47.549 --> 00:13:54.559
A little bit of Curl, this was something that I did end up
getting through Google that somebody had figured out how

00:13:54.559 --> 00:13:58.139
to pack that certificate into a Curl post.

00:13:58.139 --> 00:14:05.080
This is the nasty little bit of sed that Josh
figured out for me that picks all that up there.

00:14:05.080 --> 00:14:09.910
And then this is nice and I'll mention this
real quick, once you've gotten to cert done

00:14:09.909 --> 00:14:18.069
and if I do a dscl localhost, CD into active directory.

00:14:18.070 --> 00:14:22.950
Let me move this up a little bit and
make it even larger for everybody.

00:14:22.950 --> 00:14:30.240
CD all domains, computers, here is all
my computers on the MacBook in here.

00:14:30.240 --> 00:14:37.299
And if I read that you can see this big
old chunk of binary in here, all right,

00:14:37.299 --> 00:14:41.639
this is your certificate, this is the public certificate.

00:14:41.639 --> 00:14:46.750
You can pull that out just with the dscl
read, all right, nice and easy to do.

00:14:46.750 --> 00:14:49.879
The problem is you got to get it into
a format that can actually be used

00:14:49.879 --> 00:14:53.189
by the certificate assistant here at key chain access.

00:14:53.190 --> 00:14:57.000
And the magic there is XXD and Tim figured that out for me.

00:14:57.000 --> 00:15:00.750
I was banging my head against the
wall there for quite a bit.

00:15:00.750 --> 00:15:07.139
And then he packed it up into a PKCS12 format, grab
it in there and then use security to import it.

00:15:07.139 --> 00:15:11.289
If you are on 10.6 make sure you use
the -x if you don't want it exportable.

00:15:11.289 --> 00:15:13.990
And then this is all kind of the meat.

00:15:13.990 --> 00:15:15.919
There's actually not that much going on in there.

00:15:15.919 --> 00:15:22.860
So how you get a certificate from Active Directory
via the magic of scripting with not too much effort,

00:15:22.860 --> 00:15:26.850
just make sure you have a good team
that can do all the work for you.

00:15:26.850 --> 00:15:28.909
On that note, here is Josh.

00:15:28.909 --> 00:15:30.069
He is going to talk to you.

00:15:30.070 --> 00:15:33.930
>> For the record, the reason I didn't complete
his scripting solution is he only asked me

00:15:33.929 --> 00:15:41.409
to do the sed statement, so it wasn't because--
it was failure to lead from the top I guess, so.

00:15:42.750 --> 00:15:47.259
Some point in my career I became the
go-to guy for sed and if anyone else is

00:15:47.259 --> 00:15:50.350
in that position you know it's a terrible place to be.

00:15:50.350 --> 00:15:54.659
So what I'm going to talk today about
though is automated image development.

00:15:54.659 --> 00:15:58.199
This includes deployment, image creation,
all sorts of other things like that.

00:15:58.200 --> 00:16:00.410
So let's take a look here and what are we talking about.

00:16:00.409 --> 00:16:04.250
We're talking about making and
testing deployment images, ASR images,

00:16:04.250 --> 00:16:07.240
in some sort of way that we can get them on to a machine.

00:16:07.240 --> 00:16:09.870
We're talking about taking this path that lots of people do.

00:16:09.870 --> 00:16:13.720
Who is an admin in here that does
system image development for ASR stuff?

00:16:13.720 --> 00:16:17.670
Look at all the hands, way more
than the Windows 2k8 crowd, right,

00:16:17.669 --> 00:16:22.179
and we're going to cut a lot of
these out of here using automation.

00:16:22.179 --> 00:16:28.259
So one step at a time the way you normally do this is
you have to make an image, make a NetInstall ASR set,

00:16:28.259 --> 00:16:31.049
deploy that image, and then test the image, right.

00:16:31.049 --> 00:16:32.759
So it's four couple of key steps there.

00:16:32.759 --> 00:16:35.559
But really there's a whole bunch of other pieces to that.

00:16:35.559 --> 00:16:40.059
Making that image means you go install Mac OS X
then you have to go ahead and install your apps,

00:16:40.059 --> 00:16:45.179
you got to tweak all these settings to make sure it all
works, clean up the whole system, FireWire target diskette

00:16:45.179 --> 00:16:49.989
or USB diskette depending on what Mac you're running
on, then you got to make a NetInstall ASR set,

00:16:49.990 --> 00:16:53.240
most people then will copy that image
up through their server somewhere.

00:16:53.240 --> 00:16:57.970
They then open up SIU, create a workflow,
then you got to run that workflow

00:16:57.970 --> 00:17:01.290
to generate out this MBI set that gets built, right.

00:17:01.289 --> 00:17:06.740
Then you're going to deploy that image, you got to
go back to the client, you got to enable NetInstall

00:17:06.740 --> 00:17:12.049
and server admin, you have to set the client to boot from
the right NetInstall set, you're going to want to limit

00:17:12.049 --> 00:17:15.059
that NetInstall set to only boot your test clients because,

00:17:15.059 --> 00:17:19.190
has anyone ever reimaged someone's machine
by mistake with the development image?

00:17:19.190 --> 00:17:20.220
Yeah, I see a couple of hands.

00:17:20.220 --> 00:17:23.390
The hands only go up this high on that question, right.

00:17:23.390 --> 00:17:27.060
So, no one really wants to admit to that but it's happened.

00:17:27.059 --> 00:17:31.759
It's usually the more important users that don't know how to
set their startup disk too, so you got to keep that in mind.

00:17:31.759 --> 00:17:34.400
You got to image that client then and make sure it works.

00:17:34.400 --> 00:17:40.190
So that's 11 steps that you have to do every
single time you want to rev your image.

00:17:40.190 --> 00:17:45.360
And this is WWDC, so here are some Commodore
64 basic for everybody and we go down.

00:17:45.359 --> 00:17:49.479
Notice at step 50, we never gePt to go to home, right.

00:17:49.480 --> 00:17:51.450
Originally, I had a tilde here then I realized well,

00:17:51.450 --> 00:17:56.940
my Commodore wouldn't know what a tilde
meant, so I change it to actually home.

00:17:56.940 --> 00:18:01.700
So the first thing that comes to mind is I'm
getting way too old to do this anymore, right.

00:18:01.700 --> 00:18:03.730
This is not stuff I enjoy doing.

00:18:03.730 --> 00:18:07.190
So really what do I want to do as a systems administrator?

00:18:07.190 --> 00:18:09.779
The obvious answer is I want to do less work, right.

00:18:09.779 --> 00:18:14.450
I want to go-- to get home, I want to go to hang
out with my kids, I want to do all this fun stuff.

00:18:14.450 --> 00:18:21.650
So I requested less work and unfortunately Gil
told me I have to work faster and harder, right?

00:18:21.650 --> 00:18:24.610
This is nothing I was allowed to do.

00:18:24.609 --> 00:18:26.589
It's a cruel task master.

00:18:26.589 --> 00:18:31.569
So I'm on Twitter like a lot of people and I
thought what would fake Michael Bay do here, right,

00:18:31.569 --> 00:18:36.079
he is the guy who gets stuff done in an awesome way, right.

00:18:36.079 --> 00:18:38.879
But alas, more people know who this is
than we were hoping, so that's good.

00:18:38.880 --> 00:18:40.450
So he'd bring the pain, right.

00:18:40.450 --> 00:18:44.670
First he'd get a latte because that's obviously,
how many people work better caffeinated?

00:18:44.670 --> 00:18:47.050
Yeah, lots of hands, right, still more than Windows 2k8.

00:18:47.049 --> 00:18:50.829
We're going to use some robots
because robots are just awesome.

00:18:50.829 --> 00:18:53.289
There is going to be lot of boom involved in this as well.

00:18:53.289 --> 00:19:01.089
So here I had to get my latte right, and at work I got
a mentee, right, so I made him get me a latte and I live

00:19:01.089 --> 00:19:05.689
in North Carolina which you probably can't tell
from my voice but I do live in North Carolina.

00:19:05.690 --> 00:19:08.380
He lives in New York City so I made him fly me a latte.

00:19:08.380 --> 00:19:11.100
That's a huge boom right there, right.

00:19:11.099 --> 00:19:14.439
So now that I'm properly caffeinated
though I can get to work.

00:19:14.440 --> 00:19:18.470
So image creation automation, I've got more
automatons than everybody else at this point.

00:19:18.470 --> 00:19:23.960
So I'm going to go ahead and use Snow Leopard
SIU, we'll do a programmatic image build.

00:19:23.960 --> 00:19:29.090
This is new in Snow Leopard, all you have to do is say
I want to make a NetRestore set from Installer media,

00:19:29.089 --> 00:19:33.089
then it will install directly into a
disk image, lay your packages on top,

00:19:33.089 --> 00:19:36.329
convert it automatically into an MBI set and you're done.

00:19:36.329 --> 00:19:40.419
If you're on Leopard you can use the older instant
image stuff that does exact same sort of thing,

00:19:40.420 --> 00:19:45.350
just that it's not from Apple, boom, right.

00:19:45.349 --> 00:19:47.859
So then we get more robots, right, we're going to take that.

00:19:47.859 --> 00:19:51.549
One of the cool things about SIU is you can
use automator and there's our friend Auto.

00:19:51.549 --> 00:19:55.319
You can go ahead and then you can take that,
if you're using Snow Leopard, this is done.

00:19:55.319 --> 00:19:59.909
If you're using Leopard and you got an ASR
image, you feed that into SIU as a source,

00:19:59.910 --> 00:20:07.370
you can use the MAC filter automator action in System Image
Utility to make sure that's only going to boot that one Mac

00:20:07.369 --> 00:20:12.699
up so that you don't accidentally take out someone
with C in their titles MacBook when they come in.

00:20:12.700 --> 00:20:18.100
>> So you want to that, you can use automator command line
tool there to run that, just automator in the workflow.

00:20:18.099 --> 00:20:19.419
So for that I get a boom as well.

00:20:19.420 --> 00:20:20.750
There is a robot on screen.

00:20:20.750 --> 00:20:22.950
What's Michael Bay doing with robots?

00:20:22.950 --> 00:20:25.390
Sorry, cell, good bye Auto.

00:20:25.390 --> 00:20:29.520
So he of course would explode the robot into flames.

00:20:29.519 --> 00:20:33.440
Sometimes your robots get in fights there,
right, and that's always just awesome.

00:20:33.440 --> 00:20:38.640
So we're going to take, we're going to secure
copy this NBI set now up to our server.

00:20:38.640 --> 00:20:40.570
We're going to enable that image.

00:20:40.569 --> 00:20:43.829
And server admin, there is a nice
server admin command line tool.

00:20:43.829 --> 00:20:48.230
UC [phonetic] showed that the other day in a couple of
sessions and you can just use that to enable the image.

00:20:48.230 --> 00:20:52.769
Server admin though thinks that SIU doesn't
know what it's doing all the time and it takes

00:20:52.769 --> 00:20:55.470
out that MAC filter, the per image MAC filter.

00:20:55.470 --> 00:20:59.120
So in that case we just use PListBuddy
just to get back in there.

00:20:59.119 --> 00:21:00.750
It's just kind of what it's doing right now.

00:21:00.750 --> 00:21:04.109
Then we're going to go ahead and set the
client Mac to boot up from the NetInstall set.

00:21:04.109 --> 00:21:07.159
This can be back on the client the same
script or just can use the bless command,

00:21:07.160 --> 00:21:09.160
right, bless and just point it at the server.

00:21:09.160 --> 00:21:11.090
Bless is really flexible for this.

00:21:11.089 --> 00:21:16.399
For those of you that want to do NetBoot across subnet
and you're worried about the DHCP helper addresses,

00:21:16.400 --> 00:21:21.690
you can just bless directly whatever
machine you want and as long as TFTP and NFS

00:21:21.690 --> 00:21:24.799
or HTTP path, you're going to be fine, it will go.

00:21:24.799 --> 00:21:29.899
Pseudo restart now and it reboots, boom, off of that image.

00:21:29.900 --> 00:21:32.370
We're going to let launchd do our bidding.

00:21:32.369 --> 00:21:36.559
This is the part I really like, right, because I can
just schedule the script now with the launchd to run it,

00:21:36.559 --> 00:21:40.589
I don't know midnight or 6:15 in the afternoon.

00:21:40.589 --> 00:21:43.000
I just queue it up and go home, right.

00:21:43.000 --> 00:21:44.680
That's the least work of all.

00:21:44.680 --> 00:21:48.610
And it just runs automatically and when I come
back in to work I got my machine booted up off

00:21:48.609 --> 00:21:52.709
of my test deployment image and I can just
take a look at it and see what has happened.

00:21:52.710 --> 00:21:59.970
A definite boom on that one as well, lots of
boom, right, and explosions, why not, wrong way.

00:22:01.539 --> 00:22:04.480
So less work for me, that's the
whole goal of scripting, right.

00:22:04.480 --> 00:22:09.660
We have this incredible computer that can do all
this stuff, millions of computations a second,

00:22:09.660 --> 00:22:11.900
yet I have to sit there with a
mouse and make it do everything.

00:22:11.900 --> 00:22:14.800
So the whole point of automation and
scripting is so we don't have to do it.

00:22:14.799 --> 00:22:17.329
In this case now I've got image creation that's automated.

00:22:17.329 --> 00:22:21.029
My NetInstall creation is automated
and my image deployment is automated.

00:22:21.029 --> 00:22:23.750
So to wrap all this-- uh-oh.

00:22:23.750 --> 00:22:28.720
This doesn't look-- yeah OK, so
that was a bit short I guess, right.

00:22:29.759 --> 00:22:35.170
Oh yeah, and the DRI is not happy with
how short that was, so, and too much boom.

00:22:35.170 --> 00:22:38.170
And no demo, that's true.

00:22:38.170 --> 00:22:43.700
By the way that's the guy I made fly me the latte, right,
so I guess that's him getting back at me at this point.

00:22:43.700 --> 00:22:48.299
So there is a bonus solution to my part
here, automated local management policy.

00:22:48.299 --> 00:22:56.359
How many people use Management Policy MCX from
centralized directory services, OD, AD, YP, god help you.

00:22:56.359 --> 00:22:58.409
All right, some hands.

00:22:58.410 --> 00:23:04.090
So how many people would like to use management policy
on the Macs but they can't because they're not allowed

00:23:04.089 --> 00:23:07.500
to fiddle with director services
or run other ones, some more hands.

00:23:07.500 --> 00:23:09.390
So what are we talking about here?

00:23:09.390 --> 00:23:16.330
Here we're talking about creating local management
policy and then scripting the deployment of that policy.

00:23:16.329 --> 00:23:18.029
So why in the world would I do that?

00:23:18.029 --> 00:23:21.069
One of the magical things about
Mac OS X's directory services is

00:23:21.069 --> 00:23:27.579
that it just takes anything you feed it pretty much as
a source, right, AD got the right schema, management.

00:23:27.579 --> 00:23:30.909
Anything you got, any LDAP, any AD
integration, anything like that.

00:23:30.910 --> 00:23:34.220
You can just pull your management data
directly from it and it's really nice.

00:23:34.220 --> 00:23:39.240
Well sometimes you got people in bizarre situations so
they can't make computer records in the directory services,

00:23:39.240 --> 00:23:42.809
no Mac address attached to that, no management policy.

00:23:42.809 --> 00:23:45.879
Or there are situations they can't extend the DS schema.

00:23:45.880 --> 00:23:49.900
A lot of times we see this when we're working with
a customer doing a proof of concept or something

00:23:49.900 --> 00:23:53.850
with the Macintosh, so they get the
small populations of Mac testing.

00:23:53.849 --> 00:23:58.049
We've been to a lot of places that just have polices
that say proof of concepts that aren't production,

00:23:58.049 --> 00:24:02.970
you are not allowed to touch the schema,
or say for populations under, you know,

00:24:02.970 --> 00:24:05.890
a certain number of machines, not
allowed to touch the schema.

00:24:05.890 --> 00:24:11.450
So in a lot of those cases we end up doing this local
management policy so that we can work around that,

00:24:11.450 --> 00:24:16.140
they can still test their policy and when they go to the
full on deployment they stop using this and they move

00:24:16.140 --> 00:24:20.450
up to using the larger scale centralized directory service.

00:24:20.450 --> 00:24:21.580
So how do you do this?

00:24:21.579 --> 00:24:23.109
It's pretty easy to set it all up.

00:24:23.109 --> 00:24:27.490
You're just going to create a local computer object,
you're going to set policy on it with Workgroup Manager

00:24:27.490 --> 00:24:33.450
and you're going to export that policy with
dscl -mcxexport using the MCX plug-ins on dscl.

00:24:33.450 --> 00:24:39.900
You then going to need to suck that up somehow, so what
you have to do is on the new machines that get deployed,

00:24:39.900 --> 00:24:44.830
you have to create that local computer object and
then you have to import that policy with dscl again,

00:24:44.829 --> 00:24:49.309
so dscl -mcximport, creatively named enough.

00:24:49.309 --> 00:24:55.000
The tools that you need to get this done, the ones that
you have to have, Workgroup Manager, dscl, launchd.

00:24:55.000 --> 00:24:58.390
Workgroup Manager free download from
Apple, part of the server admin tool kit.

00:24:58.390 --> 00:25:02.460
You go to support.apple.com and you search
for it, downloads, 900 versions come up,

00:25:02.460 --> 00:25:06.910
find the one with the latest date and you'll
get a nice new copy of Workgroup Manager.

00:25:06.910 --> 00:25:13.080
dscl launchd part of it, a new tool on Leopard
that I really love and love and love is mcxrefresh.

00:25:13.079 --> 00:25:16.699
This is GP update for Mac, right.

00:25:16.700 --> 00:25:21.559
No longer need to log out, log in, reboot,
all this to see what your policy changes are.

00:25:21.559 --> 00:25:24.909
So when you're working in Workgroup Manager
you can just keep refreshing policy.

00:25:24.910 --> 00:25:31.480
Not an Apple tool but a bit of open sorcery you can get
from SourceForge's Lingon which is a nice little application

00:25:31.480 --> 00:25:35.140
that lets you-- it's a nice GUI
front end to making launchd jobs.

00:25:35.140 --> 00:25:39.320
I just use that 'cause I'm lazy and I
don't have anyone I can delegate it to.

00:25:39.319 --> 00:25:42.639
So how do I do this, right, how will I make this work?

00:25:42.640 --> 00:25:44.500
Well, you're going to create that account.

00:25:44.500 --> 00:25:46.710
So Workgroup Manager is what we're going to use here.

00:25:46.710 --> 00:25:53.460
You go to Server, View Directories, go to
Local/Default and Authenticate, and click New Computer.

00:25:53.460 --> 00:26:00.190
Makes the computer, give it a name, put in the loopback
IP address and the Mac address of that and you're done,

00:26:00.190 --> 00:26:02.220
that's it, right, nothing else to do there.

00:26:02.220 --> 00:26:07.200
So then you're going to go and apply just
standard old Apple management policy.

00:26:07.200 --> 00:26:09.350
Apple has got really nice flexible management policy.

00:26:09.349 --> 00:26:13.579
We'll look at a couple of these in our demo here
and we can give it some policy in this case.

00:26:13.579 --> 00:26:16.349
I have disabled the iTunes Store and things like that.

00:26:16.349 --> 00:26:19.959
That's a really common policy we see done a lot.

00:26:19.960 --> 00:26:25.240
Then going to export that out of there, right, so dscl
mcxexport, tell it where you want to point that blob

00:26:25.240 --> 00:26:30.460
of policy, it just spits out a plist
file, right, that's easy enough.

00:26:30.460 --> 00:26:34.710
And then what, right, so you got
a folder with some stuff in it

00:26:34.710 --> 00:26:37.930
but how do you get a computer account
created automatically on a Mac?

00:26:37.930 --> 00:26:41.039
How do you get policy imported automatically on the Mac?

00:26:41.039 --> 00:26:44.029
So this is where we do it all at startup time.

00:26:44.029 --> 00:26:48.569
In your deployment image you'll have a startup item in
there and then that startup item is going to do two things,

00:26:48.569 --> 00:26:51.439
it's going to create the local
computer account and then it's going

00:26:51.440 --> 00:26:55.809
to also import that policy blob using dscl mcximport.

00:26:55.809 --> 00:26:59.000
It's very simple, it's just this
little bash thing I knocked together.

00:26:59.000 --> 00:27:03.630
So the first chunk up here just creates a
local computer account called local host.

00:27:03.630 --> 00:27:07.830
I like to call them local host because that's
what they are, right, and just goes in.

00:27:07.829 --> 00:27:12.189
It goes doing the-- it chops out the
Mac address from looking at ifconfig

00:27:12.190 --> 00:27:15.890
and then it goes ahead and puts
the loop back IP address on it.

00:27:15.890 --> 00:27:23.110
The next line here is it just goes and imports
onto that account or policy or MCX and it just--

00:27:23.109 --> 00:27:25.149
you put the policy wherever you put the policy.

00:27:25.150 --> 00:27:28.080
I like user local because it's kind of unique CLI.

00:27:28.079 --> 00:27:32.889
People use application support/name of company,
you know, just wherever you want to put it.

00:27:32.890 --> 00:27:34.420
It really doesn't matter.

00:27:34.420 --> 00:27:38.250
And then in this case, an optional step here
is I remove that launchd job at the end.

00:27:38.250 --> 00:27:42.700
I just delete it out of there so it doesn't
keep reimporting that policy every time.

00:27:42.700 --> 00:27:45.160
Some people leave that in there
so that way they can just push

00:27:45.160 --> 00:27:48.300
out a new policy blob if they want
with ARD or something like.

00:27:48.299 --> 00:27:51.000
And then on next reboot it will pull that in.

00:27:51.000 --> 00:27:57.930
Note that because you're not using directory services here
to provide that policy source or rather a file import,

00:27:57.930 --> 00:28:01.230
you're not going to get the nice
automatic dynamic updating that you get

00:28:01.230 --> 00:28:02.960
when you just make the changes in directory service.

00:28:02.960 --> 00:28:07.210
There's a little bit more of a manual process here.

00:28:07.210 --> 00:28:08.079
That's what Lingon looks like.

00:28:08.079 --> 00:28:09.109
We'll see it in our demo.

00:28:09.109 --> 00:28:11.209
It's just-- like I said it's from SourceForge.

00:28:11.210 --> 00:28:15.279
It just makes editing your launchd
items extremely easy to use.

00:28:15.279 --> 00:28:20.349
Another explosion, flames, boom, all that stuff,
and with that let's take a look at the demo here.

00:28:20.349 --> 00:28:24.289
So I've got a couple of different things here and the first
thing I want to do is take a look at Workgroup Manager.

00:28:24.289 --> 00:28:30.690
And here is Workgroup Manager, you can see I'm
just in local default, everyone read that, OK.

00:28:30.690 --> 00:28:36.769
So we're in local default there and what we're going
to do is we're going to make a new computer account.

00:28:36.769 --> 00:28:47.410
So if I go to the Computer tab and click New Computer,
I can install on the name, local host and then I needed

00:28:47.410 --> 00:28:48.820
to go and found some network information.

00:28:48.819 --> 00:28:56.169
So here just going to 7.00.1 and then the
Mac address which there's 900 ways to get it.

00:28:56.170 --> 00:29:01.930
I'll do it the really lazy way and just
take a look in system profile, right.

00:29:01.930 --> 00:29:07.140
So Ethernet 1, that's E and 0 and
there is the Mac address there.

00:29:07.140 --> 00:29:13.440
You can't copy and paste it into here which is a bit
annoying because it automatically puts the colons in, right,

00:29:13.440 --> 00:29:22.070
2, 3, DFDD9E78, OK, so we're going to save that.

00:29:22.069 --> 00:29:26.269
Now that we've saved that, we can
go and apply some preferences to it.

00:29:26.269 --> 00:29:29.839
One that's great for demos is move the dock,
right, because that's a really obvious one.

00:29:29.839 --> 00:29:35.789
So always dock in the left and while I'm at it
I'm going to make the punishment DOC out of it.

00:29:35.789 --> 00:29:37.740
So there we go.

00:29:37.740 --> 00:29:39.420
This is great to do to people.

00:29:39.420 --> 00:29:42.220
So the punishment DOC always works well.

00:29:42.220 --> 00:29:44.769
The next thing I want to do is I
wanted to do that iTunes one, right.

00:29:44.769 --> 00:29:49.650
Does anyone allow users to buy music
while they're at work on the iTunes Store?

00:29:49.650 --> 00:29:52.800
OK, like a couple of hands but
most of the hands stayed down.

00:29:52.799 --> 00:29:58.119
See, that's one of those negative questions where
the hands that stayed down are the ones that win.

00:29:58.119 --> 00:30:04.229
So if we're going to details I can load in the
manage preference manifest that we put on the system.

00:30:04.230 --> 00:30:13.920
So if I go to the system, library, core
services, manage client, and import that,

00:30:13.920 --> 00:30:16.550
I get all the nice manifest on the system.

00:30:16.549 --> 00:30:20.740
>> This is documented in all that
stuff so nothing too crazy.

00:30:20.740 --> 00:30:23.990
I'm going to go into iTunes now and I'm
going to make a new key as an always key.

00:30:23.990 --> 00:30:28.650
I'm going to say disable iTunes Store=true.

00:30:28.650 --> 00:30:31.340
So no more iTunes Store in iTunes.

00:30:31.339 --> 00:30:34.119
So now that I've done that, let's
take a look at what that looks likes.

00:30:34.119 --> 00:30:39.129
Now I could just read it on the local
host here, but that's a pain, right?

00:30:39.130 --> 00:30:40.470
This is just dscl read.

00:30:40.470 --> 00:30:44.069
That's the policy there, the MCX settings attribute.

00:30:44.069 --> 00:30:47.659
So yeah, that's-- I don't know
what to do with that really though.

00:30:47.660 --> 00:30:53.259
So what I can do though is I can use the mcxexport command.

00:30:53.259 --> 00:31:02.859
So I'm going to type that in, mcxexport, not
in all caps, and then I need to give it a

00:31:02.859 --> 00:31:07.929
out file location, I'll call it policy_blob.plist.

00:31:07.930 --> 00:31:10.180
All right.

00:31:10.180 --> 00:31:16.460
So now let's output into my home folder a
blob of policy and you can look at that there.

00:31:16.460 --> 00:31:19.980
Just quick-- quick look and save my life so much now.

00:31:19.980 --> 00:31:24.799
And you can see it's just a, you know, just a
regular plist, but it's all formatted nicely for me.

00:31:24.799 --> 00:31:27.750
I don't have to worry about it at all.

00:31:27.750 --> 00:31:30.490
So then how do I get this into my system automatically?

00:31:30.490 --> 00:31:35.019
Well I've got my script here that I just
showed you earlier where it just removes,

00:31:35.019 --> 00:31:38.099
creates the host and then it imports in that file.

00:31:38.099 --> 00:31:42.029
You can see I've chosen as my location user local, LocalMCX.

00:31:42.029 --> 00:31:44.789
Just 'cause because.

00:31:44.789 --> 00:31:48.000
So if I wanted to I can go ahead and move that in there.

00:31:48.000 --> 00:31:48.690
I'm going to go here.

00:31:48.690 --> 00:31:50.670
I've got my LocalMCX folder here.

00:31:50.670 --> 00:31:54.519
I'm going to drop in my new policy blob I just created,

00:31:54.519 --> 00:31:57.450
place that and I've just got my
script and my policy blob there.

00:31:57.450 --> 00:31:59.539
So I need to put that in user local.

00:31:59.539 --> 00:32:02.899
That's very easy to do if I just say go to folder.

00:32:02.900 --> 00:32:09.150
And type in user and there's not a user
local on here so I need to make that path.

00:32:09.150 --> 00:32:18.120
So pseudo make their user local,
yes I know I'm being dangerous.

00:32:18.119 --> 00:32:23.429
And then I can go ahead and copy that folder in there.

00:32:24.619 --> 00:32:26.639
All right, so now I've got that in there.

00:32:26.640 --> 00:32:33.300
One thing you should always do when you copy scripts around
in the finder is go back and check your mode on it, right?

00:32:33.299 --> 00:32:38.200
So LSL user local, LocalMCX.

00:32:38.200 --> 00:32:43.420
Make sure it's-- the script has got the execute bit set
otherwise you get stuck and then you're just staring at it

00:32:43.420 --> 00:32:49.480
and trying to figure out why it won't work 'cause without
that bit set it's just a TXT file, right, nothing fancy.

00:32:49.480 --> 00:32:53.349
So what I want to do now to prove this
works is I'm going to come back into account

00:32:53.349 --> 00:32:57.459
and I'm going to remove this computer account.

00:32:57.460 --> 00:33:00.920
That's gone, there's no longer a
computer account on this machine.

00:33:00.920 --> 00:33:07.019
And if I were to go back and look with dscl
it-- unless it's all cached up which it's not.

00:33:07.019 --> 00:33:09.660
It says no record found, right?

00:33:09.660 --> 00:33:12.220
So I need to set this through a fire up and start up this.

00:33:12.220 --> 00:33:15.650
I'm going to fire Lingon here and say I want

00:33:15.650 --> 00:33:22.550
to make user daemon launch system
startup, and in my case com.apple.LocalMCX.

00:33:22.549 --> 00:33:27.549
I'm going to choose what I want it to run.

00:33:27.549 --> 00:33:36.409
I just want it to run my folder from user local,
so I'll just navigate user local, pick the script

00:33:36.410 --> 00:33:39.400
and say do it at startup, right, save that.

00:33:39.400 --> 00:33:44.280
Because I'm making it as a system level
startup, I need to authenticate again obviously.

00:33:44.279 --> 00:33:52.149
And you can go look and see where it put that and put
it in library launch daemons and there it is there.

00:33:52.150 --> 00:33:55.500
So I didn't have to worry about all
that formatting, right, and do that.

00:33:55.500 --> 00:34:00.630
Normally what I did before I had this tool to make launchd
items I would just go grab one out of the system library,

00:34:00.630 --> 00:34:03.470
launch daemons folder and hack it up to make it work for me.

00:34:03.470 --> 00:34:06.250
And now I don't even have to need to do that anymore.

00:34:06.250 --> 00:34:08.500
So all that's done, this is primed and ready to go.

00:34:08.500 --> 00:34:14.750
So if the demo gods smile on us, we're going to reboot
and we will continue to have video on this machine so.

00:34:14.750 --> 00:34:21.480
OK, so here's my punishment DOC, all right,
the least usable UI ever conceived here.

00:34:21.480 --> 00:34:21.929
Ooh, where did that go?

00:34:21.929 --> 00:34:30.730
All right, so I can take a look at that if I were to
try to find iTunes, there we go and launch it and go

00:34:30.730 --> 00:34:36.150
and agree to the agreement and it comes up.

00:34:36.150 --> 00:34:38.480
No, I don't want that right now.

00:34:38.480 --> 00:34:40.490
Doug, are you in the room?

00:34:43.050 --> 00:34:45.990
So, no iTunes Music Store here.

00:34:45.989 --> 00:34:50.359
If we look into Preferences we can see
the store has been disabled by-- let's--

00:34:50.360 --> 00:34:54.050
don't look at the Parental,
been disabled by policy, right.

00:34:54.050 --> 00:34:58.830
So we've disabled that by policy
and if I were to take a look back--

00:34:58.829 --> 00:35:05.849
oh my, with terminal here, I can
look in on my computer account.

00:35:05.849 --> 00:35:07.179
The computer account was created again.

00:35:07.179 --> 00:35:13.519
The Mac address was put in properly and
there's my dscl MCX settings keys in there.

00:35:13.519 --> 00:35:18.309
So that in a nut shell is how to
automate the employment of local policy.

00:35:18.309 --> 00:35:19.110
>> Thanks Josh.

00:35:19.110 --> 00:35:27.019
So one of the things that Josh covered is how to get
more automation so you don't have to do a lot of work

00:35:27.019 --> 00:35:30.820
and Joel talked a bit about how he wanted
people that worked for him to do a lot of work.

00:35:30.820 --> 00:35:34.420
I won't actually get your users to do your
work for you, so you can just look good.

00:35:34.420 --> 00:35:38.450
So the way to do that is you, these
people are thinking oh crap,

00:35:38.449 --> 00:35:41.469
Tim's up here doing another representation
about how to wrap command line scripts.

00:35:41.469 --> 00:35:46.649
But this one is actually kind of a mule in the
sense that I have two really cool applications

00:35:46.650 --> 00:35:48.360
that I want to get other people to help me work on.

00:35:48.360 --> 00:35:54.840
So not only can I get your users to work for you but
I can get you to work for me, which is even more fun.

00:35:54.840 --> 00:35:57.050
So the two ones is trying to get to work a round for DFS.

00:35:57.050 --> 00:36:02.500
How many people have been bitten by I
can't the get the DFS to work on my Mac?

00:36:02.500 --> 00:36:04.519
Hopefully, we can have a work around for that.

00:36:04.519 --> 00:36:10.889
And the other one is a total hack of a local
account so that we're able to create mobile thinking

00:36:10.889 --> 00:36:14.429
with just a regular local account
without any directory services,

00:36:14.429 --> 00:36:18.129
which is a little bit ironic considering I'm
a directory services consulting engineer,

00:36:18.130 --> 00:36:24.480
encouraging people not to use directory services is
kind of a career limiting decision but it also happens.

00:36:24.480 --> 00:36:32.059
So we're going to talk about really the-- ostensibly we want
to talk about how to write scripts so that the interface

00:36:32.059 --> 00:36:37.769
between the command-- between the GUI application that
you're planning on writing and the script is clean

00:36:37.769 --> 00:36:44.420
and the able-- you're able to easily run the script
as well as integrate it into a COBOL application

00:36:44.420 --> 00:36:45.800
or anything else that you used to wrap it.

00:36:45.800 --> 00:36:54.860
So we're going to be talking about basically three ideas,
the STDin, STDout, STDerr, signals and then finally getopt

00:36:54.860 --> 00:36:58.000
or getopts depending on what language you're talking about.

00:36:58.000 --> 00:37:02.639
So let's talk about communication with
your scripts because this is important.

00:37:02.639 --> 00:37:09.009
What we're trying to avoid is getting a-- I mean you
have this great script that you run and it works great.

00:37:09.010 --> 00:37:11.160
You put a GUI wrap around it, it works great.

00:37:11.159 --> 00:37:12.679
You give it out to user, they run it.

00:37:12.679 --> 00:37:18.239
It takes 30 seconds to run because their DS--
DNS isn't as good as you have in the lab.

00:37:18.239 --> 00:37:24.879
And it freezes up getting the spinning beach
ball of death and there's no way to cancel.

00:37:24.880 --> 00:37:29.349
So what we do it by STDin, STDout and STDerr
is being able to communicate to your script.

00:37:29.349 --> 00:37:32.170
So you don't have this kind of issues.

00:37:32.170 --> 00:37:38.380
First thing STDin allows you to communicate into your
script, so basically you're passing in information.

00:37:38.380 --> 00:37:46.250
STDout allows you to get information out, so if we have
logging information, well actually this is just output.

00:37:46.250 --> 00:37:50.650
So if you have output to or from your script that you
want to take a value and be able to populate that,

00:37:50.650 --> 00:37:53.760
then you can get that from STDout and you want--

00:37:53.760 --> 00:37:57.680
you don't want that intermix with logging
information so you do that in standard error.

00:37:57.679 --> 00:37:58.809
So we'll briefly talk about that.

00:37:58.809 --> 00:38:01.739
So here's a great simple example in bash.

00:38:01.739 --> 00:38:07.119
This is as much bash-- this is as much bash as I'll
write before I start screaming and go into Perl

00:38:07.119 --> 00:38:13.299
because bash has always been annoying
with Nigel on that one, sorry Gel.

00:38:13.300 --> 00:38:17.990
So we could see the first line is this goes to STDout.

00:38:17.989 --> 00:38:20.619
Anytime this echoes some to the console, it goes to STDout.

00:38:20.619 --> 00:38:26.659
If you want to be a little bit more geeky to it you can
put >&1 in that way it looks cooler on your scripts.

00:38:26.659 --> 00:38:32.539
But again it will just go to STDout 'cause the
file descriptor for STDout is by-- is number 1.

00:38:32.539 --> 00:38:34.789
And if you're going to put some
of this STDerr you just do >&2.

00:38:34.789 --> 00:38:42.509
And if you want to read something from STDin
you have basically just while read lines

00:38:42.510 --> 00:38:44.050
that will read in from standard input.

00:38:44.050 --> 00:38:48.769
And the nice thing about this is that if you pipe a
command, you do echo on the command line, you type something

00:38:48.769 --> 00:38:51.639
and you pipe and fill into your
script, it will read it from STDin.

00:38:51.639 --> 00:38:53.900
If you don't do that it will prompt the user.

00:38:53.900 --> 00:38:59.570
So one of the nice things is that no matter how
you run your script, you're able to do that.

00:38:59.570 --> 00:39:00.930
Also let's talk about signals.

00:39:00.929 --> 00:39:05.969
So people have-- a lot of times if you write these
GUI wrappers, something happens, the script dies

00:39:05.969 --> 00:39:08.899
or your GUI application dies but your script keeps running.

00:39:08.900 --> 00:39:12.420
And you want to be able, some way to be
able to communicate and tell your script

00:39:12.420 --> 00:39:17.240
"I don't care what you're doing, I
want to be able to manipulate it."

00:39:17.239 --> 00:39:18.279
Tell it to do something else.

00:39:18.280 --> 00:39:22.830
So it's waiting for user input, I don't want to have
the user type in you know exit or menu or whatever,

00:39:22.829 --> 00:39:26.199
I want it just to be able that your GUI
application say cancel or check box,

00:39:26.199 --> 00:39:28.679
have it automatically do something, so we use signals.

00:39:28.679 --> 00:39:31.559
And in Mac OS X there's a lot of signals.

00:39:31.559 --> 00:39:32.769
It didn't use to be this way.

00:39:32.769 --> 00:39:35.380
I'm really, really concerned with two signals.

00:39:35.380 --> 00:39:38.119
Basically, a little concerned with the HUP and TERM.

00:39:38.119 --> 00:39:44.139
[Static noise] So people are aware
of where the term HUP came from.

00:39:44.139 --> 00:39:56.440
HUP allows-- I was always kind of curious, HUP
allows you to-- I wish it would connect up to.

00:39:56.440 --> 00:39:58.650
Damn. That Genie service is slow today.

00:39:58.650 --> 00:40:04.900
This is actually a photo of Josh's-- [static noise], man.

00:40:04.900 --> 00:40:12.619
Somebody just picked up the phone downstairs.

00:40:12.619 --> 00:40:13.009
Oh my goodness.

00:40:13.010 --> 00:40:13.850
[ Laughter ]

00:40:13.849 --> 00:40:18.849
>> So it's actually a picture of Josh's acoustic coupler
when he was switching from his BBS system to Genie.

00:40:18.849 --> 00:40:20.099
So this is in his basement.

00:40:20.099 --> 00:40:24.449
He still actually uses it to play gaming on the weekends.

00:40:25.699 --> 00:40:30.529
So the interesting story behind HUP is
that HUP is usually sent to a command--

00:40:30.530 --> 00:40:34.370
a signal that sent to a daemon or something
like that to reread this configuration.

00:40:34.369 --> 00:40:39.659
And to me it was always interesting why you would
use hang up to reread reconfiguration because hang

00:40:39.659 --> 00:40:41.500
up would assume that you're disconnecting.

00:40:41.500 --> 00:40:46.559
Well there wasn't that many signals so
they reused HUP for whatever reason.

00:40:46.559 --> 00:40:52.730
So, what signal gets you is that if you have this-- so
you have the script that I wrote before and you're reading

00:40:52.730 --> 00:40:54.699
from the input, right, it's waiting for the user input.

00:40:54.699 --> 00:40:57.159
And that works great if they want to quit, they type quit.

00:40:57.159 --> 00:40:58.929
But you have a GUI application now, right?

00:40:58.929 --> 00:41:02.690
And what happens when that's waiting for input you don't
want it to have a spinning wheel there or whatever,

00:41:02.690 --> 00:41:04.639
you want to be able to just click Cancel.

00:41:04.639 --> 00:41:07.000
And, but the problem is the script is
in the middle of doing something else.

00:41:07.000 --> 00:41:10.260
So what you do, it's very easy
in bash and in most languages,

00:41:10.260 --> 00:41:14.430
is you just put what's called a-- you trap a signal.

00:41:14.429 --> 00:41:17.969
And so what you're saying is that if you get the
signal which is the kill signal or something like that

00:41:17.969 --> 00:41:24.689
on the command line or you can send it from any application
is allow you to say to the script "whatever you're doing,

00:41:24.690 --> 00:41:27.250
stop doing that and go run this function."

00:41:27.250 --> 00:41:30.409
And the function all it does is report cut signal.

00:41:30.409 --> 00:41:32.269
In this way it would do some cleanup
and those kinds of things.

00:41:32.269 --> 00:41:36.590
So we're really trying to avoid, we're going to have some
good logging in our application, we also want to be able

00:41:36.590 --> 00:41:41.400
to have-- be able to tell the script
to stop doing what it is doing.

00:41:41.400 --> 00:41:44.910
All right, now let's look at getopt.

00:41:44.909 --> 00:41:50.719
So getopt is one of the things that you'll see common
in the scripts that we present here and it allows you

00:41:50.719 --> 00:41:54.369
to have command line arguments
that make a little bit of sense.

00:41:54.369 --> 00:41:59.369
'Cause as we see there is some command line
utilities that have command line options and arguments

00:41:59.369 --> 00:42:01.969
that don't necessarily follow the UNIX convention.

00:42:01.969 --> 00:42:07.750
Well if you use getopts it allows you to specify
command line arguments that kind of make sense.

00:42:07.750 --> 00:42:14.760
So it-- a lot of times when people first start scripting,
they think OK, I have this command line utility, it's -v,

00:42:14.760 --> 00:42:17.160
you know -c and a and so they start parsing.

00:42:17.159 --> 00:42:19.389
OK, the first character is dash, all right.

00:42:19.389 --> 00:42:22.609
Oh, this must be an argument and it goes
through and does it character by character.

00:42:22.610 --> 00:42:26.030
So string parsing is for suckers
and I don't have time to do that.

00:42:26.030 --> 00:42:30.310
So getopt allows you to easily parse
arguments and it provides consistent interface.

00:42:30.309 --> 00:42:37.150
You don't have this DD type you know
OFIF type interface where things are--

00:42:37.150 --> 00:42:42.769
people aren't able to use it easily because they don't
really understand how you're supposed to pass arguments in.

00:42:42.769 --> 00:42:47.019
It saves you a lot of time and if you
save time, you actually have more money.

00:42:47.019 --> 00:42:50.719
If you have more money, you have more free
time and then you can write more scripts.

00:42:50.719 --> 00:42:54.369
So it actually works out really well.

00:42:54.369 --> 00:42:58.349
And getopt is available in lots of
different languages, it can do it in--

00:42:58.349 --> 00:43:02.639
I didn't actually write this because this is more
than the four lines of bash before I run away.

00:43:02.639 --> 00:43:10.969
This is some sample code and it's basically you just
specify with options V and C:, V means verbose into flag.

00:43:10.969 --> 00:43:17.819
If you have a colon it means it has a value, it does all the
checking, gets an error like hey don't -C requires an input.

00:43:17.820 --> 00:43:19.830
And so you can see it actually it reads them in.

00:43:19.829 --> 00:43:24.969
Of course there is getopt in Ruby
so if you roll in the new Web 2.0

00:43:24.969 --> 00:43:29.119
like certainly over here you would actually use Ruby.

00:43:29.119 --> 00:43:31.779
If you want to do it in Perl, you can do it in Perl as well.

00:43:31.780 --> 00:43:36.440
This is my preferred method because it's
shorter and makes more sense than dash does.

00:43:36.440 --> 00:43:39.409
You can also do it in Python.

00:43:39.409 --> 00:43:44.299
It's not as good of a language but it's pretty close.

00:43:44.300 --> 00:43:49.310
And if you're like that's cool for those new
cool languages, what happens if I roll a FORTRAN?

00:43:49.309 --> 00:43:53.340
Well you can actually get getopt in FORTRAN as well.

00:43:53.340 --> 00:43:58.970
[Laughter] I'm not sure if this will
actually compile on their own and--

00:43:58.969 --> 00:44:02.730
and I was actually told by Jordan
that that joke wasn't funny.

00:44:02.730 --> 00:44:06.260
So I twittered it and Nigel came
back with a better joke for FORTRAN.

00:44:06.260 --> 00:44:10.400
[Laughter] This is my backup joke.

00:44:10.400 --> 00:44:12.980
So now we actually got the script.

00:44:12.980 --> 00:44:16.650
Let's talk about doing the interface
between it and it's very simple.

00:44:16.650 --> 00:44:21.180
We're not Objective-C programmers, but we
should be able to write a wrapper script.

00:44:21.179 --> 00:44:22.329
There's lots of sample code.

00:44:22.329 --> 00:44:26.529
And one of the things that I want to do is these two
samples, let's get them out there for two reasons.

00:44:26.530 --> 00:44:31.970
One is to give you kind of a framework to be able to
wrap some of your GUI ones in a way that's, you know,

00:44:31.969 --> 00:44:35.719
well user-interfaced application
with a script behind it as well

00:44:35.719 --> 00:44:39.119
as help you actually accomplish
some task that these two scripts do.

00:44:39.119 --> 00:44:42.500
So you could see that these kind of mirror what we just did.

00:44:42.500 --> 00:44:45.059
We're going to start NSTask which will be our script.

00:44:45.059 --> 00:44:47.190
NSPipe which allow it to communicate to us.

00:44:47.190 --> 00:44:50.889
We can have blogging, we can have you know
interaction with the script while it's running.

00:44:50.889 --> 00:44:52.710
We can kill it in a way that makes sense.

00:44:52.710 --> 00:44:57.960
You don't have a bunch of craft laying around and then
if we want to slam it we can use the system command

00:44:57.960 --> 00:45:01.039
to be actually be able to just run a synchronous script.

00:45:01.039 --> 00:45:05.590
All right, so here's the required code.

00:45:05.590 --> 00:45:06.640
I think I have some highlight here.

00:45:06.639 --> 00:45:07.429
I don't have highlighting.

00:45:07.429 --> 00:45:08.409
All right.

00:45:08.409 --> 00:45:13.230
So you can see that this is-- one of the interesting
things is that it mirrors what we did before.

00:45:13.230 --> 00:45:19.949
Objective-C has the idea of pipes which allows you to
communicate to STDin and STDout, STDout and STDerr.

00:45:19.949 --> 00:45:23.379
You can see that create two pipes
and then I set the standard outputs,

00:45:23.380 --> 00:45:25.740
standard inputs that can communicate over those.

00:45:25.739 --> 00:45:30.189
And then set launch path which allows
you to actually just launch the script.

00:45:30.190 --> 00:45:33.519
So this looks like well, I'm not an
Objective-C programmer, I don't do that stuff.

00:45:33.519 --> 00:45:38.219
Well the two scripts that I have have GUI
wrappers and they all have the same code in it.

00:45:38.219 --> 00:45:41.039
And if you're writing well formed code that runs this task,

00:45:41.039 --> 00:45:43.900
you're going to have this kind
of thing repeated over and over

00:45:43.900 --> 00:45:48.590
So it's the idea that you'd stick to the same project,
repeat it, replace the name of your command line script,

00:45:48.590 --> 00:45:52.059
your option parsing will be pretty much
the same, your logging will be the same,

00:45:52.059 --> 00:45:58.630
you'll just worry about making a nice GUI for
it and writing a nice script in Perl only.

00:45:58.630 --> 00:46:03.410
OK. And then one of the nice things about it, you have
to do a little bit more work because you want things

00:46:03.409 --> 00:46:08.829
to run asynchronously so that means you want to get
called back and what it does is that you have to register

00:46:08.829 --> 00:46:11.920
for a notification, which just means
it calls another section of code.

00:46:11.920 --> 00:46:19.050
And then this calls, this actually looks more
complicated but again you just repeat this.

00:46:19.050 --> 00:46:23.140
It just has OK, we get called and we want
to stop getting called because we don't want

00:46:23.139 --> 00:46:25.489
to keep getting called if once were task is done.

00:46:25.489 --> 00:46:28.139
And then we just read in what was printed out.

00:46:28.139 --> 00:46:31.889
So it's basically just the logging
information so it'll be reused.

00:46:31.889 --> 00:46:35.279
So there's two examples, we have
the DFS Mounter and Mobile Creator.

00:46:35.280 --> 00:46:39.570
So this is two-- these are these aha moments that you
have during the year which is like you know things

00:46:39.570 --> 00:46:44.100
that really annoy me is when people come up and
it's like when is Apple going to support DFS, right?

00:46:44.099 --> 00:46:51.940
So there is two things like if I did know I couldn't tell
you and yes, it annoys me too so, but I can't say that so.

00:46:51.940 --> 00:46:58.530
So then you're searching around, you're
doing some random binging, bonging,

00:46:58.530 --> 00:47:03.180
you're bonging around and I bonged that last night.

00:47:03.179 --> 00:47:07.250
No, no that doesn't work.

00:47:07.250 --> 00:47:10.300
Google, I use Google from now on.

00:47:10.300 --> 00:47:14.230
The-- and you find a command line script that's
kind of ugly but you're like wait a minute,

00:47:14.230 --> 00:47:18.360
I could actually have something that actually makes
more sense for me, for my user to be able to do

00:47:18.360 --> 00:47:23.940
and that happened twice, actually three
times this year in a big way for DFS as well

00:47:23.940 --> 00:47:25.940
as for creating mobile accounts that can sync.

00:47:25.940 --> 00:47:28.670
So let's talk about those solutions,
actually doing this stuff.

00:47:28.670 --> 00:47:33.050
So first DFS, this is a wonderful
Windows GUI for creating DFS shares.

00:47:33.050 --> 00:47:40.430
People that aren't aware of DFS, DFS does a lot of things
that allows you to abstract your name space of SMB shares.

00:47:40.429 --> 00:47:48.009
And this one, this is actually kind of a-- I use
hyperbole to illustrate a point here but there's a lot

00:47:48.010 --> 00:47:54.920
of times you have users that have really deep shares that
they just use the DFS to mount to something higher up.

00:47:54.920 --> 00:48:00.159
So you have the share that's
whack-whack-dump-whack-dump-root-whack-ABCDEFG

00:48:00.159 --> 00:48:02.949
and that just maps to a share that's on this machine.

00:48:02.949 --> 00:48:06.449
It could be on another machine that's
whack-whack-dump-whack-direct users.

00:48:06.449 --> 00:48:10.469
The idea is you take this one URL and it
basically maps the short one, so that's great.

00:48:10.469 --> 00:48:16.039
So you open up connect to server and you say let's map,
let's actually mount this on your Mac and your Mac says

00:48:16.039 --> 00:48:19.039
"yeah, I don't think so because
that's DFS and I don't understand DFS"

00:48:19.039 --> 00:48:22.130
because it doesn't know how to resolve that back.

00:48:22.130 --> 00:48:27.980
But the thing is we know how to mount the actual
underlying share, so the hard part is actually done.

00:48:27.980 --> 00:48:31.490
The packet signing, the SMB protocol,
all that stuff we can do.

00:48:31.489 --> 00:48:39.179
We mount it and here we go, so usually I like to use my
family-- family members, CMC is my wife, JMC is my son.

00:48:39.179 --> 00:48:40.169
I'm not sure who W.

00:48:40.170 --> 00:48:41.190
Wiggle is.

00:48:41.190 --> 00:48:42.260
Some goldfish I'll have toget.

00:48:42.260 --> 00:48:42.750
Is that what?

00:48:42.750 --> 00:48:42.869
[ Inaudible Remark ]

00:48:42.869 --> 00:48:43.170
>> W.

00:48:43.170 --> 00:48:52.780
Wiggle, yes, is the code name for
the next version of Redacted.

00:48:55.429 --> 00:48:58.379
And so the solution to this is using jCIFS.

00:48:58.380 --> 00:49:02.260
So we have-- we have the same screen
sample as before and what I did is I was--

00:49:02.260 --> 00:49:04.190
I download this brackets [phonetic] called jCIFS.

00:49:04.190 --> 00:49:09.659
It's open source part implementation
of the SMB protocol and I was poking

00:49:09.659 --> 00:49:11.869
around the example codes and there's this great one.

00:49:11.869 --> 00:49:16.170
Somebody took it, put a patch on it, make it Kerberos
enabled because it's got to be Kerberos enabled

00:49:16.170 --> 00:49:23.610
to actually be applicable for what we're doing and I ran
this one and I put in this URL and I ran it and it came back

00:49:23.610 --> 00:49:28.030
with this and I went "holy crap, that's huge."

00:49:28.030 --> 00:49:30.700
All right, how many people get really
excited when they see output like that

00:49:30.699 --> 00:49:32.889
and they get something like this and they go "whoa!"

00:49:32.889 --> 00:49:35.309
Your world kind of changes, right?

00:49:35.309 --> 00:49:39.730
Because what this does is I put in a
really long URL and it gave me a path back

00:49:39.730 --> 00:49:42.440
that I can use to mount a share in Mac OS X.

00:49:42.440 --> 00:49:43.740
OK, I don't plan on passing that.

00:49:43.739 --> 00:49:47.009
I don't like to send an email to all my users
saying "OK, go ahead and run this command line

00:49:47.010 --> 00:49:48.860
to actually mount it underneath," it's not going to work.

00:49:48.860 --> 00:49:53.000
But what I can do is take this, put it
in a wrapper, give it out to my users

00:49:53.000 --> 00:49:54.909
and then they can go ahead and mount their DFS shares.

00:49:54.909 --> 00:49:59.039
So here's what it looks-- this
is what DFS Mounter looks like.

00:49:59.039 --> 00:50:03.920
Looks a little bit like something
else in the system, what could it be?

00:50:03.920 --> 00:50:05.470
I actually changed it.

00:50:05.469 --> 00:50:08.589
It can actually work with-- No, no I'm sorry.

00:50:08.590 --> 00:50:09.539
Yeah, just SMB servers.

00:50:09.539 --> 00:50:14.110
You put in your SMB URL and underneath
that uses jCIFS in the packets

00:50:14.110 --> 00:50:16.860
to actually run that command line script to do it.

00:50:16.860 --> 00:50:19.210
>> And I'll show a little bit of code.

00:50:19.210 --> 00:50:27.159
So it's written in Perl because it actually wanted to be--
it actually wanted to work and again, same kind of thing,

00:50:27.159 --> 00:50:31.099
catch the signals TERM and INT so, I get a function
that gets called whenever there's a signal,

00:50:31.099 --> 00:50:36.799
if I do a kill-HUPkill-terminal run this
and it will say cut signal killing child,

00:50:36.800 --> 00:50:39.360
it does some cleanup and it exits with an error code.

00:50:39.360 --> 00:50:43.890
So this allows us to-- most of the time you
wouldn't use this but if your GUI application

00:50:43.889 --> 00:50:50.409
that your user clicks Cancel or something like
that or wants to, you know, restart the process,

00:50:50.409 --> 00:50:52.089
the script can actually be more responsive.

00:50:52.090 --> 00:50:55.880
You don't end up having all these scripts
kind of running in the background.

00:50:55.880 --> 00:51:04.170
The next section is basically the setting some variables
and getting the-- doing all the getopt information.

00:51:04.170 --> 00:51:08.150
So you can see here there is a KDC
option, a realm information URL.

00:51:08.150 --> 00:51:13.430
So basically those are the same things I showed you when
I ran it but I'm passing in a KDC, passing in a realm

00:51:13.429 --> 00:51:20.309
and passing in the URL, and then it can go ahead and
resolve it for me, and you can see that actually run it.

00:51:20.309 --> 00:51:25.150
The next problem that was in search of a
solution was a mobile account without DS.

00:51:25.150 --> 00:51:34.670
So you have a Windows system and you have
your Mac which is the-- and you're not bound.

00:51:34.670 --> 00:51:36.579
The arrows are going the wrong
way and the icons got switched.

00:51:36.579 --> 00:51:42.139
But imagine the iMacs on the other side and it was on
that side, and you're not bound to Active Directory

00:51:42.139 --> 00:51:50.150
but you still want to take advantage, be able to
do home directory syncing to some random SMB share.

00:51:50.150 --> 00:51:54.200
OK, we can't do that right now.

00:51:54.199 --> 00:51:58.379
The way that you would do it is you bind the Active
Directory, open directory, create a mobile account,

00:51:58.380 --> 00:52:04.369
once you create a mobile account you are able to synchronize
with your, you know, R drive or whatever is on the network.

00:52:04.369 --> 00:52:08.269
But there's no reason that you have
to have DS to be able to do that.

00:52:08.269 --> 00:52:11.059
But the system will prevent you if you have a mobile,

00:52:11.059 --> 00:52:15.699
if you don't have directory services
you can't create a cached account.

00:52:15.699 --> 00:52:21.689
So the solution to this was, I was poking around, I said
well Josh did this last year with home directory injector

00:52:21.690 --> 00:52:24.720
or 2 years ago or 7 years ago, some years ago.

00:52:24.719 --> 00:52:27.619
And so I got Josh, I called him from the depths [phonetic].

00:52:27.619 --> 00:52:30.389
I said Josh I need some sed work.

00:52:30.389 --> 00:52:36.109
I took his script and it turns out
his script only was able to in chat.

00:52:36.110 --> 00:52:38.150
Once you had a mobile account already created

00:52:38.150 --> 00:52:42.329
or a cached account already created,
you would inject the home directory URL.

00:52:42.329 --> 00:52:46.420
But I am actually going to create a list as well so
I took his and added a couple of more attributes.

00:52:46.420 --> 00:52:50.800
I changed the author authority to something that
is much shorter, it's just local cache user.

00:52:50.800 --> 00:52:55.530
And now Mac OS X thinks hey, this is cached account.

00:52:55.530 --> 00:53:00.820
Oh one of the caveats to this is the way that home
directory syncing works is that when you log in,

00:53:00.820 --> 00:53:05.600
it actually takes your passwords that
you logged in with and populates it,

00:53:05.599 --> 00:53:08.130
at least the Snow Leopard, inside the key chain.

00:53:08.130 --> 00:53:13.390
So it doesn't, you can't save your password in the key chain
to get this to work because it actually saves it for you.

00:53:13.389 --> 00:53:19.519
So the long and short of this is that make your local user's
username and password the same as username and password

00:53:19.519 --> 00:53:23.460
on your SMB share, and no I won't say that again.

00:53:23.460 --> 00:53:25.190
Mobile Creator, it's a very simple GUI.

00:53:25.190 --> 00:53:27.159
You basically select the local user.

00:53:27.159 --> 00:53:32.460
This is my son who is actually trying to
do an arbitrary SMB share on this one.

00:53:32.460 --> 00:53:36.210
And then it basically creates this mobile
account, you can set up syncing with it.

00:53:36.210 --> 00:53:38.070
I'll show you that in the demo.

00:53:38.070 --> 00:53:42.280
Again this is the same kind of
thing but in a different language.

00:53:42.280 --> 00:53:43.800
It's actually in bash as well.

00:53:43.800 --> 00:53:45.550
So, the-- yeah, this.

00:53:45.550 --> 00:53:51.769
Same kind of exact same format, you have the trapping
at the beginning, a function to actually catch

00:53:51.769 --> 00:53:55.619
that trap and then part of seeing the options.

00:53:55.619 --> 00:54:01.420
[Whispering] And so again it's the same format.

00:54:01.420 --> 00:54:04.010
So the idea is that no matter what
solution you have it's basically going

00:54:04.010 --> 00:54:07.690
to be the same general ideas when
you approach it to write it.

00:54:07.690 --> 00:54:09.250
And this is actually the meat of it.

00:54:09.250 --> 00:54:11.039
It's actually very simple.

00:54:11.039 --> 00:54:13.340
It's just a bunch of dscl commands.

00:54:13.340 --> 00:54:22.900
The first thing we'll do is let me
show, so we actually have a DFS URL.

00:54:22.900 --> 00:54:29.430
This should be the same one that we had.

00:54:29.429 --> 00:54:37.679
So now we have the same one ABCDEFG, it maps over to
direct users and so now we want to be able to mount that.

00:54:37.679 --> 00:54:40.819
We're trying mount in the finder.

00:54:40.820 --> 00:54:46.700
Yes, so this is just connect to server,
we do connect and it could not be mounted.

00:54:46.699 --> 00:54:49.829
And usually, unfortunately it doesn't say you this is DFS,

00:54:49.829 --> 00:54:54.519
please go by something that's third
party that allow you to do this.

00:54:54.519 --> 00:54:56.869
It just gives an error messaging saying it doesn't work.

00:54:56.869 --> 00:55:00.469
I'm not sure this actually works 'cause FORTRAN
verse DNS [phonetic] actually has to work as well.

00:55:00.469 --> 00:55:03.059
Let's get a Kerberos ticket.

00:55:03.059 --> 00:55:07.239
Let's destroy Joel's Kerberos ticket, destroy kinit.

00:55:07.239 --> 00:55:16.199
Normally, you just log in as an AD user and you'll be
able to-- it will automatically get your Kerberos tickets.

00:55:16.199 --> 00:55:19.829
Well let me get Sarah's Kerberos tickets.

00:55:19.829 --> 00:55:26.699
OK, I have that, and now let's run
this application called DFS Mounter.

00:55:26.699 --> 00:55:31.339
And so the idea behind this is that it uses
signals, it uses logging so it's kind of interactive

00:55:31.340 --> 00:55:33.610
so even though it's just running this script underneath,

00:55:33.610 --> 00:55:36.450
you can send this out to your users
as something they can just use.

00:55:36.449 --> 00:55:42.669
In order for this to work both NET BIOS and FORTRAN
verse DNS [phonetic] has to work which is unfortunate

00:55:42.670 --> 00:55:46.030
for the environment so-- didn't have the Win server.

00:55:46.030 --> 00:55:50.700
So let me put the Win Server in here.

00:55:50.699 --> 00:55:53.739
I really should check reverse DNS.

00:55:53.739 --> 00:55:59.399
No, but if I don't check in, it doesn't work, I can
always blame that even though it might be my code, OK.

00:55:59.400 --> 00:56:05.410
So it goes out and then actually you can see the
logging, it goes ahead, runs this, the actual command.

00:56:05.409 --> 00:56:06.649
Hey it worked.

00:56:06.650 --> 00:56:12.639
I mean yes, you can see here that it actually
went ahead and mounted this, this one.

00:56:16.079 --> 00:56:21.880
[Applause] So it does still-- it's direct users, right, so
it shows the underlying share but at least it works, right.

00:56:21.880 --> 00:56:24.039
That's pretty awesome.

00:56:24.039 --> 00:56:30.599
It is a little bit touchy and I wanted to get more people
to test it in the environments because it requires NET BIOS,

00:56:30.599 --> 00:56:33.920
resolution in large networks which is not my home lab.

00:56:33.920 --> 00:56:41.530
So it would be cool if anybody has large NET BIOS
or, I'm sorry, Wins, networks they could test it on.

00:56:41.530 --> 00:56:44.600
You can see that this actually
shows the same, same information.

00:56:44.599 --> 00:56:51.989
One of the other advantages to this is that it will actually
mount-- may have another component to it that's called,

00:56:51.989 --> 00:56:57.500
look at the home directory insight, active
directory, and mount that as a deep mounting share.

00:56:57.500 --> 00:57:01.909
So if you have any issues with the Active Directory
plug in where it has to mount the parent folder

00:57:01.909 --> 00:57:04.009
and then direct you to the user underneath it.

00:57:04.010 --> 00:57:09.870
This will hopefully resolve that issue
as well which I'm not saying is an issue

00:57:09.869 --> 00:57:12.909
but it's just something that's in the OS that doesn't work.

00:57:14.340 --> 00:57:20.420
[Laughter] OK, so the other one, so that's-- also the
other thing to point out is that it does indeed log

00:57:20.420 --> 00:57:22.300
and you can see that it was logging as it was running.

00:57:22.300 --> 00:57:29.289
So the idea is that this is directory services stuff so
DF-- If AD is kind of being slow, if your DNS isn't working,

00:57:29.289 --> 00:57:32.309
you're basically getting a spinning
ball if you're doing self synchronously.

00:57:32.309 --> 00:57:39.570
But since it's asynchronous you can cancel it, you can
actually see the logging and actually see what happens.

00:57:39.570 --> 00:57:42.370
And this is all just Perl or bash I think.

00:57:42.369 --> 00:57:45.119
I think that was the Perl one because it worked.

00:57:45.119 --> 00:57:47.730
It had to be the Perl one, let me see.

00:57:47.730 --> 00:57:53.340
OK, the next one is the Mobile Creator and let me see.

00:57:53.340 --> 00:57:57.010
That's on the-- one second.

00:57:57.010 --> 00:58:01.850
[ Pause ]

00:58:01.849 --> 00:58:05.809
>> Oh here, I'll give you something to do
while you're waiting for me to do that.

00:58:05.809 --> 00:58:11.739
So I'll actually post a code but since
I'm actually desperate for friends,

00:58:11.739 --> 00:58:16.559
I'm going to make you subscribe to
my Twitter feed in order to get that.

00:58:16.559 --> 00:58:18.869
So it's at tperfitt and I'll post the link to this code.

00:58:18.869 --> 00:58:24.389
So everybody go ahead and start following me on Twitter

00:58:24.389 --> 00:58:31.859
in that way I can show my wife that
I actually have a lot of friends.

00:58:31.860 --> 00:58:32.960
All right, here we go.

00:58:32.960 --> 00:58:41.570
I didn't actually copy this to projects.

00:58:41.570 --> 00:58:44.720
There is Mobile Creator release.

00:58:44.719 --> 00:58:46.480
Hey, it doesn't have the slash to the icon.

00:58:46.480 --> 00:58:49.809
I mean, yeah, of course it doesn't have slash to the icon.

00:58:49.809 --> 00:58:57.539
OK, so there are very simple UI and
it shows me the users on this system.

00:58:57.539 --> 00:59:03.009
I want to create a local user and I shall call this.

00:59:03.010 --> 00:59:08.720
[ Pause ]

00:59:08.719 --> 00:59:10.250
>> It's not Apple.

00:59:10.250 --> 00:59:15.030
[Laughter] It's Apple with an exclamation
point, totally different.

00:59:15.030 --> 00:59:21.460
I'll call this 3GS, Apple, Apple.

00:59:21.460 --> 00:59:26.240
Stop putting stuff in my public folder.

00:59:26.239 --> 00:59:28.629
All right, let me see that.

00:59:28.630 --> 00:59:32.160
OK, now if I run this application
again, I should see the local users

00:59:32.159 --> 00:59:35.379
and actually it's alphabetically,
it's first which is nice, and LUs.

00:59:35.380 --> 00:59:41.220
This is not actually DFS aware which would be nice
if I can combine the two applications but I didn't.

00:59:41.219 --> 00:59:49.029
So I'll just do the direct one was here and direct users.

00:59:49.030 --> 00:59:51.860
Is that right?

00:59:51.860 --> 00:59:55.630
Did anybody check my code here

00:59:55.630 --> 01:00:01.470
Convert, I have to actually give the password.

01:00:01.469 --> 01:00:02.789
It's admin.

01:00:02.789 --> 01:00:06.170
You guys are no help whatsoever.

01:00:06.170 --> 01:00:09.450
OK, I actually did a delay in this for 5
seconds so I can show you that I clicked Cancel.

01:00:09.449 --> 01:00:11.149
Did you see that, how that worked, isn't that nice?

01:00:11.150 --> 01:00:14.920
I was running a script and it wasn't--
so it was asynchronous.

01:00:14.920 --> 01:00:17.369
[ Applause ]

01:00:17.369 --> 01:00:19.630
>> You could see it does logging operation canceled.

01:00:19.630 --> 01:00:24.349
This is like a regular GUI application but the idea is
it's truly a script that's running so you can push this

01:00:24.349 --> 01:00:29.679
out through ARD but you can also give it to users and
then you go have somebody in New York send you a latte

01:00:29.679 --> 01:00:32.269
which just seems what-- that's what Josh kind of focuses on.

01:00:32.269 --> 01:00:33.199
OK, we'll do this.

01:00:33.199 --> 01:00:35.389
You can see it's logging.

01:00:35.389 --> 01:00:40.629
It's sleeping for 5 seconds for better demo module.

01:00:40.630 --> 01:00:41.500
I have 7 minutes left.

01:00:41.500 --> 01:00:42.190
Don't worry Jordan.

01:00:42.190 --> 01:00:45.470
I'm going to just reboot.

01:00:45.469 --> 01:00:47.319
Oh no, wait, OK, here we go.

01:00:47.320 --> 01:00:54.650
Now this user, if we do system preferences we'll
look and see that this user is indeed a mobile user.

01:00:54.650 --> 01:01:04.240
So I will discard and I will do fast user switching, this
fast user switching-- oh fine, fast user switching works.

01:01:04.239 --> 01:01:11.219
You can see it says mobile, yay, and put in.

01:01:11.219 --> 01:01:15.299
Now that looks like a normal user
account but it's magical because--

01:01:15.300 --> 01:01:17.410
oh this is bound to AD but pretend it wasn't bound to AD

01:01:17.409 --> 01:01:23.299
because this is just the local user,
right, 3GS and we go up to accounts.

01:01:23.300 --> 01:01:29.060
And now I can see this mobile account
is actually enabled and I can say--

01:01:29.059 --> 01:01:34.509
well, I didn't actually make the passwords
the same like I told you need to do.

01:01:34.510 --> 01:01:41.750
We'll have it manually sync, show it in the status bar and
we'll do the whole home-- no, no let's just do desktop.

01:01:48.579 --> 01:01:55.309
OK, so now if I go up here and say
sync home now it will go-- what?

01:01:55.309 --> 01:01:57.679
Oh because it is bound to AD, well DNS.

01:01:57.679 --> 01:01:58.809
It's a DNS problem.

01:01:58.809 --> 01:02:00.809
It's nothing to do with my code.

01:02:00.809 --> 01:02:04.670
[Laughter] It's important to always check
DNS when you're doing scripting demos, OK.

01:02:04.670 --> 01:02:08.170
But this does actually work so, but the idea is
that you can see it's actually trying to sync.

01:02:08.170 --> 01:02:09.930
It's using that URL in the local DS.

01:02:09.929 --> 01:02:12.099
It will actually go ahead and sync.

01:02:12.099 --> 01:02:14.130
It's actually-- this one is the one that work all the time.

01:02:14.130 --> 01:02:15.930
The other one was kind of flaky.

01:02:15.929 --> 01:02:17.500
It's kind of ironic that does this, so.

01:02:17.500 --> 01:02:19.639
So yeah, that's just two solutions.

01:02:19.639 --> 01:02:24.569
I post the code if people want to-- I'll post it right
after the session, I'll post the source code to it.

01:02:24.570 --> 01:02:30.070
If you can try the DFS Mounter and actually just
give me the fix code, that would be less work for me,

01:02:30.070 --> 01:02:32.580
I'd appreciate it and then I'll attach my name to it.