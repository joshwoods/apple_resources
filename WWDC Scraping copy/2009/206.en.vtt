WEBVTT

00:00:13.529 --> 00:00:18.140
>> This is iPhone Web Applications From Start to Finish.

00:00:18.140 --> 00:00:19.640
I'm Greg Bolsinga.

00:00:19.640 --> 00:00:22.300
I am an iPhone Web Kit engineer.

00:00:22.300 --> 00:00:28.359
And today we're here to talk about iPhone web applications.

00:00:28.359 --> 00:00:31.189
You may be asking yourself why?

00:00:31.190 --> 00:00:36.260
The great thing about iPhone web applications
is you can leverage your existing knowledge.

00:00:36.259 --> 00:00:44.979
You already have your data, you already have your HTML,
CSS, and JavaScript, you already have your servers set

00:00:44.979 --> 00:00:53.589
up so you can serve this data to your web sites, and
you have all the tools you use to create this data.

00:00:53.590 --> 00:00:57.190
So there's a lot of existing knowledge
that you can leverage.

00:00:57.189 --> 00:01:02.539
In addition, you can leverage advanced
iPhone and Web Kit technologies

00:01:02.539 --> 00:01:08.269
to make your iPhone web application
an app that your users will love.

00:01:08.269 --> 00:01:14.840
Another great feature of iPhone, web
applications is instant deployment.

00:01:14.840 --> 00:01:19.340
By this I mean as soon as you're ready
to publish your application for iPhone,

00:01:19.340 --> 00:01:22.780
you publish the URL, then your users can access it.

00:01:22.780 --> 00:01:31.760
Another wonderful thing about this is that
you can protect it behind your FireWall.

00:01:31.760 --> 00:01:36.160
You can have selected users use it, say only
when you're on your own local network or VPN.

00:01:36.159 --> 00:01:43.619
In addition, you can distribute it
only to selected users that way.

00:01:43.620 --> 00:01:46.310
No ad hoc distribution necessary.

00:01:46.310 --> 00:01:52.290
Another great thing is when you need to update your
application all you do is publish some more data

00:01:52.290 --> 00:01:54.200
on your server.

00:01:54.200 --> 00:02:01.670
Up load that -- have that JavaScript and that HTML ready,
and that data is available to your web application.

00:02:01.670 --> 00:02:05.560
So what are we going to learn today?

00:02:05.560 --> 00:02:10.140
First thing we're going to learn, actually,
is how to optimize your web site for iPhone.

00:02:10.139 --> 00:02:15.339
This is important, because in the
end a web application is a web page.

00:02:15.340 --> 00:02:19.460
So we'll learn certain optimizations.

00:02:19.460 --> 00:02:26.750
Safari for iPhone has optimal browsing experience
behaviors that you may not want in your web application.

00:02:26.750 --> 00:02:30.539
How do you turn those off, and other things like this.

00:02:30.539 --> 00:02:34.109
Then we'll get into creating an iPhone web application.

00:02:34.110 --> 00:02:38.020
We'll get it into full screen mode
where you and your users will be able

00:02:38.020 --> 00:02:41.270
to use the whole iPhone screen for your web application.

00:02:41.270 --> 00:02:48.939
I'll show you how to use off line data, because there are
times that your iPhone may not be online, strangely enough,

00:02:48.939 --> 00:02:54.789
or you may be an iPod Touch, where
there's not a Wi-Fi network available.

00:02:56.389 --> 00:03:00.729
People like iPhone applications because they're
really fun to use, they're really interactive.

00:03:00.729 --> 00:03:06.649
And I'm going to show you how you can get sophisticated
graphics using CSS Visual Effects on the iPhone.

00:03:06.650 --> 00:03:09.539
And lastly, great performance.

00:03:09.539 --> 00:03:17.879
Both those CSS Visual Effects and off line data in fact
also make your web application perform really wonderfully.

00:03:17.879 --> 00:03:22.609
And then we'll talk about adding
advanced features, orientation events,

00:03:22.610 --> 00:03:28.770
how you can determine if your device has turned
and gone from landscape to portrait, or back.

00:03:28.770 --> 00:03:31.730
We'll also cover DOM touch events.

00:03:31.729 --> 00:03:37.659
IPhone, as you know, supports multiple fingers,
you'll want to be able to have more than one finger,

00:03:37.659 --> 00:03:41.389
as well as all the rich gestures
that you can do with iPhone.

00:03:41.389 --> 00:03:45.759
And lastly, new in iPhone 3.0 we have Geolocation.

00:03:45.759 --> 00:03:52.269
This way your users can share their location with your
application, and you can give them a great experience.

00:03:52.270 --> 00:03:54.420
So the basics.

00:03:54.419 --> 00:03:56.889
Optimizing your web site for iPhone.

00:03:56.889 --> 00:04:00.759
We're going to cover custom interaction behavior.

00:04:00.759 --> 00:04:05.849
There's lots of behaviors in web sites that
are designed for optimal browsing experiences

00:04:05.849 --> 00:04:09.769
that may not be optimal for your web application.

00:04:09.770 --> 00:04:12.659
Text sizing.

00:04:12.659 --> 00:04:17.899
How do you get your text to look great on a
screen the size of something like the iPhone.

00:04:17.899 --> 00:04:20.459
We'll show you how to optimize those things.

00:04:20.459 --> 00:04:23.029
Screen size best practices.

00:04:23.029 --> 00:04:27.629
Web sites can have any variable width, variable height.

00:04:27.629 --> 00:04:35.519
How do you get that to look great on a screen the size
of an iPhone, and lastly, how do you get your own icon

00:04:35.519 --> 00:04:38.500
onto the iPhone home screen for your web page.

00:04:38.500 --> 00:04:45.949
So to show you some of these concepts we're
going have Paul Knight here show you a demo.

00:04:45.949 --> 00:04:46.500
>> Thanks Greg.

00:04:46.500 --> 00:04:51.389
I'm going to switch over here to one of the demo
machines, and I've got a web page, you know,

00:04:51.389 --> 00:04:55.319
this first part of the presentation is
all about taking your existing web content

00:04:55.319 --> 00:04:57.519
and optimizing it for an iPhone experience.

00:04:57.519 --> 00:05:01.829
So you may have seen this web page
already, it's on the WWDC attendee web site.

00:05:01.829 --> 00:05:05.219
And it actually looks better than
this if you go to the real one,

00:05:05.220 --> 00:05:08.470
I had to break it a little bit for
purposes of this demonstration.

00:05:08.470 --> 00:05:13.020
So I've got the site loaded, and it looks great already.

00:05:13.019 --> 00:05:16.589
IPhone -- Safari for iPhone does
a really nice job of rendering it,

00:05:16.589 --> 00:05:18.679
but there are a few things we can do to improve it.

00:05:18.680 --> 00:05:22.949
First thing I notice is the content kind
of squishes up against the side here.

00:05:22.949 --> 00:05:29.139
Now one of the things that Safari for iPhone does is it
assumes your web page was designed for 980 pixels wide.

00:05:29.139 --> 00:05:30.899
That's the default width we set.

00:05:30.899 --> 00:05:34.589
And you can change that if your site
was designed for something different.

00:05:34.589 --> 00:05:37.969
And you know, now that I look at this, the
text is a little too small in a few places,

00:05:37.970 --> 00:05:40.690
like this paragraph in here, the main paragraph.

00:05:40.689 --> 00:05:43.899
I can't really read that, double-tap
to zoom doesn't really work so well.

00:05:43.899 --> 00:05:47.159
Maybe we can fix the text size there.

00:05:47.160 --> 00:05:52.610
Now one of the things that Safari for iPhone does
is when you tap a link you get this nice color --

00:05:52.610 --> 00:05:54.939
this colored overlay over the link,
and that lets the user know

00:05:54.939 --> 00:05:57.750
that they clicked the link and something's going to happen.

00:05:57.750 --> 00:06:01.310
But up here there's this navigation,
which is kind of small, hard to see.

00:06:01.310 --> 00:06:07.910
And even if we double-tap to zoom in, we don't really see
that gray, the gray kind of gets lost against the black.

00:06:07.910 --> 00:06:12.900
So maybe we can improve the feed back there, and maybe
you want to customize the color of your web site,

00:06:12.899 --> 00:06:15.370
make it fit with the rest of your
branding, something like that.

00:06:15.370 --> 00:06:17.230
We can improve that.

00:06:17.230 --> 00:06:21.910
And you know, new in 3.0, there's the
cut, copy and paste and the selection UI.

00:06:21.910 --> 00:06:23.270
So that comes up here.

00:06:23.269 --> 00:06:27.269
And if you tap and hold on an image, for
example, you'll get this action sheet,

00:06:27.269 --> 00:06:29.430
you know, which let's you save the image or copy.

00:06:29.430 --> 00:06:31.240
Maybe you want to disable these for whatever reason,

00:06:31.240 --> 00:06:35.079
we're doing a lot of custom touch
events, interaction in this area.

00:06:35.079 --> 00:06:36.560
We just want to turn those off.

00:06:36.560 --> 00:06:38.459
We can do that.

00:06:38.459 --> 00:06:42.180
And one of the things that your users can
do is not only can they bookmark your site,

00:06:42.180 --> 00:06:43.860
but they can add your site to the home screen.

00:06:43.860 --> 00:06:48.160
This is great, the bookmark lives along with
all of the other applications on their phone.

00:06:48.160 --> 00:06:52.450
To do that, they tap +, tap Add to Home Screen.

00:06:52.449 --> 00:06:57.889
Now by default what we do is we take a snapshot
of your site, scale it down to that size icon,

00:06:57.889 --> 00:07:01.569
and that's what's going to show up
with all the other applications.

00:07:01.569 --> 00:07:04.300
We can do better, we can put --
you can put your own branding,

00:07:04.300 --> 00:07:07.810
your own logo, your own icon, make it really stand out.

00:07:07.810 --> 00:07:11.379
So Greg, we're talking about a few issues
that we have with our existing page.

00:07:11.379 --> 00:07:14.490
Maybe we can go over how to make these changes and then --

00:07:14.490 --> 00:07:15.430
>> Yeah, I'll go over them now.

00:07:15.430 --> 00:07:17.350
Thanks a lot, Paul.

00:07:17.350 --> 00:07:22.950
So first thing you're going want to
customize is the interaction behavior.

00:07:22.949 --> 00:07:28.729
You saw the great new iPhone 3.0 feature
Copy, with the selection UI come up.

00:07:28.730 --> 00:07:35.900
You may have copyrighted data, you may have displayed
some data which you may want to be interacting with,

00:07:35.899 --> 00:07:39.929
and you don't want the selection UI to get in the way.

00:07:39.930 --> 00:07:44.720
The Tap Highlight indicates to users what
they're interacting with on the web page.

00:07:44.720 --> 00:07:50.390
You may want to customize that to match your design
of your site, as well as turn it off completely.

00:07:50.389 --> 00:07:52.199
I will show you how to do both.

00:07:52.199 --> 00:07:57.779
And lastly, the alert sheets that come
up and enhance the browsing experience.

00:07:57.779 --> 00:08:03.399
They may get in the way of your interaction
experience, how can you modify their behavior.

00:08:03.399 --> 00:08:06.169
So first up is the selection behavior.

00:08:06.170 --> 00:08:08.819
This will prevent the selection UI from displaying.

00:08:08.819 --> 00:08:13.079
And this is a key feature of iPhone 3.0.

00:08:13.079 --> 00:08:15.519
So these will not be able to be copied.

00:08:15.519 --> 00:08:19.659
This is desirable, say if the image is copyright protected.

00:08:19.660 --> 00:08:22.600
So you should use this selectively.

00:08:22.600 --> 00:08:26.670
Your users are going to be expecting
to be able to copy and paste.

00:08:26.670 --> 00:08:33.340
So some portions of your screen may want to be copied.

00:08:33.340 --> 00:08:35.110
That's what that slide's for.

00:08:35.110 --> 00:08:39.180
It's a CSS property, and you can use it selectively.

00:08:39.179 --> 00:08:44.909
By this I mean instead of turning it off for an entire
page, you turn it off for the elements you're interested in.

00:08:44.909 --> 00:08:50.620
It's called Web Kit user select and returning
off, in this case, so its value is none.

00:08:50.620 --> 00:08:53.129
This comes in desktop Web Kit as well.

00:08:53.129 --> 00:08:56.769
The Tap Highlight behavior.

00:08:56.769 --> 00:09:00.259
What this does is it gives users
feed back about their interaction.

00:09:00.259 --> 00:09:03.960
So if it's important that the user
knows that they're interacting with,

00:09:03.960 --> 00:09:07.080
if you don't have another way of
displaying it, this is very useful.

00:09:07.080 --> 00:09:15.280
By default it's gray, but it's a CSS property that
you can customize per element or per the page.

00:09:15.279 --> 00:09:22.569
It's a CSS color, you should make sure that it has alpha
so that the content behind the Tap Highlight is visible.

00:09:22.570 --> 00:09:26.680
So in this case, the color that
I'm using is the light blue color.

00:09:26.679 --> 00:09:31.889
You can also hide it completely with the clear color.

00:09:31.889 --> 00:09:36.799
Because again, these are CSS colors,
so I'm using transparent here.

00:09:36.799 --> 00:09:39.879
Web Kit Tap Highlight color.

00:09:39.879 --> 00:09:45.470
So you can see if you're interacting
and the Tap Highlight isn't there.

00:09:45.470 --> 00:09:48.850
iPhone screen size, it's not terribly
clear what you're interacting with.

00:09:48.850 --> 00:09:52.040
So be very -- use this wisely.

00:09:52.039 --> 00:09:54.339
So navigation and sharing.

00:09:54.340 --> 00:09:56.080
How do you customize this behavior.

00:09:56.080 --> 00:09:59.889
You tap and hold on a link while browsing.

00:09:59.889 --> 00:10:03.460
This sheet will come up, it will allow
you to open the link in a new page

00:10:03.460 --> 00:10:07.310
or copy that link to a paste board so you can share it.

00:10:07.309 --> 00:10:12.129
You may not want that UI to come up while
people are interacting with your web site.

00:10:12.129 --> 00:10:13.059
Also, images.

00:10:13.059 --> 00:10:19.599
If you tap and hold on an image, you can save it to the
photo library, as well as copy it so it can be shared.

00:10:19.600 --> 00:10:22.180
Again, you can apply this selectively.

00:10:22.179 --> 00:10:32.759
It's a CSS property, and it's called Web Kit Touch Call Out,
and in this case we're turning it off, so its value is none.

00:10:32.759 --> 00:10:34.730
Text sizing.

00:10:34.730 --> 00:10:41.930
So you can see here that we have a web page where
all the text is displayed, but it's rather small.

00:10:41.929 --> 00:10:43.279
You'll have to zoom in to read it.

00:10:43.279 --> 00:10:47.149
How do you get it to look great so
in that first display it's legible.

00:10:47.149 --> 00:10:53.220
Well, we have a CSS property for that.

00:10:53.220 --> 00:10:56.440
It's called Web Kit Text Size Adjust.

00:10:56.440 --> 00:10:59.140
So in order to override the default behavior,

00:10:59.139 --> 00:11:06.590
which is to scale as the iPhone developers have
found best, you use Web Kit text size adjust none.

00:11:06.590 --> 00:11:11.790
This way you will get actual size
text with the rest of your web page.

00:11:11.789 --> 00:11:18.889
By default it's auto, where iPhone for
OS is picking the best size for the text.

00:11:18.889 --> 00:11:21.750
You can also specify it by percentage.

00:11:21.750 --> 00:11:26.669
You want it to be 200% bigger than normally displayed.

00:11:26.669 --> 00:11:29.459
That's text scaling customization.

00:11:29.460 --> 00:11:33.460
Okay, screen size best practices.

00:11:33.460 --> 00:11:41.030
How do we get the initial display of a big web
site like this to look great on a screen this size?

00:11:41.029 --> 00:11:43.939
If it was actual size you wouldn't see too much.

00:11:43.940 --> 00:11:51.280
So how do we scale this down to look great.

00:11:51.279 --> 00:11:55.459
Let me introduce to you how we're doing that.

00:11:55.460 --> 00:12:04.830
First of all, iPhone assumes or uses 980
pixels as the default width of a web site.

00:12:04.830 --> 00:12:13.410
So we render your web page as if it was
980 pixels and then scale it down to fit.

00:12:13.409 --> 00:12:16.519
From that to that.

00:12:16.519 --> 00:12:17.610
How do we do this?

00:12:17.610 --> 00:12:19.970
Well, we're using two concepts here.

00:12:19.970 --> 00:12:27.800
On desktop, the window and the Viewport are
the same value, they're the same rectangle.

00:12:27.799 --> 00:12:32.339
And what they are is the visible area of the page.

00:12:32.340 --> 00:12:34.060
As you can see, there's a scroll bar.

00:12:34.059 --> 00:12:36.699
There's more web content that isn't yet visible.

00:12:36.700 --> 00:12:40.660
Those -- that content is not in
the Viewport nor in the window.

00:12:40.659 --> 00:12:55.049
On iPhone, the window is the size
of the visible area on the screen.

00:12:55.049 --> 00:13:03.359
However, the Viewport, it might be a little hard to see,
but the Viewport is as big as the entire rendered size

00:13:03.360 --> 00:13:07.399
of your web page at that width that we specified, so 980.

00:13:07.399 --> 00:13:15.279
So that content that's down below on the window, on
desktop, is contained in the fully rendered web page.

00:13:15.279 --> 00:13:17.389
So it's contained in the Viewport.

00:13:17.389 --> 00:13:21.389
In essence, what we do is we -- when you're panning

00:13:21.389 --> 00:13:26.259
and scrolling is moving the window
around on that fully rendered Viewport.

00:13:26.259 --> 00:13:30.110
Again, I'm going to emphasize.

00:13:30.110 --> 00:13:34.070
On desktop, the window and the Viewport are equivalent.

00:13:34.070 --> 00:13:40.700
In this, now that I've explained a little bit more,
fixed positioning is relative to the Viewport.

00:13:40.700 --> 00:13:44.210
So you can see when you pan and zoom
around fixed positioning isn't relative

00:13:44.210 --> 00:13:47.080
to the window, it's relative to the Viewport.

00:13:47.080 --> 00:13:52.600
Again, on iPhone, the window is the
size of the visible area on the screen.

00:13:52.600 --> 00:13:59.620
So when we're zooming, pinching and zooming,
what happens is we're scaling the Viewport.

00:13:59.620 --> 00:14:05.120
That's how that works.

00:14:05.120 --> 00:14:08.560
So how do you customize that initial width.

00:14:08.559 --> 00:14:13.889
That's what we're going to take and
scale to the device width of the iPhone.

00:14:13.889 --> 00:14:19.449
You use the width that your web page
designer used while designing the site.

00:14:19.450 --> 00:14:23.379
In this case for Paul's demo, it was 1024 pixels.

00:14:23.379 --> 00:14:35.429
It's a meta tag on that page, it has a name of View
Port, and its content is width equals 1024 in this case.

00:14:35.429 --> 00:14:37.269
Going to step a little ahead here.

00:14:37.269 --> 00:14:45.319
For web apps we want the web content
to be actual size and match the device.

00:14:45.320 --> 00:14:49.670
So you use Viewport width equals device width.

00:14:49.669 --> 00:14:57.479
We use a constant here because when the user rotates the
device, the width of the page we're scaling to will change.

00:14:57.480 --> 00:15:00.180
This handles rotation nicely.

00:15:00.179 --> 00:15:05.319
So atypical usage with the Viewport is the height.

00:15:05.320 --> 00:15:11.620
Typically in web pages there's a fixed width and all
the content just flows down and you scroll to it.

00:15:11.620 --> 00:15:17.310
You can set it to a fixed height with device
width, but that's not typical behavior.

00:15:17.309 --> 00:15:21.629
Lastly, the home screen icon.

00:15:21.629 --> 00:15:22.970
Paul showed you this.

00:15:22.970 --> 00:15:29.300
You tap on the + button, you tap
on the Add to Home Screen button.

00:15:29.299 --> 00:15:31.549
You see your custom icon right there.

00:15:31.549 --> 00:15:37.889
This is the way when you have a web app, this
is the way your users will get to your web app.

00:15:37.889 --> 00:15:40.870
They must go through these steps
to get it on the home screen.

00:15:40.870 --> 00:15:41.789
How do you do that?

00:15:41.789 --> 00:15:50.490
So you get from scaled images of the web
sites to your icon on the iPhone home screen.

00:15:50.490 --> 00:15:52.009
So how do you specify that.

00:15:52.009 --> 00:15:57.129
It's a 57 by 57 pixel PNG file.

00:15:57.129 --> 00:16:02.070
There's two ways you can specify it,
and two types that you can specify.

00:16:02.070 --> 00:16:03.670
So that's what this table is.

00:16:03.669 --> 00:16:07.699
You can set your Apple touch icon for the entire web site.

00:16:07.700 --> 00:16:10.470
Install it at the root of your web server.

00:16:10.470 --> 00:16:14.070
Alternately, you can specify it per page.

00:16:15.190 --> 00:16:22.980
The first way will automatically round where
we get the rounded rec and glass your icon.

00:16:22.980 --> 00:16:29.720
Will get that neat little glare that
you'll see on many of the iPhone icons.

00:16:29.720 --> 00:16:38.000
So for the entire site, put a file at the root
of your web server called apple-touch-icon .png.

00:16:38.000 --> 00:16:43.570
This may seem very similar to favicon
to you, PNG file is a richer format.

00:16:43.570 --> 00:16:45.790
Looks great on the iPhone screen.

00:16:45.789 --> 00:16:54.929
If you want to specify it per page, it's a link
tag who has a route property of apple-touch-icon,

00:16:54.929 --> 00:17:00.099
and the href points of the URI where you have your PNG file.

00:17:00.100 --> 00:17:05.849
If you don't want the glass look but were still going
to automatically round it for you, it's very similar.

00:17:05.849 --> 00:17:08.179
You add - precompose to both of those.

00:17:08.180 --> 00:17:13.130
So at the root of your web server
apple-touch-icon-precomposed.

00:17:13.130 --> 00:17:19.050
And then the link tag, same thing,
Apple touch icon precomposed.

00:17:23.170 --> 00:17:26.850
So here's Paul to show you how he customized that web site.

00:17:26.849 --> 00:17:28.980
>> So this is the web page as it was before.

00:17:28.980 --> 00:17:33.089
Remember, this was just the existing web
content loaded up into the Simulator,

00:17:33.089 --> 00:17:36.559
and this is our new version with
just a few of those modifications.

00:17:36.559 --> 00:17:38.159
it's a subtle change.

00:17:38.160 --> 00:17:42.610
I'm going to flip back and forth a couple of times
and we're going to take a look at what changed.

00:17:42.609 --> 00:17:45.189
So before, and after.

00:17:45.190 --> 00:17:46.860
Back to before.

00:17:46.859 --> 00:17:48.189
And after.

00:17:48.190 --> 00:17:51.610
So the first thing we did is we
added that Viewport meta tag.

00:17:51.609 --> 00:17:56.500
That gave the content a little more room on the
site, the site was designed for a slightly larger screen,

00:17:56.500 --> 00:17:59.230
and so now the content has room
to breathe, looks a lot nicer.

00:17:59.230 --> 00:18:02.069
But probably the most noticeable thing is the text size.

00:18:02.069 --> 00:18:06.059
So this paragraph here just under
the events header got a lot bigger.

00:18:06.059 --> 00:18:08.179
Now you can read it without having to zoom in at all.

00:18:08.180 --> 00:18:11.820
As soon as you go to the page you can
read the entire paragraph, it's great.

00:18:11.819 --> 00:18:14.779
The navigation up here, we also
increased the text size there.

00:18:14.779 --> 00:18:19.129
So now you can see there's navigation, first
of all, and you can move around the site.

00:18:19.130 --> 00:18:22.290
And I also increased the text size of these headers here.

00:18:22.289 --> 00:18:26.509
Now one of the great things about Safari for
iPhone is that double-tap to zoom behavior.

00:18:26.509 --> 00:18:31.150
But in order to know where you want to zoom in, you
want to make sure that you can read those headings.

00:18:31.150 --> 00:18:35.390
So now, instead of not knowing where
to double tap, it's very clear.

00:18:35.390 --> 00:18:36.550
Top of the design awards.

00:18:36.549 --> 00:18:37.250
Double-tap.

00:18:37.250 --> 00:18:38.369
There you go.

00:18:38.369 --> 00:18:44.069
The content -- this content here, these paragraphs,
they were already optimized for double-taps.

00:18:44.069 --> 00:18:47.210
So I didn't change those text sizes at all.

00:18:47.210 --> 00:18:52.350
The other issue we had is the link
color when you click on a link.

00:18:52.349 --> 00:18:53.539
Didn't really show up in here.

00:18:53.539 --> 00:18:54.879
We changed that to blue.

00:18:54.880 --> 00:18:55.790
Now it's really visible.

00:18:55.789 --> 00:18:59.559
You can see when you've tapped on a link,
when you're going to change navigation.

00:18:59.559 --> 00:19:01.960
But we didn't apply that across the entire site.

00:19:01.960 --> 00:19:03.400
So down here, still in grays.

00:19:03.400 --> 00:19:04.410
Still the default gray.

00:19:04.410 --> 00:19:07.990
It's CSS, you can choose whatever
elements using regular CSS selectors.

00:19:07.990 --> 00:19:10.579
Really nice way just to change some areas of the site.

00:19:10.579 --> 00:19:16.929
And the same way, we can still copy down here,
bring up the selection UI, all that sort of stuff.

00:19:16.930 --> 00:19:18.210
But we disabled it up here.

00:19:18.210 --> 00:19:21.220
So no matter how many times I double tap or tap and hold,

00:19:21.220 --> 00:19:25.640
neither that action sheet nor the
cut, copy, and paste UI come up.

00:19:25.640 --> 00:19:27.910
And is finally, the last thing we talked about.

00:19:27.910 --> 00:19:33.870
That home screen icon, where you add the web site
to the home screen, tap +, tap Add to Home Screen.

00:19:33.869 --> 00:19:35.599
Now I've got a great logo there.

00:19:35.599 --> 00:19:37.949
I decide to use the automatic grounding and glassing.

00:19:37.950 --> 00:19:40.130
So that's applied for me automatically.

00:19:40.130 --> 00:19:45.360
And when I add it to the home screen it looks like a
great app sitting there, ready for the user to use.

00:19:45.359 --> 00:19:47.109
>> Awesome, Paul.

00:19:47.109 --> 00:19:48.490
Thank you very much.

00:19:48.490 --> 00:19:50.620
So what did we just cover?

00:19:50.619 --> 00:19:52.459
We covered the basics.

00:19:52.460 --> 00:19:55.350
Getting started with those iPhone web technologies.

00:19:55.349 --> 00:20:03.259
I showed you how to get custom interaction behavior, custom
text sizing, screen size best practices with the Viewport.

00:20:03.259 --> 00:20:08.099
And how to get your icon on the iPhone home screen.

00:20:08.099 --> 00:20:11.949
So now creating an iPhone web application.

00:20:11.950 --> 00:20:16.850
We're going to build an iPhone
application using web technologies.

00:20:16.849 --> 00:20:22.549
We're going to make that transition
from a web site to a web app.

00:20:22.549 --> 00:20:26.119
We're going to become full screen.

00:20:26.119 --> 00:20:33.750
We're going to customize how the
users can scale your web site.

00:20:33.750 --> 00:20:36.839
We're going show you how to use high performance graphics

00:20:36.839 --> 00:20:41.419
so that your iPhone application built
using web technologies has that same great,

00:20:41.420 --> 00:20:45.460
immersive feeling as all iPhone applications do.

00:20:45.460 --> 00:20:54.850
Lastly, we'll show you how to work off line, because
sometimes your iPhone isn't connected to the Internet.

00:20:54.849 --> 00:20:58.730
So Paul's going to come right back
up -- actually, he never even left --

00:20:58.730 --> 00:21:04.750
and he's going to do a demo of
a great iPhone web application.

00:21:04.750 --> 00:21:08.880
>> Okay, so I've got to show you this on a
device, because it looks and feels great.

00:21:08.880 --> 00:21:12.340
I've already installed and application
to my home screen, I've got a nice icon,

00:21:12.339 --> 00:21:14.839
this time I decided I didn't want
the rounded and glassed look,

00:21:14.839 --> 00:21:19.459
so I'm using that precomposed icon,
so that's the 2009 WWDC badge.

00:21:19.460 --> 00:21:22.579
And we thought for an interesting
demo it would be kind of a fun thing

00:21:22.579 --> 00:21:26.720
to take the WWDC conference schedule
and turn it into a web app.

00:21:26.720 --> 00:21:27.799
Now I say web app.

00:21:27.799 --> 00:21:30.129
But some of you are noticing the airplane out in the corner.

00:21:30.130 --> 00:21:32.520
We'll talk about that in a minute.

00:21:32.519 --> 00:21:33.740
This is a web app.

00:21:33.740 --> 00:21:35.519
And it looks and feels great.

00:21:35.519 --> 00:21:36.940
So let's take a look at this.

00:21:36.940 --> 00:21:39.920
The first thing is the Viewport
that we've been talking about.

00:21:39.920 --> 00:21:44.800
What we've done is we set the Viewport
to be the width of the device's screen

00:21:44.799 --> 00:21:48.079
so we get 1 to 1 ratio of web content to the screen.

00:21:48.079 --> 00:21:49.240
It's actual size.

00:21:49.240 --> 00:21:51.710
We don't have to worry about scaling or anything like that.

00:21:51.710 --> 00:21:55.840
Part of the thing -- one of the things you can do
with a Viewport is you can disable viewer scaling too.

00:21:55.839 --> 00:21:59.730
So even if I pinch or anything like that, it doesn't scale.

00:21:59.730 --> 00:22:01.620
The status bar is custom.

00:22:01.619 --> 00:22:05.109
It's a black translucent color, and
the content will scroll underneath it.

00:22:05.109 --> 00:22:07.589
And well, there's no Safari chrome.

00:22:07.589 --> 00:22:10.949
The address bar is gone, the navigation,
the Forward and Back buttons are all gone.

00:22:10.950 --> 00:22:15.730
This is a full screen web app, you
have full control of the screen.

00:22:15.730 --> 00:22:17.950
So I want to show off this app a little bit.

00:22:17.950 --> 00:22:20.220
We can choose different days here.

00:22:20.220 --> 00:22:24.000
It's kind of like the native  application
if you downloaded it and installed that.

00:22:24.000 --> 00:22:29.769
And what I like to do when I go to conferences, I go through
the whole schedule and I say, oh, that sounds interesting.

00:22:29.769 --> 00:22:33.490
Like, deploying -- Displaying Web
Content in iPhone Applications.

00:22:33.490 --> 00:22:36.569
That's a pretty awesome session, we want to go to that one.

00:22:36.569 --> 00:22:40.829
So I just tap it, mark it with a star,
and that's saved to my favorites list.

00:22:40.829 --> 00:22:42.509
And we can go through.

00:22:42.509 --> 00:22:46.009
And when I tap them, there's this nice little bounce.

00:22:46.009 --> 00:22:48.460
And I'm not doing any of that animation in JavaScript.

00:22:48.460 --> 00:22:52.890
I'm triggering the animation in
JavaScript, but that's a CSS animation.

00:22:52.890 --> 00:22:54.120
There's a session on this later.

00:22:54.119 --> 00:22:56.589
It's a CSS advanced visual effects.

00:22:56.589 --> 00:23:00.230
So you can transform and animate
your elements using only CSS.

00:23:00.230 --> 00:23:06.289
So I'm going to go back to the top, and our
favorites are saved in that tab over there.

00:23:06.289 --> 00:23:08.670
Now I said this is running in airplane mode.

00:23:08.670 --> 00:23:11.310
There's no internet connection, but this is still a web app.

00:23:11.309 --> 00:23:14.859
I went to Safari, I tap +, I added to the home screen.

00:23:14.859 --> 00:23:19.159
It's running fully off line, and there
are three APIs we're using to do this.

00:23:19.160 --> 00:23:26.350
First to save all of the HTML, CSS, and JavaScript,
there's something called the off line application cache.

00:23:26.349 --> 00:23:30.219
You specify manifest file, list all of
the resources you want saved into it,

00:23:30.220 --> 00:23:33.819
and they're downloaded and saved on the device

00:23:33.819 --> 00:23:37.839
Now this is also awesome in case you're using an
online application, because it means you don't have

00:23:37.839 --> 00:23:40.139
to hit the network when you want HTML or CSS.

00:23:40.140 --> 00:23:45.180
You don't have to go around to the web server, it's
already stored locally on the device, it's cached,

00:23:45.180 --> 00:23:49.509
and that cache will persist across reboots.

00:23:49.509 --> 00:23:53.799
Now all the session data is actually being
stored in the structured storage database.

00:23:53.799 --> 00:23:58.099
It's a database that's on the device
and I can use SQL commands to get to it.

00:23:58.099 --> 00:24:04.039
So when I'm doing all of this filtering and I'm saying
show me the things in the Mac track on Thursday,

00:24:04.039 --> 00:24:06.639
actually all I'm doing is writing SQL queries.

00:24:06.640 --> 00:24:10.950
I'm saying select star from sessions where
track is equal to Mac and day is equal

00:24:10.950 --> 00:24:13.660
to Wednesday, or day is equal to Thursday.

00:24:13.660 --> 00:24:15.620
It made developing this really easy.

00:24:15.619 --> 00:24:19.689
I didn't have to write any custom
JavaScript objects or iterate through arrays.

00:24:19.690 --> 00:24:22.799
I just let the database do all
the indexing and querying for me.

00:24:22.799 --> 00:24:25.299
Turned out really fast.

00:24:25.299 --> 00:24:26.869
Lastly, the favorites.

00:24:26.869 --> 00:24:29.409
They are using a much simpler API.

00:24:29.410 --> 00:24:32.790
It's called local storage and session storage.

00:24:32.789 --> 00:24:34.490
It's a persistent object.

00:24:34.490 --> 00:24:37.049
You set strings on it, identified by keys.

00:24:37.049 --> 00:24:40.440
And later you can get those strings
back out of those objects.

00:24:40.440 --> 00:24:42.779
Local storage will persist across reboots.

00:24:42.779 --> 00:24:47.259
So if I go back to this app later all of my
sessions, all of my favorites, they'll still be there.

00:24:47.259 --> 00:24:52.079
We can use it totally off line without
any network connectivity at all.

00:24:52.079 --> 00:24:55.169
So that's a lot of things we just talked about.

00:24:55.170 --> 00:24:56.039
Greg, maybe you can go over --

00:24:56.039 --> 00:24:58.079
>> What an awesome looking app.

00:24:58.079 --> 00:24:59.839
All with web technology.

00:24:59.839 --> 00:25:05.279
So the first thing that Paul did is he went full screen.

00:25:05.279 --> 00:25:09.899
We went from this in Safari for iPhone, to that.

00:25:09.900 --> 00:25:11.130
Full screen.

00:25:11.130 --> 00:25:14.280
How do you do that?

00:25:14.279 --> 00:25:20.649
What this means is you're more than just a bookmark
on the home screen, like we were for web pages.

00:25:20.650 --> 00:25:23.480
You'll have no Address bar.

00:25:23.480 --> 00:25:25.210
No Tab bar.

00:25:25.210 --> 00:25:27.690
Web apps always launch in portrait.

00:25:27.690 --> 00:25:32.910
Here's one important thing to note about web apps.

00:25:32.910 --> 00:25:37.250
Any links will open in Safari on iPhone.

00:25:37.250 --> 00:25:41.660
This -- this is because Safari on
iPhone is great for browsing the web.

00:25:41.660 --> 00:25:44.630
It has history and all the browsing behavior.

00:25:44.630 --> 00:25:51.170
So if you go off of your web page that's in your
web application, it will go to Mobile Safari.

00:25:51.170 --> 00:25:52.700
Even if they're in the same domain.

00:25:52.700 --> 00:25:56.210
That's something I didn't even realize
the first time I heard about this.

00:25:56.210 --> 00:26:02.200
So what you should do is use XMLHttpRequest
to get more data.

00:26:02.200 --> 00:26:06.269
You could do all of this with JavaScript
links rather than anchor links.

00:26:06.269 --> 00:26:10.599
As Paul showed you, you could get a custom status bar style.

00:26:10.599 --> 00:26:13.669
The status bar is this area at the top of the screen.

00:26:14.690 --> 00:26:15.980
You can customize it.

00:26:15.980 --> 00:26:18.480
And new in iPhone 3.0.

00:26:18.480 --> 00:26:25.309
Paul didn't quite get to it, but when the iPhone launches a
full screen web app what you'll see is what was visible the

00:26:25.309 --> 00:26:27.809
last time the user used your app.

00:26:27.809 --> 00:26:33.109
You can set a custom start up image as a splash
screen for, say, like with native applications.

00:26:33.109 --> 00:26:36.119
New in iPhone 3.0.

00:26:36.119 --> 00:26:38.099
So how do you make your app full screen?

00:26:38.099 --> 00:26:39.750
It's a one liner.

00:26:39.750 --> 00:26:43.630
So you add it to your web application's HTML.

00:26:43.630 --> 00:26:51.370
It's a meta tag whose name is apple -mobile-web-app capable.

00:26:51.369 --> 00:26:55.179
And of course the content is yes for this case.

00:26:55.180 --> 00:26:57.990
And you can query this at runtime.

00:26:57.990 --> 00:27:05.420
That's how Paul's knew from Safari on iPhone to
say, hey, tap on this to add me to the home screen.

00:27:05.420 --> 00:27:11.050
And then when we were running from full screen mode,
he knew right to go -- to go right to the schedule.

00:27:11.049 --> 00:27:13.700
So it's a property on the navigator.

00:27:13.700 --> 00:27:14.930
It's called stand alone.

00:27:14.930 --> 00:27:17.120
Clearly, it's true when you're a full screen web app.

00:27:17.119 --> 00:27:23.019
And it's false when you're in Safari for iPhone.

00:27:24.950 --> 00:27:27.700
How do you set a custom status bar style.

00:27:27.700 --> 00:27:30.420
There are three styles of status bars.

00:27:30.420 --> 00:27:31.580
The default.

00:27:31.579 --> 00:27:33.889
This is what appears in Safari on iPhone.

00:27:33.890 --> 00:27:35.110
It's a gray background.

00:27:35.109 --> 00:27:38.809
You're all used to it.

00:27:38.809 --> 00:27:40.759
You could set it to solid black.

00:27:40.759 --> 00:27:48.900
Here I have drawn a little line around it, so it was
clear against the black background as to what it was.

00:27:48.900 --> 00:27:52.120
So you set this with a meta tag, again.

00:27:52.119 --> 00:27:57.869
The name of this one is mobile-web-app-status-bar-style.

00:27:57.869 --> 00:28:01.549
The content for this is black.

00:28:01.549 --> 00:28:06.359
And as Paul showed you in his demo,
there's also black translucent.

00:28:06.359 --> 00:28:11.759
Not the greatest screen shot for this, but the
web content is visible underneath the status bar.

00:28:11.759 --> 00:28:15.379
It's also the same meta tag.

00:28:15.380 --> 00:28:18.790
Here the content is black- translucent.

00:28:18.789 --> 00:28:22.909
So one thing to note with black translucent.

00:28:22.910 --> 00:28:28.110
Any web content that shows up under
that status bar is not useable.

00:28:28.109 --> 00:28:31.849
The user can't click in it when it's under the status bar.

00:28:33.609 --> 00:28:39.509
So one thing to note here, all these
three screen shots are the same size.

00:28:39.509 --> 00:28:42.460
And you can see because the web content is displaying up

00:28:42.460 --> 00:28:47.740
and underneath the status bar you can actually
see more of those tabs on the web page.

00:28:47.740 --> 00:28:51.390
So you get a little bit more room
and it's nice when scrolling.

00:28:51.390 --> 00:28:55.850
But that top part -- not accessible.

00:28:55.849 --> 00:28:57.369
Custom start up image.

00:28:57.369 --> 00:29:01.659
New in iPhone 3.0.

00:29:01.660 --> 00:29:05.250
As I said earlier, it always launches in portrait.

00:29:05.250 --> 00:29:13.400
So your start up image is a 320 by 460 pixel PNG file.

00:29:13.400 --> 00:29:16.840
That accounts for the status bar.

00:29:16.839 --> 00:29:23.559
And you specify it for your web
application page with a link tag.

00:29:23.559 --> 00:29:32.049
It has a rel property of Apple touch startup
image, and has an href property of the URI,

00:29:32.049 --> 00:29:43.180
rather, the URI, where your startup PNG file is.

00:29:43.180 --> 00:29:46.430
Okay, screen scaling best practices.

00:29:46.430 --> 00:29:49.560
Users can scale your web content.

00:29:49.559 --> 00:29:52.440
How do you optimize that scaling behavior.

00:29:52.440 --> 00:29:53.600
Well, it's the Viewport tag.

00:29:53.599 --> 00:29:58.119
Remember, I talked about that earlier, saying
what the initial width was of the Viewport.

00:29:58.119 --> 00:30:02.529
Now we're going to be customizing the scaling behavior.

00:30:04.950 --> 00:30:10.759
Initial scale, minimum scale, and maximum scale.

00:30:10.759 --> 00:30:17.329
These will specify once you have the width, then the
initial scale we're doing upon that Viewport size.

00:30:17.329 --> 00:30:24.559
In addition, you can set the minimum scale and the
maximum scale that the user can scale your content to.

00:30:24.559 --> 00:30:29.990
Let's just say that you only want them to do it
initially at one and no bigger than two times bigger.

00:30:29.990 --> 00:30:34.349
So they could zoom out but not in, more than twice.

00:30:34.349 --> 00:30:35.980
You'd use this right here.

00:30:35.980 --> 00:30:37.890
It's the Viewport tag.

00:30:37.890 --> 00:30:42.200
There are more properties on the
Viewport tag, they're separated by commas.

00:30:42.200 --> 00:30:48.569
In this case, initial scale is
1, and the maximum scale is 2.

00:30:48.569 --> 00:30:56.200
You can turn off scaleability completely
with the user scaleable property.

00:30:56.200 --> 00:30:58.190
It's on by default.

00:30:58.190 --> 00:31:04.029
So typically I would imagine that you're only going
to turn it off when you use this in the Viewport tag.

00:31:04.029 --> 00:31:10.569
So you would add it to the list of items in
the Viewport tag, user scaleable equals no.

00:31:10.569 --> 00:31:17.480
So when you're making a web app, what I imagine you're
going to want is 1 to 1 actual size, like Paul's demo there.

00:31:17.480 --> 00:31:26.130
So what I suggest you have in your Viewport
tag for these items, user scaleable, no.

00:31:26.130 --> 00:31:30.830
So there's no pinching and zooming of the content.

00:31:30.829 --> 00:31:33.019
And width equals device width.

00:31:33.019 --> 00:31:37.829
It will layout one for one with the
width of the iPhone, and when you rotate.

00:31:37.829 --> 00:31:42.079
High performance graphics.

00:31:42.079 --> 00:31:49.349
So Paul had that great little pop that occurred
when we selected his favorite sessions.

00:31:49.349 --> 00:31:53.230
Looks great, people love that interaction
in iPhone applications.

00:31:53.230 --> 00:31:57.259
And I'm going to do a quick overview, because
there's a whole session after this session

00:31:57.259 --> 00:31:59.879
in another room that I'm going to go over this.

00:31:59.880 --> 00:32:02.270
This is that animation, by the way.

00:32:02.269 --> 00:32:03.869
So it's CSS.

00:32:03.869 --> 00:32:06.959
This is CSS code that you see here.

00:32:06.960 --> 00:32:09.750
So on the first selector, New Favorites.

00:32:09.750 --> 00:32:13.019
When you select that, it becomes a new favorite.

00:32:13.019 --> 00:32:14.089
We have an animation.

00:32:14.089 --> 00:32:15.289
Here it's called Favorite.

00:32:15.289 --> 00:32:21.369
And it refers up ahead to which WebKit keyframes favorite.

00:32:21.369 --> 00:32:27.679
The duration of the animation is
0.3 seconds, and it happens once.

00:32:27.680 --> 00:32:37.029
So the animation's going from a scale of 1 here
at the beginning of the favorite animation,

00:32:37.029 --> 00:32:40.230
and here at the bottom it's going back to a scale of 1.

00:32:40.230 --> 00:32:50.269
Now along the way the other key frames in this animation
20% of the way through, the scale goes down to 90%.

00:32:50.269 --> 00:32:51.440
So it looks like it's pulling back.

00:32:51.440 --> 00:32:56.039
And then halfway through, the scale goes back out to 120%.

00:32:56.039 --> 00:32:59.670
So you get this -- rather you get this.

00:32:59.670 --> 00:33:03.710
And it goes back to 1.

00:33:03.710 --> 00:33:07.600
So quick overview of the types of things
you can do with CSS visual effects,

00:33:07.599 --> 00:33:11.019
because in this next session you'll see all about it.

00:33:11.019 --> 00:33:14.410
I think it just animated where those items moved around.

00:33:14.410 --> 00:33:16.920
More animations you could do.

00:33:16.920 --> 00:33:24.330
There's also -- you could get your
DIVsto slide, like UIKit, UITableViews.

00:33:24.329 --> 00:33:27.549
You could get this awesome 3D effects.

00:33:27.549 --> 00:33:29.250
That's like the weather settings.

00:33:29.250 --> 00:33:33.900
Those are DIVson either side, and
they flip around in 3D space.

00:33:33.900 --> 00:33:35.330
Here's another great 3D demo.

00:33:35.329 --> 00:33:38.949
These are all demos from last year's CSS visual effects.

00:33:38.950 --> 00:33:43.460
All of those are DIVsthat are on a big circle,
and as you tap and roll them, it rolls it.

00:33:43.460 --> 00:33:45.110
It's beautiful stuff you can do.

00:33:45.109 --> 00:33:50.319
All with CSS, HTML, and JavaScript.

00:33:50.319 --> 00:33:53.639
I've really pumped it up.

00:33:53.640 --> 00:33:54.700
Working off line.

00:33:54.700 --> 00:33:59.269
Because the iPhone, believe it
or not, may not always be online.

00:33:59.269 --> 00:34:01.039
It's always so disappointing.

00:34:01.039 --> 00:34:03.670
What do you do?

00:34:03.670 --> 00:34:09.139
HTML 5 has a standard way of having off line storage.

00:34:09.139 --> 00:34:10.650
It's a w3 standard.

00:34:10.650 --> 00:34:15.420
You can read about it here at this URL.

00:34:15.420 --> 00:34:18.389
There's three types and three characteristics.

00:34:18.389 --> 00:34:19.949
I'm going to go into each.

00:34:19.949 --> 00:34:24.769
Again, this is an overview because
there's a session later this week.

00:34:24.769 --> 00:34:28.009
There's session storage.

00:34:28.010 --> 00:34:35.680
This is a property on the window object called
session storage, and it's like key value pairs.

00:34:35.679 --> 00:34:36.719
It's terribly simple.

00:34:36.719 --> 00:34:39.039
It's JavaScript programming in my mind.

00:34:39.039 --> 00:34:44.440
Session storage.my key =my string value.

00:34:44.440 --> 00:34:46.789
Key value pairs.

00:34:46.789 --> 00:34:54.090
The persistence of how long this object
lasts is pretty much the life of the lab.

00:34:54.090 --> 00:34:58.260
So I would think about this is
good usage in ecommerce sights,

00:34:58.260 --> 00:35:03.210
where you may be putting things
into a checkout cart for a while.

00:35:03.210 --> 00:35:05.460
One of its advantages is really fast data access.

00:35:05.460 --> 00:35:09.960
Once that data is in there, it's really quick to get out.

00:35:09.960 --> 00:35:12.139
Next up is local storage.

00:35:12.139 --> 00:35:16.879
It's so similar to session storage,
but the persistence is different.

00:35:16.880 --> 00:35:20.920
It's keys and values, just like session storage.

00:35:20.920 --> 00:35:24.990
It's an object on the window called local storage.

00:35:24.989 --> 00:35:29.009
This is like a supercookie, if I haven't already said that.

00:35:29.010 --> 00:35:31.760
It persists across reboots.

00:35:31.760 --> 00:35:37.210
So this is how Paul stored his favorite
sessions in his web application.

00:35:37.210 --> 00:35:43.840
Again, this is great because it has fast data
access, and who doesn't like to use supercookies.

00:35:43.840 --> 00:35:47.680
Next up is structured data storage.

00:35:47.679 --> 00:35:50.819
You use the Internet, download your data,

00:35:50.820 --> 00:35:57.160
put it into a structured database, and
you can get SQL access to your data.

00:35:57.159 --> 00:36:00.559
What's great about this is it persists across reboots.

00:36:00.559 --> 00:36:05.429
Then your web application doesn't need to be
connected to the Internet to get this data later.

00:36:05.429 --> 00:36:08.799
The session data, for example, is fairly static.

00:36:08.800 --> 00:36:12.769
Download all that at the beginning,
you don't need to get it again.

00:36:12.769 --> 00:36:21.259
And what's great is Paul used that SQL
select statements to pick each track day

00:36:21.260 --> 00:36:25.230
of Mac, iPhone, IT, and the days of the week.

00:36:25.230 --> 00:36:27.460
So you get fast queries.

00:36:27.460 --> 00:36:29.329
Great stuff.

00:36:29.329 --> 00:36:33.219
There's also the off line application cache.

00:36:33.219 --> 00:36:35.379
It's an HTML 5 API.

00:36:35.380 --> 00:36:37.710
It comes from the w3 organization.

00:36:37.710 --> 00:36:40.519
You can read all about it right here.

00:36:40.519 --> 00:36:44.719
So it is a file called the manifest file.

00:36:44.719 --> 00:36:49.549
And the contents of this file are
the list of resources that you would

00:36:49.550 --> 00:36:54.310
like the web technology on iPhone to cache for you.

00:36:54.309 --> 00:36:59.789
I'm doing an overview because there's
a whole session about this.

00:36:59.789 --> 00:37:05.800
There's an attribute on the HTML tag called manifest.

00:37:05.800 --> 00:37:10.400
And it points to a URI where your manifest file is.

00:37:10.400 --> 00:37:15.860
One thing to know about manifest files is you have
to configure Apache or your web server to serve

00:37:15.860 --> 00:37:20.260
up the correct mine type for your manifest file.

00:37:20.260 --> 00:37:25.750
And the great thing about it as well, is you can
determine whether or not you have online access.

00:37:25.750 --> 00:37:30.679
So whether or not you should go try
to poll more data from the Internet.

00:37:30.679 --> 00:37:36.449
It's a property on the navigator whose name is online.

00:37:36.449 --> 00:37:39.629
And if you're on line, it's true.

00:37:39.630 --> 00:37:41.930
So to summarize.

00:37:41.929 --> 00:37:46.419
iPhone applications created with web technologies.

00:37:46.420 --> 00:37:48.889
Getting from our web site to a web app.

00:37:48.889 --> 00:37:58.449
I showed you how to get full screen, how to handle the user
scaling behavior, how to get high performance graphics,

00:37:58.449 --> 00:38:03.409
so you can get that immersive, great iPhone
application feel using only HTML, CSS,

00:38:03.409 --> 00:38:07.349
and JavaScript, and how to work off line.

00:38:07.349 --> 00:38:15.400
Not only is it great when you're not
connected to the Internet, but it's fast.

00:38:15.400 --> 00:38:19.320
So now we're going to add advanced features.

00:38:19.320 --> 00:38:24.620
We're going to put the iPhone in your iPhone web app.

00:38:24.619 --> 00:38:27.389
We have JavaScript APIs for the iPhone.

00:38:27.389 --> 00:38:34.549
You can determine when the device orientation
changes, say from portrait to landscape and back.

00:38:34.550 --> 00:38:36.750
Multi-Touch support.

00:38:36.750 --> 00:38:40.789
How can you get access to all those
fingers, the domino is about a mouse.

00:38:40.789 --> 00:38:42.400
It only has one.

00:38:42.400 --> 00:38:45.019
But we have five.

00:38:45.019 --> 00:38:47.960
How do you get that Multi-Touch
support in your web application.

00:38:47.960 --> 00:38:53.699
And new in iPhone 3.0, location awareness.

00:38:53.699 --> 00:38:57.439
Your user can share their location with your application.

00:38:57.440 --> 00:38:59.730
You can give them an awesome experience.

00:38:59.730 --> 00:39:03.130
We're going to start with a demo.

00:39:03.130 --> 00:39:08.260
Paul has some great enhancements to that attendee web site.

00:39:08.260 --> 00:39:09.060
>> Thanks, Greg.

00:39:09.059 --> 00:39:17.009
Okay, so I'm back here on the home screen, I'm going to
launch our web app again, and there's that start up image.

00:39:17.010 --> 00:39:20.540
So you know, I've got this great list of
favorites, and the favorites are still there.

00:39:20.539 --> 00:39:23.829
You know, they're saved across launches of the web app.

00:39:23.829 --> 00:39:28.639
I've got this list of favorites, and I have the
title of the session, the time, and the room it's in.

00:39:28.639 --> 00:39:33.129
But you know, this is my first year at WWDC actually,
and I'm not really sure where all of these rooms are,

00:39:33.130 --> 00:39:35.510
and a couple things got moved around a little bit.

00:39:35.510 --> 00:39:38.340
So what we really need is a map.

00:39:38.340 --> 00:39:41.670
So I'm going to take my device and I'm
going to rotate it on its side there.

00:39:41.670 --> 00:39:42.889
And there we go.

00:39:42.889 --> 00:39:45.109
We listen for the device orientation change.

00:39:45.110 --> 00:39:50.210
When the orientation changes you can relayout your
web app, or put up new content as I'm doing here.

00:39:50.210 --> 00:39:55.130
And we've got a map, and here's the first floor
and we can tap between the different floors.

00:39:55.130 --> 00:40:01.930
And when we change between the different floors
there's a really nice quick fade that happens.

00:40:01.929 --> 00:40:04.259
This is actually, again, those CSS visual effects.

00:40:04.260 --> 00:40:10.180
I'm using a CSS transition on the opacity
property to cross fade between the different floors.

00:40:10.179 --> 00:40:14.159
And you know on the first floor is the iPhone lab,
you really should stop by, you could talk to us,

00:40:14.159 --> 00:40:18.920
we could tell you all about the things we're doing
here, show you a demo if you have any questions.

00:40:18.920 --> 00:40:23.550
But you know, WWDC is more than just what's
happening inside the walls of Moscone.

00:40:23.550 --> 00:40:30.720
There's all the meet-ups and the parties and you
have a hotel, you're not sleeping in Moscone, right?

00:40:30.719 --> 00:40:33.000
And so that's why we've got this last tap here, local.

00:40:33.000 --> 00:40:35.429
So I'm going to go ahead and tap that and bring that up.

00:40:35.429 --> 00:40:36.859
And it's just a map of the area.

00:40:36.860 --> 00:40:40.829
And I'm dropping down some pins
again, more CSS visual effects.

00:40:40.829 --> 00:40:46.000
And so I've got some pins marking
-- well the green is us, Moscone.

00:40:46.000 --> 00:40:49.940
And let's see, that red pin there is one
of my favorite coffee shops in the area,

00:40:49.940 --> 00:40:53.490
Blue Bottle, and there's a -- Union Square up there.

00:40:53.489 --> 00:40:58.779
And we can -- we can take this and we
can put our finger down, and we can pan.

00:40:58.780 --> 00:41:01.060
It pans really nicely.

00:41:01.059 --> 00:41:04.000
And this is because we're using those DOM Touch events.

00:41:04.000 --> 00:41:09.949
We're getting information about what fingers are being
placed down on the screen, when they're being moved,

00:41:09.949 --> 00:41:14.379
it's a really fast API, and you can use it for
direct manipulation of your content elements.

00:41:14.380 --> 00:41:18.320
Now the map you can see is actually scrolling behind.

00:41:18.320 --> 00:41:22.690
The navigation at the top, it's scrolling behind
the menu bar, behind the logo in the corner.

00:41:22.690 --> 00:41:25.309
I'm positioning the map using CSS transforms.

00:41:25.309 --> 00:41:27.650
If you do it right it can be really fast.

00:41:27.650 --> 00:41:30.829
You really don't have to relayout the page.

00:41:30.829 --> 00:41:33.289
So you can get really nice scrolling effects like that.

00:41:33.289 --> 00:41:39.289
And of course we can use two fingers to zoom in or rotate.

00:41:39.289 --> 00:41:41.619
That's a really nice effect.

00:41:41.619 --> 00:41:46.489
But you know, I'm looking at this map -- does it
both anyone else that Market Street is crooked?

00:41:46.489 --> 00:41:50.659
I lived here for a little while, but let's -- let's do this.

00:41:50.659 --> 00:41:52.319
Yeah, that's a lot better.

00:41:52.320 --> 00:41:54.640
[ Applause ]

00:41:54.639 --> 00:41:58.559
>> But, sometimes you're walking around,
and you don't really know where you are.

00:41:58.559 --> 00:42:04.190
You're not really too familiar with the streets, the
city, that's why I've got this button in the corner.

00:42:04.190 --> 00:42:10.269
And well hopefully, it will eventually
get its head together.

00:42:10.269 --> 00:42:13.170
If all things go well.

00:42:13.170 --> 00:42:13.789
There we go.

00:42:13.789 --> 00:42:15.789
That's a live Geolocation reading.

00:42:15.789 --> 00:42:19.469
This is core location, no fakery.

00:42:19.469 --> 00:42:23.709
It's figuring out using cell triangulation,
GPS, we're there.

00:42:23.710 --> 00:42:24.920
We're there at that green dot.

00:42:24.920 --> 00:42:29.039
So this is a new API in 3.0, Geolocation in your web apps.

00:42:29.039 --> 00:42:31.369
Now normally you're going to get two privacy alerts.

00:42:31.369 --> 00:42:37.069
You're going to get one if you're running in Safari, for
example, for Safari letting the user know Safari wants

00:42:37.070 --> 00:42:42.890
to know the user's location, and you're going
to get one for the actual web site itself.

00:42:42.889 --> 00:42:46.900
Each web site is going to pop up
a privacy alert to the user.

00:42:46.900 --> 00:42:51.000
And if they accept, Geolocation is going to
pinpoint you and you're going to get, as we saw,

00:42:51.000 --> 00:42:54.730
more and more accurate information the longer you wait.

00:42:55.820 --> 00:43:01.730
>> So maybe this is like not the sort of room of
people I need to tell this, but this is a web app.

00:43:01.730 --> 00:43:09.429
This is HTML, CSS, JavaScript, no Objective-C,
no Cocoa Touch was written at all for this.

00:43:09.429 --> 00:43:15.659
We used for the most part up and coming standards, some
specs that are in development, HTML 5, Geolocation is an up

00:43:15.659 --> 00:43:22.819
and coming spec, some of the new CSS visual effects
that are in draft form -- proposed draft form --

00:43:22.820 --> 00:43:25.370
and just a couple of iPhone specific extensions.

00:43:25.369 --> 00:43:29.250
And we wrote a web app that looks
and feels great, like a native app.

00:43:29.250 --> 00:43:33.659
Like if I told you this was written
in Cocoa Touch, would you believe me?

00:43:33.659 --> 00:43:35.369
>> Awesome app, Paul.

00:43:35.369 --> 00:43:36.900
>> Few things we covered there, Greg.

00:43:36.900 --> 00:43:37.829
Give us the details.

00:43:37.829 --> 00:43:45.549
>> One thing I want to point out is Paul didn't get the
may I share your location with this application alert.

00:43:45.550 --> 00:43:47.769
It's just like the one in core location.

00:43:47.769 --> 00:43:51.110
He used it within the last 24 hours.

00:43:51.110 --> 00:43:55.170
Every 24 hours it will ask you
can we use your location again.

00:43:55.170 --> 00:43:56.720
I just wanted to point that out.

00:43:56.719 --> 00:43:57.939
What a great app.

00:43:57.940 --> 00:44:00.559
I wish Market Street was straight.

00:44:02.019 --> 00:44:05.369
Okay, device orientation changes.

00:44:05.369 --> 00:44:13.609
We went from the schedule in portrait
to these great maps while in landscape.

00:44:13.610 --> 00:44:14.400
How did we do that.

00:44:14.400 --> 00:44:15.660
It's actually really simple.

00:44:15.659 --> 00:44:20.730
We're listening for orientation changes.

00:44:20.730 --> 00:44:26.400
You attach them to the body, because we don't
want -- you want the whole page to rotate.

00:44:26.400 --> 00:44:31.750
And you can even do different things,
but the event is sent to the body.

00:44:31.750 --> 00:44:33.639
It's called on orientation change.

00:44:33.639 --> 00:44:37.000
It's handled like any JavaScript event.

00:44:37.000 --> 00:44:41.610
In this case, I'm calling some
JavaScript called update orientation.

00:44:41.610 --> 00:44:48.090
And what you'll do in this case when you
get an orientation change event is look

00:44:48.090 --> 00:44:50.850
at the orientation property on the window.

00:44:50.849 --> 00:44:53.670
This is what we've added for iPhone.

00:44:53.670 --> 00:44:56.780
If it's zero, you're in portrait.

00:44:59.300 --> 00:45:05.080
If you rotated the phone counter
clockwise to landscape, its value is 90.

00:45:05.079 --> 00:45:11.210
And if you rotate it clockwise, its value is minus 90.

00:45:11.210 --> 00:45:14.070
So those are attached to the body.

00:45:14.070 --> 00:45:22.570
What Paul did when we got these events was swap out the
sessions DIV, the HTML element, and put in the maps DIV.

00:45:22.570 --> 00:45:25.870
So he hid one and showed the other.

00:45:25.869 --> 00:45:30.000
You could do something like that in your orientation code.

00:45:30.000 --> 00:45:31.420
So we have Multi-Touch.

00:45:31.420 --> 00:45:38.690
That's how Paul was panning that content directly,
while keeping the rest of the items fixed on the screen.

00:45:38.690 --> 00:45:44.480
As well as how he got the pinches and the rotates.

00:45:44.480 --> 00:45:48.829
Typically with the web you have one pointer.

00:45:48.829 --> 00:45:50.579
There's -- it's the mouse.

00:45:50.579 --> 00:45:54.940
On -- and you could move it around, drag things around.

00:45:54.940 --> 00:46:03.010
But on iPhone, you could have another pointer,
put down another finger, and once you do that,

00:46:03.010 --> 00:46:06.960
you could get gestures, like zooming
in and zooming back out,

00:46:06.960 --> 00:46:12.099
around with the DOM Touch APIs, you
can even invent your own gestures.

00:46:12.099 --> 00:46:19.239
So what are the details of touch events.

00:46:19.239 --> 00:46:23.419
For each finger the event order is this.

00:46:23.420 --> 00:46:24.550
You'll get a touch start.

00:46:24.550 --> 00:46:27.470
This is when the finger first touches the screen.

00:46:27.469 --> 00:46:30.459
Should the user move that finger,
you'll get a touch move event.

00:46:30.460 --> 00:46:35.150
And when they lift their finger, touch end.

00:46:35.150 --> 00:46:37.430
You can also go directly from touch start to touch end.

00:46:37.429 --> 00:46:40.909
That's a quick tap with any number of fingers.

00:46:40.909 --> 00:46:46.789
One important thing to note is touch cancel.

00:46:46.789 --> 00:46:57.409
Once the event cycle has started, started and then touch
started and then touch move, a touch cancel event can occur.

00:46:57.409 --> 00:47:02.849
This will happen, say, when the user touches the
lock button, or a JavaScript dialogue occurs.

00:47:02.849 --> 00:47:06.779
Technically, the user is still touching the screen, but
those events, you're not going to get the touch end.

00:47:06.780 --> 00:47:09.800
You're in a different mode now, if you will.

00:47:09.800 --> 00:47:16.019
So be aware of touch cancel, and I can't emphasize
enough, touch cancel is very important to listen for.

00:47:16.019 --> 00:47:21.750
And these are just like regular JavaScript event handling.

00:47:21.750 --> 00:47:27.000
There's the on touch property -- I'm sorry
-- there's the on touch attribute on any DIV,

00:47:27.000 --> 00:47:28.909
and you give it a JavaScript function to call.

00:47:28.909 --> 00:47:34.589
And you could also use it all via
JavaScript with add event listener.

00:47:34.590 --> 00:47:37.370
Standard JavaScript event handling.

00:47:37.369 --> 00:47:44.529
So I'm going to do -- show you what
are the features of a touch event.

00:47:44.530 --> 00:47:48.370
So when touch is started here what we get is a touch event.

00:47:48.369 --> 00:47:55.650
If you want to know all the current touches that are
occurring for all fingers that may be touching the iPhone,

00:47:55.650 --> 00:47:59.070
there is a property on the touch event called touches.

00:47:59.070 --> 00:48:03.789
It's an array of all the touches.

00:48:03.789 --> 00:48:07.969
Now when you add the event handler
to an element you may be interested

00:48:07.969 --> 00:48:11.480
in what fingers are touching that particular element.

00:48:11.480 --> 00:48:15.369
That property is called target touches.

00:48:15.369 --> 00:48:24.969
It is again an array of all of the
touches that are touching that target.

00:48:24.969 --> 00:48:32.859
While you're on -- using Multi-Touch on iPhone the user
may be keeping one finger still and only moving one.

00:48:32.860 --> 00:48:37.820
You may only want to know in this new
event cycle what touches have changed.

00:48:37.820 --> 00:48:42.309
So on the touch event, there's a
property called change touches.

00:48:42.309 --> 00:48:48.920
So I have explained that these are arrays.

00:48:48.920 --> 00:48:55.110
To get the first touch that goes down, you
get touch -- you get the target touch zero.

00:48:55.110 --> 00:49:02.280
And then that touch -- so let me explain,
a touch event has lists of touches.

00:49:02.280 --> 00:49:06.650
So -- because multiple things can be occurring at one time.

00:49:06.650 --> 00:49:10.019
Those will occur as touch events, but
there's a lot of touches in there.

00:49:10.019 --> 00:49:14.389
So that you could get the touch and
you could get the touches target.

00:49:14.389 --> 00:49:16.920
What element is it current touching.

00:49:16.920 --> 00:49:26.659
In case you need to track the touch from event
to event, it has a property called identifier.

00:49:26.659 --> 00:49:30.989
This way you can watch where a particular
finger is moving from event to event.

00:49:30.989 --> 00:49:38.669
And of course because these are user interface event and
they're happening to your web app, they have locations,

00:49:38.670 --> 00:49:44.210
client X and client Y are defined as relative
to the Viewport, which I explained earlier.

00:49:44.210 --> 00:49:49.170
There's also properties for screen
-- location relative to the screen.

00:49:49.170 --> 00:49:52.090
And also location relative to the page.

00:49:52.090 --> 00:49:54.900
Just like mouse events.

00:49:54.900 --> 00:49:57.320
Okay, we also have gestures.

00:49:57.320 --> 00:50:01.830
This is when two or more fingers is down on the screen.

00:50:01.829 --> 00:50:04.159
There's two gestures that we support.

00:50:04.159 --> 00:50:08.619
Scaling, as you're used to with iPhone, and rotation.

00:50:08.619 --> 00:50:13.289
That's when you have two fingers down
and you basically rotate your hand.

00:50:13.289 --> 00:50:22.139
For each of those gestures, once the second finger
goes down, you'll get a gesture start event.

00:50:22.139 --> 00:50:27.599
And it is of course followed by the gesture change event.

00:50:27.599 --> 00:50:29.489
What is the user doing.

00:50:29.489 --> 00:50:36.599
And then when there are no longer two fingers
on the screen, you'll get a gestureend.

00:50:36.599 --> 00:50:43.809
I also need to point out gesture events and
touch events come in the same event stream.

00:50:43.809 --> 00:50:48.579
So you'll get a touch -- and you don't
have to listen for them all either.

00:50:48.579 --> 00:50:53.539
But if you listen for touch events and gesture events,
you'll get touches, and as soon as that second finger goes

00:50:53.539 --> 00:50:57.420
down you're going to start getting
gesture events interspersed.

00:50:57.420 --> 00:51:03.490
These are just like JavaScript events, so
you could add them to your HTML elements,

00:51:03.489 --> 00:51:07.259
much like touch events, and much like mouse events.

00:51:08.579 --> 00:51:13.059
So let me explain gesture events.

00:51:13.059 --> 00:51:17.000
When you get -- in this case I implemented gesturechange,

00:51:17.000 --> 00:51:21.360
and it's going to get an event
-- it's called a gesture event.

00:51:21.360 --> 00:51:27.190
And you could see what HTML element is
being targeted by this gesture event.

00:51:27.190 --> 00:51:33.349
And just like touch events, event has a property
called target that gives you that information.

00:51:33.349 --> 00:51:36.099
Okay, for scaling.

00:51:36.099 --> 00:51:40.549
You put your fingers down, the
scale property of the event is 1.

00:51:40.550 --> 00:51:47.200
And then when you make them smaller, you pinch
in, you're going to be scaling it smaller.

00:51:47.199 --> 00:51:48.710
It's less than 1.

00:51:48.710 --> 00:51:51.730
When you open, it's greater than 1.

00:51:51.730 --> 00:51:59.070
That's the scale.

00:51:59.070 --> 00:52:02.110
Next up is the rotation.

00:52:02.110 --> 00:52:12.110
So this is the gesture that isn't used very often in
iPhone, and it is the rotation of your finger in degrees.

00:52:12.110 --> 00:52:13.360
And it's the delta.

00:52:13.360 --> 00:52:17.440
So if I go here, the delta is 0,
and if I move that much, it's 30.

00:52:17.440 --> 00:52:23.950
What did I just do -- I went counterclockwise,
so it's -30, and clockwise would be +30.

00:52:23.949 --> 00:52:30.250
So you can do little rotation gestures,
much like dials, if you think about it.

00:52:30.250 --> 00:52:33.699
It's a probability on the gesture event called rotation.

00:52:33.699 --> 00:52:42.239
One awesome thing about Multi-Touch and CSS
visual effects is they go along great together.

00:52:42.239 --> 00:52:47.179
Because users love to directly manipulate things on iPhone.

00:52:47.179 --> 00:52:49.549
It's fun to play with web apps that do that.

00:52:49.550 --> 00:52:56.330
So you can quickly transform your
HTML content with CSS visual effects,

00:52:56.329 --> 00:53:01.630
and when you have the touch events involved
with that, that's direct manipulation.

00:53:01.630 --> 00:53:10.369
So in this little code sample, I call it a code snippet,
I'm getting the first touch out of my target touches.

00:53:10.369 --> 00:53:15.429
And I use the location, the client X and the client Y,

00:53:15.429 --> 00:53:20.500
and I pass it to a function both get
translated X, and get translated Y.

00:53:20.500 --> 00:53:27.480
This is because in Paul's app, as he picked up his
finger and moved it along, the map was transformed.

00:53:27.480 --> 00:53:33.730
And we need to keep track of where it was
transformed to, so the next transform adds to that.

00:53:33.730 --> 00:53:42.010
And what you do is you get that new translation location,
and you pass that to the CSS property Web Kit transform.

00:53:42.010 --> 00:53:44.020
And you set the translate.

00:53:44.019 --> 00:53:45.130
It's in pixels there.

00:53:45.130 --> 00:53:49.829
Notice the px added to each.

00:53:49.829 --> 00:53:52.590
Same thing goes with gestures.

00:53:52.590 --> 00:53:58.970
When you get those gestures in, the user has scaled
and or rotated, you can listen for one or both.

00:53:58.969 --> 00:54:04.589
And again, I'm using get current scale and get
current rotation, because as you pick up your fingers

00:54:04.590 --> 00:54:10.940
and scale in you're going to want to track where the current
scale is, as well as the current rotation to get great UI.

00:54:10.940 --> 00:54:15.639
You set the WebKit transform both to scale and the rotation.

00:54:15.639 --> 00:54:22.859
Note with rotation you have to
add the DEG there for degrees.

00:54:22.860 --> 00:54:33.140
Okay. Brand new in iPhone 3.0 is web location
-- pardon me -- location awareness in web pages.

00:54:33.139 --> 00:54:37.829
What we use is the Geolocation JavaScript API.

00:54:37.829 --> 00:54:42.159
So this is a W3C editor's draft.

00:54:42.159 --> 00:54:46.359
It's also implemented by other browsers.

00:54:46.360 --> 00:54:50.430
So it's a draft standard that looks pretty good right now.

00:54:50.429 --> 00:54:57.669
So you can read all about this spec
at this URL here, at the W3 web site.

00:54:57.670 --> 00:55:02.550
Basically, it's an asynchronous location API.

00:55:02.550 --> 00:55:07.090
You make a request to Geolocation for the user's location,

00:55:07.090 --> 00:55:12.750
and at some point in the future your callback will
be called, and you will be told their location

00:55:12.750 --> 00:55:14.820
and if available, their speed and heading.

00:55:14.820 --> 00:55:18.320
When you define here that speed
is of course where you're going.

00:55:18.320 --> 00:55:21.630
Heading is where you're going and not where you're looking.

00:55:21.630 --> 00:55:25.119
So it's not a compass.

00:55:25.119 --> 00:55:27.779
How do you access Geolocation?

00:55:27.780 --> 00:55:35.190
Well, it's an object attached to the
navigator object, and being a good programmer,

00:55:35.190 --> 00:55:38.300
you always want to make sure it's there before you proceed.

00:55:38.300 --> 00:55:41.300
But on iPhone, it's always there.

00:55:41.300 --> 00:55:44.860
I should say on iPhone 3.0 it's always there.

00:55:44.860 --> 00:55:48.010
And you could get a one-shot position.

00:55:48.010 --> 00:55:50.540
You could ask where am I?

00:55:50.539 --> 00:55:54.779
It's a function called get current position.

00:55:54.780 --> 00:56:01.580
And when you pass is a position callback,
because this API Geolocation API is asynchronous.

00:56:01.579 --> 00:56:06.509
You need to pass a function to be
called once it knows a location.

00:56:06.510 --> 00:56:08.840
You can also observe the position.

00:56:08.840 --> 00:56:15.500
You could see how in Paul's demo the location kind
of popped around as we determined where we were.

00:56:15.500 --> 00:56:21.530
He was watching -- that code watches the
position, because it can change over time.

00:56:21.530 --> 00:56:24.980
So it's a function called watch position.

00:56:24.980 --> 00:56:27.510
It too takes a position callback.

00:56:27.510 --> 00:56:30.880
And it returns a watch ID.

00:56:30.880 --> 00:56:33.930
The watch ID is important because at
some point in the future you're going

00:56:33.929 --> 00:56:37.929
to want to stop watching the user's location.

00:56:37.929 --> 00:56:41.099
And with that, you use clear watch.

00:56:41.099 --> 00:56:47.529
And you pass it that watch ID, which you
got returned from the watch position API.

00:56:47.530 --> 00:56:53.580
So I said I'd get back to these position callbacks.

00:56:53.579 --> 00:56:59.079
When you get a position, you get an object called position.

00:56:59.079 --> 00:57:02.569
And it has several properties on it.

00:57:02.570 --> 00:57:04.870
First property that we'll talk about is the time stamp.

00:57:04.869 --> 00:57:06.589
When was this position obtained.

00:57:06.590 --> 00:57:14.220
And this is because, which I'll get to in a little
bit, you may get older positions if you so desire.

00:57:14.219 --> 00:57:17.500
We're in a position callback.

00:57:17.500 --> 00:57:23.929
Obviously, the Geolocation API knows where you
are, so location is specified with latitude

00:57:23.929 --> 00:57:27.139
and longitude, which I'm sure you're familiar with.

00:57:27.139 --> 00:57:30.679
They're specified in decimal degrees.

00:57:30.679 --> 00:57:39.419
And they have an accuracy in meters, so
you know about how close that location is.

00:57:39.420 --> 00:57:45.230
If it's available, the -- oh, I forget to mention something.

00:57:45.230 --> 00:57:50.539
The -- all these positions are on the
coords object, which are in the position.

00:57:50.539 --> 00:57:52.659
You can see that I have position.

00:57:52.659 --> 00:57:56.929
coords. This is how the API is specified.

00:57:56.929 --> 00:58:01.179
So the coords property contains the location.

00:58:01.179 --> 00:58:04.469
The position contains the time stamp and the coordinates.

00:58:04.469 --> 00:58:06.199
It's a little confusing.

00:58:06.199 --> 00:58:16.429
So if it's available, the coords will also
contain the altitude, which is in meters.

00:58:16.429 --> 00:58:18.250
And has an accuracy.

00:58:18.250 --> 00:58:26.190
The altitude may not be available because of the iPhone
you're using may not be able to support that feature,

00:58:26.190 --> 00:58:29.760
or it may not be able to tell you
at the time the position is known.

00:58:29.760 --> 00:58:33.880
And so you should program knowing
that these may be undefined.

00:58:33.880 --> 00:58:37.470
They're JavaScript objects, so
undefined could mean different things.

00:58:37.469 --> 00:58:39.750
But they're basically not defined.

00:58:39.750 --> 00:58:43.070
Same goes with speed and heading.

00:58:43.070 --> 00:58:47.380
Speed is in meters per second and your
heading is in degrees from true north.

00:58:47.380 --> 00:58:51.309
And again, heading is where you're
going, not where you're looking.

00:58:51.309 --> 00:58:53.219
That's a compass.

00:58:53.219 --> 00:58:56.359
So these may also not be available.

00:58:56.360 --> 00:58:58.710
You should program being aware of that.

00:58:58.710 --> 00:59:09.300
For example, I found in my iPhone 3.0 tests that the
speed and heading aren't known the first few times.

00:59:09.300 --> 00:59:11.880
This is why watch position is a great API.

00:59:11.880 --> 00:59:18.809
As it -- as the location services on iPhone learn
more about where you are, things become more accurate,

00:59:18.809 --> 00:59:22.750
as well as knowing your speed and heading.

00:59:22.750 --> 00:59:27.980
So we have the position.

00:59:27.980 --> 00:59:33.309
Something can go wrong, so of course
there's also an error callback.

00:59:33.309 --> 00:59:35.889
It's optional, but I highly suggest you implement it.

00:59:35.889 --> 00:59:41.879
It will give you a way to give better
user feed back for your web app users.

00:59:41.880 --> 00:59:43.130
Here's an error callback.

00:59:43.130 --> 00:59:45.880
It receives an error object.

00:59:45.880 --> 00:59:52.660
The error object has a property called code,
which is obviously specifying the error.

00:59:52.659 --> 00:59:54.009
Permission denied.

00:59:54.010 --> 01:00:00.040
This is that dialogue, because Paul had already
given permission to the app where the user is --

01:00:00.039 --> 01:00:08.029
can deny or allow or don't allow, approve,
I'm not sure the wording right at this moment.

01:00:08.030 --> 01:00:11.590
Giving the user sharing his location,
his or her location with your app.

01:00:11.590 --> 01:00:12.530
If the user says no,

01:00:12.530 --> 01:00:15.370
you'll get a permission denied error.

01:00:15.369 --> 01:00:21.559
And you could give -- you could change your UI to indicate
to them what great features they're missing out on

01:00:21.559 --> 01:00:25.299
by denying that -- denying location services.

01:00:25.300 --> 01:00:26.860
Position unavailable.

01:00:26.860 --> 01:00:29.789
Paul showed it running under airplane mode.

01:00:29.789 --> 01:00:34.099
The way location services work is
aggregating the cell data if available,

01:00:34.099 --> 01:00:38.170
the Wi-Fi data if available, and the GPS data if available.

01:00:38.170 --> 01:00:45.190
If all the radios are off in airplane mode, none of
that data is available, but Geolocation can work.

01:00:45.190 --> 01:00:48.630
In those cases, you'll get a position unavailable error.

01:00:48.630 --> 01:00:53.510
This I'll explain the details of in a moment.

01:00:53.510 --> 01:01:00.040
But there's an option you could tell Geolocation,
please give me a location within this amount of time.

01:01:00.039 --> 01:01:05.269
So should that time expire before you have
a location you'll get a time out error.

01:01:05.269 --> 01:01:09.320
And everyone's favorite, unknown error.

01:01:09.320 --> 01:01:13.360
Something happened that isn't one of the above three Errors.

01:01:13.360 --> 01:01:18.500
For those cases, there's a property
on the error object called message.

01:01:18.500 --> 01:01:21.159
That's great for development debugging.

01:01:21.159 --> 01:01:28.719
The strings shouldn't be shown to users according to the
Geolocation spec, but it's really useful in debugging.

01:01:28.719 --> 01:01:32.019
So I just alluded to it.

01:01:32.019 --> 01:01:37.960
We have the position callback, the error
callback, and of course some options.

01:01:37.960 --> 01:01:43.429
How do you specify some more details
on how Geolocation should work.

01:01:43.429 --> 01:01:48.309
It is of course a JavaScript object,
which is properties and values.

01:01:48.309 --> 01:01:50.909
So here's one way you could specify it.

01:01:50.909 --> 01:01:57.679
The first property I'll go to --
go into -- is enable high accuracy.

01:01:57.679 --> 01:02:04.879
This is a hint to Geolocation how
it should try to obtain data.

01:02:04.880 --> 01:02:10.700
Basically, on discussion on the specification list,
it implies that you're interested in using GPS.

01:02:10.699 --> 01:02:18.409
It also implies that you know you are going
to try to use more power on the device.

01:02:18.409 --> 01:02:27.119
So if you say false, you're saying -- you're indicating
that you're not so interested in high accuracy.

01:02:27.119 --> 01:02:29.639
You say true, you are.

01:02:29.639 --> 01:02:30.259
The time out.

01:02:30.260 --> 01:02:31.840
This is the error.

01:02:31.840 --> 01:02:34.809
You specify the time out in milliseconds.

01:02:34.809 --> 01:02:40.179
This is the time you're willing to
wait to get a position callback.

01:02:40.179 --> 01:02:44.429
So should that time exceed, you'll
get the error callback of time out.

01:02:44.429 --> 01:02:49.460
So if you specify a time out option,
you should have an error callback.

01:02:49.460 --> 01:02:53.199
Lastly, there's a property called maximum age.

01:02:53.199 --> 01:02:54.989
Again, it's in milliseconds.

01:02:54.989 --> 01:02:58.739
It's very useful with the get current position callback.

01:02:58.739 --> 01:03:05.679
You could say I'm interested in a location, but I
don't care, it's fine with me if it's an hour old.

01:03:05.679 --> 01:03:14.960
This way you're going to use very low power, and you
may only be interested in something that specific.

01:03:14.960 --> 01:03:18.090
So here are my best practice slides for Geolocation.

01:03:18.090 --> 01:03:18.559
Number one.

01:03:18.559 --> 01:03:19.909
We have a big battery there.

01:03:19.909 --> 01:03:22.670
Because you should mind battery life.

01:03:22.670 --> 01:03:29.720
It could fire up all three radios, location services can
use more battery than just browsing a regular web page.

01:03:29.719 --> 01:03:32.789
So be very aware of that.

01:03:32.789 --> 01:03:38.889
When you use get current position, basically what
you're saying is I'm interested in my opinion,

01:03:38.889 --> 01:03:41.900
you're interested in getting a quick position.

01:03:41.900 --> 01:03:49.900
And maybe the last position known, which may
not be your current location, is sufficient.

01:03:49.900 --> 01:03:54.829
So you could use something like
position options maximum age there.

01:03:54.829 --> 01:04:00.099
However, there may be other cases
where you want more accuracy.

01:04:00.099 --> 01:04:02.029
And I'm going to reiterate.

01:04:02.030 --> 01:04:05.810
You should mind the battery life, especially with this API.

01:04:05.809 --> 01:04:08.250
Watch position.

01:04:08.250 --> 01:04:11.559
This one you could watch yourself move around on a map.

01:04:11.559 --> 01:04:16.969
This little pulsing blue circle, it
could get smaller as its more accurate.

01:04:16.969 --> 01:04:22.039
Things that you can do with watch position is
give great user feed back in your web application

01:04:22.039 --> 01:04:26.769
as to what the user's location is
doing with respect to your app.

01:04:26.769 --> 01:04:34.269
As well as -- as each part of the
location services on iPhone gets a fix

01:04:34.269 --> 01:04:37.269
on your position, it generally gets more accurate.

01:04:37.269 --> 01:04:42.579
You have cell phone range, you have
Wi-Fi range, then you have GPS range.

01:04:42.579 --> 01:04:45.849
And you now, again, that only works if you're outside.

01:04:45.849 --> 01:04:51.980
So there's all sorts of variance of
accuracy that will change over time.

01:04:51.980 --> 01:04:55.090
I like that feed back for user interface.

01:04:55.090 --> 01:04:58.850
I think you should use standard Java -- pardon me --

01:04:58.849 --> 01:05:03.610
I think you should use standard JavaScript timers
rather than the timer in the position options.

01:05:03.610 --> 01:05:06.890
You're all used to JavaScript timers, why not use them.

01:05:06.889 --> 01:05:14.440
And in that case, what you're going to need to do is when
that timer is exceeded, you should stop watching position.

01:05:14.440 --> 01:05:18.710
You should always be aware when you're watching
position so you can stop it at some point.

01:05:18.710 --> 01:05:24.010
You may want to stop it when the desired accuracy
that's applicable to your application has been reached,

01:05:24.010 --> 01:05:29.040
when the time out has been exceeded, when
an error has occurred, or in Paul's case,

01:05:29.039 --> 01:05:33.519
with the session app, we go from landscape back to portrait.

01:05:33.519 --> 01:05:35.300
When we're in portrait, we're just looking at schedules.

01:05:35.300 --> 01:05:37.519
We're not interested in where the user is.

01:05:37.519 --> 01:05:42.130
I just talked about a lot.

01:05:42.130 --> 01:05:47.840
Adding advanced features using the JavaScript
APIs on iPhone, device orientation changes,

01:05:47.840 --> 01:05:51.170
how do you learn the device changed orientation.

01:05:51.170 --> 01:05:53.440
Multi-Touch support.

01:05:53.440 --> 01:05:54.619
Location awareness.

01:05:54.619 --> 01:05:57.789
Brand new in iPhone 3.0.

01:05:57.789 --> 01:05:59.960
So today what did you learn?

01:05:59.960 --> 01:06:04.079
You learned first of all how to
optimize your web site for an iPhone.

01:06:04.079 --> 01:06:08.170
Because in the end a web application is a single web page.

01:06:08.170 --> 01:06:12.369
And for that iPhone web application,
you made it full screen.

01:06:12.369 --> 01:06:18.960
You have offline data, so it works when you
may be in airplane mode or in the Bart Tunnel.

01:06:18.960 --> 01:06:23.610
And you have sophisticated graphics with CSS visual effects.

01:06:23.610 --> 01:06:29.170
So you could get that great interactive experience
with iPhone that you and your users love.

01:06:29.170 --> 01:06:31.349
Both of which give you great performance.

01:06:31.349 --> 01:06:38.309
And as I just went through, you get
advanced features, like orientation changes,

01:06:38.309 --> 01:06:42.590
DOM Touch events, and again, Geolocation.

01:06:42.590 --> 01:06:48.410
In summary, it's really easy to build
iPhone applications with web technology.

01:06:48.409 --> 01:06:51.929
Because you already have a web site,
and it already works on iPhone.

01:06:51.929 --> 01:06:57.699
Then you could just customize it and
make a great iPhone web application

01:06:57.699 --> 01:07:04.699
with just a few more lines of JavaScript, CSS, and HTML.

01:07:04.699 --> 01:07:08.109
We already have a bunch of great
web applications for iPhone,

01:07:08.110 --> 01:07:14.510
and we look forward to seeing yours on apple.com/webapps.

01:07:14.510 --> 01:07:19.990
So for more information you can contact Vicki, Mark Malone,

01:07:19.989 --> 01:07:25.469
and of course all this is documented
at developer.apple.com/Safari.