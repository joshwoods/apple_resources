WEBVTT

00:00:13.130 --> 00:00:15.360
>> Welcome to Accessing the iPod Library.

00:00:15.359 --> 00:00:20.640
I'm Lucas Newman, I'm a member of the iPhone Software
Engineering Team, and today I'm going to talk

00:00:20.640 --> 00:00:24.519
about how you can provide the functionality of the iPod

00:00:24.519 --> 00:00:31.320
to your application using the new
Media Player APIs in iPhone OS 3.0.

00:00:31.320 --> 00:00:36.149
And some of you out there might be creating
the new application that's tailored explicitly

00:00:36.149 --> 00:00:37.809
for the new APIs in 3.0.

00:00:37.810 --> 00:00:43.469
So I'm going to show you how quickly and easily
you can add media integration to your App.

00:00:43.469 --> 00:00:47.679
Others of you out there maybe you already have an
App on the App Store and you want to enhance it

00:00:47.679 --> 00:00:50.009
to provide a better user experience for your users.

00:00:50.009 --> 00:00:52.679
So I'm going to show you how you can add these features

00:00:52.679 --> 00:00:56.780
and also what affect it will have
on the rest of your application.

00:00:56.780 --> 00:01:00.070
So, let's talk about what we're
going to learn in this session.

00:01:00.070 --> 00:01:06.200
There's three main things: The first thing is I'm going
to show you how to use the prebuilt UI pieces provided

00:01:06.200 --> 00:01:11.450
in the media player framework to allow your users to
choose media from directly inside the application.

00:01:11.450 --> 00:01:17.060
Second, I'm going to show you how you
can programmatically search for media

00:01:17.060 --> 00:01:20.740
in the iPod library using the media query interfaces.

00:01:20.739 --> 00:01:27.069
And third, I'm going to show you how you can actually
start audio playback from directly inside your application.

00:01:27.069 --> 00:01:35.219
And you can play music, audio podcasts
and audio books through the iPod.

00:01:35.219 --> 00:01:38.310
In addition to what we're going to learn, is a couple
of things I'm not going to cover in this session

00:01:38.310 --> 00:01:42.650
and clearly don't support in the media player
framework so I'm just going to get them out of the way.

00:01:42.650 --> 00:01:48.020
So, the first thing is you can't actually modify
the iPod library from your application right now.

00:01:48.019 --> 00:01:55.579
It's currently read-only and the second thing is we're not
going to provide access to the raw audio data at this time.

00:01:55.579 --> 00:02:01.450
Now I know a lot of you want these features and as
always we encourage you to provide feedback to us.

00:02:01.450 --> 00:02:07.129
You can go to bugreport.apple.com and tell us what's
important to you in your applications so we can take

00:02:07.129 --> 00:02:11.219
that into account as we evolve this API in the future.

00:02:11.219 --> 00:02:17.449
So, with all that out of the way let's look at an
overview of the new media player framework APIs.

00:02:17.449 --> 00:02:24.269
There's three main parts here: The first is
the iPod Library, and the iPod Library is

00:02:24.270 --> 00:02:27.090
where all the media is stored on the device.

00:02:27.090 --> 00:02:36.670
To get media out of the iPod Library, we can use
the media picker and the media query interfaces.

00:02:36.669 --> 00:02:42.179
And then once we add media in our application, you can
use the music player to actually start media playback.

00:02:42.180 --> 00:02:47.849
So first let's talk about the iPod Library.

00:02:47.849 --> 00:02:50.639
What's actually in the iPod Library?

00:02:50.639 --> 00:02:55.879
Well, the most basic item in the iPod
Library is what we call a media item.

00:02:55.879 --> 00:03:02.000
This represents a single song, audio
podcast or audio book on the device.

00:03:02.000 --> 00:03:07.229
In addition to media items, there's also
what we call the media item collection;

00:03:07.229 --> 00:03:11.250
and this is simply a group of related media items.

00:03:11.250 --> 00:03:15.139
There's also a special kind of item
collection and that's called a playlist.

00:03:15.139 --> 00:03:20.809
This is just like a playlist that you create
in the iTunes application on the desktop.

00:03:20.810 --> 00:03:23.210
So let's talk about MediaItems first.

00:03:23.210 --> 00:03:25.900
What's the anatomy of a MediaItem?

00:03:25.900 --> 00:03:31.379
In addition to just the audio data, there's also
some metadata associated with the MediaItem.

00:03:31.379 --> 00:03:38.060
This includes things like the media type-- maybe there's
an artist, a title and an album associated with MediaItem.

00:03:38.060 --> 00:03:39.280
There could even be some art work.

00:03:39.280 --> 00:03:42.469
There are also many more metadata properties available.

00:03:42.469 --> 00:03:45.439
I'm not going to cover them all today
but you can check out the documentations

00:03:45.439 --> 00:03:47.800
in the headers for a comprehensive listing.

00:03:47.800 --> 00:03:53.310
So, we have all this metadata associated with the MediaItem.

00:03:53.310 --> 00:03:55.340
How are we going to get it out?

00:03:55.340 --> 00:04:01.080
So we've got this MPMediaItem class for you and there's
only one method you need to know in order to get metadata

00:04:01.080 --> 00:04:04.770
out of the MediaItem-- that's the valueForProperty method.

00:04:04.770 --> 00:04:08.210
So all you have to do is ask the
MediaItem's valueForProperty,

00:04:08.210 --> 00:04:11.800
and we provided a set of predefined
string constants for you.

00:04:11.800 --> 00:04:16.930
And you can use any of these string constants to get the
specific metadata property that you're interested in.

00:04:16.930 --> 00:04:21.319
As you'll notice, all of these constants have a common
prefix, so they're really simple to code complete in Xcode.

00:04:21.319 --> 00:04:24.680
This is similar to many other Cocoa
Touch Frameworks that you've been using.

00:04:24.680 --> 00:04:30.959
So let's look at a quick example of
getting metadata from a MediaItem.

00:04:30.959 --> 00:04:33.259
Here I want to get the title property of a MediaItem.

00:04:33.259 --> 00:04:37.550
So all I have to do is ask the MediaItem
for its valueForProperty and then specify it

00:04:37.550 --> 00:04:44.230
as Title property string constant, and what I
get back is an NSString representing the title.

00:04:44.230 --> 00:04:47.110
Note that you'll always get an object
back from the valueForProperty method.

00:04:47.110 --> 00:04:51.840
So, let me talk about artwork for just a minute.

00:04:51.839 --> 00:04:56.729
Artwork's a little bit special when it comes to MediaItems.

00:04:56.730 --> 00:04:59.150
When you ask for the value of the artwork property,

00:04:59.149 --> 00:05:03.939
what you actually get back is an
instance of the MPMediaItemArtwork class.

00:05:03.939 --> 00:05:09.379
And from this instance, you can actually get a
UIImage of the specific size that you want to use.

00:05:09.379 --> 00:05:15.439
And the reason we've done is, is because it's actually
a little bit more efficient for us to give you an image

00:05:15.439 --> 00:05:19.529
of the actual size that you want to use instead
of using the full size image every time.

00:05:19.529 --> 00:05:25.639
So what you want to do is make sure to always specify a size
of the artwork that you're going to use in your application.

00:05:25.639 --> 00:05:33.180
So that was MediaItems, the most
basic item in the iPod Library.

00:05:33.180 --> 00:05:37.949
Let's talk about the other two things--
the ItemCollection and the Playlist.

00:05:37.949 --> 00:05:43.509
To visualize itemCollections, I want you to
think about the albums listing in the iPod App.

00:05:43.509 --> 00:05:47.029
Each of these albums is itself a MediaItemCollection.

00:05:47.029 --> 00:05:53.549
The items are all related by the
unique artists that they have.

00:05:53.550 --> 00:05:57.079
The items inside are what we call iTunes ordering.

00:05:57.079 --> 00:06:01.979
This is sort of a natural order that arises when
you're using the iTunes application on the desktop

00:06:01.980 --> 00:06:06.410
or in the iPod application on the device.

00:06:06.410 --> 00:06:11.850
Once you have a collection, to access the items
all you have to do is ask for its items property,

00:06:11.850 --> 00:06:15.840
and you get back an array of MPMediaItems
in this iTunes ordering.

00:06:15.839 --> 00:06:21.389
There is also some extra metadata
associated with the MediaItem Collection.

00:06:21.389 --> 00:06:28.120
You can get information like the number of MediaItems
and all the contained types in the collection

00:06:28.120 --> 00:06:31.649
without actually iterating through all the
items in the collection for performance.

00:06:31.649 --> 00:06:40.189
Now, let's say you want to present information
about a collection in your user interface.

00:06:40.189 --> 00:06:42.779
How are you going to do this?

00:06:42.779 --> 00:06:47.179
What you want to do is use the
representative item for the collection.

00:06:47.180 --> 00:06:51.069
And this is just an MPMediaItem that comes
out of the collection that you can use

00:06:51.069 --> 00:06:54.050
for common properties in your user interface.

00:06:54.050 --> 00:06:58.689
So, for instance if you wanted to
get the artist of a collection,

00:06:58.689 --> 00:07:02.949
that all the items in the collection have the same
artist, so you want to access that information.

00:07:02.949 --> 00:07:06.149
All you have to do is ask the collection
for its representative item,

00:07:06.149 --> 00:07:12.979
and then once you have the representative item simply ask
the valueForProperty and specify the artist's property,

00:07:12.980 --> 00:07:19.660
and you can use that for instance in
your tableview of all the artists.

00:07:19.660 --> 00:07:23.470
Now, you want to make sure when you're asking
the representative item for a property,

00:07:23.470 --> 00:07:26.010
that it actually makes sense to collection.

00:07:26.009 --> 00:07:31.589
So if you've got a MediaItem collection where all the
items have a unique genre but may have different artists,

00:07:31.589 --> 00:07:34.429
it doesn't necessarily make sense
to ask for the artist property.

00:07:34.430 --> 00:07:42.040
So, you just want to always make sure that the property
you're asking for is actually applicable to the question.

00:07:42.040 --> 00:07:44.860
All right so MediaItemCollections-- pretty simple.

00:07:44.860 --> 00:07:46.330
Let's talk about playlists.

00:07:46.329 --> 00:07:48.659
As I mentioned it's a special type of ItemCollection.

00:07:48.660 --> 00:07:51.520
It's just simply a subclass of MediaItemCollection.

00:07:51.519 --> 00:07:58.209
It also has some extra metadata; this includes things like
the name of the playlist and any attributes it has such as

00:07:58.209 --> 00:08:01.149
if it's a genius playlist or a smart playlist.

00:08:01.149 --> 00:08:10.079
OK. So we've talked about the MediaItem, the
MediaItemCollection and the Media Playlist.

00:08:10.079 --> 00:08:12.579
Well, there's something that all
these classes have in common--

00:08:12.579 --> 00:08:15.620
and that's they all confirm to the NSCoding Protocol.

00:08:15.620 --> 00:08:21.639
So, if in your application you have a MediaItem
or an ItemCollection and you want to save this

00:08:21.639 --> 00:08:28.000
to your application preferences so you can restore it
at a later time, all you have to do is use an archiver

00:08:28.000 --> 00:08:33.759
such as the NSKeyedArchiver that impliments the NSCoding
protocol, and in this case I'm just going to ask

00:08:33.759 --> 00:08:38.129
for the archivedDataWithRootObject and them
all I have to do is provide my MediaItem.

00:08:38.129 --> 00:08:43.939
And I get back an NSData representation which
I can then store in my application preferences,

00:08:43.940 --> 00:08:49.630
and then recreate the MediaItem later
using the NSKeyedUnarchiver for instance.

00:08:53.029 --> 00:08:59.199
I should also mention that MediaItems and playlists have
a unique, persistent identifier associated with them.

00:08:59.200 --> 00:09:05.020
So you can use media queries to actually locate these
items in the iPod library using their PersistentID.

00:09:05.019 --> 00:09:10.179
I'll cover media queries in just a few moments.

00:09:10.179 --> 00:09:12.099
So, that was the iPod Library.

00:09:12.100 --> 00:09:15.840
We know what's inside the iPod Library,
it's the MediaItems and the ItemCollections.

00:09:15.840 --> 00:09:20.180
So how are we going to get this information
out of the iPod Library and into our App?

00:09:20.179 --> 00:09:21.919
Well there's two ways to do this.

00:09:21.919 --> 00:09:23.709
The first way is the MediaPicker.

00:09:23.710 --> 00:09:29.480
And the MediaPicker is simply a
UIViewController subclass for picking media items.

00:09:29.480 --> 00:09:33.200
And it comes in two different forms.

00:09:33.200 --> 00:09:36.420
The first form is the single item
picker and this allows your user

00:09:36.419 --> 00:09:40.149
to just choose one item and then immediately dismiss.

00:09:40.149 --> 00:09:45.079
The other is the multiple item picker in case you
want your user to choose a playlist for instance.

00:09:45.080 --> 00:09:49.210
So how are you going to create an MPMediaPickerController?

00:09:49.210 --> 00:09:50.019
Well it's super simple.

00:09:50.019 --> 00:09:52.269
It's just like any other UIView Controller.

00:09:52.269 --> 00:09:56.120
All you have to do is just alloc init a new picker.

00:09:56.120 --> 00:09:59.750
We're going to set ourselves as
the delegate of the new picker

00:09:59.750 --> 00:10:03.090
so we can get delegate callbacks
when the user takes some action.

00:10:03.090 --> 00:10:06.070
I'll discuss the delegate callbacks in just a moment here.

00:10:06.070 --> 00:10:10.170
And then just like any other viewController in
the application I'm going to present the picker

00:10:10.169 --> 00:10:12.929
as a ModalViewController on top
of an existing viewController.

00:10:12.929 --> 00:10:18.509
So what does this actually look like in an App?

00:10:18.509 --> 00:10:23.799
So I'm playing a game here-- I've got Texas Hold 'Em
and I want to allow my user in my App to choose a song

00:10:23.799 --> 00:10:26.609
so they can actually listen to
something while they're playing.

00:10:26.610 --> 00:10:32.850
So I bring up the MediaPicker here and once they've
hit the cancel button or they've picked some media,

00:10:32.850 --> 00:10:37.290
we're going to dismiss it and look at one of
the delegate callbacks for the MediaPicker.

00:10:37.289 --> 00:10:42.399
The first, is the MediaPickerdidPickMediaItems.

00:10:42.399 --> 00:10:49.959
And what this returns is an ItemCollection that
represents all the items that the user picked.

00:10:49.960 --> 00:10:54.940
Alternately, if the user didn't pick anything
or they just immediately hit the cancel button,

00:10:54.940 --> 00:10:59.080
you'll get the mediaPickerDidCancel delegate callback.

00:10:59.080 --> 00:11:05.710
Now you should note that you always get an
ItemCollection if you're using the single item's title.

00:11:05.710 --> 00:11:10.800
So, if you want to get that single item back from the
delegate callback, all you have to do is ask that collection

00:11:10.799 --> 00:11:13.329
for its items array which is only
going to have one object in it,

00:11:13.330 --> 00:11:20.950
and then I'm going to use the NSArray method's last
object here to just get that single item out of it.

00:11:20.950 --> 00:11:25.390
So, with all that, I'm going to have Henry Mason come up.

00:11:25.389 --> 00:11:29.559
He's going to show you a demonstration of
using the MediaPicker in an application.

00:11:29.559 --> 00:11:36.489
>> So I've been working on a little
App and I'm calling it Post a Song.

00:11:36.490 --> 00:11:42.539
And the idea of this application is that it allows
you users to pick a song out of their iPod Library,

00:11:42.539 --> 00:11:45.649
and then send the name, artist and
artwork of that song to a friend

00:11:45.649 --> 00:11:49.149
so they can say hey check out this cool new song I found.

00:11:49.149 --> 00:11:51.929
So let's take a look at how it works so far.

00:11:51.929 --> 00:12:03.019
It's got a couple of buttons and when we tap the mail
button we use the new iPhone OS 3.0 mail compose API,

00:12:03.019 --> 00:12:07.269
and we say check out this super cool song, No by No.

00:12:07.269 --> 00:12:11.110
Well that's not a very cool song-- I can tell you.

00:12:11.110 --> 00:12:13.750
So let's take a look at our code and see
how we can make this a little cooler.

00:12:13.750 --> 00:12:15.919
So Post a Song is a pretty simple little application.

00:12:15.919 --> 00:12:21.709
It's got one root view controller, it's got
some instance variables to store an image view

00:12:21.710 --> 00:12:24.180
and some buttons, and it's got some actions.

00:12:24.179 --> 00:12:26.689
I'd like to point out the big feature is this picked item.

00:12:26.690 --> 00:12:34.590
This is an MPMediaItem that we store as an instance variable
in our root view controller, and when the user presses

00:12:34.590 --> 00:12:44.110
that envelope button, we get the title and artist out of the
picked item using valueForProperty, title and then artists.

00:12:44.110 --> 00:12:47.680
And then we compose a little string
and set that as a message body.

00:12:47.679 --> 00:12:52.519
And then to create the album art, we get the
image out of the album image view and make a JPEG

00:12:52.519 --> 00:12:55.750
out of it; and the we present a mail composition.

00:12:55.750 --> 00:13:02.039
But we're never actually setting picked
items to be anything so let's change that.

00:13:02.039 --> 00:13:07.579
So when the user presses that pick
button, let's create a MediaPicker.

00:13:07.580 --> 00:13:15.820
Now we don't really want to have people picking podcasts
or audio books so we use initWithMediaTypeswith media types

00:13:15.820 --> 00:13:22.270
so we can narrow the scope of items
that your users can pick to just music.

00:13:22.269 --> 00:13:26.629
We're setting ourselves to be the delegate
so the root view controller is now the delegate

00:13:26.629 --> 00:13:31.230
and then we'll present it as a ModalViewController.

00:13:31.230 --> 00:13:34.289
So let's see how that works on our device.

00:13:34.289 --> 00:13:39.649
All right well now we can pick and you'll
notice that the interface looks just like iPod

00:13:39.649 --> 00:13:42.139
so your users won't have to learn a whole new interface.

00:13:42.139 --> 00:13:44.919
It looks just like the UI they know and love.

00:13:44.919 --> 00:13:48.069
And you can browse by albums, artists, playlists.

00:13:48.070 --> 00:13:55.220
You'll also notice that audio books and audio podcasts
aren't listed because we specified a media type

00:13:55.220 --> 00:13:57.570
when we constructed our Picker Controller.

00:13:57.570 --> 00:14:02.280
You'll also notice that when we touch things
nothing happens; even when we cancel it stays up.

00:14:02.279 --> 00:14:08.539
And that's because we haven't implemented any of
the delegate methods that we need to implement

00:14:08.539 --> 00:14:13.929
to handle the user picking or canceling
to dismiss the controller.

00:14:13.929 --> 00:14:16.779
So first let's say the user picks something.

00:14:16.779 --> 00:14:21.679
The MediaPicker will call back to us with MediaPicker
didPickMediaItems that will give us a media collection.

00:14:21.679 --> 00:14:24.979
And we'll set our picked item to be the
representative item of that collection.

00:14:24.980 --> 00:14:28.779
We could also have used the last object
of the items array like Lucas did.

00:14:28.779 --> 00:14:33.809
And then when the user cancels, we'll
just dismiss the ModalViewController.

00:14:33.809 --> 00:14:41.459
We'll dismiss the ModalViewController in both cases but
when we just cancel we don't modify what the picked item is.

00:14:41.460 --> 00:14:45.040
So let's send that over.

00:14:45.039 --> 00:14:51.839
All right so now we can pick a song, and when
we mail it the artist and title of the song

00:14:51.840 --> 00:14:54.870
that we've picked is in the mail composition.

00:14:54.870 --> 00:15:00.080
But this isn't very nice because we
haven't really updated the user interface,

00:15:00.080 --> 00:15:04.910
there's no feedback that the user actually picked something,
although we know internally we know we've set a picked item.

00:15:04.909 --> 00:15:06.240
So let's change that.

00:15:06.240 --> 00:15:14.289
So in our setPickedItem method, instead of just updating
the iBar we're going to do a little bit of work.

00:15:14.289 --> 00:15:20.449
First we're going to set our navigation title
of the navigation item of the review controller

00:15:20.450 --> 00:15:23.960
to be the title of the item that was picked.

00:15:23.960 --> 00:15:29.129
Secondly, we're going to get the artwork out
of the picked item using the artwork property.

00:15:29.129 --> 00:15:36.129
And as Lucas said, the object that returned is a
special object called an MPMediaItemArtwork object.

00:15:36.129 --> 00:15:39.919
We need to get an image of representation
of that using imageWithSize.

00:15:39.919 --> 00:15:46.209
And we'll use the size of the bounds of the image
view that we set up using Interface Builder.

00:15:46.210 --> 00:15:52.389
And then we'll set that image to be
the image of the album image view.

00:15:52.389 --> 00:15:56.350
And if we couldn't get an artwork image
because it wasn't available at the size

00:15:56.350 --> 00:16:00.990
or the track just didn't have any album artwork, we'll
use that empty album filler art we've been using.

00:16:00.990 --> 00:16:07.850
So now we can pick things and you can see now
the album artwork is updated and the title

00:16:07.850 --> 00:16:13.240
of the navigation item is updated, and since we're reading
the image out of the image view for the mail composition,

00:16:13.240 --> 00:16:17.190
you can see now the image that we get
and the mail compose view is updated.

00:16:17.190 --> 00:16:24.500
The problem is when I quit the App and
come back it's forgotten what I've picked;

00:16:24.500 --> 00:16:30.110
and that's because the picked item is reset to nil
every time we construct a root view controller.

00:16:30.110 --> 00:16:34.399
So let's save the item that we picked out to preferences.

00:16:34.399 --> 00:16:41.879
So when we send our picked item outside of just updating
the UI, let's archive that item using a KeyedArchiver,

00:16:41.879 --> 00:16:46.600
and then set the archive data as
a standard user default key.

00:16:46.600 --> 00:16:52.570
And then when our view loads, we'll do that backwards.

00:16:52.570 --> 00:16:59.860
We'll get the data for that key, picked item, if we've
got it we will unarchive it using an NSKeyedUnArchiver

00:16:59.860 --> 00:17:01.779
and then we'll set that to be our picked item.

00:17:01.779 --> 00:17:12.299
Now we can pick a song and then we can leave,
come back, and it's like we never left.

00:17:12.299 --> 00:17:20.000
So I'm going to give it back to Lucas to talk about another
way to get media items out of the user's iPod Library.

00:17:20.000 --> 00:17:20.390
>> All right.

00:17:20.390 --> 00:17:24.960
So we've talked about how you can let your
users take media using the MediaPicker.

00:17:24.960 --> 00:17:28.289
What if you want to get media out of
the iPod Library programmatically?

00:17:28.289 --> 00:17:31.490
The way you can do this is you can use a MediaQuery.

00:17:31.490 --> 00:17:37.259
An MPMediaQuery is an object that matches a
specific subset of items in the iPod Library.

00:17:37.259 --> 00:17:44.230
And the way it does this is it uses a set of what we
call MediaPredicates that match some specific criteria

00:17:44.230 --> 00:17:46.599
of items to determine which one to choose.

00:17:46.599 --> 00:17:52.689
So, how are we going to create an
MPMediaQuery in our application?

00:17:52.690 --> 00:17:56.830
Well, we provided a set of common queries for you already.

00:17:56.829 --> 00:18:01.539
These roughly correspond to the tabs in the iPod
application; so for instance if you just wanted

00:18:01.539 --> 00:18:07.569
to get all the songs in the device, you can use the
factory method songsQuery on the MPMediaQuery class.

00:18:07.569 --> 00:18:13.990
If you wanted to create your own query
and then refine it with media predicates,

00:18:13.990 --> 00:18:17.730
what you can do is just create one
using the standard alloc init method

00:18:17.730 --> 00:18:22.019
and then by default this query will
match all the items in the library.

00:18:22.019 --> 00:18:26.119
I'll show you how we can refine this query
with MediaPredicates in just a moment.

00:18:26.119 --> 00:18:30.859
So now that we've got a query, how are we
going to give the items that the query matches?

00:18:30.859 --> 00:18:34.449
Well, all you have to do is ask
the query for its items property.

00:18:34.450 --> 00:18:39.700
And this gives you back an array of
MPMedia items as you might expect.

00:18:39.700 --> 00:18:42.970
Now let's say you didn't just want the items.

00:18:42.970 --> 00:18:48.420
Instead you want the collections from
the query which is just all the items

00:18:48.420 --> 00:18:51.380
in the query but grouped by a specific property.

00:18:51.380 --> 00:18:56.100
So what I can do is I can set the
property that I want to group by.

00:18:56.099 --> 00:19:02.369
So in this case I want to group all the items by
the unique artists that I've found with the query;

00:19:02.369 --> 00:19:11.549
and then when I ask the query for its collections property,
what I get back is an NSArray of MPMediaItemCollections,

00:19:11.549 --> 00:19:14.289
and all these collections will have a unique artist.

00:19:14.289 --> 00:19:22.609
So, as I mentioned we can refine a
query using the MPMediaPredicate.

00:19:22.609 --> 00:19:26.349
And the base MPMediaPredicate class is actually abstract.

00:19:26.349 --> 00:19:31.319
What this means is you're not going to allocate it
directly; instead you're going to use one of the subclasses

00:19:31.319 --> 00:19:34.079
of MPMediaPredicate that we provided for you.

00:19:34.079 --> 00:19:37.699
This gives us a little bit of flexibility
to add more predicates in the future.

00:19:37.700 --> 00:19:44.110
Currently we provide one subclass for
you-- that's the MPMediaPropertyPredicate.

00:19:44.109 --> 00:19:52.339
And the MPMediaPropertyPredicate allows you to match
a specific property of a MediaItem to a specific item.

00:19:52.339 --> 00:19:58.099
So an example of this, here I'm going to create an
MPMediaPropertyPredicate and I use predicateWithValue,

00:19:58.099 --> 00:20:01.769
and I've chosen The Beets for the property artist.

00:20:01.769 --> 00:20:08.529
Once I've created this predicate, I simply add it
to my query, using the addFilterPredicate method.

00:20:08.529 --> 00:20:12.589
And now all the items that this query
matches will have the artist The Beets.

00:20:12.589 --> 00:20:16.319
So when I ask for that items property,
I get back an NSArray of MPMediaItems.

00:20:16.319 --> 00:20:24.319
And if I were to iterate through them and ask for the
artist property for each one it would always be The Beets.

00:20:24.319 --> 00:20:29.799
So there are a couple of things you should know
when you're using MediaItemsProperties to filter.

00:20:29.799 --> 00:20:34.009
The first is that not all properties can
actually be used to construct predicates.

00:20:34.009 --> 00:20:40.750
For instance, it doesn't really make sense to
filter all your items by the artwork property,

00:20:40.750 --> 00:20:45.390
but it does make sense to filter
by title or artist or album.

00:20:45.390 --> 00:20:49.420
The way you can find this out is you can
either check the headers of the documentation

00:20:49.420 --> 00:20:54.980
as each string definition metadata properties
will be annotated with this information,

00:20:54.980 --> 00:21:00.660
or you can check at runtime using the class
method canFilterbyProperty on the media item.

00:21:00.660 --> 00:21:05.120
And all you have to do is specify the property that you
wish to filter by and it will return you yes or no depending

00:21:05.119 --> 00:21:10.009
on whether this can be used to
create an MPMediaPropertyPredicate.

00:21:10.009 --> 00:21:14.589
There is also a couple of caveats associated
with using MPMediaPropertyPredicate.

00:21:14.589 --> 00:21:19.589
The first is that all the predicates are going to be
combined currently in the query using the AND operator.

00:21:19.589 --> 00:21:25.789
What this means is that as you add more predicates
your query is going to get more and more specific.

00:21:25.789 --> 00:21:31.289
Additionally, there can only be one
predicate for any given property in a query.

00:21:31.289 --> 00:21:38.279
So you want to make sure that you don't have a
bunch of different predicates in a single query

00:21:38.279 --> 00:21:43.049
for the artist property; otherwise your
behavior is undefined and you rely this

00:21:43.049 --> 00:21:45.970
in your application because it might break in the future.

00:21:45.970 --> 00:21:46.350
All right.

00:21:46.349 --> 00:21:50.159
So now you know now to use MPMedia queries, I'm
going to bring Henry up again and he's going

00:21:50.160 --> 00:21:52.040
to enhance the application we're building.

00:21:52.039 --> 00:21:57.259
>> All right so now our users can pick items
out of their library using interface they know,

00:21:57.259 --> 00:22:00.109
but what if we just want to have them pick some item?

00:22:00.109 --> 00:22:02.559
It would be really cool for you to
have this random button do something

00:22:02.559 --> 00:22:04.970
like randomly pick some song out of their library.

00:22:04.970 --> 00:22:06.490
Let's implement that now.

00:22:06.490 --> 00:22:10.410
If we just want to pick something,
we should probably just start simple.

00:22:10.410 --> 00:22:17.310
So, let's create a songs query and then get the items
for that query and then just pick the last object.

00:22:17.309 --> 00:22:28.599
So this will just take the query that matches every item
in the library that is a song, and then we get an array

00:22:28.599 --> 00:22:36.289
of items for that match thatquery, and then we'll set
our picked item to be the last item in that array.

00:22:36.289 --> 00:22:40.990
So let's try installing that on the device.

00:22:40.990 --> 00:22:46.069
All right well we have now picked some item, but if we
tap it again it's going to pick the same thing and that's

00:22:46.069 --> 00:22:52.039
because it isn't really random; we're just getting
the items as we said earlier in iPod order.

00:22:52.039 --> 00:22:58.299
So we're just going to get everything in like the songs list
in iPod and then we're picking the last one on that list.

00:22:58.299 --> 00:23:02.940
And that's listed alphabetically, so
that's not a very good random function.

00:23:02.940 --> 00:23:04.759
Let's change that a little bit.

00:23:04.759 --> 00:23:14.259
So the other thing in the last item, let's see if we have
some items and if we do let's just pick a random index

00:23:14.259 --> 00:23:20.500
into that items array and then
we'll make that our picked item.

00:23:20.500 --> 00:23:27.430
So let's see how well that works.

00:23:27.430 --> 00:23:33.610
Great. So now every time we press the random button,
we're creating a query for all the songs in the database,

00:23:33.609 --> 00:23:40.469
and then getting all the items out of that query
and then randomly indexing into that array.

00:23:40.470 --> 00:23:45.049
So this will give us a pretty good random
sampling of songs in the user's library.

00:23:45.049 --> 00:23:53.129
OK. Let's say we want to narrow our scope down a little bit.

00:23:53.130 --> 00:23:57.970
Like I don't want to match every song,
I just want to match all rock songs.

00:23:57.970 --> 00:24:03.130
So, we can do that by adding a MediaPredicate to our query.

00:24:03.130 --> 00:24:11.330
So, just to be extra safe, we'll ask MediaItem
if it's OK to filter by the property genre,

00:24:11.329 --> 00:24:17.240
and it if is we'll create a PropertyPredicate
with a value of rock for the property genre.

00:24:17.240 --> 00:24:26.740
So now this will only match items that are songs so
they have a music media type, and have a genre of rock.

00:24:26.740 --> 00:24:32.700
So, let's install that and see if that works.

00:24:32.700 --> 00:24:39.710
Great. So now we're matching random
rock songs in the database.

00:24:39.710 --> 00:24:44.750
Cool. All right I'll give it back to Lucas
to show how we can play some of this stuff.

00:24:44.750 --> 00:24:50.930
>> So now we know how to get media out of the iPod Library
using both the MediaPicker and the MediaQuery interfaces.

00:24:50.930 --> 00:24:55.560
So what if we actually want to start
music playback from within an application,

00:24:55.559 --> 00:24:58.679
the way you can do that is you can
use the MPMusicPlayerController

00:24:58.680 --> 00:25:02.160
and it comes in two different flavors.

00:25:02.160 --> 00:25:03.950
The first is the iPod Music Player.

00:25:03.950 --> 00:25:11.250
And when you're using the iPod Music Player it's exactly
like controlling the iPod application on the user's device.

00:25:11.250 --> 00:25:15.990
So you set up a queue of items and you start
playing, and even if the user presses the Home button

00:25:15.990 --> 00:25:20.150
and quits your application, music playback will continue.

00:25:20.150 --> 00:25:23.730
Additionally, if they go into the iPod
application, they'll see the music queue

00:25:23.730 --> 00:25:28.220
that you've set up that will be already playing.

00:25:28.220 --> 00:25:31.730
Alternately, you use the Application Music Player.

00:25:31.730 --> 00:25:35.059
And this is when you want to provide background music.

00:25:35.059 --> 00:25:39.960
For instance you have an immersive game and you just
want to play music in the context of your application.

00:25:39.960 --> 00:25:46.380
So this doesn't modify any state of the iPod application,
and when the user presses the Home button on the device

00:25:46.380 --> 00:25:52.590
and quits the application it will automatically
fade the music out as your application quits.

00:25:52.589 --> 00:25:58.589
So, how are we going to create an MPMusicPlayerController?

00:25:58.589 --> 00:26:01.250
Well first let's look at how we're going to set it up.

00:26:01.250 --> 00:26:06.349
There's two ways to set it up-- you can use the
setQueueWithQuery and provide a media query directly;

00:26:06.349 --> 00:26:10.929
or you can use the setQueueWithItemCollection
and you can provide the ItemCollection

00:26:10.930 --> 00:26:14.330
such as the one you got back from MediaPicker.

00:26:14.329 --> 00:26:21.069
Once you set up a queue for playback, all you have to do
is call Play on the music player and playback will start.

00:26:21.069 --> 00:26:24.899
You can also call Pause to stop
music just like you'd expect.

00:26:24.900 --> 00:26:32.509
So a quick example of this, in this case I'm going to use
the iPod Music Player because I actually want to start music

00:26:32.509 --> 00:26:38.160
on the user's behalf, and I'm going
to set up a queue with the songs query

00:26:38.160 --> 00:26:40.580
which just means play all the songs on the user's device.

00:26:40.579 --> 00:26:46.389
And then after that, all I have to do is call Play
and I've started playing all the songs in order.

00:26:46.390 --> 00:26:49.920
So just three lines of code-- pretty simple.

00:26:49.920 --> 00:26:53.220
Now what if you want a little bit
more control over playback?

00:26:53.220 --> 00:26:56.860
Well, there are a lot of knobs
you can twist in the music player.

00:26:56.859 --> 00:27:02.889
If you want to seek through the track, you can use
the currentPlaybackTime property; you can also seek,

00:27:02.890 --> 00:27:08.340
fast forward and rewind using the
beginSeekingForward and beginSeekingBackwards methods.

00:27:08.339 --> 00:27:13.929
Additionally, you can actually move through items in
the queue using skipToNextItem; skipToPreviousItem just

00:27:13.930 --> 00:27:19.529
like tapping the fast forward and
rewind buttons in the iPod App.

00:27:19.529 --> 00:27:24.579
Now let's say the user is already playing music
in the iPod Application and they launch your app;

00:27:24.579 --> 00:27:30.240
and your app wants to find out if something's already
playing because you want to take some action based on that.

00:27:30.240 --> 00:27:34.870
So what you can do is ask the music
player for its PlaybackState property.

00:27:34.869 --> 00:27:39.119
And this could be playing, it could
be stopped, it could be paused

00:27:39.119 --> 00:27:43.829
and maybe even the user has accepted a phone
call while they were listening to music.

00:27:43.829 --> 00:27:48.559
And so they're in the phone call and they launch you
app, so in that case the playback could be interrupted

00:27:48.559 --> 00:27:52.490
and when they end the phone call, the music
playback is going to automatically resume.

00:27:52.490 --> 00:27:57.680
Now in addition to just asking the
music player for PlaybackStateChanges,

00:27:57.680 --> 00:28:01.100
you might also want to watch for playbackStateNotifications.

00:28:01.099 --> 00:28:07.959
Because the user can do things like pull out the headphone
jack on the device and it will automatically stop playback.

00:28:07.960 --> 00:28:13.440
So to do this, you're just going to use the standard
NotificationCenter mechanism and foundation,

00:28:13.440 --> 00:28:18.990
and what you want to do is watch for the
MPMusicPlayerControllerPlaybackStateDidChangeNotification.

00:28:18.990 --> 00:28:23.370
In this case I've set it up so that
every time a playback state changes,

00:28:23.369 --> 00:28:27.739
I'm just going to hit the playbackStateChanged
method called on my object.

00:28:27.740 --> 00:28:33.009
And then once I've set up this notification, I just ask
the MusicPlayer to beginGeneratingPlaybackNotifications

00:28:33.009 --> 00:28:36.529
so I can actually start getting these delivered.

00:28:36.529 --> 00:28:41.829
Now just like we can ask if the music player
is playing, we can also ask it what's playing.

00:28:41.829 --> 00:28:47.759
So, I can use the nowPlayingItem property and simply
get a MediaItem back for the currently playing track.

00:28:47.759 --> 00:28:49.970
And just like I can watch

00:28:49.970 --> 00:28:54.380
for playbackStateChangeNotifications,
I can watch for nowPlayingItemChanges.

00:28:54.380 --> 00:28:57.550
This happens when the track ends and you go
into the next one, or maybe the user is skipping

00:28:57.549 --> 00:29:00.750
through songs using the iPod HUD
from double-tapping the Home button.

00:29:00.750 --> 00:29:06.559
So, now that we know how to use the music
player, we're going to have Henry come up,

00:29:06.559 --> 00:29:10.179
he's going to show you how we can preview
music in the application that we're building.

00:29:10.180 --> 00:29:14.779
>> So let's say I've picked the song, I
think I want to e-mail it to my friend

00:29:14.779 --> 00:29:17.319
but I kind of want to remember what it sounds like.

00:29:17.319 --> 00:29:20.579
What I want to do is switch back to iPod
and select the same song to listen to it.

00:29:20.579 --> 00:29:25.460
It would be really nice if I could just tap this
Play button and actually have it play the song.

00:29:25.460 --> 00:29:27.660
So, let's implement that now.

00:29:27.660 --> 00:29:31.690
Now the first thing you have to decide
is which music player do we want to use.

00:29:31.690 --> 00:29:39.809
Now if I'm in the middle of listening to say, a 500
song playlist and I get half way through and then I open

00:29:39.809 --> 00:29:44.720
up Post a Song and then Post a
Song blows away that playback queue

00:29:44.720 --> 00:29:49.240
and inserts just the one song that
I've been trying to preview.

00:29:49.240 --> 00:29:56.680
The probability of me uninstalling Post a Song and giving
it very, very low ratings on the App Store is pretty high.

00:29:56.680 --> 00:30:01.930
So let's use the application music player so we
don't mess with the user's iPod playback queue.

00:30:01.930 --> 00:30:10.279
All right so first of all when we set a PickMediaItem
and we change our UI, we're also going to set

00:30:10.279 --> 00:30:13.819
up the application music players playback queue.

00:30:13.819 --> 00:30:20.319
So, we're going to get our application music player, we'll
set our queue with ItemCollection and there's a little bit

00:30:20.319 --> 00:30:24.059
of code here but basically we're just
making the one item ItemCollection.

00:30:24.059 --> 00:30:27.179
And that one item is that one item
that we've picked-- the picked item.

00:30:27.180 --> 00:30:35.870
So now we've got a playback queue set up and
then when the user presses the Play/Pause button,

00:30:35.869 --> 00:30:40.939
we'll once again get our application music player, we'll
check its playback state, if it's playing we want it

00:30:40.940 --> 00:30:46.950
to pause; if it's in one of the other states so
Stop, Pause, Interrupted, we want to start playback.

00:30:46.950 --> 00:30:50.870
So we'll tell it to play.

00:30:50.869 --> 00:30:53.419
So, let's see what that sounds like.

00:30:53.420 --> 00:31:02.140
All right so now I can pick song and I can
start playback and I can pause playback.

00:31:02.140 --> 00:31:05.720
And I can play again and I can pause again.

00:31:05.720 --> 00:31:12.029
So, that works but you'll notice that while we're playing
the button still says Play even though touching it pauses.

00:31:12.029 --> 00:31:15.759
So we probably want to change that to be a Pause icon.

00:31:15.759 --> 00:31:25.690
So looking back at the code, it might be
tempting in the toggle Play state method,

00:31:25.690 --> 00:31:29.789
just change the title of the button
immediately after we call Play or Pause.

00:31:29.789 --> 00:31:31.799
That's not what you want to do though.

00:31:31.799 --> 00:31:37.500
Play and Pause are asynchronous so you're not actually
technically playing or pausing immediately after Play

00:31:37.500 --> 00:31:40.809
and Pause are sent, and there are
things outside of your control

00:31:40.809 --> 00:31:43.440
that can change the playback state
of your application music player.

00:31:43.440 --> 00:31:51.480
If the user unplugs headphones, if your song ends, there's
a whole bunch of things that can cause that to change.

00:31:51.480 --> 00:31:58.549
So the correct way to solve this problem is
to observe playbackStateChangeNotifications.

00:31:58.549 --> 00:32:00.269
Let's do that.

00:32:00.269 --> 00:32:08.539
So in our view loads, we'll once again get our application
music player, we'll add ourselves as an observer

00:32:08.539 --> 00:32:13.990
to the
MPMusicPlayerControllerPlaybackStateDidChangeNotification

00:32:13.990 --> 00:32:20.200
for the application MusicPlayer and then we'll tell
the player to beginGeneratingPlaybackNotifications.

00:32:20.200 --> 00:32:25.039
And when the root view controller goes away
just to be safe, we'll do the opposite.

00:32:25.039 --> 00:32:31.210
We'll remove ourselves as the observer and we'll
end playback notifications on the MPMusicPlayer.

00:32:31.210 --> 00:32:41.210
When that notification gets posted and we
receive it, we'll update the title of the button.

00:32:41.210 --> 00:32:44.279
So this nicely mirrors what happens
to the toggle play state button.

00:32:44.279 --> 00:32:51.579
When the playback state is playing, we'll set the title
to Pause because we call Pause and in any other state,

00:32:51.579 --> 00:33:01.000
we set the title to Play because that's what happens
when the user presses it in toggle play state.

00:33:01.000 --> 00:33:05.720
So now we can play and it changes to a Pause button.

00:33:05.720 --> 00:33:13.519
Let's do it again, now it's a Pause
and stopping it pauses it.

00:33:13.519 --> 00:33:22.069
So, that's how to correctly change or update a UI to
reflect the playback state of the MusicPlayerController.

00:33:22.069 --> 00:33:25.359
All right I'll send it back to Lucas to take us home.

00:33:25.359 --> 00:33:28.149
>> So you know how to start playback
from within your application,

00:33:28.150 --> 00:33:31.310
but what effect is this going to
have on the rest of your application?

00:33:31.309 --> 00:33:33.569
Maybe you're already playing audio in your application.

00:33:33.569 --> 00:33:35.279
So let's talk about Audio Mixing.

00:33:35.279 --> 00:33:42.720
What you want to do when you want to mix audio in your
application is you've got to set up an audio session.

00:33:42.720 --> 00:33:46.970
In this case I'm going to use the AVAudioSession
API from the AV Foundation Framework,

00:33:46.970 --> 00:33:52.019
and I'm going to choose the category ambient
which means we're going to mix audio played

00:33:52.019 --> 00:33:54.740
in our application with audio playing in the background.

00:33:54.740 --> 00:34:01.069
So I'll set up this category and I'm going to make it
active, and then anytime I just play audio as usual

00:34:01.069 --> 00:34:07.549
in my application, it will automatically
mix with the iPod audio.

00:34:07.549 --> 00:34:14.079
Also, when you're playing audio in your application,
you want to think about audio routing a little bit.

00:34:14.079 --> 00:34:19.880
As we mentioned before, if the user is listening to
music and they go along and unplug their headphones,

00:34:19.880 --> 00:34:22.910
you don't music to continue playing
out of the back speaker of the device.

00:34:22.909 --> 00:34:25.379
This would be annoying to the user.

00:34:25.380 --> 00:34:29.390
So you're going to want to be able to handle
audio route changes in your application.

00:34:29.389 --> 00:34:36.129
Well when you're using MPMusicPlayerController, what
does the code look like to actually handle these changes?

00:34:36.130 --> 00:34:38.970
Well there's no code; it actually just works for you.

00:34:38.969 --> 00:34:40.289
We've done all the heavy lifting.

00:34:40.289 --> 00:34:45.820
All you have to do is just let the MPMusicPlayer
control all the audio route changes for you.

00:34:45.820 --> 00:34:51.200
Now in your own application you may have to actually do
a little bit of extra work in order to get this behavior.

00:34:51.199 --> 00:34:53.789
So we put up a sample on the session webpage.

00:34:53.789 --> 00:34:59.550
See "AddMusic" sample and it gives you
examples of audio mixing and routing.

00:34:59.550 --> 00:35:02.320
Additionally, you want to know
that the music is going to play

00:35:02.320 --> 00:35:05.630
from the music player regardless
of the ringer switch setting.

00:35:05.630 --> 00:35:07.269
This is just like the iPod application.

00:35:07.269 --> 00:35:10.239
We always play music regardless
of the ringer switch setting.

00:35:10.239 --> 00:35:14.409
So take that into account when
you're starting music playback.

00:35:14.409 --> 00:35:20.289
Additionally, if you're playing formats
like MP3 or AAC in your application,

00:35:20.289 --> 00:35:24.110
you're going to fall on the software decoding
path if the iPod is already playing audio

00:35:24.110 --> 00:35:27.360
because the iPod is going to be
using the audio decoding hardware.

00:35:27.360 --> 00:35:31.090
So this can actually cause a performance
impact in your application

00:35:31.090 --> 00:35:34.269
and it will lower the battery life of the device.

00:35:34.269 --> 00:35:38.730
So you want to make sure to take that
into account when you're playing audio.

00:35:40.730 --> 00:35:42.760
There is more information examples as I mentioned.

00:35:42.760 --> 00:35:45.280
We've got the "AddMusic" sample on the session webpage.

00:35:45.280 --> 00:35:48.260
There's a URL for you right there,
and there's also a session on it

00:35:48.260 --> 00:35:50.440
after the conference when they put up the videos.

00:35:50.440 --> 00:35:55.320
You can check it out and see Audio Development
for iPhone OS that one's on Tuesday at 3:30.

00:35:55.320 --> 00:36:00.740
They go really in depth into Audio Mixing,
Audio Routing and setting up the categories.

00:36:00.739 --> 00:36:04.479
It's a pretty complex topic; we don't have
time to cover it all today but you can go check

00:36:04.480 --> 00:36:05.849
out that session if you want more information.