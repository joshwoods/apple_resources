WEBVTT

00:00:12.910 --> 00:00:17.609
>> Welcome to session 118, Embedding
Maps in iPhone Applications.

00:00:17.609 --> 00:00:21.559
I'm Chris Blumenberg I manage the iPhone maps team.

00:00:21.559 --> 00:00:27.609
So after the iPhone SDK came out a year ago, we
quickly realized that there are so many map apps.

00:00:27.609 --> 00:00:33.140
There's an app that lets you find your friends that uses the
map, there's an application that let's you make reservations

00:00:33.140 --> 00:00:37.090
at restaurants that also uses a map,
there's an app that lets you speed

00:00:37.090 --> 00:00:40.740
without getting caught by the cops which also uses a map.

00:00:40.740 --> 00:00:44.650
[Laughter] And these are just a few of the many
applications out there, already out there that use a map.

00:00:44.649 --> 00:00:50.219
And that's when we realized we really
need to come out with an SDK for mapping.

00:00:50.219 --> 00:00:53.859
An SDK for mapping would allow
developers like yourselves to embed a map

00:00:53.859 --> 00:00:56.909
in your application and not have to write it yourself.

00:00:56.909 --> 00:01:02.379
And for users, it would allow the same seamless
mapping experience across multiple applications.

00:01:02.380 --> 00:01:07.689
So that's when we came up with MapKit.

00:01:07.689 --> 00:01:14.849
So MapKit is a new framework in iPhone OS 3.0 that
essentially allows you to embed a map in your application.

00:01:14.849 --> 00:01:16.459
So what is MapKit?

00:01:16.459 --> 00:01:19.640
As I said, it's a new framework in iPhone OS 3.0.

00:01:19.640 --> 00:01:22.390
You can embed a map in your app using MapKit.

00:01:22.390 --> 00:01:29.170
We use Google for all the map data, that is the map tiles
as well as the services related to MapKit in the map.

00:01:29.170 --> 00:01:32.310
It responds to all the sort of panning and
zooming gestures that you're accustomed

00:01:32.310 --> 00:01:35.269
to on the iPhone platform and in the maps application.

00:01:35.269 --> 00:01:38.159
You can also annotate the map in any way you want.

00:01:38.159 --> 00:01:41.879
You can have custom views or built-in
views, and I'll go into that shortly.

00:01:41.879 --> 00:01:46.689
A map can also provide reverse geocoding.

00:01:46.689 --> 00:01:52.269
So if you want to turn a coordinate, that
is a latitude and longitude into an address

00:01:52.269 --> 00:01:56.489
that is something that's human readable, an
address like you know, 800 Howard Street,

00:01:56.489 --> 00:02:01.129
you can do that with reverse geocoding
that's also provided in MapKit.

00:02:01.129 --> 00:02:05.949
So once you get one of these addresses, you can then
turn that into an Address Book contact if you wish

00:02:05.950 --> 00:02:07.840
to have that feature in your application.

00:02:07.840 --> 00:02:10.840
So what you'll learn today.

00:02:10.840 --> 00:02:14.909
We'll teach you how to embed a
map in your app using MKMapView.

00:02:14.909 --> 00:02:19.590
MKMapView is the UIView class for-- that contains the map.

00:02:19.590 --> 00:02:26.659
Once you have one of these MKMapViews, we'll show you how
to control the map position and other properties of the map.

00:02:26.659 --> 00:02:30.659
We'll show you how to add views to the
maps so you can add your custom views

00:02:30.659 --> 00:02:34.560
or built-in views and we'll go into that shortly.

00:02:34.560 --> 00:02:39.479
And we'll also show you how to show the user's location on
the map so the user can find out where they are in the world

00:02:39.479 --> 00:02:42.979
and in relation to you, you know,
your annotations and all that.

00:02:42.979 --> 00:02:48.639
And then lastly, we're going to go into reverse
geocoding, how to turn a coordinate into an address.

00:02:48.639 --> 00:02:51.699
The class to do that is called MKReverseGeocoder.

00:02:51.699 --> 00:02:55.659
So this is a MapView on the right here.

00:02:55.659 --> 00:02:57.659
It's a UIView subclass.

00:02:57.659 --> 00:03:00.280
You can just call initWithFrame
to create one of these things.

00:03:00.280 --> 00:03:04.259
You can call it-- you can drag it from
interface builder into your application,

00:03:04.259 --> 00:03:06.449
it's really easy, it works right out of the box.

00:03:06.449 --> 00:03:08.899
It will start loading tiles automatically.

00:03:08.900 --> 00:03:13.110
The user can start panning around and
load tiles in those new locations.

00:03:13.110 --> 00:03:17.200
The users can zoom in and pinch and do that and
we handle all of those things automatically.

00:03:17.199 --> 00:03:20.729
It's really easy to create one of these MKMapViews.

00:03:20.729 --> 00:03:23.789
We spent a lot of time working on performance.

00:03:23.789 --> 00:03:29.939
MapKit and MKMapView is written from
scratch for iPhone and iPod Touch.

00:03:29.939 --> 00:03:34.090
The data is cached, that is the map
tiles are cached in memory and on disk.

00:03:34.090 --> 00:03:36.590
This is another thing you don't have to worry about.

00:03:36.590 --> 00:03:41.580
So if the user has been to a location before,
chances are we'll be able to load tiles

00:03:41.580 --> 00:03:45.920
in those locations again if the
user goes back to that location.

00:03:45.919 --> 00:03:48.179
MKMapView also handles memory notifications.

00:03:48.180 --> 00:03:52.330
So if the system is running low on memory,
we'll listen to those memory notifications

00:03:52.330 --> 00:03:56.070
and free up memory in the cache as need be.

00:03:56.069 --> 00:03:59.239
MKMapView also handles the connectivity changes.

00:03:59.240 --> 00:04:03.810
So if you have a device that's going from 3G
to EDGE or EDGE to 3G or Wi-Fi or, you know,

00:04:03.810 --> 00:04:08.140
all those permutations, we'll go
and reload tiles if necessary.

00:04:08.139 --> 00:04:10.799
This is all automatic behavior.

00:04:10.800 --> 00:04:14.600
As I mentioned before, the map data is hosted by Google.

00:04:14.599 --> 00:04:17.589
Essentially a network is required to use MKMapView.

00:04:17.589 --> 00:04:23.529
You might get lucky or a user might get lucky if, you
know, they load an MKMapView and the tiles are cached

00:04:23.529 --> 00:04:26.099
and we can retrieve those from cache while you're offline.

00:04:26.100 --> 00:04:30.980
But you have to remember that MKMapView is something
that can be used sort of fluidly and the user can pan it

00:04:30.980 --> 00:04:34.170
to any part of the world and essentially
a network is required.

00:04:34.170 --> 00:04:37.990
There is also a delegate on MKMapView.

00:04:37.990 --> 00:04:43.069
Just set your delegate by setting
the delegate property in MKMapView,

00:04:43.069 --> 00:04:46.209
and it's told when the map is loading for any reason.

00:04:46.209 --> 00:04:53.439
If you implement these loading methods, you might want
to show a spinning progress indicator in the status bar.

00:04:53.439 --> 00:04:58.170
So as I mentioned, it responds to all the
panning gestures that you'd expect on the iPhone.

00:04:58.170 --> 00:05:04.210
Pinch to zoom in, you know, reverse pinch to zoom
out, double-tap zooms in for the next zoom level,

00:05:04.209 --> 00:05:06.789
two-finger-tap zooms out to the previous zoom level.

00:05:06.790 --> 00:05:10.670
People aren't actually-- some people don't actually
know about that gesture but two-finger-tap,

00:05:10.670 --> 00:05:13.720
just one tap will zoom out to the previous zoom level.

00:05:13.720 --> 00:05:19.690
So now I want to get into the API just a little bit.

00:05:19.689 --> 00:05:21.430
MKMapView supports different map types.

00:05:21.430 --> 00:05:27.750
First of all there is regular as you see to the
right there, there's satellite, there's hybrid.

00:05:27.750 --> 00:05:30.949
Hybrid is a mixture of regular and satellite.

00:05:30.949 --> 00:05:37.159
And to change these map types is as easy as just
changing a single property, very straightforward.

00:05:37.160 --> 00:05:41.350
So once you have one of these MKMapViews in
your application, the first thing you may want

00:05:41.350 --> 00:05:43.960
to do is start changing the region property.

00:05:43.959 --> 00:05:53.310
The region property controls the position and the zoom level
of the map, that is where the map is currently focused.

00:05:53.310 --> 00:05:55.389
Regions are just like rectangles.

00:05:55.389 --> 00:05:59.500
As you see highlighted in red there, that's--
what we're showing there is the current region.

00:05:59.500 --> 00:06:04.480
It's just like a rectangle in that it has
a size and an origin associated with it.

00:06:04.480 --> 00:06:05.740
Regions are also animatable.

00:06:05.740 --> 00:06:09.500
So if you want to zoom from one part of
the world to another part of the world,

00:06:09.500 --> 00:06:14.889
we have a very easy API that allows you to do that.

00:06:14.889 --> 00:06:17.079
So let's delve into this a little deeper.

00:06:17.079 --> 00:06:23.939
This is a region, it's called an MKCoordinateRegion,
it's a struct, consists of 2 things, a center and a span.

00:06:23.939 --> 00:06:30.410
The center is one of the CLLocationCoordinate2D structs
which just consists of a latitude and longitude.

00:06:30.410 --> 00:06:31.670
This is the center of the region.

00:06:31.670 --> 00:06:38.150
In this particular case, the center is
somewhere in San Francisco, and then the span,

00:06:38.149 --> 00:06:41.729
which is essentially the width and the height of the region.

00:06:41.730 --> 00:06:44.840
The span consists of a latitudeDelta and a longitudeDelta.

00:06:44.839 --> 00:06:51.629
These are the values as the latitude and longitude
are-- delta or changed throughout the region.

00:06:51.629 --> 00:06:57.560
And the latitudeDelta is the height and the
longitudeDelta is the width of your region.

00:06:57.560 --> 00:07:01.480
So here's an example of zooming into street level.

00:07:01.480 --> 00:07:05.390
The current region here is showing, you
know, San Francisco, the peninsula here.

00:07:05.389 --> 00:07:11.669
The first thing you want to do is to zoom to street
level perhaps, is create a new region struct.

00:07:11.670 --> 00:07:16.620
You'll set the latitude and longitude to something
like you know, in this case somewhere in San Francisco.

00:07:16.620 --> 00:07:21.910
And I'm setting the span here to something
rather small, meaning I wanted to zoom

00:07:21.910 --> 00:07:24.260
in to a sort of small portion of the world.

00:07:24.259 --> 00:07:29.569
And then it's easy as just setting that property on MapView.

00:07:29.569 --> 00:07:34.089
This is the region that we want to go to and this
is the region that we end up going to once you set

00:07:34.089 --> 00:07:36.659
that region property, really straightforward.

00:07:36.660 --> 00:07:39.370
And here is another example.

00:07:39.370 --> 00:07:44.990
In this case, I want to zoom out back to the Bay Area,
create another region, set the latitude and longitude

00:07:44.990 --> 00:07:50.860
to somewhere in the Bay Area, and I'm setting the span
here but I'm setting the span to something bigger,

00:07:50.860 --> 00:07:54.030
meaning I want to focus on a larger portion of the world.

00:07:54.029 --> 00:07:58.939
In that case, I animated the region
change by calling setRegion animated.

00:07:58.939 --> 00:08:05.339
Did everybody see that animation, OK, thank you.

00:08:05.339 --> 00:08:05.899
[ Laughter ]

00:08:05.899 --> 00:08:06.459
[ Applause ]

00:08:06.459 --> 00:08:09.969
>> So we actually-- we actually, you know,
spent a lot of time working on those animations.

00:08:09.970 --> 00:08:13.160
We actually cross fade tiles when
necessary, make it as fluid as possible.

00:08:13.160 --> 00:08:19.510
So an important thing to note about
regions is that the map uses zoom levels.

00:08:19.509 --> 00:08:23.329
We have different sets of map tiles at each zoom level.

00:08:23.329 --> 00:08:28.639
When you set your region, we go to the zoom
level that best fits the region that you've set.

00:08:28.639 --> 00:08:33.539
So I'm going to walk you through what
we do in MapKit when you set a region.

00:08:33.539 --> 00:08:38.439
So here again is my map and I want to set
that region to downtown San Francisco.

00:08:38.440 --> 00:08:45.080
First thing we'll do is recenter the map to the center
coordinate of your region, pretty straightforward,

00:08:45.080 --> 00:08:50.080
and then we start stepping through the zoom
levels till we find the best zoom level that fits.

00:08:50.080 --> 00:08:54.170
So this next one seems to fit pretty
well, maybe we can do better.

00:08:54.169 --> 00:08:58.120
That one looks pretty good, maybe we can do even better.

00:08:58.120 --> 00:08:59.370
And that region does not fit.

00:08:59.370 --> 00:09:05.029
As you can tell, the region that you've set intersects
the visible region and that's just not going to work.

00:09:05.029 --> 00:09:10.199
So what we end up doing is going to
this region when you set a region.

00:09:11.710 --> 00:09:19.960
The result of this is that the resulting span of
your region will not equal the span that was set.

00:09:19.960 --> 00:09:25.900
So in this particular case, we have set this region in that
red rectangle there, but this is the region that we end

00:09:25.899 --> 00:09:30.149
up actually going to when the region is actually set.

00:09:30.149 --> 00:09:39.129
And as you can see, the span values aren't quite equal in
this particular case, so it's something to keep track of.

00:09:39.129 --> 00:09:43.789
The last thing I want to do concerning
MKMapView and setting the position

00:09:43.789 --> 00:09:47.879
of your MKMapView is the centerCoordinate property.

00:09:47.879 --> 00:09:51.679
The centerCoordinate property allows
you to change the position of the map

00:09:51.679 --> 00:09:53.569
without messing around with the zoom levels.

00:09:53.570 --> 00:09:59.410
So for example if you want to just scroll from like
maybe one little restaurant to another little restaurant,

00:09:59.409 --> 00:10:03.289
just a small little change, you'll probably
just want to use the centerCoordinate property.

00:10:03.289 --> 00:10:05.319
And the centerCoordinate property is also animatable.

00:10:05.320 --> 00:10:12.180
So if you want to sort of animate that scroll,
you can do that with a really easy API.

00:10:12.179 --> 00:10:17.629
So now I like to invite Kimon up on stage to give
you a demo of how easy it is to create an MKMapView.

00:10:17.629 --> 00:10:18.899
Kimon.

00:10:18.899 --> 00:10:19.840
>> Thanks Chris.

00:10:19.840 --> 00:10:22.639
[ Applause ]

00:10:22.639 --> 00:10:29.429
>> So, I like to show you how simple it is to embed our
mapping technologies into an iPhone OS 3.0 application.

00:10:29.429 --> 00:10:32.909
So for that, we're just going to go ahead
and start with a brand new Xcode project,

00:10:32.909 --> 00:10:39.740
we're going to make it view controller based and we're
going to call it world map for the purposes of this demo.

00:10:39.740 --> 00:10:51.769
Now the first step, after of course you resize your windows,
is to always link against the MapKit framework, there.

00:10:51.769 --> 00:11:02.949
The second step can be as simple as just editing
your view controller's NIB and just dragging

00:11:02.950 --> 00:11:07.480
and dropping a MapView instance out of the
library and into your interface builder's file.

00:11:07.480 --> 00:11:11.190
Let's build and run to see what that looks like, OK.

00:11:11.190 --> 00:11:21.710
World map, you can double tap to zoom in, you can pan
around, you can pinch to zoom out, pinch to zoom in,

00:11:21.710 --> 00:11:24.560
pretty much all the gestures that
you've kind of grown to love and expect

00:11:24.559 --> 00:11:28.449
out of a map-enabled application on the phone.

00:11:28.450 --> 00:11:33.460
Now, wouldn't it be nice if our world map
supported say searching for locations, you know,

00:11:33.460 --> 00:11:37.009
you're wondering where Brazil was or the Galapagos.

00:11:37.009 --> 00:11:45.149
That process of converting an address to a coordinate, one
that you can use with a MapKit API is called geocoding.

00:11:45.149 --> 00:11:51.269
So, for the purpose of this demo, I've gone ahead
and just created a little geocoder class for us.

00:11:51.269 --> 00:11:53.590
There is nothing special about it.

00:11:53.590 --> 00:11:59.009
There's a myriad of free services out there
just, you know, pick the one of your choosing...

00:11:59.009 --> 00:12:04.549
[ Pause ]

00:12:04.549 --> 00:12:09.089
>> The interesting part is really going
to be what happens on geocoder completion.

00:12:09.090 --> 00:12:12.800
I'm updating our view controller here a little.

00:12:12.799 --> 00:12:17.449
Basically the geocoder delegate just defines a,
you know, geocoder didFind region and all we have

00:12:17.450 --> 00:12:22.790
to do is just set the mapView's region
with the setRegion animated selector.

00:12:22.789 --> 00:12:24.959
On failure, you know, we handle that as well.

00:12:24.960 --> 00:12:29.180
Hopefully we won't be exercising that code path today.

00:12:29.179 --> 00:12:35.089
Now as I mentioned, we want the user to be able to search.

00:12:35.090 --> 00:12:37.160
Excuse me.

00:12:37.159 --> 00:12:50.209
OK. So, let's go ahead and add a search bar.

00:12:50.210 --> 00:12:54.930
Let's resize our MapView and let's
just hook up some outlets.

00:12:54.929 --> 00:12:59.620
So basically our view controller has a
MapView outlet and a search bar outlet.

00:12:59.620 --> 00:13:05.899
Let's also make our search bar's
delegate our view controller.

00:13:05.899 --> 00:13:07.590
Now let's build and run.

00:13:07.590 --> 00:13:12.180
OK, so we have our search bar.

00:13:12.179 --> 00:13:23.719
We can type in a zip code, we can type in
a city, we can also type in a continent.

00:13:23.720 --> 00:13:28.240
And as you can see, MKMapView automatically
just adjust both the center coordinate

00:13:28.240 --> 00:13:31.789
and the zoom level to accommodate that geographic bounds.

00:13:31.789 --> 00:13:40.899
So, wouldn't it be nice if our world map
application can go portrait, excuse me, landscape.

00:13:40.899 --> 00:13:44.470
So what's that going to take?

00:13:44.470 --> 00:13:49.710
Basically, in our view controller class, 'cause they
should auto rotate to interface orientation selector,

00:13:49.710 --> 00:13:54.720
and every UIViewController subclass can implement this.

00:13:54.720 --> 00:13:59.670
Let's just try returning YES here.

00:13:59.669 --> 00:14:02.219
They'll then run that.

00:14:03.669 --> 00:14:07.279
So I believe we were down under last.

00:14:07.279 --> 00:14:10.589
Let's try that again.

00:14:10.590 --> 00:14:11.340
There you go.

00:14:11.340 --> 00:14:16.139
So it's pretty much that simple [applause] to
create a world map application fully functioning

00:14:16.139 --> 00:14:17.879
with a very few lines of code.

00:14:17.879 --> 00:14:20.320
Thank you, back to you, Chris.

00:14:20.320 --> 00:14:21.000
>> Thank you, Kimon.

00:14:21.000 --> 00:14:23.360
So that's how easy it is to create one of these MKMapViews.

00:14:23.360 --> 00:14:26.300
This actually takes no line of code whatsoever.

00:14:26.299 --> 00:14:31.879
So, once you have one of these MKMapViews, the
next thing you may want to do is decorate the map

00:14:31.879 --> 00:14:35.559
with your own views, and that's what we call annotations.

00:14:35.559 --> 00:14:38.619
And those are some annotations to the right there.

00:14:38.620 --> 00:14:42.529
So annotations essentially allow
you to annotate the map with views.

00:14:42.529 --> 00:14:47.909
These can be custom views, if you want some sort of
custom behavior associated with your annotations,

00:14:47.909 --> 00:14:52.889
or these can be built-in views like the
red pins that we provide in the API.

00:14:52.889 --> 00:14:55.149
Annotations correspond to coordinates on the map.

00:14:55.149 --> 00:14:59.000
They're essentially stuck in the coordinate
that you specify for your annotation.

00:14:59.000 --> 00:15:04.690
If the user pans around, that annotation will remain in
that position on the coordinate map, it will pan off.

00:15:04.690 --> 00:15:06.390
User zooms in or zooms out.

00:15:06.389 --> 00:15:08.689
They remain stuck in those coordinates.

00:15:08.690 --> 00:15:12.050
We ask that you actually use this API.

00:15:12.049 --> 00:15:13.429
Please use annotations.

00:15:13.429 --> 00:15:17.579
It's not a good idea to add subviews to MKMapView directly.

00:15:17.580 --> 00:15:23.360
Unexpected things might happen, your views might
get scaled or they might not follow the map.

00:15:23.360 --> 00:15:26.919
Also, the view hierarchy in MKMapView is private.

00:15:26.919 --> 00:15:29.279
We reserve the right to change the structure in there.

00:15:29.279 --> 00:15:33.220
If you make any assumptions about
it, in the future you might break.

00:15:33.220 --> 00:15:39.399
So we can change it at any time,
so please don't go digging around.

00:15:39.399 --> 00:15:45.529
So with annotations, your application provides
a model and a view for each annotation.

00:15:45.529 --> 00:15:49.029
A model, the model object could be
something like your data object.

00:15:49.029 --> 00:15:55.189
Let's say you have a restaurant application, your model
object would be an object that describes the restaurant

00:15:55.190 --> 00:15:59.100
like the address, the name of the restaurant,
the coordinate for your restaurant.

00:15:59.100 --> 00:16:04.340
The view is the thing that actually gets placed
on the map for your annotation model object.

00:16:04.340 --> 00:16:08.930
So those are the views for example
off to the right, those red pins.

00:16:08.929 --> 00:16:12.269
MKMapView determines when these views should be created.

00:16:12.269 --> 00:16:18.159
So we have another delegate method on MKMapView
that gets called whenever the map determines

00:16:18.159 --> 00:16:21.579
that it needs to create one of these annotation views.

00:16:21.580 --> 00:16:26.060
So that views, the argument is pretty
important and we'll go into that shortly.

00:16:26.059 --> 00:16:32.779
For large data sets, let's say you have a database
of all Starbucks in the United States, all 30,000.

00:16:32.779 --> 00:16:36.980
It's not a good idea to add them all
to MKMapView in one shot like that.

00:16:36.980 --> 00:16:39.539
You know, this is a limited device
with a limited amount of memory.

00:16:39.539 --> 00:16:42.349
If you were to do that, your app will probably exit.

00:16:42.350 --> 00:16:45.550
So the right thing to do is to listen to region changes.

00:16:45.549 --> 00:16:50.939
We have yet another set of delegate methods for
when the region changes and what you want to do

00:16:50.940 --> 00:16:54.840
when the region change is add and
remove annotations as appropriate.

00:16:54.840 --> 00:17:01.700
Generally staying around 100 annotations
max is a good amount for now.

00:17:01.700 --> 00:17:04.870
So this is an annotation model object.

00:17:04.869 --> 00:17:09.129
Essentially, your model object
conforms to the MKAnnotation protocol.

00:17:09.130 --> 00:17:18.830
When you have these model objects, you add and remove them
to MKMapView when you want to add and remove annotations.

00:17:18.829 --> 00:17:24.269
On the protocol there's only one required
property, and that's the coordinate.

00:17:24.269 --> 00:17:30.009
Every annotation must have a coordinate, otherwise
you know, it wouldn't really work for the map.

00:17:30.009 --> 00:17:33.379
The other API here is MKAnnotationView.

00:17:33.380 --> 00:17:37.770
This is the view that actually gets placed
on the map like the red pin you see here.

00:17:37.769 --> 00:17:41.589
MKAnnotationView can be subclassed if
you want some sort of custom behavior.

00:17:41.589 --> 00:17:47.139
We also have a method on MKAnnotationView
to change the image.

00:17:47.140 --> 00:17:51.090
So if you want to create an MKAnnotationView
from scratch and just change the image,

00:17:51.089 --> 00:17:54.439
provide some sort of custom artwork,
it's very easy to do that

00:17:54.440 --> 00:18:01.620
We provide built-in views like this red pin as
you see here, and I'll go into that shortly.

00:18:01.619 --> 00:18:05.429
Like UITableViewCell, annotation views are reusable.

00:18:05.430 --> 00:18:11.170
If your application is adding and removing annotation views
very frequently, let's say if you have a large dataset

00:18:11.170 --> 00:18:18.289
or for some other reason, you're going to want them
to be reusable and we'll go into that shortly as well.

00:18:18.289 --> 00:18:22.389
As I mentioned before, MKMapView
determines when these things get created.

00:18:22.390 --> 00:18:25.700
You shouldn't have to create them you know, outside of that.

00:18:25.700 --> 00:18:31.940
Well there's a delegate method for when these views
should get created and returned back to MKMapView.

00:18:31.940 --> 00:18:38.860
When we call this delegate method, we give you
the corresponding model object that you provided.

00:18:38.859 --> 00:18:44.779
So essentially, this delegate method creates
an MKAnnotationView given your model object.

00:18:44.779 --> 00:18:51.529
If you don't provide a view, say for example if you
don't implement the delegate method or if you return nil,

00:18:51.529 --> 00:18:54.049
we'll create one of these red pins for you automatically.

00:18:54.049 --> 00:18:57.769
So, if you don't want to get into the view game, if
you don't want any special behavior or appearance,

00:18:57.769 --> 00:19:02.430
you don't have to implement any delegate methods whatsoever.

00:19:02.430 --> 00:19:05.100
Lastly, MKMapView positions your views.

00:19:05.099 --> 00:19:09.759
We determine where in the world
your annotation views will go.

00:19:09.759 --> 00:19:16.960
We have some hooks in there to slightly tweak the locations
of your annotation views and I'll go into that in a bit.

00:19:16.960 --> 00:19:23.519
So now I'm going to go through the flow of adding an
annotation to MKMapView, there's a few steps involved.

00:19:23.519 --> 00:19:29.289
The first thing that happens, step 1, is that your
app creates an annotation and adds it to MKMapView.

00:19:29.289 --> 00:19:36.200
Step 2, the MapView asks the delegate
to create an annotation view.

00:19:36.200 --> 00:19:42.390
We determine that an annotation view needs to be created for
your annotation and we'll call mapView:viewForAnnotation.

00:19:42.390 --> 00:19:48.280
In your implementation of mapView:viewForAnnotation,

00:19:48.279 --> 00:19:52.129
you will go and create an annotation
view and return back to MKMapView.

00:19:52.130 --> 00:19:58.600
Step 4, the MapView positions the annotation view.

00:19:58.599 --> 00:20:00.509
We plop it on the map.

00:20:00.509 --> 00:20:06.339
And as you can see there, it's great, meaning it's been
positioned on the map but it's not yet visible to the user.

00:20:06.339 --> 00:20:09.709
We still have a few steps to go here.

00:20:09.710 --> 00:20:15.019
Step 5, the MapView then tells the delegate
about all of the recently added annotation views.

00:20:15.019 --> 00:20:20.079
>> So all these pins there in gray have recently
been added but they're not yet visible to the user.

00:20:20.079 --> 00:20:27.669
So the delegate method for telling you about all the recent
added annotation views is mapView:didAddAnnotationViews.

00:20:27.670 --> 00:20:32.289
And step 6, this is the last step
and this is an optional step.

00:20:32.289 --> 00:20:35.990
You can decide to animate your
recently added annotation views.

00:20:35.990 --> 00:20:39.730
In this particular case or in this particular
implementation of didAddAnnotationViews,

00:20:39.730 --> 00:20:47.120
our delegate wants to make them drop from the sky.

00:20:47.119 --> 00:20:48.199
And that's how you do that.

00:20:48.200 --> 00:20:52.019
Now dropping from the sky is just one example
of animating your added annotation views.

00:20:52.019 --> 00:20:55.139
You can have thunderbolts or Godzilla
burning holes in the map,

00:20:55.140 --> 00:20:58.990
whatever you want to do, there's
other animations you can do.

00:20:58.990 --> 00:21:01.259
It's pretty open ended.

00:21:01.259 --> 00:21:05.470
So this is an example implementation of viewForAnnotation.

00:21:05.470 --> 00:21:10.850
The first thing it does is it checks
if there's a reusable annotation view.

00:21:10.849 --> 00:21:15.869
The method for that is
dequeueReusableAnnotationViewWithIdentifier.

00:21:15.869 --> 00:21:19.529
If one exists, just return it right
back to the MKMapView and you're done.

00:21:19.529 --> 00:21:23.129
When it doesn't exist, you want to
go and create your annotation view.

00:21:23.130 --> 00:21:26.720
In this particular implementation,
we're creating an annotation view

00:21:26.720 --> 00:21:31.870
and setting a custom logo on it, and then we return it back.

00:21:31.869 --> 00:21:34.569
So that's pretty much it for creating an annotation view.

00:21:34.569 --> 00:21:38.779
The end result of doing that would be something like this.

00:21:38.779 --> 00:21:42.440
So, you have your annotation views, they're
all in the map, everything looks great.

00:21:42.440 --> 00:21:49.640
Now here's an example of animating those
logos, and you'll want to do that inside

00:21:49.640 --> 00:21:52.810
of didAddAnnotationViews, that delegate method

00:21:52.809 --> 00:21:56.450
The first thing you might want to do
is grab the annotationVisibleRect.

00:21:56.450 --> 00:22:00.779
That's another method or that's
another property rather on MKMapView.

00:22:00.779 --> 00:22:06.069
The annotationVisibleRect is where your
annotations are in the visible area currently.

00:22:06.069 --> 00:22:11.339
The next thing you might want to
do is iterate through the views.

00:22:11.339 --> 00:22:14.849
Remember, they are already in their ultimate position.

00:22:14.849 --> 00:22:22.369
They're in gray, right, so the end frame of
your animation is the current frame that's set

00:22:22.369 --> 00:22:24.829
by the time this method is called.

00:22:24.829 --> 00:22:31.389
The start frame in this particular case, I
want to make these logos fall from the sky.

00:22:31.390 --> 00:22:37.730
The start frame is just off screen slightly above the
visibleRect, and that's just some lame math for doing that.

00:22:37.730 --> 00:22:40.860
And then, lastly there's my animation block.

00:22:40.859 --> 00:22:46.899
Here, I am taking the view from the top of the-- from
off screen to dropping it to its ultimate location.

00:22:46.900 --> 00:22:53.360
And the end result of all this would be something like that.

00:22:53.359 --> 00:22:57.559
So it's pretty simple, that's what you do for
animating your recently added annotation views.

00:22:57.559 --> 00:23:01.319
Again this is pretty open ended, you can do
pretty much any animation you want there.

00:23:01.319 --> 00:23:07.909
So as I said before, you might want to tweak
the positioning of your annotation view.

00:23:07.910 --> 00:23:13.390
By default, what we do is we take your
annotation view and get it centered and position

00:23:13.390 --> 00:23:17.560
that over the coordinate of your annotation.

00:23:17.559 --> 00:23:25.029
So for this WWDC sign here, the center of my artwork
there is somewhere in the middle of the sign.

00:23:25.029 --> 00:23:30.539
What I'd really like is for the stake
for where the sign is in the ground,

00:23:30.539 --> 00:23:33.889
I want that to be positioned at
the entrance of Moscone West.

00:23:33.890 --> 00:23:35.870
So this is the default behavior here.

00:23:35.869 --> 00:23:40.769
But I want to slightly tweak it in
pixels relative to my annotation view.

00:23:40.769 --> 00:23:43.720
I can slightly tweak it using the centerOffset property.

00:23:43.720 --> 00:23:46.690
So here is an example of doing that.

00:23:46.690 --> 00:23:52.009
Here I'm just changing the offset, the centerOffset,
moving it to the right slightly and then moving it up a bit

00:23:52.009 --> 00:23:57.569
such that my WWDC billboard is
staked to the ground at Moscone West.

00:23:57.569 --> 00:24:02.220
So if you look at the map there, you'll see the
end result of changing the centerOffset property.

00:24:02.220 --> 00:24:10.390
And that's where I want it to be, and
as you can see that looks a lot better.

00:24:10.390 --> 00:24:15.150
So once you have these annotation
views positioned on the map,

00:24:15.150 --> 00:24:18.560
the next thing you might want to
do is play around with selection.

00:24:18.559 --> 00:24:23.509
Annotations are user selectable, that users can
tap on them and a little callout will appear.

00:24:23.509 --> 00:24:29.609
They're also selected programatically so
we have methods on MKMapView just to select

00:24:29.609 --> 00:24:35.029
and deselect annotation views automatically for the user.

00:24:35.029 --> 00:24:38.950
Whenever an annotation view becomes
selected, whenever they're tapped on,

00:24:38.950 --> 00:24:43.740
the selected property on MKAnnnotationView is set to YES.

00:24:43.740 --> 00:24:49.089
If you want some sort of custom selection,
what you'll want to do is override set selected

00:24:49.089 --> 00:24:53.159
on MKAnnotationView and show your custom selection UI.

00:24:53.160 --> 00:24:59.540
If you want the built-in selection UI, what we
call the callout, displaying Moscone West there,

00:24:59.539 --> 00:25:04.000
just set the canShow property to YES on MKAnnotationView.

00:25:04.000 --> 00:25:12.829
And whenever an annotation view is tapped,
this default selection UI will be shown.

00:25:12.829 --> 00:25:17.119
To show the selection UI, to show the callout as we call it,

00:25:17.119 --> 00:25:20.769
the title property on your annotation
model object must be implemented.

00:25:20.769 --> 00:25:24.599
We can't show a callout without the title.

00:25:24.599 --> 00:25:28.929
Also, if your annotation model object has a subtitle,

00:25:28.930 --> 00:25:32.910
we'll show it sort of optionally
beneath the title as you see there.

00:25:32.910 --> 00:25:40.800
So we see Moscone West with the address 800 Howard
Street slightly below it, that's the subtitle.

00:25:40.799 --> 00:25:47.119
Also on the callout, we support accessory views, we
support a left accessory view and a right accessory view.

00:25:47.119 --> 00:25:50.039
These again are properties on MKAnnotationView.

00:25:50.039 --> 00:25:55.659
In this particular case, I'm setting the callout,
the left accessory to an info button with an I

00:25:55.660 --> 00:26:00.610
and the right accessory view to a
disclosure button, pretty straightforward.

00:26:00.609 --> 00:26:06.619
If these accessory views happen to
be UI controls, it's pretty easy.

00:26:06.619 --> 00:26:08.969
We'll automatically call a delegate method.

00:26:08.970 --> 00:26:11.299
It's called mapView annotationView,

00:26:11.299 --> 00:26:14.750
calloutAccessoryControlTapped whenever
these accessories are tapped.

00:26:14.750 --> 00:26:17.589
So there's no need to call
addTarget:action:forControlEvents.

00:26:17.589 --> 00:26:23.679
There's no need to hook this up, we do this all pretty
much automatically for you with this delegate method.

00:26:24.829 --> 00:26:30.960
The last thing I wanted to cover concerning annotations
is one of the built-in annotation views that we provide.

00:26:30.960 --> 00:26:32.940
This is MKPinAnnotationView.

00:26:32.940 --> 00:26:35.170
These are those red pins you see off to the right there.

00:26:35.170 --> 00:26:39.400
We support red, green, and purple pins.

00:26:39.400 --> 00:26:42.150
Generally the guidelines are red means generic

00:26:42.150 --> 00:26:46.100
You can-- these are the HI guidelines and these
are pretty general, but red means generic.

00:26:46.099 --> 00:26:49.000
You can pretty much do whatever you want with the red pin.

00:26:49.000 --> 00:26:53.950
Green represents a starting point, so if you want
to have sort of a route or start and end point,

00:26:53.950 --> 00:26:56.850
you want to use green to represent the starting point.

00:26:56.849 --> 00:27:03.250
Purple is user defined, so you should leave it up
the user to define where a purple pin gets located.

00:27:03.250 --> 00:27:09.170
Lastly, the other thing on MKPinAnnotationView
is animatesDrop property.

00:27:09.170 --> 00:27:12.029
It's a built in animation that we provide.

00:27:12.029 --> 00:27:19.420
If you set this to YES, whenever an MKPinAnnotationView is
used on the map, we'll automatically drop them from the sky

00:27:19.420 --> 00:27:21.890
and bounce and the shadows will meet up and all that.

00:27:21.890 --> 00:27:27.580
So if you look to the right at the map there,
you'll see an example of that happening.

00:27:27.579 --> 00:27:28.879
That's all built-in into MapView.

00:27:28.880 --> 00:27:35.780
So now I'd like to invite James up on
stage to give you a demo of annotations.

00:27:35.779 --> 00:27:41.470
>> I'm going to show you how to use annotations to
show what the weather is like around the country.

00:27:41.470 --> 00:27:47.240
So to get started, I've put together just a bare
amount of code that's necessary to get a map on screen,

00:27:47.240 --> 00:27:51.130
so basically picking up where the
first part of Kimon's demo left off.

00:27:51.130 --> 00:27:54.020
So I'm just showing a map, setting it to the United States.

00:27:54.019 --> 00:27:58.859
And if we build and run this, we get something like that.

00:27:58.859 --> 00:28:01.859
So, let's flip back over to Xcode here.

00:28:01.859 --> 00:28:08.609
For my annotation, so this is my weather model
object, I have a few properties defined in this.

00:28:08.609 --> 00:28:14.539
I've got temperature, weather type, so that's
like is it cloudy, is it stormy, is it sunny,

00:28:14.539 --> 00:28:19.899
and then of course coordinate which is
a required property on MKAnnotation.

00:28:19.900 --> 00:28:27.030
I also go ahead and implement the optional method here,
title, so that will show in a little callout there.

00:28:27.029 --> 00:28:29.889
And for the weather, I just show
the temperature in Fahrenheit.

00:28:29.890 --> 00:28:32.720
I also have a weather manager here.

00:28:32.720 --> 00:28:40.000
This talks to Yahoo's weather RSS service,
and it just gets the weather for a region.

00:28:40.000 --> 00:28:46.900
And so if we flip back over to the view controller
here, as soon as the view loads, I'm going to go

00:28:46.900 --> 00:28:55.650
and ask my weather manager to load the
weather and the region that I'm showing.

00:28:55.650 --> 00:28:58.009
And it's going to call me back down here.

00:28:58.009 --> 00:29:02.839
[ Pause ]

00:29:02.839 --> 00:29:05.069
>> Hopefully it doesn't get an error.

00:29:05.069 --> 00:29:08.679
And I'm just going to use addAnnotation
so you can just add a list of annotations,

00:29:08.680 --> 00:29:12.500
so this is going to be the weather info objects
that you saw earlier, add those to the map.

00:29:12.500 --> 00:29:18.299
And without implementing any other MKMapView delegate
methods, this is just going to put red pins on the map.

00:29:18.299 --> 00:29:26.399
So now if we build and run, we
get these red pins on the map.

00:29:26.400 --> 00:29:31.840
So we can see like up in New York the
weather is 62, down in Texas it's 92 degrees,

00:29:31.839 --> 00:29:38.279
in Alaska 47, Seattle where I'm from it's 65.

00:29:38.279 --> 00:29:42.599
So this is good, but these are just
the default red pins that you get.

00:29:42.599 --> 00:29:48.309
We'd like to spice things up a little bit and get
something that says weather a little more than a red pin.

00:29:48.309 --> 00:29:55.809
So in order to do that, I've already defined an annotation
view so I'm just subclassing MKAnnotationView here.

00:29:55.809 --> 00:30:02.539
And because MKAnnotationView is a subclass of UIView, you
can just do drawRect and draw whatever you want in there.

00:30:02.539 --> 00:30:08.000
In my case I'm going to draw like a little blue badge
and then I'm going to draw an icon for the weather

00:30:08.000 --> 00:30:11.619
and I'm also going to draw the
temperature in the bottom of this.

00:30:11.619 --> 00:30:17.649
>> A coupl.e of things to know, if you do use drawRect
to draw your annotations, make sure you set the bounds.

00:30:17.650 --> 00:30:20.200
I'm saying this is, you know, 40 by 50.sty@l

00:30:20.200 --> 00:30:25.650
This way, the map will know how to center your
annotation right over the coordinate that's set.

00:30:25.650 --> 00:30:27.780
I'm also setting enable to NO.

00:30:27.779 --> 00:30:33.129
I'm going to have all the information I need just
in my view, so there's no need to show a callout.

00:30:33.130 --> 00:30:41.240
So, if we flip back over to the view controller here,
we can implement the viewForAnnotation delegate method.

00:30:41.240 --> 00:30:48.750
And as Chris showed early in his slide, what
we want to do is-- clean this up a little bit.

00:30:48.750 --> 00:30:52.210
You can dequeue a reusable annotation.

00:30:52.210 --> 00:30:57.299
So if, you know, you've added one and you removed one, it's
going to-- we're going to keep them around for a little bit,

00:30:57.299 --> 00:30:59.710
that way you're not constantly creating a ton of views.

00:30:59.710 --> 00:31:02.930
If we are unable to dequeue one, we're
going to create one and return it.

00:31:02.930 --> 00:31:05.830
There's no need to set the annotation if you did dequeue it.

00:31:05.829 --> 00:31:07.419
The mapView will do that for you.

00:31:07.420 --> 00:31:13.560
But otherwise, this works a lot like if you're familiar
with UITableView, the delegate method on that to get a cell.

00:31:13.559 --> 00:31:16.009
So with this in place, we build and run.

00:31:16.009 --> 00:31:20.950
[ Pause ]

00:31:20.950 --> 00:31:22.759
>> Now we get these nice little blue badges.

00:31:22.759 --> 00:31:30.009
Looks like it's hazy over New York, cloudy in Seattle,
in Southern California it's pretty much sunny.

00:31:30.009 --> 00:31:31.460
So this is nice.

00:31:31.460 --> 00:31:35.430
What happens if we drill into the Bay Area?

00:31:35.430 --> 00:31:41.630
Nothing. What we want to do is we want
to watch for these region changes.

00:31:41.630 --> 00:31:48.300
So every time the map moves or zooms, we get a callback
from MKMapView, and we could take advantage of that

00:31:48.299 --> 00:31:56.119
to add more annotations to the map, so let's do that.

00:31:56.119 --> 00:31:58.919
So on this region did change.

00:31:58.920 --> 00:32:01.480
We will just go back and ask the
weather manager for more weather.

00:32:01.480 --> 00:32:07.069
It's going to load more weather and it's going to call back
here and we're going to add more annotations to the map.

00:32:07.069 --> 00:32:12.619
So, if we build and run with this-- What?

00:32:12.619 --> 00:32:14.009
It's--

00:32:14.009 --> 00:32:19.150
[ Pause ]

00:32:19.150 --> 00:32:27.400
>> Alright, so now we'll drill into the
Bay Area and wait for it, more weather.

00:32:27.400 --> 00:32:37.580
We can scroll around, load more weather,
go back, load more weather, zoom out,

00:32:37.579 --> 00:32:41.470
load more weather [laughter] zoom
out again, load more weather.

00:32:41.470 --> 00:32:46.730
Eventually we run into this situation where we have like
this big mess of stuff on screen, there's way too much going

00:32:46.730 --> 00:32:49.819
on and eventually, you know, we'll be
adding so many annotations to the map

00:32:49.819 --> 00:32:53.529
that we probably get a memory notification
and be forced to quit.

00:32:53.529 --> 00:32:57.430
So, what we need to do is we're going
to start culling some annotations.

00:32:57.430 --> 00:33:04.799
So to do that, I've already defined a category on the view
controller here which culls annotations and add annotations.

00:33:04.799 --> 00:33:10.779
In my case, what I'm doing is the server is always
sort of preferring to return the biggest cities.

00:33:10.779 --> 00:33:15.809
So, as you saw like I had like New York, I
had Seattle, I had L.A., I had probably like--

00:33:15.809 --> 00:33:22.849
I don't know, whatever the capital of Texas is.

00:33:22.849 --> 00:33:29.740
[Laughter] No offense intended or implied
towards any Texans, I just honestly don't know.

00:33:29.740 --> 00:33:30.250
But anyways--

00:33:30.250 --> 00:33:31.950
[ Laughter ]

00:33:31.950 --> 00:33:33.650
>> Austin.

00:33:33.650 --> 00:33:34.600
>> Austin.

00:33:34.599 --> 00:33:37.869
So, initially I'm adding the biggest cities to the map.

00:33:37.869 --> 00:33:44.609
Then what I'm doing is as you zoom in, I'm adding
like more and more local weather, so smaller cities.

00:33:44.609 --> 00:33:47.399
As we move around, we want to move
things that are off screen,

00:33:47.400 --> 00:33:49.759
we want to remove those from the map, bring in new things.

00:33:49.759 --> 00:33:51.779
But we never want to have any two things overlap.

00:33:51.779 --> 00:33:53.279
So I'm just doing something kind of lame here.

00:33:53.279 --> 00:33:54.740
I'm just doing like the N squared thing.

00:33:54.740 --> 00:34:00.599
I add up. As I'm adding things to the map I say, oh,
this area is blocked off if anything new comes along.

00:34:00.599 --> 00:34:03.089
Well, it must be a smaller place
so I'm not going to replace it.

00:34:03.089 --> 00:34:04.619
But if there's room, I'll put it on there.

00:34:04.619 --> 00:34:07.500
So depending on what you're doing to your
application, you may want to do different things,

00:34:07.500 --> 00:34:11.239
you may want to like cluster things,
you may want to have other priorities

00:34:11.239 --> 00:34:13.479
for what stays on the map and what gets removed.

00:34:13.480 --> 00:34:17.929
But if you're in a situation where you have a lot
of annotations that you could potentially display,

00:34:17.929 --> 00:34:20.819
you need to think about this problem
then and decides what's best for you.

00:34:20.820 --> 00:34:24.350
So, if we flip back over to view
controller, we can make use of this.

00:34:24.349 --> 00:34:30.299
So as soon as we change the region, we
can call this and this is going to move--

00:34:30.300 --> 00:34:32.210
everything that's off screen is going to remove it.

00:34:32.210 --> 00:34:38.269
So, we can add that back to our queue
and save the-- and get rid of the views.

00:34:38.269 --> 00:34:41.570
And also, rather than just blindly adding more annotations--

00:34:41.570 --> 00:34:47.010
oops, blindly adding more annotations when
we get this callback, let's cull and add.

00:34:47.010 --> 00:34:51.720
[ Pause ]

00:34:51.719 --> 00:34:54.049
>> It should be, you know, here.

00:34:54.050 --> 00:34:58.010
So now if we build and run--

00:34:58.010 --> 00:35:03.770
[ Pause ]

00:35:03.769 --> 00:35:09.500
>> Now as we drill into the Bay Area,
reload weather but not overlapping.

00:35:09.500 --> 00:35:13.230
If we like scroll over, we'll load some new weather in here.

00:35:13.230 --> 00:35:17.690
Scroll back, the stuff that was off screen has been removed.

00:35:17.690 --> 00:35:22.019
You zoom out, things are moved to make
more space and new things load in.

00:35:22.019 --> 00:35:25.130
So, there's a little over 30,000
zip codes in the United States,

00:35:25.130 --> 00:35:27.710
that's potentially how many annotations there could be.

00:35:27.710 --> 00:35:33.230
So, this demonstrates a way that you can
choose between those and get good performance

00:35:33.230 --> 00:35:35.650
and something then looks good on your map.

00:35:35.650 --> 00:35:36.960
So, that's annotations and MapViews.

00:35:36.960 --> 00:35:38.010
>> Thank you, Chris.

00:35:38.010 --> 00:35:44.440
[ Applause ]

00:35:44.440 --> 00:35:45.450
>> Thanks, James.

00:35:45.449 --> 00:35:48.699
I never thought weather could be that exciting

00:35:48.699 --> 00:35:52.799
So, we've shown you how to create an
MKMapView, annotate it anyway you want.

00:35:52.800 --> 00:35:56.060
The next thing you may want to do is
show the user's location on the map.

00:35:56.059 --> 00:35:59.219
And that's our sort of built-in UI
for showing the user's location.

00:35:59.219 --> 00:36:02.139
You may be accustomed to seeing
that in the maps application.

00:36:02.139 --> 00:36:03.609
So, how do you do that?

00:36:03.610 --> 00:36:07.470
Well first of all, MKMap, MKMapView uses CoreLocation.

00:36:07.469 --> 00:36:12.819
CoreLocation uses a combination of
cell, Wi-Fi and GPS to get the users,

00:36:12.820 --> 00:36:16.010
the best representation of the user's current location.

00:36:16.010 --> 00:36:23.190
To simply just show the user's location on the
map, set the showsUserLocation property to YES,

00:36:23.190 --> 00:36:27.400
and once the user's location becomes available
from CoreLocation, we'll show it on the map.

00:36:27.400 --> 00:36:29.019
It's that simple.

00:36:29.019 --> 00:36:31.889
The user location is also an annotation.

00:36:31.889 --> 00:36:36.869
There's a model object, there's a way to
get at the annotation for the user location.

00:36:36.869 --> 00:36:38.429
We'll go into that shortly.

00:36:38.429 --> 00:36:43.000
And for the view, we provide a
built-in view as you see there.

00:36:43.000 --> 00:36:49.639
So, that annotation for the user's
location is called MKUserLocation.

00:36:49.639 --> 00:36:56.109
As I said before, MKMapView provides the view
for this annotation model object by default.

00:36:56.110 --> 00:37:01.660
As a delegate of MKMapView, you can decide to show
the built-in view, the one that you see there,

00:37:01.659 --> 00:37:08.239
or you can show a custom view if you wish to have a custom
view for the user's location, you might want to do that.

00:37:08.239 --> 00:37:12.719
So, here's an example of using the built-in view.

00:37:12.719 --> 00:37:15.829
Again, we have mapView:viewForAnnotation.

00:37:15.829 --> 00:37:22.849
To check if the annotation being passed in is the user's
location, you just do a simple pointer comparison.

00:37:22.849 --> 00:37:26.179
You call the userLocation property on mapView.

00:37:26.179 --> 00:37:28.259
If they're equal, return nil.

00:37:28.260 --> 00:37:34.430
Return nil in this method always means
use the built-in annotation view.

00:37:34.429 --> 00:37:41.119
But maybe you want your own sort of custom UI for the
user's location, and here's an example of doing that.

00:37:41.119 --> 00:37:48.089
Again, we have that same pointer comparison, comparing
the passed-in annotation with the userLocation annotation.

00:37:48.090 --> 00:37:54.380
But in this particular case, we're creating
our own custom view for this userLocation

00:37:54.380 --> 00:37:59.680
and it's just simply creating one and
returning it back, it's that simple.

00:37:59.679 --> 00:38:04.669
So on MKUserLocation, there's a location
object property, that's a CLLocation object.

00:38:04.670 --> 00:38:08.300
If you use CoreLocation, you'll know what a CLLocation is.

00:38:08.300 --> 00:38:14.840
It just basically represents the user's location, the
coordinate for that user and the accuracy for that user.

00:38:14.840 --> 00:38:18.519
However, the location property
on MKUserLocation is different

00:38:18.519 --> 00:38:21.900
than the one that you'll get from CLLocationManager.

00:38:21.900 --> 00:38:27.599
The location property on MKUserLocation
is optimized for display on the map.

00:38:27.599 --> 00:38:35.219
If you want to track the user's location, the one that is
on the map, you can use key-value observing to do that.

00:38:35.219 --> 00:38:37.379
I'll go into that in a bit.

00:38:37.380 --> 00:38:41.099
CLLocationManager, as I mentioned,
provides a different location object.

00:38:41.099 --> 00:38:47.159
The one that is represented by
CLLocationManager represents the raw user location.

00:38:47.159 --> 00:38:51.789
So, here's an example of tracking the
userLocation as you see it on the map.

00:38:51.789 --> 00:38:55.139
And you want to use key-value observing
to set up your server here.

00:38:55.139 --> 00:39:03.000
And then whenever that value changes, whenever it
essentially moves on the map, your observer will get called.

00:39:03.000 --> 00:39:07.119
In this particular example, I'm just setting the
centerCoordinate of my map to the userLocation.

00:39:07.119 --> 00:39:12.480
This is essentially a way to track or make
them, make the map track the user automatically.

00:39:13.909 --> 00:39:20.129
Also on MKUserLocation are the title and
subtitle properties that I've mentioned before.

00:39:20.130 --> 00:39:23.789
However on MKuserLocation, they're
mutable so you can actually override

00:39:23.789 --> 00:39:27.699
or change the title and the subtitle for this location.

00:39:27.699 --> 00:39:32.829
So whenever the userLocation is tapped, it will
show the built-in callout UI as you see there.

00:39:32.829 --> 00:39:41.750
In this particular example, I've overridden it or rather set
my name Chris as the title and the address or the subtitle

00:39:41.750 --> 00:39:44.760
in my current location being Moscone West.

00:39:44.760 --> 00:39:48.680
This is just one example of using these properties.

00:39:48.679 --> 00:39:56.069
So, now I'd like to invite Kimon up on stage, he's already
on stage, to give you a demo of userLocation in MKMapView.

00:39:56.070 --> 00:39:57.530
>> Thanks, Chris.

00:39:57.530 --> 00:40:03.430
So userLocation, for this demo, I want
us to build on our world map application.

00:40:03.429 --> 00:40:08.589
What does it take to get the user's
location in an MKMapView enabled application?

00:40:08.590 --> 00:40:17.150
Let's go over to interface builder, select
our mapView and just check showsUserLocation.

00:40:17.150 --> 00:40:25.539
>> Back in Xcode, if we build and run this-- I
didn't save my name, you got to save your name.

00:40:25.539 --> 00:40:29.759
OK, the familiar user location UI that you know.

00:40:29.760 --> 00:40:35.130
So basically under the hood we've kind of started up
CoreLocation for you, we've added annotation to the map,

00:40:35.130 --> 00:40:39.240
we even provided the annotation view on your behalf.

00:40:39.239 --> 00:40:43.639
Wouldn't it be nice if we kind of
provided the user an affordance for getting

00:40:43.639 --> 00:40:46.549
to their user location without having to pan and zoom?

00:40:46.550 --> 00:40:48.530
Let's see what that would look like.

00:40:48.530 --> 00:40:55.670
So basically on our view controller, let's just define
a new action, let's call it go to user location.

00:40:55.670 --> 00:41:00.200
The implementation of which is relatively straightforward.

00:41:01.289 --> 00:41:07.000
Basically, we examine our MapView, its user
location annotation, do some error checking

00:41:07.000 --> 00:41:08.579
and then just compute a CoordinateRegion

00:41:08.579 --> 00:41:14.420
and showing a minimum metric horizontal
and vertical distance that we zoom to.

00:41:14.420 --> 00:41:21.059
And then we just adjust the MapView's region
with the typical setRegion animated selector.

00:41:21.059 --> 00:41:27.659
Now back in interface builder, let's
add an affordance for that action.

00:41:27.659 --> 00:41:32.409
Let's use a bar button item.

00:41:32.409 --> 00:41:40.379
Let's drag it over to our loop view controllers'
NIB, and let's give it a spiffy image.

00:41:40.380 --> 00:41:55.360
I took up this action to a new Go to user location
selector and let's build and run that, build and run that.

00:41:55.360 --> 00:42:00.990
OK, we have our button, we can
click on it, and there we are.

00:42:00.989 --> 00:42:04.119
We're at Moscone West, Presidio.

00:42:04.119 --> 00:42:09.250
So, what else can we add to the
map that might be of interest?

00:42:09.250 --> 00:42:13.719
So personally I've always wondered
what tweets might look like on a map.

00:42:13.719 --> 00:42:24.269
So for the purpose of this demo, I've gone ahead and kind
of updated our view controller for some extra functionality.

00:42:24.269 --> 00:42:29.809
It's going to have just one additional IB
action toggle Twitter search and it's going

00:42:29.809 --> 00:42:31.889
to change the behavior of our search bar.

00:42:31.889 --> 00:42:37.190
It's either going to look for a location by the process of
geocoding that I described earlier, or it's going to search

00:42:37.190 --> 00:42:41.579
on using Twitter's API for that
twit for that particular text.

00:42:41.579 --> 00:42:45.219
Now back in IB, let's add another bar button item.

00:42:45.219 --> 00:43:03.019
Let's give it another little icon, hook it up to our
new toggle Twitter search action and build in on that.

00:43:03.019 --> 00:43:06.800
OK, so we have our previous functionality
and those are the location.

00:43:06.800 --> 00:43:11.890
We can still browse to anywhere on the world, say Oahu.

00:43:11.889 --> 00:43:17.039
And now we can actually see what
people are saying, say about surf.

00:43:17.039 --> 00:43:22.449
Let me see, there's a few hits
there, a few from the north shore.

00:43:22.449 --> 00:43:27.279
Northwest swell, glassy, 6 feet at 14 seconds, perfect surf.

00:43:27.280 --> 00:43:29.840
The surf is too good, left iPhone
in pocket fail [inaudible].

00:43:29.840 --> 00:43:34.570
[Laughter] We're coming out with a new one.

00:43:34.570 --> 00:43:37.470
So it's OK, you can upgrade.

00:43:37.469 --> 00:43:41.459
Now you can browse it to reverse forever
and it's pretty interesting, you know,

00:43:41.460 --> 00:43:44.750
matched up with geographic location information.

00:43:44.750 --> 00:43:47.230
But let's take it a little closer to home.

00:43:47.230 --> 00:43:50.829
So what are you guys saying about WWDC?

00:43:50.829 --> 00:43:54.909
[Laughter] OK, quite a few hits.

00:43:54.909 --> 00:44:00.420
I heard from a reliable source, it's Black Eyed Peas.

00:44:00.420 --> 00:44:03.869
We can neither confirm nor deny that.

00:44:03.869 --> 00:44:08.429
[Inaudible] Chris, what are you doing
Twittering an hour before our presentation?

00:44:08.429 --> 00:44:11.429
Beer and MapKit, today is a good day.

00:44:11.429 --> 00:44:18.069
Agreed. [Laughter] So, hopefully that has kind of given
you an idea of how significant adding the user's location

00:44:18.070 --> 00:44:23.370
to the map is and maybe even giving you a few
ideas for new and novel MK MapKit applications.

00:44:23.369 --> 00:44:25.009
Thank you.

00:44:25.010 --> 00:44:29.540
[ Applause ]

00:44:29.539 --> 00:44:30.139
>> Thanks, Kimon.

00:44:30.139 --> 00:44:33.710
I'm definitely looking forward to
having a beer after this presentation.

00:44:33.710 --> 00:44:36.519
So the last thing we want to cover today is geocoding.

00:44:36.519 --> 00:44:45.300
Geocoding essentially is a way to map from an address
to a user-- address to a coordinate or vice versa.

00:44:45.300 --> 00:44:47.850
So I want to first describe forward geocoding.

00:44:47.849 --> 00:44:54.730
Forward geocoding is essentially a way to turn address
into a coordinate, as Kimon sort of demoed earlier today.

00:44:54.730 --> 00:44:58.650
So here is our address, this is
the address for Moscone West.

00:44:58.650 --> 00:45:04.450
Forward geocoding essentially turns that address
into our coordinate, a latitude and longitude

00:45:04.449 --> 00:45:09.309
Reverse geocoding, however, turns
a coordinate into an address.

00:45:09.309 --> 00:45:15.210
So here we have our coordinate and
this is the address we get back for it.

00:45:15.210 --> 00:45:18.720
So, MapKit only provides reverse geocoding, however,

00:45:18.719 --> 00:45:23.379
there are many forward geocoding services
available online, simply a Google search away.

00:45:23.380 --> 00:45:28.730
There are a number of services out there, free
and not free and it's pretty easy to use them.

00:45:28.730 --> 00:45:31.460
So let's go into reverse geocoding a little bit more.

00:45:31.460 --> 00:45:34.960
The class is called MKReverseGeocoder.

00:45:34.960 --> 00:45:38.510
It performs reverse geocoding queries for you.

00:45:38.510 --> 00:45:41.280
It's actually very useful when combined with CoreLocation.

00:45:41.280 --> 00:45:46.290
CoreLocation gives you the user's current location in
a coordinate but it doesn't give you an address for it.

00:45:46.289 --> 00:45:50.809
You combine that with MKReverseGeocoder, you can
actually get the address for the user's current location.

00:45:50.809 --> 00:45:53.130
So it's pretty helpful.

00:45:53.130 --> 00:45:57.039
The queries for MKReverseGeocoder are done asynchronously.

00:45:57.039 --> 00:46:04.880
We have another delegate on MKReverseGeocoder that will get
called when your reverse geocoding either succeeds or fails.

00:46:04.880 --> 00:46:08.420
When it does succeed, you'll get a placemark.

00:46:08.420 --> 00:46:13.480
A placemark is an address and its associated coordinate.

00:46:13.480 --> 00:46:18.139
So as I mentioned, the delegate will get
called when this either succeeds or fails.

00:46:18.139 --> 00:46:23.440
So here is an example of reverse
geocoding the user's current location.

00:46:23.440 --> 00:46:28.110
So here I'm just grabbing the coordinate
off the userLocation object.

00:46:28.110 --> 00:46:30.220
I'm creating an MKReverseGeocoder.

00:46:30.219 --> 00:46:35.579
The only thing I need to give it is the coordinate,
call initWithCoordinate and pass the coordinate to it.

00:46:35.579 --> 00:46:42.799
I'll set the delegate as myself and then call start, and
that's all you need to do to kick off a reverse geocoder.

00:46:42.800 --> 00:46:49.320
And then if it succeeds, reverseGeocoder
didFindPlacemark, didFindPlacemark will get called.

00:46:49.320 --> 00:46:56.720
In this particular example, I'm setting the subtitle to
my user location callout to the locality of my placemark.

00:46:56.719 --> 00:46:59.589
So what is all these placemark business?

00:46:59.590 --> 00:47:03.800
A placemark is an address essentially for coordinate.

00:47:03.800 --> 00:47:07.350
On MKPlacemark, it's essentially a model object.

00:47:07.349 --> 00:47:11.929
We provide all the address fields for
the particular address like, you know,

00:47:11.929 --> 00:47:15.440
street, city, country and so on and so forth.

00:47:15.440 --> 00:47:19.940
Also on MKPlacemark is a dictionary
representation method that you can call.

00:47:19.940 --> 00:47:25.889
Once you get one of these dictionaries, you can go and
create an Address Book card if you want to do that.

00:47:25.889 --> 00:47:30.989
It's also an annotation, so if you get a hold of an
MKPlacemark, you can just simply add it to your mapView

00:47:30.989 --> 00:47:35.649
and it will just show up automatically, pretty simple.

00:47:35.650 --> 00:47:41.360
So here are all the properties, the address properties
on MKPlacemark and a set of examples for them.

00:47:41.360 --> 00:47:44.470
I'm not going to read through all
of these, but you get the idea.

00:47:44.469 --> 00:47:49.659
And these properties, essentially we consider
them to be, you know, a work around the world.

00:47:49.659 --> 00:47:52.719
They're sort of locale independent address properties.

00:47:52.719 --> 00:47:57.439
So now I'd like Seejo to give a demo of reverse geocoding.

00:47:57.440 --> 00:47:57.730
Seejo.

00:47:57.730 --> 00:47:58.369
>> Thank you, Chris.

00:47:58.369 --> 00:48:05.880
What I want to show you is how easy it is to use reverse
geocoding in MapKit based application and iPhone 3.0.

00:48:05.880 --> 00:48:11.720
To demo this, I have an application which takes a
set of geotagged photos and put it on a mapView.

00:48:11.719 --> 00:48:13.599
Let me show how it works.

00:48:13.599 --> 00:48:18.440
So clicking on load does the usual thing of
animating through it, creating annotations.

00:48:18.440 --> 00:48:22.679
It asks for custom annotation view
and that is what I'm doing.

00:48:22.679 --> 00:48:28.480
In my annotation view here I have
a thumbnail of the actual photo.

00:48:28.480 --> 00:48:32.230
I have callouts which show me what the name of the photo is.

00:48:32.230 --> 00:48:36.309
I have implemented some code where the info
bottom would actually give me the detail view.

00:48:36.309 --> 00:48:38.329
You're probably familiar with it.

00:48:38.329 --> 00:48:42.019
That's the Golden Gate Bridge, if you don't know.

00:48:42.019 --> 00:48:45.239
There, to show you some more pictures
before we go in detail,

00:48:45.239 --> 00:48:50.219
this is a very important building
with a lot of graffiti on it.

00:48:50.219 --> 00:48:54.769
So this is great, but what I really want
to do is to have an address for this.

00:48:54.769 --> 00:49:01.219
For example, I came across this photo which shows me a
very good pad thai and I want to go there for lunch today.

00:49:01.219 --> 00:49:05.699
So let's see what it takes to incorporate
reverse geocoding in your MapKit applications.

00:49:05.699 --> 00:49:13.919
So going back to Xcode, I have a map photo which is my
model object and that conforms to the annotation protocol

00:49:13.920 --> 00:49:17.550
which means that I have a coordinate,
and that's the only thing you need.

00:49:17.550 --> 00:49:22.250
So I'm going to add a method in here,
which does the reverse geocoding call.

00:49:22.250 --> 00:49:26.679
And as Chris mentioned, it's very straightforward.

00:49:26.679 --> 00:49:31.379
All you do is you create an MKReverseGeocoder
with the coordinate you're probably interested in,

00:49:31.380 --> 00:49:34.119
set the delegate yourself and call start.

00:49:34.119 --> 00:49:36.299
What that does is it will do its business.

00:49:36.300 --> 00:49:41.760
It will go outside and get the reverse geocoded
address and gives you back in a placemark,

00:49:41.760 --> 00:49:44.630
and that's done with a delegate callback.

00:49:44.630 --> 00:49:47.910
So I have some delegate there.

00:49:47.909 --> 00:49:53.980
And in my callback, I'm setting the placemark
in my model object, then I post a notification

00:49:53.980 --> 00:50:01.010
which is basically telling my views which is
showing this annotation that it can update itself

00:50:01.010 --> 00:50:05.620
to show the address and then I release the geocoder.

00:50:05.619 --> 00:50:11.369
Finally, what I add is I add the call to actually
make the reverseGeocoder call in my init method,

00:50:11.369 --> 00:50:15.289
so as soon as the annotation is
initialized, it does a reverse geocoding.

00:50:15.289 --> 00:50:17.009
So let's build and run this app.

00:50:17.010 --> 00:50:23.690
[ Pause ]

00:50:23.690 --> 00:50:29.119
>> So now when I click on the photos,
now I have an address associated with it.

00:50:29.119 --> 00:50:33.389
And like now I have-- all of those shows the details.

00:50:33.389 --> 00:50:36.739
One other thing which I have added is I have some code

00:50:36.739 --> 00:50:41.559
which would actually take the placemark
information and turns that into an address.

00:50:41.559 --> 00:50:48.599
So if I go into the detail for this view, it actually
have an Address Book info there and I can click done,

00:50:48.599 --> 00:50:54.250
that would actually add it to the Address
Book, so let's do it for that Thai place.

00:50:54.250 --> 00:50:58.690
I do it here, click done, now it's added
to my address book to take a look at it.

00:50:58.690 --> 00:51:01.940
Let's go to my contacts, and I have those two places there.

00:51:01.940 --> 00:51:03.460
So that's reverse geocoding and MapKit.

00:51:03.460 --> 00:51:03.909
Back to you, Chris.

00:51:03.909 --> 00:51:05.009
Thank you.

00:51:05.010 --> 00:51:09.940
[ Applause ]

00:51:09.940 --> 00:51:11.110
>> Thanks Seejo.

00:51:11.110 --> 00:51:13.000
So, those are all the topics that we wanted to cover today.

00:51:13.000 --> 00:51:17.789
An important note is that MapKit works
with the Google Mobile Maps Service.

00:51:17.789 --> 00:51:22.579
We encourage you to visit this URL to see
the terms and conditions when using MapKit.

00:51:22.579 --> 00:51:27.400
This URL is also available on all the
header files in the MapKit project.

00:51:27.400 --> 00:51:30.510
For more information, please contact Matt Drance.

00:51:30.510 --> 00:51:32.300
He's the Application Frameworks Evangelist.

00:51:32.300 --> 00:51:34.440
That's his email address there.

00:51:34.440 --> 00:51:40.260
For documentation, this is the URL that you
might want to start up with to get documentation

00:51:40.260 --> 00:51:42.420
on MapKit, and there is the attendee site.