WEBVTT

00:00:12.550 --> 00:00:18.760
>> Welcome to Customizing Xcode
for Your Development Work Flow.

00:00:18.760 --> 00:00:20.560
My name is Andrew Pontious.

00:00:20.559 --> 00:00:25.719
I'm a manager on the Execute IDE Team.

00:00:25.719 --> 00:00:28.140
So what are our goals for today's session?

00:00:28.140 --> 00:00:35.090
We're going to demonstrate how to tune
Xcode's preferences and setup to your liking.

00:00:35.090 --> 00:00:41.810
We're going to show where you can find the features and
capabilities of Xcode that aren't necessarily turned

00:00:41.810 --> 00:00:50.429
on by default and how to change them to suit your needs,
and with the end result being to allow you to work faster

00:00:50.429 --> 00:00:54.840
and more efficiently in Xcode to get the job done.

00:00:54.840 --> 00:00:57.120
So let's talk specifics.

00:00:57.119 --> 00:01:00.849
We're going to start talking about the text editor.

00:01:00.850 --> 00:01:03.350
Now all of you use Xcode's text editor every day.

00:01:03.350 --> 00:01:07.609
But there are some things that we're going to show
you today that you probably haven't seen already.

00:01:07.609 --> 00:01:14.439
Then we're going to show you how to customize and
configure Xcode's build system and show you some

00:01:14.439 --> 00:01:18.219
of the options you have when debugging your application.

00:01:18.219 --> 00:01:21.500
And finally we're going to show you how to make the most

00:01:21.500 --> 00:01:26.359
of Xcode's source control management
integration and Xcode's snapshots feature.

00:01:26.359 --> 00:01:34.370
So let's get started with text editing and
for that I am going to bring up Dave Ewing.

00:01:34.370 --> 00:01:36.010
Dave.

00:01:36.010 --> 00:01:39.570
[ Applause ]

00:01:39.569 --> 00:01:41.199
>> Thanks Andrew.

00:01:41.200 --> 00:01:43.969
So I'm Dave Ewing an engineer on the Xcode team.

00:01:43.969 --> 00:01:48.390
So I'm going to talk about 2 broad
areas with the text editor.

00:01:48.390 --> 00:01:54.530
I'll talk about using some of Xcode's built-in
features and how to use them together more efficiently

00:01:54.530 --> 00:02:00.620
and I'll talk a bit about extending the
features of the text editor, text editor.

00:02:00.620 --> 00:02:05.310
So the editor itself has many features.

00:02:05.310 --> 00:02:07.340
There's the code completion set of features.

00:02:07.340 --> 00:02:09.810
We'll go into a bit about how they work together.

00:02:09.810 --> 00:02:16.830
There's text macros which is perhaps the most
underutilized feature in the text editor.

00:02:16.830 --> 00:02:22.000
I'll show you how to I won't show you how to set up
key bindings but I'll talk about it a little bit,

00:02:22.000 --> 00:02:26.780
but to to get the most out of these different features.

00:02:26.780 --> 00:02:32.789
We'll talk about some new features in the recent
releases of Xcode with regards to navigation

00:02:32.789 --> 00:02:39.169
and the new feature in Snow Leopard, Quick Help.

00:02:39.169 --> 00:02:44.269
So we've made quite a few improvements to Snow
Leopard to code completion in Snow Leopard.

00:02:44.270 --> 00:02:50.700
There is a few subtle changes to the user
interface mostly with regards to keyboard handling.

00:02:50.699 --> 00:02:56.069
I'll get into that a little bit
more when I show you in a demo.

00:02:56.069 --> 00:03:01.349
But most of the changes for code
completion are under hood under the hood.

00:03:01.349 --> 00:03:08.259
We've made it much more aware about the context in which
you're editing so that the completion list that it comes

00:03:08.259 --> 00:03:12.149
up with is much more accurate, much
more appropriate for that context.

00:03:12.150 --> 00:03:13.930
And of course there's performance.

00:03:13.930 --> 00:03:16.439
We're always working on performance with code completion.

00:03:16.439 --> 00:03:24.539
We've made some specific improvements in Snow Leopard that
work really well for when you're editing in large files.

00:03:24.539 --> 00:03:33.409
Finally there's perhaps the longest requested feature in
the text editor that we added in Snow Leopard the ability

00:03:33.409 --> 00:03:40.009
to automatically insert a missing open square
bracket when you type the closing square bracket.

00:03:40.009 --> 00:03:45.649
[ Applause ]

00:03:45.650 --> 00:03:47.469
>> OK a little more about code completion.

00:03:47.469 --> 00:03:52.379
There are 3 modes, modes of operation with code completion.

00:03:52.379 --> 00:03:58.990
There's the in-line code completion where as you
type it will show you the best completion it comes

00:03:58.990 --> 00:04:01.150
up with right there in the text.

00:04:01.150 --> 00:04:07.460
That's how Xcode comes configured out of the
box so that's how most people use it of course.

00:04:07.460 --> 00:04:13.280
But there's 2 other ways you can
get access to code completion.

00:04:13.280 --> 00:04:17.069
There's the next completion command
which is in the edit menu.

00:04:17.069 --> 00:04:20.129
You can bring it up with control.

00:04:20.129 --> 00:04:24.909
that cycles through the handful of most likely suggestions.

00:04:24.910 --> 00:04:31.060
So when in-line code completion isn't suggesting the
thing that you want it's very likely that it's still

00:04:31.060 --> 00:04:36.339
in the top handful of suggestions so you can use
the next completion command to cycle until you get

00:04:36.339 --> 00:04:38.399
to that suggestion that you're looking for.

00:04:38.399 --> 00:04:41.289
Then there's the pop-up list.

00:04:41.290 --> 00:04:45.160
So you can hit the Escape key and
bring up the completion list.

00:04:45.160 --> 00:04:49.430
That's really useful when you're not
sure what API you're looking for.

00:04:49.430 --> 00:04:53.889
So that's a quick way to look at the possible completions.

00:04:53.889 --> 00:05:00.259
But there's 1 other way you can use code
completion and we call it the in-line pop-up list.

00:05:00.259 --> 00:05:05.170
So what that is is as you're typing
rather than inserting the text

00:05:05.170 --> 00:05:10.640
to show you the most likely completion it
can pop-up the list for you as you type.

00:05:10.639 --> 00:05:15.139
Now that's how code completion works and a lot
of other IDE's so many people are more familiar

00:05:15.139 --> 00:05:18.669
with that when they're coming to the platform.

00:05:18.670 --> 00:05:21.730
To get that you have to set a user default in the terminal.

00:05:21.730 --> 00:05:31.259
The user default is XE code sense auto
suggestion style and you set it to list.

00:05:31.259 --> 00:05:37.909
So text macros: Text macros are little snippets
of code that you can insert into the text editor.

00:05:37.910 --> 00:05:40.370
They can actually wrap around the current selection.

00:05:40.370 --> 00:05:46.269
They can do some variable substitution in them
as well; it depends on the current context.

00:05:46.269 --> 00:05:51.969
You can insert them either via code
completion or through the Edit menu.

00:05:51.970 --> 00:06:00.150
Now inside the Edit menu they're down at the bottom;
there's text macros and there's another layer of menu items

00:06:00.149 --> 00:06:04.489
and then all of the text macros and it's
not really convenient while you're editing.

00:06:04.490 --> 00:06:13.129
So this is 1 place where you really want to attach
your custom key bindings to your favorite text macros.

00:06:13.129 --> 00:06:18.310
Speaking of key bindings; you set those key
bindings in the Xcode preferences panel.

00:06:18.310 --> 00:06:25.129
You can set key bindings for all the menu items
in Xcode and all the text editing commands.

00:06:25.129 --> 00:06:30.029
Now there is a lot of commands in there in the text editing
section that don't have key bindings assigned to them.

00:06:30.029 --> 00:06:36.349
So if you're looking for a feature that you think Xcode
should have it may be there and you just don't know about it

00:06:36.350 --> 00:06:40.740
or you don't know about the key bind,
it may actually be bound to something.

00:06:40.740 --> 00:06:46.819
One thing to note when you customize your key
bindings, when you then go and upgrade to a new version

00:06:46.819 --> 00:06:51.750
of Xcode it has some new menu commands or new
text commands that have key bindings assigned

00:06:51.750 --> 00:06:55.540
to them you won't get those new key bindings.

00:06:55.540 --> 00:06:58.890
So there are 2 ways you can fix
that, both of which are pretty easy.

00:06:58.889 --> 00:07:06.149
You can go back to the Xcode default key bindings and
reassign the custom ones that you had assigned before

00:07:06.149 --> 00:07:15.269
or you can take your custom key bindings and
just add new key bindings for the new commands.

00:07:15.269 --> 00:07:23.000
Navigation: So there's the open quickly command which
actually went through a big face lift in Xcode 3.1.

00:07:23.000 --> 00:07:30.509
It's always been used where you type a file name and
it takes you directly to that file but you should know

00:07:30.509 --> 00:07:33.539
that you can type any symbol that's
in your project and it'll take you

00:07:33.540 --> 00:07:39.250
to that symbols definition within that project too.

00:07:39.250 --> 00:07:44.660
New in Xcode 3.2 is the incremental Find banner.

00:07:44.660 --> 00:07:50.990
So this, in older versions of Xcode we brought up a separate
window you could type things in and go back to the editor.

00:07:50.990 --> 00:07:54.470
Here we brought it nice in right close into your editor.

00:07:54.470 --> 00:08:03.210
As you type it highlights the matches as you go.

00:08:03.209 --> 00:08:07.759
Another new feature and perhaps maybe the other
oldest bug that people have been wanting fixed

00:08:07.759 --> 00:08:12.289
for a long time, or enhanced is the history.

00:08:12.290 --> 00:08:19.180
So traditionally the History buttons in Xcode
have only included the files you had open.

00:08:19.180 --> 00:08:29.009
In Xcode 3.2 they include all the navigation you've done
within the current file, well within all the files so...

00:08:29.009 --> 00:08:34.250
[ Applause ]

00:08:34.250 --> 00:08:38.110
And finally in Xcode 3.2 there's new Quick Help.

00:08:38.110 --> 00:08:46.730
So Quick Help is a floating window that gives you a nice API
summary for whatever symbol you have selected in the editor.

00:08:46.730 --> 00:08:50.379
You normally bring it up by option
double-clicking on that symbol.

00:08:50.379 --> 00:08:54.769
But if you want to keep that window up you just
drag it off to the side and it will stay there

00:08:54.769 --> 00:08:59.579
and it will continually update
when you move around in your file.

00:08:59.580 --> 00:09:04.400
If you like you can customize what's shown in the window.

00:09:04.399 --> 00:09:07.250
Right here we have an example where
it's showing all sorts of stuff.

00:09:07.250 --> 00:09:13.090
Links to sample code, links to
related API and related documentation.

00:09:13.090 --> 00:09:16.670
But you can go into the Xcode preferences
and trim that down if you want.

00:09:16.669 --> 00:09:21.719
You can reorder how it shows those if you want to.

00:09:21.720 --> 00:09:25.700
In the top right corner of the
window there's 2 buttons for you.

00:09:25.700 --> 00:09:30.600
One will take you directly to the documentation
for that API and the full documentation viewer

00:09:30.600 --> 00:09:35.399
and the other one will take you to the
declaration in a system header file.

00:09:35.399 --> 00:09:39.600
So with that, let's show some of this in action.

00:09:39.600 --> 00:09:41.350
OK we have a simple project here.

00:09:41.350 --> 00:09:45.850
This is the example we'll be using
through this whole session is Zip browser

00:09:45.850 --> 00:09:50.269
which is available as a sample code from the ADC website.

00:09:50.269 --> 00:09:55.169
I'm just going to open up one of the documents.

00:09:55.169 --> 00:10:01.089
So you can see at the top of the window there's the file
navigator here, there's the window, the files that are open

00:10:01.090 --> 00:10:04.720
in this view, only 1 of them right now; the Function pop-up.

00:10:04.720 --> 00:10:08.160
You can bring those up with the keyboard too.

00:10:08.159 --> 00:10:10.919
Control 1 brings up the File menu.

00:10:10.919 --> 00:10:18.209
Control 2 brings up the Function pop-up and you
can type to select and go to somewhere in the file.

00:10:18.210 --> 00:10:24.350
So now I'm going to show a little bit about code completion.

00:10:24.350 --> 00:10:26.860
So let's go down just a little bit further here.

00:10:26.860 --> 00:10:36.080
Woooo. One of the easy ways to show off code completion
is just sort of reproducing a complex statement above.

00:10:36.080 --> 00:10:39.020
So I'm going to reproduce this statement here.

00:10:39.019 --> 00:10:42.480
So let's go ahead and just start typing self.

00:10:42.480 --> 00:10:47.120
Now of course I forgot this open square
brackets which I'm forgetting more

00:10:47.120 --> 00:10:50.350
and more these days actually because I can put them in.

00:10:50.350 --> 00:10:53.879
So that that works nicely.

00:10:53.879 --> 00:10:56.320
Let's go ahead and start typing.

00:10:56.320 --> 00:10:57.530
You clapped once already.

00:10:57.529 --> 00:11:00.559
Don't clap again.

00:11:00.559 --> 00:11:01.649
So present error.

00:11:01.649 --> 00:11:04.590
It's suggesting one of the options for present error.

00:11:04.590 --> 00:11:07.230
Let's look at that in the completion list.

00:11:07.230 --> 00:11:13.019
There's 2; the full method that
I actually want to insert here.

00:11:13.019 --> 00:11:17.990
Now if I hit the Tab key with the completion
list up here new in 3.2 is we complete

00:11:17.990 --> 00:11:22.779
to the sub the sub common sub string
for the items that are selected.

00:11:22.779 --> 00:11:28.069
So I actually want to select the other
one so we'll just go ahead and do that.

00:11:28.070 --> 00:11:33.640
So now we've got this message call
here that we've got to fill in.

00:11:33.639 --> 00:11:37.059
We've got a bunch of code completion place holders here.

00:11:37.059 --> 00:11:40.889
Also new in 3.2 is you can tab between them.

00:11:40.889 --> 00:11:42.009
There's a next...

00:11:42.009 --> 00:11:46.569
[ Applause ]

00:11:46.570 --> 00:11:49.160
>> The magic Tab key, man, my favorite key.

00:11:49.159 --> 00:11:54.469
So you can tab between them actually
Shift Tab goes backwards through them too.

00:11:54.470 --> 00:11:57.460
So let's go ahead and fill that one in.

00:11:57.460 --> 00:12:01.420
So E it turns out there's loads and loads
and loads of things that begin with E,

00:12:01.419 --> 00:12:04.029
you're probably not surprised by that right?

00:12:04.029 --> 00:12:10.809
But the next completion command is really
handy here because E error is a local variable;

00:12:10.809 --> 00:12:13.729
it's by far the most likely thing to insert here.

00:12:13.730 --> 00:12:15.840
So we'll just go ahead and hit Control.

00:12:15.840 --> 00:12:19.030
and insert error.

00:12:19.029 --> 00:12:21.939
So we'll go ahead and start typing a little bit more.

00:12:21.940 --> 00:12:28.010
Zip a Zip document browse document browse
I'll just hit Tab to complete that window

00:12:28.009 --> 00:12:34.379
and of course missing square bracket
we'll put that in and do a few more here.

00:12:34.379 --> 00:12:43.450
Nil zero and null and of course it corrects my
capitalization, that's what code completion is for.

00:12:45.250 --> 00:12:48.190
OK so those are the different 3 modes.

00:12:48.190 --> 00:12:51.730
Nothing really modal about it with code completion.

00:12:51.730 --> 00:12:56.350
Let's say we want to put this statement, let's write
some new code just as interesting as the old code.

00:12:56.350 --> 00:12:59.570
Put this statement inside of an S statement.

00:12:59.570 --> 00:13:08.760
So you could go ahead and type that, that works fine but
there's also a text macro for that and as I said it's

00:13:08.759 --> 00:13:15.700
down inside and let's even get through the hierarchal
menus and I've assigned a key binding for it already.

00:13:15.700 --> 00:13:21.740
So I'm just going to use the key binding and it
wraps whatever you have selected in the editor

00:13:21.740 --> 00:13:24.370
So we'll just fill fill that out.

00:13:24.370 --> 00:13:25.820
Whoops I hit Escape.

00:13:25.820 --> 00:13:30.670
OK so there's other things you can do with text macros.

00:13:30.669 --> 00:13:37.289
Let's say we want to if def out a block of code.

00:13:37.289 --> 00:13:39.919
So I also assigned a key binding for that, you guys

00:13:39.919 --> 00:13:44.559
if you were looking might have noticed
it and you can go ahead and wrap code.

00:13:44.559 --> 00:13:50.539
One of the cool things about text macros that are in
menus though is that you can assign more than 1 of them

00:13:50.539 --> 00:13:53.250
to the same menu item so that they cycle through those

00:13:53.250 --> 00:14:01.220
and so if I keep hitting Command Control 3 cause that's
my magic personal preference for this key binding.

00:14:01.220 --> 00:14:10.710
I can go and turn it into an F 0 block, an if def block,
an if block with some L's and back around to the beginning.

00:14:10.710 --> 00:14:14.300
So, so there's some text macros.

00:14:14.299 --> 00:14:19.829
OK the next thing I want to do
is show the incremental finder.

00:14:19.830 --> 00:14:21.480
So I'll go ahead and bring it up.

00:14:21.480 --> 00:14:24.710
Oh actually before I do that I want to show navigation.

00:14:24.710 --> 00:14:31.070
So let's go ahead and select some
stuff from the function pop-up.

00:14:31.070 --> 00:14:33.620
We'll do a command double-click.

00:14:33.620 --> 00:14:34.379
What's a good one?

00:14:34.379 --> 00:14:36.620
Read from URL so we'll Command double-click on that.

00:14:36.620 --> 00:14:39.629
We'll go to that method in here.

00:14:39.629 --> 00:14:42.029
You notice the button is indeed enabled.

00:14:42.029 --> 00:14:45.370
We can go back to where we were.

00:14:45.370 --> 00:14:49.610
Now there's key bindings for that.

00:14:49.610 --> 00:14:52.060
You don't have to use the buttons in the file navigator.

00:14:52.059 --> 00:14:54.139
Those menu items are in the View menu.

00:14:54.139 --> 00:14:56.049
Go back, go forward.

00:14:56.049 --> 00:15:01.449
But we still have the ability to go back and forth through
files and those you hold down the Shift key so if I hold

00:15:01.450 --> 00:15:03.600
down the Shift key you can see the menu items change.

00:15:03.600 --> 00:15:06.659
We only have 1 file open so they're disabled right now.

00:15:06.659 --> 00:15:10.860
But this is another feature; I mean this
has been around since you know the old Mac,

00:15:10.860 --> 00:15:14.060
Mac OS IX I don't know when it came in before then.

00:15:14.059 --> 00:15:18.409
But there's a number of menu items
that are like that that have options.

00:15:18.409 --> 00:15:23.419
Let's go down into the Find and you'll
see that the Find command if you hold

00:15:23.419 --> 00:15:26.719
down the Control key turns into Find and Replace.

00:15:26.720 --> 00:15:28.250
Let's bring that up.

00:15:28.250 --> 00:15:30.529
So that brings up the incremental Find vander.

00:15:30.529 --> 00:15:35.779
As we type we can show it highlighting things as we go.

00:15:35.779 --> 00:15:39.089
If you hit return it goes to the next items.

00:15:39.090 --> 00:15:41.830
Shift Return goes backwards through them.

00:15:41.830 --> 00:15:48.600
If you want to change the Find options those
are in the Menu inside the search field here.

00:15:48.600 --> 00:15:51.409
So all the all the options that
were there before are still here.

00:15:51.409 --> 00:15:55.870
If you want to do replacements those buttons are there.

00:15:55.870 --> 00:15:58.490
I brought this up in replace mode.

00:15:58.490 --> 00:16:04.269
But if you want to say make a selection replace only
the items within that selection you do that by holding

00:16:04.269 --> 00:16:09.039
down the option key and you can see the button
changes from replace all to end selection.

00:16:10.590 --> 00:16:14.910
OK with that, I'm going to just
switch this back to regular Find.

00:16:14.909 --> 00:16:21.769
So if you hit Tab that goes to the
current selected item, bring it up again,

00:16:21.769 --> 00:16:25.829
actually let's go somewhere else and bring it up again.

00:16:25.830 --> 00:16:29.470
If you hit Escape you go back to where
you were so if I went through those

00:16:29.470 --> 00:16:32.190
and hit escape it goes back to the old selection.

00:16:32.190 --> 00:16:39.330
So OK to review some of the shortcuts
go to Definition Command, double-click,

00:16:39.330 --> 00:16:42.220
bring up Quick Help, is option double-click.

00:16:42.220 --> 00:16:47.040
If you want to go directly to the
documentation viewer for for a symbol you hold

00:16:47.039 --> 00:16:49.209
down both Command and Option when you double-click.

00:16:49.210 --> 00:16:54.110
I showed you control 1 and control 2
for the file and that function pop-ups.

00:16:54.110 --> 00:16:58.909
Actually there's 3 more pop-ups in the
file navigator, maybe there's 4 I forget.

00:16:58.909 --> 00:17:05.289
They're all assigned actually to control number keys as
well so you can get to all of those through the keyboard.

00:17:05.289 --> 00:17:10.420
So the go back and go forward menus are command
option left and right arrow and previous

00:17:10.420 --> 00:17:15.490
and X file are the same thing only
holding down the Shift key.

00:17:15.490 --> 00:17:18.839
Incremental Find as you're typing it selects something.

00:17:18.839 --> 00:17:21.689
Hitting Return sequences through all of the results.

00:17:21.690 --> 00:17:23.970
Shift Return goes backwards.

00:17:23.970 --> 00:17:26.960
If you want to select the current result you just hit Tab.

00:17:26.960 --> 00:17:28.910
The finder the Find banner goes away.

00:17:28.910 --> 00:17:37.380
If you want to go back to where you were
before you started this search you hit Escape.

00:17:37.380 --> 00:17:41.620
Alright with that let's talk about customizing the editor.

00:17:41.619 --> 00:17:45.979
So I showed you some text macros in
action but let's show a little bit

00:17:45.980 --> 00:17:50.740
about how you define those and
we'll also talk about user scripts.

00:17:50.740 --> 00:17:55.640
So text macros are defined simply as property lists.

00:17:55.640 --> 00:17:58.090
Each text macro is a dictionary.

00:17:58.089 --> 00:18:06.549
So the different parts that you have to fill in,
there's each each text macro has a unique identifier.

00:18:06.549 --> 00:18:14.369
Now if you want you can reuse one of the unique
identifiers that's used by our built-in text macros

00:18:14.369 --> 00:18:17.899
and then you've overridden the built-in text macros.

00:18:17.900 --> 00:18:22.600
If you want the text macro to show
up in the menu you can set that.

00:18:22.599 --> 00:18:30.409
There's a name for the text macro which appears in
the menu item and in the code completion pop-up.

00:18:30.410 --> 00:18:34.290
What gets inserted that's kind
of important too, a text string.

00:18:34.289 --> 00:18:41.859
There's some variable substitution that's happening
here and the infamous organization name is one of them.

00:18:41.859 --> 00:18:48.549
You can set the organization name in the
Xcode UI, in the projects Get Info window

00:18:48.549 --> 00:18:53.029
and that's been in Xcode for a couple of releases now.

00:18:53.029 --> 00:19:02.329
Finally if you want text macro to be available in code
completion you need to set a code completion prefix for it.

00:19:02.329 --> 00:19:05.039
So these property list files.

00:19:05.039 --> 00:19:05.909
What do you do with them?

00:19:05.910 --> 00:19:12.790
Well you save them as files with a .xetxt macro extension.

00:19:12.789 --> 00:19:16.230
The best way to do text macros is
actually to look at what's built in.

00:19:16.230 --> 00:19:23.559
So we have a bunch of them, they sit inside of the
Xcode application bundle inside its plug-ins folder.

00:19:23.559 --> 00:19:29.960
So this textmacros.xe text macro is itself actually
a bundle and inside its resources directory is

00:19:29.960 --> 00:19:33.549
where you'll find all the text macros that are built in.

00:19:33.549 --> 00:19:36.200
When you install your own you put them

00:19:36.200 --> 00:19:41.710
into Xcode's Specifications Directory
down inside your Home Library Folder.

00:19:41.710 --> 00:19:48.480
OK next I want to talk a little bit about user scripts.

00:19:48.480 --> 00:19:51.049
So there's a Scripts menu in Xcode.

00:19:51.049 --> 00:19:54.649
There's a bunch of built-in user
scripts that are there by default.

00:19:54.650 --> 00:20:00.220
Some of them you use probably all the time and
didn't even realize they were scripts for commenting

00:20:00.220 --> 00:20:04.549
for instance, command/, that's a good one.

00:20:04.549 --> 00:20:10.849
So these scripts can act on the current selection in an
editor or they can act on the document that you're viewing

00:20:10.849 --> 00:20:16.250
or they can act on the current project or they can act
on Xcode or they can act on something else on the system.

00:20:16.250 --> 00:20:19.259
They don't actually have to be tied to anything.

00:20:19.259 --> 00:20:22.990
But the cool thing is you can edit them right in Xcode.

00:20:22.990 --> 00:20:29.049
There is at the bottom of that menu is the Edit User
Scripts menu item and that brings up this window here

00:20:29.049 --> 00:20:35.180
that on the left left is a representation
of the User Scripts menu

00:20:35.180 --> 00:20:41.600
and when you select a script on the right you can edit it.

00:20:41.599 --> 00:20:45.009
With that let's show some of that in action.

00:20:45.009 --> 00:20:51.589
[ Background sounds ]

00:20:51.589 --> 00:20:54.109
>> OK so here's the User Scripts menu.

00:20:54.109 --> 00:20:58.919
We'll go ahead straight down and
look at the user script editor.

00:20:58.920 --> 00:21:02.759
Make it a little bit bigger.

00:21:02.759 --> 00:21:06.099
You can see we have a bunch of built-in scripts.

00:21:06.099 --> 00:21:10.379
There's some very simple ones that do
very simple things as shell scripts.

00:21:10.380 --> 00:21:13.120
There's ones that do quite a bit more.

00:21:13.119 --> 00:21:16.609
You're never going to be able to see, that's
actually pretty small compared to some of them.

00:21:16.609 --> 00:21:23.439
But this one's interesting because it's it calls out 2
Xcode using Apple script, I'm not going to go into details,

00:21:23.440 --> 00:21:27.940
to get some information which it then
just uses in the shell script itself.

00:21:27.940 --> 00:21:32.400
There are a few scripts that use
Apple script directly and if you want

00:21:32.400 --> 00:21:38.560
to edit those Apple scripts you just click the button, takes
you to the Apple script editor and you can edit it there.

00:21:38.559 --> 00:21:40.559
We're not going to do that right now.

00:21:40.559 --> 00:21:46.200
And I'm going to go ahead and add a very
simple user script, a new shell script.

00:21:46.200 --> 00:21:48.960
Go ahead and change its name here.

00:21:51.750 --> 00:21:55.029
That's I am just going to look at the environment.

00:21:55.029 --> 00:21:59.389
I know that seems uninteresting but it's
what's in the environment that's interesting.

00:21:59.390 --> 00:22:05.280
So, so we'll look at the environment, we'll
sort it make it a little bit easier to look at.

00:22:05.279 --> 00:22:11.119
So as input to this script it takes the current selection,
that's actually important, the environment depends

00:22:11.119 --> 00:22:18.500
on what what you're selection is as you'll see and the
output we're just going to put that into a new document.

00:22:18.500 --> 00:22:24.269
So this is all live, so let's select
something here inside the editor.

00:22:24.269 --> 00:22:29.319
We'll bring up the script and it
was under text and show environment.

00:22:29.319 --> 00:22:32.309
So we now have this big list of
things that were in the environment.

00:22:32.309 --> 00:22:37.490
You can see that we put some interesting stuff in
there; the name of the file, the name of the project,

00:22:37.490 --> 00:22:43.049
lots of other standard stuff that's in your environment.

00:22:43.049 --> 00:22:49.149
There's a whole group of variables that
control the formatting that Xcode does.

00:22:49.150 --> 00:22:55.610
So this is used internally with Xcode's code completion,
how it formats spaces in between parameters say

00:22:55.609 --> 00:23:01.779
in function calls that you've inserted, and it's also used
by our built-in text macros, so we have a bunch of variables

00:23:01.779 --> 00:23:06.039
that are set there, you have access
to them in your user scripts as well.

00:23:06.039 --> 00:23:11.980
There's a few items that show what's currently
in the function pop-up which is kind of cool

00:23:11.980 --> 00:23:14.880
and down here there's the source context.

00:23:14.880 --> 00:23:23.470
So what this is is Xcode's editor keeps a tree,
the description of your file as you edit it

00:23:23.470 --> 00:23:26.350
and this is a description of what's in that tree.

00:23:26.349 --> 00:23:32.230
So we're currently the selection was inside an
identifier inside a bracket expression and a block

00:23:32.230 --> 00:23:37.110
and a method definition and inside
of a class implementation.

00:23:37.109 --> 00:23:39.519
So that's user scripts.

00:23:39.519 --> 00:23:41.329
You can use all of that stuff yourself.

00:23:41.329 --> 00:23:45.159
We totally even encourage you to write your own scripts.

00:23:45.160 --> 00:23:46.250
Cool stuff.

00:23:46.250 --> 00:23:52.950
OK back to the slides and that's all for me.

00:23:52.950 --> 00:24:00.009
Next we're going to talk about building and debugging
and for that I'm going to bring up Chris Hanson.

00:24:00.009 --> 00:24:05.269
[ Applause ]

00:24:05.269 --> 00:24:06.240
>> Thank you Dave.

00:24:06.240 --> 00:24:13.089
I'm Chris Hanson I'm also an engineer on the Xcode
IDE team and first I'm going to talk with you

00:24:13.089 --> 00:24:18.220
about building your applications and how
you can customize how Xcode does that.

00:24:18.220 --> 00:24:23.500
We're going to talk a little bit about the
process Xcode goes through to build your apps

00:24:23.500 --> 00:24:26.569
and the customization points within that process.

00:24:26.569 --> 00:24:31.189
We're going to talk about how you can make your
builds faster by leveraging Xcode's parallel

00:24:31.190 --> 00:24:33.799
and distributive build capabilities and we're going to talk

00:24:33.799 --> 00:24:37.629
about how you can automate your
builds for continuous integration.

00:24:38.750 --> 00:24:43.460
But first we really need to understand
how Xcode builds your software.

00:24:43.460 --> 00:24:50.140
Now I often hear people talk about building their projects
but in Xcode a project doesn't really build anything.

00:24:50.140 --> 00:24:51.730
It's just a container.

00:24:51.730 --> 00:24:56.980
It's more like a solution or a
workspace in other IDE's terms.

00:24:56.980 --> 00:25:03.710
It's targets within a project that actually build your
products like applications, plug-ins or frameworks

00:25:03.710 --> 00:25:10.590
and these targets are themselves composed of build phases
that structure the steps that your build goes through,

00:25:10.589 --> 00:25:18.470
build rules that determine how individual things in your
target are built and build settings that act as the knobs

00:25:18.470 --> 00:25:26.370
and switches that determine the exact settings
that say compilers and linkers are passed by Xcode.

00:25:26.369 --> 00:25:33.979
And a little bit more about these build settings; we
all know that they're just key value pairs that act

00:25:33.980 --> 00:25:40.309
as parameters to your build but they're
configured in configurations on a per layer basis.

00:25:40.309 --> 00:25:47.740
So Xcode actually has multiple layers: a target layer,
a project layer and a default layer for build settings.

00:25:47.740 --> 00:25:54.400
And build settings at the target layer
override build settings at the project layer

00:25:54.400 --> 00:25:57.519
which in turn override Xcode's default values.

00:25:57.519 --> 00:26:03.379
And you can learn a lot more about build settings and how
you can set them and how you can have them interrelate

00:26:03.380 --> 00:26:08.430
in the Xcode Build Settings Reference
and Xcode Build System Guide.

00:26:08.430 --> 00:26:15.330
When you create a new target you get
a bunch of build phases by default.

00:26:15.329 --> 00:26:22.329
One of these is a copy bundle resources build phase
which is really just a special kind of copy files phase

00:26:22.329 --> 00:26:25.939
and what it does is it takes assets
that you've added to your target

00:26:25.940 --> 00:26:29.430
and copies them into your product's resources directory.

00:26:29.430 --> 00:26:31.320
Very simple.

00:26:31.319 --> 00:26:39.339
But you can also add other copy files build phases
to your target either for organizational purposes

00:26:39.339 --> 00:26:43.240
or because you want to copy something somewhere else.

00:26:43.240 --> 00:26:47.759
For example if you want to embed a framework in
your applications frameworks directory instead

00:26:47.759 --> 00:26:53.519
of in its resources directory you would do that with a
separate copy files build phase and this is the perfect way

00:26:53.519 --> 00:26:57.670
to embed frameworks and plug-ins within your applications.

00:26:57.670 --> 00:27:02.289
We've also generally seen people
use run script build phases.

00:27:02.289 --> 00:27:06.839
For example this is how unit tests are
run through the Xcode build system.

00:27:06.839 --> 00:27:14.539
They let you run arbitrary tools and scripts as part of your
build and when these tools are run Xcode will parse error

00:27:14.539 --> 00:27:19.700
and warning information out from their standard output
and standard error and it will actually display it

00:27:19.700 --> 00:27:25.740
in the Build Results window just like it
displays compiler warnings and errors.

00:27:25.740 --> 00:27:33.700
But a little known bit about the run script build phase
is that you can also specify inputs and outputs to them

00:27:33.700 --> 00:27:37.870
that allow them to participate
in Xcode's dependency management.

00:27:37.869 --> 00:27:45.359
That means that if a build if a run script build
phase is specified to generate a particular output

00:27:45.359 --> 00:27:52.169
and that output is already up to date
Xcode won't bother to run that build phase.

00:27:52.170 --> 00:27:59.710
So if you have a run script build phase that takes a
long time it's worth it to set up the inputs and outputs

00:27:59.710 --> 00:28:02.890
so that it'll only run when it's actually necessary.

00:28:02.890 --> 00:28:11.720
And of course you probably don't want to put a huge amount
of script code into the get info panel for a build phase.

00:28:11.720 --> 00:28:19.250
So as a pro tip you can keep your scripts themselves
in separate files that you've added to your project

00:28:19.250 --> 00:28:23.660
and just invoke them from within your run script build phase

00:28:23.660 --> 00:28:28.640
and this'll actually let you use Xcode's
editor features on your shell script.

00:28:28.640 --> 00:28:34.070
It's not just for objective C C and C + + code.

00:28:34.069 --> 00:28:37.519
Now sometimes you might want to do
something a little bit more open ended.

00:28:37.519 --> 00:28:44.589
Instead of just performing some scripted command
let's say you get a bunch of art assets as postscript

00:28:44.589 --> 00:28:50.319
or other file format from your artist and you
want those to go into your resources directory

00:28:50.319 --> 00:28:54.139
in a format that you can use for your tool bar.

00:28:54.140 --> 00:29:01.000
Well you could sit there at the command line
and process them all yourself and only check

00:29:01.000 --> 00:29:08.509
in your processed art resources but what if your
artist gives you some more assets in that same format.

00:29:08.509 --> 00:29:10.190
You have to process them again.

00:29:10.190 --> 00:29:15.920
You could write a run script build phase that
processes everything of that type and dumps it all

00:29:15.920 --> 00:29:22.680
into your resources folder but without setting up inputs and
outputs you're actually doing a lot of work on every build.

00:29:22.680 --> 00:29:30.860
What you can do is set up a custom build rule that
tells Xcode if I have say a .PS file I know how

00:29:30.859 --> 00:29:35.750
to turn it into a .PDF file and here's how.

00:29:35.750 --> 00:29:39.589
And that will let you run an arbitrary
script to perform that transformation

00:29:39.589 --> 00:29:44.689
and that transformation itself participates
in Xcode's dependency management.

00:29:44.690 --> 00:29:50.080
So it'll only happen when a resource
in your built product is out of date

00:29:50.079 --> 00:29:53.269
and again Xcode will parse error and warning information.

00:29:53.269 --> 00:30:01.200
Now you don't just get the opportunity
to run 1 phase that way.

00:30:01.200 --> 00:30:09.410
If you specify a build rule whose output is something
Xcode knows how to process Xcode will process it.

00:30:09.410 --> 00:30:15.810
So for example you can take a CSV file that contains
level information for your iPhone game and rather

00:30:15.809 --> 00:30:19.700
than embedding it in your application
as a resource you could write a script

00:30:19.700 --> 00:30:26.850
to generate some objective C source code from that
CSV file so it's built right into your application

00:30:26.849 --> 00:30:33.509
at which point Xcode will see that the
script generated an objective C source file,

00:30:33.509 --> 00:30:39.769
say I know what to do with that source file, I have
a build rule for that, and it'll compile and link it

00:30:39.769 --> 00:30:43.220
into your application automatically
with no extra work on your part.

00:30:43.220 --> 00:30:47.700
You don't even have to add that
generated source file to your project.

00:30:47.700 --> 00:30:52.039
And this works for anything Xcode
knows how to build using build rules.

00:30:52.039 --> 00:30:56.680
It isn't just for objective C source
code or even for source code.

00:30:56.680 --> 00:31:05.029
And of course you'll probably instead of writing your script
in that small Get Info window you'll probably just want

00:31:05.029 --> 00:31:08.940
to have it call out to a script
that you've added to your project.

00:31:08.940 --> 00:31:12.670
That way not only can you use Xcode's
editor features but changes

00:31:12.670 --> 00:31:19.160
to the script won't result in SCM
changes to your project file.

00:31:19.160 --> 00:31:26.240
Now to make your builds go faster in addition to setting
up appropriate dependency information on your build rules

00:31:26.240 --> 00:31:32.390
and run script build phases you can also take
advantage of multiple cores on your machine.

00:31:32.390 --> 00:31:37.030
By default Xcode knows how to compile
multiple files at once.

00:31:37.029 --> 00:31:43.730
And in Xcode 3.2 we've done a lot of tuning and
leveraging of Grand Central Dispatch to ensure

00:31:43.730 --> 00:31:47.789
that Xcode only compiles a sensible
number of files at a time.

00:31:47.789 --> 00:31:54.990
Just because you have an 8 core machine doesn't mean
it always makes sense to compile 8 source code files

00:31:54.990 --> 00:31:58.660
at once especially when you're
dealing with heavily templated C ++

00:31:58.660 --> 00:32:02.029
or the extremely memory intensive compilations.

00:32:02.029 --> 00:32:07.250
Xcode will monitor your system load,
your memory pressure and things like that

00:32:07.250 --> 00:32:11.519
and decide how many compiles to issue based on that.

00:32:11.519 --> 00:32:14.769
But of course that only applies within 1 target.

00:32:14.769 --> 00:32:17.210
What if you have multiple targets that you're building?

00:32:17.210 --> 00:32:22.519
You don't always want to wait for 1 target to
finish building before going onto the next one.

00:32:22.519 --> 00:32:26.750
So you have to meet Xcode half
way if you want to speed that up

00:32:26.750 --> 00:32:30.599
and actually specify the dependencies between your targets.

00:32:30.599 --> 00:32:37.959
But once you've told Xcode what targets depend
on each other in their get info panels you can go

00:32:37.960 --> 00:32:44.480
to your project info panel and turn on
build independent targets in parallel,

00:32:44.480 --> 00:32:50.400
at which point while you're linking
1 target, Xcode will just go ahead

00:32:50.400 --> 00:32:59.400
and start compiling the next independent target and it
will actually order the compilations and builds of all

00:32:59.400 --> 00:33:04.390
of the targets in your project that are
depended on by the target that you're building

00:33:04.390 --> 00:33:06.710
so that they happen as quickly as possible.

00:33:06.710 --> 00:33:16.539
And finally most of us are on networks, have multiple Macs
around and they're not always as busy as our machine is.

00:33:16.539 --> 00:33:25.240
So Xcode lets you turn on distributive builds
through Bonjour or through specifying build hosts

00:33:25.240 --> 00:33:32.420
and lets you take advantage of multiple cores
on your network, not just on your local Mac.

00:33:32.420 --> 00:33:40.720
If you're working in a team situation you'll generally want
to have a continuous integration machine always checking out

00:33:40.720 --> 00:33:46.079
and building the latest code from your
source control and management system.

00:33:46.079 --> 00:33:51.669
We provide a command line tool Xcode build
that can build targets within an Xcode project

00:33:51.670 --> 00:33:55.240
without scripting the Xcode UI and this can run headless.

00:33:55.240 --> 00:33:58.910
So you can run this on a Mac mini with no display.

00:33:58.910 --> 00:34:03.029
You can run this on a X serve, a
rack of X serves, it's all up to you.

00:34:03.029 --> 00:34:09.320
It lets you specify at the command line what
target, what configuration, what SDK to use

00:34:09.320 --> 00:34:14.730
and it lets you override things
like SDK's and build settings.

00:34:14.730 --> 00:34:18.579
It also lets you say I'd like to
distribute builds to Bonjour

00:34:18.579 --> 00:34:23.150
or I'd like to distribute builds to a specific set of hosts.

00:34:23.150 --> 00:34:27.860
For example if you're doing continuous integration and
you want your continuous integration builds to turn

00:34:27.860 --> 00:34:34.130
around fast you might have a few Mac minis
just sitting in a closet as a build farm

00:34:34.130 --> 00:34:43.119
and you're continuous integration system will
only farm out to those minis rather than bogging

00:34:43.119 --> 00:34:45.250
down all of the machines on your network.

00:34:45.250 --> 00:34:49.710
And here we've just got an example
of how you would invoke Xcode build.

00:34:49.710 --> 00:34:56.769
We're building the Zip browser target inside the Zip
browser project in the release configuration but instead

00:34:56.769 --> 00:35:03.809
of building it fully universal we're just
telling it to build for 32 and 64-bit Intel.

00:35:04.880 --> 00:35:11.840
So now I'll show you a quick demo of some of the features
of the Xcode build system and how you can customize them.

00:35:11.840 --> 00:35:17.920
I'm going to open a new version of Zip
browser that I've added Apple Help to.

00:35:17.920 --> 00:35:24.400
Now Apple Help works by putting a help
folder in your resources folder with an index

00:35:24.400 --> 00:35:27.780
in it that's generated by a command line tool.

00:35:27.780 --> 00:35:32.100
So of course I've had to add this
folder as a folder reference,

00:35:32.099 --> 00:35:37.199
and you can see that because it's
blue and not yellow, to my resources.

00:35:37.199 --> 00:35:45.579
And to build it I'm also adding it to
my copy bundle resources build phase.

00:35:45.579 --> 00:35:53.699
So I'm just going to open my build results
panel and start building and set it

00:35:53.699 --> 00:35:57.230
to show all messages and hide this editor.

00:35:57.230 --> 00:36:04.539
And you can see that this copy bundle
resources phase is copying the folder.

00:36:04.539 --> 00:36:10.469
You can also see that it's running that I'm running
a custom shell script at the end of the build.

00:36:10.469 --> 00:36:13.719
This script is this run script build phase.

00:36:13.719 --> 00:36:19.589
I'm going to get info on it and zoom in a
little bit so I can see what the script is.

00:36:19.590 --> 00:36:26.220
But like I've said in the pro tip this script
just calls out to a script that's in my project.

00:36:26.219 --> 00:36:35.039
I'll close that and zoom back out and look under my
scripts group and I have an index help.sh script in here

00:36:36.650 --> 00:36:41.070
that just takes some build settings from
the environment which is how they're passed

00:36:41.070 --> 00:36:46.610
to run script build phases and tools in general.

00:36:46.610 --> 00:36:55.620
Changes into my built products localized resources
directory and then just runs the help indexing utility

00:36:55.619 --> 00:36:58.739
on my help folder to generate a help index.

00:36:58.739 --> 00:37:06.009
And if I run my project that I've just built
you can see that I have not only a Help menu

00:37:06.010 --> 00:37:15.500
but that I actually have Quick Online Help and we can talk
a little bit about customizing your debugging experience.

00:37:15.500 --> 00:37:20.289
Our debugger user interface is fairly customizable

00:37:20.289 --> 00:37:26.269
so you can see exactly what you want
to see and how you want to see it.

00:37:26.269 --> 00:37:34.590
We also let you define data formatters for your own types
so you can see just the information that's important

00:37:34.590 --> 00:37:43.059
without having to constantly twist
down into your your variables display.

00:37:43.059 --> 00:37:50.909
We give you executables through which you can customize
how Xcode runs your application either through run or debug

00:37:50.909 --> 00:37:56.460
and we're going to talk a little bit about the access
that Xcode provides to the GBD command line debugger.

00:37:56.460 --> 00:38:07.920
So in configuring the Xcode debugger interface we've
generally seen demos of the in-editor debugging controls.

00:38:07.920 --> 00:38:15.789
These let you just start debugging
regardless of where you are while your editing

00:38:15.789 --> 00:38:19.579
without taking you out of the editing experience.

00:38:19.579 --> 00:38:26.549
They just put up a bar across the top of your editor
with the most used debugger controls including controls

00:38:26.550 --> 00:38:32.740
that let you see what the stack is at any point where
you're stopped and to see what threads are running.

00:38:32.739 --> 00:38:40.149
But if you also want to see a full set of variables rather
than just hover over the variables you want to inspect

00:38:40.150 --> 00:38:47.090
or if you want to see the stack frame
the stack trace always laid out for you,

00:38:47.090 --> 00:38:50.160
you can still use our traditional debugger.

00:38:51.530 --> 00:38:56.360
But most of us have wide screens these days.

00:38:56.360 --> 00:39:05.809
Even WWDC now has wide screens in all of the rooms and a
horizontal debugger display where you have the variables

00:39:05.809 --> 00:39:09.940
in the stack trace above the source code that you're trying

00:39:09.940 --> 00:39:14.099
to debug don't really give you a lot
of screen real estate to work with.

00:39:14.099 --> 00:39:22.170
So we also provide a vertical debugger layout
where we put your source code side by side

00:39:22.170 --> 00:39:24.820
with your stack trace and with your variables.

00:39:24.820 --> 00:39:31.769
Of course you don't just have to look at your source
code sometimes you want to look at both your source code

00:39:31.769 --> 00:39:39.480
and the generated assembly code and sometimes like if you're
debugging heavily optimized code you just want to look

00:39:39.480 --> 00:39:45.070
at assembly and you can do that too in Xcode's debugger.

00:39:45.070 --> 00:39:53.860
Now Xcode includes a technology called data
formatters that let you see a summary of information

00:39:53.860 --> 00:39:58.070
in a single line about a variable of a specific type.

00:39:58.070 --> 00:40:03.130
And Xcode includes data formatters
for a lot of common Cocoa types.

00:40:03.130 --> 00:40:07.450
But it obviously won't include
formatters for your own types.

00:40:07.449 --> 00:40:13.329
So we provide a way for you to just
define these as simple strings.

00:40:13.329 --> 00:40:23.110
So here you can see a debug data formatter where
inside some curly braces we have a debugger expression

00:40:23.110 --> 00:40:33.010
in the command language that uses $var to stand in for the
variable that it's going to format and a :S at the very end

00:40:33.010 --> 00:40:37.430
to say that it goes in the summary
field in the debugger's variable view.

00:40:37.429 --> 00:40:45.069
And you can learn a lot more about the specific details
of the syntax of these in the Xcode Debugging Guide.

00:40:45.070 --> 00:40:48.289
But here you can see what they look like in action.

00:40:48.289 --> 00:40:56.630
I've just Control clicked on this particular
variable and chosen Edit Summary Format

00:40:56.630 --> 00:41:03.539
which is how you can edit a data formatter and
the summary display column becomes editable

00:41:03.539 --> 00:41:07.369
and lets me enter in a data formatter.

00:41:07.369 --> 00:41:16.199
I've just entered in a data formatter that sends name to
the variable and once I hit Return to accept this input,

00:41:16.199 --> 00:41:24.289
the debugger executes the data formatter in the context
of my application and shows whatever it returned.

00:41:24.289 --> 00:41:29.980
Now sometimes just evaluating a single expression
isn't enough especially if you're working

00:41:29.980 --> 00:41:34.070
in a heavily multi-threaded, multi-core applications.

00:41:34.070 --> 00:41:43.460
So we also provide a plug-in interface inside xcode.app.

00:41:43.460 --> 00:41:50.539
Within our GBMI debugging plug-in there's
a header file dataformater plugin.h

00:41:50.539 --> 00:41:57.360
that shows you exactly how you can create
these debug data formatter plug-ins.

00:41:57.360 --> 00:42:01.289
Now these don't run within Xcode,
they're not Xcode plug-ins.

00:42:01.289 --> 00:42:08.409
What they are are plug-ins loaded by the
debugger at debug time into your application.

00:42:08.409 --> 00:42:14.809
So they have access to your application's
full state through normal language mechanisms.

00:42:14.809 --> 00:42:21.849
And because they're running inside your application while
you're debugging it you do have to be extremely careful

00:42:21.849 --> 00:42:26.150
in them and the header file gives
you the gory details of how you have

00:42:26.150 --> 00:42:29.380
to be careful about things like allocating memory.

00:42:29.380 --> 00:42:34.800
But on the other hand because they're running in the
context of your application you can take advantage

00:42:34.800 --> 00:42:42.250
of your intimate knowledge of your application state to
do things like only look at variables when it's safe to do

00:42:42.250 --> 00:42:47.309
so from a multithreading perspective; for
example when the right locks are held.

00:42:48.380 --> 00:42:59.090
Xcode knows how to run your application for both
running and debugging through what we call executables.

00:42:59.090 --> 00:43:06.079
These will show up under the targets group in a separate
executables group and the Xcode groups and files tree

00:43:06.079 --> 00:43:14.319
by default and they let you tweak how Xcode runs and debugs
your app by letting you specify command line arguments,

00:43:14.320 --> 00:43:17.220
environment variables and a working directory.

00:43:17.219 --> 00:43:20.869
This is how you set up debugging
for your unit tests and it's also

00:43:20.869 --> 00:43:25.869
on Mac OS X how you can set up remote debugging over SSH.

00:43:25.869 --> 00:43:32.889
Finally, Xcode provides a debugger console that doesn't
just provide you access to your application's standard input

00:43:32.889 --> 00:43:37.509
and output but also provides you access
to the full GDB command language.

00:43:37.510 --> 00:43:42.410
So you can do anything in this console
that you can do in GDB generally

00:43:42.409 --> 00:43:46.469
and you can create macros for really complex queries.

00:43:46.469 --> 00:43:57.639
Here I'm showing Xcode's provided info GC routes macro
which simply examines the objects that still have references

00:43:57.639 --> 00:44:02.359
to another object while you're running
under objective C garbage collection.

00:44:02.360 --> 00:44:12.390
So let's see a quick demo of some of the debugging features
in Xcode 3.2 and I'm going to open yet another version

00:44:12.389 --> 00:44:17.009
of Zip browser, this time one that
I've added some unit tests to.

00:44:17.010 --> 00:44:22.750
[ Background sounds ]

00:44:22.750 --> 00:44:24.260
>> Now I'm going to bring up the build panel.

00:44:24.260 --> 00:44:27.040
I've just used the Command Shift B shortcut to do that.

00:44:27.039 --> 00:44:33.880
I'm going to get rid of the in build panel
editor I'm just going to click Build.

00:44:33.880 --> 00:44:37.610
To build and run my unit tests.

00:44:37.610 --> 00:44:44.059
So of course it built my it built my application first
and then it's running it's building and running my tests

00:44:44.059 --> 00:44:51.519
and you can see here new in Xcode 3.2 we're showing
the output of the unit tests in the build results

00:44:51.519 --> 00:44:54.800
without forcing you to look through a transcript.

00:44:54.800 --> 00:44:57.760
You can also see that we have a failing test here

00:44:57.760 --> 00:45:03.910
and not only is it a failing test it's a failing test whose
failure message extends a little bit far to the right.

00:45:03.909 --> 00:45:12.629
But we have this convenient More link that if we
click it, it expands our result to multiple lines

00:45:12.630 --> 00:45:17.559
and of course we can get rid of that by pressing
Less, I'm going to keep showing the whole thing.

00:45:17.559 --> 00:45:22.279
And of course once we click a result
it also brings up the embedded editor

00:45:22.280 --> 00:45:27.810
because we have Xcode's auto open
embedded editors setting turned on.

00:45:27.809 --> 00:45:33.210
This will be a very simple test to just fix but I'm
going to actually show you how I would debug it.

00:45:33.210 --> 00:45:36.679
I'm going to set a break point right here.

00:45:36.679 --> 00:45:43.440
I'm going to close the window though and show
you the executable that I set up and you can see

00:45:43.440 --> 00:45:49.329
that I've added 1 argument for unit
testing and a few environment variables

00:45:49.329 --> 00:45:52.940
and these are documented on the ADC website.

00:45:52.940 --> 00:46:04.579
Now if I just bring up the debugger I'm going to make this
window a little bit larger and debug with break points on.

00:46:04.579 --> 00:46:08.619
I'm going to stop at my break point.

00:46:08.619 --> 00:46:15.469
I can see I've got my stack trace over here, my
variables over here and I can also hover over my variable

00:46:15.469 --> 00:46:22.549
and I can see that it's untitled with a U but what
I'm comparing it against is untitled with a u.

00:46:22.550 --> 00:46:28.539
That's obviously going to fail so I'm
just going to stop this, fix it, Save,

00:46:28.539 --> 00:46:32.349
Build and Debug and I get right back to where I was.

00:46:32.349 --> 00:46:39.019
If I step over it I can see in my console
that I don't have any test failures.

00:46:39.019 --> 00:46:47.039
And we can see in the summary format
if I just build and debug 1 more time

00:46:47.039 --> 00:46:50.079
that name actually has a summary of untitled.

00:46:50.079 --> 00:46:57.400
If I chose at its summary format we can actually see the
data formatter that's invoked to produce that output.

00:46:57.400 --> 00:47:05.010
And Andrew is going to tell us a little bit
about source control management and snapshots.

00:47:05.010 --> 00:47:12.540
[ Applause ]

00:47:12.539 --> 00:47:18.759
>> OK. So I have 3 things I'm going to talk
about in my portion of the presentation today.

00:47:18.760 --> 00:47:24.670
I'm going to start with the SCM autoconfiguration feature.

00:47:24.670 --> 00:47:29.329
Then I'm going to go on to the multiple project
roots feature and finally I'm going to talk

00:47:29.329 --> 00:47:36.799
about 2 different kinds of visual comparisons
you can do with snapshots and Desk CM.

00:47:36.800 --> 00:47:42.910
So we'll start with autoconfiguration and it's easier
just to show you so we'll go straight to the demo.

00:47:44.469 --> 00:47:49.839
So helping me with the demos today is
Justin Gareau, Xcode QA.

00:47:49.840 --> 00:47:54.150
OK so in order to use the SCM autoconfiguration
feature we have to turn it on.

00:47:54.150 --> 00:47:57.090
So we'll show you where to find that right now.

00:47:57.090 --> 00:48:05.269
Go to Execute Preferences, scroll over to
the SCM pane then select the Options tab

00:48:05.269 --> 00:48:08.929
and there's the check box for configure SCM automatically.

00:48:08.929 --> 00:48:10.269
So let's check that.

00:48:10.269 --> 00:48:12.579
We can just click OK.

00:48:12.579 --> 00:48:17.090
So now let's open a project that's
been checked out from a SCM repository.

00:48:17.090 --> 00:48:27.980
For that we'll go to another version of our Zip
browser project and all we need to do is open it.

00:48:27.980 --> 00:48:30.130
OK see if you can make the dialogue there a little bigger.

00:48:30.130 --> 00:48:37.450
You can see that when we open a project that's been
checked out from a repository in this case Xcode prompts us

00:48:37.449 --> 00:48:44.769
for the fact that it wants to add information
about that repository to Xcode's preferences.

00:48:44.769 --> 00:48:48.190
You can see that Xcode realizes
it's a subversion repository.

00:48:48.190 --> 00:48:54.940
Xcode also supports CVS and Perforce and there's some
other information about it as well that Xcode knows.

00:48:54.940 --> 00:49:00.579
Let's just click Create there and we can make
it smaller again and you can see if we go back

00:49:00.579 --> 00:49:06.969
to the Preferences window that Xcode has
added information about that repository

00:49:06.969 --> 00:49:11.509
to our repository configurations
list and so we can click OK there.

00:49:11.510 --> 00:49:19.940
And then the project itself has been set up to use SCM from
this repository and also as a convenience the SCM column

00:49:19.940 --> 00:49:24.550
in the groups and files tree of
the project has been made visible.

00:49:24.550 --> 00:49:29.430
OK, so the second thing I'd like to talk
about is multiple project roots in Xcode.

00:49:29.429 --> 00:49:35.349
This is the multiple aspect of it is
new in Snow Leopard and Xcode 3.2.

00:49:35.349 --> 00:49:40.299
But in order to explain why multiple
roots are a big deal I need

00:49:40.300 --> 00:49:45.019
to first start answering the question
well what is a project root?

00:49:45.019 --> 00:49:49.030
So a project root is quite simply a directory on disk;

00:49:49.030 --> 00:49:54.810
a directory that represents your project,
that contains your entire project.

00:49:54.809 --> 00:50:01.710
The project file, your source code
files, your resource files, everything.

00:50:01.710 --> 00:50:04.269
Now why would we need this sort of a concept?

00:50:04.269 --> 00:50:12.690
We need it because of some features that were added or
revamped in Xcode 3.0 and these features operate on a file

00:50:12.690 --> 00:50:16.340
and directory level instead of on a project level.

00:50:16.340 --> 00:50:18.410
Source control in snapshots we're talking about today.

00:50:18.409 --> 00:50:26.170
The project Find Symbol option you can try for
yourself but we won't talk about it very much today.

00:50:26.170 --> 00:50:32.789
So, to sum up, a project root is a directory
containing all the files in your project used

00:50:32.789 --> 00:50:36.599
by these features in Xcode and its drop dead easy to use.

00:50:36.599 --> 00:50:44.579
You've probably used it yourself without knowing it if
you've used SCM or snapshots in Xcode 3.0 or greater

00:50:44.579 --> 00:50:49.929
and that's because the default value for
your project root which is just the directory

00:50:49.929 --> 00:50:54.509
that contains your project, is
usually all you need by default.

00:50:55.860 --> 00:50:59.309
So why would you want to use multiple project roots then?

00:50:59.309 --> 00:51:02.909
To explain that I'm going to show you a particular scenario.

00:51:02.909 --> 00:51:07.440
In fact a directory layout that should
be familiar to many of you already.

00:51:07.440 --> 00:51:11.289
It's the layout you use for cross platform efforts.

00:51:11.289 --> 00:51:12.860
Now let's go through this.

00:51:12.860 --> 00:51:16.280
The very top level directory contains
all of the subdirectories.

00:51:16.280 --> 00:51:20.790
There's also a common directory for
cross platform logic or utilities

00:51:20.789 --> 00:51:23.880
and then there are the directories
for each of the platforms.

00:51:23.880 --> 00:51:28.079
In our case when you're using Xcode the
one you care about is the Mac platform.

00:51:28.079 --> 00:51:34.039
But you would also have a directory set up like this
if you're doing Mac and iPhone development together.

00:51:34.039 --> 00:51:41.920
Now if you can only set 1 root for your project and you
want to operate on the 2 directories that we care about,

00:51:41.920 --> 00:51:47.400
Common and Mac, you need to set that root to the
very top level directory, the source directory.

00:51:47.400 --> 00:51:50.680
But that means that all of those
operations would take place on all

00:51:50.679 --> 00:51:54.279
of the subdirectories, even the ones you don't care about.

00:51:54.280 --> 00:51:59.670
So for multiple roots you can say well I
want Common and I want Mac and that all

00:51:59.670 --> 00:52:05.380
of those operations would just take place on them; check
outs, making a snapshot, and you wouldn't even have

00:52:05.380 --> 00:52:10.550
to have the other directories on your computer at the time.

00:52:10.550 --> 00:52:15.390
OK, so that's multiple project
roots so let's see them in action.

00:52:15.389 --> 00:52:19.849
We'd like to add some additional project
roots to our Zip browser project.

00:52:19.849 --> 00:52:22.489
In order to do that we'll bring up the Project Info window.

00:52:22.489 --> 00:52:32.219
You can make that a little bigger there and that will
let us see the project roots UI for the window here.

00:52:32.219 --> 00:52:34.949
You can see there's an area for roots available.

00:52:34.949 --> 00:52:39.529
There's only 1 there right now and there's
also the button for a configure roots and SCM.

00:52:39.530 --> 00:52:44.890
Let's press that now and that brings up a sheet which
lists all of the project roots for your project.

00:52:44.889 --> 00:52:46.690
We've only got the 1 right now; the default.

00:52:46.690 --> 00:52:52.900
We're going to add some extra ones, we'll click the OK
button or the Push button there and we need to navigate

00:52:52.900 --> 00:52:58.820
to our to the same directory where we have our Zip browser
project and that has some other directories in there

00:52:58.820 --> 00:53:01.600
for sample files we might use for a demo.

00:53:01.599 --> 00:53:04.059
JAR files and Zip files.

00:53:04.059 --> 00:53:07.360
Let's select the JAR files directory and open that.

00:53:07.360 --> 00:53:13.769
And you can see that brings up another dialogue, that's
because the JAR files directory was actually checked

00:53:13.769 --> 00:53:16.420
out from a second repository, different than the first one.

00:53:16.420 --> 00:53:21.619
That's one of the things that's possible with multiple roots
and it has some information there about the new repository.

00:53:21.619 --> 00:53:28.250
Let's click Create and now we see that we've added
another repository configuration to our preferences.

00:53:28.250 --> 00:53:29.469
Let's click OK there.

00:53:29.469 --> 00:53:32.119
OK so we have a second root.

00:53:32.119 --> 00:53:38.170
Now let's add a third root for our
Zip files directory of sample files.

00:53:38.170 --> 00:53:43.639
You can see that this time when we added the root
we weren't prompted again because Xcode already knew

00:53:43.639 --> 00:53:48.679
about that second repository and
could just apply it to the new root.

00:53:48.679 --> 00:53:50.289
[Cough] Excuse me.

00:53:50.289 --> 00:53:52.579
So we click OK there.

00:53:52.579 --> 00:53:56.029
OK now there's 2 things to note in the UI here.

00:53:56.030 --> 00:53:59.940
One is that we now have several
roots listed instead of just one.

00:53:59.940 --> 00:54:06.760
The second thing is that there's now a warning about
our project format and this is because the feature

00:54:06.760 --> 00:54:11.710
of multiple project roots is only
available in Xcode 3.2 file format.

00:54:11.710 --> 00:54:14.440
But we're still using 3.1 format.

00:54:14.440 --> 00:54:20.019
So we need to upgrade that to 3.2
and that makes the warning go away.

00:54:20.019 --> 00:54:22.059
OK so we can close that.

00:54:22.059 --> 00:54:29.259
OK so the third thing I'm going to talk
about today are 2 kinds of file comparisons.

00:54:29.260 --> 00:54:36.200
1, snapshots and NIV comparisons and
2, SCM and project file comparisons.

00:54:36.199 --> 00:54:37.009
Excuse me.

00:54:37.010 --> 00:54:48.540
[ Background sounds ]

00:54:48.539 --> 00:54:52.619
>> OK so before we can tell you about [cough] excuse me.

00:54:52.619 --> 00:54:58.219
Snapshots and NIV comparisons we need to make sure
that we can answer the question what are snapshots?

00:54:58.219 --> 00:55:01.829
How many of you have used snapshots in Xcode?

00:55:01.829 --> 00:55:03.119
OK so some of you.

00:55:03.119 --> 00:55:05.989
Not necessarily a whole lot.

00:55:05.989 --> 00:55:11.319
Snapshots were introduced in Xcode 3.0 and we made
a lot of stability improvements to them in 3.2.

00:55:11.320 --> 00:55:15.130
If you haven't used them already I urge you try them out.

00:55:15.130 --> 00:55:21.710
But to understand what snapshots are
you need to think about undo and redo.

00:55:21.710 --> 00:55:29.659
These are things you do every day in Xcode documents
and documents in other places in OS X but the key thing

00:55:29.659 --> 00:55:33.219
about them is that they only work on 1 file at a time.

00:55:33.219 --> 00:55:40.709
If you have changes to multiple files like what
you would see from refactoring changes in Xcode

00:55:40.710 --> 00:55:48.130
or from the new project rename feature that was introduced
in Xcode 3.2 you wouldn't be able to hit Command Z

00:55:48.130 --> 00:55:52.170
to undo all of those changes because
we operate them 1 file at a time.

00:55:52.170 --> 00:55:55.349
For that you need snapshots.

00:55:55.349 --> 00:56:02.230
Snapshots are essentially multi-file undo and the way
that they do that is before you actually change the files

00:56:02.230 --> 00:56:07.670
for factoring or project rename their going
to copy all of the files in your project

00:56:07.670 --> 00:56:12.380
from your project root or project roots to another location.

00:56:12.380 --> 00:56:17.980
That way if you say later well I've got to get
that state back you just restore the snapshot

00:56:17.980 --> 00:56:23.110
and all those files change back to what they were before.

00:56:23.110 --> 00:56:25.410
Now where is that information copied to?

00:56:25.409 --> 00:56:34.359
You can see up here there's a long path ~Library/Application
Support/, Developer/SharedSnapshotRepository.sparseimage.

00:56:34.360 --> 00:56:41.440
That's the name of the path and the name of the disk image
that snapshots use by default as their copy location.

00:56:41.440 --> 00:56:47.480
Now you can change that location to another hard
drive or to use your own encrypted disk image

00:56:47.480 --> 00:56:53.079
if it's got sensitive content in there, using
the XCSnapshotDiskImagePath user default,

00:56:53.079 --> 00:56:59.210
you'll have to change that at the command line,
there's currently no way to do it in the Xcode IDE.

00:56:59.210 --> 00:57:04.599
Now for both of these pieces of information there
are documents that you can read about it in.

00:57:04.599 --> 00:57:08.250
Xcode Source Management Guide,
which I recommend you all read.

00:57:08.250 --> 00:57:16.059
It's got a lot of information about snapshots and SCM and
the Xcode User Default Reference for the user default.

00:57:17.119 --> 00:57:21.059
OK, so now let's look at these comparisons.

00:57:21.059 --> 00:57:25.500
First I'd like to show you where you can find
that UI that I was talking about, excuse me,

00:57:25.500 --> 00:57:28.539
the features that I was talking
about before that use snapshots.

00:57:28.539 --> 00:57:33.679
You can find refactoring by going to the edit menu and
there's a refractor menu item there that will only be active

00:57:33.679 --> 00:57:37.509
if you have a valid selection in a source code file.

00:57:37.510 --> 00:57:44.570
And you can also see the project rename
from Project, Menu and then Rename.

00:57:44.570 --> 00:57:50.750
Ok, but for our purposes today we want to look at snapshots
and we will do that by bringing up the Snapshots window.

00:57:50.750 --> 00:58:01.969
OK and you see that there are 2 snapshots that we've
made here and let me make that window bigger here first.

00:58:03.019 --> 00:58:04.239
There we go.

00:58:04.239 --> 00:58:12.869
OK and you can see that well let's select the 2 snapshots
because we actually want to compare them against each other

00:58:12.869 --> 00:58:20.089
and then the files list to the right shows you what
files have been changed, what files have been added,

00:58:20.090 --> 00:58:23.710
what files have been removed between the 2 snapshots.

00:58:23.710 --> 00:58:28.300
We're interested in the files that have
changed and can we see that OK here?

00:58:28.300 --> 00:58:38.740
The 2 new files that are listed as being changed have
rather odd names: keyed, keyedobjects.nib, designable.nib,

00:58:38.739 --> 00:58:42.789
these aren't names of new files that you
normally deal with yourself and the answer

00:58:42.789 --> 00:58:48.039
to this issue is found by looking
at the path for these files.

00:58:48.039 --> 00:58:53.509
We find that these are actually sub-files
inside of the main menu.nib wrapper file.

00:58:53.510 --> 00:58:58.910
Now for features like snapshots and SCM they don't
really deal much directly with wrapper files they deal

00:58:58.909 --> 00:59:03.500
with the actual files on disks, the
sub-files underneath those wrappers.

00:59:03.500 --> 00:59:09.199
But what we want here is to actually see the real
meaningful differences between these Nib files.

00:59:09.199 --> 00:59:11.069
And snapshots comes through with us here.

00:59:11.070 --> 00:59:13.570
So let's select one of those 2 sub-files [cough].

00:59:13.570 --> 00:59:21.890
So what you'll see here is some text that
probably doesn't ring any bells for you.

00:59:21.889 --> 00:59:28.750
That's because what Xcode actually does here is take
those 2 wrapper files, run them through IV Tool,

00:59:28.750 --> 00:59:32.730
get the textual output and then
compare the 2 against each other.

00:59:32.730 --> 00:59:36.550
That output is not a documented format, so
it's not something you would normally need

00:59:36.550 --> 00:59:39.350
to completely understand or be able to change.

00:59:39.349 --> 00:59:44.619
But here what you can do with it is get a
general sense of the meaning of what's changed

00:59:44.619 --> 00:59:50.489
and so if we look here we can see that the
difference between the 2 files consists of menu items.

00:59:50.489 --> 00:59:52.109
Here click Zip browser.

00:59:52.110 --> 00:59:56.410
You can go down to the next one, Zip out Zip browser.

00:59:56.409 --> 01:00:01.599
So this way while you can't necessarily know what
these formats do you can say OK the difference

01:00:01.599 --> 01:00:09.739
between these 2 what I would say type into a SCM
comment if I were checking it in is menu item changes.

01:00:09.739 --> 01:00:14.509
So that's how snapshots helps you with NIB file comparisons.

01:00:14.510 --> 01:00:18.000
OK so we can close that.

01:00:18.000 --> 01:00:23.460
Alright and so the last thing I'm going to show
you today is project file comparisons under SCM.

01:00:23.460 --> 01:00:25.670
So let's look at the SCM results window.

01:00:25.670 --> 01:00:38.010
OK so we can see that there are M's for modified
for both the local column and the repository column

01:00:38.010 --> 01:00:44.590
for the ZipBrowser.xcodeprojfile but that's
actually a wrapper file so we need to dig

01:00:44.590 --> 01:00:50.360
into to find the real sub-files there and
the sub-file we want is project.pvx.proj.

01:00:50.360 --> 01:00:57.420
Now so there are changes remotely and there are
changes locally that may lead to a merge conflict

01:00:57.420 --> 01:00:59.780
if we were to update our local repository.

01:00:59.780 --> 01:01:06.950
So we want to look at the comparison of these 2 versions of
the project file to see if that's actually going to happen.

01:01:06.949 --> 01:01:13.199
And so yes we can go to SCM compare with
latest to see that comparison window.

01:01:13.199 --> 01:01:16.769
OK now this comparison is a lot
like the Nib file comparison.

01:01:16.769 --> 01:01:21.909
It's an undocumented format that you can still
gain some information about by looking through it.

01:01:21.909 --> 01:01:24.009
So the object version isn't something
that's all that important.

01:01:24.010 --> 01:01:25.550
We can go to the next one.

01:01:25.550 --> 01:01:33.190
Here we can see that the remote version on our
left has reference to new file tarreader.eb.

01:01:33.190 --> 01:01:38.340
Now what that means is someone added
support for Tar archives to their version

01:01:38.340 --> 01:01:40.430
of Zip browser, expanding what it can do.

01:01:40.429 --> 01:01:44.699
Now the next one that you can see is
that it also refers to tarreader.h,

01:01:44.699 --> 01:01:49.009
tarreader.m. So these are new files
that the project is referring to.

01:01:49.010 --> 01:01:53.340
If we keep going down now we can see
some changes on the right as well.

01:01:53.340 --> 01:01:58.100
We can see the update to the project file
format and the addition of the project roots.

01:01:58.099 --> 01:02:09.639
We go down a little further and the last changes to the
file are other addition additional file references here

01:02:09.639 --> 01:02:14.779
but the key thing to understand about this
comparison is that none of these files are contiguous

01:02:14.780 --> 01:02:20.640
and what that means is that our SCM system is going to be
able to merge the 2 sets of changes without any conflicts.

01:02:20.639 --> 01:02:21.869
So let's do that now.

01:02:21.869 --> 01:02:28.279
We can close the comparison window and
we can choose SCM, update entire project.

01:02:28.280 --> 01:02:34.530
And so we have to reload the project
from disk, but once we do that we can see

01:02:34.530 --> 01:02:40.990
that our local changes have been preserved while the
new references to the TAR reader files have been added.

01:02:40.989 --> 01:02:43.569
The merge has been completed successfully.

01:02:43.570 --> 01:02:47.230
OK, so in summary, going through some of our goals here.

01:02:47.230 --> 01:02:53.349
We've shown you how to tune Xcode to your liking
by doing things like adding macros and key bindings

01:02:53.349 --> 01:02:58.380
to your text editing or flow and adding
custom build phases to your targets.

01:02:58.380 --> 01:03:04.050
We've shown you where you can find things like
Xcode's snapshots copy location and how to use tools

01:03:04.050 --> 01:03:10.640
like Xcode build for your automated work flow and
we've shown you how to be more efficient in Xcode both

01:03:10.639 --> 01:03:16.549
by having Xcode do less work such as by setting
multiple roots or by you doing less work by being able

01:03:16.550 --> 01:03:21.220
to find the problems in your project
by debugging more efficiently.

01:03:21.219 --> 01:03:24.009
So we hope that you've enjoyed this session.

01:03:24.010 --> 01:03:30.870
[ Applause ]

01:03:30.869 --> 01:03:36.489
>> OK so if you have any further questions that we can't
answer in the Q and A today you can contact Mike Jurewitz,

01:03:36.489 --> 01:03:39.939
our Developer Tools Evangelist, jurewitz @apple.com.