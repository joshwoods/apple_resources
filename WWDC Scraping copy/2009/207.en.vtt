WEBVTT

00:00:12.660 --> 00:00:14.189
>> Tim: Hello everyone, I'm Tim Hatcher.

00:00:14.189 --> 00:00:19.460
Today we're going to talk about rapid development
using Safari's integrated developer tools.

00:00:19.460 --> 00:00:24.350
But first let's see a show of hands,
how many of you have used the tools

00:00:24.350 --> 00:00:28.390
that ship with Safari and some version of Safari.

00:00:28.390 --> 00:00:31.109
Great! That's a lot of you.

00:00:31.109 --> 00:00:37.269
So how many of you have used tools in other
browsers that you might be familiar with?

00:00:37.270 --> 00:00:39.210
Most of you too, that's great.

00:00:39.210 --> 00:00:44.170
So hopefully a lot of this will show you how
to use our tools and get a good experience.

00:00:44.170 --> 00:00:51.280
But even if you haven't used our tools before, we have a
great story to tell you today about using Safari's tools

00:00:51.280 --> 00:00:57.620
in the new version of Safari 4 that shipped this
week, and how to take advantage of those tools

00:00:57.619 --> 00:01:02.439
to accelerate your workflow and get things done faster.

00:01:02.439 --> 00:01:10.420
But first, whenever you're creating a website you're
going to start using some tool, some creation tool.

00:01:10.420 --> 00:01:14.230
And it's probably a tool that you see, up on the screen.

00:01:14.230 --> 00:01:17.510
Maybe you've used Dashcode before to create your website.

00:01:17.510 --> 00:01:25.290
And they have a great experience in Dashcode that ships
with Snow Leopard to create websites for desktop and mobile.

00:01:25.290 --> 00:01:28.730
Some of you might have even made one of these tools.

00:01:28.730 --> 00:01:32.600
I know a lot of Mac developers are
here, and my favorite text editor

00:01:32.599 --> 00:01:35.809
up here is probably written by one of you out there.

00:01:35.810 --> 00:01:40.620
But what are you going to do when
you're done with these tools?

00:01:40.620 --> 00:01:45.240
You need to test in a web browser,
and hopefully that's Safari.

00:01:45.239 --> 00:01:51.479
And what about when you run into some problems
or need to develop and work a little bit

00:01:51.480 --> 00:01:54.230
in the browser, you need to change something?

00:01:54.230 --> 00:01:58.060
Well that's where Safari's great tools come in.

00:01:58.060 --> 00:02:02.780
And let's go ahead and get started and dive right in.

00:02:02.780 --> 00:02:09.810
So the first thing I want to show you, if you haven't
done it already, is how to enable these tools,

00:02:09.810 --> 00:02:20.199
then talk about prototyping and developing websites, and
finding and fixing errors that creep into those websites,

00:02:20.199 --> 00:02:25.189
and then prototyping, or improving page performance.

00:02:25.189 --> 00:02:28.530
Sorry. So let's go ahead and talk about enabling the tools.

00:02:28.530 --> 00:02:30.370
Well it's really simple.

00:02:30.370 --> 00:02:35.900
There's a check box right in Safari's advanced
preferences where you can just turn that on,

00:02:35.900 --> 00:02:40.490
you get a new menu that shows up right next
to the Window menu called the Develop menu.

00:02:40.490 --> 00:02:44.560
And all of our tools are right at home in that menu.

00:02:44.560 --> 00:02:48.420
So anything you have, your developer
needs are right there in that menu.

00:02:48.419 --> 00:02:49.759
And that's it.

00:02:49.759 --> 00:02:51.560
That's how you enable the tools.

00:02:51.560 --> 00:02:54.729
So if you haven't done it already, go ahead and turn it on.

00:02:54.729 --> 00:02:58.949
You might be able to follow along during our talk here.

00:02:58.949 --> 00:03:01.939
Now let's talk about prototyping and developing websites.

00:03:01.939 --> 00:03:07.530
This is the favorite part of the
web development process, I think.

00:03:07.530 --> 00:03:09.250
Hopefully it's the same for you.

00:03:09.250 --> 00:03:15.780
And when you're developing a website,
every website starts out with an idea,

00:03:15.780 --> 00:03:19.340
and hopefully it's an energy efficient idea.

00:03:19.340 --> 00:03:27.379
And that idea turns into a sketch or a concept
that you start building and working on.

00:03:27.379 --> 00:03:34.099
And then a designer creates a final,
nice presentation of that.

00:03:34.099 --> 00:03:42.439
And the designer usually isn't the web developer, sometimes
it is, if you're a designer and a web developer you're set.

00:03:42.439 --> 00:03:49.699
But usually the design gets handed off to you, and
you're responsible for making this design come to life.

00:03:49.699 --> 00:03:57.989
And where I find it easy to tackle these problems, maybe
the designer uses rounded corners and you've never dealt

00:03:57.990 --> 00:04:05.100
with rounded corners on the web before,
or some transparency and opacity, there.

00:04:05.099 --> 00:04:10.979
Breaking these little pieces down and trying
them out in little snippets can be really useful.

00:04:10.979 --> 00:04:13.489
And we have a great tool for that.

00:04:13.490 --> 00:04:16.930
And it's the Snippet editor right there in the Develop menu.

00:04:16.930 --> 00:04:20.910
When you show it you have a window that has two panes.

00:04:20.910 --> 00:04:28.700
And these panes let you type in the content that you
want to test, the markup or CSS or HTML in the top,

00:04:28.699 --> 00:04:31.269
and everything you type gets previewed below.

00:04:31.269 --> 00:04:34.139
So as you're typing you have live updates right below.

00:04:34.139 --> 00:04:40.139
Using the great WebKit engine, you
can test out little snippets of code.

00:04:40.139 --> 00:04:45.459
And I find this really useful for testing
those little pieces, trying out new syntax.

00:04:45.459 --> 00:04:54.689
And once I take it to the next level and use my
favorite content creation tool, like Dashcode,

00:04:54.689 --> 00:04:58.350
I want to then take that back into the browser.

00:04:58.350 --> 00:04:59.460
And how do I do that?

00:04:59.459 --> 00:05:05.389
And work back and forth between my text
editor or my ID and my web browser?

00:05:05.389 --> 00:05:12.569
You 're constantly going to be reloading or testing
out new CSS changes that you want to see what happens.

00:05:12.569 --> 00:05:15.759
And you're probably going to be
very familiar with this icon.

00:05:15.759 --> 00:05:19.009
You're going to be reloading your content all the time.

00:05:19.009 --> 00:05:25.930
But there's a better way to test out an
experiment with CSS and DOM changes in particular.

00:05:25.930 --> 00:05:30.060
And I'm just going to dive right in to a demo and show you.

00:05:30.060 --> 00:05:36.230
So I have Safari 4 installed on this machine.

00:05:36.230 --> 00:05:39.400
I'm going to go ahead and open it.

00:05:39.399 --> 00:05:44.609
And I've already enabled the Develop menu,
here it is right next to the window menu.

00:05:44.610 --> 00:05:49.930
So I've been working on this website,
this blog that I've started working on.

00:05:52.610 --> 00:05:56.160
And this is what it looks like.

00:05:56.160 --> 00:05:59.120
So I've been playing around with all these colors.

00:05:59.120 --> 00:06:01.180
There're all these vibrant colors.

00:06:01.180 --> 00:06:02.939
And I've messed something up.

00:06:02.939 --> 00:06:05.639
This header, it's supposed to be this purple color.

00:06:05.639 --> 00:06:08.079
And I really don't know why.

00:06:08.079 --> 00:06:15.719
So I'm going to go ahead and bring up the Web Inspector, a
great tool for targeting and testing out ideas in the page,

00:06:15.720 --> 00:06:20.220
and experimenting and introspecting
the content of this page.

00:06:20.220 --> 00:06:24.220
So right in the Develop menu I'm
going to bring up the Web Inspector.

00:06:24.220 --> 00:06:29.360
And the Web Inspector, by default, loads
attached to the bottom of the window.

00:06:29.360 --> 00:06:35.319
So this Safari window now has a Web
Inspector docked to the bottom of the window.

00:06:35.319 --> 00:06:41.129
And over here on the side, and the
first panel is the elements panel,

00:06:41.129 --> 00:06:46.019
and anything in this is the DOM representation of the page.

00:06:46.019 --> 00:06:49.490
And as I mouse around you'll see
highlights show up on the page.

00:06:49.490 --> 00:06:54.250
And these are the elements and where they
visually correspond in the page content.

00:06:54.250 --> 00:06:59.769
Well this header is something that's probably nested
a few levels in the DOM, and I really don't want

00:06:59.769 --> 00:07:03.159
to go hunting and pecking through the DOM to find it.

00:07:03.160 --> 00:07:05.600
And there's a great way to find things visually.

00:07:05.600 --> 00:07:10.720
And down in the bottom of the elements
panel is this magnifying glass.

00:07:10.720 --> 00:07:12.800
And I'll just toggle it on.

00:07:12.800 --> 00:07:21.060
And what that does is let me search around in the document
and see elements visually and find elements visually.

00:07:21.060 --> 00:07:26.750
And whenever I click it highlights
that DOM node in the Web Inspector.

00:07:26.750 --> 00:07:31.600
So now I have my header that I'm looking
for, highlighted in the Web Inspector.

00:07:31.600 --> 00:07:40.600
And over on the side anything that's selected in the DOM
tree will show you the styles and other properties that show

00:07:40.600 --> 00:07:44.290
up for that element and apply to that element.

00:07:44.290 --> 00:07:51.180
And you can see the background color is gray,
and you can see a little color swatch here.

00:07:51.180 --> 00:07:53.930
And I'm really expecting that to be the purple color.

00:07:53.930 --> 00:07:58.949
So it looks like I'm missing some style
class or something in my document.

00:07:58.949 --> 00:08:02.839
So let's find the element that's actually purple.

00:08:02.839 --> 00:08:07.289
And we'll use the Find tool again.

00:08:07.290 --> 00:08:15.250
And it looks like that's getting
its color from the new style class.

00:08:15.250 --> 00:08:20.420
So this selector is what is causing that color to be purple.

00:08:20.420 --> 00:08:27.470
And I can experiment using these text
boxes next to the style properties.

00:08:27.470 --> 00:08:29.140
And disable those properties.

00:08:29.139 --> 00:08:34.189
So I can see what it's going to fall back to
if that style never even applied to it at all.

00:08:34.190 --> 00:08:39.430
So sure enough it goes back to that gray color
that I was trying to get rid of in my other header.

00:08:39.429 --> 00:08:42.479
And you can see things are now crossed out, so that style,

00:08:42.480 --> 00:08:48.000
that background color is not applying any
more, and it's getting this gray color.

00:08:48.000 --> 00:08:52.169
So I can go ahead and check that back
on, so it's going to apply again.

00:08:52.169 --> 00:08:57.860
So it looks like it's getting the style
class new from its parent element.

00:08:57.860 --> 00:09:05.960
And looking at my previous header the style was "hot",
and I really want it to be "new" to get that purple color.

00:09:05.960 --> 00:09:11.930
So I can just simply double click to
edit, and go ahead and type in "new",

00:09:11.929 --> 00:09:16.059
and I'll zoom back out and go to the top of the page.

00:09:16.059 --> 00:09:18.009
And there is, our header is purple again.

00:09:18.009 --> 00:09:23.350
[ applause ]

00:09:23.350 --> 00:09:28.590
>> Tim: So sure enough, looking at the styles I now have
another rule that's applying to these, this, this header.

00:09:28.590 --> 00:09:33.550
But this purple color really isn't pleasing to me.

00:09:33.549 --> 00:09:35.449
It's too vibrant for my taste.

00:09:35.450 --> 00:09:38.490
So just like the DOM, I can edit styles.

00:09:38.490 --> 00:09:47.110
Double click the Edit and I can type in any number
I want, and just like before, and hit Commit.

00:09:47.110 --> 00:09:48.430
But there's a better way.

00:09:48.429 --> 00:09:56.219
If I double click to edit I can use the arrow keys to
cycle through these colors, to cycle through the numbers.

00:09:56.220 --> 00:10:01.230
And that effect applies right on the
screen as I'm going through these colors.

00:10:01.230 --> 00:10:09.909
So I can adjust the individual color channels
independently and find the color I'm looking for.

00:10:09.909 --> 00:10:14.269
So this is more appropriate for this page, this green.

00:10:14.269 --> 00:10:16.590
We can tweak this a little.

00:10:16.590 --> 00:10:25.940
And once I find the value I'm looking for I'll take it back
to my original editor and apply it to the original page.

00:10:25.940 --> 00:10:29.760
So anyone that now goes to my site will see the new color.

00:10:29.759 --> 00:10:33.100
But they haven't been seeing any of
these changes that I've been making.

00:10:33.100 --> 00:10:37.100
They've been changed locally on
this machine for this web browser.

00:10:37.100 --> 00:10:41.680
They're not applying to the web server, not
applying to anyone that's visiting the site.

00:10:41.679 --> 00:10:48.750
So anything you change here is going to have to be manually
taken over to your editor and applied to your site globally.

00:10:48.750 --> 00:10:54.179
And that's a great way to experiment
without having any side effects.

00:10:54.179 --> 00:10:56.370
So that's it for the elements panels.

00:10:56.370 --> 00:11:02.909
I'm going to go ahead and close
this, and switch back to slides.

00:11:02.909 --> 00:11:08.240
So I talked about using the elements
panel in the Web Inspector.

00:11:08.240 --> 00:11:15.779
And specifically the Inspect button to find visually
any element that I was interested in on the page.

00:11:15.779 --> 00:11:20.620
And one thing I wanted to show you is the Search field.

00:11:20.620 --> 00:11:28.210
So let's go back to that demo and
I'll bring up the Web Inspector again.

00:11:28.210 --> 00:11:36.280
And say I'm curious now that I've gone back to my original
content and want to know what's going to be affected

00:11:36.279 --> 00:11:41.159
when I actually change to the color
of that header in the real source.

00:11:41.159 --> 00:11:46.029
So I can look and see, using the search
field, how many headers I have on the page.

00:11:46.029 --> 00:11:48.399
So it looks like I have 5 headers.

00:11:48.399 --> 00:11:55.220
But that's really not what I'm expecting, I want to narrow
that down a little bit, because this one header is part

00:11:55.220 --> 00:11:58.639
of the top of my page, not these individual sections.

00:11:58.639 --> 00:12:04.039
So I can type in complex CSS expressions
right here in the Web Inspector,

00:12:04.039 --> 00:12:08.169
so I can see all the sections that have a header under them.

00:12:08.169 --> 00:12:11.779
So now I just have 4 results instead of the 5.

00:12:11.779 --> 00:12:18.879
So that's a great way to test out selectors that you
might be interested in, see what they affect on your page

00:12:18.879 --> 00:12:23.700
just to go back to your original
editor and add those new rules.

00:12:23.700 --> 00:12:25.950
So let's go back to the slides.

00:12:25.950 --> 00:12:36.730
So that's how to use the Search field to search for CSS
selectors, tag names, or identifiers for ID elements.

00:12:36.730 --> 00:12:40.600
Then you can edit CSS Live and the DOM.

00:12:40.600 --> 00:12:47.909
With CSS you can use the check boxes to temporarily
disable a certain property to see what the effect would be.

00:12:47.909 --> 00:12:56.730
And double click to simply edit values textually,
or use the arrow keys to increment numeric values.

00:12:56.730 --> 00:13:02.710
So that's a lot about CSS and the
DOM, but what about JavaScript?

00:13:02.710 --> 00:13:09.690
I know a lot of you out there love JavaScript and are
very familiar with JavaScript and finding elements.

00:13:09.690 --> 00:13:14.810
And you really want to know where is
the command line for the web browser?

00:13:14.809 --> 00:13:20.149
And I'm here to tell you the command line for the
web browser is built right into the Web Inspector.

00:13:20.149 --> 00:13:23.009
And to show you that I'm just going
to jump right into a demo.

00:13:23.009 --> 00:13:32.210
[ silence ]

00:13:32.210 --> 00:13:40.180
>> Tim: So the first thing, and a good way to show
you how this applies is I'm going to go to a website,

00:13:40.179 --> 00:13:42.429
and it's my favorite website in the world.

00:13:42.429 --> 00:13:44.299
Here it is, About:blank.

00:13:44.299 --> 00:13:50.209
It's completely empty document, but this is really
useful to a web developer who might want to try

00:13:50.210 --> 00:13:53.110
out some things using the command
line that I'm going to show you.

00:13:53.110 --> 00:13:58.090
It's a great way to start from nothing
and build and come up with something

00:13:58.090 --> 00:14:00.899
that you might want to test and experiment with.

00:14:00.899 --> 00:14:04.439
So I'm going to go ahead and bring up the Web Inspector.

00:14:04.440 --> 00:14:08.120
And I'm going to bring up the console.

00:14:08.120 --> 00:14:12.759
The console is the second icon in the bottom corner.

00:14:12.759 --> 00:14:17.120
And it slides right in from the bottom.

00:14:17.120 --> 00:14:21.330
No matter where I am in the Web Inspector
I can always bring up the console.

00:14:21.330 --> 00:14:27.080
And I can switch around in the Web Inspector
and my console stays right down there.

00:14:27.080 --> 00:14:34.670
I can have a point of reference at the top for the DOM maybe
I'm working on, and work on it with the console right below.

00:14:34.669 --> 00:14:37.309
So I'm not switching back and forth.

00:14:37.309 --> 00:14:42.589
And here it is, the command line, right here in the console.

00:14:42.590 --> 00:14:46.399
So I have this blank document and it's truly blank.

00:14:46.399 --> 00:14:50.059
It's just got a head, and a body, and nothing's in it.

00:14:50.059 --> 00:14:53.019
And I want to try out something
with the canvas canvas element.

00:14:53.019 --> 00:14:58.730
I've heard a lot of great thing about the canvas
element in Darin's talk earlier this week.

00:14:58.730 --> 00:15:06.840
And the HTML 5 spec is building on the Apple invention
of the canvas element, adding things like text drawing.

00:15:06.840 --> 00:15:13.730
And I'm working on this game with Kevin,
and I want to draw some text in my canvas.

00:15:13.730 --> 00:15:18.529
I have a whole bunch of stuff I'm drawing in my
canvas, but text is one thing that I've never been able

00:15:18.529 --> 00:15:23.149
to do until now with HTML 5 using Safari 4.

00:15:23.149 --> 00:15:30.559
So I'm going to go ahead and make a canvas element,
and I'm going to assign it to the canvas variable.

00:15:30.559 --> 00:15:31.929
And this is just JavaScript.

00:15:31.929 --> 00:15:35.039
I'm typing out live JavaScript expressions here.

00:15:35.039 --> 00:15:38.669
So I need to create an element on the document.

00:15:38.669 --> 00:15:42.819
And as I start typing you'll see auto-completion kick in.

00:15:42.820 --> 00:15:45.560
So now it's found the document.

00:15:45.559 --> 00:15:49.000
And to accept that completion I
can just hit the right arrow key.

00:15:49.000 --> 00:15:53.000
And that's the fastest I've ever typed a document.

00:15:53.000 --> 00:15:57.600
So I know document lets me create things.

00:15:57.600 --> 00:16:05.810
So I can start typing out "create", and "create
attribute" is not what I want, I want to create an element.

00:16:05.809 --> 00:16:11.109
Well, there's multiple creates, create
the prefix functions on documents.

00:16:11.110 --> 00:16:17.180
And I can use the tab key to cycle through all the
possible matches and "create element" is the one I want.

00:16:17.179 --> 00:16:19.769
So I'm going to go ahead and create a canvas.

00:16:19.769 --> 00:16:23.549
And I'm going to hit Return to evaluate that.

00:16:23.549 --> 00:16:26.240
And the result is shown right below the expression.

00:16:26.240 --> 00:16:32.409
And since it's a DOM element it's going to show up in
pseudo HTML syntax of what that element looks like.

00:16:32.409 --> 00:16:36.360
And it's a little boring, because canvas doesn't
have any attributes applied to it right now.

00:16:36.360 --> 00:16:37.690
But that's all I need.

00:16:37.690 --> 00:16:41.680
But this, this canvas is not in my document yet.

00:16:41.679 --> 00:16:43.829
The body is still empty.

00:16:43.830 --> 00:16:46.470
So we need to append that to the document.

00:16:46.470 --> 00:16:50.100
So I'm going to go ahead and append that, and

00:16:52.009 --> 00:16:57.120
[ silence ]

00:16:57.120 --> 00:16:57.440
>> Tim: Oops!

00:16:57.440 --> 00:17:01.370
It looks like I can't append to the document.

00:17:01.370 --> 00:17:06.549
Well, any errors that you run into will
show up as the result of the expression.

00:17:06.549 --> 00:17:12.289
So you don't have to worry about creating a problem or
having an error, it's just going to show you the error.

00:17:12.289 --> 00:17:22.509
And I know, oh, I meant to type
"body", and append it to the body.

00:17:22.509 --> 00:17:29.160
So now if you've noticed the body
has a canvas element underneath it.

00:17:29.160 --> 00:17:33.380
And as I hover it it's showing up at the top and it's empty.

00:17:33.380 --> 00:17:37.080
We need to draw something into our
canvas; "canvas" is empty by default.

00:17:37.079 --> 00:17:44.119
So let's go back down and try getting the context.

00:17:44.119 --> 00:17:51.509
Any graphics context, like the canvas, you need to get
the context used to call functions or draw methods on.

00:17:51.509 --> 00:17:56.079
So I'm going to assign the context to this CTX variable.

00:17:56.079 --> 00:18:03.359
And I'm just going to go a little quicker-"get context".

00:18:03.359 --> 00:18:07.119
And you can see how auto-complete
really helps out with the typing.

00:18:07.119 --> 00:18:13.109
And evaluating that expression gives me an
object, a JavaScript object I can interact with.

00:18:13.109 --> 00:18:21.199
Well I can expand that object and see all of
the properties that are on that canvas context.

00:18:21.200 --> 00:18:25.049
And the one I'm interested in is Fill Text.

00:18:25.049 --> 00:18:30.769
And that's the new one in HTML 5 that I've
heard a lot about, and the font property.

00:18:30.769 --> 00:18:36.089
So let's go ahead set the font.

00:18:36.089 --> 00:18:41.669
And as I'm completing, you'll see auto-complete
knows about this object that I'm working on,

00:18:41.670 --> 00:18:44.570
and it lets me complete to the font property.

00:18:44.569 --> 00:18:53.250
So I can assign a font and it returns
the result, and that's what I expect.

00:18:53.250 --> 00:19:00.549
And I'm also going to set the fill
style, and let's just make that "red".

00:19:00.549 --> 00:19:07.009
And let's try out the fill text method and see what happens.

00:19:07.009 --> 00:19:18.509
So I know fill text by reading HTML 5 spec takes a string
and it takes a location in the context, in the canvas.

00:19:18.509 --> 00:19:21.379
So I'm going to zoom out before I evaluate this.

00:19:21.380 --> 00:19:24.920
And after I evaluate it you'll
see the context now has some text.

00:19:24.920 --> 00:19:26.940
Now it's not that fancy.

00:19:26.940 --> 00:19:32.549
I know there's better ways to show text in a
web browsers that's more accessible and things,

00:19:32.549 --> 00:19:39.799
but this is a good example if you need to draw text in your
canvas you now have API's available in Safari 4 to do that.

00:19:39.799 --> 00:19:47.750
So that's using the web instructor's interactive
command line to be more playful with your JavaScript

00:19:47.750 --> 00:19:55.440
and explore a little bit and find things you might not
have ever done before using the expandable objects.

00:19:55.440 --> 00:19:58.549
So let's go back to slides.

00:19:58.549 --> 00:20:03.220
So I showed you how to use the
interactive command line in the console.

00:20:03.220 --> 00:20:07.430
You use auto-complete to see expressions as
you type them, so you know what you're typing,

00:20:07.430 --> 00:20:09.720
you know it's going to evaluate correctly.

00:20:09.720 --> 00:20:16.350
And I played with the expandable objects of the
DOM tree, and my canvas element was a little bland,

00:20:16.349 --> 00:20:22.719
but if it actually had children I could expand
that DOM element and see all of its descendants.

00:20:22.720 --> 00:20:27.860
And looked at properties of JavaScript
objects that I can interact with.

00:20:27.859 --> 00:20:32.319
So that's using the JavaScript
console to do experimentation.

00:20:33.430 --> 00:20:35.730
Now the inevitable part.

00:20:35.730 --> 00:20:38.140
You have to find and fix bugs.

00:20:38.140 --> 00:20:42.500
It's not as fun as prototyping and
developing, but you have to do it.

00:20:42.500 --> 00:20:44.230
It's going to happen.

00:20:44.230 --> 00:20:52.420
So hopefully what I show you is going to let you know
how to use our tools to make this a better process.

00:20:52.420 --> 00:20:55.910
So what are some categories of errors?

00:20:55.910 --> 00:21:02.090
Well there's markup errors and JavaScript errors.

00:21:02.089 --> 00:21:05.449
Well what exactly is a markup error?

00:21:05.450 --> 00:21:10.750
Well markup errors happen all the time and you
might not even realize it, such as mis-nested tags.

00:21:10.750 --> 00:21:17.960
You have these tags closing in
incorrect orders, or extra closing tags.

00:21:17.960 --> 00:21:21.920
And both of these are super hard
to find just with code inspection.

00:21:21.920 --> 00:21:30.029
You have to have a tool to help you with this,
otherwise you're, you're close tags are 200 lines apart

00:21:30.029 --> 00:21:34.160
and you're never going to see that
extra little P tag at the end.

00:21:34.160 --> 00:21:39.259
So those are really hard, and you
definitely need tools to help.

00:21:39.259 --> 00:21:41.670
And improperly placed tags.

00:21:41.670 --> 00:21:49.539
This might look like valid syntax, but a form is not
allowed inside of a table, according to the HTML spec.

00:21:49.539 --> 00:21:54.359
So you wouldn't even know that
unless you read all the specs.

00:21:54.359 --> 00:21:57.569
And those things are super thick, right?

00:21:57.569 --> 00:22:04.099
And then another one that bites people all the time,
and it's bitten me a lot, until I started working

00:22:04.099 --> 00:22:13.240
on the Safari teams and it really got engrained
in my head, is the self closing syntax in HTML.

00:22:13.240 --> 00:22:16.450
HTML is not XML.

00:22:16.450 --> 00:22:19.620
Let me say that again, HTML is not XML.

00:22:19.619 --> 00:22:24.739
XHTML is XML, but you can't use the syntax in HTML.

00:22:24.740 --> 00:22:30.549
So let's dig in and look at this example.

00:22:30.549 --> 00:22:35.250
So I'm going to open up the Web Inspector
again and look at the resources panel.

00:22:35.250 --> 00:22:38.490
And I see a bunch of errors.

00:22:38.490 --> 00:22:43.140
There's 3 errors that are caused on this pretty simple page.

00:22:43.140 --> 00:22:46.720
And to see these errors, these are markup errors.

00:22:46.720 --> 00:22:53.100
And the markup errors are only going to show up if
you load the page while the Web Inspector's open.

00:22:53.099 --> 00:22:58.689
We enter a special parsing mode
that outputs log messages for you.

00:22:58.690 --> 00:23:03.809
Whenever it encounters a problem and tries to fix it.

00:23:03.809 --> 00:23:08.740
So this is really your window into what the
web browser is doing, what the engine is doing

00:23:08.740 --> 00:23:11.960
to fix up your site as it encounters problems.

00:23:11.960 --> 00:23:15.069
So you'll see the errors in the console.

00:23:15.069 --> 00:23:19.829
If you're more familiar with the console you can look in
there for the errors, or you can look in the resources panel

00:23:19.829 --> 00:23:23.369
and see an error count on the side
and all the errors in line.

00:23:23.369 --> 00:23:25.129
So you don't even have to go to the console.

00:23:25.130 --> 00:23:32.050
If the console scares you, you can just look at all
your errors right in the context of your source code.

00:23:32.049 --> 00:23:34.259
So let's look at the elements panel.

00:23:34.259 --> 00:23:42.839
And I know the errors are telling me that
this anchor was cloned to 2 other locations,

00:23:42.839 --> 00:23:45.209
when I only expected it to be there once.

00:23:45.210 --> 00:23:50.539
So looking and verifying in the DOM I
can see, oh, there it is 2 extra times.

00:23:50.539 --> 00:23:56.139
So it's simple to fix.

00:23:56.140 --> 00:24:02.009
And reloading the page I can use the correct (one second)

00:24:02.009 --> 00:24:11.910
[ silence ]

00:24:11.910 --> 00:24:14.259
>> Tim: Sorry about that.

00:24:14.259 --> 00:24:19.650
So I've reloaded the page after I've
edited it in my favorite text editor.

00:24:19.650 --> 00:24:25.380
And you can see I've used the correct
syntax, and I no longer get those 3 errors.

00:24:25.380 --> 00:24:31.190
And verifying in the DOM I can see I only have one
of those anchors, I don't have 3 of them anymore.

00:24:31.190 --> 00:24:36.330
So that's just one example of how to
use the Web Inspector to find problems

00:24:36.329 --> 00:24:43.199
that you might have been overlooking
before, and target and fix those errors.

00:24:43.200 --> 00:24:47.569
So now let's talk about JavaScript errors.

00:24:47.569 --> 00:24:49.200
So what's a JavaScript error?

00:24:49.200 --> 00:24:56.460
Well I ran into one in my demo and it
was helpful in telling me what was wrong.

00:24:56.460 --> 00:25:02.390
But there's one that I always run into, and I don't
know about you, but it's null undefined objects.

00:25:02.390 --> 00:25:05.790
How many of you ran into this error before?

00:25:05.789 --> 00:25:07.539
Yeah, it's that annoying.

00:25:07.539 --> 00:25:11.039
Well, hopefully our tool is going
to help you find and fix those.

00:25:11.039 --> 00:25:18.480
And I've got a great example that
hopefully Kevin can fix for me.

00:25:18.480 --> 00:25:24.960
And there's sometimes you're using a JavaScript library
that has explicit exceptions, and it might be throwing,

00:25:24.960 --> 00:25:29.529
maybe you're passing an incorrect
argument to one of its functions.

00:25:29.529 --> 00:25:31.069
And then there's parse errors.

00:25:31.069 --> 00:25:35.799
You misquote a text string and the world blows up.

00:25:35.799 --> 00:25:39.430
So let's jump right into the demo.

00:25:39.430 --> 00:25:43.660
And like I said, hopefully Kevin can
fix this game that I've been working on.

00:25:43.660 --> 00:25:47.960
It, I totally broke it before this session.

00:25:47.960 --> 00:25:51.960
So hopefully he can use our tools
to figure out what the problem was.

00:25:51.960 --> 00:25:53.720
So take it away Kevin.

00:25:53.720 --> 00:25:56.120
>> Kevin: Oh, thank you Tim.

00:25:56.119 --> 00:26:05.299
Let me switch you over to the demo
machine, and let's load Tim's site.

00:26:05.299 --> 00:26:11.869
I personally don't like the Web Inspector docked, so I'm
going to use the icon on the bottom left here to pop it

00:26:11.869 --> 00:26:16.649
out into its own window and I'll
use it from up there from now on.

00:26:16.650 --> 00:26:19.280
Tim's game is this link here.

00:26:19.279 --> 00:26:22.379
And sure looks like it's not working.

00:26:22.380 --> 00:26:30.290
We can already see that in the bottom right corner we've
got an error badge, so I'm going to zoom in on this.

00:26:30.289 --> 00:26:37.859
And if I click on this badge it brings up the console and
it tells me what the error is, "current cell is undefined."

00:26:37.859 --> 00:26:46.500
It also tells me the line number and file name, so I
can just click on that and it's going to open the file.

00:26:46.500 --> 00:26:50.210
Just looking at it, it's not immediately
apparent to me what's going on.

00:26:50.210 --> 00:26:54.120
So what I'm going to do is I'm going
to turn on our JavaScript debugger

00:26:54.119 --> 00:26:57.479
and see if we can find this error better there.

00:26:57.480 --> 00:27:00.170
So the debugger is this Scripts panel right here.

00:27:00.170 --> 00:27:05.220
And because we want to give you as much
speed as possible in our new nitro engine,

00:27:05.220 --> 00:27:07.750
the debugging hooks are not compiled in by default.

00:27:07.750 --> 00:27:10.170
So you just have to turn them on yourself.

00:27:10.170 --> 00:27:13.710
And I know that an exception is being thrown.

00:27:13.710 --> 00:27:20.240
And in the bottom left corner here we have a button that
will pause the debugger when it encounters an exception.

00:27:20.240 --> 00:27:23.009
So I'm just going to turn that on, and
then I'm going to reload this page.

00:27:23.009 --> 00:27:28.769
[ silence ]

00:27:28.769 --> 00:27:30.779
>> Kevin: All right, so I've hit my exception.

00:27:30.779 --> 00:27:36.069
And we can see on the far right here
that current cell is indeed undefined.

00:27:36.069 --> 00:27:43.409
I can also use the console and it's contextual
to wherever we are in the JavaScript stack.

00:27:43.410 --> 00:27:47.740
So I will just type current cell, it is undefined.

00:27:47.740 --> 00:27:52.490
The line above I see it's being
assigned cells that cell index.

00:27:52.490 --> 00:27:57.710
So let's just see what cell is, or
cells That's an array of objects.

00:27:57.710 --> 00:28:00.950
That looks correct.

00:28:00.950 --> 00:28:02.009
And

00:28:02.009 --> 00:28:08.059
[ silence ]

00:28:08.059 --> 00:28:10.119
>> Kevin: "Cells that cell index" is undefined.

00:28:10.119 --> 00:28:12.779
Cell index, 198.

00:28:12.779 --> 00:28:16.559
I can also see that over here "cell index is 198."

00:28:16.559 --> 00:28:19.819
And in this for loop [phonetic] we're
going until the cell's length.

00:28:19.819 --> 00:28:23.480
So what is the array cells length?

00:28:23.480 --> 00:28:24.880
It's also 198.

00:28:24.880 --> 00:28:30.750
I've run off the end of my array, or rather Tim has.

00:28:30.750 --> 00:28:33.799
We can see that in this for loop we're using <=

00:28:33.799 --> 00:28:35.230
instead of just <.

00:28:35.230 --> 00:28:38.009
So let's go fix that in Dashcode.

00:28:38.009 --> 00:28:46.109
[ silence ]

00:28:46.109 --> 00:28:49.729
>> Kevin: Here's our JavaScript
file, I'll make it a little bigger.

00:28:49.730 --> 00:28:58.380
Once nice thing about the Inspector is I can see that that
for loop is on line 152, so I can just go straight to it.

00:28:58.380 --> 00:29:00.810
Here's our less than or equal to.

00:29:00.809 --> 00:29:02.109
And I'll do that.

00:29:02.109 --> 00:29:03.039
I'll save.

00:29:03.039 --> 00:29:05.190
And then we'll reload this page.

00:29:05.190 --> 00:29:08.009
And it looks like the game is up and running.

00:29:08.009 --> 00:29:15.259
[ silence ]

00:29:15.259 --> 00:29:17.650
>> Tim: But wait, I don't think that's supposed to be gray.

00:29:17.650 --> 00:29:19.890
Maybe it's supposed to be another color.

00:29:19.890 --> 00:29:23.280
I don't remember having any players be gray.

00:29:23.279 --> 00:29:26.920
Maybe it's the fill style, I might have messed that up.

00:29:26.920 --> 00:29:28.410
So check out fill style.

00:29:28.410 --> 00:29:33.630
>> Kevin: All right, we're doing
some more work for Tim here.

00:29:33.630 --> 00:29:40.240
So he says to check fill style, so I'll just search for it.

00:29:40.240 --> 00:29:47.029
Fill style, it says we have 4 matches, and our
first match is being assigned the army color.

00:29:47.029 --> 00:29:50.809
We'll just set a break point there, got a hit immediately.

00:29:50.809 --> 00:29:55.980
And on the right we can see there's the army
object, and if I expand I can see the color.

00:29:55.980 --> 00:29:59.690
Oh, I've already found a gray army.

00:29:59.690 --> 00:30:05.309
Looking at this object I can also see there's another color
where it's defined purple, that's probably what he meant.

00:30:05.309 --> 00:30:08.779
Looks like he spelled colour with a u.

00:30:08.779 --> 00:30:15.690
So let's go back to Dashcode and we'll just look up color.

00:30:15.690 --> 00:30:18.100
And there we have it.

00:30:18.099 --> 00:30:21.419
We'll save this.

00:30:21.420 --> 00:30:22.130
Reload our game.

00:30:22.130 --> 00:30:24.010
And we're purple.

00:30:24.009 --> 00:30:30.799
[ applause ]

00:30:30.799 --> 00:30:35.309
>> Tim: Thanks Kevin, now I can
play that when we're done here.

00:30:35.309 --> 00:30:39.629
My British tendencies in spelling color wrong.

00:30:39.630 --> 00:30:45.770
So Kevin showed you how to enable debugging
in the scripts panel of the Web Inspector.

00:30:45.769 --> 00:30:56.099
And using the Pause on Exceptions button to always pause
whenever an exception is hit while debugging is enabled.

00:30:56.099 --> 00:31:00.669
So that's super useful so you can catch those errors
right when they happen instead of seeing it log

00:31:00.670 --> 00:31:07.150
out in the console, and wondering, and scratching your
head, oh, who was calling that, or why was that happening?

00:31:07.150 --> 00:31:10.100
And how to set explicit break points.

00:31:10.099 --> 00:31:15.879
If you have code of interest so you can target
specific parts of your code with a breakpoint.

00:31:15.880 --> 00:31:22.130
And then Kevin used the Scope variables
on the side, to expand one of the objects

00:31:22.130 --> 00:31:27.770
to dig deeper, to see and find my misspelling.

00:31:27.769 --> 00:31:33.910
So that's how to debug and find and fix JavaScript errors.

00:31:33.910 --> 00:31:39.110
So now our sites working great and we
really need to think about performance.

00:31:39.109 --> 00:31:44.479
And there's some areas of performance
that you should focus on.

00:31:44.480 --> 00:31:50.910
And performance really comes down to
resource loading and then JavaScript.

00:31:50.910 --> 00:31:53.029
So let's talk about resource loading.

00:31:53.029 --> 00:32:03.139
But first think about this all in the context of Desktop
and then all the iPhone users that are visiting your site.

00:32:03.140 --> 00:32:09.090
Even if you haven't optimized and created an iPhone
version of your site, more and more iPhone users,

00:32:09.089 --> 00:32:11.829
even you guys, are visiting normal sites.

00:32:11.829 --> 00:32:14.799
And you want those sites to load as quick as possible.

00:32:14.799 --> 00:32:23.269
So, let's talk about how to improve resource
loading so those pages load snappy on the phone.

00:32:23.269 --> 00:32:31.599
So there's a couple categories of resource loading
issues that all affect page load performance.

00:32:31.599 --> 00:32:33.649
So first large resources.

00:32:33.650 --> 00:32:38.980
And this is pretty obvious, but let's talk
about how to find them in the Web Inspector.

00:32:38.980 --> 00:32:46.549
So I'm going to open up the Resources panel and
I'm going to sort by size using the size graph.

00:32:46.549 --> 00:32:55.319
And this will bubble up all of the larger resources
that occurred during the page load of this site.

00:32:55.319 --> 00:33:02.759
And also at the top here is a great summary
of all of the resource categories types,

00:33:02.759 --> 00:33:06.309
like images and scripts, of how much they take up.

00:33:06.309 --> 00:33:15.899
And you can see by the huge amount of orange here that
JavaScript is really the culprit in size of this site.

00:33:15.900 --> 00:33:22.759
And sure enough that was a very easy way to
use the Web Inspector to find larger resources,

00:33:22.759 --> 00:33:28.759
and maybe you can eliminate those large resources
by reducing those scripts, getting rid of functions

00:33:28.759 --> 00:33:34.109
that you don't use, using server side gzip compression.

00:33:34.109 --> 00:33:38.269
So now let's talk about large in number of resources.

00:33:38.269 --> 00:33:48.210
And we can go to the Web Inspector's resources
panel again and sort by time, using the time graph.

00:33:48.210 --> 00:33:55.850
And you'll see a nice waterfall of where
and when these resources were loaded.

00:33:55.849 --> 00:33:59.579
And you'll see two different colors of these bars.

00:33:59.579 --> 00:34:07.139
The first part of the bar is the latency, how long it
took from when the web browser needed that resource,

00:34:07.140 --> 00:34:11.650
to when the first byte of that
resource was received from the server.

00:34:11.650 --> 00:34:17.539
And then the dark part of the bar is how long it took
from the first byte to finish downloading the resource.

00:34:17.539 --> 00:34:21.519
So you can see right away there's some high latency here.

00:34:21.519 --> 00:34:26.599
And remember, we're, we're targeting
the large numbers of resources.

00:34:26.599 --> 00:34:29.099
But I'm talking about latency for a reason.

00:34:29.099 --> 00:34:32.009
So let's sort by latency here.

00:34:32.010 --> 00:34:35.690
This will re-sort the time graph.

00:34:35.690 --> 00:34:41.980
And for those that have good eyes you'll, you'll
notice it took me 12 seconds to load Apple.com here.

00:34:41.980 --> 00:34:43.670
That's pretty slow.

00:34:43.670 --> 00:34:52.519
Well I was testing out iPhone 3's tethering, which
hopefully you guys will be able to take advantage of soon.

00:34:52.519 --> 00:35:04.150
And you'll see this first resource here what took
2-point-something seconds before anything was gotten

00:35:04.150 --> 00:35:05.369
from the web server.

00:35:05.369 --> 00:35:10.099
So the web browser needed it, and
then 2 seconds later we got something

00:35:10.099 --> 00:35:14.699
from the server using the cell network with tethering.

00:35:14.699 --> 00:35:18.029
And it took 12 seconds total to load the page.

00:35:18.030 --> 00:35:23.840
Compare that to a cable modem where it
only took 1-1/2 seconds to load the page.

00:35:23.840 --> 00:35:30.680
Even though the, the latency bars look really large
there, it was only 315 milliseconds of latency.

00:35:30.679 --> 00:35:36.219
So no latency really should be ignored, even
those 350 milli, 15 millisecond latency.

00:35:36.219 --> 00:35:39.949
But you really can't do anything about the latency problem.

00:35:39.949 --> 00:35:45.599
You can't go and up grade everyone's
Internet connect and fix all those problems.

00:35:45.599 --> 00:35:49.179
Well, the way to fix that is large numbers of resources.

00:35:49.179 --> 00:35:51.639
And remember that's what we were talking about.

00:35:51.639 --> 00:36:00.369
So I'm going to go back to the size graph and scroll
down the page, and you'll see at the very bottom,

00:36:00.369 --> 00:36:05.119
remember scripts was a large part of this
page, so we should really focus on scripts.

00:36:05.119 --> 00:36:10.690
But it turns out there's 6 teeny little
scripts that are loading on this page.

00:36:10.690 --> 00:36:17.579
And anything I could do to reduce this, knock it
down to 1 script resource that I need to load,

00:36:17.579 --> 00:36:24.389
would greatly improve the latency from 6
different pieces of latency to 1 piece of latency.

00:36:24.389 --> 00:36:32.500
So that's a way to target large numbers of resources
and improve the latency problem and speed up page load.

00:36:32.500 --> 00:36:37.579
So now let's talk about serially loaded resources.

00:36:37.579 --> 00:36:42.230
And this is somewhat hard to digest.

00:36:42.230 --> 00:36:51.619
But an easy way to find them is open up the resources
panel, sort by time again, and sort by response time.

00:36:51.619 --> 00:36:57.960
So now everything will be sorted by the time
it got that first byte of data from the server.

00:36:57.960 --> 00:36:59.940
And then I'm going to scroll down.

00:36:59.940 --> 00:37:06.000
And I noticed that there's these 2 resources
that are coming from a different domain,

00:37:06.000 --> 00:37:09.349
and you can see the domain underneath the file name here.

00:37:09.349 --> 00:37:17.900
And those resources look like they're causing, the
first one is causing the second resource to load.

00:37:17.900 --> 00:37:25.650
So that's really pushing out the page load time, because
that first resource says, oh, I need these other resources,

00:37:25.650 --> 00:37:28.920
go load these for me before I can finish the page load.

00:37:28.920 --> 00:37:33.320
So reducing any of that or putting them earlier

00:37:33.320 --> 00:37:37.740
in the page load would greatly help the
total time needed to load your page.

00:37:37.739 --> 00:37:47.739
So that's 3 different ways to find resource load problems
and fix them or identify them using the Web Inspector.

00:37:47.739 --> 00:37:50.719
So that's resource loading.

00:37:50.719 --> 00:37:53.509
Now let's talk about JavaScript performance problems.

00:37:53.510 --> 00:38:01.930
And when Kevin was fixing my game I noticed there
was a change I made, also, that seemed to have slowed

00:38:01.929 --> 00:38:04.639
down the artificial intelligence of the game.

00:38:04.639 --> 00:38:09.920
So hopefully Kevin can come back up and
use the Web Inspector to see how I'm doing

00:38:09.920 --> 00:38:12.400
in our artificial intelligence performance.

00:38:12.400 --> 00:38:14.010
Thanks Kevin.

00:38:14.010 --> 00:38:18.850
[ silence ]

00:38:18.849 --> 00:38:20.469
>> Kevin: Thanks again Tim.

00:38:20.469 --> 00:38:23.059
So, have the same game up.

00:38:23.059 --> 00:38:31.690
I've actually instrumented some of the code, but I
commented it out to show the time that things are taking.

00:38:31.690 --> 00:38:35.039
So let's go to the top of our JavaScript file.

00:38:35.039 --> 00:38:38.769
And you can see that I've commented
out a couple of lines of code here,

00:38:38.769 --> 00:38:41.679
2 at the top of this function and 2 at the bottom.

00:38:41.679 --> 00:38:48.460
This function is called once every time the
game moves all of the artificial players.

00:38:48.460 --> 00:38:55.110
And what I've done is I've used our console.log
function, which is just like Print F Debugging.

00:38:55.110 --> 00:39:02.120
It'll just spew a line of text into the console, in the
Web Inspector, and I have created a couple of objects.

00:39:02.119 --> 00:39:09.420
And in the second use of console.log you can see
that I subtract the end time from the start time,

00:39:09.420 --> 00:39:13.630
so you can actually just embed objects
and things into the log messages.

00:39:13.630 --> 00:39:19.750
So I'm going to save this file and reload our game.

00:39:19.750 --> 00:39:26.090
And now in the inspector what we should
see is these messages showing up-let's zoom

00:39:26.090 --> 00:39:29.650
in there-every time the computer makes a move.

00:39:29.650 --> 00:39:34.700
And we can see the times are varying,
there's 7 milliseconds, 14 milliseconds.

00:39:34.699 --> 00:39:38.969
The game randomly picks which players get to move that turn.

00:39:38.969 --> 00:39:41.359
And so there's not a lot of consistency here.

00:39:41.360 --> 00:39:46.370
So even if I sped up this function it'd be hard
for me to determine if it had done any good,

00:39:46.369 --> 00:39:50.789
maybe I could take out the randomness
and try to stabilize it a little bit.

00:39:50.789 --> 00:39:52.670
But we have a better tool.

00:39:52.670 --> 00:40:00.930
We, this is a personal favorite of mine, we have up here
the Profiles panel, and we have a JavaScript profiler.

00:40:00.929 --> 00:40:05.989
Just like the script debugger, you have
to enable it to add the profiling hooks.

00:40:05.989 --> 00:40:10.979
But right now it doesn't have anything to give it
any information, so we're going to turn that on.

00:40:10.980 --> 00:40:18.789
Then go back to the code and instead of using console.log,
I'm just going to change this to "console.profile".

00:40:18.789 --> 00:40:24.779
And I'm going to give this a different name.

00:40:24.780 --> 00:40:28.200
You can give a profile any name,
or you can leave a name off.

00:40:28.199 --> 00:40:37.769
If you do give it a name, however, then
when you call "console.profile" end,

00:40:37.769 --> 00:40:45.639
if you give it the same name then it will
only shut down a profile of that name.

00:40:45.639 --> 00:40:49.429
If you have multiple profiles running
and you call "console.profile",

00:40:49.429 --> 00:40:52.659
and it'll just close whatever the last one that was started.

00:40:52.659 --> 00:40:55.899
So I'm going to save that, reload our game.

00:40:55.900 --> 00:41:01.700
Now we should start seeing some profiles show up.

00:41:01.699 --> 00:41:06.929
Because I have named all these the same thing,
what you'll notice is that they're starting

00:41:06.929 --> 00:41:10.569
to be enumerated with run 2, run 3, run 4.

00:41:10.570 --> 00:41:15.570
And when I look at a profile I can
see all of them showing up underneath.

00:41:15.570 --> 00:41:19.530
So this is a way that you can compare successive runs

00:41:19.530 --> 00:41:26.180
of the same profile information against
each other to see how they vary.

00:41:26.179 --> 00:41:35.199
One thing I'm noticing here is that the function Draw
Cells is often the first or second function here.

00:41:35.199 --> 00:41:36.980
I also see stroke.

00:41:36.980 --> 00:41:40.119
And if I expand that this, currently
we're in the heavy-up view,

00:41:40.119 --> 00:41:44.150
which if you're used to Sharks,
this is I think it's the default.

00:41:44.150 --> 00:41:48.579
And so if I expand one of these it's going
to show me who calls these functions.

00:41:48.579 --> 00:41:55.809
Stroke was called by Draw Cells, and run, one of these I
saw Anonymous function that was also called by Draw Cells.

00:41:55.809 --> 00:41:58.849
So I'm starting to think Draw Cells is my problem here.

00:41:58.849 --> 00:42:04.369
I see this being called 17 times and it's
taking about 3 milliseconds in this case.

00:42:04.369 --> 00:42:10.460
Well I just so happen to know that in Tim's
game, originally, he only intended all the cells

00:42:10.460 --> 00:42:13.030
to be drawn once every time AI makes a decision.

00:42:13.030 --> 00:42:15.190
So yeah, it would move all the pieces and then redraw.

00:42:15.190 --> 00:42:17.380
So it shouldn't be being called 17 times.

00:42:17.380 --> 00:42:22.860
And if we look at the code we can see that there's
a call to draw cells here that is inside the for loop.

00:42:22.860 --> 00:42:26.960
And that's getting called every time the for loop
runs instead of just once for the whole function.

00:42:26.960 --> 00:42:29.860
So I'm going to move it to the bottom of the function.

00:42:29.860 --> 00:42:31.970
>> Tim: That's what it was.

00:42:31.969 --> 00:42:34.009
>> Kevin: And let's reload.

00:42:34.010 --> 00:42:40.910
[ silence ]

00:42:40.909 --> 00:42:46.039
>> Kevin: Here we have our profile information
again and we can see Draw Cells only had 1 call.

00:42:46.039 --> 00:42:51.880
And it took less than 2 milliseconds.

00:42:51.880 --> 00:42:57.920
So that's the way to use the profiler to find
information about the performance of your JavaScript.

00:42:57.920 --> 00:42:59.010
Turn it back over to Tim.

00:42:59.010 --> 00:43:05.570
[ applause ]

00:43:05.570 --> 00:43:11.090
>> Tim: Thanks Kevin, now I can really play that
game a lot faster than I was able to before.

00:43:12.150 --> 00:43:18.820
So Kevin showed you how to enable profile line
hooks in the profiles panel of the Web Inspector.

00:43:18.820 --> 00:43:26.740
And using the console.profile, and profile end functions
to target specific pieces or your code that you might want

00:43:26.739 --> 00:43:37.159
to verify-remember test, but verify, or trust but verify-and
that will let you target specific chunks of your code

00:43:37.159 --> 00:43:43.349
so you can know that you really sped it up or
you really messed it up and slowed it down.

00:43:43.349 --> 00:43:47.029
And then grouping of multiple profile runs.

00:43:47.030 --> 00:43:54.130
And that's really useful for comparing multiple
uses of that function to see how things are affected

00:43:54.130 --> 00:43:59.500
by randomness, as was the case of this game.

00:43:59.500 --> 00:44:01.800
So that's pretty much it.

00:44:01.800 --> 00:44:04.890
I showed you how to enable Safari's developer tools.

00:44:04.889 --> 00:44:10.369
And hopefully you've evolved on that if you're
interested in developing at all using Safari.

00:44:10.369 --> 00:44:14.940
And I've talked about using the
tools to prototype and develop sites,

00:44:14.940 --> 00:44:18.099
and how they fit into the whole development process.

00:44:18.099 --> 00:44:22.880
And then using our tools to find and
fix any errors that you might run into.

00:44:22.880 --> 00:44:30.500
So using the JavaScript debugger, or
using Print F Debugging in the console.

00:44:30.500 --> 00:44:33.409
And then improving page performance.

00:44:33.409 --> 00:44:39.789
Really improving your websites page load
performance for, not just your desktop users,

00:44:39.789 --> 00:44:43.269
but your mobile iPhone and iPod touch users.

00:44:43.269 --> 00:44:53.619
And using the JavaScript profiling to really verify
your code changes are fast as you think they are.

00:44:53.619 --> 00:45:02.219
Even though our nitro JavaScript engine is blazingly fast,
20 times fast in Snow Leopard than it was in Safari 3,

00:45:02.219 --> 00:45:07.139
you really need to improve your code stump.

00:45:07.139 --> 00:45:13.859
So for more information there's Vicki Murley, who's our
Safari Technologies Evangelist, and there's Mark Malone,

00:45:13.860 --> 00:45:17.190
the Internet and iPhone Technologies Evangelist.

00:45:17.190 --> 00:45:20.700
And then there's the Safari Dev
Center, which has tons of resources.

00:45:20.699 --> 00:45:27.809
This is a great resource for web developers
that are using Safari, and not just even Safari,

00:45:27.809 --> 00:45:32.049
you can go to the Safari developers center
and find out a whole bunch of things,

00:45:32.050 --> 00:45:34.430
like how to use the canvas element and things like that.