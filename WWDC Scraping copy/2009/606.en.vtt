WEBVTT

00:00:12.730 --> 00:00:19.000
>> Welcome to Adding Authentication, Authorization,
and Access Controls With the Open Directory Framework,

00:00:19.000 --> 00:00:25.660
or as I like to call the session, the session
with the three long A words in the title.

00:00:25.660 --> 00:00:27.829
Barely -- barely fit on the slides here.

00:00:27.829 --> 00:00:32.449
We had to do some special, you know, messing
around with the fonts to make it work.

00:00:32.450 --> 00:00:38.010
So -- but also, this session is also
known as DirectoryService Development

00:00:38.009 --> 00:00:42.000
in Snow Leopard, which is a little bit shorter title.

00:00:42.000 --> 00:00:49.399
I'm Nicole Jacque, and I am an engineer with the
Directory Server group at Apple, but one thing I want you

00:00:49.399 --> 00:00:56.329
to realize is that even though we have the title of this
API, the Open Directory Framework, even though this sounds

00:00:56.329 --> 00:01:02.609
like the name of our server product, and I'm from
the server group, this API is not just about server.

00:01:02.609 --> 00:01:06.700
This is about directory services with OS X in general.

00:01:06.700 --> 00:01:08.100
Client and server.

00:01:08.099 --> 00:01:12.309
So we're going to be talking about
-- a little bit about both today.

00:01:12.310 --> 00:01:17.000
But we're going start with an overview
of the DirectoryServices.

00:01:17.000 --> 00:01:21.420
How many people here are new to DirectoryServices in OS X.

00:01:21.420 --> 00:01:27.189
Anybody new to the platform, anybody new to
-- OK, got a whole bunch of old timers here.

00:01:27.189 --> 00:01:28.929
That's great.

00:01:28.930 --> 00:01:34.220
So we're going to start by talking about the Open
Directory Framework, after we do our overview.

00:01:34.219 --> 00:01:42.620
Then we're going to talk about a related API, which is the
membership API, and then we're going it talk about things

00:01:42.620 --> 00:01:49.990
that you can do to test and debug your DirectoryService
application, some tools that you can use, and finally,

00:01:49.989 --> 00:01:58.879
we're going to wrap up with some tips for how you can make
sure that your application does things right the first time,

00:01:58.879 --> 00:02:02.179
so that you don't have to, you
know, put an application out there

00:02:02.180 --> 00:02:06.240
and have people say, Oh, what, it doesn't work with this.

00:02:06.239 --> 00:02:09.650
So we're going to cover a bunch of
common issues that developers run into.

00:02:09.650 --> 00:02:16.590
So let's just start with a brief
overview of DirectoryServices.

00:02:16.590 --> 00:02:21.430
The main job of DirectoryServices in OS X is,

00:02:21.430 --> 00:02:25.870
it's a translator between some store
of data that has records in it.

00:02:25.870 --> 00:02:31.020
And this could be records for things
like users or groups or computers.

00:02:31.020 --> 00:02:36.850
Really just any kind of type of data that
you might want to store and use in some way.

00:02:36.849 --> 00:02:42.329
And then it has to translate this
to the operating system layer.

00:02:42.330 --> 00:02:47.780
So OS X wants to know about users in groups, but it
doesn't really know what to do with this data store,

00:02:47.780 --> 00:02:51.960
because it could be something like flat
files, it could be some server out somewhere.

00:02:51.960 --> 00:02:55.780
So DirectoryService's job is to make sense of all of this.

00:02:55.780 --> 00:02:59.090
And it does this with a bunch of different plug-ins.

00:02:59.090 --> 00:03:02.090
So we have a plug-in for open directory.

00:03:02.090 --> 00:03:04.300
That's Apple's own directory server.

00:03:04.300 --> 00:03:08.530
But we also talk to Active Directory, which is very popular.

00:03:08.530 --> 00:03:14.520
We talk to the UNIX flat files, we
talk to NIS, we talk to E directory.

00:03:14.520 --> 00:03:21.980
We have a generic LDAP 3G plug-in that can
pretty much talk to any LDAP server out there.

00:03:21.979 --> 00:03:30.349
And what this looks like is, you have OS X layer at the
top and the operating system calls into directory services

00:03:30.349 --> 00:03:37.409
with some different APIs, you can use the limb
system APIs, you can use the DirectoryService APIs,

00:03:37.409 --> 00:03:42.599
which is the traditional API that people have been
using for a long time to talk to DirectoryServices.

00:03:42.599 --> 00:03:45.739
And now we have the new Open Directory Framework.

00:03:45.740 --> 00:03:53.000
And then DirectoryService itself is a daemon that
runs -- it kind of does all of the translation work.

00:03:53.000 --> 00:03:58.860
And then it has a bunch of plug-ins that talk to all
of the various data stores, whether they're a flat file

00:03:58.860 --> 00:04:02.430
on your local system or some server out on the network.

00:04:02.430 --> 00:04:10.760
And one thing to point out here is if there's not a plug-in
for the directory server, the directory data that you want

00:04:10.759 --> 00:04:16.209
to use, you can actually write a plug-in
to DirectoryServices to talk to that.

00:04:16.209 --> 00:04:18.469
So this is extensible.

00:04:20.529 --> 00:04:22.229
Who uses DirectoryServices?

00:04:22.230 --> 00:04:25.250
Well, everybody does.

00:04:25.250 --> 00:04:32.269
Everybody, you either log in to your machine or you
may have it set to automatically log in for you,

00:04:32.269 --> 00:04:36.409
but every time you do that, you're
talking to DirectoryServices.

00:04:36.410 --> 00:04:41.570
But then lots and lots of different
applications and services that are running

00:04:41.569 --> 00:04:44.620
on your machine are talking to
DirectoryService all the time.

00:04:44.620 --> 00:04:50.069
Every time that you access your file in your File System,
it's got to figure out who has access to that file

00:04:50.069 --> 00:04:55.769
and to get information about users and groups
and so on, it has to talk to DirectoryServices.

00:04:55.769 --> 00:05:00.329
Things that run on a server, things
like the wiki server, or iCal server.

00:05:00.329 --> 00:05:05.529
All of those types of applications
all use DirectoryServices.

00:05:05.529 --> 00:05:12.000
So whether you know it or not, you've
probably used DirectoryService all the time.

00:05:12.000 --> 00:05:18.350
But more generally, there's several different categories
of developers that tend to use DirectoryServices,

00:05:18.350 --> 00:05:24.990
and one is just people that are developing some service,
maybe something that, you know, runs under the covers

00:05:24.990 --> 00:05:31.569
or command line utility, something that, you
know, may be a file server, something like that.

00:05:31.569 --> 00:05:36.839
Then there's also people that write applications,
things with nice, pretty GUIs on them.

00:05:36.839 --> 00:05:42.149
And for example you might want to be able
to have people select users to have access

00:05:42.149 --> 00:05:45.009
to something, or read data out of DirectoryServices.

00:05:45.009 --> 00:05:48.269
So those people use DirectoryServices.

00:05:48.269 --> 00:05:56.029
But one of the really exciting areas that people can, you
know, areas where people can use DirectoryServices is people

00:05:56.029 --> 00:06:00.459
that are like in house developers or system Admins.

00:06:00.459 --> 00:06:05.899
Because a lot of times you have all this data
already in your directory server somewhere,

00:06:05.899 --> 00:06:08.179
and you'd like to make use of it in some other way.

00:06:08.180 --> 00:06:16.259
And rather than having to have a totally separate duplicate
of all of this data, all the user records and you know,

00:06:16.259 --> 00:06:21.759
pass words and stuff, you can actually
just tie right in to DirectoryServices.

00:06:21.759 --> 00:06:32.039
So the big news for Snow Leopard is we've always
had this thing called the DirectoryService API.

00:06:32.040 --> 00:06:35.879
And this is how you use any --
if you've done any programming

00:06:35.879 --> 00:06:39.159
with DirectoryServices, this is probably how you've done it.

00:06:39.160 --> 00:06:42.939
How many people have used DirectoryService API?

00:06:42.939 --> 00:06:46.100
OK, good group of you.

00:06:46.100 --> 00:06:51.390
So the big news for Snow Leopard is it's deprecated.

00:06:51.389 --> 00:06:57.939
And please -- please don't cry or
anything like that, I know you're --

00:06:57.939 --> 00:07:04.750
you're all probably very, very saddened
to see it go, we're very sad ourselves.

00:07:04.750 --> 00:07:09.310
Ahem, I'm trying to stop from dancing up here.

00:07:09.310 --> 00:07:16.490
And if we're going to -- we're going deprecate this --
and by the way it is still there, you can still use it.

00:07:16.490 --> 00:07:18.750
You'll get warnings that it's deprecated.

00:07:18.750 --> 00:07:19.879
But it's not gone.

00:07:19.879 --> 00:07:20.509
Just deprecated.

00:07:20.509 --> 00:07:30.120
We want to encourage you, instead, though, to take a
look at new API, which is the Open Directory Framework.

00:07:30.120 --> 00:07:31.590
So what is the Open Directory Framework.

00:07:31.589 --> 00:07:36.500
Well, it's a high level API, and we have two flavors of it.

00:07:36.500 --> 00:07:39.709
We have Cocoa and CoreFoundation.

00:07:39.709 --> 00:07:45.029
So whether you use Cocoa or CoreFoundation,
we have an API for you.

00:07:45.029 --> 00:07:50.409
And you can use this to read, write,
authenticate, do anything that you would do

00:07:50.410 --> 00:07:54.320
with DirectoryServices to any DirectoryService node.

00:07:54.319 --> 00:07:57.659
So the fact that it says open directory
in the title does not mean you're limited

00:07:57.660 --> 00:08:00.990
to using things with our open directory server.

00:08:00.990 --> 00:08:04.439
This is anything in DirectoryServices.

00:08:04.439 --> 00:08:13.509
It's also thread safe, and one of the important things
about this API was this is our chance to really do it right.

00:08:13.509 --> 00:08:20.379
And so we try to make it very simple, very easy
to use, to have data structures that make sense.

00:08:20.379 --> 00:08:24.670
So one of the things that you'll notice if
you're familiar with the DirectoryService API,

00:08:24.670 --> 00:08:29.720
there's no more of this having to create a buffer,
and you know, see if it's big enough, you know,

00:08:29.720 --> 00:08:34.649
maybe make it bigger, and see if it's big enough,
and maybe make it bigger, see if it's big enough.

00:08:34.649 --> 00:08:42.879
I actually recently had the opportunity to show some people
that had never done any DirectoryService programming before,

00:08:42.879 --> 00:08:46.679
one person had some backwards compatibility requirements.

00:08:46.679 --> 00:08:49.659
They had to still learn the DirectoryService API.

00:08:49.659 --> 00:08:54.969
And one had to learn the Open Directory
Framework, because they didn't need any

00:08:54.970 --> 00:08:57.779
of the other stuff, and they wanted to use the new API.

00:08:57.779 --> 00:09:03.269
Open Directory Framework, they caught on right away, they
said, Hey, this all makes sense, this is really easy,

00:09:03.269 --> 00:09:06.460
once they figured out what a node was and all this stuff.

00:09:06.460 --> 00:09:07.480
Piece of cake.

00:09:07.480 --> 00:09:12.100
Got to tell you, teaching somebody the
DirectoryService API after you're used

00:09:12.100 --> 00:09:15.529
to the Open Directory Framework -- it was so painful.

00:09:15.529 --> 00:09:19.889
I still have nightmares about that.

00:09:19.889 --> 00:09:26.399
So -- you know, they're like, Well, what's this
buffer thing, why am I -- what's this data structure?

00:09:26.399 --> 00:09:35.129
So anyway, those of you who have used the
DirectoryService API will really appreciate the simplicity

00:09:35.129 --> 00:09:36.980
of the Open Directory Framework, and those of you

00:09:36.980 --> 00:09:39.810
that haven't used the DirectoryService
API, well, you're just lucky.

00:09:39.809 --> 00:09:45.589
So we're going to start talking about the API itself,

00:09:45.590 --> 00:09:50.389
and we're going to talk today mostly
about the Cocoa version of it.

00:09:50.389 --> 00:09:58.250
Most of this is all -- it's mirrored by the CoreFoundation
version, but we had to kind of pick one way or the other

00:09:58.250 --> 00:10:01.659
to talk about it, to make it less confusing,
so we're going to go with the Cocoa version.

00:10:01.659 --> 00:10:06.059
So there's four main classes that you have to work with.

00:10:06.059 --> 00:10:07.599
And we have the ODSession.

00:10:07.600 --> 00:10:10.230
So there's four main classes that you have to work with.

00:10:10.230 --> 00:10:13.710
And we have the ODSession, the
ODNode, the ODRecord, and the ODQuery.

00:10:13.710 --> 00:10:16.509
And so to start, let's talk about what an ODSession is.

00:10:16.509 --> 00:10:22.960
An ODSession is really just a conversation
between your process and DirectoryServices.

00:10:22.960 --> 00:10:28.220
So whatever DirectoryServices is talking to out
there, you don't really know at this point yet.

00:10:28.220 --> 00:10:31.980
You just want to talk to DirectoryS.

00:10:31.980 --> 00:10:37.649
And generally speaking, you don't have
to do too much configuration for this.

00:10:37.649 --> 00:10:39.529
You just want the default session.

00:10:39.529 --> 00:10:40.740
So that's pretty easy to get.

00:10:40.740 --> 00:10:43.049
You just say ODSession, default session.

00:10:43.049 --> 00:10:49.240
And then once you have your session
you get a bunch of information.

00:10:49.240 --> 00:10:52.980
You can find out, for example, what nodes are available.

00:10:52.980 --> 00:10:56.269
So you can find out what is DirectoryService
configured to talk to.

00:10:56.269 --> 00:11:02.019
Is it talking to Active Directory, is it talking to
an LDAP server, is it talking to just local nodes.

00:11:03.090 --> 00:11:10.070
You can also find out what nodes
might be actually up or down.

00:11:10.070 --> 00:11:12.330
So you've got the list of all the nodes that are configured.

00:11:12.330 --> 00:11:16.480
Now you can see which ones are not
actually working at the moment.

00:11:16.480 --> 00:11:19.320
So maybe the server is down or the network is down.

00:11:19.320 --> 00:11:24.760
You can find out that information from the session.

00:11:24.759 --> 00:11:30.370
Now once you have the session, it's
time to work down another layer.

00:11:30.370 --> 00:11:32.899
And that is to start talking to an actual node.

00:11:32.899 --> 00:11:37.689
So the ODNode is a representation of a data store somewhere.

00:11:37.690 --> 00:11:41.320
So this could be, you know, flat files,
it could be some directory server.

00:11:41.320 --> 00:11:43.450
It could also be a collection of data stores.

00:11:43.450 --> 00:11:47.020
So it could be multiple nodes kind
of conglomerated together.

00:11:47.019 --> 00:11:48.659
We have a couple of special ones.

00:11:48.659 --> 00:11:51.449
For example, the search node, which
we're going to talk a lot about.

00:11:51.450 --> 00:11:56.740
This is just really a node that is made up
of all the nodes that the user has said,

00:11:56.740 --> 00:11:59.519
I want to use these nodes to authenticate against.

00:11:59.519 --> 00:12:03.409
And there's also a node called Active Directory all domains.

00:12:03.409 --> 00:12:07.839
This is really just a node that contains
all the different domains that are

00:12:07.840 --> 00:12:09.930
in Active Directory that a user is configured to.

00:12:09.929 --> 00:12:12.889
Because an Active Directory forest can have lots of domains.

00:12:12.889 --> 00:12:16.330
And you might not want to have to talk
to each individual domain in the forest,

00:12:16.330 --> 00:12:19.150
you can talk to Active Directory, all domains.

00:12:19.149 --> 00:12:27.779
When you're talking about nodes, one way you can
pick a node is you can specify it by its actual name.

00:12:27.779 --> 00:12:33.329
And this usually looks something like the
plug-in name slash the actual configured,

00:12:33.330 --> 00:12:36.710
you know, server or type of that plug-in.

00:12:36.710 --> 00:12:45.300
So you know, if it's the LDAP plug-in, it's LDAP V 3, slash,
the name of your server, Active Directory, all domains.

00:12:45.299 --> 00:12:46.439
So you can do this.

00:12:46.440 --> 00:12:52.130
You can say node with session and the name,
and just specify the actual name here.

00:12:52.129 --> 00:13:01.620
The other thing that you can do is you could
actually specify the node by the node type.

00:13:01.620 --> 00:13:04.560
And we have a bunch of different types.

00:13:04.559 --> 00:13:08.219
There's really just one that you really use a lot.

00:13:08.220 --> 00:13:12.680
And that is the authentication,
KOD type of node authentication.

00:13:12.679 --> 00:13:19.179
This is the same thing we're talking about and
referring to this as the search node a lot.

00:13:19.179 --> 00:13:20.939
But there's also a few other ones.

00:13:20.940 --> 00:13:25.370
There's contacts, which is records
that are used by Address Book.

00:13:25.370 --> 00:13:30.470
There's network, there's local nodes, which
is nodes that are local to the computer,

00:13:30.470 --> 00:13:36.680
and there's the configuration node, which is information
that DirectoryServices uses for its own configuration.

00:13:36.679 --> 00:13:43.609
So if you want to specify the node by its type, you just --

00:13:43.610 --> 00:13:48.190
node with session type, an then specify
the particular one that you want to use.

00:13:48.190 --> 00:13:52.330
And in this case, KOD node type,
authentication, which is the search node.

00:13:52.330 --> 00:13:58.530
So first thing, of course, you get your session.

00:13:58.529 --> 00:14:00.870
Once you have a session, you can get the node.

00:14:00.870 --> 00:14:03.210
In this case, we're specifying the search node.

00:14:03.210 --> 00:14:08.790
And you get some information about the node,
you can find out what the node's name is.

00:14:08.789 --> 00:14:14.730
You can also find out some more information, for
example, you can find out is the node read only.

00:14:14.730 --> 00:14:18.289
Some nodes you can write to, some nodes you can't.

00:14:18.289 --> 00:14:21.889
Might also want to find out how is the machine bound to it.

00:14:21.889 --> 00:14:26.759
Is it a trusted authentication bind, is it
anonymous, you can find that kind of information out.

00:14:26.759 --> 00:14:29.980
And you can also find out what record
types are supported by that node.

00:14:29.980 --> 00:14:34.500
Because not all directory servers out
there support all types of records.

00:14:34.500 --> 00:14:44.250
And so now that we've already mentioned records,
that brings us to the third class, which is ODRecord.

00:14:44.250 --> 00:14:49.220
So a record is just some data stored in the node.

00:14:49.220 --> 00:14:51.360
And it could be a user, it could be a group.

00:14:51.360 --> 00:14:54.620
But it's basically a record, which has a name,

00:14:54.620 --> 00:15:00.799
and then it has lots of different pieces
of information called attributes in it.

00:15:00.799 --> 00:15:05.059
And so for example, you might be familiar
with Work Group Manager, where you actually --

00:15:05.059 --> 00:15:08.529
you know, you have all kinds of different pieces
of information that can be part of a record,

00:15:08.529 --> 00:15:11.909
and all kinds of different records that you can work with.

00:15:11.909 --> 00:15:14.319
Here's -- here's Steve's.

00:15:14.320 --> 00:15:27.000
Sort of. Anybody thought that was his real home phone
number, don't -- so you've got all these records.

00:15:27.000 --> 00:15:32.919
And there's lots and lots of different
record types out there.

00:15:32.919 --> 00:15:40.229
I've got a few of the real popular ones here, like users
and groups, computers, configuration records, accounts,

00:15:40.230 --> 00:15:43.590
people -- those are what we call our contact records.

00:15:43.590 --> 00:15:49.580
But there's a whole long list of these, and if you
check out the documentation in the constant section,

00:15:49.580 --> 00:15:51.780
you know, I think it goes on for, like, pages.

00:15:51.779 --> 00:15:59.129
So take a look, if there's a record you're looking
for, I'm sure we have a record type for it.

00:15:59.129 --> 00:16:04.039
So once you have the record name,
it's pretty easy to get the record.

00:16:04.039 --> 00:16:08.409
So you know, we set up our session and we get the node.

00:16:08.409 --> 00:16:13.719
We get the record, and in this case,
we already know that the user's name --

00:16:13.720 --> 00:16:21.220
in this case as off user, so we're just saying give us a
record type of user, and we've got the name as off user.

00:16:21.220 --> 00:16:25.680
We can specify what attributes
we want for that -- that user.

00:16:25.679 --> 00:16:29.299
We can get all of them, we can
get some certain subset of them.

00:16:29.299 --> 00:16:39.099
And then you can also do things like read a particular
value of one of the attributes in that record.

00:16:39.100 --> 00:16:46.370
And the nice thing here you'll notice, for those of you who
use the DS API, we're just dealing with things like arrays.

00:16:46.370 --> 00:16:50.610
You can also get a dictionary of all of these values.

00:16:50.610 --> 00:16:56.310
So it's really easy to work with, and you get
these data structures back that make sense.

00:16:59.149 --> 00:17:02.939
And once you have a record there's some
interesting things you can do with records.

00:17:02.940 --> 00:17:07.680
One of them is, well, if you're going to be
authenticating users you want to be able to verify

00:17:07.680 --> 00:17:12.380
that you've got their passwords correct,
so they know if he gets access or not.

00:17:12.380 --> 00:17:16.410
And if you're working with passwords, well
the next thing users, well, you know, users,

00:17:16.410 --> 00:17:21.320
they're not happy with just authenticating,
they want to change their password too.

00:17:21.319 --> 00:17:24.909
So we give you some really easy methods for doing that.

00:17:24.910 --> 00:17:31.019
So in this case, we set up the session
in the node, you can verify the password.

00:17:31.019 --> 00:17:33.029
That's verify password.

00:17:33.029 --> 00:17:41.129
And you can also change the password.

00:17:41.130 --> 00:17:46.460
Once you've dealt with authenticating users and stuff
like that, another common thing you want to do is be able

00:17:46.460 --> 00:17:49.930
to actually edit records and DirectoryServices.

00:17:49.930 --> 00:17:54.970
And to edit a record there's really -- there's
three steps that you need to go through.

00:17:54.970 --> 00:18:01.610
The first thing you need to do is, you need to supply
some credentials to DirectoryServices to say who you are,

00:18:01.609 --> 00:18:06.099
who is this person that wants to
actually edit something in the directory.

00:18:06.099 --> 00:18:11.329
Because of course the directory doesn't
want to let just anybody edit the data.

00:18:11.329 --> 00:18:18.980
You know, if you let, you know, just any old user edit
your Active Directory, that probably isn't going to fly.

00:18:18.980 --> 00:18:25.940
So what you need to do is specify the credentials for what
user, or maybe it could be a computer account potentially,

00:18:25.940 --> 00:18:30.490
too, is actually going to be making
the change in the directory.

00:18:30.490 --> 00:18:37.160
After you do that, you can specify
what actual changes you want to make.

00:18:37.160 --> 00:18:41.690
And then finally, you're going to actually
synchronize the record with the directory.

00:18:41.690 --> 00:18:44.970
And this is where the actual change takes place.

00:18:44.970 --> 00:18:47.559
Until you do the synchronize, nothing happens.

00:18:47.559 --> 00:18:53.059
So just a little example here.

00:18:53.059 --> 00:18:54.399
First we're going to set the credentials.

00:18:54.400 --> 00:18:59.200
So we've got some Admin user that we're going to use.

00:18:59.200 --> 00:19:04.450
And that Admin user is going to
edit some data in some other record.

00:19:04.450 --> 00:19:09.390
In this case, we're adding some
plist information to a user record.

00:19:10.460 --> 00:19:16.029
Now even though we said what we're going to
do to the record, nothing actually happens

00:19:16.029 --> 00:19:18.889
until we actually do the synchronization.

00:19:18.890 --> 00:19:27.240
So when we do synchronize and return
error, that actually does the write.

00:19:27.240 --> 00:19:35.069
Another type of editing that people need to
do is -- has to do with group membership.

00:19:35.069 --> 00:19:39.289
And this is both checking membership in a group,
because that can be pretty complex, right?

00:19:39.289 --> 00:19:43.909
Because you can have users in a group,
you can have a group with nested groups,

00:19:43.910 --> 00:19:47.950
we could have many, many layers of nesting of groups.

00:19:47.950 --> 00:19:55.500
And then you want to be able to edit the membership
in that group, and again, that can be very complicated

00:19:55.500 --> 00:20:02.730
because if you got all this nest and you've got to
figure out, OK, how do I get that user in that group.

00:20:02.730 --> 00:20:09.559
And we actually store our group information in
one way, and different other directory servers

00:20:09.559 --> 00:20:11.869
out there, they might store it a different way.

00:20:11.869 --> 00:20:19.649
For example, in open directory and our DirectoryServices,
we store group information with both the user name

00:20:19.650 --> 00:20:22.870
and the user's GUI, so there's actually two attributes.

00:20:22.869 --> 00:20:30.179
So rather than having you try to sort this out on your own
, we're going to give you some easy methods toward handling,

00:20:30.180 --> 00:20:36.100
checking group membership, and editing group membership.

00:20:36.099 --> 00:20:42.299
So once you have your user record and
your group record, this is really easy.

00:20:42.299 --> 00:20:44.599
Say we want to add a user to a group.

00:20:44.599 --> 00:20:51.189
Well, we just do add member record, and we
add the user record to the group record.

00:20:51.190 --> 00:20:58.529
Now because this is a change, this
is an editing of a record,

00:20:58.529 --> 00:21:02.379
you again have to do the synchronize
and return error, or nothing happens.

00:21:02.380 --> 00:21:09.250
But now we can test and see if this
user is now in fact in the group.

00:21:09.250 --> 00:21:13.130
And so that is the is-member record method.

00:21:13.130 --> 00:21:16.180
And that's going to return true or false.

00:21:16.180 --> 00:21:20.680
And then again we could also remove a user from a group.

00:21:20.680 --> 00:21:27.789
And you could actually remove groups from
groups or add groups to groups, and so on.

00:21:27.789 --> 00:21:34.619
But again, keep in mind, you make the change, you have to
do the synchronize afterwards, or nothing's going to happen.

00:21:34.619 --> 00:21:42.719
So we've been talking a lot about records so
far, and I've been kind of cheating, right?

00:21:42.720 --> 00:21:46.789
Because I always knew what the record name was before hand.

00:21:46.789 --> 00:21:51.099
And a lot of times you don't know, you
don't just get passed a record name.

00:21:51.099 --> 00:21:54.219
You have to find out what is the actual record name.

00:21:54.220 --> 00:21:56.509
What is this record that I want to deal with.

00:21:56.509 --> 00:22:00.400
And to get this information you want
to be able to query DirectoryServices.

00:22:00.400 --> 00:22:04.340
And that's what the fourth data type is for, the ODQuery.

00:22:04.339 --> 00:22:09.740
So you could -- you could have some sort
of complex query where you say, you know,

00:22:09.740 --> 00:22:14.870
find all the users with a phone number that
begins with 555 and you want their name

00:22:14.869 --> 00:22:19.209
and you can specify what information you want back.

00:22:19.210 --> 00:22:23.779
So query like this in code looks something like this.

00:22:23.779 --> 00:22:25.599
So we have our session in node.

00:22:25.599 --> 00:22:28.389
And then we set up the query.

00:22:28.390 --> 00:22:32.320
And the query you can specify a
lot of different parameters here.

00:22:32.319 --> 00:22:41.119
So you're going to specify what node you want to
query, and keep in mind when you're doing the querying,

00:22:41.119 --> 00:22:47.500
it's probably more likely that you want to query
the search node as opposed to any particular node,

00:22:47.500 --> 00:22:52.799
because you don't necessarily know what node
any kind -- any particular record is in.

00:22:52.799 --> 00:22:56.710
So for queries, generally speaking,
stick to the search node.

00:22:56.710 --> 00:23:01.279
OK, then you want to specify what
type of record are you searching for.

00:23:01.279 --> 00:23:04.869
Looking for users, looking for groups, computer records.

00:23:04.869 --> 00:23:09.889
And then you want to specify what
attributes you want to search on.

00:23:09.890 --> 00:23:13.430
Could be the record name, could be any other attribute.

00:23:13.430 --> 00:23:15.220
And what type of matching you want.

00:23:15.220 --> 00:23:22.890
So if you want something that's equal, if you
want it to be case sensitive, case insensitive.

00:23:22.890 --> 00:23:26.009
You can specify what you're actually trying to match now.

00:23:26.009 --> 00:23:30.720
So you actually want to search for users with the name John.

00:23:30.720 --> 00:23:38.549
Or you want to search for users who have a
Home Directory on this particular server.

00:23:38.549 --> 00:23:43.419
And then finally you want to specify
what you want to get back.

00:23:43.420 --> 00:23:46.730
So you want to specify what attributes do you want.

00:23:46.730 --> 00:23:49.230
You might not be interested in the
entire record, you might just want one

00:23:49.230 --> 00:23:52.390
or two attributes, or you might want everything.

00:23:52.390 --> 00:23:57.820
And you also want to specify what results
-- how many results do you want to get.

00:23:57.819 --> 00:24:00.389
You might only care if there's one result.

00:24:00.390 --> 00:24:04.640
You don't care, there might be one result or
a thousand results, it's all the same to you.

00:24:04.640 --> 00:24:07.660
So you might say, Well, I just want one.

00:24:07.660 --> 00:24:11.519
You could say you want all of the
results back, which would be zero.

00:24:11.519 --> 00:24:14.829
Or you could specify, you know, some other specific number.

00:24:14.829 --> 00:24:21.470
And you could also get -- provide a -- get back an error.

00:24:21.470 --> 00:24:27.450
And you'll notice in all my slides I have
been not necessarily passing an error in.

00:24:27.450 --> 00:24:29.650
Can also pass nil here.

00:24:29.650 --> 00:24:38.769
You set up the query, but the query does not actually
run until you tell it to actually go do something.

00:24:38.769 --> 00:24:43.389
So that method is results allowing partial.

00:24:43.390 --> 00:24:51.420
And results allowing partial is what
you would do to run a synchronous query.

00:24:51.420 --> 00:24:55.190
So in other words, you basically
-- you have two options here.

00:24:55.190 --> 00:25:01.059
If you say results allowing partial, No, it's
going to do the query, and it's going to block

00:25:01.059 --> 00:25:06.429
until it gets all the results that it's
going to get, and return them to you.

00:25:06.430 --> 00:25:10.039
OK, keep in mind, this is going to be sitting here blocking.

00:25:10.039 --> 00:25:14.779
And depending on what your application is
doing, that might not be real convenient.

00:25:14.779 --> 00:25:17.869
So you might want to consider doing an asynchronous query.

00:25:17.869 --> 00:25:24.569
The other option here is you can
say results allowing partial, Yes.

00:25:24.569 --> 00:25:29.950
This is going to return results as they come in, but
you're going to have to sit there and poll for them.

00:25:29.950 --> 00:25:32.529
And you know what, polling is no fun.

00:25:32.529 --> 00:25:37.430
So really, you just never want to
say results allowing partial, Yes.

00:25:37.430 --> 00:25:44.000
My main point for even having this
slide in here is to say don't do it, OK?

00:25:44.000 --> 00:25:49.480
We're going to actually have an
example of an asynchronous query.

00:25:49.480 --> 00:25:52.380
And that's what you should do instead
of results allowing partial, Yes.

00:25:52.380 --> 00:26:02.020
Now if you have a query that's already set up, you
can also have this query be called synchronize.

00:26:02.019 --> 00:26:07.410
And this means that it's going to dump any
existing results and restart the query.

00:26:07.410 --> 00:26:12.779
And now that we've talked about all of
these different fun things you can do

00:26:12.779 --> 00:26:16.529
with DirectoryServices, I think it's time for a demo.

00:26:16.529 --> 00:26:18.789
Fun with records.

00:26:18.789 --> 00:26:24.559
This first example is actually something that
is -- how many people here would consider --

00:26:24.559 --> 00:26:31.059
maybe you're from the IT track, you're
an assist Admin -- oh, all right, great.

00:26:31.059 --> 00:26:32.769
It's great to see you people here.

00:26:32.769 --> 00:26:36.289
All right, so this is something that you guys
in particular are going to find interesting.

00:26:36.289 --> 00:26:39.649
This is the sort of thing you might want to do.

00:26:39.650 --> 00:26:44.640
What we're going to do is I have an
Open Directory Master running here

00:26:44.640 --> 00:26:47.230
on my laptop, because you know, that's normal, right?

00:26:47.230 --> 00:26:50.230
Having -- everybody runs an LDAP server on their laptop.

00:26:50.230 --> 00:26:54.430
And I've got a whole bunch of records in here.

00:26:54.430 --> 00:27:04.400
You know, and I've got some information for them, I've
got some, like, for example, what department they're in,

00:27:04.400 --> 00:27:13.480
and I don't have any groups though, and I would kind of like
to have some groups based on what department they're in.

00:27:13.480 --> 00:27:18.190
I'd like to have a group for the engineering department,
maybe one more the marketing department, and you know,

00:27:18.190 --> 00:27:25.150
it would be a real pain to have to search around and
find them, and drag them into a group a stuff like that.

00:27:25.150 --> 00:27:29.750
So instead what we're going to do is
we're actually going to write some code.

00:27:29.750 --> 00:27:36.420
And what we're going to do is write code to basically do
a search, find all the users in a particular department,

00:27:36.420 --> 00:27:41.960
create a group, put those users
in the group, and there we go.

00:27:41.960 --> 00:27:47.059
So, can everybody see -- is the font
size big enough, or should I zoom in?

00:27:47.059 --> 00:27:53.339
How's that?

00:27:53.339 --> 00:27:54.639
All right.

00:27:54.640 --> 00:28:00.520
So first thing that we're going to
do is, we need to get a session.

00:28:00.519 --> 00:28:01.700
So pretty easy.

00:28:01.700 --> 00:28:06.809
We don't really care too much about any parameters
for the session, we just want the default one.

00:28:06.809 --> 00:28:11.730
And for our searching, again, we
just want to use the search node.

00:28:11.730 --> 00:28:16.180
The search node is whatever the user has
specified they want to use for searches

00:28:16.180 --> 00:28:18.570
for information, for like user records and so on.

00:28:18.569 --> 00:28:26.019
So we're going to go ahead and we're going it use the
search node, which is the ODType authentication node.

00:28:26.019 --> 00:28:32.730
And now let's actually go ahead
and do a query on the search node.

00:28:32.730 --> 00:28:35.480
So again, we're supposed to find the search node.

00:28:35.480 --> 00:28:40.500
And we're going to look for record types that are users.

00:28:40.500 --> 00:28:44.880
And we're going to search on an --
and this is a command line program,

00:28:44.880 --> 00:28:47.960
so we've got a bunch of arguments
up here that I already have set up.

00:28:47.960 --> 00:28:50.870
So we're going to search for something
that the user passes in.

00:28:50.869 --> 00:28:54.879
So it's going to be the actual name of the department.

00:28:54.880 --> 00:28:59.590
And in this case, I've chosen -- we're going to
make it -- it's going to have to be an equal match.

00:28:59.589 --> 00:29:05.289
So we're going to have to actually
give the exact name of the department.

00:29:05.289 --> 00:29:12.230
And then -- I'm sorry -- actually the attribute
that we're searching on is going to be passed in.

00:29:12.230 --> 00:29:18.759
And that is going to be in this case the actual name
of the -- the attribute that they want to search.

00:29:18.759 --> 00:29:22.609
So this is pretty flexible tool.

00:29:22.609 --> 00:29:25.679
They can pass in the actual full name of any attribute.

00:29:25.680 --> 00:29:30.870
In this case, we're going to be passing in
something like DS Attribute Standard Department.

00:29:34.509 --> 00:29:37.210
And then the search value is also being passed in.

00:29:37.210 --> 00:29:40.170
So that is the actual name of the department.

00:29:40.170 --> 00:29:45.759
And for the return attributes, we're just going
to say, OK, just return them all, that's fine.

00:29:45.759 --> 00:29:48.079
And we want all the results.

00:29:48.079 --> 00:29:53.029
And I'm not going to check for errors here, but you should.

00:29:53.029 --> 00:29:58.740
This is one of those do as I say, not as I do moments.

00:29:58.740 --> 00:30:03.240
OK? And then -- because this is
just a simple little utility.

00:30:03.240 --> 00:30:05.870
We're going to go ahead and do a synchronous query here.

00:30:05.869 --> 00:30:08.139
So we're going to say results allowing partial, No.

00:30:08.140 --> 00:30:10.050
So we're going to wait for all the results.

00:30:10.049 --> 00:30:12.309
We're just going to block.

00:30:12.309 --> 00:30:16.629
And we are just going to print
out how many results we get here.

00:30:16.630 --> 00:30:20.110
OK, now we're going to actually deal with the group itself.

00:30:20.109 --> 00:30:26.569
So for that, we actually need to know, well,
What node do we want to create this group in?

00:30:26.569 --> 00:30:31.059
So we're going to let the user
actually pass in what node they want

00:30:31.059 --> 00:30:35.099
to create the -- the actual group that we're creating in.

00:30:35.099 --> 00:30:39.539
So it could be in the LDAP node, it could be in
the local node, wherever they want to put it.

00:30:39.539 --> 00:30:42.450
OK, so we -- for that we just need to specify the session.

00:30:42.450 --> 00:30:46.940
We use the same session, and the node is being passed in.

00:30:46.940 --> 00:30:50.160
So now let's go ahead and set the credentials.

00:30:50.160 --> 00:30:56.060
So the user is going to have to provide some information,
some Admin credentials, a user name and password

00:30:56.059 --> 00:31:01.399
for an Admin user that has the
authority to write to the directory node.

00:31:01.400 --> 00:31:08.120
So in this case, we're saying we've got a user whose name
is whatever the Admin name they pass in, and the password.

00:31:08.119 --> 00:31:13.889
And then we're going to go ahead and
actually create this group in the directory.

00:31:13.890 --> 00:31:17.870
So we're just going to say create record with record type.

00:31:17.869 --> 00:31:19.019
It's a group.

00:31:19.019 --> 00:31:22.069
And we're going to pass in a name for the group.

00:31:22.069 --> 00:31:26.569
And we don't care about the attributes,
and again we're not checking for errors.

00:31:26.569 --> 00:31:27.730
But you should.

00:31:27.730 --> 00:31:32.720
And then we're going to go ahead and we're
going to set some information on the group.

00:31:32.720 --> 00:31:38.259
I figure in addition to actually setting
the group membership we should --

00:31:38.259 --> 00:31:42.349
we should put a comment in there so we know we
have this fabulous little command line utility

00:31:42.349 --> 00:31:43.969
that actually created the group for us.

00:31:43.970 --> 00:31:47.460
So we're going to say that it was created by Supergrouper,

00:31:47.460 --> 00:31:52.360
and we're going to say what the search
was that was done to create the group.

00:31:52.359 --> 00:32:01.839
And then we're also going to say what GID
value we want to create for the group.

00:32:01.839 --> 00:32:10.049
Because if we don't specify the group ID, it's going to put
in a value of 99, which -- you know, I mean, that works.

00:32:10.049 --> 00:32:11.269
But it's going to do that every time.

00:32:11.269 --> 00:32:14.210
You're going to end up -- every time you
create a group it's going to have the same GID,

00:32:14.210 --> 00:32:18.450
and they're supposed to be unique,
that's probably not a good thing.

00:32:18.450 --> 00:32:23.930
OK, so we've been saying we want to make some
changes, but that isn't actually going to do anything

00:32:23.930 --> 00:32:26.160
until we say synchronize and return error.

00:32:26.160 --> 00:32:34.430
And now we're going to do the actual
heavy lifting of this little application.

00:32:34.430 --> 00:32:40.710
OK, we don't want an update in the middle of the demo.

00:32:40.710 --> 00:32:42.640
That kind of got lost there.

00:32:42.640 --> 00:32:44.630
All right, create group.

00:32:44.630 --> 00:32:47.420
Oops, that's the wrong one.

00:32:47.420 --> 00:32:57.910
Let's -- so we're going to enumerate through all of
the results that we got back from the query up here.

00:32:57.910 --> 00:33:02.540
So up here we got these results.

00:33:02.539 --> 00:33:05.430
Just going to enumerate through them.

00:33:05.430 --> 00:33:13.799
Going to get the user record for each of these results,
and we're going to say add that member to the group.

00:33:13.799 --> 00:33:15.289
So add member record.

00:33:15.289 --> 00:33:24.259
And then again, this is a change to the
directory, so we need to actually say synchronize.

00:33:24.259 --> 00:33:28.690
So we're going it say synchronize and return error.

00:33:28.690 --> 00:33:31.690
All right, and that's all there is to it.

00:33:31.690 --> 00:33:38.509
So let's actually go ahead and let's build this.

00:33:38.509 --> 00:33:44.829
OK, and this is a command line utility, actually, so
we're going to have to pull up a terminal window here.

00:33:44.829 --> 00:33:51.169
This zoom is -- I think I made
my terminal type big enough here.

00:33:51.170 --> 00:33:55.670
So let's go ahead and let's go in here -- oops.

00:34:02.700 --> 00:34:06.420
OK, so just to show you here, you
know, nothing up my sleeve.

00:34:06.420 --> 00:34:09.440
We're going to go ahead and let's
create it in the local node.

00:34:09.440 --> 00:34:14.860
We searched the LDAP node, so let's demonstrate
we can do this with whatever node we want to do.

00:34:14.860 --> 00:34:18.090
We're going to put our group in the local node.

00:34:18.090 --> 00:34:23.900
And again, this is just another illustration that you
can have users from another node in a group that is

00:34:23.900 --> 00:34:25.809
in a totally different node, it's totally legal.

00:34:25.809 --> 00:34:30.159
So let's see here, yup, there's no groups.

00:34:30.159 --> 00:34:38.619
So let's go ahead and we are going to --
we're going to search on the department field,

00:34:38.619 --> 00:34:43.299
we're going to look for engineering users, and we're
going create a group called engineering department.

00:34:43.300 --> 00:34:50.000
With a GID of 2001, and we're  going
to put it in the local node.

00:34:50.000 --> 00:34:53.300
Here's my supersecret Admin credentials.

00:34:56.550 --> 00:35:00.860
And if we come back here, voila.

00:35:00.860 --> 00:35:03.349
There's the comment that we put in there.

00:35:03.349 --> 00:35:08.009
And there's all of our fabulous users.

00:35:08.010 --> 00:35:12.700
[ Applause ]

00:35:12.699 --> 00:35:18.739
>> And if you take a look here you'll see that, yes indeed,
it did the right thing when it added the group membership.

00:35:18.739 --> 00:35:24.149
We have both all of the GUIDs and
all of the user's short user names.

00:35:24.150 --> 00:35:25.820
So that was all taken care of for you.

00:35:25.820 --> 00:35:27.809
All right.

00:35:27.809 --> 00:35:32.610
So that seems like enough demo for now.

00:35:38.650 --> 00:35:42.639
It's like I did all this talking about synchronous queries,

00:35:42.639 --> 00:35:47.420
but I already hinted that there must
this asynchronous way of doing queries.

00:35:47.420 --> 00:35:54.170
And one reason that it can be really handy to do this is if
you have an application like, say, Work Group Manager here,

00:35:54.170 --> 00:35:59.980
where you might be getting a really long list
of, say, all of the records of a particular tyoe.

00:35:59.980 --> 00:36:04.809
You don't want to have to sit there and block
while you're waiting for all these results.

00:36:04.809 --> 00:36:09.690
You know, users, they're not necessarily
really patient, they don't really like that.

00:36:09.690 --> 00:36:12.349
So you need a way to do asynchronous queries.

00:36:12.349 --> 00:36:16.460
And luckily, we've provided you with one.

00:36:16.460 --> 00:36:20.960
So what you need to do is implement
the ODQuery delegate protocol.

00:36:20.960 --> 00:36:23.510
And this is actually really simple.

00:36:23.510 --> 00:36:30.250
All you have to do to support this is, you
have to provide a method called found results.

00:36:30.250 --> 00:36:35.590
And it's going to basically take these
results, which is in the form of an array.

00:36:35.590 --> 00:36:39.640
And then you do whatever it is you want to do with them, OK?

00:36:39.639 --> 00:36:42.769
So there's really nothing real fancy going
on here, you're just providing a place

00:36:42.769 --> 00:36:46.329
for DirectoryServices to hand you the results.

00:36:46.329 --> 00:36:56.079
OK? To actually do the query, you have your session
in your node, set up your query the same way

00:36:56.079 --> 00:36:57.829
that you would set up a synchronous query.

00:36:57.829 --> 00:37:00.360
So you're going to specify the same pieces of information.

00:37:00.360 --> 00:37:04.539
And you're going to retain it.

00:37:04.539 --> 00:37:09.980
And then what you want to do is set your delegate,
which could be yourself, could be whatever else --

00:37:09.980 --> 00:37:13.760
wherever else you're implemented the ODQuery delegate,

00:37:13.760 --> 00:37:19.460
and then you're going to go ahead
and schedule it in your run loop, OK?

00:37:19.460 --> 00:37:23.300
And then DirectoryServices will do the query,

00:37:23.300 --> 00:37:29.920
and it will send your information to
whatever you've set as your delegate.

00:37:29.920 --> 00:37:36.760
Again, we have the synchronized method that could be
called, and again, this means that you're going to want

00:37:36.760 --> 00:37:41.610
to discard any results that you have gotten,
because there's going to be a whole new set

00:37:41.610 --> 00:37:44.280
of results coming in, there's something new happening.

00:37:44.280 --> 00:37:52.810
So you can tell that this has been called, because your
delegate is going to be called with a results of nil,

00:37:52.809 --> 00:38:01.619
and you're going to have an error code KOD error query
synchronize, with a domain of ODFramework error domain, OK?

00:38:01.619 --> 00:38:05.679
So this is just a single to you that, Hey,
you know what, we're restarting the query.

00:38:05.679 --> 00:38:09.190
So whatever results you've already
gotten back, just throw them away.

00:38:09.190 --> 00:38:10.909
Because you're going to get new results here.

00:38:10.909 --> 00:38:17.769
And speaking of error codes, we have a
whole new set of error codes for you.

00:38:17.769 --> 00:38:23.710
They're not your old 14-0 something,
something, something, errors.

00:38:23.710 --> 00:38:25.659
So take a look at the documentation.

00:38:25.659 --> 00:38:34.319
They're pretty similar to the same times of errors,
but again, you'll see different error codes popping up.

00:38:34.320 --> 00:38:37.330
And everybody like the little bomb icon?

00:38:37.329 --> 00:38:42.119
I would to ask specific specially
for that, so I hope you're impressed.

00:38:42.119 --> 00:38:44.420
[ Applause ]

00:38:44.420 --> 00:38:45.530
>> Thank you.

00:38:45.530 --> 00:38:51.240
And we have documentation for you.

00:38:51.239 --> 00:38:57.750
This is brand new shiny documentation that
they just finished in the last week or so.

00:38:57.750 --> 00:39:05.190
So check it out, we have documentation for both the
Cocoa and CoreFoundation versions of the framework.

00:39:05.190 --> 00:39:15.510
I want to point out a couple of gotchas, things
that developers tend to hit pretty frequently

00:39:15.510 --> 00:39:17.120
when they first start using the ODFramework.

00:39:17.119 --> 00:39:24.179
One of them, if you're using the Cocoa version
of the framework, make sure you actually check

00:39:24.179 --> 00:39:29.369
and see which things are auto released and which
things aren't, because sometimes people forget

00:39:29.369 --> 00:39:34.849
that something maybe is auto released, and they go
ahead and release it themselves, and bad things happen.

00:39:34.849 --> 00:39:40.130
So make sure that you keep track of what
you actually need to worry about releasing.

00:39:40.130 --> 00:39:47.170
And then another reminder is just keep in mind
if you're trying to figure out what node to use,

00:39:47.170 --> 00:39:51.450
unless you're actually writing data you
probably just want to use the search node.

00:39:51.449 --> 00:39:55.949
Search node you can't use for writing data, because
it could be a whole list of different nodes.

00:39:55.949 --> 00:39:59.799
But if you're doing anything with searching,
well, you want to use the search node,

00:39:59.800 --> 00:40:02.120
which is probably why we call it the search node.

00:40:02.119 --> 00:40:09.509
And then finally, just a reminder, don't do
synchronous queries that are going to block,

00:40:09.510 --> 00:40:13.030
unless you realize that that's what's
going to happen and that's what you want.

00:40:13.030 --> 00:40:17.850
Because you could have a query that's going to take a long
time, you're going to have a user maybe getting impatient,

00:40:17.849 --> 00:40:26.319
and really, it may be better to just do
an asynchronous query using the run loop.

00:40:26.320 --> 00:40:31.850
All right, so now since I keep
pushing this asynchronous query idea,

00:40:31.849 --> 00:40:35.460
we should probably do a demo so
you can see what that looks like.

00:40:35.460 --> 00:40:40.650
So what we have here -- and I'm actually going
to go ahead and cheat and build and run it first,

00:40:40.650 --> 00:40:43.329
so you can see what it is we're making here.

00:40:43.329 --> 00:40:50.289
This is just a simple little browser of OD users.

00:40:50.289 --> 00:40:56.360
So I can start typing, and it will
start sorting through the users.

00:40:56.360 --> 00:41:10.220
And as the results come in, it will display them.

00:41:10.219 --> 00:41:11.319
OK.

00:41:13.739 --> 00:41:20.269
So the great thing about this application is when we
look at the code here, the vast majority of all the code

00:41:20.269 --> 00:41:23.250
that it took to write all of this, it's all Cocoa bindings.

00:41:23.250 --> 00:41:28.849
There's like, I don't know, maybe like three or
four lines of actual ODFramework code in here.

00:41:28.849 --> 00:41:34.670
So the first thing is in the header you can see,
Oh, yup, we're going to implement ODQuery delegate.

00:41:34.670 --> 00:41:43.269
And we're going to actually go ahead and here's the method
that we need for the ODQuery delegate, which is just saying,

00:41:43.269 --> 00:41:47.349
Hey, what results did you get from the query?

00:41:47.349 --> 00:41:50.860
So it's just accepting results from DirectoryServices.

00:41:50.860 --> 00:41:55.630
And we've only got one other method in the
whole class, and that is the actual search.

00:41:55.630 --> 00:41:57.050
So basically we've got two methods.

00:41:57.050 --> 00:42:01.370
One does the search, and one gets the results back.

00:42:03.400 --> 00:42:06.849
All right, so let's take a look at our search here.

00:42:06.849 --> 00:42:09.079
And this should look pretty familiar.

00:42:09.079 --> 00:42:12.779
Again, most of this stuff is actually Cocoa binding stuff.

00:42:12.780 --> 00:42:16.320
So we've got some, you know, Cocoa binding stuff for the UI.

00:42:16.320 --> 00:42:20.410
But basically the first thing we're going to do is, we're
just going to check and see is there already a query set up,

00:42:20.409 --> 00:42:23.359
because you know, people, they might
be doing all kinds of different things,

00:42:23.360 --> 00:42:25.059
they might do one query and then do another.

00:42:25.059 --> 00:42:27.239
So we're going to look, see if there's a query.

00:42:27.239 --> 00:42:32.099
And if there is, we're just going to
kind of reset some stuff in the bindings,

00:42:32.099 --> 00:42:35.539
we're going to take it out of the
run loop, we're going to release it,

00:42:35.539 --> 00:42:39.650
and we're just going it reset everything back to nil, OK?

00:42:39.650 --> 00:42:45.680
So that's what we're doing here,
remove from run loop, and the release.

00:42:45.679 --> 00:42:51.719
OK, so that's just cleaning up in
case we had something else going on.

00:42:51.719 --> 00:42:54.679
Now we actually do the actual query itself.

00:42:54.679 --> 00:43:00.889
And again, when you set up the query, this looks the
same whether you're doing synchronous or asynchronous,

00:43:00.889 --> 00:43:03.549
you're just going to be specifying,
you know, what node are you querying.

00:43:03.550 --> 00:43:10.350
You're going to specify what record times you're
looking at, what attribute you're searching on,

00:43:10.349 --> 00:43:13.139
in this case, we're searching the record name.

00:43:13.139 --> 00:43:15.609
What kind of a match you're looking for.

00:43:15.610 --> 00:43:18.030
So in this case we're saying just contains, right?

00:43:18.030 --> 00:43:22.940
Because we wanted to find basically
build results or sort results down,

00:43:22.940 --> 00:43:27.099
as we typed we'd have it sort of eliminating results.

00:43:27.099 --> 00:43:32.969
And then the search value, this is what the user is
actually typing in the little search box in the UI.

00:43:32.969 --> 00:43:37.059
And then what attributes we want to get back.

00:43:37.059 --> 00:43:43.159
And you'll see in the browser, we're actually going to
go ahead and for each record, let you sort of drill down

00:43:43.159 --> 00:43:48.170
and see all the attributes in a record,
and then all the values of the attributes.

00:43:48.170 --> 00:43:55.250
And we want all the results, so we're going
it say zero for maximum -- all the results.

00:43:55.250 --> 00:44:00.300
And again, I'm not checking for errors here, but please do.

00:44:00.300 --> 00:44:06.330
All right, so we do the retain, and since we just
implemented this all in one little class here,

00:44:06.329 --> 00:44:10.119
we're going to say that we ourselves are the delegate.

00:44:10.119 --> 00:44:13.179
And then we schedule it in the run loop.

00:44:13.179 --> 00:44:17.429
And we're just going to use the default run loop mode here.

00:44:17.429 --> 00:44:20.139
And then we have some more Cocoa binding stuff.

00:44:20.139 --> 00:44:24.569
This is all Cocoa binding stuff,
this is all Cocoa binding stuff, OK?

00:44:24.570 --> 00:44:33.200
So really, I think we have like, what, one, two, three --
we have like four lines of actual ODFramework code here.

00:44:33.199 --> 00:44:40.619
And then now we're going to look at the method that
actually gets the results back from DirectoryService.

00:44:40.619 --> 00:44:44.589
So really, here, almost all of
this is Cocoa binding stuff, right?

00:44:44.590 --> 00:44:50.530
Because we're getting an array, and then we're
going to do whatever we want to do with it.

00:44:50.530 --> 00:44:55.820
So Cocoa binding stuff is going on
here, we're just setting up the UI,

00:44:55.820 --> 00:45:03.980
and really the only ODFramework stuff here
is we're going to actually get the details

00:45:03.980 --> 00:45:08.119
out of the actual records that we were returned, OK?

00:45:08.119 --> 00:45:11.089
So that we can display them.

00:45:11.090 --> 00:45:15.680
And we're going to enumerate through them, so
we can get all of the different attributes.

00:45:15.679 --> 00:45:18.579
So we're going to do an enumeration here.

00:45:18.579 --> 00:45:21.980
See all of this.

00:45:21.980 --> 00:45:27.530
And we have some more Cocoa binding stuff.

00:45:27.530 --> 00:45:31.030
We're just reading all of the attribute
values out and we're going to display them.

00:45:31.030 --> 00:45:34.930
So let's just take a look at what this looks like again.

00:45:34.929 --> 00:45:41.960
We've got -- Steve Wozniak, oh, we've
got a bunch of different attributes.

00:45:41.960 --> 00:45:46.440
Let's go ahead and make this a little wider, OK.

00:45:46.440 --> 00:45:52.800
And Steve has a -- he's in the dance department.

00:45:53.989 --> 00:45:56.989
Didn't know that.

00:45:56.989 --> 00:45:57.839
[ Laughter ]

00:45:57.840 --> 00:46:07.180
>> We can also find Clara -- oops,
maybe they don't have that user.

00:46:08.219 --> 00:46:12.129
Oh, wait -- oh.

00:46:12.130 --> 00:46:14.369
Tough decision here.

00:46:14.369 --> 00:46:20.440
Look at Clara's and -- let's see here.

00:46:20.440 --> 00:46:24.889
Clara also has a department, she's in developer relations.

00:46:24.889 --> 00:46:35.420
OK, so basically that was just a really simple UI example of
using the asynchronous queries, and like you saw, you know,

00:46:35.420 --> 00:46:40.010
they were really like, four or five lines of code
total that actually had to do with DirectoryServices.

00:46:40.010 --> 00:46:43.290
Most of the work is just whatever
you want to do with these results.

00:46:43.289 --> 00:46:48.820
So the main thing here is ODFramework is there
to do what you want, and then get out of the way

00:46:48.820 --> 00:46:50.980
and you do whatever you want to do with the data.

00:46:50.980 --> 00:46:55.659
So -- so we've covered the Open Directory Framework.

00:46:55.659 --> 00:47:01.359
The -- I want to talk just real briefly about
another related API, because there are times

00:47:01.360 --> 00:47:06.150
that when using the Open Directory Framework
there's a couple of specific cases you may fall

00:47:06.150 --> 00:47:12.210
into where we have this other API that
may do something you want really easily.

00:47:12.210 --> 00:47:18.710
And there's also some cases where you may not
even need to use the Open Directory Framework, OK?

00:47:18.710 --> 00:47:24.210
And the membership API handles really two types of work.

00:47:24.210 --> 00:47:28.139
One is anything having to do with
resolving group membership.

00:47:28.139 --> 00:47:35.460
And the other one is what we call identity conversions,
which is converting things like a user's name

00:47:35.460 --> 00:47:42.530
into their UID, and then also maybe
into their GUID and SID, and so on.

00:47:42.530 --> 00:47:47.800
So for group membership, you know, the reason
that we have this API is because, you know,

00:47:47.800 --> 00:47:50.100
once upon a time this was really easy, right?

00:47:50.099 --> 00:47:55.679
You just had a list of all of the user names that
were in a group, a flat file, it was really easy.

00:47:55.679 --> 00:48:00.500
You didn't have that many users in a particular
group, and you just had users in the group.

00:48:00.500 --> 00:48:04.329
So you could just parse the file.

00:48:04.329 --> 00:48:07.159
But nowadays things are pretty complex.

00:48:07.159 --> 00:48:11.500
So if you have a group that has
thousands and thousands of users,

00:48:11.500 --> 00:48:15.159
and any particular user might have
thousands of group memberships.

00:48:15.159 --> 00:48:22.049
You can also nest a group within a group
within a group within a group -- and so on.

00:48:22.050 --> 00:48:27.700
And you can also have things like
computers in your group as well as users.

00:48:27.699 --> 00:48:34.179
And the other thing as we saw in our demo earlier, you can
have groups that are actually spanning different nodes.

00:48:34.179 --> 00:48:39.039
So you could put users from the
LDAP node in your local node,

00:48:39.039 --> 00:48:43.800
or you could put users from Active Directory
into a group in your open directory.

00:48:43.800 --> 00:48:46.380
So this is all pretty complex stuff.

00:48:46.380 --> 00:48:52.590
And if you had to figure all this stuff out on your own it
would be pretty tedious, and it would just be a lot of work.

00:48:52.590 --> 00:48:54.530
So we've done this for you.

00:48:54.530 --> 00:48:59.470
Because you might have a group that looks like
this, where you've got multiple layers of nesting,

00:48:59.469 --> 00:49:04.319
you've got some computers in there, and you
don't want to have to sort through all of this.

00:49:04.320 --> 00:49:08.920
So this is what the membership API does for you.

00:49:08.920 --> 00:49:16.820
But also you know what, users are a little more complex too,
because once upon a time all you had to worry about was,

00:49:16.820 --> 00:49:21.950
a user had a user name and they had a unique ID.

00:49:21.949 --> 00:49:23.489
Pretty simple.

00:49:23.489 --> 00:49:29.959
But you know, things got really complex, we got these
really big directory systems, plus we decided well,

00:49:29.960 --> 00:49:33.369
these unique IDs really aren't unique enough.

00:49:33.369 --> 00:49:36.579
So we added this thing called the GUID, or the UUID.

00:49:36.579 --> 00:49:44.739
And this is a 128 bit GUID, so that also has to
somehow be associated back with this same user name.

00:49:44.739 --> 00:49:52.269
Because you don't refer to a user as EFB9
-- yeah, that doesn't work very well.

00:49:52.269 --> 00:49:56.659
So if you have that UUID, you maybe
need to know who is this actual user.

00:49:56.659 --> 00:50:02.420
But then we also have -- you know, we have this
other platform that's out there called Windows

00:50:02.420 --> 00:50:05.010
a few people use it, you may have heard of it.

00:50:05.010 --> 00:50:08.510
And their unique identifier is the SID.

00:50:08.510 --> 00:50:15.340
So this is yet another unique identifier that a
user might have that we need to be able to say well,

00:50:15.340 --> 00:50:18.380
these with SID is the same user that has this GUID.

00:50:18.380 --> 00:50:26.180
OK? And then we also have Kerberos out there,
which is really popular for authentication methods,

00:50:26.179 --> 00:50:31.009
and here at Apple we use it very
heavily in DirectoryServices.

00:50:31.010 --> 00:50:35.370
So users also have a Kerberos identity,
which is the Kerberos principle.

00:50:35.369 --> 00:50:37.670
And in fact, they might have multiple ones.

00:50:37.670 --> 00:50:45.809
So you need a way to sort all of these particular
user identifiers to be basically mean the same user.

00:50:45.809 --> 00:50:52.349
And sometimes you may get one of these values
and need to translate it into another one.

00:50:52.349 --> 00:50:56.619
So that is what the membership API does for you.

00:50:56.619 --> 00:50:59.389
So this is the membership.h is the header.

00:50:59.389 --> 00:51:04.179
And that it will do for you is it's
going to hide the group structure.

00:51:04.179 --> 00:51:08.460
You don't need to worry about is there a
whole bunch of nesting going on in here,

00:51:08.460 --> 00:51:10.929
is there users that are in some other node.

00:51:10.929 --> 00:51:13.489
You just say, Hey, is this user in this group?

00:51:13.489 --> 00:51:16.649
Around you're going to get back an answer.

00:51:16.650 --> 00:51:24.740
It also, on the performance side, provides caching, so every
time you look up group information, you don't have to keep,

00:51:24.739 --> 00:51:30.759
you know, have DirectoryServices keep going out to
the server and check all the users in the group.

00:51:30.760 --> 00:51:33.080
And you know, all this extra overhead.

00:51:33.079 --> 00:51:36.289
So we have caching here which helps with performance.

00:51:36.289 --> 00:51:40.690
And then we also have the membership API
doing all of this translation between,

00:51:40.690 --> 00:51:46.820
for example, your UID and your GUID, and your SID.

00:51:46.820 --> 00:51:50.840
So there's only a few calls in the whole API.

00:51:50.840 --> 00:51:54.309
And one of these is member check membership.

00:51:54.309 --> 00:52:03.199
So what you're going to do is you're going
to pass in the user GUID, the group GUID,

00:52:03.199 --> 00:52:07.949
and then someplace to get the answer back in, so is- member.

00:52:07.949 --> 00:52:15.579
And so if it actually -- if in fact the user
is in the group, then we're going to say, Zero.

00:52:15.579 --> 00:52:18.400
So yes, they are a member.

00:52:18.400 --> 00:52:21.099
One means they are not a member.

00:52:21.099 --> 00:52:27.170
And you can also get a separate error value
that will be zero if everything's fine.

00:52:27.170 --> 00:52:33.010
But you could also get EIO, you know, depending on
if things have gone wrong with DirectoryServices.

00:52:33.010 --> 00:52:38.420
Also, by the way, instead of passing a user
in with the group, you could pass in a group

00:52:38.420 --> 00:52:43.030
and find out if a group is inside a group.

00:52:44.219 --> 00:52:51.129
Then like I said, the other thing besides checking
membership that you can do here is check and see, you know,

00:52:51.130 --> 00:52:55.660
I've got this UID number, but what
I really need is I need the GUID.

00:52:55.659 --> 00:53:01.529
So you can pass in the UID number, and
we will give you back the user's GUID.

00:53:01.530 --> 00:53:05.390
You can also, for example, pass in the GUID, get the SID.

00:53:05.389 --> 00:53:13.879
And there's a really useful member -- membership
API call here, which is member identifier to UUID.

00:53:13.880 --> 00:53:19.180
And so what you can do is basically just specify
what type of identifier you're passing in.

00:53:19.179 --> 00:53:22.289
Like, for example, the Kerberos identity.

00:53:22.289 --> 00:53:26.070
And then you have to tell us what it is and how long it is.

00:53:26.070 --> 00:53:30.010
And then we will give you back the UUID or the GUID.

00:53:30.010 --> 00:53:33.120
OK, so basically this gives you the ability to very quickly

00:53:33.119 --> 00:53:37.409
and easily translate back and forth
between all of these values.

00:53:37.409 --> 00:53:45.609
And you may say, Well, you know, I could probably do all of
this on my own using the Open Directory Framework, right?

00:53:45.610 --> 00:53:52.050
And actually, the Open Directory Framework, when it does its
group membership checking, it's using the membership API.

00:53:52.050 --> 00:53:58.740
So if you're using the is-member method in the Open
Directory Framework, it is in fact using the membership API,

00:53:58.739 --> 00:54:03.019
you don't need to worry about separately
using the membership API for that.

00:54:03.019 --> 00:54:10.090
But you may have cases where, for example, you
have a UID or a UUID, and you need to get one

00:54:10.090 --> 00:54:15.120
of the other identity values, well, the Open
Directory Framework, you've got to do a query,

00:54:15.119 --> 00:54:21.130
you've got to look at the identity, you know, the actual
values and the attributes, and then there's a whole lot

00:54:21.130 --> 00:54:23.690
of calls that you could actually do in just one.

00:54:23.690 --> 00:54:31.599
And also for example, you might be doing something -- you
don't care about, for example, any of the other values

00:54:31.599 --> 00:54:37.429
in the user record, just want to know,
Hey, I've got a user name, got a group.

00:54:37.429 --> 00:54:38.730
Is this user in the group?

00:54:38.730 --> 00:54:39.889
That's all you want to know.

00:54:39.889 --> 00:54:46.449
And for that you don't need to go through all of the extra
stuff that you would do in the Open Directory Framework.

00:54:46.449 --> 00:54:51.619
But the main reason you want to
use the membership API is just --

00:54:51.619 --> 00:54:55.989
this will give you all of that modern user and
group functionality, so you don't have to worry

00:54:55.989 --> 00:55:01.149
about the fact that, you know, if you
tried to parse group information yourself,

00:55:01.150 --> 00:55:04.389
you might miss the fact that there's a nested group.

00:55:04.389 --> 00:55:10.920
And so membership API just takes care of all of
that for you, and gives you performance benefit.

00:55:10.920 --> 00:55:18.289
So really, it's just the easiest way of
handling all of these types of tasks.

00:55:18.289 --> 00:55:23.960
OK, so we've covered the APIs, now
we're going to step back a little bit,

00:55:23.960 --> 00:55:29.150
because besides just actually writing some code,
you've got to know, well, How do I actually, you know,

00:55:29.150 --> 00:55:33.660
configure DirectoryServices and get
information about what's going on?

00:55:33.659 --> 00:55:38.739
So for starters, something that changed in Snow Leopard
-- how many people were familiar with direct utility?

00:55:38.739 --> 00:55:44.279
Yeah. So that was an application that
existed in Applications Utilities.

00:55:44.280 --> 00:55:49.490
That was how you always set up, for example,
talking to a particular directory server.

00:55:49.489 --> 00:55:55.769
Well, directory search is now so important
and so central to OS X that we made it part

00:55:55.769 --> 00:55:59.949
of System Preferences, and we added it to the accounts pane.

00:55:59.949 --> 00:56:05.629
So we go to the accounts pane log in options, you'll
see that you can now do network account server,

00:56:05.630 --> 00:56:11.099
and if you say Join, you can specify
a server that you want to connect to.

00:56:11.099 --> 00:56:18.019
And as you type we will figure out, Hey, it's an Active
Directory server, or, Hey, it's an open directory server,

00:56:18.019 --> 00:56:26.590
and provide you with the appropriate information that
you might need to provide in order to bind to it.

00:56:26.590 --> 00:56:30.440
Now some people have some more
complex things that they need to do.

00:56:30.440 --> 00:56:34.139
So we have a couple other options that you can do here.

00:56:34.139 --> 00:56:36.969
You can use DS config LDAP and DS config AD.

00:56:36.969 --> 00:56:44.259
These are command line tools for setting
up Active Directory and LDAP connections.

00:56:44.260 --> 00:56:48.490
These are really handy if you need to script something.

00:56:48.489 --> 00:56:51.619
We also have the full blown directory utility.

00:56:51.619 --> 00:56:54.759
It is still around, it just sort of moved.

00:56:54.760 --> 00:56:58.030
It now lives in System Library Core Services.

00:56:58.030 --> 00:57:02.519
But you can also access it through
a button from System Preferences.

00:57:05.139 --> 00:57:09.989
Another thing that you might need to check
or configure is -- we kept talking about --

00:57:09.989 --> 00:57:12.799
we have this search node thing that you might be using.

00:57:12.800 --> 00:57:18.190
And I said this is something that the user determines
what nodes are in the search nodes of the --

00:57:18.190 --> 00:57:23.829
so what nodes, what servers do they
actually want used for authentication?

00:57:23.829 --> 00:57:29.159
And this could be all of the servers they have
configured, or it could be some subset of them.

00:57:29.159 --> 00:57:34.339
So this is actually the search
policy tab in Directory Utility.

00:57:34.340 --> 00:57:37.590
And then you want to go to the subtab of authentication.

00:57:37.590 --> 00:57:42.450
So this is where you can actually specify which of
the nodes you have configured are actually going

00:57:42.449 --> 00:57:44.069
to be part of the search node.

00:57:44.070 --> 00:57:48.789
And this is something that if you're troubleshooting you
might want to check, just to make sure that all the nodes

00:57:48.789 --> 00:57:51.460
that you think are there, are in fact there.

00:57:51.460 --> 00:57:56.610
OK, there's a few tools I just want to cover briefly.

00:57:56.610 --> 00:58:03.289
Things that are, you know, useful, as you're programming,
to get some information about DirectoryServices, or to,

00:58:03.289 --> 00:58:08.389
for example, put some test information in there
so that you can test your code against it.

00:58:08.389 --> 00:58:11.539
So the first one is Work Group Manager.

00:58:11.539 --> 00:58:16.159
And Work Group Manager, in addition
to the regular modes that it has,

00:58:16.159 --> 00:58:22.809
some people don't realize it has this inspector mode, which
lets you look at all of the different records in the node,

00:58:22.809 --> 00:58:26.480
and then see all of the different attributes and edit them.

00:58:26.480 --> 00:58:30.769
So some of the things that you normally --
users don't have access to edit or read,

00:58:30.769 --> 00:58:37.860
you can actually get to from the inspector mode, and this
can be really, you know, useful, when you are programming

00:58:37.860 --> 00:58:43.170
or troubleshooting to actually verify or to actually
set a particular value for testing purposes.

00:58:43.170 --> 00:58:49.970
So this gives you a nice UI way of doing it.

00:58:49.969 --> 00:58:56.299
One utility that I actually use a lot, because
sometimes you need a quick sanity check, right?

00:58:56.300 --> 00:59:00.780
OK, my code didn't work, am I actually
connected to the server

00:59:00.780 --> 00:59:06.600
So the ID command is just a real
quick way of saying OK, ID, user name.

00:59:06.599 --> 00:59:09.619
And see, Hey, are we actually able to resolve the user?

00:59:09.619 --> 00:59:13.190
If it can't, then maybe there's
something wrong with the server.

00:59:13.190 --> 00:59:20.720
This is also a quick way to get
information about what groups a user is in.

00:59:20.719 --> 00:59:24.789
DSCL is the DirectoryService Command Line utility.

00:59:24.789 --> 00:59:29.029
It's kind of like the Swiss army
knife of DirectoryService utilities.

00:59:29.030 --> 00:59:31.660
You can do kind of just about everything in it.

00:59:31.659 --> 00:59:38.149
The main things that you can do is you can do searches, and
look up records, and get back a list of all the attributes.

00:59:38.150 --> 00:59:42.639
You can test authentication, so you can make
sure that you are actually able to authenticate

00:59:42.639 --> 00:59:46.000
to a particular node as a particular user.

00:59:46.000 --> 00:59:49.510
And you can also edit any of this data.

00:59:49.510 --> 00:59:57.970
So if you do a search you actually get, for example,
all of the information in a particular record.

00:59:57.969 --> 01:00:07.279
So this is just a very easy command line way to get
access to kind of all parts and all records in a node.

01:00:07.280 --> 01:00:12.019
This also by the way has both an
interactive mode and a non-interactive mode.

01:00:12.019 --> 01:00:14.009
So it's handy for whether you just want to sit there

01:00:14.010 --> 01:00:21.200
and check something yourself manually,
or if you want to script things.

01:00:21.199 --> 01:00:24.960
Another handy utility is the dsmemberutil.

01:00:24.960 --> 01:00:29.389
If you're doing a lot of stuff with groups, and
maybe you're not getting the results you expect,

01:00:29.389 --> 01:00:34.489
could be you have some stale membership cache.

01:00:34.489 --> 01:00:41.879
And you want to, you know, just flush that out, start clean,
so you can use dsmemberutil flush cache to flush that.

01:00:41.880 --> 01:00:43.380
And start fresh.

01:00:43.380 --> 01:00:47.000
But you can also use it to check your group membership.

01:00:47.000 --> 01:00:49.170
See if a particular user is in a particular group.

01:00:49.170 --> 01:00:55.039
And you can also do all of those identity look
ups that we talked about with membership API,

01:00:55.039 --> 01:01:03.119
you can do this from the command line, and this very
handy, for example, when you're doing a quick sanity check.

01:01:03.119 --> 01:01:06.719
Also related to group things, we have dseditgroup.

01:01:06.719 --> 01:01:14.399
And this basically lets you edit and check
membership of a groups from the command line.

01:01:14.400 --> 01:01:20.710
So you can edit a group, you can add users,
add a group, move users, remove a group.

01:01:20.710 --> 01:01:25.159
And you can also check membership with dseditgroup.

01:01:28.710 --> 01:01:35.699
So finally, we've done all this, you've set up
all of your nodes, you've written some code,

01:01:35.699 --> 01:01:40.349
and you've put some test data in your
DirectoryServices, and now you know,

01:01:40.349 --> 01:01:44.699
things aren't quite working the way you expect, so
you might want to see what DirectoryServices is doing.

01:01:44.699 --> 01:01:47.929
So you can turn on DirectoryService debug logging.

01:01:47.929 --> 01:01:51.789
To do this, send the USR1 signal to DirectoryService.

01:01:51.789 --> 01:01:53.900
This is like an on/off switch.

01:01:53.900 --> 01:01:55.750
So if you send it once, it turns it on.

01:01:55.750 --> 01:01:57.639
If you send it again, it turns it off.

01:01:57.639 --> 01:02:05.009
If DirectoryServices restarts or crashes
somewhere in there, then it's going to be off.

01:02:05.010 --> 01:02:09.790
So sometimes you actually want DirectoryServices
to just have the debug logging on all the time.

01:02:09.789 --> 01:02:16.170
So to do that, you need to set a flag
file, which is DS log debug at start.

01:02:16.170 --> 01:02:19.539
And this is in Library Preferences DirectoryService.

01:02:19.539 --> 01:02:24.099
This will turn on DirectoryService debugging
right away, as soon as DirectoryService starts up.

01:02:24.099 --> 01:02:28.259
You can also -- if you only want this to happen
the first time that DirectoryServices starts up,

01:02:28.260 --> 01:02:33.340
this would be dot DS log debug at start once.

01:02:33.340 --> 01:02:41.660
Now if you need more or less information in your debug log,
because DirectoryService debugging can be pretty verbose.

01:02:41.659 --> 01:02:44.279
So you might want to adjust it up or down.

01:02:44.280 --> 01:02:48.440
You have seven levels of logging, from zero to seven.

01:02:48.440 --> 01:02:54.740
And for this, this is the DirectoryService debug
plist in Library Preferences DirectoryService.

01:02:54.739 --> 01:02:58.359
And you want to set the key debug logging priority level.

01:02:58.360 --> 01:03:03.079
If you're using the default command to do this,
make sure that you specify this is an integer,

01:03:03.079 --> 01:03:09.049
because if it goes in as some other data type, bad things
can happen when DirectoryServices tries to read it.

01:03:09.050 --> 01:03:12.750
And then finally you've done all this,
you've turned all your logging on.

01:03:12.750 --> 01:03:18.460
The logging goes to library logs,
DirectoryService, DirectoryService..debug.log.

01:03:18.460 --> 01:03:23.829
These log files will actually roll, so it's OK to go ahead,
turn it on, leave it on for an extended period of time.

01:03:23.829 --> 01:03:27.599
You don't have to worry about them taking
over the hard drive of your machine.

01:03:27.599 --> 01:03:32.829
And then actual debug log kind of looks something like this.

01:03:32.829 --> 01:03:35.599
Which I don't know, looks totally clear to me.

01:03:35.599 --> 01:03:41.159
But you know, there's a lot of stuff going
on in DirectoryServices at any given time.

01:03:41.159 --> 01:03:44.279
Because there might be lots of other stuff
calling into DirectoryServices besides you.

01:03:44.280 --> 01:03:50.380
So it can be actually very useful to be able
to narrow that down to just your process,

01:03:50.380 --> 01:03:52.780
what is happening with just your process.

01:03:52.780 --> 01:03:57.730
So you can do this by basically starting
up DirectoryServices in a terminal window,

01:03:57.730 --> 01:04:02.980
with the Apple debug flag, and
then open another terminal window,

01:04:02.980 --> 01:04:10.519
set an environment variable called DS
debug 1, and go ahead and run your process.

01:04:10.519 --> 01:04:13.349
And then you'll see in the other terminal window,

01:04:13.349 --> 01:04:17.690
you'll see just the debugging information
that is relevant to your process.

01:04:17.690 --> 01:04:26.309
OK, wrapping up, I just want to give you
a few quick tips for things that you want

01:04:26.309 --> 01:04:27.989
to look out for as you're writing your code.

01:04:27.989 --> 01:04:32.279
So first thing you want to do is make
sure you're playing nice with everybody,

01:04:32.280 --> 01:04:35.890
because there's lots of different directory servers
out there, want to make sure you don't do something

01:04:35.889 --> 01:04:39.199
that excludes, for example, people
that are using Active Directory.

01:04:39.199 --> 01:04:41.369
Because that's pretty popular.

01:04:41.369 --> 01:04:48.400
And in fact, Active Directory is so darn popular,
but you know, they do things a little differently.

01:04:48.400 --> 01:04:54.840
So they have a few different naming conventions, they
have some different off methods than we usually use,

01:04:54.840 --> 01:05:04.010
they can have these really complex multi-domain forests,
and their group membership can be pretty gnarly.

01:05:04.010 --> 01:05:09.050
The good thing is that the 80 [phonetic] plug-in can sort
of shield you from most of this, sorts most of this out.

01:05:09.050 --> 01:05:12.780
But a lot of these dos and don'ts that I'm
going to be giving you have to do with things

01:05:12.780 --> 01:05:21.710
that the 80 [phonetic] plug-in particular is
frequently a reason for these dos and don'ts.

01:05:21.710 --> 01:05:22.849
So let's cover some of these.

01:05:22.849 --> 01:05:28.759
So the first thing is like I said, when in doubt,
if you're doing a search, use the search node.

01:05:28.760 --> 01:05:33.690
It really -- it's going to save you time anyway, because you
don't want to sit and figure out which nodes are available.

01:05:33.690 --> 01:05:40.980
Another thing, make sure you're using common off methods,
because not all nodes use the same types of authentication.

01:05:40.980 --> 01:05:46.019
Don't try to create non-standard attributes
or store information in attributes

01:05:46.019 --> 01:05:50.340
that maybe don't exist in all directory servers.

01:05:50.340 --> 01:05:56.390
Be careful when you try to pull all records of
some record type, or all records in a server,

01:05:56.389 --> 01:06:02.230
could this could be millions and millions of records which
you may not actually want, or you may think you're to going

01:06:02.230 --> 01:06:06.329
to get the millions and millions of records, but
the server has a search policy that maybe limits you

01:06:06.329 --> 01:06:09.449
to the first thousand, like Active Directory.

01:06:09.449 --> 01:06:12.589
So you may not get the results you expect.

01:06:12.590 --> 01:06:18.769
Another thing you want to do is keep in mind that if you
do something that's going to disrupt DirectoryService,

01:06:18.769 --> 01:06:25.690
like take a network interface up and down, that's going
to cause DirectoryService to have to reconfigure itself,

01:06:25.690 --> 01:06:30.289
plug-ins may reconfigure themselves, and that may
take them a certain amount of time to do that.

01:06:30.289 --> 01:06:34.670
So if you can avoid it, don't do anything
that's going to disrupt DirectoryServices.

01:06:34.670 --> 01:06:39.119
And keep in mind, you can always
check to see if nodes are available.

01:06:39.119 --> 01:06:47.099
OK, another thing is we have all these very complex
Active Directory domains and forests out there.

01:06:47.099 --> 01:06:54.759
Don't make any assumptions about how many Kerberos realms or
DNS realms, or that they match, because you could have lots

01:06:54.760 --> 01:06:58.630
of domains and lots of Kerberos realms out
there, and you could have a disjoint domain

01:06:58.630 --> 01:07:04.050
where the DNS host name does not
necessarily watch the Kerberos realm.

01:07:04.050 --> 01:07:09.210
One thing that bites a lot of people,
especially with Active Directory;

01:07:09.210 --> 01:07:13.250
people have this idea that certain records
follow certain conventions, like for example,

01:07:13.250 --> 01:07:17.389
no spaces in short names or no back slashes.

01:07:17.389 --> 01:07:23.949
Well, actually it's pretty popular in Active Directory
to have spaces in short names, and when we give you,

01:07:23.949 --> 01:07:31.289
for example, a list of groups from Active Directory, we put
the domain name and a back slash, and then the group name.

01:07:31.289 --> 01:07:32.730
So they all have back slashes.

01:07:32.730 --> 01:07:36.639
So be aware of that when you do
your parsing to keep that in mind.

01:07:36.639 --> 01:07:41.969
And then finally, use the Open Directory Framework
or the membership API to figure out membership,

01:07:41.969 --> 01:07:44.899
don't try to figure that out on your own.

01:07:44.900 --> 01:07:50.000
And if you're trying to convert user identities, use
that membership API, because it's really just going

01:07:50.000 --> 01:07:55.900
to make things a lot easier for you, plus you're
going to get the benefit performance-wise of caching.

01:07:55.900 --> 01:08:01.490
OK, for more information, you can contact Mark Malone.

01:08:01.489 --> 01:08:01.699
1