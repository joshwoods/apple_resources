WEBVTT

00:00:12.759 --> 00:00:16.050
>> iPhone Application Design Using Interface Builder.

00:00:16.050 --> 00:00:17.179
My name is Rob Marini.

00:00:17.179 --> 00:00:23.030
I'm an engineer on the Interface Builder team and I'll be
joined later today by one of my colleagues, Matt Gamble.

00:00:23.030 --> 00:00:29.190
Today we're here to talk about applications and if you
look at the whole gamut of applications that are available

00:00:29.190 --> 00:00:34.719
on the iPhone, you can basically boil them
down into three distinct types of apps.

00:00:34.719 --> 00:00:38.350
The first of which are Single Screen applications.

00:00:38.350 --> 00:00:43.600
We also have Hierarchical applications
and Tab-based applications.

00:00:43.600 --> 00:00:49.469
Today I'll be talking to you about Single
Screen applications, but before we do that,

00:00:49.469 --> 00:00:55.960
we need to talk about some basics
involved in iPhone application design.

00:00:55.960 --> 00:01:01.620
More specifically, we have to talk about View Controllers.

00:01:01.619 --> 00:01:06.120
View Controller are fundamental to iPhone app development.

00:01:06.120 --> 00:01:11.660
They're responsible for the management of a Single
View or a view hierarchy, and as a developer,

00:01:11.659 --> 00:01:15.670
your job is to provide a View Controller with its view.

00:01:15.670 --> 00:01:20.010
You can do that either through the
Load View mechanism or more commonly

00:01:20.010 --> 00:01:23.870
and more simply, by using an Interface Builder document.

00:01:23.870 --> 00:01:26.210
The other great thing about View Controllers is

00:01:26.209 --> 00:01:30.409
that they make your life much easier
in dealing with memory management.

00:01:30.409 --> 00:01:35.799
They respond to these things called memory warnings, so
that if you're running in a situation where you have a lot

00:01:35.799 --> 00:01:41.459
of things going on on the system, you can let go of some
of the things that you don't need so that you can ensure

00:01:41.459 --> 00:01:43.989
that your application keeps running smoothly.

00:01:43.989 --> 00:01:49.319
If we look at the Maps application
that I showed you earlier,

00:01:49.319 --> 00:01:56.789
you can see that there is this single screen that's managed
by a View Controller, and it essentially loads this view

00:01:56.790 --> 00:02:01.370
onto the screen that might come
from an Interface Builder document.

00:02:01.370 --> 00:02:06.950
And very commonly, there is a one-to-one mapping
between view Controllers and Interface Builder documents

00:02:06.950 --> 00:02:15.610
and this pattern is very powerful because it allows you
to run as performant as possible and to ensure that things

00:02:15.610 --> 00:02:19.710
like lazy loading and unloading are available to you.

00:02:19.710 --> 00:02:23.370
There are two ways to create View Controllers.

00:02:23.370 --> 00:02:29.719
One is what we call an on-demand View Controller, and these
are typically done in code and they're really flexible.

00:02:29.719 --> 00:02:33.719
You can create them in response to user actions.

00:02:33.719 --> 00:02:39.620
And the nice thing about that is that you don't need to
know ahead of time if you're actually going to need them.

00:02:39.620 --> 00:02:44.530
And later today, Matt Gamble will be
talking in great detail about that.

00:02:44.530 --> 00:02:49.819
The other way to create a View Controller is in Interface
Builder, and we call that a Static View Controller.

00:02:49.819 --> 00:02:53.379
These are useful for your initial View Controllers.

00:02:53.379 --> 00:02:57.849
You typically see them inside of your
Main Window, Interface Builder document,

00:02:57.849 --> 00:03:04.489
and the nice thing about them obviously
is that you don't need to write code.

00:03:04.490 --> 00:03:12.320
Going back to the Maps app, if we break it down, we
can see that it has two Interface Builder documents.

00:03:12.319 --> 00:03:19.620
The first of which is this Main Window, Interface
Builder File; and looking at that document contents,

00:03:19.620 --> 00:03:22.189
we can see that there is this View Controller.

00:03:22.189 --> 00:03:24.949
This is one of the Static View
Controllers that we talked about earlier.

00:03:24.949 --> 00:03:33.089
And by putting it inside of our IB document, we A, know
that it shares the life of our window which is the life

00:03:33.090 --> 00:03:38.409
of the whole application and we don't
actually need to write this in code.

00:03:38.409 --> 00:03:44.770
If we open that up, we can see that it loads
its view from another Interface Builder file.

00:03:44.770 --> 00:03:46.969
This maps View Controller.

00:03:46.969 --> 00:03:53.580
So if we look at that, the first thing that you
probably noticed is this thing called File Zoner;

00:03:53.580 --> 00:04:00.040
and File Zoner is really a reference that allows
you to link to the thing that manages the view.

00:04:00.039 --> 00:04:05.889
It doesn't actually exist inside of your Interface
Builder document, it exists somewhere else.

00:04:05.889 --> 00:04:11.639
And File Zoner is typically where you would put the
things that are going to manage the view contents

00:04:11.639 --> 00:04:16.709
that are being presented as part
of your Interface Builder document.

00:04:16.709 --> 00:04:23.029
And perhaps most importantly, there's usually an
outlet going from File Zoner to your view contents

00:04:23.029 --> 00:04:26.229
of the IB document and that lets the View Controller know

00:04:26.230 --> 00:04:29.900
that that is the thing that it
should be presenting on screen.

00:04:29.899 --> 00:04:36.169
If we look at the view file, you can see that we have the
Interface Builder representation of our Maps application.

00:04:36.170 --> 00:04:41.449
We have a Search bar, a Mapview,
and a Toolbar with some buttons.

00:04:41.449 --> 00:04:47.550
You might be wondering at this point, why
do we have two interface builder documents?

00:04:47.550 --> 00:04:49.780
We only have a single screen of content.

00:04:49.779 --> 00:04:54.419
And the reason goes back to something that I mentioned
earlier, which was lazy loading and unloading.

00:04:54.420 --> 00:05:03.090
For a single screen of content, this might not be
particularly useful, but after you put your app on the store

00:05:03.089 --> 00:05:09.769
and sell a few million copies, you might want to
add features to it and at that point, this is great.

00:05:09.769 --> 00:05:15.829
It also enables refactorability, which is something
that we'll be taking advantage of later on by means

00:05:15.829 --> 00:05:20.800
of these clean separations between the
things that really are your application

00:05:20.800 --> 00:05:25.329
and the things that are essentially every application.

00:05:25.329 --> 00:05:29.620
Today we're going to be building applications.

00:05:29.620 --> 00:05:35.949
We're going to be building one application, three
different ways, starting with a Single Screen variant.

00:05:35.949 --> 00:05:38.529
And their application is a to-do list.

00:05:38.529 --> 00:05:44.819
So this Single Screen version,
it's the details of a single task.

00:05:44.819 --> 00:05:52.800
Later we'll expand upon that and have a list
of tasks and the details that go with them.

00:05:52.800 --> 00:05:59.160
This is a hierarchical application and then we'll
expand upon that, and present different views

00:05:59.160 --> 00:06:02.689
of our data by using a Tab Bar Controller.

00:06:02.689 --> 00:06:07.699
So right now, I'm going to show you how
to build a Single Screen application.

00:06:07.699 --> 00:06:17.649
So, here I have the lovely new Start Up screen for Xcode
on Snow Leopard and I'm going to create a new project.

00:06:17.649 --> 00:06:24.250
Now I could create a View-based application and get a lot
of the things that I'm going to do right now for free,

00:06:24.250 --> 00:06:28.730
but I'm going to start with a Window-based
application, just so I can show you everything

00:06:28.730 --> 00:06:32.120
that goes in to one of our templates as well.

00:06:32.120 --> 00:06:34.379
So, I'll create that.

00:06:34.379 --> 00:06:37.019
I'm going to save it on the Desktop.

00:06:37.019 --> 00:06:40.259
Name it "To-Do" and here we go.

00:06:40.259 --> 00:06:42.069
(Make that a little bigger.)

00:06:42.069 --> 00:06:50.000
We can see here that we have our
app delegate and our Main Window zip

00:06:50.000 --> 00:06:53.930
and this is a very bare bones project as I mentioned.

00:06:53.930 --> 00:06:57.480
So I'm going to cheat a bit and drag in some resources.

00:06:57.480 --> 00:07:06.030
The first thing that I'm going to need are some images
and a property list, which I'll explain in just a second.

00:07:06.029 --> 00:07:09.179
Drag these in and add them to our project.

00:07:09.180 --> 00:07:16.769
So the property list is essentially just some
storage that I've used to predefine some tasks.

00:07:16.769 --> 00:07:19.289
You don't have to watch me type them in.

00:07:19.290 --> 00:07:24.980
Background image, a garbage can for
maybe one of our chores and a check mark.

00:07:24.980 --> 00:07:29.439
I also have some code that I previously wrote.

00:07:29.439 --> 00:07:31.759
Drag that in as well.

00:07:32.860 --> 00:07:35.530
Say Yes, add them.

00:07:35.529 --> 00:07:40.089
And here we have a model and a controller.

00:07:40.089 --> 00:07:42.539
I'm going to take a look at the
model right now very briefly.

00:07:42.540 --> 00:07:49.510
It's just a task, has an image, a title, summary
and a state saying whether it's complete.

00:07:49.509 --> 00:07:57.730
There's this TD Task Vendor Class and this is
essentially just a helper class that I wrote that will go

00:07:57.730 --> 00:08:02.180
through our property list of tasks and
return it to our project as an array.

00:08:02.180 --> 00:08:04.540
Really straightforward.

00:08:04.540 --> 00:08:07.450
Let's take a look at the View Controller.

00:08:07.449 --> 00:08:16.889
So right away, you can see that I have a task and I
have some IB outlets and the View Controller's job

00:08:16.889 --> 00:08:23.180
in this case is essentially to take the contents of
the task and allow me to represent them on screen.

00:08:23.180 --> 00:08:28.939
It's acting as the intermediary between our
Interface Builder document and our model.

00:08:28.939 --> 00:08:32.070
Take a look at the implementation file.

00:08:32.070 --> 00:08:36.790
Here you can see I have some memory management code,

00:08:36.789 --> 00:08:43.919
just releasing them when the controller gets
de-alloced and synthesizing the properties.

00:08:43.919 --> 00:08:50.339
And the two probably most interesting methods
are View Did Load and View Did Unload.

00:08:50.340 --> 00:08:57.190
The View Did Load gets called when my view is
actually displayed, just before the view is displayed

00:08:57.190 --> 00:09:05.130
on the screen really, and here all I'm doing is setting the
images, the text and the check button inside of the task

00:09:05.129 --> 00:09:09.820
on screen to be representative of their state in our model.

00:09:09.820 --> 00:09:15.210
And I also have this View Did Unload method,
which is new in iPhone 3.0 and it's called

00:09:15.210 --> 00:09:19.750
when the view is no longer relevant to what's being
displayed on the screen and so we just clear things

00:09:19.750 --> 00:09:23.850
up in there and give the rest of
our applications some more memory.

00:09:23.850 --> 00:09:30.639
And I also have an IB action method here and just
as a reminder, by saying something is an IB action,

00:09:30.639 --> 00:09:35.879
you're telling Interface Builder that this is something
that you might want to be using there, for instance,

00:09:35.879 --> 00:09:39.059
when I touch a button, and that's
exactly what I'm using it for.

00:09:39.059 --> 00:09:46.909
It's called Change Task State, and this is what allows
us to check and uncheck the done status of our task.

00:09:46.909 --> 00:09:54.360
So now, I'm going to go ahead and add a new file
and I'm going to create a user interface file.

00:09:54.360 --> 00:10:05.370
I'm going to do a View ZIP, go ahead,
and call that TDDetailViewController.

00:10:05.370 --> 00:10:08.179
It's a lot harder spelling on stage than it looks.

00:10:08.179 --> 00:10:12.489
I'm going to open that up in Interface Builder.

00:10:12.490 --> 00:10:13.639
Here we go.

00:10:13.639 --> 00:10:19.269
So, here you can see I have my
document window and my design surface.

00:10:19.269 --> 00:10:27.409
So I'm going to start by dragging in an image view, because
I know I have that background image that I want to use.

00:10:27.409 --> 00:10:35.589
So I'll add that here and in the identity inspect, or rather
in the attributes inspector, I'm just going to go ahead

00:10:35.590 --> 00:10:39.820
and pick an image from our project, the To-Do background.

00:10:39.820 --> 00:10:47.010
There. And I'm also going to change the view's
drawing mode to be Top and what this will allow us

00:10:47.009 --> 00:10:53.309
to do is you can see we have a lot of detail on
the top of our image and not a lot on the bottom.

00:10:53.309 --> 00:11:00.019
So in the case that where perhaps get a phone call and go
back to our application, we get that green bar on the top.

00:11:00.019 --> 00:11:03.539
Right now, we could actually just
push the view down a little.

00:11:03.539 --> 00:11:08.490
But I had some more things that I needed to
add, so I'm going to go ahead and do those now.

00:11:08.490 --> 00:11:17.759
Needed a button, so I'm going to drag that
in here and we'll just put that there.

00:11:17.759 --> 00:11:25.559
Now I'm going to change this from being a rounded
rectangle to make a custom button and I'm going

00:11:25.559 --> 00:11:32.039
to change the Selected State, have a
background image of the check mark.

00:11:32.039 --> 00:11:39.259
OK. Now I'm going to add another image view, because
remember I had that picture of the lovely garbage can.

00:11:39.259 --> 00:11:47.929
I'm going to stick that kind of here, resize it a little,
and I know that I need it to be 64x64 and I could fiddle

00:11:47.929 --> 00:11:55.489
with this for a while or I could go to the Size
Inspector and I'll give you a brief tour of this.

00:11:55.490 --> 00:11:58.950
Here you can see we have the Size and Position section.

00:11:58.950 --> 00:12:06.250
So I want to pin it to the top left and resize
it from there and I know it has to be 64x64.

00:12:06.250 --> 00:12:09.240
Hit Enter and I resized it.

00:12:09.240 --> 00:12:13.909
And now I'll manually move that
over with the keyboard about there.

00:12:13.909 --> 00:12:21.189
Now I had a title and the thing that
probably is best for a title is a Label.

00:12:21.190 --> 00:12:31.710
So I'm going to drag one out, put it here and I am going
to make it the width of our text area in our image.

00:12:31.710 --> 00:12:34.129
And I also had a summary.

00:12:34.129 --> 00:12:38.919
So I'm going to go ahead and drag in a Text View for that.

00:12:38.919 --> 00:12:44.679
Maybe stick that about there and resize that as well.

00:12:44.679 --> 00:12:48.069
So there, we've just built our interface.

00:12:48.070 --> 00:12:56.530
Now we actually want it to do something and for that we're
going to go to File Zoner and the important thing here is

00:12:56.529 --> 00:13:00.860
as I mentioned earlier, File Zoner is a link in this case,

00:13:00.860 --> 00:13:04.700
to the View Controller that actually
has the outlets in action.

00:13:04.700 --> 00:13:08.500
So we need to let Interface Builder
know what File Zoner is in this case.

00:13:08.500 --> 00:13:13.190
And if you would use the View Based Application
Template, this would have been set up for you.

00:13:13.190 --> 00:13:18.270
So I'm going to go to the Identity
Inspector and change the class of File Zoner

00:13:18.269 --> 00:13:29.529
to be TD Detail View Controller
and now I'm going to wire it up.

00:13:29.529 --> 00:13:34.459
Oh, and in Xcode I actually added these into these files.

00:13:34.460 --> 00:13:42.009
So I'm just going to stick those into classes, very quickly.

00:13:42.009 --> 00:13:45.669
[ No speaking ]

00:13:45.669 --> 00:13:50.279
It's never a demo unless you do something wrong.

00:13:50.279 --> 00:14:01.059
OK. So now if I look at the outlets in HUD, I can see
that I have a list of all of my outlooks and actions,

00:14:01.059 --> 00:14:08.869
so I'm just going to go ahead and drag from our
outlets to what they need to be connected to on screen.

00:14:08.870 --> 00:14:12.759
So Complete Task button, well I'm
going to add that to the button.

00:14:12.759 --> 00:14:18.299
And you might notice that like I can drag this over
the image and it won't actually offer it or allow me

00:14:18.299 --> 00:14:21.740
to connect it, because it knows that it wants a button.

00:14:21.740 --> 00:14:28.120
So go ahead and connect it to the
button, connect that to the Image View.

00:14:28.120 --> 00:14:34.509
There's this Search Display Controller, which I'm not
going to connect now but Matt will be talking about later.

00:14:34.509 --> 00:14:43.860
We have a Summary Text view, a Title Label,
and extremely important here is this view.

00:14:43.860 --> 00:14:50.840
So I'm going to connect that to our view and this is of
course telling the View Controller that this is the thing

00:14:50.840 --> 00:14:56.259
that it needs to present to the user when
the Interface Builder document loads.

00:14:56.259 --> 00:14:59.970
And I also have to connect an action to this button.

00:14:59.970 --> 00:15:10.000
So I'll just go ahead and do that
and set it to Change Task state.

00:15:10.000 --> 00:15:20.440
There. I'm going to Save this, go back to Xcode and at
this point I'm going to go to the Application Delegate,

00:15:20.440 --> 00:15:26.850
because there are some things I need to do here
to let it know about our initial View Controller.

00:15:26.850 --> 00:15:33.149
So first I need to actually create an
instance variable for the View Controller.

00:15:33.149 --> 00:15:41.850
There. And now I need to create a
property for it and send it as an IB outlet

00:15:41.850 --> 00:15:44.820
so that I can reference it in Interface Builder.

00:15:44.820 --> 00:15:47.010
Save that.

00:15:47.009 --> 00:15:51.279
Go to the Implementation file and
there are some things I need to import.

00:15:51.279 --> 00:15:59.139
I'm just going to replace this synthesize because
I have my own and there are these two methods,

00:15:59.139 --> 00:16:02.370
Application Did Finish Launching and DeAlloc.

00:16:02.370 --> 00:16:07.179
I'm going to go ahead and replace those as
well and I'll give you a brief tour of this.

00:16:07.179 --> 00:16:12.989
I'm creating a vendor, getting the tasks from the property
list, adding, creating a task from one of the tasks

00:16:12.990 --> 00:16:19.620
in the property list, setting them to be the task
that I create to be the task of my View Controller,

00:16:19.620 --> 00:16:24.850
setting my View Controller's view to be a sub-view
of my window, and then doing some memory management.

00:16:24.850 --> 00:16:27.409
It's very straightforward.

00:16:27.409 --> 00:16:35.289
I'll save this file and I'm going
to go ahead and Build and Run.

00:16:35.289 --> 00:16:36.870
And I typed something wrong.

00:16:36.870 --> 00:16:37.429
"TD" there.

00:16:37.429 --> 00:16:42.199
OK. Now I'm going to go ahead and Build and Run.

00:16:42.200 --> 00:16:46.460
And as you can see, we see nothing.

00:16:46.460 --> 00:16:49.170
Well why do we see nothing?

00:16:49.169 --> 00:16:53.620
Remember that I mentioned earlier
that there were two files in the Maps.

00:16:53.620 --> 00:16:59.120
Well we only worked with one here, so now we're going to
look at the other one, which is this Main Window file.

00:16:59.120 --> 00:17:06.910
So I'm going to double-click to launch that in IB and
I'm going to hide Xcode for now and hide the simulator.

00:17:06.910 --> 00:17:14.210
If you look in the contents here, you can see
that we have a window which funnily enough,

00:17:14.210 --> 00:17:18.779
looks like what we saw in the simulator
and we have our App Delegate.

00:17:18.779 --> 00:17:22.940
Remember that I mentioned before that
there were these Static View Controllers?

00:17:22.940 --> 00:17:27.529
Well this is the perfect place for one because
I know that it's going to exist for the lifetime

00:17:27.529 --> 00:17:30.589
of my application, which is the lifetime of the window.

00:17:30.589 --> 00:17:41.409
So I'm going to add one here and it's important to know here
that we don't want the class to be a UI View Controller,

00:17:41.410 --> 00:17:45.170
we want it to be our TD Detail View
Controller because this is actually

00:17:45.170 --> 00:17:48.759
where our TD Detail View Controller will be initialized.

00:17:48.759 --> 00:17:55.640
So I'm going to hit Enter and that lets Interface Builder
know that when it comes time to create this View Controller,

00:17:55.640 --> 00:17:57.290
that's the class that it should be using.

00:17:57.289 --> 00:18:04.269
And I had an outlet in the App Delegate for the
View Controller, so I'm going to Control Click there

00:18:04.269 --> 00:18:11.730
and I have this initial View Controller, I'll
drag that there and it's important to remember

00:18:11.730 --> 00:18:17.220
that we have our interface in a separate Interface
Builder file so we need to let the View Controller know

00:18:17.220 --> 00:18:20.960
that it should be loading the view from that file.

00:18:20.960 --> 00:18:27.970
So I'll go to the Attributes Inspector here and there's
a field called Nib Name, so I'll set that to be the name

00:18:27.970 --> 00:18:34.009
of the nib, which was TD Detail View Controller;
and Interface Builder communicates very seamlessly

00:18:34.009 --> 00:18:37.430
with Xcode so it knows what the files are already.

00:18:37.430 --> 00:18:40.670
It hopefully auto-completed it for me.

00:18:40.670 --> 00:18:43.960
So hit Enter to save this.

00:18:43.960 --> 00:18:49.440
Go back to Xcode and now I will Run.

00:18:49.440 --> 00:18:53.430
And now you can see our interface.

00:18:54.859 --> 00:18:56.909
Working check box, et cetera.

00:18:56.910 --> 00:19:02.200
And this is displaying the contents from
that first task of our property list,

00:19:02.200 --> 00:19:05.309
on the screen, in the interface that we designed.

00:19:05.309 --> 00:19:12.250
OK. That was our demo of building
a Single Screen application.

00:19:12.250 --> 00:19:15.380
What did we just talk about?

00:19:15.380 --> 00:19:23.750
Well, the first thing to remember is that a View Controller
is responsible for a Single View or a Single View Hierarchy.

00:19:23.750 --> 00:19:31.029
And so that's something that you typically provide to the
View Controller, inside of your Interface Builder document.

00:19:31.029 --> 00:19:36.940
The default behavior of a View Controller is
to load its view from Interface Builder files.

00:19:36.940 --> 00:19:39.910
And by doing so you get to avoid writing a lot of code.

00:19:39.910 --> 00:19:45.720
If any of you were here in the session that immediately
preceded this, you saw that just by using Interface Builder,

00:19:45.720 --> 00:19:49.289
we were able to reduce our code size by 42%.

00:19:49.289 --> 00:19:56.490
And there are two ways to create View Controllers
that I mentioned: Static and On Demand,

00:19:56.490 --> 00:20:01.730
and both of them work seamlessly with
Interface Builder documents as their views.

00:20:01.730 --> 00:20:10.319
And of course by creating clean separations in your code,
between the things that are important to your application

00:20:10.319 --> 00:20:16.269
and the things that are important to every application
but are more or less shared, you can allow Lazy Loading

00:20:16.269 --> 00:20:22.440
and Unloading and stay as performant as possible
on the iPhone, which is still an embedded device.

00:20:22.440 --> 00:20:27.730
At this point I'm going to hand it over to Matt Gamble
who will guide you through the rest of our tour.

00:20:27.730 --> 00:20:35.079
>> So we've seen the Single Screen Application type,
let's now take a look at Hierarchical Applications.

00:20:35.079 --> 00:20:41.970
And a great example of a Hierarchical
Application is the Contacts app on the phone.

00:20:41.970 --> 00:20:51.990
The Contacts app manages a hierarchy of contacts going from
the groups that the user has, then looking at the contacts

00:20:51.990 --> 00:20:58.720
that make up that group and then finally, looking
at the individual details of a particular contact.

00:20:58.720 --> 00:21:02.180
Well how would we design this?

00:21:02.180 --> 00:21:07.840
When you're dealing with hierarchies, your first
thought should be a UI Navigation Controller.

00:21:07.839 --> 00:21:15.649
And the UI Navigation Controller manages this
hierarchy, by managing a stack of View Controllers.

00:21:15.650 --> 00:21:24.269
In this case, the bottom of this stack, or the Root
View Controller, would be the Groups View Controller

00:21:24.269 --> 00:21:26.849
and it would presumably be loading its interface,

00:21:26.849 --> 00:21:31.469
which in this case is this table view,
from an Interface Builder document.

00:21:31.470 --> 00:21:38.299
Now when the user selects one of the cells in
this table, indicating that they wish to navigate

00:21:38.299 --> 00:21:45.139
to this more fine-grained view, then the Table
View Controller would message its delegate,

00:21:45.140 --> 00:21:49.140
which in this case would be the Groups View Controller.

00:21:49.140 --> 00:21:53.820
The Groups View Controller would create
an instance of a Contacts View Controller

00:21:53.819 --> 00:22:00.939
and it would then push this Contacts View Controller to the
top of the Navigation Controller's View Controller stack

00:22:00.940 --> 00:22:05.660
and then the Navigation Controller would
take care of animating out one view,

00:22:05.660 --> 00:22:10.550
indicating that the new View Controller should
load its view and then animating that into screen

00:22:10.549 --> 00:22:13.700
in the slide motion that we're all very familiar with.

00:22:13.700 --> 00:22:20.789
When the user selects Individual
Contact, same thing would happen again.

00:22:20.789 --> 00:22:26.269
This time the Contacts View Controller would
instantiate the Details View Controller,

00:22:26.269 --> 00:22:29.099
push it to the top of the Navigation Controller stack.

00:22:29.099 --> 00:22:34.529
The Navigation Controller would then
animate out one view and in the other view

00:22:34.529 --> 00:22:40.210
and we would see the details for that particular contact.

00:22:40.210 --> 00:22:45.079
Now as we heard before, when you're
working with View Controllers,

00:22:45.079 --> 00:22:50.649
you will usually have your view designed
in an Interface Builder document.

00:22:50.650 --> 00:22:55.700
So for each one of these particular views, we'll
have a corresponding Interface Builder Document,

00:22:55.700 --> 00:23:01.580
where we can lay out our interface exactly
the way we wish to see it at run time.

00:23:01.579 --> 00:23:06.579
Now since the Navigation Controller will be
needed for the entire life of our application,

00:23:06.579 --> 00:23:11.169
as well as the Groups View Controller, which
would be the Root View Controller and the base

00:23:11.170 --> 00:23:17.450
of this Navigation Controller's stack of View Controllers,
we can embed the Groups View Controller directly

00:23:17.450 --> 00:23:21.120
within the Navigation Controller and
then place the Navigation Controller

00:23:21.119 --> 00:23:25.419
as a Static View Controller in our Main Window document.

00:23:25.420 --> 00:23:30.300
Bringing our total number of Interface Builder
documents to four and this saves us a bit

00:23:30.299 --> 00:23:32.649
of code that we would have to write otherwise.

00:23:32.650 --> 00:23:39.370
As for the two remaining View Controllers, as
we mentioned we would be instantiating these

00:23:39.369 --> 00:23:43.000
when the user is selecting one of
the individual cells of a table.

00:23:43.000 --> 00:23:47.759
So we'll simply create these in code as needed.

00:23:47.759 --> 00:23:52.150
So right now, let's take that demo
that we worked with earlier

00:23:52.150 --> 00:23:56.380
and now move it to more of a Hierarchical Application.

00:23:56.380 --> 00:24:05.270
So to begin with I'm just going to quit the simulator
and return to our To-Do Application, Xcode project.

00:24:05.269 --> 00:24:16.940
So let's go back to the Main Window Interface Builder
document and take a look at that in Interface Builder.

00:24:16.940 --> 00:24:25.110
Now we saw that Rob connected the initial View
Controller outlet to our Detail View Controller,

00:24:25.109 --> 00:24:30.459
but as we're now going to be using a building a
Hierarchical Application, we'll be using a table view

00:24:30.460 --> 00:24:34.670
to manage a number of various to-do tasks.

00:24:34.670 --> 00:24:39.880
So we won't actually know which particular
task the user would like to look at,

00:24:39.880 --> 00:24:42.970
as it will depend on which one they select in the table.

00:24:42.970 --> 00:24:50.140
So our Initial View Controller will no longer be this Detail
View Controller, as we'll be creating this on demand later.

00:24:50.140 --> 00:24:53.340
So I'm just going to go ahead and delete this.

00:24:53.339 --> 00:25:01.789
And I'm going to drag out a Navigation Controller from
the Interface Builder Library and as this is going

00:25:01.789 --> 00:25:07.059
to be our Initial View Controller, I'm going
to Control click on the To-Do App Delegate

00:25:07.059 --> 00:25:11.500
and reconnected the Initial View Controller
outlet to our Navigation Controller.

00:25:11.500 --> 00:25:20.910
Now I'm going to change the document window to the Outline
Mode, so we can take a look a little bit more in depth

00:25:20.910 --> 00:25:25.410
as to what we are getting when we drag this
Navigation Controller from the library.

00:25:25.410 --> 00:25:33.269
If we disclose the Navigation Controller, we'll see
that it comes with a Navigation bar as we would expect,

00:25:33.269 --> 00:25:39.559
but it also comes with a Root View
Controller already embedded within it.

00:25:39.559 --> 00:25:45.559
And if we look at the Identity Inspector, we'll see
that the class is just set to UI View Controller.

00:25:45.559 --> 00:25:49.869
Well, we're going to have to make a
few changes here as we would want this

00:25:49.869 --> 00:25:54.139
to be the View Controller that
would be managing our Table view.

00:25:54.140 --> 00:25:59.940
So I'm going to Save our changes
here and return to our Xcode project.

00:25:59.940 --> 00:26:10.320
So I'm going to begin by adding a new
class to our Xcode project and I'm going

00:26:10.319 --> 00:26:14.859
to go to the File Menu and create a New File.

00:26:14.859 --> 00:26:18.750
And we're creating a Cocoa Touch class here as
we're going to be creating the View Controller

00:26:18.750 --> 00:26:25.029
that will manage our table and if I were to select
Objective-C class and disclose this Popup button,

00:26:25.029 --> 00:26:30.440
we can see that Xcode offers to create a
sub-class of many different types for us;

00:26:30.440 --> 00:26:36.460
and if we were to do this it would come with some
Interface Builder documents pre-configured and even some

00:26:36.460 --> 00:26:43.250
of the many methods that we would need already stubbed
out and some completely implemented, which is great.

00:26:43.250 --> 00:26:50.279
But for explanatory purposes here, I'm going to
go ahead and start with a sub-class of NS Object.

00:26:50.279 --> 00:26:56.750
Hit Next and this is going to be our Table View,

00:26:56.750 --> 00:27:05.690
so I'm going to called this TD Table View
Controller and Rob wasn't kidding about the typing.

00:27:05.690 --> 00:27:09.330
OK, here we have our Table View Controller.

00:27:09.329 --> 00:27:16.970
Now we said that we want this to be a sub-class of UI Table
View Controller, which is a sub-class of UI View Controller

00:27:16.970 --> 00:27:22.069
that UIKit provides, that makes it
a lot easier to handle table views.

00:27:22.069 --> 00:27:30.599
So instead of making this a sub-class of NS Object,
I'm going to change this to UI Table View Controller

00:27:30.599 --> 00:27:38.809
and since UI Table View Controller is coming from the
UIKit, I will be replacing this import with UIKit.

00:27:38.809 --> 00:27:41.799
All right?

00:27:41.799 --> 00:27:48.220
I'll save those changes and next, since
we're creating a new View Controller, well,

00:27:48.220 --> 00:27:53.279
the next step would be to create an Interface
Builder document for this View Controller.

00:27:53.279 --> 00:28:01.369
And so to do that I'll go to our Resources
folder and again, go to File, Create a New File.

00:28:01.369 --> 00:28:08.829
This time I'll create a user interface file and again, so
that we're going to see everything that's happening here,

00:28:08.829 --> 00:28:13.230
I'm going to go with just an empty
Interface Builder document.

00:28:13.230 --> 00:28:21.289
Again call this TD Table View Controller and finish.

00:28:21.289 --> 00:28:24.879
So if we take a look at this document in Interface Builder,

00:28:24.880 --> 00:28:34.550
I'm just going to double-click it
and let's go ahead and Hide Others.

00:28:34.549 --> 00:28:38.539
We'll see that all we have is the
File Zoner and First Responder,

00:28:38.539 --> 00:28:42.670
we haven't actually added anything to this document yet.

00:28:42.670 --> 00:28:47.410
Well, as we know that this is going to be
the Interface Builder document associated

00:28:47.410 --> 00:28:55.370
with our new Table View Controller class, I'm going to
Select File Zoner and indicate this to Interface Builder

00:28:55.369 --> 00:28:59.149
by selecting our TD Table View Controller.

00:28:59.150 --> 00:29:05.090
Next we're going to need a table view.

00:29:05.089 --> 00:29:12.369
So I'll go back to the Interface Builder library
and drag out an instance of the Table view.

00:29:12.369 --> 00:29:19.729
And as we know that we want this Table
view to be the view that is loaded

00:29:19.730 --> 00:29:27.200
when our Table View Controller sub-class presents its
interface, I'm going to go ahead and Control-click

00:29:27.200 --> 00:29:33.059
on the File Zoner to bring up the Connections
Panel and then drag from the View Well

00:29:33.059 --> 00:29:38.210
over to our Table View and make that connection.

00:29:38.210 --> 00:29:44.160
Now if I double-click on this Table View to open it on
the design surface, we can see that Interface Builder, oh,

00:29:44.160 --> 00:29:51.080
grabbed the wrong one there, we can see that Interface
Builder has added some predefined data to sort

00:29:51.079 --> 00:29:55.119
of give us an idea of what this would look like.

00:29:55.119 --> 00:29:59.649
Well to give us an even better idea of what this is
going to look like, since we know that this will be

00:29:59.650 --> 00:30:06.140
in a Navigation Controller, I can go to the Attributes
Inspector for the table view and then go down here

00:30:06.140 --> 00:30:13.960
to this third section from the top, the Simulated User
Interface Elements and as this table view will be embedded

00:30:13.960 --> 00:30:20.569
in the Navigation Controller, which as we saw will have
a Navigation bar, we can go ahead and change this top bar

00:30:20.569 --> 00:30:24.099
to Navigation bar and this gives us a better understanding

00:30:24.099 --> 00:30:30.469
of how this will actually look when
the user is interacting with it.

00:30:30.470 --> 00:30:36.339
Now we've also heard a lot about how searches
come into lots of the applications on the iPhone

00:30:36.339 --> 00:30:40.889
and even to the entire system in the form of Spotlight.

00:30:40.890 --> 00:30:46.000
Well let's make sure to add Search
to our application as well.

00:30:46.000 --> 00:30:53.009
And Interface Builder makes this very easy by
adding not only a Search bar to the library,

00:30:53.009 --> 00:30:57.460
but also a Search bar with a pre-configured
Search Display Controller.

00:30:57.460 --> 00:31:04.980
So if I drag this from the library and over to our
table view, we'd like to make it the header of our table

00:31:04.980 --> 00:31:10.839
in a similar manner as the Contacts Application and we
can see that again, Interface Builder makes this easy

00:31:10.839 --> 00:31:16.769
by giving us a little drop highlight here, indicating
that this will become the header of the table.

00:31:16.769 --> 00:31:22.119
So if I drop this in here, we can see
it's now set as the header of our table

00:31:22.119 --> 00:31:28.419
and we also gained this Search Display
Controller object in our document window.

00:31:28.420 --> 00:31:35.440
Well let's Control-click to bring up the Connections
Panel and we can see that there's a number of connections,

00:31:35.440 --> 00:31:42.890
most of which end in "delegate' or 'data source,'
and since we indicated to Interface Builder

00:31:42.890 --> 00:31:49.950
that the object loading this Interface Builder
document would be a sub-class of UI View Controller,

00:31:49.950 --> 00:31:58.269
Interface Builder has gone ahead and made some educated
guesses and connected all these outlets to File Zoner,

00:31:58.269 --> 00:32:04.869
as most times you would have one class be acting as the
data source and delegate for the Search Display Controller.

00:32:04.869 --> 00:32:07.089
Well that's exactly what we want.

00:32:07.089 --> 00:32:15.659
So instead of wiring all that up, we'll just Save this
and now let's go back to Xcode and actually implement some

00:32:15.660 --> 00:32:17.500
of these things we've been talking about.

00:32:17.500 --> 00:32:26.400
So back in Xcode I'm going to navigate to
our TD Table View Controller header file

00:32:26.400 --> 00:32:29.080
and we see it's rather blank right now.

00:32:29.079 --> 00:32:32.949
Well first I'm going to add some of the
instance variables that we're going to need.

00:32:32.950 --> 00:32:40.080
And this first one and its predicate, it's our filter
predicate, we'll actually be using this more later

00:32:40.079 --> 00:32:47.029
so we'll go ahead and looked at our Filtered
Tasks Array and this is simply an array

00:32:47.029 --> 00:32:50.710
of the tasks that we'll be displaying in our table.

00:32:50.710 --> 00:32:56.759
And finally we have another NS predicate and
this is our search predicate and this is the one

00:32:56.759 --> 00:33:04.140
that we will construct using the information
that the user enters into our search bar

00:33:04.140 --> 00:33:06.710
so we can know to filter our results appropriately.

00:33:06.710 --> 00:33:17.799
We're also going to have some properties-we'll have
four properties, ones to match our instance variables

00:33:17.799 --> 00:33:23.919
for our filter predicate, filtered tasks and search
predicate and we'll also have a read only property

00:33:23.920 --> 00:33:30.440
for our search results and this will be the collection
of tasks that match the predicate that we built

00:33:30.440 --> 00:33:33.049
from what the user typed into our search bar.

00:33:33.049 --> 00:33:35.779
All right, that's great.

00:33:35.779 --> 00:33:39.089
So I'm going to Save this.

00:33:39.089 --> 00:33:46.399
And I'm going to go over to our TD Table
View Controller Implementation file.

00:33:46.400 --> 00:33:51.910
So first, a little memory management.

00:33:51.910 --> 00:33:56.920
Add or DeAlloc method, making sure
to release our instance variables.

00:33:56.920 --> 00:34:02.259
And then as we had four properties,
we're going to have to declare them here

00:34:02.259 --> 00:34:07.740
so we'll be synthesizing the filter predicate,
filtered tasks and search predicate properties

00:34:07.740 --> 00:34:13.849
and we're actually going to have a little bit more work
in our filtered tasks method and we're going to check

00:34:13.849 --> 00:34:19.380
and see if we've already instantiated it and if not
we'll see if we have a filter predicate If we do,

00:34:19.380 --> 00:34:32.369
then we'll filter the task that we get back from the Shared
Task Vendor, otherwise we'll simply get a copy of the tasks.

00:34:32.369 --> 00:34:41.130
Well since we'll be using the TD Task Vendor
class, I'm going to add an import statement.

00:34:41.130 --> 00:34:44.200
Now we saw in the header file, I added four properties.

00:34:44.199 --> 00:34:47.189
But I've only synthesized three.

00:34:47.190 --> 00:34:52.750
Well we're actually going to be declaring one of them
as dynamic, meaning that we'll supply the implementation

00:34:52.750 --> 00:34:57.019
of the method ourselves and as this
was marked as a read only property,

00:34:57.019 --> 00:35:01.380
we only need to implement the getter for this property.

00:35:01.380 --> 00:35:08.750
And our getter simply acts a lot like our filtered tasks,
checking to see if we have a search predicate and if we do,

00:35:08.750 --> 00:35:19.679
making sure to filter our tasks otherwise just
returning the array of tasks that we have on hand.

00:35:19.679 --> 00:35:25.480
Now you saw that I dragged in a UI Table
View into our interface and a table view.

00:35:25.480 --> 00:35:30.969
Using a table view in your application
deserves a little bit more explanation.

00:35:30.969 --> 00:35:39.819
When you're using a table view, the table view has both an
object acting as a data source and another as its delegate.

00:35:39.820 --> 00:35:48.000
Now the data source is an object that helps the table view
populate itself with the data that you'll be wanting to show

00:35:48.000 --> 00:35:55.070
to the user and the delegate is an object
that configures some more specific behavior

00:35:55.070 --> 00:36:00.780
and maybe adjusts some of the options
and how things will look.

00:36:00.780 --> 00:36:09.140
Well as we made our sub-class here a sub-class of
UI Table View Controller, this class will be acting

00:36:09.139 --> 00:36:14.900
as both the delegate and the data source for our
table view that we added in Interface Builder.

00:36:14.900 --> 00:36:20.900
So I'm going to go and add these
properties or add these implementations.

00:36:22.570 --> 00:36:28.870
First, we're going to need a little helper method
to distinguish between some of the different kinds

00:36:28.869 --> 00:36:32.750
of tasks we have and this is tasks for table view.

00:36:32.750 --> 00:36:36.869
You might be asking, why do we need to distinguish this?

00:36:36.869 --> 00:36:40.650
We only saw one table view get
dragged into Interface Builder.

00:36:40.650 --> 00:36:43.940
And that's true, I only dragged one
out and that would be the table view

00:36:43.940 --> 00:36:47.389
that belongs to our Table View Controller sub-class.

00:36:47.389 --> 00:36:53.920
Well the Search Display Controller also uses a
table view when it's showing the lists of tasks

00:36:53.920 --> 00:36:58.630
that will match the search results that
the user entered into the search bar.

00:36:58.630 --> 00:37:03.890
It'll present those in its own table view
so that the user can then select from there.

00:37:03.889 --> 00:37:10.619
So to make sure that we're returning the correct
tasks, we're going to check and see if the table passed

00:37:10.619 --> 00:37:15.199
in is our table that we configured in Interface Builder.

00:37:15.199 --> 00:37:22.319
If it is, then we'll know we need to return our set
of tasks, otherwise we'll return the search results.

00:37:22.320 --> 00:37:33.059
So now onto the table view data source protocol and the
first method we'll be implementing is the Table View Number

00:37:33.059 --> 00:37:40.019
of Rows and Section method, where we'll need to return
simply the number of rows in the section of our table view.

00:37:40.019 --> 00:37:46.570
And as our table is the standard style rather
than the group style, we'll have only one section.

00:37:46.570 --> 00:37:50.640
So we will return the count of the
task for the corresponding table.

00:37:50.639 --> 00:38:00.819
The second method requires a little bit more work and
this is the Table View Cell for Row with Index path.

00:38:00.820 --> 00:38:05.920
Now again, it's another part of using table
view that requires a little bit of explanation,

00:38:05.920 --> 00:38:13.150
and that is the fact that it recycles the cells that it uses
to populate its table, only ever having enough in memory

00:38:13.150 --> 00:38:18.400
to display the cells that are necessary
on screen at that particular moment.

00:38:18.400 --> 00:38:24.380
Then has a recycling mechanism that allows you to
reuse cells that have either fallen off the top

00:38:24.380 --> 00:38:29.760
or dropped off the bottom and then you can
simply reset the information in those cells

00:38:29.760 --> 00:38:34.760
and use them again rather than
allocating an entirely new object.

00:38:34.760 --> 00:38:37.540
So we're going to take advantage of that here.

00:38:38.639 --> 00:38:47.150
So first we'll get the corresponding task at this index
path for the correct table and then we'll ask the table

00:38:47.150 --> 00:38:52.590
to de-que a reusable cell that matches
the identifier that we'll pass in.

00:38:52.590 --> 00:38:59.860
And this allows, gives the table a chance to give
us a recycled cell that matches our identifier.

00:38:59.860 --> 00:39:08.800
If we get, if we do not have a recycled cell to use at
this point, we'll have to actually create, allocate,

00:39:08.800 --> 00:39:15.610
and init one ourselves using the Init with Style Reuse
Identifier Method, and for the style we'll be passing

00:39:15.610 --> 00:39:22.390
in the table view Cell Style sub-title, which has
a nice looking title and then a somewhat smaller

00:39:22.389 --> 00:39:24.619
and different colored sub-title underneath.

00:39:24.619 --> 00:39:25.869
Looks very nice.

00:39:25.869 --> 00:39:34.339
And we'll be passing in our reuse identifier to be sure that
we can indicate the correct type of cell we wish to reuse

00:39:34.340 --> 00:39:37.450
when we are asking the table to de-que one.

00:39:37.449 --> 00:39:44.929
Now regardless of whether we're reusing a cell or we've
created a new one, we'll have to set some of the properties,

00:39:44.929 --> 00:39:52.419
and in this case we will be setting the text of
the cell's text label to the title of our task

00:39:52.420 --> 00:40:00.860
and we will be setting the text of the cell's detail
text label to whether or not the task has been completed.

00:40:00.860 --> 00:40:07.900
And again, since we'll be using this TD Task class for
the first time, I'm going to go back up to the top here

00:40:07.900 --> 00:40:10.960
and make sure to add that import statement.

00:40:10.960 --> 00:40:18.190
So those were those data source methods from that
table view data source protocol that I mentioned,

00:40:18.190 --> 00:40:22.960
but we haven't done anything with that
delegate protocol that I'd talked about.

00:40:22.960 --> 00:40:26.329
So here it is.

00:40:26.329 --> 00:40:32.119
The only method for the table view delegate protocol that
we'll be implementing is the Table View Did Select row

00:40:32.119 --> 00:40:39.289
and index path method and this is our chance to react to
the user selecting one of the cells in our table view.

00:40:40.389 --> 00:40:45.109
And in this case what we want to have happen
is similar to with the contacts application,

00:40:45.110 --> 00:40:52.309
they select the row in the table and then our detail
view that Rob created earlier would animate into place.

00:40:52.309 --> 00:40:57.090
So we'll get the appropriate task and
then make sure to create an instance

00:40:57.090 --> 00:41:01.309
of the Detail View Controller that Rob mentioned earlier.

00:41:01.309 --> 00:41:05.820
And we'll use the init with Nib
name, making sure to pass in the name

00:41:05.820 --> 00:41:09.950
of the Interface Builder document that Rob slaved over.

00:41:09.949 --> 00:41:17.659
And then we'll set the task to our current task and
then set the title to the title of the current task.

00:41:17.659 --> 00:41:25.679
And then we'll make sure to push this View Controller to the
top of the Navigation Controller's View Controller stack,

00:41:25.679 --> 00:41:30.230
indicating that we do want it to
perform the side-sliding animation.

00:41:30.230 --> 00:41:39.719
All right, since we used our TD Detail View Controller for
the first time, I'm just going to jump up to the top here

00:41:39.719 --> 00:41:42.369
and make sure to add that import statement.

00:41:42.369 --> 00:41:46.359
All right, returning back to where we were.

00:41:46.360 --> 00:41:51.880
There's one final method we need to
add here and we have actually not dealt

00:41:51.880 --> 00:41:58.400
with our Search Display Controller very much
yet, other than determining which task to use.

00:41:58.400 --> 00:42:02.730
So we have one method that we'll be using
and this is another Delegate protocol,

00:42:02.730 --> 00:42:09.190
this time the SearchBarDelegate Protocol
and this method, Search Bar Text Change,

00:42:09.190 --> 00:42:14.619
simply informs us that the user has changed
the text that they had in the search bar.

00:42:14.619 --> 00:42:20.909
In this case we'll want to make sure to update
our search predicate to reflect the search text

00:42:20.909 --> 00:42:29.389
that the user has entered and our predicate will
simply match the title using a case insensitive search.

00:42:30.440 --> 00:42:33.440
So let's Save our changes here.

00:42:33.440 --> 00:42:37.539
And let's go back to the Main Window
document in Interface Builder.

00:42:37.539 --> 00:42:45.230
And I'll just hide the others.

00:42:45.230 --> 00:42:50.369
So I mentioned when we dragged out this
Navigation Controller, that it came with a sorry,

00:42:50.369 --> 00:42:54.109
Root View Controller already embedded within it.

00:42:54.110 --> 00:42:59.680
But we also mentioned that this was
simply a vanilla UI View Controller.

00:42:59.679 --> 00:43:05.359
Well, we would like this instead to be
our new TD Table View Controller class.

00:43:05.360 --> 00:43:10.019
So in the Class Popup Button, I'll simply
Select our TD Table View Controller.

00:43:10.019 --> 00:43:19.230
If we look at the editor for the Navigation
Controller, we'll see that it actually says,

00:43:19.230 --> 00:43:23.010
Root View Controller right in the navigation bar.

00:43:23.010 --> 00:43:29.290
Now Interface Builder is making sure to display in
the navigation bar of our Navigation Controller,

00:43:29.289 --> 00:43:36.559
the title of the navigation item more specifically
of the navigation item of our Root View Controller,

00:43:36.559 --> 00:43:40.039
which we have just modified to be our Table View Controller.

00:43:40.039 --> 00:43:47.259
Now, we certainly don't want it to say Root View
Controller, so I can simply go to the editor, double-click,

00:43:47.260 --> 00:43:54.860
select this text and replace it with something
that makes a little bit more sense in our case.

00:43:54.860 --> 00:44:01.190
So I'll save these changes and one
more time, let's return to Xcode.

00:44:01.190 --> 00:44:13.210
Now at the end of his demo, Rob added a few lines to
our To-Do App delegate and we're actually not going

00:44:13.210 --> 00:44:18.650
to be needing those any longer, as we're using our
Static View Controller, our Navigation Controller,

00:44:18.650 --> 00:44:21.400
embedded directly within our Main Window document.

00:44:21.400 --> 00:44:26.320
And as we'll be creating our Detailed View Controller
dynamically in response to users selecting a row

00:44:26.320 --> 00:44:31.440
in the table, we don't need to configure
it in Application Did Finish Launching.

00:44:31.440 --> 00:44:38.800
So I'm going to just get rid of these top four lines
and we also won't be needing these import statements.

00:44:38.800 --> 00:44:47.280
Save these changes and let's Build and Run.

00:44:47.280 --> 00:44:48.840
Here it is.

00:44:48.840 --> 00:44:55.519
We see we have our tasks all set up here,
showing in our Navigation Controller.

00:44:55.519 --> 00:45:04.119
And it looks like I didn't save some changes that we
made, since we don't seem to have our search bar here.

00:45:04.119 --> 00:45:09.940
So I'm going to Quit this and return to
Interface Builder for just one moment.

00:45:09.940 --> 00:45:18.079
And make sure to go back to our Table
View Controller here and make sure

00:45:18.079 --> 00:45:22.299
that we have this all set the way that we need.

00:45:23.769 --> 00:45:25.340
All right.

00:45:25.340 --> 00:45:39.760
What I didn't do here was I didn't indicate to Interface
Builder that we'll be needing to be using the view

00:45:39.760 --> 00:45:43.210
that we created in our other Interface Builder document.

00:45:43.210 --> 00:45:46.190
So in the Nib name, we'll have to
make sure to tell it that we want

00:45:46.190 --> 00:45:50.269
to use the TD Table View Controller
Interface Builder document.

00:45:50.269 --> 00:45:52.610
Save these changes.

00:45:52.610 --> 00:45:58.230
Returning to Xcode, we should see something
more along the lines of what we wanted.

00:45:58.230 --> 00:46:02.909
So here we see all our tasks, in the table view.

00:46:02.909 --> 00:46:04.929
We can perform a search.

00:46:04.929 --> 00:46:07.690
All right, that works great.

00:46:07.690 --> 00:46:09.889
What about something else?

00:46:09.889 --> 00:46:12.559
Oh, yes, I want to make sure to do that.

00:46:12.559 --> 00:46:21.199
If we select one of the tasks, we can see that the
detailed view that Rob created earlier animates into place

00:46:21.199 --> 00:46:25.379
and everything is working exactly the way we want.

00:46:25.380 --> 00:46:30.010
So let's take a look at some of
the key points from this demo.

00:46:30.010 --> 00:46:36.310
The first of which is we saw that we could
save ourselves writing a little bit of code

00:46:36.309 --> 00:46:41.559
by adding our Static View Controllers, in our case the
Navigation Controller and its Root View Controller,

00:46:41.559 --> 00:46:44.960
directly into our Main Window document in Interface Builder.

00:46:44.960 --> 00:46:53.650
And we also saw that when the user selects one of the
rows of our table, we can just dynamically instantiate one

00:46:53.650 --> 00:47:00.380
of our Detail View Controllers right in that method and then
push it on to Navigation Controller's View Controller stack

00:47:00.380 --> 00:47:04.059
and have it animate into place in
the manner we're all familiar with.

00:47:04.059 --> 00:47:11.750
So the final type of application design that we'll
be discussing today is the Tabbed Application.

00:47:11.750 --> 00:47:19.050
And a great example of the Tabbed
Application is the Clocks App on the phone.

00:47:19.050 --> 00:47:25.580
With the Clocks App, we've got four distinct pieces of
functionality that are all related in that they have to do

00:47:25.579 --> 00:47:32.940
with time, so it makes sense for them all to be in the
same application, but there's no hierarchy of data here

00:47:32.940 --> 00:47:36.179
so a Navigation Controller really wouldn't make sense.

00:47:36.179 --> 00:47:42.199
But as these are distinctly related and it would be
logical that they would be in the same application,

00:47:42.199 --> 00:47:46.179
we can use the Tab Bar Controller to make it
easier for the user to select the different modes.

00:47:46.179 --> 00:47:54.909
So in the same manner that we had in Navigation
Controller acting as our primary View Controller guiding us

00:47:54.909 --> 00:47:59.349
through our hierarchy, in this case
we begin with a Tab Bar Controller.

00:47:59.349 --> 00:48:06.159
And the Tab Bar Controller manages a collection
of View Controllers that correspond to the tabs

00:48:06.159 --> 00:48:08.659
that you will have and be presenting to the user.

00:48:08.659 --> 00:48:16.389
So when the user selects a particular tab, the Tab
Bar Controller makes that the Visible View Controller

00:48:16.389 --> 00:48:20.949
and if its view is not loaded it would
then indicate that it should load its view,

00:48:20.949 --> 00:48:25.129
which presumably would be coming
from an Interface Builder document.

00:48:25.130 --> 00:48:28.460
Again, if someone were to select the Alarm tab,

00:48:28.460 --> 00:48:33.920
the Alarm View Controller would then become the
primary View Controller and it's view would be loaded

00:48:33.920 --> 00:48:42.079
if it wasn't already and the same with the Stop Watch
View Controller and again with the Timer View Controller.

00:48:42.079 --> 00:48:48.119
Now if we were constructing this in
Interface Builder, how would this look?

00:48:48.119 --> 00:48:51.650
Well, we know that the one-to-one rule is a great guideline,

00:48:51.650 --> 00:48:57.440
so for each one of these View Controllers we
would have a different Interface Builder document,

00:48:57.440 --> 00:49:04.010
which would provide great separation, would allow us to
construct our interfaces in Interface Builder, dragging,

00:49:04.010 --> 00:49:07.430
dropping and making it look exactly the way that we want,

00:49:07.429 --> 00:49:14.949
and it would also allow the View Controller
to use its memory management system.

00:49:14.949 --> 00:49:20.609
Now in a similar manner that we embedded our Navigation
Controller directly in our Main Window document as we knew

00:49:20.610 --> 00:49:24.990
that we would need it immediately and
for the entire life of our application,

00:49:24.989 --> 00:49:31.969
we're also going to need the Tab Bar Controller and
we also know exactly what tabs to present to the user.

00:49:31.969 --> 00:49:38.859
So we can go ahead and embed those directly in the Tab Bar
Controller and then place the Tab Bar Controller directly

00:49:38.860 --> 00:49:44.260
in our Main Window document, bringing our total
number of Interface Builder documents to 5.

00:49:44.260 --> 00:49:50.430
So let's return to our demo and this
time modify our Hierarchical Application

00:49:50.429 --> 00:49:54.329
and make it more of a Tab Based Application.

00:49:54.329 --> 00:49:59.699
Now for this part of the section of
the demo, we're going to use the tabs

00:49:59.699 --> 00:50:04.169
to provide the user a way to look
at the data in different ways.

00:50:04.170 --> 00:50:10.409
More specifically, we're going to have the first tab
be all of our tasks, the second tab be only the tasks

00:50:10.409 --> 00:50:17.690
that are currently in progress, and then
the third tab be just the completed tasks.

00:50:17.690 --> 00:50:25.920
So the first step is to take a look
at our Main Window document again

00:50:25.920 --> 00:50:33.260
and as we will be needing a Tab Bar Controller, I'm
just going to go back to the Interface Builder library

00:50:33.260 --> 00:50:38.180
and drag out an instance and drag
that into our document window.

00:50:38.179 --> 00:50:46.759
Now in a similar manner to the Navigation Controller,
the Tab Bar Controller comes pre-populated with a couple

00:50:46.760 --> 00:50:53.520
of tabs, so you could go ahead and change these
to your particular sub-classes or use them as-is

00:50:53.519 --> 00:50:59.239
or simply change the views that
they'll be loading to load your views.

00:50:59.239 --> 00:51:04.029
But we already have everything configured
in the form of our Navigation Controller

00:51:04.030 --> 00:51:07.070
with a Table View Controller already embedded within it.

00:51:07.070 --> 00:51:13.460
So for now, I'm just going to select
both of these and remove them.

00:51:13.460 --> 00:51:19.159
And next, since our initial View Controller will no longer
be our Navigation Controller, but our Tab Bar Controller,

00:51:19.159 --> 00:51:25.420
I'm going to disconnect that outlet and
connect it instead to our Tab Bar Controller.

00:51:25.420 --> 00:51:35.849
Now I mentioned that the tabs of this Tab Bar
Controller will be different views on our same data,

00:51:35.849 --> 00:51:41.230
so we can actually just reuse our same Navigation
Controller with the table view embedded.

00:51:41.230 --> 00:51:50.969
So I'm going to select that Navigation Controller, go
to the Edit menu, Duplicate once, and Duplicate again.

00:51:50.969 --> 00:51:54.929
This is definitely better than writing code.

00:51:54.929 --> 00:52:01.710
And then I'm going to go and drag these just
directly into the tab bar of our Tab Bar Controller.

00:52:01.710 --> 00:52:04.559
One, two, three.

00:52:04.559 --> 00:52:13.009
There are our three tabs and now a little bit of typing as
this is a little bit hard to understand what's going on.

00:52:13.010 --> 00:52:18.620
I'm going to simply double-click in the
Editor for the title of this tab bar item,

00:52:18.619 --> 00:52:25.619
change this to All Tasks and then
just Select this and Copy it.

00:52:25.619 --> 00:52:31.109
Then hit Return and Editing and then
do the same with the navigation item.

00:52:31.110 --> 00:52:34.110
Paste that in, hit Return.

00:52:34.110 --> 00:52:41.070
The second one is going to be our In
Progress Tasks, again Select All that,

00:52:41.070 --> 00:52:46.039
have to type again, double-click, Paste, Return.

00:52:46.039 --> 00:52:51.009
And the final one will be our Completed Tasks.

00:52:51.010 --> 00:52:59.620
[ No speaking ]

00:52:59.619 --> 00:53:01.159
All right.

00:53:01.159 --> 00:53:07.489
So we have the look that we want, we're using our
Navigation Controllers with our Table View Controllers

00:53:07.489 --> 00:53:14.479
and we have our titles and everything configured
the way we want, but right as it stands right now,

00:53:14.480 --> 00:53:20.480
we have no way to differentiate between these
different tabs in our Tab Bar Controller.

00:53:20.480 --> 00:53:27.420
We have no way to say, to know in code which one
of these should be getting which search predicate

00:53:27.420 --> 00:53:33.510
or which filter predicate So what we need to do is
make sure that we have a handle on these navigation

00:53:33.510 --> 00:53:38.340
or on these View Controllers so we can disinvigorate them.

00:53:38.340 --> 00:53:50.570
So to do this I'm going to return to Xcode and
start by taking a look at the To-Do App delegate.

00:53:50.570 --> 00:53:54.220
The header file more specifically.

00:53:54.219 --> 00:54:00.609
And we're going to need a couple of instance
variables, so I'm going to add these here.

00:54:00.610 --> 00:54:07.150
So we'll have the Tasks in Progress Table View
Controller and the Tasks Completed Table View Controller

00:54:07.150 --> 00:54:15.050
and we'll have some properties for accessing these
and we're also going to need a At Class statement,

00:54:15.050 --> 00:54:17.300
make sure we don't get any build warnings.

00:54:17.300 --> 00:54:25.210
So I'll Save this file and now go over to our
implementation file and we're going to have

00:54:25.210 --> 00:54:31.900
to synthesize these new properties,
so I'll make sure to do that.

00:54:31.900 --> 00:54:38.510
And again, we're going to have to import our Table
View Controller header file and we've got a couple

00:54:38.510 --> 00:54:42.690
of more instance variables we want to
make sure to clean up after ourselves.

00:54:42.690 --> 00:54:53.760
And then finally here's the actual meat of what we're
doing, modify the application Did Finish Launching method

00:54:53.760 --> 00:55:00.860
to set the filter predicates to the appropriate NS
predicates, and this is that filter predicate property

00:55:00.860 --> 00:55:04.789
that I kind of glossed over during
the Navigation Controller demo.

00:55:04.789 --> 00:55:13.309
And in this case we want to set the Tasks in Progress table
View Controller's predicate to make sure that we are using,

00:55:13.309 --> 00:55:16.509
we are seeing only tasks that are not complete, i.e.,

00:55:16.510 --> 00:55:22.140
in progress and then the opposite
with our Tasks Completed controller.

00:55:22.139 --> 00:55:26.079
So let's make sure to Save these changes.

00:55:26.079 --> 00:55:31.599
And I'm going to go back to Interface Builder and
take a look again at our Main Window document.

00:55:31.599 --> 00:55:43.659
And we created outlets for these various View Controllers,
but we didn't actually make any of the connections yet.

00:55:43.659 --> 00:55:50.170
So I'm going to disclose to make sure I can see
these, the In Progress table View Controller

00:55:50.170 --> 00:55:55.869
and the Completed table View Controller,
let's make that a little better.

00:55:55.869 --> 00:56:00.369
And I'm going to Control-click on the To-Do
App delegate to bring up the Connections Panel.

00:56:00.369 --> 00:56:05.099
And we see that the outlets that we created in
Interface Builder are there and so we can create our,

00:56:05.099 --> 00:56:13.759
we can connect our Tasks Completed outlet directly to
our Completed Tasks table View Controller and our Tasks

00:56:13.760 --> 00:56:24.680
in Progress outlet to our In Progress table View
Controller, close that, save and return to Xcode.

00:56:24.679 --> 00:56:28.239
So now let's Build and Run and take
a look at what it looks like now.

00:56:28.239 --> 00:56:36.149
So you can see we again have our Navigation Controller from
our previous section of the demo, but we now have these tabs

00:56:36.150 --> 00:56:40.829
and we have all of our various tasks here,
but if we navigate to the In Progress Tasks,

00:56:40.829 --> 00:56:44.269
we see only the tasks that are currently in progress

00:56:44.269 --> 00:56:47.860
and Completed Tasks again only the
tasks that have been completed.

00:56:47.860 --> 00:56:56.460
But all of our searching works correctly and
we can still navigate to our detail views.

00:56:56.460 --> 00:57:00.840
So a few key points to take away from this demo.

00:57:00.840 --> 00:57:07.630
The first is that again, as our tab bar controller would
be needed at application launch and throughout the life

00:57:07.630 --> 00:57:14.420
of our application, we added it directly to our Main Window
Interface Builder document as a static View Controller

00:57:14.420 --> 00:57:22.750
and this saved us having to allocate and
initialize this in a particular spot in our code.

00:57:22.750 --> 00:57:29.809
We also saw that as we knew exactly which View Controllers
we would have corresponding to each of our tabs,

00:57:29.809 --> 00:57:34.170
we could add these directly to the Tab Bar
controller so that we could see the way it would look

00:57:34.170 --> 00:57:39.099
in Interface Builder, rearrange them,
easily retitle them and make sure

00:57:39.099 --> 00:57:42.519
that everything is going to look exactly the way we want.

00:57:42.519 --> 00:57:50.630
And we can rest assured that the views will, as we are using
separate Interface Builder documents for the views of each

00:57:50.630 --> 00:57:55.440
of these View Controllers, we can rest assured
that they will only be loaded when needed

00:57:55.440 --> 00:57:58.380
and will be unloaded when they are no longer needed.

00:57:58.380 --> 00:58:04.809
So we've covered a lot of material here today,
but I hope you get a better understanding

00:58:04.809 --> 00:58:09.269
on how you can use Interface Builder to
design really great iPhone applications.

00:58:09.269 --> 00:58:13.500
And there's a few key points to remember
when you go off to the labs after this

00:58:13.500 --> 00:58:16.239
and start constructing your applications.

00:58:16.239 --> 00:58:23.789
The first is that a great way to think about an
iPhone application is a hierarchy of View Controllers

00:58:23.789 --> 00:58:28.880
and these could be Tab Bar controllers or
navigation controllers or your own sub-class,

00:58:28.880 --> 00:58:33.269
but there's always a lot of View Controllers interacting.

00:58:35.300 --> 00:58:39.910
Also good to keep in mind that View
Controllers are responsible for a single view.

00:58:39.909 --> 00:58:45.769
There may be additional outlets in your View
Controller sub-class, but a primary view,

00:58:45.769 --> 00:58:48.849
which should be associated with
each of these View Controllers.

00:58:48.849 --> 00:58:55.389
And the easiest way to construct and compartmentalize
this view is with an Interface Builder document,

00:58:55.389 --> 00:59:01.920
so you can construct it in Interface Builder and lay
it out exactly the way you want your users to see it.

00:59:01.920 --> 00:59:06.970
And finally, we saw that there's a couple of
different ways to instantiate View Controllers,

00:59:06.969 --> 00:59:10.469
for View Controllers we'll need
right away at application launch

00:59:10.469 --> 00:59:16.619
or when a particular Interface Builder document is loaded
into memory, we can add these as instances directly

00:59:16.619 --> 00:59:21.940
into those documents, simply dragging them from
the Interface Builder library and then set them up

00:59:21.940 --> 00:59:25.679
and making sure, as we saw, to configure their views

00:59:25.679 --> 00:59:29.500
with the other Interface Builder
documents where we've designed their views.

00:59:29.500 --> 00:59:33.570
But we also saw that especially in
the case of our table view example,

00:59:33.570 --> 00:59:38.600
we would want to dynamically create these View
Controllers in response to the user's actions.

00:59:38.599 --> 00:59:46.710
For more information, please contact Michael Jurewitz
our Developer Tools Evangelist and there's plenty

00:59:46.710 --> 00:59:51.230
of great documentation on all the subjects
that we've covered here today, in particular,

00:59:51.230 --> 00:59:55.309
the Human Interface Guidelines and
the Interface Builder User Guide.