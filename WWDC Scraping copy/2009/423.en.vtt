WEBVTT

00:00:13.050 --> 00:00:14.880
>> Good morning.

00:00:14.880 --> 00:00:17.359
Welcome to session 423.

00:00:17.359 --> 00:00:24.449
I'm Anders Bertelrud, the Xcode architect and I want
to introduce you to the iPhone developer tools today

00:00:24.449 --> 00:00:31.730
and Michael Jurewitz who is the Developer Tools
Evangelist who will be joining a little bit later on.

00:00:31.730 --> 00:00:42.019
So Michael and I want to show you the developer tools and
as you've seen yesterday in Scott Forstall's presentation,

00:00:42.020 --> 00:00:47.180
there are over 50,000 applicatPions on the iPhone Developer--

00:00:47.179 --> 00:00:52.219
iPhone App Store at this point and all of them have
been developed using Apple's developer tool suite.

00:00:52.219 --> 00:00:59.100
This is also the same tools suite that we used
to develop the iPhone OS itself and as well

00:00:59.100 --> 00:01:03.590
as the Mac OS X Snow Leopard and previous Mac OS X releases.

00:01:03.590 --> 00:01:09.840
So we're hoping that when you see what we have to offer
here with the tools and how easy it is to get started

00:01:09.840 --> 00:01:15.790
with iPhone development, you'll be inspired
to add your own app to those 50,000.

00:01:15.790 --> 00:01:22.190
So, we'll be talking about Mac OS X and the iPhone 3.0 SDK.

00:01:22.189 --> 00:01:24.129
This session we focus on the iPhone SDK.

00:01:24.129 --> 00:01:28.729
In the keynote and in other presentations,
you've seen reference to both

00:01:28.730 --> 00:01:31.840
of these, Snow Leopard and the iPhone 3.0 SDK.

00:01:31.840 --> 00:01:37.270
One of the cool things about Apple's developer tools is
instead of having two separate tool chains for the device

00:01:37.269 --> 00:01:45.250
versus the Mac even though both are fairly different
devices, we actually have one set of tools, that's one IDE,

00:01:45.250 --> 00:01:51.989
one interface creation tool, one set of performance
tools and the reason we have two releases in this case is

00:01:51.989 --> 00:01:56.310
that there is one shipping release,
that's the SDK, iPhone SDK, the 3.0,

00:01:56.310 --> 00:01:59.829
and then there is a prerelease of Snow Leopard.

00:01:59.829 --> 00:02:02.859
So it's not two separate development environments.

00:02:02.859 --> 00:02:05.890
It's actually just two versions
of one development environment

00:02:05.890 --> 00:02:12.500
and we'll be showing the Snow Leopard developer tools today
which will be giving you a taste of some of the things

00:02:12.500 --> 00:02:18.090
to come when Xcode 3.2 is released
together with Snow Leopard later this year.

00:02:18.090 --> 00:02:23.640
What we're going to be showing applies
to both versions of the developer tools

00:02:23.639 --> 00:02:29.389
When you ship your app, it's really important that you
use the released version, the GM version of the tools

00:02:29.389 --> 00:02:33.619
to build your final version of your app
and that's currently the iPhone SDK.

00:02:33.620 --> 00:02:39.500
So at the conference here, there are two
separate releases but there is one suite of tools

00:02:39.500 --> 00:02:41.389
and there are two different versions going on.

00:02:41.389 --> 00:02:46.389
So with that out of the way, let's go
ahead and move on to iPhone development.

00:02:46.389 --> 00:02:49.409
So, we're going to talk about four major tools today.

00:02:49.409 --> 00:02:53.280
The first one of course, Xcode, you've
seen at least some of all of these tools

00:02:53.280 --> 00:02:56.699
in the keynote and in some of the sessions yesterday.

00:02:56.699 --> 00:03:01.709
Xcode is Apple's integrated development
environment for Mac OS X and iPhone development

00:03:01.710 --> 00:03:07.530
and it has obviously project management, source code
editor, built system and also some of the new tools

00:03:07.530 --> 00:03:14.469
like static analysis that you saw coming
in the Snow Leopard version of Xcode.

00:03:14.469 --> 00:03:23.610
Interface Builder is Apple's interface creation and
implementation-- prototyping and implementation tool.

00:03:23.610 --> 00:03:26.960
So you can spec out your UI there and see
if it's going to look right and work--

00:03:26.960 --> 00:03:29.980
and it works again for both Mac OS X and iPhone.

00:03:29.979 --> 00:03:35.449
Different plugins for sure that show you
different windows and different widgets obviously

00:03:35.449 --> 00:03:39.060
because the UIs are different but it's the same core tool.

00:03:39.060 --> 00:03:48.150
Now, Instruments is Apple's performance analysis tool
and it also lets you find memory allocation issues,

00:03:48.150 --> 00:03:53.069
lets you see where your code is spending time,
look at file access patterns and all those things

00:03:53.069 --> 00:04:01.039
and Michael will be demoing that later on but it's
a really quite a powerful tool and very flexible,

00:04:01.039 --> 00:04:04.979
works with Mac OS X, with the iPhone
Simulator and with the iPhone however.

00:04:04.979 --> 00:04:14.289
And the iPhone Simulator, this is a software
implementation on the Mac side of the iPhone APIs.

00:04:14.289 --> 00:04:19.920
It is not a hardware emulator as we'll
talk about a little bit later but it is--

00:04:19.920 --> 00:04:25.560
it provides the same APIs on the Mac desktop within
a little window as what you would have on the device

00:04:25.560 --> 00:04:29.329
and this can really help speed up the turnaround time.

00:04:29.329 --> 00:04:34.129
So, rather than just talking about
Xcode, I want to show it to you.

00:04:34.129 --> 00:04:39.860
Actually before I do that, I want to say one thing about
Xcode again and just in case this isn't clear enough,

00:04:39.860 --> 00:04:48.069
Xcode is our IDE for Mac OS X apps, plugins, for
UNIX command line development and for all kinds

00:04:48.069 --> 00:04:53.529
of open source development and it's actually, even though
the iPhone SDK has only been available to the public

00:04:53.529 --> 00:04:55.939
for less than a year now I think, Scott Forstall said.

00:04:55.939 --> 00:05:05.490
The Xcode IDE itself is many years older at this point
and so it's a mature, stable, rich, feature-rich IDE.

00:05:05.490 --> 00:05:11.569
And the new thing of course, what we're
here for, Xcode lets you create iPhone apps.

00:05:11.569 --> 00:05:13.860
With that, I'd like to show it to you.

00:05:13.860 --> 00:05:21.270
You probably all know where it is but for anybody who
hasn't used it before, the Xcode application lives

00:05:21.269 --> 00:05:25.919
under the development folder at the top of
my hard drive here under the applications

00:05:25.920 --> 00:05:30.189
and let's switch this to a slightly bigger view, Xcode.

00:05:30.189 --> 00:05:32.160
So I've launched Xcode.

00:05:32.160 --> 00:05:35.830
I'm just going to go ahead and hide finder here.

00:05:35.829 --> 00:05:40.459
So this welcome panel is new in Xcode
3.2, that's the version that comes

00:05:40.459 --> 00:05:42.959
with Snow Leopard and is pre-released currently.

00:05:42.959 --> 00:05:47.389
There is a welcome screen also in the 3.1
so it may look slightly different depending

00:05:47.389 --> 00:05:49.569
on whether you run Xcode 3.1 or 3.2.

00:05:49.569 --> 00:05:55.120
In 3.2, we've greatly improved this panel and
you have access to Apple development connection,

00:05:55.120 --> 00:06:00.120
various ways to really dive into iPhone
development or you can simply create a new project.

00:06:00.120 --> 00:06:04.449
You can also access your recent projects
here which can save you quite a bit of time.

00:06:04.449 --> 00:06:10.620
I'm going to go ahead and create a new project and we
see here that Xcode comes with a lot of iPhone app,

00:06:10.620 --> 00:06:14.540
types of iPhone apps already as templates.

00:06:14.540 --> 00:06:22.230
So for example, if I want to create a navigation based
application that has these scroll lists that slide back

00:06:22.230 --> 00:06:24.930
and forth, I will start with this template.

00:06:24.930 --> 00:06:28.449
Open GLS application, that's great if you
just want to take over the whole screen

00:06:28.449 --> 00:06:31.039
and do your own rendering like for a full screen game.

00:06:31.040 --> 00:06:37.340
Tab bars like the iTunes so the music
application and there are various others.

00:06:37.339 --> 00:06:43.069
For some of these applications, you'll
see that there's actually an option now.

00:06:43.069 --> 00:06:45.969
This is new in the iPhone 3.0 SDK.

00:06:45.970 --> 00:06:49.980
You can actually use Core Data on the iPhone
now and that was a much requested feature.

00:06:49.980 --> 00:06:55.340
One of the things I want to say about the
templates is they provide you with a starting point.

00:06:55.339 --> 00:06:57.739
Depending on what kind of apps you want to start with here,

00:06:57.740 --> 00:07:01.579
you get a ready to run application
that you can start customizing.

00:07:01.579 --> 00:07:07.359
This doesn't-- the choice in this panel doesn't lock
you in, it just gives you the default starting points.

00:07:07.360 --> 00:07:11.660
You could start with one of these and turn it into
one of the others or do something else entirely

00:07:11.660 --> 00:07:16.689
but this is a really good way to
dive into starting to work with it.

00:07:16.689 --> 00:07:22.189
So I'm going to ahead and create an app.

00:07:22.189 --> 00:07:23.750
Oh let's see here.

00:07:23.750 --> 00:07:29.949
Let me go ahead and hit Choose and
it will ask me to name my project.

00:07:29.949 --> 00:07:36.379
I'm just going to call it Demo App and I'm
going to ahead and put it on the desktop.

00:07:36.379 --> 00:07:43.990
So we see here is Xcode's main window and I
just want to give you a brief tour to this

00:07:43.990 --> 00:07:46.060
for those of you who haven't seen it before.

00:07:46.060 --> 00:07:49.800
On the left here, we have the contents of your project.

00:07:49.800 --> 00:07:53.050
This is a fairly standard type of IDE concept, right.

00:07:53.050 --> 00:07:56.939
We have our source code in here, other resources.

00:07:56.939 --> 00:08:04.800
In this case, those are Interface Builder files so these
icons here, probably a bit too small for you to see

00:08:04.800 --> 00:08:09.990
but they're actually user interface definition files
and Michael will show you that a little bit later.

00:08:09.990 --> 00:08:13.490
We also have links to the frameworks
to link against, et cetera.

00:08:13.490 --> 00:08:19.199
In this case, that's a UIKit which is the
user interface framework on the iPhone.

00:08:19.199 --> 00:08:25.279
Under targets down here we see the
instructions for how to actually--

00:08:25.279 --> 00:08:31.449
how Xcode should build something from your source
files, in this case we just have the Demo App.

00:08:31.449 --> 00:08:37.319
We also have-- like in iTunes, we have a bunch of
smart groups down here that will show you files

00:08:37.320 --> 00:08:42.890
with a certain characteristics like if I just want to
look at my Interface Builder files, I'll select this here.

00:08:42.889 --> 00:08:45.110
Looks like my mouse is dying on me.

00:08:45.110 --> 00:08:45.800
Here we go.

00:08:45.799 --> 00:08:47.099
It's one of these battery operated ones.

00:08:47.100 --> 00:08:51.360
So in this case, we just see the interface files.

00:08:51.360 --> 00:08:55.690
I can also look at project symbols and
here I get a list of all the symbols.

00:08:55.690 --> 00:09:00.120
So that brings me to this view
right here-- sorry, right here.

00:09:00.120 --> 00:09:03.210
This is kind of like the list of the songs in iTunes.

00:09:03.210 --> 00:09:07.519
It shows you the aggregate of all the
things that are selected on the left.

00:09:07.519 --> 00:09:14.110
So this will show me in this case all the symbols and of
course if I select just the classes up on the left here,

00:09:14.110 --> 00:09:17.360
on the left side, I see just the classes.

00:09:17.360 --> 00:09:26.289
Now down here, we have the source code editor, full-featured
standard editor with syntax coloring of course and things

00:09:26.289 --> 00:09:29.939
like code sense which lets you
automatically complete against your symbols.

00:09:29.940 --> 00:09:34.170
We also have very tight integration with
documentation and they'll show you this

00:09:34.169 --> 00:09:37.409
in another session that follows this one, not in this room.

00:09:37.409 --> 00:09:43.850
We'll give a reference at the end of the talk
here that goes more into detail about Xcode.

00:09:43.850 --> 00:09:46.110
So that's mostly what I wanted to show you today.

00:09:46.110 --> 00:09:49.850
I wanted to say actually also about the
popup menu here, the overview popup.

00:09:49.850 --> 00:09:52.330
That's very important when we do phone development.

00:09:52.330 --> 00:09:57.800
We've actually made it really easy to switch between
development for the device and for the simulator

00:09:57.799 --> 00:10:05.319
and if you had let's say a foundation only framework
that actually go for both the Mac and the phone

00:10:05.320 --> 00:10:11.060
and the simulator, you would use this popup here to switch
between the ones you want to build it for right now.

00:10:11.059 --> 00:10:13.849
So as you could see here, I can switch to simulator device.

00:10:13.850 --> 00:10:16.500
>> I'm going to switch to simulator right now.

00:10:16.500 --> 00:10:19.259
You can also choose to say debug versus release.

00:10:19.259 --> 00:10:27.269
These are called built configurations and they're simply
sets of option for which your product should be built.

00:10:27.269 --> 00:10:31.559
So, you can for example turn on
optimization, turn off optimization,

00:10:31.559 --> 00:10:33.849
set certain custom flags, those of kinds of things.

00:10:33.850 --> 00:10:37.350
So those options are called build settings.

00:10:37.350 --> 00:10:38.540
You can edit those.

00:10:38.539 --> 00:10:41.939
Under the Project menu here, we see Edit Active Target.

00:10:41.940 --> 00:10:46.650
We'll talk about this in detail in another
session that goes more into Xcode itself.

00:10:46.649 --> 00:10:49.230
We're going to talk about all the tools in this session.

00:10:49.230 --> 00:10:52.470
And so the configuration just switches between those.

00:10:52.470 --> 00:10:59.090
I'm just going to go ahead and build a run at this point
and then just see that it comes up in the simulator.

00:10:59.090 --> 00:11:05.259
So, you've probably seen the simulator before but
this is what you get by default from the template.

00:11:05.259 --> 00:11:09.899
You get an app that is content-free but
it does have the structure that you chose

00:11:09.899 --> 00:11:12.860
and you can now go ahead and start customizing it.

00:11:12.860 --> 00:11:17.279
So some of the definitions, I used a lot of words
here you know, projects and targets and whatnot.

00:11:17.279 --> 00:11:26.919
So, one of the basic concepts of course in any IDE is files
and in Xcode your files live on disks as separate files.

00:11:26.919 --> 00:11:34.199
This isn't some kind of source code database so you have
access to them at any time but we do keep references to them

00:11:34.200 --> 00:11:40.030
and you put source code images even to-do
lists and notes and that kind of stuff.

00:11:40.029 --> 00:11:43.939
Targets, in Xcode these are the instructions.

00:11:43.940 --> 00:11:51.130
If you think of the files as parts like in a, let's say
an airplane model kit, those will be the parts, right.

00:11:51.129 --> 00:11:53.200
And the instructions are the targets.

00:11:53.200 --> 00:11:59.210
That's what says-- what tells Xcode what to do with
your files in order to build your particular product.

00:11:59.210 --> 00:12:01.470
And projects are a higher level grouping.

00:12:01.470 --> 00:12:07.730
Now typically for an iPhone app you'll only have one target
for the project because typically you just ship that app.

00:12:07.730 --> 00:12:12.700
If you have a Mac OS X application, you may
have a dozen frameworks and maybe 50 pluginsstPylX

00:12:12.700 --> 00:12:17.050
and then one application, one DOC
bundle, that kind of stuff.

00:12:17.049 --> 00:12:20.639
Again, further sessions will go more
into detail about this but I wanted

00:12:20.639 --> 00:12:25.500
to explain these concepts a little bit here just
so-- if you're not familiar with these terms.

00:12:25.500 --> 00:12:28.759
Build settings also fairly obvious perhaps.

00:12:28.759 --> 00:12:32.689
These are simply the options that
control how you're product is built.

00:12:32.690 --> 00:12:36.820
This could be optimization on or off,
obviously, but also which compiler to use.

00:12:36.820 --> 00:12:40.210
If you've watched the Developer
Tools State of the Union last--

00:12:40.210 --> 00:12:44.720
yesterday, you saw that this is place
where we can choose the compiler to use.

00:12:44.720 --> 00:12:49.820
Now for now, the GCC compiler is the
one to use for iPhone development.

00:12:49.820 --> 00:12:52.080
Clang is only available currently for the Mac.

00:12:52.080 --> 00:12:58.090
So, you typically don't need to touch a
lot of the options for iPhone development.

00:12:58.090 --> 00:13:01.080
I should point out, values can be
defined in terms of other settings there.

00:13:01.080 --> 00:13:06.590
Again, there is much more detail in further
sessions today and later on in the week.

00:13:06.590 --> 00:13:13.259
And build configurations are just groups of settings that
you've given a convenient name like debug or release.

00:13:13.259 --> 00:13:17.590
We've provided many of them for you,
also things like simulator versus device.

00:13:17.590 --> 00:13:20.530
Those are things that come ready to use out of the box.

00:13:20.529 --> 00:13:24.049
You probably won't have to modify but
the power is there and the flexibility

00:13:24.049 --> 00:13:27.219
if you want to get into that a little bit later on.

00:13:27.220 --> 00:13:31.899
So, what does Xcode do with all this?

00:13:31.899 --> 00:13:38.569
Well, you have your project, you got your files
in that project, maybe some interface files.

00:13:38.570 --> 00:13:44.060
The targets, in this case three, but typically
for an iPhone app there might be one or two.

00:13:44.059 --> 00:13:48.469
The targets take those files, produce your iPhone app

00:13:48.470 --> 00:13:54.050
and the options give you the control
of exactly how that happens.

00:13:54.049 --> 00:14:00.929
Very brief introduction of Xcode 'cause a lot of the fun
comes in some of the other tools, not that Xcode isn't fun.

00:14:00.929 --> 00:14:04.269
To talk about some of the other tools,
I want to ask Michael Jurewitz to come

00:14:04.269 --> 00:14:07.220
on stage and to talk about Interface Builder.

00:14:07.220 --> 00:14:09.389
Thank you, Michael.

00:14:09.389 --> 00:14:11.000
>> Thank you Anders.

00:14:11.000 --> 00:14:12.559
All right, good morning everyone.

00:14:12.559 --> 00:14:15.309
Now let's talk about some of these fun tools here,

00:14:15.309 --> 00:14:19.239
so Interface Builder being the first
one that to want to try to focus on.

00:14:19.240 --> 00:14:26.889
So Interface Builder is your premiere application on both
Mac OS X and for iPhone development for graphically laying

00:14:26.889 --> 00:14:31.689
out your interfaces and being able to take that
interface once you've actually put those elements

00:14:31.690 --> 00:14:34.250
in there and connect them directly to your code.

00:14:34.250 --> 00:14:38.659
So that you know that as a user begins to interact
with the buttons that you might have in your interface

00:14:38.659 --> 00:14:43.319
or the navigation controller that you've got
that it's going to be calling through directly

00:14:43.320 --> 00:14:45.400
to the code that you've written in your project.

00:14:45.399 --> 00:14:50.819
So Interface Builder, one of the great things
is that it lets you start off with the concept

00:14:50.820 --> 00:14:53.050
of what you'd like your interface to look like.

00:14:53.049 --> 00:14:58.019
Say, if you're working with a designer for example to
figure out what is it that you really want to actualize

00:14:58.019 --> 00:15:00.639
in your app, what do you want to bring to your users.

00:15:00.639 --> 00:15:06.990
And then because you can graphically lay out your
interface in Interface Builder with these basic controls

00:15:06.990 --> 00:15:13.509
that are provided by UIKit, you can go ahead and transition
from something like this, to having it well stubbed

00:15:13.509 --> 00:15:18.700
out in Interface Builder and understanding how you're going
to be doing your work, everything from native controls

00:15:18.700 --> 00:15:25.280
like the search bar and the various elements in the
toolbar to even including things like the map view

00:15:25.279 --> 00:15:27.909
that you've seen over the past couple of days.

00:15:27.909 --> 00:15:34.449
And again, once you've actually designed this, you can
take this interface and make sure that you connect it

00:15:34.450 --> 00:15:40.080
to your code so as your user begins to interact
with it, you know exactly what's going to happen,

00:15:40.080 --> 00:15:43.129
you know how the flow is going to work in your application.

00:15:43.129 --> 00:15:51.439
And probably the most important and I think valuable part
of using Interface Builder is that it's not code generation.

00:15:51.440 --> 00:15:53.320
It's really important to know this.

00:15:53.320 --> 00:15:57.970
Although you're dragging these interfaces out and you're
setting these, all of these elements in your interface

00:15:57.970 --> 00:16:01.649
to look just the way that you want and
configuring them and connecting them to code,

00:16:01.649 --> 00:16:05.819
Interface Builder is not busy writing
code under the covers for you.

00:16:05.820 --> 00:16:10.540
You're actually as you're designing your interface, dragging
out the real objects that are going to be getting loaded

00:16:10.539 --> 00:16:14.000
into your application at runtime and used.

00:16:14.000 --> 00:16:19.440
And all the Interface Builder is doing is providing you
a convenient way to customize those objects and to work

00:16:19.440 --> 00:16:22.610
with them to make sure that they look
and behave the way that you want.

00:16:22.610 --> 00:16:28.080
So you don't need to worry about having a button and
suddenly needing to double-click on it to you know,

00:16:28.080 --> 00:16:31.040
subclass it and do some sort of crazy work with it.

00:16:31.039 --> 00:16:36.969
You've got a much more intuitive way of dealing with
things and you don't have to deal with the innards

00:16:36.970 --> 00:16:41.940
of the UIKit classes and let's
say that's what you want to do.

00:16:41.940 --> 00:16:48.460
And one of the great things of course is when you're not
writing code, you don't end up having to go through a bunch

00:16:48.460 --> 00:16:55.019
of variations to try to figure out just how to precisely
place that control as you want in your interface.

00:16:55.019 --> 00:17:01.759
With Interface Builder, you simply drag an object
from the library, place it in your interface,

00:17:01.759 --> 00:17:05.049
it gives you guides to show you where things go.

00:17:05.049 --> 00:17:10.829
You can go to the library and find the elements that you
want and again, drag them out and know that you put them

00:17:10.829 --> 00:17:14.319
in the correct place the first time which is really great.

00:17:14.319 --> 00:17:19.289
You want to design once, you want to get that out
of the way and you want to focus back on your code

00:17:19.289 --> 00:17:23.599
on getting your real job done and
Interface Builder lets you do that.

00:17:23.599 --> 00:17:28.939
Now we're going to be building a little sample application
today that looks like this, just a really basic web browser,

00:17:28.940 --> 00:17:33.009
we got three buttons, we're going to go to various websites.

00:17:33.009 --> 00:17:37.990
You've noticed we've got a Back button, we've
Back and Forward so we can navigate around.

00:17:37.990 --> 00:17:44.079
We're able to double-tap to zoom in, very simple,
very straightforward and I'm going to show you how

00:17:44.079 --> 00:17:46.919
to build this application in about 15 minutes.

00:17:46.920 --> 00:17:49.840
It's about all it takes, very quick.

00:17:49.839 --> 00:17:56.709
Now before we get started though, let's talk about two key
concepts in UIKit that it is going to be good for you guys

00:17:56.710 --> 00:17:59.069
to have some familiarity with before we get started.

00:17:59.069 --> 00:18:03.569
So the first are ViewControllers, UIViewControllers.

00:18:03.569 --> 00:18:11.569
Now in UIKitViewController, you can think of its basic task
in life is to maintain a connection to some view object

00:18:11.569 --> 00:18:16.509
and that view object is going to be-- what that
ViewController's sort of sole purpose in life is to work

00:18:16.509 --> 00:18:21.079
with it, it wants to make sure that
it gets that view onto the screen.

00:18:21.079 --> 00:18:26.730
And similarly when that view has actions that
it wants to do, say like a button being pressed,

00:18:26.730 --> 00:18:31.339
it's typically going to send those actions back to
that ViewController and your ViewController is sort

00:18:31.339 --> 00:18:37.009
of your control-- youre controller level entry to the rest
of your applications so it can mediate that interaction

00:18:37.009 --> 00:18:42.759
between the user with that view and the rest of your app.

00:18:42.759 --> 00:18:47.569
And as we begin to work with our application here, you
notice when I-- when we pushed one of those buttons in that,

00:18:47.569 --> 00:18:50.799
in our demo app, we had an interface slide over.

00:18:50.799 --> 00:18:53.889
So we're making use of a NavigationController with that

00:18:53.890 --> 00:19:00.410
and what NavigationControllers do is basically
just maintain a stack of ViewControllers.

00:19:00.410 --> 00:19:06.880
So as you push that button, we load up a second
ViewController with its view and it gets put on top

00:19:06.880 --> 00:19:09.720
and that causes that slide in effect to happen.

00:19:09.720 --> 00:19:15.240
When you hit that, you can say if you click to some more
detail, you have another ViewController get put on the stack

00:19:15.240 --> 00:19:21.230
and as you hit that Back button, that the topmost
View Controller would get popped off the stack

00:19:21.230 --> 00:19:24.809
and you'd be back at the second view for example.

00:19:24.809 --> 00:19:25.579
So let's go ahead.

00:19:25.579 --> 00:19:29.470
Let's just go straight to demo and let's
start working with Interface Builders.

00:19:29.470 --> 00:19:34.200
You can see exactly how this works for your development.

00:19:34.200 --> 00:19:44.240
OK. So I'm going to go ahead, I'm going to bring up Xcode
here, and I'm going to ahead and just create a new project

00:19:44.240 --> 00:19:47.490
and we're just going to do a navigation-based
example just like we had before.

00:19:47.490 --> 00:19:57.839
In my case, I'm just going to call this Demo
and cancel here, so we have one, how about that.

00:19:57.839 --> 00:20:05.250
Tell you what, we'll just go with
the Demo App that's already up here.

00:20:05.250 --> 00:20:09.029
All right, so we've got our same
basic view that you had before.

00:20:09.029 --> 00:20:12.789
Anders took you through all the various parts of this.

00:20:12.789 --> 00:20:17.680
>> And I'm going to go ahead and you'll notice
that we've got the resources directory here.

00:20:17.680 --> 00:20:19.970
Anders already pointed these out to you earlier.

00:20:19.970 --> 00:20:23.839
And these resources directories, this is
where you're Interface Builder files live.

00:20:23.839 --> 00:20:26.759
They end in .xib, we call them XIB files,

00:20:26.759 --> 00:20:30.720
and they're basically just an XML
representation of your interface itself.

00:20:30.720 --> 00:20:37.110
So I'm going to go ahead and double-click on our
main window.xib and we'll open up Interface Builder.

00:20:37.109 --> 00:20:41.599
Let me go ahead and hide Xcode here just to clear things up.

00:20:41.599 --> 00:20:46.879
And by default when you come in to Interface Builder this
is the kind of view that you're going to be presented with.

00:20:46.880 --> 00:20:50.070
Now on the left-hand side here, we've got your library.

00:20:50.069 --> 00:20:55.519
This is your large collection of various view objects
and controls for you to work with throughout UIKit

00:20:55.519 --> 00:21:01.410
as you layout your interface and design the classes
that you're going to be presenting to the user.

00:21:01.410 --> 00:21:09.890
Below that we've got the Interface Builder Document Window,
and this is where top level objects in your XIB file lives.

00:21:09.890 --> 00:21:14.620
So for example, you see we have the
window for our application lives here.

00:21:14.619 --> 00:21:17.379
We've got the NavigationController which also lives here.

00:21:17.380 --> 00:21:22.520
This is again that control that's going
to handle that sliding interface for us.

00:21:22.519 --> 00:21:25.089
We've got a few other elements up here.

00:21:25.089 --> 00:21:27.419
I'm going to talk about, about two of them specifically.

00:21:27.420 --> 00:21:29.850
So the first is our Demo App Delegate.

00:21:29.849 --> 00:21:35.049
This is just our-- If we go back to Xcode here in a
moment, you'll see a class called Demo App Delegate.

00:21:35.049 --> 00:21:38.710
That happens to be our application
delegate as we begin doing our development

00:21:38.710 --> 00:21:43.289
and if you heard the Objective-C talk yesterday, we talked
about a little bit about delegates and sort of the roll

00:21:43.289 --> 00:21:49.779
that they can play in helping you customize behavior in
your class, in your application as you begin to work.

00:21:49.779 --> 00:21:53.579
Now the important thing here is something called FilesOwner.

00:21:53.579 --> 00:21:59.480
Now FilesOwner you can think of is the
actual class that loaded the NIB file.

00:21:59.480 --> 00:22:03.549
When we look at some other NIB files later
on in this presentation you'll notice

00:22:03.549 --> 00:22:08.779
that they're called things like RootViewController.xib.

00:22:08.779 --> 00:22:10.990
In fact, let me go ahead and just show you that right now.

00:22:10.990 --> 00:22:13.370
We've got our RootViewController.xib.

00:22:13.369 --> 00:22:16.769
We've got also a RootViewController class.

00:22:16.769 --> 00:22:22.490
Well, it's this ViewController that is
responsible for putting that XIB file,

00:22:22.490 --> 00:22:25.819
basically loading its interface
and putting it on the screen.

00:22:25.819 --> 00:22:34.109
And so FilesOwner is basically your way to talk to that
ViewController, that class, whatever it was that happen

00:22:34.109 --> 00:22:38.609
to take that XIB file at runtime
and load it up for yourself.

00:22:38.609 --> 00:22:41.319
So, you'll see some more of these in action in a moment.

00:22:41.319 --> 00:22:43.799
Now the first thing I'm going to do just in the flow

00:22:43.799 --> 00:22:47.740
of the demo here is actually just double-click
directly in this Navigation bar that we've got.

00:22:47.740 --> 00:22:52.250
And I'm going to type in Websites just
to give this a title for our interface.

00:22:52.250 --> 00:22:57.839
I'm going to save that off and we're going to
go back to Xcode to keep doing some work here.

00:22:57.839 --> 00:23:00.549
Now the first thing I'm going to do here is fix

00:23:00.549 --> 00:23:04.649
up our ViewController header file
a little bit, add some code to it.

00:23:04.650 --> 00:23:11.470
And I'm going to go ahead and go to our
implementation file and do the same, save those off.

00:23:11.470 --> 00:23:20.259
And I'm going to open up our RootViewController.xib
and rearrange things here a little bit.

00:23:20.259 --> 00:23:23.890
OK. So the first thing you notice here on our
RootViewController.xib we've got that TableView.

00:23:23.890 --> 00:23:31.150
Remember when Anders did his demo we had a blank TableView
just for us to go ahead and scroll into our interface.

00:23:31.150 --> 00:23:34.650
But we don't plan on working with a
TableView here so we're actually going

00:23:34.650 --> 00:23:37.259
to go ahead and just select this and delete it.

00:23:37.259 --> 00:23:45.319
And I'm going to use the library to search for
a UIView, so just your basic ViewClass in UIKit.

00:23:45.319 --> 00:23:50.869
And I can grab this view and drag it directly
to our document window, double-click.

00:23:50.869 --> 00:23:56.829
And now I've got a design surface to begin
working with as I start laying out my application.

00:23:56.829 --> 00:24:01.309
Now, one of the first things you can do
over here on the right, in the Inspector,

00:24:01.309 --> 00:24:06.940
is to begin to set up the visual attributes of your view, to
begin understanding sort of the space you have to work with

00:24:06.940 --> 00:24:10.100
and how youre application is going
to look in the first place.

00:24:10.099 --> 00:24:14.139
So for instance, I know that my application is going
to have a status bar, so I'm going to want to go ahead

00:24:14.140 --> 00:24:19.000
and change these simulated interface elements to put one in.

00:24:19.000 --> 00:24:23.599
And all this does for me is to have Interface Builder
basically take up the appropriate portion of the screen

00:24:23.599 --> 00:24:26.909
that that would occupy in my real app and draw it in there.

00:24:26.910 --> 00:24:32.670
Just so I know what real spacing I have to work with,
what the real constraints are in terms of the size.

00:24:32.670 --> 00:24:36.970
Now we also know that we are working with a
navigation-based application and so our top bar we want

00:24:36.970 --> 00:24:39.850
to make sure is styled like a navigation bar.

00:24:39.849 --> 00:24:43.529
Again, just purely so we can make
sure that everything is in place.

00:24:43.529 --> 00:24:51.980
OK, so we've got that looking the way we want to, now we had
that sort of wood grained image to the back of everything,

00:24:51.980 --> 00:24:55.150
so I'm going to go ahead and search for UIImage.

00:24:55.150 --> 00:24:59.440
I could also just search for image if I
wanted and Interface Builder knows enough

00:24:59.440 --> 00:25:02.350
so you don't need to know the class name specifically.

00:25:02.349 --> 00:25:08.559
And if I drag this ImageView out here, you notice
it resizes automatically to the size of that space,

00:25:08.559 --> 00:25:12.289
so I can just drop it in and be--
just keep on going with my life.

00:25:12.289 --> 00:25:17.700
Interface Builder is always trying to help you out with
very simple sort of task that it can expect like that.

00:25:17.700 --> 00:25:20.740
OK, so we've got our ImageView there.

00:25:20.740 --> 00:25:25.279
We'll be hooking that up in codes so
we'll just leave that be for a moment.

00:25:25.279 --> 00:25:29.819
Now I also had three buttons in my interface, so
let's go ahead and let's just search for button.

00:25:29.819 --> 00:25:35.720
And I'm going to go grab this round rect
button here, pull this out, here we go.

00:25:35.720 --> 00:25:38.410
I'm going to go ahead and resize it.

00:25:38.410 --> 00:25:42.490
You notice Interface Builder is already giving
some basic information in terms of sizing

00:25:42.490 --> 00:25:46.420
in the left-hand corner right there, so I
get this to be more or less of what I want.

00:25:46.420 --> 00:25:49.670
And as I begin dragging this button around
you notice I get these style guides here.

00:25:49.670 --> 00:25:54.880
Interface Builder is trying to key me in to, you
know, basically just key points in my interface.

00:25:54.880 --> 00:25:59.570
And as I come up against elements both
from the top, the left and the right here,

00:25:59.569 --> 00:26:05.139
this is Interface Builder actually helping to show
you what the human interface guidelines actually say

00:26:05.140 --> 00:26:10.170
about what the spacing should be between elements on screen.

00:26:10.170 --> 00:26:13.990
So again, like really helping you to be productive
and make sure that your applications look their best.

00:26:13.990 --> 00:26:18.400
And I just double-clicked here and I'm going
to go ahead and give this thing a title

00:26:18.400 --> 00:26:20.420
so we're going to call this New York Times.

00:26:20.420 --> 00:26:30.490
And I can go ahead and select this button and Copy and
Paste just to get a new one, make sure that stays lined up.

00:26:30.490 --> 00:26:36.130
And I'm going to name this one CNN, paste again.

00:26:36.130 --> 00:26:37.450
Oops, got the wrong one there.

00:26:37.450 --> 00:26:37.930
That's OK.

00:26:37.930 --> 00:26:39.560
It makes it easy to place it back.

00:26:39.559 --> 00:26:45.950
And I'm going to go ahead and call
this one down here Mercury News.

00:26:45.950 --> 00:26:54.470
Okay, so all three of these buttons are placed
but they need to actually do something, right.

00:26:54.470 --> 00:26:58.390
We need a user to be able to press them
and have something happen in our interface.

00:26:58.390 --> 00:27:08.480
So in Interface Builder, the way that you basically capture
that sort of action is by holding down control and dragging

00:27:08.480 --> 00:27:15.180
from the element that's taking the user input, say
the button in this case, to the item that we want

00:27:15.180 --> 00:27:20.580
to actually connect it to, in this case it's
our FilesOwner which is our RootViewController.

00:27:20.579 --> 00:27:25.759
And when I let go you'll notice that
I've got these three events that pop up.

00:27:25.759 --> 00:27:29.809
We've got Show CNN, Show Mercury News, Show New York Times.

00:27:29.809 --> 00:27:35.889
So I'm going to go ahead and hook up the
show New York Times method right here,

00:27:35.890 --> 00:27:40.940
and now when that button gets pressed it's going to
call that method in our RootViewController class.

00:27:40.940 --> 00:27:50.230
I'm going to go fix up the rest of these right
here, Show CNN, and Show Mercury News, and hit Save.

00:27:50.230 --> 00:27:54.140
Now how did Interface Builder know that
it should do this in the first place?

00:27:54.140 --> 00:27:57.400
Well let's go back and take a look at the code that we have.

00:27:57.400 --> 00:28:01.650
And in our RootViewController header you'll notice

00:28:01.650 --> 00:28:06.830
that I've got three methods defined here
that have a return type of IBAction.

00:28:06.829 --> 00:28:09.439
So IBAction is just, is just void.

00:28:09.440 --> 00:28:11.830
You can just think of it as the same thing as void.

00:28:11.829 --> 00:28:17.929
And all this does is tell Interface Builder as it's staying
in sync with Xcode, hey these are methods that I'm going

00:28:17.930 --> 00:28:21.440
to want to be available to me when
I'm working with my interface.

00:28:21.440 --> 00:28:25.630
So please make sure that, say when you do that
gesture that Control + Drag from the button

00:28:25.630 --> 00:28:29.290
to the controller but those things get hooked up.

00:28:29.289 --> 00:28:30.399
So that's pretty simple.

00:28:30.400 --> 00:28:37.190
You notice they all take a single parameter and to type
ID, so it's any object type, and we just call it Sender.

00:28:37.190 --> 00:28:41.660
In this case this is the actual
interface element that sent that method.

00:28:41.660 --> 00:28:47.220
So a lot of times you'll have controls where you might
want to turn right back around and ask the sender hey,

00:28:47.220 --> 00:28:52.990
what's your state, are you on, are you off,
you know, what did the user just do exactly.

00:28:52.990 --> 00:28:56.920
For a button, in this case, it's always
just going to be that the user clicked.

00:28:56.920 --> 00:29:01.940
But there's other interface elements where being
able to call back out can be very, very important.

00:29:01.940 --> 00:29:11.400
So now you'll also notice up here we've got this-- our
UIImageView declaration and it begins with IBOutlet.

00:29:11.400 --> 00:29:19.480
So what an IBOutlet let's you do when you adorn
it on an instance variable like this is be able

00:29:19.480 --> 00:29:21.970
to say all right well I'm declaring this instance variable.

00:29:21.970 --> 00:29:30.299
And what I really want to happen is when this class
is loaded and it loads up this interface file,

00:29:30.299 --> 00:29:38.500
I want to make sure that this instance variable
is connected to that ImageView in my interface.

00:29:38.500 --> 00:29:44.289
And this will automatically be done for you
if when we go back to Interface Builder,

00:29:44.289 --> 00:29:53.019
when we Control + Drag from FilesOwner to
our ImageView, we set that ImageView outlet.

00:29:53.019 --> 00:29:57.170
And now when that NIB file gets loaded, that instance
variable will get set for us, and we can go ahead

00:29:57.170 --> 00:30:00.529
and we can do things like set the
content for that ImageView and say hey,

00:30:00.529 --> 00:30:04.529
I want you to use this wood grain image for example.

00:30:04.529 --> 00:30:09.359
Now since we changed the view that we want
the ViewController to actually display,

00:30:09.359 --> 00:30:14.539
I need to make sure I Control + Drag from FilesOwner
to that view and hook up that outlet as well.

00:30:14.539 --> 00:30:17.950
>> Remember we had deleted that TableView.

00:30:17.950 --> 00:30:22.720
Okay, so we've got our three buttons, we've
got connections going down to our application,

00:30:22.720 --> 00:30:29.559
we've got connections going back out to the actual interface
itself, but we still need to have that WebView, right.

00:30:29.559 --> 00:30:33.210
We still want to show this web-based
content to the user in the first place.

00:30:33.210 --> 00:30:40.860
So we're going to back to Xcode here and I'm going to go
ahead and create a new file and we'll call this new file--

00:30:40.859 --> 00:30:44.049
first of all, we want this new file
to be another ViewController, right,

00:30:44.049 --> 00:30:50.730
'cause we want to push another ViewController on top of
the stack that's being managed by the NavigationController.

00:30:50.730 --> 00:30:56.990
And Xcode is kind enough to actually offer to create the
interface file for this ViewController for me as well,

00:30:56.990 --> 00:31:03.410
so make sure that option is selected and I'm going to
hit Next, and I'm going to call this myWebViewController

00:31:03.410 --> 00:31:11.690
And we'll go ahead and hit Finish and this
will add this directly to our project.

00:31:11.690 --> 00:31:18.920
And then just for organizational purposes here, I'm going
to drag this XIB file down to our resources directory.

00:31:18.920 --> 00:31:21.090
Okay, so what's happening in our ViewController?

00:31:21.089 --> 00:31:23.709
Well, nothing terribly interesting at the moment.

00:31:23.710 --> 00:31:33.370
So let's go ahead and let's change that, add in some
code here, same thing in our implementation file,

00:31:33.369 --> 00:31:37.029
save both of these and then let's
start designing an interface.

00:31:37.029 --> 00:31:39.559
So we'll double click on myWebViewController.

00:31:39.559 --> 00:31:44.599
I'm going to close our WebViewController
down just so we can focus on this.

00:31:44.599 --> 00:31:47.919
And again, we've got this blank
slate, this blank view to work with.

00:31:47.920 --> 00:31:51.720
So really quickly, I'm just going to make sure, we've
already got the status bar, but I'm going to make sure I put

00:31:51.720 --> 00:31:56.870
that top bar in there, and let's
start designing our WebView.

00:31:56.869 --> 00:32:01.159
So the first thing we want to do here,
you notice we had a toolbar at the bottom

00:32:01.160 --> 00:32:03.560
of our WebView so the user can go back and forward.

00:32:03.559 --> 00:32:09.119
So I'm going to go ahead and search in the library
for toolbar, and I'll spell it right this time.

00:32:09.119 --> 00:32:15.559
And if I just click and drag this out, you notice
Interface Builder shows us exactly what that element is,

00:32:15.559 --> 00:32:19.710
and we can place it precisely where
we want in our interface.

00:32:19.710 --> 00:32:23.100
We've got a single button right
here we can work with called Item.

00:32:23.099 --> 00:32:24.019
It's somewhat interesting.

00:32:24.019 --> 00:32:27.440
Let's go ahead and I'm going to select it, hold down Option,

00:32:27.440 --> 00:32:32.049
just click and drag to duplicate it,
and we'll use some ASCII art here.

00:32:32.049 --> 00:32:35.490
We'll make this one Back and this one Forward.

00:32:35.490 --> 00:32:40.220
But it's kind of lame to have them
both at the same side of the interface.

00:32:40.220 --> 00:32:45.170
And Interface Builder will let us see things
like what happens when our interface rotates.

00:32:45.170 --> 00:32:50.640
So if we rotate that interface, we see, oh,
they're staying on that side, that's not too fun.

00:32:50.640 --> 00:32:55.440
So what I really want to do is I really want us to find some
way to push these things to opposite sides of the interface

00:32:55.440 --> 00:32:57.870
so that one is always on the left
and one is always on the right.

00:32:57.869 --> 00:33:03.609
And you do that Interface Builder
using a flexible space for the toolbar.

00:33:03.609 --> 00:33:05.709
So I'm going to type in "flexible" here.

00:33:05.710 --> 00:33:12.230
Let me see, we've got a flexible Spacebar Button Item and
if I drag this down and put this directly between these--

00:33:12.230 --> 00:33:15.049
those two buttons, it will push them apart.

00:33:15.049 --> 00:33:19.139
And when I rotate the interface, they'll stay pushed apart.

00:33:19.140 --> 00:33:24.220
So just that easy, really quick and easy to see.

00:33:24.220 --> 00:33:30.059
OK. Now what I want to do is grab that WebView that I was
going to be showing to you, so let's go ahead and search

00:33:30.059 --> 00:33:36.279
for Web and we see we've got WebView as one of
the built-in controls that we can work with.

00:33:36.279 --> 00:33:41.450
And I'm going to click and drag and just
bring this directly into my interface.

00:33:41.450 --> 00:33:45.309
You notice again Interface Builder sized
it precisely into the space that I had left

00:33:45.309 --> 00:33:49.990
so I can begin working with it, and there we go.

00:33:49.990 --> 00:33:53.700
So now this toolbar though, I don't
really want this to be blue.

00:33:53.700 --> 00:33:55.440
Let's say we want it to be different color.

00:33:55.440 --> 00:33:57.240
Let's say we want to make it black.

00:33:57.240 --> 00:34:04.509
So I'll select the toolbar and then the Inspector here on
the right, I can actually change this to, say, black opaque.

00:34:04.509 --> 00:34:09.000
As I click away, you'll notice that it's
even changed the colors of the buttons.

00:34:09.000 --> 00:34:10.820
The buttons themselves are blue to begin with.

00:34:10.820 --> 00:34:14.530
But Interface Builders are smart enough to
notice this change we've made and has tried

00:34:14.530 --> 00:34:21.630
to help us maintain consistency as we're
designing our interface, so pretty handy.

00:34:21.630 --> 00:34:27.530
Now, for these buttons we initially typed in some
text but now it looks, you know, not so great.

00:34:27.530 --> 00:34:28.890
We could do something a little better here.

00:34:28.889 --> 00:34:35.019
And it turns out as you're working with
toolbars and et cetera in UIKit, you can make--

00:34:35.019 --> 00:34:38.690
take advantage of a Bar Button Items identifier.

00:34:38.690 --> 00:34:45.460
And what this gives you is a certain amounts of
standard artwork from UIKit for common user actions.

00:34:45.460 --> 00:34:53.720
So if you wanted, for example, an Add button or perhaps
a Cancel button or maybe you even wanted a button

00:34:53.719 --> 00:34:59.889
for composing a message, for example, the standard
motif for doing that, these are all provided for you.

00:34:59.889 --> 00:35:03.929
As it turns out, we're going to cheat
a little bit here and I figured that--

00:35:03.929 --> 00:35:07.289
I figure rewind is more or less okay for back.

00:35:07.289 --> 00:35:09.949
You should definitely do your own Back
button if you were doing something like this

00:35:09.949 --> 00:35:12.089
but we're just going to be quick and easy here.

00:35:12.090 --> 00:35:17.280
So we've got Rewind and we've got
Forward for our forward and back.

00:35:17.280 --> 00:35:21.470
And now, these buttons are here but
they're not doing anything currently.

00:35:21.469 --> 00:35:29.539
So we need to actually have them tell the WebView to go
back or go forward depending on what the user clicks.

00:35:29.539 --> 00:35:35.469
So what I'm going to do is hold down Control and
click and drag from this button to the WebView,

00:35:35.469 --> 00:35:39.139
and you'll notice we've got a set of
actions already that we can work with.

00:35:39.139 --> 00:35:44.900
As it turns out, UIWebView actually
publishes a set of IBActions that it expects

00:35:44.900 --> 00:35:48.090
that you'll probably want to use as you're working with it.

00:35:48.090 --> 00:35:51.300
So go back and go forward are already
things that we can make use of,

00:35:51.300 --> 00:35:55.190
so that's pretty great so we'll just
hit Control + Drag, do the same thing,

00:35:55.190 --> 00:36:00.110
and hook up, go forward for the Forward button.

00:36:00.110 --> 00:36:01.550
All right.

00:36:01.550 --> 00:36:08.769
So that being the case here, let's go
ahead and let's go back to Xcode here,

00:36:08.769 --> 00:36:15.090
and we need to fix up one thing here
'cause we're using our Demo App so I need

00:36:15.090 --> 00:36:17.180
to make sure-- oh, it's-- that is all good.

00:36:17.179 --> 00:36:20.940
I'm going to hit Build and Run
and, hopefully, we'll be okay.

00:36:20.940 --> 00:36:21.950
We've got one Build there.

00:36:21.949 --> 00:36:23.079
What happened here?

00:36:23.079 --> 00:36:29.159
We've got our Demo App Delegate-- oh, but we've got Demo
App App is actually the name of the file in this case.

00:36:29.159 --> 00:36:29.710
So let's go ahead.

00:36:29.710 --> 00:36:34.329
We just corrected that, you know, as Xcode showed
us directly on our line where the error was.

00:36:34.329 --> 00:36:36.539
Hit Built and Go.

00:36:36.539 --> 00:36:37.489
We've got our interface.

00:36:37.489 --> 00:36:41.289
We don't have our-- we don't have that wood graphic.

00:36:41.289 --> 00:36:42.239
So what happened here?

00:36:42.239 --> 00:36:47.549
Well, we've got our wood graphic sitting over here on
the desktop but we haven't added it to our project.

00:36:47.550 --> 00:36:52.289
Interface Builder didn't-- or Xcode didn't
know to include it in our application.

00:36:52.289 --> 00:36:59.119
So I'm going to go ahead and just drag this wood
graphic into our resources, make sure it gets copied in.

00:36:59.119 --> 00:37:03.679
And now, if you actually go down to your target,
and this is one of the neat things about targets.

00:37:03.679 --> 00:37:07.799
I think Anders talked about them, serve
as a bit of a recipe, if you will.

00:37:07.800 --> 00:37:10.850
The ingredients are all your source
files and all your interface files

00:37:10.849 --> 00:37:13.690
and the targets tell you sort of what to do with them.

00:37:13.690 --> 00:37:19.090
But you'll notice there's a Copy Bundle Resources phase
and we see it's copying in all of our interface files

00:37:19.090 --> 00:37:22.110
and now it's copying in that graphic as well.

00:37:22.110 --> 00:37:30.410
So now, when I go ahead and hit Build and Run, we'll get
our application with the wood grain just as we wanted it.

00:37:30.409 --> 00:37:37.879
And I can go ahead and I can start clicking on these things
and we'll load up the New York Times here, assuming that--

00:37:37.880 --> 00:37:42.630
assuming we have the wonderful powers
of the internet helping us out.

00:37:42.630 --> 00:37:44.539
Perhaps not.

00:37:44.539 --> 00:37:51.059
All right, well, sometimes you can't
rely on the internet in these situations.

00:37:51.059 --> 00:37:55.079
Well, rest assured we'd actually
be loading these resources here.

00:37:55.079 --> 00:38:00.460
I'll go back to New York Times to see if we can unstick it.

00:38:00.460 --> 00:38:04.539
All right, oh, well, rest assured,
we'll leave this off to the side just

00:38:04.539 --> 00:38:07.110
in case it happens to catch up with itself here.

00:38:07.110 --> 00:38:14.940
Let me just double check the-- double check that everything
got set up appropriately for us and that looks good

00:38:14.940 --> 00:38:22.950
and as does that, so probably just a
matter of slow internet at the moment.

00:38:22.949 --> 00:38:25.179
Such is the life of onstage demos.

00:38:25.179 --> 00:38:28.919
All right, so, but you see we've built the application.

00:38:28.920 --> 00:38:31.260
We've got the interface to go back and forth.

00:38:31.260 --> 00:38:34.630
Our back and forth buttons work seamlessly and, you know,

00:38:34.630 --> 00:38:38.340
we've spent probably about 15 minutes
to build the entire application itself.

00:38:38.340 --> 00:38:43.690
So pretty straightforward, you know, and it's a
fully functioning interface, really quite awesome.

00:38:43.690 --> 00:38:49.150
Now, one of the great things you can do is, say, as
you're using your interface, is let's say that I wanted

00:38:49.150 --> 00:38:53.030
to set a breakpoint in my Xcode project here.

00:38:53.030 --> 00:38:57.769
And I'm going to go ahead and hit
Build and Debug in the simulator.

00:38:57.769 --> 00:38:59.710
We'll load up.

00:38:59.710 --> 00:39:05.119
And when I hit one of these buttons, notice I'm
stopped directly on this Show URL with Title

00:39:05.119 --> 00:39:09.289
which is the method we were using to
actually create this in the first place.

00:39:09.289 --> 00:39:16.289
And in Xcode I can actually do some pretty cool stuff
like mouse over a variable directly in the source code

00:39:16.289 --> 00:39:23.230
to see exactly what its values are live as we go through
the-- as we are going to the execution of our program.

00:39:23.230 --> 00:39:28.119
So even if I go and step over this line right here
where I'm setting the location for our WebView,

00:39:28.119 --> 00:39:34.119
I can get that all taken care of and see that
this is indeed getting set up in our app.

00:39:34.119 --> 00:39:38.309
You see we now have the New York Times
being the address that we had clicked.

00:39:38.309 --> 00:39:39.579
So, pretty powerful, pretty great.

00:39:39.579 --> 00:39:44.159
Go ahead and pull that breakpoint out and quit that.

00:39:44.159 --> 00:39:47.539
All right, so let's head back to slides here.

00:39:47.539 --> 00:39:54.400
So as Interface Builders, you got a sense for how
Interface Builder really does lets you quickly

00:39:54.400 --> 00:39:57.490
and easily construct these graphical user interfaces.

00:39:57.489 --> 00:40:05.089
And sort of the back and forth display that you have as
you go between creating your interface and connecting it

00:40:05.090 --> 00:40:10.430
to your code and having that be part of what the, you
know, when the user interacts with your app, having it--

00:40:10.429 --> 00:40:16.190
knowing exactly where it's going to be
calling through to your application.

00:40:16.190 --> 00:40:19.950
>> OK, so we showed you Interface Builder.

00:40:19.949 --> 00:40:23.379
Let's talk a bit about our next application in this week.

00:40:23.380 --> 00:40:25.570
Let's talk about Instruments.

00:40:25.570 --> 00:40:33.360
So Instruments is our flagship performance tool on both
Mac and iPhone, for performance and memory analysis.

00:40:33.360 --> 00:40:39.690
It's a really versatile tool and
you get a powerful wide range

00:40:39.690 --> 00:40:42.519
of things you can actually look at in your application.

00:40:42.519 --> 00:40:47.380
And the great part about Instruments is that
it really brings context to your analysis.

00:40:47.380 --> 00:40:53.340
Because usually, when you're doing performance profiling,
you end up in a situation where maybe you're just looking

00:40:53.340 --> 00:40:58.650
at the timing of your application so you're just
saying, "Hey, how am I spending in some method?"

00:40:58.650 --> 00:41:04.240
And so you're looking at this one thing and you've got only
a single set of data, you know, a few points to say like,

00:41:04.239 --> 00:41:07.879
"Oh, that method is a little slow and I can improve that."

00:41:07.880 --> 00:41:12.200
But you really don't have any other context in your
app to know sort of what was happening with memory,

00:41:12.199 --> 00:41:18.699
what happening with video, what was this play actually
happening throughout the various subsystems on the device,

00:41:18.699 --> 00:41:21.389
whether it's a Mac or whether it's your iPhone.

00:41:21.389 --> 00:41:25.789
And what Instruments let's you
do is bring this other elements

00:41:25.789 --> 00:41:29.579
in where your application is performing
and understand them in context.

00:41:29.579 --> 00:41:32.420
So you can see, oh, that timing related issue.

00:41:32.420 --> 00:41:35.250
Well, it turns out I was doing a lot of File IO and then--

00:41:35.250 --> 00:41:37.389
and I was having to malic [phonetic]
a whole bunch of memory.

00:41:37.389 --> 00:41:40.210
That's why it was taking a long time, you know.

00:41:40.210 --> 00:41:43.820
Oh, I see that, you know, some other operation took a while.

00:41:43.820 --> 00:41:48.550
Well, again, maybe I was thrashing memory at the same
time, things that if you were just looking at timing alone,

00:41:48.550 --> 00:41:54.220
wouldn't be sufficient to know
exactly why you were taking so long.

00:41:54.219 --> 00:41:57.699
Alright, so, let's just go back to demo.

00:41:57.699 --> 00:42:04.029
I like showing off the tools just to have a chance
to see what it's actually like to work with them.

00:42:04.030 --> 00:42:08.720
Alright, so we click and open Instruments
here down the dock.

00:42:08.719 --> 00:42:12.899
This is what we're presented with initially
which is a series of templates for you

00:42:12.900 --> 00:42:15.500
to use as you're working with your application.

00:42:15.500 --> 00:42:20.019
And this is really quite powerful because you've
got a whole bunch of stuff that you can look at.

00:42:20.019 --> 00:42:24.659
You'll notice we've got an iPhone category as
well as a category for the iPhone Simulator.

00:42:24.659 --> 00:42:31.319
So we actually have different templates set up that are
especially tuned to what you can do in either environment.

00:42:31.320 --> 00:42:36.450
And Anders will talk about sort of what's appropriate
when we discuss the simulator here in a moment.

00:42:36.449 --> 00:42:42.989
So if you look at all the templates for iPhone development,
you'll notice that if we're looking at the device directly,

00:42:42.989 --> 00:42:44.809
we've got a lot of stuff that we can choose to do.

00:42:44.809 --> 00:42:49.960
We can track object allocations so we can better
understand the memory usage on our phone itself

00:42:49.960 --> 00:42:52.590
and how our application is actually
working with that memory.

00:42:52.590 --> 00:42:58.110
We can use Leaks, which is going to allow us to detect,
say, if we're leaking memory in our application.

00:42:58.110 --> 00:43:05.090
And so basically, runs a statistical analysis of our
app's memory heap roughly every 10 seconds and determines,

00:43:05.090 --> 00:43:08.880
alright, what's still alive but nothing
else is currently pointing to it.

00:43:08.880 --> 00:43:11.820
Oops, well, that's probably something
that you leak and didn't realize.

00:43:11.820 --> 00:43:16.390
And on iPhone stamping that out is
going to be extremely important.

00:43:16.389 --> 00:43:20.409
Activity monitor will give us a sense for
the overall usage on this system, say,

00:43:20.409 --> 00:43:23.369
of all the different processes and
the memory they might be using.

00:43:23.369 --> 00:43:29.299
And you've got a slew of others, everything from CPU
sampler for timing to OpenGL ES if you're a game developer

00:43:29.300 --> 00:43:35.160
and want to get in to the very low levels of how
the graphics card is actually being utilized.

00:43:35.159 --> 00:43:38.559
And Core Animation as well for
if you're doing UIKit drawing.

00:43:38.559 --> 00:43:42.349
You can see basically how efficiently you're doing that.

00:43:42.349 --> 00:43:46.759
So I'm going to go ahead and I'm just
going to open up ObjectAllocations here

00:43:46.760 --> 00:43:53.100
and just give you a tour of the interface.

00:43:53.099 --> 00:43:56.650
Alright, so you'll notice this
if you've say, Garage Bamboo 4.

00:43:56.650 --> 00:44:00.000
So probably fairly similar interface
this thing that you're used to.

00:44:00.000 --> 00:44:04.590
On the left hand side here we have individual
instrument that you're working with.

00:44:04.590 --> 00:44:08.150
In this case, we're working with
the object alloc instrument.

00:44:08.150 --> 00:44:12.079
And our Info button here is going to
let us configure various aspects to it.

00:44:12.079 --> 00:44:17.849
So, most instruments have different options you can turn
on and off depending on the type of profiling you can do

00:44:17.849 --> 00:44:21.710
and you can reach them all through this Info button.

00:44:21.710 --> 00:44:24.449
Now, on the right here is your actual track view.

00:44:24.449 --> 00:44:30.179
This is where you're going to see live data come
in as you begin to profile your application.

00:44:30.179 --> 00:44:32.609
And down below, you've got your detail view.

00:44:32.610 --> 00:44:40.019
This is going to show you exactly the detailed
information that's been collected on your application.

00:44:40.019 --> 00:44:46.050
And again, over here on the left hand side, you've
got further options that you can use usually to hone

00:44:46.050 --> 00:44:49.120
down that data that the specifics that you care about.

00:44:49.119 --> 00:44:55.079
And the great part about Instruments is that once you've
already jumped in to a template, you still got a library

00:44:55.079 --> 00:44:59.389
of different instrumentation that you can take
advantage of and drag back into your interface.

00:44:59.389 --> 00:45:05.059
So one of the things you can do is you just pull down
the library just to go straight to the iPhone section

00:45:05.059 --> 00:45:08.820
and you've got all the different iPhone
instruments that you might want to pull in

00:45:08.820 --> 00:45:13.539
and begin to use as you're examining your application.

00:45:13.539 --> 00:45:19.820
Now, another one of the powerful things that again Anders
will talk about when we deal with the iPhone Simulator is

00:45:19.820 --> 00:45:24.530
on the iPhone Simulator you can use--
you can often use Mac instrumentation

00:45:24.530 --> 00:45:28.269
to actually understand greater
detail about your application.

00:45:28.269 --> 00:45:32.679
So if you are working with core data, for example,
you could use any of the core data instruments

00:45:32.679 --> 00:45:38.309
to understand the various performance
characteristics of your core data faults and fetches

00:45:38.309 --> 00:45:40.670
and your saves, et cetera, so really quite powerful.

00:45:40.670 --> 00:45:46.740
So I'm going to go back Xcode here and
we're still on the simulator as we see.

00:45:46.739 --> 00:45:52.819
And if I go to the Run menu, I can
actually go to Run With performance tool.

00:45:52.820 --> 00:45:57.350
And what I'm going to do is go ahead and
run with performance tool and let's do a--

00:45:57.349 --> 00:46:00.289
let's go ahead and do Leaks to begin with.

00:46:00.289 --> 00:46:02.219
I told you those were important.

00:46:02.219 --> 00:46:10.099
We'll drag this off to the side and let me go ahead and
hide the library so you can still see the simulator here.

00:46:10.099 --> 00:46:12.569
An ObjectAlloc is showing us some basic memory usage.

00:46:12.570 --> 00:46:14.559
I'm going to go ahead and interact with the simulator here.

00:46:14.559 --> 00:46:19.049
We don't have any content to load,
unfortunately, with the internet connection.

00:46:19.050 --> 00:46:22.100
We can go back and go forward.

00:46:22.099 --> 00:46:26.699
But you'll see that Leaks is already
picking up on a couple leaks that we've got.

00:46:26.699 --> 00:46:31.359
We see both the leaks that have been
discovered as well as the total leak bytes

00:46:31.360 --> 00:46:33.579
that have actually happened in our application.

00:46:33.579 --> 00:46:35.569
So I'm going to hit Stop here.

00:46:35.570 --> 00:46:38.740
And what you can do, already you see an ObjectAlloc.

00:46:38.739 --> 00:46:41.699
This is actually really, really
pretty excellent if you've ever needed

00:46:41.699 --> 00:46:44.909
to do some fine grained analysis in your application.

00:46:44.909 --> 00:46:50.579
You'll notice that we're seeing every single
allocation that our application has made.

00:46:50.579 --> 00:46:56.349
And if we dig deeply into these things, we
can even see where exactly they came from.

00:46:56.349 --> 00:46:59.179
So in this case you've got a lot
of stuff that's come from UIKit.

00:46:59.179 --> 00:47:04.699
Not too surprising 'cause we were setting up
a whole lot of just basic framework code here.

00:47:04.699 --> 00:47:09.129
But if you got your own objects here, you can
actually search for them and find them yourselves.

00:47:09.130 --> 00:47:13.930
And so that's really the power in being
able to-- in being able to see these things.

00:47:13.929 --> 00:47:18.269
You see, we can even search for roots down here at the
bottom and sure enough, there's our root view controller.

00:47:18.269 --> 00:47:23.190
As you would expect, it was created
and we're able to see that

00:47:23.190 --> 00:47:27.450
But we leaked some memory, which as I said again
it's the thing that you're always going to make sure

00:47:27.449 --> 00:47:29.369
that you're trying to avoid doing on iPhone.

00:47:29.369 --> 00:47:36.139
So I'm going to hold down the Option key
and just drag around this region right here.

00:47:36.139 --> 00:47:41.859
And what it's done, it's gone ahead and narrow the
scope of this data to only include this region.

00:47:41.860 --> 00:47:46.320
And we'll see that we've got a couple
things that have come from our demo app

00:47:46.320 --> 00:47:48.440
in this responsible library that are being leaked.

00:47:48.440 --> 00:47:52.150
In this case, we've got a couple UI images.

00:47:52.150 --> 00:47:55.389
So let's go ahead and let's take a peak at this.

00:47:55.389 --> 00:48:02.279
So for the first thing we can do we'll go to our
View menu and select the Extended Detail View,

00:48:02.280 --> 00:48:09.340
and what this lets you see for every one of these objects is
the call stack that actually was responsible for allocating

00:48:09.340 --> 00:48:14.130
that object in the first place so you can know
exactly where that object came from and really the--

00:48:14.130 --> 00:48:19.070
as the sort of the first line of checking, you
want to make sure that if there's any part of this

00:48:19.070 --> 00:48:22.530
that is your code, that you're doing the right thing.

00:48:22.530 --> 00:48:27.100
So if we take a look through here, we notice that we've
got this RootViewController ViewWillAppearshowing up

00:48:27.099 --> 00:48:29.619
and this is, obviously, our code so we might wait.

00:48:29.619 --> 00:48:31.239
We might want to do something with this.

00:48:31.239 --> 00:48:36.000
You see, we can even see a path to the actual file itself.

00:48:36.000 --> 00:48:42.750
And if I double-click on that, Instruments actually
opens up directly to the line in our source

00:48:42.750 --> 00:48:45.440
to show us the object that it was leaked.

00:48:45.440 --> 00:48:46.970
And in this case, the view will appear.

00:48:46.969 --> 00:48:48.799
I'm doing something kind of silly.

00:48:48.800 --> 00:48:55.730
I'm allocing this UI image view and I
actually don't later release it anywhere

00:48:55.730 --> 00:48:57.940
So I alloc this image view.

00:48:57.940 --> 00:49:02.440
I set this image as-- so alloc this image.

00:49:02.440 --> 00:49:04.570
I set the image to our image view.

00:49:04.570 --> 00:49:09.730
In this case, this is the wood
background and I don't later release it.

00:49:09.730 --> 00:49:14.289
So we're leaking this memory every time this
ViewWillAppear method gets called, which in fact,

00:49:14.289 --> 00:49:17.279
is every time that we come back to the view.

00:49:17.280 --> 00:49:18.920
Not a good thing.

00:49:18.920 --> 00:49:24.250
So really, if we wanted to fix this, we should be
taking just the loading of this individual image,

00:49:24.250 --> 00:49:29.530
making sure that we release it and we really should
just be doing this in ViewDidLoad, it's called once.

00:49:29.530 --> 00:49:35.920
It's going to be your place to set up initial state and
that's where that work should predominantly be happening.

00:49:35.920 --> 00:49:39.670
But again, you'll notice Instrument
is honed in on the line on our source.

00:49:39.670 --> 00:49:42.190
It's shown us the amount of memory
that's actually been leaked.

00:49:42.190 --> 00:49:44.059
In this case it says 32 bytes.

00:49:44.059 --> 00:49:51.820
For UIImages, they are also backed by CG
layers on iPhone, and so most of the memory

00:49:51.820 --> 00:49:54.490
that they are actually using is in the separate object.

00:49:54.489 --> 00:49:56.119
So it's actually more than 32 bytes.

00:49:56.119 --> 00:49:58.359
It's even worse than we would have figured.

00:49:58.360 --> 00:50:04.970
And if we wanted to make some changes of this code, we could
just click this Xcode button and jump directly to that line

00:50:04.969 --> 00:50:10.629
of source in our Xcode project
itself, so really quite powerful.

00:50:10.630 --> 00:50:15.960
Now, all of this is great but you really want to
be running your application on the device, right.

00:50:15.960 --> 00:50:23.400
>> So, Anders already showed you this overview menu
and it turns out we can just select this device, 3.0.

00:50:23.400 --> 00:50:28.110
And I'm going to go ahead and hit Build and Debug.

00:50:28.110 --> 00:50:35.710
And this is going to build our application, it's going to
install it on our development phone which is over here,

00:50:35.710 --> 00:50:39.490
and this should automatically come up here in a moment

00:50:39.489 --> 00:50:45.309
and we'll launch our application and
here we are we have it to work with.

00:50:45.309 --> 00:50:50.309
And again unfortunately, we don't have service
at the moment but we can tap on our application.

00:50:50.309 --> 00:50:52.029
We see it loads in.

00:50:52.030 --> 00:50:54.350
We can navigate through it.

00:50:54.349 --> 00:51:00.889
And we've got this fully functioning application here on
the phone just by switching that pop down and going here.

00:51:00.889 --> 00:51:06.730
But the really cool thing is that you can still debug
and do performance analysis on your phone itself.

00:51:06.730 --> 00:51:11.630
So I'm going to go ahead and in our Xcode project here.

00:51:11.630 --> 00:51:15.680
I'm going to take our RootViewcontroller
and go to this, show URL with title

00:51:15.679 --> 00:51:19.609
and drop that same breakpoint in that I had before.

00:51:19.610 --> 00:51:28.880
And if I go to the phone and hit our New York Times
button, we see it lights up and we go back to Xcode,

00:51:28.880 --> 00:51:33.309
we see we're paused on that line
itself and same thing before.

00:51:33.309 --> 00:51:38.400
I can mouse over these values directly
and get their actual values where they are

00:51:38.400 --> 00:51:41.059
in memory, all of their state and talk to them.

00:51:41.059 --> 00:51:47.139
And it's all happening right here on your
phone, really powerful, really, really powerful.

00:51:47.139 --> 00:51:50.609
So I'm going to go ahead and I
will drag this breakpoint out.

00:51:50.610 --> 00:51:51.539
We'll hit Continue.

00:51:51.539 --> 00:51:58.259
I'm going to go and stop this but you can even run
with performance tool against the phone itself.

00:51:58.260 --> 00:52:04.960
So let's say that I wanted to-- wanted to start this
up with object allocations and do it on the phone.

00:52:04.960 --> 00:52:08.980
We have a new template that would start up here.

00:52:08.980 --> 00:52:15.420
And on this case, that's actually-- I'm mean don't
say that, over the best trends [phonetic] again here.

00:52:15.420 --> 00:52:17.269
We've already got the application on the phone.

00:52:17.269 --> 00:52:20.590
So I'm going to go ahead and select
object allocations of the template.

00:52:20.590 --> 00:52:27.579
And if I do Launch Executable from this menu, I can
actually choose the application that I want launched.

00:52:27.579 --> 00:52:30.900
In this case, I'm going to select our demo app

00:52:30.900 --> 00:52:39.289
And if I hit Record, we'll see we start up, if we got
the phone here, we see our application has come up.

00:52:39.289 --> 00:52:45.210
I can begin interacting with it, things are a little
bit slower when you're actually using object alloc

00:52:45.210 --> 00:52:50.269
on the phone itself because the iPhone is recording
an enormous amount of data about the allocations

00:52:50.269 --> 00:52:56.159
of your objects, which is still
quite usable and go back and forth.

00:52:56.159 --> 00:53:03.730
And when we go back to our demo machine here, we
see an object alloc that we've got a live view

00:53:03.730 --> 00:53:09.869
of the actual objects in our application recorded
and most of them here with full pointer histories.

00:53:09.869 --> 00:53:16.309
So we can go on and see all of our CF arrays that
were created in any for a given pointer I can see all

00:53:16.309 --> 00:53:20.360
of the individual malics and freeze on that pointer itself.

00:53:20.360 --> 00:53:25.120
So if you ever end up in a situation where you're
overwriting memory or you're smashing memory and you need

00:53:25.119 --> 00:53:30.920
to figure where did that come from, you can even hone down
on the pointer level and understand the exact activity

00:53:30.920 --> 00:53:35.309
that has happened there to get to the source of the problem.

00:53:35.309 --> 00:53:40.570
It's a really, really fantastic set of
tools for you using youre development.

00:53:40.570 --> 00:53:45.039
Alright, so that's Instruments.

00:53:45.039 --> 00:53:51.779
So we showed you how to you collect data from multiple
sources both in terms of using things like object alloc

00:53:51.780 --> 00:53:57.060
but also leaks which analyzing your data to understand
where it's coming in from and there's all sorts

00:53:57.059 --> 00:54:01.509
of other instrumentation you can make
use of everything from taking advantage

00:54:01.510 --> 00:54:05.830
of network profiling to CPU activity, et cetera.

00:54:05.829 --> 00:54:08.039
Instruments provide a rich set of data mining.

00:54:08.039 --> 00:54:09.679
So we only scratch the surface here.

00:54:09.679 --> 00:54:15.089
Yesterday, in that helper's [phonetic] tool, state of
the union, you probably saw a really rich set of features

00:54:15.090 --> 00:54:19.110
for doing things like charging calls to different callees.

00:54:19.110 --> 00:54:24.019
And we've got some great sessions on Instruments later on in
the week that is going to go in this wonderful detail there.

00:54:24.019 --> 00:54:29.070
And really Instruments again helps you better understand
the context of what's happening in your application,

00:54:29.070 --> 00:54:32.410
again, really, really awesome application.

00:54:32.409 --> 00:54:37.730
All right so that's Instruments and with that I'd
like to go ahead and hand it back on to Anders

00:54:37.730 --> 00:54:40.199
to talk to you about the iPhone Simulator.

00:54:40.199 --> 00:54:40.929
>> Alright.

00:54:40.929 --> 00:54:44.369
So we've seen the Simulator a couple of times already today.

00:54:44.369 --> 00:54:48.480
It sort of just comes up and looks
exactly like a phone right.

00:54:48.480 --> 00:54:53.420
So one of the things to know about--
well, why use it at all?

00:54:53.420 --> 00:54:57.030
Obviously, faster edit, build test integration.

00:54:57.030 --> 00:55:03.620
So for iterating on some logic, maybe a
button click isn't quite working right

00:55:03.619 --> 00:55:09.109
or even for working on some OpenGL ES graphics.

00:55:09.110 --> 00:55:12.800
It can be a lot faster if you just
build and run, get the simulator.

00:55:12.800 --> 00:55:16.340
If nothing else, you don't have to
shift your focus to look at the device.

00:55:16.340 --> 00:55:20.309
There are more analysis tools available
as Michael mentioned,

00:55:20.309 --> 00:55:26.009
because the simulator is actually an Mac
OS X app and your app inside of it is one.

00:55:26.010 --> 00:55:33.230
You can analyze it using some more tools than what we have
on the device and I'll talk a little bit more about that.

00:55:33.230 --> 00:55:35.599
It's also easier to test exceptional conditions.

00:55:35.599 --> 00:55:42.299
The Simulator lets you show what the UI will look like if
a call comes in while your app is being used, for example.

00:55:42.300 --> 00:55:48.120
And you can also simulate a low memory condition
which will then cause some special code in your app

00:55:48.119 --> 00:55:51.920
to get it run to try to free of some memory.

00:55:51.920 --> 00:55:54.550
And obviously you can do it without
having a device connected.

00:55:54.550 --> 00:56:02.100
You can just set and program it on your computer and you can
actually write a full-featured app just using the simulator

00:56:02.099 --> 00:56:07.339
and then when you connect it to a device
for the first time, you'll be very far long.

00:56:08.400 --> 00:56:15.599
So one of the big reasons edit-complied-debug
cycle, another thing is Dtrace.

00:56:15.599 --> 00:56:19.029
I mentioned there were some technologies
that were available to Mac OS X.

00:56:19.030 --> 00:56:22.840
Dtrace is an open source technology
that we provide on Mac OS X.

00:56:22.840 --> 00:56:26.740
It lets you add probes to your
code and lets you instrument code

00:56:26.739 --> 00:56:31.279
without modifying the code at all
and without recompiling it.

00:56:31.280 --> 00:56:37.160
So as you saw with Instruments, we can attach to
an application and without adding a whole bunch

00:56:37.159 --> 00:56:41.969
of profiling points or anything like that, it
gets dynamically instrumented and that's what--

00:56:41.969 --> 00:56:46.489
one of the technologies that Instruments
uses under the hood to sample--

00:56:46.489 --> 00:56:51.799
to insert little probes to sample your
program and figure out what's going on.

00:56:51.800 --> 00:56:58.640
And on a retained release, malic-free kind
of a memory architecture like the phone,

00:56:58.639 --> 00:57:02.460
there's always the opportunity,
the risk of lost objects, right.

00:57:02.460 --> 00:57:07.490
This is dangling pointers that you have somehow
released an object and you still have a pointer

00:57:07.489 --> 00:57:10.519
to it and we call those objects "zombies."

00:57:10.519 --> 00:57:12.949
They're kind of this half-life, half-dead state.

00:57:12.949 --> 00:57:17.039
The memory has actually been deallocated
but you still have a pointer to it.

00:57:17.039 --> 00:57:24.179
And one of the things that you can do on the Mac is to
turn on this feature called "zombies" and then instead

00:57:24.179 --> 00:57:30.529
of actually deallocating the memory for your object, it will
turn them into a zombie but remember what they used to be.

00:57:30.530 --> 00:57:34.670
And you saw this in the state of union
yesterday where Steve Lullan [phonetic] showed

00:57:34.670 --> 00:57:37.990
that the instruments connection
flagged this automatically for you.

00:57:37.989 --> 00:57:42.659
Now one of the reasons this is available on the Mac and
not on the phone is it can use up a lot of memories.

00:57:42.659 --> 00:57:46.730
You're going to keep around all the allocated
objects just in case they get message.

00:57:46.730 --> 00:57:50.559
So this is one reason that this is tricky to do on phone.

00:57:50.559 --> 00:57:53.469
So that's another advantage of using the simulator.

00:57:54.659 --> 00:57:57.279
So it looks just like hardware, right.

00:57:57.280 --> 00:58:00.820
It looks exactly like a phone with the
bezel [inaudible] those sorts of things.

00:58:00.820 --> 00:58:05.620
But it is important to remember that the
simulator is not an instruction level emulator.

00:58:05.619 --> 00:58:08.469
It doesn't emulate the chips that inside of the phone.

00:58:08.469 --> 00:58:11.959
It doesn't emulate any of the hardware on the phone.

00:58:11.960 --> 00:58:17.579
Rather, it is the Mac OS X implementation
of the iPhone SDKs.

00:58:17.579 --> 00:58:26.440
So all of the same APIs are available but complied for
Intel and obviously, their implementation on the Mac

00:58:26.440 --> 00:58:30.070
from Apple's side is different
because the hardware is different.

00:58:30.070 --> 00:58:34.570
So any drawing you do goes through a
window on the Mac screen as you've seen.

00:58:34.570 --> 00:58:36.269
So this has some implications.

00:58:36.269 --> 00:58:42.719
You're actually compiling your code for a different chip
set than you do when you build it for the actual device

00:58:42.719 --> 00:58:51.299
and some of the differences here, the implications are
you can use eitherthe device or the simulator for things

00:58:51.300 --> 00:58:54.710
like logic testing, for leak checking,
those kinds of things.

00:58:54.710 --> 00:59:01.920
As I mentioned, zombies are great to-- that's a great
way to check your memory usage and lost object problems

00:59:01.920 --> 00:59:07.940
on the Simulator and you'll know that that's going
to be the same logic that will run on the device.

00:59:07.940 --> 00:59:10.769
There are other things that are not so interchangeable.

00:59:10.769 --> 00:59:17.539
The simulator again, it's better for very
fast rapid edit build debug cycles just

00:59:17.539 --> 00:59:19.849
because you don't have to send
your app through that USB cable.

00:59:19.849 --> 00:59:28.549
And of course, Simulator can also simulates
as it were exceptional conditions like pretend

00:59:28.550 --> 00:59:32.900
that there is a little memory warning issued
by the system and see how your app reacts.

00:59:32.900 --> 00:59:40.500
Typically, you're supposed to then deallocate any
resources that aren't being used at the moment.

00:59:40.500 --> 00:59:42.809
Some things you can only really do on the device.

00:59:42.809 --> 00:59:50.090
Performance analysis in terms of, you know, sampling to see
where I am spending most of the time, those kinds of things.

00:59:50.090 --> 00:59:53.130
That's obviously something you want
to do on the phone because if you do

00:59:53.130 --> 00:59:58.960
that on an eight-way very fast Mac Pro you're
not going to get meaningful results typically.

00:59:58.960 --> 01:00:06.010
So something that runs plenty fast in the simulator maybe
too slow on the device and of course, hardware accessories.

01:00:06.010 --> 01:00:12.290
iPhone SDK 3.0 lets you talk to your own hardware
devices, that's not being simulated in the simulator,

01:00:12.289 --> 01:00:15.940
not even accelerometer those kinds of things either.

01:00:15.940 --> 01:00:18.670
>> You can take advantage of the difference too though.

01:00:18.670 --> 01:00:23.230
Because the Simulator is just a Macintosh
Application and when you build your iPhone app

01:00:23.230 --> 01:00:26.130
for the Simulator, you get a Macintosh Application.

01:00:26.130 --> 01:00:28.430
You have access to things like the file system.

01:00:28.429 --> 01:00:33.669
So this path here shows where and this also
available in the documentation of course.

01:00:33.670 --> 01:00:39.970
It shows where in your home directory the
simulator view of the phone file system is stored.

01:00:39.969 --> 01:00:42.619
So this means that if your application
writes some application--

01:00:42.619 --> 01:00:48.719
writes some files, you can actually just go out and look at
them in the file system on your Mac and that's a lot easier

01:00:48.719 --> 01:00:54.119
than pulling them back from the device and then looking
at them in some other way, although you can do that too.

01:00:54.119 --> 01:00:58.940
You can go to one of the Xcode sessions
for more information about that.

01:00:58.940 --> 01:01:03.829
They'll get into more detail about
how to talk to a device through Xcode.

01:01:03.829 --> 01:01:07.940
One of the other things you can do, you can
take advantage of that power in the Mac Pro.

01:01:07.940 --> 01:01:14.300
And let's say you have an application that does some
data processing, you can add records, remove records,

01:01:14.300 --> 01:01:19.440
you have some code that updates the database of some kind.

01:01:19.440 --> 01:01:23.809
For database you probably use Core Data but
then you have some other structures internally.

01:01:23.809 --> 01:01:29.739
One of the things you can do is if you have some
exhausted-- some code that does some exhaustive tests,

01:01:29.739 --> 01:01:34.179
integrity check of this data structure, you
can actually run that after every event.

01:01:34.179 --> 01:01:40.319
Let's say, the user goes to reorder two items, you
could run that in an exhaustive test on your whole--

01:01:40.320 --> 01:01:42.970
integrity of your whole memory collection.

01:01:42.969 --> 01:01:49.839
You could do that on the Mac because you have the horsepower
to do it but on the phone, of course that would be too slow.

01:01:49.840 --> 01:01:52.539
So this is one of the ways in which you
can take advantage of the simulator.

01:01:52.539 --> 01:01:58.590
You can run with full assertions enabled and
that can help you to find problems faster.

01:01:58.590 --> 01:02:04.500
If you do want to have separate code
for the phone and for the simulator,

01:02:04.500 --> 01:02:13.010
there is a macro that is provided whenever you build against
the iPhone SDK, and it's simply target iPhone simulator.

01:02:13.010 --> 01:02:20.650
So you can check for this and you can have simulator
specific code versus the device specific code.

01:02:20.650 --> 01:02:25.280
This slide is just a bit of a summary
of some of the things you do

01:02:25.280 --> 01:02:28.170
and you don't want to do on the simulator versus device.

01:02:28.170 --> 01:02:30.090
It works really what is best for.

01:02:30.090 --> 01:02:33.650
The fastest turnaround for most
cases is going to be the simulator,

01:02:33.650 --> 01:02:37.130
simply because the app does not have to go on to the device.

01:02:37.130 --> 01:02:39.260
Debugging as you saw you can do on either.

01:02:39.260 --> 01:02:45.050
You can stop on breakpoints, you can set conditional
breakpoints, breakpoint actions, you can expect your memory,

01:02:45.050 --> 01:02:50.170
all of those things work just as well on
either of the device or in the simulator.

01:02:50.170 --> 01:02:53.309
Performance tuning is something
obviously you want to do on the device.

01:02:53.309 --> 01:02:58.739
It doesn't help to know that some operation takes
half a second on a simulator because it's being run

01:02:58.739 --> 01:03:02.349
on your beefy desktop machine and who knows
how long it's going to take on the device,

01:03:02.349 --> 01:03:05.420
so that you really need to do on the hardware.

01:03:05.420 --> 01:03:12.150
Memory tuning and leak checking, you can do on either
because if you lose an object or leak an object on one set

01:03:12.150 --> 01:03:17.260
of logic on the simulator, you probably
going to do the same thing on the device.

01:03:17.260 --> 01:03:20.210
Unless of course, you have a lot of
codes that's different between the device

01:03:20.210 --> 01:03:23.039
and the simulator so you want to keep that to minimum.

01:03:23.039 --> 01:03:25.539
File access, you can also check that.

01:03:25.539 --> 01:03:30.170
One of the things Michael didn't have time to show is
in addition to the leak checking and memory checking,

01:03:30.170 --> 01:03:33.690
you can add another instrument there
which is, OK, show me file access.

01:03:33.690 --> 01:03:37.809
And in this case it would have shown that that
image was getting loaded multiple times from disk.

01:03:37.809 --> 01:03:41.299
So if you see that together with a
memory leak, that's a good indication

01:03:41.300 --> 01:03:43.560
that you're a loading a resource and not leaking it.

01:03:43.559 --> 01:03:45.349
That can be done on both.

01:03:45.349 --> 01:03:52.460
Things like hardware accessories, accelerometer,
the magnetometer those kinds of things, the camera,

01:03:52.460 --> 01:03:56.269
obviously there are somethings you
want to test on the device itself.

01:03:57.309 --> 01:04:00.730
So that summarizes the iPhone Simulator.

01:04:00.730 --> 01:04:09.219
And that kind of brings to conclusion, our brief tour of the
four most important tools I'd say for iPhone development.

01:04:09.219 --> 01:04:13.129
As you've seen, we've talked a
little bit about each of these.

01:04:13.130 --> 01:04:17.720
There are plenty of sessions that
go into these in a lot of detail.

01:04:17.719 --> 01:04:23.789
Xcode is/are integrated IDE with project
managements, source code control,

01:04:23.789 --> 01:04:29.599
integration with various source code control
systems, subversion, CVS, those kinds of things.

01:04:29.599 --> 01:04:35.769
And obviously, a powerful editor and also as you've
seen in some of the new Snow Leopard features,

01:04:35.769 --> 01:04:39.880
static analysis and a lot of good stuff in there.

01:04:39.880 --> 01:04:49.280
Interface Builder is/are-- is Apple's interface prototyping
and implementation tool for both the Mac and the phone.

01:04:49.280 --> 01:04:55.400
And again, one of the most important things to
remember about it, is that it doesn't generate the tons

01:04:55.400 --> 01:04:57.450
of codes that you going to have to maintain.

01:04:57.449 --> 01:05:01.739
It actually lets you edit the objects
that are actually going to be loaded

01:05:01.739 --> 01:05:04.169
at runtime whether on the Mac or on the phone.

01:05:04.170 --> 01:05:08.240
It lets you edit those, modify them and then
you go back to edit your user interface,

01:05:08.239 --> 01:05:10.599
you're just changing attributes of those objects.

01:05:10.599 --> 01:05:14.779
You're not regenerating code or any of that kind of thing.

01:05:14.780 --> 01:05:20.930
Instruments is our flagship performance analysis
tool and it's really powerful and especially

01:05:20.929 --> 01:05:26.639
because it let's you hook up an arbitrary number of
instruments to your process and see what it's really doing,

01:05:26.639 --> 01:05:31.059
what system calls are being issued,
whether zombies are being triggered

01:05:31.059 --> 01:05:35.049
because you have dangling pointers
and those kinds of things.

01:05:35.050 --> 01:05:37.410
And it works again for the Mac OS X.

01:05:37.409 --> 01:05:42.219
If you're doing Mac OS X development,
works for simulator for the device.

01:05:42.219 --> 01:05:48.759
And finally, if the iPhone Simulator, most of the
time just kind of shows up and does its work obscurely

01:05:48.760 --> 01:05:56.240
in the background but it also has some unique features to it
like being able to simulate what an incoming call looks like

01:05:56.239 --> 01:05:59.789
and being able to simulate low memory
conditions, those kinds of things.

01:05:59.789 --> 01:06:05.079
And actually, we did not mention it but it actually supports
Multi-Touch by using option click and those kinds of things,

01:06:05.079 --> 01:06:08.170
it supports pinch gestures and
push and those kinds of things.

01:06:08.170 --> 01:06:11.450
You can actually do all those things
in the simulator as well.

01:06:12.849 --> 01:06:19.529
For more information, please contact Michael Jurewitz,
Developer Tools Evangelist who has also been on stage.

01:06:19.530 --> 01:06:24.890
We have a lot of great documentation for iPhone
development and for the tools in general.

01:06:24.889 --> 01:06:31.549
And actually in Xcode 3.2 which is-- what
you get as a prereleasewith the Snow Leopard,

01:06:31.550 --> 01:06:34.940
the documentation integration in
Xcode has been greatly improved.

01:06:34.940 --> 01:06:37.769
So I encourage you to take a look at that.

01:06:37.769 --> 01:06:42.259
I encourage you to run the prerelease
tools and provide feedback about those.

01:06:42.260 --> 01:06:46.450
Remember when it comes time to ship your app,
you need to build that using a released tool set

01:06:46.449 --> 01:06:50.730
and currently that's the one you get
with the iPhone 3 SDK, that's Xcode 3.1.