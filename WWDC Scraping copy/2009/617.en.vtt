WEBVTT

00:00:13.189 --> 00:00:16.239
>> Welcome to our session on Deploying Mobile Access Server.

00:00:16.239 --> 00:00:17.719
My name is Steve Cervera.

00:00:17.719 --> 00:00:22.070
I am the Solutions Architect Manager
for Apple Education Sales

00:00:22.070 --> 00:00:27.679
I am joined by my colleagues Al Begley, John
Murata and Greg Vaughan, Software Engineers

00:00:27.679 --> 00:00:30.910
and Principal Architects of Mobile Access Server.

00:00:30.910 --> 00:00:38.649
So what we are going to talk about today is what Mobile
Access Server is, what problems it solves and we are going

00:00:38.649 --> 00:00:41.789
to get under the hood a bit and look at how it works.

00:00:41.789 --> 00:00:46.950
We will talk about some deployment scenarios
and then we are going to give you a brief demo

00:00:46.950 --> 00:00:50.450
on how simple it is to configure Mobile Access Server.

00:00:50.450 --> 00:00:53.120
I will then take your questions.

00:00:53.119 --> 00:01:01.209
So Apple built Mobile Access Server as a way to
provide iPhone users with secure on-the-go access

00:01:01.210 --> 00:01:06.070
to company information or, in the
case of education, school information.

00:01:06.069 --> 00:01:12.529
Now Mac OS X server has excellent services for Mobile users.

00:01:12.530 --> 00:01:21.090
The challenge up to now has been how to provide
secure access to those services across a firewall

00:01:21.090 --> 00:01:25.600
without the need to configure a VPN on each client.

00:01:25.599 --> 00:01:29.059
So we built Mobile Access Server with this in mind.

00:01:29.060 --> 00:01:35.640
We wanted to provide secure access to web
services, iCal server, Address Book Server,

00:01:35.640 --> 00:01:42.849
and mail services without the need to touch
any of the clients to configure a VPN on them.

00:01:42.849 --> 00:01:53.489
And all communication is secure and securely encrypted
over SSL, and only access to specified servers

00:01:53.489 --> 00:01:58.169
and services is granted to authorized users.

00:01:58.170 --> 00:02:06.530
So one of the design goals for Mobile Access Server
was to make it simple to configure and administer

00:02:06.530 --> 00:02:09.250
and we have done that and you will see that in a bit.

00:02:09.250 --> 00:02:12.150
We also wanted to make it easy to connect through.

00:02:12.150 --> 00:02:16.580
We didn't want you to have to configure
anything on your device in order

00:02:16.580 --> 00:02:21.800
to access resources through Mobile Access Server.

00:02:21.800 --> 00:02:31.080
We have implemented a system that allows us to
maintain a common name space, say for a web URL,

00:02:31.080 --> 00:02:36.270
whether accessing it from the internal
network or from the external network,

00:02:36.270 --> 00:02:39.580
and you will see why that is important in just a bit.

00:02:39.580 --> 00:02:48.240
And while we have designed Mobile Access Server
principally for the iPhone, certainly any mobile computer

00:02:48.240 --> 00:02:52.360
or the iPod touch can utilize Mobile Access Server as well.

00:02:52.360 --> 00:03:01.550
Now Mobile Access Server is built on the
idea of a reverse proxy, a reverse web proxy.

00:03:01.550 --> 00:03:06.200
To kind of understand that, let's
review what a forward proxy is.

00:03:06.199 --> 00:03:12.799
With a forward proxy, we have our internal network
and our external network and typically we have a host

00:03:12.800 --> 00:03:21.630
that receives queries from our internal clients and
then forwards those on to servers out on the internet

00:03:21.629 --> 00:03:30.939
and typically we will use this to either optimize
performance by caching web pages on that proxy server

00:03:30.939 --> 00:03:35.439
or to use it to control access to the internet.

00:03:35.439 --> 00:03:44.219
Now with the reverse proxy, typically this is used today,
if you have a rack say of web servers on the back end

00:03:44.219 --> 00:03:52.009
and you want to provide load balancing to those servers,
you place a host in the front end to receive the request

00:03:52.009 --> 00:03:57.000
from the clients and then distribute
them among the backend servers.

00:03:57.000 --> 00:04:06.509
If you will recall, we introduced the configuration
of reverse proxies in the GUI in Leopard Server

00:04:06.509 --> 00:04:13.439
and this was principally done to provide load
balancing for Ruby on Rails and Mongrel applications.

00:04:13.439 --> 00:04:22.319
Now we have taken it a step further in Snow Leopard to
provide secure access through the Mobile Access Server.

00:04:22.319 --> 00:04:30.079
Now there are three common implementation
schemes for implementing reverse proxies.

00:04:30.079 --> 00:04:33.339
The next couple of slides I am
going to go over some of those

00:04:33.339 --> 00:04:39.259
and it will help you understand why
we chose the scheme that we did.

00:04:39.259 --> 00:04:41.539
Now let's just define some terminology.

00:04:41.540 --> 00:04:44.689
Obviously, we know what a client is
and I will be referring to the client

00:04:44.689 --> 00:04:48.920
as an iPhone or iPod touch or a laptop computer.

00:04:48.920 --> 00:04:54.650
We have discussed the proxy server and I
want to introduce the term origin server.

00:04:54.649 --> 00:05:02.229
The origin server is the server that the clients connect
to and that is the origination source of the services,

00:05:02.230 --> 00:05:08.400
whether it is mail, iCalendar server, or web services.

00:05:08.399 --> 00:05:14.500
So with that in mind, let's take a look at some
common schemes for implementing reverse proxy.

00:05:14.500 --> 00:05:17.730
In this diagram, we have got our
internal network and our external network.

00:05:17.730 --> 00:05:23.030
We have got an origin server named wiki.example.com.

00:05:23.029 --> 00:05:29.769
We have our Wiki proxy; this is our reverse proxy
that spans the internal and the external network.

00:05:29.769 --> 00:05:39.879
Our client is going to address the Wiki proxy, the
reverse proxy in this case, wikiproxy.example.com.

00:05:39.879 --> 00:05:45.569
That reverse proxy then forwards
the request onto the origin server.

00:05:45.569 --> 00:05:50.019
And one of the challenges here is
when we are accessing that Wiki server

00:05:50.019 --> 00:05:55.769
from the internal network we are addressing
it directly using wiki.example.com,

00:05:55.769 --> 00:06:03.389
but when we move to the external network, we now
need to address it with wikiproxy.example.com.

00:06:03.389 --> 00:06:08.300
So the problem that exists is, we have disparate
name spaces, so any links that we create

00:06:08.300 --> 00:06:13.639
from the internal network no longer
work when we are on the outside network.

00:06:13.639 --> 00:06:20.769
Now what if we want to use this reverse proxy to proxy not
just one server, but many servers, well there is another way

00:06:20.769 --> 00:06:31.969
to implement reverse proxy that allows us to do that
and we do that by modifying the path to the, in the URL.

00:06:31.970 --> 00:06:41.360
So here in this case, we are going to be addressing
wikiproxy.example.com/ and then the name of the host,

00:06:41.360 --> 00:06:43.910
the origin server that we want to access.

00:06:43.910 --> 00:06:50.930
In this case, it is Wiki and of course if we had
an iCalendar server named foo it would be /foo.

00:06:50.930 --> 00:06:59.990
So this method gives us or presents the same
challenge in that we have a disparate name space,

00:06:59.990 --> 00:07:06.180
so again any links created on the internal
network no longer work from the external network.

00:07:06.180 --> 00:07:16.879
So we have chosen to implement a reverse proxy that
depends on split DNS to accomplish a constant host name

00:07:16.879 --> 00:07:25.529
and constant path, so in this example, we have
again our Wiki server on the internal network.

00:07:25.529 --> 00:07:31.919
We now have a Mobile Access Server, this is our
reverse proxy server, again spanning the network,

00:07:31.920 --> 00:07:42.129
and here our internal DNS, I'm sorry, our ISP's
DNS is configured to resolve wiki.example.com

00:07:42.129 --> 00:07:45.879
to the IP address of our Mobile Access Server.

00:07:45.879 --> 00:07:53.730
The Mobile Access Server then passes that
request onto the internal origin server.

00:07:53.730 --> 00:08:02.390
Now the benefit here is when we are on the internal network,
we are going to be querying our internal DNS server.

00:08:02.389 --> 00:08:10.879
The internal DNS server resolves wiki.example.com
to the IP address of the origin server;

00:08:10.879 --> 00:08:13.810
we are completely bypassing Mobile
Access Server at this point.

00:08:13.810 --> 00:08:15.720
We don't need Mobile Access Server.

00:08:15.720 --> 00:08:28.730
We have direct access to the origin server and so we make
bookmarks here and then we go home or out of the network.

00:08:28.730 --> 00:08:39.210
Now our client is going to query our ISP's DNS server,
which resolves wiki.example.com to the Mobile Access Server,

00:08:39.210 --> 00:08:42.370
which grants access to the origin server.

00:08:42.370 --> 00:08:47.740
Now here the bookmarks we created on
the internal network work just fine

00:08:47.740 --> 00:08:53.269
from the internet and our web apps work just fine too.

00:08:53.269 --> 00:09:01.460
So to review, split DNS is a key
to deploying Mobile Access Server.

00:09:01.460 --> 00:09:11.930
Here we have the Mobile Access Server multi-homed in the
DMZ, the demilitarized zone or the border zone, and the,

00:09:11.929 --> 00:09:19.870
our internal DNS server is configured to resolve
the host name of the origin server to the IP address

00:09:19.870 --> 00:09:30.960
of the origin server, but our external DNS server, our
ISP's DNS server is configured to resolve the host name

00:09:30.960 --> 00:09:37.990
of the origin server to the IP address of
the Mobile Access Server, which then goes on

00:09:37.990 --> 00:09:40.419
and passes that request onto the origin server.

00:09:40.419 --> 00:09:49.029
So to give you an idea, from the external network,
external DNS is configured to resolve wiki.example.com

00:09:49.029 --> 00:10:02.439
to say 63.x.y.z. But our internal DNS is configured
to resolve the origin server to the interface

00:10:02.440 --> 00:10:07.240
of the origin server, so bypassing Mobile Access entirely.

00:10:08.740 --> 00:10:14.769
As with any server placed in the DMZ,
it is important to protect that server

00:10:14.769 --> 00:10:20.329
with tight firewall rules and the use of certificates.

00:10:20.330 --> 00:10:27.830
So with regard to certificates, it is
important to use CA-issued certificates.

00:10:27.830 --> 00:10:32.600
Why? You can use self-signed certificates,
they will work, they will function,

00:10:32.600 --> 00:10:41.290
but your users will receive this warning indicating that
the certificate presented by the server is invalid and if,

00:10:41.289 --> 00:10:46.779
as a matter of business practice you are using
self-signed certificates and you are training your users

00:10:46.779 --> 00:10:55.100
to accept this warning, then you are training them to
ignore a very important warning that could protect them

00:10:55.100 --> 00:11:01.990
from a rogue server, so it is important
to use CA- issued certificates.

00:11:01.990 --> 00:11:09.909
Now in the event that you really need to use a self-signed
certificate, you can make this error go away simply

00:11:09.909 --> 00:11:17.620
by copying the root certificate to each of the
devices that will be accessing Mobile Access Server.

00:11:17.620 --> 00:11:23.250
Of course, now you have to touch each
device and that kind of defeats the point

00:11:23.250 --> 00:11:24.940
of Mobile Access Server in the first place.

00:11:24.940 --> 00:11:32.420
So we think it is a good investment to purchase
the CA- issued certificate for this application.

00:11:32.419 --> 00:11:39.399
Now it is also important to tighten up your
firewall rules to make sure that any host access

00:11:39.399 --> 00:11:46.809
in the Mobile Access Server from the external network is
only able to get to the server through the ports necessary

00:11:46.809 --> 00:11:52.009
to access the services from the origin server.

00:11:52.009 --> 00:12:00.620
And similarly on the inside interface, it is important
to create rules that allow that Mobile Access Server

00:12:00.620 --> 00:12:08.730
to only access the directory services and the
origin servers that it is serving proxy for.

00:12:08.730 --> 00:12:19.340
Security is obviously very important for this server
and so, in this role, so all data is encrypted over SSL

00:12:19.340 --> 00:12:30.769
from the client to the proxy and only access, access is only
granted to the Mobile Access Server for authenticated users.

00:12:30.769 --> 00:12:37.559
Users must be authenticated either against Open Directory
or active directory and we have a mechanism built

00:12:37.559 --> 00:12:48.039
in called Auth throttle back that will incur a decreasing
delay on repeated failed attempts to authenticate

00:12:48.039 --> 00:12:53.589
and so that helps to thwart brute force attacks.

00:12:53.590 --> 00:12:58.370
Now once a user is authenticated,
the user must also be authorized.

00:12:58.370 --> 00:13:06.289
So we have a whitelist authorization system and you
see a screenshot here that shows the default setting is

00:13:06.289 --> 00:13:12.709
that all authenticated users are allowed to
access web mail, iCal and Address Book Servers.

00:13:12.710 --> 00:13:20.370
But obviously, you are probably going to want to tighten
that up a bit and grant access only to the users,

00:13:20.370 --> 00:13:25.830
individual users, or groups of users for
the specific servers that they require.

00:13:25.830 --> 00:13:32.780
So you see in this example here, the students
group has access only to web services.

00:13:32.779 --> 00:13:39.289
Whereas our remote workers group has access to all of the
services available in Mobile Access Server and obviously,

00:13:39.289 --> 00:13:46.939
we can provide John and Al with
the services they require as well.

00:13:46.940 --> 00:13:54.750
Now access through the Mobile Access Server varies a bit
depending on the service and the protocol being used,

00:13:54.750 --> 00:14:03.899
so let's start off with the way, talking about the access
through Mobile Access Server for web and Wiki services.

00:14:03.899 --> 00:14:10.750
Here we have created a customization and a
patchy plugin called mod_auth_session_apple

00:14:10.750 --> 00:14:15.230
that provides access only to the web server.

00:14:15.230 --> 00:14:22.509
What it does is provide a login user interface
to allow the user after making a request

00:14:22.509 --> 00:14:28.110
for an internal server, to log in with their credentials?

00:14:28.110 --> 00:14:35.909
Now upon a failed authentication, the user
will be redirected to an access denied URL

00:14:35.909 --> 00:14:41.159
and then there is a Try Again button that
will allow them to try and authenticate again,

00:14:41.159 --> 00:14:43.799
so maybe they fat-fingered their password.

00:14:43.799 --> 00:14:53.639
And if they are trying to hack the system, they will run
into this brick wall here with Auth throttle back and,

00:14:53.639 --> 00:15:00.230
upon repeated failed attempts, will create
an increasing delay between the time

00:15:00.230 --> 00:15:04.580
that the login user interface is presented to them again.

00:15:04.580 --> 00:15:15.620
And so once we authenticate, then the user is
automatically redirected to the URL they they've requested.

00:15:15.620 --> 00:15:27.139
Now we don't want to have to make the user log into
Mobile Access User for every server they want to access

00:15:27.139 --> 00:15:30.250
and so there is an option here to keep me logged in,

00:15:30.250 --> 00:15:36.039
in which case a session cookie is
created that has a 14-day expiration.

00:15:36.039 --> 00:15:42.839
So in that time period, they will no longer have
to authenticate against the Mobile Access Server.

00:15:42.840 --> 00:15:48.340
Let's take a look at how this works with web services.

00:15:48.340 --> 00:15:56.360
Here we have on our internal network, our origin server,
wiki.example.com serving up some Snow Leopard Wiki pages

00:15:56.360 --> 00:16:02.269
and spanning the internal and external
network is our Mobile Access Server.

00:16:02.269 --> 00:16:11.370
Our external DNS, the ISP's DNS is resolving that host
name to the IP address of the Mobile Access Server.

00:16:11.370 --> 00:16:15.139
Now our client here is making a request over HTTP.

00:16:15.139 --> 00:16:24.059
The Mobile Access Server will immediately redirect
this to HTTPS an encrypted communication over SSL.

00:16:24.059 --> 00:16:34.379
So the request comes in now with SSL and the Mobile Access
Server will then authenticate the server and check the user

00:16:34.379 --> 00:16:40.870
against the whitelist, assuming the user is both
authenticated and authorized through the whitelist,

00:16:40.870 --> 00:16:47.750
the request is passed on to the Wiki server and
the information is passed back to the client.

00:16:47.750 --> 00:16:57.409
Now let's take a look at a case where the user
is authenticated, but not on the whitelist.

00:16:57.409 --> 00:16:59.689
Well that is a red condition.

00:16:59.690 --> 00:17:05.380
Also if the user is not authenticated
obviously and not on the whitelist,

00:17:05.380 --> 00:17:08.890
access through the Mobile Access Server will be denied

00:17:08.890 --> 00:17:14.250
and the user will not get any further,
so that is an important feature.

00:17:14.250 --> 00:17:19.400
Now let's take a look at the user experience from an iPhone.

00:17:19.400 --> 00:17:25.750
Now here we are entering the URL for the server
we are trying to access wiki.example.com.

00:17:25.750 --> 00:17:35.859
Notice we are accessing this through HTTP that
will then get redirected automatically to HTTPS.

00:17:35.859 --> 00:17:43.969
But this is an important concept here, because remember we
want our users to be able to access this server regardless

00:17:43.970 --> 00:17:48.569
of whether they are on the internal
network or on the external network.

00:17:48.569 --> 00:17:53.950
And this is why split DNS is so important
in implementing Mobile Access Server

00:17:53.950 --> 00:17:58.730
to enable us to maintain that single name space.

00:17:58.730 --> 00:18:08.220
So when we click Go, we are then brought
automatically to this login user interface.

00:18:08.220 --> 00:18:11.549
This is a construct of Mobile Access Server.

00:18:11.549 --> 00:18:19.089
Mobile Access Server is saying okay, to go any further,
you need to be authenticated, so you enter your credentials

00:18:19.089 --> 00:18:24.359
and we also, you see the option to keep me logged in.

00:18:24.359 --> 00:18:32.000
Again, that will create a session cookie that will
last for 14 days and we click the Log In button.

00:18:32.000 --> 00:18:39.839
Uh oh, this user is not authenticated, this
is the access denied URL that they receive.

00:18:39.839 --> 00:18:44.579
So we fat-fingered that, we got it right this time.

00:18:44.579 --> 00:18:51.699
We are then brought to this URL, which indicates that
the user has been authenticated, has been authorized

00:18:51.700 --> 00:18:57.670
and we will automatically be redirected
to the URL that we requested.

00:18:57.670 --> 00:19:08.460
In this case, it is a Snow Leopard Wiki, so remember I said
that we have this option to keep me logged in for 14 days.

00:19:08.460 --> 00:19:18.289
Well what happens if for some reason in that 14-day period,
we need to take access away from that particular user.

00:19:18.289 --> 00:19:19.609
So what do we do?

00:19:19.609 --> 00:19:25.589
Well quite simply, we can remove that user from
the whitelist, either their account or the group

00:19:25.589 --> 00:19:29.250
that they are a member of or take
them out of the group membership.

00:19:29.250 --> 00:19:38.769
In any case, if they are not on the whitelist, at any point,
we are constantly examining the HTTP authorization headers

00:19:38.769 --> 00:19:42.400
to extract the username and compare to this whitelist.

00:19:42.400 --> 00:19:50.820
If they are not on the whitelist, they will receive this
URL so access will be denied at the Mobile Access Server.

00:19:52.470 --> 00:20:01.390
So most applications should work just fine
through the web proxy and Mobile Access Server.

00:20:01.390 --> 00:20:03.990
There are a couple things to keep in mind.

00:20:03.990 --> 00:20:11.319
Some applications will require the
IP address of the requesting client.

00:20:11.319 --> 00:20:18.129
And because we are proxying here and we need
the address of the original requesting client,

00:20:18.130 --> 00:20:23.280
you need to get that information
from the X-Forwarded-For header.

00:20:23.279 --> 00:20:29.710
Also, you should try to make your
links relative wherever possible.

00:20:29.710 --> 00:20:36.640
Consider the fact then when we are on the internal network,
we are going to be in most cases accessing our web servers

00:20:36.640 --> 00:20:44.960
over HTTP, but when we access those same web servers
from the external network, what is going to happen?

00:20:44.960 --> 00:20:48.630
It is going to automatically be redirected to HTTPS.

00:20:48.630 --> 00:20:55.580
So if you make your links absolute, then
you are going to have a broken link.

00:20:55.579 --> 00:21:04.399
Also, remember that you can only access other servers
that are proxied as well and so any links that you make

00:21:04.400 --> 00:21:13.970
in an application or a website need to link to other
proxied applications or other proxied web servers rather

00:21:13.970 --> 00:21:19.730
or to public hosts, obviously then we
are bypassing our own network entirely.

00:21:19.730 --> 00:21:27.460
Now if your application is or your website
is using some kind of authentication,

00:21:27.460 --> 00:21:32.930
you need to use basic digest or
session cookie authentication.

00:21:32.930 --> 00:21:38.080
Remember we are examining those
authorization headers and as a result,

00:21:38.079 --> 00:21:43.199
we can't use Kerberos in that type of an implementation.

00:21:44.730 --> 00:21:54.750
Now in server admin for web services, in an effort to keep
the user interface simple, we use name based virtual hosts.

00:21:54.750 --> 00:22:04.680
As a result, that requires all virtual hosts, in this
case proxy virtual hosts to listen in on all IP addresses,

00:22:04.680 --> 00:22:12.340
but because we are using SSL, we run into
the host header versus SSL certificate issue.

00:22:12.339 --> 00:22:20.589
You see the host header provides the information about
which virtual host should respond to the request,

00:22:20.589 --> 00:22:30.000
but we can't examine the host header to determine who the
virtual host is until we use the correct certificate to do

00:22:30.000 --> 00:22:36.210
that and if each virtual host is
using a different certificate,

00:22:36.210 --> 00:22:40.259
Apache has no idea which virtual host should respond.

00:22:40.259 --> 00:22:46.879
So there are a couple of ways around that, the
first one is to use a wild card certificate.

00:22:46.880 --> 00:22:55.930
Now we are using one certificate for all the web, the
virtual hosts in your domain and so Apache then needs

00:22:55.930 --> 00:23:08.590
to take the request, apply the single wild card certificate
to decrypt and then to determine who the host header is,

00:23:08.589 --> 00:23:13.119
I'm sorry or the virtual host is that needs to respond.

00:23:13.119 --> 00:23:20.689
Another solution is just to make your proxy
virtual host be port specific to help identify

00:23:20.690 --> 00:23:31.860
which virtual host should respond and finally it is
possible to manually configure the virtual host config file,

00:23:31.859 --> 00:23:36.669
we don't recommend this, because it
is possible that any changes made here

00:23:36.670 --> 00:23:46.150
in the config file would be overwritten
by any changes made to the GUI.

00:23:46.150 --> 00:23:52.009
So let's take a look now at iCal
server and address book server

00:23:52.009 --> 00:23:54.970
and take a look at the access mechanisms employed there.

00:23:54.970 --> 00:24:01.710
They are similar because they are also utilizing the
HTTP protocol and but here we don't have an option

00:24:01.710 --> 00:24:10.019
to present a log in interface to the user as we do with
access through a web browser, so we have a different plug-in

00:24:10.019 --> 00:24:13.420
that we have created called mod_auth_user_host_apple.

00:24:13.420 --> 00:24:16.009
This does authorization only.

00:24:16.009 --> 00:24:24.279
Here we are relying on the iCal Server and the
Address Book Server to do the authentication

00:24:24.279 --> 00:24:33.599
and here again we are extracting the username from the
HTTP authorization headers to compare that to the whitelist

00:24:33.599 --> 00:24:43.329
and so here again basic and digest authentication
should be configured and not Kerberos.

00:24:43.329 --> 00:24:48.470
So once we extract that username,
we check it against the whitelist

00:24:48.470 --> 00:24:54.850
and then determine whether this user
has access for the requested service.

00:24:54.849 --> 00:24:58.039
Let's take a look at how this list works.

00:24:58.039 --> 00:25:06.299
Here now our origin server is an iCal Server, our Mobile
Access Server again spans the external and internal network

00:25:06.299 --> 00:25:17.369
and our client is going to connect with
CalDAV over HTTPS, unlike with web services,

00:25:17.369 --> 00:25:24.899
the Mobile Access Server doesn't redirect
an HTTP request back over to HTTPS.

00:25:24.900 --> 00:25:31.900
So it is important to know that your users on their
device need to configure their iCal client to use SSL.

00:25:31.900 --> 00:25:43.280
So once the connection is made, the request is passed
on to the iCal Server, the user is authenticated

00:25:43.279 --> 00:25:53.799
and the reply is sent again through the Mobile Access Server
and the whitelist checked, the user is on the whitelist,

00:25:53.799 --> 00:26:03.309
the information is passed on to the client and of course
if the user is authenticated, but not on the whitelist,

00:26:03.309 --> 00:26:09.490
then access is denied and the information never
gets back out through the Mobile Access Server.

00:26:09.490 --> 00:26:17.089
Alright let's take a look now at mail services,
we are using IMAP and SMTP protocols here

00:26:17.089 --> 00:26:26.849
and the Mobile Access Server acts as a mail proxy in
this situation proxying IMAP commands and SMTP commands.

00:26:26.849 --> 00:26:35.669
Now we have only tested this with Apple's mail server, but
there is nothing that we are doing to prevent anybody's IMAP

00:26:35.670 --> 00:26:42.640
or SMTP server from working, it
is just not a test case for us.

00:26:42.640 --> 00:26:52.930
So in this particular implementation, the Mobile Access
Server both authenticates and authorizes the users

00:26:52.930 --> 00:26:57.009
at the proxy before they can access the mail server.

00:26:57.009 --> 00:27:00.029
Let's take a look at how that works.

00:27:00.029 --> 00:27:06.079
So with a mail proxy, the Mobile Access
Server is acting both as a mail client,

00:27:06.079 --> 00:27:13.279
a proxy mail client to the origin server on
the internal network and as a proxy mail server

00:27:13.279 --> 00:27:18.649
to our physical client on the external network.

00:27:18.650 --> 00:27:24.640
And the way this works out is we have our
origin server, in this case our mail server.

00:27:24.640 --> 00:27:26.490
We have got our Mobile Access Server.

00:27:26.490 --> 00:27:36.859
Notice here the origin server is mail.example.com
for mail services we have mail.proxy.example.com

00:27:36.859 --> 00:27:42.629
so we are not using the same name space in this particular
case and I will talk more about that in a moment.

00:27:42.630 --> 00:27:49.290
So our client makes a request for
an IMAP connection, again over SSL,

00:27:49.289 --> 00:27:54.250
no redirection here, just needs to use SSL or it won't work.

00:27:54.250 --> 00:28:04.119
The Mobile Access Server then authenticates the user, if the
user authentication fails, obviously they are denied access

00:28:04.119 --> 00:28:11.849
and if the user is authenticated, but not on the
whitelist, they will be denied access as well

00:28:11.849 --> 00:28:20.059
Of course, if the user is both authenticated
and on the whitelist, the client,

00:28:20.059 --> 00:28:27.710
the request is passed on to the origin server and
the mail is retrieved to the requesting client.

00:28:27.710 --> 00:28:35.640
We spoke about the importance of split DNS to maintain
this common name space, where when our client is

00:28:35.640 --> 00:28:44.670
on the internal network, they will be querying the internal
DNS server and will be accessing directly the origin server,

00:28:44.670 --> 00:28:54.529
the internal DNS server resolves the IP address directly to
the origin server and when we move to the external network,

00:28:54.529 --> 00:28:59.389
the ISP's DNS server is going to
resolve that origin server host name

00:28:59.390 --> 00:29:04.009
to the Mobile Access Server, well
with mail we can't do that.

00:29:04.009 --> 00:29:14.470
The mail protocol does not support this type of redirection
and so here, you are going to point your mobile clients

00:29:14.470 --> 00:29:19.519
to the Mobile Access Server as their mail server.

00:29:19.519 --> 00:29:25.410
Okay, so clients then whether they are on the internal
network or the external network will be pointing

00:29:25.410 --> 00:29:33.220
to in this case, it is mailproxy.example.com and the
Mobile Access Server will of course forward that request

00:29:33.220 --> 00:29:36.980
on to the origin server as the mail proxy.

00:29:36.980 --> 00:29:43.870
Now we have given you a look under the
hood and maybe you are saying geez,

00:29:43.869 --> 00:29:46.379
this doesn't look so simple, Steve said it was simple.

00:29:46.380 --> 00:29:53.350
It really is simple and I am going to have John
Murata come up and demonstrate to you how simple it is

00:29:53.349 --> 00:29:56.379
to configure and administer Mobile Access Server.

00:29:56.380 --> 00:30:00.170
>> So, I want to show you how easy it
is to configure a Mobile Access Server.

00:30:00.170 --> 00:30:05.160
I am going to launch my Mac OS X Server admin app.

00:30:05.160 --> 00:30:10.690
It is going to come up and it is going to show a
Mac OS Server that I have running on a private LAN,

00:30:10.690 --> 00:30:16.950
the server is fully qualified domain name
inside my LAN is myserver.example.com

00:30:16.950 --> 00:30:22.759
and as you can see I have an open
directory service, my Address Book, iCal,

00:30:22.759 --> 00:30:27.549
mail and web services all running on this server here.

00:30:27.549 --> 00:30:33.859
Now I want to make the Wiki web service that
I have on my LAN available to my iPhone,

00:30:33.859 --> 00:30:41.909
so let me show you how in Snow Leopard, we have made it
easy to add secure Mobile Access to a private network.

00:30:41.910 --> 00:30:48.890
So first, I am going to add an OS X Server to my
network and this is going to run my Mobile Access proxy

00:30:48.890 --> 00:30:57.270
and I can do this right here in my server admin app,
using its ability to configure multiple OS X servers.

00:30:58.730 --> 00:31:18.700
So here is my proxy server and my proxy server is available
through my ISP's DNS as myserver.example.com and this is

00:31:18.700 --> 00:31:28.100
of course the same name as what I am using internally and my
server, because it is on the internet is running a firewall

00:31:28.099 --> 00:31:33.579
and my firewall is configured to allow access
to those services that I am going to be using.

00:31:33.579 --> 00:31:43.000
So let's go ahead and add my Mobile Access
Service to this proxy machine, there it is.

00:31:43.000 --> 00:31:48.950
Mobile Access uses SSL, so that means
I need my CA-issued certificates.

00:31:48.950 --> 00:31:59.670
I have already imported into server admin the certificates
that I will be using, so now I am ready to add Web Access,

00:31:59.670 --> 00:32:06.200
and I'll do that here in my Mobile Access Settings.

00:32:06.200 --> 00:32:12.009
I type in the name of my internal server.

00:32:12.009 --> 00:32:18.730
[ Typing ]

00:32:18.730 --> 00:32:20.009
And that's it.

00:32:20.009 --> 00:32:27.180
[ Inaudible ]

00:32:27.180 --> 00:32:28.500
Thank you.

00:32:33.170 --> 00:32:37.340
All right, that leads me to the
next dialog, the Edit Dialog.

00:32:38.410 --> 00:32:41.240
So, as you can see here, if I want
to check my incoming connections,

00:32:41.240 --> 00:32:45.000
I can do that here in the Edit Dialog and fix my host name.

00:32:45.000 --> 00:32:53.599
And all of my URLs are going to be redirected to my incoming
port, 443, and it's going to do it over HTTPS using SSL.

00:32:53.599 --> 00:33:04.279
And so, this is going to happen automatically,
whether I'm inside or outside of my LAN,

00:33:04.279 --> 00:33:07.190
on the private LAN or on the public internet.

00:33:08.279 --> 00:33:09.139
And that's it.

00:33:09.140 --> 00:33:12.440
If I need to add another server, I can do that right here.

00:33:12.440 --> 00:33:21.500
Also, only these servers that I add in the
interface you see here are going to be accessible

00:33:21.500 --> 00:33:25.329
from the public internet through the Mobile Access proxy.

00:33:26.420 --> 00:33:32.860
Now, I'd like to also have access to
my private mail server from my iPhone,

00:33:32.859 --> 00:33:44.569
so I'm going to add my mail server
on this particular internal server.

00:33:46.160 --> 00:33:56.259
And, in this case, I want to have my DNS name be something
unique, mail.example.com, something so that I can access it

00:33:56.259 --> 00:34:05.240
through my ISP's DNS and since I'm changing the DNS
name, I'm going to need a certificate that matches.

00:34:05.240 --> 00:34:14.980
If I happen to have a wild card certificate, then I
can go ahead and use that for all my domain names.

00:34:14.980 --> 00:34:23.619
There, I've secured mail and web access to
my internal network, and let's go ahead now,

00:34:23.619 --> 00:34:26.239
and authorize some users to access this server

00:34:26.239 --> 00:34:30.000
I'm going to click on my Access Panel.

00:34:30.000 --> 00:34:36.670
Right now, it's allowing all authenticated users
access to the two services that I've set up.

00:34:36.670 --> 00:34:42.809
I can restrict my access to just
those users I'm going to specify.

00:34:42.809 --> 00:34:49.250
I have an open-directory server running,
so I should have access to all of my users.

00:34:49.250 --> 00:34:57.010
And I'm going to ad Al and myself.

00:34:57.010 --> 00:35:02.020
[ Typing ]

00:35:02.019 --> 00:35:03.739
Not quite that smart.

00:35:05.639 --> 00:35:11.670
So there are a lot of other users who want access, so
since this is an open directory, I can just go ahead

00:35:11.670 --> 00:35:17.470
and add a couple of groups to handle
the rest of the users who need access.

00:35:17.469 --> 00:35:24.159
Then you save, start Mobile Access, the light is green,

00:35:24.159 --> 00:35:30.339
and that is configuring the new
Mobile Access Server on OS X Server.

00:35:30.340 --> 00:35:38.340
>> I just want to summarize here, the ability for Mobile
Access Server just to provide secure and simple access

00:35:38.340 --> 00:35:47.400
to your web mail, iCal and Address Book Servers,
without the need to configure any clients.

00:35:47.400 --> 00:35:50.200
Also, the administration is simple.

00:35:50.199 --> 00:35:56.379
A key message here is the correct
implementation of split DNS is the key

00:35:56.380 --> 00:36:00.599
to success here, with implementing Mobile Access Server.

00:36:00.599 --> 00:36:02.849
Here's where you can go for some more information.