WEBVTT

00:00:12.779 --> 00:00:16.719
>> My name is Simon Fraser, I'm tech
lead on the Rich Media Team which is part

00:00:16.719 --> 00:00:19.070
of the Internet Technologies Group at Apple.

00:00:19.070 --> 00:00:25.199
Today I'm going to talk about adding innovative
styling and animation to webpages with CSS Effects.

00:00:25.199 --> 00:00:26.009
>> Whoo.

00:00:26.010 --> 00:00:29.550
[ Applause ]

00:00:29.550 --> 00:00:31.190
>> It's good stuff, it is really exciting.

00:00:31.190 --> 00:00:36.210
Okay, so just to give you a brief coverage of what we're
going to talk about today, I'm going to talk about some

00:00:36.210 --> 00:00:43.509
of the cutting edge CSS features in WebKit, and I'm going
to show you how you can use these to create innovative

00:00:43.509 --> 00:00:47.070
and really exciting web experiences for your customers.

00:00:47.070 --> 00:00:52.130
Throughout the talk I'm going to tell you which of these
features are available in Safari on iPhone and Safari

00:00:52.130 --> 00:00:54.910
on desktop, and that's actually most of them.

00:00:54.909 --> 00:00:58.889
And then throughout the session I'm going to
give you some quick tips that you could do today

00:00:58.890 --> 00:01:01.799
to improve your website with some of these CSS Effects.

00:01:01.799 --> 00:01:06.069
So the talk is going to be broken into three main sections.

00:01:06.069 --> 00:01:12.349
In the first section I'm going to talk about CSS
Effects that you can do using text and images.

00:01:12.349 --> 00:01:16.140
In the second section I'll talk about
the two types of animation we have now

00:01:16.140 --> 00:01:19.849
in CSS, transitions and keyframe animations.

00:01:19.849 --> 00:01:27.549
And then in the third section I'll talk about
two-dimensional and three-dimensional transforms in CSS.

00:01:27.549 --> 00:01:30.509
But before I get started, I want to jump back a bit

00:01:30.510 --> 00:01:35.210
and ask why CSS Effects are important
or why we think they're important.

00:01:35.209 --> 00:01:38.509
So I'm I don't need to tell you, the
web designers and web developers,

00:01:38.510 --> 00:01:46.030
that the aesthetics of your webpages are vitally
important for the way that users perceive those webpages.

00:01:46.030 --> 00:01:53.239
For example, users are much more likely to find
a site or to think of a site as being trustworthy

00:01:53.239 --> 00:01:57.299
and credible if it has a really nice appearance.

00:01:57.299 --> 00:02:00.009
Would you want to put your credit card
number into a website that looks like this?

00:02:00.010 --> 00:02:02.550
[ Laughter ]

00:02:02.549 --> 00:02:03.920
>> Probably not.

00:02:03.920 --> 00:02:06.510
But you probably would for a site that looks like this.

00:02:06.510 --> 00:02:08.830
Looks much cleaner, much nicer, and much more reliable.

00:02:08.830 --> 00:02:13.830
So that's the first aspect of the
types of things obviously you'd use CSS

00:02:13.830 --> 00:02:17.280
to style this webpage to make it look really good.

00:02:17.280 --> 00:02:19.060
Now aesthetics and design are also important

00:02:19.060 --> 00:02:22.780
because they communicate the function
and behavior of the content to users.

00:02:22.780 --> 00:02:26.930
When users browse a page, they're looking
for information, they're looking for images,

00:02:26.930 --> 00:02:29.510
and they're looking for things they can interact with.

00:02:29.509 --> 00:02:37.629
So you can CSS Effects to style your content so it's
really obviously to the user what they can click on.

00:02:37.629 --> 00:02:40.469
Here's an example of a page which
has a really bad experience,

00:02:40.469 --> 00:02:43.969
like which of these brightly colored
things can you actually interact with?

00:02:43.969 --> 00:02:47.109
The answer is not much, it's only the list on the left.

00:02:47.110 --> 00:02:51.190
Compare that with a site where the buttons really look like
button, because they look kind of like the native buttons,

00:02:51.189 --> 00:02:53.639
they have this nice shine, 3D appearance to them.

00:02:53.639 --> 00:03:00.239
So you can use CSS to make elements on your page really
pop out and be really obvious as to what their function is.

00:03:00.240 --> 00:03:02.520
So this is a sort of static effect of the site.

00:03:02.520 --> 00:03:09.420
There are a couple of dynamic aspects of
aesthetics and behavior that are also important.

00:03:09.419 --> 00:03:15.280
Many webpages will have different states to the content,
you see often these sites where they have a slideshow

00:03:15.280 --> 00:03:21.099
or an image that pops out to fill the window
and so the user is focusing on that one thing.

00:03:21.099 --> 00:03:27.989
And it's important to communicate to the user
what's happening during those state changes.

00:03:27.990 --> 00:03:36.719
So here's an example where we take a video full screen
to zoom up to focus the user's attention on that video

00:03:36.719 --> 00:03:39.349
and you saw a nice transition affect when that comes up.

00:03:39.349 --> 00:03:44.590
We now have transitions in CSS that
make this kind of thing really easy.

00:03:44.590 --> 00:03:46.800
Here's another use of animations.

00:03:46.800 --> 00:03:49.090
[ Laughter ]

00:03:49.090 --> 00:03:51.349
>> Let me just do that pose.

00:03:51.349 --> 00:03:56.060
Animations are important because they communicate
the behavior of the underlying system to your users.

00:03:56.060 --> 00:04:00.640
So if your webpages may be pulling a database on
the backend then that's going to take some time,

00:04:00.639 --> 00:04:03.679
you can use an animation to communicate
to the user that something is going on.

00:04:03.680 --> 00:04:08.980
And we have CSS keyframe animations now which
make this type of thing really easy as well.

00:04:08.979 --> 00:04:13.159
So why do we think that CSS is
the right technology for this?

00:04:13.159 --> 00:04:19.050
Well cascading style sheets have been around for a
while now, and the way that you can separate the style

00:04:19.050 --> 00:04:24.540
from the content on your webpages, you can load a new
style sheet and have an entirely different appearance

00:04:24.540 --> 00:04:28.010
for your page without changing the content.

00:04:28.009 --> 00:04:32.230
This is useful because it allows you to tailor the
presentation of your content to different devices.

00:04:32.230 --> 00:04:35.370
You might have an iPhone style
sheet and a desktop style sheet.

00:04:35.370 --> 00:04:39.910
And you can use all the phone specific CSS properties

00:04:39.910 --> 00:04:44.370
to really tailor your content, for
example, adjusting the text size.

00:04:44.370 --> 00:04:49.879
And we like CSS also because it's very easy to author just
in a text editor or there are some great authoring tools

00:04:49.879 --> 00:04:54.060
from Mac OS X now that allow you to write to to CSS.

00:04:54.060 --> 00:04:59.240
And the final useful property of CSS
is that it allows a graceful fallback.

00:04:59.240 --> 00:05:03.870
What I mean by this is when a browser
encounters a CSS property

00:05:03.870 --> 00:05:07.360
that it doesn't understand, then they'll simply ignore it.

00:05:07.360 --> 00:05:13.230
What this allows us to do is to add new features
to CSS that you can use on your webpages,

00:05:13.230 --> 00:05:19.939
but these new properties will be ignored by the older
browsers, so you have a nice backward compatibility story.

00:05:19.939 --> 00:05:26.060
And because many of these are new features that
we've added, I'd like to take a moment to talk

00:05:26.060 --> 00:05:29.100
about how Apple innovates in web technology.

00:05:29.100 --> 00:05:34.260
And the way we like to do this is to work with
the other browser vendors and the standards bodies

00:05:34.259 --> 00:05:41.349
to put the properties that we think are
interesting into the Open Standards world.

00:05:41.350 --> 00:05:48.879
And we worked very hard with the HTML 5 working
group and the WHATWG on new elements in HTML 5,

00:05:48.879 --> 00:05:51.089
for example, the audio and video elements.

00:05:51.089 --> 00:05:56.469
And then a lot of the properties I'm going to
talk about today have been submitted to the W3C

00:05:56.470 --> 00:06:01.850
in various working drafts that we've offered and
we're working with, with the CSS working group.

00:06:01.850 --> 00:06:07.420
Now many of these are still draft properties,
the standards haven't been finalized yet,

00:06:07.420 --> 00:06:11.790
and because of that you'll see a
lot of -WebKit in my slides today.

00:06:11.790 --> 00:06:17.030
And that -WebKit indicates that these properties
are sort of protected by a name space that allows us

00:06:17.029 --> 00:06:19.829
to do innovation without breaking consistent pages.

00:06:19.829 --> 00:06:25.539
So everything I'm going to talk
about today is just web development.

00:06:25.540 --> 00:06:31.240
If you already write webpages and know a bit of CSS,
this should be really easy for you all to pick up.

00:06:31.240 --> 00:06:38.280
It's almost all CSS in fact, there are a few
small places where we touch the JavaScript

00:06:38.279 --> 00:06:41.959
and we have a few DOM events related
to animations that I'll touch on later.

00:06:41.959 --> 00:06:48.389
And almost everything I'm going to talk about
works in Safari on iPhone and Safari on desktop.

00:06:48.389 --> 00:06:54.680
And of course if you're embedding WebKit in your native
apps both on the phone and UIWebView and on the desktop

00:06:54.680 --> 00:06:57.509
on WebView, you can use all of these
new properties because you know

00:06:57.509 --> 00:07:02.939
which browser version your content
is going to be rendered in.

00:07:02.939 --> 00:07:07.250
So we have some great demos today and some really
nice content, so I'd like to invite my colleague,

00:07:07.250 --> 00:07:10.000
Dean Jackson on the stage to show you the first demo.

00:07:10.000 --> 00:07:17.740
[ Applause ]

00:07:17.740 --> 00:07:24.500
>> So it's actually not a coincidence that Simon is wearing
the same clothes, he wears the same clothes everyday.

00:07:24.500 --> 00:07:25.629
[ Laughter ]

00:07:25.629 --> 00:07:28.500
>> So I'm Dean, I work on the Rich Media Team.

00:07:28.500 --> 00:07:31.860
Rich Media is sort of a generic
term, it doesn't mean anything.

00:07:31.860 --> 00:07:37.870
The way I like to think of it is it's an experience, you're
trying to provide the best experience on your website.

00:07:37.870 --> 00:07:46.129
Now for this session today, we were lucky that one of our
favorite bands, Wilco, generously donated their content

00:07:46.129 --> 00:07:48.469
for us so you could see what we could do with it.

00:07:48.470 --> 00:07:54.450
Now Wilco already used their website, it's
a also already a valuable part of the band,

00:07:54.449 --> 00:07:56.909
they use it as a way to connect with their fans.

00:07:56.910 --> 00:08:03.860
And it's a great example of a rich media website
because it's got a lot of assets, for example,

00:08:03.860 --> 00:08:07.410
and obviously audio, they stream a lot of their concerts.

00:08:07.410 --> 00:08:11.600
They take photography of their gigs, and videos or whatever.

00:08:11.600 --> 00:08:18.200
So we thought we'd take the Wilco site and see how far we
could push it using the CSS Effects technology and Safari 4

00:08:18.199 --> 00:08:21.729
and Safari on iPhone, and see what we could come up with.

00:08:21.730 --> 00:08:26.060
And what we'll do is we'll go through it here and
then Simon will take it apart through the presentation

00:08:26.060 --> 00:08:30.449
or at least the first half of the
presentation, and we'll show you how it was done.

00:08:30.449 --> 00:08:36.019
So just note here, pretty simple
example of a menu that hovers.

00:08:36.019 --> 00:08:39.669
Now this isn't a plug-in in any way,
there's no plug-ins used in this page.

00:08:39.669 --> 00:08:42.019
This is an interactive menu that's done purely through CSS,

00:08:42.019 --> 00:08:45.370
in fact there's no JavaScript behind
it, and we'll go into that later.

00:08:45.370 --> 00:08:47.509
Now let's select News.

00:08:47.509 --> 00:08:52.240
Now you might have noticed the background was a
cross side transition there, we'll explain that.

00:08:52.240 --> 00:08:55.649
Another thing to point out is this text is a custom font,

00:08:55.649 --> 00:08:59.720
obviously branding the fonts is an
important part to the experience.

00:08:59.720 --> 00:09:05.290
This is a custom font embedded
in the page, also the scroll bar.

00:09:05.289 --> 00:09:07.870
Again the custom scrollbar, this is a WebKit extension.

00:09:07.870 --> 00:09:10.570
This has actually been implemented using border images,

00:09:10.570 --> 00:09:15.830
so at least you can actually get some pretty
crazy scrollbars if you want to code it up.

00:09:15.830 --> 00:09:21.840
You'll also see that the image of the album, this is the
new album coming out soon, it has a reflection on it.

00:09:21.840 --> 00:09:26.490
Again, done through CSS, so I don't have to generate
the image on the server or my client upload it.

00:09:26.490 --> 00:09:31.060
And again, I've just applied it to
every image that's in the News feed.

00:09:31.059 --> 00:09:32.819
Next we'll go to Records.

00:09:32.820 --> 00:09:37.820
Now again there was a transition in the
background, this time we transition to a color.

00:09:37.820 --> 00:09:42.750
And the reason for that is Wilco wanted the
color of the page to reflect the album art.

00:09:42.750 --> 00:09:48.360
So here if I select a different album, the
background color changes, and it changes through CSS,

00:09:48.360 --> 00:09:51.009
I don't have JavaScript running to do the change.

00:09:51.009 --> 00:09:55.159
Again, if I pick different albums, the color changes.

00:09:55.159 --> 00:09:58.059
So let's go back.

00:09:58.059 --> 00:10:03.299
Obviously audio is important, now what we've got
here is the HTML 5 audio element in the page.

00:10:03.299 --> 00:10:07.679
It's hidden because we don't want to see the control, we
want the experience to be sort of a more ambient experience.

00:10:07.679 --> 00:10:09.000
So I'm going to select a song.

00:10:09.000 --> 00:10:11.590
[ Music ]

00:10:11.590 --> 00:10:15.540
>> And the album just starts playing.

00:10:15.539 --> 00:10:17.579
[ Music ]

00:10:17.580 --> 00:10:20.460
>> There's other songs there so let me select,
and the one we crossfade

00:10:20.460 --> 00:10:22.720
to the next song, we've got another one going.

00:10:22.720 --> 00:10:26.950
Now I said that there is not control in the page,
but what we do have is an element that's hooked

00:10:26.950 --> 00:10:33.240
up to JavaScript events so when
I click off the music just stops.

00:10:33.240 --> 00:10:35.399
Next up we'll see Photos.

00:10:35.399 --> 00:10:36.449
Again, another crossfade.

00:10:36.450 --> 00:10:38.690
Now let me just go through, this is a slide show.

00:10:38.690 --> 00:10:44.150
Wilco has these fantastic photographers that follow
them around the world taking great photos of their gigs.

00:10:44.149 --> 00:10:49.620
Now let's just say I want to do a slideshow, I'm just
going to come backwards and forward between these images

00:10:49.620 --> 00:10:53.980
And what I'm doing here is just changing
the opacity property on an element.

00:10:53.980 --> 00:11:00.269
The JavaScript is actually doing the animation, it's the
browser engine through CSS that's doing the animation.

00:11:00.269 --> 00:11:04.699
It's opacity, we can also move things around on
the page, people know how to position things in CSS

00:11:04.700 --> 00:11:09.370
so we can get these effects where we move
things up or down, it doesn't really matter.

00:11:09.370 --> 00:11:11.919
We can have a look at that in slow motion.

00:11:11.919 --> 00:11:19.659
And you see what's happening there is the front
image is being pushed down the page and fading,

00:11:19.659 --> 00:11:24.669
its opacity is going to zero, as the
new image comes in the back from above.

00:11:24.669 --> 00:11:27.529
But we're not limited to just these sideways moves,

00:11:27.529 --> 00:11:31.649
we've got the pair of 2D transforms behind
us, so we can actually do scale effects.

00:11:31.649 --> 00:11:37.019
Again, you can see this - I'll show it in slow motion.

00:11:37.019 --> 00:11:40.460
Again, fading opacity and scale at the same time.

00:11:40.460 --> 00:11:44.060
And you can do some sort of more complicated effects here.

00:11:44.059 --> 00:11:47.779
Don't necessarily need to do slides.

00:11:47.779 --> 00:11:52.829
This one is another one, again, you don't
just limit it to scale, we can do rotation.

00:11:52.830 --> 00:11:55.470
Let's have a look at that in slow motion again.

00:11:55.470 --> 00:11:56.379
Pretty cool effect.

00:11:56.379 --> 00:12:00.059
Again, this is all just one line
of CSS, you don't need an authoring

00:12:00.059 --> 00:12:02.969
to do this, you can write it pretty simply yourself.

00:12:02.970 --> 00:12:08.730
And that's the fans of 60s television shows.

00:12:08.730 --> 00:12:13.789
Now we've touched on 2D transforms here and transitions,
but we want to give you a little taste of what we'll get

00:12:13.789 --> 00:12:16.189
to in the second half of the presentation.

00:12:16.190 --> 00:12:18.520
And in fact, you can do 3D effects on the desktop.

00:12:18.519 --> 00:12:23.059
So this is of course the information on the photo.

00:12:23.059 --> 00:12:28.319
Now you'll notice one thing, this really is 3D because as
you'll see, it's pointing in one direction and we can see

00:12:28.320 --> 00:12:32.950
through the back of the element in this
case and he's facing another direction.

00:12:32.950 --> 00:12:39.440
I should say that this stuff is like really fun to
code if you've been living through the years of browser

00:12:39.440 --> 00:12:42.490
and compatibilities or whatever, it's a blast.

00:12:42.490 --> 00:12:47.769
So let me go back to - this is an example,
Wilco has a show coming up later in the month

00:12:47.769 --> 00:12:50.779
and we want to do a custom poster for their event.

00:12:50.779 --> 00:12:55.250
This is a pretty generic page, it's
in Berkeley so we've got a person off

00:12:55.250 --> 00:12:57.529
to buy their tickets and they forgot their wallet.

00:12:57.529 --> 00:12:58.939
Berkeley residents.

00:12:58.940 --> 00:13:01.380
[ Laughter ]

00:13:01.379 --> 00:13:08.330
>> This text is actually real text even though it's got
the custom font I've selected, and in fact, this is a link,

00:13:08.330 --> 00:13:13.639
if you can see down here. This is the
last time he drives past.

00:13:13.639 --> 00:13:20.659
You can see in the status bar it's actually
a link to a page so I can go to a website.

00:13:20.659 --> 00:13:27.049
Now I won't point out all the effects here
because Simon is going to go through it,

00:13:27.049 --> 00:13:32.990
well actually that's I introduce Simon, he'll actually
show you how we coded up this demo, so where is he.

00:13:32.990 --> 00:13:34.889
Simon. Thank you.

00:13:34.889 --> 00:13:36.000
>> Great. Thanks, Dean.

00:13:36.000 --> 00:13:41.960
[ Applause ]

00:13:41.960 --> 00:13:43.090
>> Slides.

00:13:43.090 --> 00:13:46.300
Okay, so let's dive into the first main section of the talk.

00:13:46.299 --> 00:13:51.349
So in this section I'm going to talk about
CSS Effects you can do with text and images.

00:13:51.350 --> 00:13:59.279
So the theme for this section is that many of the things
that you've been doing and your designers have been doing

00:13:59.279 --> 00:14:05.329
in Photoshop to generate assets with your web
content, can now be done dynamically in CSS.

00:14:05.330 --> 00:14:10.170
We have a very rich and varied
set of CSS Effects you can apply.

00:14:10.169 --> 00:14:15.750
Those are things like stroked text, text shadows,
and web fonts, and then things you can do

00:14:15.750 --> 00:14:18.539
on other elements on the page, image borders.

00:14:18.539 --> 00:14:24.009
We have various ways of generating images on the
fly in CSS like gradients and masks and canvas,

00:14:24.009 --> 00:14:29.789
and then reflections as you saw in the demo which can
give you very nice reflections just with one line of CSS.

00:14:29.789 --> 00:14:36.909
And I'll explain some of these to you by building up this
poster that we saw in the demo, so let's start with that.

00:14:36.909 --> 00:14:43.480
Actually before I dive in, why are CSS
Effects a much better way of doing this

00:14:43.480 --> 00:14:47.570
than using static image assets, and
there are a whole bunch of reasons.

00:14:47.570 --> 00:14:50.879
So the first one is that the content is still HTML content,

00:14:50.879 --> 00:14:54.360
the user can bring up Find in the
browser and then search the page.

00:14:54.360 --> 00:14:58.419
And that content is also going
to be indexed by search engines.

00:14:58.419 --> 00:15:03.969
As Dean showed, the content can still be selected by
the user, so in this case they could select the date

00:15:03.970 --> 00:15:06.730
and maybe use it to make an event in the calendar.

00:15:06.730 --> 00:15:13.820
The text is still scalable, it's still real text, so when
the user zooms in, instead of seeing jaggers as they would

00:15:13.820 --> 00:15:16.910
with images, the text stays nice and sharp.

00:15:16.909 --> 00:15:24.819
And then also for users who are using voiceover on
Mac OS X, voiceover will be able to identify the text

00:15:24.820 --> 00:15:27.740
and identify links in the text
and then read it back to the user.

00:15:27.740 --> 00:15:29.830
So it's much better for accessibility.

00:15:29.830 --> 00:15:37.340
And a final reason is that by CSS Effects you can do many of
the things dynamically on the page that you would have had

00:15:37.340 --> 00:15:42.320
to do with static images, so that means that CSS is
going to be a much smaller description of those effects

00:15:42.320 --> 00:15:44.930
than the massive image assets you
would have had to use before

00:15:44.929 --> 00:15:51.039
And there's another advantage that we'll see a bit later
in the session, and because this is all done dynamically

00:15:51.039 --> 00:15:57.899
in the browser, we can then do animations
and other things to these effects on the fly.

00:15:57.899 --> 00:15:59.889
So let's start building up our poster.

00:15:59.889 --> 00:16:06.490
Here we have some HTML markup and a
pretty bare bones styling of that markup.

00:16:06.490 --> 00:16:10.350
So we've just got a div element with an id
of poster so we can apply some style to it.

00:16:10.350 --> 00:16:15.230
That has an H1 and then a couple of paragraphs
with a date and then a link to the location.

00:16:15.230 --> 00:16:22.700
And here's the final thing, this is what we're trying
to get to, and we'll build this up step by step.

00:16:22.700 --> 00:16:28.370
So the first thing you may have noticed there is that
the font is different from the Wilco branding font.

00:16:28.370 --> 00:16:32.639
So what we need to do is use a
custom font in our web content,

00:16:32.639 --> 00:16:38.500
and we can do that using web fonts in
CSS, and this is a two-step process.

00:16:38.500 --> 00:16:43.070
In the first step, you describe your
custom font using an app font face rule.

00:16:43.070 --> 00:16:48.500
And that has two parts, we assign a name
to this font which we're going to use later

00:16:48.500 --> 00:16:51.519
on in the CSS using the font family property.

00:16:51.519 --> 00:16:56.439
And then we specify a URL which is where the
browser can go and download this font from.

00:16:56.440 --> 00:17:01.250
One thing to not is if you're uploading fonts out there
your web server, you need to have the distribution rights

00:17:01.250 --> 00:17:06.569
for that font just as you would for images or
video, so be aware of the legal implications.

00:17:06.569 --> 00:17:13.089
Now we've described our custom font, we can actually use
it, and we use it in the same way that we use any other font

00:17:13.089 --> 00:17:16.389
on a system, which is putting it
in the font family property.

00:17:16.390 --> 00:17:22.950
So here it is, we've called HelveticaNarrows and then we've
got a couple of fallback options, Helvetica and Sans Serif

00:17:22.950 --> 00:17:25.360
for browsers that don't support downloadable fonts.

00:17:25.359 --> 00:17:30.369
So this is one example of the way that CSS
gives you nice grace for fallback behavior.

00:17:30.369 --> 00:17:37.309
So here's what we started with, now we've got
a custom font, so we're getting a bit closer.

00:17:37.309 --> 00:17:39.829
And this is actually closer to the final thing.

00:17:39.829 --> 00:17:46.329
And what I've done here is just apply some colors, some
line height adjustment, and some text size adjustment,

00:17:46.329 --> 00:17:50.359
which is standard CSS stuff, so I won't cover that today.

00:17:50.359 --> 00:17:51.990
This is what it looks like with the background.

00:17:51.990 --> 00:17:54.970
And one thing you'll notice here is that
the text is a little bit hard to read

00:17:54.970 --> 00:17:58.319
because we spaced it very closely,
the lines are running into each other.

00:17:58.319 --> 00:18:02.359
So let's try some things that we
can do to make this easier to read.

00:18:02.359 --> 00:18:08.139
The first thing we might try is to apply text stroke, and
we can do that in WebKit with the text stroke property.

00:18:08.140 --> 00:18:13.660
We're going to give a 5 pixel width and
then a red color which looks like this,

00:18:13.660 --> 00:18:17.570
so it does help the text stand out, but
it doesn't look particularly pretty.

00:18:17.569 --> 00:18:24.069
Something else we might try, something you may
not be aware of, but WebKit supports RGB colors,

00:18:24.069 --> 00:18:30.109
and these let you specify a color by the red,
green, and blue components between zero and 255,

00:18:30.109 --> 00:18:33.179
and then an alpha component which is between zero and 1.

00:18:33.180 --> 00:18:37.539
So that gives us a translucent effect to
our text, and you can see the poster showing

00:18:37.539 --> 00:18:40.389
through the images there, showing through the characters.

00:18:40.390 --> 00:18:45.550
I think we've gone a bit overboard here, this
is getting too far away from the Wilco branding,

00:18:45.549 --> 00:18:50.690
so let's go back to what we started with and try
another effect, and this effect is text shadow.

00:18:50.690 --> 00:18:57.740
And this has been supported for a while, let me just knock
out the background so you can see the effect more clearly.

00:18:57.740 --> 00:19:03.370
The property is called text shadow, and you describe
the shadow with a color, and X and a Y offset,

00:19:03.369 --> 00:19:06.509
and we're just using zero, and then a blur radius.

00:19:06.509 --> 00:19:11.410
And when we apply that to a the text,
we get something that looks like this.

00:19:11.410 --> 00:19:13.310
And if I put the background in it's like this.

00:19:13.309 --> 00:19:19.759
So I think that's giving us a much better appearance,
it's much easier to read now, so we're happy with that.

00:19:19.759 --> 00:19:23.359
Now so far our poster has this
really boring gray border around it,

00:19:23.359 --> 00:19:28.889
and we want to make that a bit
more interesting to look like this.

00:19:28.890 --> 00:19:35.280
So there's another property we can use to do this border
using images, and that property is called border image,

00:19:35.279 --> 00:19:42.690
and it's specified like this, border image, and you
supply a URL to an image frame.png in this case.

00:19:42.690 --> 00:19:49.190
And then four values which are distances from
the top, the right, the bottom, and the left,

00:19:49.190 --> 00:19:51.509
which we're going to use to slice up this image.

00:19:51.509 --> 00:19:57.190
And then those middle sections on the top and
the sides can either be repeated or stretched

00:19:57.190 --> 00:19:59.110
when this image has grown to fit the final thing.

00:19:59.109 --> 00:20:03.509
Here we're going to stretch them so it
ends up looking something like this.

00:20:03.509 --> 00:20:05.849
So border image is a great way to customize the borders

00:20:05.849 --> 00:20:09.879
on your page using image assets, but
those image assets are really small.

00:20:09.880 --> 00:20:15.400
Okay, so here we are with something that
looks much closer our final appearance.

00:20:15.400 --> 00:20:20.790
Now you may have noticed on the final one we had this
sort of glass effect over the top, a sort of glassy effect

00:20:20.789 --> 00:20:23.960
to make it look like there's a sheet
of glass in front of the poster.

00:20:23.960 --> 00:20:26.740
So let's see how we've built this up.

00:20:26.740 --> 00:20:35.609
And the first thing we can try is making an alpha.png image
which we sit on top of the poster, and we could do that,

00:20:35.609 --> 00:20:40.189
but that's a pretty large image that's
about 136k if you actua6lly make the image.

00:20:40.190 --> 00:20:44.940
So there's a way we can do this effect
without using any additional image assets,

00:20:44.940 --> 00:20:51.130
and we can do this with CSS gradients
and then using a canvas as a mask image.

00:20:51.130 --> 00:20:54.290
So let's go into those in more detail.

00:20:55.359 --> 00:21:02.639
Canvas is one of a couple of types of generated images, what
I referred to as generated images earlier in the slides.

00:21:02.640 --> 00:21:08.530
And by generated images I mean that by using this
property, under the hood WebKit is making image

00:21:08.529 --> 00:21:10.660
on the fly which is can then use in the CSS.

00:21:10.660 --> 00:21:16.370
And you can use those anywhere in CSS
where you would normally supply an image.

00:21:16.369 --> 00:21:22.209
So in this case we have a div and we're setting
its background image property to a WebKit gradient.

00:21:22.210 --> 00:21:27.829
And the way you describe the gradient is maybe
familiar to you if you've used something like Photoshop

00:21:27.829 --> 00:21:33.679
that has similar controls, there are two types, linear
and radial, so we're going to use a linear gradient.

00:21:33.680 --> 00:21:38.100
And then we specify the end points, and
our end points are going to be with a start

00:21:38.099 --> 00:21:40.480
on the top left and then the end on the top right.

00:21:40.480 --> 00:21:47.860
Then we specify the end colors, red and
blue in this case, and we could stop here,

00:21:47.859 --> 00:21:51.019
but you can optionally supply one or more color stops.

00:21:51.019 --> 00:21:55.009
For example, we could have a color stop
which is a transparent green color,

00:21:55.009 --> 00:21:56.490
40 percent of the way through the gradient.

00:21:56.490 --> 00:22:02.910
And this gives us a really nice gradient we can use
anywhere in CSS without any additional image assets.

00:22:02.910 --> 00:22:06.320
And this is just a few lines of CSS.

00:22:06.319 --> 00:22:11.349
So in the poster the one we used is a little more complex,
it actually uses a white color with varying levels

00:22:11.349 --> 00:22:14.519
of alpha for the end points and the color stops.

00:22:14.519 --> 00:22:20.480
And the CSS experts in the audience may notice that
I've assigned that gradient to the content property

00:22:20.480 --> 00:22:25.759
of a colon after, that's a generated pseudo element in CSS.

00:22:25.759 --> 00:22:32.349
And this means I'm able to apply this gradient over the
rest of the content without changing my markup at all.

00:22:32.349 --> 00:22:38.209
and that's really small, that CSS is just around 400 bytes,

00:22:38.210 --> 00:22:41.529
so that's way smaller than that big
alpha ping that we started with.

00:22:41.529 --> 00:22:48.819
So if I apply that gradient it would look something like
this, which is a good start but our final one has this sort

00:22:48.819 --> 00:22:53.079
of slice taken out to make it look more
reflection, so let's see how we did that.

00:22:53.079 --> 00:22:58.419
And the way we did that is to use a mask image.

00:22:58.420 --> 00:23:07.509
And what masks allow you to do is to take an element or an
image like this and then apply a mask using the alpha pixels

00:23:07.509 --> 00:23:14.470
of the mask to govern what shows through in the
element the image is being applied to like this.

00:23:14.470 --> 00:23:21.430
And the property is called mask, and
you can supply a mask image like this.

00:23:21.430 --> 00:23:26.400
And again, we could use an alpha.png for
this mask image, we probably want to png

00:23:26.400 --> 00:23:30.800
because we want a nice feathered edge along
that diagonal otherwise it'll look jaggy.

00:23:30.799 --> 00:23:34.210
But that's again a pretty large image, that's 120k.

00:23:34.210 --> 00:23:39.440
So let's see how we can do this
again without any new image assets.

00:23:39.440 --> 00:23:43.940
And the way we do this is by using a canvas.

00:23:43.940 --> 00:23:49.930
Now you may be familiar with canvas as an element
that you can put into an HTML and then get out from

00:23:49.930 --> 00:23:53.460
from JavaScript and use JavaScript to
programmatically draw into the canvas.

00:23:53.460 --> 00:23:58.600
And that's what we're doing here, but the difference
here is that this canvas is generated dynamically

00:23:58.599 --> 00:24:03.419
on the fly when we call getCSSCanvasContext.

00:24:03.420 --> 00:24:10.720
So this is one of the few places in this presentation
where we'll use JavaScript to do something non-trivial.

00:24:10.720 --> 00:24:15.400
So what we're doing is we're telling the browser
to give us a canvas that it's creating on the fly

00:24:15.400 --> 00:24:18.610
and that canvas has a name called mask that we'll use later.

00:24:18.609 --> 00:24:25.500
And then we use the standard canvas 2D drawing
APIs to actually draw into that canvas.

00:24:25.500 --> 00:24:29.869
So we start a path and then we move to the starting point,

00:24:29.869 --> 00:24:35.569
and then do a couple of lineTos
and then we close the path.

00:24:35.569 --> 00:24:41.059
Now we have a shape that we can fill, so we're going to set
the fill color to black and then tell it to fill the canvas.

00:24:41.059 --> 00:24:45.549
So that's now given us an image that we can use later on.

00:24:45.549 --> 00:24:49.619
There's one more thing we have to do which is we have
to tell the browser to actually render this canvas

00:24:49.619 --> 00:24:52.319
at least once so our image is ready for us to use in CSS.

00:24:52.319 --> 00:24:58.929
And the easiest way to do that is with an onload handler
on the body element, or probably if you're more experienced

00:24:58.930 --> 00:25:04.730
with JavaScript, you'd use AddEvents list load
for the load even and then do it there.

00:25:04.730 --> 00:25:11.309
So now we've programmatically created the mask that we
can use, and then we apply it with the mask property,

00:25:11.309 --> 00:25:20.990
and we're setting the mask to the WebKit canvas, and then
specifying the name mask in green that we saw earlier.

00:25:20.990 --> 00:25:26.529
So now we've done all of this, all of that
glass effect without any new image assets.

00:25:26.529 --> 00:25:33.000
And here's the final poster.

00:25:33.000 --> 00:25:39.579
[ Applause ]

00:25:39.579 --> 00:25:44.129
>> So there's one more effect that you saw in the demo that
we didn't actually use in the poster because it didn't fit

00:25:44.130 --> 00:25:48.320
into the theme, but that's the ability
to describe reflections in CSS.

00:25:48.319 --> 00:25:54.819
So this is a fairly new feature in WebKit, and property
is called box reflect, and it takes three values.

00:25:54.819 --> 00:25:59.299
The first one is the side the reflection is
going to show on, below, above, left, or right.

00:25:59.299 --> 00:26:04.339
And then there's an offset between the reflection
on the element which is in this case two pixels.

00:26:04.339 --> 00:26:10.669
And then the third value is an image that's going
to be used as a mask, and this could be any image,

00:26:10.670 --> 00:26:16.710
but to get the standard reflection faloff
effect, it's very useful to use a web gradient.

00:26:16.710 --> 00:26:20.470
So we plugged in gradient there, and that
gives us the reflection effect you see here.

00:26:20.470 --> 00:26:21.690
Very simple.

00:26:21.690 --> 00:26:31.160
So let me summarize this first section, WebKit now has
a very rich collection of CSS Effects that you can apply

00:26:31.160 --> 00:26:37.300
on text and images, and you can generate images
on the fly with gradients and canvas in order

00:26:37.299 --> 00:26:41.220
to do really interesting effects without
having to download additional image assets.

00:26:41.220 --> 00:26:46.319
And then finally you have things like masks and reflections
that allow you to modify the presentation of elements

00:26:46.319 --> 00:26:50.470
on a page and get a really interesting look.

00:26:51.920 --> 00:26:57.160
So here's the first tip I'm going to give you about
something you can do right now on your website.

00:26:57.160 --> 00:27:01.529
You might want to open your laptop and log onto your web
server, bring up your CSS, and then you can just type some

00:27:01.529 --> 00:27:04.660
of this stuff in and get a really
interesting look on your website.

00:27:04.660 --> 00:27:11.600
So what we're going to do here is apply text
shadow to the H1 and H2 headers in our site.

00:27:11.599 --> 00:27:17.869
So here it's specifying text shadow, we're using a gray
color with a zero pixel X offset and a 5 pixel Y offset,

00:27:17.869 --> 00:27:22.889
and then 5 pixels of Blur Radius, and you'll
see we get this nice little drop shadow effect.

00:27:22.890 --> 00:27:34.710
So that was the first section, that was things you can
do with text and images, sort of static CSS Effects.

00:27:34.710 --> 00:27:37.970
Now let's talk about some much more dynamic stuff.

00:27:37.970 --> 00:27:42.769
We now have two types of animation
in CSS, we have transitions

00:27:42.769 --> 00:27:48.460
and keyframe animations, and so I'll talk about those next.

00:27:48.460 --> 00:27:51.450
So let's start with transitions which are the simpler one.

00:27:51.450 --> 00:27:57.279
And as you may already have seen in some sessions today,
transitions give you what I like to call animation for free.

00:27:57.279 --> 00:28:04.399
With one line of CSS you can start having
animations on your webpage that look really good.

00:28:04.400 --> 00:28:12.550
Here's an example, this is a video where the video control
of it pops up, but the video control just snaps in,

00:28:12.549 --> 00:28:20.740
it's just changing the bottom offset of that div, it looks
okay, but it's not great, the user experience is not good.

00:28:20.740 --> 00:28:25.890
With one line of CSS we can add a transition to that
effect which gives us a nice animated appearance.

00:28:25.890 --> 00:28:32.150
It gives the user a much better
feel for what the content is doing.

00:28:32.150 --> 00:28:37.350
Animations are in CSS are also really good because
they let you get rid of all this JavaScript code

00:28:37.349 --> 00:28:40.539
that you would have had to write to do those
animations by hand or maybe you had to put

00:28:40.539 --> 00:28:42.680
in libraries and deal with all of those issues.

00:28:42.680 --> 00:28:51.200
You can get rid of all of that and just
add transitions with a single line of CSS.

00:28:51.200 --> 00:28:54.259
So in a bit more detail, let's look at how transitions work.

00:28:54.259 --> 00:28:58.509
Now the key point with transitions is that
they work on existing CSS property values.

00:28:58.509 --> 00:29:02.869
So here we've got an example with a
box that has a left offset of zero,

00:29:02.869 --> 00:29:07.489
the box is positioned so we can change its
position on the screen by changing left.

00:29:07.490 --> 00:29:12.539
And then when the user hovers over the box, it's going to
jump over a little bit, it's going to jump by ten pixels.

00:29:12.539 --> 00:29:19.690
And normally when the user hovers, that change is
applied immediately, the box snaps to its new value.

00:29:19.690 --> 00:29:24.500
If you want the animation, we can specify
that there's a transition that happens,

00:29:24.500 --> 00:29:28.680
so here we set the transition property, we're
saying that left is going to run the transition,

00:29:28.680 --> 00:29:31.340
and that's going to happen over two seconds.

00:29:31.339 --> 00:29:35.009
And that immediately will give us this
nice smooth animation between the old value

00:29:35.009 --> 00:29:38.650
and the new value over that two-second period.

00:29:38.650 --> 00:29:41.940
And the default animation is nice and
smooth because it's an easing function,

00:29:41.940 --> 00:29:47.680
but if we want we could have a linear transition
by specifying a timing function of linear.

00:29:47.680 --> 00:29:52.450
And here note that we're using the short hand, so we've
got all these values and the same transition rule.

00:29:52.450 --> 00:29:57.420
Just a little more detail about the transition properties.

00:29:57.420 --> 00:30:01.220
So you have to choose which properties
you want to run transitions on,

00:30:01.220 --> 00:30:04.259
and you do that with the WebKit transition property.

00:30:04.259 --> 00:30:10.359
And then you specify how long the transition
is going to take with transition duration.

00:30:10.359 --> 00:30:13.439
If you want to, you can change
the timing function as we saw.

00:30:13.440 --> 00:30:18.630
This has a number of keywords you can use
like ease, ease in, ease out, and so on.

00:30:18.630 --> 00:30:21.850
And you can specify custom timing functions if you want to.

00:30:21.849 --> 00:30:28.500
And then there's also transition delay, and this allows
you to specify a delay before the start of the transition,

00:30:28.500 --> 00:30:32.059
this could be really useful if you want to do
interesting builds where a number of elements kind

00:30:32.059 --> 00:30:36.990
of flow onto the screen one after the other.

00:30:36.990 --> 00:30:40.990
So you may be wondering what other
CSS properties support transitions.

00:30:40.990 --> 00:30:45.390
Well the answer is that a lot of them do, pretty much
anything that's a length or a number, like positioning

00:30:45.390 --> 00:30:50.720
and size, border widths, padding, margins,
background, select position, all that kind of stuff.

00:30:50.720 --> 00:30:56.490
They also put transitions, things to do with fonts or font
size, line height, letter and word spacing, those too.

00:30:56.490 --> 00:31:03.789
And we can also transition colors, and we can transition
shadows with text shadow and box shadow, opacity,

00:31:03.789 --> 00:31:08.289
and transforms, and we'll come back to
transforms later, and a bunch of other things.

00:31:08.289 --> 00:31:13.710
So pretty much anything you expect can change
between two sizes will run a transition.

00:31:13.710 --> 00:31:17.519
So here's something else you can do on your website.

00:31:17.519 --> 00:31:20.889
Maybe your site has an effect where when
the user hovers over one of the links

00:31:20.890 --> 00:31:25.740
or a heading you change the background color just to
show that it's something the user can interact with.

00:31:25.740 --> 00:31:30.240
By default the background color snaps,
it'll just snap to that new color

00:31:30.240 --> 00:31:33.140
when the user hovers, and that's a bit jarring.

00:31:33.140 --> 00:31:38.750
So we can give the user a much better experience if
we set a transition, and here we set a transition

00:31:38.750 --> 00:31:45.109
on the background color property of one second, and we get
that nice smooth fade between the old and the new colors.

00:31:48.240 --> 00:31:52.440
So those were transitions, and transitions are
very easy, they give you animation pretty much

00:31:52.440 --> 00:31:54.930
for free, but they're a little bit limited.

00:31:54.930 --> 00:32:03.400
If you need more explicit, more expressive animations, then
we have keyframe animations which let you do those too.

00:32:03.400 --> 00:32:11.300
And keyframe animations, the key concept with keyframe
animations is that you're using CSS to put the element

00:32:11.299 --> 00:32:15.379
into an animating state, you're saying to
the element please start animating now.

00:32:15.380 --> 00:32:20.540
and then it will just do a number of animations
and stop or it'll just keep running the animations.

00:32:20.539 --> 00:32:25.450
And because they're more complex, it's a little
more work to set them up, the first thing you have

00:32:25.450 --> 00:32:31.039
to do is describe the set of keyframe, kind
of like font face that you saw just now.

00:32:31.039 --> 00:32:33.730
And then secondly you have to actually use the properties

00:32:33.730 --> 00:32:38.460
that start the animation, and then
describe its other behavior.

00:32:38.460 --> 00:32:42.819
Types of things like whether the animation is
going to repeat, whether it's going to alternate,

00:32:42.819 --> 00:32:46.509
and alternate means that every other cycle
it'll go backwards so you can do sort

00:32:46.509 --> 00:32:49.549
of bouncing back and forth animations, things like that.

00:32:49.549 --> 00:32:54.009
And then here's where the DOM Events
come in, which I touched on earlier.

00:32:54.009 --> 00:32:59.180
Animations are more complex, and if you're using animations,
it's fairly likely that you have some other behavior

00:32:59.180 --> 00:33:01.940
on your webpage that you want to tie into those animations.

00:33:01.940 --> 00:33:05.350
Maybe you need to know when the animation
repeats or when the animation ends.

00:33:05.349 --> 00:33:11.559
And you can do that because we emit DOM Events
which you can listen for in your JavaScript to know

00:33:11.559 --> 00:33:16.769
when those animations start, then
they loop, and when they end.

00:33:16.769 --> 00:33:20.639
So the animation properties in a bit more detail.

00:33:20.640 --> 00:33:27.170
You describe the keyframes in an at rule, so it's
@-Webkit-keyframes, and then you give it a name

00:33:27.170 --> 00:33:29.039
which you will use to identify those keyframes later.

00:33:29.039 --> 00:33:34.190
And then to actually apply those keyframes,
you use the animation name property.

00:33:34.190 --> 00:33:39.700
What animation name is doing is it's saying
please apply this keyframes to this element.

00:33:39.700 --> 00:33:43.870
Then you control the length of one cycle of the
animation with the animation duration property.

00:33:43.869 --> 00:33:49.779
You can control the number of times it's going
to repeat with animation-iteration count,

00:33:49.779 --> 00:33:54.579
and that has a keyword called infinite
if you want it to keep going forever.

00:33:54.579 --> 00:33:59.990
And if you want that reversing behavior that I
mentioned, you can set animation direction to alternate,

00:33:59.990 --> 00:34:04.859
the standard one is normal which
means it will just keep going forward.

00:34:04.859 --> 00:34:10.759
And then animations also have a way of controlling the
timing function which is a per keyframe timing function,

00:34:10.760 --> 00:34:13.300
and that's the animation timing function property.

00:34:13.300 --> 00:34:19.690
So let's look at the example you saw on the
slides where the guy is running to get his tickets

00:34:19.690 --> 00:34:22.769
and then he forgets his wallet, and then he runs back again.

00:34:22.769 --> 00:34:28.289
So to do this we had an image element in our document
in the standard way, and we've absolutely positioned it

00:34:28.289 --> 00:34:31.820
so we can move the bus around by changing the left property.

00:34:31.820 --> 00:34:34.870
And then here are the two stages
we do to set up an animation.

00:34:34.869 --> 00:34:38.460
The first one is to describe the
keyframes of that animation.

00:34:38.460 --> 00:34:46.340
So we've set our @-WebKit-keyframes, and we've given
the name drive, so we'll use drive as the name.

00:34:46.340 --> 00:34:50.970
And the first keyframe puts the bus off
to the right-hand side of the screen,

00:34:50.969 --> 00:34:55.189
our content has a div with overflow hidden
and it's less than 1200 pixels wide

00:34:55.190 --> 00:35:00.210
So the bus starts basically off
the right-hand side of the screen.

00:35:00.210 --> 00:35:03.099
And at the 40 % mark, the bus has that same position,

00:35:03.099 --> 00:35:07.779
so the bus is sitting there unchanging
for the first 40 % of the animation.

00:35:07.780 --> 00:35:13.930
And then in the final keyframe, the bus is off to the
left of the screen, so that means the bus is going to sit

00:35:13.929 --> 00:35:20.059
on the right-hand side for a while, and then it's going
to animate over to the left, and then it'll snap back

00:35:20.059 --> 00:35:24.139
to that right-hand side and come back again.

00:35:24.139 --> 00:35:30.719
And now once we describe those keyframes, now we can
apply them to the element by setting an animation name,

00:35:30.719 --> 00:35:35.529
and we want a duration of six seconds, and
here we want the animation to just keep looping

00:35:35.530 --> 00:35:37.510
for as long as the user has the page loaded.

00:35:37.510 --> 00:35:41.590
So we're using the intranet keyword
for animation duration count.

00:35:41.590 --> 00:35:46.120
And the final thing we set is a linear timing
function so the bus moves at a constant velocity

00:35:46.119 --> 00:35:54.250
across the screen, ends up looking like this.

00:35:54.250 --> 00:36:02.889
So keyframe animations, because they're applied sort of
on top of everything else, when that animation is running,

00:36:02.889 --> 00:36:07.609
the CSS values in the keyframes trump all other values.

00:36:07.610 --> 00:36:15.030
And then when the animation stops, its effects disappear
and the element reverts to its unanimated appearance.

00:36:15.030 --> 00:36:18.120
Because of that, you can override animations if you want

00:36:18.119 --> 00:36:25.329
to by overriding the animation name
property and setting it to none.

00:36:25.329 --> 00:36:29.269
So here's another tip you can do, it's slightly more
complex because you have to set up some keyframes,

00:36:29.269 --> 00:36:36.150
but we can get a nice animating progress bar without
using any animated gifs or plug-ins or anything else.

00:36:36.150 --> 00:36:40.680
Here we have a div and we're going to
use background image to do the animation.

00:36:40.679 --> 00:36:45.629
So we're setting the background image to a
little square image called progressBar.png

00:36:45.630 --> 00:36:50.030
and then it's repeated across the
div, so it fills up the div.

00:36:50.030 --> 00:36:55.760
Now we set up some keyframes, and in these keyframes
we're going to animate the background origin property,

00:36:55.760 --> 00:37:01.740
and we're going to start with an X
offset of 32 pixels, zero pixels and Y.

00:37:01.739 --> 00:37:05.919
And then it's going to animate
to a left offset of zero pixels.

00:37:05.920 --> 00:37:09.750
This means this image is effectively moving
backwards inside the box, but it's getting tiled,

00:37:09.750 --> 00:37:13.070
so it simply fills the box but appears to be moving.

00:37:13.070 --> 00:37:17.210
And now when we apply those keyframes
by setting the animation shorthand

00:37:17.210 --> 00:37:21.289
in this case, the image starts animating.

00:37:21.289 --> 00:37:25.409
So we've named the keyframe spin,
we're using a duration of one second.

00:37:25.409 --> 00:37:29.829
Again we're repeating an infinite number
of times so it just keeps running.

00:37:29.829 --> 00:37:33.289
And we're using a linear timing
function, so it appears to move smoothly.

00:37:33.289 --> 00:37:37.849
So that's it.

00:37:37.849 --> 00:37:41.380
Now let me just tell you the differences
between these two types

00:37:41.380 --> 00:37:45.570
of animations I've talked about,
transitions and keyframe animations.

00:37:46.639 --> 00:37:52.629
Transitions, as I said, operate
on existing CSS property values.

00:37:52.630 --> 00:37:57.030
They're the sort of magical interpolation
that happens when one of those values changes.

00:37:57.030 --> 00:38:00.700
So they're quite automatically when other things change.

00:38:00.699 --> 00:38:06.460
Keyframe animations are more under the author's
control, so the author applies them specifically

00:38:06.460 --> 00:38:12.030
by setting the animation name property to a set of keyframes
and setting a duration to something greater than zero.

00:38:12.030 --> 00:38:19.220
Both of these support timing functions, for
animations that timing function is per keyframe.

00:38:19.219 --> 00:38:25.029
But if you need more complex behavior, if you need
keyframes to have something moving in a very complex path,

00:38:25.030 --> 00:38:26.990
then keyframe animations are the way to go.

00:38:26.989 --> 00:38:30.899
And those also give you repeating behavior
and they give you alternating behavior.

00:38:30.900 --> 00:38:39.410
So I'd like to invite Dean back on the stage to show
us how we used transitions to spice up that Wilco demo.

00:38:39.409 --> 00:38:41.440
>> So let's take a look.

00:38:41.440 --> 00:38:47.860
You remember this menu from earlier on, and
what I'll do is open up Xcode and show you.

00:38:47.860 --> 00:38:56.289
This is the code that's giving this menu, so it's
basically just an unordered list a UOL element

00:38:56.289 --> 00:38:58.070
with a bunch of list items.

00:38:58.070 --> 00:39:04.210
Now when I hover over these elements, the color changes.

00:39:04.210 --> 00:39:07.309
This is something you've all seen
on the web millions of times.

00:39:07.309 --> 00:39:10.380
Let me just show you the CSS that's behind that.

00:39:10.380 --> 00:39:16.110
So I'm saying by default the list items get
this color, and when the pointer is over them,

00:39:16.110 --> 00:39:20.780
the hover pseudo class applies,
and we have a different color.

00:39:20.780 --> 00:39:23.300
So let's say I want to add a transition to it.

00:39:23.300 --> 00:39:25.990
Like Simon said, this is sort of animations for free.

00:39:25.989 --> 00:39:30.329
So all I have to do - locate transition,
and I just say color.

00:39:30.329 --> 00:39:40.380
And let's say I wanted to fade in over
two seconds, save that, reload the page.

00:39:40.380 --> 00:39:44.130
And now as I move my mouse over, you can see they fade in.

00:39:44.130 --> 00:39:49.970
Well that's not very easy to see, so what
we'll do is we'll make it pop a little bit,

00:39:49.969 --> 00:39:55.230
so I'll add a padding left and
let's say 50 pixels, save that.

00:39:55.230 --> 00:39:57.829
And now you can see, they pop out.

00:39:57.829 --> 00:39:58.929
Do I want that to transition?

00:39:58.929 --> 00:40:04.230
So just add the next property, so now
I want the transition padding left.

00:40:04.230 --> 00:40:09.840
I'll make this one just 500 milliseconds
so it'll be a little quicker.

00:40:09.840 --> 00:40:14.180
And now, let's see, very easily
we've got this animation effect.

00:40:14.179 --> 00:40:18.779
That's not quite what you want, you'll notice what's
happening is that it animates even when my mouse gets

00:40:18.780 --> 00:40:23.040
over the element, but as soon as I leave
it, it jumps back to its original position.

00:40:23.039 --> 00:40:30.349
Maybe it's because the transition properties apply the same
way every other property in CSS style through the cascade.

00:40:30.349 --> 00:40:36.219
So what I'm saying here is that when I'm in the hover state,
I want the color property and the padding left property

00:40:36.219 --> 00:40:39.209
to animate because the transition
applies in the hover state.

00:40:39.210 --> 00:40:44.309
But the fact that we want the transition to apply
both in the hover state and in the normal state.

00:40:44.309 --> 00:40:50.639
So all I need to do actually is just take it
from here, if I could move the keyboard right.

00:40:50.639 --> 00:40:54.909
I'm going to move it up to the element.

00:40:54.909 --> 00:41:02.509
So now I move it up or down into the hover state of
saved or reload, and you get the effect going in and out.

00:41:02.510 --> 00:41:06.260
And you can see here that you don't actually need to
let the transitions run all the way to completion,

00:41:06.260 --> 00:41:09.720
they'll restart from wherever they happen
to be, so you always get this smooth effect.

00:41:09.719 --> 00:41:11.000
Just change it there.

00:41:11.000 --> 00:41:22.900
[ Applause ]

00:41:22.900 --> 00:41:23.910
>> Now we get it.

00:41:23.909 --> 00:41:24.219
There we go.

00:41:24.219 --> 00:41:30.219
Simon mentioned at the start that these
effects work both on desktop and iPhone,

00:41:30.219 --> 00:41:34.959
we wanted to actually show you exactly
how they perform, so let me close that.

00:41:34.960 --> 00:41:37.159
Let me fire up the iPhone simulator.

00:41:37.159 --> 00:41:43.399
Now I've got this icon on this home page,
it's actually a full-screen web app,

00:41:43.400 --> 00:41:46.550
so it's still a web content, it's no native app.

00:41:46.550 --> 00:41:52.220
Now imagine this is site that Wilco wants
to give out to their customers on iPhone,

00:41:52.219 --> 00:41:55.569
and we want to see how they show their slideshow.

00:41:55.570 --> 00:42:03.550
I'm going to just start the slideshow off, and you can see
here that because the engine is performing really well,

00:42:03.550 --> 00:42:06.690
we don't have to iterate JavaScript,
it performs just perfectly.

00:42:06.690 --> 00:42:10.130
We can do all the transitions, we
can do the 2D effects on the iPhone.

00:42:10.130 --> 00:42:17.190
Now again, Simon is going to be talking about transforms
in the next section, and we mentioned 2D and 3D trans-forms,

00:42:17.190 --> 00:42:21.000
so let's have a look at what you
be able to with the 3D transform.

00:42:21.000 --> 00:42:26.650
You can see here we've pushed things out into
a ring, and I can also apply a CSS animation.

00:42:26.650 --> 00:42:30.930
Because this isn't a plug-in, these elements are really
part of the page, so I can apply CSS to anything.

00:42:30.929 --> 00:42:36.440
So let me just start off an animation,
and you can see them rotate.

00:42:36.440 --> 00:42:40.990
Now it's a bit close to you can't actually
really see the whole effect, this is just CSS.

00:42:40.989 --> 00:42:47.619
So what I'll do is just apply a transition, I'll
push the elements back, and there you can see it.

00:42:47.619 --> 00:42:53.119
And this animation is basically two animations happening
at the same time, we've got one that's spinning around

00:42:53.119 --> 00:42:54.529
and the other one that's rotating the ring.

00:42:54.530 --> 00:42:59.440
And again, I think this is a pretty
effective way to get a slideshow.

00:42:59.440 --> 00:43:03.000
So now Simon is going to tell you how to do this in code.

00:43:03.000 --> 00:43:11.360
[ Applause ]

00:43:11.360 --> 00:43:13.960
>> Thanks, Dean, that looks really cool.

00:43:13.960 --> 00:43:18.500
So we've talked about image effects and text effects,
we've talked about transitions and animations,

00:43:18.500 --> 00:43:25.440
so now the final section, two-dimensional
and three-dimensional transforms in CSS.

00:43:25.440 --> 00:43:30.179
So you might be familiar with these kinds of transformations
from maybe your image editor which allows you

00:43:30.179 --> 00:43:35.299
to select a piece of the image and
rotate it, scale it, move it around.

00:43:35.300 --> 00:43:40.650
Or you may have used them in SVD or canvas, or even
native code, these transformations.

00:43:40.650 --> 00:43:43.829
So now we have the ability to describe them in CSS.

00:43:43.829 --> 00:43:50.119
Now a poster that we saw before, actually on the final
page had this tilt to it, and that was just one line of CSS

00:43:50.119 --> 00:43:56.380
that set the transform property to a
rotation of three degrees, very easy.

00:43:56.380 --> 00:44:04.619
So in a bit more detail, the property name is
called transform, and it has a number of values

00:44:04.619 --> 00:44:10.960
that describe the standard affine transformations
you can do, translates, rotates the scales and skews.

00:44:10.960 --> 00:44:18.340
So for translates, you can move an element in X
and Y using pixel values or lengths or percentages.

00:44:18.340 --> 00:44:21.950
Rotations take an angle in degrees, radians, or grads.

00:44:21.949 --> 00:44:30.439
With a scale, you can pass an X and a Y scaling multiplier,
and then skew takes an angle for the X skew and the Y skew.

00:44:30.440 --> 00:44:35.710
You can also control the origin of the
transformation with the transform origin property.

00:44:35.710 --> 00:44:36.699
And if the default origin is in the property.

00:44:36.699 --> 00:44:38.579
And if the default origin is in the center of the element,

00:44:38.579 --> 00:44:41.869
so if you do something like a rotation
that's going to rotate about the center

00:44:41.869 --> 00:44:46.299
But you can set transform origin to say top left,
and that means the rotation is going to happen

00:44:46.300 --> 00:44:47.890
about the top left corner of that element.

00:44:47.889 --> 00:44:54.659
So here's another little tip you can do
on your website with transformations.

00:44:54.659 --> 00:44:57.399
Maybe have some icons somewhere on your site, and you'd

00:44:57.400 --> 00:45:00.869
like to apply a nice little effect
when the user hovers over those.

00:45:00.869 --> 00:45:02.079
So you could set a transform.

00:45:02.079 --> 00:45:06.980
And in this case we set a transform to a
rotation of ten degrees and then a 1.2 scaling,

00:45:06.980 --> 00:45:13.490
and that means that image just pops out and
gets a bit bigger so the user can really see it.

00:45:13.489 --> 00:45:18.529
Again, we have this kind of snapping behavior which isn't
really very pleasant for the user, so as you might expect,

00:45:18.530 --> 00:45:24.130
we can then put a transition on this, and
transforms and transitions work really well together.

00:45:24.130 --> 00:45:26.410
So now you can see that when the user hovers,

00:45:26.409 --> 00:45:31.589
they get a nice smooth animation effect
when they're rolling over those images.

00:45:31.590 --> 00:45:37.640
Now that's two-dimensional transforms, and we've
had two-dimensional transforms for a while.

00:45:37.639 --> 00:45:41.429
I'd like to talk for a moment about 3D transforms.

00:45:41.429 --> 00:45:49.599
And when I talk about 3D transforms, I'm not talking about
having a full 3D kind of modeling system in HTML and CSS.

00:45:49.599 --> 00:45:55.889
HTML is by definition a planar medium, the
elements are all sitting there on this flat space.

00:45:55.889 --> 00:45:59.849
But when we apply three-dimensional transforms,
what we're doing is moving those elements

00:45:59.849 --> 00:46:04.029
around in three-dimensional space,
so think of it as planes in space.

00:46:04.030 --> 00:46:13.370
And we've had 3D transforms in= Safari iPhone since
iPhone 2.0, and then we've been working really hard

00:46:13.369 --> 00:46:18.239
and we've now got support for three-dimensional
transforms in WebKit open source.

00:46:18.239 --> 00:46:24.309
And we could do that because these both share the same
rendering engine under the hood, it's WebKit in both places.

00:46:24.309 --> 00:46:30.460
And I'd like to peek under the hood there and
talk a little bit about how we implemented this.

00:46:30.460 --> 00:46:35.559
Now naturally when you think about 3D you think
about OpenGL and games and all that kind of stuff.

00:46:35.559 --> 00:46:41.880
And the way those are rendered by the machine, by the
computer is that it uses the graphics processing unit.

00:46:41.880 --> 00:46:47.849
So this is effectively what we've done, we've added
support for rendering via GPU to WebKit.

00:46:47.849 --> 00:46:51.190
We can take elements on the webpage,
render them to a hardware layer,

00:46:51.190 --> 00:46:54.519
and then have the GPU composite those to the screen.

00:46:54.519 --> 00:46:56.849
And this has a number of advantages.

00:46:56.849 --> 00:47:00.250
First of all it allows us to do
three-dimensional transforms.

00:47:00.250 --> 00:47:05.179
Secondly it allows us to hardware accelerate
certain transitions and animations on the webpage.

00:47:05.179 --> 00:47:10.419
And actually in the demos you're seeing today, we're
using this feature to get really nice smooth animation.

00:47:10.420 --> 00:47:15.490
And finally, you can imagine that we could accelerate
other things like video playback for example.

00:47:15.489 --> 00:47:21.229
So this is an area we're working really
hard in and we're very excited by this.

00:47:21.230 --> 00:47:22.949
So here's the example that you saw on the demo.

00:47:22.949 --> 00:47:30.949
We have this really neat 3D effect, this flip effect,
so we can show the information on the back of the image.

00:47:30.949 --> 00:47:37.489
And this is all done again with CSS, no
plug-ins, no magic here, it's all good.

00:47:37.489 --> 00:47:41.669
So let's look in a bit more detail about CSS transforms.

00:47:41.670 --> 00:47:45.260
So 3D is really just an extension
of two-dimensional transforms,

00:47:45.260 --> 00:47:48.510
it's the same transform property but with some new values.

00:47:48.510 --> 00:47:52.650
And those values are things like
translate 3D, rotate 3D, and scale 3D.

00:47:52.650 --> 00:47:59.760
And we also have the ability to describe a full
4 x 4 matrix if you need that amount of control.

00:47:59.760 --> 00:48:04.530
And as I mentioned, what you're doing here
is you're positioning those HTML elements

00:48:04.530 --> 00:48:06.280
in a three-dimensional space.

00:48:06.280 --> 00:48:12.970
Now 3D is a little more complex, you need a bit more control
over how that scene is going to appear to the viewer.

00:48:12.969 --> 00:48:17.099
In other words, you need to make it
look 3D by giving it some perspective,

00:48:17.099 --> 00:48:20.710
and so we have a perspective property for that.

00:48:20.710 --> 00:48:24.949
It also becomes very interesting when you can
build hierarchies of three-dimensional objects.

00:48:24.949 --> 00:48:30.559
For example, you could build something like a cube out
of these planes and then spin the whole cube around.

00:48:30.559 --> 00:48:34.610
And to give you control over that type of
thing, we have a property that allows you

00:48:34.610 --> 00:48:38.900
to do three-dimensional hierarchies called transform style.

00:48:38.900 --> 00:48:46.490
And then finally, there's a property that we'll see in
a moment that allows you to control whether both faces

00:48:46.489 --> 00:48:49.989
of an element are visible or whether
only the front face is visible.

00:48:49.989 --> 00:49:02.189
So let me explain how these transforms work by
building up this flip effect that you saw on the demo.

00:49:02.190 --> 00:49:07.000
So first of all we'll start with the markup.

00:49:07.000 --> 00:49:14.000
And that's a pretty simple markup, we've got a div for
the container, and then that has a div inside of it

00:49:14.000 --> 00:49:15.719
which is the div that represents the card.

00:49:15.719 --> 00:49:20.259
We're calling this a card because it's kind of like
a playing card with a front face and a back face.

00:49:20.260 --> 00:49:25.240
And that card has a JavaScript onclick
handler that simply toggles the class name

00:49:25.239 --> 00:49:28.539
on the card, and we'll see why in a moment.

00:49:28.539 --> 00:49:35.090
And inside the card there are two other divs,
there's a front face and then a back face.

00:49:35.090 --> 00:49:39.860
And the front face has the image in it,
and the back face has the Wilco text.

00:49:39.860 --> 00:49:46.710
And you'll notice we use two classes on those elements,
they both have a common property which is their faces,

00:49:46.710 --> 00:49:48.740
and then one is the front, one is the back.

00:49:48.739 --> 00:49:54.649
So that's the markup we're going to use and we're
not going to change that markup for the rest of this.

00:49:54.650 --> 00:50:00.180
I'm just tilting this in 3D just so you
can see what's going on in the next steps.

00:50:00.179 --> 00:50:04.259
So now let's start building up this card by
applying some three-dimensional transforms.

00:50:04.260 --> 00:50:09.750
Now the first thing we have to do is we have to take
the back face and fold it behind the front face.

00:50:09.750 --> 00:50:16.590
We're essentially trying to place these elements
back to back, and we do that by a rotateY transform.

00:50:16.590 --> 00:50:21.440
Now in 3D you have three axis, you have Y
which is up and down, X which is across,

00:50:21.440 --> 00:50:24.210
and then the Z axis which comes out towards the viewer.

00:50:24.210 --> 00:50:27.699
So here we're rotating about the
Y axis which is the vertical axis,

00:50:27.699 --> 00:50:32.029
and we're rotating by 180 degrees
so we're flipping it on its axis.

00:50:32.030 --> 00:50:35.230
So now we've got these things positioned back
to back, I've actually just separated them

00:50:35.230 --> 00:50:36.829
out here so you can see them more clearly.

00:50:36.829 --> 00:50:42.549
In actual fact, they would be sandwiched
together, and here you can see the two elements.

00:50:42.550 --> 00:50:48.769
And in actual fact they're sandwiched together
like this, but that actually has a bit

00:50:48.769 --> 00:50:51.820
of a problem, it's not quite the result we want.

00:50:51.820 --> 00:50:57.330
And what's happening here is these elements are actually
sitting at exactly the same point in space, that co-planar.

00:50:57.329 --> 00:51:02.440
And then it's ambiguous for the rendering
engine as to which one should show in the front.

00:51:02.440 --> 00:51:08.110
And this isn't a problem with our implementation, this is a
problem that's common to 3D, but we have a solution to it,

00:51:08.110 --> 00:51:13.660
and the solution is that property that I
mentioned earlier which is the one that allows you

00:51:13.659 --> 00:51:17.889
to specify whether both sides or just
one side of the element are visible.

00:51:17.889 --> 00:51:27.579
So that property is called backface-visibility,
and it has a couple of visible or hidden.

00:51:27.579 --> 00:51:32.559
Visible is the default meaning both sides will
show, and then hidden is what we can set here.

00:51:32.559 --> 00:51:37.719
And what hidden does is it means that when the
back face of an element is facing the viewer,

00:51:37.719 --> 00:51:41.469
that element essentially disappears as you can see here.

00:51:41.469 --> 00:51:45.369
The gray border is just so you
can see where it would have been.

00:51:45.369 --> 00:51:51.089
So now what we can do is we can sandwich these
things together, and then we don't have any problems

00:51:51.090 --> 00:51:53.750
about which one is in front because
the right one will display depending

00:51:53.750 --> 00:51:59.599
on how the card is oriented to the
viewer, so this is much better.

00:51:59.599 --> 00:52:06.400
So we've got these two faces sandwiched together,
now we have to actually build that flip effect.

00:52:06.400 --> 00:52:12.220
And the way we do that is to apply a class name
to the element that already has the card class.

00:52:12.219 --> 00:52:18.739
And just here's a note about how we build up
these kinds of demos, these bits of content.

00:52:18.739 --> 00:52:24.399
We've found that a very powerful way to do this is
to describe the states of the content using classes,

00:52:24.400 --> 00:52:30.610
and then we can write CSS that describes or
that sets up the positions and the transforms

00:52:30.610 --> 00:52:33.640
on those elements based on those class names.

00:52:33.639 --> 00:52:36.429
This means that we have a really tiny amount of JavaScript,

00:52:36.429 --> 00:52:40.489
and the JavaScript is essentially just
applying and removing those class names.

00:52:40.489 --> 00:52:46.059
So we're just using JavaScript as a little bit of glue in
order to change the document between these various states,

00:52:46.059 --> 00:52:50.719
and of course we have transitions which will
give us those animations between the states.

00:52:50.719 --> 00:52:53.379
So it becomes a very easy way of coding up our content

00:52:53.380 --> 00:52:57.190
and getting really rich experiences
with minimal amounts of JavaScript.

00:52:57.190 --> 00:53:04.900
Anyway, to get back to the example, when the card is in
the flip state, we want the back side of the card to show,

00:53:04.900 --> 00:53:09.050
so the flip state has a rotateY
transform on the card element.

00:53:09.050 --> 00:53:15.330
And then as you can guess, we want to have
a nice smooth transition over one second

00:53:15.329 --> 00:53:18.130
that gives us the really cool rotation behavior.

00:53:18.130 --> 00:53:24.640
So that's looking pretty good except that
if we actually coded this up and did it,

00:53:24.639 --> 00:53:28.509
it would look like this, it actually looks flat.

00:53:28.510 --> 00:53:33.160
And the reason it looks flat is because
we haven't described any perspective,

00:53:33.159 --> 00:53:35.670
there's no notion of depth in the scene yet.

00:53:35.670 --> 00:53:42.240
So the final thing we need to do is to set up some
perspective for this on the container element.

00:53:42.239 --> 00:53:45.919
And the container, if you remember,
is the parent of the card.

00:53:45.920 --> 00:53:52.389
So we have a property called perspective, and the value
here describes the distance of the viewer from the content,

00:53:52.389 --> 00:53:58.509
so a large perspective means the content behaves like it's
a very long way away, so it's very little forshortening.

00:53:58.510 --> 00:54:04.070
And then a small value has much more forshortening, it
looks like the element is coming right up against your face.

00:54:04.070 --> 00:54:11.730
So here we've chosen a medium perspective value of 800, and
now with that perspective we have our final flip effect.

00:54:14.000 --> 00:54:21.530
[ Applause ]

00:54:21.530 --> 00:54:22.920
>> Okay, so let me summarize transforms.

00:54:22.920 --> 00:54:30.210
So two-dimensional transforms, just like CSS Effects
or the other CSS Effects, allow you to do things in CSS

00:54:30.210 --> 00:54:34.900
that previously you would have had
to burn into your image assets.

00:54:34.900 --> 00:54:39.519
You could do things like diagonal banners
across the corner of a page, stuff like that,

00:54:39.519 --> 00:54:42.599
stuff that you would have had to generate images for before.

00:54:42.599 --> 00:54:50.139
Three-dimensional transforms open up a door to
lots of really interesting interaction behaviors

00:54:50.139 --> 00:54:52.539
that you can code up in your web content.

00:54:52.539 --> 00:54:58.139
You can create some very interesting
models that users can interact with.

00:54:58.139 --> 00:55:03.809
And transforms, we found, combine very
interestingly with transitions and animations,

00:55:03.809 --> 00:55:06.440
there's a really great synergy between the two

00:55:06.440 --> 00:55:11.530
And as I mentioned before, transforms
benefit from hardware acceleration

00:55:11.530 --> 00:55:13.080
when they're running transitions and animations.

00:55:13.079 --> 00:55:18.309
So that gives you really good performance.

00:55:18.309 --> 00:55:20.529
Now let's see what we can do when we put it all together.

00:55:20.530 --> 00:55:26.000
And I'd like to invite Dean back on
the stage to give the final demo.

00:55:26.000 --> 00:55:31.099
[ Applause ]

00:55:31.099 --> 00:55:36.009
>> Okay, so you can go nuts with
this stuff, seriously, it's amazing.

00:55:36.010 --> 00:55:42.330
So let me jump back into the photos, the
slideshow, and I'll skip ahead to where we were

00:55:42.329 --> 00:55:46.139
when we last met, so this is the point where we got off.

00:55:46.139 --> 00:55:52.609
Previously we just had 2D transitions
in the slides, let's add some 3D ones.

00:55:52.610 --> 00:55:54.960
The easy one is we could do a horizontal flip.

00:55:54.960 --> 00:55:59.500
You see a lot of these in keynote,
another common one is the cube.

00:55:59.500 --> 00:56:00.630
Play that back.

00:56:00.630 --> 00:56:07.019
It's pretty easy, here I'm just setting up the rotation
so that the incoming element is sort of transformed

00:56:07.019 --> 00:56:09.599
across to the side and rotated a little bit.

00:56:09.599 --> 00:56:11.860
You can do a fall effect.

00:56:11.860 --> 00:56:16.000
This one of my favorites, you can look
at it in slow motion and say "timber."

00:56:16.000 --> 00:56:21.079
[ Laughter ]

00:56:21.079 --> 00:56:22.809
>> Rotating doors.

00:56:22.809 --> 00:56:25.599
And this is again one of my favorites.

00:56:25.599 --> 00:56:30.199
You can say "Alohamora," for the Harry Potter fans.

00:56:30.199 --> 00:56:33.629
Now you notice this was a transition,
there's something special about this element,

00:56:33.630 --> 00:56:37.000
the other ones were images, this is in fact a video.

00:56:37.000 --> 00:56:39.500
[ Music ]

00:56:39.500 --> 00:56:39.789
>> I can scrub.

00:56:39.789 --> 00:56:47.159
So just because these elements, HTML 5 media
elements audio and video are native to the page,

00:56:47.159 --> 00:56:50.519
they undergo the same CSS Effects that
every other part of the page does.

00:56:50.519 --> 00:56:55.969
I'll just turn it down a little bit and let it play.

00:56:55.969 --> 00:57:01.839
Now someone mentioned that the approach
we take when developing these demos

00:57:01.840 --> 00:57:05.720
where we try and describe a state on elements.

00:57:05.719 --> 00:57:11.139
Now I've set up the CSS to have a
state on it that isn't applied yet,

00:57:11.139 --> 00:57:14.829
and let's see, what we'll do is we'll play a game.

00:57:14.829 --> 00:57:19.840
I want you to all think as hard as you can, you've
got to try and push the page away from the screen.

00:57:19.840 --> 00:57:23.190
At the same time I'm going to sort of
grab it and give it a little twist.

00:57:23.190 --> 00:57:30.400
So you can see what happened there is this is just a state
where I've set the translation in Z which is between you

00:57:30.400 --> 00:57:35.250
and the screen, I've set it to be about negative
1,000 pixels, and I've given it a rotationY

00:57:35.250 --> 00:57:40.000
of about 30 degrees around the Y axis which is up and down.

00:57:40.000 --> 00:57:42.489
And you notice that the video is still playing.

00:57:42.489 --> 00:57:46.500
In fact, we can still interact with the video.

00:57:46.500 --> 00:57:48.500
[ Music ]

00:57:48.500 --> 00:57:54.730
[ Applause ]

00:57:54.730 --> 00:57:55.670
>> But wait, there's more.

00:57:55.670 --> 00:57:57.840
[ Laughter ]

00:57:57.840 --> 00:58:00.170
>> So this is a pretty simple page.

00:58:00.170 --> 00:58:03.079
Let's look at it in terms of the
number of elements in the page.

00:58:03.079 --> 00:58:09.119
We've got a back draw, we've got a navigation menu down
the side, we've got the photos or the video elements,

00:58:09.119 --> 00:58:11.509
and we've got the thumbnails on the
bottom, so that's four elements.

00:58:11.510 --> 00:58:12.850
So let's take a look at that.

00:58:12.849 --> 00:58:17.559
Whoops, I went back, let me go back again.

00:58:17.559 --> 00:58:20.079
You can see it's split out into 3D mode.

00:58:20.079 --> 00:58:24.000
And again, all the elements are still interactive.

00:58:24.000 --> 00:58:26.530
[ Music ]

00:58:26.530 --> 00:58:27.640
>> But wait, there's more.

00:58:27.639 --> 00:58:29.779
[ Laughter ]

00:58:29.780 --> 00:58:35.650
>> So this is still really a normal regular webpage,
I can actually interact with it any way I want.

00:58:35.650 --> 00:58:39.000
So we can actually see around the back.

00:58:39.000 --> 00:58:48.019
[ Applause ]

00:58:48.019 --> 00:58:52.630
>> So you remember the flip effect, we saw it
from front on, we can actually see it from side

00:58:52.630 --> 00:58:54.960
on here and you can see how it works in 3D.

00:58:54.960 --> 00:59:02.260
And actually really see, as Simon mentioned, that the
back of the card has the text, and then we flip it around.

00:59:02.260 --> 00:59:08.440
You'll notice you can still see the video playing
backwards through the slightly transparent element.

00:59:08.440 --> 00:59:11.000
It's hard to see, it's not a bright video.

00:59:11.000 --> 00:59:13.579
[ Music ]

00:59:13.579 --> 00:59:20.949
>> Okay, so again, at the start we had these
transforms that were sliding the photos around.

00:59:20.949 --> 00:59:25.299
Let me just try and do one of those, and
you can see exactly how it was in 3D.

00:59:25.300 --> 00:59:27.030
When it was flat it was sliding in from the left side,

00:59:27.030 --> 00:59:31.890
but when we slightly rotate it we can
actually see it come in to the right place.

00:59:31.889 --> 00:59:33.940
And again, you know, down.

00:59:33.940 --> 00:59:40.090
And we go to a crossfade that just
happens so let's back out.

00:59:40.090 --> 00:59:47.850
Whoa. And it gets the page to work, I didn't do
any tricks, this wasn't a special mode in the browser,

00:59:47.849 --> 00:59:52.000
this is all done JavaScript and CSS in the page.

00:59:52.000 --> 00:59:55.670
So like I said, you know, these
things give you incredible power.

00:59:55.670 --> 01:00:03.940
It's just so much fun to code with them, so that the
world is the limit, you can do whatever you want.

01:00:03.940 --> 01:00:06.539
As you may notice, it's kind of easy to get carried away.

01:00:06.539 --> 01:00:08.579
[ Laughter ]

01:00:08.579 --> 01:00:13.000
>> So that's all we've got, Simon
will bring it back and wrap it up.

01:00:13.000 --> 01:00:22.650
[ Applause ]

01:00:22.650 --> 01:00:23.220
>> Thanks, Dean.

01:00:23.219 --> 01:00:28.329
So Dean was working on that demo at 4:00 this
morning, and I saw one of his checking comments,

01:00:28.329 --> 01:00:31.000
and his checking comment was "I
think I may have gone too far."

01:00:31.000 --> 01:00:34.150
[ Laughter ]

01:00:34.150 --> 01:00:35.750
>> Totally.

01:00:35.750 --> 01:00:38.250
No, it's great.

01:00:38.250 --> 01:00:45.769
So I talked about CSS Effects we can do on text
and images, with text and images, static effects.

01:00:45.769 --> 01:00:51.329
And what I did mention at that point was all of these CSS
Effects in the first section are fully supported on Safari

01:00:51.329 --> 01:00:53.639
on iPhone and Safari on desktop, in Safari 4.

01:00:53.639 --> 01:01:01.480
And then I talked about transitions and animations,
and again, those are supported in both places too.

01:01:01.480 --> 01:01:06.690
And right in the beginning I was talking about how
transitions are useful for communicating the changes

01:01:06.690 --> 01:01:11.590
in state in your page and really how easy they are, and
that's the key point, is transitions are really easy.

01:01:11.590 --> 01:01:15.510
With one line you can get these
really nice effects on your page.

01:01:15.510 --> 01:01:21.330
Then in the final section I talked about
two-dimensional and three-dimensional transforms.

01:01:21.329 --> 01:01:28.389
And again, these allow you to use CSS instead
of using static image assets on your webpages.

01:01:28.389 --> 01:01:32.529
3D is really great for doing very neat
interactive stuff like you saw on the demos.

01:01:32.530 --> 01:01:38.019
And these interact really well with transitions
and animations, those things work great together.

01:01:38.019 --> 01:01:43.809
We've got some other things we can do, that we can
integrate with our web content too, we've got audio

01:01:43.809 --> 01:01:47.739
and video as you saw in the demo, it
was first class citizens in the webpage.

01:01:47.739 --> 01:01:54.699
And the key point here is that all of these features that
I've talked about are fully integrated into the web engine,

01:01:54.699 --> 01:01:59.839
so they all work seamlessly together
exactly how you would expect.

01:01:59.840 --> 01:02:03.410
And you know, go nuts, they're all inside of WebKit.

01:02:03.409 --> 01:02:12.230
We really want to see what you can do when you use
all these CSS Effects, animations, and transforms.

01:02:12.230 --> 01:02:17.300
So if you want to jump in and get started and
you have questions, you can email Vicki Murley

01:02:17.300 --> 01:02:19.010
or Mark Malone if it's more iPhone related.

01:02:19.010 --> 01:02:22.020
And there's a bunch of documentation
on this on the Safari Dev Center.