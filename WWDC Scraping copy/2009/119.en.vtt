WEBVTT

00:00:12.849 --> 00:00:13.689
>> Hi everyone.

00:00:13.689 --> 00:00:20.170
Welcome. My name is Patrick; I'm an
iPhone Engineer on the Core Location team.

00:00:20.170 --> 00:00:23.780
Today I'll be talking to you about
Finding Your Place with Core Location.

00:00:23.780 --> 00:00:27.970
So why location?

00:00:27.969 --> 00:00:32.489
Well, location is really compelling
because it's not just about navigation.

00:00:32.490 --> 00:00:39.829
It allows us to find and visualize
information in a geographical sense.

00:00:39.829 --> 00:00:47.530
Now, as I was preparing this talk I was going to put some
samples together of how you can use location services,

00:00:47.530 --> 00:00:52.920
but we've offered location services on the iPhone for
the past year, and really I thought it would be cool just

00:00:52.920 --> 00:00:59.039
to actually grab some of the examples on my own phone
and show you some of the great things you've done.

00:00:59.039 --> 00:01:05.769
Because really you've pushed the
potential of our technology.

00:01:05.769 --> 00:01:13.469
Yelp . Yelp uses location to allow you
to find nearby venues and restaurants

00:01:13.469 --> 00:01:19.310
so you don't have to walk around hungry anymore.

00:01:19.310 --> 00:01:20.870
Brightkite.

00:01:20.870 --> 00:01:24.920
Brightkite uses location to geotag a specific spot.

00:01:24.920 --> 00:01:31.170
Now a geotag is a message of a picture that
you could leave virtually at a location,

00:01:31.170 --> 00:01:34.859
and someone else with that App could
come to the location and see that message

00:01:34.859 --> 00:01:38.390
like oh Patrick was here yesterday and had Cappuccino.

00:01:38.390 --> 00:01:43.579
I think I'll try that out.

00:01:43.579 --> 00:01:48.129
Indie Bound uses location to help
you find that nearby bookstore

00:01:48.129 --> 00:01:52.849
so you can pick up the title you've been looking for.

00:01:52.849 --> 00:01:54.439
Geocaching.

00:01:54.439 --> 00:02:00.159
Geocaching uses location to help you go on a little
treasure hunt with friends and find that geocach

00:02:00.159 --> 00:02:02.689
or that hidden item in your neighborhood.

00:02:02.689 --> 00:02:06.519
You could also set up geocaches for
others to find; so that's pretty cool.

00:02:06.519 --> 00:02:15.449
And of course during the campaign you could use
the Obama app to find nearby political events.

00:02:15.449 --> 00:02:16.439
Lastly, Tweetie.

00:02:16.439 --> 00:02:24.490
Tweetie uses location to allow you to update
your Twitter page and look at nearby Tweets.

00:02:24.490 --> 00:02:28.310
So these are all fantastic examples
and there are thousands of other apps

00:02:28.310 --> 00:02:31.759
on the App Store that really use location in unique ways.

00:02:31.759 --> 00:02:38.250
Actually I was at the Smule talk during lunch yesterday and
they were showing some really fantastic pieces of location.

00:02:38.250 --> 00:02:47.379
For instance the Ocarina app shows using
location in various places around the world.

00:02:47.379 --> 00:02:51.710
So the underlying technology that actually
makes this all possible is Core Location.

00:02:51.710 --> 00:02:54.830
Now that's a Framework for both iPhone and iPod Touch.

00:02:54.830 --> 00:02:58.930
But this talk is also addressing one
more platform and that's Snow Leopard.

00:02:58.930 --> 00:03:04.010
So it's really exciting now that we
have location technology on the Mac.

00:03:04.009 --> 00:03:09.579
So I'll be talking about this API
for both of these platforms today,

00:03:09.580 --> 00:03:16.490
and if there's something that's very specific to a
particular platform; for instance iPhone versus the Mac,

00:03:16.490 --> 00:03:18.560
then I'll point that out to you just so you are aware.

00:03:18.560 --> 00:03:25.250
And if you are planning on writing on that
cross-platform location app, do review the documentations;

00:03:25.250 --> 00:03:29.530
the API is similar but there are some minor
differences like one method name is different.

00:03:29.530 --> 00:03:33.550
So please, if you're going to write that
cross-platform app just make sure you check

00:03:33.550 --> 00:03:35.939
out the information that's available.

00:03:35.939 --> 00:03:42.219
So how does Core Location work?

00:03:42.219 --> 00:03:48.830
Well Core Location is really unique because it
abstracts all the location technologies on the device.

00:03:48.830 --> 00:03:53.469
This is both Mac, iPod Touch and the iPhone.

00:03:53.469 --> 00:04:00.199
And what makes this really unique is that since it
abstracts this technology you could use the same API

00:04:00.199 --> 00:04:05.310
on these different platforms and
still achieve what you're looking for.

00:04:05.310 --> 00:04:12.620
So for this example, I'll be talking about iPhone
because it has the most location technologies available.

00:04:12.620 --> 00:04:18.780
The first being cell positioning; iPhone can use the
cell towers around it to determine where it's located;

00:04:18.779 --> 00:04:26.199
iPhone can also perform a Wi-Fi scan to
look at the neighboring Wi-Fi networks

00:04:26.199 --> 00:04:28.879
and use that information to determine where it's located.

00:04:28.879 --> 00:04:31.709
And of course iPhone has GPS.

00:04:31.709 --> 00:04:35.509
So it uses all these technologies together.

00:04:35.509 --> 00:04:39.240
Now, this is actually information
that you're possibly already familiar

00:04:39.240 --> 00:04:42.329
with because this is what we were talking about last year.

00:04:42.329 --> 00:04:44.839
So what's new?

00:04:44.839 --> 00:04:50.810
Well, we thought about what we already had available
on the device, and that's the accelerometer.

00:04:50.810 --> 00:04:56.350
Now what's unique about accelerometer is that it actually
can give us some information about changes in force.

00:04:56.350 --> 00:05:04.660
So what we can determine from that is looking
at accelerometer we can tell if we're very still

00:05:04.660 --> 00:05:09.410
or we can tell if we've started to move again.

00:05:09.410 --> 00:05:15.140
So what's unique about this is we can tell
if we stopped moving or started moving.

00:05:15.139 --> 00:05:20.959
So, you might be familiar with a
pedometer app in the App store.

00:05:20.959 --> 00:05:27.189
Pedometers allow you to track how many paces you've walked,
and can tell you how many feet you walked just by observing

00:05:27.189 --> 00:05:29.719
and monitoring accelerometer information.

00:05:29.720 --> 00:05:37.140
So we kind of do the same thing but we do it
to aide the GPS and the location technology.

00:05:37.139 --> 00:05:42.539
So what that means we can better track you
and try to prevent cases of overshooting.

00:05:42.540 --> 00:05:48.430
So this is something that all devices will get for
free with iPhone 3.0 so we have better tracking.

00:05:48.430 --> 00:05:52.970
And of course we have a new sensor
and that sensor is Compass.

00:05:52.970 --> 00:06:01.300
So Compass is a new service in Core Location and it provides
some advanced features that actually use location technology

00:06:01.300 --> 00:06:06.329
which I'll talk more about later, and
Compass actually does the same thing

00:06:06.329 --> 00:06:11.550
as the accelerometer and assists in tracking for turns.

00:06:11.550 --> 00:06:19.340
So all of these technologies together really make Core
Location unique; because of this unified framework

00:06:19.339 --> 00:06:24.379
that combines all of these various things
together in unique ways to complete one another.

00:06:24.379 --> 00:06:34.680
So, Core Location provides us unified front
and that's what I'll be talking about today.

00:06:34.680 --> 00:06:39.740
So, let's talk about the location
portion first in more detail.

00:06:39.740 --> 00:06:42.879
So finding your location in your app.

00:06:44.089 --> 00:06:52.659
So your location is your geographic position
which includes latitude, longitude and altitude.

00:06:52.660 --> 00:07:00.010
Now we accompany that information with an accuracy
value and this accuracy value is very important.

00:07:00.009 --> 00:07:06.860
The reason for that is because these different types of
location technology have different types of precision;

00:07:06.860 --> 00:07:10.870
so with these different types of precision, for example,

00:07:10.870 --> 00:07:15.910
a cell position might be a little
bit rougher than a GPS position.

00:07:15.910 --> 00:07:19.830
So this accuracy is something that
you should really pay attention to;

00:07:19.829 --> 00:07:23.050
and when you're designing your location
app it's something you should keep in mind

00:07:23.050 --> 00:07:26.370
for the use case of what's appropriate for your app.

00:07:26.370 --> 00:07:34.709
So I'll be talking about all the various types of
location technology from least precise to most precise.

00:07:34.709 --> 00:07:41.209
When I go through these, think about what accuracy
or type of location is valuable to your app

00:07:41.209 --> 00:07:46.289
because there are tradeoffs for having a more
precise location than a less precise location.

00:07:46.290 --> 00:07:55.439
So if you're writing a weather app for example, you might
not need to know the exact street that the device is on.

00:07:55.439 --> 00:08:00.360
For example, you could just know that oh I'm in this
neighborhood so that's the weather in that region.

00:08:00.360 --> 00:08:03.770
So let's start talking about Cell.

00:08:03.769 --> 00:08:12.019
Cell gives you a position between 1 - 3 km;
it's extremely fast to get this type of position

00:08:12.019 --> 00:08:18.569
because an iPhone is already talking to the cell
towers and already has that information available.

00:08:18.569 --> 00:08:27.209
So it's extremely fast which means that it can
actually calculate this position pretty quickly.

00:08:27.209 --> 00:08:30.629
So it takes less power.

00:08:30.629 --> 00:08:38.820
Now, we have actually on 3.0 added a second tier
of cell positioning but the API is still the same;

00:08:38.820 --> 00:08:46.730
and that means if you're in a less dense
cellular area and you can't get a 1 - 3 km fix,

00:08:46.730 --> 00:08:50.560
we could at least give you a 12 km position.

00:08:50.559 --> 00:08:56.449
So, we've done this by design and you're probably
thinking well why would I need something that rough?

00:08:56.450 --> 00:09:02.190
Well, it can allow you to start pre-fetching
information for a geographic location.

00:09:02.190 --> 00:09:07.830
And by pre-fetching information that's particular to
your geographic location, as you continue to improve

00:09:07.830 --> 00:09:13.500
that measurement and wait for that better location
information to arrive, then you have something

00:09:13.500 --> 00:09:17.200
that you could display to the user
and not take the user's time so much.

00:09:17.200 --> 00:09:18.259
That's pretty cool.

00:09:18.259 --> 00:09:22.330
And we have Wi-Fi positioning.

00:09:22.330 --> 00:09:25.410
Wi-Fi positioning is within 100 m.

00:09:25.409 --> 00:09:31.600
What's very unique about Wi-Fi is this the only
location technology that's on Snow Leopard.

00:09:31.600 --> 00:09:37.590
So what the device does in this type of
scenario is that it will scan all around looking

00:09:37.590 --> 00:09:41.500
at the neighboring Wi-Fi networks, and
it will look at those Mac addresses;

00:09:41.500 --> 00:09:46.409
it takes the Mac address information
and it will send it to a server.

00:09:46.409 --> 00:09:49.069
And that server will do some calculations and send back

00:09:49.070 --> 00:09:53.400
to your device some particular
information on where the device is located.

00:09:53.399 --> 00:10:01.429
So, this is a slightly longer process than
Cell, so it means it takes more power.

00:10:01.429 --> 00:10:03.719
And so this is something you have
to think about to yourself--

00:10:03.720 --> 00:10:12.790
OK do a need a 100 m accuracy versus the cell positioning
which is 1 - 3 km so it's just something to keep in mind.

00:10:12.789 --> 00:10:18.289
Another good point about Cell and Wi-Fi is that
both of these technologies work really well indoors.

00:10:18.289 --> 00:10:26.750
So, you can definitely get a fix with one
of these types of location technology.

00:10:26.750 --> 00:10:32.029
Also these technologies will send you a
location update when it's been calculated.

00:10:32.029 --> 00:10:36.120
On the contrary until the next technology which
I'm going to talk about which is of course the GPS.

00:10:36.120 --> 00:10:42.810
So the GPS will give you a position under 40 m and
that position is given to you in heartbeat update--

00:10:42.809 --> 00:10:45.719
meaning it comes at a very frequent rate.

00:10:45.720 --> 00:10:53.779
So, because of this and the GPS uses different types
of hardware, it actually is more power intensive.

00:10:53.779 --> 00:11:02.179
But it does accompany the location information with a little
bit of more data which is the speed you're traveling at

00:11:02.179 --> 00:11:06.500
and the course which is the direction you're traveling.

00:11:06.500 --> 00:11:12.039
So, all this is pretty useful; and again if
you're thinking about the use case for your app,

00:11:12.039 --> 00:11:15.599
you have to think about what type
of accuracy do you want to achieve?

00:11:15.600 --> 00:11:19.720
As Core Location will use these
technologies in the background to come

00:11:19.720 --> 00:11:25.790
up with the solution that you're looking for.

00:11:25.789 --> 00:11:32.669
So, as I was saying, it takes a while to calculate
depending on what type of accuracy you're looking for.

00:11:32.669 --> 00:11:37.120
And this is the user's time we're thinking about
because they'll be looking at their app as it's trying

00:11:37.120 --> 00:11:40.419
to determine and measure your calculation.

00:11:40.419 --> 00:11:51.490
So, if you have a more precise location what actually
happens is that you're given a rough location,

00:11:51.490 --> 00:11:58.710
and then as the device is calculating your next location,
it's trying to refine that measurement in that position.

00:11:58.710 --> 00:12:03.650
So it's giving you location information and closing
in on that accuracy that you're looking for.

00:12:03.649 --> 00:12:12.110
So, if you're taking more time that also means that
it's consuming more power so you do need to be aware

00:12:12.110 --> 00:12:16.779
that when you're using a location
technology, you're definitely using more power

00:12:16.779 --> 00:12:19.240
on the device so it's just something to think about.

00:12:19.240 --> 00:12:25.810
Let's talk about how this actually
works in your application.

00:12:25.809 --> 00:12:28.969
As you can see here, we have two primary components--

00:12:28.970 --> 00:12:33.910
you have a controller in your application that
will receive notifications from the framework

00:12:33.909 --> 00:12:37.429
and then of course you have the Core Location Framework.

00:12:37.429 --> 00:12:44.049
Now if we zoom into these two components we have these
classes in this breakdown which I can talk to you about.

00:12:44.049 --> 00:12:48.229
So, the controller in your app will implement this protocol.

00:12:48.230 --> 00:12:54.610
It's the LocationManagerDelegate protocol and that means it
can implement some methods to receive these notifications.

00:12:54.610 --> 00:12:59.750
In the Core Location Framework
itself it has the LocationManager.

00:12:59.750 --> 00:13:05.100
Now the Manager is really important because that's where you
can configure the type of locations you'd like to receive,

00:13:05.100 --> 00:13:12.259
and it lets you turn on this location engine which will
start providing you with location updates and using power;

00:13:12.259 --> 00:13:19.889
and also when you stop it, it will stop it from
sending you location updates and stop using power.

00:13:19.889 --> 00:13:26.730
So, that location information and directional
information is actually provided by these two gray boxes--

00:13:26.730 --> 00:13:34.159
the location object and the heading object
which I'll talk about a little bit later.

00:13:34.159 --> 00:13:42.179
So these are kind of like the overall
views of the two primary components.

00:13:42.179 --> 00:13:47.789
So before we actually start requesting location
information, we have to specify that desire to accuracy.

00:13:47.789 --> 00:13:53.620
Now remember we talked about the tradeoffs, about
the more precise accuracy, the more time it will take

00:13:53.620 --> 00:13:58.070
and the more power it may consume, so
this is where you actually specify that.

00:13:58.070 --> 00:14:02.440
So you tell the desired accuracy how
precise of a location you desire.

00:14:02.440 --> 00:14:08.470
And once that's configured, we
can call startUpdatingLocation.

00:14:08.470 --> 00:14:13.600
So immediately this will start consuming
power because the Location Manager is hard

00:14:13.600 --> 00:14:16.019
at work trying to calculate that measurement.

00:14:16.019 --> 00:14:21.909
Once that it starts calculating those
measurements it will send those location objects

00:14:21.909 --> 00:14:25.449
to your app and through the delegate callback.

00:14:25.450 --> 00:14:31.990
And that will continue until you have
received the Location Manager object

00:14:31.990 --> 00:14:40.340
that really fits the needs of or
the use case of your application.

00:14:40.340 --> 00:14:44.470
So once this has happened, you
simply call stopUpdatingLocation

00:14:44.470 --> 00:14:50.350
and stopUpdatingLocation will take the Location
Manager to stop working on the measurements

00:14:50.350 --> 00:14:56.310
and you can start conserving power
again so this is very important.

00:14:56.309 --> 00:15:02.639
So you may be thinking to yourself OK I can start and
stop this engine to receive all this location information.

00:15:04.090 --> 00:15:11.759
Well, that does control the frequency or rate
that you receive the location information,

00:15:11.759 --> 00:15:17.620
but there's also another type of configuration that I'd
like to tell you about and that's the distance filter.

00:15:17.620 --> 00:15:23.429
So the distance filter does save you
a little bit of power in terms of IPC.

00:15:23.429 --> 00:15:28.539
What this does is it actually tells the
device OK don't send me a location update

00:15:28.539 --> 00:15:31.129
until I've actually moved a particular distance.

00:15:31.129 --> 00:15:39.509
So once a device is moved that particular
distance, then it will send you the location update.

00:15:39.509 --> 00:15:44.730
So this is another way you can control how
frequent notifications are coming to your app.

00:15:44.730 --> 00:15:47.450
That's pretty unique.

00:15:47.450 --> 00:15:55.280
So we've talked about how to use location technology
now; let's talk more about how to make the most of it.

00:15:55.279 --> 00:16:04.059
So there are some pretty unique points that I'd like to
share with you in order to make the most of this framework.

00:16:04.059 --> 00:16:14.609
So for efficiency, Core Location may cache
location objects; but depending on the use case

00:16:14.610 --> 00:16:17.320
of your app, it really depends on your intentions.

00:16:17.320 --> 00:16:23.400
You should actually check the timestamp for these location
objects before using them; because you don't want a user

00:16:23.399 --> 00:16:27.649
to see an older location than what's
necessary for your use case.

00:16:27.649 --> 00:16:31.500
So my first recommendation to make the most
of the Core Location is to really check

00:16:31.500 --> 00:16:38.289
that timestamp and make sure it fits your use case.

00:16:38.289 --> 00:16:42.699
Another viewpoint to take is location privacy.

00:16:42.700 --> 00:16:49.759
So some users don't want to use location services or may
not want a particular application to use location services.

00:16:49.759 --> 00:16:55.460
And for that there are two dialogues and this is
both for Snow Leopard and for the iPhone as well.

00:16:55.460 --> 00:17:01.200
So this is presented to the user until
they accept or they can push "Don't Allow".

00:17:01.200 --> 00:17:08.370
What "Don't Allow" means is that they do
not desire to use the location services.

00:17:08.369 --> 00:17:11.939
I do recommend to you that if they
do push "Don't Allow" to provide them

00:17:11.940 --> 00:17:14.350
with some type of use case for your application.

00:17:14.349 --> 00:17:19.069
For example, maybe it means to enter in a zip code.

00:17:19.069 --> 00:17:25.789
So, this dialogue gets displayed as
soon as you call startUpdatingLocation.

00:17:25.789 --> 00:17:29.119
And you won't receive location
measurements until the user pushes OK.

00:17:29.119 --> 00:17:37.589
You should keep in mind that there is a global
setting for both Snow Leopard and the iPhone as well.

00:17:37.589 --> 00:17:44.699
And that global setting is a setting that allows a user to
decide if they should use location technology in general.

00:17:44.700 --> 00:17:51.019
But what I'd like to point out to you that if the user
doesn't use location technology, we should really understand

00:17:51.019 --> 00:17:56.960
that and instead of calling startUpdatingLocation,
we should check to see if they have that switch off;

00:17:56.960 --> 00:18:01.960
because we don't want to bother the
user with dialogue boxes and messages.

00:18:01.960 --> 00:18:08.090
So I recommend checking out the Location Manager's
property and that's locationServicesEnabled,

00:18:08.089 --> 00:18:14.829
so check that property before calling startUpdatingLocation
just to save the user who may not desire

00:18:14.829 --> 00:18:22.829
to user location services; and they'll get a
more pleasant experience out of your application.

00:18:22.829 --> 00:18:29.669
So, it's important to think about error handling
too; and error handling is you'll receive NS errors

00:18:29.670 --> 00:18:34.340
through the same delegate callback system that
I had described earlier for location objects.

00:18:34.339 --> 00:18:41.579
So you'll implement a delegate callback and that with
that delegate callback you can receive these errors.

00:18:41.579 --> 00:18:47.259
And there are only two types of errors you should
worry about: The first one is error denied and that's

00:18:47.259 --> 00:18:49.619
when the user pushes that "Don't Allow" button.

00:18:49.619 --> 00:18:53.809
So you'll receive that delegate callback
with that particular information.

00:18:53.809 --> 00:18:57.829
And we have location unknown.

00:18:57.829 --> 00:18:59.960
Location unknown is an OK error.

00:18:59.960 --> 00:19:04.750
It basically means that location services
are hard at work in the background

00:19:04.750 --> 00:19:09.579
and that you'll receive a location pretty
soon so just hang in there it's working on it.

00:19:09.579 --> 00:19:11.289
So these are two types of errors that can occur.

00:19:11.289 --> 00:19:19.639
I'd like to talk to you a little bit about power saving.

00:19:19.640 --> 00:19:23.509
As I said before starting and stopping
the Location Manager--

00:19:23.509 --> 00:19:31.250
actually when you call start, you start consuming
power; when you call stop you stop using power.

00:19:31.250 --> 00:19:38.460
And if you take anything away from making
the most of the core location of these points

00:19:38.460 --> 00:19:42.430
that I'm telling you, I find this one to be very important.

00:19:42.430 --> 00:19:52.410
So if the user is using their device in an area that's
very hard to detect, they measure their location,

00:19:52.410 --> 00:20:02.300
then that desired accuracy you requested could not be
reached or may not be reached for a great period of time.

00:20:02.299 --> 00:20:07.839
So, the core location is hard at work, it's
closing in on that desired location giving you more

00:20:07.839 --> 00:20:13.569
and more location information, the desired accuracy
is closing and closing in and it's not quite reaching

00:20:13.569 --> 00:20:17.039
that desired accuracy you specified originally.

00:20:17.039 --> 00:20:26.309
So what this means is we recommend setting a timer
just as soon as you call startUpdatingLocation.

00:20:26.309 --> 00:20:29.200
So when you set that timer, it will start ticking down

00:20:29.200 --> 00:20:33.870
and if that timer expires before you
received the desired location of your choice,

00:20:33.869 --> 00:20:39.129
then just simply call stopUpdatingLocation and
use the information you've already we received.

00:20:39.130 --> 00:20:43.660
So we recommend doing that to conserve power.

00:20:43.660 --> 00:20:50.420
Another point with regard to conserving
power is you receive the LocationUnknown.

00:20:50.420 --> 00:20:58.400
So for example, if the user disconnects their external GPS
or if they're using their Mac and they move out of range

00:20:58.400 --> 00:21:07.220
of a Wi-Fi network, you should call stopUpdatingLocation
when you receive that LocationUnknown and start a timer.

00:21:07.220 --> 00:21:14.440
And what this means is basically you like to wait out this
period of difficult environment to calculate a location.

00:21:14.440 --> 00:21:20.059
So as soon as that timer has expired,
you can call startUpdatingLocation again

00:21:20.059 --> 00:21:26.829
and start hopefully receiving measurements for that
new environment that the user may have moved into.

00:21:26.829 --> 00:21:32.009
So this is just a tip or a pointer that you
can use to deal with some of these environments

00:21:32.009 --> 00:21:34.680
that might be difficult to calculate a location in.

00:21:34.680 --> 00:21:43.930
So, that's the first part of my talk
where I focused on location technology.

00:21:43.930 --> 00:21:51.330
So we talked about the desired accuracy that you need
to specify and how important that is because it depends

00:21:51.329 --> 00:21:56.939
on the latency-- how long it takes to get
that location, and how much power it takes

00:21:56.940 --> 00:21:59.870
to get the precise location that you're looking for.

00:21:59.869 --> 00:22:06.629
We talked about some of the basics-- the API, and we
also talked about how to make the most of the framework

00:22:06.630 --> 00:22:13.310
to really benefit your app; such as looking at those
timestamps, understanding the user's privacy and trying

00:22:13.309 --> 00:22:20.419
to avoid prompting them with a dialogue if they've got
location services turned off and things of that nature.

00:22:20.420 --> 00:22:23.769
So let's talk about Direction.

00:22:23.769 --> 00:22:30.349
So what is important about Direction?

00:22:30.349 --> 00:22:36.399
Well, Direction is definitely a
means to assist in navigation.

00:22:36.400 --> 00:22:43.560
And aside from navigation, it's also very interesting
to view information in a directional sense.

00:22:43.559 --> 00:22:48.700
So I'll talk more about both of
those points today and I'll also talk

00:22:48.700 --> 00:22:52.660
about a couple different ways you can
get directional information from iPhone.

00:22:52.660 --> 00:23:00.390
And the first, many of you have
probably already used, that's course.

00:23:00.390 --> 00:23:05.240
So course is actually the direction you're traveling in.

00:23:05.240 --> 00:23:09.450
So if I'm walking across the stage
this is the direction I'm traveling in.

00:23:09.450 --> 00:23:14.840
This is provided to you in the CLLocation object
and that's calculated based on your path of travel.

00:23:14.839 --> 00:23:18.049
So you have to be moving for this to happen.

00:23:19.309 --> 00:23:24.490
Now some of you might have written apps that uses
technology already, and you may notice that for example

00:23:24.490 --> 00:23:28.640
if you have a Compass app in the car
and it's using course and you turn it,

00:23:28.640 --> 00:23:32.330
it's still giving you the direction
that the car is moving in.

00:23:32.329 --> 00:23:35.500
Well that's why we have Heading.

00:23:35.500 --> 00:23:40.960
And Headings was provided by the new
magnetometer or the Compass in iPhone 3GS.

00:23:40.960 --> 00:23:49.529
So this is available even when you're stationary so
you don't have to be moving for this to be calculated.

00:23:49.529 --> 00:23:53.899
And it's a direction just like course -- 0 to 359o.

00:23:53.900 --> 00:23:59.800
And what's unique is a heading
is the direction you're facing.

00:23:59.799 --> 00:24:07.619
So if I'm traveling backwards, my course is this way;
but I'm facing this direction which is my heading.

00:24:07.619 --> 00:24:11.449
So these two points can be different; so
that's just something to keep in mind.

00:24:11.450 --> 00:24:16.069
So let's talk more about Heading since it's new.

00:24:16.069 --> 00:24:22.149
In iPhone 3GS we have a new sensor and that's the
magnetometer and that provides a heading information.

00:24:22.150 --> 00:24:25.750
So what that means is that it gives
you a direction to Magnetic North;

00:24:25.750 --> 00:24:29.950
and what's really cool about this
is the device actually can give you

00:24:29.950 --> 00:24:36.170
that direction no matter what orientation
you're holding the device in.

00:24:36.170 --> 00:24:41.300
And we also provide these X, Y, Z
values that represent the vector

00:24:41.299 --> 00:24:46.619
or the magnetic line that's pointing toward magnetic north.

00:24:47.950 --> 00:24:54.870
So that's available through the API and
actually I'll show you a little demo about this.

00:24:54.869 --> 00:24:58.069
So, how does this work exactly?

00:24:58.069 --> 00:25:07.710
Well, the magnetometer aligns itself
with the earth's magnetic field.

00:25:07.710 --> 00:25:12.799
And the earth magnetic field is this
physical phenomenon surrounding the earth

00:25:12.799 --> 00:25:15.990
and it's slightly different than what we're used to.

00:25:15.990 --> 00:25:26.150
What we're used is the North Pole;
and that North Pole is True North.

00:25:26.150 --> 00:25:34.430
Cartographers when they drawn maps usually reference
their map based on the North Pole or True North.

00:25:34.430 --> 00:25:37.410
So we have this difference here.

00:25:37.410 --> 00:25:47.890
We have all compasses that show this magnetic direction
and then we have True North which is what maps you.

00:25:47.890 --> 00:25:55.300
So if we're comparing our heading on a map, it may be
different because depending on where you're located,

00:25:55.299 --> 00:26:00.470
the earth's magnetic field is very different.

00:26:00.470 --> 00:26:07.309
So for example, I'm on a road and
I'm using a magnetic compass,

00:26:07.309 --> 00:26:12.799
depending on where I am it may not be pointing directly
down the road if that road is aligned with True North.

00:26:12.799 --> 00:26:19.440
Wouldn't it be excellent if we had a
compass that could actually display both?

00:26:20.980 --> 00:26:25.069
You can clap.

00:26:27.480 --> 00:26:29.819
So that's what's really unique about iPhone.

00:26:29.819 --> 00:26:34.929
The iPhone GPS can actually display
both True north and Magnetic North.

00:26:37.069 --> 00:26:39.359
So what does this mean exactly?

00:26:39.359 --> 00:26:46.919
So magnetic compasses show this direction so for example if
you're in San Francisco, a magnetic compass will point 14o

00:26:46.920 --> 00:26:51.400
in one direction, different from True North;

00:26:51.400 --> 00:26:56.610
and the same compass in New York City
will point 14o in the other direction.

00:26:56.609 --> 00:27:01.740
But what's really cool about Core Location and
since it already has its location technology,

00:27:01.740 --> 00:27:07.079
we can determine where you're located, we can do
some calculations to determine what the field is

00:27:07.079 --> 00:27:14.109
like at your location, and then we can
automatically correct this and show you True North.

00:27:14.109 --> 00:27:16.389
So what does this mean?

00:27:16.390 --> 00:27:21.300
It means if you're using a map
your compass will actually point

00:27:21.299 --> 00:27:26.200
in the correct direction as opposed to a magnetic direction.

00:27:26.200 --> 00:27:32.640
So if you're in Paris it might point slightly off in
one direction, and as I said here in San Francisco,

00:27:32.640 --> 00:27:38.090
it points 14o slightly in another
direction and also in New York City.

00:27:38.089 --> 00:27:50.299
So it's really great as you can see these blue arrows here,
that's why I'm trying to represent the true North Direction

00:27:50.299 --> 00:27:55.569
and this red arrow is the magnetic North
Direction that most traditional Compasses show.

00:27:55.569 --> 00:28:04.919
So let's talk about how we can actually
use the magnetometer in the iPhone.

00:28:04.920 --> 00:28:12.310
So just as you would configure the
Location Manager for location technology,

00:28:12.309 --> 00:28:16.480
we use the Location Manager also for
the heading and the magnetometer.

00:28:16.480 --> 00:28:25.299
So to check and see if a device
has a magnetometer available in it,

00:28:25.299 --> 00:28:28.480
we have this property on the Location
Manager called Heading Available.

00:28:28.480 --> 00:28:37.509
So simply check this property to determine
if the device has a Compass available.

00:28:37.509 --> 00:28:44.529
And similar to the location technology we
have another property which is Heading Filter.

00:28:44.529 --> 00:28:51.809
Now what this means is you're telling Core
Location only give me heading information

00:28:51.809 --> 00:28:56.119
if the device is turned a certain
particular amount of degrees,

00:28:56.119 --> 00:29:00.299
so you could say only give me updates
if they move the device every 45o.

00:29:00.299 --> 00:29:07.089
So how do you actually get heading information?

00:29:07.089 --> 00:29:11.339
Well they can have this diagram;
this may look very familiar to you.

00:29:11.339 --> 00:29:21.759
And we've actually done this by design, so the
heading API is very similar to the location API.

00:29:21.759 --> 00:29:27.559
When you call startUpdatingHeading, you'll start
receiving heading information in these CLHeading objects;

00:29:27.559 --> 00:29:34.579
and when you call this the device will start
using hotware because it's using the magnetometer.

00:29:34.579 --> 00:29:43.179
When you call stopUpdating Heading you'll stop receiving
heading updates and you'll start conserving power.

00:29:45.910 --> 00:29:51.710
So this True Heading I was talking about earlier
or the direction to the North Pole at True North,

00:29:51.710 --> 00:29:56.970
the direction that maps use, I had
mentioned that this uses location.

00:29:56.970 --> 00:30:02.549
So the device has to have determined a
location within a particular period of time.

00:30:02.549 --> 00:30:06.649
Otherwise this value is reported as -1.0
until a location has been determined.

00:30:06.650 --> 00:30:16.910
And a rough location is OK so you can use that
CLThreekilometersAccuracy, desired accuracy.

00:30:16.910 --> 00:30:24.440
So you tell the Location Manager I'd
like a ThreekilometerAccuracyLocation

00:30:24.440 --> 00:30:29.600
and using that location information, Core
Location will automatically fill this field

00:30:29.599 --> 00:30:33.819
in with a true heading information
based on where the device is located.

00:30:33.819 --> 00:30:42.899
So the default apps on iPhone that use heading
information, they all display True Heading

00:30:42.900 --> 00:30:46.440
and when True Heading's not available,
they'll fall back to the Magnetic Heading.

00:30:46.440 --> 00:30:50.330
So it's just something to keep in mind.

00:30:52.240 --> 00:30:55.779
So let me start off by showing you a
quick Demo; and this Demo is really

00:30:55.779 --> 00:31:04.889
to demonstrate how you can use the raw data
and start using the Compass information.

00:31:04.890 --> 00:31:07.910
Can we switch over the demo machine?

00:31:07.910 --> 00:31:17.820
I have a sample project here and it's actually
available on the Attendee website so if you want

00:31:17.819 --> 00:31:25.349
to follow along you can just look up the Core Location
Session, and under there this code is available.

00:31:25.349 --> 00:31:30.299
Now this project is called testometer and it's a
quick project I've put together and it allows us

00:31:30.299 --> 00:31:34.039
to use the magnetometer to observe magnetic fields.

00:31:34.039 --> 00:31:36.519
The reason why I did this is it gives a good example

00:31:36.519 --> 00:31:42.059
as to how you can use this Compass
raw date of that X, Y, Z I described.

00:31:43.069 --> 00:31:51.099
So here we have this testometer project and you can
see the two primary components I talked about earlier--

00:31:51.099 --> 00:31:56.509
the Gold Box which is Core Location,
and then we have a controller

00:31:56.509 --> 00:32:02.660
in our app which is the testometer view controller.

00:32:02.660 --> 00:32:08.160
So this is the primary view in the application that
will allow us to receive this heading information.

00:32:08.160 --> 00:32:14.540
So if we take a glance at the header, we can see
where-- including the Core Location framework

00:32:14.539 --> 00:32:18.399
and we're implementing the Location
Manager Delegate protocol.

00:32:18.400 --> 00:32:27.000
Now we have a few labels that we'll
be using and even a graph.

00:32:27.000 --> 00:32:33.519
Now if we jump into the implementation with us, there
are a few things that are kind of cool to look at.

00:32:33.519 --> 00:32:42.259
So we have a viewDidLoad so this is called once that primary
view is loaded, and this is where we initialize and create

00:32:42.259 --> 00:32:44.309
that Location Manager that I talked about--

00:32:44.309 --> 00:32:48.690
that whole engine that controls the
location and the heading information.

00:32:50.029 --> 00:32:57.129
So we allocate that here, and then we check
to see if the device has a heading available.

00:32:57.130 --> 00:33:01.470
So in this particular case, you'd have to think about
how you can still provide something useful to the user,

00:33:01.470 --> 00:33:04.900
maybe not show heading information or
you could even fall back to course.

00:33:04.900 --> 00:33:10.920
Of course that's appropriate for your app
so that's a property you should check.

00:33:10.920 --> 00:33:13.890
And here's that filter that I mentioned before.

00:33:13.890 --> 00:33:19.400
We're just saying we want every heading
calculation that's been determined.

00:33:19.400 --> 00:33:24.940
And now we're saying OK let's make this
controller class the delegate to Location Manager.

00:33:24.940 --> 00:33:28.680
So this class is going to be receiving those notifications.

00:33:28.680 --> 00:33:32.560
And here's where we call startUpdatingHeading.

00:33:32.559 --> 00:33:37.139
What this means is that we want to start
receiving that heading information.

00:33:37.140 --> 00:33:49.210
So as these heading events arrive, they
arrive through this pointer object here;

00:33:49.210 --> 00:33:57.819
and because I wanted to make a magnetic field detector,
I'm using this variable that's called a magnitude.

00:33:57.819 --> 00:34:02.299
Really that's allowing us to measure the size of
that magnetic vector that's coming off the phone.

00:34:02.299 --> 00:34:09.150
So it will allow us to really determine the strength
of that magnetic field that the sensor is looking at.

00:34:09.150 --> 00:34:19.880
So we have these X, Y, Z values and we perform the
computation, and we also copy over the heading information.

00:34:19.880 --> 00:34:28.380
And then we call update and update will actually update
the UI so we're updating these four labels we have,

00:34:28.380 --> 00:34:35.030
and then we're updating a little graph
so you can visually see these updates.

00:34:35.030 --> 00:34:45.769
Just to show you, here's the properties that are in this
heading object; so as I said we have a Magnetic Heading

00:34:45.769 --> 00:34:52.340
and then we have True Heading which is -1 until you
determine a location; we are provided timestamp and X, Y,

00:34:52.340 --> 00:34:54.700
Z and I'll talk about accuracy in a moment.

00:34:54.699 --> 00:35:08.859
So if we could switch over to the
Wolfvision so here we have an iPhone 3GS

00:35:08.860 --> 00:35:15.390
and as you can see we have the default Compass app here

00:35:15.389 --> 00:35:21.079
and here's the testometer project
we just looked up the code for.

00:35:21.079 --> 00:35:25.279
So if I launch this app, so here we have it.

00:35:25.280 --> 00:35:30.210
Pretty simple application; we have this text view up
here that determines the strength of the magnetic field

00:35:30.210 --> 00:35:36.590
and then we have these raw magnetic values below
the X, Y, Z and I'm plotting these in real time

00:35:36.590 --> 00:35:39.650
so you can see the history of the data as it changes.

00:35:39.650 --> 00:35:45.710
So as you can see X is red, Y is green, so if I
turn the device on the X Y plane and turn it back,

00:35:45.710 --> 00:35:49.260
you can actually see the X and Y cross over each other.

00:35:54.170 --> 00:36:01.519
So what's also unique here, I have a house
magnet and as I hold it close to the device,

00:36:01.519 --> 00:36:07.289
you can see the magnetic fields fluctuating
so it's detecting when I move that device in.

00:36:07.289 --> 00:36:12.539
So as you can see this is picking up a lot
of magnetic activity around the display here.

00:36:12.539 --> 00:36:18.300
So if we could switch back over the slides.

00:36:18.300 --> 00:36:23.740
So that's our first demo.

00:36:30.210 --> 00:36:34.059
It's a pretty simple starter app just to get you started.

00:36:34.059 --> 00:36:41.360
So as you noticed as I was giving that demo, the device had
that fluctuating magnetic field which is pretty interesting.

00:36:41.360 --> 00:36:50.650
So what that means there is magnetic fields around us
everywhere, and all compasses are affected by them.

00:36:50.650 --> 00:36:57.950
So what that means if your Mac or even the iPhone
itself can produce some type of magnetic field;

00:36:57.949 --> 00:37:06.179
and all of these fields can confuse a traditional needle
compass and it can even interfere with an iPhone Compass.

00:37:06.179 --> 00:37:12.480
But the disadvantage to a needle compass or
other compass devices is that they can't detect

00:37:12.480 --> 00:37:19.960
or know when they're being interfered
with but that's unique for them.

00:37:19.960 --> 00:37:22.820
We do something a little different.

00:37:22.820 --> 00:37:30.500
With that heading object we provide accuracy, so we've
actually determined a way to figure out how inaccurate

00:37:30.500 --> 00:37:34.000
that compass reading could be based
on other interfering magnetic fields.

00:37:34.000 --> 00:37:37.539
So it's pretty cool.

00:37:37.539 --> 00:37:44.279
So that headingAccuracy value will actually act more
dynamically if you're using location information.

00:37:44.280 --> 00:37:49.490
So I recommend trying it out and checking in to it.

00:37:49.489 --> 00:37:53.979
So how does it behave?

00:37:53.980 --> 00:38:02.440
Well if you have small types of magnetic changes in the
magnetic field, that headingAccuracy value will fluctuate.

00:38:02.440 --> 00:38:08.750
So what that means is the heading information you're
receiving has that appropriate Heading Accuracy value,

00:38:08.750 --> 00:38:16.019
the headingAccuracy value may change
from 40o and it may improve up to 10o.

00:38:16.019 --> 00:38:22.219
What this means is that heading value that is being
given to you, is plus or minus this headingAccuracy.

00:38:22.219 --> 00:38:29.529
So what's cool is you can actually use this in
your UI in unique ways; so the Maps application--

00:38:29.530 --> 00:38:34.190
I've kind of darkened the background
just so you can see this more vividly.

00:38:34.190 --> 00:38:40.929
But as you can see the flashlight or this
white cone that indicates the heading

00:38:40.929 --> 00:38:42.230
or the direction you are pointing the device.

00:38:42.230 --> 00:38:48.240
So as you move it the map will rotate
but that's the direction it's facing.

00:38:48.239 --> 00:38:54.269
So if there is a lot of interference
this cone is a little bit wider.

00:38:54.269 --> 00:39:00.599
But, as the accuracy improves of if you move
away from interference, then that cone shrinks.

00:39:01.820 --> 00:39:04.309
And it's kind of a unique way just
to communicate to the user

00:39:04.309 --> 00:39:08.099
that it's not exactly precise,
but there's some interference.

00:39:08.099 --> 00:39:13.650
And of course the finer the width
of the cone, the more precise.

00:39:13.650 --> 00:39:17.490
So there's a lot of really unique
ways you can take advantage of this.

00:39:17.489 --> 00:39:22.339
For instance, if you're making a Compass
application, you can have that needle kind of quiver

00:39:22.340 --> 00:39:29.910
like a traditional compass if you're waving a magnet
near it so there are some cool things about it.

00:39:29.909 --> 00:39:34.599
Well what happens if you have large
swarms of magnetic interference?

00:39:34.599 --> 00:39:39.589
So that headingAccuracy value will be reported as -1.

00:39:39.590 --> 00:39:43.920
And that just means I wouldn't
trust the heading information--

00:39:43.920 --> 00:39:49.960
that magnetic heading value that's
being delivered in that heading object.

00:39:51.130 --> 00:40:01.380
So if that's unreliable or actually if you introduce more
magnetic exposure, like very strong magnetic exposure

00:40:01.380 --> 00:40:10.059
to the device, then it will stop propagating those
magnetic heading values, the CL heading value

00:40:10.059 --> 00:40:13.869
and it will start propagating this heading failure.

00:40:13.869 --> 00:40:18.539
So that's just saying that something is preventing
the device from calculating any type of heading;

00:40:18.539 --> 00:40:20.349
that there's just too much magnetic exposure.

00:40:20.349 --> 00:40:24.929
And I've only seen this if I held like a
very high powered magnet over the device.

00:40:26.000 --> 00:40:29.639
So as soon as that source moves away, it
will stop sending these error messages

00:40:29.639 --> 00:40:35.859
and it will start sending the traditional
heading information back to you again.

00:40:35.860 --> 00:40:42.530
So if there are these different
interfering fields with the compass,

00:40:42.530 --> 00:40:47.720
it is important to know that you can improve this accuracy.

00:40:47.719 --> 00:40:49.769
And there's a couple of ways you can improve it.

00:40:49.769 --> 00:40:54.630
So as I said before you can move away
from that source of heavy interference;

00:40:54.630 --> 00:41:01.809
or we actually use movement to
differentiate two magnetic fields.

00:41:01.809 --> 00:41:03.000
So what does that mean exactly?

00:41:03.000 --> 00:41:07.699
Well the earth magnetic field is everywhere around us.

00:41:07.699 --> 00:41:13.679
But it's hard to differentiate that from a
magnetic that you're holding close to the device.

00:41:13.679 --> 00:41:17.919
So we recommend that you actually
move the device in a 3D motion,

00:41:17.920 --> 00:41:25.019
and that movement will sample the magnetic information
all around the device, and it can differentiate

00:41:25.019 --> 00:41:34.630
and detect the interfering field as part
of that device or the earth magnetic field.

00:41:34.630 --> 00:41:42.079
So by movement it can actually improve
itself and improve its reading.

00:41:42.079 --> 00:41:46.710
So that's pretty cool.

00:41:46.710 --> 00:41:59.019
So you can move away from a magnetic source and by
moving away you can improve your accuracy again;

00:41:59.019 --> 00:42:05.869
and if you're in a clean magnetic environment just by moving
the device, helps it tune in to that earth magnetic field

00:42:05.869 --> 00:42:10.079
and cancel out any interference that's
coming from the device itself possibly.

00:42:10.079 --> 00:42:14.210
So that's how you improve your compass accuracy.

00:42:14.210 --> 00:42:20.110
Now as I said you're moving the device so it's good to
notify the user that they may need to move their device

00:42:20.110 --> 00:42:23.940
to improve accuracy; or move away from this interference.

00:42:23.940 --> 00:42:32.920
So we have an optional message that you could use, and
you'll receive a delegate callback for this message.

00:42:32.920 --> 00:42:39.349
And what that means is just tell your user OK move
your device or move away from that magnetic source.

00:42:41.090 --> 00:42:47.300
This automatically gets dismissed once
the device filters out that interference.

00:42:47.300 --> 00:42:52.700
Or you can manually dismiss it; for example,
if the user goes into your settings view away

00:42:52.699 --> 00:42:56.259
from the main compass view, they you may
want to call this dismissed value just

00:42:56.260 --> 00:43:00.670
so this display isn't over whatever you're looking at.

00:43:00.670 --> 00:43:04.340
So that's everything about direction.

00:43:04.340 --> 00:43:09.550
We talked about course, we talked about heading,
so course is the direction you travel in;

00:43:09.550 --> 00:43:14.060
talked about heading which is provided by the
compass and that's the direction you're facing;

00:43:14.059 --> 00:43:16.509
we talked about magnetic north and true north.

00:43:16.510 --> 00:43:20.890
Magnetic North is the direction of the earth's
magnetic field which compasses align with,

00:43:20.889 --> 00:43:25.779
and then we have True North where the North
Pole, the direction we're most familiar with;

00:43:25.780 --> 00:43:30.019
the direction of the North Star that
cartographers use when they create maps.

00:43:30.019 --> 00:43:38.679
And we talked about using this API and how we could
create a simple magnetic field detector and how important

00:43:38.679 --> 00:43:44.779
that heading accuracy is to determine if there's
interference; and to just visually show to the user

00:43:44.780 --> 00:43:46.800
that there might be some type of interfering field.

00:43:46.800 --> 00:43:54.390
So that's the second part of my talk, and now
I'd like to talk to you about Beyond Navigation.

00:43:54.389 --> 00:44:04.059
So Beyond Navigation is actually quite exciting
and there are a few topics I'd like to discuss.

00:44:04.059 --> 00:44:09.079
There are some additional use cases for
Compass other than just determining direction.

00:44:09.079 --> 00:44:16.049
And I' like to talk about some of the
other platforms you should be aware about.

00:44:16.050 --> 00:44:21.970
And then depending on the use case of your app,
you have some options on frameworks you could use.

00:44:24.480 --> 00:44:32.190
So what's really cool about Compass is that you
can actually use it to view a virtual landscape.

00:44:32.190 --> 00:44:39.110
So we may not be at Apple's Campus right now looking at
the courtyard, but by holding up our device and panning

00:44:39.110 --> 00:44:44.640
that device left and right, we could actually visually
give an experience like we're at that location.

00:44:44.639 --> 00:44:48.159
So it's pretty exciting.

00:44:48.159 --> 00:44:59.759
So the same can be applied to a game so you can actually use
Compass to determine if your player in that game should turn

00:44:59.760 --> 00:45:05.730
down the hallway or turn left or
turn right and that's pretty cool.

00:45:05.730 --> 00:45:10.059
But you might be thinking to yourself,
"Patrick, you cannot already do this

00:45:10.059 --> 00:45:12.130
with accelerometer if you're holding the device."

00:45:12.130 --> 00:45:13.789
Well accelerometer is a little different.

00:45:13.789 --> 00:45:18.099
Accelerometer is when you're tilting that does the action

00:45:18.099 --> 00:45:22.069
but Compass itself you're physically
moving in a particular direction.

00:45:22.070 --> 00:45:28.890
It's a little bit of a difference in user experience.

00:45:28.889 --> 00:45:30.609
Augmented Reality.

00:45:30.610 --> 00:45:33.930
Augmented Reality is another really cool concept.

00:45:33.929 --> 00:45:39.569
So we have these really special devices
that can tell us where we're located,

00:45:39.570 --> 00:45:42.670
and now can tell us which direction we're facing.

00:45:42.670 --> 00:45:47.980
So imagine all of us here right now, we're
standing in front of the Apple Store in New York.

00:45:47.980 --> 00:45:50.429
Well let's find out some more information
about this Apple Store.

00:45:50.429 --> 00:45:55.589
We hold up our device and through the
camera it's displaying the Apple Store

00:45:55.590 --> 00:45:58.420
but it can overlay some additional information.

00:45:58.420 --> 00:46:01.539
So oh we're looking at the Apple Store,
here's the address, this is just an example.

00:46:01.539 --> 00:46:05.849
It gives you that concept that
information can be overlaid in real time,

00:46:05.849 --> 00:46:11.420
and you can see additional information
that you traditionally wouldn't see.

00:46:11.420 --> 00:46:16.690
So that's pretty cool.

00:46:16.690 --> 00:46:24.210
Another kind of neat use case to kind
of think about is Reconstructing Media.

00:46:24.210 --> 00:46:31.760
So the camera on iPhone will accompany and imbed
heading information in the [inaudible] data

00:46:31.760 --> 00:46:35.790
and you can even use heading as you're taking pictures.

00:46:35.789 --> 00:46:38.039
You can store heading information yourself.

00:46:38.039 --> 00:46:44.269
And what's really cool about this is if we
take pictures in several different directions,

00:46:44.269 --> 00:46:50.519
we can actually use that heading information
to automatically merge an image together.

00:46:50.519 --> 00:46:52.329
So this is just one use case example.

00:46:52.329 --> 00:46:57.730
There are many different types of use cases about
restructuring media, but this is just to kind

00:46:57.730 --> 00:47:01.929
of give you a little brainstorm
about the possibilities of Compass.

00:47:01.929 --> 00:47:08.009
Because otherwise if you're doing this it's very difficult;
you have to provide a UI to have the user align these images

00:47:08.010 --> 00:47:13.660
as they're taking the pictures; so we're trying
to think of a less painful way for the user

00:47:13.659 --> 00:47:17.679
to experience something unique from Compass.

00:47:17.679 --> 00:47:28.210
So, something you should keep in mind is that Compass
measures the direction off the top of the device.

00:47:28.210 --> 00:47:35.720
So, if you're writing a game app and it uses Compass and
landscape, you should be aware that you need to shift that.

00:47:35.719 --> 00:47:41.719
Because the intention of your UI may be different
than what the device hardware is calculating.

00:47:41.719 --> 00:47:48.099
So just provide an offset to shift it over
and if you're using the device and landscape

00:47:48.099 --> 00:47:51.759
in the other direction, you can shift it over as well.

00:47:53.190 --> 00:47:59.750
There's just some things to keep in mind; and do be aware
that if you are applying this shift to the heading value

00:47:59.750 --> 00:48:09.760
so it's working in landscape, you will be wrapping around
when you hit that 359o or you're coming back to 0o.

00:48:09.760 --> 00:48:11.300
So let me show you a quick demo.

00:48:11.300 --> 00:48:22.400
So I put another quick application together just to kind
of give you an idea of some of the potential of Compass.

00:48:22.400 --> 00:48:40.900
I call this Spectacle-- so basically what this allows is
if we're on a virtual plane, I can actually turn the device

00:48:40.900 --> 00:48:46.590
and we're actually looking at Mars in different directions.

00:48:46.590 --> 00:48:48.430
So I know what some of you maybe thinking.

00:48:48.429 --> 00:48:50.429
This is out of this world.

00:48:50.429 --> 00:48:54.559
But it's just one of the potential use cases you could do.

00:48:54.559 --> 00:49:01.590
So here what we're doing is we're
animating an offset for an image view.

00:49:01.590 --> 00:49:06.200
So that's one really interesting potential use case.

00:49:06.199 --> 00:49:12.179
Could we switch back over to the slides please?

00:49:12.179 --> 00:49:19.819
Oh another point that I should mention to you is that
you can actually even overlay core animation layers,

00:49:19.820 --> 00:49:26.620
and depending on the direction the device is being moved
in, you can rotate or move those core animation layers

00:49:26.619 --> 00:49:29.909
and create an application like a kaleidoscope for example.

00:49:29.909 --> 00:49:35.899
So there are a lot of really cool things
you can do with directional information.

00:49:37.260 --> 00:49:46.390
So some other points I'd like to make and when
using the Core Location Framework do be aware

00:49:46.389 --> 00:49:53.309
that there's multiple platforms that you're supporting;
and if you're writing that navigation app that was

00:49:53.309 --> 00:50:01.320
for iPhone previously, be aware that it's now
possible for iPod Touches to have an external GPS.

00:50:01.320 --> 00:50:02.720
So don't just limit your app.

00:50:02.719 --> 00:50:07.269
You have more potential customers now.

00:50:07.269 --> 00:50:18.599
It's also good to know that you should be aware
if you're writing a location app for the Mac,

00:50:18.599 --> 00:50:22.639
that Mac may not have a Wi-Fi card for example

00:50:22.639 --> 00:50:25.329
So just some things to keep in mind.

00:50:27.159 --> 00:50:33.980
Also, depending on your use case, some of you may
have attended the MapKit session this morning.

00:50:33.980 --> 00:50:39.059
Now MapKit's a really cool framework and
that actually sits on top of Core Location;

00:50:39.059 --> 00:50:44.710
and you can receive location information from MapKit.

00:50:44.710 --> 00:50:50.860
So MapKit provides you with map views so
you can display maps in your application,

00:50:50.860 --> 00:50:55.710
and it provides some other cool things like reverse
Geocoding so you can take a latitude, longitude,

00:50:55.710 --> 00:51:00.289
convert that to an address or a neighborhood
name; and as I said it uses Core Location,

00:51:00.289 --> 00:51:04.710
so you can retrieve location information from MapKit.

00:51:04.710 --> 00:51:09.980
So when you're building and designing your app
you should be thinking about what's appropriate

00:51:09.980 --> 00:51:12.059
or what's the appropriate use case for your application.

00:51:12.059 --> 00:51:17.429
So because there's definitely a tradeoff here,
you can choose from a couple different frameworks.

00:51:17.429 --> 00:51:22.960
So if you're using location, if you don't
have a mapview, it's probably most efficient

00:51:22.960 --> 00:51:28.349
to just call a Core Location directly instead
of calling it through the MapKit framework.

00:51:28.349 --> 00:51:34.420
Compass is provided by Core Location so you'll have to
talk to Core Location directly for the Compass information.

00:51:34.420 --> 00:51:41.789
And of course, turn by turn you have to use
Core Location, and if you're using mapviews

00:51:41.789 --> 00:51:45.119
and reverse Geocoding then you can use MapKit.

00:51:45.119 --> 00:51:48.179
So just some use cases to think about.

00:51:48.179 --> 00:51:52.429
And that wraps up everything I
wanted to chat with you about today.

00:51:52.429 --> 00:51:59.940
So we talked about finding your location, how
appropriate it is to set that desired accuracy,

00:51:59.940 --> 00:52:06.349
and how Core Location is the unified framework for
providing you with different types of location information;

00:52:06.349 --> 00:52:09.969
and we talked about direction-- so the
difference between course and heading;

00:52:09.969 --> 00:52:16.359
we talked about how iPhone can show Magnetic
North and True North using location information.

00:52:16.360 --> 00:52:21.260
Then we kind of went beyond navigation and talked
about some fun use cases that you can implement

00:52:21.260 --> 00:52:25.220
with heading information; and supporting multiple platforms,

00:52:25.219 --> 00:52:30.609
and thinking about what framework
might be most appropriate for your app.

00:52:30.610 --> 00:52:32.309
There's more information.

00:52:32.309 --> 00:52:38.239
Please contact our Evangelist, Matt Drance, and
you can check out the API references online.