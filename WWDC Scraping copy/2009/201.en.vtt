WEBVTT

00:00:12.720 --> 00:00:14.520
>> Welcome to Session 201.

00:00:14.519 --> 00:00:17.129
This is the Safari and WebKit Overview.

00:00:17.129 --> 00:00:22.009
My name is Darin Adler and I'm Director
of Safari and WebKit Engineering at Apple.

00:00:22.010 --> 00:00:27.210
[ Applause ]

00:00:27.210 --> 00:00:30.679
>> So we'll talk a little bit today about Safari and WebKit.

00:00:30.679 --> 00:00:33.630
What are they?

00:00:33.630 --> 00:00:35.810
[Laughs] How you can get involved in the development.

00:00:35.810 --> 00:00:37.420
WebKit is an open source project.

00:00:37.420 --> 00:00:43.719
And so you can be involved directly in a way that you can't
always with other projects, and also some new technology

00:00:43.719 --> 00:00:47.179
in the latest versions of Safari and WebKit.

00:00:47.179 --> 00:00:50.769
So let's start with Safari.

00:00:50.770 --> 00:00:55.680
It's-- really if you want to talk about WebKit, the
best place to start is the reason we developed WebKit

00:00:55.679 --> 00:00:58.700
in the first place, and that's the Safari Project.

00:00:58.700 --> 00:01:02.540
Now as you know, Safari is the web browser on Mac OS X.

00:01:02.539 --> 00:01:05.459
It's also available on Windows and the new Safari 4.

00:01:05.459 --> 00:01:07.909
You can download for Mac or Windows.

00:01:07.909 --> 00:01:10.939
And Safari is also the browser on iPhone.

00:01:10.939 --> 00:01:14.819
And iPhone 3 contains a brand new version of Safari.

00:01:14.819 --> 00:01:21.599
Inside all of these different versions of Safari
are the same engines, the open source WebKit engine.

00:01:21.599 --> 00:01:29.750
Now, a lot of people ask, if I'm a website
developer, why should I think about Safari?

00:01:29.750 --> 00:01:31.799
And there's a simple answer.

00:01:31.799 --> 00:01:35.019
Lots of people browse the web with Safari.

00:01:35.019 --> 00:01:38.399
Here's a graph starts four years
ago and shows what's been happening

00:01:38.400 --> 00:01:42.480
with Safari market share and the
line just continues to point up.

00:01:42.480 --> 00:01:44.219
Safari market share is growing.

00:01:44.219 --> 00:01:45.859
At this point, it's more than 8%.

00:01:45.859 --> 00:01:51.060
So, you know, one out of every 12 people
come in any website is using Safari.

00:01:51.060 --> 00:01:57.990
Now, this includes both iPhone
and desktop versions of Safari.

00:01:57.989 --> 00:02:04.179
If you focus in on the mobile space,
it's even more compelling story.

00:02:04.180 --> 00:02:09.150
Safari is the number one browser for people
with mobile devices doing web browser.

00:02:09.150 --> 00:02:10.460
That's 65%.

00:02:10.460 --> 00:02:19.000
And then if you go past Safari and look at the other web
browsers, the next 14% are also other WebKit based browsers.

00:02:19.000 --> 00:02:21.590
So the same basic engine as Safari.

00:02:21.590 --> 00:02:26.259
And everyone else combined is 21%.

00:02:26.259 --> 00:02:33.909
Now, the latest version of Safari with all
the latest features is Safari 4 and iPhone 3.

00:02:33.909 --> 00:02:39.900
These-- everything I talked about during the rest of
the talk, the new features, the things you're hearing

00:02:39.900 --> 00:02:45.520
about in other presentations this
week are in those newest versions.

00:02:45.520 --> 00:02:51.170
Now, let's zoom in from Safari and zoom in on WebKit.

00:02:51.169 --> 00:02:52.609
Where is WebKit in this picture?

00:02:52.610 --> 00:02:55.660
Well, it's the bottom part.

00:02:55.659 --> 00:03:00.319
[Laughs] When you take a look at a web browser and
there's the edge and the chrome, the things that you use

00:03:00.319 --> 00:03:03.639
to control what website you're viewing,
those are all provided by the browser.

00:03:03.639 --> 00:03:09.519
But in the content area, this is really the browser
engine, and that's what WebKit is, the browser engine.

00:03:09.520 --> 00:03:13.659
At this point, something interesting and new has happened.

00:03:13.659 --> 00:03:16.759
WebKit has become an industry standard.

00:03:16.759 --> 00:03:21.219
Anyone building a serious mobile phone looks at WebKit

00:03:21.219 --> 00:03:25.650
and they're choosing WebKit as the
engine to build browsers around.

00:03:25.650 --> 00:03:27.200
And this is really significant.

00:03:27.199 --> 00:03:33.589
This means that certain types of advances, when they happen
in WebKit, that's enough to move the industry forward.

00:03:33.590 --> 00:03:40.900
And we're not the only ones to have noticed this.

00:03:40.900 --> 00:03:47.240
If you're familiar with the history of the Safari WebKit
Project, we began with an open source project called KHTML.

00:03:47.240 --> 00:03:54.810
And Lars Knoll, one of the founders of the KHTML
Project said that "WebKit erodes the boundaries

00:03:54.810 --> 00:03:58.509
between the desktop, mobile phones, and the web."

00:03:58.509 --> 00:04:02.389
And really what he's talking about here is that the new--

00:04:02.389 --> 00:04:05.739
by putting technologies into WebKit,
we can move the web forward.

00:04:05.740 --> 00:04:15.250
Now, when you go-- when you take a look at what
people do with WebKit, you'll see a huge number

00:04:15.250 --> 00:04:18.279
of different applications and of different types.

00:04:18.279 --> 00:04:27.059
So here are some desktop applications and I'm not even
touching the many of the 50,000 iPhone Papplications.

00:04:27.060 --> 00:04:28.530
And here are some of them suing WebKit.

00:04:28.529 --> 00:04:32.500
First of all, there's a bunch of web browsers
built on WebKit and you might recognize one

00:04:32.500 --> 00:04:35.930
of the icons of your favorite browsers up here.

00:04:35.930 --> 00:04:41.300
But beyond web browsers there's a whole bunch of
communication applications from Apple Zone, iChat,

00:04:41.300 --> 00:04:47.020
to all sorts of different types of
chat applications built on WebKit.

00:04:47.019 --> 00:04:49.569
There are development tools that make use of WebKit.

00:04:49.569 --> 00:04:54.430
Apple Zone iWeb, tools like Adobe's
Dreamweaver and Contribute.

00:04:54.430 --> 00:04:57.240
And these are built on top of WebKit as well.

00:04:58.310 --> 00:05:03.410
There are all kinds of mail, and I
guess another type of communication app,

00:05:03.410 --> 00:05:07.260
Apple's Mail application is built on WebKit.

00:05:07.259 --> 00:05:14.089
Microsoft's Entourage makes use of WebKit and
these others that you see here are all WebKit apps.

00:05:14.089 --> 00:05:16.459
Adobe has a platform called Air.

00:05:16.459 --> 00:05:19.829
That's a platform designed around WebKit.

00:05:19.829 --> 00:05:25.669
And there's a variety of Mac OS X applications
that use WebKit and all sorts of different ways.

00:05:25.670 --> 00:05:29.270
For example, Aperture uses it as
part of its web publishing features.

00:05:29.269 --> 00:05:35.089
Dashboard is completely based on WebKit as the
architecture for what widgets are and so forth.

00:05:35.089 --> 00:05:44.500
All in all, there are over a hundred applications that
are using WebKit as a fundamental part of what they do.

00:05:44.500 --> 00:05:49.399
And that means that improvements we make to
WebKit aren't just about the web browser.

00:05:49.399 --> 00:05:55.089
They have in effect on any of these
apps, including your own.

00:05:55.089 --> 00:06:00.929
Now, when it comes to using WebKit inside an
application, there are two different APIs you use.

00:06:00.930 --> 00:06:05.560
One, if you're working on Mac OS X at a
different one if you're working on iPhone.

00:06:05.560 --> 00:06:08.480
And there's a session that goes
in detail about each of these.

00:06:08.480 --> 00:06:15.040
If you're interested in the iPhone UIWebKit class, that's
the displaying web content in iPhone application session.

00:06:15.040 --> 00:06:19.810
And if you're interested in the WebView
class, which is what you use on Mac OS X,

00:06:19.810 --> 00:06:23.939
that's the leveraging web content in
Mac OS X applications with WebKit.

00:06:23.939 --> 00:06:27.480
And these go beyond the surface and
talk about the details of what it takes

00:06:27.480 --> 00:06:32.009
to really take advantage of those Objective-C APIs.

00:06:32.009 --> 00:06:37.310
[ Pause ]

00:06:37.310 --> 00:06:43.889
>> Alright, so that's the basics about what
Safari is or WebKit is, who's using it.

00:06:43.889 --> 00:06:52.219
Now, let's move on to the WebKit Open Source Project
and what it takes to get involved with WebKit.

00:06:52.220 --> 00:06:58.990
You know, it's one thing to say that WebKit is open source.

00:06:58.990 --> 00:07:04.210
Open source means that there's certain kinds of
licenses and you're allowed to use that source code.

00:07:04.209 --> 00:07:07.939
But WebKit goes beyond that and
has an open development model.

00:07:07.939 --> 00:07:08.819
That's truly open.

00:07:08.819 --> 00:07:12.819
That means that you can get involved and
see what's going on and become a part of it.

00:07:12.819 --> 00:07:15.079
And a lot of people have done that.

00:07:15.079 --> 00:07:21.810
Since 2005, more than 540 people
have gotten involved by contributing.

00:07:21.810 --> 00:07:28.180
So this is not just someone who came by to see what was
going on but have actually had an effect made a bug fix,

00:07:28.180 --> 00:07:33.050
helped with something like the website,
and that's a ton of people that's--

00:07:33.050 --> 00:07:37.750
believe me, that's way more than work for me at Apple.

00:07:37.750 --> 00:07:43.420
And if you take a look at what the breakdown
is of who does what kinds of contributions--

00:07:43.420 --> 00:07:49.920
excuse me, of how much of the contribution comes,
it's still a little bit over three quarters from Apple

00:07:49.920 --> 00:07:53.170
and about a quarter from all the other folks combined.

00:07:53.170 --> 00:07:59.170
That's individuals who've chosen to get involved in
the project, and other companies who are contributing.

00:07:59.170 --> 00:08:05.370
Now, when I say get involved, the
question is how do we all work together

00:08:05.370 --> 00:08:08.680
and what are the resources we use to work together?

00:08:08.680 --> 00:08:11.319
The most important one, sort of the central thing

00:08:11.319 --> 00:08:14.750
that everything else is structured
around is the source code itself.

00:08:14.750 --> 00:08:17.589
And we have a public subversion source code repository.

00:08:17.589 --> 00:08:20.319
Anyone interested in the project
can check out the latest code.

00:08:20.319 --> 00:08:24.149
And in fact, all the code changes
are seen live in real-time.

00:08:24.149 --> 00:08:30.159
In fact, if you'd watched last week you would have
seen the WWDC branch in our source code repository

00:08:30.160 --> 00:08:35.970
which was us putting the final finishing
touches on the Safari 4 version of WebKit.

00:08:35.970 --> 00:08:38.910
There's also a public bug database.

00:08:38.909 --> 00:08:43.719
And so this means that you can file a bug and
see what happens to the bug after you file it,

00:08:43.720 --> 00:08:46.950
have a discussion with other contributors across companies.

00:08:46.950 --> 00:08:51.610
And then what goes hand in hand with the
bug database is you need something to test.

00:08:51.610 --> 00:08:56.840
You need to be able to-- if someone says I fixed a bug,
you need to be able to try out and see if that fix worked.

00:08:56.840 --> 00:08:59.700
And that's what nightly builds are all about.

00:08:59.700 --> 00:09:07.000
They're not really nightly but they're new builds all the
time and you can use those to try out and see if someone

00:09:07.000 --> 00:09:10.429
who thought they fixed the bug
has actually done it successfully.

00:09:10.429 --> 00:09:15.069
It gives you a preview also of what's
happening with the WebKit engine.

00:09:15.070 --> 00:09:18.150
Now, nightly builds are builds of WebKit, not of Safari.

00:09:18.149 --> 00:09:22.360
So they let you try the existing Safari
that you have but with the latest, greatest,

00:09:22.360 --> 00:09:28.360
newest version of the WebKit engine, and
they're available for both Mac and Windows.

00:09:28.360 --> 00:09:40.180
And then finally, the communication channels that
we use beyond just the bug database, there's--

00:09:40.179 --> 00:09:43.639
the website itself, and webkit.org
contains a pointer to all these things.

00:09:43.639 --> 00:09:47.319
And in fact, if that was the only thing
you knew, you could find everything else.

00:09:47.320 --> 00:09:52.900
And we also have a mailing list with lots of discussion
about development and an IRC channel where lots

00:09:52.899 --> 00:09:55.399
of the design actually takes place in real-time,

00:09:55.399 --> 00:09:59.649
people around the world talking to
each other about WebKit development.

00:09:59.649 --> 00:10:04.250
Now I mentioned the bug database, there are a
few benefits to having an open bug database.

00:10:04.250 --> 00:10:10.710
You can see what's going on with the bugs and
test fixes right after they're checked in.

00:10:10.710 --> 00:10:16.240
>> Similarly, you get a view of
what's happening with features.

00:10:16.240 --> 00:10:21.070
When new features go into WebKit, often, they
are discussed soon afterwards on the blog.

00:10:21.070 --> 00:10:24.640
So just by reading the blog, you can keep
tabs on what's going on with the project.

00:10:24.639 --> 00:10:28.580
But also, if you participate in the
Mailing Lists on the IRC Channel,

00:10:28.580 --> 00:10:32.370
you can get feedback about these features while
they are under development and before they ever go

00:10:32.370 --> 00:10:37.529
out in a browser release and provide
feedback that really helps shape the future

00:10:37.529 --> 00:10:42.350
of both the WebKit project and of web technology.

00:10:42.350 --> 00:10:48.550
And we participate in all sorts of standard
organizations and many of these have open membership.

00:10:48.549 --> 00:10:53.559
So you can help polish features and get them ready
for the standards process and even participate

00:10:53.559 --> 00:10:57.829
in the discussion with the standards organization.

00:10:57.830 --> 00:11:02.860
For example, the HTML 5 working
group, the W3C has open mailing lists.

00:11:02.860 --> 00:11:11.490
Alright, so if you wanted to go beyond just following
along with features and even talking about features,

00:11:11.490 --> 00:11:19.110
you can get involved more deeply and the big next steps are
testing yourself and reporting bugs based on your testing

00:11:19.110 --> 00:11:23.060
and then actually submitting patches
for our fixes and new features.

00:11:23.059 --> 00:11:24.979
So let's just go quickly though each of these.

00:11:24.980 --> 00:11:26.850
Here is what you need to do to test.

00:11:26.850 --> 00:11:28.310
Step one is to download a build.

00:11:28.309 --> 00:11:30.329
Step two, browse the web.

00:11:30.330 --> 00:11:30.750
That's it.

00:11:30.750 --> 00:11:33.659
There is no step three.

00:11:33.659 --> 00:11:42.179
So the nightly builds are really usable if you're
using Safari with a nightly build of WebKit.

00:11:42.179 --> 00:11:48.739
It's often a high quality browser that
you can use for your day to day work.

00:11:48.740 --> 00:11:53.220
And John Gruber of the well-known blog, Daring Fireball,

00:11:53.220 --> 00:11:57.090
said that his main web browser
is the nightly build of WebKit.

00:11:57.090 --> 00:12:01.509
You don't just have to be someone who's trying
to do software development to experiment

00:12:01.509 --> 00:12:05.669
with our nightly builds and try out our latest engines.

00:12:05.669 --> 00:12:10.309
Now, once you do that, you're going
to have some experiences like this.

00:12:10.309 --> 00:12:16.979
Let's say here's an example of a Website
with the ancient Safari 4 Public Beta, there.

00:12:16.980 --> 00:12:24.220
You might remember that from two days
ago when it was the latest Safari.

00:12:24.220 --> 00:12:29.660
And it supposed to look like this but one day you
download a nightly build and instead it looks like this.

00:12:29.659 --> 00:12:35.689
So for you as someone testing, that's an
exciting moment because you found bug.

00:12:35.690 --> 00:12:38.670
So what do you need to do to write a good bug report?

00:12:38.669 --> 00:12:40.299
Well these applied almost any project.

00:12:40.299 --> 00:12:41.789
They're not really specific to WebKit.

00:12:41.789 --> 00:12:45.129
But what you've going to do is describe one problem.

00:12:45.129 --> 00:12:47.500
We want problem, one bug report.

00:12:47.500 --> 00:12:53.190
Give the specific URL, not just the name of the
website or even better, a specific test case.

00:12:53.190 --> 00:12:58.620
Provide steps that say here is what is did
first, here is what I saw, that sort of thing,

00:12:58.620 --> 00:13:03.850
and especially important is to say what went wrong.

00:13:03.850 --> 00:13:08.470
You know, a lot of times, it's not clear to
the people working on the project what's wrong?

00:13:08.470 --> 00:13:12.830
Now that one with all the text missing, I
think that one is almost self explanatory.

00:13:12.830 --> 00:13:18.240
Now this is what it would-- it looks like
when you go dig down inside the website

00:13:18.240 --> 00:13:21.909
and might be a little difficult to find the bug.

00:13:21.909 --> 00:13:27.079
There's a whole lot of code and
mark up involved in websites.

00:13:27.080 --> 00:13:31.610
And so that's the reason for this next process
which is called creating a reduced test case.

00:13:31.610 --> 00:13:35.310
This is one of the most interesting things to do.

00:13:35.309 --> 00:13:39.009
You actually learn a lot about web
technology just from doing this.

00:13:39.009 --> 00:13:41.309
I really enjoy it.

00:13:41.309 --> 00:13:48.989
You start with the failing page, you remove things that
aren't really-- that necessary to demonstrate the bug.

00:13:48.990 --> 00:13:54.250
You'd check to see if it is still showing the same problem,
and then you keep doing that, and you keep doing that.

00:13:54.250 --> 00:13:57.200
And when you're done, hopefully,
you end up with something like this.

00:13:57.200 --> 00:14:01.490
Now if this shows up in a bug report and
it explains in old versions of Safari

00:14:01.490 --> 00:14:03.370
or in other web browsers, it works like this.

00:14:03.370 --> 00:14:06.240
In the latest version, it's not doing that anymore.

00:14:06.240 --> 00:14:08.720
That's something really easy for someone to fix.

00:14:08.720 --> 00:14:14.009
Well, you know, easier and easy to understand.

00:14:14.009 --> 00:14:19.200
And so that's reducing a bug.

00:14:19.200 --> 00:14:24.150
Now if you're taking a look at the WebKit
project and you'd like to make a code change,

00:14:24.149 --> 00:14:27.230
you're going to need to know something
about what's where in the WebKit code.

00:14:27.230 --> 00:14:33.539
So I'm going to tell you a tiny bit, just a
little bit of it right here in this session.

00:14:33.539 --> 00:14:36.409
The lowest level is something called JavaScriptCore.

00:14:36.409 --> 00:14:45.339
And inside JavaScriptCore is the Nitro JavaScript engine
including the JIT, and the virtual machine to compile

00:14:45.340 --> 00:14:51.750
to native code, and also the runtime
that includes all the things that are--

00:14:51.750 --> 00:14:57.500
that go beyond just the constructs of the
language and go to the library that's part

00:14:57.500 --> 00:15:00.269
of the JavaScript Language as well and all the objects.

00:15:00.269 --> 00:15:04.220
And also, some basic data structures that
we use throughout the WebKit project.

00:15:04.220 --> 00:15:08.450
Not just for JavaScript but for
the higher level pieces as well.

00:15:08.450 --> 00:15:10.980
The next level up is called WebCore.

00:15:10.980 --> 00:15:18.519
This is where you find a lot of-- what you think of as
the web engine, the HTML parser, CSS and DOM parsing,

00:15:18.519 --> 00:15:26.159
computing styles, SVG and XML parsing, all the code that--

00:15:26.159 --> 00:15:31.279
to do the fairly subtle and complex
process of loading a webpage.

00:15:31.279 --> 00:15:35.490
The glue that attaches WebKit each of
the specific platforms that it works on,

00:15:35.490 --> 00:15:40.759
there's a layer just to abstract those platform
differences, and also the rendering engine.

00:15:40.759 --> 00:15:45.909
Finally, there's a top level and it's called WebKit.

00:15:45.909 --> 00:15:47.839
And yes, it's true.

00:15:47.840 --> 00:15:51.430
One of the pieces of WebKit is also named WebKit.

00:15:51.429 --> 00:15:57.759
And there's a good reason that this
is the part that has the WebKit name.

00:15:57.759 --> 00:15:59.590
It's the public part of WebKit.

00:15:59.590 --> 00:16:01.220
It's the face of WebKit.

00:16:01.220 --> 00:16:08.610
When you're using WebKit API, you'll either be calling
directly to JavaScriptCore if you're using JavaScript alone

00:16:08.610 --> 00:16:17.690
or calling to WebKit if you're using web APIs--
excuse me, if you're using WebKit in your application.

00:16:17.690 --> 00:16:21.400
And that's where the public API lives
and also some of the platform glue.

00:16:21.399 --> 00:16:26.740
You can think of they're been glued that attaches
to the platform above and then below WebKit.

00:16:26.740 --> 00:16:32.629
So anyway, that's what's where you'll need to do that if
you're going to contribute and there are all kinds of things

00:16:32.629 --> 00:16:35.269
that you need to know to successfully contribute.

00:16:35.269 --> 00:16:40.340
We have test-driven development in
WebKit which means that there are--

00:16:40.340 --> 00:16:49.139
I guess about 11,000 regression tasks that you run
every time before you're about to check-in any changes.

00:16:49.139 --> 00:16:52.139
And test-driven development means
if you're going to make a new change

00:16:52.139 --> 00:16:55.720
or fix a bug, the first step is to write a new test.

00:16:55.720 --> 00:16:58.720
And we require tests for bug fixes.

00:16:58.720 --> 00:17:02.940
There has to be a test that would fail
before your fix and succeed afterwards.

00:17:02.940 --> 00:17:04.410
There's also some coding style.

00:17:04.410 --> 00:17:09.080
We like to keep the style consistent and
others coding style documents on the website.

00:17:09.079 --> 00:17:15.519
And there's a whole code review process to make
sure that we can do development really quickly.

00:17:15.519 --> 00:17:21.599
You know, having this process in place and all this
contributors enables us to move the project really fast

00:17:21.599 --> 00:17:27.589
and do all sorts of new features while
keeping the web and applications working.

00:17:27.589 --> 00:17:29.359
So there are all kinds of details on the website.

00:17:29.359 --> 00:17:35.849
You may want to contribute because there is a bug that
is driving you crazy and you'd like to fix it yourself.

00:17:35.849 --> 00:17:40.369
You might have a feature that you're really interested
in, that others other aren't as interested in that you'd

00:17:40.369 --> 00:17:44.349
like to implement or help with or you
might be wanting to port to a new platform.

00:17:44.349 --> 00:17:48.699
So those are the kinds of things
that draw people to the project.

00:17:48.700 --> 00:17:56.100
And I think it's pretty exciting how open
development makes it possible for you to get involved.

00:17:56.099 --> 00:18:01.119
Alright, so let's talk a bit now about new technology.

00:18:01.119 --> 00:18:06.189
It's pretty exciting with Safari 4 and iPhone 3.

00:18:06.190 --> 00:18:11.279
We've got all kinds of things that we've been
working on sometime that are now in your hands.

00:18:11.279 --> 00:18:17.849
So let's talk a little bit about these.

00:18:17.849 --> 00:18:27.899
First of all, the approach we take to new technologies,
an innovation in the webspace is standards.

00:18:27.900 --> 00:18:31.240
What I mean by that is that what we invent something new,

00:18:31.240 --> 00:18:36.380
we're not trying to create something
that's exclusively in one web browser.

00:18:36.380 --> 00:18:42.130
We wanted to lift the whole web as a platform, that's
we want to use standards as a way to collaborate

00:18:42.130 --> 00:18:47.710
with others working with web technology
so that all of this stuff works together.

00:18:47.710 --> 00:18:55.160
We also believe that standards are not just important to
us for new things that we're doing but they're important

00:18:55.160 --> 00:19:00.220
for the integrity of the existing web and to
help make it possible for the same websites

00:19:00.220 --> 00:19:02.980
to work with the whole variety of web browsers.

00:19:02.980 --> 00:19:10.150
That's the reason why we take standards
compliance tests like the beautiful Acid 2 test.

00:19:10.150 --> 00:19:12.509
That's what it looks like when it runs correctly.

00:19:12.509 --> 00:19:19.869
And years ago, this test was created to help test some
of the trickier bits and edge cases of the CSS standard

00:19:19.869 --> 00:19:23.000
that were really affecting website compatibility.

00:19:23.000 --> 00:19:26.019
And Safari was the first to pass this test.

00:19:26.019 --> 00:19:31.680
And nowadays, many other browsers are now completing the--

00:19:31.680 --> 00:19:37.490
fixing the last few bugs they have so that
they have the exact same behavior on this test.

00:19:37.490 --> 00:19:44.740
A more recent test is the Acid 3,
and still, no beauty prize winner.

00:19:44.740 --> 00:19:54.630
But what's hidden beneath the surface of a test
like this is the 100 different individual tests.

00:19:54.630 --> 00:20:00.030
And I don't mean a 100 single focus tests
but 100 tests with many different pieces,

00:20:00.029 --> 00:20:03.559
each of which tests another aspect of web technology.

00:20:03.559 --> 00:20:13.129
And Acid 3 really concentrated on the technologies
that are needed for AJAX, or Web 2.0 web applications,

00:20:13.130 --> 00:20:16.770
and the kind of corner cases that
were creating unnecessary complexity

00:20:16.769 --> 00:20:21.160
and incompatibility for people developing web applications.

00:20:21.160 --> 00:20:26.240
>> As with Acid 2, Safari was the
first browser to pass the Acid 3 test.

00:20:26.240 --> 00:20:35.690
And we think that these kinds of standards related
activities where we make sure that the standards are precise

00:20:35.690 --> 00:20:43.910
about edge cases that cover all sorts of things are just
great for web standards and inoperability between browsers.

00:20:43.910 --> 00:20:50.450
In the standards world, one of the most
interesting and exciting things going on right now

00:20:50.450 --> 00:20:53.190
that we're really thrilled to be a part of is HTML 5.

00:20:53.190 --> 00:20:58.019
There is all kinds of great work being done there.

00:20:58.019 --> 00:21:04.519
HTML 5 is where our own canvas invention, one
of the earliest web standard things we did

00:21:04.519 --> 00:21:06.700
with Safari, creating the canvas element.

00:21:06.700 --> 00:21:09.420
That's part of the HTML 5 specification.

00:21:09.420 --> 00:21:19.360
And there are all sorts of other critical exiting new
technologies as well as clear documented standardization

00:21:19.359 --> 00:21:22.409
of existing web behavior that are all part of HTML 5.

00:21:22.410 --> 00:21:33.930
One of the areas in HTML 5 where there's some
truly revolutionary stuff is offline applications.

00:21:33.930 --> 00:21:41.250
There are a suite of technologies in HTML 5 that all
work together to make possible web technology that works,

00:21:41.250 --> 00:21:46.210
even if you're not necessarily connected to the internet.

00:21:46.210 --> 00:21:51.100
There are storage technologies that allow
you to store the data of your applications.

00:21:51.099 --> 00:21:59.990
And also there is the application cache which is a
technology that lets a website define what's in the site

00:21:59.990 --> 00:22:03.299
so that it can be stored locally, so that
the whole website can still be present

00:22:03.299 --> 00:22:06.399
when you don't have a connection to its server.

00:22:06.400 --> 00:22:14.410
Now to show you a little bit about what's possible
with one of these offline applications technologies,

00:22:14.410 --> 00:22:20.009
I'd like to invite our Safari Technologies
Evangelist, Vicki Murley, up on stage.

00:22:20.009 --> 00:22:27.250
[ Applause ]

00:22:27.250 --> 00:22:29.279
>> Thanks Darin.

00:22:29.279 --> 00:22:37.740
So we wanted to create an application that showed
off some of the capabilities of HTML 5 offline data.

00:22:37.740 --> 00:22:42.109
So we decided to create a calendar application.

00:22:42.109 --> 00:22:43.319
Here it is.

00:22:43.319 --> 00:22:50.069
You can see it looks and feels a lot like
a native built-in calendar application.

00:22:50.069 --> 00:22:54.309
I can add an event right here.

00:22:54.309 --> 00:22:58.250
I'm going to go snorkeling.

00:22:58.250 --> 00:23:02.380
But because it's a web application running in Safari,

00:23:02.380 --> 00:23:06.280
we get a couple of other features
that's just kind of come naturally.

00:23:06.279 --> 00:23:14.759
So for instance, I'm going to put in the
location here, and when I tab away I get, oops,

00:23:14.759 --> 00:23:19.629
an inline map that shows me exactly where I'm going to go.

00:23:19.630 --> 00:23:25.400
So the UI for this calendar application
looks pretty very good.

00:23:25.400 --> 00:23:29.490
But some of the real power of this
app is happening behind the scenes.

00:23:29.490 --> 00:23:38.500
So for instance, if I pull up this filtered search field
here, I can enter a query and find all of my events

00:23:38.500 --> 00:23:44.750
that are related to Maui or all
of my events that are at Moscone.

00:23:44.750 --> 00:23:51.500
So the reason that is so fast is that a copy of
all of my calendar events are being stored locally

00:23:51.500 --> 00:23:56.329
on this machine using HTML 5 local data capabilities.

00:23:56.329 --> 00:24:01.210
>> So which one of the HTML 5 local
data features is used here?

00:24:01.210 --> 00:24:04.170
>> This is using the HTML 5 SQL API.

00:24:04.170 --> 00:24:09.990
So I'm executing SQL statements in JavaScript and
storing these in a local database on this machine,

00:24:09.990 --> 00:24:13.470
and that's why this filtered search is so fast

00:24:13.470 --> 00:24:23.220
I can show you more about how that works if I open
the Web Inspector and click on the databases tab.

00:24:23.220 --> 00:24:30.650
You can see I have a database here and a
table within it called WebKit Calendar Events.

00:24:30.650 --> 00:24:41.310
And if I click on the events database I can type
in some SQL statements and execute them right here.

00:24:41.309 --> 00:24:47.079
And this is super useful if you're testing out a
couple of statements that you are adding in JavaScript,

00:24:47.079 --> 00:24:49.859
very useful for us when we were creating this application.

00:24:49.859 --> 00:24:53.750
>> So I guess if that's a database there could
be a lot more than just 50 events in there?

00:24:53.750 --> 00:24:54.180
>> That's right.

00:24:54.180 --> 00:24:59.120
Yeah, it can handle anything that
you throw at it, industrial strength.

00:24:59.119 --> 00:24:59.500
>> Alright.

00:24:59.500 --> 00:24:59.720
>> OK.

00:24:59.720 --> 00:25:00.360
>> Thanks Vicki.

00:25:00.359 --> 00:25:00.639
>> Sure.

00:25:00.640 --> 00:25:00.700
[ Applause ]

00:25:00.700 --> 00:25:02.000
>> Why don't plug-in--

00:25:02.000 --> 00:25:05.380
[ Applause ]

00:25:05.380 --> 00:25:08.760
[ Pause ]

00:25:08.759 --> 00:25:13.569
>> So we have a lot more to tell you
about these technologies in particular,

00:25:13.569 --> 00:25:15.909
local storage and offline web applications.

00:25:15.910 --> 00:25:17.480
There's a session about that.

00:25:17.480 --> 00:25:19.700
That's this Thursday, right here in this room.

00:25:19.700 --> 00:25:24.890
And tomorrow if you'd like to learn more
about the Web Inspector and development tools,

00:25:24.890 --> 00:25:27.080
we used a tiny bit there just to look at the database.

00:25:27.079 --> 00:25:30.470
But there's a whole lot in there,
and a whole bunch of improvements

00:25:30.470 --> 00:25:34.579
since the last version if you've seen it before.

00:25:34.579 --> 00:25:41.409
And you could see that tomorrow in the Nob Hill room.

00:25:41.410 --> 00:25:45.870
So let's talk about another area where
there's some great new technology

00:25:45.869 --> 00:25:50.579
in WebKit, and that's the Nitro JavaScript engine.

00:25:50.579 --> 00:25:55.699
Now this is the JavaScript engine that's in WebKit,
it's part of the WebKit open source project.

00:25:55.700 --> 00:26:03.799
And it's really been improved a huge
amount since our previous releases.

00:26:03.799 --> 00:26:09.089
If you take a look at desktop Safari, and
just let's take the baseline of Safari 3.

00:26:09.089 --> 00:26:14.730
Now this was at the time Leopard was
released, Safari 3 was the browser

00:26:14.730 --> 00:26:19.900
and it had the fastest JavaScript engine
that had ever been in web browser.

00:26:19.900 --> 00:26:20.950
And so that's our baseline.

00:26:20.950 --> 00:26:23.220
That's where we're starting out.

00:26:23.220 --> 00:26:31.110
So we had a number of releases, a lot of you might be
running Safari 3.1 or 3.2 if you are using Leopard.

00:26:31.109 --> 00:26:32.959
And there was a huge speedup.

00:26:32.960 --> 00:26:37.340
Safari 3.1 was 2.7 times faster.

00:26:37.339 --> 00:26:43.509
It's not often you get that big a speedup just
from software changes on the same JavaScript.

00:26:43.509 --> 00:26:46.819
By the way, these numbers are based
on the SunSpider JavaScript Benchmark,

00:26:46.819 --> 00:26:50.089
the same one you might remember from yesterday's keynote.

00:26:50.089 --> 00:26:58.480
Now when Safari 4's preview came out at a-- and it
was actually at last year's developers conference.

00:26:58.480 --> 00:27:06.029
We were already up to 4.2 times faster than
Safari 3's performance on the same scripts.

00:27:06.029 --> 00:27:12.899
We released a Safari 4 Beta, and that
was, I don't know a few months ago?

00:27:12.900 --> 00:27:19.100
And by that time with the new Nitro engine, and
that's the first time we used the name Nitro,

00:27:19.099 --> 00:27:27.829
you saw performance that was 11 times faster than
Safari 3, so huge, more than an order of magnitude.

00:27:27.829 --> 00:27:34.819
And I'm really proud to tell you about
how fast the version of Nitro that's

00:27:34.819 --> 00:27:38.269
in 64-bit applications like Safari on Snow Leopard.

00:27:38.269 --> 00:27:43.900
It's almost 20 times faster than the Safari 3 engine.

00:27:43.900 --> 00:27:50.390
So this is fundamental, 20 times faster means there are
things you can do that just weren't practical before.

00:27:50.390 --> 00:27:55.759
Now I'd like to ask Vicki to come back up
on stage and show you a bit about that.

00:27:57.579 --> 00:28:03.309
>> So, when you think of applications that
you can develop using web technologies,

00:28:03.309 --> 00:28:08.230
you might not think of very math-intensive
graphics operations.

00:28:08.230 --> 00:28:10.900
But we actually couldn't think of anything better to show

00:28:10.900 --> 00:28:17.250
of the JavaScript performance improvement
between Safari 3 and Safari 4.

00:28:17.250 --> 00:28:23.069
So we're using Snow Leopard here
and we have a build of Safari 3.

00:28:23.069 --> 00:28:24.139
>> Wait, wait.

00:28:24.140 --> 00:28:24.470
>> Yes?

00:28:24.470 --> 00:28:25.690
>> So I can't do that at home, right?

00:28:25.690 --> 00:28:26.600
>> You can't try this at home, no--

00:28:26.599 --> 00:28:27.099
>> OK, OK--

00:28:27.099 --> 00:28:27.480
>> -- we had to--

00:28:27.480 --> 00:28:29.000
>> -- the Safari 3 on Snow Leopard doesn't exist

00:28:29.000 --> 00:28:32.180
>> -- make some special accommodations here.

00:28:32.180 --> 00:28:38.430
But what we have here is a fluid dynamic simulator
that's done entirely using web technologies,

00:28:38.430 --> 00:28:44.490
specifically JavaScript and the HTML 5 canvas tag APIs.

00:28:44.490 --> 00:28:51.589
So as I mouse over the black square here, you
can see that some pixels are drawn and they kind

00:28:51.589 --> 00:28:54.049
of move around the square like a [inaudible].

00:28:54.049 --> 00:28:56.059
>> So JavaScript is doing all the math there?

00:28:56.059 --> 00:28:56.619
>> That's right.

00:28:56.619 --> 00:29:03.169
JavaScript is doing all the computations to
tell the pixels how to move across the screen.

00:29:03.170 --> 00:29:09.160
And we're also drawing to the canvas
using the canvas JavaScript APIs.

00:29:09.160 --> 00:29:11.140
So you can see the performance here.

00:29:11.140 --> 00:29:13.740
I have frames per second down in the corner.

00:29:13.740 --> 00:29:15.779
It's only about 7 right now.

00:29:15.779 --> 00:29:16.170
>> Oh yeah.

00:29:16.170 --> 00:29:21.480
That's-- so that-- I mean I know from playing computer
games that under 10 usually looks kind of choppy.

00:29:21.480 --> 00:29:24.039
>> Yeah it's not very good, 7 is not good.

00:29:24.039 --> 00:29:29.619
And even if we bump the resolution up
to high, things get even worst [laughs].

00:29:29.619 --> 00:29:34.000
So we only have about 2 frames per second here.

00:29:34.000 --> 00:29:41.039
But lucky for us, the great thing about having a JavaScript
engine that is 20 times faster is that you can do all kinds

00:29:41.039 --> 00:29:44.690
of things that you might not think are even possible.

00:29:44.690 --> 00:29:53.519
So let's start up Safari 4 and go back to
our fluid simulator, same exact webpage here.

00:29:53.519 --> 00:29:56.879
And if we have it set on normal
resolution, you can see that the--

00:29:56.880 --> 00:30:01.820
already that the drawing is just
much smoother than it was before.

00:30:01.819 --> 00:30:05.289
And we're getting up around 60 frames per second.

00:30:05.289 --> 00:30:07.970
We can even bump this up to high resolution.

00:30:07.970 --> 00:30:09.789
And there you can see even more.

00:30:09.789 --> 00:30:15.500
The level of detail that's now possible
with our powerful new improvements.

00:30:15.500 --> 00:30:16.029
[ Applause ]

00:30:16.029 --> 00:30:18.000
>> So there we go.

00:30:18.000 --> 00:30:24.859
[ Applause ]

00:30:24.859 --> 00:30:28.669
>> Alright, so I don't think there's
anything quite as good as a graphics demo

00:30:28.670 --> 00:30:31.000
to really make clear performance differences.

00:30:31.000 --> 00:30:38.809
And while I still think, if you're doing a fluid simulator
for scientific research, you'll probably want to use OpenCL.

00:30:38.809 --> 00:30:43.849
For almost anything else that you're doing with
JavaScript, this great speed up can make a real difference.

00:30:43.849 --> 00:30:48.459
And even if you're just using the web
browser, the faster JavaScript contributes

00:30:48.460 --> 00:30:50.960
to making browsing of website a lot faster.

00:30:50.960 --> 00:31:01.170
Now, let's talk a bit about other aspect of web
technology that are new in these latest versions.

00:31:01.170 --> 00:31:05.900
The HTML 5 media elements is particularly
interesting area for us.

00:31:05.900 --> 00:31:12.009
We love to have multimedia sound
and video as part of websites.

00:31:12.009 --> 00:31:20.750
And before Apple proposed these media
elements to the HTML 5 standards group,

00:31:20.750 --> 00:31:24.329
there really was no way to do this without plug-ins.

00:31:24.329 --> 00:31:32.289
But now, with the audio and video elements, not only do
you have video in web pages or audio in web pages in a way

00:31:32.289 --> 00:31:37.879
that is part of the native web technology, but it
works very well with other parts of web technology.

00:31:37.880 --> 00:31:40.610
So it can be controlled with JavaScript.

00:31:40.609 --> 00:31:46.769
The elements, especially the video element can be styled
with all the standard CSS styles and anything you would do

00:31:46.769 --> 00:31:50.720
to another element works equally well with video.

00:31:50.720 --> 00:31:55.710
In fact, you can overlay elements on top of the
video which is really great for uses of video

00:31:55.710 --> 00:32:01.799
where it's not just a rectangle playing a movie.

00:32:01.799 --> 00:32:07.579
Another big area that we've done
lots of work on is scalable graphics.

00:32:07.579 --> 00:32:11.329
Safari has had SVG in sometime-- for some time.

00:32:11.329 --> 00:32:17.659
But now with Safari 4 and iPhone 3, you've
got these SVG elements as a basic part

00:32:17.660 --> 00:32:23.800
of web technology that you can use alongside HTML and CSS.

00:32:23.799 --> 00:32:29.970
And web fonts lets you do the same sorts of scalable-- have
the same kinds of scalable text that's going to look good

00:32:29.970 --> 00:32:36.250
at any size rather than having a pre-rendered
image that has the text drawn into it which is one

00:32:36.250 --> 00:32:39.470
of the most used techniques today
to get custom fonts on the web.

00:32:39.470 --> 00:32:44.529
That isn't really text, something that looks like
an image, doesn't work well with screen readers.

00:32:44.529 --> 00:32:47.410
It's not going to-- it won't scale as well.

00:32:47.410 --> 00:32:49.240
And web fonts lets you have a font that comes

00:32:49.240 --> 00:32:53.370
from the server just the way an image
or movie would come from the server.

00:32:53.369 --> 00:32:59.229
And then there's a really exciting area
called CSS Effects which is another area

00:32:59.230 --> 00:33:02.740
where we've been inventing quite a few things.

00:33:02.740 --> 00:33:10.579
And this is-- this is something that
is especially compatible with a note--

00:33:10.579 --> 00:33:15.960
with the concept of progressive enhancement
where you have a website that looks good

00:33:15.960 --> 00:33:18.910
but you can make it look even better
when there are a few extra features.

00:33:18.910 --> 00:33:24.040
And while these features are extremely powerful when
you use them as the sort of centerpiece of a design,

00:33:24.039 --> 00:33:28.859
they're also very easy to use to enhance an existing design.

00:33:28.859 --> 00:33:35.219
So what a mask lets you do is take an
image and cut out a piece of the image

00:33:35.220 --> 00:33:41.210
and so you can have a circular
piece of an image inside a web page.

00:33:41.210 --> 00:33:50.120
Then with gradient, you can take a-- you can have a gradient
color that changes from one side or a radial gradient

00:33:50.119 --> 00:33:54.409
like the one that overlaid on this photo
here and make it part of your design, again,

00:33:54.410 --> 00:33:57.840
without having to download an image
that contains the whole gradient in it.

00:33:57.839 --> 00:34:03.939
That was really the typical technique used when a
designer needed a gradient on a web page in the past.

00:34:03.940 --> 00:34:09.030
There's also a built-in reflection capability.

00:34:09.030 --> 00:34:12.790
And I think one of the coolest things about
this is the way these features work together,

00:34:12.789 --> 00:34:15.980
because you can customize exactly
what the reflection looks like.

00:34:15.980 --> 00:34:22.760
And that look there is actually a gradient being used so
that the reflection kind of fades as you move further down.

00:34:22.760 --> 00:34:26.950
So the default reflections you see
are actually often a combination

00:34:26.949 --> 00:34:31.500
of both the reflection feature
in CSS and the gradient feature.

00:34:31.500 --> 00:34:39.590
And then one of the most exciting areas with a whole
suite of features that work together is animation.

00:34:39.590 --> 00:34:44.829
There's animation in CSS, CSS Effects
that achieved animated results.

00:34:44.829 --> 00:34:49.150
And there are really three key
pieces to this that work together.

00:34:49.150 --> 00:34:56.900
There's CSS transforms, which allows you to take an
element and rotate it or move it side to side or skew it.

00:34:56.900 --> 00:35:01.180
And then you combine that with CSS transitions,

00:35:01.179 --> 00:35:05.359
which is a simple way to do animations
based on changes in the web page.

00:35:05.360 --> 00:35:08.970
This is really good when you want
animation to be part of normal interaction.

00:35:08.969 --> 00:35:14.719
For example, you can have a hover style that makes
an element kind of grow and seem to move forward

00:35:14.719 --> 00:35:17.549
from the page a bit without writing any code at all.

00:35:17.550 --> 00:35:22.810
You simply say that-- tell it to use animation
and tell it that when hovered it's bigger

00:35:22.809 --> 00:35:26.759
and the rest is handled automatically by the web engine.

00:35:26.760 --> 00:35:33.060
And then CSS animations, which lets you have
animations that are controlled with key frames

00:35:33.059 --> 00:35:40.279
and all the things you would want to do to do animation,
but still using JavaScript only to trigger the beginning

00:35:40.280 --> 00:35:44.120
of the animation and the whole rest
of it handled by the web engine.

00:35:44.119 --> 00:35:46.199
So these techniques are really powerful.

00:35:46.199 --> 00:35:52.969
Some-- and they're all available
in both Safari 4 and iPhone 3.

00:35:52.969 --> 00:36:00.639
And I'd like to ask Vicki to come up one more time to
show you a quick example of CSS animations at work.

00:36:00.639 --> 00:36:02.900
>> Alright.

00:36:02.900 --> 00:36:06.119
Thanks, Darin.

00:36:06.119 --> 00:36:14.969
OK. So let me zoom in a little bit
here so you can see this little better.

00:36:14.969 --> 00:36:23.989
Alright, so what we have here is a set of photos
arranged in sort of a light table arrangement here.

00:36:23.989 --> 00:36:34.759
And when I tap on these buttons, the photos kind of splay
themselves across the screen in different sets of piles.

00:36:34.760 --> 00:36:36.500
I can sort them by my favorites.

00:36:36.500 --> 00:36:39.460
I can go back to the main grid.

00:36:39.460 --> 00:36:43.190
I can even play a slideshow.

00:36:43.190 --> 00:36:50.490
But what's happening here is I'm just changing CSS
properties in JavaScript to reposition these elements.

00:36:50.489 --> 00:36:59.109
So we're going to see with just a few lines of CSS
how much we can improve this light table application.

00:36:59.110 --> 00:37:03.599
So I'm going to switch to the code.

00:37:03.599 --> 00:37:11.360
So here is my CSS file all and I'm
going to add are three properties.

00:37:11.360 --> 00:37:16.660
I'm going to add WebKit Transition Property,
which tells me which property I want

00:37:16.659 --> 00:37:19.849
to animate, in this case, WebKit Transform.

00:37:19.849 --> 00:37:24.500
I'm going to add a transition duration,
in this case, half a second.

00:37:24.500 --> 00:37:27.539
And I'm going to add a transition timing function.

00:37:27.539 --> 00:37:30.659
In this case, I'm going to add ease-in-ease-out.

00:37:30.659 --> 00:37:34.299
So that's all I'm going to add-- I'm going to hit Save.

00:37:34.300 --> 00:37:35.980
>> Oh, that's actually your web server.

00:37:35.980 --> 00:37:38.090
>> That's right.

00:37:38.090 --> 00:37:40.250
And I'm going to reload.

00:37:40.250 --> 00:37:42.000
>> Got to switch the screen.

00:37:42.000 --> 00:37:47.889
[ Pause ]

00:37:47.889 --> 00:37:48.719
>> Taking a moment.

00:37:48.719 --> 00:37:51.689
>> Oh, I'm sorry.

00:37:55.630 --> 00:37:58.900
>> And we're just waiting on Wi-Fi.

00:37:58.900 --> 00:38:05.240
Everybody pause your browsing and
twittering so we can get into action here.

00:38:05.239 --> 00:38:06.429
>> You think since it's Wi-Fi--

00:38:06.429 --> 00:38:06.629
>> Okay.

00:38:06.630 --> 00:38:08.390
>> -- you think it has something to
do with the audience being in there?

00:38:08.389 --> 00:38:09.170
>> Maybe. I don't know.

00:38:09.170 --> 00:38:15.800
So now I'm going to go through those same operations and
you can see there's animations now between, you know,

00:38:15.800 --> 00:38:18.490
when the photos moved from one position to another.

00:38:18.489 --> 00:38:25.029
Instead of just appearing in one spot and
reappearing in another, we can actually see, you know,

00:38:25.030 --> 00:38:27.640
the path that they're taking from start to finish.

00:38:27.639 --> 00:38:33.929
When we play the slideshow, all the photos animate
off the page and then one reappears and we're going

00:38:33.929 --> 00:38:38.000
to rotate them through the viewing area here.

00:38:38.000 --> 00:38:43.409
And this is a really great experience, I think so.

00:38:43.409 --> 00:38:44.309
>> That's great.

00:38:44.309 --> 00:38:49.299
[ Applause ]

00:38:49.300 --> 00:38:56.950
>> So with all the animation handled by the web
engine, not only do you get, you know, nice,

00:38:56.949 --> 00:39:01.339
smooth animation without having to write any
code and it's not dependent on JavaScript,

00:39:01.340 --> 00:39:04.710
but it's also a really small amount of code.

00:39:04.710 --> 00:39:12.110
You know, basically, you just move an element from one
place to another and the engine handles all the rest.

00:39:12.110 --> 00:39:20.670
Now, there's a lot more to say about new features and I'm
just highlighting a few sessions that will go into detail.

00:39:20.670 --> 00:39:26.389
The CSS Effects Session Adding Innovative Styling
and Animation with CSS Effects goes in deep

00:39:26.389 --> 00:39:31.210
to this topic we were just demoing and talking about
and shows you all kinds of things that are possible

00:39:31.210 --> 00:39:34.720
at CSS Effects, really interesting stuff and flashy too.

00:39:34.719 --> 00:39:37.679
So it's worth checking out.

00:39:37.679 --> 00:39:44.250
If you're interested in building iPhone web applications
that are really integrated and do have all sorts

00:39:44.250 --> 00:39:49.210
of the properties of native applications, you know,
without the bar at the top and bottom handling touch events

00:39:49.210 --> 00:39:52.490
and all those sorts of things, the
iPhone Web Applications from Start

00:39:52.489 --> 00:39:55.479
to Finish Session has all sorts of details for you.

00:39:55.480 --> 00:40:02.909
And then to get even deeper in the possibilities of the
video and audio tag, there's a whole session talking

00:40:02.909 --> 00:40:13.049
about these capabilities and also the new
HTTP streaming feature of QuickTime X.

00:40:13.050 --> 00:40:16.190
>> And that's the session up here.

00:40:16.190 --> 00:40:20.139
So we talked a bit about what Safari and WebKit are.

00:40:20.139 --> 00:40:25.449
How you could get involved in the project,
and also a few of the new technologies.

00:40:25.449 --> 00:40:32.469
There's a lot in the latest version, Safari
4 and iPhone 3 for you to take advantage of.

00:40:33.889 --> 00:40:37.440
I talked about a lot of sessions but there are still more.

00:40:37.440 --> 00:40:43.960
There is a session that concentrates just on how to use
these technologies on websites but still had them work

00:40:43.960 --> 00:40:47.559
in older versions of browsers or other
browsers that don't have these capabilities.

00:40:47.559 --> 00:40:52.409
Vicki will be presenting that in
this same room Thursday evening.

00:40:52.409 --> 00:40:57.839
And there's also a session on Friday
about accessibility for web applications.

00:40:57.840 --> 00:41:01.960
Users who use tools like voice over, who
can't necessarily see the screen at all

00:41:01.960 --> 00:41:07.360
but still use the web are only one
category of the people that you can help

00:41:07.360 --> 00:41:09.230
by making your web applications accessible.

00:41:09.230 --> 00:41:12.940
And there are some great new techniques for that.

00:41:12.940 --> 00:41:20.170
For more information you can contact Vicki by email, the
Safari Dev Center has pulled all sorts of documentation

00:41:20.170 --> 00:41:25.659
about all sorts of-- and examples as well
for our web technologies in using WebKit.