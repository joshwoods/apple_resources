WEBVTT

00:00:01.140 --> 00:00:04.260
Welcome to Get started with TestFlight.

00:00:04.260 --> 00:00:06.480
I'm Aneesha and I work on the App Store

00:00:06.480 --> 00:00:08.640
Product Management Team.

00:00:08.640 --> 00:00:10.410
I'm joined by my colleague Jerome

00:00:10.410 --> 00:00:13.770
on the Developer Tools Product Management Team.

00:00:13.770 --> 00:00:15.150
We're excited to share more

00:00:15.150 --> 00:00:17.760
about TestFlight in this presentation.

00:00:17.760 --> 00:00:21.000
For today's agenda, we will start with a brief overview

00:00:21.000 --> 00:00:22.560
of the importance of testing

00:00:22.560 --> 00:00:24.870
and an introduction to TestFlight.

00:00:24.870 --> 00:00:27.360
And then we'll share how to use TestFlight

00:00:27.360 --> 00:00:30.390
including how to distribute builds, add testers,

00:00:30.390 --> 00:00:32.280
and view feedback.

00:00:32.280 --> 00:00:33.633
So let's dive in.

00:00:35.220 --> 00:00:36.600
Testing is essential

00:00:36.600 --> 00:00:39.690
to creating high quality app experiences.

00:00:39.690 --> 00:00:43.080
It's the process that allows your team to iterate on code

00:00:43.080 --> 00:00:45.810
and incorporate feedback so you can deliver great apps

00:00:45.810 --> 00:00:48.483
and experiences to your customers on the App Store.

00:00:50.850 --> 00:00:55.410
The App Store is available in over 170 regions

00:00:55.410 --> 00:01:00.410
on more than 1.5 billion devices and in over 40 languages.

00:01:01.950 --> 00:01:05.220
That's a huge opportunity for people to discover your app

00:01:05.220 --> 00:01:07.140
and that's also a ton of different people

00:01:07.140 --> 00:01:10.773
with different devices, languages, and accessibility needs.

00:01:12.480 --> 00:01:15.450
By testing your app, you can make sure you're providing

00:01:15.450 --> 00:01:18.843
a great experience for App Store users around the world.

00:01:20.370 --> 00:01:22.470
And to support your testing efforts,

00:01:22.470 --> 00:01:25.140
Apple offers an expansive set of tools

00:01:25.140 --> 00:01:26.757
to help you test your apps for.

00:01:26.757 --> 00:01:31.200
For example, you can use Xcode to write unit and UI tests

00:01:31.200 --> 00:01:35.790
with XCTest and then use Xcode Cloud to automate testing

00:01:35.790 --> 00:01:37.890
after each code change.

00:01:37.890 --> 00:01:41.310
You can manually test your code on different devices and OSs

00:01:41.310 --> 00:01:43.890
with Simulator and use Instruments

00:01:43.890 --> 00:01:45.453
to performance test your app.

00:01:46.770 --> 00:01:50.090
Today we're gonna do a deep dive on TestFlight.

00:01:52.483 --> 00:01:55.770
TestFlight is Apple's tool to help you gather feedback

00:01:55.770 --> 00:01:58.770
from real people in a privacy friendly way

00:01:58.770 --> 00:02:01.650
so you can create world class apps and games

00:02:01.650 --> 00:02:04.050
that people on the App Store will love.

00:02:04.050 --> 00:02:06.180
With TestFlight, you can get feedback

00:02:06.180 --> 00:02:08.880
even before your app is live on the App Store

00:02:08.880 --> 00:02:11.793
and use this information to update your app accordingly.

00:02:13.440 --> 00:02:14.460
TestFlight is included

00:02:14.460 --> 00:02:17.280
as part of your Apple Developer Program membership

00:02:17.280 --> 00:02:19.620
and is one of the most popular developer tools

00:02:19.620 --> 00:02:20.463
that we offer.

00:02:21.330 --> 00:02:23.520
TestFlight allows you to distribute your app

00:02:23.520 --> 00:02:27.210
across all Apple platforms and has been purpose built

00:02:27.210 --> 00:02:29.193
to optimize the testing experience.

00:02:30.450 --> 00:02:31.560
At a high level,

00:02:31.560 --> 00:02:34.740
TestFlight allows you to upload your app's build,

00:02:34.740 --> 00:02:38.820
add testers, and get feedback on an ongoing basis.

00:02:38.820 --> 00:02:42.120
This helps you quickly and easily get tester feedback

00:02:42.120 --> 00:02:45.000
to inform your decisions and develop world class apps

00:02:45.000 --> 00:02:47.163
and games to publish on the App Store.

00:02:48.090 --> 00:02:50.400
Next, let's walk through an example

00:02:50.400 --> 00:02:52.920
of how to use TestFlight in more detail.

00:02:52.920 --> 00:02:54.470
Jerome is gonna get us started.

00:02:55.969 --> 00:02:58.620
Let's talk about using TestFlight.

00:02:58.620 --> 00:03:00.310
And to illustrate this,

00:03:00.310 --> 00:03:03.510
let's imagine we're preparing our new Food Truck app

00:03:03.510 --> 00:03:05.910
for release on the App Store for the first time.

00:03:07.230 --> 00:03:10.620
To get started, we'll first need to upload our build

00:03:10.620 --> 00:03:12.243
and get it ready for testing.

00:03:13.770 --> 00:03:16.560
There are three main steps around uploading a build

00:03:16.560 --> 00:03:18.540
that we are going to cover;

00:03:18.540 --> 00:03:23.250
uploading to App Store Connect, adding test details

00:03:23.250 --> 00:03:25.143
and adding test information.

00:03:26.460 --> 00:03:29.913
We'll first upload to App Store Connect using Xcode.

00:03:30.810 --> 00:03:34.890
So let's open Xcode and create an archive of our app

00:03:34.890 --> 00:03:37.830
in order to prepare it for distribution.

00:03:37.830 --> 00:03:40.470
To do that, we'll first select the architecture

00:03:40.470 --> 00:03:42.360
we want to build our app for.

00:03:42.360 --> 00:03:45.720
Here, any iOS device arm64

00:03:45.720 --> 00:03:48.873
and select Archive from the product top menu.

00:03:50.550 --> 00:03:53.340
We'll then select the app and the build version

00:03:53.340 --> 00:03:55.110
we want to send to TestFlight

00:03:55.110 --> 00:03:57.873
and click the distribute app button on the right.

00:03:59.790 --> 00:04:03.150
For TestFlight build, we'll select App Store Connect

00:04:03.150 --> 00:04:05.760
as a distribution method so we can share the build

00:04:05.760 --> 00:04:08.103
with both internal and external testers.

00:04:09.210 --> 00:04:10.770
We'll share more information

00:04:10.770 --> 00:04:14.100
about the types of testers later so for now,

00:04:14.100 --> 00:04:16.050
let's click Next.

00:04:16.050 --> 00:04:19.200
We'll select Upload to automatically send our build

00:04:19.200 --> 00:04:20.373
to App Store Connect.

00:04:22.290 --> 00:04:25.920
Before it can be uploaded, click Next to Xcode create

00:04:25.920 --> 00:04:27.513
an app record for us.

00:04:29.880 --> 00:04:33.333
We almost don't submitting a build, just a few more clicks.

00:04:34.170 --> 00:04:37.560
We recommend including symbol files when uploading your app

00:04:37.560 --> 00:04:40.560
so that App Store can add symbol names to crash reports

00:04:40.560 --> 00:04:43.563
before delivering them to the Crashes Organizer in Xcode.

00:04:45.300 --> 00:04:48.360
We'll also select Manage Version and Build Number

00:04:48.360 --> 00:04:50.760
so the distribution assistant in Xcode can detect

00:04:50.760 --> 00:04:52.893
whether our app has a valid build number.

00:04:54.030 --> 00:04:55.950
If our app has an invalid number,

00:04:55.950 --> 00:04:58.980
like one we previously used, the assistant will give us

00:04:58.980 --> 00:05:02.133
the options to automatically increment it to a valid number.

00:05:04.260 --> 00:05:08.220
By default, Automatically Manage Signing will be selected.

00:05:08.220 --> 00:05:10.920
Xcode can manage our profiles and certificates for us

00:05:10.920 --> 00:05:11.943
which is great.

00:05:13.530 --> 00:05:15.060
And after we finish this,

00:05:15.060 --> 00:05:17.403
Xcode uploads our build to App Store Connect.

00:05:19.380 --> 00:05:20.880
Once our app is uploaded,

00:05:20.880 --> 00:05:23.223
it's now ready to be tested using TestFlight.

00:05:25.560 --> 00:05:27.840
When using Xcode to upload your build,

00:05:27.840 --> 00:05:30.183
here's a few best practices to keep in mind.

00:05:31.860 --> 00:05:33.690
Be sure to set your distribution method

00:05:33.690 --> 00:05:36.393
to App Store Connect in order to use TestFlight.

00:05:38.610 --> 00:05:41.520
Be mindful of version and build number.

00:05:41.520 --> 00:05:43.020
When you upload a new build,

00:05:43.020 --> 00:05:45.570
you always have to specify a build string

00:05:45.570 --> 00:05:47.870
with a number greater than the previous build.

00:05:49.710 --> 00:05:52.860
Be sure your certificates and profiles are up to date.

00:05:52.860 --> 00:05:55.410
This is a common reason for upload issues.

00:05:55.410 --> 00:05:58.020
One easy way to ensure the information is correct

00:05:58.020 --> 00:06:00.153
is to let Xcode manage signing for you.

00:06:01.080 --> 00:06:02.610
We have two more things we need to do

00:06:02.610 --> 00:06:04.920
to get our build ready for testing.

00:06:04.920 --> 00:06:07.260
Aneesha will share how we add test information

00:06:07.260 --> 00:06:08.823
and how we get started testing.

00:06:10.260 --> 00:06:11.730
To add test details,

00:06:11.730 --> 00:06:14.793
we'll first go to App Store Connect to view our build.

00:06:18.270 --> 00:06:21.240
To access TestFlight, we'll open our App Store Connect

00:06:21.240 --> 00:06:24.603
app page and click on the TestFlight section at the top.

00:06:25.710 --> 00:06:26.993
You can also access TestFlight

00:06:26.993 --> 00:06:29.760
through the App Store Connect mobile app

00:06:29.760 --> 00:06:32.043
in the TestFlight section of your app page.

00:06:33.900 --> 00:06:37.290
Now we see our uploaded build in the TestFlight section

00:06:37.290 --> 00:06:38.463
of the Food Truck app.

00:06:39.390 --> 00:06:43.020
All builds uploaded to TestFlight are active for 90 days

00:06:43.020 --> 00:06:44.133
before they expire.

00:06:45.360 --> 00:06:47.940
If you wanna keep testing beyond 90 days,

00:06:47.940 --> 00:06:50.133
simply upload an additional build.

00:06:51.930 --> 00:06:54.990
Here you'll see the details of our newly uploaded build

00:06:54.990 --> 00:06:57.513
including its status and when it expires.

00:06:58.380 --> 00:07:01.713
We are going to click on the build to add our test details.

00:07:03.210 --> 00:07:05.490
Adding test details helps our testers know

00:07:05.490 --> 00:07:07.860
what to pay attention to when they test our app

00:07:07.860 --> 00:07:09.993
which helps us get more valuable feedback.

00:07:11.940 --> 00:07:14.553
Let's go ahead and add some in for this build.

00:07:16.050 --> 00:07:17.790
This is our first time releasing this app

00:07:17.790 --> 00:07:18.993
so let's mention that.

00:07:20.190 --> 00:07:23.250
And we also just started allowing users to change the design

00:07:23.250 --> 00:07:24.240
of the Food Truck

00:07:24.240 --> 00:07:26.540
so let's mention that in our test details too.

00:07:27.930 --> 00:07:31.093
Filling out test details specific to your build is important

00:07:31.093 --> 00:07:33.750
because it is the first thing testers see

00:07:33.750 --> 00:07:36.030
when they go to test your app.

00:07:36.030 --> 00:07:37.923
Looks good, now we hit Save.

00:07:39.960 --> 00:07:42.480
Here are some best practices to keep in mind

00:07:42.480 --> 00:07:44.013
as you add test details.

00:07:45.630 --> 00:07:49.050
Update your test details on a per build basis.

00:07:49.050 --> 00:07:52.080
Since test details are associated with a build,

00:07:52.080 --> 00:07:54.450
this is your opportunity to tell testers

00:07:54.450 --> 00:07:57.273
how they can provide you with meaningful feedback.

00:07:58.410 --> 00:08:00.570
When coming up with test details,

00:08:00.570 --> 00:08:03.090
we recommend keeping it simple.

00:08:03.090 --> 00:08:06.060
You might try using short sentences or bullets

00:08:06.060 --> 00:08:09.720
to make it readable and draw in potential testers.

00:08:09.720 --> 00:08:12.990
You should also call out any particular features to test

00:08:12.990 --> 00:08:15.420
or any known issues to be aware of.

00:08:15.420 --> 00:08:18.630
This helps testers understand what they should explore

00:08:18.630 --> 00:08:20.643
and allows them to focus their efforts.

00:08:21.930 --> 00:08:25.530
One last thing, before we share our build with testers,

00:08:25.530 --> 00:08:28.353
we need to add test information for our app.

00:08:29.670 --> 00:08:32.910
To do that, we'll click on the Test Information section

00:08:32.910 --> 00:08:34.473
under General Information.

00:08:37.410 --> 00:08:39.720
We will need to add our beta app description

00:08:39.720 --> 00:08:41.580
and an email address.

00:08:41.580 --> 00:08:44.160
The beta app description will be visible to a tester

00:08:44.160 --> 00:08:47.250
from the TestFlight app and any tester feedback

00:08:47.250 --> 00:08:50.910
sent via email will go to the feedback email address

00:08:50.910 --> 00:08:51.813
we enter here.

00:08:54.210 --> 00:08:57.210
And while not required now, we will need to fill out

00:08:57.210 --> 00:09:00.120
the beta app review information section

00:09:00.120 --> 00:09:03.810
before we can distribute our app to external testers.

00:09:03.810 --> 00:09:06.150
We only have to update the test information page

00:09:06.150 --> 00:09:09.513
one time per app and again if the information changes.

00:09:12.390 --> 00:09:15.333
And with that, our build is ready to start testing.

00:09:18.180 --> 00:09:21.210
With our build uploaded and configured for testing,

00:09:21.210 --> 00:09:22.923
now we can add testers.

00:09:24.390 --> 00:09:27.390
You can add two types of testers to TestFlight,

00:09:27.390 --> 00:09:29.790
internal and external.

00:09:29.790 --> 00:09:31.830
Since our app is still fairly new,

00:09:31.830 --> 00:09:34.110
let's start by getting feedback from a few people

00:09:34.110 --> 00:09:35.013
within our team.

00:09:36.090 --> 00:09:38.733
We'll add them to our app as internal testers.

00:09:40.350 --> 00:09:43.800
Let's learn a little bit more about internal testers.

00:09:43.800 --> 00:09:47.040
Internal testers are part of your App Store Connect team

00:09:47.040 --> 00:09:49.710
and you can designate up to 100 team members

00:09:49.710 --> 00:09:51.483
as internal testers for your app.

00:09:53.100 --> 00:09:55.170
Each internal tester can install builds

00:09:55.170 --> 00:09:57.960
and test them on up to 30 devices

00:09:57.960 --> 00:10:00.480
and since these testers are part of your team,

00:10:00.480 --> 00:10:02.580
you can choose to automatically distribute

00:10:02.580 --> 00:10:03.843
all new builds to them.

00:10:05.760 --> 00:10:07.830
To add internal testers,

00:10:07.830 --> 00:10:10.740
we'll first need to create an internal group.

00:10:10.740 --> 00:10:13.320
To do that, we'll go to the TestFlight section

00:10:13.320 --> 00:10:15.930
in App Store Connect and click the plus button

00:10:15.930 --> 00:10:17.220
next to Internal Testing

00:10:17.220 --> 00:10:19.623
to create a new internal testing group.

00:10:21.030 --> 00:10:23.730
Groups are a powerful tool because they allow us

00:10:23.730 --> 00:10:26.580
to create repeatable testing processes.

00:10:26.580 --> 00:10:27.780
We'll add a group name

00:10:27.780 --> 00:10:31.110
and keep the Enable Automatic Distribution button checked

00:10:31.110 --> 00:10:32.463
and then click Create.

00:10:34.800 --> 00:10:36.633
Now we have an internal group.

00:10:37.500 --> 00:10:41.070
Since we selected Enable Automatic Distribution,

00:10:41.070 --> 00:10:44.370
our build has already been added to this group.

00:10:44.370 --> 00:10:47.310
Moving forward, this internal group will automatically

00:10:47.310 --> 00:10:49.830
get access to all builds we upload

00:10:49.830 --> 00:10:52.590
without having to add them one by one.

00:10:52.590 --> 00:10:55.590
With our group created, now we have to add testers

00:10:55.590 --> 00:10:58.470
so let's click on the blue plus button next to Testers

00:10:58.470 --> 00:10:59.673
to see who we can add.

00:11:01.350 --> 00:11:03.330
All of our App Store Connect team members

00:11:03.330 --> 00:11:08.280
with the roles of admin, app manager, developer or marketing

00:11:08.280 --> 00:11:11.070
will appear here as testers we can add.

00:11:11.070 --> 00:11:14.523
We can add up to 100 total internal testers per app.

00:11:15.540 --> 00:11:18.630
Let's select Jerome, Melissa and myself

00:11:18.630 --> 00:11:20.103
and add us to this group.

00:11:22.170 --> 00:11:24.753
Now we are testers for our internal group.

00:11:25.620 --> 00:11:28.683
In the status column, you'll see that we've been invited.

00:11:32.130 --> 00:11:35.460
After I add testers, they'll receive an email invite

00:11:35.460 --> 00:11:37.530
to test our Food Truck app.

00:11:37.530 --> 00:11:40.773
The email includes a link to view our app in TestFlight.

00:11:42.300 --> 00:11:45.090
When a tester opens the TestFlight app to accept

00:11:45.090 --> 00:11:47.850
the invitation and install the Food Truck app,

00:11:47.850 --> 00:11:51.003
the first thing they see is the What to Test section.

00:11:52.080 --> 00:11:54.840
This section includes the test details we have added

00:11:54.840 --> 00:11:56.610
when setting up our build.

00:11:56.610 --> 00:11:58.860
So even before our app is installed,

00:11:58.860 --> 00:12:01.530
we've had an opportunity to help testers understand

00:12:01.530 --> 00:12:03.453
how to provide valuable feedback.

00:12:04.440 --> 00:12:07.530
Testers can also view more details about the app.

00:12:07.530 --> 00:12:10.350
For example, the beta app description that we added

00:12:10.350 --> 00:12:12.843
in the test information section of TestFlight.

00:12:15.540 --> 00:12:17.850
Once Jerome and Melissa get our invite

00:12:17.850 --> 00:12:21.333
and install the Food Truck app, we have our first testers.

00:12:23.130 --> 00:12:25.440
With our app in the hands of some testers,

00:12:25.440 --> 00:12:28.593
now is a good time to see how feedback works in TestFlight.

00:12:29.820 --> 00:12:33.150
Testers can submit feedback in multiple ways.

00:12:33.150 --> 00:12:35.340
First, via the TestFlight app

00:12:35.340 --> 00:12:37.323
with the Submit Feedback button.

00:12:38.250 --> 00:12:41.370
Feedback submitted in this way will be sent to the email

00:12:41.370 --> 00:12:44.583
we specified in the test information section of the app.

00:12:46.170 --> 00:12:50.100
Testers can also take a screenshot while testing your app.

00:12:50.100 --> 00:12:52.560
In the screenshot previewer, testers can edit

00:12:52.560 --> 00:12:55.053
and add markups to provide more information.

00:12:56.130 --> 00:12:59.280
With this method, testers have the option to share

00:12:59.280 --> 00:13:02.493
the screenshot and any comments directly to TestFlight.

00:13:03.480 --> 00:13:05.370
If our Food Truck app crashes,

00:13:05.370 --> 00:13:07.680
testers can submit a crash report.

00:13:07.680 --> 00:13:10.350
They can agree to send a report and add feedback

00:13:10.350 --> 00:13:11.900
about the context of the crash.

00:13:14.100 --> 00:13:16.890
The group's page is a great place to get a summary

00:13:16.890 --> 00:13:19.383
of tester engagement and feedback for our app.

00:13:20.790 --> 00:13:22.470
By looking at the status column,

00:13:22.470 --> 00:13:24.210
we can see that both Jerome and Melissa

00:13:24.210 --> 00:13:26.960
have installed our build and they have been testing it.

00:13:28.380 --> 00:13:31.530
We can see the counts of sessions, crashes and feedback

00:13:31.530 --> 00:13:34.530
by tester and the number of sessions and crashes

00:13:34.530 --> 00:13:35.733
attributed per build.

00:13:37.020 --> 00:13:38.700
It looks like we have a few crashes

00:13:38.700 --> 00:13:41.523
and feedbacks to investigate, so let's go do that.

00:13:42.630 --> 00:13:44.520
Let's first go to the crashes page

00:13:44.520 --> 00:13:46.863
under the feedback section on the left side.

00:13:48.570 --> 00:13:52.200
Here we can see all crashes our testers have submitted

00:13:52.200 --> 00:13:55.800
and quickly see the crash details summarized in a table.

00:13:55.800 --> 00:13:58.500
We can then use the filters at the top to view crashes

00:13:58.500 --> 00:14:01.740
by platform, build or device.

00:14:01.740 --> 00:14:03.870
I can select this crash to see

00:14:03.870 --> 00:14:06.930
the details of the crash report submitted by Jerome

00:14:06.930 --> 00:14:10.350
including things like time zone, battery percentage

00:14:10.350 --> 00:14:11.373
and connection type.

00:14:12.540 --> 00:14:14.370
These details can really come in handy

00:14:14.370 --> 00:14:16.953
as we try to understand why this app crashed.

00:14:19.890 --> 00:14:23.220
Similarly, we can go to the screenshots page to view

00:14:23.220 --> 00:14:26.400
screenshot feedback provided by our testers.

00:14:26.400 --> 00:14:29.370
Like with crash feedback, we can filter by fields

00:14:29.370 --> 00:14:32.310
like device, build and OS version

00:14:32.310 --> 00:14:34.830
to view a subset of feedback.

00:14:34.830 --> 00:14:36.780
This can help inform changes we might make

00:14:36.780 --> 00:14:37.863
to our next build.

00:14:39.360 --> 00:14:42.753
We can also select a screenshot to inspect it more closely.

00:14:43.980 --> 00:14:47.430
From the screenshot details view, we can download the image

00:14:47.430 --> 00:14:49.290
to our device with the download button

00:14:49.290 --> 00:14:53.670
on the top right corner and even open in Xcode Organizer

00:14:53.670 --> 00:14:55.863
using the Open in Xcode button.

00:14:57.150 --> 00:15:00.840
In Xcode Organizer, we can see the selected screenshot

00:15:00.840 --> 00:15:02.850
and the other visual feedback and crashes

00:15:02.850 --> 00:15:04.620
for the Food Truck app.

00:15:04.620 --> 00:15:07.410
Here I can write notes to my development team

00:15:07.410 --> 00:15:09.390
and mark feedback is resolved

00:15:09.390 --> 00:15:11.540
as we make our way through addressing them.

00:15:14.610 --> 00:15:17.070
Look at that, we've gotten through our first round

00:15:17.070 --> 00:15:19.002
of testing with TestFlight.

00:15:19.002 --> 00:15:21.450
Our internal testers gave us some really great feedback

00:15:21.450 --> 00:15:22.323
to incorporate.

00:15:23.400 --> 00:15:25.920
Remember, TestFlight is also designed to scale

00:15:25.920 --> 00:15:27.633
and support your testing needs.

00:15:29.130 --> 00:15:31.110
So let's expand our testing audience

00:15:31.110 --> 00:15:34.680
and share our app with testers outside of our team.

00:15:34.680 --> 00:15:37.530
To do that, we're going to add external testers

00:15:37.530 --> 00:15:38.363
to our build.

00:15:40.320 --> 00:15:43.830
An external tester is any tester outside of your team

00:15:43.830 --> 00:15:46.023
that you invite to beta test your app.

00:15:46.890 --> 00:15:51.030
You can invite up to 10,000 external testers per app.

00:15:51.030 --> 00:15:54.720
And with external testers, there are two methods to invite;

00:15:54.720 --> 00:15:57.210
invitation or public link

00:15:57.210 --> 00:15:59.723
and we'll touch on both of those differences shortly.

00:16:00.960 --> 00:16:03.660
Before testing with external testers can begin,

00:16:03.660 --> 00:16:06.300
you submit your build to App Review.

00:16:06.300 --> 00:16:09.570
This keeps TestFlight a safe and trusted place for testers

00:16:09.570 --> 00:16:11.043
to participate in testing.

00:16:12.720 --> 00:16:14.850
One last thing to keep in mind,

00:16:14.850 --> 00:16:16.710
in TestFlight, testers can test

00:16:16.710 --> 00:16:20.550
your in-app purchase experiences without incurring charges.

00:16:20.550 --> 00:16:23.460
This can really help you improve these experiences

00:16:23.460 --> 00:16:25.173
before they go live on the store.

00:16:26.730 --> 00:16:28.800
Once our build has gone through App Review,

00:16:28.800 --> 00:16:32.103
we can create an external group and start adding testers.

00:16:33.210 --> 00:16:35.160
Like we did with internal testing,

00:16:35.160 --> 00:16:36.660
we'll click on the blue plus button

00:16:36.660 --> 00:16:40.203
next to the External Testing section to create a new group.

00:16:42.420 --> 00:16:45.270
Let's invite some chefs to test our app.

00:16:45.270 --> 00:16:47.790
We're gonna go ahead and call this group Chef Testers

00:16:47.790 --> 00:16:49.173
and then click Create.

00:16:51.090 --> 00:16:54.300
For all external groups, we need to manually add the builds

00:16:54.300 --> 00:16:56.433
we'd like the group of testers to access.

00:16:57.930 --> 00:16:59.520
Most of the sections for this group

00:16:59.520 --> 00:17:01.829
are similar to an internal group but we can see

00:17:01.829 --> 00:17:04.683
that there's a new section called Public Link.

00:17:05.730 --> 00:17:08.220
Public Link is another way to distribute your app

00:17:08.220 --> 00:17:10.533
to external testers in addition to email.

00:17:11.790 --> 00:17:13.740
Unlike with email invites,

00:17:13.740 --> 00:17:15.990
you don't need a tester's email to invite them

00:17:15.990 --> 00:17:17.730
using a public link.

00:17:17.730 --> 00:17:20.010
Instead, you generate a specific link

00:17:20.010 --> 00:17:23.100
with an enrollment limit and anyone who clicks on the link

00:17:23.100 --> 00:17:26.010
can enroll and be a tester for the app.

00:17:26.010 --> 00:17:28.530
You can choose to share the link however you like

00:17:28.530 --> 00:17:31.503
such as your social channels or even email campaigns.

00:17:32.670 --> 00:17:34.740
Once enrolled, these testers have the option

00:17:34.740 --> 00:17:37.290
to stay anonymous when providing you with feedback.

00:17:38.430 --> 00:17:41.133
Let's create a public link for our chef testers.

00:17:42.120 --> 00:17:45.393
To do that, we'll select the Enable Public Link button.

00:17:47.100 --> 00:17:49.200
We'll click Enable again to confirm

00:17:49.200 --> 00:17:52.440
that we wanna create a public link for this group

00:17:52.440 --> 00:17:54.393
and then we set our tester limit.

00:17:55.530 --> 00:17:57.330
This is the maximum number of people

00:17:57.330 --> 00:18:00.600
who will be able to enroll using this link.

00:18:00.600 --> 00:18:03.963
You can set this limit as low as one and up to 10,000.

00:18:04.830 --> 00:18:07.380
We're gonna start with 100.

00:18:07.380 --> 00:18:09.930
It's always good to start with a smaller group of testers

00:18:09.930 --> 00:18:11.250
and then expand.

00:18:11.250 --> 00:18:13.800
And don't worry, you can always edit the limit

00:18:13.800 --> 00:18:16.383
once you create the group and testing progresses.

00:18:18.330 --> 00:18:20.520
Once we click Set Limit,

00:18:20.520 --> 00:18:23.523
we have the URL we can use to invite testers.

00:18:25.200 --> 00:18:27.810
I'm gonna share the link on my social media

00:18:27.810 --> 00:18:30.093
to invite people to test our Food Truck app.

00:18:31.710 --> 00:18:33.270
When someone clicks on the link,

00:18:33.270 --> 00:18:35.250
they'll be directed to download TestFlight

00:18:35.250 --> 00:18:36.720
if they haven't already

00:18:36.720 --> 00:18:39.020
and then they can download our Food Truck app.

00:18:42.150 --> 00:18:44.490
Feedback provided by external testers appears

00:18:44.490 --> 00:18:47.940
in the same place as internal tester feedback and crashes

00:18:47.940 --> 00:18:50.400
so we already know what to do and how to use it

00:18:50.400 --> 00:18:51.393
to improve our app.

00:18:52.260 --> 00:18:54.720
Once we use this information and diagnostics

00:18:54.720 --> 00:18:57.540
to improve our Food Truck app and maybe go through

00:18:57.540 --> 00:18:59.280
a few more rounds of testing,

00:18:59.280 --> 00:19:01.683
we are ready to publish it on the App Store.

00:19:04.020 --> 00:19:06.090
Since we used TestFlight for testing,

00:19:06.090 --> 00:19:09.120
our build is already uploaded to App Store Connect

00:19:09.120 --> 00:19:12.330
so it'll just take us a few steps to submit for publishing

00:19:12.330 --> 00:19:13.263
on the App Store.

00:19:14.640 --> 00:19:17.520
We'll go to the App Store tab in App Store Connect

00:19:17.520 --> 00:19:20.100
and complete the details on the page.

00:19:20.100 --> 00:19:23.340
Again, since we've already uploaded our build to TestFlight,

00:19:23.340 --> 00:19:25.350
we won't need to upload it again.

00:19:25.350 --> 00:19:28.590
Instead, we will select the build from the dropdown menu

00:19:28.590 --> 00:19:30.000
when prompted.

00:19:30.000 --> 00:19:33.210
Once we're done, we'll click Submit for Review

00:19:33.210 --> 00:19:34.043
and that's it.

00:19:37.650 --> 00:19:41.370
Remember, testing is not a one and done experience.

00:19:41.370 --> 00:19:42.600
It's a best practice

00:19:42.600 --> 00:19:45.270
as part of your ongoing development cycle

00:19:45.270 --> 00:19:47.823
even after your app is published on the App Store.

00:19:48.690 --> 00:19:51.450
As you consider incorporating TestFlight into your testing

00:19:51.450 --> 00:19:54.900
and release process, we wanted to share an additional way

00:19:54.900 --> 00:19:57.750
to make your testing efforts even easier.

00:19:57.750 --> 00:19:59.913
For that, I'll pass it back to Jerome.

00:20:02.580 --> 00:20:05.490
This year we also introduced an easier way

00:20:05.490 --> 00:20:08.640
to upload your app to TestFlight and App Store Connect,

00:20:08.640 --> 00:20:10.470
Xcode Cloud.

00:20:10.470 --> 00:20:14.160
Xcode Cloud is a continuous integration and delivery service

00:20:14.160 --> 00:20:17.823
built into Xcode and design expressly for Apple developers.

00:20:19.530 --> 00:20:21.630
It accelerates the development and delivery

00:20:21.630 --> 00:20:25.830
of high quality apps by bringing together cloud-based tools

00:20:25.830 --> 00:20:30.210
that helps you build apps, ran automated test in parallel,

00:20:30.210 --> 00:20:31.923
and deliver apps to testers.

00:20:33.000 --> 00:20:36.158
It's a perfect companion for TestFlight.

00:20:36.158 --> 00:20:39.210
Xcode Cloud works with workflows,

00:20:39.210 --> 00:20:41.880
a configuration that tells Xcode Cloud

00:20:41.880 --> 00:20:45.123
which action to perform and when to perform them.

00:20:46.890 --> 00:20:49.083
Let's create a workflow for Food Truck.

00:20:50.490 --> 00:20:52.383
This is a default workflow.

00:20:53.280 --> 00:20:56.130
Workflows are made up of a start condition,

00:20:56.130 --> 00:21:00.480
a build environment, the sets of actions to be performed

00:21:00.480 --> 00:21:05.010
and post-actions such as deployments and notifications.

00:21:05.010 --> 00:21:07.860
By default, there is no post-action

00:21:07.860 --> 00:21:09.570
so let's edit our workflow

00:21:09.570 --> 00:21:13.050
and add a post-action for TestFlight deployment.

00:21:13.050 --> 00:21:15.720
First, in the archive action,

00:21:15.720 --> 00:21:18.030
I'm going to change the deployment preparation

00:21:18.030 --> 00:21:19.323
for TestFlight build.

00:21:20.160 --> 00:21:23.430
I want this workflow to be used for internal deployment only

00:21:23.430 --> 00:21:26.163
so I'll choose the Internal Testing Only option.

00:21:27.270 --> 00:21:29.940
If I want to prepare my build for external testing

00:21:29.940 --> 00:21:31.170
or for the App Store,

00:21:31.170 --> 00:21:33.720
I would choose the TestFlight and App Store option.

00:21:35.100 --> 00:21:38.580
Then I can click on the Post-Action plus sign

00:21:38.580 --> 00:21:41.820
and select what I want to do after the archive step.

00:21:41.820 --> 00:21:44.283
In that case, TestFlight internal testing.

00:21:46.050 --> 00:21:49.680
Then I select a specific group of testers for this workflow,

00:21:49.680 --> 00:21:52.983
here our QA team we created earlier and click Add.

00:21:55.110 --> 00:21:58.050
Once my workflow is triggered by my start condition,

00:21:58.050 --> 00:22:01.410
Xcode Cloud will build my app and automatically upload it

00:22:01.410 --> 00:22:04.440
to App Store Connect and my QA team will be notified

00:22:04.440 --> 00:22:05.943
of a new build in TestFlight.

00:22:07.110 --> 00:22:09.513
I just click Save and that's it.

00:22:11.280 --> 00:22:14.100
Xcode Cloud can be accessed directly from Xcode

00:22:14.100 --> 00:22:15.540
and also an App Store Connect

00:22:15.540 --> 00:22:17.433
right next to the TestFlight app.

00:22:19.320 --> 00:22:22.170
For more information on Xcode Cloud and workflows,

00:22:22.170 --> 00:22:24.303
you can check out those WWDC videos.

00:22:26.220 --> 00:22:27.660
As you incorporate TestFlight

00:22:27.660 --> 00:22:29.910
into your ongoing development cycle,

00:22:29.910 --> 00:22:31.953
here are a few things to keep in mind.

00:22:33.450 --> 00:22:35.643
Start small, then expand.

00:22:36.630 --> 00:22:38.640
If you're making a large change to your app

00:22:38.640 --> 00:22:40.530
or introducing new features,

00:22:40.530 --> 00:22:43.380
consider adding testers over time so you can test

00:22:43.380 --> 00:22:46.743
these changes before distributing to all 10,000 testers.

00:22:47.940 --> 00:22:51.660
Remember, external testers are also your potential users

00:22:51.660 --> 00:22:54.123
so you want to be mindful of their experience.

00:22:56.220 --> 00:23:00.180
Know what you want to accomplish with each build and test,

00:23:00.180 --> 00:23:03.183
this will help you create a smoother testing process.

00:23:04.770 --> 00:23:08.043
Use groups to create repeatable testing processes,

00:23:09.030 --> 00:23:11.460
groups are a great way to manage your testers

00:23:11.460 --> 00:23:14.010
and quickly distribute builds.

00:23:14.010 --> 00:23:17.040
Once you set up a group and add testers to it,

00:23:17.040 --> 00:23:19.440
you can start the testing cycle and share new builds

00:23:19.440 --> 00:23:21.183
with testers more quickly.

00:23:22.560 --> 00:23:27.300
And finally, try Xcode Cloud in your development process.

00:23:27.300 --> 00:23:30.180
This will help you automate your TestFlight workflows

00:23:30.180 --> 00:23:32.730
and could reduce the time between your releases,

00:23:32.730 --> 00:23:35.103
improving the overall quality of your apps.

00:23:36.660 --> 00:23:39.810
We hope this presentation has helped you better understand

00:23:39.810 --> 00:23:42.630
how you can use TestFlight to engage testers

00:23:42.630 --> 00:23:46.200
and get valuable feedback on your beta apps.

00:23:46.200 --> 00:23:49.290
For more information on TestFlight, links to documentation

00:23:49.290 --> 00:23:52.173
and more, check out the Apple developer website.