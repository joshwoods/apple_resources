WEBVTT

00:00:00.467 --> 00:00:02.502
Hi, I'm Ben Bodner
from the Display

00:00:02.502 --> 00:00:04.771
and Color Technologies
team at Apple.

00:00:04.771 --> 00:00:08.041
In this video, I'll explain
the capabilities, use cases,

00:00:08.041 --> 00:00:12.512
and APIs of the new
Reference Mode on iPad Pro.

00:00:12.512 --> 00:00:13.981
To help you understand
Reference Mode,

00:00:13.981 --> 00:00:16.817
I should first describe
what a reference display is.

00:00:16.817 --> 00:00:19.887
Many displays intentionally
manipulate the color, contrast,

00:00:19.887 --> 00:00:22.022
and sharpness of images.

00:00:22.022 --> 00:00:24.491
For example,
TVs usually have different modes

00:00:24.491 --> 00:00:27.027
that each target some unique
aesthetic appearance,

00:00:27.027 --> 00:00:30.864
and mobile devices often adapt
to ambient lighting.

00:00:30.864 --> 00:00:32.599
While these sorts of features
may be desirable

00:00:32.599 --> 00:00:34.801
in most situations,
they can be problematic

00:00:34.801 --> 00:00:38.038
for content creators
who usually want to know

00:00:38.038 --> 00:00:41.375
exactly how their display
is rendering images.

00:00:41.375 --> 00:00:43.844
For that reason,
reference displays render color

00:00:43.844 --> 00:00:48.015
precisely to the specifications
for a media format.

00:00:48.015 --> 00:00:49.783
That means if you have
different reference displays,

00:00:49.783 --> 00:00:53.086
they will all render
the same content consistently.

00:00:53.086 --> 00:00:55.389
This consistency gives
content creators the ability

00:00:55.389 --> 00:00:57.991
to use multiple displays with
the confidence that their work

00:00:57.991 --> 00:00:59.893
will look the same
on all of them,

00:00:59.893 --> 00:01:02.229
assuming they are viewed in the
appropriate lighting environment

00:01:02.229 --> 00:01:04.164
for their media format.

00:01:04.164 --> 00:01:05.265
Now that we have
an understanding

00:01:05.265 --> 00:01:07.668
of reference displays,
let's get into the details

00:01:07.668 --> 00:01:10.804
of Reference Mode on iPad.

00:01:10.804 --> 00:01:14.608
First, I'll explain when
and how to use Reference Mode.

00:01:14.608 --> 00:01:17.477
Next, I'll cover the specific
capabilities of Reference Mode

00:01:17.477 --> 00:01:20.914
including which
media formats are supported.

00:01:20.914 --> 00:01:22.916
And last,
I'll give a rundown of the APIs

00:01:22.916 --> 00:01:25.652
associated with Reference Mode.

00:01:25.652 --> 00:01:28.322
So, when is it appropriate
to use Reference Mode

00:01:28.322 --> 00:01:31.224
and how do we enable it?

00:01:31.224 --> 00:01:33.226
Reference Mode enables
or enhances a variety

00:01:33.226 --> 00:01:36.029
of content creation workflows.

00:01:36.029 --> 00:01:37.764
It adds support
for color-critical tasks

00:01:37.764 --> 00:01:39.566
that require
a reference display,

00:01:39.566 --> 00:01:42.736
which historically have not
been possible on mobile devices.

00:01:42.736 --> 00:01:44.037
This includes color grading,

00:01:44.037 --> 00:01:47.407
along with review and approval
of graded content.

00:01:47.407 --> 00:01:49.910
It also brings color accuracy
to mobile video editing

00:01:49.910 --> 00:01:51.511
and compositing apps,

00:01:51.511 --> 00:01:52.980
improving the experience
for users

00:01:52.980 --> 00:01:56.750
who typically would not have
access to a reference display.

00:01:56.750 --> 00:01:59.052
Finally, Reference Mode
supports both Metal

00:01:59.052 --> 00:02:01.421
and AVFoundation-based
color rendering,

00:02:01.421 --> 00:02:05.559
so apps serving these workflows
can use either of them.

00:02:05.559 --> 00:02:08.028
Reference Mode is similar
to the reference display presets

00:02:08.028 --> 00:02:10.597
already available
on some macOS systems

00:02:10.597 --> 00:02:12.999
but with
an important difference.

00:02:12.999 --> 00:02:15.502
On macOS, multiple
preset modes are available

00:02:15.502 --> 00:02:17.337
that each deliver
reference color rendering

00:02:17.337 --> 00:02:19.706
for different formats.

00:02:19.706 --> 00:02:22.142
On iPad, Reference Mode
is just one setting

00:02:22.142 --> 00:02:25.345
that is either turned on or off.

00:02:25.345 --> 00:02:26.980
That means you can get
reference color rendering

00:02:26.980 --> 00:02:30.751
for multiple formats without
the need to change settings.

00:02:30.751 --> 00:02:33.086
This mode can only be accessed
through the iPad settings

00:02:33.086 --> 00:02:35.555
by a user and cannot be
programmatically enabled

00:02:35.555 --> 00:02:39.526
or disabled by an app.

00:02:39.526 --> 00:02:40.594
Reference Mode is supported

00:02:40.594 --> 00:02:44.031
on the 12.9-inch
fifth-generation iPad Pro.

00:02:44.031 --> 00:02:47.067
It can be used with an iPad
as a standalone device,

00:02:47.067 --> 00:02:49.503
but it also brings new
capability to Sidecar,

00:02:49.503 --> 00:02:51.204
a feature that allows
an iPad to be used

00:02:51.204 --> 00:02:54.541
as a secondary monitor
for a macOS device.

00:02:54.541 --> 00:02:57.444
Previously,
Sidecar did not support EDR.

00:02:57.444 --> 00:02:59.846
But now, if Reference Mode
is enabled on an iPad

00:02:59.846 --> 00:03:03.250
used as a Sidecar display,
it will support EDR in addition

00:03:03.250 --> 00:03:07.020
to enabling reference color
rendering for supported formats.

00:03:07.020 --> 00:03:09.956
This new functionality also
requires an Apple silicon Mac

00:03:09.956 --> 00:03:12.225
with macOS Ventura
to be used as the host

00:03:12.225 --> 00:03:15.662
for the Sidecar display.

00:03:15.662 --> 00:03:17.931
Enabling Reference Mode
manipulates several other items

00:03:17.931 --> 00:03:20.033
in the Settings menu.

00:03:20.033 --> 00:03:21.768
To achieve consistent
color rendering,

00:03:21.768 --> 00:03:24.337
the brightness slider is locked
and dynamic display features

00:03:24.337 --> 00:03:25.739
are turned off.

00:03:25.739 --> 00:03:27.574
This includes disabling
and locking True Tone

00:03:27.574 --> 00:03:31.578
and Night Shift, along with
the Auto-Brightness feature.

00:03:31.578 --> 00:03:32.746
Now that I've explained
when and how

00:03:32.746 --> 00:03:35.482
to enable Reference Mode,
let's take a closer look

00:03:35.482 --> 00:03:37.617
at what it means to run
the reference color,

00:03:37.617 --> 00:03:42.322
along with the specific
capabilities of Reference Mode.

00:03:42.322 --> 00:03:44.524
Like the macOS presets
I mentioned earlier,

00:03:44.524 --> 00:03:46.226
Reference Mode uses
color management

00:03:46.226 --> 00:03:49.129
to support several different
media formats.

00:03:49.129 --> 00:03:51.098
This ensures that color
is rendered accurately

00:03:51.098 --> 00:03:54.634
based on the specification
for each format.

00:03:54.634 --> 00:03:57.237
Of course, to determine
how colors should be rendered,

00:03:57.237 --> 00:04:01.541
media needs to be tagged
to indicate which format it is.

00:04:01.541 --> 00:04:03.477
For reference color
management to be valid,

00:04:03.477 --> 00:04:04.778
the display should
only be viewed

00:04:04.778 --> 00:04:05.979
in the reference
environment

00:04:05.979 --> 00:04:08.348
specified by
the format standard.

00:04:08.348 --> 00:04:10.016
The video format supported
by Reference Mode

00:04:10.016 --> 00:04:11.585
require a dim environment,

00:04:11.585 --> 00:04:16.423
while graphics should be viewed
in a bright indoor environment.

00:04:16.423 --> 00:04:20.160
So what sort of color management
does Reference Mode use?

00:04:20.160 --> 00:04:22.629
All formats of color
managed to a similar spec.

00:04:22.629 --> 00:04:25.532
This includes a D65 white point
and a peak luminance

00:04:25.532 --> 00:04:30.537
of 100 nits for SDR media
or 1000 nits for HDR media.

00:04:30.537 --> 00:04:33.807
For HDR formats, tone-mapping
is disabled so the display

00:04:33.807 --> 00:04:36.743
will precisely track
the format's transfer function.

00:04:36.743 --> 00:04:38.211
And colors
will be displayed correctly

00:04:38.211 --> 00:04:40.313
as long as they don't exceed
1000 nits

00:04:40.313 --> 00:04:42.048
and are within
the P3 color gamut,

00:04:42.048 --> 00:04:44.184
which is the iPad's
native gamut.

00:04:44.184 --> 00:04:46.319
Colors that are out of gamut
or brighter than 1000 nits

00:04:46.319 --> 00:04:48.788
will be clipped
with no tone-mapping.

00:04:48.788 --> 00:04:53.059
The result of that clipping
may vary based on the format.

00:04:53.059 --> 00:04:55.395
Speaking of formats,
here's a list of the ones

00:04:55.395 --> 00:04:57.898
supported by Reference Mode,
along with the corresponding

00:04:57.898 --> 00:05:01.001
macOS reference display
preset for each.

00:05:01.001 --> 00:05:02.869
On iPad, Reference Mode
will determine

00:05:02.869 --> 00:05:05.605
the appropriate color management
based on color tagging,

00:05:05.605 --> 00:05:08.642
so there's no need
to switch between presets.

00:05:08.642 --> 00:05:12.579
One example of tagging are
the ITU H.273 code points

00:05:12.579 --> 00:05:13.880
included in this table,

00:05:13.880 --> 00:05:16.983
which you may know as
NCLC color tags from QuickTime.

00:05:16.983 --> 00:05:20.187
But there are other forms of
tagging that can also be used.

00:05:20.187 --> 00:05:23.156
If your app uses a format that
isn't on this list, don't worry.

00:05:23.156 --> 00:05:25.759
Reference Mode still color
manages unsupported formats;

00:05:25.759 --> 00:05:27.594
they'll just be rendered
in a similar way

00:05:27.594 --> 00:05:30.730
to the default display mode.

00:05:30.730 --> 00:05:32.365
You may notice that
some of these rows

00:05:32.365 --> 00:05:34.234
include multiple formats.

00:05:34.234 --> 00:05:36.503
That's because the formats
listed in the same row should

00:05:36.503 --> 00:05:40.040
result in the same rendering
on a reference display.

00:05:40.040 --> 00:05:44.077
For example, HDR10
and BT.2100 PQ both use

00:05:44.077 --> 00:05:47.814
the BT 2020 color primaries,
the PQ transfer function,

00:05:47.814 --> 00:05:52.252
and the BT 2020 YCC matrix
as described by the code points

00:05:52.252 --> 00:05:54.721
9-16-9.

00:05:54.721 --> 00:05:57.490
But HDR10 also includes
HDR metadata

00:05:57.490 --> 00:06:00.594
that can be used
to inform tone-mapping.

00:06:00.594 --> 00:06:02.495
In the iPad's
default display mode,

00:06:02.495 --> 00:06:04.898
this could result in different
renditions of the same content

00:06:04.898 --> 00:06:06.766
depending on the format.

00:06:06.766 --> 00:06:08.935
But since Reference Mode
does not tone-map,

00:06:08.935 --> 00:06:10.837
any HDR metadata is ignored

00:06:10.837 --> 00:06:14.941
and both formats
are rendered identically.

00:06:14.941 --> 00:06:17.110
Generally speaking, reference
displays are calibrated

00:06:17.110 --> 00:06:20.280
with an optical measurement
device to ensure color accuracy.

00:06:20.280 --> 00:06:22.682
Like macOS presets,
Reference Mode

00:06:22.682 --> 00:06:25.318
includes a fine-tuned
calibration feature

00:06:25.318 --> 00:06:28.088
that allows the white point
chromaticity and luminance

00:06:28.088 --> 00:06:30.223
to be calibrated
at a single point.

00:06:30.223 --> 00:06:32.125
This color adjustment
is intended to account

00:06:32.125 --> 00:06:34.160
for display aging
and differences between

00:06:34.160 --> 00:06:36.830
measurement devices
so that your iPad's white point

00:06:36.830 --> 00:06:39.065
and peak luminance
will match other displays

00:06:39.065 --> 00:06:42.002
that have been calibrated
with the same device.

00:06:42.002 --> 00:06:44.404
That wraps up the specifics
of Reference Mode's capabilities

00:06:44.404 --> 00:06:46.706
in color rendering.

00:06:46.706 --> 00:06:49.643
Next, let's discuss
the UIScreen APIs

00:06:49.643 --> 00:06:51.444
associated with Reference Mode.

00:06:51.444 --> 00:06:56.549
But before doing so, I should
quickly recap what EDR is.

00:06:56.549 --> 00:06:59.185
EDR stands
for extended dynamic range

00:06:59.185 --> 00:07:01.421
and is Apple's HDR technology.

00:07:01.421 --> 00:07:03.156
It includes both
rendering technologies

00:07:03.156 --> 00:07:05.191
and pixel representations.

00:07:05.191 --> 00:07:09.462
EDR pixels can represent
both SDR and HDR content.

00:07:09.462 --> 00:07:11.865
An important component
of EDR is headroom,

00:07:11.865 --> 00:07:13.566
which is the HDR
peak luminance

00:07:13.566 --> 00:07:16.636
divided by the SDR
peak luminance.

00:07:16.636 --> 00:07:19.806
In Reference Mode,
HDR peak is always 1000 nits

00:07:19.806 --> 00:07:21.908
and SDR peak is always 100 nits,

00:07:21.908 --> 00:07:26.646
meaning EDR headroom
is always 10 times.

00:07:26.646 --> 00:07:29.249
EDR ensures that SDR pixels,
which are represented

00:07:29.249 --> 00:07:32.652
with values from zero to one,
are always rendered.

00:07:32.652 --> 00:07:34.821
Any values between one
and the EDR headroom

00:07:34.821 --> 00:07:37.223
will be properly rendered
without tone-mapping,

00:07:37.223 --> 00:07:39.025
while values that are brighter
than EDR headroom

00:07:39.025 --> 00:07:41.361
will be clipped.

00:07:41.361 --> 00:07:43.363
However, there may be cases
where you decide

00:07:43.363 --> 00:07:45.799
that the headroom is not high
enough to justify rendering

00:07:45.799 --> 00:07:50.503
your content as EDR and instead
want to implement an SDR path.

00:07:50.503 --> 00:07:52.539
There may also be times when
you prefer to make use

00:07:52.539 --> 00:07:56.509
of the available EDR headroom by
applying your own tone-mapping.

00:07:56.509 --> 00:07:59.846
In either case, UIScreen
has new query properties

00:07:59.846 --> 00:08:02.615
and notifications you can use
to make rendering decisions

00:08:02.615 --> 00:08:04.484
in your app.

00:08:04.484 --> 00:08:07.554
More specifically,
you can use UIScreen to register

00:08:07.554 --> 00:08:10.757
for notifications about changes
in Reference Mode status

00:08:10.757 --> 00:08:13.960
and then query for changes
in that status.

00:08:13.960 --> 00:08:16.396
You can also use UIScreen
to query the device's current

00:08:16.396 --> 00:08:18.732
and potential EDR
headroom properties.

00:08:18.732 --> 00:08:21.568
I'll talk more about
that a bit later.

00:08:21.568 --> 00:08:24.371
For changes in display mode
status, register for the

00:08:24.371 --> 00:08:30.310
UIScreen.referenceDisplayMode
StatusDidChangeNotification.

00:08:30.310 --> 00:08:32.946
For query purposes,
you can use this notification

00:08:32.946 --> 00:08:35.749
to get the new status and the
new potential EDR headroom,

00:08:35.749 --> 00:08:39.052
both of which may inform
rendering decisions in your app.

00:08:39.052 --> 00:08:40.620
For example,
you might want your app

00:08:40.620 --> 00:08:43.156
to apply its own tone-mapping
based on the EDR headroom

00:08:43.156 --> 00:08:44.958
when Reference Mode is disabled

00:08:44.958 --> 00:08:50.029
and not apply any tone-mapping
if Reference Mode is enabled.

00:08:50.029 --> 00:08:52.065
Once you receive a notification
for a change

00:08:52.065 --> 00:08:53.867
in display mode status,

00:08:53.867 --> 00:08:56.436
you can use the reference
display mode status property

00:08:56.436 --> 00:08:59.205
of UIScreen to get
the current status.

00:08:59.205 --> 00:09:02.041
This will be one of four
enumerated types.

00:09:02.041 --> 00:09:05.345
If StatusEnabled is returned,
then Reference Mode is enabled

00:09:05.345 --> 00:09:07.180
and is rendering as expected.

00:09:07.180 --> 00:09:10.250
If StatusLimited is returned,
then Reference Mode is enabled

00:09:10.250 --> 00:09:13.286
but temporarily can't render
a reference response

00:09:13.286 --> 00:09:16.790
due to EDR headroom being
limited to less than 10 times.

00:09:16.790 --> 00:09:18.258
If this status occurs,

00:09:18.258 --> 00:09:20.927
a UI notification
will also inform your users

00:09:20.927 --> 00:09:23.430
that the reference
rendering is compromised.

00:09:23.430 --> 00:09:25.398
If StatusNotEnabled
is returned,

00:09:25.398 --> 00:09:27.434
then Reference Mode
is supported on this device,

00:09:27.434 --> 00:09:30.537
but it hasn't been
enabled by the user.

00:09:30.537 --> 00:09:33.473
And lastly, if
StatusNotSupported is returned,

00:09:33.473 --> 00:09:37.010
then Reference Mode is
not supported on this device.

00:09:37.010 --> 00:09:39.279
Next, let's take a look
at some Swift code to see

00:09:39.279 --> 00:09:43.416
how you can take advantage
of UIScreen notifications.

00:09:43.416 --> 00:09:46.352
Here, we'll start by getting
a default notification object

00:09:46.352 --> 00:09:48.621
from the NotificationCenter.

00:09:48.621 --> 00:09:50.323
Then, we'll add
a notification observer

00:09:50.323 --> 00:09:52.959
to your default
notification object.

00:09:52.959 --> 00:09:55.728
In this example, the
screenChangedEvent selector

00:09:55.728 --> 00:09:58.431
determines the message that the
receiver sends to the observer

00:09:58.431 --> 00:10:02.302
to alert the observer that
the notification is posted.

00:10:02.302 --> 00:10:03.903
The name of the notification
to register

00:10:03.903 --> 00:10:05.839
for delivery to the observer is

00:10:05.839 --> 00:10:11.911
UIScreen.referenceDisplayMode
StatusDidChangeNotification.

00:10:11.911 --> 00:10:13.880
Now whenever
the status changes,

00:10:13.880 --> 00:10:17.617
the function screenChangedEvent
will be called.

00:10:17.617 --> 00:10:20.687
In this example implementation
of screenChangedEvent,

00:10:20.687 --> 00:10:24.123
we'll first get a UIScreen
from the window scene.

00:10:24.123 --> 00:10:26.626
Then, we can get the new
referenceDisplayModeStatus

00:10:26.626 --> 00:10:29.963
property from the UIScreen.

00:10:29.963 --> 00:10:32.265
You can also get the new
potential EDR headroom value

00:10:32.265 --> 00:10:35.268
and use it in your application's
rendering paths.

00:10:35.268 --> 00:10:38.271
That covers Reference Mode
status-change notifications,

00:10:38.271 --> 00:10:42.709
so let's move on to talking
about EDR headroom.

00:10:42.709 --> 00:10:45.111
Earlier, I mentioned
two types of EDR headroom:

00:10:45.111 --> 00:10:46.546
current and potential.

00:10:46.546 --> 00:10:48.448
These properties are relevant
to any developer

00:10:48.448 --> 00:10:51.851
working with EDR and are not
specific to Reference Mode.

00:10:51.851 --> 00:10:54.020
Potential headroom returns
the maximum possible headroom

00:10:54.020 --> 00:10:55.588
of your display.

00:10:55.588 --> 00:10:58.258
For example, you may decide
to use an SDR rendering path

00:10:58.258 --> 00:11:01.561
in your app if potential
headroom doesn't exceed 1.0

00:11:01.561 --> 00:11:03.730
or some other threshold.

00:11:03.730 --> 00:11:05.565
The current headroom is dynamic
and may be less

00:11:05.565 --> 00:11:08.301
than the potential headroom
for a variety of reasons.

00:11:08.301 --> 00:11:10.236
You may choose to apply
tone-mapping in your app

00:11:10.236 --> 00:11:12.605
so that your content won't
exceed the current headroom,

00:11:12.605 --> 00:11:14.674
which would cause it to clip.

00:11:14.674 --> 00:11:17.610
Let's take a look
at a simple example.

00:11:17.610 --> 00:11:18.778
As in the previous example,

00:11:18.778 --> 00:11:22.215
we'll start by getting
a UIScreen from windowScene.

00:11:22.215 --> 00:11:26.286
From there, we'll get the
potential EDR headroom property.

00:11:26.286 --> 00:11:28.888
Then we can compare
the potential EDR headroom value

00:11:28.888 --> 00:11:31.090
to a threshold and decide
whether to implement

00:11:31.090 --> 00:11:34.661
an SDR rendering path
or image processing path.

00:11:34.661 --> 00:11:37.330
Here is an example of how
to use the current EDR headroom

00:11:37.330 --> 00:11:39.165
property of UIScreen.

00:11:39.165 --> 00:11:43.169
In a draw call, we can again
get a UIScreen from windowScene

00:11:43.169 --> 00:11:47.173
and then grab the UIScreen
property currentEDRHeadroom.

00:11:47.173 --> 00:11:48.341
You could use this value

00:11:48.341 --> 00:11:49.876
to determine
an appropriate tone map

00:11:49.876 --> 00:11:53.479
that will avoid clipping
and apply it in your app.

00:11:53.479 --> 00:11:55.582
Now that I've covered
UIScreen APIs

00:11:55.582 --> 00:11:57.050
and reviewed some code snippets,

00:11:57.050 --> 00:11:59.385
we've reached the end
of this video.

00:11:59.385 --> 00:12:01.487
To recap, we learned
how and when

00:12:01.487 --> 00:12:05.058
to enable Reference Mode
on iPad.

00:12:05.058 --> 00:12:06.693
We discussed
reference color rendering

00:12:06.693 --> 00:12:08.761
and the specific capabilities
of Reference Mode,

00:12:08.761 --> 00:12:12.098
including which media formats
it supports.

00:12:12.098 --> 00:12:13.366
And finally,
we learned about

00:12:13.366 --> 00:12:15.501
UIScreen Reference Mode
notifications

00:12:15.501 --> 00:12:18.972
and new properties
for querying EDR headroom.

00:12:18.972 --> 00:12:21.541
If you want to learn more about
EDR and color technology

00:12:21.541 --> 00:12:23.843
on Apple platforms,
here's a list of videos

00:12:23.843 --> 00:12:28.181
on related topics
from the last few WWDCs.

00:12:28.181 --> 00:12:30.917
The "Explore EDR on iOS"
video from this year

00:12:30.917 --> 00:12:33.586
is especially relevant if
you're working with EDR on iPad,

00:12:33.586 --> 00:12:37.290
either with or without
Reference Mode.

00:12:37.290 --> 00:12:40.293
And that brings us
to the end of our talk.

00:12:40.293 --> 00:12:42.061
I hope that you'll take
advantage of Reference Mode

00:12:42.061 --> 00:12:44.063
and its APIs in your app.

00:12:44.063 --> 00:12:45.131
Thanks for watching.