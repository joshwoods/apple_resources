WEBVTT

00:00:00.701 --> 00:00:02.603
Hi, I'm Johannes Fortmann

00:00:02.603 --> 00:00:05.172
from the Cloud FileProvider
team.

00:00:05.172 --> 00:00:09.209
Today we will talk about how
to use the new FileProvider API

00:00:09.209 --> 00:00:15.048
introduced in iOS 16 to bring
desktop class sync to iOS.

00:00:15.048 --> 00:00:18.051
After the introduction,
we'll do a quick recap

00:00:18.051 --> 00:00:21.221
of the aims of a file provider.

00:00:21.221 --> 00:00:23.257
We will discuss
the optimal approach

00:00:23.257 --> 00:00:26.393
for architecting your app,
as well as best practices

00:00:26.393 --> 00:00:29.596
that become especially
important on iOS.

00:00:29.596 --> 00:00:34.868
Last, I'll show you a quick demo
of a provider running on iOS.

00:00:34.868 --> 00:00:37.537
Big Sur introduced
a declarative API

00:00:37.537 --> 00:00:39.806
for syncing files to your Mac.

00:00:39.806 --> 00:00:42.242
This API has been adopted
by many cloud vendors

00:00:42.242 --> 00:00:43.977
to great success.

00:00:43.977 --> 00:00:47.347
My team has been steadily
working on improving the API,

00:00:47.347 --> 00:00:51.885
and we're excited to also
make it available on iOS 16.

00:00:51.885 --> 00:00:55.722
This API will enable your iOS
apps to provide what we call

00:00:55.722 --> 00:00:58.659
"desktop class sync."

00:00:58.659 --> 00:01:01.395
What do I mean by that?

00:01:01.395 --> 00:01:04.097
As apps on iOS
get more powerful,

00:01:04.097 --> 00:01:05.532
it becomes important for them

00:01:05.532 --> 00:01:09.970
to be able to access a shared
location on the file system.

00:01:09.970 --> 00:01:12.940
People want these powerful apps
to be able to access

00:01:12.940 --> 00:01:16.009
all types of file system
objects.

00:01:16.009 --> 00:01:19.279
If they choose, their app should
be able to access folders

00:01:19.279 --> 00:01:21.748
and create new files.

00:01:21.748 --> 00:01:26.353
We want all of this to happen
while guaranteeing consistency.

00:01:26.353 --> 00:01:28.989
What does consistency mean?

00:01:28.989 --> 00:01:32.459
On iOS, background runtime
has historically been limited

00:01:32.459 --> 00:01:34.494
because of power concerns.

00:01:34.494 --> 00:01:35.662
At the same time,

00:01:35.662 --> 00:01:39.900
changes are expected to be
uploaded in the background.

00:01:39.900 --> 00:01:42.502
The modern FileProvider API
was introduced

00:01:42.502 --> 00:01:45.272
to solve this problem.

00:01:45.272 --> 00:01:48.809
At a basic level,
you implement an app extension

00:01:48.809 --> 00:01:52.145
that is responsible
for enumerating items,

00:01:52.145 --> 00:01:55.182
fetching and uploading contents,

00:01:55.182 --> 00:01:59.953
and updating the list of items
if they change remotely.

00:01:59.953 --> 00:02:03.023
The system is responsible
for exposing the information

00:02:03.023 --> 00:02:07.761
you provide and
for maintaining consistency.

00:02:07.761 --> 00:02:09.663
An important task of the system

00:02:09.663 --> 00:02:14.434
is to keep track of errors
and retry if necessary.

00:02:14.434 --> 00:02:17.371
For some operations,
such as fetching contents,

00:02:17.371 --> 00:02:19.506
retries come naturally.

00:02:19.506 --> 00:02:22.476
The user is actively waiting
for their download

00:02:22.476 --> 00:02:26.113
and probably monitoring
the progress bar closely.

00:02:26.113 --> 00:02:29.583
Uploads, on the other hand,
require scheduling.

00:02:29.583 --> 00:02:31.818
By tracking the state
of the items on disk,

00:02:31.818 --> 00:02:36.723
the system ensures that the
updated contents get uploaded.

00:02:36.723 --> 00:02:39.159
Progress and errors are tracked

00:02:39.159 --> 00:02:41.962
to retry the upload
if necessary.

00:02:41.962 --> 00:02:45.832
Another complex topic
is consistency during uploads.

00:02:45.832 --> 00:02:48.969
The system manages clones
of the file contents

00:02:48.969 --> 00:02:52.873
to ensure that during an upload
subsequent accesses to the file

00:02:52.873 --> 00:02:57.978
succeed and show
the correct data.

00:02:57.978 --> 00:03:01.214
During these operations,
the system also ensures

00:03:01.214 --> 00:03:03.984
that the local version
stays consistent,

00:03:03.984 --> 00:03:06.520
even with multiple apps
accessing it,

00:03:06.520 --> 00:03:10.657
and that includes sync downs
from the remote server.

00:03:10.657 --> 00:03:12.859
This is implemented
transparently to you

00:03:12.859 --> 00:03:18.632
using APFS features
and file coordination.

00:03:18.632 --> 00:03:24.004
Storage limits are an important
constraint on mobile devices.

00:03:24.004 --> 00:03:26.173
The system uses an APFS feature

00:03:26.173 --> 00:03:31.044
to atomically track
the change state of local files.

00:03:31.044 --> 00:03:33.880
This allows it
to transparently evict files

00:03:33.880 --> 00:03:37.517
that don't have local changes
based on disk usage

00:03:37.517 --> 00:03:40.387
and least recently used status.

00:03:40.387 --> 00:03:43.457
Files that are fully uploaded
do not count against your app

00:03:43.457 --> 00:03:47.994
in the Storage Management pane
in Settings.

00:03:47.994 --> 00:03:50.097
You may have noticed
that so far

00:03:50.097 --> 00:03:53.266
we have talked about the system
and the extension.

00:03:53.266 --> 00:03:56.069
Let's talk about
where your app comes in.

00:03:56.069 --> 00:04:00.140
I recommend that you employ
a strict separation of concerns.

00:04:00.140 --> 00:04:04.244
The system is responsible for
managing the structures on-disk

00:04:04.244 --> 00:04:07.280
and scheduling tasks.

00:04:07.280 --> 00:04:10.884
Your extension is responsible
for performing those tasks

00:04:10.884 --> 00:04:12.853
to sync up and down.

00:04:12.853 --> 00:04:15.856
The system tracks all state
about the file hierarchy

00:04:15.856 --> 00:04:18.959
and which parts require sync.

00:04:18.959 --> 00:04:22.329
That means that your extension
can be very lightweight.

00:04:22.329 --> 00:04:26.500
It does not have to track
any item-specific state at all.

00:04:26.500 --> 00:04:30.837
Your application is not
responsible for any syncing.

00:04:30.837 --> 00:04:35.475
Ideally, it doesn't have
to talk to the server at all.

00:04:35.475 --> 00:04:38.078
Instead, it interacts
with your extension

00:04:38.078 --> 00:04:41.114
through two mechanisms.

00:04:41.114 --> 00:04:44.017
It can interact
with the extension indirectly,

00:04:44.017 --> 00:04:47.754
the same way that any other
application on the system does.

00:04:47.754 --> 00:04:51.424
There is API to fetch the file
URL of any managed item,

00:04:51.424 --> 00:04:53.727
including the root.

00:04:53.727 --> 00:04:55.428
These locations
are then accessible

00:04:55.428 --> 00:05:00.200
using the regular
file system APIs.

00:05:00.200 --> 00:05:03.103
Alternatively, your app
can request a direct

00:05:03.103 --> 00:05:06.273
XPC service connection
to your extension.

00:05:06.273 --> 00:05:09.142
This is particularly useful
to handle tasks

00:05:09.142 --> 00:05:12.612
that cannot be expressed
as file system manipulations,

00:05:12.612 --> 00:05:17.150
such as sharing files
or resolving conflicts.

00:05:17.150 --> 00:05:19.386
Both of these mechanisms
can also be used

00:05:19.386 --> 00:05:22.856
by FileProvider UI extensions
to provide an additional

00:05:22.856 --> 00:05:26.760
integration point
in the Files app.

00:05:26.760 --> 00:05:28.929
I would like to touch
on three points

00:05:28.929 --> 00:05:32.999
that become especially important
with stateless providers.

00:05:32.999 --> 00:05:35.335
First, let's talk about uploads.

00:05:35.335 --> 00:05:36.603
As I mentioned earlier,

00:05:36.603 --> 00:05:38.605
the system keeps track
of uploads

00:05:38.605 --> 00:05:42.075
and will grant your extension
time to perform the upload.

00:05:42.075 --> 00:05:44.578
An important consequence
of this is that you must

00:05:44.578 --> 00:05:48.682
keep the system aware that your
upload is actually progressing

00:05:48.682 --> 00:05:50.817
by reporting progress.

00:05:50.817 --> 00:05:54.988
If an upload task doesn't
progress, it will be cancelled.

00:05:54.988 --> 00:05:57.357
The system provides
a grace period to wind down

00:05:57.357 --> 00:06:01.027
the upload cleanly, but if
the cancellation takes too long

00:06:01.027 --> 00:06:03.730
your extension
will be terminated.

00:06:03.730 --> 00:06:05.865
Let's check out the code.

00:06:05.865 --> 00:06:08.168
To implement
a cancellation handler,

00:06:08.168 --> 00:06:10.203
simply set it
on the progress return

00:06:10.203 --> 00:06:12.606
from the task-specific method.

00:06:12.606 --> 00:06:16.376
In case of uploads,
that's modifyItem.

00:06:16.376 --> 00:06:17.744
In your handler,

00:06:17.744 --> 00:06:22.182
you cancel the actual
upload work you were performing.

00:06:22.182 --> 00:06:25.352
Of course, you'll also need
to call the completion handler

00:06:25.352 --> 00:06:27.921
to signal that
a cancellation error occurred.

00:06:27.921 --> 00:06:31.291
The code example here uses
an async task cancellation

00:06:31.291 --> 00:06:32.959
to make this convenient,

00:06:32.959 --> 00:06:37.797
but you could also call
the completion handler manually.

00:06:37.797 --> 00:06:40.400
Next up, let's talk about
the sync down path.

00:06:40.400 --> 00:06:42.502
When the user interacts
with their files,

00:06:42.502 --> 00:06:44.271
your main app
will not be running

00:06:44.271 --> 00:06:47.073
to receive changes
from your server.

00:06:47.073 --> 00:06:49.476
To still inform the system
about remote changes,

00:06:49.476 --> 00:06:52.979
you should implement
push notifications.

00:06:52.979 --> 00:06:55.348
PushKit exposes
a specific push type

00:06:55.348 --> 00:06:57.217
for file providers.

00:06:57.217 --> 00:06:58.752
You can register
for these pushes

00:06:58.752 --> 00:07:01.154
right from your extension.

00:07:01.154 --> 00:07:05.091
On your server, you send pushes
with a well-defined payload.

00:07:05.091 --> 00:07:07.060
The system will receive the push

00:07:07.060 --> 00:07:09.996
and refresh the current state
if appropriate.

00:07:09.996 --> 00:07:11.965
As with the other types
of tasks,

00:07:11.965 --> 00:07:14.467
the system may delay
the actual refresh

00:07:14.467 --> 00:07:17.470
depending on the situation,
like battery state

00:07:17.470 --> 00:07:22.709
or whether the user is currently
looking at their files.

00:07:22.709 --> 00:07:24.244
This last thing
is just something

00:07:24.244 --> 00:07:26.346
I would like to call
your attention to:

00:07:26.346 --> 00:07:28.214
the system manages
the folder hierarchy

00:07:28.214 --> 00:07:30.283
that your extension reports.

00:07:30.283 --> 00:07:33.219
This allows it to vend
the entire folder hierarchy.

00:07:33.219 --> 00:07:36.189
Your extension doesn't have
to do anything extra here.

00:07:36.189 --> 00:07:40.327
This is enabled by default
for modern file providers.

00:07:40.327 --> 00:07:43.129
Let's have a quick demonstration
of what kind of workflows

00:07:43.129 --> 00:07:45.532
that last feature enables.

00:07:45.532 --> 00:07:48.568
I've set up my device
with this session's sample code.

00:07:48.568 --> 00:07:51.271
We have ported
our sample code to iOS.

00:07:51.271 --> 00:07:54.607
We built an iOS app to handle
logging into our server

00:07:54.607 --> 00:07:56.276
but the extension
is mostly unchanged

00:07:56.276 --> 00:07:58.311
from the macOS version.

00:07:58.311 --> 00:08:01.281
I'm running the sample code
on my iPad right now.

00:08:01.281 --> 00:08:03.750
I've got Files running
on the right side

00:08:03.750 --> 00:08:06.052
and it's already
synced my files.

00:08:06.052 --> 00:08:07.220
I've also written an app

00:08:07.220 --> 00:08:09.589
that takes advantage
of folder selection.

00:08:09.589 --> 00:08:13.159
My app applies a sepia filter
to all images in a folder.

00:08:13.159 --> 00:08:15.962
This type of application
benefits from folder access

00:08:15.962 --> 00:08:18.798
because it can operate
on all items in the folder

00:08:18.798 --> 00:08:22.102
without forcing an interaction
for each individual item.

00:08:22.102 --> 00:08:24.003
With desktop class sync,

00:08:24.003 --> 00:08:26.873
I can simply drag a folder
from the Files app

00:08:26.873 --> 00:08:29.476
into my batch editor.

00:08:29.476 --> 00:08:31.478
Let me pull up
the folder and files

00:08:31.478 --> 00:08:35.248
so that we can
monitor the progress.

00:08:35.248 --> 00:08:36.816
I then push the button

00:08:36.816 --> 00:08:40.787
and all my photos
get downloaded and modified.

00:08:40.787 --> 00:08:45.225
After modification,
they are automatically uploaded.

00:08:45.225 --> 00:08:47.927
The upload progress
reported by the extension

00:08:47.927 --> 00:08:50.730
is surfaced to the user
at the bottom of the Files app

00:08:50.730 --> 00:08:53.767
to keep them in the loop.

00:08:53.767 --> 00:08:57.370
Let's say I wanted to implement
something like this with my app.

00:08:57.370 --> 00:09:00.874
First, let's implement
dragging an item.

00:09:00.874 --> 00:09:02.675
To allow initiating a drag,

00:09:02.675 --> 00:09:04.978
you implement
the onDrag method.

00:09:04.978 --> 00:09:07.881
The method will return
an NSItemProvider.

00:09:07.881 --> 00:09:10.049
You register
a file representation

00:09:10.049 --> 00:09:12.552
on the itemProvider
with the type of file

00:09:12.552 --> 00:09:14.320
you will be dragging.

00:09:14.320 --> 00:09:17.724
In our case, that's a folder.

00:09:17.724 --> 00:09:23.696
Use the getUserVisibleURL method
to fetch the URL.

00:09:23.696 --> 00:09:26.800
On the receiving side,
implement onDrop

00:09:26.800 --> 00:09:30.236
to mark a view
as the drop target.

00:09:30.236 --> 00:09:32.005
You can then load the file URL

00:09:32.005 --> 00:09:35.842
from the appropriate
item provider.

00:09:35.842 --> 00:09:37.644
Note that this
is going to be a file

00:09:37.644 --> 00:09:40.180
that lives outside your sandbox.

00:09:40.180 --> 00:09:43.316
For your app to access it,
it will have to consume

00:09:43.316 --> 00:09:47.787
and release the security scope
of the URL.

00:09:47.787 --> 00:09:49.923
What are your next steps?

00:09:49.923 --> 00:09:54.294
We've updated the sample code
to include an iOS app.

00:09:54.294 --> 00:09:57.130
Download it and experiment
with setting up

00:09:57.130 --> 00:09:59.432
a simple stateless provider.

00:09:59.432 --> 00:10:01.468
If you're starting from scratch,

00:10:01.468 --> 00:10:04.337
be sure to use the updated
Xcode template.

00:10:04.337 --> 00:10:07.941
It includes a basic frame
to get you started.

00:10:07.941 --> 00:10:09.676
To learn more
about file providers

00:10:09.676 --> 00:10:11.945
and how to implement them,
refer to

00:10:11.945 --> 00:10:15.648
"Sync files to the cloud
with FileProvider on macOS"

00:10:15.648 --> 00:10:19.152
from WWDC21.

00:10:19.152 --> 00:10:20.820
Thank you for watching.

00:10:20.820 --> 00:10:22.455
I'm excited to use
your performant

00:10:22.455 --> 00:10:25.091
and reliable providers
on iOS devices.