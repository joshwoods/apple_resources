WEBVTT

00:00:03.003 --> 00:00:05.806
Hello. My name's Katie,
and welcome to this session

00:00:05.806 --> 00:00:08.675
on implementing Apple Pay
and order tracking.

00:00:08.675 --> 00:00:10.544
Let's look at
the agenda for today.

00:00:10.544 --> 00:00:12.512
First, I will take you through
the basics needed

00:00:12.512 --> 00:00:14.414
to get started with Apple Pay.

00:00:14.414 --> 00:00:17.017
Then I will show you
how to create a payment request

00:00:17.017 --> 00:00:19.019
and respond to changes
in the payment sheet.

00:00:19.019 --> 00:00:21.822
You can also add order details
at the end of the payment flow

00:00:21.822 --> 00:00:23.557
so the user can
track their order.

00:00:23.557 --> 00:00:25.092
The order details
will enable Wallet

00:00:25.092 --> 00:00:26.693
to retrieve an ordered package,

00:00:26.693 --> 00:00:28.595
which I will show you
how to build.

00:00:28.595 --> 00:00:31.265
Finally, I will show you
how to update your order.

00:00:31.265 --> 00:00:33.433
So let's get started.

00:00:33.433 --> 00:00:36.203
Apple Pay is the easy, secure,
and private way to pay.

00:00:36.203 --> 00:00:38.205
If you're a developer
of a website or app,

00:00:38.205 --> 00:00:40.374
you can use Apple Pay
to improve your conversion

00:00:40.374 --> 00:00:42.009
and user experience.

00:00:42.009 --> 00:00:44.912
There are two essential items
to create to get started.

00:00:44.912 --> 00:00:47.915
The first is an identifier
which uniquely identifies you

00:00:47.915 --> 00:00:50.350
as a merchant able
to accept payments.

00:00:50.350 --> 00:00:52.552
To create one, you should head
to the identifier section

00:00:52.552 --> 00:00:54.288
of the Apple Developer portal.

00:00:54.288 --> 00:00:56.757
The conventional format
is in reverse DNS,

00:00:56.757 --> 00:00:58.592
beginning with
the word "merchant."

00:00:58.592 --> 00:01:00.327
Use your spiffy
new merchant identifier

00:01:00.327 --> 00:01:02.896
to create a payment
processing certificate.

00:01:02.896 --> 00:01:05.966
Put very succinctly,
Apple Pay encrypts each payload

00:01:05.966 --> 00:01:07.834
with your registered
merchant identifier

00:01:07.834 --> 00:01:09.536
and public certificate.

00:01:09.536 --> 00:01:11.238
This payload can then
be decrypted

00:01:11.238 --> 00:01:13.106
and processed on your end.

00:01:13.106 --> 00:01:16.009
You can then return whether
the payment succeeded or failed.

00:01:16.009 --> 00:01:17.678
Talk to your payment
service provider

00:01:17.678 --> 00:01:19.913
for the specifics
on processing the payment.

00:01:19.913 --> 00:01:22.282
There are different steps
to setting up Apple Pay

00:01:22.282 --> 00:01:24.017
between apps and websites.

00:01:24.017 --> 00:01:26.053
To set up Apple Pay
for use in your app,

00:01:26.053 --> 00:01:29.256
simply navigate to the Signing
& Capabilities tab in Xcode

00:01:29.256 --> 00:01:32.793
and add your merchant identifier
under the Apple Pay capability.

00:01:32.793 --> 00:01:35.429
If you're building a website and
want to set up Apple Pay there,

00:01:35.429 --> 00:01:37.331
there are some
additional steps required.

00:01:37.331 --> 00:01:39.800
You must register
the domains that will process

00:01:39.800 --> 00:01:41.768
the Apple Pay transaction,
which can be done

00:01:41.768 --> 00:01:44.705
in the identifier section of
the Apple Developer portal.

00:01:44.705 --> 00:01:46.139
While you're there,
you can create

00:01:46.139 --> 00:01:48.442
an Apple Pay Merchant
Identity Certificate

00:01:48.442 --> 00:01:51.311
linked to the merchant
identifier you made earlier.

00:01:51.311 --> 00:01:53.613
This certificate is used
to authenticate your sessions

00:01:53.613 --> 00:01:55.015
to Apple Pay servers.

00:01:55.015 --> 00:01:57.217
Whether you're integrating
an app or on web,

00:01:57.217 --> 00:01:59.186
if you're working with
an e-commerce platform

00:01:59.186 --> 00:02:00.620
or a payment service provider,

00:02:00.620 --> 00:02:02.422
check out their
specific instructions

00:02:02.422 --> 00:02:04.858
as they may simplify
some of these steps.

00:02:04.858 --> 00:02:07.427
Now let's look at how
to actually implement Apple Pay.

00:02:07.427 --> 00:02:09.663
Before displaying
Apple Pay-related content,

00:02:09.663 --> 00:02:10.998
you should check
whether the user

00:02:10.998 --> 00:02:14.234
is able to make payments
with the current configuration.

00:02:14.234 --> 00:02:16.136
Capabilities denote
which types of payments

00:02:16.136 --> 00:02:18.005
the sheet can currently accept,

00:02:18.005 --> 00:02:21.575
such as 3D Secure
or credit or debit cards.

00:02:21.575 --> 00:02:24.011
You will later specify
the capabilities you accept

00:02:24.011 --> 00:02:26.113
when you configure
the payment request.

00:02:26.113 --> 00:02:28.849
You can check for networks
the user already has available,

00:02:28.849 --> 00:02:31.451
keeping in mind that the user
is able to add more cards

00:02:31.451 --> 00:02:33.520
if none are currently available.

00:02:33.520 --> 00:02:35.722
Now that you know your user
can make payments,

00:02:35.722 --> 00:02:38.425
it's time to display
the Apple Pay button.

00:02:38.425 --> 00:02:41.228
Make sure to select the best
call to action and button type

00:02:41.228 --> 00:02:43.864
in alignment with the action
the user needs to take.

00:02:43.864 --> 00:02:46.867
Display the Apple Pay button
prominently, above the fold,

00:02:46.867 --> 00:02:49.302
and as the first payment option.

00:02:49.302 --> 00:02:51.304
The Apple Pay button
is fully localized

00:02:51.304 --> 00:02:53.940
and can also be adapted
for the user's settings.

00:02:53.940 --> 00:02:56.810
To display an Apple Pay button
in your app with the UIKit,

00:02:56.810 --> 00:02:59.446
firstly, create
a PKPaymentButton,

00:02:59.446 --> 00:03:02.149
specifying the type
and style of the button.

00:03:02.149 --> 00:03:05.185
The type describes the kind
of payment; for example,

00:03:05.185 --> 00:03:08.221
Donate with Apple Pay
or Continue with Apple Pay.

00:03:08.221 --> 00:03:10.590
The style controls
the appearance of the button,

00:03:10.590 --> 00:03:12.459
like whether it's light or dark.

00:03:12.459 --> 00:03:14.094
Use the automatic style
for the button

00:03:14.094 --> 00:03:16.997
to dynamically change
based on the user's settings.

00:03:16.997 --> 00:03:20.200
On web, use a JavaScript
Apple Pay button.

00:03:20.200 --> 00:03:22.702
To add one, first,
load the button script

00:03:22.702 --> 00:03:25.672
into your web page on
your content delivery network.

00:03:25.672 --> 00:03:27.908
The JavaScript Apple Pay button
also enables you

00:03:27.908 --> 00:03:31.478
to specify type, style,
and localization.

00:03:31.478 --> 00:03:33.613
You can also use CSS
to further customize

00:03:33.613 --> 00:03:35.215
the button's dimensions.

00:03:35.215 --> 00:03:36.917
We need to create
a payment request

00:03:36.917 --> 00:03:39.186
so that the payment sheet
knows what to expect.

00:03:39.186 --> 00:03:43.290
In apps, we can do that by
creating a PKPaymentRequest.

00:03:43.290 --> 00:03:45.392
There are many fields
that can be set on the request

00:03:45.392 --> 00:03:47.928
depending on your needs,
but the essentials include

00:03:47.928 --> 00:03:50.430
the merchant identifier
you created earlier,

00:03:50.430 --> 00:03:52.632
the types of payments
you can accept,

00:03:52.632 --> 00:03:55.535
the country and currency code
of the payment.

00:03:55.535 --> 00:03:58.138
Specify the networks that
you accept payments from.

00:03:58.138 --> 00:04:00.373
This should be done in order
of preference so Apple Pay

00:04:00.373 --> 00:04:03.810
and choose the preferred network
for cobatched cards.

00:04:03.810 --> 00:04:05.946
Finally, summary items
are included

00:04:05.946 --> 00:04:07.848
as part of this transaction.

00:04:07.848 --> 00:04:10.250
Let's take a closer look
at summary items.

00:04:10.250 --> 00:04:13.687
To do that, we can imagine that
you run an online pet goods shop

00:04:13.687 --> 00:04:14.921
and would like
to offer customers

00:04:14.921 --> 00:04:17.657
the ability to check out
their orders with Apple Pay.

00:04:17.657 --> 00:04:20.193
These summary items consist
of the total cost of the items

00:04:20.193 --> 00:04:23.997
your customer has selected
minus any discounts.

00:04:23.997 --> 00:04:26.766
They should help to break
down the cost to a customer.

00:04:26.766 --> 00:04:29.202
The last summary item
is always the total,

00:04:29.202 --> 00:04:31.071
and the label for this total
must be the company

00:04:31.071 --> 00:04:32.572
receiving the payment.

00:04:32.572 --> 00:04:34.674
It is required that there
should be at least one item

00:04:34.674 --> 00:04:36.610
set in the array here.

00:04:36.610 --> 00:04:39.579
Now, we're ready to display
the payment sheet.

00:04:39.579 --> 00:04:43.450
First, we create a PKPayment
AuthorizationViewController,

00:04:43.450 --> 00:04:46.486
sending in the request
we set up moments ago.

00:04:46.486 --> 00:04:48.388
You are in charge
of presenting viewController

00:04:48.388 --> 00:04:50.457
that is returned to you.

00:04:50.457 --> 00:04:53.727
Now, let's have a look at
this delegate we're setting.

00:04:53.727 --> 00:04:56.296
The PKPaymentAuthorization
ViewControllerDelegate

00:04:56.296 --> 00:04:58.532
is how the sheet
communicates changes to you,

00:04:58.532 --> 00:05:01.368
such as when the user
selects a new email address

00:05:01.368 --> 00:05:03.637
or when they authorize
the transaction.

00:05:03.637 --> 00:05:04.738
You should respond
to the changes

00:05:04.738 --> 00:05:06.673
that are appropriate to you;

00:05:06.673 --> 00:05:09.109
however, you are always
responsible for dismissing

00:05:09.109 --> 00:05:11.011
a payment sheet
and should implement

00:05:11.011 --> 00:05:14.781
paymentAuthorizationViewControll
erDidFinish to handle this.

00:05:14.781 --> 00:05:17.017
You should always try
to return errors to the user

00:05:17.017 --> 00:05:19.152
as early as possible
with a helpful description

00:05:19.152 --> 00:05:21.254
to help them resolve the issue.

00:05:21.254 --> 00:05:23.156
For example,
if there is a problem

00:05:23.156 --> 00:05:24.958
with the user's new
shipping address,

00:05:24.958 --> 00:05:26.459
you should return
an error as part

00:05:26.459 --> 00:05:29.763
of the PKPaymentRequest
ShippingContactUpdate.

00:05:29.763 --> 00:05:31.865
didAuthorizePayment is called
when the user is happy

00:05:31.865 --> 00:05:34.768
with the details
and uses Face ID, Touch ID,

00:05:34.768 --> 00:05:37.604
or their passcode to proceed
with the transaction.

00:05:37.604 --> 00:05:39.773
You need to handle
the PKPayment sent to you

00:05:39.773 --> 00:05:43.910
either yourself or by passing it
onto a payment processor.

00:05:43.910 --> 00:05:47.013
You must call the handler
with an appropriate result.

00:05:47.013 --> 00:05:49.316
In iOS 16,
we introduced the ability

00:05:49.316 --> 00:05:52.185
to easily create an Apple Pay
button in SwiftUI.

00:05:52.185 --> 00:05:54.588
All you need to do is pass
in the payment request

00:05:54.588 --> 00:05:56.790
when creating a
Pay with Apple Pay button

00:05:56.790 --> 00:05:58.792
and the payment sheet
will display automatically

00:05:58.792 --> 00:06:01.061
when the user interacts
with the button.

00:06:01.061 --> 00:06:03.196
The type of the button,
and optionally,

00:06:03.196 --> 00:06:05.665
the style can also be set.

00:06:05.665 --> 00:06:07.701
The payment authorization
change is analogous

00:06:07.701 --> 00:06:10.737
to the delegate we looked at
on the previous slide.

00:06:10.737 --> 00:06:13.707
Let's look at how to respond
to user updates.

00:06:13.707 --> 00:06:15.742
The user has just
authorized a payment

00:06:15.742 --> 00:06:17.911
and the payment authorization
phase change

00:06:17.911 --> 00:06:19.813
informs your app of this

00:06:19.813 --> 00:06:22.916
Your app then sends the payment
information to your server

00:06:22.916 --> 00:06:25.185
and asks it to handle
the payment.

00:06:25.185 --> 00:06:27.354
Check whether the server result
indicates success

00:06:27.354 --> 00:06:30.123
and handle any error
returned by your server,

00:06:30.123 --> 00:06:32.092
ensuring you still call
the result handler

00:06:32.092 --> 00:06:33.960
with an appropriate error.

00:06:33.960 --> 00:06:36.229
If the server result
does indicate success,

00:06:36.229 --> 00:06:37.297
complete the payment

00:06:37.297 --> 00:06:39.699
with an appropriate
authorization result.

00:06:39.699 --> 00:06:41.868
The result you return must
contain what happened

00:06:41.868 --> 00:06:43.670
when attempting
to process the payment;

00:06:43.670 --> 00:06:46.673
for example, if the postal
address is invalid.

00:06:46.673 --> 00:06:50.310
In most cases, the payment will
have either succeeded or failed.

00:06:50.310 --> 00:06:53.113
If the payment did fail,
you can also return

00:06:53.113 --> 00:06:55.382
one or more errors
ordered by importance.

00:06:55.382 --> 00:06:56.783
That will be displayed
to the user

00:06:56.783 --> 00:06:58.785
so they can try
to transact again.

00:06:58.785 --> 00:07:00.854
This authorization result
can optionally contain

00:07:00.854 --> 00:07:03.823
order details,
which we will look into shortly.

00:07:03.823 --> 00:07:06.559
Now let's have a look at
how to do this on the web.

00:07:06.559 --> 00:07:09.496
The W3C payment request API
is an open standard

00:07:09.496 --> 00:07:11.765
that enables you to handle
payments on the web.

00:07:11.765 --> 00:07:14.567
You can create
the PaymentRequest object

00:07:14.567 --> 00:07:16.936
and populate it with methods
where you can specify

00:07:16.936 --> 00:07:20.407
that Apple Pay is available;
details which contains

00:07:20.407 --> 00:07:22.175
information about
the transaction,

00:07:22.175 --> 00:07:24.110
like the total
and the shipping methods;

00:07:24.110 --> 00:07:27.180
and options which specifies
what information

00:07:27.180 --> 00:07:29.349
you want the user to provide.

00:07:29.349 --> 00:07:31.951
You'll have to complete merchant
validation on your server,

00:07:31.951 --> 00:07:33.853
so create a new merchant session

00:07:33.853 --> 00:07:35.722
and pass it into
the complete function.

00:07:35.722 --> 00:07:37.590
Just like native, you can
respond to interactions

00:07:37.590 --> 00:07:39.159
the user makes
in the payment sheet

00:07:39.159 --> 00:07:41.094
and you'll also need to handle
the payment response

00:07:41.094 --> 00:07:43.096
when the user authenticates.

00:07:43.096 --> 00:07:45.098
Now that you're all
integrated with Apple Pay,

00:07:45.098 --> 00:07:47.233
we can start actually
building an order.

00:07:47.233 --> 00:07:50.103
In iOS 16, we introduced
order tracking.

00:07:50.103 --> 00:07:52.472
Your customers can now
see order details

00:07:52.472 --> 00:07:55.942
and tracking information,
all from within the Wallet app.

00:07:55.942 --> 00:07:57.477
They'll be able
to know instantly

00:07:57.477 --> 00:07:58.978
when they can pick up
their orders,

00:07:58.978 --> 00:08:00.814
if the orders
have been delivered,

00:08:00.814 --> 00:08:02.482
if there have been
any problems,

00:08:02.482 --> 00:08:04.417
or received notifications.

00:08:04.417 --> 00:08:06.086
So now that you've
successfully integrated

00:08:06.086 --> 00:08:07.987
your pet shop business
with Apple Pay,

00:08:07.987 --> 00:08:10.557
you may also like
to add order tracking.

00:08:10.557 --> 00:08:12.292
Let's see how.

00:08:12.292 --> 00:08:13.760
You'll notice that getting
started with orders

00:08:13.760 --> 00:08:16.663
is similar to setting up
Apple Pay.

00:08:16.663 --> 00:08:18.331
Head back over
to the Identifiers section

00:08:18.331 --> 00:08:19.799
of the Developer portal

00:08:19.799 --> 00:08:23.203
and create
an order type identifier.

00:08:23.203 --> 00:08:25.038
This identifies
your organization

00:08:25.038 --> 00:08:28.341
as an entity that provides
order information.

00:08:28.341 --> 00:08:30.276
Like with
the merchant identifier,

00:08:30.276 --> 00:08:33.980
we recommend using a similar
reverse DNS-style naming scheme,

00:08:33.980 --> 00:08:36.683
this time prepending
the word "order."

00:08:36.683 --> 00:08:39.586
Next, create
an Order Type ID certificate

00:08:39.586 --> 00:08:42.155
from the certificate section
of the developer portal.

00:08:42.155 --> 00:08:44.958
You will use a Certificate
to build order packages,

00:08:44.958 --> 00:08:48.361
update orders,
and send notifications.

00:08:48.361 --> 00:08:51.364
Now that we've got that set up,
we can add an order to Wallet

00:08:51.364 --> 00:08:54.134
from right within
the Apple Pay purchasing flow.

00:08:54.134 --> 00:08:56.035
To do that,
let's take a look back

00:08:56.035 --> 00:08:57.771
at our simple
payment processing flow

00:08:57.771 --> 00:09:00.073
you should recognize
from earlier.

00:09:00.073 --> 00:09:02.175
We already know your server
is sent payment information

00:09:02.175 --> 00:09:03.777
for processing.

00:09:03.777 --> 00:09:05.812
If the payment is
successfully processed,

00:09:05.812 --> 00:09:08.214
your server should
create an order.

00:09:08.214 --> 00:09:10.717
To support order tracking
in the result you return,

00:09:10.717 --> 00:09:12.118
you should also include
some details

00:09:12.118 --> 00:09:14.387
about the order you created.

00:09:14.387 --> 00:09:16.055
These order details
enable the device

00:09:16.055 --> 00:09:19.225
to asynchronously request
the order from your server.

00:09:19.225 --> 00:09:21.861
Your server then turns
the order package to the device,

00:09:21.861 --> 00:09:23.897
which will then
be displayed in Wallet.

00:09:23.897 --> 00:09:25.732
For now,
let's take a closer look

00:09:25.732 --> 00:09:27.400
at the order details
you'll need to return

00:09:27.400 --> 00:09:30.770
as part of the PKPayment
authorization result.

00:09:30.770 --> 00:09:33.807
The order details is
comprised of four fields.

00:09:33.807 --> 00:09:35.141
The order type identifier

00:09:35.141 --> 00:09:37.877
is simply the one
you created earlier.

00:09:37.877 --> 00:09:40.280
You should generate a way
to identify your order,

00:09:40.280 --> 00:09:41.948
but it must be unique
within the scope

00:09:41.948 --> 00:09:43.983
of your order type identifier.

00:09:43.983 --> 00:09:47.287
Include the URL
for your web service.

00:09:47.287 --> 00:09:49.189
Finally, your server needs
to generate

00:09:49.189 --> 00:09:51.391
a secure authentication token.

00:09:51.391 --> 00:09:53.393
This is a shared secret
between the user's devices

00:09:53.393 --> 00:09:54.961
and your server.

00:09:54.961 --> 00:09:57.597
The device will use this token
to authenticate itself

00:09:57.597 --> 00:10:00.066
when requesting
the order package.

00:10:00.066 --> 00:10:01.935
This example initially
looks very similar

00:10:01.935 --> 00:10:03.736
to the normal payment
authorization flow

00:10:03.736 --> 00:10:05.171
we saw earlier.

00:10:05.171 --> 00:10:07.440
Let's add the order details in.

00:10:07.440 --> 00:10:10.343
First, grab them
from the serverResult,

00:10:10.343 --> 00:10:13.346
then create a
PKPaymentOrderDetails object,

00:10:13.346 --> 00:10:17.083
setting the Order Type ID,
order ID, web service URL,

00:10:17.083 --> 00:10:19.085
and the authentication token.

00:10:19.085 --> 00:10:23.389
Assign this to your PKPayment
authorization result.

00:10:23.389 --> 00:10:25.892
On the web, it's also simple
to add your order details

00:10:25.892 --> 00:10:29.128
using the W3C
Payment Request API.

00:10:29.128 --> 00:10:33.633
Like before, extract the order
details from the server result.

00:10:33.633 --> 00:10:34.934
Return these order details

00:10:34.934 --> 00:10:38.004
and the data you complete
the payment with.

00:10:38.004 --> 00:10:40.507
After the order details have
been returned the device,

00:10:40.507 --> 00:10:41.641
those details will be synched

00:10:41.641 --> 00:10:44.210
across each
of the user's devices.

00:10:44.210 --> 00:10:47.046
Each device will request the
order package from your server,

00:10:47.046 --> 00:10:49.215
providing the order details.

00:10:49.215 --> 00:10:51.384
Verify the authentication token
by matching it

00:10:51.384 --> 00:10:54.220
to the one you sent
with the order details.

00:10:54.220 --> 00:10:56.489
Provided the authentication
token matches,

00:10:56.489 --> 00:10:59.692
return the order package
to the device.

00:10:59.692 --> 00:11:01.628
Now the order is ready
to display in Wallet

00:11:01.628 --> 00:11:03.763
for that device.

00:11:03.763 --> 00:11:06.599
You should attempt to repair
your order as soon as possible

00:11:06.599 --> 00:11:09.769
so that it's available as soon
as the device requests it.

00:11:09.769 --> 00:11:12.071
If your server fails
to return the order,

00:11:12.071 --> 00:11:14.140
the device will attempt
multiple retries

00:11:14.140 --> 00:11:16.509
with an exponential backoff.

00:11:16.509 --> 00:11:19.679
We've seen this order package
referenced many times now,

00:11:19.679 --> 00:11:22.215
but what exactly
is it comprised of?

00:11:22.215 --> 00:11:25.018
Orders are distributed
as order packages.

00:11:25.018 --> 00:11:27.220
They contain everything needed
to display your order

00:11:27.220 --> 00:11:29.689
to the user
and prove it's from you.

00:11:29.689 --> 00:11:31.958
An order package contains
a JSON dictionary

00:11:31.958 --> 00:11:35.628
that describes your order,
images like your logo,

00:11:35.628 --> 00:11:38.431
and an inline image
for each item in your order.

00:11:38.431 --> 00:11:40.066
Refer to the
Human Interface Guidelines

00:11:40.066 --> 00:11:43.369
and the referral sources
for guidance on creating images.

00:11:43.369 --> 00:11:47.273
Also include localized resources
like strings files.

00:11:47.273 --> 00:11:49.142
Keep an eye out
for the total order size

00:11:49.142 --> 00:11:51.644
and only include
what's relevant.

00:11:51.644 --> 00:11:54.547
All of this content is described
in another JSON dictionary

00:11:54.547 --> 00:11:56.349
called the "manifest."

00:11:56.349 --> 00:11:58.818
You can think of it
like a table of contents.

00:11:58.818 --> 00:12:02.121
It contains a reference to all
the files in the order package.

00:12:02.121 --> 00:12:04.691
The key for an entry
is the relative file path

00:12:04.691 --> 00:12:08.227
and the value is the files'
SHA256 checksum

00:12:08.227 --> 00:12:11.965
which is a different checksum
to what's used in parses.

00:12:11.965 --> 00:12:13.666
Now what we need to do
is sign the package

00:12:13.666 --> 00:12:15.902
to prove its authenticity.

00:12:15.902 --> 00:12:17.737
The signature verifies
that the order package

00:12:17.737 --> 00:12:19.806
originates from
a trusted source --

00:12:19.806 --> 00:12:20.907
you.

00:12:20.907 --> 00:12:23.176
It is a detached cryptographic
message signature

00:12:23.176 --> 00:12:26.045
of the manifest, same as parses.

00:12:26.045 --> 00:12:27.547
Sign the manifest
with the private key

00:12:27.547 --> 00:12:30.183
associated with
your Order Type ID certificate

00:12:30.183 --> 00:12:32.285
and with the Apple Worldwide
Developer Relations

00:12:32.285 --> 00:12:34.420
Intermediate Certificate,
ensuring you use

00:12:34.420 --> 00:12:36.789
the renewed version
of the certificate.

00:12:36.789 --> 00:12:40.126
To finish building the order,
simply compress the package

00:12:40.126 --> 00:12:42.562
and change
the file extension to order.

00:12:42.562 --> 00:12:45.098
Now it's time
to update your order.

00:12:45.098 --> 00:12:48.201
Order information
often changes over time;

00:12:48.201 --> 00:12:50.503
for example, the order
of pet goodies

00:12:50.503 --> 00:12:53.673
your customer made earlier
is now on its way.

00:12:53.673 --> 00:12:56.209
Supporting automatic updates
enables you to deliver

00:12:56.209 --> 00:12:59.479
this update to your customer
quickly and securely.

00:12:59.479 --> 00:13:02.015
Your customer now has their
pet supplies order in Wallet,

00:13:02.015 --> 00:13:04.417
and the order indicates
support for updates,

00:13:04.417 --> 00:13:07.620
so the device will register
with your web service.

00:13:07.620 --> 00:13:10.790
Later on, the customer's order
is now out for delivery,

00:13:10.790 --> 00:13:13.192
so your server will notify
all registered devices

00:13:13.192 --> 00:13:15.795
using the registration
information.

00:13:15.795 --> 00:13:18.665
When the customer's device
receives the push notification,

00:13:18.665 --> 00:13:21.734
it will now ask for the order
from your server.

00:13:21.734 --> 00:13:23.803
Your server then returns
the updated order package

00:13:23.803 --> 00:13:25.672
to the device.

00:13:25.672 --> 00:13:28.074
Now that we know how
a basic order flow works,

00:13:28.074 --> 00:13:30.143
let's break down the exact steps
you'll need to take

00:13:30.143 --> 00:13:32.478
to support order updates.

00:13:32.478 --> 00:13:36.115
First, indicate that you support
updates for an order.

00:13:36.115 --> 00:13:38.284
It's super easy to tell Wallet
that your order

00:13:38.284 --> 00:13:40.853
supports updates;
you just need to include

00:13:40.853 --> 00:13:43.990
two pieces of information
in the order package.

00:13:43.990 --> 00:13:47.894
In the order.json, add the
webServiceURL you'd like.

00:13:47.894 --> 00:13:51.164
This would be the same one you
provided in the order details.

00:13:51.164 --> 00:13:53.499
Also add an
authenticationToken field,

00:13:53.499 --> 00:13:55.568
which Wallet will use
to prove its authenticity

00:13:55.568 --> 00:13:57.804
when requesting order updates.

00:13:57.804 --> 00:13:59.972
You'll have to manage
when devices ask to add

00:13:59.972 --> 00:14:02.475
or remove themselves
from being registered.

00:14:02.475 --> 00:14:04.177
Your server must
be able to handle

00:14:04.177 --> 00:14:07.280
adding or removing
registration information.

00:14:07.280 --> 00:14:09.048
It must be able
to find the devices

00:14:09.048 --> 00:14:11.851
that registered for updates
to an order.

00:14:11.851 --> 00:14:14.053
This enables your server
to notify these devices

00:14:14.053 --> 00:14:15.822
when you update the order.

00:14:15.822 --> 00:14:17.724
Your server must also
be able to find the orders

00:14:17.724 --> 00:14:20.626
that a device registered for
so that your server knows

00:14:20.626 --> 00:14:23.963
which updated orders are
relevant for that device.

00:14:23.963 --> 00:14:24.797
There are different ways

00:14:24.797 --> 00:14:26.833
you could structure
this information.

00:14:26.833 --> 00:14:28.935
One way will be to use
a relational database

00:14:28.935 --> 00:14:30.369
with two entities --

00:14:30.369 --> 00:14:32.805
one for devices
and one for orders --

00:14:32.805 --> 00:14:35.942
and a many-to-many relationship
for registrations.

00:14:35.942 --> 00:14:38.678
When the order is updated,
your server needs to notify

00:14:38.678 --> 00:14:40.446
the registered devices.

00:14:40.446 --> 00:14:43.149
So your server needs to grab
the relevant devices

00:14:43.149 --> 00:14:45.752
based on the stored
registration information,

00:14:45.752 --> 00:14:48.755
then send a push notification
to each device

00:14:48.755 --> 00:14:50.656
using its push token.

00:14:50.656 --> 00:14:52.625
The Order Type ID
doubles as push topic,

00:14:52.625 --> 00:14:54.594
and the payload should be empty.

00:14:54.594 --> 00:14:56.496
You can use
the Order Type ID certificate

00:14:56.496 --> 00:14:59.065
to communicate with APNs.

00:14:59.065 --> 00:15:00.700
One more thing to note
about notifications

00:15:00.700 --> 00:15:03.536
is that the enum property
changeNotifications

00:15:03.536 --> 00:15:05.738
can be set on the order package
to customize

00:15:05.738 --> 00:15:08.574
how you'd like order
notifications to be delivered.

00:15:08.574 --> 00:15:11.444
The options available are
enabled,

00:15:11.444 --> 00:15:13.780
which will always send order
update notifications

00:15:13.780 --> 00:15:16.182
and is the default value.

00:15:16.182 --> 00:15:19.252
If you don't want Wallet
to duplicate your notifications,

00:15:19.252 --> 00:15:22.688
set disableIfAppInstalled which
will not send notifications

00:15:22.688 --> 00:15:25.258
if the user has apps installed
that you listed

00:15:25.258 --> 00:15:26.959
in the order package.

00:15:26.959 --> 00:15:30.129
The registered devices will each
ask for the new order package

00:15:30.129 --> 00:15:32.031
which your server will provide.

00:15:32.031 --> 00:15:34.267
When a device receives
a push notification,

00:15:34.267 --> 00:15:36.402
it doesn't know yet
which orders have changed,

00:15:36.402 --> 00:15:38.838
as the push notification
is empty.

00:15:38.838 --> 00:15:41.007
Together with your server,
the device figures out

00:15:41.007 --> 00:15:44.243
which orders have changed since
the last time it requested them.

00:15:44.243 --> 00:15:46.879
Use the registration information
your server stored

00:15:46.879 --> 00:15:50.483
to find relevant orders,
then return their IDs.

00:15:50.483 --> 00:15:54.253
Keep track of update times
and include a modification tag

00:15:54.253 --> 00:15:56.622
in your response to limit
the number of Order IDs

00:15:56.622 --> 00:15:58.991
returned by future requests.

00:15:58.991 --> 00:16:01.194
You can use a timestamp,
for example.

00:16:01.194 --> 00:16:03.930
The value is opaque
to the device.

00:16:03.930 --> 00:16:05.832
The device will provide
the modification tag

00:16:05.832 --> 00:16:08.034
the next time
it requests changes.

00:16:08.034 --> 00:16:10.236
Finally, the device will request
the latest package

00:16:10.236 --> 00:16:13.539
for each order your server
indicated is updated.

00:16:13.539 --> 00:16:16.175
We've covered a lot today.

00:16:16.175 --> 00:16:17.343
Follow these practices
to provide

00:16:17.343 --> 00:16:19.812
the best customer experience
possible.

00:16:19.812 --> 00:16:22.582
When implementing Apple Pay,
offer express checkout

00:16:22.582 --> 00:16:24.016
by displaying
the Apple Pay button

00:16:24.016 --> 00:16:26.285
on the product
or cart page.

00:16:26.285 --> 00:16:28.221
Users can select shipping
options and addresses

00:16:28.221 --> 00:16:29.555
directly in the payment sheet

00:16:29.555 --> 00:16:31.858
and check out
without typing anything.

00:16:31.858 --> 00:16:33.426
When implementing
order tracking,

00:16:33.426 --> 00:16:35.728
use the knowledge you have about
your customer preferences

00:16:35.728 --> 00:16:38.231
to provide relevant
localizations only.

00:16:38.231 --> 00:16:40.566
Additionally, be mindful
of the number of assets

00:16:40.566 --> 00:16:43.569
you include to keep
the order package size small.

00:16:43.569 --> 00:16:46.072
When you update an order,
promptly notify devices

00:16:46.072 --> 00:16:48.140
that registered
for updates to it.

00:16:48.140 --> 00:16:51.844
Orders in Wallet should match
the actual state of the order.

00:16:51.844 --> 00:16:54.213
Make sure to also check out
the Human Interface Guidelines

00:16:54.213 --> 00:16:58.050
for order tracking and also in
displaying the Apple Pay button.

00:16:58.050 --> 00:17:00.786
Today, I've covered getting
started implementing Apple Pay

00:17:00.786 --> 00:17:02.989
through the building
and updating an order.

00:17:02.989 --> 00:17:05.291
This talk is intended
to introduce you

00:17:05.291 --> 00:17:07.326
to implementing Apple Pay
and order tracking,

00:17:07.326 --> 00:17:09.395
but you should definitely
check out the documentation

00:17:09.395 --> 00:17:12.465
linked in the session notes
to dig into more details.

00:17:12.465 --> 00:17:16.836
Additionally, you can check out
our most recent WWDC video.

00:17:16.836 --> 00:17:19.038
Thank you so much
for your time today.

00:17:19.038 --> 00:17:21.207
And I hope you enjoy
the rest of your day.