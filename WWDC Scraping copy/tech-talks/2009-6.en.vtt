WEBVTT

00:00:21.260 --> 00:00:25.900
Hello, I'm Mark Malone, iPhone and
Server Technologies Evangelist.

00:00:26.000 --> 00:00:28.460
In this video you'll learn the
overall architecture and the

00:00:28.460 --> 00:00:32.480
steps required to successfully
add in-app purchase to your app.

00:00:32.620 --> 00:00:34.820
More than an overview,
this session is designed to highlight

00:00:34.820 --> 00:00:38.620
the most critical steps and best
practices you'll use to ensure

00:00:38.620 --> 00:00:40.450
a stress-free implementation.

00:00:40.760 --> 00:00:42.410
So let's begin.

00:00:43.380 --> 00:00:45.790
So here's our agenda,
what we'll cover today.

00:00:46.140 --> 00:00:49.440
First,
a bit of overview and some architecture,

00:00:49.550 --> 00:00:52.210
the development and production
preparation steps you'll need to take,

00:00:52.210 --> 00:00:55.150
as well as some implementation details,
the things that you'll need

00:00:55.220 --> 00:00:58.490
to do within your application,
perhaps on your server as well.

00:00:58.640 --> 00:01:02.370
And then finally, we'll wrap it up with
some debugging techniques.

00:01:02.870 --> 00:01:06.760
Throughout this presentation you'll see
these little stars next to the bullets.

00:01:06.800 --> 00:01:09.470
The goal is that you've read
the documentation and this just

00:01:09.470 --> 00:01:12.300
isn't going to reiterate the
things in the documentation,

00:01:12.390 --> 00:01:16.190
but these little gold stars are
there to demarcate items where

00:01:16.190 --> 00:01:20.390
folks have been confused or gotchas,
things that have tripped up people

00:01:20.390 --> 00:01:22.000
as part of their implementation.

00:01:22.030 --> 00:01:23.130
So keep mindful of these.

00:01:25.230 --> 00:01:27.280
So, overview and architecture.

00:01:27.320 --> 00:01:30.040
Let's get into some details.

00:01:30.080 --> 00:01:33.670
At the top level,
In-App Purchas is there to allow you,

00:01:33.670 --> 00:01:36.600
within your application,
to leverage the App Store Catalog

00:01:36.600 --> 00:01:37.940
and Billing system.

00:01:38.000 --> 00:01:42.760
You're able to sell access to built-in
features or perhaps remote content.

00:01:42.800 --> 00:01:45.660
You're able to provide
localized price information as

00:01:45.660 --> 00:01:47.320
well as product descriptions.

00:01:47.360 --> 00:01:49.300
And the App Store collects
the payment for you,

00:01:49.350 --> 00:01:52.780
and you, in turn,
unlock the features within your app.

00:01:54.250 --> 00:01:56.220
And implementing in-app purchase is easy.

00:01:56.490 --> 00:01:59.200
There's lots of functionality
for very little code.

00:01:59.530 --> 00:02:02.070
You get localized pricing and
product detail information.

00:02:02.110 --> 00:02:06.580
There's no credit card processing that
you need to build into your application.

00:02:06.760 --> 00:02:09.390
The App Store manages the
checkout with familiar screens

00:02:09.390 --> 00:02:11.100
that your customers are used to.

00:02:11.290 --> 00:02:15.210
And of course, there is no server
required as part of this.

00:02:16.210 --> 00:02:19.570
And there's plenty of great
implementations of in-app purchase

00:02:19.840 --> 00:02:22.380
already up on the App Store.

00:02:22.470 --> 00:02:27.440
All sorts of things: buying content,
driving directions, game levels,

00:02:27.540 --> 00:02:28.460
you name it.

00:02:28.590 --> 00:02:33.180
There's a way to use in-app purchase in
order to add value to your application.

00:02:34.590 --> 00:02:36.380
So let's look at the architecture.

00:02:36.440 --> 00:02:38.800
There's four moving parts
that I'm going to talk about.

00:02:38.910 --> 00:02:41.280
Four of the main moving parts.

00:02:41.560 --> 00:02:44.560
First and foremost,
there's your application.

00:02:44.720 --> 00:02:47.400
All that's required is
iPhone OS 3.0 or better,

00:02:47.770 --> 00:02:51.900
an iPod Touch, or an iPhone,
as well as a cellular plan or

00:02:51.910 --> 00:02:56.630
Wi-Fi connection so that we can talk to
the back-end network in the App Store.

00:02:58.030 --> 00:03:01.080
On the App Store side, well,
you're going to access the

00:03:01.080 --> 00:03:03.040
App Store via the Store Kit frameworks.

00:03:03.080 --> 00:03:06.960
We provide localized product
metadata descriptions and pricing,

00:03:07.050 --> 00:03:10.320
collect the payments,
and we also provide transaction recovery

00:03:10.490 --> 00:03:15.640
for installation of an application on
a new device for one of your customers

00:03:15.640 --> 00:03:19.750
and allowing you to recover the
transactions they've already paid for.

00:03:21.100 --> 00:03:24.190
There's also an optional server
that you could provide where you

00:03:24.210 --> 00:03:26.310
could deliver purchase content.

00:03:26.450 --> 00:03:28.880
You can also validate the
purchase receipts associated

00:03:28.880 --> 00:03:31.580
with the purchase transactions.

00:03:31.710 --> 00:03:36.420
And a cloud service that we provide
through iTunes for receipt validation.

00:03:36.630 --> 00:03:39.300
Now keep in mind that both
of these parts are optional.

00:03:39.460 --> 00:03:42.000
You don't need to validate the receipts.

00:03:42.150 --> 00:03:45.730
And delivering content that's sitting
on a server is purely a design

00:03:45.730 --> 00:03:48.590
consideration for your application.

00:03:50.150 --> 00:03:54.180
So let's look at the
in-app purchase workflow.

00:03:54.210 --> 00:03:58.700
The first step that you're going to want
to implement is requesting product IDs.

00:03:58.740 --> 00:04:02.520
These product IDs are the potential
products you may sell within your

00:04:02.520 --> 00:04:04.780
application using in-app purchase.

00:04:04.810 --> 00:04:07.820
Now you might request those
product IDs from your server

00:04:07.820 --> 00:04:12.060
using a web service call,
bring them back into your application,

00:04:12.090 --> 00:04:15.020
or you might load them from
your application bundle itself,

00:04:15.060 --> 00:04:18.840
or maybe you have them as a set of
constants within your application.

00:04:18.980 --> 00:04:22.310
Step one is that you want to
get them into your application.

00:04:22.420 --> 00:04:25.520
Step two is you're going to
take that set of potential

00:04:25.520 --> 00:04:27.370
product IDs and validate them.

00:04:27.500 --> 00:04:30.260
You're going to validate them
using the Store Kit framework

00:04:30.780 --> 00:04:33.140
to talk to the App Store itself.

00:04:33.150 --> 00:04:36.480
So you pass those product
IDs off to the App Store.

00:04:36.510 --> 00:04:38.770
The App Store is going to pass
you back what is considered

00:04:38.840 --> 00:04:42.680
a valid set of product IDs.

00:04:42.730 --> 00:04:45.610
Then within your application
you're going to present the

00:04:45.610 --> 00:04:49.020
display of items for your users,
and then your user is going to

00:04:49.020 --> 00:04:52.080
select an item for purchase,
and you're going to pass that product,

00:04:52.260 --> 00:04:55.660
the one they selected,
back to the App Store using the

00:04:55.660 --> 00:05:00.600
Store Kit framework to request
payment for that particular product.

00:05:00.660 --> 00:05:04.360
As a result of the user walking
through a series of dialogues,

00:05:04.410 --> 00:05:10.090
you will get passed back a receipt
associated with a successful transaction.

00:05:10.820 --> 00:05:13.030
Now if you're implementing
purchase validation,

00:05:13.030 --> 00:05:16.470
you'll want to pass that
receipt back up to your server,

00:05:16.470 --> 00:05:22.700
and then you'll call our iTunes URL,
passing that receipt for validation.

00:05:22.700 --> 00:05:26.950
We'll look up that transaction
in our back-end database,

00:05:26.950 --> 00:05:29.650
and then pass you back the result.

00:05:29.730 --> 00:05:32.660
We'll let you know if that
was a successful transaction,

00:05:32.800 --> 00:05:35.690
a verified transaction.

00:05:35.950 --> 00:05:40.040
And then of course you'll pass
that back to your application for

00:05:40.060 --> 00:05:42.700
unlocking the purchase for your user.

00:05:44.820 --> 00:05:46.300
It's that simple.

00:05:46.410 --> 00:05:48.400
So let's get into some
nitty-gritty details.

00:05:48.800 --> 00:05:51.500
Preparation and implementation.

00:05:51.690 --> 00:05:54.510
These are the steps that you're
going to perform in order

00:05:54.510 --> 00:05:55.900
to get everything set up.

00:05:56.030 --> 00:05:57.650
And then finally,
what you're going to do within

00:05:57.650 --> 00:06:01.900
your application to make sure that
you adopt the right techniques.

00:06:02.010 --> 00:06:05.150
So there's four moving parts that
I'm going to talk about here as part

00:06:05.150 --> 00:06:07.300
of preparation and implementation.

00:06:07.440 --> 00:06:10.660
There's the program portal,
a place you're used to interacting

00:06:10.660 --> 00:06:14.290
with when you go and register
IDs or request certificates.

00:06:14.420 --> 00:06:17.270
There's iTunes Connect,
where you've recently uploaded

00:06:17.270 --> 00:06:21.400
your applications or provided
metadata for your applications.

00:06:21.510 --> 00:06:24.200
There's some things that you need to do,
obviously, within your application,

00:06:24.200 --> 00:06:27.200
the implementation of Store Kit APIs.

00:06:27.340 --> 00:06:30.100
And then finally,
if you're doing purchase validation,

00:06:30.100 --> 00:06:34.300
then you're going to take advantage of
a couple of steps on the server as well.

00:06:34.440 --> 00:06:37.430
So let's take a look at each
of these in some detail.

00:06:38.120 --> 00:06:40.910
On the development preparation side,
you're going to start at the

00:06:40.910 --> 00:06:42.140
Developer Program Portal.

00:06:42.250 --> 00:06:47.400
And the first step there is you need to
enable your App ID for in-app purchase.

00:06:47.510 --> 00:06:51.620
This is required in order for you
to go into iTunes Connect at a later

00:06:51.620 --> 00:06:55.910
step and enter the products associated
with your application for sale.

00:06:56.010 --> 00:06:57.680
So do this first.

00:06:57.790 --> 00:07:02.360
Until you associate an
App ID with in-app purchase,

00:07:02.470 --> 00:07:06.090
none of the iTunes Connect features
are going to be turned on for you.

00:07:08.010 --> 00:07:12.580
Another thing to keep in mind is
that no wildcards are allowed for app

00:07:12.580 --> 00:07:16.740
IDs associated with in-app purchase,
or push notification for that matter.

00:07:16.840 --> 00:07:20.830
So make sure that you have a
non-wildcarded app ID associated

00:07:21.220 --> 00:07:22.840
with in-app purchase.

00:07:22.930 --> 00:07:26.060
If you've got an existing
application and you're just merely

00:07:26.060 --> 00:07:32.340
updating it to add in-app purchase,
it's as easy as creating a new app ID,

00:07:32.360 --> 00:07:36.060
the same as the previous one,
and just leaving out the wildcard.

00:07:36.160 --> 00:07:39.750
From the store's perspective,
it'll look just like an update.

00:07:40.020 --> 00:07:42.830
The user will be notified that
your new version is up there.

00:07:43.100 --> 00:07:47.040
There won't be any issue with access
to the local documents directory,

00:07:47.040 --> 00:07:47.780
anything like that.

00:07:47.830 --> 00:07:50.840
It'll be just like an in-place update.

00:07:51.200 --> 00:07:56.340
So here's the UI that you'll see once
you select the appropriate app ID.

00:07:56.460 --> 00:07:58.790
And you'll see over on the right
hand side there's a configure button.

00:07:58.820 --> 00:08:01.590
So tap that configure button.

00:08:02.270 --> 00:08:05.380
And you'll see some details
associated with your app ID.

00:08:05.470 --> 00:08:09.670
All that's required for enabling in-app
purchase is to check the checkbox saying

00:08:09.770 --> 00:08:15.760
"Enable in-app purchase." A little green
light will go on and you're good to go.

00:08:16.200 --> 00:08:17.860
And you're all done
in the Program Portal.

00:08:17.940 --> 00:08:18.350
That's it.

00:08:18.600 --> 00:08:20.600
That one step.

00:08:20.690 --> 00:08:23.360
Next step,
let's go into iTunes Connect and

00:08:23.370 --> 00:08:24.930
do a few things there.

00:08:25.350 --> 00:08:29.080
So within the iTunes Connect,
we're going to first verify that you've

00:08:29.080 --> 00:08:31.440
got appropriate contracts in place.

00:08:31.590 --> 00:08:33.280
You're going to add your application.

00:08:33.280 --> 00:08:36.720
You don't need to upload your binary yet,
but get some critical meta data

00:08:36.720 --> 00:08:38.480
information in there first.

00:08:38.630 --> 00:08:40.280
You're going to add your products.

00:08:40.400 --> 00:08:43.180
And then finally you're going to
create a test user for testing in-app

00:08:43.200 --> 00:08:45.480
purchase within your application.

00:08:46.650 --> 00:08:50.400
So let's begin with
verifying your contracts.

00:08:50.430 --> 00:08:53.580
Tap on the Contracts, Tax,
and Banking Information item

00:08:53.580 --> 00:08:56.600
within iTunes Connect,
and it'll take you to a section

00:08:56.600 --> 00:09:00.560
where you can manage the
contracts that you have in place.

00:09:00.590 --> 00:09:04.760
Make sure that you've got a paid
applications contract in place in

00:09:04.760 --> 00:09:09.520
the Your Contracts in Effect section
within this particular tab.

00:09:09.550 --> 00:09:12.990
This is especially critical for folks
who have delivered free applications

00:09:13.040 --> 00:09:17.020
on the App Store and have never sold
an application at a given price.

00:09:17.250 --> 00:09:22.050
So make sure that you've got this step
taken out of the way in the beginning.

00:09:22.310 --> 00:09:25.690
Now if you've already sold an
application within the App Store,

00:09:25.690 --> 00:09:27.640
then you've got a contract in place.

00:09:27.780 --> 00:09:31.030
However, there might be an amendment
waiting for your agreement there.

00:09:31.060 --> 00:09:34.080
So if you're having an
issue adding your products,

00:09:34.080 --> 00:09:37.970
associating them with an application,
then it might be that you have another

00:09:37.970 --> 00:09:39.640
contract waiting for you to agree to.

00:09:39.640 --> 00:09:42.940
So simply tap the Submit
button and move on.

00:09:42.960 --> 00:09:44.790
You're good to go.

00:09:45.520 --> 00:09:48.190
Next step is we're going
to add your application.

00:09:48.190 --> 00:09:53.140
So click on the "Manage your
application" section in iTunes Connect.

00:09:54.580 --> 00:09:57.740
Now, you don't have to load
your entire app altogether.

00:09:57.740 --> 00:10:02.340
We don't request your binary is
submitted as part of the testing process

00:10:02.340 --> 00:10:04.220
associated with in-app purchases.

00:10:04.340 --> 00:10:07.570
We just require that you add a
certain amount of metadata so that

00:10:07.570 --> 00:10:11.650
we can track the application and
associate the products with it.

00:10:12.140 --> 00:10:16.180
Something to keep in mind is that
changes for apps that are already

00:10:16.180 --> 00:10:18.740
on the store go live immediately.

00:10:18.760 --> 00:10:21.180
So don't go into the description
of your application and start

00:10:21.180 --> 00:10:24.420
advertising about the in-app
purchases that you've got coming,

00:10:24.460 --> 00:10:27.440
since those will be presented
to your users right away,

00:10:27.440 --> 00:10:30.420
and you might not have uploaded
the most recent version of your

00:10:30.420 --> 00:10:35.260
application that even contains the
capabilities for in-app purchase.

00:10:37.030 --> 00:10:39.240
Next step is adding your products.

00:10:39.360 --> 00:10:42.480
So you're going to click on the
Manage your in-app purchases

00:10:42.480 --> 00:10:44.770
section of iTunes Connect.

00:10:44.980 --> 00:10:47.120
And you should see,
if everything went well,

00:10:47.140 --> 00:10:50.900
a Manage In-App Purchases button
next to your application of choice.

00:10:50.900 --> 00:10:53.280
So go ahead and tap that.

00:10:55.300 --> 00:10:59.870
So to collect your product information,
we'll display a view that collects

00:11:00.020 --> 00:11:03.300
things like the reference name,
a product ID type, price tier,

00:11:03.300 --> 00:11:05.540
as well as cleared for sale.

00:11:05.620 --> 00:11:07.540
One thing to keep in mind
as you're filling in this

00:11:07.540 --> 00:11:12.420
information is that product
IDs are unique across applications.

00:11:12.490 --> 00:11:18.030
Many folks use the reverse domain
name naming function or perhaps

00:11:18.030 --> 00:11:22.010
a bundle identifier as a way of
creating a unique product name,

00:11:22.010 --> 00:11:24.860
followed by the product itself.

00:11:26.080 --> 00:11:28.840
And something to keep in mind is
that the type that you choose here

00:11:28.840 --> 00:11:32.360
is very important because the type
that you choose for this particular

00:11:32.360 --> 00:11:36.600
in-app purchase really drives a
lot of the behavior of whether

00:11:36.600 --> 00:11:41.010
it's restored to a user's device,
how the user buys it perhaps

00:11:41.020 --> 00:11:44.180
multiple times over time,
whether it's a subscription.

00:11:44.180 --> 00:11:47.500
So let's talk a little
about these in detail.

00:11:48.810 --> 00:11:52.190
The first type of product that you
might associate with your in-app

00:11:52.190 --> 00:11:55.040
purchase is a non-consumable.

00:11:55.210 --> 00:11:58.370
These are products that
are purchased once,

00:11:58.410 --> 00:12:01.240
but available forever
within your application.

00:12:01.300 --> 00:12:03.560
A good example is perhaps a game level.

00:12:03.630 --> 00:12:06.210
A user would buy that once and
they would always have access to

00:12:06.230 --> 00:12:09.370
that particular level in a game.

00:12:09.640 --> 00:12:12.100
Another product type is a consumable.

00:12:12.280 --> 00:12:14.700
Bullets is a good example
for a game as well,

00:12:14.700 --> 00:12:17.740
where it's purchased each
time that they are consumed.

00:12:17.930 --> 00:12:21.900
The user will use them up and then
they'll need to buy more in order to get

00:12:21.900 --> 00:12:26.520
more bullets or whatever product it is
that you're selling that's consumable.

00:12:26.990 --> 00:12:29.490
The third and final
type is a subscription.

00:12:29.770 --> 00:12:34.290
A subscription is purchased each
time the subscription expires.

00:12:34.520 --> 00:12:38.840
Keep in mind that you're in charge of the
dates associated with when a particular

00:12:38.840 --> 00:12:43.790
item is no longer valid for a given
subscription that a user has purchased.

00:12:44.450 --> 00:12:47.060
So that's the product types.

00:12:47.110 --> 00:12:51.180
Another good thing to keep in mind is
that the "Cleared for Sale" checkbox

00:12:51.280 --> 00:12:57.710
must be checked before you can test your
in-app purchases within your application.

00:12:59.430 --> 00:13:02.160
And finally,
the Approve button you'll see next

00:13:02.160 --> 00:13:06.030
to your application listing all
your products is there when it's

00:13:06.030 --> 00:13:10.560
time to go and submit your app
and its products for approval.

00:13:10.690 --> 00:13:13.560
Make sure that you press that
Approve button after you've

00:13:13.560 --> 00:13:17.590
tested all your products within
your in-app purchase application.

00:13:23.570 --> 00:13:26.440
And finally,
let's create a test user that you'll

00:13:26.440 --> 00:13:29.190
use to test your implementation.

00:13:29.720 --> 00:13:32.090
Back into iTunes Connect.

00:13:32.140 --> 00:13:35.990
Click on the Manage
User item within the menu.

00:13:36.240 --> 00:13:40.260
And it'll take you to an area where
you can add an iTunes Connect user as

00:13:40.260 --> 00:13:42.920
well as an in-app purchase test user.

00:13:43.010 --> 00:13:44.580
Click on that.

00:13:44.610 --> 00:13:47.290
And you'll see that we collect the
same sort of information that you would

00:13:47.290 --> 00:13:51.120
enter for your app ID for production.

00:13:51.170 --> 00:13:55.560
However, we don't want you to enter
your production Apple ID here.

00:13:55.590 --> 00:13:59.180
Make sure that this is a unique
Apple ID that you're creating

00:13:59.400 --> 00:14:00.960
for testing in-app purchase.

00:14:01.000 --> 00:14:03.700
You don't want to use the same one
that you would use for buying music,

00:14:03.770 --> 00:14:05.730
for example, or movies in iTunes.

00:14:05.790 --> 00:14:07.200
Don't enter that here.

00:14:07.220 --> 00:14:09.520
Make up something completely different.

00:14:09.540 --> 00:14:13.090
You're going to want to make up one
for each country that you wish to test,

00:14:13.090 --> 00:14:17.600
since the ID that you enter is going
to be associated with an individual

00:14:17.660 --> 00:14:22.080
country that your product might be
for sale within for a specific store.

00:14:22.120 --> 00:14:26.750
So use one for each one of the countries
that you want to sell your products in.

00:14:28.090 --> 00:14:28.840
And we're done.

00:14:28.890 --> 00:14:31.300
That's it in iTunes Connect.

00:14:31.390 --> 00:14:35.420
Let's take a look at what we need
to do within your application now.

00:14:36.750 --> 00:14:39.250
Within your application,
you're going to determine

00:14:39.260 --> 00:14:41.640
the sellable products,
you're going to build

00:14:41.640 --> 00:14:46.230
the product display,
request payment for the item that

00:14:46.230 --> 00:14:49.820
the user selected to purchase,
you're going to perhaps

00:14:49.820 --> 00:14:52.760
verify the purchase receipt,
remember the purchase,

00:14:52.940 --> 00:14:56.410
and then finally restore previous
purchases that the user might

00:14:56.590 --> 00:15:01.420
have purchased with previous
devices of your application.

00:15:02.810 --> 00:15:06.160
So, as I said earlier in the beginning,
the workflow.

00:15:06.170 --> 00:15:09.140
Whenever your application
launches the first time,

00:15:09.290 --> 00:15:11.580
you're going to request
a set of product IDs,

00:15:11.580 --> 00:15:15.020
either from your server or
from within the file system,

00:15:15.020 --> 00:15:17.200
perhaps bundle of your application.

00:15:17.200 --> 00:15:21.030
You're going to pull those sellable
products into your application.

00:15:21.030 --> 00:15:23.920
Remember,
those are the potential products.

00:15:23.920 --> 00:15:26.860
They aren't necessarily all of
the products that you can actually

00:15:26.860 --> 00:15:28.480
sell within your application.

00:15:28.920 --> 00:15:32.320
You're going to use Store Kit to
determine the sellable

00:15:32.320 --> 00:15:34.170
subset of those products.

00:15:34.180 --> 00:15:37.780
And by sellable,
I mean it's those products that have

00:15:37.780 --> 00:15:42.170
been entered into iTunes Connect,
as well as those that have cleared

00:15:42.180 --> 00:15:44.320
through the app review process.

00:15:44.320 --> 00:15:47.210
Now, clearing app review is
not required for testing.

00:15:47.210 --> 00:15:50.610
However, both of these steps have to
be complete for you to be able

00:15:50.640 --> 00:15:54.370
to sell a product using the
Store Kit APIs within your application.

00:15:56.070 --> 00:15:56.810
So how do you do it?

00:15:56.970 --> 00:16:01.690
Well, first you need to take that set of
potential products that you've built up

00:16:01.890 --> 00:16:06.260
and call init with product
identifiers passing in that set.

00:16:06.380 --> 00:16:10.040
Finally,
you call start on your product's request.

00:16:10.130 --> 00:16:12.290
By calling start,

00:16:12.610 --> 00:16:16.590
You'll pack up those products and
send them to the App Store using

00:16:16.630 --> 00:16:18.180
the Store Kit APIs.

00:16:18.330 --> 00:16:21.290
And then as a result,
we'll look at the products you've

00:16:21.290 --> 00:16:25.330
provided and return back the sellable
products back to your application.

00:16:25.340 --> 00:16:30.800
It's that subset of products that
you can sell within your application.

00:16:31.530 --> 00:16:35.790
Those products come back, all of them,
in the response object of the

00:16:35.800 --> 00:16:38.820
didReceiveResponse method.

00:16:38.850 --> 00:16:41.290
They're all returned,
however they're broken

00:16:41.290 --> 00:16:42.860
into two separate arrays.

00:16:42.890 --> 00:16:46.370
One,
a set of invalid product identifiers,

00:16:46.370 --> 00:16:50.980
and then a set of valid
products in response.products.

00:16:51.000 --> 00:16:54.050
You're going to want to use
response.products within your

00:16:54.050 --> 00:16:56.300
application to build your display.

00:16:56.560 --> 00:16:59.730
The invalid product identifiers
might be products that haven't

00:16:59.730 --> 00:17:01.960
made it through app review,
or perhaps you didn't even

00:17:01.960 --> 00:17:05.090
enter them into iTunes Connect.

00:17:05.910 --> 00:17:08.410
You're also going to want to make
sure that you use the localized

00:17:08.630 --> 00:17:10.260
product attributes for your display.

00:17:10.260 --> 00:17:12.850
When you're building your
list of products for sale,

00:17:12.850 --> 00:17:16.810
you want to use the localized title,
the localized description,

00:17:16.910 --> 00:17:19.490
and the price that's provided as well.

00:17:19.740 --> 00:17:22.900
We're doing that for you so that
the information that is displayed

00:17:22.900 --> 00:17:25.900
is in the language of the particular
store that your customer is using

00:17:25.900 --> 00:17:27.600
when they're buying your items.

00:17:27.680 --> 00:17:29.260
So make sure that you use that.

00:17:29.380 --> 00:17:32.700
That same language,
that same localized value,

00:17:32.700 --> 00:17:37.280
is used as part of Store Kit dialogues
that are presented to a user as part of

00:17:37.280 --> 00:17:40.520
their checkout process for buying items.

00:17:42.110 --> 00:17:44.430
Next step,
after a user has selected the item,

00:17:44.430 --> 00:17:46.380
you're going to request payment.

00:17:46.450 --> 00:17:49.000
And again, of course,
it's back to the Store Kit APIs to

00:17:49.040 --> 00:17:50.620
talk to the Store Kit.

00:17:50.820 --> 00:17:55.690
You create a payment request,
you send it to the Store Kit.

00:17:56.960 --> 00:18:00.160
And then we're going to
send you back the results.

00:18:00.220 --> 00:18:04.280
The way you build your request is by
selecting the product ID associated

00:18:04.280 --> 00:18:09.170
with the item the user has chosen to
purchase and adding it to the payment

00:18:09.170 --> 00:18:12.000
queue via the Add Payment method.

00:18:13.270 --> 00:18:15.340
Once you do this,
Store Kit is going to present

00:18:15.340 --> 00:18:18.860
a series of payment request
dialogs to your customers.

00:18:19.010 --> 00:18:22.990
The first one is going to request
the iTunes password of the

00:18:22.990 --> 00:18:25.700
customer that's using the device.

00:18:26.480 --> 00:18:29.200
Keep in mind that if
you're in testing mode,

00:18:29.240 --> 00:18:34.620
this user ID that you see in the
dialog should be your in-app test user.

00:18:34.990 --> 00:18:37.520
Make sure that this isn't
your production user.

00:18:37.590 --> 00:18:40.540
If so,
if it's got your production name in here,

00:18:40.550 --> 00:18:43.090
then all of the workflow is
going to break as part of your

00:18:43.200 --> 00:18:44.920
processing of these transactions.

00:18:44.990 --> 00:18:47.450
You want to make sure that
this has your in-app test user,

00:18:47.600 --> 00:18:50.830
the same one that you created
within iTunes Connect at the

00:18:50.830 --> 00:18:53.020
beginning of this process.

00:18:53.210 --> 00:18:57.560
If you see the wrong user ID in here,
if it's perhaps your production user ID,

00:18:57.650 --> 00:19:02.640
the way to clear it is in the
Settings section of the iPhone OS.

00:19:02.760 --> 00:19:06.570
So go to the Settings section and
you'll see there's a Store item

00:19:06.570 --> 00:19:08.680
down at the bottom of the settings.

00:19:08.820 --> 00:19:14.170
Tap on that and you'll see the account
settings for in-app purchase as well as

00:19:14.170 --> 00:19:16.520
any item that's purchased on the device.

00:19:16.660 --> 00:19:20.510
You're going to want to press the
Sign Out button and then make sure that

00:19:20.580 --> 00:19:24.110
there isn't any account information
that's entered here at the top.

00:19:24.130 --> 00:19:26.960
Make sure it doesn't have
your test account information.

00:19:26.960 --> 00:19:30.400
Make sure it doesn't have your
production account information.

00:19:30.820 --> 00:19:34.700
And another key got you is make sure
that you don't enter any value here.

00:19:34.820 --> 00:19:36.610
Don't enter your in-app test user here.

00:19:36.620 --> 00:19:38.340
Just make sure that it's blank.

00:19:38.450 --> 00:19:40.870
And then you're good to go forward.

00:19:43.330 --> 00:19:48.040
The next dialog that's going to
be presented is a Confirm dialog.

00:19:48.180 --> 00:19:50.830
As I mentioned,
the dialogs we present when we're talking

00:19:50.880 --> 00:19:55.040
about product information displays
that localized product information.

00:19:55.040 --> 00:19:58.370
So remember,
you want to build your display based on

00:19:58.370 --> 00:20:02.640
that localized product values that we
return associated with your products.

00:20:02.750 --> 00:20:04.720
Because this is where your
customers will see them.

00:20:04.860 --> 00:20:07.640
You want to make sure that the product
name displayed here is the same thing

00:20:07.640 --> 00:20:11.870
that they thought they were buying when
they selected it within your application.

00:20:13.190 --> 00:20:16.780
The next dialog is the
previously purchased dialog.

00:20:16.780 --> 00:20:18.550
Now this might not show up.

00:20:18.760 --> 00:20:23.690
It's only displayed if a user has bought
this item before and it's a consumable

00:20:23.960 --> 00:20:26.730
or it's a subscription type product.

00:20:27.580 --> 00:20:31.020
From a transaction perspective
within your transaction queue,

00:20:31.080 --> 00:20:33.700
this is going to look just
like an original purchase.

00:20:33.700 --> 00:20:36.420
So if you're doing auditing
of your transactions,

00:20:36.420 --> 00:20:38.490
this won't appear as a
different sort of transaction.

00:20:38.510 --> 00:20:39.980
It's not a restored transaction.

00:20:40.130 --> 00:20:41.860
It's just another successful buy.

00:20:41.870 --> 00:20:45.000
So make sure you keep that in mind if
you're keeping track of transactions.

00:20:47.390 --> 00:20:49.340
The next dialogue,
if the user's made it through

00:20:49.340 --> 00:20:51.140
this process and everything
has been successful,

00:20:51.140 --> 00:20:53.860
is the thank you dialogue.

00:20:53.970 --> 00:20:56.640
And the user successfully
bought your item.

00:20:57.740 --> 00:21:00.260
The thing to keep in mind
is testing environments are

00:21:00.260 --> 00:21:02.040
different from production.

00:21:02.060 --> 00:21:04.820
So all of these dialogues are
displayed to you when you're testing,

00:21:04.820 --> 00:21:07.860
as well as when the user is
walking through the process of

00:21:07.860 --> 00:21:10.080
buying your in-app purchase.

00:21:10.110 --> 00:21:12.450
However, when you're testing,
you want to make sure that

00:21:12.450 --> 00:21:13.190
you're in the sandbox.

00:21:13.210 --> 00:21:16.770
And the way to do it is by looking at
each one of the dialogues and making

00:21:16.770 --> 00:21:20.820
sure that you see the environment
sandbox within brackets keywords.

00:21:20.820 --> 00:21:22.120
It's there within each one of these.

00:21:22.120 --> 00:21:24.190
If you don't see this,
then there's going to be a

00:21:24.190 --> 00:21:27.030
problem with part of the checkout
process that you're testing.

00:21:27.230 --> 00:21:28.900
So make sure it's there.

00:21:28.940 --> 00:21:32.840
So you've successfully requested payment.

00:21:32.870 --> 00:21:35.990
As a result of requesting payment,
we're going to pass you

00:21:35.990 --> 00:21:38.440
back a transaction receipt.

00:21:38.480 --> 00:21:42.370
And you can use that transaction
receipt to verify the purchase.

00:21:43.350 --> 00:21:45.830
And remember,
purchase verification is optional.

00:21:45.860 --> 00:21:47.030
Not everybody is doing this.

00:21:47.080 --> 00:21:50.330
It's not required,
but it is a nice to have.

00:21:51.220 --> 00:21:54.800
The purchase transaction
contains a signed receipt.

00:21:54.900 --> 00:21:56.340
And it looks like this.

00:21:56.440 --> 00:21:59.170
This particular transaction,
my payment transaction,

00:21:59.170 --> 00:22:02.290
has a field on it, Transaction Receipt.

00:22:02.420 --> 00:22:07.040
What you need to do before you do
anything with it is Base64 encode it.

00:22:07.160 --> 00:22:09.700
Base64 encode the receipt value.

00:22:09.790 --> 00:22:11.340
And if you need a sample
on how to do that,

00:22:11.340 --> 00:22:12.530
you can get it from Cocoa Dev.

00:22:12.530 --> 00:22:15.680
They've got some great examples
on how to Base64 encode.

00:22:15.680 --> 00:22:17.540
It's not one simple Cocoa method.

00:22:17.540 --> 00:22:20.100
There's a fair number of things that
you need to do in order to do it.

00:22:20.140 --> 00:22:23.640
So go to this website and
grab the source and do it.

00:22:24.540 --> 00:22:27.250
Once you've encoded your
transaction receipt,

00:22:27.270 --> 00:22:30.600
it's time to verify it and do
that by sending it to your server.

00:22:30.600 --> 00:22:34.660
You don't want to encode and verify
the receipt right there on the device.

00:22:34.660 --> 00:22:38.270
If you're worried about the transaction,
move it off to your server and

00:22:38.340 --> 00:22:41.830
have the validation status passed
back to your application before you

00:22:41.830 --> 00:22:43.970
finally go and unlock that purchase.

00:22:47.700 --> 00:22:49.390
Once you feel comfortable
with the purchase,

00:22:49.480 --> 00:22:51.260
the next step is you need to remember it.

00:22:51.450 --> 00:22:54.440
Remember, you want to make sure that the
item that the user has purchased

00:22:54.920 --> 00:22:57.800
is available between different
launches of the application.

00:22:57.870 --> 00:22:59.380
So you need to remember it.

00:22:59.470 --> 00:23:01.800
And there's a couple ways to do that.

00:23:01.880 --> 00:23:05.710
First, and probably the most popular way,
is to use the NSUserDefaults class.

00:23:05.710 --> 00:23:07.520
And it looks like this.

00:23:07.590 --> 00:23:11.310
It's a very easy way to go and
write an array of information,

00:23:11.310 --> 00:23:14.610
a dictionary of information,
out to the file system in a

00:23:14.610 --> 00:23:16.980
standard location on iPhone.

00:23:17.050 --> 00:23:19.100
It writes to the application
support directory.

00:23:19.100 --> 00:23:23.140
And if you're looking for a sample
on how to use the NSUserDefaults,

00:23:23.140 --> 00:23:25.700
then take a look at the
drill-down save sample.

00:23:25.770 --> 00:23:29.050
It's got a great example of
providing user navigation,

00:23:29.050 --> 00:23:32.080
drilling down within a
multi-list environment,

00:23:32.080 --> 00:23:37.800
and then saving the depth of the user's
drill-down in the NSUserDefaults.

00:23:37.850 --> 00:23:40.460
So it's there the next time the
user launches the application.

00:23:40.460 --> 00:23:45.310
It's a great sample, and it's got a great
implementation of NSUserDefaults.

00:23:46.220 --> 00:23:48.810
Another mechanism that's
popular is using the Keychain

00:23:48.810 --> 00:23:50.380
APIs to go and remember this.

00:23:50.380 --> 00:23:53.240
Remember, you can write all sorts of
things out to the Keychain.

00:23:53.330 --> 00:23:57.160
Most people use it for secure ID,
secure URLs, passwords,

00:23:57.190 --> 00:24:00.320
those kinds of things,
but you can also remember purchases,

00:24:00.320 --> 00:24:03.340
remember the product ID associated
with the purchased item

00:24:03.420 --> 00:24:05.610
in the Keychain as well.

00:24:06.000 --> 00:24:08.950
As part of using the Keychain,
you'll notice that you get a

00:24:08.950 --> 00:24:12.780
unique slice of the Keychain
for your particular application.

00:24:12.900 --> 00:24:15.790
Something that's very nice, however,
is that that slice can be shared

00:24:16.250 --> 00:24:19.500
across all the applications
that have the same bundle seed.

00:24:19.520 --> 00:24:23.020
So if perhaps you want to
remember the purchases from one

00:24:23.020 --> 00:24:26.820
application into the Keychain,
you can always use another application

00:24:26.820 --> 00:24:30.050
to look at that same slice and see,
oh, within this other application

00:24:30.420 --> 00:24:33.130
that you've developed,
these particular products

00:24:33.190 --> 00:24:34.760
are purchased as well.

00:24:35.160 --> 00:24:37.840
If you're looking for a sample
on how to use the Keychain,

00:24:37.890 --> 00:24:40.870
how to read and write,
the generic Keychain sample is an

00:24:40.870 --> 00:24:43.100
excellent example to take a look at.

00:24:43.150 --> 00:24:46.590
It's got a Keychain wrapper class
that makes it very straightforward

00:24:46.590 --> 00:24:49.560
to go and read and write from
the Keychain application.

00:24:51.630 --> 00:24:55.000
Keep in mind that both of
these mechanisms are backed up.

00:24:55.000 --> 00:24:57.380
And as user defaults,
the entire directory is backed up

00:24:57.380 --> 00:25:00.140
as part of a user's backup process,
as is the keychain.

00:25:00.140 --> 00:25:03.810
So these items that you've written
to either of these locations are

00:25:03.810 --> 00:25:08.170
going to be remembered between
restores of a user's device.

00:25:09.850 --> 00:25:11.830
Talking about restoring,
let's talk a little bit

00:25:11.830 --> 00:25:14.400
about restoring purchases.

00:25:14.440 --> 00:25:18.560
Subscription and non-consumable
items are required to be restored

00:25:18.560 --> 00:25:20.200
across all the user's devices.

00:25:20.200 --> 00:25:24.000
So if they bought it on one device,
you're required to restore it across all

00:25:24.010 --> 00:25:28.410
the other devices for the same iTunes ID.

00:25:28.960 --> 00:25:33.780
You need to provide custom UI in order to
give the user the capability to do this.

00:25:33.870 --> 00:25:37.740
Don't launch the restore process
on every launch of the application.

00:25:37.840 --> 00:25:42.880
Put a button perhaps in your settings
or perhaps in a utility section in

00:25:42.880 --> 00:25:46.780
your application that clearly says,
"Restore previous purchases."

00:25:46.860 --> 00:25:48.080
Users will get used to this.

00:25:48.080 --> 00:25:50.860
They're used to downloading
applications to multiple devices,

00:25:50.860 --> 00:25:54.200
and they'll look for the previously
purchased items in that application,

00:25:54.200 --> 00:25:58.590
not see them, and they'll go hunting for
this type of mechanism.

00:25:59.290 --> 00:26:02.400
Non-consumables will use the
Store Kit API in order to

00:26:02.400 --> 00:26:04.840
provide the restoration services.

00:26:04.960 --> 00:26:07.810
And you do it through calling
restoreCompletedTransactions

00:26:08.130 --> 00:26:10.590
as part of the payment queue.

00:26:11.570 --> 00:26:14.360
Now remember, as part of calling
this particular method,

00:26:14.400 --> 00:26:16.280
customer sign-in is going to be required.

00:26:16.310 --> 00:26:19.050
So again,
make sure that you're not requesting

00:26:19.290 --> 00:26:22.310
transactions to be restored with
every launch of your application.

00:26:22.590 --> 00:26:25.790
Make sure it's associated with some sort
of user action to go and initiate that.

00:26:27.830 --> 00:26:30.600
and then process it like
a successful payment.

00:26:30.670 --> 00:26:34.020
The transaction will have a property
that indicates that it's restored,

00:26:34.020 --> 00:26:37.700
but the goal is that as a result of you
receiving this restored transaction,

00:26:37.700 --> 00:26:41.170
you simply unlock the purchase again,
as if the user had bought

00:26:41.240 --> 00:26:42.800
it for the first time.

00:26:43.470 --> 00:26:44.980
The customer will not be charged.

00:26:45.120 --> 00:26:47.600
Remember,
restoring is a process that they expect

00:26:48.140 --> 00:26:51.860
on devices when it's non-consumable as
well as subscription-based products.

00:26:54.380 --> 00:26:57.140
Talking about subscriptions,
as I mentioned in the beginning,

00:26:57.140 --> 00:26:59.600
you're required to manage all
the information associated

00:26:59.600 --> 00:27:00.640
with subscriptions.

00:27:00.640 --> 00:27:04.840
So whether the subscription is
valid for a given period of time,

00:27:04.900 --> 00:27:08.200
all those things that you need to track,
it's really in your best interest to

00:27:08.280 --> 00:27:12.220
perhaps collect a user ID so that you
can restore the purchases for the user.

00:27:12.420 --> 00:27:15.640
They will not come back as a result
of calling restored purchases.

00:27:15.920 --> 00:27:19.190
Consumables as well as
subscription information is not

00:27:19.320 --> 00:27:21.560
returned as part of restoration.

00:27:22.590 --> 00:27:26.060
So that's it on the client
implementation side.

00:27:26.140 --> 00:27:30.490
Let's take a look at what you can do on
your server in order to go the next step.

00:27:31.300 --> 00:27:34.000
Now as I mentioned,
having a server is optional.

00:27:34.000 --> 00:27:36.440
However,
there are a lot of use cases where

00:27:36.440 --> 00:27:38.000
a server would be incredibly useful.

00:27:38.000 --> 00:27:40.410
First and foremost,
you could serve product

00:27:40.560 --> 00:27:41.940
IDs to your application.

00:27:41.940 --> 00:27:45.540
Perhaps you have a content service
and you're dynamically creating

00:27:45.540 --> 00:27:47.400
multiple product IDs over time.

00:27:47.400 --> 00:27:50.640
Rather than delivering a new
version of your binary every time

00:27:50.710 --> 00:27:54.800
to encompass those product IDs,
you can just serve them up over a server.

00:27:54.800 --> 00:27:57.960
If you're serving content,
most likely you've got a server

00:27:57.960 --> 00:28:01.040
already in order to provide
that content to your user.

00:28:01.290 --> 00:28:02.960
It's sitting out there in the cloud.

00:28:03.080 --> 00:28:05.260
When they make the purchase,
it's unlocked and they're able to

00:28:05.300 --> 00:28:06.790
stream it down to their application.

00:28:06.800 --> 00:28:10.640
Some folks are using a server
to manage user accounts as well.

00:28:10.830 --> 00:28:13.570
Again, specifically for subscriptions,
that's something you

00:28:13.570 --> 00:28:14.460
definitely want to do.

00:28:14.480 --> 00:28:18.320
And then finally, as I mentioned,
you're going to use a server

00:28:18.320 --> 00:28:22.200
in order to verify the in-app
purchases that a user has made.

00:28:22.570 --> 00:28:25.390
So of all of these things that you
could possibly do with a server,

00:28:25.400 --> 00:28:29.700
verifying in-app purchases is the one
where Apple's part of the process.

00:28:29.790 --> 00:28:31.770
So let's take a look at that.

00:28:32.490 --> 00:28:37.110
Verifying in-app purchase begins
with you sending the encoded

00:28:37.110 --> 00:28:38.860
receipt up to your server.

00:28:38.980 --> 00:28:42.700
Remember, it's a base64 encoded receipt.

00:28:43.210 --> 00:28:47.060
And then you're going to create a
JSON object that has that receipt as

00:28:47.090 --> 00:28:50.580
the value of a receipt data object.

00:28:51.610 --> 00:28:57.660
Next up is you're going to post that
to the iTunes Verification Service at

00:28:57.660 --> 00:29:01.700
buyitunes.apple.com/verifyreceipt.

00:29:01.830 --> 00:29:04.700
That'll send that up to our server.

00:29:04.810 --> 00:29:08.010
We'll take a look at the
package that you've sent us,

00:29:08.080 --> 00:29:12.730
and then we're going to respond
with a JSON response that you

00:29:12.730 --> 00:29:15.110
can inspect for validation.

00:29:15.330 --> 00:29:18.730
Looking at the JSON object,
you'll see it's got a status value,

00:29:18.760 --> 00:29:21.090
as well as some other
information in there.

00:29:21.240 --> 00:29:24.310
Key for validating the
receipt is the status.

00:29:24.490 --> 00:29:28.840
You want to make sure that that
value is zero for a verified receipt.

00:29:28.960 --> 00:29:34.150
Any other value that you see here means
that this receipt has not been verified.

00:29:34.270 --> 00:29:36.810
So after you've validated
the JSON response,

00:29:37.090 --> 00:29:41.050
validated that you received
a verified receipt,

00:29:41.210 --> 00:29:44.600
You're going to take a look at the rest
of the receipt for some other interesting

00:29:44.600 --> 00:29:46.980
information that's part of it.

00:29:47.660 --> 00:29:50.100
As part of the receipt
we provide product ID,

00:29:50.200 --> 00:29:53.680
Apple bundle ID, purchase date,
all sorts of information that could

00:29:53.700 --> 00:29:57.700
be incredibly useful if you've
got a system on your back end that

00:29:57.700 --> 00:30:01.800
manages transaction information as
well as user information to manage

00:30:01.800 --> 00:30:03.320
purchases and those types of things.

00:30:03.320 --> 00:30:06.790
So take a look at these fields,
they're incredibly useful.

00:30:07.750 --> 00:30:10.810
And then the final step is you're
going to pass the verification

00:30:10.810 --> 00:30:12.420
status off to your application.

00:30:12.550 --> 00:30:16.400
Basically tell your application
whether it can unlock the particular

00:30:16.490 --> 00:30:18.960
feature that a user has just bought.

00:30:20.690 --> 00:30:22.460
So, that's it with the server side.

00:30:22.460 --> 00:30:25.160
You've verified your purchases.

00:30:25.240 --> 00:30:28.580
And that's it from a preparation
and implementation perspective.

00:30:28.680 --> 00:30:33.410
Program Portal, iTunes Connect, your app,
your app server, you got it all together.

00:30:33.560 --> 00:30:36.720
So let's wrap it up with
some debugging techniques.

00:30:37.040 --> 00:30:40.620
Well, those debugging techniques are
all those things that I called

00:30:40.620 --> 00:30:43.770
out as part of the presentation
with the little stars next to it.

00:30:43.840 --> 00:30:46.490
Each one of these issues have
caused some users grief as

00:30:46.490 --> 00:30:48.200
part of their implementation.

00:30:48.200 --> 00:30:49.660
So be mindful.

00:30:49.660 --> 00:30:52.700
Make sure that you've got the
appropriate contract in place.

00:30:52.700 --> 00:30:56.850
Make sure that you've got cleared
for sale checked in iTunes Connect.

00:30:56.920 --> 00:30:59.340
That the appropriate
agreements are there.

00:30:59.340 --> 00:31:01.850
That you don't change metadata
before you've actually

00:31:01.850 --> 00:31:03.420
submitted your application.

00:31:03.930 --> 00:31:06.870
You don't want to out your products,
the features that you're going

00:31:06.870 --> 00:31:09.360
to have in your application,
before you actually submit it.

00:31:09.460 --> 00:31:12.090
And then finally,
make sure that you're using the

00:31:12.090 --> 00:31:16.300
appropriate in-app test user information
as part of your testing process.

00:31:18.320 --> 00:31:21.540
So here's what we've covered:
a bit of overview, architecture,

00:31:21.540 --> 00:31:25.080
some development and preparation steps,
as well as some implementation

00:31:25.080 --> 00:31:27.990
details and debugging techniques.

00:31:29.330 --> 00:31:31.760
I'm the iPhone and
Server Technologies Evangelist.

00:31:31.770 --> 00:31:34.280
My email address is malone@apple.com.

00:31:34.280 --> 00:31:38.050
If you have any further questions,
feel free to send me an email and be

00:31:38.050 --> 00:31:41.410
sure to check out the documentation
available on the program portal

00:31:41.840 --> 00:31:44.570
at developer.apple.com/iphone.

00:31:44.570 --> 00:31:44.960
Thank you.