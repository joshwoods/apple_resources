WEBVTT

00:00:02.135 --> 00:00:05.272
Betsy Langowski: In 2017,
the iPhone X was released.

00:00:05.272 --> 00:00:07.808
Linking against the iOS 11 SDK

00:00:07.808 --> 00:00:12.179
let your app take advantage
of the beautiful new display.

00:00:12.179 --> 00:00:15.115
This year, we are introducing
the iPhone XS,

00:00:15.115 --> 00:00:19.086
the iPhone XS Max,
and the iPhone XR.

00:00:19.086 --> 00:00:20.487
While iPhone XS has been

00:00:20.487 --> 00:00:22.723
completely redesigned
from the ground up,

00:00:22.723 --> 00:00:25.025
the screen size is the same
as an iPhone X,

00:00:25.025 --> 00:00:30.063
so this video will focus on
the iPhone XS Max and iPhone XR

00:00:30.063 --> 00:00:32.332
with their all-new resolutions.

00:00:32.332 --> 00:00:35.002
If your app primarily uses
UIKit frameworks

00:00:35.002 --> 00:00:37.571
and you've already adapted
your app for iPhone X,

00:00:37.571 --> 00:00:39.740
you should be in great shape.

00:00:39.740 --> 00:00:42.142
All you'll need to do
is link against iOS 12

00:00:42.142 --> 00:00:45.879
to take full advantage
of these great new phones.

00:00:45.879 --> 00:00:49.716
If you need a refresher on how
to update your app for iPhone X,

00:00:49.716 --> 00:00:53.553
and now iPhone XS Max
and iPhone XR,

00:00:53.553 --> 00:00:56.957
check out the video,
"Building Apps for iPhone X."

00:00:56.957 --> 00:00:58.825
This video walks you
through making sure

00:00:58.825 --> 00:01:01.695
the TrueDepth camera
doesn't occlude your UI,

00:01:01.695 --> 00:01:03.664
ensuring your UI elements
are positioned

00:01:03.664 --> 00:01:05.465
away from the Home indicator,

00:01:05.465 --> 00:01:08.735
and other common adjustments
that you may need to make.

00:01:08.735 --> 00:01:11.571
While most of the heavy lifting
is done for you by UIKit,

00:01:11.571 --> 00:01:13.674
you may still need
to optimize your app,

00:01:13.674 --> 00:01:15.175
and this video provides guidance

00:01:15.175 --> 00:01:18.779
that is great for iPhone XS Max
and iPhone XR,

00:01:18.779 --> 00:01:21.415
as well as iPhone X.

00:01:21.415 --> 00:01:22.749
Let's talk about
a couple of things

00:01:22.749 --> 00:01:24.384
that we've made better
for you this year

00:01:24.384 --> 00:01:26.987
to make updating your apps
for iPhone XS Max

00:01:26.987 --> 00:01:29.556
and iPhone XR a breeze.

00:01:29.556 --> 00:01:32.159
If you watched
"Building Apps for iPhone X,"

00:01:32.159 --> 00:01:35.195
you remember the importance
of testing in landscape mode.

00:01:35.195 --> 00:01:39.366
One of the places this is
critical is in collection views.

00:01:39.366 --> 00:01:41.435
I've built this really simple
sample app,

00:01:41.435 --> 00:01:43.637
which is just
a collection view controller,

00:01:43.637 --> 00:01:46.006
embedded in
a navigation controller,

00:01:46.006 --> 00:01:48.208
which is embedded in
a tab bar controller.

00:01:48.208 --> 00:01:49.910
There are offsets
to space out the cells,

00:01:49.910 --> 00:01:52.512
but otherwise this is just
using the defaults.

00:01:52.512 --> 00:01:55.615
At first glance, in portrait,
it looks really good.

00:01:55.615 --> 00:01:58.618
But in landscape,
this app has a problem:

00:01:58.618 --> 00:02:01.621
the cells on the left side are
behind the TrueDepth camera.

00:02:01.621 --> 00:02:02.723
In order to address this,

00:02:02.723 --> 00:02:05.292
the collection view's
section inset reference

00:02:05.292 --> 00:02:07.127
needs to be set
to the safe area,

00:02:07.127 --> 00:02:09.529
instead of
the default content inset.

00:02:09.529 --> 00:02:10.731
This can be done in code,

00:02:10.731 --> 00:02:12.599
and when the iPhone X
was first released,

00:02:12.599 --> 00:02:14.468
that was the only way to do it.

00:02:14.468 --> 00:02:16.536
But since this app
was built with storyboards,

00:02:16.536 --> 00:02:17.804
in more recent Xcode,

00:02:17.804 --> 00:02:20.974
we can make this change
directly in Interface Builder.

00:02:20.974 --> 00:02:23.643
With the collection view
selected in the storyboard,

00:02:23.643 --> 00:02:25.746
we can select
the Size Inspector

00:02:25.746 --> 00:02:29.783
and change the Inset From value
to safe area.

00:02:29.783 --> 00:02:31.351
Now when I build
and run my app,

00:02:31.351 --> 00:02:34.254
my collection view avoids the
TrueDepth camera in landscape,

00:02:34.254 --> 00:02:37.257
no code changes needed.

00:02:37.257 --> 00:02:40.394
Auto layout is the Cocoa
and Cocoa Touch layout system.

00:02:40.394 --> 00:02:42.529
If your app uses auto layout,

00:02:42.529 --> 00:02:44.631
you'll find that
most of the work of optimizing

00:02:44.631 --> 00:02:47.734
for new screen sizes,
like those on the iPhone XS Max

00:02:47.734 --> 00:02:50.537
and iPhone XR,
is done for you.

00:02:50.537 --> 00:02:52.873
If you aren't taking advantage
of the great benefits

00:02:52.873 --> 00:02:54.441
you get from auto layout,

00:02:54.441 --> 00:02:56.576
now is definitely
the time to update,

00:02:56.576 --> 00:02:58.779
because this year
we dramatically improved

00:02:58.779 --> 00:03:00.981
its performance.

00:03:00.981 --> 00:03:02.015
Here are some examples

00:03:02.015 --> 00:03:05.485
of iOS 11's auto layout
performance in gray

00:03:05.485 --> 00:03:09.423
compared with iOS 12's
auto layout performance in blue.

00:03:09.423 --> 00:03:12.325
Look how much less time
moving trees take in iOS 12

00:03:12.325 --> 00:03:14.428
compared with iOS 11.

00:03:14.428 --> 00:03:17.798
Using auto layout in your app
just got a lot faster.

00:03:17.798 --> 00:03:19.332
If you'd like
a behind-the-scenes look

00:03:19.332 --> 00:03:23.537
at how we did it, check out
the WWDC 2018 video,

00:03:23.537 --> 00:03:26.073
"High Performance Auto Layout."

00:03:26.073 --> 00:03:30.410
One change for iPhone XS Max
and iPhone XR specifically

00:03:30.410 --> 00:03:33.013
is in the behavior of
UISplitViewController

00:03:33.013 --> 00:03:34.214
in landscape.

00:03:34.214 --> 00:03:38.351
It's a lot like how it works in
Mail in portrait mode on iPad.

00:03:38.351 --> 00:03:40.821
Take a look at this very simple
test app I made

00:03:40.821 --> 00:03:44.224
running in the iPhone XS Max
simulator.

00:03:44.224 --> 00:03:45.992
My master view with four cells

00:03:45.992 --> 00:03:47.494
comes in with
the press of a button

00:03:47.494 --> 00:03:49.563
and is dismissed similarly.

00:03:49.563 --> 00:03:51.431
My app got this behavior
automatically

00:03:51.431 --> 00:03:52.432
on the new hardware

00:03:52.432 --> 00:03:55.335
because I set
a displayModeButtonItem.

00:03:55.335 --> 00:03:59.139
This behavior will also be set
if you use presentsWithGesture.

00:03:59.139 --> 00:04:01.675
Let's take a peek at
what this looks like in code.

00:04:01.675 --> 00:04:03.577
In my App Delegate,
I've gotten

00:04:03.577 --> 00:04:06.947
the UISplitViewController's
displayModeButtonItem

00:04:06.947 --> 00:04:09.015
and set it
as the left bar button item

00:04:09.015 --> 00:04:12.119
in the navigation bar
for my customer to tap.

00:04:12.119 --> 00:04:13.520
So now I'm opted-in
to the behavior

00:04:13.520 --> 00:04:17.791
on the iPhone XS Max
and iPhone XR.

00:04:17.791 --> 00:04:21.027
I'm also setting
presentsWithGesture to true.

00:04:21.027 --> 00:04:22.696
This makes it possible
for my customer

00:04:22.696 --> 00:04:25.165
to access the master view
with a swipe.

00:04:25.165 --> 00:04:26.199
This is optional,

00:04:26.199 --> 00:04:28.969
and it can be set to false
if needed for your app.

00:04:28.969 --> 00:04:29.870
One thing to note.

00:04:29.870 --> 00:04:31.138
If you've relied on setting

00:04:31.138 --> 00:04:33.373
preferredDisplayMode
to automatic,

00:04:33.373 --> 00:04:35.876
this is now
the automatic behavior.

00:04:35.876 --> 00:04:37.644
If you've done
some customization

00:04:37.644 --> 00:04:39.813
and you'd like to opt out
of this behavior,

00:04:39.813 --> 00:04:43.316
simply avoid using the
displayModeButtonItem entirely

00:04:43.316 --> 00:04:46.086
and set presentsWithGesture
to false.

00:04:46.086 --> 00:04:47.721
You can also set
preferredDisplayMode

00:04:47.721 --> 00:04:49.523
to allVisible.

00:04:49.523 --> 00:04:50.524
OK.

00:04:50.524 --> 00:04:54.060
Let's move on to talk about
some common pitfalls.

00:04:54.060 --> 00:04:55.996
Some apps may have
a background image set

00:04:55.996 --> 00:04:57.397
to specific dimensions,

00:04:57.397 --> 00:05:00.133
or certain assets pinned
to a spot on the screen.

00:05:00.133 --> 00:05:02.102
This is most common in games,

00:05:02.102 --> 00:05:04.004
but your app may use
a technique like this

00:05:04.004 --> 00:05:05.839
for a variety of reasons.

00:05:05.839 --> 00:05:08.008
If your app has set
a scaled image,

00:05:08.008 --> 00:05:11.845
when you run it on an
iPhone XS Max or iPhone XR,

00:05:11.845 --> 00:05:14.814
you may notice your content
is scaled incorrectly.

00:05:14.814 --> 00:05:17.217
Unlike apps that use
standard UIKit frameworks,

00:05:17.217 --> 00:05:18.718
while these phones
are still new,

00:05:18.718 --> 00:05:21.254
you may need to do
a little bit of special-casing

00:05:21.254 --> 00:05:22.322
and tell your app --

00:05:22.322 --> 00:05:24.191
or the framework
your app is using --

00:05:24.191 --> 00:05:26.560
about the new screen.

00:05:26.560 --> 00:05:27.761
The display dimensions
for both

00:05:27.761 --> 00:05:30.797
the iPhone XR
and iPhone XS Max

00:05:30.797 --> 00:05:35.936
are 414 points wide
by 896 points tall.

00:05:35.936 --> 00:05:37.037
As you're building your assets,

00:05:37.037 --> 00:05:40.674
keep in mind that
the iPhone XR is a 2x device,

00:05:40.674 --> 00:05:44.511
and the iPhone XS Max
is a 3x device.

00:05:44.511 --> 00:05:47.847
So in pixels,
the resolution of iPhone XR

00:05:47.847 --> 00:05:52.852
is 828 by 1,792 pixels.

00:05:52.852 --> 00:05:55.355
The resolution
of the iPhone XS Max

00:05:55.355 --> 00:06:01.094
is 1,242 by 2,688 pixels.

00:06:01.094 --> 00:06:02.195
Caution!

00:06:02.195 --> 00:06:04.497
You should only hard-code
screen dimensions

00:06:04.497 --> 00:06:07.300
if your framework
absolutely requires it.

00:06:07.300 --> 00:06:09.502
While this can make
your game or similar app

00:06:09.502 --> 00:06:11.004
work right out of the gate,

00:06:11.004 --> 00:06:12.606
you should avoid
using these methods

00:06:12.606 --> 00:06:14.941
unless you absolutely need to.

00:06:14.941 --> 00:06:17.077
Please let UIKit
do the work for you

00:06:17.077 --> 00:06:19.679
and use auto layout instead.

00:06:19.679 --> 00:06:21.481
While it may be tempting
to force your app

00:06:21.481 --> 00:06:24.451
to behave in specific ways
on various hardware models,

00:06:24.451 --> 00:06:26.386
you should avoid
making special cases

00:06:26.386 --> 00:06:28.255
per piece of hardware.

00:06:28.255 --> 00:06:30.590
This will take time away from
developing new features,

00:06:30.590 --> 00:06:33.260
and it's largely redundant work.

00:06:33.260 --> 00:06:34.894
Additionally,
when your code is running

00:06:34.894 --> 00:06:37.264
on a model of phone
it doesn't recognize,

00:06:37.264 --> 00:06:39.199
unexpected problems can occur.

00:06:39.199 --> 00:06:40.533
This can hurt your customers

00:06:40.533 --> 00:06:43.236
if you aren't able
to update your app right away.

00:06:43.236 --> 00:06:46.806
If you made a special case for
your iOS app to run on iPhone X,

00:06:46.806 --> 00:06:48.775
now you have to redo
all your hard work

00:06:48.775 --> 00:06:52.145
for iPhone XS Max
and iPhone XR.

00:06:52.145 --> 00:06:54.080
Even if you need to set
dimensions within your app

00:06:54.080 --> 00:06:55.915
to accommodate
graphical needs,

00:06:55.915 --> 00:06:57.617
do not search for a device model

00:06:57.617 --> 00:07:00.253
and gate behavior
behind that string check.

00:07:00.253 --> 00:07:02.555
You should never
write code that reads like,

00:07:02.555 --> 00:07:04.858
"Is this an iPhone X?
Do A.

00:07:04.858 --> 00:07:06.893
Else? Do B."

00:07:06.893 --> 00:07:08.561
This is a great opportunity
to make sure

00:07:08.561 --> 00:07:10.363
you have adopted
safe-area insets

00:07:10.363 --> 00:07:12.265
universally throughout your app

00:07:12.265 --> 00:07:15.535
and save your future self
a lot of time and effort.

00:07:15.535 --> 00:07:18.638
Now is also a great time
to be really diligent about

00:07:18.638 --> 00:07:19.873
how you're branching your code

00:07:19.873 --> 00:07:22.242
when you're looking
for feature availability.

00:07:22.242 --> 00:07:24.711
Just like the other iPhones
you already support,

00:07:24.711 --> 00:07:27.180
such as iPhone SE
and all iPads,

00:07:27.180 --> 00:07:31.051
iPhone XR doesn't support
3D Touch and dual cameras,

00:07:31.051 --> 00:07:34.120
so it's important that you don't
rely on those behaviors.

00:07:34.120 --> 00:07:36.089
Let's use 3D Touch
as an example.

00:07:36.089 --> 00:07:39.025
The Home app is a fantastic
example of an application

00:07:39.025 --> 00:07:42.062
that uses 3D Touch
on supported devices

00:07:42.062 --> 00:07:43.663
but provides
the full feature set

00:07:43.663 --> 00:07:45.899
on devices that do not
support 3D Touch,

00:07:45.899 --> 00:07:49.336
or for users who may have
turned it off.

00:07:49.336 --> 00:07:52.605
Checking whether a device uses
3D Touch is simple.

00:07:52.605 --> 00:07:55.809
Let's take a look
at some sample code.

00:07:55.809 --> 00:07:58.044
First, check at launch
whether or not

00:07:58.044 --> 00:08:01.614
the device supports the feature,
as shown highlighted here.

00:08:01.614 --> 00:08:04.784
However, remember a user
can turn off 3D Touch

00:08:04.784 --> 00:08:06.319
while your app is running.

00:08:06.319 --> 00:08:08.621
Therefore, you should also
do this check

00:08:08.621 --> 00:08:10.223
as part of your implementation

00:08:10.223 --> 00:08:13.226
of the traitCollectionDidChange
delegate method.

00:08:13.226 --> 00:08:16.229
In either case, branch your code
to use an alternative

00:08:16.229 --> 00:08:19.099
such as
UILongPressGestureRecognizer

00:08:19.099 --> 00:08:21.167
for devices that don't support
3D Touch,

00:08:21.167 --> 00:08:25.171
so that the full feature set
is represented for all devices.

00:08:25.171 --> 00:08:27.741
When in doubt, make sure
your code can handle nil

00:08:27.741 --> 00:08:29.709
and is robust enough
to gracefully fail

00:08:29.709 --> 00:08:33.645
when getting back
something unexpected.

00:08:33.645 --> 00:08:35.315
For most apps,
there won't be much work

00:08:35.315 --> 00:08:37.851
for you this year
to support iPhone XS,

00:08:37.851 --> 00:08:40.419
iPhone XS Max,
and iPhone XR,

00:08:40.419 --> 00:08:44.023
especially if you already
are optimized for iPhone X.

00:08:44.023 --> 00:08:45.558
If you need any support,

00:08:45.558 --> 00:08:48.495
there's lots available
from the iPhone X videos

00:08:48.495 --> 00:08:52.465
and this year's
WWDC 2018 sessions.

00:08:52.465 --> 00:08:54.234
Check out
the related content,

00:08:54.234 --> 00:08:57.570
and you can find more
on developer.apple.com.