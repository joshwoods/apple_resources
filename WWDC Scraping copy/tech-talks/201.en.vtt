WEBVTT

00:00:01.268 --> 00:00:03.804
Linking your app
against the iOS 11 SDK

00:00:03.804 --> 00:00:06.240
is the only thing you need to do
in order to take advantage

00:00:06.240 --> 00:00:09.643
of the super Retina display
on iPhone X.

00:00:09.643 --> 00:00:12.913
If your app is largely based
on standard UIKit controls

00:00:12.913 --> 00:00:15.515
and you use Auto Layout,
then you're in good shape

00:00:15.515 --> 00:00:18.886
since most of the work
will be done for you by UIKit.

00:00:19.887 --> 00:00:23.690
If you use custom controls,
or you're not using Auto Layout,

00:00:23.690 --> 00:00:25.692
or if you're a custom
full screen app

00:00:25.692 --> 00:00:27.794
like many games are,
don't worry.

00:00:27.794 --> 00:00:29.663
While there may be
some work for you to do,

00:00:29.663 --> 00:00:32.332
it's not difficult and there is
lots of support built in

00:00:32.332 --> 00:00:35.535
with tools like the new
Safe Area layout guides.

00:00:35.535 --> 00:00:38.205
In either case, you will want
to thoroughly test your app,

00:00:38.205 --> 00:00:41.375
especially in landscape, to make
sure everything looks right.

00:00:43.210 --> 00:00:45.979
The latest version of Xcode
includes simulator support

00:00:45.979 --> 00:00:49.917
for iPhone X, allowing you
to make most layout changes,

00:00:49.917 --> 00:00:51.251
especially any adjustments

00:00:51.251 --> 00:00:54.254
relating to respecting
the Safe Area.

00:00:54.254 --> 00:00:56.490
For some apps,
like ones that use Metal,

00:00:56.490 --> 00:00:59.426
or hardware features
like the front-facing camera,

00:00:59.426 --> 00:01:02.029
you may need to use
an actual device.

00:01:02.029 --> 00:01:05.999
Let's take a quick look
at the new iPhone X simulator.

00:01:05.999 --> 00:01:08.602
Just like other
iPhone or iPad simulators,

00:01:08.602 --> 00:01:11.905
you'll have access to many
of the built-in system apps.

00:01:11.905 --> 00:01:13.507
This is a great way
to see examples

00:01:13.507 --> 00:01:18.178
of how different UIKit
components behave on iPhone X.

00:01:18.178 --> 00:01:19.846
For example, the Files app

00:01:19.846 --> 00:01:23.150
shows many of the latest
iOS 11 APIs in action,

00:01:23.150 --> 00:01:27.487
like the integrated search bar
or large navigation bar titles.

00:01:27.487 --> 00:01:30.424
And don't forget, you can
sign into your iCloud account

00:01:30.424 --> 00:01:34.328
in the simulator, which gives
you access to iCloud Drive.

00:01:34.328 --> 00:01:36.530
This makes it really easy
to transfer files

00:01:36.530 --> 00:01:40.467
or test content like photos
into the simulator.

00:01:40.467 --> 00:01:43.103
Another good example
is the Contacts app,

00:01:43.103 --> 00:01:47.274
which shows how table views
behave on iPhone X.

00:01:47.274 --> 00:01:49.343
Be sure to rotate
the simulator to landscape

00:01:49.343 --> 00:01:51.645
where you can see behaviors
like the section headers

00:01:51.645 --> 00:01:53.146
going edge to edge,

00:01:53.146 --> 00:01:55.215
but the table contents
remain indented

00:01:55.215 --> 00:01:58.185
according to the Safe Area.

00:01:58.185 --> 00:02:01.188
We'll talk more about
table views a bit later.

00:02:01.188 --> 00:02:03.223
Let's move on to
an app that I work on,

00:02:03.223 --> 00:02:05.559
the WWDC app.

00:02:05.559 --> 00:02:08.228
I've spent a little time
moving it over to iPhone X

00:02:08.228 --> 00:02:10.030
and I'd like to share
some layout issues

00:02:10.030 --> 00:02:12.666
that I encountered,
and how I fixed them.

00:02:12.666 --> 00:02:16.970
The WWDC app is actually
a pretty typical real-world app.

00:02:16.970 --> 00:02:19.072
It's been around
for a number of years

00:02:19.072 --> 00:02:20.974
and it's been worked on
by various engineers

00:02:20.974 --> 00:02:22.242
from year to year.

00:02:22.242 --> 00:02:25.879
While it uses lots of standard
controls and Auto Layout,

00:02:25.879 --> 00:02:27.581
it also has custom views,

00:02:27.581 --> 00:02:30.717
and older parts of the app
do manual layout instead.

00:02:30.717 --> 00:02:32.819
I'll use it to highlight
three different areas

00:02:32.819 --> 00:02:36.123
that needed to be updated
for iPhone X.

00:02:36.123 --> 00:02:38.859
I've started by opening
the project in Xcode 9

00:02:38.859 --> 00:02:41.528
and set the Base SDK to iOS 11.

00:02:41.528 --> 00:02:44.898
So we're all set to run
at the native resolution.

00:02:44.898 --> 00:02:46.566
When you do this with your app,

00:02:46.566 --> 00:02:50.337
if you don't see it running at
the full iPhone X resolution,

00:02:50.337 --> 00:02:52.773
double check that you've
configured a Launch Storyboard,

00:02:52.773 --> 00:02:55.042
as that's also needed.

00:02:55.042 --> 00:02:57.944
OK, our initial view
is the Videos tab,

00:02:57.944 --> 00:02:59.513
and this looks pretty good.

00:02:59.513 --> 00:03:01.081
This was all new code this year

00:03:01.081 --> 00:03:03.750
using UICollectionView
with Auto Layout,

00:03:03.750 --> 00:03:07.320
along with standard navigation
bar and toolbar controls.

00:03:07.320 --> 00:03:09.489
So I'm not really surprised
that most of the interface

00:03:09.489 --> 00:03:10.957
lays out correctly,

00:03:10.957 --> 00:03:14.261
because UIKit is doing
most of the work for me.

00:03:14.261 --> 00:03:16.363
One place where
we don't use Auto Layout

00:03:16.363 --> 00:03:17.931
is on the News tab.

00:03:17.931 --> 00:03:19.866
Let's have a look at that.

00:03:19.866 --> 00:03:21.768
This view actually
looks pretty good,

00:03:21.768 --> 00:03:24.671
even though it's doing
manual layout of the UI.

00:03:24.671 --> 00:03:27.140
While we're not using
Auto Layout directly,

00:03:27.140 --> 00:03:29.376
the code doing the layout
is paying attention

00:03:29.376 --> 00:03:31.912
to the layout margin insets,

00:03:31.912 --> 00:03:34.147
and UIKit is automatically
adjusting those

00:03:34.147 --> 00:03:36.983
to respect the Safe Area.

00:03:36.983 --> 00:03:38.418
The first problem
that I encountered

00:03:38.418 --> 00:03:39.986
is here on the News tab,

00:03:39.986 --> 00:03:43.457
and it's in
the fullscreen photo viewer.

00:03:43.457 --> 00:03:46.560
Even though this particular view
uses Auto Layout,

00:03:46.560 --> 00:03:49.930
the page control is too far down
at the bottom of the screen.

00:03:49.930 --> 00:03:53.033
It's running into
the Home indicator.

00:03:53.033 --> 00:03:56.570
The problem here is that the
page control's bottom constraint

00:03:56.570 --> 00:03:58.472
is relative to the superview,

00:03:58.472 --> 00:04:03.376
which is full screen and goes
behind the Home indicator.

00:04:03.376 --> 00:04:05.579
Instead of constraining
to the superview,

00:04:05.579 --> 00:04:07.681
what we should do
is constrain the page control

00:04:07.681 --> 00:04:10.784
to the Safe Area layout guide
at the bottom.

00:04:10.784 --> 00:04:12.586
Let's make that change now.

00:04:14.421 --> 00:04:16.490
I've opened this interface
in Xcode,

00:04:16.490 --> 00:04:18.658
but before I can
adjust the constraint

00:04:18.658 --> 00:04:22.662
I need to enable Safe Area
layout guides in this xib file.

00:04:22.662 --> 00:04:26.166
Storyboards and xibs
created prior to Xcode 9

00:04:26.166 --> 00:04:27.467
will not automatically have

00:04:27.467 --> 00:04:31.238
Safe Area layout guides
turned on.

00:04:31.238 --> 00:04:32.806
Go to the Document inspector

00:04:32.806 --> 00:04:38.345
and select the Use Safe Area
Layout Guides checkbox.

00:04:38.345 --> 00:04:41.715
One thing to note here
is that for iOS storyboards,

00:04:41.715 --> 00:04:43.850
turning this on
will automatically upgrade

00:04:43.850 --> 00:04:47.521
constraints tied to the scene's
top and bottom layout guides,

00:04:47.521 --> 00:04:50.390
as well as leading
and trailing edges.

00:04:50.390 --> 00:04:53.160
So be sure to review and test
your Auto Layout constraints

00:04:53.160 --> 00:04:55.162
after turning this on.

00:04:56.329 --> 00:05:00.066
Now I can select the bottom
constraint of the page control.

00:05:00.066 --> 00:05:04.037
And look at the Attributes
inspector for this constraint.

00:05:04.037 --> 00:05:05.939
Here we see that
the constraint is connected

00:05:05.939 --> 00:05:08.642
to the superview's bottom edge

00:05:08.642 --> 00:05:11.645
and that's what is keeping
the control too far down.

00:05:11.645 --> 00:05:13.380
Instead of the Superview,

00:05:13.380 --> 00:05:16.449
if we change this to be
connected to the Safe Area,

00:05:16.449 --> 00:05:18.418
then on iPhone X
the page indicator

00:05:18.418 --> 00:05:21.855
will automatically move up
above the Home indicator.

00:05:22.856 --> 00:05:24.491
When I build and run now,

00:05:24.491 --> 00:05:26.660
the page control
is at the right place,

00:05:26.660 --> 00:05:30.430
and this works for both
portrait and landscape.

00:05:30.430 --> 00:05:33.466
Let's move on to
the second issue that I found,

00:05:33.466 --> 00:05:35.735
which is over in the Videos tab.

00:05:35.735 --> 00:05:37.904
Once again,
things look pretty good,

00:05:37.904 --> 00:05:40.173
but if I bring up
the search field,

00:05:40.173 --> 00:05:42.142
well, that doesn't
look quite right.

00:05:42.142 --> 00:05:45.245
Let's compare this
to the Contacts app looks.

00:05:45.245 --> 00:05:47.080
A couple things look wrong here.

00:05:47.080 --> 00:05:49.983
The color of the search bar
background isn't quite right,

00:05:49.983 --> 00:05:52.152
and the sizing is a bit off.

00:05:52.152 --> 00:05:54.187
And if I rotate to landscape,

00:05:54.187 --> 00:05:56.856
I can see things
don't look right here either.

00:05:56.856 --> 00:05:59.726
The search field and Cancel
buttons are both being clipped

00:05:59.726 --> 00:06:01.895
by the rounded corners
of the screen.

00:06:01.895 --> 00:06:03.997
This is a typical example
where paying attention

00:06:03.997 --> 00:06:07.434
to the Safe Area
is really important.

00:06:07.434 --> 00:06:10.804
For this search field,
what the WWDC app is doing

00:06:10.804 --> 00:06:14.374
is explicitly presenting
a UI search controller.

00:06:14.374 --> 00:06:16.142
Now in iOS 11,

00:06:16.142 --> 00:06:19.145
the search bar can be integrated
with the navigation bar,

00:06:19.145 --> 00:06:20.714
which will give
the right presentation

00:06:20.714 --> 00:06:23.016
like we saw in Contacts.

00:06:23.016 --> 00:06:25.185
Let's look at the code
and make that change.

00:06:26.419 --> 00:06:29.089
Here's the code that presents
our search controller.

00:06:29.089 --> 00:06:30.924
I'm going to make two changes.

00:06:30.924 --> 00:06:33.827
First, instead of presenting
the search controller,

00:06:33.827 --> 00:06:35.762
we'll hand it to
the UINavigationItem

00:06:35.762 --> 00:06:37.864
for this view controller.

00:06:37.864 --> 00:06:39.332
And second,

00:06:39.332 --> 00:06:43.036
I'll set the search controller's
isActive property to true.

00:06:43.036 --> 00:06:44.604
This will cause
the navigation bar

00:06:44.604 --> 00:06:47.340
to activate it
and start editing.

00:06:47.340 --> 00:06:49.676
Notice that we can use
the availability support

00:06:49.676 --> 00:06:52.012
to only do this for iOS 11,

00:06:52.012 --> 00:06:53.747
while preserving
the existing behavior

00:06:53.747 --> 00:06:56.283
for older versions of iOS.

00:06:56.283 --> 00:06:58.652
Let's build and run
to see how that looks.

00:06:58.652 --> 00:06:59.986
Much better.

00:06:59.986 --> 00:07:01.521
This looks like
the correct presentation

00:07:01.521 --> 00:07:03.923
of the search field for iOS 11.

00:07:03.923 --> 00:07:06.426
And in landscape?
Terrific.

00:07:06.426 --> 00:07:09.729
Now the search bar is fitting
into the Safe Area nicely,

00:07:09.729 --> 00:07:12.299
and this is all being
automatically managed for us

00:07:12.299 --> 00:07:14.334
by the navigation bar.

00:07:14.334 --> 00:07:17.504
If you have search bars
in your UI with navigation bars,

00:07:17.504 --> 00:07:20.840
you definitely want to make
a similar change on iOS 11.

00:07:22.542 --> 00:07:24.511
Now let's take a look
at the third part of the app

00:07:24.511 --> 00:07:26.713
that I needed to work on.

00:07:26.713 --> 00:07:30.450
Here in the Schedule tab,
we are using a UITableView.

00:07:30.450 --> 00:07:32.886
The layout in portrait
looks pretty good,

00:07:32.886 --> 00:07:34.854
although we've got
another case of a search bar

00:07:34.854 --> 00:07:36.589
that doesn't look right.

00:07:36.589 --> 00:07:38.258
This one happens
to be getting inserted

00:07:38.258 --> 00:07:40.627
in the table view
as a header view,

00:07:40.627 --> 00:07:42.595
but we can apply
the same change as before

00:07:42.595 --> 00:07:45.832
to integrate it
with the navigation bar instead.

00:07:45.832 --> 00:07:47.434
I'll set the search controller

00:07:47.434 --> 00:07:49.736
on the view controller's
navigation item,

00:07:49.736 --> 00:07:52.339
and set the active state
appropriately.

00:07:52.339 --> 00:07:53.673
Let's build and run.

00:07:53.673 --> 00:07:55.108
This looks great.

00:07:55.108 --> 00:07:58.845
If I rotate to landscape,
the search field looks fine

00:07:58.845 --> 00:08:02.615
and most of the UI looks like
it's respecting the safe areas.

00:08:02.615 --> 00:08:04.584
But if you look closely,

00:08:04.584 --> 00:08:06.386
we use a custom
background color

00:08:06.386 --> 00:08:10.090
for the table section header,
and that looks wrong.

00:08:10.090 --> 00:08:13.093
The color should be extending
to the edge of the screen,

00:08:13.093 --> 00:08:15.729
like they do
in the Contacts app.

00:08:15.729 --> 00:08:18.198
If we look at the code,

00:08:18.198 --> 00:08:20.834
we can see that the app
is setting the background color

00:08:20.834 --> 00:08:23.403
on the contentView
of the header view.

00:08:23.403 --> 00:08:25.705
That seems like
a reasonable thing to do,

00:08:25.705 --> 00:08:30.443
and in fact, it works fine
on iPhones other than iPhone X.

00:08:30.443 --> 00:08:32.679
So what is the problem here?

00:08:32.679 --> 00:08:34.614
To understand what's happening,

00:08:34.614 --> 00:08:36.783
we need to look at the details
of how a table view

00:08:36.783 --> 00:08:39.184
lays things out on iPhone X.

00:08:39.184 --> 00:08:42.087
To help illustrate this, let's
start with the really useful

00:08:42.087 --> 00:08:45.992
View Hierarchy Debugger
in Xcode.

00:08:45.992 --> 00:08:48.161
Here's that view
we were looking at.

00:08:48.161 --> 00:08:49.596
Down in the bottom right,

00:08:49.596 --> 00:08:51.765
I can adjust
the visible view range

00:08:51.765 --> 00:08:56.002
to hide all the views
except the table view itself.

00:08:56.002 --> 00:08:59.406
The table view will be
the full size of the screen.

00:08:59.406 --> 00:09:01.074
Now I'll adjust
the visible range

00:09:01.074 --> 00:09:04.511
to include the cells
of the table view.

00:09:04.511 --> 00:09:07.914
Notice how the cells extend
from edge to edge.

00:09:07.914 --> 00:09:10.517
I'll select one to highlight it,

00:09:10.517 --> 00:09:13.086
and overlay the Safe Area
on top of this view

00:09:13.086 --> 00:09:16.055
to illustrate where it would be.

00:09:16.055 --> 00:09:18.024
Now I'll keep extending
the visible range

00:09:18.024 --> 00:09:20.360
to pull more views
into the picture.

00:09:22.028 --> 00:09:25.165
What we're seeing now is that
the content view of the cells

00:09:25.165 --> 00:09:28.234
have been automatically
inset to the Safe Area.

00:09:28.234 --> 00:09:30.336
So this causes a discrepancy

00:09:30.336 --> 00:09:32.672
between the size
of the table cell,

00:09:32.672 --> 00:09:35.275
the one that goes
from edge to edge,

00:09:35.275 --> 00:09:37.076
and the content view
of the cell,

00:09:37.076 --> 00:09:38.745
which has been inset.

00:09:39.979 --> 00:09:41.448
I'll highlight
a few of the views

00:09:41.448 --> 00:09:43.550
that are involved here.

00:09:43.550 --> 00:09:45.618
But now this picture
is getting a bit busy,

00:09:45.618 --> 00:09:48.321
so let's simplify this
and label these views.

00:09:49.322 --> 00:09:53.026
By default, table cells
will inset their content views

00:09:53.026 --> 00:09:55.929
so that they are
inside the Safe Area.

00:09:55.929 --> 00:09:59.799
That insetting behavior is
something that you can control.

00:09:59.799 --> 00:10:01.601
In Xcode, you can use

00:10:01.601 --> 00:10:05.171
the Content View
Insets to Safe Area checkbox.

00:10:05.171 --> 00:10:08.441
There's a corresponding property
you can set in code as well.

00:10:09.609 --> 00:10:11.678
If you uncheck the checkbox,

00:10:11.678 --> 00:10:15.148
then the content view
will not be inset,

00:10:15.148 --> 00:10:18.685
and the content view
will now go from edge to edge.

00:10:19.686 --> 00:10:21.221
One final point here

00:10:21.221 --> 00:10:24.090
is that regardless
of the content view's insetting,

00:10:24.090 --> 00:10:26.759
the layout margins
in the content view

00:10:26.759 --> 00:10:30.597
will continue to be relative
to the Safe Area by default.

00:10:30.597 --> 00:10:33.299
Similar to
the content view insetting,

00:10:33.299 --> 00:10:35.201
there are properties
that give you control

00:10:35.201 --> 00:10:38.071
over the behavior
of these layout margins.

00:10:38.071 --> 00:10:39.939
You can get
more details about this

00:10:39.939 --> 00:10:43.243
and other margin-related options
in the documentation

00:10:43.243 --> 00:10:46.746
and WWDC videos which
I'll mention at the end.

00:10:47.847 --> 00:10:51.017
OK, now that we've seen how
table views position their cells

00:10:51.017 --> 00:10:53.620
with regard to the Safe Area,
let's go back to the code

00:10:53.620 --> 00:10:55.522
where we were setting
the background color

00:10:55.522 --> 00:10:57.390
on the header view.

00:10:57.390 --> 00:11:00.527
We can see that we're setting it
only on the content view,

00:11:00.527 --> 00:11:03.296
which is being inset
to the Safe Area.

00:11:04.531 --> 00:11:06.466
At this point, there are
a couple different ways

00:11:06.466 --> 00:11:08.535
we could fix this problem.

00:11:08.535 --> 00:11:09.502
One of them would be

00:11:09.502 --> 00:11:11.971
to disable the table view's
default behavior

00:11:11.971 --> 00:11:15.074
of insetting content views
to the Safe Area,

00:11:15.074 --> 00:11:17.010
but doing that
will affect everything else

00:11:17.010 --> 00:11:19.012
in our content view as well,

00:11:19.012 --> 00:11:21.814
and we'd lose this helpful
default behavior.

00:11:21.814 --> 00:11:23.816
Instead, the best solution here

00:11:23.816 --> 00:11:27.453
is to set the background color
of the background view,

00:11:27.453 --> 00:11:30.657
which, unlike the
inset content view,

00:11:30.657 --> 00:11:32.926
spans the full width of the cell

00:11:32.926 --> 00:11:35.361
regardless of any
Safe Area insets.

00:11:36.829 --> 00:11:39.832
With that change,
when we build and run,

00:11:39.832 --> 00:11:41.134
we go from this,

00:11:41.134 --> 00:11:45.171
where the header background
color doesn't go edge to edge,

00:11:45.171 --> 00:11:48.508
to this, where the colors
span the entire table

00:11:48.508 --> 00:11:51.911
but the content view
isn't changed at all.

00:11:51.911 --> 00:11:53.913
That looks much better.

00:11:55.114 --> 00:11:57.550
Those are three examples
of issues I encountered

00:11:57.550 --> 00:12:01.754
while updating the WWDC app
for iPhone X.

00:12:01.754 --> 00:12:03.590
They weren't difficult to fix,

00:12:03.590 --> 00:12:06.159
and mostly had to do
with landscape view.

00:12:06.159 --> 00:12:08.261
A few quick reminders.

00:12:08.261 --> 00:12:10.830
Linking against the iOS 11 SDK

00:12:10.830 --> 00:12:12.398
and including
a Launch Storyboard

00:12:12.398 --> 00:12:16.135
will enable the fullscreen
native resolution for your app.

00:12:16.135 --> 00:12:18.404
And while you may see
some issues in portrait,

00:12:18.404 --> 00:12:20.840
the majority will very likely
be in landscape

00:12:20.840 --> 00:12:24.410
so be sure to test all your UI
with the interface rotated,

00:12:24.410 --> 00:12:27.413
both to the left
and to the right.

00:12:27.413 --> 00:12:30.917
You'll avoid most issues
by respecting the Safe Areas.

00:12:30.917 --> 00:12:33.486
Auto Layout
and the safeAreaLayoutGuides

00:12:33.486 --> 00:12:36.956
will handle a lot of the layout
challenges automatically,

00:12:36.956 --> 00:12:38.925
but if you're doing
manual layout

00:12:38.925 --> 00:12:41.828
you do have access
to the Safe Area insets

00:12:41.828 --> 00:12:44.731
and can do whatever
calculations you need.

00:12:44.731 --> 00:12:48.635
This information is available
via the UIView class.

00:12:48.635 --> 00:12:50.703
It's also important
to not interfere with

00:12:50.703 --> 00:12:53.539
the Home indicator
at the bottom of the screen.

00:12:53.539 --> 00:12:55.174
For details about
the Home indicator

00:12:55.174 --> 00:12:59.012
and many of the other aspects
of designing for iPhone X,

00:12:59.012 --> 00:13:02.148
be sure to watch
the Designing for iPhone X video

00:13:02.148 --> 00:13:03.816
which has lots
of important details

00:13:03.816 --> 00:13:06.719
for bringing your app
to this new screen.

00:13:06.719 --> 00:13:11.591
There were also
a few key videos at WWDC 2017

00:13:11.591 --> 00:13:14.627
where we introduced
the Safe Area layout guides,

00:13:14.627 --> 00:13:17.530
talked about important
gesture handling changes,

00:13:17.530 --> 00:13:20.800
and how to take advantage
of new iOS 11 features

00:13:20.800 --> 00:13:24.637
like the integrated search bar
support, and much more.

00:13:24.637 --> 00:13:27.140
And of course, you can always
get more information

00:13:27.140 --> 00:13:31.310
at developer.apple.com
or on our Developer Forums.