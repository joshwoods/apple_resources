WEBVTT

00:00:11.270 --> 00:00:13.040
All right, welcome back.

00:00:13.170 --> 00:00:16.780
This is our last session of the day,
Hidden iOS 7 Development Gems.

00:00:16.810 --> 00:00:19.190
I am still Paul Marcos.

00:00:19.260 --> 00:00:23.570
And obviously we've been talking
all about iOS 7 all day today.

00:00:23.570 --> 00:00:29.110
So just a ton of new technology,
and I'm not here to talk about any of it.

00:00:29.210 --> 00:00:31.120
So at least not directly.

00:00:32.340 --> 00:00:34.810
So what this session is about, right,
this has been a long day.

00:00:34.810 --> 00:00:36.700
You've had a lot of
information to absorb.

00:00:36.700 --> 00:00:42.130
And instead of talking about
the APIs or new technology,

00:00:42.200 --> 00:00:46.350
I actually want to focus
this session on technique,

00:00:46.480 --> 00:00:51.680
right, how you use these APIs and things
that you can do to improve,

00:00:51.710 --> 00:00:55.100
you know,
what you do in your apps and how you

00:00:55.230 --> 00:01:00.670
develop them and how you can get the
most out of our APIs in your apps.

00:01:03.100 --> 00:13:16.400
[ Transcript missing ]

00:13:16.640 --> 00:13:19.060
Now the last one actually
isn't inside of Xcode,

00:13:19.060 --> 00:13:20.900
but it has to do with source control.

00:13:20.900 --> 00:13:23.000
It's actually a Git command.

00:13:23.170 --> 00:13:26.200
And if you haven't used Git,
it's a really great source

00:13:26.200 --> 00:13:28.860
control management system that
I encourage you to look at.

00:13:28.860 --> 00:13:29.940
It's very, very powerful.

00:13:44.340 --> 00:13:44.980
And what I'm talking about here is
just my favorite command in Git,

00:13:44.980 --> 00:13:45.490
which has to do with
searching a revision history.

00:13:45.490 --> 00:13:45.930
So the scenario for this
is you've got your app,

00:13:45.930 --> 00:13:46.980
you released 1.0, you did really well,
you released 1.1 and so on.

00:13:47.360 --> 00:13:48.800
And you're going on and
you're chugging along,

00:13:48.820 --> 00:13:50.610
making great progress
and implementing things.

00:13:50.610 --> 00:13:53.410
And you get up to some point and
you release a new test build of

00:13:53.410 --> 00:13:56.430
that latest version and you get
a bug report and somebody says,

00:13:56.480 --> 00:13:57.880
oh, hey, something just broke.

00:13:59.100 --> 00:14:00.370
It's like, all right,
I can deal with that.

00:14:01.010 --> 00:14:03.280
The problem is what they
just report was not the thing

00:14:03.280 --> 00:14:05.120
that you've been working on,
right?

00:14:05.120 --> 00:14:08.000
It's something that you haven't
touched like forever since the

00:14:08.030 --> 00:14:09.580
last major version of your app.

00:14:09.650 --> 00:14:10.570
So what the heck broke?

00:14:11.210 --> 00:14:15.060
Well, now your challenge becomes finding
where you introduce this regression.

00:14:15.060 --> 00:14:17.440
And one approach to doing
that is just simply,

00:14:17.440 --> 00:14:19.630
you know, the brute force linear search.

00:14:19.710 --> 00:14:21.770
Like, okay, well,
maybe it was my last check-in.

00:14:21.790 --> 00:14:23.350
Nope, maybe it was the one before that.

00:14:23.350 --> 00:14:24.260
Nope, and on and on.

00:14:24.880 --> 00:14:27.290
And ultimately,
you'd get way back to your 2.0 version,

00:14:27.290 --> 00:14:30.250
which, you know, I'm showing eight
convenient little bullets.

00:14:30.800 --> 00:14:31.660
Because they fit on a slide.

00:14:32.000 --> 00:14:34.900
But in reality,
it's probably more like 800 commits,

00:14:34.980 --> 00:14:37.020
right, especially if you have a team.

00:14:37.020 --> 00:14:40.820
So there's a better way of
doing this that's using Git.

00:14:41.290 --> 00:14:43.260
The idea would be, well,
this thing that broke,

00:14:43.320 --> 00:14:46.900
this arbitrary thing that broke, well,
you know, jump back to a major revision.

00:14:46.900 --> 00:14:48.760
Go back to your 2.0 version.

00:14:48.850 --> 00:14:49.930
Was it broken there?

00:14:49.930 --> 00:14:51.240
And I'll say no.

00:14:51.460 --> 00:14:52.560
So that's the green check.

00:14:52.650 --> 00:14:54.900
The bug doesn't exist in 2.0.

00:14:55.610 --> 00:14:59.330
So now Git can help you find
in between where that broke.

00:15:01.510 --> 00:15:04.300
And you do that by using
the git bisect command.

00:15:04.330 --> 00:15:08.040
And what git bisect does is
it performs or it assists,

00:15:08.040 --> 00:15:11.780
it facilitates in doing a binary
search through your revision history.

00:15:11.950 --> 00:15:14.880
And we all know how great
binary searches are.

00:15:14.890 --> 00:15:17.520
They cut times down in
orders of magnitude.

00:15:18.420 --> 00:15:22.600
So this is the type of thing that
you probably don't need very often,

00:15:22.600 --> 00:15:27.310
but when you do, it will save you a ton
of time and frustration.

00:15:27.480 --> 00:15:28.630
So it works something like this.

00:15:28.760 --> 00:15:30.000
So here's our scenario.

00:15:30.000 --> 00:15:31.620
We have the bug on the right-hand side.

00:15:31.620 --> 00:15:33.340
We know we tested 2.0.

00:15:33.340 --> 00:15:43.400
It doesn't exist there.

00:15:43.600 --> 00:24:34.500
[ Transcript missing ]

00:24:35.170 --> 00:24:40.940
If we go to see why this is here,
we go to Xcode and in this example,

00:24:40.940 --> 00:24:42.940
and you can absolutely
do this on your own,

00:24:43.060 --> 00:24:47.250
select the label that's in that table
cell and then look at the attributes.

00:24:47.260 --> 00:24:52.070
And what we see are there's a background
which is just set to the default color,

00:24:52.090 --> 00:24:56.610
which by default is clear,
meaning it's going to have transparency.

00:24:57.210 --> 00:24:59.250
And also the view is
not marked as opaque.

00:24:59.540 --> 00:25:03.050
So the fix in this case,
and in a lot of cases that I see,

00:25:03.050 --> 00:25:06.900
is really just as simple as changing
those two values to give the cell

00:25:06.900 --> 00:25:10.730
a solid background color and tell
iOS that it's an opaque view.

00:25:10.740 --> 00:25:13.940
And if you do that, in this case,
you go from running this,

00:25:14.050 --> 00:25:18.020
you make those changes, you rerun,
and now the view looks like this.

00:25:18.020 --> 00:25:22.600
And so you want to see
things turn green over time.

00:25:22.620 --> 00:25:26.000
Now this is a really common case,
these non-opaque views.

00:25:26.620 --> 00:25:26.660
Another very common case is the
view that's not marked as opaque.

00:25:26.940 --> 00:25:30.420
Another very common case is
images that have alpha in them.

00:25:30.420 --> 00:25:34.630
And the thing that gets people is you
look at your UI image view and it's

00:25:34.920 --> 00:25:38.760
marked as opaque and you're like,
that's going to be a green view,

00:25:38.760 --> 00:25:39.580
I know it.

00:25:39.700 --> 00:25:42.610
And then you run your app and you
turn this on and it's bright red.

00:25:42.620 --> 00:25:45.070
And you wonder,
why the heck is that happening?

00:25:45.090 --> 00:25:49.800
Well, if you go look at the artwork file,
right, the JPEG or the PNG,

00:25:49.800 --> 00:25:53.880
if the image file has alpha in it,
if it has an alpha channel,

00:25:53.880 --> 00:25:55.550
we will respect that.

00:25:55.690 --> 00:25:56.860
And even if there's a
lot of data in there,

00:25:56.860 --> 00:25:56.920
we're going to respect that.

00:25:56.920 --> 00:25:58.970
And even if there's no meaningful
data in it and it's not being

00:25:58.970 --> 00:26:03.140
used in a meaningful way,
we will enable transparency in the view.

00:26:03.140 --> 00:26:05.410
So that's a really easy fix
where you just go back to

00:26:05.410 --> 00:26:08.210
your artwork person and say,
you know, I need this image as an

00:26:08.210 --> 00:26:09.740
asset with no alpha channel.

00:26:09.740 --> 00:26:12.430
And then you can magically have
these red images turn green.

00:26:12.440 --> 00:26:16.380
And then the last place is if you're
doing custom drawing directly,

00:26:16.480 --> 00:26:19.460
if you use the clear color,
that's going to enable

00:26:19.460 --> 00:26:20.940
alpha in your views.

00:26:20.940 --> 00:26:24.580
So most of these are
really low-hanging fruit.

00:26:24.600 --> 00:26:26.430
And the challenge is identifying.

00:26:26.920 --> 00:26:28.320
Identifying where the problem is.

00:26:28.330 --> 00:26:29.980
And that's what the
simulator is good for.

00:26:29.980 --> 00:26:31.990
And you can turn on color-blended layers.

00:26:32.000 --> 00:26:35.880
I'll also add,
you can do this on a device as well.

00:26:35.880 --> 00:26:39.590
For the color-blended layers,
you generally get the

00:26:39.590 --> 00:26:41.260
same results on both.

00:26:41.430 --> 00:26:43.250
But, you know,
sometimes you want to do it on a

00:26:43.340 --> 00:26:46.700
device where you can actually see the
performance as well simultaneously.

00:26:46.700 --> 00:26:49.210
So you enable that in instruments.

00:26:49.230 --> 00:26:51.990
In the core animation
template in instruments,

00:26:52.010 --> 00:26:55.120
there's a set of debug options
there which overlap with

00:26:55.120 --> 00:26:56.900
the ones in the simulator.

00:26:56.900 --> 00:27:00.580
The side benefit of doing it in the
simulator is you can ask a coworker,

00:27:00.580 --> 00:27:02.420
hey, can I borrow your device?

00:27:02.460 --> 00:27:03.680
You plug it into your computer.

00:27:03.680 --> 00:27:05.580
You go turn on color-blended layers.

00:27:05.580 --> 00:27:06.500
You disconnect it.

00:27:06.520 --> 00:27:08.400
The red and green stays there.

00:27:08.400 --> 00:27:10.490
It's a persistent switch.

00:27:10.650 --> 00:27:11.380
Then you give it back to them.

00:27:11.380 --> 00:27:12.500
Then you know nothing about it.

00:27:12.540 --> 00:27:13.980
But, hey,
your device looks like it's broken.

00:27:13.980 --> 00:27:16.200
Okay.

00:27:16.200 --> 00:27:17.360
So that's color-blended layers.

00:27:17.360 --> 00:27:18.960
I'm not condoning that whatsoever.

00:27:18.960 --> 00:27:22.030
And those are the
simulator tips that I have.

00:27:22.040 --> 00:27:24.810
Just, you know,
a couple things for identifying

00:27:24.810 --> 00:27:26.800
problems in your app and adding.

00:27:26.880 --> 00:27:27.880
And then you can add some polish to them.

00:27:27.890 --> 00:27:33.480
So next up on the topic of performance,
I want to switch over to instruments.

00:27:33.500 --> 00:27:37.620
And the first thing I want to talk about
there is profiling background fetch.

00:27:37.640 --> 00:27:42.100
And this is actually kind of a
two-for-one tip where I talked about

00:27:42.220 --> 00:27:44.880
background fetch a couple sessions ago.

00:27:44.910 --> 00:27:47.920
And one of the important aspects
of background fetch is that

00:27:48.170 --> 00:27:50.120
it's somewhat nondeterministic.

00:27:50.120 --> 00:27:53.030
It's driven by iOS based on
a couple different things

00:27:53.260 --> 00:27:56.860
and things that you can't,
as an app developer, necessarily drive.

00:27:56.860 --> 00:27:57.860
So you can't directly control.

00:27:57.860 --> 00:28:00.650
So that raises the question
of how do you actually,

00:28:00.690 --> 00:28:01.860
like, test that?

00:28:01.880 --> 00:28:03.850
How do you invoke background fetch?

00:28:04.040 --> 00:28:05.850
Well, it turns out there's
two ways you can do it.

00:28:05.860 --> 00:28:07.860
One is in Xcode.

00:28:07.860 --> 00:28:09.720
And then the second one,
which I think is the

00:28:09.720 --> 00:28:13.710
more interesting case,
is to use the time profile

00:28:13.920 --> 00:28:15.860
trace in instruments.

00:28:15.860 --> 00:28:18.590
And under the instrument menu,
there's simulate background

00:28:18.590 --> 00:28:19.860
fetch down at the bottom.

00:28:19.860 --> 00:28:21.830
And the reason I think
that's more interesting is,

00:28:21.830 --> 00:28:24.860
well, one, it triggers a background fetch
when you're running your app.

00:28:24.860 --> 00:28:25.860
So that's really helpful.

00:28:25.860 --> 00:28:26.800
You can test it.

00:28:26.840 --> 00:28:30.840
But it triggers it in the
context of time profiling.

00:28:30.840 --> 00:28:35.840
So you can actually see the work that
is going on while you're fetching.

00:28:35.840 --> 00:28:38.180
And because you have a
small amount of time,

00:28:38.180 --> 00:28:42.120
you want to optimize that work that
you're doing and make sure that

00:28:42.120 --> 00:28:47.180
you're only doing the necessary
work for doing a background fetch.

00:28:47.500 --> 00:30:17.800
[ Transcript missing ]

00:30:17.880 --> 00:30:20.760
And then it's at this point that
I went and selected the menu item

00:30:20.760 --> 00:30:23.060
for simulate background fetch.

00:30:23.300 --> 00:30:29.470
And the next flag that I see is now the
app has been woken up in the background,

00:30:29.470 --> 00:30:30.790
but it hasn't come to the foreground.

00:30:30.790 --> 00:30:32.220
So I'm running in the background.

00:30:32.220 --> 00:30:37.470
And between here and the next flag,
which if I go click next again,

00:30:37.540 --> 00:30:41.440
now the app is suspended once again.

00:30:41.440 --> 00:30:44.320
So we transitioned into running,
but always in the background.

00:30:45.320 --> 00:30:51.660
And between those two flags is where
the background fetch is being performed.

00:30:51.660 --> 00:30:55.730
And that would be the area you want
to zoom in on to really identify what

00:30:55.730 --> 00:31:00.090
work is being done and is it only the
minimum amount of work that I need.

00:31:00.700 --> 00:31:03.070
So that's how you can
profile background fetch,

00:31:03.150 --> 00:31:06.090
invoke it,
and actually see what work is being done.

00:31:06.100 --> 00:31:09.940
And then the next step that
you commonly would want to use

00:31:09.940 --> 00:31:12.300
is inspecting what it's doing.

00:31:12.820 --> 00:31:14.300
And so that brings me to call tree.

00:31:14.990 --> 00:31:16.890
And so that brings me to call tree.

00:31:17.000 --> 00:31:20.130
And I want to show you how, well,
first what a call tree is.

00:31:20.200 --> 00:31:23.540
And that's this area down here
in the bottom right-hand corner

00:31:23.540 --> 00:31:25.270
of the time profile template.

00:31:25.410 --> 00:31:28.030
And what it's showing you
is over a period of time,

00:31:28.030 --> 00:31:31.370
instruments is stopping, you know,
very fast frequency,

00:31:31.370 --> 00:31:35.630
stopping your app and capturing
the backtraces of all the threads.

00:31:36.360 --> 00:31:39.390
And then we unify them,
we kind of lay them on top of each other,

00:31:39.440 --> 00:31:42.600
and we get this tree representation
where you see main at the top

00:31:42.600 --> 00:31:44.280
and then kind of the call tree.

00:31:44.280 --> 00:31:48.290
of what your app is doing over time.

00:31:48.490 --> 00:31:51.560
So now this is a different example than
the previous one that I was showing.

00:31:51.560 --> 00:31:55.740
And this is actually an example
where I was working on the WWDC app,

00:31:55.870 --> 00:31:58.330
which is one thing that the
evangelism team works on.

00:31:58.340 --> 00:32:02.040
And I'd been working on the new
iPad version where we have a

00:32:02.040 --> 00:32:06.380
new grid view that you can see
the schedule for the conference.

00:32:06.400 --> 00:32:08.490
And in particular,
I was working on this one method that

00:32:08.490 --> 00:32:10.460
I was concerned about the performance,
right?

00:32:10.460 --> 00:32:13.810
In the back of my mind, I was like, hmm,
this code might actually be slow.

00:32:13.820 --> 00:32:15.200
So I wanted to find out.

00:32:15.440 --> 00:32:18.160
And I used the time
profiler to take this trace.

00:32:18.160 --> 00:32:20.580
And down here at the bottom,
I can see this method that

00:32:20.580 --> 00:32:23.000
I was concerned about,
this apply layout attributes.

00:32:23.000 --> 00:32:26.050
And if I just looked
at this initial view,

00:32:26.110 --> 00:32:30.750
I'd see, well, okay,
it was taking about 0.7 seconds,

00:32:30.820 --> 00:32:34.920
or sorry,
0.7% of the time that I profiled.

00:32:34.940 --> 00:32:37.520
And you think, well, okay,
that seems like a really small amount.

00:32:37.560 --> 00:32:40.570
But I had a hunch that this
code was being called from

00:32:40.570 --> 00:32:43.540
multiple different places,
actually more than a

00:32:43.570 --> 00:32:45.190
hunch I knew that it was.

00:32:45.260 --> 00:32:48.740
And what I wanted to know is,
what is the total amount of

00:32:48.740 --> 00:32:51.010
time that this method is taking?

00:32:51.020 --> 00:32:53.480
And that's what you can
do using call trees.

00:32:53.480 --> 00:32:59.510
And you can do it by using these
view options on the left-hand side.

00:32:59.560 --> 00:33:01.630
Now, this is what you get by default.

00:33:01.760 --> 00:33:05.270
And I'm going to go through a series of
kind of checking and unchecking items

00:33:05.270 --> 00:33:09.930
in here and explain what's happening
to the call tree along the way.

00:33:10.100 --> 00:33:13.800
The first thing that I want to do is
I'm going to uncheck this separate by

00:33:13.800 --> 00:33:17.790
thread checkbox because I want to know
the total amount of time regardless

00:33:17.790 --> 00:33:19.280
of where it's being called from.

00:33:19.280 --> 00:33:21.160
So I don't care about
what thread we're in.

00:33:21.160 --> 00:33:23.160
So uncheck separate by thread.

00:33:23.160 --> 00:33:26.120
And now you see the outline view.

00:33:26.120 --> 00:33:28.670
This isn't a particularly
good example of it,

00:33:28.760 --> 00:33:32.080
but the outline view is no longer
separating threads out at the

00:33:32.120 --> 00:33:35.510
top level and everything is in
a single branch of the tree.

00:33:36.520 --> 00:33:39.680
So the next thing I want to do is
I want to invert the call tree.

00:33:39.680 --> 00:33:44.190
And this is where really the heavy
lifting of this operation comes in.

00:33:44.200 --> 00:33:49.540
And what that will do is instead
of showing the call tree organized

00:33:49.540 --> 00:33:54.090
by the caller of a method,
it will turn the tree upside down

00:33:54.090 --> 00:33:59.090
and show the cumulative amount of
time regardless of who called it.

00:33:59.770 --> 00:34:02.060
So if you think about,
depending how you think about

00:34:02.060 --> 00:34:05.500
which direction a tree is,
it just turns it around and shows you

00:34:05.500 --> 00:34:05.500
the number of times it's been called.

00:34:05.500 --> 00:34:05.500
So if you think about how you think
about which direction a tree is,

00:34:05.500 --> 00:34:05.500
it just turns it around and shows you
the number of times it's been called.

00:34:05.500 --> 00:34:08.250
So if you think about how you think
about which direction a tree is,

00:34:08.320 --> 00:34:11.630
it just turns it around and shows you
the number of times it's been called.

00:34:11.630 --> 00:34:11.630
So if you think about how you think
about which direction a tree is,

00:34:11.630 --> 00:34:11.630
it just turns it around and shows you
the number of times it's been called.

00:34:11.910 --> 00:34:15.560
Now then you look at this and say, OK,
well, what bubbled up to the top here

00:34:15.840 --> 00:34:17.540
is Objective-C message send.

00:34:17.540 --> 00:34:21.270
That's the inner function that
does the Objective-C messaging.

00:34:21.460 --> 00:34:24.970
And that's not really helpful,
because that's not my code.

00:34:24.980 --> 00:34:26.270
That's not what I'm looking for.

00:34:27.460 --> 00:34:30.280
So I kind of want to get rid
of all the system stuff here,

00:34:30.360 --> 00:34:32.130
because I don't care about that.

00:34:32.130 --> 00:34:35.290
It's almost noise to me at this
point in my hunt for finding how

00:34:35.290 --> 00:34:37.340
much time this method is taking.

00:34:38.070 --> 00:34:41.180
So next thing I'll check is
this hide system libraries,

00:34:41.180 --> 00:34:44.070
which all that's going to
do is remove all the system

00:34:44.070 --> 00:34:48.300
libraries out of the call tree,
and it reduces the call

00:34:48.300 --> 00:34:51.940
tree down to just your code,
right?

00:34:51.940 --> 00:34:54.040
Just the code that exists
in the application.

00:34:54.450 --> 00:34:56.230
So now I get this.

00:34:56.790 --> 00:34:58.340
So now I get this code where
I recognize all of this.

00:34:58.340 --> 00:34:59.220
It's meaningful to me.

00:34:59.220 --> 00:35:00.090
I can act on it.

00:35:00.190 --> 00:35:03.850
And if I actually now look at
what bubbled up to the top,

00:35:04.080 --> 00:35:06.270
it's actually that method
that I'm concerned about.

00:35:06.800 --> 00:35:09.420
So now I look at it,
and we have apply layout attributes.

00:35:09.470 --> 00:35:14.280
And when I compare this total amount
of cumulative time that method took

00:35:14.330 --> 00:35:20.000
versus the first single instance of it,
I see it's by a factor of eight, right?

00:35:20.720 --> 00:35:23.250
So now I'm looking at 6% of
the time spent in my app,

00:35:23.250 --> 00:35:24.950
and that's a sizable number.

00:35:25.040 --> 00:35:26.440
That's a number I can go and say.

00:35:27.110 --> 00:35:29.050
All right,
what am I doing in that method,

00:35:29.130 --> 00:35:30.640
and how can I make it faster?

00:35:31.400 --> 00:35:35.950
So call trees are just a great way
to get a different view of your data.

00:35:36.100 --> 00:48:09.700
[ Transcript missing ]

00:48:09.860 --> 00:48:13.800
Here's an example of an
app that's been localized.

00:48:13.800 --> 00:48:18.340
And if you just want to switch
from one localization to another,

00:48:18.510 --> 00:48:22.420
it can be as simple as just having
some different schemes in your project.

00:48:22.460 --> 00:48:25.730
And then you can easily switch
from one scheme to another,

00:48:25.730 --> 00:48:28.820
which will switch you from
one language to another.

00:48:28.820 --> 00:48:32.380
So from run to run of your app,
you can jump between languages,

00:48:32.480 --> 00:48:35.320
and it makes it a really
lightweight process.

00:48:36.130 --> 00:48:38.710
So let me show you how
you configure these.

00:48:38.930 --> 00:48:43.900
You do so in Xcode Scheme Editor,
and you would probably pick just

00:48:43.900 --> 00:48:45.510
your default scheme that you have.

00:48:45.570 --> 00:48:47.900
And then you would duplicate it.

00:48:47.950 --> 00:48:49.830
So down here in the
bottom left of this panel,

00:48:49.830 --> 00:48:51.140
you hit Duplicate Scheme.

00:48:51.140 --> 00:48:54.480
That'll give you a new scheme
with all the same configurations.

00:48:55.220 --> 00:48:58.270
But then you would come in,
and you would add some arguments

00:48:58.270 --> 00:48:59.850
that are passed on launch.

00:48:59.850 --> 00:49:02.360
And there's two arguments
that you would want to set.

00:49:02.920 --> 00:49:05.160
The first is this Apple Languages.

00:49:06.120 --> 00:49:08.160
Which is an array,
but you would specify just

00:49:08.160 --> 00:49:10.650
a single language code,
and that's the language

00:49:10.650 --> 00:49:12.200
that the app will be run in.

00:49:13.000 --> 00:49:15.760
And then the second one is Apple Locale.

00:49:16.040 --> 00:49:19.660
And that actually, in the UI of settings,
that's actually going to

00:49:19.680 --> 00:49:21.140
represent the region format.

00:49:21.210 --> 00:49:24.200
So affecting things
like number formatting,

00:49:24.200 --> 00:49:26.120
date formatting, stuff like that.

00:49:26.660 --> 00:49:28.630
These are separate toggles that you have.

00:49:28.680 --> 00:49:31.960
So when you set these,
now you can just go through and

00:49:31.960 --> 00:49:34.420
duplicate the scheme numerous times.

00:49:34.440 --> 00:49:34.440
And set it up in a way that
it's not going to be a problem.

00:49:34.440 --> 00:49:34.440
So you can do that.

00:49:35.460 --> 00:49:40.400
And set one for French,
or you can add Chinese, or Japanese,

00:49:40.480 --> 00:49:44.500
and Russian, whatever languages that
you're currently targeting.

00:49:45.170 --> 00:49:48.320
So it just makes it really,
really easy to get this pop-up

00:49:48.320 --> 00:49:50.220
that you can jump back and forth.

00:49:50.370 --> 00:49:54.590
So ease the development process
for doing localized apps.

00:49:55.390 --> 00:49:58.680
So that's the last tip that
I had for the frameworks,

00:49:58.830 --> 00:50:02.710
and actually is the last tip
that I have for this session.

00:50:03.560 --> 00:50:03.560
So hopefully, you'll be able to use
it in your own apps.

00:50:04.130 --> 00:50:08.230
Hopefully, did everybody learn at least
one thing in the session?

00:50:08.510 --> 00:50:08.750
Yes?

00:50:09.010 --> 00:50:09.400
Excellent.

00:50:09.410 --> 00:50:11.220
So I think my job here is done.

00:50:11.900 --> 00:50:13.270
And actually, our day is done.

00:50:13.380 --> 00:50:16.670
So I just want to say thank you so
much for spending the day here with us.

00:50:18.520 --> 00:50:20.440
Take care.