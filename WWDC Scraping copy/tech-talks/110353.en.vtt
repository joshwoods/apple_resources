WEBVTT

00:00:00.901 --> 00:00:03.604
Hello, my name is Tim Chien.

00:00:03.604 --> 00:00:07.107
I'm an engineer on
the MapKit team here at Apple,

00:00:07.107 --> 00:00:09.810
working on MapKit JS.

00:00:09.810 --> 00:00:13.013
Today I'm going to talk about
several exciting new features

00:00:13.013 --> 00:00:16.617
you can use to deliver
the best possible experience

00:00:16.617 --> 00:00:22.689
when integrating MapKit JS
with your web application.

00:00:22.689 --> 00:00:26.693
Since the introduction
of MapKit JS in 2018,

00:00:26.693 --> 00:00:31.164
we have worked tirelessly
adding new features every year.

00:00:31.164 --> 00:00:35.035
With that, MapKit JS has
become an indispensable part

00:00:35.035 --> 00:00:39.172
of Apple's web offering,
integrated into many websites

00:00:39.172 --> 00:00:44.645
like in our own
Find My servers on icloud.com,

00:00:44.645 --> 00:00:48.715
and third-party websites
like DuckDuckGo,

00:00:48.715 --> 00:00:52.052
and a property search
website in Greece.

00:00:52.052 --> 00:00:54.454
You'll notice this website
is taking advantage

00:00:54.454 --> 00:00:59.993
of MapKit JS's ability
to localize the map features.

00:00:59.993 --> 00:01:04.932
We made it super easy to adopt
MapKit JS in any web application

00:01:04.932 --> 00:01:08.302
with a simple
include and initialization.

00:01:08.302 --> 00:01:11.405
However, we want to provide you
the flexibility

00:01:11.405 --> 00:01:14.007
to adopt MapKit JS in the manner

00:01:14.007 --> 00:01:18.178
that optimizes the performance
of your application.

00:01:18.178 --> 00:01:23.583
So starting this year, we have
turned our eyes to performance

00:01:23.583 --> 00:01:27.487
and looked at how
we could make your pages

00:01:27.487 --> 00:01:29.856
more responsive,

00:01:29.856 --> 00:01:32.092
faster to load,

00:01:32.092 --> 00:01:35.462
and in a manner designed
to give you more control,

00:01:35.462 --> 00:01:39.399
enabling you to include only
the functionalities you need

00:01:39.399 --> 00:01:41.568
when you need them.

00:01:41.568 --> 00:01:44.504
Today, I'm happy to introduce
three new features

00:01:44.504 --> 00:01:48.175
that will just do that,
including a new markup

00:01:48.175 --> 00:01:51.845
for high-performance
MapKit JS loading,

00:01:51.845 --> 00:01:56.717
the ability to load additional
MapKit JS libraries on demand,

00:01:56.717 --> 00:02:00.354
and finally, a new way
for an application to signal

00:02:00.354 --> 00:02:05.993
the desired map features
to present to the user.

00:02:05.993 --> 00:02:09.196
Now to demonstrate how these
new features can improve

00:02:09.196 --> 00:02:12.299
your web application,
let's say you're building

00:02:12.299 --> 00:02:16.403
an interactive treasure map
for your fellow pirates.

00:02:16.403 --> 00:02:20.874
You have adopted the default
implementation of MapKit JS.

00:02:20.874 --> 00:02:25.746
However, when viewing this page
over the lousy pirate ship Wi-Fi

00:02:25.746 --> 00:02:29.282
it takes too long to load and
the user has to wait too long

00:02:29.282 --> 00:02:34.021
for the map to appear,
making your shipmates impatient.

00:02:34.021 --> 00:02:36.923
So to prevent a mutiny,
you can use

00:02:36.923 --> 00:02:41.762
the new high-performance
MapKit JS loading markup.

00:02:41.762 --> 00:02:43.730
It swaps the default
implementation

00:02:43.730 --> 00:02:47.501
for an expanded markup with
additional properties you'll use

00:02:47.501 --> 00:02:50.303
to tune your web app.

00:02:50.303 --> 00:02:54.608
First, MapKit JS now offers
a new JavaScript bundle,

00:02:54.608 --> 00:02:59.513
market.core.js, that contains
only the minimum amount of code

00:02:59.513 --> 00:03:02.649
to get yourself started.

00:03:02.649 --> 00:03:06.553
Next, we want to let MapKit JS
know the subset of features

00:03:06.553 --> 00:03:08.388
we will need.

00:03:08.388 --> 00:03:11.291
Here, we specify
just the map library,

00:03:11.291 --> 00:03:16.696
which is the minimum feature
set to show an interactive map.

00:03:16.696 --> 00:03:19.366
We will prevent MapKit JS
from blocking the page load

00:03:19.366 --> 00:03:22.035
by using the async attribute

00:03:22.035 --> 00:03:26.306
and invoke a callback specified
by data callback attribute

00:03:26.306 --> 00:03:28.809
when it finishes loading.

00:03:28.809 --> 00:03:32.646
Since MapKit JS no longer
blocks the page from loading,

00:03:32.646 --> 00:03:35.115
your web app should
assert its readiness

00:03:35.115 --> 00:03:39.553
before assessing its interfaces
for the first time.

00:03:39.553 --> 00:03:42.489
As an example,
here is an async function

00:03:42.489 --> 00:03:44.925
that will resolve
to the MapKit interface

00:03:44.925 --> 00:03:48.128
when MapKit JS is ready.

00:03:48.128 --> 00:03:50.730
As always,
MapKit JS is available

00:03:50.730 --> 00:03:55.669
on the global window object
as soon as it has been loaded.

00:03:55.669 --> 00:03:58.338
If the MapKit object
is undefined,

00:03:58.338 --> 00:04:02.576
that means MapKit JS
has not been loaded yet.

00:04:02.576 --> 00:04:05.479
Additionally, we want to check
if the initial libraries

00:04:05.479 --> 00:04:07.781
have been loaded.

00:04:07.781 --> 00:04:09.916
Recall that we asked
for the map library

00:04:09.916 --> 00:04:14.588
in the markup using
the data library's attribute.

00:04:14.588 --> 00:04:18.258
Failing either of the two
tests means the callback set

00:04:18.258 --> 00:04:22.863
using the data callback
attribute has not been invoked.

00:04:22.863 --> 00:04:25.432
Here we convert
a callback into a promise

00:04:25.432 --> 00:04:29.102
for our async function
and clean up the callback

00:04:29.102 --> 00:04:31.938
right after promise resolution.

00:04:31.938 --> 00:04:34.508
With that, we have guaranteed
that MapKit JS

00:04:34.508 --> 00:04:37.844
is ready to roll
when this feature returns.

00:04:37.844 --> 00:04:40.847
Now, back to the syntax.

00:04:40.847 --> 00:04:42.916
There are some other
useful attributes

00:04:42.916 --> 00:04:45.552
in our high-performance markup,

00:04:45.552 --> 00:04:47.554
including the crossorigin
attribute

00:04:47.554 --> 00:04:52.359
that allows the browser to reuse
a single HTTP/2 connection

00:04:52.359 --> 00:04:56.329
for all the requests going
to the MapKit JS CDN.

00:04:56.329 --> 00:04:59.733
We would also like MapKit JS
to initialize itself

00:04:59.733 --> 00:05:03.537
as soon as it has
the opportunity to do so.

00:05:03.537 --> 00:05:06.006
We can achieve that
by setting an initial token

00:05:06.006 --> 00:05:07.908
in the markup.

00:05:07.908 --> 00:05:12.479
Piece it together and we will
make our page load even faster,

00:05:12.479 --> 00:05:15.148
but we are not there yet.

00:05:18.518 --> 00:05:21.421
Since we only asked
for the map library,

00:05:21.421 --> 00:05:24.691
we would need to load the
annotations library to be able

00:05:24.691 --> 00:05:30.197
to put our pirate ship
and treasures back on the map.

00:05:30.197 --> 00:05:34.968
And that's where our second
optimization comes in handy.

00:05:34.968 --> 00:05:40.173
A new method is offered
just for that MapKit download.

00:05:40.173 --> 00:05:44.311
It loads additional libraries
asynchronously on demand.

00:05:44.311 --> 00:05:47.781
And if any library you load
requires another,

00:05:47.781 --> 00:05:51.952
it will be handled
automatically.

00:05:51.952 --> 00:05:54.788
And here it is in action.

00:05:54.788 --> 00:05:56.990
Simply call
MapKit download method

00:05:56.990 --> 00:06:01.461
to load the annotations library.

00:06:01.461 --> 00:06:04.464
Add a listener
for the load event,

00:06:04.464 --> 00:06:09.102
then add your annotation
when it is called.

00:06:09.102 --> 00:06:13.006
And of course, you can load
more than annotations.

00:06:13.006 --> 00:06:17.544
For example, services encompass
all services APIs

00:06:17.544 --> 00:06:20.647
like search and geocoder.

00:06:20.647 --> 00:06:23.583
Full map loads
all the features available

00:06:23.583 --> 00:06:26.453
on the MapKit map class.

00:06:26.453 --> 00:06:33.293
And that includes basic map,
overlays, annotations,

00:06:33.293 --> 00:06:36.630
and user location display.

00:06:36.630 --> 00:06:41.401
And GeoJSON loads
the GeoJSON importer.

00:06:45.071 --> 00:06:48.541
Now, this is a good
loading experience,

00:06:48.541 --> 00:06:52.245
but we can do
even better than this.

00:06:52.245 --> 00:06:56.449
This is the third feature
we are going to introduce today:

00:06:56.449 --> 00:07:00.887
prioritized map start-up.

00:07:00.887 --> 00:07:04.391
With the new
load priority property,

00:07:04.391 --> 00:07:07.560
we can instruct MapKit JS
to show points of interest

00:07:07.560 --> 00:07:11.865
sooner to give feral
pirates a better head start.

00:07:11.865 --> 00:07:14.067
When setting the load priority,

00:07:14.067 --> 00:07:19.873
you should cater to the best
experience that your user needs.

00:07:19.873 --> 00:07:24.044
There are three load priority
options available.

00:07:24.044 --> 00:07:26.680
Points of Interest
instructs MapKit map

00:07:26.680 --> 00:07:29.816
to show the map labels
and points of interest sooner,

00:07:29.816 --> 00:07:32.652
even before your annotations.

00:07:32.652 --> 00:07:34.821
Land Cover, on the other hand,

00:07:34.821 --> 00:07:40.927
will service just the land
cover, roads, and borders.

00:07:40.927 --> 00:07:43.863
As these options will interfere
with some map behaviors

00:07:43.863 --> 00:07:45.198
during start-up,

00:07:45.198 --> 00:07:49.803
like rotation or precise
map region of the viewport,

00:07:49.803 --> 00:07:52.105
you can turn off
load priority altogether

00:07:52.105 --> 00:07:55.809
by setting it to none.

00:07:55.809 --> 00:07:59.112
And here is what it
looks like in action.

00:07:59.112 --> 00:08:02.549
Simply use load priority
in the map constructor option

00:08:02.549 --> 00:08:05.885
to specify the desired priority.

00:08:05.885 --> 00:08:11.124
Here we ask MapKit map to show
the points of interest first.

00:08:15.128 --> 00:08:19.733
Now that's an even better
loading experience.

00:08:19.733 --> 00:08:22.435
Today, we introduced
three new features

00:08:22.435 --> 00:08:27.207
designed to improve the map load
experience of your application.

00:08:27.207 --> 00:08:29.609
We believe that you can
integrate MapKit JS

00:08:29.609 --> 00:08:32.512
while ensuring that the overall
user experience

00:08:32.512 --> 00:08:36.082
remains seamless and unimpaired.

00:08:36.082 --> 00:08:37.784
For your existing application,

00:08:37.784 --> 00:08:41.221
feel free to adopt these
new features gradually,

00:08:41.221 --> 00:08:44.190
as each will bring
its own benefit.

00:08:44.190 --> 00:08:46.760
Be sure to check out
the detailed documentation

00:08:46.760 --> 00:08:50.530
and the Maps Server API
session shown below.

00:08:50.530 --> 00:08:53.032
We look forward to seeing
how you take advantage

00:08:53.032 --> 00:08:55.201
of these new features.

00:08:55.201 --> 00:08:57.003
Thank you.