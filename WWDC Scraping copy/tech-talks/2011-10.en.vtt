WEBVTT

00:00:23.060 --> 00:00:25.430
Hello, I'm Allan Schaffehr,
the game technologies

00:00:25.430 --> 00:00:26.740
evangelist at Apple.

00:00:26.910 --> 00:00:30.020
There's a new framework
in iOS 5 called GLKit,

00:00:30.260 --> 00:00:33.780
which can help you to move your
apps onto the programmable graphics

00:00:33.780 --> 00:00:36.720
pipeline enabled by OpenGL ES 2.0.

00:00:36.850 --> 00:00:39.260
So in this video,
I'll introduce GLKit and

00:00:39.260 --> 00:00:40.970
its four main components.

00:00:41.080 --> 00:00:43.980
The first are some new classes
to integrate OpenGL ES into

00:00:43.980 --> 00:00:47.560
the view hierarchy and
control your rendering loop.

00:00:47.670 --> 00:00:51.940
The second is a texture loader supporting
a variety of formats that takes all

00:00:52.010 --> 00:00:54.200
the work out of loading textures.

00:00:54.320 --> 00:00:57.470
The third is a math library
that's blazing fast.

00:00:57.580 --> 00:01:01.670
And fourth is an effects library
to help you move existing code

00:01:01.670 --> 00:01:04.570
from OpenGL ES 1.1 to 2.0.

00:01:04.680 --> 00:01:06.070
So there's a lot to cover.

00:01:06.300 --> 00:01:07.480
Let's get started.

00:01:08.350 --> 00:01:13.980
So GLKit will help you create
OpenGL ES 2.0-based apps more easily,

00:01:13.980 --> 00:01:17.320
and this is going to give your
apps more artistic headroom.

00:01:17.320 --> 00:01:21.590
I get asked all the time about the
benefits of moving to OpenGL ES 2.0,

00:01:21.670 --> 00:01:23.900
and here's what it's really about.

00:01:24.330 --> 00:01:29.840
When you combine this API with the
advances in the hardware on iOS,

00:01:29.840 --> 00:01:33.000
you open the door to
more advanced effects,

00:01:33.000 --> 00:01:36.550
more realism,
and amazing-looking visuals like

00:01:36.550 --> 00:01:38.570
in the apps you've just seen.

00:01:38.580 --> 00:01:42.840
So that's what this talk is all about,
introducing you to GLKit and

00:01:42.970 --> 00:01:48.070
helping you understand how you can
move your apps onto OpenGL ES 2.0.

00:01:49.440 --> 00:01:51.860
GLKit consists of four major parts.

00:01:52.010 --> 00:01:55.830
The first part provides new classes for
managing your rendering and draw loop,

00:01:56.010 --> 00:01:58.240
the GLK View and GLK View Controller.

00:01:58.240 --> 00:02:01.580
These make OpenGL ES a
first-class citizen in the

00:02:01.580 --> 00:02:06.390
display system and view hierarchy,
with all the semantics and behaviors

00:02:06.390 --> 00:02:08.550
you're familiar with from UIKit.

00:02:08.600 --> 00:02:12.760
The view handles its drawing and
handles all the setup of frame buffers

00:02:12.760 --> 00:02:15.010
and render buffers and so on for you.

00:02:15.480 --> 00:02:18.430
The view controller integrates
into the system to provide

00:02:18.470 --> 00:02:22.340
you with a rendering loop,
handle display orientation changes,

00:02:22.390 --> 00:02:24.050
backgrounding, and so on.

00:02:24.290 --> 00:02:26.180
The second part is a texture loader.

00:02:26.440 --> 00:02:28.950
Almost every OpenGL ES app
loads textures,

00:02:28.950 --> 00:02:32.300
and this was another aspect of
OpenGL ES that had been left to

00:02:32.300 --> 00:02:34.570
developers to implement on their own.

00:02:34.800 --> 00:02:38.800
So previously, this meant loading the
texture as a UI image,

00:02:38.800 --> 00:02:42.480
converting it to a CG image,
and then giving OpenGL ES a

00:02:42.480 --> 00:02:43.880
copy of that data.

00:02:44.180 --> 00:02:46.740
All that was prone to
memory overconsumption,

00:02:46.740 --> 00:02:50.440
and it increased your startup time
because most developers were doing

00:02:50.440 --> 00:02:52.080
all that work on their main thread.

00:02:53.890 --> 00:02:56.270
Well,
now we're providing a texture loader

00:02:56.300 --> 00:03:01.000
that simplifies all of this and lets you
load textures in a variety of formats

00:03:01.340 --> 00:03:03.640
with just a couple of lines of code.

00:03:03.730 --> 00:03:07.890
And it can leverage blocks and
Grand Central Dispatch to move

00:03:07.890 --> 00:03:10.520
the loading off your main thread.

00:03:10.610 --> 00:03:15.080
The third part is a huge
math library called GLK Math.

00:03:15.190 --> 00:03:19.260
So this is a high-performance
math library for 3D graphics.

00:03:19.320 --> 00:03:23.300
It provides vectors, matrices,
and quaternions,

00:03:23.300 --> 00:03:27.240
and all the math operations you
typically would need for those objects.

00:03:27.280 --> 00:03:32.180
And it's also providing a matrix stack,
which is really helpful for those of

00:03:32.300 --> 00:03:35.680
you transitioning from ES 1.1 to 2.0.

00:03:35.740 --> 00:03:39.390
This was another thing that had been left
to developers to implement themselves,

00:03:39.530 --> 00:03:41.620
but now you can just use this library.

00:03:41.680 --> 00:03:44.120
It'll make that a much easier transition.

00:03:44.180 --> 00:03:47.610
And finally,
the fourth part is an effects library.

00:03:47.750 --> 00:03:49.260
The main feature this provides
is a very simple interface.

00:03:49.260 --> 00:03:53.180
It provides a group of effects
that implement the features of

00:03:53.180 --> 00:03:57.240
the fixed function pipeline,
but using shaders.

00:03:57.240 --> 00:04:01.300
It gives you an almost one-for-one
mapping for the code that you might

00:04:01.300 --> 00:04:06.140
currently have with a replacement
that's using OpenGL ES 2.0.

00:04:06.140 --> 00:04:09.620
And then this brings your app
up to the level where it becomes

00:04:09.790 --> 00:04:13.920
interoperable with other shaders
that you might want to develop.

00:04:13.920 --> 00:04:16.680
So now let's dive into
each area in more detail.

00:04:16.680 --> 00:04:19.260
I'll start with the
GLK View and View Controller.

00:04:19.260 --> 00:04:25.260
The GLK View provides your app with a
view directly compatible with OpenGL ES.

00:04:25.450 --> 00:04:28.650
It's a UIView subclass,
so you get all the familiar

00:04:28.650 --> 00:04:31.980
behavior of normal views,
but what it adds is all the

00:04:31.980 --> 00:04:34.280
handling of your drawable surfaces.

00:04:34.550 --> 00:04:37.500
Your color render buffer,
your depth buffer, stencil,

00:04:37.690 --> 00:04:40.610
multi-sampling,
and the best practices for discarding

00:04:40.610 --> 00:04:42.190
buffers at the end of the frame.

00:04:42.510 --> 00:04:46.550
And this replaces dozens of
lines of code from the old

00:04:46.550 --> 00:04:50.120
OpenGL ES application template,
so you don't have to

00:04:50.130 --> 00:04:51.260
do all this manually.

00:04:51.260 --> 00:04:55.260
Now you just set the properties you want,
and the class takes care of the rest.

00:04:55.260 --> 00:04:59.050
It also provides you with two
options for drawing its content.

00:04:59.300 --> 00:05:03.740
You can subclass GLK View and
override DrawRect,

00:05:03.890 --> 00:05:08.600
or you can set up some other object
as a delegate and have that object

00:05:08.940 --> 00:05:11.090
implement GLK View Draw in Rect.

00:05:11.280 --> 00:05:15.260
Now the reason for having both
options is that many game engines,

00:05:15.280 --> 00:05:19.260
for example,
prefer to use one method or the other,

00:05:19.260 --> 00:05:19.260
and this provides everyone with that.

00:05:19.260 --> 00:05:21.190
that flexibility.

00:05:22.180 --> 00:05:24.000
So let's look at the API.

00:05:24.140 --> 00:05:28.700
Initialization is just like a
regular view using init with frame,

00:05:28.850 --> 00:05:32.440
and what's added is the Eagle context.

00:05:32.560 --> 00:05:35.440
So we still allow you to manage
creation of the context in case

00:05:35.440 --> 00:05:38.880
you're doing any clever things
with share groups and so on.

00:05:39.020 --> 00:05:42.280
Then there's these properties
here for specifying either

00:05:42.280 --> 00:05:47.350
a 16 or 32-bit color buffer,
your depth buffer, stencil,

00:05:47.550 --> 00:05:49.720
and enabling multi-sampling.

00:05:49.860 --> 00:05:53.160
Then there's properties for height
and width that you can use for things

00:05:53.160 --> 00:05:56.200
like your aspect ratio calculations.

00:05:56.340 --> 00:05:58.450
Then here are various methods.

00:05:58.560 --> 00:06:02.000
Most of these are actually
taking care of you if you also

00:06:02.000 --> 00:06:04.700
use the GLK view controller.

00:06:04.820 --> 00:06:07.440
But if you're not,
and you want to get at these directly,

00:06:07.440 --> 00:06:09.930
you can tell the view to display itself.

00:06:10.050 --> 00:06:13.580
You can manage the drawables,
for example, for render to texture,

00:06:13.700 --> 00:06:16.480
or as you transition to
and from the background.

00:06:16.600 --> 00:06:19.720
And there's even a method to
take a snapshot into a UI image.

00:06:19.720 --> 00:06:21.190
image.

00:06:22.380 --> 00:06:24.210
Now I'll show you the code
for this in just a minute,

00:06:24.210 --> 00:06:26.490
but first let me
introduce the other class,

00:06:26.570 --> 00:06:28.540
the GLK ViewController.

00:06:28.640 --> 00:06:30.200
So, this is a ViewController.

00:06:30.270 --> 00:06:33.740
It manages the drawing of its view,
and gives you all the typical

00:06:33.740 --> 00:06:35.640
ViewController behavior.

00:06:35.720 --> 00:06:38.930
But what it adds is an
OpenGL rendering loop,

00:06:38.930 --> 00:06:41.620
in sync with the display hardware.

00:06:41.760 --> 00:06:44.880
So, you tell it your desired
frames per second,

00:06:45.020 --> 00:06:48.920
and it will call the display
method on the GLK View.

00:06:49.000 --> 00:06:51.400
It also provides an update method.

00:06:51.490 --> 00:06:54.420
This is very typical
in many game engines,

00:06:54.500 --> 00:06:59.610
to separate the draw method from
the update for your simulation,

00:06:59.720 --> 00:07:02.040
or physics, or sound, etc.

00:07:02.110 --> 00:07:05.880
And the GLK ViewController also
provides several statistics.

00:07:05.950 --> 00:07:10.420
But most importantly,
this gets OpenGL ES-based applications

00:07:10.580 --> 00:07:16.980
onto the path of using a ViewController
to manage display orientation changes.

00:07:17.060 --> 00:07:18.690
And this is very important.

00:07:19.090 --> 00:07:24.200
Because most OpenGL ES-based games
aren't completely stand-alone anymore.

00:07:24.630 --> 00:07:27.610
They need to work seamlessly
with other system behaviors,

00:07:27.610 --> 00:07:31.630
like Notification Center and Game Center,
and the screens that those

00:07:31.630 --> 00:07:33.190
other APIs present to you.

00:07:33.520 --> 00:07:36.890
They need to manage orientation
for a second display if they're

00:07:36.890 --> 00:07:39.100
using AirPlay mirroring,
and so on.

00:07:39.100 --> 00:07:42.500
Now,
we used to say that you should manage

00:07:42.500 --> 00:07:47.560
orientation yourself in OpenGL ES,
and avoid using a ViewController.

00:07:48.060 --> 00:07:48.920
And that's not true.

00:07:48.920 --> 00:07:50.910
That's no longer the case.

00:07:50.950 --> 00:07:54.630
You should use a ViewController now,
and this object will

00:07:54.630 --> 00:07:56.700
do all of that for you.

00:07:56.700 --> 00:07:58.500
So here's some of the UI.

00:07:58.500 --> 00:08:01.540
Typically,
you'll subclass GLK ViewController,

00:08:01.540 --> 00:08:06.040
and then override methods like
ViewDidLoad and ViewDidUnload.

00:08:06.040 --> 00:08:09.790
And you'll use
ShouldAutoRotateToInterfaceOrientation to

00:08:09.790 --> 00:08:12.580
specify which orientations you support.

00:08:12.580 --> 00:08:16.270
And then finally,
you'll override this update method

00:08:16.400 --> 00:08:18.890
for any of your per-frame updates.

00:08:18.920 --> 00:08:22.070
And this update here lets you specify
your frame rate and how you handle

00:08:22.070 --> 00:08:24.920
transitions to and from the background.

00:08:24.920 --> 00:08:27.800
And then there's various statistics,
like a frame counter,

00:08:27.800 --> 00:08:30.680
the time since the last frame,
or since the app resumed.

00:08:31.310 --> 00:08:33.290
So let's show you these
objects in action.

00:08:33.470 --> 00:08:38.520
Here I've subclassed GLK ViewController,
and this is my implementation

00:08:38.520 --> 00:08:39.970
for ViewDidLoad.

00:08:40.080 --> 00:08:43.040
I start out by creating
my OpenGL context,

00:08:43.110 --> 00:08:46.120
recommending OpenGL ES 2.0, of course.

00:08:46.180 --> 00:08:50.010
And here I'm getting my GLK view,
setting its context and delegate,

00:08:50.140 --> 00:08:52.220
and configuring the
drawables that I want.

00:08:52.280 --> 00:08:57.090
So I've asked for a 32-bit color format,
24-bit depth buffer,

00:08:57.090 --> 00:08:58.960
and 4x multisampling.

00:08:59.340 --> 00:09:01.520
Those are the view properties.

00:09:01.660 --> 00:09:05.800
But now back on the view controller,
I'm requesting 30 frames per second.

00:09:05.880 --> 00:09:08.240
And as far as setup goes, that's it.

00:09:08.320 --> 00:09:13.170
This replaces all that code that you
used to have to set this up manually from

00:09:13.170 --> 00:09:15.410
the old OpenGL ES application template.

00:09:15.510 --> 00:09:17.810
So it saves you a lot of work.

00:09:18.030 --> 00:09:21.250
And all that we have to do now to
render our scene is to implement

00:09:21.250 --> 00:09:23.180
our update and draw methods.

00:09:23.280 --> 00:09:26.370
Update is where we calculate
any per frame updates.

00:09:26.720 --> 00:09:29.340
In this case,
I'm getting the time since the last

00:09:29.460 --> 00:09:33.390
update from the view controller,
and using that to calculate

00:09:33.390 --> 00:09:35.280
some rotation value.

00:09:35.360 --> 00:09:39.720
And then here's my draw method,
glkViewDrawInRect.

00:09:39.800 --> 00:09:43.360
Before this is called,
your context will be made current,

00:09:43.450 --> 00:09:45.290
and the frame buffer will be bound.

00:09:45.430 --> 00:09:48.850
So now you can just start
making regular OpenGL calls

00:09:48.970 --> 00:09:51.060
to draw this particular frame.

00:09:51.350 --> 00:09:54.070
And after it's done,
we'll call presentRenderBuffer

00:09:54.240 --> 00:09:56.540
and present that to the user.

00:09:56.800 --> 00:10:00.380
So, the GLK view and the view
controller give you a lot.

00:10:00.460 --> 00:10:03.110
If you're using these classes,
we will take care of

00:10:03.180 --> 00:10:05.980
the render buffer setup,
we'll set up a drawing loop,

00:10:06.290 --> 00:10:11.070
call your update and draw methods,
all synchronized to display updates.

00:10:11.140 --> 00:10:15.370
We handle orientation changes and
transitions to and from the background,

00:10:15.490 --> 00:10:19.020
and give you various statistics
and manage memory for you.

00:10:20.730 --> 00:10:23.840
So that's the GLK view
and view controller.

00:10:23.870 --> 00:10:26.930
So next,
let's move on to the texture loader.

00:10:27.430 --> 00:10:32.000
The GLK texture loader makes
texture loading really simple.

00:10:32.040 --> 00:10:34.910
We support all the common
image formats from UIKit,

00:10:34.910 --> 00:10:39.200
like Ping, JPEG, TIFF, and also PVRTC.

00:10:39.240 --> 00:10:41.500
And it's also really flexible.

00:10:41.540 --> 00:10:46.700
We can load textures from a file or URL,
and we can also load textures

00:10:46.700 --> 00:10:51.270
from data in memory or from
a Core Graphics CG image rev.

00:10:51.450 --> 00:10:55.900
There's support for regular 2D
bitmaps as well as cubemap textures.

00:10:55.930 --> 00:11:01.060
And the best feature of all is support
for loading textures asynchronously.

00:11:01.230 --> 00:11:04.700
Then we provide a few options for
your convenience to automatically

00:11:04.700 --> 00:11:08.700
generate bitmaps from a base texture,
to flip the origin from

00:11:08.700 --> 00:11:13.530
bottom left to top left,
and to do alpha pre-multiplication.

00:11:14.410 --> 00:11:17.300
So conceptually,
here's how you'll use the texture loader.

00:11:17.590 --> 00:11:21.300
First, before you do anything else,
you have to make your context current.

00:11:21.300 --> 00:11:23.870
And I mention this because
you're typically doing texture

00:11:24.020 --> 00:11:29.300
loading just as your app starts,
so be sure to create a context first.

00:11:29.300 --> 00:11:33.300
Then you'll specify some options,
like whether you want mip mapping.

00:11:33.500 --> 00:11:36.300
And then you'll call the
method to load the texture.

00:11:36.390 --> 00:11:40.430
This will load the image,
define the texture, and return to you a

00:11:40.440 --> 00:11:45.300
GLK texture info object,
which contains a lot of information.

00:11:45.300 --> 00:11:49.300
It has the texture name or its ID,
its width and height,

00:11:49.300 --> 00:11:52.550
whether or not the texture has alpha,
the texture's origin,

00:11:52.550 --> 00:11:54.260
and whether it has mip levels.

00:11:54.300 --> 00:11:56.300
So let's take a look.

00:11:56.300 --> 00:11:59.730
We've already created our context here,
and we make it current

00:11:59.740 --> 00:12:01.300
if it isn't already.

00:12:01.300 --> 00:12:04.300
And in this case,
I want to load the texture from a file,

00:12:04.300 --> 00:12:06.680
so we define the path
to the file we want,

00:12:06.680 --> 00:12:10.180
foo.ping in our bundle,
and define our options.

00:12:10.370 --> 00:12:12.300
I've specified here that
we want the texture loader,

00:12:12.300 --> 00:12:15.270
so we want the texture loader
to generate mip maps for us,

00:12:15.430 --> 00:12:17.300
and now we load the texture.

00:12:17.300 --> 00:12:21.810
We pass the path, the options,
and check for errors, and this returns a

00:12:21.930 --> 00:12:24.300
GLK texture info object.

00:12:24.300 --> 00:12:28.300
So all this is done during the
texture loading phase of our app,

00:12:28.300 --> 00:12:31.170
and then later, when it's time to draw
something with this texture,

00:12:31.460 --> 00:12:36.300
we just make regular GL calls to
bind the texture passing in its name.

00:12:37.540 --> 00:12:40.640
Now, that was how to load a
texture synchronously,

00:12:40.810 --> 00:12:45.000
but you can also load them
asynchronously using a GCD queue.

00:12:45.130 --> 00:12:47.890
This lets you start loading textures
in the background and then get

00:12:47.960 --> 00:12:49.430
a callback when they're done.

00:12:49.560 --> 00:12:52.220
So, conceptually, it's very similar.

00:12:52.340 --> 00:12:56.160
We'll create a GLK texture
loader object and initialize

00:12:56.160 --> 00:12:58.160
it with the shared context.

00:12:58.280 --> 00:13:01.350
Then, we set up our options and
call its loading method,

00:13:01.480 --> 00:13:05.060
along with a GCD queue
and a completion handler.

00:13:05.200 --> 00:13:08.560
Then, once the texture is ready,
the completion handler will be called,

00:13:08.640 --> 00:13:13.360
and we're past a GLK texture or
info object that's all ready to go.

00:13:15.000 --> 00:13:16.500
So here's how that works.

00:13:16.580 --> 00:13:20.060
We've already created our context
and we get its share group.

00:13:20.060 --> 00:13:23.710
And again,
we set up our path to our file,

00:13:23.710 --> 00:13:27.060
and now we create the texture loader
and initialize it with the share group.

00:13:27.350 --> 00:13:30.000
And then here's where the work happens.

00:13:30.020 --> 00:13:32.300
We're calling texture
with contents of file,

00:13:32.300 --> 00:13:36.360
passing the path, any options,
a GCD queue,

00:13:36.590 --> 00:13:38.660
and a block as a completion handler.

00:13:39.130 --> 00:13:41.830
Note that a queue of null
means the default queue.

00:13:41.830 --> 00:13:45.800
And when it's all finished loading,
our block is going to execute,

00:13:45.800 --> 00:13:49.260
passing the texture info,
which I'll use later to bind the texture.

00:13:52.300 --> 00:13:54.100
So let's summarize the Texture Loader.

00:13:54.150 --> 00:13:59.400
This gives you a really easy way to load
2D and cube map textures from a variety

00:13:59.410 --> 00:14:02.200
of sources and in a variety of formats.

00:14:02.210 --> 00:14:05.740
You can load on your main
thread or as a background task,

00:14:05.780 --> 00:14:09.200
and it can generate mipmaps,
handle pre-multiplied alpha,

00:14:09.270 --> 00:14:11.650
and flip the origin for you.

00:14:12.020 --> 00:14:13.740
So, that's the texture loader.

00:14:13.940 --> 00:14:16.300
Next up is GLK Math.

00:14:16.460 --> 00:14:21.340
GLK Math is a math library made
for 3D graphics applications.

00:14:21.530 --> 00:14:27.660
It has over 175 math functions with two,
three, and four component vectors,

00:14:27.870 --> 00:14:32.700
three by three and four by four matrices,
and support for quaternions.

00:14:32.900 --> 00:14:35.660
But what sets it apart
is the performance.

00:14:35.820 --> 00:14:39.270
We provide a scalar implementation
that runs on the simulator,

00:14:39.400 --> 00:14:42.250
but on devices,
it's written to take advantage

00:14:42.250 --> 00:14:47.000
of the NEON instructions to use
the CPU as a vector processor.

00:14:47.010 --> 00:14:50.530
And this allows it to
be just blazingly fast.

00:14:50.940 --> 00:14:55.030
The entry points are written in C,
and the NEON instructions themselves

00:14:55.190 --> 00:14:58.200
are inline in the header file,
so the compiler can perform

00:14:58.300 --> 00:15:00.220
additional optimizations for you.

00:15:00.220 --> 00:15:03.520
Then, on top of all that,
it also provides a matrix

00:15:03.520 --> 00:15:05.320
stack implementation.

00:15:05.450 --> 00:15:08.140
So,
those of you coming from OpenGL ES 1.1,

00:15:08.140 --> 00:15:08.140
you'll notice that the compiler
is running on a single-core,

00:15:08.140 --> 00:15:08.140
one-by-one, single-core, single-core,
single-core, single-core, single-core,

00:15:08.140 --> 00:15:08.300
single-core, single-core, single-core,
single-core, single-core, single-core,

00:15:08.300 --> 00:15:08.380
single-core, and single-core.

00:15:08.380 --> 00:15:10.870
So, if you're coming from OpenGL ES 1.1,
have an easy way to migrate

00:15:10.870 --> 00:15:14.650
all of your matrix stack code,
and other matrix operations directly

00:15:14.650 --> 00:15:20.300
into this library in a way that's
ready to use with OpenGL ES 2.0.

00:15:21.360 --> 00:15:22.740
Now, here's one example.

00:15:22.910 --> 00:15:28.200
This is the actual implementation
of GLK Vector4Multiply.

00:15:28.200 --> 00:15:31.200
And starting with this
lower section first,

00:15:31.310 --> 00:15:35.200
you can see how a four-component
vector multiply works.

00:15:35.200 --> 00:15:36.040
We have two vectors.

00:15:36.310 --> 00:15:39.690
We're multiplying the corresponding
elements with each other and storing

00:15:39.690 --> 00:15:43.200
the results in a third vector,
which becomes the return value.

00:15:43.230 --> 00:15:47.190
This is the code that executes
when you run in the simulator.

00:15:47.390 --> 00:15:51.200
But up here, you can see the code that
runs on the device itself.

00:15:51.200 --> 00:15:57.160
It's a NEON instruction,
VectorMultiplyQuadFloat32,

00:15:57.460 --> 00:16:02.190
passing in the two vector arrays by value
and returning the result by value also.

00:16:02.190 --> 00:16:05.930
So it's really fast.

00:16:06.920 --> 00:16:11.290
And that's just one of more than
175 math functions in this library.

00:16:11.590 --> 00:16:13.280
It's super powerful.

00:16:13.430 --> 00:16:15.900
There's routines in here for
the different matrix types,

00:16:16.120 --> 00:16:18.080
for quaternions, for vectors.

00:16:18.260 --> 00:16:24.960
There's distance formula, cross product,
dot product, length, minimum and maximum,

00:16:25.050 --> 00:16:32.070
normalize, project, multiply, rotate,
translate, scale, and the list goes on.

00:16:33.140 --> 00:16:36.930
Now, as I said, we also provide a matrix
stack implementation,

00:16:37.020 --> 00:16:38.760
called GLK Matrix Stack.

00:16:38.890 --> 00:16:42.710
So, this provides the common matrix
operations you're familiar

00:16:42.720 --> 00:16:47.070
with from OpenGL ES 1.1,
like Push and Pop Matrix,

00:16:47.210 --> 00:16:51.020
Load and Multiply Matrix,
and the Euler transformations, Rotate,

00:16:51.280 --> 00:16:52.830
Translate, and Scale.

00:16:52.920 --> 00:16:57.160
And this works hand-in-hand
with the other GLK math types.

00:16:57.340 --> 00:17:01.770
Its purpose is to make it really easy
for you to maintain your own model

00:17:01.770 --> 00:17:06.320
view and projection matrix stacks,
and then use them in shaders

00:17:06.320 --> 00:17:08.770
along with OpenGL ES 2.0.

00:17:09.530 --> 00:17:10.640
So let's summarize.

00:17:10.830 --> 00:17:15.230
GLK math has over 175 math
functions dealing with vectors,

00:17:15.420 --> 00:17:17.240
matrices, and quaternions.

00:17:17.410 --> 00:17:22.050
It's blazing fast, inline, neon,
and fills a common need

00:17:22.050 --> 00:17:25.080
in most graphics apps,
and particularly in apps

00:17:25.080 --> 00:17:27.020
that are moving to ES 2.0.

00:17:27.160 --> 00:17:32.690
So that's GLK math,
and last are the GLK effects.

00:17:33.310 --> 00:17:37.280
Our motivation with GLK effects is
to enable your application to get the

00:17:37.280 --> 00:17:42.200
great visual effects of OpenGL ES 2.0,
but with very little effort.

00:17:42.200 --> 00:17:46.860
So, this provides you with an effects
library that helps you move up from

00:17:46.860 --> 00:17:52.870
OpenGL ES 1.1 and make your app ready to
adopt programmable shaders on its own.

00:17:53.360 --> 00:17:57.610
There are three main classes:
the Base Effect,

00:17:57.760 --> 00:18:02.130
the Reflection Map Effect,
which I won't be covering in this video,

00:18:02.130 --> 00:18:03.200
and a third one called the Skybox Effect.

00:18:03.200 --> 00:18:06.160
So, let's start with the Base Effect.

00:18:06.230 --> 00:18:10.630
The Base Effect mimics the
features of the fixed function

00:18:10.630 --> 00:18:15.960
pipeline of OpenGL ES 1.1 and
implements them using shaders.

00:18:16.200 --> 00:18:19.200
This means that by using the
Base Effect in your code,

00:18:19.200 --> 00:18:22.200
you can have an almost one-for-one
mapping of the effects that

00:18:22.200 --> 00:18:22.200
you're going to be using.

00:18:22.200 --> 00:18:23.200
So, let's get started.

00:18:23.200 --> 00:18:27.580
There are three main effects you're using
with ES 1.1 and with a replacement that

00:18:27.580 --> 00:18:30.160
makes you compatible with OpenGL ES 2.0.

00:18:30.340 --> 00:18:34.330
It supports up to three lights,
and each can be directional, point,

00:18:34.330 --> 00:18:36.920
or a spotlight,
each with its own transform

00:18:36.920 --> 00:18:38.200
and color and so on.

00:18:38.540 --> 00:18:41.470
Then there can be
materials for each object,

00:18:41.470 --> 00:18:47.200
2D and Cubemap textures, fog,
a transformation stack, and a lot more.

00:18:47.200 --> 00:18:50.110
So, using the Base Effect breaks
down into six steps.

00:18:50.390 --> 00:18:52.200
There's three things we do
during the setup of the effect.

00:18:52.200 --> 00:18:53.200
The first is the base effect.

00:18:53.200 --> 00:18:56.650
and then three things we do each frame.

00:18:56.920 --> 00:18:59.440
The important thing to remember
about the base effect is that

00:18:59.440 --> 00:19:04.300
it's handling your graphics state
and you handle all your geometry.

00:19:04.450 --> 00:19:08.300
So, during setup,
we'll create our base effect instance,

00:19:08.450 --> 00:19:13.300
set its properties like the color of the
lights and the transformations and so on,

00:19:13.470 --> 00:19:19.190
and then you apply that to your existing
vertex attributes and vertex array state.

00:19:19.450 --> 00:19:22.550
Then, each frame,
we update anything that's changed,

00:19:22.650 --> 00:19:26.210
like the transformations,
then bind the base effect

00:19:26.210 --> 00:19:28.480
state and draw your objects.

00:19:28.740 --> 00:19:29.980
So let's take a look.

00:19:30.130 --> 00:19:31.480
Here's the first two steps.

00:19:31.710 --> 00:19:34.210
Now, it looks like a lot of code,
but it's really just setting

00:19:34.220 --> 00:19:35.190
a bunch of properties.

00:19:35.400 --> 00:19:39.580
So we create our base effect instance,
and now we set all the

00:19:39.660 --> 00:19:40.800
properties we want.

00:19:40.860 --> 00:19:43.650
I'm specifying per-pixel
lighting with one light.

00:19:43.730 --> 00:19:47.530
I set its position, diffuse color,
and ambient colors.

00:19:47.640 --> 00:19:52.550
And note, we're using the GLK vector for
routines to set these values.

00:19:52.850 --> 00:19:55.100
Since we have a light,
we need to find a material.

00:19:55.230 --> 00:19:57.920
So I set the diffuse, ambient,
and specular colors,

00:19:58.020 --> 00:19:59.920
and the specular shininess.

00:20:00.070 --> 00:20:03.850
So that sets up the properties,
but I imagine if you're using

00:20:03.850 --> 00:20:08.640
OpenGL ES 1.1 right now,
that you can see exactly how

00:20:08.650 --> 00:20:11.640
your existing code maps to this.

00:20:11.860 --> 00:20:15.160
Next is step three,
which is code you would have already had

00:20:15.280 --> 00:20:17.600
to set up your vertex array attributes.

00:20:17.770 --> 00:20:20.840
So just for illustration,
here I'm generating and

00:20:20.840 --> 00:20:25.420
binding a vertex array object,
which is a best practice on iOS.

00:20:25.510 --> 00:20:28.240
And then I'm setting up
a vertex buffer object,

00:20:28.350 --> 00:20:31.480
binding the buffer and defining its data.

00:20:31.530 --> 00:20:36.900
And the one thing that's changed is the
call to GL vertex attribute pointer.

00:20:36.960 --> 00:20:41.550
We need to indicate which array this is,
the position, the normals, colors,

00:20:41.650 --> 00:20:45.210
or texture coordinates,
using a built-in type from GLKit.

00:20:45.400 --> 00:20:46.920
So that's what you see here.

00:20:46.960 --> 00:20:50.010
And then we repeat the same
process to define other arrays

00:20:50.260 --> 00:20:51.680
for our normals and so on.

00:20:51.720 --> 00:20:54.290
So now everything is set up.

00:20:55.350 --> 00:20:58.410
Now for each frame,
we update any base effect

00:20:58.630 --> 00:21:02.590
properties that have changed,
like the current transformation.

00:21:02.680 --> 00:21:05.270
We tell the base effect
to prepare to draw,

00:21:05.400 --> 00:21:07.600
which binds its state.

00:21:07.740 --> 00:21:09.600
And then we just draw normally.

00:21:09.630 --> 00:21:13.600
We bind our vertex array and call
GLDrawArrays or GLDrawElements.

00:21:13.810 --> 00:21:19.600
And with this, we can move an entire
application from ES 1.1 to 2.0.

00:21:20.900 --> 00:21:23.890
Now, the last object to talk
about is the skybox effect.

00:21:24.040 --> 00:21:28.040
A skybox is a textured cube,
and the idea is that you put

00:21:28.040 --> 00:21:29.830
the eye point inside the cube.

00:21:30.000 --> 00:21:33.830
So then the faces of each
side of the cube become your

00:21:33.830 --> 00:21:35.420
backdrop in all directions.

00:21:35.690 --> 00:21:38.560
Skyboxes are really
typical in 3D environments,

00:21:38.560 --> 00:21:40.330
and ours is really simple.

00:21:40.670 --> 00:21:43.760
You define its center and
size in a transformation,

00:21:43.990 --> 00:21:47.030
and you specify the textures
to show on each face.

00:21:47.160 --> 00:21:50.310
And it draws a cube for you
that acts as your backdrop.

00:21:50.500 --> 00:21:51.170
So that's all.

00:21:51.400 --> 00:21:52.980
So here's how it works.

00:21:53.180 --> 00:21:55.680
We alloc and init our skybox object.

00:21:55.680 --> 00:22:01.020
Then we load a cubemap texture that we'll
apply to the various sides of the skybox.

00:22:01.080 --> 00:22:03.970
And here I'm using the texture
loader to load a cubemap with

00:22:04.220 --> 00:22:06.620
contents of a pvrtc file.

00:22:08.120 --> 00:22:09.760
Then I set up some properties.

00:22:09.840 --> 00:22:14.240
I use the ID of the cube map
and set its center and size.

00:22:14.360 --> 00:22:17.780
And then at the start of each frame,
I just call the methods

00:22:17.780 --> 00:22:20.020
prepareToDraw and draw.

00:22:20.370 --> 00:22:23.890
One last thing to mention about
the GLK effects is how they modify

00:22:24.020 --> 00:22:28.170
the ES 2.0 pipeline state in case
you're managing state in your own

00:22:28.170 --> 00:22:30.140
scene graph or your game engine.

00:22:30.310 --> 00:22:34.110
The base effect is managing state,
so it modifies the current program,

00:22:34.140 --> 00:22:37.580
the current shader,
and the currently bound texture

00:22:37.580 --> 00:22:39.490
if you've enabled texturing.

00:22:39.810 --> 00:22:43.900
The skybox has a much broader
impact because it uses both state

00:22:43.900 --> 00:22:46.100
and provides its own geometry.

00:22:46.240 --> 00:22:50.450
So, it modifies the current program,
the currently bound cube map,

00:22:50.500 --> 00:22:53.230
then also the array binding,
buffer binding,

00:22:53.280 --> 00:22:58.060
and the enable for the vertex
attribute array for positions.

00:22:58.260 --> 00:23:02.360
And I didn't cover the reflection map,
but it's very similar to the base effect.

00:23:02.490 --> 00:23:05.100
It's actually a subclass of base effect.

00:23:05.250 --> 00:23:10.000
And it also modifies the current
program and the current cube map.

00:23:11.230 --> 00:23:13.000
So let's summarize GLK effects.

00:23:13.330 --> 00:23:19.400
These provide you with OpenGL ES 2.0
level effects with really minimal effort.

00:23:19.580 --> 00:23:25.150
It drops right into your code to
replace existing OpenGL ES 1.1 code

00:23:25.480 --> 00:23:30.610
and make your app ready for you to
develop custom shaders of your own.

00:23:30.780 --> 00:23:32.540
So that's GLK Effects.

00:23:32.570 --> 00:23:35.100
All right,
so I've covered a lot of ground here.

00:23:35.150 --> 00:23:39.300
The GLK View and View Controller to
make OpenGL ES a first-class

00:23:39.300 --> 00:23:41.460
citizen in your view hierarchy.

00:23:41.510 --> 00:23:45.540
The GLK Texture Loader to make
texture loading really simple.

00:23:45.590 --> 00:23:49.540
The GLK Math Library for fast
math and a matrix stack library

00:23:49.670 --> 00:23:51.460
to use with your shaders.

00:23:51.520 --> 00:23:55.230
And the GLK Effects Library,
which can help you to move

00:23:55.240 --> 00:23:57.460
your app onto OpenGL ES 2.0.

00:23:57.530 --> 00:24:01.460
So if you have questions about GLKit or
any of the content I've presented here,

00:24:01.530 --> 00:24:05.020
please contact me at ashaffear@apple.com.

00:24:05.080 --> 00:24:08.960
We also have some great documentation
available in the iOS Dev Center,

00:24:09.040 --> 00:24:12.090
and you can come talk to us in
the developer forums as well.

00:24:12.270 --> 00:24:13.460
Thanks for watching.