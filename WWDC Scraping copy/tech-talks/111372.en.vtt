WEBVTT

00:00:01.950 --> 00:00:04.620
Hello and welcome, my name is Jason Jane,

00:00:04.620 --> 00:00:07.710
and I am an engineering manager here at Apple.

00:00:07.710 --> 00:00:09.480
Today, I'm very excited to talk to you

00:00:09.480 --> 00:00:12.123
about bringing your most demanding games to iPhone.

00:00:14.003 --> 00:00:16.433
Earlier this summer, we shared three great talks

00:00:16.433 --> 00:00:18.720
about the new tools and best practices

00:00:18.720 --> 00:00:22.350
for quickly bringing the most demanding PC and console games

00:00:22.350 --> 00:00:25.563
to the unified and scalable platform of Apple silicon Macs.

00:00:26.820 --> 00:00:28.860
We shared that you have everything you need to deliver

00:00:28.860 --> 00:00:31.890
an amazing, uncompromising gaming experience

00:00:31.890 --> 00:00:35.220
with Macâ€™s advanced graphics, fantastic performance,

00:00:35.220 --> 00:00:37.860
immersive audio, stunning displays,

00:00:37.860 --> 00:00:39.183
and feature-rich software.

00:00:42.120 --> 00:00:45.270
Now, I'm excited to share that the latest iPhone 15 Pro

00:00:45.270 --> 00:00:48.900
and iPhone 15 Pro Max models join Apple silicon Macs

00:00:48.900 --> 00:00:51.753
to build on this unified platform for next-level gaming.

00:00:53.880 --> 00:00:57.753
These new iPhones play every iOS game and run every iOS app.

00:00:58.890 --> 00:01:02.100
And now, iPhones can also play the highest end games

00:01:02.100 --> 00:01:04.080
without compromise.

00:01:04.080 --> 00:01:07.710
It has the power of a game console, but now in your pocket.

00:01:07.710 --> 00:01:11.880
iPhone 15 Pro and iPhone 15 Pro Max include new features,

00:01:11.880 --> 00:01:14.670
like faster CPU and GPU performance,

00:01:14.670 --> 00:01:17.610
hardware support for PC and console textures,

00:01:17.610 --> 00:01:19.440
and additional system resources,

00:01:19.440 --> 00:01:21.420
which make targeting these iPhones

00:01:21.420 --> 00:01:22.983
as easy as targeting a Mac.

00:01:24.840 --> 00:01:25.830
For the rest of this talk,

00:01:25.830 --> 00:01:28.020
I'm going to cover the features and tools we've added

00:01:28.020 --> 00:01:29.793
to help bring your game to iPhone.

00:01:31.020 --> 00:01:32.850
First, I'll describe the tools and strategies

00:01:32.850 --> 00:01:35.400
to create your game's porting plan.

00:01:35.400 --> 00:01:37.530
Then I'll describe how to specifically target

00:01:37.530 --> 00:01:40.773
the iPhone 15 Pro and iPhone 15 Pro Max.

00:01:41.790 --> 00:01:45.450
I'll then tell you how to optimize for long play sessions,

00:01:45.450 --> 00:01:46.980
how to provide the best experience

00:01:46.980 --> 00:01:49.350
for games designed around controllers,

00:01:49.350 --> 00:01:51.030
and finally, how to handle large,

00:01:51.030 --> 00:01:52.863
high-quality assets in your game.

00:01:54.030 --> 00:01:57.120
To start, let's think about creating a game plan.

00:01:57.120 --> 00:01:58.830
What is the porting process like,

00:01:58.830 --> 00:02:00.810
and how can you take incremental steps

00:02:00.810 --> 00:02:02.400
and create quick iteration techniques

00:02:02.400 --> 00:02:03.720
for yourself and your team

00:02:03.720 --> 00:02:05.420
when bringing your game to iPhone?

00:02:06.540 --> 00:02:09.510
You might not be surprised to hear that Kojima Productions

00:02:09.510 --> 00:02:11.730
started their porting journey to iPhone

00:02:11.730 --> 00:02:13.860
for the breakthrough game Death Stranding

00:02:13.860 --> 00:02:15.993
by first bringing it to Apple silicon Macs.

00:02:16.950 --> 00:02:18.690
By starting with a port to the Mac,

00:02:18.690 --> 00:02:21.150
they were targeting the same software APIs,

00:02:21.150 --> 00:02:22.920
unified memory architecture,

00:02:22.920 --> 00:02:25.410
advanced hardware and GPU capabilities

00:02:25.410 --> 00:02:28.383
shared between Apple silicon Macs and the iPhone.

00:02:30.060 --> 00:02:32.070
During the initial stages of work,

00:02:32.070 --> 00:02:33.690
they could rapidly iterate on Macs

00:02:33.690 --> 00:02:35.433
using Xcode and instruments.

00:02:36.450 --> 00:02:37.860
They had the additional memory

00:02:37.860 --> 00:02:40.440
and resources of powerful desktop Macs.

00:02:40.440 --> 00:02:42.150
The extra storage and memory

00:02:42.150 --> 00:02:43.890
for debugging and test scaffolding

00:02:43.890 --> 00:02:45.753
is super useful during development.

00:02:46.650 --> 00:02:48.840
And they could more easily stand up their work

00:02:48.840 --> 00:02:51.060
and test with command line automation

00:02:51.060 --> 00:02:53.670
and with keyboard, mouse, and controller input

00:02:53.670 --> 00:02:54.873
right at their desks.

00:02:56.640 --> 00:02:58.080
Once running on the Mac,

00:02:58.080 --> 00:02:59.970
the unified architecture of Apple silicon

00:02:59.970 --> 00:03:01.770
and the resources and capabilities

00:03:01.770 --> 00:03:05.190
of iPhone 15 Pro and iPhone 15 Pro Max

00:03:05.190 --> 00:03:08.850
meant that bringing their Mac port over to iPhone was quick,

00:03:08.850 --> 00:03:11.403
taking just a few days to see the running game.

00:03:12.240 --> 00:03:15.120
There's simply no other platform with the same consistency

00:03:15.120 --> 00:03:16.863
and ability to scale in this way.

00:03:18.277 --> 00:03:21.720
Scaling naturally from portable iPhones and iPads

00:03:21.720 --> 00:03:23.520
to the Mac Mini and iMac,

00:03:23.520 --> 00:03:26.880
and onto the most powerful desktop Mac Studio and Mac Pro,

00:03:26.880 --> 00:03:28.773
this is the power of Apple silicon.

00:03:31.230 --> 00:03:34.110
To kickstart your port to Mac on your way to iPhone,

00:03:34.110 --> 00:03:37.470
we also recommend using the Game Porting Toolkit.

00:03:37.470 --> 00:03:39.360
This toolkit gives you early insight

00:03:39.360 --> 00:03:42.450
into how the graphics and shaders of your PC game

00:03:42.450 --> 00:03:44.790
will perform on Apple silicon.

00:03:44.790 --> 00:03:47.940
You simply run your unmodified Windows PC game

00:03:47.940 --> 00:03:49.773
right on a Mac to try it out.

00:03:53.580 --> 00:03:56.130
So before you recompile your source code,

00:03:56.130 --> 00:03:59.760
convert your custom shaders from HLSL,

00:03:59.760 --> 00:04:02.550
reimplement your graphic subsystem,

00:04:02.550 --> 00:04:05.040
and convert your use of audio, input,

00:04:05.040 --> 00:04:08.520
display and HDR rendering, instead of doing that work

00:04:08.520 --> 00:04:11.760
before you see your first scene running on a Mac.

00:04:11.760 --> 00:04:14.610
And before you start debugging and optimizing for iPhone,

00:04:15.990 --> 00:04:17.100
we recommend that you run

00:04:17.100 --> 00:04:20.250
and analyze your unmodified windows binary on Mac

00:04:20.250 --> 00:04:23.340
to help you profile and understand your game's behavior

00:04:23.340 --> 00:04:26.163
on Apple silicon and to help create your game plan.

00:04:27.150 --> 00:04:29.820
There's lots more detail about starting your porting journey

00:04:29.820 --> 00:04:33.813
in part one of our "Bring your game to Mac" series of talks.

00:04:35.790 --> 00:04:38.010
If your game needs next level features,

00:04:38.010 --> 00:04:41.040
performance and capabilities of iPhone 15 Pro,

00:04:41.040 --> 00:04:43.530
then you can directly target those devices

00:04:43.530 --> 00:04:45.243
as your minimum specification.

00:04:46.770 --> 00:04:49.080
We've defined an iPhone Performance Gaming Tier

00:04:49.080 --> 00:04:51.660
in iOS 17 and in the app store.

00:04:51.660 --> 00:04:52.650
This is a flag you add

00:04:52.650 --> 00:04:55.470
to your UI required device capability section

00:04:55.470 --> 00:04:57.393
of your app's info plist file.

00:04:59.160 --> 00:05:02.670
By adding this flag, you are specifying your min spec.

00:05:02.670 --> 00:05:03.900
Your app will only be available

00:05:03.900 --> 00:05:06.510
for purchase, installation, and review

00:05:06.510 --> 00:05:09.003
by customers with devices at least this capable.

00:05:10.200 --> 00:05:12.570
To establish this min spec, use Xcode

00:05:12.570 --> 00:05:15.780
to add an entry to the required device capability section

00:05:15.780 --> 00:05:17.013
of your info plist.

00:05:18.480 --> 00:05:22.440
To set this min spec feature, you'll also target iOS 17

00:05:22.440 --> 00:05:24.183
as your minimum deployment target.

00:05:25.560 --> 00:05:28.350
Once you do this, the app still will mark your game

00:05:28.350 --> 00:05:31.200
as available for purchase and install only for customers

00:05:31.200 --> 00:05:33.090
with supported devices.

00:05:33.090 --> 00:05:36.213
Here's what a customer with iPhone 13 Pro might see.

00:05:37.769 --> 00:05:39.660
If your game can scale its quality

00:05:39.660 --> 00:05:43.500
and performance dynamically across all iPhones on iOS 17,

00:05:43.500 --> 00:05:44.790
then you should also consider

00:05:44.790 --> 00:05:47.283
how you might enhance it for iPhone 15 Pro.

00:05:49.500 --> 00:05:52.440
Scaling is not unusual for PC and console games,

00:05:52.440 --> 00:05:53.273
and it's a great way

00:05:53.273 --> 00:05:55.413
to target the largest addressable market.

00:05:56.820 --> 00:05:58.050
To optionally take advantage

00:05:58.050 --> 00:06:00.930
of hardware-accelerated mesh shading or ray tracing,

00:06:00.930 --> 00:06:03.960
just query for the Apple 9 GPU family

00:06:03.960 --> 00:06:08.103
to ensure that you're on a device with an Apple A17 Pro GPU.

00:06:10.470 --> 00:06:12.450
Now let's talk about how you can optimize

00:06:12.450 --> 00:06:14.850
for high quality consistent performance

00:06:14.850 --> 00:06:17.163
in long-running game sessions on iPhone.

00:06:18.598 --> 00:06:21.373
I'll cover visualizing performance,

00:06:21.373 --> 00:06:24.000
a new performance profile,

00:06:24.000 --> 00:06:26.430
techniques for optimizing shaders,

00:06:26.430 --> 00:06:28.263
and how to use MetalFX on iPhone.

00:06:29.880 --> 00:06:31.890
Visualizing your performance in real time

00:06:31.890 --> 00:06:33.843
is easy with a metal performance HUD.

00:06:34.800 --> 00:06:38.070
Enable the metal performance HUD during day-to-day testing

00:06:38.070 --> 00:06:41.580
to quickly spot missed frames and memory leaks.

00:06:41.580 --> 00:06:44.640
The HUD shows you the GPU and resolution being used,

00:06:44.640 --> 00:06:48.060
the instantaneous frame rate, the presentation interval,

00:06:48.060 --> 00:06:52.200
and the approximation of the amount of GPU time being used.

00:06:52.200 --> 00:06:55.530
It highlights high and low values for these statistics,

00:06:55.530 --> 00:06:57.090
shows memory usage,

00:06:57.090 --> 00:07:00.737
and provides a graph of the last few seconds of data.

00:07:00.737 --> 00:07:04.377
To learn more, check out "Discover Metal Performance HUD."

00:07:06.423 --> 00:07:09.270
We're introducing a new system performance profile

00:07:09.270 --> 00:07:10.860
called Sustained Execution Mode

00:07:10.860 --> 00:07:15.093
with iPhone 15 Pro and iPhone 15 Pro Max.

00:07:15.093 --> 00:07:17.820
The default system performance profile

00:07:17.820 --> 00:07:21.570
aims to provide the best performance in three time domains,

00:07:21.570 --> 00:07:25.350
the highest possible performance for short burst workloads,

00:07:25.350 --> 00:07:28.080
followed by a period for providing consistent performance

00:07:28.080 --> 00:07:29.970
for the majority of customer sessions,

00:07:29.970 --> 00:07:31.230
and finally, the steady state,

00:07:31.230 --> 00:07:34.590
which honors device constraints for longer workloads.

00:07:34.590 --> 00:07:37.500
This leaves you needing to decide how to tune your game.

00:07:37.500 --> 00:07:39.300
Do you tune for initial performance

00:07:39.300 --> 00:07:41.970
and have your game performance change over time,

00:07:41.970 --> 00:07:44.760
or do you spend time during development

00:07:44.760 --> 00:07:47.733
allowing performance to settle and then retune accordingly?

00:07:49.920 --> 00:07:51.030
To alleviate this effort

00:07:51.030 --> 00:07:53.010
and provide a consistent experience,

00:07:53.010 --> 00:07:55.080
we're introducing Sustained Execution Mode

00:07:55.080 --> 00:07:58.533
for iPhone 15 Pro and iPhone 15 Pro Max.

00:07:59.880 --> 00:08:01.890
By opting into this new profile,

00:08:01.890 --> 00:08:03.120
you can experience performance

00:08:03.120 --> 00:08:05.250
that is consistent with the steady state

00:08:05.250 --> 00:08:07.200
right from app launch.

00:08:07.200 --> 00:08:08.880
This allows you to quickly identify

00:08:08.880 --> 00:08:11.010
a level of quality and performance appropriate

00:08:11.010 --> 00:08:12.450
for the target device,

00:08:12.450 --> 00:08:13.950
and you can be confident your players

00:08:13.950 --> 00:08:16.653
will experience the exact same consistent quality.

00:08:19.770 --> 00:08:21.690
To enable sustained execution mode

00:08:21.690 --> 00:08:23.250
while your game is running,

00:08:23.250 --> 00:08:26.010
add the entitlement to your application.

00:08:26.010 --> 00:08:27.420
Simply go into Xcode

00:08:27.420 --> 00:08:29.730
and in the sign in and capabilities tool,

00:08:29.730 --> 00:08:32.820
add the Sustained Execution Capability.

00:08:32.820 --> 00:08:35.610
Remember, you'll also need to provision this entitlement

00:08:35.610 --> 00:08:38.880
in the provisioning profile for your application.

00:08:38.880 --> 00:08:41.010
You do this in the profile section

00:08:41.010 --> 00:08:42.813
of your Apple developer account.

00:08:45.030 --> 00:08:46.840
Metal supports shader pre-compilation,

00:08:46.840 --> 00:08:49.920
which is another important performance technique.

00:08:49.920 --> 00:08:51.960
On mobile devices, you should generally avoid

00:08:51.960 --> 00:08:54.630
on-device compilation of shaders from source

00:08:54.630 --> 00:08:56.463
as it isn't power efficient.

00:08:56.463 --> 00:08:58.830
On-device compilation at runtime

00:08:58.830 --> 00:09:01.470
can also cause unexpected hitches.

00:09:01.470 --> 00:09:03.690
When you are porting a PC or console game,

00:09:03.690 --> 00:09:05.850
pre-compiling is even more important

00:09:05.850 --> 00:09:07.590
as you likely have a lot more shaders

00:09:07.590 --> 00:09:09.740
and need them ready as quickly as possible.

00:09:10.890 --> 00:09:13.050
Always use ahead of time compilation

00:09:13.050 --> 00:09:15.900
by the Metal shader converter and the Metal compiler

00:09:15.900 --> 00:09:18.600
to produce a metal lib at app build time

00:09:18.600 --> 00:09:20.103
and package it in your bundle.

00:09:21.300 --> 00:09:24.600
In some specific cases, you can also take the metal lib

00:09:24.600 --> 00:09:26.850
all the way to finalized GPU binary

00:09:26.850 --> 00:09:31.113
by using the metal-tt to cogen for Metal GPU family 9.

00:09:32.100 --> 00:09:34.147
For more details, please check out,

00:09:34.147 --> 00:09:38.010
"Bring your game to Mac, Part 2: Compile your shaders,"

00:09:38.010 --> 00:09:40.350
as the same advice for porting your game to the Mac

00:09:40.350 --> 00:09:41.793
equally applies to iPhone.

00:09:43.830 --> 00:09:47.190
Finally, MetalFX is another fantastic performance technique

00:09:47.190 --> 00:09:49.915
new this year to iOS 17.

00:09:49.915 --> 00:09:53.070
MetalFX was introduced last year for the Mac.

00:09:53.070 --> 00:09:54.630
It helps improve game performance

00:09:54.630 --> 00:09:57.660
by generate high quality, high resolution images

00:09:57.660 --> 00:10:00.663
for many fewer pixels, saving power and time.

00:10:02.190 --> 00:10:05.280
MetalFX offers two upscaling effects,

00:10:05.280 --> 00:10:08.160
spatial, which offers greater performance benefit

00:10:08.160 --> 00:10:10.680
and temporal for the best quality.

00:10:10.680 --> 00:10:13.980
This year, we are bringing the power of MetalFX to iOS.

00:10:13.980 --> 00:10:15.390
Spatial upscaling is available

00:10:15.390 --> 00:10:18.270
on all iPhones supported in iOS 17,

00:10:18.270 --> 00:10:19.800
and temporal upscaling is available

00:10:19.800 --> 00:10:21.873
on devices with A14 and newer.

00:10:23.310 --> 00:10:24.690
Rendering to a lower resolution

00:10:24.690 --> 00:10:27.398
is one method of improving the performance of your game.

00:10:27.398 --> 00:10:29.730
By reducing the GPU work,

00:10:29.730 --> 00:10:33.117
you can save power and achieve a higher frame rate.

00:10:33.117 --> 00:10:36.840
Every iPhone has a high quality, built-in display scaler

00:10:36.840 --> 00:10:40.170
that automatically scales the contents of a CAMetalLayer

00:10:40.170 --> 00:10:42.630
to the native display resolution.

00:10:42.630 --> 00:10:44.780
You're probably already using it like this.

00:10:45.661 --> 00:10:49.680
With MetalFX, your target resolution can remain the same,

00:10:49.680 --> 00:10:52.530
so you continue to take advantage of the display scaler,

00:10:52.530 --> 00:10:54.930
but your game now renders to a lower resolution.

00:10:56.833 --> 00:11:00.240
MetalFX can help demanding games achieve stable frame rates

00:11:00.240 --> 00:11:03.510
on both ProMotion and non-ProMotion displays.

00:11:03.510 --> 00:11:05.190
Depending on your game workload,

00:11:05.190 --> 00:11:07.650
you'll want to experiment combining different MetalFX

00:11:07.650 --> 00:11:09.210
and display upskilling ratios

00:11:09.210 --> 00:11:12.750
to achieve the best balance for performance and quality.

00:11:12.750 --> 00:11:16.020
For more details on best practices for using MetalFX,

00:11:16.020 --> 00:11:18.937
please refer to past WWDC sessions,

00:11:18.937 --> 00:11:21.480
"Boost performance with MetalFX Upscaling,"

00:11:21.480 --> 00:11:24.417
and "Bring your game to Mac, Part 3: Render with Metal."

00:11:26.100 --> 00:11:29.160
Interacting with your game on iPhone has never been easier,

00:11:29.160 --> 00:11:32.700
thanks to great controller support that's now even better.

00:11:32.700 --> 00:11:34.107
Many PC and console games

00:11:34.107 --> 00:11:37.740
are designed around using game controllers for input.

00:11:37.740 --> 00:11:39.540
The great news is that doesn't change

00:11:39.540 --> 00:11:41.790
when you bring your game to iPhone.

00:11:41.790 --> 00:11:43.080
iOS supports connecting

00:11:43.080 --> 00:11:45.450
to all the most popular game controllers,

00:11:45.450 --> 00:11:48.150
including a new generation of form fitting controllers

00:11:48.150 --> 00:11:51.870
that fit and work perfectly with every size of iPhone 15

00:11:51.870 --> 00:11:54.120
using low latency USBC.

00:11:54.120 --> 00:11:56.490
This PlayStation theme controller from Backbone

00:11:56.490 --> 00:11:57.753
is one of my favorites.

00:11:59.310 --> 00:12:02.010
If your game is best experienced with a controller,

00:12:02.010 --> 00:12:02.970
let your players know

00:12:02.970 --> 00:12:05.280
by adding the game controller's capability,

00:12:05.280 --> 00:12:07.983
using the sign in and capability section in Xcode.

00:12:09.840 --> 00:12:12.090
And then add the GCRequiresControllerUserInteraction

00:12:12.930 --> 00:12:15.720
dictionary to the info plist array,

00:12:15.720 --> 00:12:19.323
and include an iOS key with a Boolean value of YES.

00:12:21.150 --> 00:12:23.400
With this configuration set, players will see

00:12:23.400 --> 00:12:26.073
a controller recommended badge in the app store,

00:12:27.990 --> 00:12:29.430
which leads to more details

00:12:29.430 --> 00:12:31.980
about using and comparing game controllers

00:12:31.980 --> 00:12:33.510
and where they can find and purchase

00:12:33.510 --> 00:12:36.063
compatible form-fitting and standalone controllers.

00:12:38.370 --> 00:12:41.220
But the iPhone also revolutionized mobile gaming

00:12:41.220 --> 00:12:44.193
with low latency, high accuracy multi-touch.

00:12:45.180 --> 00:12:48.030
It's important and even part of the app store review process

00:12:48.030 --> 00:12:50.373
that your game supports touch interaction too.

00:12:52.113 --> 00:12:55.080
This year, we've made it even easier to quickly add

00:12:55.080 --> 00:12:58.560
even more customized touch controls to your app.

00:12:58.560 --> 00:13:00.810
The GC Virtual Controller API

00:13:00.810 --> 00:13:03.690
now supports drawing your own onscreen controls

00:13:03.690 --> 00:13:05.760
right where you want them.

00:13:05.760 --> 00:13:07.050
Your touch handling is converted

00:13:07.050 --> 00:13:09.270
into game controller input events,

00:13:09.270 --> 00:13:12.090
which lets you customize the look and feel of your game UI

00:13:12.090 --> 00:13:14.220
while still leaving intact the majority

00:13:14.220 --> 00:13:16.020
of your game controller input logic.

00:13:18.630 --> 00:13:22.500
Lastly, iPhone 15 Pro and iPhone 15 Pro Max

00:13:22.500 --> 00:13:25.320
now seamlessly support your highest quality PC

00:13:25.320 --> 00:13:27.330
and console assets.

00:13:27.330 --> 00:13:30.421
The original base assets for your games can be very large,

00:13:30.421 --> 00:13:34.380
high resolution texture data, high polygon count geometry,

00:13:34.380 --> 00:13:36.280
and uncompressed audio and voice data.

00:13:37.140 --> 00:13:38.730
It's the job of your asset pipeline

00:13:38.730 --> 00:13:40.410
to convert and package these files

00:13:40.410 --> 00:13:43.920
to fit into available PC and console system resources

00:13:43.920 --> 00:13:47.370
and to efficiently interoperate with the target hardware,

00:13:47.370 --> 00:13:49.590
taking advantage of accelerated features

00:13:49.590 --> 00:13:53.160
like texture decompression, geometry instancing

00:13:53.160 --> 00:13:54.903
and audio mixing, for example.

00:13:56.910 --> 00:14:00.152
Before iPhone 15 Pro and iPhone 15 Pro Max,

00:14:00.152 --> 00:14:01.950
you may have worried about the effort

00:14:01.950 --> 00:14:04.080
of targeting mobile devices.

00:14:04.080 --> 00:14:06.120
You may have even created an entirely new,

00:14:06.120 --> 00:14:08.160
generic mobile asset pipeline

00:14:08.160 --> 00:14:09.930
to generate highly crunched assets

00:14:09.930 --> 00:14:12.120
to fit into limited resource space

00:14:12.120 --> 00:14:14.553
or to handle mobile-only texture formats.

00:14:16.930 --> 00:14:20.880
But with iPhone 15 Pro and iPhone 15 Pro Max,

00:14:20.880 --> 00:14:22.890
you can simply use your existing PC

00:14:22.890 --> 00:14:24.453
and console asset pipeline.

00:14:25.470 --> 00:14:27.930
Hardware accelerated BC and texture support

00:14:27.930 --> 00:14:29.190
means there's no longer a need

00:14:29.190 --> 00:14:32.280
to convert your existing large asset packages,

00:14:32.280 --> 00:14:34.290
although you can see even better compression

00:14:34.290 --> 00:14:37.560
and higher quality with ASDC compression.

00:14:37.560 --> 00:14:40.380
And more dedicated memory means seamlessly loading,

00:14:40.380 --> 00:14:43.500
storing, and moving large, high-quality assets

00:14:43.500 --> 00:14:46.980
that will really shine on the Retina ProMotion displays,

00:14:46.980 --> 00:14:49.683
and you'll save time with a simplified porting effort.

00:14:51.420 --> 00:14:53.520
Query for BCn availability

00:14:53.520 --> 00:14:55.920
using the metal device inspection function,

00:14:55.920 --> 00:14:57.370
supportsBCTextureCompression.

00:14:58.844 --> 00:15:02.400
If you also support other iPhone models running iOS 17,

00:15:02.400 --> 00:15:05.490
using assets compress with ASTC compression

00:15:05.490 --> 00:15:08.010
is a great choice for even better quality

00:15:08.010 --> 00:15:09.753
and higher compression ratios.

00:15:11.242 --> 00:15:14.100
To maximize available memory, be sure to enable

00:15:14.100 --> 00:15:17.540
the existing increased memory limit entitlement in Xcode

00:15:17.540 --> 00:15:20.130
in your Apple developer profile.

00:15:20.130 --> 00:15:22.920
With more resources, you can render with more detail,

00:15:22.920 --> 00:15:25.620
use higher resolution depth and shadow buffers,

00:15:25.620 --> 00:15:26.970
and implement more complex,

00:15:26.970 --> 00:15:29.013
resource-intense rendering algorithms.

00:15:29.910 --> 00:15:31.920
If you're scaling across devices,

00:15:31.920 --> 00:15:34.800
you can also use os_proc_available_memory

00:15:34.800 --> 00:15:38.104
to dynamically determine which resources are available.

00:15:38.104 --> 00:15:40.470
To bring large assets to iPhone,

00:15:40.470 --> 00:15:43.170
your app will need to dynamically download them.

00:15:43.170 --> 00:15:46.563
You have three ways to do this, On Demand Resources,

00:15:47.400 --> 00:15:49.470
Background Assets,

00:15:49.470 --> 00:15:51.783
or your own custom downloading implementation.

00:15:52.800 --> 00:15:55.530
When downloading, be sure to store them into allocation

00:15:55.530 --> 00:15:58.230
where they aren't impacting customer backups

00:15:58.230 --> 00:16:01.020
and where the system can purge them if needed.

00:16:01.020 --> 00:16:04.920
As your assets arrive, move them into the caches directory

00:16:04.920 --> 00:16:07.800
under your data container's library directory.

00:16:07.800 --> 00:16:09.270
This directory is not backed up

00:16:09.270 --> 00:16:12.120
with important per application user data.

00:16:12.120 --> 00:16:13.650
The system also guarantees

00:16:13.650 --> 00:16:16.140
it will not purge this cache needlessly.

00:16:16.140 --> 00:16:18.840
Learn more about the latest downloading technologies

00:16:18.840 --> 00:16:22.263
in the most recent background assets talk from WWDC.

00:16:23.700 --> 00:16:25.860
So that wraps up our best practices.

00:16:25.860 --> 00:16:27.660
We hope you bring your high-end game

00:16:27.660 --> 00:16:32.550
to iPhone 15 Pro and iPhone 15 Pro Max without compromises.

00:16:32.550 --> 00:16:35.640
The Apple A17 PRO GPU represents a huge leap

00:16:35.640 --> 00:16:37.560
in power and graphical features,

00:16:37.560 --> 00:16:41.910
which makes bringing your game to iPhone quick and easy.

00:16:41.910 --> 00:16:44.160
Together these iPhone 15 pro models

00:16:44.160 --> 00:16:46.020
join the family of Apple silicon Macs

00:16:46.020 --> 00:16:48.210
to build a unified target platform

00:16:48.210 --> 00:16:50.580
for your next-level gaming projects.

00:16:50.580 --> 00:16:53.493
I'm excited to see and play the games you bring to iPhone.