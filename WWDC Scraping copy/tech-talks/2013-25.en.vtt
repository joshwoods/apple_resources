WEBVTT

00:00:11.680 --> 00:00:12.160
All right.

00:00:12.160 --> 00:00:13.080
Hello, everyone.

00:00:13.080 --> 00:00:15.700
Hope you're enjoying the day so far.

00:00:15.700 --> 00:00:17.520
My name is Allan Schaffer.

00:00:17.520 --> 00:00:20.620
I'm the Game Technologies Evangelist
at Apple.

00:00:20.620 --> 00:00:25.490
And this session is about something
that I know that a lot of you are very

00:00:25.490 --> 00:00:30.690
excited about just from talking to you
over in the lab and before in the day,

00:00:30.690 --> 00:00:32.410
which is Sprite Kit.

00:00:33.140 --> 00:00:36.770
But, you know,
before I really dive into that content,

00:00:36.770 --> 00:00:41.300
what I want to do is just reflect
on some of the motivations behind

00:00:41.300 --> 00:00:45.800
Sprite Kit that we talked about back
when we introduced it back at WWDC.

00:00:45.800 --> 00:00:50.550
You know, if you really look at the
App Store and some of the most iconic

00:00:50.550 --> 00:00:55.060
games that are on the platform,
many of them are 2D, of course,

00:00:55.060 --> 00:00:58.410
and a lot of them have
some very common needs.

00:00:58.440 --> 00:01:02.900
They need to be able to draw a lot of
sprites and particles for characters.

00:01:03.140 --> 00:01:17.300
They need to be able to create a
framework for 2D game development.

00:01:17.320 --> 00:01:22.510
And something that would be built
from the beginning to accomplish

00:01:22.510 --> 00:01:28.000
those things with performance as
a central tenet of the framework.

00:01:28.000 --> 00:01:30.260
You know,
not something where you really had to

00:01:30.260 --> 00:01:32.220
kind of opt into the performance API.

00:01:32.220 --> 00:01:33.120
Or, you know, you had to kind of opt
into the performance API.

00:01:33.150 --> 00:01:34.800
Or adopt something special to do that.

00:01:34.880 --> 00:01:38.480
But where efficiency was really part
of the baseline of the framework.

00:01:38.480 --> 00:01:43.170
Another big motivation also was that
it would keep up with our technologies.

00:01:43.300 --> 00:01:48.340
Something that from day one would
support 64-bit applications.

00:01:48.340 --> 00:01:51.200
And would support iOS 7 and so on.

00:01:51.220 --> 00:01:54.400
And a lot of that is what's driven
the development of Sprite Kit.

00:01:54.400 --> 00:01:57.960
And I think that we've built
something that you'll really love.

00:01:58.040 --> 00:02:03.040
So Sprite Kit starts with a really fast,
really optimized API.

00:02:03.100 --> 00:02:06.060
And it's a really fast
engine for drawing sprites,

00:02:06.180 --> 00:02:08.400
arbitrary shapes, and particle effects.

00:02:08.400 --> 00:02:12.280
And then it also provides you with
capabilities for doing animations to

00:02:12.280 --> 00:02:14.780
animate those objects in the scene.

00:02:15.160 --> 00:02:19.280
And has a totally integrated
physics engine to drive things,

00:02:19.280 --> 00:02:22.300
make them more lifelike
and more fun in the game.

00:02:22.580 --> 00:02:26.690
And Sprite Kit also integrates
with our media stack in iOS

00:02:26.690 --> 00:02:28.580
7 to play audio and video.

00:02:28.580 --> 00:02:31.750
And to apply image processing
effects to the scene.

00:02:32.020 --> 00:02:32.670
And then it also integrates
with our media stack in iOS

00:02:32.670 --> 00:02:33.080
7 to play audio and video.

00:02:33.080 --> 00:02:37.510
And those are some of the capabilities
on the API side of Sprite Kit.

00:02:37.580 --> 00:02:41.330
But we also wanted to provide some
tools to simplify development.

00:02:41.340 --> 00:02:45.630
So within Xcode 5,
there's a particle editor

00:02:45.630 --> 00:02:48.320
built right into the tool.

00:02:48.320 --> 00:02:50.930
So you can edit particle effects
and bring them into your app.

00:02:51.000 --> 00:02:53.840
And a texture atlas generator as well.

00:02:53.840 --> 00:02:56.560
Which is something that's
very core to getting good

00:02:56.660 --> 00:02:58.780
performance in any 2D game engine.

00:03:00.380 --> 00:03:02.130
Here's my agenda for the session.

00:03:02.500 --> 00:03:06.780
Today I want to cover some of the real,
real basics of Sprite Kit.

00:03:06.780 --> 00:03:10.110
Just go through sprites and
particles and how to get started

00:03:10.530 --> 00:03:12.660
from scratch with Sprite Kit.

00:03:12.660 --> 00:03:18.580
Then dive into some more advanced topics
like textures and texture atlases.

00:03:18.580 --> 00:03:23.060
Really, texture atlases being one of
the two keys to getting great

00:03:23.060 --> 00:03:25.330
performance with Sprite Kit.

00:03:26.080 --> 00:03:30.700
Then I want to transition to some
things that we didn't cover at WWDC.

00:03:30.700 --> 00:03:35.550
The first of those is scene transitions,
which is something that will be very

00:03:35.550 --> 00:03:38.080
commonly done in a Sprite Kit-based game.

00:03:38.080 --> 00:03:39.940
Then cover drawing order.

00:03:39.940 --> 00:03:43.830
That's actually the second key
to getting great performance

00:03:43.940 --> 00:03:46.080
when you're using Sprite Kit.

00:03:46.080 --> 00:03:49.720
And then go back to some just
introductory material again

00:03:49.720 --> 00:03:53.850
and show you how some of the
animation part of Sprite Kit works.

00:03:55.180 --> 00:03:59.470
So let's get started just with a quick
tour of the API and some of these

00:03:59.470 --> 00:04:01.500
basics with sprites and particles.

00:04:01.500 --> 00:04:05.460
So in Sprite Kit,
your scene is composed of a tree

00:04:05.460 --> 00:04:09.150
structure of many elements called nodes.

00:04:09.230 --> 00:04:11.840
All of these things are nodes,
everything you see.

00:04:11.840 --> 00:04:16.120
Now, some nodes contain visual content,
shapes, images,

00:04:16.130 --> 00:04:18.320
all the things in blue here.

00:04:18.320 --> 00:04:24.600
So for example, if this were a scene,
my background image, the trees, the hero,

00:04:25.040 --> 00:04:27.430
the character,
and if I had a life counter

00:04:27.430 --> 00:04:30.240
and a hit point bar,
all of those visual parts of

00:04:30.240 --> 00:04:33.530
the scene are different nodes.

00:04:33.540 --> 00:04:39.320
And then other parts of the scene,
typically the interior nodes in this

00:04:39.320 --> 00:04:45.180
graph are often used as organizational
elements for grouping or just to

00:04:45.180 --> 00:04:50.510
be able to do transformations on
an entire subtree of the graph.

00:04:50.680 --> 00:04:53.960
So you see those,
those are the green ones here.

00:04:54.920 --> 00:04:58.420
So I'm organizing this graph
logically into a background layer,

00:04:58.440 --> 00:05:00.760
a foreground layer, and a HUD layer.

00:05:01.300 --> 00:05:05.980
And I'm able to apply,
change different properties on

00:05:05.980 --> 00:05:09.890
those nodes and those changes
then apply to the children.

00:05:10.310 --> 00:05:12.990
But then, of course,
we have to take that scene graph

00:05:12.990 --> 00:05:16.430
and somehow get it to be displayed
in your app's view hierarchy.

00:05:16.560 --> 00:05:19.400
And to do that, you'll use an SK View.

00:05:19.510 --> 00:05:24.910
So an SK View is a UI view or on the Mac,
an NSView subclass that knows how to

00:05:25.010 --> 00:05:28.140
kick off the rendering of your scene.

00:05:28.140 --> 00:05:31.650
And so once you've dropped
an SK View into your app,

00:05:31.680 --> 00:05:36.630
you can tell it to present the scene,
and you'll be off and running.

00:05:36.760 --> 00:05:40.380
And at that point, then,
that's where the Sprite

00:05:40.410 --> 00:05:42.370
Kit game loop kicks in.

00:05:42.370 --> 00:05:44.620
And so I want to show that to you here.

00:05:44.620 --> 00:05:49.930
So this is a sequence of events that
are going to happen every frame once

00:05:49.930 --> 00:05:53.030
your scene has been assigned to a view.

00:05:53.040 --> 00:05:54.270
So every frame.

00:05:54.750 --> 00:05:58.350
Sprite Kit is going to
want to render your scene,

00:05:58.420 --> 00:06:03.190
but before it does that,
it does a few other tasks and lets you

00:06:03.190 --> 00:06:06.420
tie in your game code into the cycle.

00:06:06.760 --> 00:06:11.160
So every frame is going to start
off with Sprite Kit calling your

00:06:11.160 --> 00:06:13.390
update method for the scene.

00:06:13.400 --> 00:06:18.420
And so this is where you can be
doing any of your game logic.

00:06:18.420 --> 00:06:23.690
Maybe you'll choose to spawn new enemies,
or you'll update your score,

00:06:23.800 --> 00:06:28.340
update the state of the game,
choose to progress to a new level,

00:06:28.340 --> 00:06:29.340
and so on.

00:06:29.360 --> 00:06:33.880
Whatever is specific to your game
update for this particular frame.

00:06:33.880 --> 00:06:38.920
Then after you've done all that,
Sprite Kit is going to evaluate its

00:06:38.920 --> 00:06:43.760
actions or any animations that are
attached to the nodes in the scene

00:06:43.760 --> 00:06:45.450
that are active for this current frame.

00:06:45.460 --> 00:06:49.150
Then after those have been evaluated,
you'll get a callback.

00:06:49.200 --> 00:06:50.420
So,

00:06:50.580 --> 00:06:53.030
As shown here,
did evaluate actions so that

00:06:53.180 --> 00:06:57.140
you can react to essentially
the result of those animations.

00:06:57.140 --> 00:07:01.830
So this is after the animations have
changed the positions of the nodes,

00:07:01.980 --> 00:07:05.810
for example,
or whatever the result of that action is.

00:07:05.810 --> 00:07:10.020
So for instance, if an animation ended up
moving a sprite off screen,

00:07:10.020 --> 00:07:13.510
then you might want to remove
it from the scene so it won't be

00:07:13.510 --> 00:07:15.840
included in any further processing.

00:07:15.960 --> 00:07:18.660
That sort of thing is
what you can do here.

00:07:19.780 --> 00:07:24.000
Then after that's done, Sprite Kit,
if you're using physics,

00:07:24.060 --> 00:07:29.140
it will then simulate any physics that
you've set up on the nodes in your scene,

00:07:29.220 --> 00:07:34.720
and it'll update you about any collisions
that have occurred and other things.

00:07:34.720 --> 00:07:39.220
And then it'll call you back to let you
know that all of that has been completed.

00:07:39.220 --> 00:07:45.450
And now at this point,
this is the last time that your code can

00:07:45.590 --> 00:07:48.380
touch the scene before it's rendered.

00:07:48.380 --> 00:07:48.380
So you can make any final changes to it.

00:07:48.380 --> 00:07:52.420
Now before you hand off
to Sprite Kit again.

00:07:52.420 --> 00:07:56.300
And so then finally, Sprite Kit tells,
or the SK view,

00:07:56.300 --> 00:07:58.840
tells the scene to render itself.

00:07:58.920 --> 00:08:04.290
And then hopefully this entire loop then
continues 30 or 60 frames per second.

00:08:04.340 --> 00:08:05.960
Right?

00:08:07.570 --> 00:08:08.310
So that's the game loop.

00:08:08.400 --> 00:08:12.240
But so now let me switch over and
take a look at some of the different

00:08:12.240 --> 00:08:13.960
kinds of nodes you have in Sprite Kit.

00:08:13.960 --> 00:08:15.900
This is an illustration
of the class hierarchy.

00:08:15.900 --> 00:08:20.380
So all the node types inherit
ultimately from SKNode,

00:08:20.380 --> 00:08:24.350
and then there's a number of different
specialized subclasses to do various

00:08:24.440 --> 00:08:26.100
kind of interesting things in your game.

00:08:26.130 --> 00:08:30.620
So nodes for text labels,
nodes for particle systems,

00:08:30.620 --> 00:08:33.880
for drawing arbitrary shapes,
for drawing sprites.

00:08:34.600 --> 00:08:39.080
Your scene is actually a special kind of
node that can have effects applied to it.

00:08:39.080 --> 00:08:43.000
And a crop node is a kind of
node that can apply a mask.

00:08:43.040 --> 00:08:45.920
Now I'm not going to go
through all of these,

00:08:46.030 --> 00:08:51.300
but just a couple of the highlights here,
starting with the base class, SKNode.

00:08:52.980 --> 00:08:55.820
So this is an object that
if it's in your scene,

00:08:55.820 --> 00:08:59.470
it's typically something that
you'll be using to organize

00:08:59.470 --> 00:09:02.970
other nodes into groups,
or as a handle, for example,

00:09:02.970 --> 00:09:05.520
to transform a subtree of children.

00:09:05.520 --> 00:09:08.700
And you can see a few of the
properties here of the SK node,

00:09:08.850 --> 00:09:11.740
and there's really, there's a lot more.

00:09:11.740 --> 00:09:14.180
This is the place,
as you're looking through

00:09:14.180 --> 00:09:17.260
the documentation,
that you should really start to see a

00:09:17.260 --> 00:09:19.570
lot of the capabilities of Sprite Kit.

00:09:19.710 --> 00:09:22.860
Even though most of the time you'll
probably be using the Sprite node,

00:09:22.860 --> 00:09:26.780
check out all of the methods and
properties that can be set on SK node,

00:09:26.940 --> 00:09:28.040
because obviously they're inherited.

00:09:28.040 --> 00:09:31.030
But so, you can see,
you can get your parent,

00:09:31.030 --> 00:09:34.830
the node's children,
its transformations for position,

00:09:34.930 --> 00:09:39.200
rotation, and scale,
properties to control visibility,

00:09:39.200 --> 00:09:41.680
like its alpha,
whether or not it's hidden.

00:09:41.680 --> 00:09:45.020
And of course,
just note that any properties

00:09:45.020 --> 00:09:49.680
that are set on a parent node
implicitly apply to that node.

00:09:49.700 --> 00:09:51.500
And to all of its children.

00:09:51.500 --> 00:09:54.290
So by setting the hidden flag,
for example,

00:09:54.290 --> 00:09:57.360
you can hide an entire subtree,
for instance.

00:09:57.420 --> 00:10:00.880
And then nodes can run actions,
meaning animations,

00:10:00.880 --> 00:10:04.790
and they can take part in the
physics calculations as well.

00:10:06.770 --> 00:10:07.660
So that's SK Node.

00:10:07.660 --> 00:10:08.670
Let me just go on.

00:10:08.760 --> 00:10:10.360
Next up is Sprite Node.

00:10:10.360 --> 00:10:14.100
So this is obviously Sprite Kit,
Sprite Node.

00:10:14.100 --> 00:10:17.560
Here's the most important node
type that you have in the toolkit.

00:10:17.700 --> 00:10:20.160
And really,
probably the main node class that

00:10:20.160 --> 00:10:21.890
you'll be using in your games.

00:10:22.090 --> 00:10:25.040
Probably 90, 80,
90% of the nodes that you

00:10:25.040 --> 00:10:26.640
have will be Sprite Nodes.

00:10:26.690 --> 00:10:28.780
And a Sprite Node can
be one of two things.

00:10:28.780 --> 00:10:34.140
It can either just draw a simple color,
or it can hold an image,

00:10:34.140 --> 00:10:37.960
typically with alpha to give
the illusion of a cutout shape,

00:10:38.670 --> 00:10:50.480
or it can be a blend of the two.

00:10:51.100 --> 00:13:44.800
[ Transcript missing ]

00:13:45.560 --> 00:13:48.800
There's a whole lot of different
properties that you can set

00:13:48.800 --> 00:13:50.750
up with your particle effects.

00:13:50.840 --> 00:13:54.010
Of course,
you're going to specify a texture image,

00:13:54.010 --> 00:13:57.020
and then there's really just
all these different parameters

00:13:57.020 --> 00:13:59.480
that you can fiddle with,
looking at the list.

00:13:59.600 --> 00:14:03.870
The scale, the rotation, the emission,
blending, birth rate, and so on.

00:14:03.880 --> 00:14:06.160
Kind of endless possibilities here.

00:14:06.160 --> 00:14:09.110
There's a lot of fiddling
that you could do.

00:14:10.960 --> 00:14:13.900
Very early on,
it became clear that we needed

00:14:13.900 --> 00:14:17.570
to move this out of just the
code and provide a tool to be

00:14:17.740 --> 00:14:19.850
able to manipulate all of this.

00:14:19.880 --> 00:14:27.350
And so that's why we have in Xcode a
particle editor built right into Xcode 5,

00:14:27.360 --> 00:14:28.750
so you don't have to leave your project.

00:14:28.820 --> 00:14:31.270
And really, it's just very, very simple.

00:14:31.280 --> 00:14:35.420
So what this does is it lets
you have an SK emitter node,

00:14:35.420 --> 00:14:40.260
and you can just manipulate
all of its properties visually.

00:14:40.600 --> 00:14:42.620
And then just have that
saved into your project.

00:14:42.640 --> 00:14:46.080
It's going to create an archive
of that SK emitter node,

00:14:46.080 --> 00:14:48.800
and then you can just
use NSKeyedUnarchiver to

00:14:48.800 --> 00:14:50.340
bring it into your app.

00:14:50.420 --> 00:14:54.730
And this is great,
because it lets you kind of separate

00:14:54.730 --> 00:15:01.500
all the adjustments of your particle
system outside of a compilation cycle.

00:15:01.500 --> 00:15:07.550
Okay, so that's actually where I want
to stop and show a quick demo

00:15:07.550 --> 00:15:10.300
of a simple SpriteKit app.

00:15:10.600 --> 00:15:11.740
That I'll build up here.

00:15:11.740 --> 00:15:16.000
First, let me give you just a very
quick tour around this.

00:15:16.140 --> 00:15:19.280
So this is really just an
app that's built mostly off

00:15:19.280 --> 00:15:22.820
of the SpriteKit template
that you can get in Xcode.

00:15:22.820 --> 00:15:24.880
And then I've added just
a couple of simple things.

00:15:24.920 --> 00:15:28.540
I've added a ship into it,
but here's just how it works.

00:15:28.710 --> 00:15:31.980
When you initialize this scene,
it starts out by setting

00:15:31.980 --> 00:15:33.460
its background color.

00:15:33.460 --> 00:15:37.420
It creates a label node that's
going to say hello world

00:15:37.420 --> 00:15:39.660
in the middle of the frame.

00:15:40.240 --> 00:15:42.160
But that wasn't very interesting.

00:15:42.160 --> 00:15:46.840
So down here, when you touch,
I have it set up so that it

00:15:46.840 --> 00:15:51.940
will create a Sprite node the
first time that you do a touch.

00:15:51.940 --> 00:15:55.080
And set the position of that
Sprite to the location of the

00:15:55.080 --> 00:15:56.900
touch and add it to the scene.

00:15:56.900 --> 00:16:00.810
And then as I move around
down here and touch is moved,

00:16:00.810 --> 00:16:05.200
I'm just updating the position
of the Sprite called ship.

00:16:05.480 --> 00:16:07.050
And as I'm moving.

00:16:07.060 --> 00:16:09.140
So let's just run that in
the simulator really quickly.

00:16:09.140 --> 00:16:10.220
Show you where we're starting.

00:16:10.220 --> 00:16:11.870
Hello world.

00:16:11.880 --> 00:16:12.280
Okay.

00:16:12.280 --> 00:16:14.260
And now here's my Sprite.

00:16:14.260 --> 00:16:17.290
And as I'm moving around
just by hand here,

00:16:17.290 --> 00:16:19.250
the Sprite moves around.

00:16:19.480 --> 00:16:19.660
Okay.

00:16:19.660 --> 00:16:20.500
Great.

00:16:20.830 --> 00:16:22.210
Nothing too exciting yet.

00:16:22.220 --> 00:16:25.750
But on the other hand, I mean,
that really is kind of all it takes

00:16:25.750 --> 00:16:29.420
to get up and running with the very,
very basics of SpriteKit.

00:16:29.420 --> 00:16:30.810
And that's kind of nice.

00:16:30.950 --> 00:16:33.140
You know,
you can have something where then you are

00:16:33.150 --> 00:16:35.780
beginning to work on your artwork very,
very quickly.

00:16:35.780 --> 00:16:38.570
But so that's where
I want to go with this.

00:16:38.600 --> 00:16:40.200
I'm going to start with this.

00:16:40.200 --> 00:16:42.320
I'm going to start adding
some things in here.

00:16:42.320 --> 00:16:44.280
And I want to show you
the particle system.

00:16:44.330 --> 00:16:48.320
So here I'm in iOS resources,
SpriteKit particle file.

00:16:48.320 --> 00:16:49.320
I'll hit next.

00:16:49.520 --> 00:16:52.320
And I don't know if you
can see this very well.

00:16:52.320 --> 00:16:55.310
We provide a number of
different particle templates.

00:16:55.320 --> 00:16:58.400
Here I've chosen fire,
but there's a whole bunch more that

00:16:58.400 --> 00:17:00.270
you can go and experiment with.

00:17:00.390 --> 00:17:02.310
I'm going to stick with fire.

00:17:02.510 --> 00:17:04.320
Hit next.

00:17:04.320 --> 00:17:06.930
And call it exhaust.

00:17:22.990 --> 00:17:22.990
So there's the beginning of sort of a
default fire effect that we provide.

00:17:22.990 --> 00:17:22.990
And now there's some different things
I want to go in here and adjust.

00:17:22.990 --> 00:17:22.990
And so let me zoom in so
you can see what I'm doing.

00:17:23.330 --> 00:17:26.640
So first, I'm going to take the birth
rate of the particles down

00:17:26.980 --> 00:17:28.420
into the realm of about 100.

00:17:28.620 --> 00:17:30.700
I can either just do that
by moving the mouse around,

00:17:30.700 --> 00:17:33.820
or I can go in here and type 100.

00:17:34.000 --> 00:17:38.930
I want to change the angle
to go down instead of up.

00:17:39.030 --> 00:17:42.460
And I'm going to make
this a little more narrow.

00:17:42.570 --> 00:17:44.570
Yeah, that looks about right.

00:17:44.680 --> 00:17:47.950
That's about where I want it,
about half the size as it was.

00:17:47.980 --> 00:17:51.640
And then I'm going to add one
more color to the end of it.

00:17:51.860 --> 00:17:55.850
So I think I may have to zoom
out to find my color picker.

00:17:57.320 --> 00:17:58.590
And sure enough, yep, there it is.

00:17:58.660 --> 00:17:59.580
I'm going to make it a little brighter.

00:17:59.600 --> 00:18:00.100
Okay.

00:18:00.100 --> 00:18:01.350
So there.

00:18:01.350 --> 00:18:05.560
I've twiddled a couple of things
with this particle effect here.

00:18:05.560 --> 00:18:08.520
So now, if you can see it,
it starts out sort of reddish

00:18:08.520 --> 00:18:12.260
and ends kind of greenish through
the lifetime of each particle.

00:18:12.260 --> 00:18:16.720
And it's just saved here in my project,
exhaust.sks.

00:18:16.720 --> 00:18:20.780
And I'm going to go back into the
scene and bring that in and do

00:18:20.780 --> 00:18:23.000
some code here to bring it in.

00:18:24.740 --> 00:18:28.160
So through the magic of Xcode,
I think I can just paste

00:18:28.160 --> 00:18:29.760
in a line of code there.

00:18:29.760 --> 00:18:31.080
Yep, there it is.

00:18:31.080 --> 00:18:36.840
I know that you guys all
can do the same as well.

00:18:36.840 --> 00:18:39.020
But okay,
so let's look at what this is doing.

00:18:39.020 --> 00:18:42.690
SK emitter node,
I'm using an NSKeyed unarchiver to,

00:18:42.700 --> 00:18:47.760
and then just make your way through
all that to unarchive exhaust.sks.

00:18:47.760 --> 00:18:48.480
Right?

00:18:48.480 --> 00:18:52.960
So now I have my SK emitter
node sitting in this variable.

00:18:54.330 --> 00:18:56.010
So I'm going to go back
to my Xline of code.

00:18:56.020 --> 00:18:59.700
Okay.

00:19:00.910 --> 00:19:01.000
I'm going to set its position down
to the center bottom of the ship.

00:19:01.920 --> 00:19:07.180
And then add the emitter
as a child of the ship.

00:19:07.180 --> 00:19:08.800
OK?

00:19:08.810 --> 00:19:10.590
Run that.

00:19:11.500 --> 00:19:12.720
Should be no surprises here.

00:19:12.720 --> 00:19:14.040
Okay, so there it is, right?

00:19:14.040 --> 00:19:17.320
So I have my emitter in the scene,
and as I move around,

00:19:17.320 --> 00:19:18.920
it moves along with it.

00:19:18.920 --> 00:19:23.340
Okay, I'm not quite done here, though,
because as you can see,

00:19:23.570 --> 00:19:28.440
everything is working almost correctly,
but it kind of feels like the whole

00:19:28.460 --> 00:19:32.630
thing is like on a plate of glass,
like the smoke is actually moving

00:19:32.900 --> 00:19:35.250
as the ship moves along as well.

00:19:35.250 --> 00:19:36.870
And that's not quite what I want.

00:19:36.890 --> 00:19:40.690
What's happening is because all
of the emitter particles are being

00:19:40.700 --> 00:19:45.590
positioned relative to the ship,
and as I change the position of the ship,

00:19:46.070 --> 00:19:49.820
that change propagates into the children,
and so they're all kind

00:19:49.820 --> 00:19:51.390
of moving along with it.

00:19:51.480 --> 00:19:52.800
That's not what I want.

00:19:52.800 --> 00:19:57.700
I want the emitter particles to be
emitted from the position of the ship,

00:19:57.700 --> 00:20:01.580
but once they're emitted,
I want them to be kind of in free space.

00:20:01.650 --> 00:20:05.330
I want them to be -- remain
relative to the scene instead

00:20:05.340 --> 00:20:07.560
of relative to the ship.

00:20:07.560 --> 00:20:10.400
So I've got one more line of code.

00:20:10.560 --> 00:20:13.050
So what I can do is
on the emitter itself,

00:20:13.080 --> 00:20:17.650
I can say, hey, emitter,
your target node is, well, in this case,

00:20:17.650 --> 00:20:20.280
self, because self is the scene.

00:20:20.300 --> 00:20:24.900
So your target is the entire
scene rather than your parent.

00:20:24.900 --> 00:20:27.760
And now if I run that...

00:20:29.510 --> 00:20:29.870
Great.

00:20:30.190 --> 00:20:32.300
Now it's working the
way you would expect.

00:20:32.350 --> 00:20:36.650
As I move the ship around,
the particles just kind of fall

00:20:36.660 --> 00:20:40.080
relative to where they started from.

00:20:41.100 --> 00:20:45.690
Okay, so that is just a very
simple example of Sprite Kit.

00:20:45.690 --> 00:20:51.420
Good performance, of course,
in this case, and obviously just some

00:20:51.420 --> 00:20:53.590
very easy code to write.

00:20:53.640 --> 00:20:57.360
All I've really done here that's
more than a single line of code

00:20:57.360 --> 00:21:01.280
is the wraparound here for messing
with an NSKeyed unarchiver,

00:21:01.380 --> 00:21:01.910
right?

00:21:01.920 --> 00:21:05.460
And that is itself very simple.

00:21:05.480 --> 00:21:09.470
Okay, so let's go back.

00:21:13.630 --> 00:21:17.980
Okay, so let me recap the node types
and what I've gone through so far.

00:21:17.980 --> 00:21:21.390
So I covered nodes, sprites,
and emitters.

00:21:21.390 --> 00:21:22.890
I briefly mentioned scenes.

00:21:22.890 --> 00:21:24.670
I'll go back to that in a little bit.

00:21:24.670 --> 00:21:27.630
But then there really are,
there's a lot of other node types.

00:21:27.670 --> 00:21:30.370
As I said, we have labels,
which render a text string.

00:21:30.370 --> 00:21:31.760
That was the Hello World.

00:21:31.760 --> 00:21:34.400
Video nodes are very powerful.

00:21:34.400 --> 00:21:37.830
You can have video in your
scene acting as a sprite,

00:21:37.930 --> 00:21:39.900
as a full-fledged sprite.

00:21:39.900 --> 00:21:43.360
You know, not just an overlay,
but it can have effects that

00:21:43.360 --> 00:21:45.680
are relative to it and so on.

00:21:45.810 --> 00:21:50.190
Shape nodes let you render
a shape based on a CG path.

00:21:50.520 --> 00:21:53.660
Effect nodes let you
put a core image filter,

00:21:53.660 --> 00:21:57.560
apply a core image filter
to a subtree of your scene.

00:21:57.560 --> 00:22:03.310
And crop nodes will create a mask
from a subtree and allow you to

00:22:03.310 --> 00:22:06.130
apply that mask to the rendering.

00:22:06.130 --> 00:22:08.580
So it's a lot of good capabilities there.

00:22:10.320 --> 00:22:12.040
Okay, so those are the node types.

00:22:12.170 --> 00:22:16.640
And that's sort of just the very
quick introduction to the node family

00:22:16.640 --> 00:22:18.960
and kind of how SpriteKit works.

00:22:19.020 --> 00:22:24.260
What I want to move on to now is to
talk about textures and texture atlases.

00:22:25.410 --> 00:22:29.150
And textures,
the fundamental SpriteKit bitmap

00:22:29.150 --> 00:22:31.200
image type is SK texture.

00:22:31.320 --> 00:22:34.520
So this is the image
that is in a sprite node,

00:22:34.520 --> 00:22:39.140
and it's the image that's also
used for particles as well.

00:22:40.100 --> 00:22:43.520
And the thing about this class
is really its flexibility.

00:22:43.520 --> 00:22:47.870
There's a lot of different ways that
you can create a texture in SpriteKit.

00:22:47.930 --> 00:22:50.920
You can load them from a file,
which is what I was just showing,

00:22:50.920 --> 00:22:55.000
using texture with image named or the
convenience method that's on sprite node,

00:22:55.160 --> 00:22:56.710
which is what you saw before.

00:22:57.760 --> 00:23:00.270
You can create them from a CG image ref.

00:23:00.680 --> 00:23:04.740
You can create them from an
NSData with a size from a UI image.

00:23:04.940 --> 00:23:09.200
Or even create them
from another SLR image.

00:23:10.600 --> 00:23:15.300
Or what I'll show here are the
subregion of another SK texture.

00:23:15.300 --> 00:23:21.780
And the reason why I highlight that is
because this is actually how texture

00:23:21.880 --> 00:23:24.020
atlases are implemented in SpriteKit.

00:23:25.190 --> 00:23:30.180
When you're creating a texture
from a subregion of some other one,

00:23:30.250 --> 00:23:33.860
we don't actually go and copy
the bits out and create some

00:23:33.860 --> 00:23:36.060
second copy sitting somewhere.

00:23:37.010 --> 00:23:38.900
We just have it index
that original texture.

00:23:40.520 --> 00:23:44.080
And this enables it to be very efficient.

00:23:44.170 --> 00:23:47.720
You can have one large image
that's loaded and then be sampling

00:23:47.720 --> 00:23:51.060
subregions out of it very,
very efficiently.

00:23:51.350 --> 00:23:54.000
All of this is hinting
at texture atlases,

00:23:54.090 --> 00:23:57.250
so let's talk about that
more explicitly now.

00:23:57.250 --> 00:24:00.690
As I said,
texture atlases really are one of the

00:24:00.690 --> 00:24:03.640
keys to performance with Sprite Kit.

00:24:03.640 --> 00:24:08.750
And really, with any 2D graphics engine,
the ability to minimize state

00:24:08.750 --> 00:24:13.730
changes in your underlying graphics
engine by using things like texture

00:24:13.730 --> 00:24:16.670
atlases is just absolutely critical.

00:24:16.680 --> 00:24:23.570
So the idea of a texture atlas is to take
a whole bunch of loose texture images,

00:24:23.890 --> 00:24:27.720
and rather than dealing with
them all individually kind of

00:24:27.720 --> 00:24:32.130
in a small way for each one,
is to just take them all and put them,

00:24:32.410 --> 00:24:35.630
basically paste them all
into one larger image,

00:24:35.970 --> 00:24:40.800
and then sample regions of that
larger image during runtime.

00:24:40.800 --> 00:24:44.010
So the underlying graphics
engine then can just load

00:24:44.350 --> 00:24:46.520
that large image into the GPU.

00:24:46.680 --> 00:24:52.310
And then the code is doing is saying, oh,
okay, I want this little region of

00:24:52.320 --> 00:24:55.970
it or that little region of it,
rather than having to have a bunch

00:24:56.000 --> 00:24:59.580
of little textures and be swapping
them in and out all the time.

00:24:59.620 --> 00:25:01.510
So it's much more efficient.

00:25:01.520 --> 00:25:06.340
What you see here in this diagram
is we ship an example along with

00:25:06.750 --> 00:25:09.140
Sprite Kit called Adventure.

00:25:09.200 --> 00:25:12.510
It's a big, full-fledged adventure game.

00:25:12.520 --> 00:25:16.500
And it has a lot of
different assets and artwork.

00:25:16.680 --> 00:25:17.710
And so on along with it.

00:25:17.730 --> 00:25:23.020
And so these are some of the art assets,
like trees and caves

00:25:23.020 --> 00:25:25.200
and minions and so on.

00:25:25.200 --> 00:25:28.850
So rather than having, like,
all of these be separate textures

00:25:28.850 --> 00:25:32.690
that we're dealing with and
loading into the GPU independently,

00:25:32.770 --> 00:25:36.610
we just throw them all into a
texture atlas for performance.

00:25:38.200 --> 00:31:28.700
[ Transcript missing ]

00:31:28.950 --> 00:31:31.560
And so this is something
that's very common,

00:31:31.560 --> 00:31:34.450
and we hadn't really
described that very much.

00:31:34.450 --> 00:31:38.480
But it's just important to realize,
and that you're not doing

00:31:38.480 --> 00:31:42.300
anything unusual if you
start using multiple scenes.

00:31:42.320 --> 00:31:45.360
Now, one thing, though,
was that we also wanted

00:31:45.360 --> 00:31:48.320
to make the transitions,
you know, of course,

00:31:48.320 --> 00:31:51.180
you want your transitions
to look very nice.

00:31:51.280 --> 00:31:55.960
And so for that, we provide an object
called an SK transition.

00:31:55.970 --> 00:32:01.920
So this does a transition between your
current scene and a new one coming in.

00:32:02.000 --> 00:32:03.770
And a visual transition.

00:32:03.770 --> 00:32:07.930
And there's a lot of different
transitions that are built in.

00:32:07.940 --> 00:32:13.740
We have transitions for a crossfade
between scenes or fade through a color.

00:32:13.740 --> 00:32:18.880
There's transitions of a door closing
and the new scene is on the door.

00:32:18.880 --> 00:32:21.230
Or doors opening and the
new scene is back on.

00:32:21.300 --> 00:32:22.000
There's transitions behind that.

00:32:22.040 --> 00:32:27.180
There's transitions to flip horizontally
and vertically to the new scene.

00:32:27.180 --> 00:32:30.460
Or to move and push and reveal and so on.

00:32:30.460 --> 00:32:35.120
But then also, something that I'm really
kind of jazzed about is that

00:32:35.120 --> 00:32:40.010
there are a lot of CI filter,
core image filter-based transitions.

00:32:40.020 --> 00:32:47.460
Swipe, flash, page curl, ripple,
copy machine, disintegrate, dissolve.

00:32:47.460 --> 00:32:50.160
There's all these
different core image-based.

00:32:51.430 --> 00:32:52.190
Transition effects.

00:32:52.280 --> 00:32:58.390
And it's also possible for you to extend
that and create custom transitions

00:32:58.390 --> 00:33:01.350
by creating a CI filter subclass.

00:33:01.440 --> 00:33:05.720
Now, you can't write a new
core image kernel in iOS.

00:33:05.720 --> 00:33:09.770
But you can subclass CI filter
and create a whole filter chain

00:33:09.910 --> 00:33:12.190
within your new custom subclass.

00:33:12.290 --> 00:33:16.540
And have some really
intricate transition effects.

00:33:16.640 --> 00:33:21.260
And I'll just, as an aside,
I'll mention that same idea can also.

00:33:21.280 --> 00:33:26.320
Be applied to an SK emitter node
which wants a CI filter as well.

00:33:26.520 --> 00:33:32.610
So, there's tremendous power there for
doing image-based effects with your

00:33:32.730 --> 00:33:34.280
2D objects or your entire scene.

00:33:34.280 --> 00:33:37.720
But so, let's take a look,
kind of back up and look

00:33:37.720 --> 00:33:39.520
at a simpler example.

00:33:39.520 --> 00:33:42.020
Let's say that I have a transition.

00:33:42.320 --> 00:33:47.980
And I want to move the new scene up from
the bottom and cover up the old scene.

00:33:48.040 --> 00:33:50.900
So, I'm going to create a move in.

00:33:51.330 --> 00:33:53.150
With direction transition.

00:33:53.530 --> 00:33:55.270
Of direction up.

00:33:55.400 --> 00:33:59.130
And the duration of the transition
is going to be two seconds.

00:33:59.280 --> 00:34:01.150
And then next.

00:34:01.370 --> 00:34:01.660
Okay.

00:34:01.840 --> 00:34:03.760
So, I have a decision to make here.

00:34:04.260 --> 00:34:08.590
About whether I want to pause
the rendering of either the new

00:34:08.590 --> 00:34:10.940
scene or the old scene or both.

00:34:11.280 --> 00:34:15.040
Now, by default,
once I begin a transition,

00:34:15.190 --> 00:34:16.680
both will pause.

00:34:16.780 --> 00:34:18.710
But in this case.

00:34:19.110 --> 00:34:20.780
By default.

00:34:21.310 --> 00:34:26.280
In this case, what I'm saying is, no,
I don't want to pause the outgoing scene.

00:34:26.280 --> 00:34:30.110
I want it to keep playing
until the new one comes fully

00:34:30.110 --> 00:34:32.280
into place two seconds later.

00:34:32.280 --> 00:34:36.280
And keep rendering until
that transition ends.

00:34:37.070 --> 00:34:38.040
So that's what this does here.

00:34:38.040 --> 00:34:39.780
Pauses outgoing scene as no.

00:34:39.780 --> 00:34:43.500
And then finally here,
this is the part that

00:34:43.500 --> 00:34:44.710
actually just does the work.

00:34:44.810 --> 00:34:49.170
I tell the view to present the new
scene and pass in the transition.

00:34:49.180 --> 00:34:50.300
And that's it.

00:34:51.990 --> 00:34:55.600
Okay, so that's just a real quick look
at transitions and dealing with

00:34:55.700 --> 00:34:59.610
multiple scenes and something you'll
be actually doing a lot of with Sprite

00:34:59.610 --> 00:35:03.220
Kit under very normal circumstances.

00:35:03.600 --> 00:35:05.980
Next, a really important topic.

00:35:06.070 --> 00:35:14.400
I want to talk about drawing
order because this has such a

00:35:14.460 --> 00:35:19.880
profound impact on performance.

00:35:19.880 --> 00:35:19.880
It's another topic also that we
didn't get to at WWDC last June.

00:35:20.220 --> 00:35:24.560
The lesson here is that the
more that you can let Sprite

00:35:24.980 --> 00:35:30.930
Kit manage the drawing order of your
sprites and particles and so on,

00:35:30.950 --> 00:35:34.620
the more optimization Sprite
Kit can apply to the rendering.

00:35:34.640 --> 00:35:40.040
Okay, so the more that you take control,
the less optimized it can be.

00:35:40.040 --> 00:35:43.900
The more that you give control,
the more efficient it can be.

00:35:44.190 --> 00:35:48.420
All right, so by default,
we give you total control.

00:35:48.420 --> 00:35:50.380
We put you in control of drawing order.

00:35:50.380 --> 00:35:53.720
And it's a Sprite engine,
and it's using the painter's

00:35:53.720 --> 00:35:55.820
algorithm for all of its drawing.

00:35:55.820 --> 00:35:59.490
So by default,
we follow two very simple rules.

00:35:59.490 --> 00:36:03.810
A parent draws its content
before it renders its children,

00:36:03.880 --> 00:36:09.710
and children are rendered in the order
that they appear in the child array.

00:36:09.740 --> 00:36:10.940
Right?

00:36:10.940 --> 00:36:13.720
So let's look at an example
here with this helicopter.

00:36:14.000 --> 00:36:18.000
So the missiles will be drawn first,
then the body of the

00:36:18.000 --> 00:36:21.800
helicopter will be drawn next,
then the primary rotor

00:36:21.800 --> 00:36:24.660
will be overlaid on that,
and then the tail rotor

00:36:24.660 --> 00:36:26.040
will be overlaid last.

00:36:26.060 --> 00:36:27.220
Okay.

00:36:27.220 --> 00:36:29.790
And you get the result that's here,
and it looks correct,

00:36:29.790 --> 00:36:30.920
and everything is fine.

00:36:31.020 --> 00:36:34.080
And actually, this is okay.

00:36:34.100 --> 00:36:38.230
But the issue is if you are
drawing a lot of these objects,

00:36:38.240 --> 00:36:42.620
then you'll want to do
something that's more efficient.

00:36:42.620 --> 00:36:43.920
You'll want to give more.

00:36:43.940 --> 00:36:47.390
control over the
SpriteKit to optimize this.

00:36:47.790 --> 00:36:50.360
So there's a couple of different
optimizations you can apply.

00:36:50.360 --> 00:36:54.930
The first is this,
is that you can give your nodes

00:36:54.930 --> 00:37:01.670
an explicit height in the scene
specified relative to their parent.

00:37:01.670 --> 00:37:06.620
So when this is added in,
then each node's sort of global

00:37:06.620 --> 00:37:11.870
height will be calculated when
we go to render the scene.

00:37:11.890 --> 00:37:15.880
And all of the nodes will be
rendered from lowest to highest.

00:37:15.960 --> 00:37:20.370
And then for any node where
the height value is the same,

00:37:20.370 --> 00:37:23.990
where it's equal,
then the parent will be drawn first,

00:37:24.130 --> 00:37:26.790
and then siblings drawn in child order.

00:37:26.790 --> 00:37:29.940
But so let's apply that
now to this graphic here.

00:37:29.940 --> 00:37:35.300
So I'm saying that the helicopter
overall is at height 100 in the scene.

00:37:35.300 --> 00:37:38.580
That's where the body is, right at 100.

00:37:38.950 --> 00:37:42.510
Primary rotor relative to
its parent is at height 1,

00:37:42.510 --> 00:37:46.140
but of course globally that would be 101.

00:37:46.140 --> 00:37:49.260
So is the tail rotor at 101?

00:37:49.260 --> 00:37:53.290
And then the missiles are at height 99,
right?

00:37:53.450 --> 00:37:56.740
So obviously when we go to draw this,
we would draw the missiles first,

00:37:56.890 --> 00:37:58.900
then the body,
then the primary and the tail in

00:37:58.900 --> 00:38:00.310
the order that they appear here.

00:38:00.310 --> 00:38:04.660
And so the result for one
helicopter would appear identical,

00:38:04.660 --> 00:38:05.320
of course.

00:38:05.320 --> 00:38:10.350
But the issue now is if I add
thousands of helicopters,

00:38:10.600 --> 00:38:14.030
then we would end up drawing
all of the missiles together.

00:38:14.030 --> 00:38:17.040
We would end up drawing
all of the bodies together.

00:38:17.040 --> 00:38:19.780
And then the primary and tail rotor.

00:38:19.790 --> 00:38:24.200
And that can be much more efficient
because there's many cases where we can

00:38:24.200 --> 00:38:28.490
avoid state changes if that's the case.

00:38:28.780 --> 00:38:34.090
But so now, besides this, though,
there's one more piece of this.

00:38:34.090 --> 00:38:39.020
And that's that you can also,
you have the ability to remove the

00:38:39.130 --> 00:38:45.110
constraint that nodes with the same
height will be drawn in child order.

00:38:45.120 --> 00:38:48.660
And instead,
give that power over to Sprite Kit to

00:38:48.660 --> 00:38:54.590
decide the order based on whatever would
be the most efficient way of drawing it.

00:38:54.710 --> 00:38:58.450
Essentially, whatever would minimize
the number of draw calls.

00:38:58.600 --> 00:39:00.570
In the underlying graphics hardware.

00:39:00.610 --> 00:39:05.450
So, and we use the variable here
is ignores sibling order.

00:39:05.450 --> 00:39:08.100
And you can set that on a scene.

00:39:08.120 --> 00:39:12.310
So, if you put these two things together,
you set ignores sibling

00:39:12.310 --> 00:39:15.010
order on your scene,
and then you give your

00:39:15.010 --> 00:39:18.710
nodes an explicit height,
then now every node's global

00:39:18.950 --> 00:39:22.920
height is going to be calculated,
and they will all be drawn

00:39:22.920 --> 00:39:24.690
from lowest to highest.

00:39:24.740 --> 00:39:28.580
You know, thanks, so that they work with
the painter's algorithm.

00:39:28.600 --> 00:39:33.240
And then, but for anywhere where two
nodes have equal height,

00:39:33.240 --> 00:39:37.060
Sprite Kit is going to sort
them to whatever would be the

00:39:37.360 --> 00:39:41.610
most optimal amount of batching,
or essentially to reduce the number

00:39:41.620 --> 00:39:45.790
of drawing calls that will be made,
reduce the number of state changes.

00:39:45.800 --> 00:39:46.990
Okay.

00:39:47.360 --> 00:39:50.420
This is something that can
give any Sprite Kit app

00:39:50.550 --> 00:39:52.720
really fantastic performance.

00:39:52.720 --> 00:39:57.060
This is what we encourage you
to opt into for anything that

00:39:57.060 --> 00:39:59.660
you can hand this control over.

00:39:59.680 --> 00:40:03.280
Ultimately,
this is something that's very simple,

00:40:03.280 --> 00:40:07.740
but it just requires you to set
up your scene in a particular way.

00:40:07.740 --> 00:40:11.770
Here's the key insight to have
with all of this and how you

00:40:11.770 --> 00:40:14.330
design the layout of your scene.

00:40:14.520 --> 00:40:19.810
To compose your scene
into layers implicitly,

00:40:20.200 --> 00:40:25.330
where give objects a common
height in each layer,

00:40:25.340 --> 00:40:29.460
and then anything that might
overlap with each other,

00:40:29.650 --> 00:40:33.440
like how the body of the helicopter
overlaps with the missiles,

00:40:33.440 --> 00:40:36.770
put those things each
in a different layer.

00:40:36.810 --> 00:40:43.880
Then set that ignore sibling
order flag on the scene,

00:40:44.280 --> 00:40:48.520
and then Sprite Kit now can
take full advantage of both your

00:40:48.520 --> 00:40:52.420
knowledge of how the scene needs
to look visually based on layering,

00:40:52.570 --> 00:40:57.340
but also do something that's completely
efficient with the graphics hardware.

00:40:58.100 --> 00:40:59.500
Okay.

00:40:59.650 --> 00:41:03.960
So that is it, what I wanted to talk
about for drawing order.

00:41:03.960 --> 00:41:09.610
And just now for this very
last section of the talk,

00:41:09.660 --> 00:41:17.020
I actually want to back up a bit to
some introductory material again and

00:41:17.060 --> 00:41:21.290
talk just in a little more detail
about the capabilities that Sprite

00:41:21.290 --> 00:41:21.290
Kit has for drawing animation.

00:41:21.630 --> 00:41:26.650
So the action system is how
we do animation in Sprite Kit.

00:41:26.650 --> 00:41:31.550
We really wanted to create an animation
system that would be very simple to use,

00:41:31.610 --> 00:41:35.100
super powerful,
have a lot of flexibility,

00:41:35.100 --> 00:41:39.920
but ultimately that would also have
an API that's very simple to kind of

00:41:39.920 --> 00:41:45.310
type and real simple for programmers to
understand and read how an animation is

00:41:45.310 --> 00:41:48.450
put together just by looking at the code.

00:41:49.140 --> 00:41:52.820
And so all of it is wrapped up
in one class called SK Action.

00:41:52.820 --> 00:41:56.280
And as you can see,
SK Actions can be applied

00:41:56.280 --> 00:41:58.040
directly to a node.

00:41:58.040 --> 00:42:00.360
They start running immediately.

00:42:00.360 --> 00:42:03.270
They're removed from the
node when they finish.

00:42:03.360 --> 00:42:07.690
And so it ends up being something
that's just very intuitive.

00:42:07.690 --> 00:42:12.960
It's almost like a scripting language
for Sprite Kit because you don't really

00:42:12.960 --> 00:42:18.350
have to write a lot of extra management
code for dealing with animations.

00:42:20.080 --> 00:42:23.170
So here's some just simple
examples of different,

00:42:23.170 --> 00:42:26.420
you know,
essentially the built-in basic actions,

00:42:26.420 --> 00:42:29.600
the built-in animations
that Sprite Kit provides,

00:42:29.600 --> 00:42:30.990
a few of them here.

00:42:31.000 --> 00:42:35.780
You can see an animation to rotate
a sprite by a particular angle,

00:42:35.800 --> 00:42:40.740
to move a sprite from here to there,
to fade the alpha of a sprite to,

00:42:40.740 --> 00:42:46.840
you know, change its transparency,
and a couple to scale either uniform

00:42:47.180 --> 00:42:49.060
in each direction or different.

00:42:49.060 --> 00:42:50.800
And so this is just a really simple
example of a little bit of the things

00:42:50.800 --> 00:42:52.390
that you can do to take control
of different scaling in X and Y.

00:42:52.400 --> 00:42:58.730
So these are just some of the really
basic actions that you can apply.

00:42:59.080 --> 00:43:01.930
But now,
something that's very cool is that

00:43:01.930 --> 00:43:06.840
you can just start to group actions
together and combine them together.

00:43:06.840 --> 00:43:08.410
So for example here.

00:43:08.410 --> 00:43:13.950
So I can create action sequences where
the first action will run to completion,

00:43:13.950 --> 00:43:18.580
for example, then start a second one,
then start a third one.

00:43:19.090 --> 00:43:23.020
And all that it needs is some very
simple code here where I'm just

00:43:23.020 --> 00:43:27.870
running an action and specifying a
sequence and then using Objective-C's

00:43:28.200 --> 00:43:30.630
array notation to lay those out.

00:43:30.680 --> 00:43:32.300
This would be a sequence.

00:43:32.300 --> 00:43:37.560
I can also specify actions to run,
to be grouped, to run simultaneously.

00:43:37.680 --> 00:43:38.800
That's what I'm showing here.

00:43:38.800 --> 00:43:42.150
As you can see,
each one can have its own duration.

00:43:42.150 --> 00:43:45.580
It can be completely
independent of the other ones.

00:43:45.640 --> 00:43:48.980
Same kind of syntax here,
just a group instead of a sequence.

00:43:49.080 --> 00:43:50.680
sequence.

00:43:51.520 --> 00:43:55.330
And then compound actions
themselves can be combined together.

00:43:55.440 --> 00:43:58.330
So here I'm using both
a sequence and a group.

00:43:58.850 --> 00:44:03.170
So first I do, you know, with this,
I would be moving the node

00:44:03.170 --> 00:44:04.320
to a particular location.

00:44:04.320 --> 00:44:08.680
Then simultaneously I would be
scaling and rotating the node.

00:44:08.680 --> 00:44:11.850
And then when that's finished,
I fade the node out.

00:44:11.850 --> 00:44:12.570
Right?

00:44:12.580 --> 00:44:16.760
And all of it, again, through some very
simple-to-use syntax here.

00:44:18.460 --> 00:44:20.120
Okay, so that's compound actions.

00:44:20.120 --> 00:44:23.400
There's also a number of
different specialty actions

00:44:23.560 --> 00:44:25.680
that we provide with Sprite Kit.

00:44:25.680 --> 00:44:30.140
You know, one that's very commonly used
is this for texture animation.

00:44:30.140 --> 00:44:33.760
So here I'm just,
I'm animating my boss character

00:44:33.760 --> 00:44:37.270
from that adventure game to
create this walking animation.

00:44:38.280 --> 00:44:41.840
And of course,
all of these images started

00:44:41.840 --> 00:44:44.620
out as individual loose files.

00:44:44.640 --> 00:44:47.190
Then we put them all
into an Atlas folder,

00:44:47.310 --> 00:44:50.250
and Sprite Kit created an Atlas for us.

00:44:50.360 --> 00:44:52.690
And then in our code,
we just load them all out

00:44:52.690 --> 00:44:55.160
of the Atlas and then say,
okay, animate.

00:44:55.160 --> 00:44:59.760
And so this can be very,
very efficient to do this.

00:45:02.100 --> 00:45:08.300
Another specialty action used a lot
is to have a node follow a CG path.

00:45:08.430 --> 00:45:09.760
So you can see that here.

00:45:09.820 --> 00:45:13.340
This is something, I guess,
really commonly used in arcade games,

00:45:13.340 --> 00:45:13.920
right?

00:45:13.920 --> 00:45:17.070
Where you would see the bad guys
follow a particular pattern while

00:45:17.070 --> 00:45:18.860
they're shooting at you and so on.

00:45:18.860 --> 00:45:22.770
So you have the example
that I just showed.

00:45:22.770 --> 00:45:28.580
You also have the option of having
the orientation of the node stay

00:45:28.580 --> 00:45:30.600
constant as it goes along the path.

00:45:32.060 --> 00:45:37.500
Another really commonly used action and
a commonly needed functionality is the

00:45:37.910 --> 00:45:42.740
ability to remove a node from its parent,
which ultimately removes

00:45:42.740 --> 00:45:46.460
it from the scene,
meaning it no longer is rendered,

00:45:46.460 --> 00:45:49.210
it no longer costs anything for physics,
and so on.

00:45:49.230 --> 00:45:51.800
And that can be done as an action.

00:45:51.800 --> 00:45:57.330
So you see that here, where, for example,
I might, after something happens,

00:45:57.330 --> 00:46:01.140
my character dies,
I would fade it out as one action,

00:46:01.140 --> 00:46:01.880
and then remove it from the scene.

00:46:01.900 --> 00:46:04.910
And just set that up as a sequence here.

00:46:04.910 --> 00:46:07.420
SK action sequence, fade and remove.

00:46:07.420 --> 00:46:08.660
Right?

00:46:10.960 --> 00:46:14.480
And the last of these that I'll
show you is just you can also set

00:46:14.480 --> 00:46:18.230
up an action to run any arbitrary
block of code that you write.

00:46:18.240 --> 00:46:20.340
And this ends up being super powerful.

00:46:20.340 --> 00:46:23.820
So, you know,
here I'm setting up some actions

00:46:23.820 --> 00:46:28.540
that are going to fade a node out,
so fade out with duration.

00:46:28.540 --> 00:46:30.880
Then I remove that node from its parent.

00:46:30.880 --> 00:46:34.380
And then maybe I have some more
code that I've written that's

00:46:34.380 --> 00:46:37.990
going to show my game over menu,
and I would run that block.

00:46:38.050 --> 00:46:40.780
But all of this can just
be put in a 2D game.

00:46:40.800 --> 00:46:44.910
executed here as an action sequence.

00:46:45.690 --> 00:46:47.300
Right?

00:46:47.400 --> 00:46:47.840
Okay.

00:46:48.140 --> 00:46:50.440
So that's quite a long
look through actions,

00:46:50.440 --> 00:46:54.340
but there's really,
there's a huge catalog of more actions,

00:46:54.340 --> 00:46:58.230
obviously, that I didn't have time
to show all of you.

00:46:58.230 --> 00:47:01.360
Actions to colorize
nodes and play sounds,

00:47:01.360 --> 00:47:03.920
repeat other actions, and so on.

00:47:03.940 --> 00:47:11.600
But really, just a lot of power here and
a lot more that we can go into

00:47:11.610 --> 00:47:12.920
if you have questions about it.

00:47:13.360 --> 00:47:17.720
But okay, so that takes me to the end of
the session and my agenda here.

00:47:17.720 --> 00:47:19.380
Actually, we've covered quite a bit.

00:47:19.490 --> 00:47:24.250
Gave you a quick introduction to Sprite
Kit and just sort of how the API works.

00:47:24.250 --> 00:47:26.840
Then we talked about
sprites and particles,

00:47:26.930 --> 00:47:28.610
those different node types.

00:47:28.610 --> 00:47:31.960
Went into atlases to
tell you how that works.

00:47:32.020 --> 00:47:35.280
Scene transitions, drawing order,
and then wrapped up here

00:47:35.400 --> 00:47:36.990
with actions and animation.

00:47:37.710 --> 00:47:39.990
If you have any questions
about Sprite Kit,

00:47:40.050 --> 00:47:41.810
you're welcome to contact me.

00:47:41.810 --> 00:47:45.680
Here's my email address here,
or come find us on the developer forums.

00:47:45.680 --> 00:47:48.570
And a reminder also about the lab.

00:47:48.640 --> 00:47:53.860
We have some great folks here in the lab
along with us here in the venue who can

00:47:53.860 --> 00:47:59.830
answer your questions about Sprite Kit,
help you optimize your code, and so on.

00:47:59.850 --> 00:48:01.220
So, thank you very much.