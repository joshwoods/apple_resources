WEBVTT

00:00:12.550 --> 00:00:15.100
I'm Vicki Murley,
the Safari Technologies Evangelist

00:00:15.100 --> 00:00:17.200
at Apple,
and in this presentation,

00:00:17.230 --> 00:00:22.180
I'm going to show you how to enhance your
app with location and map information.

00:00:22.180 --> 00:00:24.120
You'll learn the basics
of fetching a location,

00:00:24.120 --> 00:00:28.430
and how to leverage the latest
features in iOS so that your app can

00:00:28.430 --> 00:00:33.310
track location updates continuously,
detect significant location changes,

00:00:33.600 --> 00:00:38.040
and display additional
information on maps with overlays.

00:00:38.090 --> 00:00:39.780
Let's get started.

00:00:39.780 --> 00:00:42.140
So in everyday life,
people want to know where they,

00:00:42.140 --> 00:00:47.160
and the items they're interested in,
exist in a geographic context.

00:00:47.170 --> 00:00:50.380
For example,
if you're thinking about buying a house,

00:00:50.380 --> 00:00:52.480
location is a key piece of information.

00:00:52.580 --> 00:00:55.760
You typically start with
the location and say,

00:00:55.810 --> 00:00:58.000
"I want to live there."

00:00:58.780 --> 00:01:01.500
When you go to a stadium,
you might be thinking,

00:01:01.570 --> 00:01:05.410
"How close to the action am
I going to be?" Location is

00:01:05.550 --> 00:01:09.120
key in this situation as well,
and so are other circumstances

00:01:09.210 --> 00:01:11.880
like distance and proximity.

00:01:12.980 --> 00:01:18.040
You might just want to know the
quickest route away from the action.

00:01:18.190 --> 00:01:20.490
Furthermore,
the world is getting smaller.

00:01:20.630 --> 00:01:26.270
We travel more, we interact more with
people all around the globe.

00:01:26.450 --> 00:01:29.680
And we always have our
iPhone in our pocket.

00:01:29.800 --> 00:01:34.960
We use it for communicating with friends,
for discovering places, for taking notes,

00:01:35.060 --> 00:01:36.470
and for saving memories.

00:01:38.000 --> 00:01:41.100
And the iPhone always knows where it is.

00:01:41.180 --> 00:01:44.490
With this knowledge of location,
of what's around,

00:01:44.490 --> 00:01:48.360
apps help keep us connected
to the surrounding world.

00:01:48.500 --> 00:01:52.110
They can tell us what's around,
who's around, how to get there,

00:01:52.360 --> 00:01:56.760
in many different situations:
while commuting, while shopping,

00:01:56.850 --> 00:02:01.700
visiting new places, meeting friends,
or while playing games.

00:02:01.830 --> 00:02:04.710
And it's not only in our spare time.

00:02:04.960 --> 00:02:09.700
Even at work, doctors, lawyers, builders,
small businesses,

00:02:09.750 --> 00:02:12.970
they can all take advantage of
location and the powerful features

00:02:13.330 --> 00:02:15.740
that location-aware apps can provide.

00:02:17.410 --> 00:02:19.940
Location is all about
knowing where you are,

00:02:19.990 --> 00:02:22.180
what's around,
and how to get from where you

00:02:22.180 --> 00:02:24.970
are to whatever is interesting.

00:02:27.340 --> 00:02:31.930
So let's see how location
awareness can live in your app.

00:02:32.100 --> 00:02:35.140
First of all,
location can have a big visual impact,

00:02:35.210 --> 00:02:37.880
like when it's used as the
main metaphor or the central

00:02:37.880 --> 00:02:40.830
element of the UI in your app.

00:02:40.970 --> 00:02:43.970
This is one possible
visualization of location,

00:02:44.130 --> 00:02:47.950
a point on a map,
as in a restaurant guide,

00:02:47.970 --> 00:02:51.040
or maybe even a social networking app.

00:02:51.100 --> 00:02:53.490
Or, instead of showing your
location in real time,

00:02:53.640 --> 00:02:57.500
you might want to use location to
add information that's used later on.

00:02:57.590 --> 00:03:01.200
For example, location can be embedded in
the photos that you take,

00:03:01.390 --> 00:03:05.110
silently behind the scenes,
then later the location of each

00:03:05.110 --> 00:03:09.540
photo can be shown on a map to give
that photo a much better context.

00:03:09.580 --> 00:03:12.610
Alternately,
location can be less dominant,

00:03:12.610 --> 00:03:16.580
less visible in your UI,
but still augment the experience.

00:03:16.640 --> 00:03:21.000
Even if you don't show a map in your app,
location information can

00:03:21.000 --> 00:03:22.880
still be very valuable.

00:03:24.520 --> 00:03:27.240
That's the case in Foursquare,
where a distance indicator

00:03:27.240 --> 00:03:30.380
shows how far away a place is.

00:03:30.390 --> 00:03:31.510
Or in Google Places.

00:03:31.670 --> 00:03:35.620
Notice how Google Places adds
an extra piece of information:

00:03:35.640 --> 00:03:37.370
which direction a place is.

00:03:37.600 --> 00:03:39.020
Very convenient.

00:03:39.040 --> 00:03:41.990
And again,
it really augments the experience

00:03:42.040 --> 00:03:43.890
of browsing a list of places.

00:03:44.800 --> 00:03:48.160
Another example is Apple's own Maps app.

00:03:48.250 --> 00:03:51.740
Something as simple as a small
thumbnail map enriches the content,

00:03:51.990 --> 00:03:54.610
and it provides context.

00:03:54.930 --> 00:03:57.360
Lastly,
location can facilitate actions by

00:03:57.360 --> 00:03:59.560
doing something behind the scenes.

00:03:59.650 --> 00:04:03.540
No maps, no indicators,
just functionality which uses

00:04:03.540 --> 00:04:07.800
location in a subtle way to make
the app easier and faster to use.

00:04:07.800 --> 00:04:12.050
For example, in the BART app,
location is used to provide a default

00:04:12.170 --> 00:04:16.160
subway station as your starting point,
so that you don't have to type

00:04:16.160 --> 00:04:17.800
this information in yourself.

00:04:19.430 --> 00:04:23.230
The WeatherPro app detects the city
you're in so that you can easily

00:04:23.230 --> 00:04:26.050
add that city to your favorites.

00:04:27.700 --> 00:04:30.040
Or,
going back to the four-square example,

00:04:30.080 --> 00:04:33.460
notice how location is used to
sort items by distance so that the

00:04:33.460 --> 00:04:37.700
most relevant items are at the top
and less scrolling is required.

00:04:37.750 --> 00:04:40.870
That's a common but powerful
way of facilitating a better

00:04:40.880 --> 00:04:42.700
user experience with location.

00:04:44.960 --> 00:04:49.030
These are the three ways that location
awareness can be expressed in your app.

00:04:49.040 --> 00:04:53.400
Now let's look at the nuts and
bolts and see how your iOS device

00:04:53.540 --> 00:04:56.240
retrieves location information.

00:04:56.710 --> 00:05:00.220
Location services are provided
by the Core Location Framework,

00:05:00.290 --> 00:05:04.390
which uses multiple sensors for obtaining
information about the user's location

00:05:04.520 --> 00:05:07.320
and device orientation in space.

00:05:07.450 --> 00:05:10.180
Maps are provided by
the MapKit Framework,

00:05:10.180 --> 00:05:14.110
which supports both the
display and annotation of maps.

00:05:14.240 --> 00:05:17.710
So let's get started by
looking at Core Location.

00:05:19.210 --> 00:05:23.960
There are three techniques that iOS
uses for obtaining a device's position:

00:05:24.080 --> 00:05:29.010
cell-based triangulation,
Wi-Fi triangulation, and GPS.

00:05:29.410 --> 00:05:35.240
Cell-based triangulation provides an
accuracy between 500 and 3,000 meters.

00:05:35.280 --> 00:05:38.670
It requires a data connection
but works well indoors,

00:05:38.750 --> 00:05:43.190
and the accuracy is better in urban areas
where cell density might be greater.

00:05:43.200 --> 00:05:48.200
Wi-Fi requires a data connection
and also works well indoors.

00:05:48.220 --> 00:05:52.200
It has an accuracy
between 50 and 250 meters,

00:05:52.280 --> 00:05:54.730
and can be just as good
or better than GPS,

00:05:54.730 --> 00:05:57.190
especially in indoor environments.

00:05:57.370 --> 00:06:02.200
Finally, GPS can also be used to obtain
the position of an iOS device.

00:06:02.330 --> 00:06:05.810
It doesn't require a data connection,
and it provides accuracy in

00:06:05.820 --> 00:06:08.190
the range of 10 to 100 meters.

00:06:10.230 --> 00:06:12.980
So as I mentioned,
each location technique has its

00:06:12.980 --> 00:06:16.870
own accuracy and has specific
requirements in terms of power and time.

00:06:17.100 --> 00:06:21.990
For example, GPS is the most accurate,
but it also requires the most power

00:06:22.100 --> 00:06:26.100
and it takes the most time to get
an accurate fix on the position.

00:06:27.640 --> 00:06:31.100
While we as developers tend to
always think of precision first,

00:06:31.220 --> 00:06:33.470
users are really concerned about power.

00:06:33.660 --> 00:06:35.970
You want them to use your
app as much as possible,

00:06:36.040 --> 00:06:39.200
so the lower your power consumption,
the better.

00:06:40.670 --> 00:06:44.180
Another thing to
consider is availability.

00:06:44.340 --> 00:06:48.540
3G iPads and iPhones can use
all three positioning methods,

00:06:48.620 --> 00:06:50.230
but what about an iPod Touch?

00:06:50.460 --> 00:06:52.840
What about a Mac running Snow Leopard?

00:06:52.940 --> 00:06:54.950
At first glance,
it might make sense to focus

00:06:54.950 --> 00:06:58.820
your application on devices
that support GPS positioning,

00:06:58.910 --> 00:07:02.060
but there are some cases,
for example in indoor environments,

00:07:02.170 --> 00:07:06.050
when Wi-Fi can locate users
even better than GPS in terms

00:07:06.050 --> 00:07:08.180
of both time and accuracy.

00:07:08.330 --> 00:07:10.990
And the great thing about cell-based
triangulation is that it's

00:07:11.090 --> 00:07:14.690
available pretty much anywhere,
as long as there's a signal.

00:07:15.200 --> 00:07:19.280
The takeaway here is really to think
through the usage scenarios for your app,

00:07:19.320 --> 00:07:22.400
and decide which type of
location retrieval is sufficient,

00:07:22.400 --> 00:07:25.720
instead of just choosing GPS by default.

00:07:27.750 --> 00:07:32.600
So how do you use
Core Location in your app?

00:07:32.720 --> 00:07:35.580
At the base level,
you have your app with a delegate object

00:07:36.010 --> 00:07:39.110
and the Core Location framework itself.

00:07:40.060 --> 00:07:43.570
The CL Location Manager object
is the object that you're

00:07:43.650 --> 00:07:45.440
going to interact with.

00:07:45.530 --> 00:07:50.810
So you can request location updates
by calling Start Updating Location.

00:07:51.530 --> 00:07:56.400
The way location information is reported
to your app is totally asynchronous.

00:07:56.590 --> 00:08:03.780
When a position comes in, your delegate,
which conforms to the CL Location

00:08:03.780 --> 00:08:05.740
Manager delegate protocol,
will call the Location

00:08:05.910 --> 00:08:08.290
Manager Did Update to Location
from Location callback.

00:08:08.470 --> 00:08:11.640
As the user moves,
the framework repeatedly

00:08:11.710 --> 00:08:13.450
detects new positions.

00:08:14.890 --> 00:08:18.260
You also need to configure
the location manager.

00:08:18.320 --> 00:08:20.480
When you're doing this,
the first thing you need to consider

00:08:20.700 --> 00:08:22.580
is what accuracy you require.

00:08:22.850 --> 00:08:27.800
This is an indication of how precise
a measurement you're going to need.

00:08:27.800 --> 00:08:31.490
It's measured as the maximum difference
you're willing to accept between

00:08:31.490 --> 00:08:35.800
the detected position and where
the user actually is in meters.

00:08:35.880 --> 00:08:38.800
You should also specify
a distance filter.

00:08:39.040 --> 00:08:40.980
Normally,
you don't need to get a new location

00:08:40.980 --> 00:08:44.160
every time the user moves a tiny bit,
but only when the user

00:08:44.160 --> 00:08:45.800
moves significantly.

00:08:45.800 --> 00:08:50.660
By specifying a distance filter that's
reasonable for your application,

00:08:50.700 --> 00:08:53.800
you can save system
resources such as power.

00:08:54.700 --> 00:08:58.960
You also might want to check if location
services are even enabled before

00:08:58.960 --> 00:09:01.800
you call Start Updating Location.

00:09:01.900 --> 00:09:03.860
So if your attempt to
fetch a location fails,

00:09:03.900 --> 00:09:06.700
there are two key errors
that you might get:

00:09:06.710 --> 00:09:10.980
KCL Error Location
Unknown or KCL Error Denied.

00:09:11.170 --> 00:09:15.960
KCL error location unknown is reported
when a location cannot be determined,

00:09:15.980 --> 00:09:18.240
and this is a temporary error.

00:09:18.380 --> 00:09:21.710
Maybe the user has temporarily
lost network connectivity if

00:09:21.790 --> 00:09:26.330
they've gone underground on the
subway or they're in a remote area.

00:09:26.770 --> 00:09:31.460
KCL Error Denied is reported when the
user has explicitly denied location

00:09:31.460 --> 00:09:34.480
services for your application,
and they can do this in

00:09:34.480 --> 00:09:36.100
a few different ways.

00:09:36.190 --> 00:09:40.300
The first way that users can deny
location services is by tapping

00:09:40.300 --> 00:09:42.370
Don't Allow on this dialog.

00:09:42.490 --> 00:09:46.400
It pops up the very first time that
your application requests a location,

00:09:46.460 --> 00:09:50.820
and if a user taps Don't Allow,
then that decision sticks.

00:09:51.560 --> 00:09:53.930
It's important to provide
a good description of why

00:09:53.930 --> 00:09:56.000
your app needs location,
or how it's going to

00:09:56.050 --> 00:09:57.800
use this information.

00:09:57.860 --> 00:10:00.870
You can communicate this
information to users via the

00:10:00.970 --> 00:10:02.960
Purpose property in your code.

00:10:03.030 --> 00:10:07.940
There are also switches and settings that
control access to location information.

00:10:07.990 --> 00:10:11.350
There's a global switch,
which enables or disables

00:10:11.360 --> 00:10:13.700
location services for all apps.

00:10:13.850 --> 00:10:16.540
And there's a list of switches
for each individual app that

00:10:16.540 --> 00:10:19.340
has requested location services.

00:10:19.390 --> 00:10:22.030
In this list of apps,
sometimes you'll see

00:10:22.030 --> 00:10:23.700
this location arrow icon.

00:10:23.760 --> 00:10:28.710
It indicates that the app has requested
a location in the last 24 hours.

00:10:29.100 --> 00:10:32.070
Keep in mind that users can
toggle these switches at any time,

00:10:32.070 --> 00:10:35.500
even when your application is running,
and then your app will receive

00:10:35.760 --> 00:10:38.820
the KCL error denied error code.

00:10:39.020 --> 00:10:41.680
So now let's talk about a
few best practices for using

00:10:41.680 --> 00:10:43.300
the Core Location Framework.

00:10:43.430 --> 00:10:46.090
Remember that sometimes
certain environments can

00:10:46.230 --> 00:10:47.940
make positioning difficult.

00:10:48.060 --> 00:10:51.410
If you receive a KCL Error
Location Unknown error,

00:10:51.420 --> 00:10:54.900
call Stop Updating Location and try
to fetch the location again later,

00:10:55.020 --> 00:10:57.520
when conditions may have changed.

00:10:58.410 --> 00:11:02.460
Also, you might be fetching location
information until you receive a

00:11:02.460 --> 00:11:06.180
location that has the accuracy
that you're looking for.

00:11:06.290 --> 00:11:09.100
Since positioning can be
difficult in certain environments,

00:11:09.290 --> 00:11:12.370
your desired accuracy might
never actually be obtained,

00:11:12.490 --> 00:11:16.070
so be sure to put a limit on the amount
of time you spend fetching location

00:11:16.070 --> 00:11:21.850
information and call Stop Updating
Location once that time period expires.

00:11:22.240 --> 00:11:26.430
You should also always remember to call
Stop Updating Location when your app

00:11:26.620 --> 00:11:28.990
doesn't actively require a location.

00:11:29.200 --> 00:11:31.910
Doing so will really save
a lot of power for users.

00:11:32.100 --> 00:11:35.710
For example,
if your application uses location

00:11:35.710 --> 00:11:39.380
only in a specific view or tab,
then you don't want to keep the

00:11:39.380 --> 00:11:42.790
location manager running all the time,
because maybe the user won't even

00:11:42.790 --> 00:11:45.100
go into that section of your app.

00:11:45.240 --> 00:11:48.040
In that case,
you want to start and stop updating

00:11:48.040 --> 00:11:51.980
location when the user enters and
exits that section of your UI.

00:11:52.100 --> 00:11:54.640
To double check that you're
doing things properly,

00:11:54.640 --> 00:11:57.770
you can look at the status bar
and make sure that the location

00:11:57.770 --> 00:12:02.100
indicator is not active when your app
doesn't actively require a location.

00:12:02.100 --> 00:12:06.090
Finally,
always remember to have a Plan B.

00:12:06.240 --> 00:12:09.490
You should always provide a
fallback experience in your app

00:12:09.490 --> 00:12:12.970
in cases where a location or
map tiles may not be available.

00:12:13.350 --> 00:12:15.100
So far, we've been talking about
a question and answer.

00:12:15.110 --> 00:12:17.230
You might be wondering what happens
if your app doesn't have a location,

00:12:17.330 --> 00:12:19.100
but what about tracking
location as the device moves?

00:12:19.100 --> 00:12:22.060
Your app might require
tracking location all the time,

00:12:22.090 --> 00:12:25.090
maybe even when your app has
been switched to the background.

00:12:27.210 --> 00:12:30.920
So I want my app to keep tracking
location as the device moves,

00:12:30.920 --> 00:12:33.320
no matter what I'm doing,
whether the app is in the

00:12:33.450 --> 00:12:35.800
foreground or the background.

00:12:35.880 --> 00:12:37.910
How can I do this?

00:12:38.400 --> 00:12:40.970
Well,
Apple has introduced support for what we

00:12:40.980 --> 00:12:43.500
call continuous location applications.

00:12:43.590 --> 00:12:47.590
All you have to do is add this
one key to your Info.plist file,

00:12:47.590 --> 00:12:50.060
and once that's set,
if your application calls

00:12:50.060 --> 00:12:53.020
start updating location and
then goes into the background,

00:12:53.150 --> 00:12:56.600
it will keep running as long as
you keep updating the location.

00:12:56.730 --> 00:13:00.300
Since this is an expensive operation,
you should only use this when

00:13:00.300 --> 00:13:04.100
it provides an immediate,
tangible benefit to the user.

00:13:04.220 --> 00:13:08.660
There are other cases when we don't want
precise location tracking all the time.

00:13:08.800 --> 00:13:11.200
Suppose we're traveling,
and every once in a while we

00:13:11.220 --> 00:13:14.530
take a photo or record a note,
and we want to store the

00:13:14.530 --> 00:13:16.370
location for each of those.

00:13:17.090 --> 00:13:19.230
To do this,
we can use a technique which only

00:13:19.230 --> 00:13:24.000
notifies us and wakes up our app when a
significant location change has occurred.

00:13:24.050 --> 00:13:27.990
In this case, cell-based triangulation
is generally used.

00:13:30.070 --> 00:13:33.770
For significant location changes,
the location is calculated when

00:13:33.770 --> 00:13:37.650
the device switches cell towers,
or when other applications

00:13:37.730 --> 00:13:39.810
use location services.

00:13:40.290 --> 00:13:43.440
So when one of these significant
location changes occurs,

00:13:43.460 --> 00:13:47.200
your application will be launched in the
background to retrieve that location.

00:13:47.200 --> 00:13:51.570
While the accuracy of significant
location changes is generally

00:13:51.690 --> 00:13:55.950
similar to cell-based triangulation,
if some other app in the system

00:13:55.950 --> 00:13:59.320
is asking for a more precise
location and causes GPS to be used,

00:13:59.320 --> 00:14:02.030
you'll get this more
accurate location for free.

00:14:02.200 --> 00:14:05.190
So how do you implement this in your app?

00:14:05.230 --> 00:14:07.200
This slide probably looks familiar.

00:14:07.200 --> 00:14:10.170
You've seen it before when
I was explaining how to

00:14:10.290 --> 00:14:12.200
start up location services.

00:14:12.380 --> 00:14:14.590
All you really need to
do is replace this call,

00:14:14.590 --> 00:14:18.920
"Start updating location," with
one that's called "Start monitoring

00:14:18.920 --> 00:14:22.110
significant location changes."

00:14:22.650 --> 00:14:25.240
Once you call that,
you'll get the same delegate method,

00:14:25.280 --> 00:14:29.400
no matter whether your app is frontmost
or suspended in the background.

00:14:29.460 --> 00:14:32.860
If it is in the background,
your app will resume so that your

00:14:32.860 --> 00:14:35.160
delegate method can be executed.

00:14:35.220 --> 00:14:39.280
There are times that a very specific
location is all that's really important,

00:14:39.340 --> 00:14:44.140
when a user gets close to,
or goes far from, a specific place.

00:14:44.210 --> 00:14:47.240
For this type of scenario,
there is a technique

00:14:47.240 --> 00:14:49.280
called Region Monitoring.

00:14:49.820 --> 00:14:52.340
While in the background,
we use cell triangulation,

00:14:52.340 --> 00:14:57.690
but we only notify you when the user
is close to that specific location.

00:15:00.830 --> 00:15:04.560
Implementing this functionality
in your app is really simple.

00:15:04.560 --> 00:15:08.800
The first thing you need to do is
create what's called a CLRegion object.

00:15:08.800 --> 00:15:14.450
It's defined by a center and a radius,
how large you want it to be,

00:15:14.460 --> 00:15:15.800
and an identifier.

00:15:16.020 --> 00:15:20.630
Next, you call startMonitoringForRegion,
passing in that region.

00:15:21.800 --> 00:15:25.710
At this point, your delegate will receive
one of two callbacks:

00:15:25.710 --> 00:15:31.140
Location Manager Did Enter Region or
Location Manager Did Exit Region.

00:15:31.280 --> 00:15:34.910
The great thing about these services
is that they can be used even if

00:15:34.910 --> 00:15:37.000
your application is not running.

00:15:37.130 --> 00:15:40.900
If your app moves to the background,
location services are still tracking

00:15:40.900 --> 00:15:43.240
the user and determining the location.

00:15:43.400 --> 00:15:46.930
The great thing about these services
is that they can be used even if

00:15:47.020 --> 00:15:49.090
your application isn't running.

00:15:49.410 --> 00:15:53.230
If your application hasn't been launched
or if your app moves to the background,

00:15:53.360 --> 00:15:58.700
the location service is still tracking
the user and determining the location.

00:16:02.020 --> 00:16:03.900
Since your app can be
launched in the background,

00:16:03.900 --> 00:16:07.280
it's worth mentioning the
MVC paradigm around which all

00:16:07.390 --> 00:16:10.210
iOS applications are based.

00:16:10.530 --> 00:16:14.790
Generally, you've got your model,
which is your data, the view objects,

00:16:14.790 --> 00:16:17.640
which control how the
data appears on screen,

00:16:17.810 --> 00:16:20.890
and the controller that sits in between.

00:16:21.600 --> 00:16:24.500
Now in a lot of apps,
the location manager is actually

00:16:24.500 --> 00:16:26.080
used by view controllers.

00:16:26.140 --> 00:16:28.080
But when the app is
launched in the background,

00:16:28.260 --> 00:16:31.100
the view hierarchy does not get set up.

00:16:31.230 --> 00:16:33.920
And so if you instantiate a
location manager object as

00:16:33.920 --> 00:16:37.520
part of your view controller,
it will never be created and you

00:16:37.520 --> 00:16:39.900
will never get the location events.

00:16:39.990 --> 00:16:42.740
When your app is launched
in the background,

00:16:42.770 --> 00:16:45.240
your app delegate is sent this message.

00:16:45.870 --> 00:16:49.060
There's an options dictionary which
can tell you whether the app was

00:16:49.060 --> 00:16:52.000
launched because of a location event.

00:16:53.930 --> 00:16:57.360
Note that if your application is
killed in the background and the user

00:16:57.360 --> 00:17:01.770
launches it before the next event,
this key won't be present.

00:17:02.110 --> 00:17:04.060
So generally,
you're going to want to use an

00:17:04.110 --> 00:17:09.000
application-wide controller to
instantiate a location manager object.

00:17:09.000 --> 00:17:13.440
You'll set the delegate to such
controller in order for the location

00:17:13.440 --> 00:17:17.000
manager to be able to deliver messages,
and that's it.

00:17:17.730 --> 00:17:21.700
What are some best practices for using
the Core Location Framework in this way?

00:17:21.700 --> 00:17:25.930
For instance, you might want to use the
UI Device APIs to decide

00:17:26.010 --> 00:17:28.700
what functionality to
enable in the background.

00:17:28.700 --> 00:17:32.090
Based on the battery charge level,
you can decide whether to keep

00:17:32.150 --> 00:17:36.530
monitoring location changes,
or even modify the level of

00:17:36.570 --> 00:17:38.700
accuracy that you require.

00:17:38.700 --> 00:17:42.650
Now let's move on to talking
about what's new in MapKit.

00:17:43.780 --> 00:17:47.280
The MapKit framework provides standard
views that you can incorporate into

00:17:47.280 --> 00:17:53.700
your application to display information
tied to a specific geographic point.

00:17:53.820 --> 00:17:57.100
MapKit has always provided
support for annotations,

00:17:57.170 --> 00:17:59.950
which represent a
single point on the map.

00:18:00.720 --> 00:18:04.700
New in iOS 4.0,
MapKit also provides a way

00:18:04.700 --> 00:18:06.980
to add overlays to maps.

00:18:07.120 --> 00:18:10.550
MapKit overlays are great because
they'll pan and zoom along with

00:18:10.550 --> 00:18:15.570
the rest of the map content as the
map is manipulated by the user.

00:18:15.690 --> 00:18:19.660
This provides a seamless and
polished experience as if the

00:18:19.660 --> 00:18:22.260
overlay itself is part of the map.

00:18:22.370 --> 00:18:26.710
There are four different types
of overlays available in MapKit.

00:18:27.110 --> 00:18:29.560
The first type of overlay is a circle.

00:18:29.630 --> 00:18:34.360
You can create and draw circles with
the MKCircle and MKCircleView classes,

00:18:34.410 --> 00:18:38.000
and use these to highlight
a circular region on a map.

00:18:38.000 --> 00:18:40.480
For instance,
maybe you want to show something

00:18:40.520 --> 00:18:44.000
like signal strength or the
accuracy of a retrieved location.

00:18:44.230 --> 00:18:47.590
You can also draw lines
on a map as an overlay,

00:18:47.590 --> 00:18:51.000
using MKPolyline and MKPolylineView.

00:18:51.010 --> 00:18:54.940
Polygons are the third type of
overlay supported in MapKit.

00:18:55.100 --> 00:18:59.150
You can use MKPolyline and
MKPolylineView to highlight

00:18:59.240 --> 00:19:02.410
a specific area on a map,
and you can even mask out portions

00:19:02.410 --> 00:19:07.990
of the polygon by specifying
one or more interior polygons.

00:19:09.890 --> 00:19:13.760
And finally, you can create your own
custom type of overlay.

00:19:13.820 --> 00:19:19.140
So you can really depict any type of data
that you want as an overlay on a map.

00:19:20.030 --> 00:19:23.140
So how do I add an overlay to my map?

00:19:23.200 --> 00:19:24.870
Well,
if you've programmed with MapKit before,

00:19:24.870 --> 00:19:28.290
this probably sounds familiar,
because adding overlays to the map

00:19:28.320 --> 00:19:30.260
is a lot like adding annotations.

00:19:30.490 --> 00:19:32.700
There's really just two steps.

00:19:32.800 --> 00:19:37.000
The first step is to add your
overlay model object to the map,

00:19:37.060 --> 00:19:40.420
and after that,
you display the overlay by providing the

00:19:40.420 --> 00:19:43.000
corresponding view from the delegate.

00:19:43.800 --> 00:19:46.600
Here's what the code for
that might look like.

00:19:46.600 --> 00:19:49.250
Here in ViewDidLoad,
we're creating our overlay object.

00:19:49.530 --> 00:19:53.300
It's just a circle with a
CoreLocation2D coordinate as its center,

00:19:53.300 --> 00:19:56.340
and it has a radius of 200.

00:19:56.570 --> 00:20:01.580
We add our circle overlay to the map by
passing it to the Add Overlay method.

00:20:01.860 --> 00:20:06.000
But just adding the model to the map
doesn't necessarily draw the overlay,

00:20:06.060 --> 00:20:09.820
which is good because the region of
the map with your overlay might not

00:20:09.820 --> 00:20:12.160
even be on screen at this point.

00:20:12.510 --> 00:20:15.790
When MapKit detects that the region
that contains your overlay is coming

00:20:15.790 --> 00:20:18.820
into view and needs to be drawn,
you'll get a callback on

00:20:18.820 --> 00:20:21.390
your MapView delegate,
ViewForOverlay.

00:20:21.400 --> 00:20:25.260
When you receive this delegate callback,
ViewForOverlay, that's when you're going

00:20:25.260 --> 00:20:26.390
to create the view.

00:20:26.400 --> 00:20:31.540
Since we have an MKCircle overlay,
we're going to create an MKCircle view,

00:20:31.690 --> 00:20:34.420
and here we're customizing the look
of that circle just a little bit by

00:20:34.890 --> 00:20:39.010
adding a red stroke around the circle,
and filling the circle with red as well,

00:20:39.010 --> 00:20:43.390
with a 40% opacity so that users
can see through it to the map.

00:20:45.090 --> 00:20:46.780
So there you have it.

00:20:46.800 --> 00:20:49.740
Now you have the resources you
need to enhance your existing

00:20:49.740 --> 00:20:54.240
app with location information,
or even build an entirely new app around

00:20:54.240 --> 00:20:57.000
the location services provided in iOS.

00:20:57.000 --> 00:21:00.000
I'm really looking forward to
seeing what you come up with.