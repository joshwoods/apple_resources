WEBVTT

00:00:00.367 --> 00:00:03.437
Hi there, my name is Ari,
and I'm excited to talk about

00:00:03.437 --> 00:00:06.940
how to migrate custom intents
to App Intents.

00:00:06.940 --> 00:00:08.876
In this video,
I'm going to cover

00:00:08.876 --> 00:00:11.411
why you should adopt the new
App Intents framework;

00:00:11.411 --> 00:00:14.681
how migrating works, including
backwards compatibility;

00:00:14.681 --> 00:00:18.552
and how to actually
convert to App Intents.

00:00:18.552 --> 00:00:21.321
First, let's cover why
you should adopt App Intents

00:00:21.321 --> 00:00:24.224
and how it's different
from previous frameworks.

00:00:24.224 --> 00:00:28.095
We introduced the SiriKit
Intents framework in 2016,

00:00:28.095 --> 00:00:31.231
which comes with a set of
purpose-driven system intents

00:00:31.231 --> 00:00:35.002
that provide a complete user
experience for common use cases

00:00:35.002 --> 00:00:38.906
like messaging, workouts,
phone calls, and more.

00:00:38.906 --> 00:00:40.874
Next, we introduced
custom intents

00:00:40.874 --> 00:00:44.378
which lets you define your own
intents for any use case,

00:00:44.378 --> 00:00:46.713
bringing your app's
functionality to Siri,

00:00:46.713 --> 00:00:48.782
shortcuts, and suggestions.

00:00:48.782 --> 00:00:51.718
And we added WidgetKit
which uses custom intents

00:00:51.718 --> 00:00:54.922
for widget configuration
and prediction.

00:00:54.922 --> 00:00:58.725
At WWDC22,
we introduced App Intents,

00:00:58.725 --> 00:01:02.262
a new Swift-native framework
to provide intents from your app

00:01:02.262 --> 00:01:03.530
to the system.

00:01:03.530 --> 00:01:05.832
App Intents is
a great framework to adopt,

00:01:05.832 --> 00:01:09.970
because it's modern, powerful,
and easy for users.

00:01:09.970 --> 00:01:14.107
It's modern because it's
designed natively for Swift.

00:01:14.107 --> 00:01:15.909
Thanks to the latest
language features,

00:01:15.909 --> 00:01:18.045
you can write
dramatically less code

00:01:18.045 --> 00:01:20.847
to support the same
functionality.

00:01:20.847 --> 00:01:23.183
We've also eliminated
the need to maintain

00:01:23.183 --> 00:01:26.620
intent-definition files
and use code generation.

00:01:26.620 --> 00:01:30.824
And you can now provide snippets
as lightweight SwiftUI views.

00:01:30.824 --> 00:01:33.493
It's powerful because
entities and queries

00:01:33.493 --> 00:01:35.696
enabled deeper use cases.

00:01:35.696 --> 00:01:38.832
You can run App Intents
directly in your app's process

00:01:38.832 --> 00:01:41.068
without providing an extension.

00:01:41.068 --> 00:01:43.403
And there are new opportunities
for customizing

00:01:43.403 --> 00:01:46.940
the user experience when people
set up and run your intents.

00:01:46.940 --> 00:01:49.643
It's also easy
for people to use.

00:01:49.643 --> 00:01:52.879
Intents can be easily exposed
as App Shortcuts

00:01:52.879 --> 00:01:56.450
which are immediately usable
with zero setup required.

00:01:56.450 --> 00:01:58.485
Plus, there are new ways
for people to discover

00:01:58.485 --> 00:02:01.888
your shortcuts because they'll
be shown at the top of Spotlight

00:02:01.888 --> 00:02:05.225
and in Siri tips that you can
include in your app.

00:02:05.225 --> 00:02:07.995
To get all the benefits
of the new framework,

00:02:07.995 --> 00:02:10.831
you'll need to upgrade any
custom intents that you built

00:02:10.831 --> 00:02:13.834
for Siri and shortcuts
to App Intents.

00:02:13.834 --> 00:02:16.236
SiriKit intents
are still fully supported.

00:02:16.236 --> 00:02:18.438
So if you're building
for Siri domains

00:02:18.438 --> 00:02:21.341
like messaging or media,
or if you're using intents

00:02:21.341 --> 00:02:25.112
with WidgetKit,
you should leave them as is.

00:02:25.112 --> 00:02:27.347
To learn more about
the App Intents framework,

00:02:27.347 --> 00:02:30.417
check out our session
from WWDC22,

00:02:30.417 --> 00:02:32.419
"Dive into App Intents."

00:02:32.419 --> 00:02:34.121
And to learn more
about App Shortcuts,

00:02:34.121 --> 00:02:36.256
which makes it super easy
for people to use

00:02:36.256 --> 00:02:39.126
your app's functionality
from Siri and Spotlight,

00:02:39.126 --> 00:02:43.196
check out "Implement
App Shortcuts with App Intents."

00:02:43.196 --> 00:02:45.365
Next, let's cover migration.

00:02:45.365 --> 00:02:49.169
With migration, you can convert
your existing intent definitions

00:02:49.169 --> 00:02:52.205
to App Intents
with a single click in Xcode.

00:02:52.205 --> 00:02:57.577
You can support both iOS 15 and
iOS 16 with the same app binary.

00:02:57.577 --> 00:03:00.514
And you can enable
people's existing shortcuts

00:03:00.514 --> 00:03:03.517
to continue working
with your new App Intents.

00:03:03.517 --> 00:03:06.386
To convert your intent
definitions to App Intents,

00:03:06.386 --> 00:03:09.656
all you have to do is navigate
to your intent definition file

00:03:09.656 --> 00:03:12.025
and push the
Convert to App Intent button.

00:03:12.025 --> 00:03:14.094
Xcode will produce
App Intents code

00:03:14.094 --> 00:03:17.064
that is equivalent
to your old intent definition.

00:03:17.064 --> 00:03:19.032
Then, you can populate the code

00:03:19.032 --> 00:03:21.902
by refactoring your old
content handler code.

00:03:21.902 --> 00:03:25.005
We'll talk about this more
in depth in the next section.

00:03:25.005 --> 00:03:27.074
In order for people to have
a seamless experience

00:03:27.074 --> 00:03:29.342
when your app upgrades
to App Intents,

00:03:29.342 --> 00:03:31.211
the system automatically
takes care

00:03:31.211 --> 00:03:34.147
of mapping from your old intents
to the new ones.

00:03:34.147 --> 00:03:36.249
Let's talk about how that works.

00:03:36.249 --> 00:03:37.250
Just by adopting the

00:03:37.250 --> 00:03:40.187
CustomIntentMigratedAppIntent
protocol,

00:03:40.187 --> 00:03:42.522
the system will have enough
information to know

00:03:42.522 --> 00:03:45.492
how to translate between
the old and new intents.

00:03:45.492 --> 00:03:47.127
When you adopt this protocol,

00:03:47.127 --> 00:03:50.030
you provide the intent class
name property,

00:03:50.030 --> 00:03:54.167
which is the class name that was
used for your old custom intent.

00:03:54.167 --> 00:03:57.404
In most cases, you shouldn't
have to provide this yourself.

00:03:57.404 --> 00:03:59.940
When you use the
Convert to App Intent button,

00:03:59.940 --> 00:04:03.243
the resulting code already
adopts this protocol.

00:04:03.243 --> 00:04:05.712
Because of the App Intent's
migration capability,

00:04:05.712 --> 00:04:08.915
you don't need to wait until
your app targets iOS 16

00:04:08.915 --> 00:04:10.584
to upgrade to App Intents.

00:04:10.584 --> 00:04:12.819
In fact, you can easily
support both newer

00:04:12.819 --> 00:04:16.323
and older operating systems
with the same app binary.

00:04:16.323 --> 00:04:19.392
To do this, include both
your legacy intent handlers

00:04:19.392 --> 00:04:21.628
and your App Intents
in your app.

00:04:21.628 --> 00:04:23.563
To maximize code sharing,
factor both sets

00:04:23.563 --> 00:04:27.667
of intent handlers over
a common set of business logic.

00:04:27.667 --> 00:04:30.737
Assuming you adopt the
migrated App Intent protocol,

00:04:30.737 --> 00:04:33.373
shortcuts will automatically
deduplicate your intents

00:04:33.373 --> 00:04:36.143
when you include
both sets in your app.

00:04:36.143 --> 00:04:39.980
So on iOS 15 and earlier,
the Shortcuts app will only show

00:04:39.980 --> 00:04:42.015
the legacy intent
implementation;

00:04:42.015 --> 00:04:44.251
and on iOS 16 and newer,

00:04:44.251 --> 00:04:47.087
it will only show
the App Intent's implementation.

00:04:47.087 --> 00:04:49.156
Once you switch your minimum
deployment target

00:04:49.156 --> 00:04:52.492
to iOS 16 or newer,
you can safely delete

00:04:52.492 --> 00:04:54.828
the legacy intent handlers
and definitions

00:04:54.828 --> 00:04:56.863
for intents that
you've migrated.

00:04:56.863 --> 00:04:59.032
They are no longer necessary.

00:04:59.032 --> 00:05:00.700
One thing to think about
when migrating

00:05:00.700 --> 00:05:02.702
is that people have
existing shortcuts

00:05:02.702 --> 00:05:05.071
that rely on your old intents,
which they might have made

00:05:05.071 --> 00:05:08.308
in the Shortcuts app or added
using the Add to Siri button

00:05:08.308 --> 00:05:09.709
in your app.

00:05:09.709 --> 00:05:12.212
The good news is those shortcuts
will continue working

00:05:12.212 --> 00:05:14.514
with your new App Intents
as long as they adopt

00:05:14.514 --> 00:05:17.317
the migrated
App Intent protocol.

00:05:17.317 --> 00:05:18.785
People's shortcuts
aren't overwritten

00:05:18.785 --> 00:05:21.388
to use the new App Intents;
they automatically use

00:05:21.388 --> 00:05:24.925
a common format that works for
both the new and old intents.

00:05:24.925 --> 00:05:28.195
In order for this to work, the
schemas of the legacy intents

00:05:28.195 --> 00:05:31.231
and the App Intents
must be compatible.

00:05:31.231 --> 00:05:34.401
In order to be compatible, the
parameters of the custom intent

00:05:34.401 --> 00:05:37.504
and the App Intent
must have the same names

00:05:37.504 --> 00:05:39.372
and equivalent types.

00:05:39.372 --> 00:05:40.907
There are some changes
that you can make

00:05:40.907 --> 00:05:43.510
without breaking
schema compatibility.

00:05:43.510 --> 00:05:46.746
Specifically, you can add
or remove parameters

00:05:46.746 --> 00:05:49.716
or make existing
parameters non-optional.

00:05:49.716 --> 00:05:52.352
To check schema
compatibility in Xcode,

00:05:52.352 --> 00:05:54.421
check out the old intent
definition file

00:05:54.421 --> 00:05:56.122
where there's a list
of parameters.

00:05:56.122 --> 00:05:59.025
Each parameter has
a name and a type.

00:05:59.025 --> 00:06:00.927
In the inspector pane,
there's also a field

00:06:00.927 --> 00:06:03.663
for the intent's class name.

00:06:03.663 --> 00:06:05.465
When working on
your App Intents code,

00:06:05.465 --> 00:06:07.667
make sure the intent
class name matches

00:06:07.667 --> 00:06:09.703
what was in
the intent definition file,

00:06:09.703 --> 00:06:11.738
so that the system
can consider the new intent

00:06:11.738 --> 00:06:13.873
to be equivalent
to the old intent.

00:06:13.873 --> 00:06:15.709
And make sure that
the parameter names

00:06:15.709 --> 00:06:19.446
and types in the App Intents
code stay compatible.

00:06:19.446 --> 00:06:22.048
Again, the Convert
to App Intents button in Xcode

00:06:22.048 --> 00:06:24.851
will automatically ensure
schema compatibility.

00:06:24.851 --> 00:06:27.687
So if you use the tool
and don't make any changes,

00:06:27.687 --> 00:06:29.856
you'll be in good shape.

00:06:29.856 --> 00:06:32.092
Next, let's talk about how
to actually convert

00:06:32.092 --> 00:06:34.961
your existing intents
to App Intents.

00:06:34.961 --> 00:06:37.597
There are two steps
to migrate an intent.

00:06:37.597 --> 00:06:40.500
Step one is to migrate
the intent definition file

00:06:40.500 --> 00:06:43.203
and step two is
to migrate your code.

00:06:43.203 --> 00:06:45.438
Let's start with
the intent definition.

00:06:45.438 --> 00:06:48.475
I'm a big fan of soup,
and we have an example app

00:06:48.475 --> 00:06:51.544
called Soup Chef that lets
people place orders for soup.

00:06:51.544 --> 00:06:54.147
It has an intent for placing
orders with parameters

00:06:54.147 --> 00:06:57.417
for which soup to order and how
many, which toppings to add,

00:06:57.417 --> 00:06:59.986
and pickup
or delivery locations.

00:06:59.986 --> 00:07:02.088
I'm ready to convert this
to App Intents,

00:07:02.088 --> 00:07:05.258
so I'll navigate to the intent
definition file in Xcode

00:07:05.258 --> 00:07:07.494
and press the convert button.

00:07:07.494 --> 00:07:09.863
Next, I choose
which intents to convert --

00:07:09.863 --> 00:07:11.498
just the one in this case.

00:07:11.498 --> 00:07:14.167
Then I'll choose where to save
my new intent code

00:07:14.167 --> 00:07:16.236
and which target
to include it in.

00:07:16.236 --> 00:07:17.704
That could be my app target

00:07:17.704 --> 00:07:21.641
or an App Intents extension
target if I've added one.

00:07:21.641 --> 00:07:23.310
In this case,
I'll check the app target

00:07:23.310 --> 00:07:25.245
and the watch target too.

00:07:25.245 --> 00:07:28.048
App Intents cannot be added
to framework targets.

00:07:28.048 --> 00:07:32.185
Next, I'll see the App Intents
code that Xcode generated.

00:07:32.185 --> 00:07:35.288
It's broken apart across
a few files which represent

00:07:35.288 --> 00:07:38.291
all of the intents, enums,
and custom types

00:07:38.291 --> 00:07:40.860
that were included
in the intent definition file.

00:07:40.860 --> 00:07:43.763
I want to call attention
to a few particular areas

00:07:43.763 --> 00:07:46.599
of my old intent definition
that have been migrated.

00:07:46.599 --> 00:07:49.302
In the new code,
there's an orderSoup struct

00:07:49.302 --> 00:07:51.571
that conforms
to the App Intent protocol.

00:07:51.571 --> 00:07:54.374
Note that this structure
is marked as available

00:07:54.374 --> 00:07:56.609
in iOS 16 or later.

00:07:56.609 --> 00:07:59.045
You'll need to apply
that annotation to all code

00:07:59.045 --> 00:08:00.680
that uses
the App Intents framework

00:08:00.680 --> 00:08:04.351
if you're deploying your app
earlier than iOS 16.

00:08:04.351 --> 00:08:06.519
Each parameter in
my intent definition file,

00:08:06.519 --> 00:08:08.822
along with its metadata,
has been migrated

00:08:08.822 --> 00:08:12.525
to @Parameter declarations
in the App Intent structure.

00:08:12.525 --> 00:08:14.594
All of the Shortcuts app
parameter summaries

00:08:14.594 --> 00:08:18.431
have been migrated to this
parameterSummary declaration.

00:08:18.431 --> 00:08:21.067
What used to be represented
as parameter relationships

00:08:21.067 --> 00:08:23.503
can now be represented
using Switch, Case,

00:08:23.503 --> 00:08:26.306
or When statements in
the ParameterSummary.

00:08:26.306 --> 00:08:30.009
My Soup and Toppings custom
types are now app entities,

00:08:30.009 --> 00:08:33.346
including some to-dos
that I'll need to fill in later.

00:08:33.346 --> 00:08:36.916
OrderDetails is now
a transient app entity.

00:08:36.916 --> 00:08:39.419
It's considered transient
because it doesn't have

00:08:39.419 --> 00:08:42.922
a unique identifier that can be
used to look it up later on.

00:08:42.922 --> 00:08:46.893
And my OrderType custom enum
is now an app enum.

00:08:46.893 --> 00:08:48.895
The human-readable names
were migrated

00:08:48.895 --> 00:08:52.132
to case display representations.

00:08:52.132 --> 00:08:55.135
Lastly, all of the dialogs
in the intent response

00:08:55.135 --> 00:08:59.005
have been migrated to an
extension on IntentDialog.

00:08:59.005 --> 00:09:02.075
These dialogs can be used
for my perform method.

00:09:02.075 --> 00:09:05.044
The migrator may generate
more strings than are needed,

00:09:05.044 --> 00:09:07.313
so if you see ones
that aren't actually used

00:09:07.313 --> 00:09:08.648
in the old intent handler like,

00:09:08.648 --> 00:09:11.418
"Just to confirm,
you wanted \ (soup)?,"

00:09:11.418 --> 00:09:13.753
feel free to remove them.

00:09:13.753 --> 00:09:15.655
Now that we migrated
our intent definition,

00:09:15.655 --> 00:09:18.858
let's go ahead and migrate
our intent-handling code.

00:09:18.858 --> 00:09:22.095
Note that the autogenerated
App Intent has a placeholder

00:09:22.095 --> 00:09:24.130
for the perform() method
with a to-do

00:09:24.130 --> 00:09:26.633
noting that it needs
to be filled in.

00:09:26.633 --> 00:09:28.802
Let's look at how to do that.

00:09:28.802 --> 00:09:30.236
In the old framework,
you provided

00:09:30.236 --> 00:09:34.607
an intent definition file and
a set of intent handling code.

00:09:34.607 --> 00:09:35.708
In the new framework,

00:09:35.708 --> 00:09:38.111
everything is
represented in code.

00:09:38.111 --> 00:09:40.013
The parameters in
your old intent definition

00:09:40.013 --> 00:09:42.649
have already been
migrated to the new code.

00:09:42.649 --> 00:09:46.052
The resolve, confirm, and handle
methods in your old code

00:09:46.052 --> 00:09:49.289
will need to be combined
into a single perform method

00:09:49.289 --> 00:09:51.558
that gets called
when your intent is run.

00:09:51.558 --> 00:09:53.993
And custom types
and dynamic options

00:09:53.993 --> 00:09:57.363
will need to be refactored
into entities and queries.

00:09:57.363 --> 00:10:00.400
So let's take a look at
how to migrate each phase

00:10:00.400 --> 00:10:03.536
of intent handling,
starting with resolve.

00:10:03.536 --> 00:10:05.872
In the resolve phase,
your intent handler validates

00:10:05.872 --> 00:10:09.075
each parameter of your intent
and prompts the user

00:10:09.075 --> 00:10:10.910
for a value if needed.

00:10:10.910 --> 00:10:13.847
When migrating resolve methods,
you should take advantage

00:10:13.847 --> 00:10:16.816
of App Intents' new automatic
resolution behavior

00:10:16.816 --> 00:10:18.151
where possible.

00:10:18.151 --> 00:10:21.054
Otherwise you should
refactor your resolution logic

00:10:21.054 --> 00:10:22.755
into the perform method.

00:10:22.755 --> 00:10:25.058
Let's take a look
at some examples.

00:10:25.058 --> 00:10:28.761
Here's our old resolution method
for the soup parameter.

00:10:28.761 --> 00:10:32.365
This follows a common pattern
in the old intents framework.

00:10:32.365 --> 00:10:34.334
Try to unwrap
the soup parameter.

00:10:34.334 --> 00:10:37.504
If it's nil, return a resolution
result asking the user

00:10:37.504 --> 00:10:39.973
to pick a soup
using a disambiguation.

00:10:39.973 --> 00:10:42.775
If it's set, return a resolution
result with success

00:10:42.775 --> 00:10:45.845
and pass back the same soup
that was already specified.

00:10:45.845 --> 00:10:48.181
This kind of boilerplate
is no longer necessary

00:10:48.181 --> 00:10:51.484
with App Intents
thanks to automatic resolution.

00:10:51.484 --> 00:10:53.953
If you have parameters that
were resolved this way before,

00:10:53.953 --> 00:10:57.156
here's how to take advantage
of the new functionality.

00:10:57.156 --> 00:11:00.560
By default, your migrated
parameters will be optional

00:11:00.560 --> 00:11:03.329
but you can get automatic
resolution behavior

00:11:03.329 --> 00:11:06.499
by changing the type
to non-optional.

00:11:06.499 --> 00:11:08.401
When you make
a parameter non-optional,

00:11:08.401 --> 00:11:11.170
App Intents will automatically
ask the user for a value

00:11:11.170 --> 00:11:13.873
if it's empty by using
the suggested entities

00:11:13.873 --> 00:11:16.409
from the SoupAppEntity's query.

00:11:16.409 --> 00:11:20.046
Then, add a dialog into
your parameter declaration

00:11:20.046 --> 00:11:22.749
so that the user gets asked
a specific question

00:11:22.749 --> 00:11:25.885
when the resolution system
prompts for a value like,

00:11:25.885 --> 00:11:27.353
"Which soup do you want?"

00:11:27.353 --> 00:11:29.722
Once you do this, you don't need
any resolution code

00:11:29.722 --> 00:11:31.925
for this parameter anymore.

00:11:31.925 --> 00:11:33.993
For all other types
of resolution,

00:11:33.993 --> 00:11:36.129
you should move
your resolve implementation

00:11:36.129 --> 00:11:39.999
to the top of your perform()
method and change your API usage

00:11:39.999 --> 00:11:42.735
to use the appropriate
new APIs to ask the user

00:11:42.735 --> 00:11:44.337
for clarification.

00:11:44.337 --> 00:11:47.373
For example, let's say your old
resolve method for quantity

00:11:47.373 --> 00:11:51.411
unwraps the quantity and throws
a needsValue if it's missing

00:11:51.411 --> 00:11:54.213
and then checks to see
if the quantity is greater

00:11:54.213 --> 00:11:56.482
than the number of soups
that are actually available

00:11:56.482 --> 00:11:58.585
and returns an error if so.

00:11:58.585 --> 00:12:00.320
When we move this code
to App Intents,

00:12:00.320 --> 00:12:02.755
we don't need the first
part at all anymore,

00:12:02.755 --> 00:12:04.023
because we can separately

00:12:04.023 --> 00:12:06.759
just make the quantity
parameter non-optional.

00:12:06.759 --> 00:12:09.162
For that second part,
we'll want to take the code

00:12:09.162 --> 00:12:10.530
that caused the
completion handler

00:12:10.530 --> 00:12:12.699
with an unsupported
resolution result

00:12:12.699 --> 00:12:15.335
and replace it with code
that throws an error

00:12:15.335 --> 00:12:18.237
indicating that there aren't
enough soups in stock.

00:12:18.237 --> 00:12:20.473
We'll need to define
the error as an enum,

00:12:20.473 --> 00:12:23.509
conforming to error and the
custom localized string resource

00:12:23.509 --> 00:12:25.278
convertible protocols.

00:12:25.278 --> 00:12:27.747
That way, we can provide
the dialog that's spoken

00:12:27.747 --> 00:12:30.683
or shown to the user
when this case is hit.

00:12:30.683 --> 00:12:33.419
If you used to have code that
returned and needsValue result

00:12:33.419 --> 00:12:35.755
dynamically like
in this example,

00:12:35.755 --> 00:12:39.859
you can replace that with code
that throws a needsValueError.

00:12:39.859 --> 00:12:41.461
When you throw
a needsValueError,

00:12:41.461 --> 00:12:44.063
the system will prompt the user
for a value with the dialog

00:12:44.063 --> 00:12:47.300
you provide and then will run
your perform method again

00:12:47.300 --> 00:12:48.568
from the start.

00:12:48.568 --> 00:12:52.005
Another option is to use
the requestValue method.

00:12:52.005 --> 00:12:55.041
When you use requestValue,
you can prompt the user

00:12:55.041 --> 00:12:57.577
for a value and continue
running your perform method

00:12:57.577 --> 00:12:59.178
without starting over.

00:12:59.178 --> 00:13:01.347
In addition to the
requestValue method,

00:13:01.347 --> 00:13:03.750
there are also
requestDisambiguation

00:13:03.750 --> 00:13:05.818
and requestConfirmation methods
that you can use

00:13:05.818 --> 00:13:08.721
to replace your previous
API usage.

00:13:08.721 --> 00:13:11.290
Next let's talk about confirm.

00:13:11.290 --> 00:13:14.193
Confirm is an opportunity
to do additional validation

00:13:14.193 --> 00:13:17.163
and supply information
for the system to ask the user

00:13:17.163 --> 00:13:19.666
to confirm that
they want to proceed.

00:13:19.666 --> 00:13:22.502
For validation, you should move
all of the validation logic

00:13:22.502 --> 00:13:25.505
that was in your confirm method
to your perform method.

00:13:25.505 --> 00:13:27.340
For asking the user
for confirmation,

00:13:27.340 --> 00:13:30.443
we have a new simple
requestConfirmation() API.

00:13:30.443 --> 00:13:33.346
The new API is just
a single method call.

00:13:33.346 --> 00:13:36.549
Using async/await,
this method will wait

00:13:36.549 --> 00:13:38.885
until the user confirms
before continuing

00:13:38.885 --> 00:13:40.720
with your perform method.

00:13:40.720 --> 00:13:43.089
If they cancel,
an error will be thrown,

00:13:43.089 --> 00:13:46.025
and execution of
your perform method will stop.

00:13:46.025 --> 00:13:48.594
The requestConfirmation method
includes several arguments

00:13:48.594 --> 00:13:50.363
that affect the
confirmation prompt,

00:13:50.363 --> 00:13:53.700
including the dialog that
is spoken or shown by Siri,

00:13:53.700 --> 00:13:56.335
the SwiftUI view
that's shown in the snippet,

00:13:56.335 --> 00:13:59.372
the label used for
the confirmation button --

00:13:59.372 --> 00:14:02.108
in this case, order --
and the showPrompt argument,

00:14:02.108 --> 00:14:04.944
which controls whether or not
the dialog should be shown

00:14:04.944 --> 00:14:07.146
onscreen as a prompt.

00:14:07.146 --> 00:14:09.682
This should be set to false
when the dialog and view

00:14:09.682 --> 00:14:12.385
contain the same information
as each other.

00:14:12.385 --> 00:14:15.054
So it makes sense for Siri
to speak the dialogue

00:14:15.054 --> 00:14:16.656
but not show it.

00:14:16.656 --> 00:14:18.658
Next, let's look at handle.

00:14:18.658 --> 00:14:21.961
For refactoring handle,
you can simply move your code

00:14:21.961 --> 00:14:25.264
from your handle method
to the perform method.

00:14:25.264 --> 00:14:27.066
You should be able to remove
some validation code

00:14:27.066 --> 00:14:29.836
from the old handle method
since resolve, confirm,

00:14:29.836 --> 00:14:32.572
and handle now happen
all in one single method.

00:14:32.572 --> 00:14:35.942
For example, if you copied
your old code from handle,

00:14:35.942 --> 00:14:39.112
you'll probably end up with code
for unwrapping parameters

00:14:39.112 --> 00:14:42.248
that are no longer optional
which can now be deleted.

00:14:42.248 --> 00:14:44.584
At the end of
your perform method,

00:14:44.584 --> 00:14:46.986
you should return
an intent result.

00:14:46.986 --> 00:14:50.623
The result can include a variety
of fields like the dialogue

00:14:50.623 --> 00:14:53.693
for Siri to speak
or a snippet view to show.

00:14:53.693 --> 00:14:56.562
Each one requires that you
annotate your perform method's

00:14:56.562 --> 00:14:58.798
return type with
the appropriate protocols,

00:14:58.798 --> 00:15:02.635
like ProvidesDialog for dialog
and ShowSnippetView

00:15:02.635 --> 00:15:05.138
for the SwiftUI snippet view.

00:15:05.138 --> 00:15:08.374
Lastly, let's look at migrating
dynamic options.

00:15:08.374 --> 00:15:11.978
You'll need to fill in the Query
or DynamicOptionsProvider

00:15:11.978 --> 00:15:13.646
depending on the parameter type.

00:15:13.646 --> 00:15:17.049
Xcode will provide to-dos
in these places

00:15:17.049 --> 00:15:18.551
where you need to fill them in.

00:15:18.551 --> 00:15:20.520
For a query, you'll need
to implement methods

00:15:20.520 --> 00:15:24.357
for returning entities
by identifier, by string

00:15:24.357 --> 00:15:27.693
if it's searchable, and the set
of suggested entities

00:15:27.693 --> 00:15:29.829
that will appear when the user
taps that parameter

00:15:29.829 --> 00:15:31.531
in Shortcuts.

00:15:31.531 --> 00:15:34.333
For dynamic options, you can
just return all of the options

00:15:34.333 --> 00:15:36.335
in the results method.

00:15:36.335 --> 00:15:37.970
And that's it!

00:15:37.970 --> 00:15:40.439
You're finished migrating
to App Intents.

00:15:40.439 --> 00:15:43.242
Before you're really done,
there are a few more things

00:15:43.242 --> 00:15:45.244
I'd recommend looking at.

00:15:45.244 --> 00:15:47.780
The first is to adopt
App Shortcuts.

00:15:47.780 --> 00:15:50.516
This will let you make
your intents discoverable

00:15:50.516 --> 00:15:54.187
and let people use them just
by saying a few words to Siri.

00:15:54.187 --> 00:15:57.590
Add Siri tips into your UI
so people can learn

00:15:57.590 --> 00:16:01.127
what to say to Siri to use
your app's functionality.

00:16:01.127 --> 00:16:04.664
These should replace any Add
to Siri buttons you had before.

00:16:04.664 --> 00:16:07.967
Make sure to test
the customer upgrade path

00:16:07.967 --> 00:16:11.037
by creating shortcuts with
the previous version of your app

00:16:11.037 --> 00:16:13.206
and testing that
they behave correctly

00:16:13.206 --> 00:16:15.074
with the new versions
of your app.

00:16:15.074 --> 00:16:17.343
And if your app works
in multiple locales,

00:16:17.343 --> 00:16:19.278
think about localization.

00:16:19.278 --> 00:16:21.948
In order to localize
your App Intents,

00:16:21.948 --> 00:16:24.083
all of the strings included
in your App Intent

00:16:24.083 --> 00:16:27.186
should be provided as
localized string resources,

00:16:27.186 --> 00:16:29.989
and you can localize them
by providing a corresponding

00:16:29.989 --> 00:16:32.859
localizable .strings file
with those strings.

00:16:32.859 --> 00:16:34.760
If you use pluralized strings,

00:16:34.760 --> 00:16:37.897
you can also use
a .strings dict file.

00:16:37.897 --> 00:16:41.133
When localizing App Shortcuts,
add the strings into a file

00:16:41.133 --> 00:16:45.204
called AppShortcuts.strings
and replace any variables

00:16:45.204 --> 00:16:50.309
in those strings
with ${ } notation.

00:16:50.309 --> 00:16:53.579
To summarize, we'd recommend
upgrading your custom intents

00:16:53.579 --> 00:16:56.515
to App Intents to get all
the benefits of iOS 16's

00:16:56.515 --> 00:16:59.619
new features and the new simpler
development model

00:16:59.619 --> 00:17:01.320
of App Intents.

00:17:01.320 --> 00:17:04.790
Make sure to add App Shortcuts
so people can easily discover

00:17:04.790 --> 00:17:07.126
and use your app's
functionality.

00:17:07.126 --> 00:17:09.528
And to learn more about
how to put together

00:17:09.528 --> 00:17:11.430
a great user experience,
check out

00:17:11.430 --> 00:17:16.002
the "Design App Shortcuts"
session from WWDC22.

00:17:16.002 --> 00:17:17.837
Thank you.