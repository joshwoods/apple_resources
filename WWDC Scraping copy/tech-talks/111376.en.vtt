WEBVTT

00:00:00.360 --> 00:00:01.230
Philip: Welcome.

00:00:01.230 --> 00:00:02.820
My name is Philip Smith.

00:00:02.820 --> 00:00:05.673
I'm an engineer on the Game Center Services team.

00:00:06.780 --> 00:00:09.540
I'm going to be sharing with you a new rule-based

00:00:09.540 --> 00:00:11.553
matchmaking feature in Game Center.

00:00:12.570 --> 00:00:16.007
This feature provides customized matchmaking for your game,

00:00:16.007 --> 00:00:18.660
which will improve the quality of matches

00:00:18.660 --> 00:00:22.053
for a more engaging and fair gaming experience.

00:00:23.730 --> 00:00:25.560
I will start with a brief overview

00:00:25.560 --> 00:00:28.200
of Game Center matchmaking functionality

00:00:28.200 --> 00:00:30.810
that allows players of realtime multiplayer games

00:00:30.810 --> 00:00:33.453
to discover and connect with other players.

00:00:34.320 --> 00:00:35.640
Then I'm going to share

00:00:35.640 --> 00:00:38.553
how to set up rule-based matchmaking.

00:00:39.570 --> 00:00:40.563
Let's dive in.

00:00:41.670 --> 00:00:44.370
Matchmaking is all about giving your players

00:00:44.370 --> 00:00:47.700
a fun and engaging experience.

00:00:47.700 --> 00:00:50.190
If your players are engaged, then you are going

00:00:50.190 --> 00:00:52.383
to retain those players for a longer time.

00:00:53.400 --> 00:00:54.645
Now, every game is unique

00:00:54.645 --> 00:00:58.053
and so there are many different matchmaking use cases.

00:00:59.310 --> 00:01:01.470
You may wish to create unique game modes

00:01:01.470 --> 00:01:02.760
with their own rules

00:01:02.760 --> 00:01:05.403
for a personalized gaming experience,

00:01:07.320 --> 00:01:09.210
or ensure fair and balanced matchups

00:01:09.210 --> 00:01:12.520
by grouping players based on skill level or preferences

00:01:13.650 --> 00:01:15.600
so you can avoid mismatched games

00:01:15.600 --> 00:01:17.793
that lead to frustration or boredom.

00:01:18.720 --> 00:01:21.900
Some game modes may involve teams playing each other

00:01:21.900 --> 00:01:23.760
where you want to have balanced teams

00:01:23.760 --> 00:01:26.133
so the experience isn't one-sided.

00:01:27.135 --> 00:01:30.802
Another use case is to set up private matches for friends

00:01:30.802 --> 00:01:34.920
or a wider social group using a party code.

00:01:34.920 --> 00:01:37.230
But nothing can be more frustrating

00:01:37.230 --> 00:01:40.860
than having to wait a long time to get a match.

00:01:40.860 --> 00:01:43.470
So it is important to be able to relax constraints

00:01:43.470 --> 00:01:46.773
in order to balance wait times against match quality.

00:01:48.000 --> 00:01:49.890
With Game Center Classic matchmaking,

00:01:49.890 --> 00:01:52.085
you can already enable your players to discover

00:01:52.085 --> 00:01:55.413
and connect with others in real time multiplayer games.

00:01:56.250 --> 00:01:59.160
But now with rule-based matchmaking, you are going

00:01:59.160 --> 00:02:00.873
to be able to do so much more.

00:02:02.125 --> 00:02:04.170
You will be able to provide custom rules

00:02:04.170 --> 00:02:06.480
for fair and balanced matches

00:02:06.480 --> 00:02:09.120
with the ability to relax constraints with time

00:02:09.120 --> 00:02:13.233
and easily update rules to adjust to actual patterns of use.

00:02:15.210 --> 00:02:17.760
Now let's take a look at how the parts

00:02:17.760 --> 00:02:19.833
of the matchmaking system work together.

00:02:22.170 --> 00:02:25.500
The classic Game Center matchmaking system is a black box

00:02:25.500 --> 00:02:27.245
about how players are matched.

00:02:27.245 --> 00:02:30.573
In this example, Alice and Bob want to play now.

00:02:31.410 --> 00:02:35.700
The game, through GameKit, submits a match request.

00:02:35.700 --> 00:02:38.760
The GameKit API allows the game to restrict matches

00:02:38.760 --> 00:02:41.790
to requests with the same player group.

00:02:41.790 --> 00:02:45.250
As soon as Game Center finds a match, GameKit is notified

00:02:46.440 --> 00:02:48.600
and proceeds to create a realtime connection

00:02:48.600 --> 00:02:50.760
between the devices.

00:02:50.760 --> 00:02:53.790
Today I'm gonna open up the black box

00:02:53.790 --> 00:02:57.870
to share more specifics about rule-based matchmaking

00:02:57.870 --> 00:02:59.310
to allow you to customize

00:02:59.310 --> 00:03:01.680
how players are matched in your game

00:03:01.680 --> 00:03:03.903
for a better player experience.

00:03:05.490 --> 00:03:08.340
I can now use the App Store Connect API

00:03:08.340 --> 00:03:11.850
to configure rules to best suit my game.

00:03:11.850 --> 00:03:16.230
On the game side, GameKit SDK provides APIs for me

00:03:16.230 --> 00:03:19.110
to specify the match request queue

00:03:19.110 --> 00:03:21.780
along with custom properties for a player

00:03:21.780 --> 00:03:23.973
to be used by my rules.

00:03:24.990 --> 00:03:27.810
Game Center service periodically runs an algorithm

00:03:27.810 --> 00:03:32.583
to find matches between requests in my queue using my rules.

00:03:33.915 --> 00:03:36.660
When a match is found, GameKit is notified

00:03:36.660 --> 00:03:37.620
and proceeds to create

00:03:37.620 --> 00:03:40.023
a real-time connection between the devices.

00:03:41.220 --> 00:03:42.510
With rule-based matchmaking,

00:03:42.510 --> 00:03:45.000
Game Center provides a matchmaking framework

00:03:45.000 --> 00:03:46.590
where I can configure queues

00:03:46.590 --> 00:03:49.500
and rulesets customized for my game.

00:03:49.500 --> 00:03:51.300
I can use a powerful rules language

00:03:51.300 --> 00:03:54.480
to express matchmaking constraints.

00:03:54.480 --> 00:03:57.390
And GameKit provides new APIs for my game

00:03:57.390 --> 00:04:01.383
to include custom player properties to be used by my rules.

00:04:02.250 --> 00:04:04.620
Also provided are developer tools to allow me

00:04:04.620 --> 00:04:08.310
to test out my rules with sample requests

00:04:08.310 --> 00:04:09.180
and get metrics

00:04:09.180 --> 00:04:12.033
to help me understand real player experience.

00:04:13.650 --> 00:04:17.070
I will walk you through how to configure, test and observe

00:04:17.070 --> 00:04:18.843
rule-based matchmaking.

00:04:20.040 --> 00:04:23.395
There are six steps to set up rule-based matchmaking.

00:04:23.395 --> 00:04:25.890
Let's look at them one by one.

00:04:25.890 --> 00:04:27.480
The first step is to prepare

00:04:27.480 --> 00:04:29.703
to use the App Store Connect API.

00:04:31.525 --> 00:04:35.400
The rules configuration is achieved using REST endpoints

00:04:35.400 --> 00:04:37.680
of the App Store Connect API.

00:04:37.680 --> 00:04:38.645
And if you're familiar with this,

00:04:38.645 --> 00:04:40.713
it should be straightforward for you.

00:04:41.640 --> 00:04:43.530
To access the APIs

00:04:43.530 --> 00:04:46.260
you need to create a private API key

00:04:46.260 --> 00:04:49.980
using your organization's App Store Connect account.

00:04:49.980 --> 00:04:54.630
Calls to the API require a JSON web token for authorization.

00:04:54.630 --> 00:04:57.120
Please see the Apple developer documentation

00:04:57.120 --> 00:05:00.540
on how to create API keys for App Store Connect API

00:05:00.540 --> 00:05:03.600
and how to generate authentication tokens.

00:05:03.600 --> 00:05:06.420
Next, let's cover the steps for creating rulesets

00:05:06.420 --> 00:05:08.823
and adding rules to customize matchmaking.

00:05:09.930 --> 00:05:12.030
The use case I'm exploring for my game

00:05:12.030 --> 00:05:14.280
is skill-based matchmaking.

00:05:14.280 --> 00:05:16.920
Being matched with players of a similar skill level

00:05:16.920 --> 00:05:19.412
leads to a better gaming experience.

00:05:19.412 --> 00:05:22.980
However, if I enforce a strict maximum skill difference,

00:05:22.980 --> 00:05:26.550
a player could be waiting to match for a long time.

00:05:26.550 --> 00:05:29.225
I think it is a better experience if I can balance wait time

00:05:29.225 --> 00:05:30.870
against skill difference

00:05:30.870 --> 00:05:35.280
by relaxing the maximum skill difference the longer I wait.

00:05:35.280 --> 00:05:36.990
Rule-based matchmaking allows me

00:05:36.990 --> 00:05:39.000
to loosen constraints over time

00:05:39.000 --> 00:05:42.153
in order to balance match quality against wait time.

00:05:43.140 --> 00:05:46.110
In this example, I have three players in my queue

00:05:46.110 --> 00:05:48.510
with different skill levels.

00:05:48.510 --> 00:05:50.820
I think a good match for my game is for players

00:05:50.820 --> 00:05:53.805
to have a skill value difference of 20 or less,

00:05:53.805 --> 00:05:56.730
but at this moment there are no players

00:05:56.730 --> 00:05:58.473
that satisfy this constraint.

00:05:59.370 --> 00:06:01.830
What I would like is after waiting for five seconds

00:06:01.830 --> 00:06:05.850
to expand the required maximum skill difference to be 40.

00:06:05.850 --> 00:06:07.320
Now it looks like the players

00:06:07.320 --> 00:06:09.843
with skills 20 and 45 will match.

00:06:10.860 --> 00:06:13.110
But for my example, I'm gonna say the player

00:06:13.110 --> 00:06:16.710
with a skill of 45 drops out and cancels their request,

00:06:16.710 --> 00:06:19.233
leaving the remaining players with no match.

00:06:20.250 --> 00:06:23.400
Again, I would like to expand the skill range

00:06:23.400 --> 00:06:26.370
after waiting, say, another five seconds to 100,

00:06:26.370 --> 00:06:29.250
the maximum possible skill difference for my game

00:06:29.250 --> 00:06:31.530
to make sure players get a match.

00:06:31.530 --> 00:06:33.270
Well now we have a match.

00:06:33.270 --> 00:06:36.210
So although my players had to wait, they do get a match

00:06:36.210 --> 00:06:38.250
and can enjoy playing a game.

00:06:38.250 --> 00:06:40.320
Next time I'm sure they will match

00:06:40.320 --> 00:06:42.153
with a player closer in skill.

00:06:43.110 --> 00:06:45.810
I use the App Store Connect API endpoints

00:06:45.810 --> 00:06:49.980
to configure rulesets and rules for my organization.

00:06:49.980 --> 00:06:53.550
I used the GameCenterMatchmakingRuleSets endpoint

00:06:53.550 --> 00:06:55.210
to configure a ruleset.

00:06:56.166 --> 00:06:59.537
And for my game I created a ruleset called SkillBasedRules.

00:07:01.050 --> 00:07:02.670
I add rules to my ruleset

00:07:02.670 --> 00:07:06.900
using the GameCenterMatchmakingRules endpoint.

00:07:06.900 --> 00:07:08.504
Now my game has different app versions

00:07:08.504 --> 00:07:11.940
that aren't compatible, and so I also add a rule

00:07:11.940 --> 00:07:15.213
to require matches only for compatible app versions.

00:07:16.920 --> 00:07:20.133
I add another rule to prefer players with lower latency.

00:07:21.120 --> 00:07:24.000
Finally, I add a rule to require all matched players

00:07:24.000 --> 00:07:27.175
to have a skill value within a given range.

00:07:27.175 --> 00:07:30.780
Going into more detail on the request content,

00:07:30.780 --> 00:07:34.173
here I first create a ruleset to contain the rules,

00:07:35.070 --> 00:07:36.663
passing in a reference name,

00:07:38.550 --> 00:07:40.650
the minimum number of players,

00:07:40.650 --> 00:07:42.603
and the maximum number of players.

00:07:43.770 --> 00:07:47.100
All these properties are specific to my game.

00:07:47.100 --> 00:07:49.050
rulesets and queues are associated

00:07:49.050 --> 00:07:51.720
with the App Store Connect provider organization,

00:07:51.720 --> 00:07:55.440
and so we recommend using a reverse domain name prefix

00:07:55.440 --> 00:07:58.320
of the game bundle ID for the ruleset name

00:07:58.320 --> 00:08:00.603
to avoid any name clashes.

00:08:01.470 --> 00:08:05.550
Here's the response which contains the ID

00:08:05.550 --> 00:08:08.220
of the newly created ruleset.

00:08:08.220 --> 00:08:11.190
I will need this in subsequent API calls to add a rule

00:08:11.190 --> 00:08:12.363
and create a queue.

00:08:13.200 --> 00:08:14.730
The next step is to add a rule

00:08:14.730 --> 00:08:19.050
using the GameCenterMatchmakingRules endpoint.

00:08:19.050 --> 00:08:20.730
I'm just going to show the details

00:08:20.730 --> 00:08:22.683
of the SkillDifference rule for now.

00:08:23.760 --> 00:08:26.070
Add the rule to the ruleset we just created,

00:08:26.070 --> 00:08:29.253
referencing the ID from the last response.

00:08:30.180 --> 00:08:31.893
Make the rule type match.

00:08:33.240 --> 00:08:34.413
Add a description.

00:08:36.900 --> 00:08:38.313
Give the rule a name.

00:08:39.510 --> 00:08:43.143
And most importantly, an expression to be evaluated.

00:08:44.250 --> 00:08:47.820
The expression grammar is an open source JSON query language

00:08:47.820 --> 00:08:49.923
called JMESPath.

00:08:51.120 --> 00:08:53.343
Let's dive into this expression a bit.

00:08:54.330 --> 00:08:56.100
You can see this is a comparison

00:08:56.100 --> 00:08:58.260
where we're making sure the left hand side value

00:08:58.260 --> 00:09:00.633
is less than or equal to the right hand side.

00:09:02.400 --> 00:09:04.890
The left hand side is a diff function,

00:09:04.890 --> 00:09:07.050
which calculates the difference between the lowest

00:09:07.050 --> 00:09:10.653
and highest skill level from the current candidate requests.

00:09:11.640 --> 00:09:14.373
The right hand side is a fixed value of 20.

00:09:15.540 --> 00:09:17.580
Now this expression requires match requests

00:09:17.580 --> 00:09:20.250
to have a maximum skill difference of 20.

00:09:20.250 --> 00:09:22.800
And this expression is okay for initial testing,

00:09:22.800 --> 00:09:25.830
but I think in real use I will find some players

00:09:25.830 --> 00:09:27.813
are waiting a long time for a match.

00:09:28.889 --> 00:09:32.850
What I want is to expand the skill range as requests age

00:09:32.850 --> 00:09:35.790
so that my players match in a reasonable time

00:09:35.790 --> 00:09:38.190
and are able to enjoy a game.

00:09:38.190 --> 00:09:40.640
To do that, I need to use a different expression.

00:09:42.420 --> 00:09:43.680
To update a rule,

00:09:43.680 --> 00:09:46.320
I use the GameCenterMatchmakingRules endpoint

00:09:46.320 --> 00:09:47.553
with a PATCH method.

00:09:48.840 --> 00:09:51.810
The URL and content for this operation

00:09:51.810 --> 00:09:54.153
require the ID of the rule.

00:09:56.010 --> 00:09:57.880
An updated description is included

00:09:58.980 --> 00:10:01.110
and an updated expression.

00:10:01.110 --> 00:10:03.093
This one should work a lot better.

00:10:04.115 --> 00:10:06.903
Here I have a more complex expression.

00:10:08.246 --> 00:10:11.463
We have the same left hand side and comparison.

00:10:12.690 --> 00:10:15.490
The right hand side is now a function called agedValues

00:10:16.380 --> 00:10:19.320
that will expand the skill range based on the average age

00:10:19.320 --> 00:10:21.745
of the candidate requests.

00:10:21.745 --> 00:10:24.180
The first parameter is the average age

00:10:24.180 --> 00:10:25.743
of the candidate requests.

00:10:27.480 --> 00:10:28.950
Then the next parameter

00:10:28.950 --> 00:10:31.980
is the initial skill range of 20 I want to enforce

00:10:31.980 --> 00:10:35.043
when the age of the requests are less than five seconds.

00:10:37.020 --> 00:10:38.820
The next parameter is an array

00:10:38.820 --> 00:10:41.130
of expanded skill range values,

00:10:41.130 --> 00:10:44.850
where 40 indicates the first skill range expansion

00:10:44.850 --> 00:10:48.060
where the age is greater than or equal to five seconds

00:10:48.060 --> 00:10:49.773
and less than 10 seconds,

00:10:51.420 --> 00:10:55.380
and 100 indicates the second expansion

00:10:55.380 --> 00:10:56.730
where the skill range is increased

00:10:56.730 --> 00:11:00.303
to 100 when the age is greater than or equal to 10 seconds.

00:11:02.250 --> 00:11:04.950
Finally, the last parameter is an array

00:11:04.950 --> 00:11:06.480
of age value boundaries

00:11:06.480 --> 00:11:08.490
where the skill range will get expanded,

00:11:08.490 --> 00:11:12.603
which we have configured to be five seconds and 10 seconds.

00:11:14.610 --> 00:11:16.410
Now I'm going to test the ruleset

00:11:16.410 --> 00:11:18.603
to make sure it is working as intended.

00:11:21.720 --> 00:11:26.280
The App Store Connect API gameCenterMatchmakingRuleSetTests

00:11:26.280 --> 00:11:29.040
is provided to allow testing and validation of rules

00:11:29.040 --> 00:11:31.023
before integration with your app.

00:11:31.920 --> 00:11:35.370
The content required for the endpoint is quite verbose

00:11:35.370 --> 00:11:38.878
and it is helpful to hide the complexity by using a script

00:11:38.878 --> 00:11:40.950
that accepts much simpler input

00:11:40.950 --> 00:11:44.133
and allows for a more efficient way to test rules.

00:11:45.870 --> 00:11:47.820
Check the list of resources for this video

00:11:47.820 --> 00:11:49.953
to download the Python script.

00:11:50.850 --> 00:11:53.910
All the details on using the App Store Connect API,

00:11:53.910 --> 00:11:57.870
including the GameCenterMatchmakingRuleSetTests endpoint

00:11:57.870 --> 00:12:00.600
may be found in the Apple developer documentation

00:12:00.600 --> 00:12:03.120
for the App Store Connect API.

00:12:03.120 --> 00:12:05.070
Here is an example of the use

00:12:05.070 --> 00:12:07.473
of the testrules Python script.

00:12:08.760 --> 00:12:10.740
I'm running the script using the ID

00:12:10.740 --> 00:12:12.490
of the ruleset I created earlier

00:12:13.770 --> 00:12:16.650
and we have a queue with three requests.

00:12:16.650 --> 00:12:18.665
Now the first request has a skill of 10

00:12:18.665 --> 00:12:21.270
and is brand new in the queue.

00:12:21.270 --> 00:12:23.520
The second request has a skill of 50

00:12:23.520 --> 00:12:26.265
and has been in the queue for five seconds.

00:12:26.265 --> 00:12:28.499
The third and last has a skill of 90

00:12:28.499 --> 00:12:31.800
and has been in the queue for 10 seconds.

00:12:31.800 --> 00:12:35.730
Now recall, I set up my rules to require a skill difference

00:12:35.730 --> 00:12:38.250
of 20 or less for new requests,

00:12:38.250 --> 00:12:40.140
40 for requests that have been in the queue

00:12:40.140 --> 00:12:42.300
for longer than five seconds.

00:12:42.300 --> 00:12:45.120
Will the first and second request match?

00:12:45.120 --> 00:12:46.110
I don't think so,

00:12:46.110 --> 00:12:48.360
because the skill difference is more than 20.

00:12:49.230 --> 00:12:51.600
Will the second and third requests match?

00:12:51.600 --> 00:12:53.623
Yes, they have a difference of 40

00:12:53.623 --> 00:12:56.643
but have been in the queue for five seconds.

00:12:57.480 --> 00:12:58.740
And the output shows the second

00:12:58.740 --> 00:13:00.330
and third requests have matched,

00:13:00.330 --> 00:13:03.063
and so my rules are working as expected.

00:13:04.230 --> 00:13:06.028
Of course, I will run more test cases

00:13:06.028 --> 00:13:07.893
to make sure my rules are good.

00:13:09.840 --> 00:13:12.663
The next step is to configure a queue for requests.

00:13:14.040 --> 00:13:17.190
If you recall where I left off with the configuration,

00:13:17.190 --> 00:13:19.653
I had created the ruleset and rules.

00:13:20.550 --> 00:13:24.225
I just tested the rules and they are working as I expected.

00:13:24.225 --> 00:13:29.130
Now I use the GameCenterMatchmakingQueues endpoint

00:13:29.130 --> 00:13:31.410
to create a queue for my app requests

00:13:31.410 --> 00:13:33.870
associated with my ruleset.

00:13:33.870 --> 00:13:36.063
Here I have called it skill queue.

00:13:37.530 --> 00:13:39.909
Here in more detail is the content required

00:13:39.909 --> 00:13:44.490
to create a queue linked to the ruleset I created earlier.

00:13:44.490 --> 00:13:46.860
I reference the ruleset ID

00:13:46.860 --> 00:13:49.290
and provide a suitable name for the queue.

00:13:49.290 --> 00:13:53.310
I use the reverse domain name prefix for the queue name

00:13:53.310 --> 00:13:55.593
just as with the ruleset name.

00:13:57.180 --> 00:14:00.090
And that is all the App Store Connect API configuration

00:14:00.090 --> 00:14:02.463
for my matchmaking rules.

00:14:03.390 --> 00:14:06.030
Next, I will cover the code to add to an app

00:14:06.030 --> 00:14:08.583
to integrate with rule-based matchmaking.

00:14:11.400 --> 00:14:14.580
Use the existing GameKit framework classes,

00:14:14.580 --> 00:14:17.433
GKMatchRequest, and GKMatch.

00:14:18.630 --> 00:14:22.500
These have new object properties, queueName and properties

00:14:22.500 --> 00:14:25.023
to support rule-based matchmaking.

00:14:26.310 --> 00:14:30.540
In my app, I add code to create a GKMatchRequest object

00:14:30.540 --> 00:14:32.490
and set the matchmaking rule properties

00:14:32.490 --> 00:14:34.440
to use the skill level queue

00:14:34.440 --> 00:14:37.053
and its set of rules to find players.

00:14:38.310 --> 00:14:41.010
I set the queue name property to the reference name

00:14:41.010 --> 00:14:44.070
of the queue I previously created.

00:14:44.070 --> 00:14:47.130
I set the GKMatchRequest properties to a dictionary

00:14:47.130 --> 00:14:49.860
of key value pairs that provide values

00:14:49.860 --> 00:14:52.323
that are used in my rule expressions.

00:14:53.190 --> 00:14:54.930
My rules only use the one property

00:14:54.930 --> 00:14:56.680
for the local player's skill value.

00:14:57.870 --> 00:15:01.470
I submit the match request using the GKMatchmaker method

00:15:01.470 --> 00:15:05.526
to find a match without presenting a user interface.

00:15:05.526 --> 00:15:09.120
You might alternatively present the GKMatchmaker view

00:15:09.120 --> 00:15:10.173
to find a match.

00:15:11.400 --> 00:15:12.900
The last step is to observe

00:15:12.900 --> 00:15:16.713
how your matchmaking rules are working with actual players.

00:15:17.730 --> 00:15:21.090
You can diagnose problems with your matchmaking rules

00:15:21.090 --> 00:15:24.900
using the App Store Connect API Metrics endpoints.

00:15:24.900 --> 00:15:27.292
Metrics include request counts by outcome.

00:15:27.292 --> 00:15:31.380
Those can be matched, canceled, or expired.

00:15:31.380 --> 00:15:34.140
The time taken to reach an outcome.

00:15:34.140 --> 00:15:37.230
And how many active requests in a queue.

00:15:37.230 --> 00:15:38.580
There are also metrics

00:15:38.580 --> 00:15:41.790
on rule evaluation errors and results.

00:15:41.790 --> 00:15:43.590
You can get these metrics data

00:15:43.590 --> 00:15:46.080
at different time granularities,

00:15:46.080 --> 00:15:49.050
every 15 minutes for eight hours,

00:15:49.050 --> 00:15:53.553
hourly over 24 hours, or daily for 30 days.

00:15:54.990 --> 00:15:57.900
If Game Center takes too long to find matches

00:15:57.900 --> 00:15:59.880
or fails to find matches,

00:15:59.880 --> 00:16:02.705
see the Apple developer documentation article,

00:16:02.705 --> 00:16:06.453
Troubleshooting Matchmaking Rules Using Metrics.

00:16:07.590 --> 00:16:11.520
In this example, the query is to return the count

00:16:11.520 --> 00:16:14.220
and time in the queue of requests

00:16:14.220 --> 00:16:17.130
with a granularity of one day.

00:16:17.130 --> 00:16:19.785
The response contains data points with a datetime range

00:16:19.785 --> 00:16:21.723
and metrics values.

00:16:22.620 --> 00:16:24.600
And with some scripting magic,

00:16:24.600 --> 00:16:28.410
I can turn the response data into charts that allow me

00:16:28.410 --> 00:16:30.750
to see how successful are players

00:16:30.750 --> 00:16:32.883
using my matchmaking rules.

00:16:34.475 --> 00:16:38.373
Well, that concludes our update on rule-based matchmaking.

00:16:39.540 --> 00:16:41.670
This new feature is available now.

00:16:41.670 --> 00:16:44.253
I hope you'll use this great new capability.

00:16:45.300 --> 00:16:48.000
Check out the Apple developer documentation to find out how

00:16:48.000 --> 00:16:49.893
to use all its features.

00:16:51.090 --> 00:16:52.650
We'd love to hear from you.

00:16:52.650 --> 00:16:55.560
If you have any feature requests for Game Center,

00:16:55.560 --> 00:16:59.306
please let us know through Apple's Feedback Assistant.

00:16:59.306 --> 00:17:00.993
Thanks for joining me today.