WEBVTT

00:00:11.530 --> 00:00:15.490
Hi, I'm Vicki Murley,
the Safari Technologies Evangelist

00:00:15.670 --> 00:00:16.340
at Apple.

00:00:16.340 --> 00:00:21.380
The number of users browsing the web
with Safari on iOS is growing every day.

00:00:21.380 --> 00:00:23.710
In this video,
I'm going to give you an overview of

00:00:23.710 --> 00:00:28.140
the available technologies which you
can use to deliver an awesome experience

00:00:28.140 --> 00:00:30.860
to iOS users visiting your website.

00:00:30.860 --> 00:00:33.900
Since this is an overview,
I won't be going into all the details

00:00:33.900 --> 00:00:36.800
of every available technology,
but along the way I'll

00:00:36.800 --> 00:00:39.150
point you to additional,
in-depth resources so that

00:00:39.450 --> 00:00:43.600
you can get more information
on each technology as needed.

00:00:43.600 --> 00:00:44.470
So let's get started.

00:00:46.300 --> 00:02:54.600
[Transcript missing]

00:02:55.010 --> 00:03:00.240
In fact, WebKit is used as the layout
engine in Safari on Mac OS X,

00:03:00.430 --> 00:03:01.900
Windows, and iOS.

00:03:02.500 --> 00:03:06.940
Besides being blazingly fast and
providing a small memory footprint,

00:03:06.940 --> 00:03:10.950
which is great for mobile devices,
another one of WebKit's strengths is

00:03:10.950 --> 00:03:13.900
that it has great support for HTML5.

00:03:15.740 --> 00:03:19.700
So HTML5 is the technology that
you can use to deliver rich web

00:03:19.700 --> 00:03:23.600
experiences in Safari on all platforms,
including iOS.

00:03:23.600 --> 00:03:27.560
These days, the phrase "HTML5" has
kind of a dual meaning.

00:03:28.110 --> 00:03:31.330
First of all,
the term "HTML5" refers to a

00:03:31.330 --> 00:03:34.600
formal specification from the W3C.

00:03:35.100 --> 00:03:38.370
This is a specification that's
used by web browser implementers

00:03:38.530 --> 00:03:42.240
to determine how different tags
and technologies should behave.

00:03:42.360 --> 00:03:45.830
There are a lot of technologies
in the HTML5 specification that

00:03:45.830 --> 00:03:51.480
are supported by Safari on iOS,
including web sockets, geolocation,

00:03:51.560 --> 00:03:54.840
enclosed captions,
and full screen mode for video.

00:03:54.950 --> 00:03:58.600
So that's kind of the first
meaning of the term HTML5,

00:03:58.600 --> 00:04:01.540
referring to that W3C specification.

00:04:01.620 --> 00:04:04.620
Lately,
the term HTML5 is also being used as

00:04:04.620 --> 00:04:09.110
sort of a buzzword or catchphrase to
refer to a collection of technologies

00:04:09.540 --> 00:04:13.320
that web developers can use to
deliver rich internet applications

00:04:13.640 --> 00:04:16.300
and rich web page experiences.

00:04:16.370 --> 00:04:20.600
In that collection, we of course have the
HTML5 specification.

00:04:20.670 --> 00:04:25.480
We also have CSS3 for adding
advanced styling and animation.

00:04:25.530 --> 00:04:28.570
And finally, we have JavaScript to
tie it all together.

00:04:28.840 --> 00:04:31.480
JavaScript is our interface to
many of the elements in the HTML5.

00:04:31.480 --> 00:04:35.560
We can use it to change CSS styles,
and it gives us some additional

00:04:35.990 --> 00:04:40.500
features such as touch and
gesture detection in web pages.

00:04:40.590 --> 00:04:45.420
I'm going to touch on each of these and
how you can use them in Safari on iOS,

00:04:45.500 --> 00:04:47.080
but let me start with HTML5.

00:04:47.180 --> 00:04:52.420
The HTML5 specification is very large,
so today I'm just going to touch

00:04:52.480 --> 00:04:55.940
on two key features of this spec:
audio and video elements

00:04:55.940 --> 00:04:57.750
and offline data storage.

00:04:57.990 --> 00:05:01.420
Let's get started talking about
the HTML5 audio and video elements.

00:05:01.420 --> 00:05:07.250
These are standard HTML elements that
you can use to embed media in web pages.

00:05:07.260 --> 00:05:12.450
Why should you use HTML to embed
audio and video in web pages?

00:05:13.800 --> 00:05:16.190
First of all,
these elements are the best way to

00:05:16.190 --> 00:05:19.160
deliver media in web pages on iOS.

00:05:19.160 --> 00:05:25.460
If you want to display video or play
audio in your website in Safari on iOS,

00:05:25.460 --> 00:05:26.250
this is the way to do it.

00:05:28.020 --> 00:05:30.620
Secondly,
HTML is also a great way to deliver

00:05:30.630 --> 00:05:33.800
media because of built-in optimizations.

00:05:34.010 --> 00:05:37.540
For example, since Safari is responsible
for playing the media,

00:05:37.540 --> 00:05:40.930
and we've created Safari,
we can optimize video playback

00:05:40.930 --> 00:05:43.720
by decoding it in hardware
to extend battery life,

00:05:43.720 --> 00:05:45.210
which is great for users.

00:05:46.970 --> 00:05:50.870
The HTML5 media elements in
Safari also include default controls

00:05:51.180 --> 00:05:53.300
that are customized to each platform.

00:05:53.360 --> 00:05:57.220
So you can see here on the desktop,
we have default controls that appear

00:05:57.340 --> 00:05:59.240
when a user hovers over the video.

00:05:59.600 --> 00:06:02.050
They're pretty small,
so that users can see

00:06:02.050 --> 00:06:04.860
plenty of the video,
but they're still big enough to

00:06:04.860 --> 00:06:06.800
be clickable with a mouse pointer.

00:06:06.800 --> 00:06:10.710
On iPad, the default built-in controls
are slightly bigger so that

00:06:10.720 --> 00:06:12.800
they're tappable with a finger.

00:06:12.800 --> 00:06:17.160
Finally, you should use HTML5 audio
and video elements because

00:06:17.160 --> 00:06:18.800
they're standard web technology.

00:06:18.850 --> 00:06:20.930
There's no new programming
languages to learn,

00:06:20.930 --> 00:06:24.400
and they behave just like other
web page elements in the sense

00:06:24.400 --> 00:06:27.660
that they can be styled with
CSS and controlled with JavaScript.

00:06:27.980 --> 00:06:33.920
So when you combine HTML5 audio and
video elements with CSS and JavaScript,

00:06:33.920 --> 00:06:35.730
what specifically is possible?

00:06:35.800 --> 00:06:38.540
Well, here are some of the
things that you can do.

00:06:38.920 --> 00:06:41.230
First of all,
you can create your own custom

00:06:41.230 --> 00:06:42.800
controls that match the look
and feel of your web page.

00:06:42.800 --> 00:06:47.800
There's a JavaScript API that
accompanies these elements,

00:06:47.960 --> 00:06:51.530
which you can use to play, pause,
and query the state of your media.

00:06:51.820 --> 00:06:54.770
This includes JavaScript to
trigger full screen mode.

00:06:54.800 --> 00:06:58.590
You can also use standard DOM events
to optimize the experience.

00:06:59.080 --> 00:07:03.800
Events are emitted when an error is
detected and as progress is made,

00:07:03.800 --> 00:07:08.270
so you can do things like put up an
error message or display a progress

00:07:08.290 --> 00:07:12.800
indicator to really optimize
and provide feedback to users.

00:07:13.030 --> 00:07:16.100
And finally, as I mentioned,
these elements behave just

00:07:16.100 --> 00:07:19.800
like other web page elements,
so you can style them with CSS.

00:07:19.850 --> 00:07:22.800
You can easily add a drop
shadow to your video,

00:07:22.860 --> 00:07:26.650
change the opacity,
add a reflection to your video,

00:07:26.930 --> 00:07:28.730
mask the video with an image.

00:07:29.080 --> 00:07:33.800
And with a lot of the CSS transforms
that are available in CSS3,

00:07:33.830 --> 00:07:35.800
you could slide the
video across the screen,

00:07:35.800 --> 00:07:41.780
scale it to different sizes, tilt it,
and even flip it around in 3D space.

00:07:41.810 --> 00:07:43.080
space.

00:07:43.270 --> 00:07:46.460
Another great reason to use
HTML5 media elements is that

00:07:46.620 --> 00:07:48.340
it's easy to get started.

00:07:48.400 --> 00:07:51.700
I'm going to talk more
about HTML5 video later on,

00:07:51.800 --> 00:07:55.670
but right now I'd like to show
you how easy it is to get started.

00:07:56.080 --> 00:07:58.340
Here,
with just a few simple lines of code,

00:07:58.420 --> 00:08:01.100
we've embedded video in a web page.

00:08:01.100 --> 00:08:04.600
We have an opening tag,
which specifies the width and height.

00:08:04.600 --> 00:08:07.600
We've added the controls attribute,
which tells Safari that we'd like to

00:08:07.600 --> 00:08:10.060
use the default built-in controls.

00:08:10.060 --> 00:08:13.940
And we have a source attribute
that's pointing to our media.

00:08:13.940 --> 00:08:17.580
Between the opening and closing
tags is our fallback content.

00:08:17.580 --> 00:08:20.320
This is the content that's
displayed in browsers that don't

00:08:20.320 --> 00:08:23.180
implement the HTML5 video tag.

00:08:23.180 --> 00:08:25.640
In this case,
our fallback content is a line of text,

00:08:25.640 --> 00:08:29.960
but it could really be anything: text,
an image, even plugin content.

00:08:31.390 --> 00:08:32.690
So this is looking pretty good.

00:08:32.770 --> 00:08:36.110
We have some video
displaying in our web page,

00:08:36.110 --> 00:08:40.300
but the video on our page,
the screen is black.

00:08:40.420 --> 00:08:44.460
That's because what we're seeing here
is the very first frame of the video.

00:08:44.520 --> 00:08:47.240
And in this case,
the first frame of this video is dark.

00:08:47.430 --> 00:08:51.300
The video content fades
in after a second or so.

00:08:51.420 --> 00:08:54.250
So even though we have our
video showing in our web page,

00:08:54.250 --> 00:08:57.000
we want this default
appearance to change slightly.

00:08:57.500 --> 00:09:01.060
To do that,
we can add a poster attribute.

00:09:01.290 --> 00:09:06.300
So here we've added the poster attribute,
and we're just pointing to an image file.

00:09:06.300 --> 00:09:12.080
And that displays this image instead
of the first frame of the video.

00:09:12.570 --> 00:09:16.300
From here,
we can add some CSS styling to our video.

00:09:16.300 --> 00:09:21.300
With just one line of CSS,
we can add a drop shadow to our video.

00:09:21.360 --> 00:09:23.300
So now it's looking even better.

00:09:23.300 --> 00:09:27.300
We can also use just a little bit of
JavaScript to add a customized button.

00:09:27.300 --> 00:09:34.300
So here in my HTML,
I've added an additional element,

00:09:34.300 --> 00:09:36.110
my play/pause button.

00:09:36.470 --> 00:09:41.360
And I'm specifying that when the user
lifts their finger from the screen,

00:09:41.360 --> 00:09:45.340
we should toggle the state
of this play/pause button.

00:09:45.710 --> 00:09:50.600
In this toggle play/pause function,
we're just doing a couple simple things.

00:09:50.640 --> 00:09:55.000
We're grabbing the video with
the query selector function,

00:09:55.030 --> 00:09:56.780
and assigning it to a variable.

00:09:56.910 --> 00:09:59.270
And we're also grabbing that
button so that we can change

00:09:59.380 --> 00:10:00.470
the look and feel of it.

00:10:00.900 --> 00:10:05.140
Next, we're just checking the state of
the video to see if it's paused,

00:10:05.160 --> 00:10:08.940
and if it is, we're calling the play
function on that video.

00:10:08.980 --> 00:10:13.020
We're also changing the class name on
our button to change the look and feel.

00:10:14.020 --> 00:10:17.320
And then if the video isn't paused,
then we're calling the pause

00:10:17.380 --> 00:10:19.180
function on that video,
and again,

00:10:19.180 --> 00:10:21.720
changing the look and feel of the button.

00:10:21.790 --> 00:10:24.740
And the result is going to
look something like this.

00:10:24.760 --> 00:10:29.800
As you can see, we tap on the play button
to begin playing the video,

00:10:29.840 --> 00:10:35.300
hit it again to pause the video,
and as we tap to play and pause,

00:10:35.330 --> 00:10:37.250
the video responds accordingly.

00:10:38.810 --> 00:10:43.140
So now let's move on to another key
part of the HTML5 specification:

00:10:43.470 --> 00:10:44.740
offline storage.

00:10:45.890 --> 00:10:48.960
So when I talk about
HTML5 offline storage,

00:10:49.000 --> 00:10:52.500
I'm referring to a collection of
technologies that you can use to

00:10:52.500 --> 00:10:56.560
create web applications that will
work even when users don't have

00:10:56.560 --> 00:10:58.460
an active internet connection.

00:10:59.900 --> 00:11:04.700
So why should you add offline storage
capabilities to your web application?

00:11:04.850 --> 00:11:08.290
Well, the first and most obvious reason
is that users will always be

00:11:08.290 --> 00:11:10.790
able to access your web app.

00:11:10.950 --> 00:11:14.530
Secondly, if you add this functionality,
your web app will have

00:11:14.630 --> 00:11:16.100
improved performance.

00:11:16.230 --> 00:11:19.980
If you're loading resources locally
instead of over the network,

00:11:20.170 --> 00:11:23.800
your web application will load faster,
and if you're loading data

00:11:23.940 --> 00:11:26.910
from a local data storage,
your user interface

00:11:26.910 --> 00:11:28.700
will be more responsive.

00:11:30.260 --> 00:11:32.860
There are a lot of
flexible options available.

00:11:32.920 --> 00:11:36.500
There's key-value pair storage
for simple string storage.

00:11:37.820 --> 00:11:40.910
And for structured data,
there's a queryable

00:11:40.910 --> 00:11:42.980
SQL database storage API.

00:11:43.100 --> 00:11:46.200
Also, it's simple to get started.

00:11:46.300 --> 00:11:52.120
So let me show you what you can do with
the HTML5 Offline Application Cache.

00:11:52.240 --> 00:11:55.640
This technology lets you store
resources for your web application

00:11:55.710 --> 00:11:58.160
locally on the user's device.

00:11:58.260 --> 00:12:02.660
So all the HTML, CSS,
and JavaScript files, all of your images,

00:12:02.760 --> 00:12:06.820
all of those can be stored locally
right on your user's iPhone,

00:12:07.060 --> 00:12:09.500
iPod Touch, or iPad.

00:12:09.590 --> 00:12:12.240
Your web app is going
to always be accessible.

00:12:12.320 --> 00:12:16.030
Once a user visits it once,
the resources are downloaded,

00:12:16.030 --> 00:12:20.170
and from that point forward,
users can always access your web app

00:12:20.170 --> 00:12:23.140
just by revisiting that URL in Safari.

00:12:23.210 --> 00:12:25.600
So the first thing we're going
to do is set the manifest

00:12:25.650 --> 00:12:29.860
attribute on the HTML tag to
point to this simple text file.

00:12:29.930 --> 00:12:32.660
I've named it my-offline-cache.app-cache.

00:12:32.660 --> 00:12:33.880
Thank you.

00:12:34.330 --> 00:12:39.560
So this file, my-offline-cache.appcache,
is going to look something like this.

00:12:39.680 --> 00:12:43.020
It begins, the first line of this
file is cache manifest,

00:12:43.190 --> 00:12:45.140
that's mandatory.

00:12:45.230 --> 00:12:48.750
Lines in this file that begin
with a hash mark are comments,

00:12:48.820 --> 00:12:50.500
and those are ignored.

00:12:50.600 --> 00:12:53.420
And from there,
you really just list the URLs of

00:12:53.420 --> 00:12:56.860
the resources that are required
by your web application.

00:12:56.980 --> 00:13:00.960
So you can use absolute URLs,
or URLs that are relative

00:13:00.960 --> 00:13:02.700
to the current page.

00:13:02.830 --> 00:13:06.720
You can also use headers to
define an online whitelist.

00:13:06.940 --> 00:13:12.730
So here, we're saying that we always
want this forecast.cgi file to

00:13:12.730 --> 00:13:15.340
be fetched from the network,
never the cache.

00:13:15.400 --> 00:13:18.550
And you can also use these
headers to switch from the

00:13:18.550 --> 00:13:21.080
network back to the cache,
like so.

00:13:21.140 --> 00:13:26.230
We always want this rainy.png
image to be fetched from the cache.

00:13:26.350 --> 00:13:30.480
So once you have created
your manifest file,

00:13:30.540 --> 00:13:34.320
you need to make one more change,
and that is to serve the manifest

00:13:34.380 --> 00:13:39.120
file from your server with a
text cache manifest mime type.

00:13:39.170 --> 00:13:44.320
If you have used an offline application
cache before on earlier versions of iOS,

00:13:44.390 --> 00:13:49.540
you should know that the cache size has
increased to 50 megabytes in iOS 4.2,

00:13:49.610 --> 00:13:53.440
making this feature even
more usable for more people.

00:13:53.510 --> 00:13:56.740
So now you've got all of the
resources for your web application,

00:13:56.740 --> 00:14:00.430
all the HTML, CSS, and JavaScript files,
all of your images.

00:14:00.440 --> 00:14:04.350
All of that is now cached
locally on the user's device.

00:14:04.760 --> 00:14:09.000
So what about the data that is
generated by your web application?

00:14:09.750 --> 00:14:14.620
People entering their username,
saving the state of a game, etc.

00:14:16.250 --> 00:14:19.680
Well, for storing dynamic data,
there's two types of storage.

00:14:19.730 --> 00:14:23.090
The first is the Web Storage API.

00:14:23.400 --> 00:14:27.390
This is used for simple key-value
pair storage for strings.

00:14:27.470 --> 00:14:30.210
There's two types of web storage.

00:14:30.440 --> 00:14:33.300
There's session storage,
which is something that could

00:14:33.300 --> 00:14:37.070
replace cookies for session tracking,
and there's one session

00:14:37.070 --> 00:14:38.700
per browser window or tab.

00:14:39.960 --> 00:14:42.420
The second type of web
storage is local storage.

00:14:42.480 --> 00:14:47.360
This is persistent, it's written to disk,
and it's global to the domain.

00:14:47.440 --> 00:14:50.700
So storing items in web storage
is really straightforward.

00:14:50.700 --> 00:14:52.600
It's just standard JavaScript.

00:14:52.700 --> 00:14:58.100
So you can store an item in web
storage by calling a function.

00:14:58.220 --> 00:15:02.300
Here we're setting the item with
the key of screen name and the

00:15:02.300 --> 00:15:07.380
value "Vicki Murley." You can index
into an array or set a property

00:15:07.390 --> 00:15:09.740
to set items in web storage.

00:15:10.010 --> 00:15:13.840
Retrieving items from web
storage is also really simple.

00:15:13.920 --> 00:15:15.360
Again, you can call a function.

00:15:15.360 --> 00:15:20.600
Here we're calling getItem to get our
item that has the key screen name.

00:15:20.700 --> 00:15:24.440
You can index into an
array or access a property.

00:15:24.520 --> 00:15:28.340
So here we're setting and retrieving
items from session storage,

00:15:28.380 --> 00:15:32.500
but the API for local
storage is exactly the same.

00:15:32.910 --> 00:15:36.590
So that's a type of storage
that you can use for storing

00:15:36.590 --> 00:15:38.800
simple strings of dynamic data.

00:15:38.800 --> 00:15:44.800
If you want to store structured data,
you can use SQL database storage.

00:15:46.360 --> 00:15:49.800
This API allows you to
execute SQL transactions

00:15:49.900 --> 00:15:51.490
directly from JavaScript.

00:15:51.680 --> 00:15:55.510
So you can query and manipulate
the data in your web application,

00:15:55.700 --> 00:15:58.300
or do things like add search
to your web application.

00:15:58.300 --> 00:16:03.300
You start by calling the Open Database
function with four parameters.

00:16:03.320 --> 00:16:06.110
The first is required,
last three are optional.

00:16:07.300 --> 00:16:09.290
The first parameter is
the name of our database.

00:16:09.400 --> 00:16:11.240
In this case,
we have a to-do list example,

00:16:11.310 --> 00:16:16.450
so the name of our database is "to-do".
That's followed by a version number,

00:16:16.450 --> 00:16:19.890
a display string, and a size in bytes.

00:16:20.610 --> 00:16:23.260
From here,
we can execute SQL transactions.

00:16:23.260 --> 00:16:26.030
We start by just building
up a string of SQL,

00:16:26.030 --> 00:16:29.310
and then we pass that to
the execute SQL function,

00:16:29.310 --> 00:16:31.740
and our SQL is executed.

00:16:31.810 --> 00:16:35.290
So we've learned about a few different
technologies that you can use to

00:16:35.310 --> 00:16:37.880
create offline web applications.

00:16:37.970 --> 00:16:41.660
What's possible when you
combine these technologies?

00:16:41.730 --> 00:16:44.450
Well,
we have a few examples available at the

00:16:44.450 --> 00:16:47.710
developer.apple.com Safari demos website.

00:16:47.880 --> 00:16:50.540
The first is this offline calendar.

00:16:50.590 --> 00:16:55.100
It uses an SQL database to store
all of the events in the calendar,

00:16:55.170 --> 00:16:58.210
which allows us to
create a filtered search,

00:16:58.210 --> 00:17:01.680
which searches through all of
the events in the calendar,

00:17:01.730 --> 00:17:05.250
and returns matching events as
the user types new characters

00:17:05.270 --> 00:17:06.820
into the search field.

00:17:06.900 --> 00:17:11.360
This calendar also uses an
HTML5 offline application cache,

00:17:11.440 --> 00:17:11.660
so that it can be used to create a
search engine for the application.

00:17:11.660 --> 00:17:13.470
This allows us to create a search
engine for the application,

00:17:13.470 --> 00:17:15.190
so that it's fully functional
even if a user doesn't have an

00:17:15.220 --> 00:17:16.460
active connection to the internet.

00:17:16.460 --> 00:17:20.620
We also have a simple checkers
application that demonstrates

00:17:20.700 --> 00:17:23.100
offline storage capabilities.

00:17:23.100 --> 00:17:27.050
This demo uses web storage,
so simple key-value pairs of

00:17:27.050 --> 00:17:31.040
strings to store the state
of the game and high scores.

00:17:31.040 --> 00:17:34.360
It also uses an HTML5
offline application cache,

00:17:34.580 --> 00:17:39.130
so that it's fully functional
without an active network connection.

00:17:39.300 --> 00:17:42.490
This application feels even more
like a native application because

00:17:42.490 --> 00:17:46.520
it uses a home screen icon,
and it also runs in full screen mode when

00:17:46.520 --> 00:17:48.600
it's launched from that home screen icon.

00:17:48.680 --> 00:17:52.890
So if you want to add offline storage
capabilities to your web application,

00:17:53.110 --> 00:17:56.510
what tools are available to you to use?

00:17:56.710 --> 00:17:59.820
Well, as I mentioned,
WebKit is the basis of

00:17:59.820 --> 00:18:01.710
Safari on all platforms.

00:18:01.710 --> 00:18:03.680
So you can actually
use the Web Inspector,

00:18:03.760 --> 00:18:06.930
which is available in
Safari on Mac OS X and Windows,

00:18:06.930 --> 00:18:11.330
to add offline functionality to
your web application for iOS.

00:18:13.390 --> 00:18:14.790
It has some really great features.

00:18:14.820 --> 00:18:18.030
You can inspect all of the
values for local storage.

00:18:18.030 --> 00:18:20.530
And if you click on the
name of a local database,

00:18:20.660 --> 00:18:25.710
you can even execute
SQL transactions interactively.

00:18:25.920 --> 00:18:28.100
So that's it for HTML5.

00:18:28.160 --> 00:18:33.800
Now let's move on to talking about CSS,
primarily CSS effects.

00:18:33.860 --> 00:18:37.610
So when I say CSS effects,
I'm referring to a family of

00:18:37.610 --> 00:18:43.060
CSS properties that you can use to
create engaging user interfaces and

00:18:43.060 --> 00:18:45.550
add visual styling and animation.

00:18:47.050 --> 00:18:49.570
So why use CSS?

00:18:49.680 --> 00:18:54.310
Well, CSS will let you deliver rich
animated interfaces on iOS.

00:18:55.800 --> 00:18:57.540
It's also simple to use.

00:18:57.660 --> 00:19:00.860
It's just standard web technology,
so if you've ever written CSS,

00:19:01.280 --> 00:19:04.270
you know how to use CSS effects.

00:19:04.730 --> 00:19:07.440
Graceful degradation is built right in.

00:19:07.510 --> 00:19:11.560
A web browser will simply ignore any
CSS property that it doesn't understand.

00:19:11.730 --> 00:19:16.140
So you can add an animation and create
an enhanced interface in Safari that will

00:19:16.170 --> 00:19:18.600
still be functional in other browsers.

00:19:18.890 --> 00:19:22.210
Finally,
Performance Many of the CSS animations in

00:19:22.210 --> 00:19:24.600
Safari on iOS are hardware-accelerated.

00:19:24.600 --> 00:19:28.600
So even though JavaScript is
really fast in Safari on iOS,

00:19:28.600 --> 00:19:32.480
a hardware-accelerated animation
will always perform better.

00:19:34.720 --> 00:19:36.830
So this is why CSS is so great.

00:19:36.960 --> 00:19:38.410
What can you do with CSS?

00:19:38.600 --> 00:19:43.600
Well, you can translate, rotate, scale,
or skew any web page element

00:19:43.600 --> 00:19:46.600
in 2D or even 3D space.

00:19:48.290 --> 00:19:51.860
You can animate state changes that
would otherwise be instantaneous,

00:19:51.890 --> 00:19:54.660
and we'll see an example
of that in a moment.

00:19:54.740 --> 00:19:59.760
You can create advanced effects and rich
animations with just a few lines of code.

00:19:59.830 --> 00:20:03.650
And you can embed custom
fonts in web pages.

00:20:03.910 --> 00:20:09.230
Prior to iOS 4.2, only SVG fonts were
supported as custom fonts.

00:20:09.650 --> 00:20:13.600
But in iOS 4.2 and later,
TrueType fonts and OpenType

00:20:13.600 --> 00:20:15.300
fonts are also supported.

00:20:15.420 --> 00:20:19.740
So speaking of fonts,
let's take a look at a text example.

00:20:19.830 --> 00:20:23.660
So here we have a line of text,
"Hello World," with some CSS properties

00:20:23.660 --> 00:20:26.960
that you've probably seen before,
that you're used to seeing.

00:20:27.080 --> 00:20:30.460
We have a color, a font family,
and a font size.

00:20:30.560 --> 00:20:33.960
This text looks pretty good,
but we can take this text a step further

00:20:34.410 --> 00:20:37.140
by adding a text stroke around the text.

00:20:37.270 --> 00:20:41.440
We do that by adding the text stroke
property with a value of two pixels,

00:20:41.440 --> 00:20:43.410
and we want our stroke color to be white.

00:20:43.740 --> 00:20:46.820
This looks pretty cool,
but we can make it even better by

00:20:46.820 --> 00:20:48.660
using a custom font for this text.

00:20:49.120 --> 00:20:51.920
To do that,
I use the font at font face rule.

00:20:52.210 --> 00:20:54.930
I specify the name of my custom font.

00:20:55.130 --> 00:20:57.910
In this case,
I'm naming it after the type

00:20:57.910 --> 00:21:00.020
of font that I found online.

00:21:00.090 --> 00:21:05.660
It's called "lobster," and I point the
source value to the URL of my font file.

00:21:05.930 --> 00:21:10.680
I also change my font family
CSS property to use my custom font

00:21:10.900 --> 00:21:12.570
as the first font in the list.

00:21:12.910 --> 00:21:16.270
So this text is looking pretty cool,
but we can take it even another

00:21:16.320 --> 00:21:20.030
step further by making the
red color a red gradient.

00:21:20.180 --> 00:21:23.170
To do that,
we're going to add a background image

00:21:23.170 --> 00:21:25.910
to this element using a WebKit gradient.

00:21:26.080 --> 00:21:29.580
This is a linear gradient that
starts in the upper left-hand corner,

00:21:29.690 --> 00:21:32.140
and goes down to the
lower left-hand corner,

00:21:32.230 --> 00:21:35.950
and the color interpolates
from white to our red color.

00:21:36.010 --> 00:21:39.110
So here you can see we have the
gradient that's showing up kind

00:21:39.110 --> 00:21:42.510
of behind our text at the moment,
but we want that gradient

00:21:42.510 --> 00:21:43.490
to be on the text.

00:21:43.800 --> 00:21:46.150
So what we do,
we set the color of this text

00:21:46.150 --> 00:21:48.980
to transparent so that the
gradient can show through,

00:21:49.160 --> 00:21:52.670
and then we clip the background to
the text using the background clip

00:21:52.930 --> 00:21:55.360
property with the value of text.

00:21:55.480 --> 00:21:57.030
So this text looks pretty good.

00:21:57.320 --> 00:22:02.240
Now let's say that we want to make
this element appear on screen.

00:22:02.360 --> 00:22:06.540
So one way that we could do this
is by setting the opacity value,

00:22:06.620 --> 00:22:11.600
changing it from 0 to 1
to make this text appear.

00:22:11.700 --> 00:22:14.200
So if we do that,
change the value of the opacity

00:22:14.250 --> 00:22:18.080
property in JavaScript from 0 to 1,
our text is just going

00:22:18.160 --> 00:22:20.110
to pop onto the screen.

00:22:20.490 --> 00:22:24.060
But maybe what we want instead
is for our text to kind of

00:22:24.350 --> 00:22:27.270
fade onto the screen gradually,
over time.

00:22:27.550 --> 00:22:31.300
To do that, it's very easy to add
this animation using CSS.

00:22:31.740 --> 00:22:35.570
Here we have our Hello class,
which is a class on our text,

00:22:35.570 --> 00:22:38.400
and we're adding three CSS properties.

00:22:38.600 --> 00:22:41.400
The transition property,
which tells Safari which

00:22:41.400 --> 00:22:44.400
CSS property we want to animate,
that's the opacity property.

00:22:44.400 --> 00:22:48.030
The transition duration property,
we want this animation

00:22:48.030 --> 00:22:49.400
to last three seconds.

00:22:49.410 --> 00:22:51.400
Finally, a transition timing function.

00:22:51.400 --> 00:22:54.510
There are several
built-in timing functions:

00:22:54.510 --> 00:22:57.320
easeIn, easeOut, easeInOut, and linear.

00:22:57.750 --> 00:23:01.400
Here we're specifying a
timing function of easeIn.

00:23:02.100 --> 00:27:27.800
[Transcript missing]

00:27:28.090 --> 00:27:29.540
Well, the answer is no.

00:27:29.610 --> 00:27:35.090
The rule is actually that it's sort of
one touch per container is required to

00:27:35.100 --> 00:27:37.700
start playback within that container.

00:27:37.800 --> 00:27:41.130
This means that calling play
from an onload handler will

00:27:41.130 --> 00:27:43.000
not start media playback.

00:27:43.080 --> 00:27:47.500
This also means that autoplay
does not work in Safari on iOS.

00:27:47.650 --> 00:27:53.260
However, after a user starts playback,
subsequent calls to the play function

00:27:53.260 --> 00:27:55.400
will work for that container.

00:27:55.530 --> 00:27:58.980
So what does this mean if I want
to play two videos back to back,

00:27:59.110 --> 00:28:00.300
one after another?

00:28:00.390 --> 00:28:02.100
What steps will I follow?

00:28:02.220 --> 00:28:05.810
Well, the first thing you're going to
do is add an event listener on

00:28:05.810 --> 00:28:07.560
your video for the ended event.

00:28:07.880 --> 00:28:11.260
Once that event is emitted,
you should reset the source

00:28:11.260 --> 00:28:14.760
attribute for that video element
to your second media source.

00:28:15.090 --> 00:28:18.060
Once that's done,
you can call the play function

00:28:18.060 --> 00:28:22.200
on that video element to start
playing the second media file.

00:28:22.280 --> 00:28:24.800
And of course, you should remove the
ended event listener.

00:28:24.800 --> 00:28:24.800
So what does this mean if I want
to play two videos back to back,

00:28:24.800 --> 00:28:24.800
one after another?

00:28:24.800 --> 00:28:24.800
What steps will I follow?

00:28:24.800 --> 00:28:24.800
Well, the first thing you're going to
do is add an event listener on

00:28:24.800 --> 00:28:24.800
your video for the ended event.

00:28:24.800 --> 00:28:24.800
Once that event is emitted,
you should reset the source

00:28:24.800 --> 00:28:24.800
attribute for that video element
to your second media source.

00:28:24.800 --> 00:28:24.800
Once that's done,
you can call the play function

00:28:24.800 --> 00:28:24.800
on that video element to start
playing the second media file.

00:28:24.800 --> 00:28:26.230
And of course,
you should remove the ended event

00:28:26.230 --> 00:28:30.100
listener from the video so that you don't
repeat the process all over again when

00:28:30.110 --> 00:28:33.300
your second media file finishes playing.

00:28:33.370 --> 00:28:37.700
For bonus points, you should also display
progress as this is happening.

00:28:37.750 --> 00:28:41.030
You can show a progress indicator
until you receive a can play

00:28:41.070 --> 00:28:42.500
or can play through event.

00:28:42.580 --> 00:28:46.020
And you should always listen
for the error event to report

00:28:46.020 --> 00:28:47.700
problems to your users.

00:28:47.750 --> 00:28:50.800
For more information on
HTML5 audio and video,

00:28:50.810 --> 00:28:54.200
again, I would encourage you to visit the
Safari Dev Center at developer.apple.com.

00:28:54.200 --> 00:29:02.300
Two key pieces of documentation are the
Safari HTML5 audio and video guide and

00:29:02.300 --> 00:29:05.000
the HTML media element class reference.

00:29:05.080 --> 00:29:07.430
And also,
there are several pieces of sample

00:29:07.520 --> 00:29:11.700
code that will be helpful to you when
you're implementing this technology.

00:29:11.880 --> 00:29:16.900
So that's it for some additional
information on HTML5 video.

00:29:17.190 --> 00:29:21.500
Let's move on to talk about
what's new in Safari on iOS.

00:29:21.500 --> 00:29:23.600
So this new feature is
extremely straightforward.

00:29:23.600 --> 00:29:28.220
Basically,
you're just going to invoke the printing

00:29:28.220 --> 00:29:30.200
dialog by calling the print function.

00:29:30.570 --> 00:29:34.740
Doing so will bring up a
platform-specific UI specific

00:29:34.770 --> 00:29:36.900
to either iPhone or iPad.

00:29:37.020 --> 00:29:39.630
On iPhone,
a panel slides up so that users

00:29:39.780 --> 00:29:42.000
can choose their printer options.

00:29:42.120 --> 00:29:47.200
And on iPad, a popover appears aligned
to the action button.

00:29:47.380 --> 00:29:48.500
Very straightforward.

00:29:48.630 --> 00:29:53.000
Just call the print function to
automatically invoke AirPrint.

00:29:53.160 --> 00:29:58.900
Adding support for AirPlay on
HTML5 video is also very simple.

00:29:59.090 --> 00:30:01.600
All you have to do is set
the AirPlay attribute on

00:30:01.600 --> 00:30:05.000
your HTML5 video to allow.

00:30:05.000 --> 00:30:07.700
So you can see that I'm calling
it the AirPlay attribute,

00:30:07.800 --> 00:30:12.800
but then in my code snippet,
you see xWebKitAirPlay = allow.

00:30:12.960 --> 00:30:18.200
You may be wondering what that
prefix xWebKit actually means.

00:30:18.370 --> 00:30:22.790
This is following the W3C recommended
syntax for a vendor-specific,

00:30:22.930 --> 00:30:24.960
HTML attribute.

00:30:25.240 --> 00:30:28.740
So in this case, we have the X,
the vendor is WebKit,

00:30:28.900 --> 00:30:31.370
and the feature is AirPlay.

00:30:31.550 --> 00:30:34.600
If you want to know more
about this recommended syntax,

00:30:34.640 --> 00:30:36.620
you can visit this URL.

00:30:36.750 --> 00:30:39.260
Support for AirPlay is
really easy to add,

00:30:39.260 --> 00:30:42.940
and it can be enabled in
the default video controls.

00:30:43.030 --> 00:30:47.900
So now let's move on to talking
about accelerometer and gyroscope.

00:30:47.950 --> 00:30:49.700
What can you use them for?

00:30:49.750 --> 00:30:53.460
Well, one thing that you can use
them for is playing games.

00:30:53.520 --> 00:30:57.380
You might imagine having a boxing
game where you could tilt the phone

00:30:57.380 --> 00:31:01.590
right and left to throw punches,
and maybe move the phone to

00:31:01.590 --> 00:31:03.580
the side to avoid a punch.

00:31:03.680 --> 00:31:08.290
You can also use the accelerometer and
gyroscope to view a panoramic photo.

00:31:08.500 --> 00:31:13.660
There's this great native application
on iOS called 360 Panorama,

00:31:13.730 --> 00:31:17.460
and it allows you to create a
panoramic photo and then view

00:31:17.590 --> 00:31:19.700
that photo from within a web page.

00:31:19.860 --> 00:31:25.500
So as you stand holding the phone and
turn your body to the right and left,

00:31:25.550 --> 00:31:29.090
you can view this entire panoramic scene.

00:31:29.110 --> 00:31:33.380
The accelerometer and gyroscope can
also be used for interacting with data.

00:31:33.380 --> 00:31:37.100
So here we have a chart of
age structure in Germany.

00:31:37.100 --> 00:31:43.410
And as I tilt the iPad away from me,
the years go up and the data on the graph

00:31:43.410 --> 00:31:46.010
and in the chart adjusts accordingly.

00:31:46.350 --> 00:31:51.250
As I tilt the iPad towards me,
the years go down, and again,

00:31:51.290 --> 00:31:53.850
the chart and the graph adjust.

00:31:54.270 --> 00:31:58.570
So how do I begin accessing
accelerometer and gyroscope data

00:31:58.570 --> 00:32:01.100
in my web page in Safari on iOS?

00:32:01.100 --> 00:32:06.100
Well, this follows the W3C device
orientation specification.

00:32:06.100 --> 00:32:10.950
And this information is exposed
through two types of DOM events.

00:32:11.200 --> 00:33:18.600
[Transcript missing]

00:33:18.780 --> 00:33:21.640
Alpha is the rotation around gravity.

00:33:21.700 --> 00:33:24.140
Beta is the tilt forwards and backwards.

00:33:24.180 --> 00:33:27.040
And Gamma is the tilt left and right.

00:33:27.110 --> 00:33:30.340
Let's take a closer look at
these orientation values.

00:33:30.500 --> 00:33:33.600
So if I have an iPhone
laying flat on a table,

00:33:33.640 --> 00:33:37.860
the X-axis is going to go
directly across the phone,

00:33:39.100 --> 00:33:42.610
Y-axis goes up and down,
and the Z-axis goes

00:33:42.610 --> 00:33:46.550
straight through the phone,
pointing up.

00:33:46.700 --> 00:33:51.480
That means for the alpha value,
that's degrees rotated around the z-axis.

00:33:51.560 --> 00:33:55.350
So this is going to report
movement such as this.

00:33:55.350 --> 00:33:58.440
An iPhone kind of spinning
around like a compass.

00:33:58.520 --> 00:34:02.900
The beta value reports the
degrees rotated around the x-axis.

00:34:03.060 --> 00:34:05.190
So if we're looking at
an iPhone from the side,

00:34:05.270 --> 00:34:07.660
the x-axis is now pointing towards you.

00:34:07.800 --> 00:34:10.760
So the beta value
describes motion like this.

00:34:12.970 --> 00:34:16.680
The gamma value is degrees
rotated around the y-axis,

00:34:16.690 --> 00:34:21.640
so if we're looking down at an iPhone
from the top or directly from the bottom,

00:34:21.850 --> 00:34:26.240
the gamma value is going
to report motion like this.

00:34:27.290 --> 00:34:29.040
So that's device orientation.

00:34:29.200 --> 00:34:30.660
What about device motion?

00:34:30.840 --> 00:34:32.640
How is the device moving?

00:34:32.790 --> 00:34:36.790
Well, to get device motion information,
again, it's pretty straightforward.

00:34:36.910 --> 00:34:40.200
You're going to add an
EventListener to the window object.

00:34:40.280 --> 00:34:43.980
And then once that event is emitted,
you can check one of three

00:34:44.000 --> 00:34:46.520
vectors on the event for motion.

00:34:46.710 --> 00:34:51.050
Acceleration describes the acceleration
force applied to the device with X,

00:34:51.050 --> 00:34:53.060
Y, and Z properties.

00:34:53.130 --> 00:34:56.000
Acceleration including
gravity is like acceleration,

00:34:56.100 --> 00:34:58.100
but with the Earth's gravity included.

00:34:58.200 --> 00:35:01.720
And rotation rate describes
the angular velocity around the

00:35:01.720 --> 00:35:05.800
vectors described with alpha,
beta, and gamma properties.

00:35:05.900 --> 00:35:11.000
Acceleration is measured in units of g,
which is units of Earth's gravity.

00:35:11.110 --> 00:35:14.160
So a body at rest has
0 g in the x direction,

00:35:14.160 --> 00:35:19.400
0 g in the y direction,
and 1 g in the z direction, up and down.

00:35:19.520 --> 00:35:23.610
So any deviation from an X, Y,
Z value of 0, 0,

00:35:23.610 --> 00:35:27.170
1 means that the device is moving.

00:35:27.330 --> 00:35:29.470
When you're listening for
the device motion event,

00:35:29.470 --> 00:35:33.940
you should know that the accelerometer
will emit several events per second.

00:35:33.970 --> 00:35:37.660
So you're going to have to filter
this data for best results.

00:35:37.770 --> 00:35:41.820
The best way to do this is to use a
combination of high-pass and low-pass

00:35:41.870 --> 00:35:46.700
filters to create an average value
of a range of events over time.

00:35:47.030 --> 00:35:50.130
So remember,
if you're trying to decide whether to

00:35:50.190 --> 00:35:54.610
use the accelerometer or gyroscope,
remember that you should listen for

00:35:54.660 --> 00:35:58.700
the device orientation event to use
the gyroscope wherever possible.

00:35:58.700 --> 00:36:03.490
The gyroscope is available on
iPhone 4 and the latest iPod Touch.

00:36:03.850 --> 00:36:08.700
Listen for the device motion event to
use the accelerometer whenever necessary.

00:36:08.740 --> 00:36:12.680
This is appropriate for older
iPhones and older iPod Touch models,

00:36:12.840 --> 00:36:14.700
and also for iPad.

00:36:14.700 --> 00:36:18.520
So how do you detect whether or
not the gyroscope is available?

00:36:20.130 --> 00:36:24.000
Well, the gyroscope is available if
acceleration and rotation rate on

00:36:24.000 --> 00:36:27.000
your device motion event are not null.

00:36:27.140 --> 00:36:31.170
Acceleration, including gravity,
on the device motion event is

00:36:31.210 --> 00:36:34.000
guaranteed to work on all devices.

00:36:34.000 --> 00:36:38.150
For more information on the
accelerometer and gyroscope,

00:36:38.150 --> 00:36:42.000
visit the Safari Dev Center,
in particular the Device Orientation

00:36:42.000 --> 00:36:46.000
Event Class Reference and the
Device Motion Event Class Reference.

00:36:46.200 --> 00:36:49.900
So that covers new
features in Safari on iOS.

00:36:50.110 --> 00:36:51.000
So that's it!

00:36:51.000 --> 00:36:55.990
I've covered an overview of the
available technologies in Safari on iOS,

00:36:56.300 --> 00:37:01.350
provided more information on HTML5 video,
and introduced new technologies which

00:37:01.350 --> 00:37:06.000
you can use to add additional features
to your web application or website.

00:37:06.040 --> 00:37:10.060
With this information,
you're ready to enhance and optimize your

00:37:10.090 --> 00:37:14.800
web content and deliver the best possible
experience to Safari on iOS users.