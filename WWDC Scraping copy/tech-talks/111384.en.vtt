WEBVTT

00:00:00.266 --> 00:00:02.000
Hello
My name is René

00:00:02.633 --> 00:00:05.099
I am part of the Sensing And Connectivity team.

00:00:05.416 --> 00:00:11.383
I am going to take you through the new Journaling Suggestions API
that was announced with iOS 17.

00:00:12.733 --> 00:00:14.433
In iOS 17.2,

00:00:14.516 --> 00:00:19.133
Apple is introducing the Journal app to help people reflect on their lives.

00:00:19.783 --> 00:00:22.550
The practice of keeping a journal has a rich history,

00:00:22.616 --> 00:00:28.133
and taking a moment to reflect and write
has even been shown to improve wellbeing and mental health.

00:00:28.516 --> 00:00:32.066
But sometimes, it can be difficult to know where to start.

00:00:32.366 --> 00:00:35.200
So to help someone get started with their writing,

00:00:35.299 --> 00:00:41.783
iOS can sense meaningful events in their life
and propose a starting point for their Journal entries.

00:00:42.100 --> 00:00:44.566
We call them Journaling Suggestions,

00:00:44.566 --> 00:00:50.483
and they are made of photos someone took,
workouts, places they went, and more...

00:00:51.433 --> 00:00:54.399
Journaling Suggestions is a Private Access picker,

00:00:54.399 --> 00:00:58.266
and so it is available for your application as well!

00:00:58.816 --> 00:01:02.200
Journaling suggestions runs in a separate process from your app,

00:01:02.200 --> 00:01:04.200
but is rendered on top of it.

00:01:04.799 --> 00:01:09.216
Only what a person actually selects is passed back to your app.

00:01:09.516 --> 00:01:10.650
And of course,

00:01:10.650 --> 00:01:16.983
they can review what iOS generated for them before choosing and sending a suggestion to your application.

00:01:17.833 --> 00:01:23.016
This lets your app take advantage of suggestions from many different categories of data

00:01:23.016 --> 00:01:28.000
like location and photos, without having to prompt for access to each category.

00:01:28.433 --> 00:01:34.133
And so, if you’re developing a journaling or wellbeing app
that helps someone reflect on their life,

00:01:34.166 --> 00:01:37.650
then the Journaling Suggestions API is for you.

00:01:38.500 --> 00:01:40.883
Now I am going to show you how to use it.

00:01:41.283 --> 00:01:49.533
I will start with more details about what Journaling Suggestions API is about,
and how User Privacy is at the core of it.

00:01:50.316 --> 00:01:55.133
Then, go through how to invoke the picker with a very simple code example.

00:01:56.066 --> 00:02:00.750
Next, demonstrate how to retrieve the details from the suggestions.

00:02:01.516 --> 00:02:06.066
And then, explain all of the conveniency built in this API,

00:02:06.066 --> 00:02:11.333
and how you can integrate suggestions content very quickly in your app.

00:02:11.900 --> 00:02:13.316
And finally,

00:02:13.349 --> 00:02:18.716
I 'll walk through the experience a person will come across
when they use Journaling Suggestions for the first time

00:02:18.716 --> 00:02:21.666
and how they can configure the content of their sheet.

00:02:22.716 --> 00:02:23.849
But first,

00:02:23.849 --> 00:02:27.150
let’s walk through what Journaling Suggestion API is about,

00:02:27.166 --> 00:02:30.183
how User Privacy comes into the picture,

00:02:30.183 --> 00:02:33.849
and introduce a few definitions and concepts.

00:02:35.150 --> 00:02:37.566
When the picker is shown on the screen,

00:02:37.566 --> 00:02:40.400
initially you will see is a list of suggestions.

00:02:41.033 --> 00:02:43.716
Each suggestion is made of a title,

00:02:43.733 --> 00:02:49.550
and a number of assets such as, photos, workouts, visits, and more.

00:02:50.199 --> 00:02:54.733
Each suggestion can have up to 13 item content assets.

00:02:55.566 --> 00:02:57.949
The list is organized under two tabs,

00:02:57.949 --> 00:03:00.216
one called “Recommended”,

00:03:00.583 --> 00:03:02.583
and the other one called “Recent”.

00:03:04.133 --> 00:03:05.599
Under “Recommended”,

00:03:05.599 --> 00:03:10.216
the picker will order suggestions
to show the most meaningful ones at the top.

00:03:10.533 --> 00:03:15.966
Our ranking algorithm uses a combination of advanced machine learning techniques

00:03:15.966 --> 00:03:20.066
to find the right balance of diversity, recency,

00:03:20.066 --> 00:03:24.733
as well as a match of what a person will engage with the most.

00:03:25.383 --> 00:03:28.349
This tab will also have special suggestions,

00:03:28.366 --> 00:03:30.699
including highlights from photo memories,

00:03:30.699 --> 00:03:34.199
as well as suggestions that last over multiple days,

00:03:34.199 --> 00:03:36.766
such as weekly summaries and multi day trips.

00:03:37.650 --> 00:03:43.616
Under the “recent” tab, suggestions are organized in a more temporal manner.

00:03:44.066 --> 00:03:48.016
This allows a person to navigate easily back in time.

00:03:51.016 --> 00:03:53.016
When someone taps on a suggestion

00:03:53.033 --> 00:03:57.933
they get into an interstitial screen where they can review all the details,

00:03:57.933 --> 00:04:00.433
as well as all the attached asset content.

00:04:01.366 --> 00:04:04.833
The Carousel view allows them to review assets in larger size.

00:04:05.349 --> 00:04:09.783
This is important, because they are about to share their data with your App!

00:04:10.083 --> 00:04:15.250
And the List view allows them to review all the meta data associated with each asset.

00:04:16.033 --> 00:04:21.566
Each view allows them to select or unselect any asset
and really curate what is going to be sent

00:04:22.000 --> 00:04:24.949
They can even edit the suggestion title.

00:04:25.666 --> 00:04:27.666
Once they are fully happy with their selection,

00:04:27.666 --> 00:04:32.433
they can just tap the “Add to your application” button to deliver the content!

00:04:32.766 --> 00:04:36.449
And remember, this is designed with privacy-first in mind.

00:04:36.550 --> 00:04:41.633
Your app does not need to ask permission because it runs out of your App process

00:04:42.266 --> 00:04:43.300
Also,

00:04:43.300 --> 00:04:47.116
your app will only receive the content of the suggestion they choose to add,

00:04:47.116 --> 00:04:48.366
nothing else.

00:04:48.833 --> 00:04:54.216
This is how iOS can propose all of this meaningful content while keeping it private!

00:04:54.883 --> 00:04:58.800
Ok, I’m sure you’re as excited as I am about this!

00:04:58.916 --> 00:05:02.483
Let’s look at how you would invoke this picker in your application.

00:05:02.533 --> 00:05:04.916
The things you need to do are:

00:05:05.050 --> 00:05:07.850
Add the Journaling Suggestions capability to your app.

00:05:08.083 --> 00:05:13.966
This will add the appropriate entitlement and allow your app to use the journaling suggestions API

00:05:14.366 --> 00:05:20.500
Import the Journaling Suggestions framework in your SwiftUI code
such that you can create the picker instance.

00:05:21.316 --> 00:05:26.816
Instrument your picker instance closures
to retrieve the content that is sent to your app by the picker

00:05:26.983 --> 00:05:30.850
And then of course, show the picker on top of your app.

00:05:31.449 --> 00:05:34.916
Let’s start with adding the journaling suggestions capability now.

00:05:36.350 --> 00:05:42.050
Adding the capability is a simple step you do in Xcode by tapping on your app’s build target.

00:05:42.550 --> 00:05:47.916
then under the “Signing and Capabilities” tab, tap on “+ Capability”

00:05:48.216 --> 00:05:50.649
and then find Journaling Suggestions.

00:05:51.283 --> 00:05:54.899
This tells iOS your app intends to show the picker.

00:05:55.649 --> 00:06:00.366
And now let’s look at an example of an app using the API!

00:06:01.666 --> 00:06:06.949
This simple app just has a button to invoke the picker and retrieve the suggestion title

00:06:07.399 --> 00:06:09.783
I start by importing the framework,

00:06:09.966 --> 00:06:12.766
And create the picker instance, with a label.

00:06:13.300 --> 00:06:20.466
The picker comes with an “onCompletion” closure,
that will give you all the details you need once a person choses to share with your app.

00:06:21.383 --> 00:06:25.766
Here I am just keeping the title, so I can show it below my button.

00:06:26.316 --> 00:06:28.750
And... here is a demo of the result.

00:06:29.616 --> 00:06:33.516
by tapping on the button, I get the picker on top of my app.

00:06:34.600 --> 00:06:37.750
I can browse through, pick one suggestion...

00:06:38.383 --> 00:06:40.116
the content looks fine.

00:06:40.550 --> 00:06:42.183
Let me share this with my app.

00:06:43.199 --> 00:06:48.000
The picker dismisses, and now the suggestion title is showing in the app!

00:06:48.149 --> 00:06:49.583
Easy!

00:06:50.533 --> 00:06:54.233
Ok. At this point, you learned how to configure Xcode,

00:06:54.233 --> 00:06:56.183
how to import the API,

00:06:56.183 --> 00:06:59.783
and how to build a simple demo to receive the title of the suggestion

00:07:00.149 --> 00:07:03.283
but there’s a lot more to get from that closure function.

00:07:03.533 --> 00:07:08.583
There are in fact 9 different types of assets you could receive for a single suggestion.

00:07:09.316 --> 00:07:14.800
Let’s review them before you learn
how to build a new example that leverages photo assets.

00:07:16.033 --> 00:07:21.550
Workout, which can be represented in two forms,
depending if a route is attached or not.

00:07:21.633 --> 00:07:23.533
In both cases though,

00:07:23.533 --> 00:07:31.149
they will provide additional information such as duration, calories spent, as well as average heart rate when available

00:07:32.566 --> 00:07:39.600
Contact, which comes with a contact profile photo,
or a generated image with the initials when no photo is available.

00:07:40.833 --> 00:07:48.916
Location, indicating the places someone went,
including meta data such as place name and pinned location.

00:07:50.433 --> 00:07:56.550
Song, which includes playback items like song title, album, and cover art.

00:07:57.633 --> 00:08:02.500
Podcast, which also includes podcast name, episode name, and cover art.

00:08:04.416 --> 00:08:07.300
Photo, which includes an url to the photo.

00:08:08.566 --> 00:08:13.433
LivePhoto, which includes an url to the video, as well as its preview.

00:08:14.433 --> 00:08:17.716
Video, which includes an url to the video.

00:08:18.933 --> 00:08:22.783
and MotionActivity, which has step counts and an icon.

00:08:23.550 --> 00:08:27.383
Now here is how you can retrieve those assets in the closure.

00:08:28.783 --> 00:08:36.983
When its called, you can wait for the items of a certain type to be transferred over with the content(forType:) method of the suggestion,

00:08:37.016 --> 00:08:39.600
specifying a type of asset you are interested in.

00:08:40.583 --> 00:08:46.866
And so for instance, if you want to get the Photos,
you would call the content(forType:) photo.

00:08:48.233 --> 00:08:53.333
After you receive the photos, you can use them right away and populate the view with them.

00:08:54.266 --> 00:08:55.783
In this example,

00:08:55.783 --> 00:09:00.566
the photos are inlined in a list view by going over all the items of type “photo”,

00:09:01.183 --> 00:09:07.133
and then inserting them as an AsyncImage,
for which the url can be retrieved from each item.

00:09:08.983 --> 00:09:14.566
AsyncImage might not allow you to save the image,
but it’s convenient for view composition.

00:09:14.833 --> 00:09:21.633
Later you will find that some assets can be transformed into other SwiftUI types
to help speed up your integration.

00:09:22.216 --> 00:09:25.049
Now let’s review the code of this improved example.

00:09:27.466 --> 00:09:29.816
It starts with the picker creation.

00:09:31.000 --> 00:09:36.266
The [onCompletion] closure block retrieves the suggestion title and the photo assets.

00:09:36.733 --> 00:09:40.933
And then the photos are inserted in the view with an AsyncImage.

00:09:42.066 --> 00:09:44.666
And here is a demo of the result.

00:09:47.283 --> 00:09:50.533
Tapping on the button invokes the picker again on top of my app

00:09:51.950 --> 00:09:54.866
I pick one suggestion and tap “add to my App”.

00:09:56.000 --> 00:09:57.799
The picker dismisses,

00:09:57.816 --> 00:10:03.233
and now, I get the title like before, as well as the inlined photos received from the picker!

00:10:03.933 --> 00:10:08.183
And this is how you retrieve assets from the suggestion a person choses to add.

00:10:09.350 --> 00:10:16.716
Ok now you know how to invoke the picker, how to retrieve the suggestion,
and how to retrieve the photos for this suggestion.

00:10:16.883 --> 00:10:21.966
You also know all 9 asset types, each coming with their own properties.

00:10:22.933 --> 00:10:29.700
In the previous example I requested all photo assets and created an AsyncImage out of each of them,

00:10:29.700 --> 00:10:32.916
but there are actually other assets that contain images.

00:10:33.066 --> 00:10:39.516
And so I could request all of them as an UIImage or an Image View,
for instance, and treat them the same.

00:10:40.016 --> 00:10:42.399
Let’s review the mapping now.

00:10:43.100 --> 00:10:54.516
Some assets can be retrieved as UIImage or an Image View for conveniency,
those are: Contact, Song, Podcast, Photo and LivePhoto.

00:10:54.966 --> 00:11:00.316
And so for instance, if you want to save that image to disk,
you would use the url content.

00:11:00.633 --> 00:11:07.166
Also, in the previous example,
I could use the same code to insert all those assets directly into the list view.

00:11:07.616 --> 00:11:10.766
Let’s capture all the UIImage compatible assets now.

00:11:11.983 --> 00:11:20.166
For this, I can modify the code to look at all UIImage compatible assets instead of just the Photo assets.

00:11:21.166 --> 00:11:23.450
When inserting this into the list view,

00:11:23.583 --> 00:11:30.133
I will then construct an UIImage instead of an AsyncImage, and pass the image wrapped into the item.

00:11:30.816 --> 00:11:37.166
And that’s how you retrieve assets as UIImage independently of their specific type!

00:11:37.700 --> 00:11:41.066
I am going to demo this updated example now.

00:11:42.683 --> 00:11:45.149
Note that not only the photos were shown,

00:11:45.216 --> 00:11:49.500
but also the “Song” album art was converted into an image.

00:11:51.649 --> 00:11:56.450
You can check the Journaling Suggestions API documentation online to learn more!

00:11:57.966 --> 00:12:06.250
And now, I want to remind you how a person can control the content
that is generated by iOS when the picker is presented to them.

00:12:06.633 --> 00:12:12.383
You don’t control that, but it determines what type of content your app might receive.

00:12:13.116 --> 00:12:15.500
When the picker is invoked for the first time,

00:12:15.733 --> 00:12:18.983
either in Journal or in another app like yours,

00:12:19.149 --> 00:12:23.850
a flow will start to explain what Journaling Suggestions can do for people.

00:12:24.133 --> 00:12:28.583
You don’t have to do anything for it, this is done by iOS.

00:12:29.983 --> 00:12:31.233
During the flow,

00:12:31.233 --> 00:12:37.616
a person can chose the different types of events or data
that iOS will sense to produce suggestions  for them.

00:12:38.000 --> 00:12:41.049
They are configured through five switches:

00:12:41.116 --> 00:12:43.933
Activity for workout and exercise,

00:12:44.483 --> 00:12:47.233
Media for podcasts and music,

00:12:47.750 --> 00:12:50.616
Contacts for the people interacted with,

00:12:51.483 --> 00:12:54.950
Photos for library, memories, and shared photos,

00:12:55.183 --> 00:12:59.466
and Significant Locations for the places where they spent time at.

00:12:59.933 --> 00:13:04.516
Those switches will define what iOS will list for them in the picker.

00:13:06.183 --> 00:13:08.466
The configuration applies to all applications.

00:13:08.899 --> 00:13:13.850
And people can change this configuration whenever they want in the Settings App

00:13:13.850 --> 00:13:19.083
under Privacy and Security, and then, Journaling Suggestions.

00:13:22.583 --> 00:13:23.666
To wrap up,

00:13:23.666 --> 00:13:33.583
the new Journaling Suggestions API allows you to quickly build experiences that
help people reflect on the small moments and important events in their lives.

00:13:33.966 --> 00:13:36.766
It allows you to present the picker on top of your app,

00:13:37.233 --> 00:13:42.133
and retrieve assets and details
about the suggestion that a person chooses to add to your App.

00:13:42.500 --> 00:13:48.583
And it’s out of process, so it fully protects privacy in a very elegant way!

00:13:50.216 --> 00:13:51.783
Thanks for watching!

00:13:51.799 --> 00:13:58.466
We’re so excited about the new experiences you are going to build
with the Journaling Suggestions API!