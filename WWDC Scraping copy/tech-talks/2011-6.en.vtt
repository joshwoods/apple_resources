WEBVTT

00:00:23.600 --> 00:00:28.260
Hi, I'm Jake Behrens,
Apple's UI Frameworks Evangelist.

00:00:28.310 --> 00:00:31.220
Getting your application
architecture right is crucial

00:00:31.320 --> 00:00:34.180
to creating a great iOS app.

00:00:34.210 --> 00:00:38.430
Today, you're going to learn how to take
advantage of View Controller Containment

00:00:38.680 --> 00:00:43.620
on iOS to make the most of your code,
and to make it easier to extend

00:00:43.740 --> 00:00:46.500
your app's functionality later on.

00:00:46.530 --> 00:00:50.730
You're also going to learn how to use the
Appearance API to create a custom look

00:00:50.830 --> 00:00:54.500
and feel for your app quickly and easily.

00:00:54.610 --> 00:00:58.570
Finally, you're going to learn some tips
and tricks to help you prepare

00:00:58.870 --> 00:01:02.260
for extending your app for
international markets later on,

00:01:02.270 --> 00:01:06.660
without having to redo a lot of
the code that you've already done.

00:01:06.690 --> 00:01:08.720
So let's get started.

00:01:09.640 --> 00:01:12.310
When you have a new
idea for an application,

00:01:12.560 --> 00:01:16.700
you want to cement that
idea as quickly as possible.

00:01:16.770 --> 00:01:21.240
Typically, you start off with something
that looks a lot like this.

00:01:21.310 --> 00:01:26.890
You start off with a paper prototype,
or maybe just a scribble on a napkin.

00:01:27.120 --> 00:01:30.690
Then after some time,
you work with a graphic designer,

00:01:30.690 --> 00:01:33.830
or maybe you do some
graphic design yourself,

00:01:33.840 --> 00:01:38.960
and you create a mockup that starts
looking like a full application.

00:01:39.300 --> 00:01:42.740
Now you just need to actually
build the application.

00:01:42.860 --> 00:01:45.480
But how are you going
to do this effectively?

00:01:45.590 --> 00:01:48.240
What does your application's
architecture look like?

00:01:48.380 --> 00:01:53.080
How do you ensure that pieces of this
application are reusable later on?

00:01:53.240 --> 00:01:55.930
How are you going to get the
custom look and feel that

00:01:55.930 --> 00:01:57.890
your graphic designer wants?

00:01:58.190 --> 00:02:02.220
You can see that there's a wood
green texture in the navigation bar,

00:02:02.300 --> 00:02:06.780
a custom font with its own custom color,
and you also have a custom

00:02:06.950 --> 00:02:09.150
tint on the bar button item.

00:02:09.300 --> 00:02:13.960
How are you going to do this without
creating a lot of custom views?

00:02:14.010 --> 00:02:17.730
Your graphic designer also wants
a custom photo picker presented

00:02:18.050 --> 00:02:20.880
when the user taps on a photo.

00:02:20.940 --> 00:02:25.000
But this photo picker has
its own custom look and feel.

00:02:25.190 --> 00:02:29.540
Finally, once your application is on
the store and doing well,

00:02:29.560 --> 00:02:35.100
how do you move this into another market
and make localization easier up front?

00:02:35.210 --> 00:02:38.820
How do you make sure that the
work you do now isn't work that

00:02:38.820 --> 00:02:43.100
you're just going to have to do
all over again for each language?

00:02:43.340 --> 00:02:47.100
What are some things you can
do now to save time later?

00:02:47.100 --> 00:02:51.100
Let's start with
application architecture.

00:02:51.100 --> 00:02:55.010
On iOS, there are different types
of controller objects.

00:02:55.180 --> 00:02:59.100
Today, we're going to focus
on the View Controller.

00:02:59.100 --> 00:03:03.100
The View Controller is one of the
building blocks of creating applications.

00:03:03.100 --> 00:03:07.850
But more to the point,
the View Controller's primary purpose

00:03:07.850 --> 00:03:11.100
is to manage a hierarchy of views.

00:03:11.120 --> 00:03:15.100
These views are responsible
for drawing content,

00:03:15.100 --> 00:03:18.490
handling multi-touch events,
and managing the layout of

00:03:18.490 --> 00:03:20.100
any of their own sub-views.

00:03:20.100 --> 00:03:23.880
Now, the View Controller may also
connect to a model and present

00:03:23.880 --> 00:03:25.870
data to the user through views.

00:03:26.460 --> 00:03:28.440
Conversely,
it may take data that the user

00:03:28.450 --> 00:03:32.100
has entered into a text field
and push that down to the model.

00:03:32.100 --> 00:03:37.100
But its primary purpose is to
manage its hierarchy of views.

00:03:37.100 --> 00:03:41.100
A View Controller should
also be encapsulated.

00:03:41.220 --> 00:03:44.620
Its functionality should not
be dependent upon any other

00:03:44.680 --> 00:03:46.900
View Controller if at all possible.

00:03:47.110 --> 00:03:49.100
There are three main types
of View Controllers on iOS.

00:03:49.100 --> 00:03:54.350
There are System View Controllers,
and these are system-provided

00:03:54.350 --> 00:03:57.750
View Controllers that
are part of the iOS SDK.

00:03:58.180 --> 00:04:02.140
Then there are Content View Controllers,
and these are custom

00:04:02.140 --> 00:04:04.100
View Controllers that you create.

00:04:05.270 --> 00:04:07.640
Then there are Container Controllers.

00:04:07.660 --> 00:04:11.380
Container Controllers handle
layouts and application flow,

00:04:11.540 --> 00:04:14.280
and I'm going to focus on these today.

00:04:14.700 --> 00:04:16.560
First are System Controllers.

00:04:16.590 --> 00:04:19.360
These are view controllers
that we provide to you,

00:04:19.400 --> 00:04:22.600
such as the Tweet Sheet
and the Image Picker.

00:04:22.610 --> 00:04:27.600
Now, keep in mind that these really drive
home the point of encapsulation.

00:04:27.650 --> 00:04:30.840
All of these controllers can
be presented from virtually

00:04:30.840 --> 00:04:34.820
anywhere in your application,
and they work independently

00:04:34.930 --> 00:04:36.600
of your application.

00:04:36.600 --> 00:04:39.360
If you look at the Image Picker,
you get the navigation

00:04:39.360 --> 00:04:42.410
between photo albums,
the image previews,

00:04:42.730 --> 00:04:44.460
and the image thumbnails that scroll.

00:04:44.600 --> 00:04:47.370
This is all work that
you don't have to create.

00:04:47.600 --> 00:04:51.600
You don't have to write this code,
and we've provided you all of this

00:04:51.600 --> 00:04:55.720
within the Image Picker itself,
so that you can focus on the core

00:04:55.780 --> 00:04:58.600
functionality of your application.

00:05:00.070 --> 00:05:02.300
Then there are Content View Controllers.

00:05:02.460 --> 00:05:04.930
These are custom view
controllers that you create.

00:05:04.930 --> 00:05:09.200
These are typically a subclass
of UI View Controller or

00:05:09.200 --> 00:05:12.980
UI Table View Controller,
and these usually represent some

00:05:12.980 --> 00:05:19.220
encapsulated content and functionality
that is specific to your application.

00:05:20.230 --> 00:05:22.730
Then we have Container Controllers.

00:05:22.730 --> 00:05:26.330
Examples of these controllers
are the Navigation Controller,

00:05:26.330 --> 00:05:28.800
the Tab Bar Controller,
and with the introduction

00:05:28.800 --> 00:05:34.190
of the iPad and iOS 3.2,
we introduced the Split View Controller.

00:05:34.200 --> 00:05:38.350
These containers allow you to
present multiple view controllers

00:05:38.380 --> 00:05:42.710
on screen at the same time,
transition between view controllers,

00:05:42.760 --> 00:05:45.200
and define your application layout.

00:05:45.330 --> 00:05:49.180
Before iOS 5, you couldn't create your
own custom containers.

00:05:49.580 --> 00:05:51.200
But now you can.

00:05:52.610 --> 00:05:57.340
To start, let's look at a great example
of a container controller.

00:05:57.550 --> 00:06:00.660
Here is the interface
for Mail on the iPad.

00:06:00.800 --> 00:06:04.090
You can see on the left
there's this list of messages,

00:06:04.130 --> 00:06:08.500
and on the right there's the detail
of the currently selected message.

00:06:08.700 --> 00:06:11.650
Now, if you look at this head on,
it may look like there are

00:06:11.770 --> 00:06:13.420
just two view controllers.

00:06:13.720 --> 00:06:16.500
But if we break this apart,
we start to see that

00:06:16.500 --> 00:06:18.380
there's a lot more going on.

00:06:18.500 --> 00:06:23.410
So let's walk through how
this interface breaks down.

00:06:23.900 --> 00:07:46.900
[Transcript missing]

00:07:48.390 --> 00:07:52.200
Let's go over some of the basics
of what a Container Controller is.

00:07:53.170 --> 00:07:57.030
First, a Container is a
UIViewController subclass.

00:07:57.250 --> 00:08:01.790
It's just like a regular View Controller,
the only difference is that you can

00:08:01.930 --> 00:08:04.630
add and remove child View Controllers.

00:08:05.160 --> 00:08:08.940
Remember that since a Container
is just a regular View Controller,

00:08:09.160 --> 00:08:11.890
it can also manage its
own view hierarchy.

00:08:12.700 --> 00:08:15.060
You also get some things
for free with a Container,

00:08:15.350 --> 00:08:18.790
such as automatic appearance
and rotation method forwarding

00:08:18.790 --> 00:08:20.670
to the child View Controllers.

00:08:20.920 --> 00:08:24.240
You don't have to call ViewWillAppear,
ViewDidAppear,

00:08:24.410 --> 00:08:26.360
and so forth on the children.

00:08:26.400 --> 00:08:29.940
These are all forwarded by
the parent Container for you.

00:08:31.700 --> 00:08:34.300
So let's look at the application
that you're building.

00:08:34.440 --> 00:08:36.600
How are you going to break this up?

00:08:36.740 --> 00:08:40.700
Well, the system provided containers
don't really work well here.

00:08:40.780 --> 00:08:45.200
A tab bar controller doesn't really
work because you don't have tabs.

00:08:45.340 --> 00:08:49.340
And you don't want to use a navigation
controller because there isn't a full

00:08:49.340 --> 00:08:51.690
transition away from the main screen.

00:08:51.900 --> 00:08:56.280
Now, this is a bit of a crude example
since there is a navigation bar,

00:08:56.470 --> 00:09:00.390
but the reason why there is a navigation
bar is so that you can get the

00:09:00.390 --> 00:09:03.060
title and button placement for free.

00:09:03.300 --> 00:09:06.480
So first,
you're going to create a container,

00:09:06.480 --> 00:09:09.500
which is a Photo Container
View Controller.

00:09:09.630 --> 00:09:12.850
And this is going to be the root
view controller of your window.

00:09:13.030 --> 00:09:17.980
So its view will be used as
the content view of the window.

00:09:18.170 --> 00:09:22.500
Then, you're going to add four of
these photo view controllers,

00:09:22.530 --> 00:09:25.110
and these are just
segmented to be top left,

00:09:25.460 --> 00:09:28.940
top right, bottom left, and bottom right.

00:09:29.080 --> 00:09:32.040
And since a container is
a regular view controller,

00:09:32.120 --> 00:09:36.560
and can manage its own view hierarchy,
you can add the UI navigation bar

00:09:36.560 --> 00:09:39.600
to the container's view hierarchy.

00:09:40.560 --> 00:09:44.200
To look at this another way,
if you look at the hierarchy,

00:09:44.200 --> 00:09:48.260
you can see that the Photo Container
View Controller is the parent.

00:09:48.330 --> 00:09:50.840
It's the Container View Controller.

00:09:50.910 --> 00:09:55.190
Then, added as children to the container,
are each of these four

00:09:55.630 --> 00:09:59.420
Photo View Controller Content View Cont
rollers.

00:09:59.490 --> 00:10:02.970
If you get into a situation where
each of these children are needing

00:10:02.970 --> 00:10:06.700
to know information about each other,
you probably want to look at

00:10:06.700 --> 00:10:10.240
your architecture again because
something has gone wrong.

00:10:10.300 --> 00:10:13.940
Each of these should be encapsulated
pieces of functionality,

00:10:13.940 --> 00:10:15.820
as I mentioned earlier.

00:10:15.920 --> 00:10:19.420
Additionally,
you'll notice that the arrow is pointing

00:10:19.420 --> 00:10:21.780
down from the parent to the children.

00:10:21.850 --> 00:10:25.030
The parent sends messages down
to the child view controllers.

00:10:25.400 --> 00:10:29.860
However, usually the children don't
talk back to the parent.

00:10:29.940 --> 00:10:32.480
If you find that you need
two-way communication,

00:10:32.550 --> 00:10:37.200
this is a great opportunity to
use properties and delegates.

00:10:37.400 --> 00:10:40.940
Okay, so you've opened up Xcode,
and you've made the

00:10:40.940 --> 00:10:44.040
Photo Container View Controller,
and that's set as the

00:10:44.040 --> 00:10:46.400
Windows Root View Controller.

00:10:46.460 --> 00:10:51.580
Then you added in the navigation bar,
set its title, and added the bar button

00:10:51.580 --> 00:10:52.860
item on the right.

00:10:52.910 --> 00:10:56.560
Now you have something that looks
like the start of an application.

00:10:56.600 --> 00:10:59.820
You just need to add the
child view controllers.

00:10:59.860 --> 00:11:01.680
So how are you going to do that?

00:11:01.710 --> 00:11:06.060
Well, you need to do a little bit
of setup in your container.

00:11:06.430 --> 00:11:10.370
First, you're going to declare a
property for each of the child

00:11:10.370 --> 00:11:12.220
content view controllers.

00:11:12.340 --> 00:11:17.100
This is so that you can know if one of
the view controllers has been set or not.

00:11:17.170 --> 00:11:19.880
Then,
you're going to implement a custom setter

00:11:19.880 --> 00:11:22.540
method for each of these properties.

00:11:22.630 --> 00:11:26.540
This is where you're going to add
the child content view controllers.

00:11:26.600 --> 00:11:31.000
So let's take a look at what this
code looks like in the container.

00:11:31.830 --> 00:11:35.600
Here,
you see the ContainersViewDidLoad method.

00:11:35.800 --> 00:11:38.660
The first thing you need
to do is instantiate one of

00:11:38.660 --> 00:11:40.600
the PhotoViewControllers.

00:11:40.930 --> 00:11:44.040
Once you have that created,
you're going to set that new

00:11:44.040 --> 00:11:48.400
instance of a PhotoViewController
to be the top left ViewController.

00:11:48.600 --> 00:11:53.130
And since the PhotoViewController
is just a simple ViewController

00:11:53.460 --> 00:11:56.860
with a UIImageView,
you want to create a property for

00:11:57.180 --> 00:12:01.640
the ImageView's image so that you
can set the image of the ImageView to

00:12:01.880 --> 00:12:03.530
be whatever you want later.

00:12:03.810 --> 00:12:06.600
Now, you would write this
code four more times,

00:12:06.600 --> 00:12:09.600
one time for each of these segments.

00:12:09.930 --> 00:12:11.460
However, the code is the same.

00:12:11.600 --> 00:12:13.560
So I'm just going to
show you one example,

00:12:13.600 --> 00:12:18.600
and you can assume that the code
for the others is exactly the same.

00:12:18.600 --> 00:12:23.310
So next, let's take a look at that
Custom Setter method.

00:12:24.850 --> 00:12:28.530
The first thing you want to do is check
to see if the View Controller that

00:12:28.570 --> 00:12:33.900
has been passed in is the same as
the current top left View Controller.

00:12:34.030 --> 00:12:36.520
If it is the same,
you don't want to do anything.

00:12:36.930 --> 00:12:38.700
You just want to move on.

00:12:38.880 --> 00:12:41.700
But if they're different,
then you're going to set the top

00:12:41.800 --> 00:12:46.460
left View Controller to be this
newly passed in View Controller.

00:12:46.650 --> 00:12:49.230
And once you do that,
you're going to call

00:12:49.230 --> 00:12:51.260
Add Child View Controller.

00:12:51.420 --> 00:12:54.870
You're going to add the new
top left View Controller as

00:12:54.870 --> 00:12:56.780
a child to the container.

00:12:56.960 --> 00:13:01.990
This creates the controller hierarchy
and the parent-child relationship.

00:13:02.100 --> 00:14:02.900
[Transcript missing]

00:14:03.920 --> 00:14:06.920
So now, you've added the first
child view controller,

00:14:07.050 --> 00:14:10.480
and you can see that your application
is starting to look complete.

00:14:10.630 --> 00:14:13.400
You just need to write the
custom setter method for the

00:14:13.400 --> 00:14:18.520
other child view controllers,
and do it three more times.

00:14:18.670 --> 00:14:23.040
Now, if you stopped here with your code,
what happens if you want to remove

00:14:23.040 --> 00:14:25.720
one of these photo view controllers?

00:14:25.880 --> 00:14:28.920
What if you want to swap it out
with a different view controller?

00:14:29.120 --> 00:14:30.920
How are you going to do that?

00:14:31.070 --> 00:14:34.520
Well, let's take another look at
the custom setter method.

00:14:34.680 --> 00:14:38.750
You're still checking to see if the view
controller that's passed in is already

00:14:38.770 --> 00:14:41.720
the view controller set for that segment.

00:14:41.860 --> 00:14:46.260
If not, then now you're going to call
remove from super view on the

00:14:46.410 --> 00:14:50.680
photo view controller's view,
which is going to remove that view

00:14:50.680 --> 00:14:53.430
from the container's view hierarchy.

00:14:53.570 --> 00:14:57.800
Then you need to call remove
from parent view controller.

00:14:57.950 --> 00:15:00.880
You're going to call this on
the top left view controller,

00:15:00.880 --> 00:15:05.170
so you're removing that view controller
from the controller hierarchy.

00:15:05.200 --> 00:15:08.780
Once this is done,
you're going to set the newly

00:15:08.780 --> 00:15:12.600
passed in view controller to be
the top left view controller.

00:15:12.830 --> 00:15:17.050
And again, you're going to call add child
view controller passing in

00:15:17.110 --> 00:15:19.340
the top left view controller.

00:15:19.360 --> 00:15:24.800
Then you're going to set the photo
view controller's views frame to be

00:15:24.800 --> 00:15:27.170
where you want it to show up on screen.

00:15:27.200 --> 00:15:30.520
And then finally,
you're going to add the photo

00:15:30.520 --> 00:15:30.840
view controller's view to
the top left view controller.

00:15:30.840 --> 00:15:32.480
And then finally,
you're going to set the photo

00:15:32.480 --> 00:15:34.760
view controller's view to the
container's view hierarchy.

00:15:34.870 --> 00:15:39.950
So you've added it to both the controller
hierarchy and the view hierarchy.

00:15:40.100 --> 00:15:46.400
Adding and removing the child to and from
both hierarchies is extremely important.

00:15:46.510 --> 00:15:50.990
If you don't do both,
you can wind up in a bad state.

00:15:52.190 --> 00:15:55.330
So here is the container
and its view hierarchy,

00:15:55.470 --> 00:15:58.700
and a child and its view hierarchy.

00:15:58.760 --> 00:16:04.620
Now, if all you did was call AddSubView,
you can see that there's an issue.

00:16:04.680 --> 00:16:08.760
Now you have two view controllers
pointing to the same view,

00:16:08.840 --> 00:16:11.010
the child controller's view.

00:16:11.130 --> 00:16:15.610
This is an issue because appearance
and rotation methods may now be called

00:16:15.640 --> 00:16:18.760
multiple times on that child's view.

00:16:18.830 --> 00:16:21.990
This can be hard to debug
sometimes because you can

00:16:22.020 --> 00:16:24.980
see the content on screen,
but the controller

00:16:24.980 --> 00:16:26.800
hierarchy isn't correct.

00:16:26.860 --> 00:16:31.200
So you want to make sure that you're
doing both steps of this process.

00:16:31.360 --> 00:16:35.380
Here you have the same setup as before,
but this time you're calling

00:16:35.550 --> 00:16:38.890
AddChildViewController,
and adding the child to

00:16:38.920 --> 00:16:40.980
the controller hierarchy.

00:16:41.050 --> 00:16:45.240
This means that appearance and rotation
methods will come from the parent and

00:16:45.380 --> 00:16:47.760
flow through the child controller.

00:16:47.820 --> 00:16:48.760
Then you're calling
AddChildViewController,

00:16:48.850 --> 00:16:53.760
and adding the child's view to
the container's view hierarchy.

00:16:54.210 --> 00:16:55.480
This is good.

00:16:55.600 --> 00:16:58.940
Now the child's view will
only get the appearance and

00:16:59.000 --> 00:17:03.180
rotation methods called once,
and children, once added to a parent,

00:17:03.460 --> 00:17:06.840
should stay there unless
removed properly first.

00:17:06.970 --> 00:17:12.220
Be aware that you may run into
issues if you don't follow this rule.

00:17:12.920 --> 00:17:15.240
Here's another issue
that you could run into:

00:17:15.290 --> 00:17:18.640
an inconsistent hierarchy exception.

00:17:18.680 --> 00:17:22.890
This example is similar to the last one,
except in this situation,

00:17:22.890 --> 00:17:26.410
the Photo View Controller was
previously added as a child

00:17:26.820 --> 00:17:29.400
to a UI Navigation Controller.

00:17:29.460 --> 00:17:32.330
So now,
if you were to call AddSubView and

00:17:32.580 --> 00:17:37.960
add the Photo View Controller's view
to the Container's view hierarchy,

00:17:37.990 --> 00:17:42.760
you're going to get an hierarchy
inconsistency exception.

00:17:42.820 --> 00:17:45.990
This is because the
Photo View Controller already

00:17:45.990 --> 00:17:47.040
has a parent.

00:17:47.100 --> 00:17:52.040
So when you call AddSubView on its view,
the parent controller should be the

00:17:52.160 --> 00:17:54.480
Photo Container View Controller.

00:17:54.560 --> 00:17:58.000
But currently,
the Photo View Controller is still a

00:17:58.020 --> 00:18:00.680
child of the UI Navigation Controller.

00:18:00.750 --> 00:18:04.360
And since these don't match,
the controller chain is incorrect,

00:18:04.580 --> 00:18:07.320
and you'll receive this exception.

00:18:07.570 --> 00:18:12.000
In the console, this is the output that
you'll see for this situation.

00:18:12.090 --> 00:18:15.260
It may not seem helpful at first,
but it is.

00:18:15.340 --> 00:18:20.060
If we break it down to be more readable,
we can walk through it and find exactly

00:18:20.140 --> 00:18:22.470
where the problem is in our code.

00:18:22.810 --> 00:18:25.230
If we follow through it,
it's saying that the

00:18:25.230 --> 00:18:29.570
child view controller,
in this case the photo view controller,

00:18:29.570 --> 00:18:34.650
should have a parent view controller that
is a photo container view controller.

00:18:35.310 --> 00:18:39.030
However, in this case,
its actual parent is currently set

00:18:39.030 --> 00:18:41.700
to be a UI navigation controller.

00:18:41.920 --> 00:18:45.700
This means that somewhere in our code,
we've called addChildViewController,

00:18:45.700 --> 00:18:50.050
passing in a photo view controller,
and we've called it on the

00:18:50.050 --> 00:18:51.700
UI navigation controller.

00:18:51.720 --> 00:18:54.990
So you can look through your
code and find out where the

00:18:54.990 --> 00:18:56.680
issue is and correct it.

00:18:57.970 --> 00:19:00.740
So now your architecture
is set up correctly,

00:19:00.800 --> 00:19:03.080
and your application is looking great.

00:19:03.160 --> 00:19:06.140
But your graphic designer has
reminded you that you need to

00:19:06.140 --> 00:19:10.960
create the custom photo picker
for when a user taps on a photo.

00:19:11.110 --> 00:19:13.360
How are you going to do this?

00:19:13.590 --> 00:19:17.110
You used to have to do this modally,
but on iOS 5,

00:19:17.450 --> 00:19:20.470
we've made it so that you don't have to.

00:19:21.210 --> 00:19:25.530
First, you need to do some setup in
the Photo View Controller.

00:19:25.700 --> 00:19:28.970
You're going to add a Tap Gesture
Recognizer to each of the

00:19:29.110 --> 00:19:31.340
Photo View Controller's views.

00:19:31.430 --> 00:19:34.480
This makes it so that when
a user taps on a photo,

00:19:34.560 --> 00:19:36.340
you can fire a method.

00:19:36.410 --> 00:19:39.090
Naturally,
next you need to write a method that

00:19:39.190 --> 00:19:41.640
presents the Photo Picker Controller.

00:19:41.730 --> 00:19:44.260
So let's take a look at that method.

00:19:44.430 --> 00:19:47.600
In the PhotoViewController,
you've created a method

00:19:47.600 --> 00:19:49.500
called ShowPhotopicker.

00:19:49.690 --> 00:19:53.960
First, you need to instantiate
the PhotoPicker controller.

00:19:54.000 --> 00:19:59.540
Then, you're going to call
PresentViewControllerAnimatedCompletion.

00:19:59.570 --> 00:20:04.500
If you've used this API before,
you may notice that it has changed.

00:20:04.550 --> 00:20:06.920
We've removed the modal
part from the name,

00:20:07.000 --> 00:20:11.100
because you no longer have to
present View Controllers modally.

00:20:11.140 --> 00:20:14.280
We've also added a completion
handler where you can use a block

00:20:14.510 --> 00:20:19.590
to execute some code once the
View Controller has been presented.

00:20:19.990 --> 00:20:24.770
Again, if you stop there and tap a photo,
it comes up full screen.

00:20:24.960 --> 00:20:26.300
Why is that?

00:20:26.510 --> 00:20:30.900
Well, you need to do some additional
setup to get the effect you want.

00:20:31.130 --> 00:20:34.610
Let's look at the
Show Photo Picker method again.

00:20:35.030 --> 00:20:39.050
You need to set Defines
Presentation Context to Yes on

00:20:39.100 --> 00:20:40.980
the Photo View Controller.

00:20:41.210 --> 00:20:44.470
This makes the Photo View Controller the
current presentation

00:20:44.470 --> 00:20:46.420
context for the application.

00:20:46.650 --> 00:20:48.880
When the View Controller was
presented modally,

00:20:49.190 --> 00:20:53.200
that was because by default,
the Windows Root View Controller is

00:20:53.320 --> 00:20:55.940
the current presentation context.

00:20:56.090 --> 00:21:01.460
Now, we've specifically defined it
to be our Photo View Controller.

00:21:01.540 --> 00:21:04.670
Next,
you want to set the modal presentation

00:21:04.670 --> 00:21:10.180
style of the Photo Picker to be the
currently defined presentation context.

00:21:10.180 --> 00:21:12.180
In this case, the Photo View Controller.

00:21:12.180 --> 00:21:15.210
As an aside,
we've also added a Presenting

00:21:15.320 --> 00:21:18.820
View Controller property that
you can access from within

00:21:18.820 --> 00:21:20.660
a presented View Controller.

00:21:20.870 --> 00:21:24.610
This saves you from having to look up
view hierarchies and try and figure

00:21:24.610 --> 00:21:27.290
out who presented the View Controller.

00:21:28.130 --> 00:21:29.360
So now you're done.

00:21:29.520 --> 00:21:32.900
Your architecture is set up,
and when you tap a photo,

00:21:32.980 --> 00:21:37.600
you get your photo picker presented in
the way your graphic designer wanted.

00:21:37.760 --> 00:21:41.320
The other great thing about presenting
your View Controllers the way you want,

00:21:41.400 --> 00:21:44.180
is that your users can still
interact with the content on

00:21:44.180 --> 00:21:48.540
the rest of the screen while a
View Controller is presented.

00:21:48.800 --> 00:21:50.300
So let's wrap up.

00:21:50.410 --> 00:21:55.200
On iOS 5, you can now create custom
container view controllers.

00:21:55.270 --> 00:21:58.470
These let you define your own
layouts and application flow.

00:21:58.700 --> 00:22:02.490
You also want to make sure that
your child content view controllers

00:22:02.490 --> 00:22:04.700
are encapsulated functionality.

00:22:04.700 --> 00:22:08.700
They should not be dependent
upon other children.

00:22:08.700 --> 00:22:11.460
You also want to make sure
that you're respecting the

00:22:11.610 --> 00:22:13.560
controller and view hierarchies.

00:22:13.690 --> 00:22:17.700
You've seen some of the issues
that you can run into if you don't.

00:22:17.700 --> 00:22:20.700
But you also know how to fix them now.

00:22:21.130 --> 00:22:24.820
Finally, we've made presenting view
controllers much easier,

00:22:24.950 --> 00:22:27.700
and we've given you more
flexibility to present view

00:22:27.700 --> 00:22:30.490
controllers the way you want.

00:22:31.290 --> 00:22:34.460
Next,
let's talk about interface customization,

00:22:34.460 --> 00:22:38.140
and how you get that custom look
and feel that your graphic designer

00:22:38.210 --> 00:22:40.200
created in your initial mockup.

00:22:40.200 --> 00:22:43.190
On the iPad,
the default look and feel is a

00:22:43.190 --> 00:22:46.030
combination of silver and gray tones.

00:22:46.240 --> 00:22:51.200
You can see that here in the navigation
bar and in the bar button item,

00:22:51.200 --> 00:22:54.110
and when you present your photo picker.

00:22:55.530 --> 00:22:58.940
But your graphic designer wants
this custom look and feel.

00:22:59.050 --> 00:23:01.410
In the past,
it's been a little bit tough to get

00:23:01.520 --> 00:23:03.870
this custom look and feel easily.

00:23:04.010 --> 00:23:07.380
You've had to create custom views
and do a lot of heavy lifting.

00:23:07.500 --> 00:23:11.520
And then every time the OS updates,
if we've changed anything internally,

00:23:11.610 --> 00:23:14.960
then you have to change
things on your end as well.

00:23:15.090 --> 00:23:19.280
Well, now you don't have to do that,
because we've introduced the

00:23:19.410 --> 00:23:22.180
new Appearance API on iOS 5.

00:23:22.670 --> 00:23:26.900
With the Appearance API on iOS 5,
we've added tint colors to

00:23:26.980 --> 00:23:29.040
almost every UI element.

00:23:29.190 --> 00:23:33.960
We've also added background images
to elements like the navigation bar,

00:23:34.160 --> 00:23:37.120
the tab bar, and the toolbar.

00:23:37.310 --> 00:23:40.820
So let's see how you can start
implementing the look and feel

00:23:40.820 --> 00:23:43.080
you want in your application.

00:23:43.810 --> 00:23:48.130
To get the navigation bar background,
you call setBackgroundImage for

00:23:48.130 --> 00:23:50.880
bar metrics on the navigation bar.

00:23:51.090 --> 00:23:54.630
Here, you're passing in a UI image
for the background image,

00:23:54.630 --> 00:23:59.300
and for the bar metrics,
you've passed in UIBarMetricsDefault.

00:23:59.460 --> 00:24:03.460
This is for portrait orientations
on the iPhone and iPod Touch,

00:24:03.530 --> 00:24:07.970
and all orientations for the iPad,
since the navigation bar doesn't

00:24:07.970 --> 00:24:10.890
change size with orientation changes.

00:24:11.010 --> 00:24:15.330
We've also added
UIBarMetricsLandscapePhone so that you

00:24:15.330 --> 00:24:20.660
can use this for landscape orientations
on the iPhone and iPod Touch.

00:24:20.740 --> 00:24:25.300
So now that you've set the background
image for that specific navigation bar,

00:24:25.420 --> 00:24:28.230
well, you don't want to have to do
this every time you have a

00:24:28.280 --> 00:24:30.420
navigation bar in your application.

00:24:30.500 --> 00:24:32.970
You just want to apply it to all of them.

00:24:33.110 --> 00:24:35.380
So how can you do that?

00:24:35.470 --> 00:24:39.220
On iOS 5,
we've not only added the Appearance API,

00:24:39.320 --> 00:24:41.700
but we've added an AppearanceProxy.

00:24:41.840 --> 00:24:44.290
And this is a way for you
to set these properties,

00:24:44.320 --> 00:24:47.950
such as the background image,
on your navigation bar throughout

00:24:47.950 --> 00:24:49.820
your entire application.

00:24:49.970 --> 00:24:53.940
You call the Appearance method
on the UINavigationBar class,

00:24:54.070 --> 00:24:58.580
and then set the background image for
the specific bar metrics that you want.

00:24:58.760 --> 00:25:04.210
This will now apply the appearance to all
navigation bars within your application.

00:25:04.540 --> 00:25:05.900
So this is great.

00:25:06.030 --> 00:25:08.250
Now that you have that
woodgrain background,

00:25:08.320 --> 00:25:11.440
you just need to change the
font for the title and the tint

00:25:11.440 --> 00:25:13.600
color for the bar button item.

00:25:13.770 --> 00:25:16.170
Let's look at how to do those.

00:25:16.480 --> 00:25:20.180
To set the title to a different font,
you're going to use the same appearance

00:25:20.180 --> 00:25:23.700
method on your UI navigation bar,
so it applies to all

00:25:23.700 --> 00:25:25.160
your navigation bars.

00:25:25.590 --> 00:25:30.160
And you'll use another method,
which is Set Title Text Attributes.

00:25:30.260 --> 00:25:32.640
This takes a dictionary
of text attributes,

00:25:32.820 --> 00:25:35.560
and you can change
things such as the font,

00:25:35.660 --> 00:25:40.240
the text color, the text shadow color,
and the shadow offset.

00:25:40.350 --> 00:25:47.000
On iOS 5, we have 58 built-in fonts,
so you can have a lot of variety.

00:25:47.060 --> 00:25:51.620
Then, for the bar button item,
you're going to call Set Tint Color,

00:25:51.620 --> 00:25:56.180
again using the appearance method
on the UI Bar Button Item class,

00:25:56.280 --> 00:26:00.680
so that this applies to all the bar
button items in your application.

00:26:00.820 --> 00:26:04.580
And this tint color has been set to
something that's going to mesh well

00:26:04.580 --> 00:26:07.020
with the navigation bar's background.

00:26:07.600 --> 00:26:08.330
Great.

00:26:08.450 --> 00:26:11.130
So now you have the navigation
bar looking the way you want.

00:26:11.450 --> 00:26:14.140
You have the custom font
with the color that you want,

00:26:14.280 --> 00:26:17.540
and you've set the tint
color to be what you want.

00:26:17.770 --> 00:26:21.140
But if you tap on the photo,
you see that the navigation bar for

00:26:21.140 --> 00:26:26.600
the photo picker looks identical to the
main navigation bar in the application.

00:26:26.710 --> 00:26:30.100
Your graphic designer reminds
you that you need to have this

00:26:30.130 --> 00:26:32.590
beautiful brown tint color instead.

00:26:32.600 --> 00:26:36.830
So how can you narrowly define
rules so that you can get this

00:26:36.890 --> 00:26:39.600
look and feel for the photo picker?

00:26:40.100 --> 00:27:45.400
[Transcript missing]

00:27:46.070 --> 00:27:50.060
For the title text, you're going to do
exactly the same thing.

00:27:50.220 --> 00:27:53.630
You're going to set up an
NSDictionary of text attributes,

00:27:53.630 --> 00:27:56.600
where you alter the font,
maybe you change the color,

00:27:56.790 --> 00:27:59.580
and then you call
AppearanceWhenContainedIn on

00:27:59.580 --> 00:28:02.540
the UINavigationBar class,
passing in the

00:28:02.710 --> 00:28:07.330
PhotoPickerViewController class,
and you set the text attributes to be

00:28:07.340 --> 00:28:10.100
the new dictionary that you've defined.

00:28:10.410 --> 00:28:14.070
Now, when you have a navigation
bar in a PhotoPicker,

00:28:14.150 --> 00:28:17.020
its text attributes are these values.

00:28:17.160 --> 00:28:20.260
So now if you tap on a photo,
you can see that the tint

00:28:20.400 --> 00:28:23.260
color is what you want,
and the font is what you want,

00:28:23.430 --> 00:28:26.540
but the background image is still
showing over the tint color.

00:28:26.890 --> 00:28:28.710
Why is that?

00:28:29.080 --> 00:28:31.290
Well,
if you look at the original code that set

00:28:31.290 --> 00:28:36.400
the background image for all navigation
bars to be this woodgrain background,

00:28:36.490 --> 00:28:39.980
you used the appearance
method on UI Navigation Bar.

00:28:40.310 --> 00:28:43.890
Meaning, all navigation bars now
have this background image.

00:28:43.990 --> 00:28:48.370
But when a navigation bar has
a background and a tint color,

00:28:48.680 --> 00:28:49.990
the background image wins.

00:28:50.000 --> 00:28:52.600
So in this case,
you need to use Appearance

00:28:52.600 --> 00:28:54.690
When Contained In,
passing in the

00:28:54.690 --> 00:28:59.680
PhotoPickerViewController class,
and set that background image to

00:28:59.680 --> 00:29:01.880
nil for the UI Navigation Bar class.

00:29:02.010 --> 00:29:06.000
This allows the beautiful
tint color to show through.

00:29:07.000 --> 00:29:10.400
So now when you tap on the photo,
you get the photo picker

00:29:10.520 --> 00:29:14.180
and it looks exactly the way
your graphic designer wants.

00:29:14.250 --> 00:29:15.250
Great.

00:29:15.380 --> 00:29:18.810
Now let's look at some of
the implementation details of

00:29:18.810 --> 00:29:21.810
the Appearance Proxy in API.

00:29:22.710 --> 00:29:26.990
Just before Layout Subviews is called,
we evaluate these containment rules

00:29:27.000 --> 00:29:29.440
that you've set up for your application.

00:29:29.570 --> 00:29:32.350
Then the specific
customizations are applied,

00:29:32.360 --> 00:29:36.840
and know that these updates are only
applied when the view hierarchy changes.

00:29:36.950 --> 00:29:39.410
So if you're looking to
do this in real time,

00:29:39.410 --> 00:29:42.430
it's not going to work the
way you may be expecting.

00:29:42.630 --> 00:29:46.680
Additionally,
instance methods have been tagged

00:29:46.810 --> 00:29:50.200
with a #define UIAppearanceSelector.

00:29:50.340 --> 00:29:53.570
This lets you look at the
headers for our classes,

00:29:53.590 --> 00:29:59.050
such as UIButton or UIBarButtonItem,
and you can see which methods have

00:29:59.050 --> 00:30:01.830
opted into the appearance proxy.

00:30:02.390 --> 00:30:05.300
We also leave your
custom appearances alone.

00:30:05.300 --> 00:30:09.590
If you've applied a specific
customization to a single instance of,

00:30:09.620 --> 00:30:15.300
say, a UI button, we won't overwrite your
specific customization.

00:30:15.450 --> 00:30:20.080
When we evaluate containment rules,
we will see your specific customization

00:30:20.080 --> 00:30:23.510
to a single instance of an object,
and we won't apply

00:30:23.670 --> 00:30:26.290
appearances to that instance.

00:30:27.320 --> 00:30:31.800
So, you can see,
we've made extensive additions to UIKit.

00:30:31.990 --> 00:30:35.510
And with the Appearance API,
you can really get the look and

00:30:35.510 --> 00:30:38.000
feel you want in your application.

00:30:38.130 --> 00:30:42.160
We've also set up containment rules
using Appearance When Contained In,

00:30:42.210 --> 00:30:46.970
so that you can granularly define a
custom look and feel for different

00:30:46.970 --> 00:30:48.600
areas of your application.

00:30:48.700 --> 00:30:53.140
We leave single instances alone if
you've customized them specifically.

00:30:53.300 --> 00:30:57.590
So anything that you create,
we're not just going to stomp on.

00:30:58.260 --> 00:31:01.200
Finally,
let's talk about some tips and tricks.

00:31:01.260 --> 00:31:05.030
Some things you can do now in your
application and development to

00:31:05.030 --> 00:31:08.910
ensure that you don't have to do
a lot of work over again later on.

00:31:09.200 --> 00:31:15.200
One of the things that we've added in
iOS 5 is image stretching and tiling.

00:31:15.250 --> 00:31:19.200
We did this for performance gains when
using images that you need to resize.

00:31:19.200 --> 00:31:23.760
You can create an image that's
resizable and set insets so that the

00:31:23.760 --> 00:31:29.200
image stretches or tiles appropriately
and still looks the way it should.

00:31:29.330 --> 00:31:33.200
This makes it a lot easier to do
localization within your applications.

00:31:33.200 --> 00:31:37.530
Here, if I set the insets
on this image to be 0,

00:31:37.530 --> 00:31:43.080
1, 0, 1, this goes from top, left,
to bottom, to right.

00:31:43.340 --> 00:31:47.200
So I haven't inset the top or bottom,
but I have set the left

00:31:47.330 --> 00:31:49.190
and right by one point.

00:31:49.200 --> 00:31:50.350
Right.

00:31:50.640 --> 00:31:53.520
You can see in this image that
I have rounded corners that

00:31:53.520 --> 00:31:56.500
I still want to look rounded,
but I want the rest of the

00:31:56.500 --> 00:32:00.800
image to resize appropriately,
and this ensures that the middle

00:32:00.800 --> 00:32:03.610
section is resized and stretched.

00:32:03.860 --> 00:32:07.780
You can also do this with a larger image,
and that middle section

00:32:07.780 --> 00:32:09.410
will be tiled across.

00:32:09.510 --> 00:32:12.080
So if you have an image with
a pattern in the middle,

00:32:12.150 --> 00:32:15.960
you can resize that,
and we will tile the center of

00:32:15.960 --> 00:32:20.690
the image and do the right thing
to make sure it looks correct.

00:32:21.230 --> 00:32:25.460
You can also do this as a 9-part
image by setting the insets to

00:32:25.460 --> 00:32:27.460
be a value all around the image.

00:32:27.730 --> 00:32:33.710
Here, my insets are 1, 1, 1, 1,
meaning that the center of this image

00:32:33.810 --> 00:32:37.860
is going to be stretched and tiled
appropriately so that it looks correct

00:32:38.270 --> 00:32:40.540
if I change the height and width.

00:32:40.660 --> 00:32:44.620
We've also done this to
animated images on iOS.

00:32:44.760 --> 00:32:47.100
You can take an image
that you've created,

00:32:47.230 --> 00:32:49.680
use a file name with a
number at the end of it,

00:32:49.830 --> 00:32:54.430
and we will iterate through those
files and you can set the duration

00:32:54.540 --> 00:32:58.690
and the insets so that you can resize
the image and it'll still animate.

00:32:58.690 --> 00:33:03.690
Another area where you can benefit
from image stretching and tiling

00:33:03.690 --> 00:33:06.050
is in your application bundle size.

00:33:06.050 --> 00:33:10.520
You may find the size increasing
over time if you've made your

00:33:10.520 --> 00:33:14.270
application universal and have
support for a few languages.

00:33:14.770 --> 00:33:18.390
You may be reaching the
cellular download size limit,

00:33:18.540 --> 00:33:24.000
but we're going to be stretching
and tiling images to make sure that

00:33:24.510 --> 00:33:29.340
you don't have more images than
needed for subtle size changes.

00:33:29.340 --> 00:33:33.340
Next, let's talk about the
keyboard on the iPad.

00:33:33.340 --> 00:33:38.180
The keyboard has traditionally been
docked at the bottom of the screen,

00:33:38.180 --> 00:33:41.510
but with iOS 5,
we've added the ability for users

00:33:41.510 --> 00:33:44.260
to undock and split the keyboard.

00:33:44.260 --> 00:33:48.460
This means that your content
needs to move and reflow according

00:33:48.610 --> 00:33:50.460
to where the keyboard is.

00:33:50.530 --> 00:33:53.940
You want to ensure that
specific UI elements are not

00:33:53.940 --> 00:33:55.780
obstructed by the keyboard.

00:33:55.780 --> 00:33:59.540
No matter where the keyboard is,
the user should still be able to

00:33:59.540 --> 00:34:01.570
interact with your application.

00:34:03.190 --> 00:34:06.600
We've added some keyboard
notifications to UI Window,

00:34:06.760 --> 00:34:10.030
and this is in the form of
Keyboard Will Change Frame and

00:34:10.180 --> 00:34:12.220
Keyboard Did Change Frame.

00:34:12.310 --> 00:34:16.480
So you can know where the frame of the
keyboard is and where it has been so

00:34:16.490 --> 00:34:20.870
that you can relay out your content
appropriately so that you're not

00:34:20.880 --> 00:34:24.210
obstructing key areas of your interface.

00:34:25.350 --> 00:34:28.980
Something else I've seen,
though not exclusive to iOS 5,

00:34:29.360 --> 00:34:32.800
is anchoring views to
the top of the keyboard.

00:34:32.940 --> 00:34:36.080
If you have a view anchored
to the top of the keyboard,

00:34:36.220 --> 00:34:39.440
you want to be sure that
you're doing this correctly.

00:34:39.520 --> 00:34:44.200
I've seen where the view's frame
is hard-coded to specific values,

00:34:44.330 --> 00:34:48.810
and this can hurt you later on if
we change the size of the keyboard.

00:34:49.810 --> 00:34:53.840
In this example, we see that iMessage is
doing the right thing.

00:34:54.050 --> 00:34:56.980
Maybe your user is using
the Japanese keyboard,

00:34:57.120 --> 00:35:00.920
which has an auto-correction bar
across the top of the keyboard.

00:35:01.080 --> 00:35:03.780
Suddenly,
the frame of the keyboard is different,

00:35:03.880 --> 00:35:08.340
and you need to account for this so
that the text field is still on screen.

00:35:08.450 --> 00:35:12.980
You want to ensure that the user
can interact with your content.

00:35:13.080 --> 00:35:15.620
So you want to make sure that
if you're anchoring a view

00:35:15.620 --> 00:35:18.260
to the top of the keyboard,
you want to observe

00:35:18.640 --> 00:35:23.220
the Keyboard Will Show,
Keyboard Did Show, Keyboard Will Hide,

00:35:23.340 --> 00:35:26.860
and Keyboard Did Hide notifications.

00:35:27.150 --> 00:35:30.560
These notifications will
give you user info keys,

00:35:30.610 --> 00:35:33.320
such as where the
keyboard's frame begins,

00:35:33.450 --> 00:35:36.680
where it ends,
what the animation duration time is,

00:35:37.010 --> 00:35:39.240
and what the animation curve is.

00:35:39.480 --> 00:35:43.520
When you observe these notifications,
you can fire a method that may

00:35:43.570 --> 00:35:47.400
have a UI view block animation,
or maybe you're doing some core

00:35:47.400 --> 00:35:49.560
animation to move your anchored view.

00:35:49.560 --> 00:35:54.010
But you can do this knowing where
the frame of the keyboard is.

00:35:54.280 --> 00:35:57.360
You can do this with the
same exact animation time,

00:35:57.480 --> 00:36:00.120
and in the same exact type of animation.

00:36:00.330 --> 00:36:04.520
Everything works together and
looks very fluid to the user.

00:36:05.720 --> 00:36:08.360
So now you have a
checklist of next steps.

00:36:08.520 --> 00:36:11.860
First, you want to check and see
that you're stretching and

00:36:11.860 --> 00:36:14.000
tiling images where you can.

00:36:14.140 --> 00:36:18.160
This keeps your bundle size low,
and we've also done many optimizations

00:36:18.160 --> 00:36:21.450
under the hood to make sure
that the performance is great.

00:36:21.600 --> 00:36:26.600
You also want to avoid putting text
in images when at all possible.

00:36:26.600 --> 00:36:31.570
In some situations you may have to,
but in others you want to make sure that

00:36:31.570 --> 00:36:35.580
you're drawing the text over the image
or using something like a UI button

00:36:35.630 --> 00:36:39.600
with a background image so that if
you're localizing for another language,

00:36:39.600 --> 00:36:42.570
what may be a certain length
in one language may be a

00:36:42.760 --> 00:36:44.590
different length in another.

00:36:44.600 --> 00:36:48.360
You want to ensure that you're
not having to create images for

00:36:48.360 --> 00:36:50.600
all these different languages.

00:36:50.600 --> 00:36:50.600
So now you have a
checklist of next steps.

00:36:50.600 --> 00:36:50.600
First, you want to check and see
that you're stretching and

00:36:50.600 --> 00:36:50.600
tiling images where you can.

00:36:50.600 --> 00:36:50.600
This keeps your bundle size low,
and we've also done many optimizations

00:36:50.600 --> 00:36:50.600
under the hood to make sure
that the performance is great.

00:36:50.600 --> 00:36:53.290
Finally,
you want to use the frames that the

00:36:53.290 --> 00:36:55.600
keyboard notifications give you.

00:36:55.600 --> 00:36:58.910
You want to ensure that you're
moving your content so that

00:36:59.060 --> 00:37:03.610
wherever the keyboard is,
the interaction with your application

00:37:03.860 --> 00:37:06.600
is not obstructed for the user.

00:37:07.290 --> 00:37:10.990
So today, you've learned how to use
View Controller Containment

00:37:11.280 --> 00:37:15.960
to create dynamic and robust
layouts for your applications.

00:37:16.100 --> 00:37:21.450
You've also seen how easy it is to use
the Appearance API to create a wonderful

00:37:21.530 --> 00:37:24.220
custom look and feel for your app.

00:37:24.340 --> 00:37:26.910
And going forward,
you can utilize the tips and

00:37:26.910 --> 00:37:31.080
tricks you've learned to be
proactive to make extending your

00:37:31.080 --> 00:37:33.600
app in the future even easier.

00:37:33.670 --> 00:37:37.770
I can't wait to see how you use
this information to make your new

00:37:38.040 --> 00:37:41.200
apps and existing apps even better.