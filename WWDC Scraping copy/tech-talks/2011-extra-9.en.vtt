WEBVTT

00:00:12.700 --> 00:00:16.240
Hi, I'm Bill Dudney,
the Application Frameworks Evangelist.

00:00:16.310 --> 00:00:19.140
Smooth animation and fast
graphics performance are key

00:00:19.160 --> 00:00:21.600
to creating a great app on iOS.

00:00:21.690 --> 00:00:23.920
In this video,
you're going to learn about compositing

00:00:23.920 --> 00:00:27.970
views with UIKit on iOS and see
some code that will help you achieve

00:00:28.020 --> 00:00:29.420
smooth animation in your apps.

00:00:29.610 --> 00:00:30.640
So let's get started.

00:00:31.330 --> 00:00:35.480
Animation is intrinsic to
good user experience on iOS.

00:00:35.520 --> 00:00:38.260
60 frames per second
is the gold standard.

00:00:38.370 --> 00:00:41.700
That's where the application feels
natural under the user's finger.

00:00:41.700 --> 00:00:44.580
It's where the elements on the
screen will move according to

00:00:44.580 --> 00:00:46.620
the way the user wants them to.

00:00:46.840 --> 00:00:53.620
But that doesn't give your
application much time.

00:00:53.620 --> 00:00:53.620
It's about 16.67 milliseconds per frame.

00:00:54.330 --> 00:00:56.680
And we have a lot of work to do.

00:00:56.900 --> 00:01:00.190
First, your application has to do all
the calculations that are required

00:01:00.480 --> 00:01:03.640
to get whatever data you're
displaying on the screen ready.

00:01:03.760 --> 00:01:06.510
You might be showing users
first names and last names.

00:01:06.530 --> 00:01:08.170
You might be showing icons.

00:01:08.320 --> 00:01:11.460
All of those calculations that
go into creating or coming

00:01:11.550 --> 00:01:16.200
up with which data should be
displayed have to be done first.

00:01:16.560 --> 00:01:19.940
Next, you have to lay out the content
and draw whatever data you've

00:01:19.940 --> 00:01:22.500
decided needs to be drawn.

00:01:22.610 --> 00:01:24.450
And then that frame has to be rendered.

00:01:24.810 --> 00:01:28.660
And that has to be done, again,
in 16 milliseconds.

00:01:29.010 --> 00:01:33.060
So the bottom line is your
application cannot waste any time.

00:01:33.290 --> 00:01:36.330
You want to prepare your content quickly.

00:01:36.390 --> 00:01:39.200
If you're using a table view,
it's so important that you

00:01:39.200 --> 00:01:40.930
reuse the table view cells.

00:01:41.140 --> 00:01:44.300
We still see examples of
people forgetting to do this.

00:01:44.370 --> 00:01:47.270
In 16 milliseconds,
you don't have time to be

00:01:47.270 --> 00:01:51.050
allocating a new table view
cell every time one's required.

00:01:51.770 --> 00:01:53.660
Also,
if you have more than one kind of table

00:01:53.790 --> 00:01:57.120
view cell that's going to be displayed,
make sure that you just use

00:01:57.120 --> 00:01:58.400
a different cell identifier.

00:01:58.400 --> 00:02:01.280
When you go to dequeue
your reusable cell,

00:02:01.420 --> 00:02:05.680
you can pass in different identifier
names and use a different identifier

00:02:05.680 --> 00:02:09.920
for each different type of cell
instead of trying to lay each cell out

00:02:09.920 --> 00:02:12.460
according to whatever the format is.

00:02:12.620 --> 00:02:15.790
You also want to make sure
that you render quickly.

00:02:16.230 --> 00:02:19.490
You want to simplify the
structure of your view hierarchy.

00:02:19.490 --> 00:02:22.900
So if you have eight views on
screen and you can get by with four,

00:02:22.900 --> 00:02:27.480
then please get by with four because
those extra views will add time

00:02:27.510 --> 00:02:30.080
to each of those render passes.

00:02:30.320 --> 00:02:33.600
Also, make sure to remove
unnecessary or invisible views.

00:02:33.810 --> 00:02:36.920
If you have views that are
off-screen or aren't adding visual

00:02:36.920 --> 00:02:40.970
content to the user interface,
they still will take time to render,

00:02:41.140 --> 00:02:42.930
so make sure that we get
rid of those as well.

00:02:42.940 --> 00:02:46.250
There are a lot of other things
that your application can do,

00:02:46.250 --> 00:02:49.080
though,
to make your performance even better.

00:02:49.080 --> 00:02:52.720
Before we go there, we need to talk about
how compositing works.

00:02:52.720 --> 00:02:55.650
This is a screenshot of a
sample application that I wrote

00:02:55.650 --> 00:02:57.360
to help explore these ideas.

00:02:57.800 --> 00:02:59.660
It's a typical table view application.

00:02:59.660 --> 00:03:01.990
On the left-hand side,
we see some image views.

00:03:01.990 --> 00:03:04.540
On the right, we see two text fields.

00:03:04.540 --> 00:03:08.440
And here we see one of these typical
table view cells blown out in a view

00:03:08.500 --> 00:03:11.040
where we can see exactly what's going on.

00:03:11.040 --> 00:03:14.610
We've got four views here,
the background view, the image view,

00:03:14.610 --> 00:03:16.500
and those two text field cells.

00:03:16.500 --> 00:03:20.120
Each one of those cells has
to be composited together and

00:03:20.120 --> 00:03:22.130
placed into the table view.

00:03:22.140 --> 00:03:25.260
And then each of the table view
cells have to be composited

00:03:25.260 --> 00:03:27.050
together into the table view.

00:03:27.700 --> 00:03:30.110
So here's another view
of what that looks like.

00:03:30.260 --> 00:03:35.460
On the top, we have the four views again,
and they composite together.

00:03:35.680 --> 00:03:40.480
And then each of those cells composite
together to make up the full table view.

00:03:40.710 --> 00:03:43.520
Now, we sort of slowed it
down here in Keynote,

00:03:43.790 --> 00:03:46.100
but every single frame
of your table view,

00:03:46.100 --> 00:03:49.770
as you flick it, has to go through that
same set of operations,

00:03:49.770 --> 00:03:52.570
compositing each frame of that animation.

00:03:52.830 --> 00:03:55.460
Let's look at the table view
cell in a little more detail.

00:03:55.740 --> 00:03:57.370
Again,
we have the image view off to the left.

00:03:57.500 --> 00:03:59.500
And the two text fields on the right.

00:03:59.500 --> 00:04:02.360
All three of these sub
views are marked as opaque.

00:04:02.670 --> 00:04:05.140
And if you remember back when
we saw the animation of the

00:04:05.140 --> 00:04:08.320
table view cell blown out,
there were some cutout areas in

00:04:08.320 --> 00:04:10.330
the underlying UITableView cell.

00:04:10.810 --> 00:04:13.760
Those cutouts don't have to be
written because we have these

00:04:13.760 --> 00:04:15.500
opaque views over the top.

00:04:15.500 --> 00:04:18.500
We'll look at that in more
detail in just a minute.

00:04:18.580 --> 00:04:22.000
Let's talk about what it
takes to generate a frame.

00:04:22.510 --> 00:04:26.180
Each frame of your application has
to go through these three steps.

00:04:26.320 --> 00:04:29.200
It has to read pixels,
it has to write pixels,

00:04:29.310 --> 00:04:31.800
and then it has to go through
at least one rendering pass.

00:04:31.800 --> 00:04:35.520
The important thing for you to keep
in mind is that only a certain number

00:04:35.520 --> 00:04:39.690
of operations can be achieved in that
magical 16 milliseconds that we have

00:04:39.690 --> 00:04:42.210
to achieve our 60 frames per second.

00:04:42.810 --> 00:04:47.040
Reading pixels requires that we take
every pixel from the source before

00:04:47.040 --> 00:04:49.420
we can write it to the destination.

00:04:49.420 --> 00:04:53.160
And if you try to read too many pixels,
your frame rate is going to suffer.

00:04:53.160 --> 00:04:54.360
So here's an example.

00:04:54.430 --> 00:04:57.840
We have this beautiful photo of
aspens with snow on the ground.

00:04:57.840 --> 00:05:00.100
It's about a million pixels.

00:05:00.100 --> 00:05:02.780
It's 1152 by 768.

00:05:02.950 --> 00:05:07.370
We want to draw that in an area
that's roughly 70,000 pixels

00:05:07.570 --> 00:05:10.400
at 240 pixels by 320 pixels.

00:05:12.670 --> 00:05:18.300
That's essentially wasting 925,000
pixels worth of read bandwidth.

00:05:18.300 --> 00:05:19.790
That's going to cost our frame rate.

00:05:19.930 --> 00:05:24.010
Writing pixels requires that
every pixel on the screen has

00:05:24.090 --> 00:05:26.240
to be written at least once.

00:05:26.240 --> 00:05:29.170
If your application tries
to write too many pixels,

00:05:29.170 --> 00:05:31.300
your frame rate again will suffer.

00:05:31.300 --> 00:05:34.380
So we're back to our tree picture here,
and we have the word trees

00:05:34.380 --> 00:05:35.810
over the top of our image.

00:05:35.820 --> 00:05:39.170
And there's opacity around
that text field cell.

00:05:39.740 --> 00:05:44.060
Every pixel that's inside that orange
boundary there has to be written twice.

00:05:44.060 --> 00:05:46.800
Once to write the image
that's underneath it,

00:05:47.040 --> 00:05:50.440
and then another time to do the math
to figure out how that transparent

00:05:50.440 --> 00:05:52.480
orange color blends with the background.

00:05:52.480 --> 00:05:56.760
The last thing your application has
to do is go through a rendering pass.

00:05:56.760 --> 00:06:00.260
Some content needs to be rendered
into a separate buffer before

00:06:00.260 --> 00:06:02.070
it can be rendered on screen.

00:06:02.080 --> 00:06:06.080
And if you switch buffers too often,
your frame rate will suffer.

00:06:07.730 --> 00:06:10.700
So we see here we've got this
image that has the beautiful

00:06:10.700 --> 00:06:12.860
rounded rectangle corners on it.

00:06:12.900 --> 00:06:14.340
It's a great effect.

00:06:14.440 --> 00:06:18.160
If you use masking though,
that's going to require that image to

00:06:18.230 --> 00:06:20.340
be rendered into an off-screen buffer.

00:06:20.470 --> 00:06:24.680
We'll look at some strategies to
make this fast in just a moment.

00:06:24.900 --> 00:06:27.890
In order to generate a shadow,
your application has to go

00:06:27.890 --> 00:06:30.000
through another rendering pass.

00:06:30.000 --> 00:06:32.400
To do that,
essentially what your application

00:06:32.420 --> 00:06:35.900
has to do is render that image as
a gray square or whatever color

00:06:35.900 --> 00:06:37.460
you have set as your shadow color.

00:06:37.460 --> 00:06:42.740
It then causes a blur around the
edge of the image that it drew.

00:06:42.740 --> 00:06:45.240
Then it has to place that
behind your image and composite

00:06:45.310 --> 00:06:46.760
those two things together.

00:06:46.760 --> 00:06:49.980
That gets done in that off-screen buffer,
which then gets composited

00:06:50.030 --> 00:06:51.320
into the final screen.

00:06:51.330 --> 00:06:54.560
So generating a frame has
a certain set of costs.

00:06:54.560 --> 00:06:57.020
How many source pixels are you reading?

00:06:57.020 --> 00:07:00.160
How many destination pixels
do you have to write out?

00:07:00.160 --> 00:07:02.010
And how many buffers do
you have to render to?

00:07:03.540 --> 00:07:07.280
The things to watch out for to see if
you're doing too much of any of those

00:07:07.280 --> 00:07:12.780
three things is large source images,
alpha blended content,

00:07:12.780 --> 00:07:14.780
and finally masking
and shadowing effects.

00:07:14.780 --> 00:07:17.200
So let's talk about some
strategies to get your

00:07:17.260 --> 00:07:19.350
application to write fewer pixels.

00:07:19.360 --> 00:07:21.700
So here's our trees image again.

00:07:21.700 --> 00:07:24.730
We have the trees text,
and remember each one of those

00:07:24.730 --> 00:07:28.840
pixels that's inside that trees
text field has to be written twice.

00:07:29.350 --> 00:07:32.430
If we go back to our table view cell,
we had each of those sub

00:07:32.430 --> 00:07:33.900
views marked as opaque.

00:07:33.980 --> 00:07:36.850
Since the underlying pixels
don't have to be written,

00:07:36.860 --> 00:07:39.900
each of those pixels only
have to be written out once.

00:07:39.900 --> 00:07:44.760
To reduce our writing bandwidth,
we need to go into instruments and check

00:07:44.890 --> 00:07:47.500
that color blended layers checkbox.

00:07:49.020 --> 00:07:51.370
When you do that,
you'll notice the UI of your iPhone

00:07:51.410 --> 00:07:54.500
switch to this green and red overlay.

00:07:54.700 --> 00:07:58.350
That shows you opaque regions
colored in green and transparent

00:07:58.350 --> 00:08:00.020
regions colored in red.

00:08:00.160 --> 00:08:03.600
The deeper the color of red,
the more blending is going on.

00:08:03.730 --> 00:08:05.600
Fixing the problem is easy.

00:08:05.700 --> 00:08:08.940
In Interface Builder,
you can just select your view and

00:08:09.060 --> 00:08:11.430
then you check that opaque checkbox.

00:08:11.570 --> 00:08:14.260
If you're building your
user interface via code,

00:08:14.430 --> 00:08:19.140
you'd simply set your opaque
property on your view to be yes,

00:08:19.140 --> 00:08:22.490
and that will cause that
view to be marked as opaque.

00:08:22.990 --> 00:08:27.050
So once we mark everything as opaque,
we see we have a pure green screen,

00:08:27.050 --> 00:08:29.490
except for the stuff that's showing
up on the bottom and on the top.

00:08:29.800 --> 00:08:32.740
Since those pieces aren't animated
when we're flicking our table view,

00:08:32.740 --> 00:08:36.480
they matter a lot less in terms
of the compositing performance.

00:08:36.480 --> 00:08:39.900
Here's an example that I put
together just to see how far

00:08:39.900 --> 00:08:41.760
I could tax the iPhone 4.

00:08:41.760 --> 00:08:44.200
We see here on the right,
there are several text fields

00:08:44.200 --> 00:08:45.860
that are marked as transparent.

00:08:45.860 --> 00:08:50.840
Even with all this transparency,
the iPhone 4 still isn't very taxed.

00:08:51.720 --> 00:08:56.600
But in your application, if you do this,
you'll be wasting power and CPU.

00:08:56.600 --> 00:08:59.940
So you need to go through and check
your application and make sure that

00:08:59.940 --> 00:09:03.340
all of the views that can be marked
as opaque are marked as opaque.

00:09:03.410 --> 00:09:05.500
And that's writing bandwidth.

00:09:05.500 --> 00:09:08.200
You want to minimize the
number of alpha-blended pixels.

00:09:08.200 --> 00:09:10.450
It's really easy to do that.

00:09:10.460 --> 00:09:12.860
You just set your Views
Opaque flag to Yes.

00:09:14.700 --> 00:09:16.620
Only use transparency
if you really need it.

00:09:16.820 --> 00:09:18.420
Now,
I don't want you to leave here thinking

00:09:18.420 --> 00:09:20.910
that you shouldn't use transparency,
because you should.

00:09:20.940 --> 00:09:23.370
It adds great effects
to your applications.

00:09:23.380 --> 00:09:26.330
But in places like we saw in
that table view cell where the

00:09:26.330 --> 00:09:29.060
background color is constant,
it's all white,

00:09:29.060 --> 00:09:31.910
we can easily mark our text field
cells as opaque and set their

00:09:32.070 --> 00:09:33.940
background color to white as well.

00:09:33.940 --> 00:09:37.940
The user won't be able to tell the
difference if we have opaque or not,

00:09:38.370 --> 00:09:41.220
other than the fact that
it will use more processor.

00:09:41.930 --> 00:09:44.880
So you want to go into Instruments
and use that Color Blended Layers

00:09:44.880 --> 00:09:48.760
checkbox to find out where you're using
transparency that you don't need to be.

00:09:50.630 --> 00:09:54.160
Also, make sure that your opaque images
don't have an alpha channel,

00:09:54.340 --> 00:09:57.140
because that alpha channel is what
Core Animation uses to determine

00:09:57.140 --> 00:10:00.700
whether or not it should do
alpha blending with your images.

00:10:00.820 --> 00:10:03.220
You can consider,
if performance is still an issue,

00:10:03.480 --> 00:10:09.620
cutting up your views so that you have
opaque regions and non-opaque regions.

00:10:09.750 --> 00:10:13.790
You would divide your view into
several subviews in order to do that.

00:10:14.910 --> 00:10:18.850
If your view hierarchy is still
too complex or needs transparency,

00:10:19.040 --> 00:10:21.410
consider drawing your
content with Quartz.

00:10:21.610 --> 00:10:24.780
Now let's talk about
reading fewer pixels.

00:10:25.150 --> 00:10:28.600
So each pixel that ends up
on the screen has to be red.

00:10:28.660 --> 00:10:31.480
And here again we have
our beautiful Aspen photo.

00:10:31.530 --> 00:10:36.920
And we're going to draw this roughly a
million pixels into this tiny little box.

00:10:36.970 --> 00:10:40.760
We talked about earlier how
that's wasting read bandwidth.

00:10:40.870 --> 00:10:43.280
There's also another issue of quality.

00:10:43.330 --> 00:10:45.640
You notice here on the left hand
side where we've gone through the

00:10:45.640 --> 00:10:49.980
default core animation scaling,
you see both in the image that's got the

00:10:49.980 --> 00:10:53.630
sign on it and the image with the Aspens,
that both of those images

00:10:53.630 --> 00:10:54.980
look rather pixelated.

00:10:55.010 --> 00:10:58.980
Now I have blown them up so that
I could emphasize that effect.

00:10:59.020 --> 00:11:00.980
But in your application,
your users will still

00:11:00.980 --> 00:11:01.860
be able to see that.

00:11:01.870 --> 00:11:05.480
It might not particularly
register what the issue is.

00:11:05.530 --> 00:11:08.010
On the right hand side,
we see those same images

00:11:08.430 --> 00:11:12.010
drawn with the same scale,
but using the quartz filtering instead

00:11:12.010 --> 00:11:13.820
of the default core animation one.

00:11:13.860 --> 00:11:17.620
And you notice that we can actually
tell that on that sign there's words.

00:11:17.670 --> 00:11:19.500
And the Aspens also look really nice too.

00:11:19.500 --> 00:11:20.710
They have a nice blurring effect.

00:11:20.800 --> 00:11:23.970
From the user's perspective,
that will look a lot more natural

00:11:23.970 --> 00:11:24.860
than the one that's pixelated.

00:11:24.860 --> 00:11:25.660
On the left.

00:11:25.990 --> 00:11:28.860
To identify your resized images,
you'll just go into

00:11:28.860 --> 00:11:32.340
Core Animation Instrument again,
in the Instruments application,

00:11:32.560 --> 00:11:34.850
and check this color misaligned images.

00:11:34.860 --> 00:11:37.930
When you do that,
you'll see all your scaled images,

00:11:37.930 --> 00:11:41.800
as we see here on the right,
colored with a yellow overlay.

00:11:41.860 --> 00:11:46.860
To fix that, we're going to use Quartz,
also known as Core Graphics.

00:11:47.320 --> 00:11:51.340
Core graphics sits underneath
UIKit along with core animation.

00:11:51.380 --> 00:11:55.740
UIKit has most of what you need to
be able to build an application.

00:11:55.780 --> 00:11:58.480
Core graphics though has a lot
of features that allow us to

00:11:58.480 --> 00:12:02.060
do things like scaling images,
which we need to do now.

00:12:02.150 --> 00:12:05.720
Here's some essential concepts that you
need to know about the way core graphics

00:12:06.140 --> 00:12:08.640
works to be able to draw these images.

00:12:08.690 --> 00:12:11.060
It's a full 2D graphic engine.

00:12:11.120 --> 00:12:12.800
It's based on the PDF spec.

00:12:12.840 --> 00:12:16.820
So just about anything you can
imagine being in a PDF can be drawn

00:12:16.920 --> 00:12:19.840
programmatically using core graphics.

00:12:19.890 --> 00:12:23.540
It's resolution and device independent,
meaning that we draw on

00:12:23.540 --> 00:12:26.540
a scale based on points,
not on pixels.

00:12:26.600 --> 00:12:30.160
Each of those units is a CG float,
so we can get very accurate in

00:12:30.170 --> 00:12:32.360
terms of where we want things to be.

00:12:32.460 --> 00:12:36.190
Keep in mind that a point
is not necessarily a pixel.

00:12:36.680 --> 00:12:40.680
The origin on our canvas is
in the bottom left on iOS.

00:12:40.750 --> 00:12:44.080
And that canvas is known as a CG context.

00:12:44.220 --> 00:12:47.200
That context is the destination
for all of our drawing.

00:12:48.200 --> 00:12:50.950
It holds a bunch of state like
the path that we want to draw,

00:12:51.080 --> 00:12:54.130
how we want to fill that path,
what the stroke looks like,

00:12:54.230 --> 00:12:57.690
what color we want to stroke it with,
even things like the dot pattern

00:12:57.860 --> 00:12:59.840
that we want to use for our lines.

00:12:59.880 --> 00:13:03.160
The number one take home point from
this is I want you to remember that

00:13:03.160 --> 00:13:04.750
UIKit has most of what you need.

00:13:04.750 --> 00:13:07.520
So you're going to be using
UIKit most of the time.

00:13:07.520 --> 00:13:10.540
When you need to drop
down into core graphics,

00:13:10.690 --> 00:13:14.320
you're going to probably want
to use UIKit objects to do the

00:13:14.320 --> 00:13:19.100
heavy lifting and then get the
CG objects from those UIKit objects.

00:13:19.100 --> 00:13:22.870
So for example, a UI color,
it has a method called CG color that

00:13:22.870 --> 00:13:27.260
will return the core graphics color
object that that UI color wraps.

00:13:27.260 --> 00:13:29.160
And the same thing with UI images.

00:13:29.160 --> 00:13:32.390
If you have an instance of UI image,
you can ask it for its CG image

00:13:32.390 --> 00:13:35.630
and that will return you the
underlying core graphics image that

00:13:35.630 --> 00:13:37.460
you need to draw in core graphics.

00:13:37.460 --> 00:13:41.750
In UIKit,
we use views to contain our drawing.

00:13:41.750 --> 00:13:47.580
Behind those sit layers and layers get
their content in any number of ways.

00:13:47.580 --> 00:13:51.300
The way we're going to use in our example
here is we're going to use delegation.

00:13:51.300 --> 00:13:55.640
So we're going to become the delegate
of a CA layer and draw our content

00:13:55.640 --> 00:13:58.380
with this method draw layer in context.

00:13:58.460 --> 00:14:02.700
We could also subclass the layer by
creating a subclass called my layer

00:14:02.700 --> 00:14:05.440
and implement the drawn context method.

00:14:05.440 --> 00:14:07.780
The context that's
passed into this method,

00:14:07.950 --> 00:14:10.850
draw layer in context,
is a CG context ref,

00:14:10.850 --> 00:14:13.440
that destination for all of our drawing.

00:14:13.440 --> 00:14:15.820
So here's the code that draws our image.

00:14:16.070 --> 00:14:19.110
Initially,
what we're going to do is load the image,

00:14:19.360 --> 00:14:20.440
potentially even in the background.

00:14:20.440 --> 00:14:21.820
So we have a method.

00:14:21.820 --> 00:14:23.440
It's abstract behind the scenes.

00:14:23.440 --> 00:14:25.440
It might be doing all
sorts of crazy stuff.

00:14:25.440 --> 00:14:27.720
We're just going to call that
method and say load the image.

00:14:27.720 --> 00:14:32.660
Assuming we got an image back,
we're going to calculate our new size

00:14:32.660 --> 00:14:35.310
that we want to draw that image at.

00:14:35.500 --> 00:16:37.400
[Transcript missing]

00:16:37.650 --> 00:16:40.440
You might be doing this
in your application.

00:16:40.570 --> 00:16:43.980
What's happening behind the scenes though
is that's forcing Core Animation to send

00:16:43.980 --> 00:16:47.800
your application to an off-screen buffer,
render it in that off-screen buffer,

00:16:47.800 --> 00:16:51.320
and then bring that back
into the compositing scene.

00:16:51.520 --> 00:16:55.140
To continue to get those beautiful
rounded corners but not pay the hit

00:16:55.140 --> 00:16:59.460
rendering our content off-screen,
we're going to go back to Core Graphics.

00:16:59.550 --> 00:17:03.100
In our Draw Layer in Context method,
we can take the rectangle that

00:17:03.220 --> 00:17:07.730
defines the bounds of our layer
and use the UI Bezier Path class to

00:17:07.730 --> 00:17:12.740
generate a path that has those rounded
corners for us and then set that

00:17:12.740 --> 00:17:16.300
as the clipping path for our context.

00:17:16.370 --> 00:17:20.640
Then when we tell that image, "Hey,
draw in this context," that the context

00:17:20.640 --> 00:17:24.310
will take care of rounding those
corners for us and it won't have to

00:17:24.310 --> 00:17:26.520
render it into an off-screen buffer.

00:17:26.730 --> 00:17:29.460
So we'll continue to get that
beautiful look with the rounded edges.

00:17:29.800 --> 00:17:31.700
But not pay that hit.

00:17:31.700 --> 00:17:37.210
You could also decompose your rounded
corners into separate views or layers.

00:17:37.820 --> 00:17:40.260
The point is to find a creative solution.

00:17:40.380 --> 00:17:42.930
Look at what's going on in instruments,
figure out where your

00:17:43.050 --> 00:17:46.680
performance problem lies,
and then look for ways to fix that.

00:17:46.810 --> 00:17:50.700
Drop shadows also cause us to go
into an off-screen rendering pass.

00:17:50.830 --> 00:17:54.040
We need a more efficient way
to generate those shadows.

00:17:54.150 --> 00:17:58.620
One approach is to use the shadow
path property on CA layers.

00:17:58.800 --> 00:18:02.400
That defines the opaque region
of the layer in which we want

00:18:02.400 --> 00:18:04.700
to use to generate the shadow.

00:18:04.740 --> 00:18:08.040
That also lets the compositor
cache the shadow bitmap in your

00:18:08.090 --> 00:18:12.700
application so it can use it again
for each frame that it has to render.

00:18:12.700 --> 00:18:14.690
And here's the code to do that.

00:18:15.030 --> 00:18:19.980
You set up your layer, you set the shadow
properties on your layer,

00:18:19.990 --> 00:18:24.650
and then you use a UI Bezier path and set
that as the shadow path on your layer.

00:18:24.650 --> 00:18:27.120
And that's all there is to it.

00:18:28.220 --> 00:18:31.550
So in summary,
you want to use this algorithm

00:18:31.550 --> 00:18:33.460
to optimize your application.

00:18:33.610 --> 00:18:36.860
While the frame rate is less than 60,
you want to first eliminate

00:18:36.860 --> 00:18:38.560
additional rendering passes.

00:18:38.910 --> 00:18:42.050
Remember the goal is to
have one rendering pass per

00:18:42.050 --> 00:18:44.100
frame for your application.

00:18:44.180 --> 00:18:47.630
Next, you want to reduce the read
bandwidth that you're using by using

00:18:47.630 --> 00:18:50.770
the appropriately sized images,
and where you can't,

00:18:50.770 --> 00:18:54.330
you want to use core graphics to
draw them at the smaller scale.

00:18:54.660 --> 00:18:57.430
You also want to reduce
your write bandwidth by

00:18:57.430 --> 00:18:59.600
eliminating unnecessary opacity.

00:18:59.690 --> 00:19:05.520
So use your knowledge about the system
to build a better performing application.

00:19:05.600 --> 00:19:07.720
Come up with creative solutions.

00:19:07.780 --> 00:19:10.580
Look at what's going on with
instruments to find out where

00:19:10.580 --> 00:19:14.120
your application is suffering,
and then apply the knowledge that

00:19:14.130 --> 00:19:18.840
you've gained from this talk to help you
come up with those creative solutions.

00:19:18.910 --> 00:19:21.480
Remember,
always use instruments to measure a

00:19:21.510 --> 00:19:25.560
baseline so that you can tell what
a great difference you've made.

00:19:26.630 --> 00:19:27.740
So there you have it.

00:19:27.890 --> 00:19:29.950
We've covered compositing on iOS.

00:19:30.250 --> 00:19:32.270
You've learned some tips
and tricks on how to achieve

00:19:32.270 --> 00:19:33.820
smooth animation in your apps.

00:19:33.930 --> 00:19:37.340
Now go fire up instruments and start
looking at the things we've talked about.

00:19:37.340 --> 00:19:40.220
I'm looking forward to seeing
how you'll apply this information

00:19:40.220 --> 00:19:41.660
to make your apps even better.