WEBVTT

00:00:22.520 --> 00:00:26.430
Hi, I'm Eryk Vershen,
Media Technologies Evangelist.

00:00:26.430 --> 00:00:30.660
AirPlay is an exciting new technology
that lets users stream your application's

00:00:30.660 --> 00:00:35.400
audio and video to high-definition
displays and high-fidelity audio systems.

00:00:35.400 --> 00:00:38.420
With AirPlay mirroring,
content can be displayed

00:00:38.420 --> 00:00:41.350
on a nearby Apple TV,
allowing everyone in the room

00:00:41.590 --> 00:00:43.320
to see what's on your screen.

00:00:43.400 --> 00:00:46.110
In this video,
you'll learn about AirPlay audio,

00:00:46.110 --> 00:00:50.290
AirPlay video, and AirPlay mirroring,
and how easy it is to support

00:00:50.290 --> 00:00:52.280
these in your application.

00:00:53.600 --> 00:00:57.640
Imagine you're listening to music
with your headphones on your iPhone,

00:00:57.640 --> 00:01:00.610
and you come home,
and with a few gestures on your phone,

00:01:01.010 --> 00:01:04.950
your music is now playing through
your home stereo speakers.

00:01:05.590 --> 00:01:09.100
Or imagine that you're watching
a movie on your iPad 2.

00:01:09.100 --> 00:01:13.040
You come into your office where
you have a TV with an Apple TV,

00:01:13.060 --> 00:01:16.120
and with a few gestures,
the movie is now playing on the

00:01:16.240 --> 00:01:18.490
TV for your colleagues to see.

00:01:19.110 --> 00:01:23.230
Or imagine that you're playing a game on
your iPad 2 and you come into your family

00:01:23.330 --> 00:01:26.000
room where you have a TV and an Apple TV.

00:01:26.080 --> 00:01:30.310
You make a few gestures on your
iPad and now the game state is on

00:01:30.310 --> 00:01:35.000
your big TV with a controller and
extra information on your iPad.

00:01:35.130 --> 00:01:36.820
Well, you don't have to imagine it.

00:01:37.080 --> 00:01:40.000
It's AirPlay and it's already here.

00:01:40.760 --> 00:01:45.400
There are three parts to AirPlay: audio,
video, and mirroring.

00:01:45.450 --> 00:01:47.700
I'll talk about each one in turn.

00:01:47.820 --> 00:01:50.660
Let's start with the AirPlay audio.

00:01:52.110 --> 00:01:55.680
AirPlay Audio delivers audio
to any AirPlay receiver:

00:01:55.820 --> 00:01:59.940
an Apple TV, an Airport Express,
or any of several

00:02:00.060 --> 00:02:02.550
third-party audio receivers.

00:02:02.930 --> 00:02:06.040
The user's experience with
AirPlay should be familiar.

00:02:06.150 --> 00:02:08.500
Your controls might look like this.

00:02:08.650 --> 00:02:11.400
When the user comes in range
of an AirPlay receiver,

00:02:11.490 --> 00:02:15.240
the route button will appear so
that the user can choose a route.

00:02:15.400 --> 00:02:18.370
When the user selects the route button,
they will get a menu

00:02:18.370 --> 00:02:19.730
of AirPlay receivers.

00:02:19.870 --> 00:02:22.660
Let's say they choose
the living room speakers.

00:02:22.810 --> 00:02:25.710
When they select, it will be checked.

00:02:25.860 --> 00:02:29.290
which will dismiss the menu,
the route button will now show blue

00:02:29.290 --> 00:02:33.180
to indicate that audio is being
routed away from the iOS device,

00:02:33.180 --> 00:02:36.670
and audio will be sent
to the AirPlay receiver.

00:02:37.720 --> 00:02:40.060
So how do you support AirPlay audio?

00:02:40.100 --> 00:02:42.080
Well, there are four steps.

00:02:42.090 --> 00:02:44.700
The first step is to
provide a route button.

00:02:44.820 --> 00:02:47.200
If you're using
MP Movie Player controller,

00:02:47.230 --> 00:02:49.560
then you get a route button as
part of the standard controls.

00:02:49.700 --> 00:02:52.470
Otherwise, you should use MP Volume View.

00:02:52.470 --> 00:02:55.690
This provides a volume
slider and a route picker.

00:02:55.690 --> 00:02:57.700
The system handles the details.

00:02:57.700 --> 00:03:01.700
It detects the presence of
AirPlay receivers and presents the list.

00:03:01.700 --> 00:03:04.900
You can't synthesize this yourself
if you don't have access to

00:03:04.980 --> 00:03:06.610
a list of AirPlay receivers.

00:03:06.630 --> 00:03:08.660
Using MP Volume View is straightforward.

00:03:08.760 --> 00:03:13.700
You allocate and init an MP Volume View,
tell it to display the route button,

00:03:13.700 --> 00:03:16.700
and add the view to your view hierarchy.

00:03:16.700 --> 00:03:20.700
The route button is visible by default,
so you don't have to set it.

00:03:20.900 --> 00:03:22.990
You can also not show the volume slider.

00:03:23.150 --> 00:03:26.030
Simply set "shows volume
slider" to "no." Now,

00:03:26.030 --> 00:03:29.610
some developers have asked about
not showing a route button.

00:03:29.710 --> 00:03:30.700
That's not a good idea.

00:03:30.700 --> 00:03:33.990
Any other app can change
the route behind your back,

00:03:33.990 --> 00:03:37.700
so all you're doing is making
things hard for your user.

00:03:39.170 --> 00:03:43.570
The second thing you need to do
is handle remote control events.

00:03:43.740 --> 00:03:45.860
There are a number of
remote control events.

00:03:45.970 --> 00:03:49.900
For example,
Toggle Play/Pause from the headphones,

00:03:49.900 --> 00:03:55.100
or Next Track from the lock screen,
or any of this list of events.

00:03:55.170 --> 00:03:58.420
Most of these can be delivered
from the headphones using

00:03:58.460 --> 00:04:00.280
double and triple clicks.

00:04:00.660 --> 00:04:03.350
As I've already mentioned,
you can get remote control

00:04:03.500 --> 00:04:06.620
events from headphones and
via the lock screen controls.

00:04:06.820 --> 00:04:11.120
They also come from the multitasking bar,
from AirPlay devices,

00:04:11.320 --> 00:04:15.280
from Bluetooth devices,
and from MFI accessories.

00:04:15.380 --> 00:04:17.960
With so many ways of control,
it's very clear that you

00:04:17.990 --> 00:04:19.590
should support remote control.

00:04:21.250 --> 00:04:24.260
Handling remote control is not difficult.

00:04:24.420 --> 00:04:28.510
First your view must implement
can become first responder.

00:04:28.710 --> 00:04:33.020
Next, when your view appears,
you must tell the application object

00:04:33.110 --> 00:04:37.940
that you want to receive remote control
events and become first responder.

00:04:38.450 --> 00:04:42.000
While you are first responder,
events will come into your remote

00:04:42.000 --> 00:04:44.300
control received with event method.

00:04:44.300 --> 00:04:47.850
You need to make sure that it is a
remote control event and then look at

00:04:47.850 --> 00:04:50.240
the subtype to determine the exact event.

00:04:50.330 --> 00:04:54.410
If you implement nothing else,
you should implement toggle play pause.

00:04:54.520 --> 00:04:56.300
This is the most common event.

00:04:56.300 --> 00:04:59.950
When your view goes away,
you must be a good citizen by telling

00:04:59.950 --> 00:05:03.800
the application object that you no
longer want remote control events

00:05:04.180 --> 00:05:06.300
and resigning first responder.

00:05:06.300 --> 00:05:10.150
The third thing you need to do
is provide now playing info.

00:05:10.900 --> 00:05:15.300
Imagine the user is sending audio
from your app to the Apple TV.

00:05:15.300 --> 00:05:18.730
If you do not provide now playing info,
then the user will see

00:05:18.730 --> 00:05:21.030
something like this,
that is nothing.

00:05:21.680 --> 00:05:24.300
Instead,
they should see something like this,

00:05:24.300 --> 00:05:27.300
artwork, title, album, and so on.

00:05:27.440 --> 00:05:30.300
You make this possible
with a now playing info.

00:05:30.320 --> 00:05:35.300
Now playing info is also provided on the
lock screen and in the multitasking bar.

00:05:35.300 --> 00:05:36.300
are.

00:05:37.410 --> 00:05:42.290
To set Now Playing Info, you use the
MPNowPlayingInfoCenter object.

00:05:42.290 --> 00:05:45.900
It's a singleton object that you
use to communicate with a system.

00:05:46.000 --> 00:05:48.780
It's not tied to any particular
way of delivering media.

00:05:49.000 --> 00:05:54.210
It works with MPMoviePlayerController,
AVPlayer, AudioCue, AudioUnits,

00:05:54.210 --> 00:05:55.080
and so on.

00:05:55.250 --> 00:05:58.300
It's another reason to
support remote control events.

00:05:58.370 --> 00:06:02.300
The information is only used if your
app is receiving remote control events.

00:06:03.300 --> 00:06:05.380
To support this,
you need to get together the

00:06:05.390 --> 00:06:08.200
metadata about your audio,
and you want to provide as

00:06:08.550 --> 00:06:10.300
much metadata as you can.

00:06:10.300 --> 00:06:13.290
To pass it,
all you do is create an NSDictionary.

00:06:13.290 --> 00:06:18.890
The keys identify artist, title, artwork,
and so on.

00:06:19.570 --> 00:06:23.880
Then you ask the MP Now Playing Info
Center for the default center object

00:06:24.030 --> 00:06:28.400
and simply assign your dictionary as the
value of the Now Playing Info property.

00:06:28.510 --> 00:06:32.500
You should, of course,
change this each time the song changes.

00:06:32.820 --> 00:06:38.500
Here's a list of the available metadata:
title, artist, artwork, genre, and so on.

00:06:38.500 --> 00:06:40.410
I want to mention elapsed
playback time in particular.

00:06:40.490 --> 00:06:43.460
You don't need to repeatedly set this.

00:06:43.460 --> 00:06:46.850
From the time and playback rate,
the system knows how

00:06:46.860 --> 00:06:48.500
to update this value.

00:06:48.690 --> 00:06:52.320
You should reset it only when you've
done a seek to some other point in

00:06:52.320 --> 00:06:54.500
the media or when the song changes.

00:06:54.710 --> 00:06:57.500
The system controls how
your info is displayed.

00:06:57.660 --> 00:06:59.500
You have no control over the formatting.

00:06:59.500 --> 00:07:03.550
The information is also available
to Bluetooth accessories via the

00:07:03.550 --> 00:07:07.500
Audio/Video Remote Control Protocol and
to MFI accessories.

00:07:07.500 --> 00:07:11.280
The fourth step is to support
background playback if it

00:07:11.280 --> 00:07:13.490
makes any sense for your app.

00:07:14.060 --> 00:07:17.200
If the primary thing your
application does is play audio,

00:07:17.220 --> 00:07:21.000
then users expect that audio to
continue to play in the background.

00:07:21.000 --> 00:07:26.000
And in iOS 5.0, your app goes into the
background when the screen locks.

00:07:26.240 --> 00:07:28.900
There are two main things you have
to do to support background playback.

00:07:29.010 --> 00:07:33.820
You need to add the AppPlaysAudio
item to the required background

00:07:33.820 --> 00:07:36.000
modes in your info.p list.

00:07:36.000 --> 00:07:38.970
And you need to set your
audio session to playback.

00:07:39.000 --> 00:07:41.000
If you are unfamiliar
with audio sessions,

00:07:41.000 --> 00:07:45.790
you should watch the
presentation from WWDC 2011

00:07:45.790 --> 00:07:49.000
Audio Session Management for iOS.

00:07:49.860 --> 00:07:53.000
So,
four steps to supporting AirPlay audio:

00:07:53.040 --> 00:07:56.300
adding a route button,
handling remote control events,

00:07:56.410 --> 00:08:00.670
providing now playing info,
and supporting background playback.

00:08:01.560 --> 00:08:04.330
Now we turn to AirPlay Video.

00:08:04.330 --> 00:08:08.280
When we use AirPlay Video,
we are sending a file to the Apple TV.

00:08:08.450 --> 00:08:10.370
But if that file is
coming from the network,

00:08:10.460 --> 00:08:13.080
the Apple TV may be
fetching it independently.

00:08:13.320 --> 00:08:17.150
However, even in that case,
the iOS device is still being made

00:08:17.150 --> 00:08:19.630
aware of the state of the playback.

00:08:20.030 --> 00:08:24.800
The user experience for AirPlay video is
very similar to that of AirPlay audio.

00:08:24.970 --> 00:08:28.500
The typical video playback
controls look like this.

00:08:28.620 --> 00:08:32.320
When an AirPlay receiver is in range,
then the system makes the

00:08:32.320 --> 00:08:36.410
route button visible so that
the user can choose a route.

00:08:36.800 --> 00:08:40.790
When the user clicks the route button,
they get a menu of possible destinations.

00:08:40.850 --> 00:08:45.460
Notice that now some of the selections
have a TV icon instead of a speaker icon.

00:08:45.600 --> 00:08:48.500
The user chooses one,
say the Family Room Apple TV.

00:08:48.700 --> 00:08:53.550
The new selection is now checked and
the user returns to the regular screen.

00:08:53.780 --> 00:08:56.920
The route button has turned blue
again to indicate that content

00:08:56.920 --> 00:08:58.700
is routed away from the device.

00:08:58.700 --> 00:09:01.850
And now the video no longer
shows on the screen because

00:09:01.850 --> 00:09:03.700
it's routed to the Apple TV.

00:09:04.400 --> 00:10:34.200
[Transcript missing]

00:10:34.410 --> 00:10:38.190
The fourth thing you need to do is
don't leave the user in the dark.

00:10:38.310 --> 00:10:40.500
What do I mean by that?

00:10:41.180 --> 00:10:45.030
When the user redirects video to AirPlay,
then the video stops playing in

00:10:45.030 --> 00:10:47.290
whatever view you had on screen.

00:10:47.400 --> 00:10:48.900
That is, it goes black.

00:10:49.030 --> 00:10:51.340
This isn't the best experience.

00:10:51.500 --> 00:10:54.070
What you need to do is give the
user a gentle hint that they've

00:10:54.070 --> 00:10:55.810
sent their movie off somewhere else.

00:10:56.110 --> 00:10:57.270
Let them know where to look.

00:10:57.460 --> 00:10:59.670
If you're using
MP Movie Player Controller to

00:10:59.670 --> 00:11:02.750
display your video,
then you don't need to do anything.

00:11:02.860 --> 00:11:05.350
The framework does it for you.

00:11:05.590 --> 00:11:09.500
But if you're using AVPlayer,
the framework can't do it for you.

00:11:09.610 --> 00:11:11.500
So you have to do it yourself.

00:11:11.750 --> 00:11:15.480
You do this by key value
observing the AirPlayVideoActive

00:11:15.660 --> 00:11:18.100
property on the AVPlayer object.

00:11:18.840 --> 00:11:21.430
When the observed value
for key path comes in,

00:11:21.720 --> 00:11:24.940
you should already be on the main queue,
at least if you did your add

00:11:24.940 --> 00:11:27.700
observer on the main thread,
which is what you should have done.

00:11:27.700 --> 00:11:31.420
You can then update your UI based
on the current value of the

00:11:31.420 --> 00:11:33.690
AirPlay video active property.

00:11:33.700 --> 00:11:37.700
So that's the four steps for
supporting AirPlay video.

00:11:37.910 --> 00:11:41.400
Provide a route button,
handle remote control events, turn it on,

00:11:41.400 --> 00:11:43.700
and don't leave the user in the dark.

00:11:43.700 --> 00:11:46.600
Last, let's turn to AirPlay mirroring.

00:11:46.690 --> 00:11:50.690
We've been able to support a second
display via a hard cable for a while,

00:11:50.690 --> 00:11:55.700
but AirPlay mirroring allows us
to do away with that cable and

00:11:55.710 --> 00:12:00.700
get a mirrored display wirelessly
from the iPad 2 or the iPhone 4S.

00:12:00.700 --> 00:12:03.670
But it's not just the home
screen that gets mirrored.

00:12:03.700 --> 00:12:07.330
Every app is mirrored.

00:12:07.560 --> 00:12:11.240
And apps don't have to restrict
themselves to mirroring.

00:12:11.370 --> 00:12:14.880
For example, in Keynote,
you can have the presentation on the

00:12:14.880 --> 00:12:17.500
TV and the presenter display on the iPad.

00:12:17.500 --> 00:12:20.360
But we can do the same thing with games.

00:12:20.540 --> 00:12:24.290
Put our game state on the TV and
keep the controls in our hand.

00:12:24.500 --> 00:12:27.410
And this need not be
restricted to racing games.

00:12:27.630 --> 00:12:30.500
A pass-around game could
do the same sort of thing.

00:12:30.500 --> 00:12:34.850
The user experience for mirroring is
similar to what we've seen before,

00:12:34.850 --> 00:12:38.290
except that now the user goes
into the multitasking bar.

00:12:38.530 --> 00:12:43.500
If an AirPlay device is in range,
then the route button will be displayed.

00:12:43.700 --> 00:12:48.580
The user sees a list of possible
devices and can select an Apple TV.

00:12:48.990 --> 00:12:52.100
When they do so,
they also get a mirroring button.

00:12:52.240 --> 00:12:57.790
If the user selects that,
now when they click outside the menu,

00:12:57.970 --> 00:13:01.500
The route button will once again
turn blue to indicate that content is

00:13:01.500 --> 00:13:04.780
being routed away from the iOS device.

00:13:04.880 --> 00:13:10.120
And when they return to the home screen,
the status bar will be blue.

00:13:10.820 --> 00:13:15.690
to remind them that content is redirected
and there's also a small route icon

00:13:15.870 --> 00:13:18.600
on the right side of the status bar.

00:13:19.020 --> 00:13:22.670
AirPlay mirroring gets you a
wireless second display with

00:13:22.670 --> 00:13:25.140
an iPhone 4S or an iPad 2.

00:13:25.380 --> 00:13:27.940
When you connect either of
these devices via a cable,

00:13:27.940 --> 00:13:32.240
you also get mirroring,
provided you're using a digital adapter.

00:13:32.430 --> 00:13:38.240
With older devices, the iPhone 4, iPad,
and fourth generation iPod Touch,

00:13:38.390 --> 00:13:41.460
you get a second display
without mirroring.

00:13:41.650 --> 00:13:44.950
And on any device,
you get a non-mirrored second display

00:13:45.250 --> 00:13:50.700
when you're using an older analog cable,
such as Component or Composite.

00:13:51.930 --> 00:13:55.800
Once again, there are four steps to
supporting AirPlay mirroring.

00:13:55.980 --> 00:13:58.800
The first step is
detecting the other screen.

00:13:58.880 --> 00:14:01.730
In your application did
finish launching routine,

00:14:01.920 --> 00:14:03.800
you need to do three things.

00:14:03.800 --> 00:14:06.470
First of all,
you need to add an observer for the

00:14:06.470 --> 00:14:08.800
UI screen did connect notification.

00:14:08.800 --> 00:14:12.770
You need to add an observer
for the screen disconnect.

00:14:12.910 --> 00:14:15.530
And because you don't get any
notifications for screens that

00:14:15.680 --> 00:14:18.240
are present when you start up,
you need to also check

00:14:18.240 --> 00:14:19.800
your initial setup.

00:14:19.800 --> 00:14:23.760
Now notice that all three of these
call exactly the same method.

00:14:23.760 --> 00:14:25.800
Here's the method we call.

00:14:25.800 --> 00:14:29.800
In this method,
we first count the number of screens.

00:14:30.000 --> 00:14:34.800
Then, if there is exactly one,
we set up our views for a single screen.

00:14:34.800 --> 00:14:37.420
If there are exactly two,
we make a window,

00:14:37.500 --> 00:14:41.570
associate it with the second screen,
and set up the view properly.

00:14:41.790 --> 00:14:44.700
If we have more than two, we do nothing.

00:14:44.780 --> 00:14:47.730
Why did I write it this way?

00:14:47.820 --> 00:14:50.000
In this case,
there is a rare case where you can

00:14:50.000 --> 00:14:51.800
temporarily have three screens.

00:14:51.800 --> 00:14:55.430
The best thing you can do is
ignore the third screen's arrival

00:14:55.880 --> 00:14:59.800
and fix things when the system
drops you back to two screens.

00:14:59.800 --> 00:15:02.800
The second step is
choosing what goes where.

00:15:02.830 --> 00:15:06.800
You need to think seriously about
what you're putting on each screen.

00:15:06.860 --> 00:15:08.800
Where's the user's attention?

00:15:08.820 --> 00:15:09.800
Is there more than one user?

00:15:09.800 --> 00:15:11.800
Where are they each looking?

00:15:11.800 --> 00:15:12.800
What should they see?

00:15:12.800 --> 00:15:15.770
Also, performance might be an issue
if you have a 1080p display.

00:15:15.820 --> 00:15:21.800
It might be that your app can't handle
that much data at a decent frame rate.

00:15:23.220 --> 00:15:26.100
The third step is to manage orientation.

00:15:26.260 --> 00:15:29.630
You should already be doing this right,
which is implementing "Should

00:15:29.630 --> 00:15:34.410
auto-rotate to interface orientation".
If you do implement rotation yourself,

00:15:34.410 --> 00:15:38.100
you need to make sure you do not
apply it to the second screen.

00:15:38.180 --> 00:15:42.060
The fourth step is selecting
the screen mode or resolution.

00:15:42.080 --> 00:15:45.100
We have a number of ways
of connecting a display.

00:15:45.100 --> 00:15:49.100
We can do it from a number
of different iOS devices,

00:15:49.320 --> 00:15:53.100
and we can connect it
to various sizes of TV.

00:15:53.560 --> 00:16:06.980
Your resolution might be 720p, or 1080p,
or 1024x768, or 800x600, or 640x480,

00:16:06.980 --> 00:16:08.890
or even NTSC or PAL.

00:16:09.090 --> 00:16:13.460
How do you choose which mode,
which resolution to use?

00:16:14.500 --> 00:16:16.780
Use the preferred mode.

00:16:16.830 --> 00:16:20.860
The preferred mode is the optimal
resolution for the display.

00:16:21.110 --> 00:16:25.400
It has the best aspect ratio,
the best quality.

00:16:25.430 --> 00:16:29.040
It's determined by the system,
and it's chosen automatically,

00:16:29.120 --> 00:16:32.400
so you don't need to do anything
to get the preferred mode.

00:16:32.430 --> 00:16:35.480
It doesn't require a
hardware mode switch,

00:16:35.480 --> 00:16:38.890
so you avoid a screen flash,
you launch faster,

00:16:38.890 --> 00:16:41.400
and you don't use the TV scaler.

00:16:42.570 --> 00:16:45.550
Having said all that,
there are cases where you may

00:16:45.550 --> 00:16:49.120
want or need to use a mode
other than the preferred mode.

00:16:49.250 --> 00:16:51.070
Let's look at this.

00:16:51.360 --> 00:16:53.940
If you use the preferred mode,
this is good.

00:16:53.970 --> 00:16:56.380
Optimal quality and no mode switch.

00:16:56.530 --> 00:17:01.290
But you might not be able to achieve your
performance goals on a large display.

00:17:01.410 --> 00:17:05.690
So you might render at a lower
resolution and use layer scaling.

00:17:05.820 --> 00:17:09.880
You're still in the preferred mode,
but the layer scaling does take some

00:17:09.880 --> 00:17:12.610
time and may introduce artifacts.

00:17:12.850 --> 00:17:15.140
So you might choose a specific mode.

00:17:15.240 --> 00:17:18.220
If you do this,
you may still have a display

00:17:18.230 --> 00:17:22.020
that doesn't support the mode,
so you'll need to test a lot more,

00:17:22.020 --> 00:17:24.180
and in any case,
you'll have a mode switch,

00:17:24.320 --> 00:17:27.040
and you'll probably be going
through the TV's scaler.

00:17:27.050 --> 00:17:30.400
So those are the four steps to
supporting AirPlay mirroring:

00:17:30.470 --> 00:17:33.770
detect the other screen,
choose what goes where,

00:17:33.880 --> 00:17:37.560
manage orientation,
and select the screen mode.

00:17:38.000 --> 00:17:41.190
And those are the same
steps that you need to do to

00:17:41.190 --> 00:17:44.880
support any external screen,
whether AirPlay mirrored

00:17:44.880 --> 00:17:46.240
or via direct cable.

00:17:46.550 --> 00:17:50.520
Except, to support external screens,
there's actually a fifth step,

00:17:50.650 --> 00:17:52.900
which is handle overscan.

00:17:52.980 --> 00:17:55.110
So what's overscan?

00:17:55.550 --> 00:17:57.500
Let's take a look at a game image.

00:17:57.520 --> 00:18:01.500
Let's say we have various status
things we want to put around the edge,

00:18:01.500 --> 00:18:04.040
or your health and what not.

00:18:04.090 --> 00:18:08.100
With an overscan display,
that can look like this.

00:18:09.490 --> 00:18:11.320
Why is it chopping off
parts of the image?

00:18:11.400 --> 00:18:15.830
Well, early CRT TVs had trouble being
consistent about scanning and

00:18:15.990 --> 00:18:18.680
they could chop off images like
this due to hardware issues.

00:18:18.680 --> 00:18:22.950
TV production reacted by
defining a title safe area,

00:18:23.080 --> 00:18:24.920
which was the portion of your
screen that you could guarantee

00:18:24.920 --> 00:18:27.020
was going to be visible on any TV.

00:18:27.020 --> 00:18:31.510
So you can solve overscanning
by scaling your image so that it

00:18:31.510 --> 00:18:33.200
fits within the title safe area.

00:18:33.200 --> 00:18:37.950
But then you have black bars around the
edges because not all TVs need the most

00:18:37.950 --> 00:18:39.400
pessimistic amount of overscanning.

00:18:39.400 --> 00:18:43.940
Instead, what you want is for the image
to go to the edge of the screen,

00:18:43.940 --> 00:18:47.400
but not lose any of your
important information.

00:18:47.400 --> 00:18:51.400
So in iOS 5.0,
we added overscan compensation.

00:18:51.400 --> 00:18:55.720
This knows about the amount of overscan
needed with various devices and allows

00:18:55.860 --> 00:18:59.400
you three different ways of handling it:
scale, inset bounds,

00:18:59.630 --> 00:19:01.390
and inset application frame.

00:19:01.400 --> 00:19:05.390
Let's use a 720p display as an example.

00:19:05.400 --> 00:19:09.380
If the display doesn't have overscan,
then the compensation is not there.

00:19:09.410 --> 00:19:11.400
The option you set doesn't
make any difference.

00:19:11.400 --> 00:19:15.230
If it is overscanned,
then the first choice is scale.

00:19:15.230 --> 00:19:17.210
This is the default choice.

00:19:17.400 --> 00:19:21.280
You get a 720p frame buffer and
the system scales that buffer

00:19:21.360 --> 00:19:23.320
before sending it to the device.

00:19:23.400 --> 00:19:26.620
So you don't lose anything,
but you're paying a

00:19:26.620 --> 00:19:28.400
cost for that scaling.

00:19:29.310 --> 00:19:32.260
The second choice is Inset Bounds.

00:19:32.410 --> 00:19:34.750
Now this will give you an
oddly sized frame buffer,

00:19:34.970 --> 00:19:37.840
but all the pixels will be visible.

00:19:37.940 --> 00:19:41.200
Note the size I've mentioned
here is illustrative.

00:19:41.300 --> 00:19:44.960
You may get different sizes for different
devices because different devices

00:19:45.320 --> 00:19:47.300
have different amounts of overscan.

00:19:47.410 --> 00:19:51.480
Now this choice avoids a scaling,
but it may be problematic for your app to

00:19:51.490 --> 00:19:54.050
deal with these weird frame buffer sizes.

00:19:54.300 --> 00:19:59.360
The last choice, Inset Application Frame,
gives you a 720p frame buffer,

00:19:59.470 --> 00:20:03.860
but it sets the application frame
property to the title safe area.

00:20:03.980 --> 00:20:06.900
Now you can write all over
that 720p frame buffer,

00:20:07.010 --> 00:20:10.450
and you only need to pay attention to
the application frame when you want

00:20:10.450 --> 00:20:13.030
something to definitely be visible.

00:20:13.850 --> 00:20:19.470
So, five steps: detect the other screen,
choose what goes where,

00:20:19.610 --> 00:20:23.800
manage orientation, select screen mode,
and handle overscan.

00:20:24.080 --> 00:20:27.780
This supports any external screen,
whether connected via

00:20:27.780 --> 00:20:30.310
AirPlay mirroring or via a cable.

00:20:30.830 --> 00:20:31.620
So there you go.

00:20:31.760 --> 00:20:34.840
As you can see,
adding AirPlay to your application

00:20:34.840 --> 00:20:36.700
is very straightforward.

00:20:36.860 --> 00:20:39.140
People are really going to want it,
and it's a great way to

00:20:39.140 --> 00:20:41.150
differentiate your app from others.

00:20:41.200 --> 00:20:44.030
I can't wait to hear about
the cool things that you're

00:20:44.140 --> 00:20:45.700
planning to do with AirPlay.