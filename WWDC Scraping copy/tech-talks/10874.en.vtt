WEBVTT

00:00:00.400 --> 00:00:01.568
Simon Manning: Hi, I'm Simon,

00:00:01.568 --> 00:00:03.837
and I'm an engineer
on the CloudKit team.

00:00:03.837 --> 00:00:06.073
Today I'm going to demonstrate
how to use CloudKit

00:00:06.073 --> 00:00:10.410
to support sharing data
between users of an app.

00:00:10.410 --> 00:00:12.813
I'll start by introducing
our Sharing sample app,

00:00:12.813 --> 00:00:15.682
available on GitHub.

00:00:15.682 --> 00:00:18.051
Then I'll walk through
how to support creating shares

00:00:18.051 --> 00:00:20.754
and inviting other users
to participate in those shares

00:00:20.754 --> 00:00:23.357
in an app.

00:00:23.357 --> 00:00:25.058
I'll discuss how your app
can share

00:00:25.058 --> 00:00:29.930
and accept invitations on behalf
of participating users,

00:00:29.930 --> 00:00:33.300
how to fetch shared records,

00:00:33.300 --> 00:00:37.704
how your app can provide
a customized sharing experience,

00:00:37.704 --> 00:00:39.873
and lastly, the zone-based
sharing model

00:00:39.873 --> 00:00:42.175
available in CloudKit.

00:00:42.175 --> 00:00:45.646
First up,
the Sharing sample app.

00:00:45.646 --> 00:00:47.948
As a reminder,
CloudKit is a framework

00:00:47.948 --> 00:00:51.852
that gives your application
access to a database on iCloud.

00:00:51.852 --> 00:00:54.554
This is exposed in the API
as a CKContainer

00:00:54.554 --> 00:00:58.625
through which you can access
multiple CKDatabases.

00:00:58.625 --> 00:01:00.661
Each container
has one public database

00:01:00.661 --> 00:01:04.765
where all users can potentially
read and write records.

00:01:04.765 --> 00:01:06.967
If the device has a logged-in
iCloud account,

00:01:06.967 --> 00:01:09.636
your app also has access
to a private database

00:01:09.636 --> 00:01:12.506
which contains
that user's data.

00:01:12.506 --> 00:01:14.474
And if your app
supports sharing,

00:01:14.474 --> 00:01:17.177
then data which is shared
with the current iCloud user

00:01:17.177 --> 00:01:23.183
will be available to your app
in their shared CKDatabase.

00:01:23.183 --> 00:01:25.085
To demonstrate
both initiating shares

00:01:25.085 --> 00:01:27.020
from the record-owning user

00:01:27.020 --> 00:01:30.357
and accepting invitations
to a share as a participant,

00:01:30.357 --> 00:01:31.892
I'll be referring
to a sample app

00:01:31.892 --> 00:01:35.362
available on
the Apple GitHub account.

00:01:35.362 --> 00:01:38.532
Sharing is a minimal example
of a contacts app.

00:01:38.532 --> 00:01:40.567
It supports creating
new contact records

00:01:40.567 --> 00:01:42.836
in the user's private database,

00:01:42.836 --> 00:01:46.273
sharing individual contacts
with other users of the app,

00:01:46.273 --> 00:01:47.641
and displaying all contacts

00:01:47.641 --> 00:01:50.510
shared with the current user
from others.

00:01:50.510 --> 00:01:51.611
The Sharing repository

00:01:51.611 --> 00:01:54.915
contains an implementation
using Swift concurrency,

00:01:54.915 --> 00:01:57.351
as well as a completion
handler-based implementation,

00:01:57.351 --> 00:02:01.455
available on separate branches.

00:02:01.455 --> 00:02:04.458
To begin sharing, first create
a new contact record

00:02:04.458 --> 00:02:07.194
and save it to the owner's
private database.

00:02:07.194 --> 00:02:09.730
The addContact function
is called by Sharing's

00:02:09.730 --> 00:02:12.599
Add New Contact UI.

00:02:12.599 --> 00:02:16.336
It creates a new CKRecord
with a recordType of Contact

00:02:16.336 --> 00:02:19.439
and stores a name
and phone number.

00:02:19.439 --> 00:02:23.777
The record is then saved
to the private database.

00:02:23.777 --> 00:02:26.680
Sharing a contact record with
other users of the Sharing app

00:02:26.680 --> 00:02:30.150
begins by creating a share.

00:02:30.150 --> 00:02:33.086
Sharing in CloudKit relies
on a specialized kind of record

00:02:33.086 --> 00:02:35.188
called a CKShare.

00:02:35.188 --> 00:02:38.458
When your user wants to share
records with others,

00:02:38.458 --> 00:02:40.527
create a CKShare on their behalf

00:02:40.527 --> 00:02:43.397
and save it
to the private database.

00:02:43.397 --> 00:02:46.533
Because this user owns
all the records being shared,

00:02:46.533 --> 00:02:50.570
they're also the owner
of the share record itself.

00:02:50.570 --> 00:02:52.706
This share record
is the source of truth

00:02:52.706 --> 00:02:55.909
for what data is being shared,
who it's being shared with,

00:02:55.909 --> 00:03:00.747
and what permissions are
available to share participants.

00:03:00.747 --> 00:03:02.783
Share permissions are
how the owner of the share

00:03:02.783 --> 00:03:05.952
can control access
to the shared records.

00:03:05.952 --> 00:03:08.588
The publicPermission property
represents the permission level

00:03:08.588 --> 00:03:12.225
for any user
with a link to the share.

00:03:12.225 --> 00:03:17.497
By default, users with
just the URL have no access.

00:03:17.497 --> 00:03:19.933
Setting this property
to a more permissive value

00:03:19.933 --> 00:03:24.404
allows any user
with the share's URL to join.

00:03:24.404 --> 00:03:27.074
Each invited participant
also has a permission level

00:03:27.074 --> 00:03:29.810
determined by the share's owner.

00:03:29.810 --> 00:03:32.112
Participant objects
describe a specific user's

00:03:32.112 --> 00:03:35.482
participation in a share,
including the user's identity

00:03:35.482 --> 00:03:38.985
and their invitation
acceptance status.

00:03:38.985 --> 00:03:44.424
Permissions are set on each
participant object individually

00:03:44.424 --> 00:03:46.993
and each participant is added
to the participants array

00:03:46.993 --> 00:03:49.830
on the CKShare.

00:03:49.830 --> 00:03:53.066
To begin sharing records
from a user's private database,

00:03:53.066 --> 00:03:56.136
first determine the root record
of the share.

00:03:56.136 --> 00:03:58.138
The root record
and all its child records

00:03:58.138 --> 00:04:00.740
will be included in this share.

00:04:00.740 --> 00:04:03.577
Then, create the CKShare record

00:04:03.577 --> 00:04:06.279
and save both the root record
and CKShare

00:04:06.279 --> 00:04:10.350
to the current user's
private database.

00:04:10.350 --> 00:04:13.820
In Sharing, the createShare
function initializes a CKShare

00:04:13.820 --> 00:04:16.456
with the contact record
to be shared.

00:04:16.456 --> 00:04:18.358
The CKShare and root record

00:04:18.358 --> 00:04:20.827
are saved to the owner's
private database,

00:04:20.827 --> 00:04:23.463
and the CKShare
is returned back to the UI

00:04:23.463 --> 00:04:27.501
to start the invitation process.

00:04:27.501 --> 00:04:30.504
Both the CKShare and root record
must be saved together

00:04:30.504 --> 00:04:32.305
in the same operation.

00:04:32.305 --> 00:04:35.509
Saving only the CKShare
will generate an error,

00:04:35.509 --> 00:04:38.845
even if the root record
already exists in CloudKit.

00:04:38.845 --> 00:04:43.517
Sharing a root record
also shares its child records.

00:04:43.517 --> 00:04:45.552
Now that your app
is creating shares,

00:04:45.552 --> 00:04:48.788
I'll cover how you can configure
and send user invitations

00:04:48.788 --> 00:04:51.458
to participate in a share.

00:04:51.458 --> 00:04:54.961
The sample app uses a view
controller provided by UIKit

00:04:54.961 --> 00:04:58.198
named UICloudSharingController.

00:04:58.198 --> 00:05:00.100
Implementing this controller
in your app

00:05:00.100 --> 00:05:04.004
allows users to easily invite
participants to their CKShare,

00:05:04.004 --> 00:05:07.607
set up permissions,
view and manage participation,

00:05:07.607 --> 00:05:11.945
or stop sharing
records all together.

00:05:11.945 --> 00:05:13.680
Here's how
UICloudSharingController

00:05:13.680 --> 00:05:15.382
appears in the Sharing
sample app

00:05:15.382 --> 00:05:18.251
when sharing
a new contact record.

00:05:18.251 --> 00:05:21.421
Users can choose
how to send share invitations,

00:05:21.421 --> 00:05:22.822
and permissions
can be configured

00:05:22.822 --> 00:05:25.792
in the Share Options section.

00:05:25.792 --> 00:05:27.894
Implement the controller's
delegate protocol

00:05:27.894 --> 00:05:30.363
to provide additional
information about the share,

00:05:30.363 --> 00:05:35.168
as well as receive notifications
about sharing events and errors.

00:05:35.168 --> 00:05:37.103
In addition to the methods
described here,

00:05:37.103 --> 00:05:40.574
there are methods to configure
the item title, item type,

00:05:40.574 --> 00:05:45.612
and thumbnail image
to display on share invitations.

00:05:45.612 --> 00:05:48.281
Now that the owner of the share
has sent invitations to others,

00:05:48.281 --> 00:05:50.517
your app needs to process
and accept the share

00:05:50.517 --> 00:05:53.687
on behalf of the invited
participants.

00:05:53.687 --> 00:05:55.889
Enable the
CKSharingSupported boolean

00:05:55.889 --> 00:05:58.258
in your app's Info.plist.

00:05:58.258 --> 00:06:00.961
This lets the system know
that your app supports sharing,

00:06:00.961 --> 00:06:03.263
and should process
invitation URLs

00:06:03.263 --> 00:06:07.601
and call the relevant
delegate functions.

00:06:07.601 --> 00:06:09.803
When a share invitation
is opened and accepted,

00:06:09.803 --> 00:06:12.839
your app will receive
a CKShare.Metadata object

00:06:12.839 --> 00:06:15.108
through delegate method
callbacks.

00:06:15.108 --> 00:06:17.677
Your app uses this metadata
to inform CloudKit

00:06:17.677 --> 00:06:20.113
that the current user is
accepting and participating

00:06:20.113 --> 00:06:23.416
in this share through the accept
function on the container,

00:06:23.416 --> 00:06:28.388
or through a
CKAcceptSharesOperation.

00:06:28.388 --> 00:06:30.290
With an applicationDelegate
lifecycle,

00:06:30.290 --> 00:06:32.359
the system will launch your app
and call the

00:06:32.359 --> 00:06:35.762
userDidAcceptCloudKitShareWith:
shareMetadata

00:06:35.762 --> 00:06:38.231
delegate method.

00:06:38.231 --> 00:06:41.301
Initialize a CKContainer object
using the identifier

00:06:41.301 --> 00:06:44.971
provided in
the shareMetadata object.

00:06:44.971 --> 00:06:47.774
Then call accept
on the CKContainer,

00:06:47.774 --> 00:06:50.210
passing in the
shareMetadata object,

00:06:50.210 --> 00:06:55.749
to let CloudKit know the current
user has accepted the share.

00:06:55.749 --> 00:06:57.450
Now that your app
is sending invitations

00:06:57.450 --> 00:06:59.185
to share private records

00:06:59.185 --> 00:07:02.289
and processing and accepting
those invitations,

00:07:02.289 --> 00:07:05.492
I'll cover how your app can
fetch and modify shared records

00:07:05.492 --> 00:07:08.762
that users are participating in.

00:07:08.762 --> 00:07:10.930
Records shared
with the current iCloud user

00:07:10.930 --> 00:07:12.899
are available inside
the app container's

00:07:12.899 --> 00:07:15.735
sharedCloudDatabase.

00:07:15.735 --> 00:07:18.605
The same CloudKit APIs
for fetching, querying,

00:07:18.605 --> 00:07:22.042
and manipulating data inside
private and public databases

00:07:22.042 --> 00:07:25.779
can be used
with the shared database.

00:07:25.779 --> 00:07:28.148
In the sample app,
shared records are fetched

00:07:28.148 --> 00:07:30.950
in the fetchSharedContacts
function.

00:07:30.950 --> 00:07:33.086
It uses the recordZoneChanges
operation

00:07:33.086 --> 00:07:36.623
to progressively fetch
and process changes.

00:07:36.623 --> 00:07:39.125
Each time this operation
completes,

00:07:39.125 --> 00:07:41.561
it returns a moreComing
boolean property,

00:07:41.561 --> 00:07:46.066
representing whether there are
more changes to fetch.

00:07:46.066 --> 00:07:47.834
It also returns a changeToken,

00:07:47.834 --> 00:07:52.305
which is a pointer to a specific
change in the zone's history.

00:07:52.305 --> 00:07:54.874
You can use this changeToken
to only fetch changes

00:07:54.874 --> 00:07:57.711
that occur
after that point in time.

00:07:57.711 --> 00:07:58.978
For the first fetch,

00:07:58.978 --> 00:08:02.115
or to refetch all changes
in a zone's history,

00:08:02.115 --> 00:08:05.819
set the changeToken to nil.

00:08:05.819 --> 00:08:08.955
Managing active shares
depends on the current user.

00:08:08.955 --> 00:08:11.591
For owners of a share,
the share can be stopped

00:08:11.591 --> 00:08:13.426
by deleting the CKShare record

00:08:13.426 --> 00:08:16.062
from the owner's
private database.

00:08:16.062 --> 00:08:20.400
The owner can also delete
the shared root record entirely.

00:08:20.400 --> 00:08:23.903
The removeParticipant function
on the CKShare record object

00:08:23.903 --> 00:08:26.706
provides a way to remove
individual participants,

00:08:26.706 --> 00:08:29.876
which can be found
on the participants property.

00:08:29.876 --> 00:08:33.079
And lastly, the
UICloudSharingController UI

00:08:33.079 --> 00:08:34.447
makes it possible for owners

00:08:34.447 --> 00:08:38.151
to stop sharing
with all participants.

00:08:38.151 --> 00:08:39.853
For the participant user
of a share,

00:08:39.853 --> 00:08:43.390
participation can be stopped
by deleting the root CKRecord

00:08:43.390 --> 00:08:45.325
from the user's shared database,

00:08:45.325 --> 00:08:48.995
or using the
UICloudSharingController UI.

00:08:48.995 --> 00:08:51.264
Note that deleting
the root CKRecord

00:08:51.264 --> 00:08:53.066
from the user's shared database

00:08:53.066 --> 00:08:55.668
only stops participation
in the share --

00:08:55.668 --> 00:08:57.804
the original root record
would still exist

00:08:57.804 --> 00:09:01.408
in the owner's private database.

00:09:01.408 --> 00:09:04.544
While the Sharing sample app
uses UICloudSharingController

00:09:04.544 --> 00:09:07.313
to handle participant
lookup and invitation,

00:09:07.313 --> 00:09:09.416
you can also implement
this functionality

00:09:09.416 --> 00:09:12.952
with the CloudKit API and
build a custom user experience

00:09:12.952 --> 00:09:16.156
for both owners and participants
of a share.

00:09:16.156 --> 00:09:18.358
First, to search for
participants to invite

00:09:18.358 --> 00:09:19.692
to a CKShare,

00:09:19.692 --> 00:09:22.729
use the CKFetchShare
ParticipantsOperation

00:09:22.729 --> 00:09:27.200
or shareParticipants functions
on the relevant CKContainer.

00:09:27.200 --> 00:09:29.769
Phone number, email,
and user record IDs

00:09:29.769 --> 00:09:33.273
are supported as parameters.

00:09:33.273 --> 00:09:36.142
Next, set the specific
permission level

00:09:36.142 --> 00:09:37.710
for this participation,

00:09:37.710 --> 00:09:39.913
and add the participant
to the CKShare

00:09:39.913 --> 00:09:42.849
with the addParticipant
function.

00:09:42.849 --> 00:09:44.984
Always save
the modified CKShare

00:09:44.984 --> 00:09:47.787
back to the private database.

00:09:47.787 --> 00:09:50.590
The saved CKShare record
has a url property

00:09:50.590 --> 00:09:52.926
which can be sent
to invited participants

00:09:52.926 --> 00:09:55.128
to accept and process.

00:09:55.128 --> 00:09:57.330
An invitation URL
can be used to fetch

00:09:57.330 --> 00:10:01.401
the share's CKShare.Metadata
and confirm participation

00:10:01.401 --> 00:10:03.903
through the
accept(shareMetadata) function

00:10:03.903 --> 00:10:06.439
on the app's container.

00:10:06.439 --> 00:10:08.441
The Sharing app demonstrates
CloudKit sharing

00:10:08.441 --> 00:10:10.310
with a hierarchical
sharing model,

00:10:10.310 --> 00:10:13.079
where a single record is shared
as a root record,

00:10:13.079 --> 00:10:16.382
and any children of that record
are also shared.

00:10:16.382 --> 00:10:19.619
Zone sharing, a new model
introduced in iOS 15,

00:10:19.619 --> 00:10:24.524
allows entire zones of records
to be shared instead.

00:10:24.524 --> 00:10:25.725
When sharing a zone,

00:10:25.725 --> 00:10:28.261
all of the records
in the zone are shared,

00:10:28.261 --> 00:10:30.997
not just a single record's
hierarchy.

00:10:30.997 --> 00:10:34.667
Because zone sharing affects all
of the records in a record zone,

00:10:34.667 --> 00:10:36.469
this type of sharing
cannot coexist

00:10:36.469 --> 00:10:40.006
with hierarchical shares
in the same record zone.

00:10:40.006 --> 00:10:43.643
You can either have one or more
hierarchical shares in a zone,

00:10:43.643 --> 00:10:47.280
or a single zone-wide share.

00:10:47.280 --> 00:10:49.249
Zone sharing
and hierarchical sharing

00:10:49.249 --> 00:10:50.683
each have their benefits,

00:10:50.683 --> 00:10:54.454
and both should be utilized
depending on your use case.

00:10:54.454 --> 00:10:56.723
In the context
of the Sharing sample app,

00:10:56.723 --> 00:10:59.058
zone sharing could be useful
if groups of contacts

00:10:59.058 --> 00:11:02.061
were organized
in separate record zones.

00:11:02.061 --> 00:11:03.730
A zone share
could be used to share

00:11:03.730 --> 00:11:07.267
those groups of contacts
with other users.

00:11:07.267 --> 00:11:09.068
To learn more
about zone sharing,

00:11:09.068 --> 00:11:14.474
check out "What's new in
CloudKit" from WWDC21.

00:11:14.474 --> 00:11:16.509
To create a new zone-wide share,

00:11:16.509 --> 00:11:19.412
initialize it with
the custom record zone's ID

00:11:19.412 --> 00:11:23.049
to be shared and save it
to the private database.

00:11:23.049 --> 00:11:25.251
The process for accepting
share invitations

00:11:25.251 --> 00:11:27.387
and fetching records
from the shared database

00:11:27.387 --> 00:11:29.822
is the same as before.

00:11:29.822 --> 00:11:32.959
To determine if a share
is a zone-wide share,

00:11:32.959 --> 00:11:36.462
check the recordName property
of its recordID.

00:11:36.462 --> 00:11:39.732
If the value is
CKRecordNameZoneWideShare,

00:11:39.732 --> 00:11:42.702
the share is managing
a shared record zone;

00:11:42.702 --> 00:11:46.906
otherwise, it's managing
a shared record hierarchy.

00:11:46.906 --> 00:11:50.176
Now that you know how
to support sharing in your app,

00:11:50.176 --> 00:11:52.045
start creating CKShare records

00:11:52.045 --> 00:11:55.148
and allow users
to collaborate with others.

00:11:55.148 --> 00:11:57.183
Get a jump start
on your sharing UI

00:11:57.183 --> 00:11:59.152
using UICloudSharingController,

00:11:59.152 --> 00:12:02.889
or build a custom implementation
to fit your needs.

00:12:02.889 --> 00:12:05.358
Use familiar
fetch and modify API

00:12:05.358 --> 00:12:08.962
to access shared records
from the shared cloud database.

00:12:08.962 --> 00:12:11.898
And start exploring new
sharing use cases in your app

00:12:11.898 --> 00:12:15.501
that could benefit
from implementing zone sharing.

00:12:15.501 --> 00:12:17.837
Thanks for watching!