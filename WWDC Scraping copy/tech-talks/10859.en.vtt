WEBVTT

00:00:00.870 --> 00:00:04.300
Hello, I’m Luc Semeria from the
GPU software team at Apple.

00:00:04.310 --> 00:00:07.270
In this video,
I’m going to introduce you to Metal for

00:00:07.270 --> 00:00:11.750
the Apple M1 chip and show how you
can make your Metal applications

00:00:11.750 --> 00:00:14.200
shine on the new Apple silicon Macs.

00:00:14.750 --> 00:00:18.670
First, we will dive into the features
that Apple M1 supports

00:00:18.700 --> 00:00:20.330
for Metal apps on the Mac.

00:00:20.480 --> 00:00:23.700
And we will cover some of the key
improvements we’ve made to increase

00:00:23.700 --> 00:00:28.520
graphics and compute performance for
Pro applications and Metal games.

00:00:28.750 --> 00:00:32.280
Then, we will highlight a few key
Metal features that you may now

00:00:32.280 --> 00:00:37.420
leverage in your applications to take
full advantage of the Apple M1 GPU.

00:00:38.000 --> 00:00:41.780
Apple M1 is engineered to bring
incredible performance and a whole new

00:00:41.780 --> 00:00:44.400
set of features to the Mac product line.

00:00:44.520 --> 00:00:49.670
And Metal gives you access to
the GPU at the heart of Apple M1.

00:00:50.490 --> 00:00:54.780
We have unified the Metal features of
iOS and macOS to seamlessly support

00:00:54.870 --> 00:00:59.900
modern Mac applications and tap into
the power of our Apple-designed GPU.

00:00:59.990 --> 00:01:03.010
And to take it even further,
we’ve made key improvements to

00:01:03.010 --> 00:01:06.610
improve responsiveness and increase
graphics and compute performance for

00:01:06.610 --> 00:01:09.400
Pro applications and Metal games.

00:01:10.310 --> 00:01:14.080
In Metal, we’ve been exposing two
distinct sets of GPU families:

00:01:14.100 --> 00:01:18.100
one on iOS,
targeting our latest iPhones and iPads

00:01:18.100 --> 00:01:23.160
and leveraging our Apple-designed GPUs,
one on macOS for our latest Intel Macs,

00:01:23.170 --> 00:01:27.700
where the features and capabilities
available may differ between the

00:01:27.720 --> 00:01:32.590
power-efficient integrated GPU and
the high-performance discrete GPU.

00:01:34.110 --> 00:01:38.320
Apple M1 supports the full set of
Metal features from iOS and macOS.

00:01:38.320 --> 00:01:42.990
This means all the features found
on a high-end discrete GPU are now

00:01:42.990 --> 00:01:45.280
available on our most portable Macs.

00:01:45.280 --> 00:01:49.680
So, if you are making apps
targeting the A14 on iOS,

00:01:49.680 --> 00:01:52.750
you will find those same
advanced features on Apple M1.

00:01:52.750 --> 00:01:56.370
Likewise, if you are a Mac developer,
all Metal features,

00:01:56.370 --> 00:01:59.150
including features only
found on discrete GPUs,

00:01:59.150 --> 00:02:03.040
now work seamlessly and with great
performance on Apple silicon Macs.

00:02:05.430 --> 00:02:08.580
In your codebase,
support family queries will return true

00:02:08.580 --> 00:02:11.780
for both Apple 7 and Mac 2 on Apple M1.

00:02:12.070 --> 00:02:15.980
Let’s dive into the features.

00:02:17.820 --> 00:02:21.320
It all starts with full support
for the GPU-driven pipeline.

00:02:21.320 --> 00:02:25.810
This includes Tier 2 indirect argument
buffers with support for nested argument

00:02:25.810 --> 00:02:29.380
buffers and up to half a million
textures and a thousand samplers.

00:02:29.380 --> 00:02:33.760
It also includes support for indirect
command buffers for both render

00:02:33.850 --> 00:02:38.810
and compute commands to reduce
CPU overhead and allow command reuse.

00:02:39.260 --> 00:02:46.420
It even supports encoding indirect
commands directly on the GPU to fully

00:02:47.380 --> 00:02:47.580
maximize CPU-to-GPU parallelization.

00:02:48.370 --> 00:02:53.010
Apple M1 also supports barycentric
coordinates and pre-clipped primitive ID,

00:02:53.220 --> 00:02:55.910
which enables different
rendering techniques such as

00:02:55.910 --> 00:02:57.500
visibility buffer rendering.

00:02:57.500 --> 00:03:03.320
MSAA arrays and MSAA layered rendering
for shadow maps and multi-viewport

00:03:03.370 --> 00:03:07.500
rendering are fully supported,
including F32 MSAA Resolve.

00:03:07.500 --> 00:03:11.400
As you would expect,
Apple M1 supports raster order

00:03:11.400 --> 00:03:15.010
groups to precisely control the
memory access from fragment shaders

00:03:15.010 --> 00:03:20.610
for order-independent transparency,
multilayer Gbuffers, and voxelization.

00:03:20.830 --> 00:03:26.460
It also supports ray tracing and function
pointers that we introduced at DCLS WWDC.

00:03:28.430 --> 00:03:31.190
On the texturing side,
Apple M1 supports sparse

00:03:31.190 --> 00:03:34.380
textures with access counters
for the first time on a Mac.

00:03:34.520 --> 00:03:38.700
This is perfect for texture
streaming on a GPU timeline.

00:03:38.700 --> 00:03:40.930
We’ll cover this in more details later.

00:03:40.940 --> 00:03:46.620
BC127 highly compressed texture
formats are fully supported.

00:03:46.810 --> 00:03:50.940
Your existing game asset pipeline can
use them without any modification.

00:03:50.940 --> 00:03:55.020
Apple M1 supports 32-bit
floating-point filtering,

00:03:55.020 --> 00:03:57.120
including bilinear and anisotropic.

00:03:57.950 --> 00:04:02.580
It also supports advanced texture clamp
modes such as clamp-to-border colors:

00:04:02.660 --> 00:04:05.100
black, white, or transparent.

00:04:05.460 --> 00:04:08.660
On the compute side,
Apple M1 supports all SIMD group

00:04:08.750 --> 00:04:11.400
reduction and permutation functions.

00:04:11.460 --> 00:04:15.960
Additional SIMD matrix multiply functions
are also available in the Metal shading

00:04:15.960 --> 00:04:21.320
language to further optimize your machine
learning and image processing algorithms.

00:04:21.390 --> 00:04:24.160
Next, let’s talk about GPU performance.

00:04:24.250 --> 00:04:26.840
With Apple M1,
we have taken our expertise

00:04:26.840 --> 00:04:29.950
in designing best-in-class,
power-efficient GPUs and

00:04:29.950 --> 00:04:31.420
applied it to the Mac.

00:04:31.490 --> 00:04:35.870
We are relying on our TBDR and unified
memory architecture to provide great

00:04:35.960 --> 00:04:38.220
performance with minimum power.

00:04:38.250 --> 00:04:40.340
In the process,
we are providing even better

00:04:40.410 --> 00:04:44.230
performance for Metal apps while
providing an industry-leading level

00:04:44.230 --> 00:04:46.860
of UI and multi-app responsiveness.

00:04:48.150 --> 00:04:52.400
The Apple M1 GPU uses our new generation
of Apple-designed shader cores and

00:04:52.400 --> 00:04:57.910
scales it further for the needs of pro
applications and games running on macOS.

00:04:58.870 --> 00:05:03.720
For starters, Apple M1 has faster F32
floating-point operations.

00:05:03.770 --> 00:05:08.780
These are common for image processing,
machine learning, ray tracing, and games.

00:05:09.330 --> 00:05:12.690
Apple M1 also provides better
thread group memory performance

00:05:12.690 --> 00:05:14.400
in compute and tile shaders.

00:05:14.400 --> 00:05:19.300
It also increases ALU utilization
using improved instruction

00:05:19.300 --> 00:05:22.080
scheduling across SIMD groups.

00:05:22.290 --> 00:05:25.360
Finally, to account for more
complex shaders on the Mac,

00:05:25.560 --> 00:05:30.370
the shader core also speeds up
function calls and stack accesses.

00:05:30.990 --> 00:05:34.060
Performance on
Metal features is also great.

00:05:34.200 --> 00:05:37.240
If your application already
makes use of our GPU-driven

00:05:37.240 --> 00:05:40.460
graphics pipeline features,
you will see significantly

00:05:40.460 --> 00:05:42.430
improved performance on Apple M1.

00:05:42.540 --> 00:05:47.290
We have also made FP16 texture
filtering significantly faster

00:05:47.290 --> 00:05:49.870
for better support of HDR content.

00:05:49.980 --> 00:05:55.020
FP32 and INT32 texture
image reads are also faster.

00:05:55.890 --> 00:05:59.000
And to keep memory bandwidth to a
minimum without loss of precision,

00:05:59.200 --> 00:06:03.760
the Apple M1 GPU leverages our latest
compression hardware to bring even more

00:06:03.760 --> 00:06:05.900
bandwidth savings to your applications.

00:06:10.110 --> 00:06:12.760
Finally,
performance improvements are also visible

00:06:12.760 --> 00:06:15.040
in terms of application responsiveness.

00:06:15.040 --> 00:06:20.240
Apple M1 supports multiple concurrent
compute workloads running in parallel

00:06:20.240 --> 00:06:22.880
with geometry and fragment processing.

00:06:22.880 --> 00:06:26.960
It also supports fast context
switching for great UI responsiveness.

00:06:26.960 --> 00:06:32.320
And scheduling on the GPU has also been
tuned to handle multiple applications

00:06:32.320 --> 00:06:36.320
running concurrently or applications
with multiple Metal command queues.

00:06:36.320 --> 00:06:40.550
Putting this together,
Apple M1 supports all Metal features

00:06:40.550 --> 00:06:43.160
to seamlessly run modern
Mac applications with great

00:06:43.280 --> 00:06:44.960
performance and responsiveness.

00:06:44.960 --> 00:06:48.960
Now, let’s see some of this in action.

00:06:49.840 --> 00:06:53.440
We worked with our partners at Larian
Studios to bring their upcoming title,

00:06:53.440 --> 00:06:55.840
Baldur's Gate 3, to the Apple M1.

00:06:55.840 --> 00:06:59.840
And here it is.

00:07:04.120 --> 00:07:08.370
This scene is running with ultra
settings in 1080p resolution.

00:07:08.370 --> 00:07:11.930
It’s using a number of advanced
rendering techniques including PBR,

00:07:12.100 --> 00:07:14.590
cascaded shadow maps,
temporal anti-aliasing,

00:07:14.620 --> 00:07:19.280
and several post-processing effects
such as SSCO and depth of field.

00:07:19.350 --> 00:07:21.390
Like in this cutscene.

00:07:26.860 --> 00:07:29.720
Before Apple M1,
this had only been possible

00:07:29.720 --> 00:07:32.520
on Macs with discrete GPUs.

00:07:32.620 --> 00:07:35.660
Diving in further,
Larion uses our unified memory

00:07:35.660 --> 00:07:40.680
architecture to speed up sharing
buffers between CPU and GPU.

00:07:42.300 --> 00:07:46.440
They have also been taking advantage
of parallelization on the GPU for mesh

00:07:46.440 --> 00:07:49.230
surface generation and shadow passes.

00:07:49.230 --> 00:07:53.270
Performance is further improved
using lossless compression

00:07:53.270 --> 00:07:55.190
and FP16 math in shaders.

00:07:59.050 --> 00:08:01.000
So that’s a quick look
at Baldur's Gate 3,

00:08:01.100 --> 00:08:03.840
and we think you will love
playing it on Apple silicon Macs.

00:08:07.160 --> 00:08:10.110
As we just saw,
Apple silicon Macs with Apple M1 can

00:08:10.110 --> 00:08:14.580
seamlessly run your applications,
supporting all of our most advanced

00:08:14.580 --> 00:08:17.180
Metal features with great performance.

00:08:17.290 --> 00:08:21.330
As we’ve been developing Apple M1,
we’ve been looking at a wide range

00:08:21.410 --> 00:08:25.090
of Mac applications and have been
considering how they could be optimized

00:08:25.220 --> 00:08:30.650
even further in terms of performance,
memory bandwidth, and memory footprint.

00:08:31.030 --> 00:08:34.330
We found a few key features that
you may use when optimizing for

00:08:34.330 --> 00:08:37.940
Apple silicon Macs and would
like to tell you more about them.

00:08:38.090 --> 00:08:41.720
These features are tile shaders,
memoryless render targets,

00:08:41.950 --> 00:08:45.030
programmable blending,
and sparse textures with

00:08:45.030 --> 00:08:46.900
GPU access counters.

00:08:47.030 --> 00:08:50.500
First, let’s explore how you may
leverage tile shading to

00:08:50.500 --> 00:08:52.780
greatly reduce memory bandwidth.

00:08:53.470 --> 00:08:57.930
But before we dive into tile shading,
let’s quickly recap how the TBDR or

00:08:57.990 --> 00:09:01.780
Tile-based Deferred Renderer
architecture of modern Apple GPUs works.

00:09:01.860 --> 00:09:06.240
This will help understand what tile
shading is and why you should use it.

00:09:06.290 --> 00:09:09.780
Our TBDR architecture
has two main phases:

00:09:09.780 --> 00:09:14.890
vertex processing, where geometries are
processed; fragment processing,

00:09:15.000 --> 00:09:16.740
where pixels are processed.

00:09:16.890 --> 00:09:19.250
Let’s focus on the fragment stage,
which is where tile

00:09:19.250 --> 00:09:20.410
shading is introduced.

00:09:21.220 --> 00:09:24.500
Fragment processing operates
on really fast on-chip memory.

00:09:24.760 --> 00:09:29.460
On-chip depth and stencil memory is
used for efficient hidden-surface

00:09:29.460 --> 00:09:31.610
removal to shade only visible pixels.

00:09:31.610 --> 00:09:35.650
On-chip tile memory is used for
fragment shaders for reading

00:09:35.650 --> 00:09:37.130
and writing color values.

00:09:37.130 --> 00:09:38.810
But it doesn’t stop there.

00:09:38.820 --> 00:09:42.670
How good would it be if you could
dispatch a compute-like shader

00:09:42.670 --> 00:09:45.850
that could access all of the
pixels in your tile memory and

00:09:46.130 --> 00:09:49.540
that could be inserted right in the
middle of your fragment processing?

00:09:50.530 --> 00:09:52.740
Well,
this is exactly what a tile shader is.

00:09:52.740 --> 00:09:57.170
It lets you interleave fragment
and compute work in the same render

00:09:57.170 --> 00:10:01.930
path and save a significant amount
of memory bandwidth in the process.

00:10:02.460 --> 00:10:07.510
Mixing compute and render passes has
become more common in recent years.

00:10:07.900 --> 00:10:10.620
But in some cases,
this can consume a large amount of

00:10:10.620 --> 00:10:14.820
memory bandwidth because the tile
memory must be stored and reloaded

00:10:14.820 --> 00:10:17.580
from system memory between passes.

00:10:17.820 --> 00:10:21.790
Instead, you can use tile shading on
Apple silicon GPUs to mix render

00:10:21.850 --> 00:10:25.860
and compute in a single pass,
saving memory bandwidth.

00:10:27.230 --> 00:10:30.620
Results between fragment draw
calls and tile shading dispatches

00:10:30.620 --> 00:10:34.450
are fully consistent due to the
implicit synchronization and

00:10:34.450 --> 00:10:36.690
barriers introduced by Metal.

00:10:36.970 --> 00:10:39.780
Note that in this case,
there is no repeated load store

00:10:39.780 --> 00:10:42.080
between system memory and tile memory.

00:10:42.080 --> 00:10:45.630
This saves a huge amount of memory
bandwidth and can greatly improve

00:10:45.630 --> 00:10:47.840
the performance of your application.

00:10:47.840 --> 00:10:52.320
Let’s see this in action
on a real use case.

00:10:53.160 --> 00:10:56.380
A typical example is
tile-based light culling,

00:10:56.560 --> 00:11:00.340
which is a rendering technique where
the render target is split into

00:11:00.340 --> 00:11:04.750
small tiles and a light culling
compute shader builds a list of

00:11:04.750 --> 00:11:07.320
all lights that affect each tile.

00:11:07.500 --> 00:11:11.630
The final lighting path uses the
per-tile light list to shade only

00:11:11.630 --> 00:11:14.100
the lights affecting a given tile.

00:11:14.180 --> 00:11:16.620
This reduces the shading
cost dramatically,

00:11:16.670 --> 00:11:20.610
especially if you have a lot
of spotlights in your scene.

00:11:21.100 --> 00:11:24.660
As you can see, both render and compute
encoders are used.

00:11:24.840 --> 00:11:29.570
Let’s see how tile shading can help
rendering this in a single pass.

00:11:30.110 --> 00:11:33.230
Using tile shading,
you can generate per-tile light lists in

00:11:33.230 --> 00:11:35.260
the middle of a render command encoder.

00:11:35.260 --> 00:11:38.950
Note that there is no
break in your render path.

00:11:39.250 --> 00:11:43.850
All the computation is done in one pass,
keeping all necessary data on tile

00:11:43.850 --> 00:11:46.720
memory without going to system memory.

00:11:46.870 --> 00:11:50.400
And since most of the intermediate
data stays in tile memory,

00:11:50.550 --> 00:11:55.680
you could use memoryless render targets
to also reduce the memory footprint,

00:11:55.680 --> 00:11:57.710
but more on that later.

00:11:58.180 --> 00:12:01.820
To summarize,
tile shading is the new shading stage

00:12:01.820 --> 00:12:04.150
only possible on Apple TBDR GPUs.

00:12:04.440 --> 00:12:07.100
Tile shading has full
access to tile memory,

00:12:07.100 --> 00:12:09.910
thread group memory,
as well as device memory.

00:12:10.140 --> 00:12:15.260
Synchronization between fragment draw
calls and tile shading dispatches is

00:12:15.260 --> 00:12:20.160
guaranteed by Metal and results are fully
consistent due to implicit barriers.

00:12:20.160 --> 00:12:23.650
We encourage you to check in
your renderer if you are mixing

00:12:23.650 --> 00:12:25.720
compute and fragment processing.

00:12:25.960 --> 00:12:28.540
If you do,
you may consider using tile shading

00:12:28.540 --> 00:12:30.660
instead of separate compute passes.

00:12:31.050 --> 00:12:35.790
This will save memory bandwidth and
bring in more performance to your app.

00:12:37.060 --> 00:12:39.160
Now,
let’s take a look at memoryless render

00:12:39.160 --> 00:12:44.200
targets to understand how you can
use them to reduce memory footprint.

00:12:44.370 --> 00:12:49.020
Memoryless render targets are render
targets not backed by system memory.

00:12:49.090 --> 00:12:52.280
They are only backed
by on-chip tile memory.

00:12:52.510 --> 00:12:55.760
They are created using
Metal storage mode memoryless.

00:12:55.830 --> 00:12:59.100
This is typically used for
attachments that do not need to be

00:12:59.100 --> 00:13:01.500
stored at the end of a render pass.

00:13:01.710 --> 00:13:04.070
Let’s see some use cases.

00:13:04.320 --> 00:13:07.460
The first use case is with MSAA textures.

00:13:07.630 --> 00:13:13.140
Here, we have a large 4x MSAA texture
as well as a resolved texture.

00:13:13.200 --> 00:13:16.520
At the end of the pass,
both the MSAA and the resolved

00:13:16.520 --> 00:13:19.300
textures are stored in system memory.

00:13:19.330 --> 00:13:23.400
By using the Metal Resolve Store action,
we can save all the bandwidth required

00:13:23.400 --> 00:13:25.290
to store the large MSAA texture.

00:13:25.290 --> 00:13:29.210
This is because MSAA resolve
always happens from tile memory,

00:13:29.310 --> 00:13:32.300
so there is no point
storing the MSAA samples.

00:13:32.490 --> 00:13:36.780
This makes the unresolved
multi-sample texture fully transient.

00:13:36.780 --> 00:13:38.790
We never load it or store it.

00:13:39.170 --> 00:13:43.000
So in that case,
we can just make it memoryless and save

00:13:43.000 --> 00:13:45.810
all the footprints of the MSAA texture.

00:13:46.610 --> 00:13:49.970
For the next use case,
let’s take a look at memoryless

00:13:50.010 --> 00:13:52.260
for depth and stencil textures.

00:13:52.300 --> 00:13:55.030
Depth attachments are
required for depth testing,

00:13:55.220 --> 00:13:58.150
but in some cases,
the depth texture does not need to

00:13:58.150 --> 00:14:00.570
be stored back to system memory.

00:14:00.810 --> 00:14:04.410
This means that you should
be able to reduce both memory

00:14:04.410 --> 00:14:07.000
bandwidth and footprint together.

00:14:07.070 --> 00:14:11.040
Using Metal Store Action Don’t Care,
we can save the memory bandwidth

00:14:11.040 --> 00:14:15.470
used to store the depth texture,
while depth testing is still happening

00:14:15.620 --> 00:14:18.130
correctly on the on-chip depth memory.

00:14:18.230 --> 00:14:21.090
On top of that,
since we don’t need to read or write

00:14:21.180 --> 00:14:25.210
the depth texture in system memory,
we can mark it as memoryless

00:14:25.210 --> 00:14:27.770
and save its memory footprint.

00:14:28.170 --> 00:14:31.730
Finally, let’s go back to our previous
tile deferred rendering

00:14:31.730 --> 00:14:33.600
algorithm with tile shading.

00:14:33.600 --> 00:14:39.830
We have three passes: G-buffer rendering,
light calling, and light accumulation.

00:14:40.030 --> 00:14:42.880
Note that most of the
intermediate attachments are

00:14:42.890 --> 00:14:44.820
only accessed in tile memory.

00:14:44.900 --> 00:14:49.660
This means that these attachments don’t
need to be stored back to system memory.

00:14:50.150 --> 00:14:53.320
Again,
we can use don't care stall action with

00:14:53.370 --> 00:14:59.000
memoryless storage modes to save memory
bandwidth as well as memory footprint.

00:14:59.570 --> 00:15:02.250
In summary,
memoryless render targets are a

00:15:02.250 --> 00:15:05.800
great way to reduce the memory
footprint of your application.

00:15:05.880 --> 00:15:08.560
You can typically use them
with MSAA attachments,

00:15:08.810 --> 00:15:11.790
Depth and Stencil attachments, and,
more generally,

00:15:11.910 --> 00:15:16.020
with any temporary attachments
fully produced and consumed

00:15:16.020 --> 00:15:17.880
in the same render path.

00:15:17.960 --> 00:15:21.040
Let’s explore another unique
TBDR feature that we think can

00:15:21.040 --> 00:15:25.690
provide tremendous performance
benefits and is really easy to use:

00:15:25.690 --> 00:15:27.720
programmable blending.

00:15:28.150 --> 00:15:31.350
Programmable blending allows
fragment shaders to access pixel

00:15:31.350 --> 00:15:33.180
data directly from tile memory.

00:15:33.180 --> 00:15:37.740
This means that a fragment shader can
read the output of the previous fragment

00:15:37.740 --> 00:15:39.990
shader for the same pixel position.

00:15:40.000 --> 00:15:43.530
Programmable blending allows
you to merge multiple render

00:15:43.530 --> 00:15:46.770
passes into a single pass,
drastically reducing your

00:15:46.770 --> 00:15:49.000
memory bandwidth in the process.

00:15:49.000 --> 00:15:51.990
Let’s look at a simple example.

00:15:52.390 --> 00:15:54.790
Here,
we have a classic example of deferred

00:15:54.790 --> 00:15:57.260
shading ported from Intel-based Macs.

00:15:57.260 --> 00:16:02.060
The G-Buffer attachments are rendered
and stored to system memory by

00:16:02.060 --> 00:16:04.200
the first render command encoder.

00:16:04.200 --> 00:16:07.420
The attachments are read back
immediately afterwards in

00:16:07.420 --> 00:16:12.390
the per-pixel lighting path,
consuming significant memory bandwidth.

00:16:13.410 --> 00:16:17.050
If you only need to read the output
of the previous fragment shader

00:16:17.070 --> 00:16:19.890
at the current pixel position,
then you should really

00:16:19.890 --> 00:16:21.200
use programmable blending.

00:16:21.220 --> 00:16:25.780
It allows you to fold the two
render passes in a single pass,

00:16:25.780 --> 00:16:28.390
avoiding extra load
stalls to system memory.

00:16:30.650 --> 00:16:34.040
And now, your render target
attachments are intermediate,

00:16:34.210 --> 00:16:37.870
though they can be marked as memoryless
to save extra memory footprint on top

00:16:37.870 --> 00:16:42.370
of the memory bandwidth you already
saved with programmable blending.

00:16:42.620 --> 00:16:46.070
We encourage you to inspect your
code and check if some fragment

00:16:46.120 --> 00:16:50.430
shaders are reading the pixel values
from previous fragment shaders.

00:16:50.820 --> 00:16:53.430
Programmable blending
is very easy to use.

00:16:53.650 --> 00:16:55.770
Once you know the
fragment shader to modify,

00:16:56.120 --> 00:16:59.280
just add the color attachment
in your fragment shader

00:16:59.390 --> 00:17:01.360
inputs and read back the data.

00:17:01.370 --> 00:17:05.400
This allows more complex effects
in your app with massively

00:17:05.400 --> 00:17:07.490
reduced memory bandwidth.

00:17:08.710 --> 00:17:12.310
We just covered a few techniques
that leverage Apple silicon's

00:17:12.310 --> 00:17:16.300
TBDR GPU architecture to reduce
memory bandwidth and footprint.

00:17:16.460 --> 00:17:21.400
Now, let's talk about sparse textures,
another key feature that is available

00:17:21.400 --> 00:17:23.440
for the first time on macOS.

00:17:23.560 --> 00:17:27.080
Sparse textures with texture
streaming can reduce the memory

00:17:27.080 --> 00:17:32.210
footprint of your application while
maintaining the quality of your render.

00:17:32.620 --> 00:17:36.280
Before diving into sparse textures,
let’s do a quick recap on

00:17:36.290 --> 00:17:38.090
what texture streaming is.

00:17:38.100 --> 00:17:42.600
Texture streaming lets you render
incredibly large scenes with a

00:17:42.600 --> 00:17:46.290
fixed memory budget by streaming
in only the texture mipmap

00:17:46.290 --> 00:17:48.020
needed for the current view.

00:17:48.020 --> 00:17:52.660
The lowest levels of the mipmap
pyramid are kept resident in

00:17:52.660 --> 00:17:57.050
case higher-quality mipmap is
requested but not yet streamed in.

00:17:57.050 --> 00:18:00.950
Let’s see how Metal's sparse
textures improve this approach.

00:18:02.110 --> 00:18:04.890
First,
sparse textures provide texture access

00:18:04.890 --> 00:18:09.760
counters that tell you how often each
region of a sparse texture is accessed.

00:18:09.760 --> 00:18:14.270
This lets you prioritize texture loading,
as regions that are accessed

00:18:14.270 --> 00:18:17.940
more often are generally more
visible in the current view.

00:18:18.480 --> 00:18:21.750
Residency can be managed at
a sparse tile granularity

00:18:21.750 --> 00:18:23.820
instead of MIP map granularity.

00:18:23.820 --> 00:18:27.610
Taken together,
sparse textures let you stream

00:18:27.620 --> 00:18:31.410
more visible details within
the same memory footprint,

00:18:31.410 --> 00:18:34.780
improving quality,
or it lets you stream the same amount

00:18:34.780 --> 00:18:36.840
of details with a smaller footprint.

00:18:36.860 --> 00:18:41.210
Let’s see how to use sparse textures.

00:18:41.760 --> 00:18:45.460
A renderer using sparse textures
can be split into four stages.

00:18:45.460 --> 00:18:48.440
First, initialization,
where the sparse heap and

00:18:48.440 --> 00:18:50.410
sparse textures are created.

00:18:50.420 --> 00:18:53.360
Then, render,
where the scene is rendered by

00:18:53.360 --> 00:18:55.540
sampling the sparse textures.

00:18:55.540 --> 00:18:59.620
After rendering,
you query the texture access counters,

00:18:59.620 --> 00:19:03.370
which tells you how often sparse
tiles are being used for your scene.

00:19:03.380 --> 00:19:07.850
Finally, you stream your textures,
where you can map and load new

00:19:07.850 --> 00:19:11.530
content into sparse tiles and
unmap tiles to save memory.

00:19:11.530 --> 00:19:15.460
Let’s now dive into each stage.

00:19:16.000 --> 00:19:19.780
First, you need to create a sparse heap
of a fixed size and allocate one

00:19:19.790 --> 00:19:22.480
or more sparse textures from it.

00:19:22.510 --> 00:19:25.260
Note that you only need
to bind the sparse heap.

00:19:25.520 --> 00:19:28.730
This heap defines your memory
budget and is where sparse

00:19:28.730 --> 00:19:30.370
tiles are actually stored.

00:19:30.570 --> 00:19:34.450
Sampling textiles from the sparse
textures will automatically read

00:19:34.450 --> 00:19:36.520
the content from the sparse heap.

00:19:36.570 --> 00:19:42.340
As part of initialization,
you also load the lowest MIP levels

00:19:42.340 --> 00:19:43.710
of your texture as sample fallbacks.

00:19:44.140 --> 00:19:48.200
Here is how to create a sparse heap
with a given memory size using Metal.

00:19:48.240 --> 00:19:53.440
You first calculate the size of your heap
as a multiple of the sparse tile size.

00:19:53.440 --> 00:19:56.960
You then generate the
sparse heap descriptor.

00:19:57.450 --> 00:20:00.320
You set its type to sparse
and specify its size.

00:20:00.320 --> 00:20:05.120
Then you create the sparse
heap from the descriptor.

00:20:06.020 --> 00:20:09.420
Once the sparse heap is created,
you just need to create

00:20:09.420 --> 00:20:10.780
a texture from it.

00:20:10.870 --> 00:20:14.340
First,
create a texture descriptor as usual.

00:20:14.400 --> 00:20:18.040
Then, create the sparse texture
using the sparse heap object

00:20:18.040 --> 00:20:20.360
and the texture descriptor.

00:20:20.930 --> 00:20:24.320
After creating the sparse texture,
you would typically also

00:20:24.320 --> 00:20:26.050
map its lowest MIP levels.

00:20:26.070 --> 00:20:30.650
We will see an example
of texture mapping later.

00:20:31.470 --> 00:20:35.320
After the initialization stage,
you can start your rendering

00:20:35.320 --> 00:20:37.090
loop by rendering the scene.

00:20:37.180 --> 00:20:39.490
This render will sample
your sparse textures.

00:20:39.490 --> 00:20:42.460
Here is a fragment shader that does this.

00:20:42.460 --> 00:20:47.280
You start by sampling your sparse
texture using the sparse sample method

00:20:47.280 --> 00:20:49.290
which returns a sparse color object.

00:20:49.340 --> 00:20:54.700
You can then call the resident method
on the return object to determine if

00:20:54.700 --> 00:20:58.310
the texture region you are trying to
sample is mapped in memory or not.

00:20:58.380 --> 00:21:01.890
If it is,
you simply return the color value.

00:21:02.660 --> 00:21:05.260
Otherwise,
you take the fallback path and sample

00:21:05.260 --> 00:21:10.690
the sparse texture with a traditional
sample command and an LOD clamp.

00:21:11.230 --> 00:21:13.570
After rendering,
it is time to query the access

00:21:13.570 --> 00:21:17.490
counters to get a sense of which
sparse tiles are being accessed

00:21:17.490 --> 00:21:19.540
the most in the current view.

00:21:19.770 --> 00:21:24.180
This is how you collect the
texture access counters in Metal.

00:21:24.250 --> 00:21:28.480
You start by creating a buffer
to store the access counters.

00:21:28.530 --> 00:21:32.430
Then you encode a bleed command to
copy the counters into your buffer,

00:21:32.520 --> 00:21:38.770
specifying the sparse texture, MIP level,
slice, and region you are interested in.

00:21:39.640 --> 00:21:42.660
Once you know which sparse
tiles are the most visible based

00:21:42.660 --> 00:21:45.750
on the access counter values,
you can then stream in

00:21:45.840 --> 00:21:47.520
your texture content.

00:21:47.560 --> 00:21:52.190
To do this, you map the sparse tiles that
are being used and load the

00:21:52.190 --> 00:21:54.940
texture content into these tiles.

00:21:54.960 --> 00:21:58.480
At this stage,
you can also unmap the tiles that are not

00:21:58.480 --> 00:22:01.200
as visible to save memory in your heap.

00:22:01.290 --> 00:22:05.440
Here is how you can map and
unmap sparse tiles using Metal.

00:22:05.530 --> 00:22:09.400
First, you create a Metal resource
state command encoder.

00:22:09.430 --> 00:22:13.120
Then, you can simply encode
map and unmap operations.

00:22:13.160 --> 00:22:17.330
You specify the regions, slices,
and MIP levels of the

00:22:17.330 --> 00:22:19.590
texture to map or unmap.

00:22:19.720 --> 00:22:22.740
Once regions are mapped,
you can then bleed or create your

00:22:22.810 --> 00:22:24.790
texture data onto the mapped memory.

00:22:24.790 --> 00:22:29.960
Let’s see this rendering loop
in action on a simple example.

00:22:30.180 --> 00:22:34.500
First, the sparse heap and the
sparse texture are created.

00:22:34.540 --> 00:22:38.420
As part of the initialization,
the sparse tiles corresponding to

00:22:38.420 --> 00:22:43.540
the two lowest MIP map levels of the
texture are mapped into the sparse heap.

00:22:43.640 --> 00:22:46.650
Their content is loaded
using bleed commands.

00:22:46.990 --> 00:22:51.260
Both mapping and bleed commands
happen on a GPU timeline.

00:22:51.370 --> 00:22:55.000
At this point,
the memory budget is far from being used.

00:22:55.150 --> 00:22:59.980
Quality will be refined after each
subsequent rendering loop iteration.

00:23:00.330 --> 00:23:03.700
After the first render,
the access counters are queried,

00:23:03.730 --> 00:23:08.280
and based on the counter values,
additional tiles are mapped and loaded.

00:23:08.430 --> 00:23:11.040
As the scene changes
in subsequent render,

00:23:11.040 --> 00:23:13.880
the access counters are getting updated.

00:23:14.090 --> 00:23:16.690
Based on the new values,
sparse tiles that are not

00:23:16.690 --> 00:23:21.130
visible anymore can be unmapped,
and the associated memory can be

00:23:21.130 --> 00:23:26.630
used to stream in new sparse tiles
corresponding to the new visible regions.

00:23:27.200 --> 00:23:30.640
This is how you can continuously
add new details to your scene

00:23:30.750 --> 00:23:32.440
under a fixed memory budget.

00:23:32.440 --> 00:23:37.530
Let’s now look at a
real example in action.

00:23:39.290 --> 00:23:41.760
In this demo,
you can see our modern rendering bistro

00:23:41.760 --> 00:23:43.590
scene presented as a split screen.

00:23:43.590 --> 00:23:47.910
On the left, the scene is rendered using
traditional texture streaming,

00:23:48.120 --> 00:23:51.760
while on the right,
sparse texture streaming is being used.

00:23:51.900 --> 00:23:54.400
And at the bottom,
we’re tracking the texture memory

00:23:54.440 --> 00:23:56.530
footprint for the full-screen render.

00:23:56.660 --> 00:23:59.520
As you can see,
texture streaming with sparse textures

00:23:59.660 --> 00:24:02.980
uses less than half of the memory
footprint of traditional texture

00:24:02.980 --> 00:24:06.040
streaming with at least the same quality.

00:24:06.140 --> 00:24:07.550
Take a look at the menu.

00:24:07.550 --> 00:24:09.850
The quality is even better.

00:24:10.140 --> 00:24:12.730
With sparse textures,
we only map and load the

00:24:12.730 --> 00:24:14.390
tiles that are accessed.

00:24:14.590 --> 00:24:18.040
And with the texture access counters,
we have an accurate view of the

00:24:18.040 --> 00:24:20.080
texture regions that are visible.

00:24:20.220 --> 00:24:23.190
On top of that,
sparse texture streaming is done on a

00:24:23.250 --> 00:24:25.760
GPU timeline with great performance.

00:24:25.920 --> 00:24:28.360
So that's sparse textures.

00:24:30.630 --> 00:24:34.610
To conclude, with Apple M1,
we are unifying our iOS and macOS

00:24:34.610 --> 00:24:38.520
Metal features and bringing this
support to the Mac platform.

00:24:38.580 --> 00:24:42.210
Apple M1 brings all of the high-end
graphics and compute features that

00:24:42.240 --> 00:24:46.140
you would expect from a discrete
GPU to our most portable Macs,

00:24:46.140 --> 00:24:49.280
and it does it with a
great level of performance.

00:24:49.350 --> 00:24:53.880
It also brings key features such as tile
shading and sparse textures that you may

00:24:53.880 --> 00:24:59.070
now use in your Mac applications to take
full advantage of the Apple silicon GPU.

00:24:59.820 --> 00:25:02.300
As a next step,
you can learn more about the

00:25:02.300 --> 00:25:06.780
Metal features we discussed here by
looking at our previous Tech Talks and

00:25:06.780 --> 00:25:11.940
WWDC sessions by clicking the videos
link on developer.apple.com/metal.

00:25:12.080 --> 00:25:16.720
We have talks covering optimization
for Apple silicon and the A-series GPU,

00:25:16.850 --> 00:25:21.250
deeper dive into Metal features such
as ray tracing and GPU-driven pipeline,

00:25:21.530 --> 00:25:22.980
and a whole lot more.

00:25:23.110 --> 00:25:24.500
Be sure to check it out.

00:25:24.660 --> 00:25:26.700
Thank you for watching.