WEBVTT

00:00:00.834 --> 00:00:03.270
Hey, everyone!
My name is Andria Jensen

00:00:03.270 --> 00:00:06.740
and I'm a consulting engineer
helping our enterprise customers

00:00:06.740 --> 00:00:08.909
with their app-development
efforts.

00:00:08.909 --> 00:00:10.744
Today I'd like to talk to you

00:00:10.744 --> 00:00:14.147
about what's new
for enterprise developers.

00:00:14.147 --> 00:00:16.750
We see Apple products
being used around the world

00:00:16.750 --> 00:00:20.053
by businesses of all sizes
and across industries

00:00:20.053 --> 00:00:23.223
in more ways
than we ever imagined.

00:00:23.223 --> 00:00:25.626
Enterprise developers
make sure our devices

00:00:25.626 --> 00:00:28.095
are used most effectively
for business.

00:00:28.095 --> 00:00:30.631
Whether it's a point-of-sale app
in a retail store

00:00:30.631 --> 00:00:33.967
or a flight-planning app
for airline pilots,

00:00:33.967 --> 00:00:37.070
you rely on our platforms to
provide the tools and features

00:00:37.070 --> 00:00:41.942
you need to do your best work
and enable others to do theirs.

00:00:41.942 --> 00:00:45.279
This year at WWDC,
Apple announced major updates

00:00:45.279 --> 00:00:50.217
across software platforms,
including iOS, iPadOS, macOS,

00:00:50.217 --> 00:00:52.286
and watchOS.

00:00:52.286 --> 00:00:54.988
There were a lot
of announcements this year,

00:00:54.988 --> 00:00:59.359
with sessions discussing
all of these topics and more.

00:00:59.359 --> 00:01:00.727
I'm going to highlight ones

00:01:00.727 --> 00:01:03.530
I think will be
most relevant to you,

00:01:03.530 --> 00:01:07.467
including the new data-scanner
API allowing for minimal code

00:01:07.467 --> 00:01:10.304
to create your own
barcode-scanning interface,

00:01:10.304 --> 00:01:13.240
Live Activities and Lock Screen
widgets to show current data

00:01:13.240 --> 00:01:15.275
from your app at a glance.

00:01:15.275 --> 00:01:17.411
And these are just the start.

00:01:17.411 --> 00:01:20.113
To better navigate
all of this new information,

00:01:20.113 --> 00:01:22.382
I'm grouping things
into related areas

00:01:22.382 --> 00:01:26.520
that we'll continue to reference
throughout this session.

00:01:26.520 --> 00:01:29.356
And as I go through each
of these at a summary level,

00:01:29.356 --> 00:01:31.558
I'll be pointing you
towards additional sessions

00:01:31.558 --> 00:01:33.393
you can watch in
the Developer app

00:01:33.393 --> 00:01:36.129
or on the website
to learn more.

00:01:36.129 --> 00:01:38.765
OK! Let's get going.

00:01:38.765 --> 00:01:40.934
We'll start with Siri.

00:01:40.934 --> 00:01:43.971
And iOS 15 and before,
SiriKit and Intents

00:01:43.971 --> 00:01:47.641
have been a way for your apps
to leverage the power of Siri.

00:01:47.641 --> 00:01:50.110
This year,
we announced App Intents,

00:01:50.110 --> 00:01:53.046
a new Swift-only framework
designed to make it faster

00:01:53.046 --> 00:01:56.950
and easier to build
great actions for your app.

00:01:56.950 --> 00:02:00.287
Unlike the previous way of
making SiriKit custom intents,

00:02:00.287 --> 00:02:03.790
new App Intents do not
require intent definition files

00:02:03.790 --> 00:02:05.859
or generated code.

00:02:05.859 --> 00:02:07.761
And if you have
existing custom intents

00:02:07.761 --> 00:02:11.465
with intent definition files,
it's easy to convert them over.

00:02:11.465 --> 00:02:13.800
Simply click the
Convert to an App Intent button

00:02:13.800 --> 00:02:16.803
in your existing
intent definition file.

00:02:16.803 --> 00:02:18.939
Once you have
an app intent created,

00:02:18.939 --> 00:02:22.743
you can use it to build
the all-new App Shortcuts.

00:02:22.743 --> 00:02:25.278
When an app is installed,
so are its app intents

00:02:25.278 --> 00:02:27.114
and App Shortcuts,
making shortcuts

00:02:27.114 --> 00:02:30.317
immediately available in Siri,
Spotlight Search,

00:02:30.317 --> 00:02:34.821
and the Shortcuts app
before the app is ever opened.

00:02:34.821 --> 00:02:37.224
This means there is now
no user setup needed

00:02:37.224 --> 00:02:39.126
to create an App Shortcut;

00:02:39.126 --> 00:02:41.194
they're automatically
available to users

00:02:41.194 --> 00:02:43.630
and have predefined phrases.

00:02:43.630 --> 00:02:47.701
Those initial trigger phrases
can now also contain parameters,

00:02:47.701 --> 00:02:50.137
making it faster than ever
to invoke a shortcut

00:02:50.137 --> 00:02:53.407
to do exactly what you want
in any moment.

00:02:53.407 --> 00:02:55.842
Since App Shortcuts
are installed with the app,

00:02:55.842 --> 00:03:00.213
an Add to Siri button
is no longer needed.

00:03:00.213 --> 00:03:02.215
But users will still need
to be made aware

00:03:02.215 --> 00:03:04.651
of the phrases you've
included with your app.

00:03:04.651 --> 00:03:09.489
So we've introduced two ways to
make shortcuts easy to discover.

00:03:09.489 --> 00:03:11.858
The Siri Tip view
helps people understand

00:03:11.858 --> 00:03:15.028
what shortcuts are available
and how to use them.

00:03:15.028 --> 00:03:17.731
And a new Shortcuts link button
has been added,

00:03:17.731 --> 00:03:19.999
so it's easy to jump
into the Shortcuts app

00:03:19.999 --> 00:03:23.670
and see all of the App Shortcuts
your app offers.

00:03:23.670 --> 00:03:27.207
Your app is limited to 10
predefined App Shortcuts,

00:03:27.207 --> 00:03:30.043
so those installed with the app
should be focused

00:03:30.043 --> 00:03:31.611
and well-defined.

00:03:31.611 --> 00:03:33.480
This allows the people
using your app

00:03:33.480 --> 00:03:37.050
to create even more
efficient workflows.

00:03:37.050 --> 00:03:39.453
We introduced two new modern
ways to leverage Siri

00:03:39.453 --> 00:03:41.955
with app intents
and App Shortcuts,

00:03:41.955 --> 00:03:43.924
and helpful ways
to discover them

00:03:43.924 --> 00:03:46.626
with the Siri tip view
and Shortcuts link.

00:03:46.626 --> 00:03:49.362
Check out these WWDC sessions
to learn more

00:03:49.362 --> 00:03:52.999
about integrating these
in your apps.

00:03:52.999 --> 00:03:54.734
So that's Siri.

00:03:54.734 --> 00:03:57.270
Widgets are a great way
to leverage Siri intents

00:03:57.270 --> 00:04:01.875
for surfacing relevant details
of your app at a glance.

00:04:01.875 --> 00:04:05.312
The new app intents are great
for powering App Shortcuts,

00:04:05.312 --> 00:04:08.014
but for those using intents
to power widgets,

00:04:08.014 --> 00:04:11.151
you should continue to use
custom SiriKit intents

00:04:11.151 --> 00:04:13.420
and intent definition files.

00:04:13.420 --> 00:04:16.089
With iOS 16,
you can use WidgetKit

00:04:16.089 --> 00:04:19.759
to build complications on
the Lock Screen for iPhone.

00:04:19.759 --> 00:04:22.462
And complications on
the Apple Watch are now built

00:04:22.462 --> 00:04:25.565
using Widget Extensions as well.

00:04:25.565 --> 00:04:30.270
So you can write code once
for iOS 16 and watchOS 9.

00:04:30.270 --> 00:04:32.072
You can even share
that infrastructure

00:04:32.072 --> 00:04:34.774
with your existing
Home Screen widgets.

00:04:34.774 --> 00:04:36.843
Let's look a little closer.

00:04:36.843 --> 00:04:40.347
iOS 15 introduced system widgets
on iPhone and iPad,

00:04:40.347 --> 00:04:46.319
and watchOS 7 introduced custom
complications using ClockKit.

00:04:46.319 --> 00:04:50.290
New in iOS 16 and watchOS 9,
WidgetKit can be used

00:04:50.290 --> 00:04:52.292
to build widgets
for the new Lock Screen

00:04:52.292 --> 00:04:54.961
and complications
on Apple Watch.

00:04:54.961 --> 00:04:58.465
We've added new widget
family types for iOS and watchOS

00:04:58.465 --> 00:05:02.068
that replace the previous
ClockKit complication families.

00:05:02.068 --> 00:05:05.438
So now whether you're
on iPhone or Apple Watch,

00:05:05.438 --> 00:05:09.042
you'll have a few common
widget types to choose from:

00:05:09.042 --> 00:05:11.978
rectangular,

00:05:11.978 --> 00:05:14.814
circular,

00:05:14.814 --> 00:05:17.250
inline,

00:05:17.250 --> 00:05:22.189
and a special type just for
Apple Watch, accessoryCorner.

00:05:22.189 --> 00:05:23.990
We've also added
new rendering modes

00:05:23.990 --> 00:05:27.427
to support the new
system styles in iOS 16

00:05:27.427 --> 00:05:29.796
so you can make sure
your widget feels at home

00:05:29.796 --> 00:05:33.800
no matter what style
your user prefers.

00:05:33.800 --> 00:05:35.869
This year we're introducing
another powerful way

00:05:35.869 --> 00:05:37.737
to leverage
your Widget Extensions:

00:05:37.737 --> 00:05:39.706
Live Activities.

00:05:39.706 --> 00:05:42.242
Live Activities make it easy
to stay on top of the things

00:05:42.242 --> 00:05:44.844
that are happening in real time.

00:05:44.844 --> 00:05:46.780
They're displayed
on your Lock Screen

00:05:46.780 --> 00:05:49.649
or from the new Dynamic Island.

00:05:49.649 --> 00:05:51.918
Live Activities use
WidgetKit functionality

00:05:51.918 --> 00:05:54.521
and SwiftUI for
their user interface.

00:05:54.521 --> 00:05:56.923
This makes the presentation
code of a Live Activity

00:05:56.923 --> 00:05:58.959
similar to widget code.

00:05:58.959 --> 00:06:01.928
It also enables code sharing
between your widgets

00:06:01.928 --> 00:06:03.630
and Live Activities.

00:06:03.630 --> 00:06:06.967
However, Live Activities
don't use a timeline for updates

00:06:06.967 --> 00:06:08.635
like widgets.

00:06:08.635 --> 00:06:12.272
ActivityKit was
introduced in iOS 16.1

00:06:12.272 --> 00:06:15.375
to handle the life cycle
of each Live Activity.

00:06:15.375 --> 00:06:19.879
You use it to request, update,
and end a Live Activity.

00:06:19.879 --> 00:06:23.149
In addition, Live Activities
may also be updated

00:06:23.149 --> 00:06:26.219
by receiving remote
push notifications,

00:06:26.219 --> 00:06:28.655
so your Live Activities
can stay in sync

00:06:28.655 --> 00:06:31.324
when data changes
on your back end.

00:06:31.324 --> 00:06:34.294
Imagine using this in aviation
apps to monitor wind speed

00:06:34.294 --> 00:06:37.163
in real time for making
safety decisions;

00:06:37.163 --> 00:06:39.566
or retail and food service
managers could see

00:06:39.566 --> 00:06:43.303
real-time stats
for their shift at a glance.

00:06:43.303 --> 00:06:45.238
Here's what you might find
on the Lock Screen

00:06:45.238 --> 00:06:47.140
for an iPhone 14:

00:06:47.140 --> 00:06:49.309
a Live Activity
persistently displayed

00:06:49.309 --> 00:06:51.444
without unlocking the phone,

00:06:51.444 --> 00:06:55.282
such as up-to-the-minute status
on a current order.

00:06:55.282 --> 00:06:59.219
With the iPhone 14 Pro
and iPhone 14 Pro Max,

00:06:59.219 --> 00:07:02.355
you also see Live Activities
on the Lock Screen,

00:07:02.355 --> 00:07:04.958
and in addition,
you'll also see Live Activities

00:07:04.958 --> 00:07:08.094
on the new Dynamic Island.

00:07:08.094 --> 00:07:11.031
This allows for displaying and
interacting with real-time data

00:07:11.031 --> 00:07:13.933
across the system at a glance.

00:07:13.933 --> 00:07:15.635
So a delivery driver can see

00:07:15.635 --> 00:07:17.671
their current delivery
information,

00:07:17.671 --> 00:07:21.308
a field worker can see relevant
data for their current job site,

00:07:21.308 --> 00:07:24.544
and a shift worker can keep
track of their current hours;

00:07:24.544 --> 00:07:28.048
all of this in real time
without unlocking the device

00:07:28.048 --> 00:07:31.251
and even while
using another app.

00:07:31.251 --> 00:07:33.720
We introduced new widgets
for the Lock Screen

00:07:33.720 --> 00:07:36.089
and deprecated
ClockKit complications

00:07:36.089 --> 00:07:38.425
in favor of Widget Extensions.

00:07:38.425 --> 00:07:41.795
Widget Extensions now power
Apple Watch complications,

00:07:41.795 --> 00:07:44.230
Lock Screen
and Home Screen widgets,

00:07:44.230 --> 00:07:46.766
as well as the new
Live Activities.

00:07:46.766 --> 00:07:49.002
Learn more with these sessions
and start building

00:07:49.002 --> 00:07:52.839
glanceable experiences
for your apps today.

00:07:52.839 --> 00:07:55.108
That's what's new with widgets.

00:07:55.108 --> 00:07:58.478
So it might surprise you,
but iOS and iPadOS

00:07:58.478 --> 00:08:02.582
are the biggest augmented
reality platforms in the world,

00:08:02.582 --> 00:08:04.918
and they help you
to bring your ideas to life

00:08:04.918 --> 00:08:07.654
in more realistic ways
than ever.

00:08:07.654 --> 00:08:10.290
New in ARKit 6,
we've introduced

00:08:10.290 --> 00:08:13.059
a 4K video mode that lets you
run the camera stream

00:08:13.059 --> 00:08:16.229
in the highest
image resolution yet.

00:08:16.229 --> 00:08:19.065
We also introduced some
additional camera enhancements

00:08:19.065 --> 00:08:22.335
that give you more control
of the video backdrop.

00:08:22.335 --> 00:08:25.205
There were updates to
the behavior of plane anchors,

00:08:25.205 --> 00:08:28.274
additions to the
Motion Capture API,

00:08:28.274 --> 00:08:32.011
and new cities with
location anchors' support.

00:08:32.011 --> 00:08:35.849
Powered by a ARKit,
RoomPlan is a new Swift API

00:08:35.849 --> 00:08:40.086
that utilizes the Camera and
LiDAR Scanner on iPhone and iPad

00:08:40.086 --> 00:08:42.589
to create a 3D floor plan
of a room,

00:08:42.589 --> 00:08:45.325
including key characteristics
such as dimensions

00:08:45.325 --> 00:08:47.427
and types of furniture.

00:08:47.427 --> 00:08:49.629
Imagine the possibilities
with RoomPlan

00:08:49.629 --> 00:08:52.031
in workflows across
architecture and design,

00:08:52.031 --> 00:08:55.735
retail, hospitality,
and real estate industries.

00:08:55.735 --> 00:08:59.439
With great updates to ARKit 6
and the addition of RoomPlan

00:08:59.439 --> 00:09:02.208
for creating 3D floor plans,
there are even more ways

00:09:02.208 --> 00:09:05.278
to integrate augmented reality
in your apps.

00:09:05.278 --> 00:09:08.581
Learn more by watching
these Dub Dub sessions.

00:09:08.581 --> 00:09:10.683
That was augmented reality.

00:09:10.683 --> 00:09:13.219
Vision allows you to build
features that can process

00:09:13.219 --> 00:09:16.990
and analyze images and video
using computer vision,

00:09:16.990 --> 00:09:20.226
enabling your users to quickly
scan for relevant information

00:09:20.226 --> 00:09:23.296
using just the device's camera.

00:09:23.296 --> 00:09:26.966
This year, we announced new
revisions to text recognition,

00:09:26.966 --> 00:09:30.937
barcode scanning,
and optical flow.

00:09:30.937 --> 00:09:34.340
These revisions offer increased
performance and accuracy.

00:09:34.340 --> 00:09:36.609
Barcode scanning now offers
faster scanning

00:09:36.609 --> 00:09:39.879
for multiple barcodes,
barcodes detected per image,

00:09:39.879 --> 00:09:43.716
and improved bounding boxes
for 2D barcodes.

00:09:43.716 --> 00:09:46.820
Revision three of text
recognition and barcode scanning

00:09:46.820 --> 00:09:49.522
serves as the foundation
for our great new Live Text

00:09:49.522 --> 00:09:51.624
and data scanner APIs,

00:09:51.624 --> 00:09:54.461
which I'll share
more about in a moment.

00:09:54.461 --> 00:09:58.665
For text recognition, we now
support Korean and Japanese.

00:09:58.665 --> 00:10:01.601
There's also the ability to do
language recognition

00:10:01.601 --> 00:10:04.637
for cases where language
is not known up front.

00:10:04.637 --> 00:10:06.172
But if you do know what language

00:10:06.172 --> 00:10:08.274
the user will be trying
to recognize,

00:10:08.274 --> 00:10:12.979
you should configure that in
the API for better performance.

00:10:12.979 --> 00:10:16.716
Live Text was a system feature
introduced in iOS 15

00:10:16.716 --> 00:10:21.054
that let you interact with data
in photos in brand-new ways.

00:10:21.054 --> 00:10:24.491
This year, we announced
a new Swift API in VisionKit

00:10:24.491 --> 00:10:28.761
that lets you bring Live Text
features to your own apps.

00:10:28.761 --> 00:10:31.764
Built on the great Vision APIs
we just discussed,

00:10:31.764 --> 00:10:35.235
the Live Text APIs work
beautifully on static images

00:10:35.235 --> 00:10:39.772
and can be adapted for use
on paused video frames as well.

00:10:39.772 --> 00:10:42.709
Now you can allow interaction
directly with text

00:10:42.709 --> 00:10:44.611
inside of an image;

00:10:44.611 --> 00:10:48.114
standard interactions
like Copy are available;

00:10:48.114 --> 00:10:49.949
and data detectors
are available for things

00:10:49.949 --> 00:10:52.218
like getting directions
to an address,

00:10:52.218 --> 00:10:55.822
making a phone call,
or sending an email.

00:10:55.822 --> 00:10:57.190
Users can even see text

00:10:57.190 --> 00:11:00.727
translated into
their preferred language.

00:11:00.727 --> 00:11:04.397
Finally, QR code detection
is also available.

00:11:04.397 --> 00:11:08.334
All of this without having
to write complex code.

00:11:08.334 --> 00:11:12.438
The Live Text APIs are great for
analyzing static image frames,

00:11:12.438 --> 00:11:15.208
but sometimes you need to do
live-image analysis

00:11:15.208 --> 00:11:18.311
using the camera,
such as for barcode scanning.

00:11:18.311 --> 00:11:22.015
iOS 16 introduces a new
DataScannerViewController

00:11:22.015 --> 00:11:23.816
as part of the
VisionKit framework

00:11:23.816 --> 00:11:27.820
that simplifies data scanning
for developers.

00:11:27.820 --> 00:11:30.456
This new view controller
will greatly reduce the time

00:11:30.456 --> 00:11:33.626
you spend creating
a scanning experience.

00:11:33.626 --> 00:11:35.895
We've taken all
the great Vision APIs

00:11:35.895 --> 00:11:37.931
that we just discussed
and wrapped them

00:11:37.931 --> 00:11:40.934
in an easy-to-use
drop-in UI component

00:11:40.934 --> 00:11:44.170
that takes care of
the scanning interface for you.

00:11:44.170 --> 00:11:47.073
Data scanner offers built-in
features for scanning text

00:11:47.073 --> 00:11:51.911
and machine-readable codes,
using a live camera preview.

00:11:51.911 --> 00:11:54.647
Customizable guidance labels
and item highlighting

00:11:54.647 --> 00:11:56.916
allow you to help
your users easily find

00:11:56.916 --> 00:12:00.420
and scan
the right things quickly,

00:12:00.420 --> 00:12:03.122
Tap to Focus, which is
also used for selection,

00:12:03.122 --> 00:12:07.527
and lastly, Pinch-to-zoom
to get a closer look.

00:12:07.527 --> 00:12:10.630
Integrating the data scanner API
into your apps can reduce costs

00:12:10.630 --> 00:12:13.566
associated with using
third-party scanning libraries

00:12:13.566 --> 00:12:16.636
and allow you to create
beautiful scanning experiences

00:12:16.636 --> 00:12:19.339
customized to your app's needs.

00:12:19.339 --> 00:12:22.575
Whether your app is used
for scanning medical supplies,

00:12:22.575 --> 00:12:26.346
retail inventory management, or
baggage handling for an airline,

00:12:26.346 --> 00:12:28.881
the data scanner API
can handle it.

00:12:28.881 --> 00:12:30.316
For machine-readable codes,

00:12:30.316 --> 00:12:32.986
all of these symbologies
are supported,

00:12:32.986 --> 00:12:34.487
including these
highlighted formats

00:12:34.487 --> 00:12:36.589
we commonly see in enterprise.

00:12:36.589 --> 00:12:38.524
You can even scan multiple codes

00:12:38.524 --> 00:12:41.628
with different
symbologies at once.

00:12:41.628 --> 00:12:44.163
And for text scanning,
we support content types

00:12:44.163 --> 00:12:47.834
from street address to date,
time, and duration.

00:12:47.834 --> 00:12:50.937
Imagine integrating this
into a travel or expenses app

00:12:50.937 --> 00:12:53.439
that might allow employees
to scan their documents

00:12:53.439 --> 00:12:57.377
and receipts for
relevant information.

00:12:57.377 --> 00:13:00.446
New revisions were introduced
this year for text recognition:

00:13:00.446 --> 00:13:02.949
barcode scanning
and optical flow.

00:13:02.949 --> 00:13:05.885
And revision one for face
detection and landmarks

00:13:05.885 --> 00:13:08.021
has been deprecated this year.

00:13:08.021 --> 00:13:09.656
Remember,
it's always best practice

00:13:09.656 --> 00:13:12.291
to use the latest revisions.

00:13:12.291 --> 00:13:15.161
We've added support
for Korean and Japanese,

00:13:15.161 --> 00:13:19.499
all of this powering new
Live Text and Data Scanner APIs.

00:13:19.499 --> 00:13:22.001
To learn more and integrate
these great new APIs

00:13:22.001 --> 00:13:25.838
in your apps,
check out these sessions.

00:13:25.838 --> 00:13:28.207
That's what's new in Vision.

00:13:28.207 --> 00:13:31.177
Now let's take a look at Maps.

00:13:31.177 --> 00:13:33.913
Apple Maps has been
improving every year,

00:13:33.913 --> 00:13:38.384
adding more visual detail and
a higher-quality map imagery.

00:13:38.384 --> 00:13:43.056
This year, we took MapKit to
a new level with an all-new map.

00:13:43.056 --> 00:13:46.626
Along with that, we're providing
a 3D city experience

00:13:46.626 --> 00:13:50.096
which lets you move
around cities in amazing detail.

00:13:50.096 --> 00:13:51.831
The 3D city experience
is available

00:13:51.831 --> 00:13:54.901
in many metropolitan areas
around the world.

00:13:54.901 --> 00:13:57.403
And now, you can include
this new experience

00:13:57.403 --> 00:13:59.839
and the all-new map
in your own apps

00:13:59.839 --> 00:14:02.475
without any additional code.

00:14:02.475 --> 00:14:05.344
We've also introduced
a LookAround API,

00:14:05.344 --> 00:14:07.413
allowing you to bring
this immersive experience

00:14:07.413 --> 00:14:09.148
into your own apps.

00:14:09.148 --> 00:14:10.817
Imagine working
for a plumbing service

00:14:10.817 --> 00:14:13.086
and being able to visualize
each client address

00:14:13.086 --> 00:14:16.089
before arriving
or being a delivery driver

00:14:16.089 --> 00:14:19.492
servicing a large store like
this Safeway for the first time.

00:14:19.492 --> 00:14:22.395
You can see the parking lot
and exactly where you need to go

00:14:22.395 --> 00:14:24.097
in order to make your delivery

00:14:24.097 --> 00:14:27.700
as well as how accessible
it might be for your truck.

00:14:27.700 --> 00:14:30.803
With selectable map features,
you can now take advantage

00:14:30.803 --> 00:14:34.340
of all the great annotations
that Apple Maps provides.

00:14:34.340 --> 00:14:37.677
Before, you could see points
of interest provided by Maps

00:14:37.677 --> 00:14:40.079
but could not
interact with them.

00:14:40.079 --> 00:14:42.281
New this year,
we're changing that.

00:14:42.281 --> 00:14:44.217
By using a default
annotation view

00:14:44.217 --> 00:14:46.352
or creating your own
custom experience,

00:14:46.352 --> 00:14:48.488
you can now interact
with points of interest

00:14:48.488 --> 00:14:51.124
provided by Apple Maps.

00:14:51.724 --> 00:14:54.460
MapKit has supported overlays
with several styling options

00:14:54.460 --> 00:14:55.828
for years.

00:14:55.828 --> 00:14:59.332
In iOS 16, we're improving
our existing APIs

00:14:59.332 --> 00:15:01.834
to allow your overlays
to seamlessly integrate

00:15:01.834 --> 00:15:03.269
with the map.

00:15:03.269 --> 00:15:07.774
Notice here how the route
is occluded by the trees.

00:15:07.774 --> 00:15:11.177
Finally, we've added
a new Map Configuration API

00:15:11.177 --> 00:15:13.212
that enables you
to configure your maps

00:15:13.212 --> 00:15:16.115
using different
types of displays.

00:15:16.115 --> 00:15:18.317
A new property
for preferred configuration

00:15:18.317 --> 00:15:21.687
has been added that
you should begin using.

00:15:21.687 --> 00:15:23.856
There are three configuration
types that allow you

00:15:23.856 --> 00:15:27.393
to choose what works best
for your map's context.

00:15:27.393 --> 00:15:29.529
The image map
configuration is used

00:15:29.529 --> 00:15:32.665
to present
satellite-style imagery.

00:15:32.665 --> 00:15:35.101
The hybrid configuration
is used to present

00:15:35.101 --> 00:15:38.171
an imagery-based map
with added map features,

00:15:38.171 --> 00:15:41.841
such as road labels
and points of interest.

00:15:41.841 --> 00:15:43.609
The standard map
configuration is used

00:15:43.609 --> 00:15:47.013
to present a fully
graphics-based map.

00:15:47.013 --> 00:15:50.116
These three map configurations
may sound familiar to you

00:15:50.116 --> 00:15:53.219
as they're similar
to our existing map types.

00:15:53.219 --> 00:15:56.622
MapType and the associated
MKMapView properties

00:15:56.622 --> 00:15:59.926
for showing particular
map features are deprecated.

00:15:59.926 --> 00:16:05.298
You should transition to using
the new Map Configurations API.

00:16:05.298 --> 00:16:08.968
Our native frameworks offer
an amazing map experience.

00:16:08.968 --> 00:16:10.770
To extend that experience,

00:16:10.770 --> 00:16:14.740
we've created
the new Maps Server APIs.

00:16:14.740 --> 00:16:17.743
With geocoding APIs,
you can convert an address

00:16:17.743 --> 00:16:21.314
to geographic coordinates
in latitude and longitude;

00:16:21.314 --> 00:16:23.683
reverse geocoding
does the opposite,

00:16:23.683 --> 00:16:28.387
allowing you to take coordinates
and turn them into an address.

00:16:28.387 --> 00:16:31.457
The Search API lets you pass
in a search string to discover

00:16:31.457 --> 00:16:35.761
places like businesses,
points of interest, and more.

00:16:35.761 --> 00:16:38.431
And the ETA API
will let you calculate

00:16:38.431 --> 00:16:41.801
how far you are from
a given destination.

00:16:41.801 --> 00:16:44.203
We introduced a beautiful
all-new map

00:16:44.203 --> 00:16:46.239
and 3D city experience.

00:16:46.239 --> 00:16:49.742
We've provided new MapKit APIs
for you to bring that experience

00:16:49.742 --> 00:16:51.210
to your own apps,

00:16:51.210 --> 00:16:53.579
with a new way
to configure your maps

00:16:53.579 --> 00:16:56.916
and a few new
server APIs as well.

00:16:56.916 --> 00:16:58.718
Check out these sessions
to get more details

00:16:58.718 --> 00:17:03.089
on bringing these new
features to your maps.

00:17:03.089 --> 00:17:04.757
That's Maps.

00:17:04.757 --> 00:17:06.459
Next up, Weather.

00:17:06.459 --> 00:17:08.427
Providing current
weather information

00:17:08.427 --> 00:17:12.798
helps people stay up to date,
safe, and prepared.

00:17:12.798 --> 00:17:16.435
This year, we announced the
all-new Apple Weather Service.

00:17:16.435 --> 00:17:19.205
It's available as part of
the Apple Developer Program

00:17:19.205 --> 00:17:21.807
for both apps in the App Store
and those published

00:17:21.807 --> 00:17:23.709
as custom apps.

00:17:23.709 --> 00:17:26.479
The Apple Weather Service
powers WeatherKit,

00:17:26.479 --> 00:17:30.616
a new native framework available
on all Apple platforms.

00:17:30.616 --> 00:17:33.452
And because a consistent
experience is important,

00:17:33.452 --> 00:17:36.088
we're also providing a REST API
that can be used

00:17:36.088 --> 00:17:39.759
to bring the Apple Weather
Service to any platform.

00:17:39.759 --> 00:17:42.328
It uses high-resolution
weather models --

00:17:42.328 --> 00:17:44.730
machine learning
and prediction algorithms --

00:17:44.730 --> 00:17:48.834
to give you hyper-local weather
forecasts around the globe.

00:17:48.834 --> 00:17:51.704
And we will always respect
your users' privacy.

00:17:51.704 --> 00:17:54.573
Location is only used
for weather forecasts.

00:17:54.573 --> 00:17:55.775
It's never associated

00:17:55.775 --> 00:17:58.477
with any personally
identifying information,

00:17:58.477 --> 00:18:02.281
and no user data
is ever shared or sold.

00:18:02.281 --> 00:18:05.985
With WeatherKit, you can get
current weather conditions,

00:18:05.985 --> 00:18:08.554
10-day hourly forecasts
for temperature,

00:18:08.554 --> 00:18:13.225
precipitation, wind,
UV index, and more.

00:18:13.225 --> 00:18:16.429
Minute-by-minute precipitation
for the next hour

00:18:16.429 --> 00:18:19.999
and severe weather alerts are
available for select regions.

00:18:19.999 --> 00:18:23.736
You can even get historical
weather data to identify trends.

00:18:23.736 --> 00:18:26.372
Imagine integrating
WeatherKit into a field service

00:18:26.372 --> 00:18:28.674
or aviation app where
the weather conditions

00:18:28.674 --> 00:18:32.078
make a big difference
to the work environment.

00:18:32.078 --> 00:18:34.780
We introduced the all-new
Apple Weather Service

00:18:34.780 --> 00:18:37.750
which powers the new native
WeatherKit framework.

00:18:37.750 --> 00:18:42.021
There's also a REST API to bring
WeatherKit to any platform.

00:18:42.021 --> 00:18:44.323
All of this helping you
deliver hyperlocal,

00:18:44.323 --> 00:18:47.226
up-to-the-minute forecasts
to your apps.

00:18:47.226 --> 00:18:51.330
To find out more, watch
the "Meet WeatherKit" session.

00:18:51.330 --> 00:18:53.632
And that was Weather.

00:18:53.632 --> 00:18:55.935
Push-to-talk apps have
many uses in fields

00:18:55.935 --> 00:18:58.337
where rapid communication
is essential,

00:18:58.337 --> 00:19:01.307
such as healthcare
and emergency services.

00:19:01.307 --> 00:19:04.677
In these fields, communication
needs to be real-time

00:19:04.677 --> 00:19:06.645
and response times are critical.

00:19:06.645 --> 00:19:10.116
In iOS 16, we've introduced
the Push to Talk framework

00:19:10.116 --> 00:19:12.251
to help you create
this experience,

00:19:12.251 --> 00:19:14.153
and I think this will be
a huge addition

00:19:14.153 --> 00:19:17.757
for many of our
enterprise developers.

00:19:17.757 --> 00:19:20.192
The Push to Talk framework
enables a new class

00:19:20.192 --> 00:19:23.062
of audio communication apps
on iOS that provide

00:19:23.062 --> 00:19:26.699
a walkie-talkie-style
system experience.

00:19:26.699 --> 00:19:29.702
The Push to Talk framework
provides developers with APIs

00:19:29.702 --> 00:19:32.972
to leverage a system UI
that your users can access

00:19:32.972 --> 00:19:37.710
from anywhere without having
to directly launch your app.

00:19:37.710 --> 00:19:40.713
The system UI allows the user
to quickly activate

00:19:40.713 --> 00:19:43.382
an audio transmission
which will launch your app

00:19:43.382 --> 00:19:44.917
in the background.

00:19:44.917 --> 00:19:50.122
It will then record and stream
audio to your back-end server.

00:19:50.122 --> 00:19:53.292
The new framework eliminates
special entitlements

00:19:53.292 --> 00:19:55.194
and workarounds that,
in the past,

00:19:55.194 --> 00:19:58.064
have kept walkie-talkie apps
running continuously

00:19:58.064 --> 00:19:59.365
in the background.

00:19:59.365 --> 00:20:02.468
With the Push to Talk framework,
the system will wake your app

00:20:02.468 --> 00:20:06.539
only when needed
to preserve battery life.

00:20:06.539 --> 00:20:09.041
Push-to-talk features have
a long history of use

00:20:09.041 --> 00:20:11.377
by first responders
and law enforcement.

00:20:11.377 --> 00:20:14.280
We've also seen increasing
use of push-to-talk solutions

00:20:14.280 --> 00:20:17.683
in healthcare as well as retail
and warehouse environments,

00:20:17.683 --> 00:20:19.752
where they're used
to support curbside pickup

00:20:19.752 --> 00:20:22.721
or pick-and-pack use cases.

00:20:22.721 --> 00:20:24.423
The Push to Talk framework
provides you

00:20:24.423 --> 00:20:27.259
with a way to create
walkie-talkie-style apps,

00:20:27.259 --> 00:20:29.528
utilizing a familiar
system interface

00:20:29.528 --> 00:20:32.198
available from anywhere
on the device.

00:20:32.198 --> 00:20:34.300
And it's designed
to be compatible

00:20:34.300 --> 00:20:37.670
with your existing end-to-end
communication solutions

00:20:37.670 --> 00:20:39.839
and your back-end
infrastructure.

00:20:39.839 --> 00:20:41.640
To learn more about
implementing Push to Talk

00:20:41.640 --> 00:20:46.112
in your apps,
watch this session from WWDC.

00:20:46.112 --> 00:20:48.114
So that's Push to Talk.

00:20:48.114 --> 00:20:50.983
This year, we made several
improvements to CarPlay

00:20:50.983 --> 00:20:52.384
that we think are
great additions

00:20:52.384 --> 00:20:55.688
for our enterprise customers.

00:20:55.688 --> 00:20:58.124
Navigation apps can
now display maps

00:20:58.124 --> 00:21:01.293
and turn-by-turn instructions
in a second location,

00:21:01.293 --> 00:21:02.561
such as the instrument cluster

00:21:02.561 --> 00:21:05.131
located directly
in front of the driver.

00:21:05.131 --> 00:21:06.966
This is a great feature
for use cases

00:21:06.966 --> 00:21:11.871
in field service, sales,
delivery, and transit.

00:21:11.871 --> 00:21:15.474
All CarPlay apps require
the Apple Developer Program

00:21:15.474 --> 00:21:19.411
and a CarPlay app entitlement
that matches your app type.

00:21:19.411 --> 00:21:23.616
Previously, CarPlay entitlements
were limited to these app types:

00:21:23.616 --> 00:21:26.452
navigation, audio,
communication,

00:21:26.452 --> 00:21:31.657
EV charging, parking,
and quick food ordering.

00:21:31.657 --> 00:21:33.959
This year, we've added
two new types:

00:21:33.959 --> 00:21:36.495
fueling and driving task apps.

00:21:36.495 --> 00:21:39.532
Fueling apps might help
a user start up a gas pump,

00:21:39.532 --> 00:21:43.569
and driving task apps can enable
a wide variety of simple tasks

00:21:43.569 --> 00:21:46.672
that a user might need
to do while driving.

00:21:46.672 --> 00:21:49.508
These apps can be used
to help control car accessories,

00:21:49.508 --> 00:21:52.178
like a trailer controller;
or help with tasks

00:21:52.178 --> 00:21:54.246
at the beginning
or end of a drive,

00:21:54.246 --> 00:21:57.883
like tracking mileage
for expense reporting.

00:21:57.883 --> 00:22:00.686
We also made testing
CarPlay apps easier

00:22:00.686 --> 00:22:03.088
with the new CarPlay Simulator.

00:22:03.088 --> 00:22:06.125
CarPlay Simulator is
a standalone Mac application

00:22:06.125 --> 00:22:09.094
that replicates
a CarPlay environment.

00:22:09.094 --> 00:22:11.664
Once installed
and connected to an iPhone,

00:22:11.664 --> 00:22:14.166
CarPlay will start on iPhone
and run just the same

00:22:14.166 --> 00:22:17.269
as if you had it connected
to a real car.

00:22:17.269 --> 00:22:20.506
And because your app is
running on an actual iPhone,

00:22:20.506 --> 00:22:23.475
you have access to complete
iPhone functionality,

00:22:23.475 --> 00:22:28.280
allowing you to test
any scenario necessary.

00:22:28.280 --> 00:22:31.050
We've created the ability
to have turn-by-turn directions

00:22:31.050 --> 00:22:34.520
in a second location,
added two new app types

00:22:34.520 --> 00:22:37.223
as well as
the CarPlay Simulator.

00:22:37.223 --> 00:22:40.025
Check out this session if you're
interested in learning more

00:22:40.025 --> 00:22:43.829
about using CarPlay
with your apps.

00:22:43.829 --> 00:22:45.631
So far we've looked
at some improvements

00:22:45.631 --> 00:22:48.801
to frameworks used
throughout the system.

00:22:48.801 --> 00:22:51.103
Now, I want to tell you about
the updates we've made

00:22:51.103 --> 00:22:55.074
to our UI frameworks.

00:22:55.074 --> 00:22:58.477
Something I'm really excited
about this year is Swift Charts,

00:22:58.477 --> 00:23:01.013
a powerful and flexible
new framework

00:23:01.013 --> 00:23:04.783
for transforming your data
into informative visualizations.

00:23:04.783 --> 00:23:07.720
I think you're going
to really love it.

00:23:07.720 --> 00:23:09.555
It uses the same concise syntax

00:23:09.555 --> 00:23:12.291
that you're already
familiar with in SwiftUI,

00:23:12.291 --> 00:23:14.660
allowing for effective
and customizable charts

00:23:14.660 --> 00:23:17.263
built on minimal code.

00:23:17.263 --> 00:23:20.666
Swift Charts has built-in
support for localization

00:23:20.666 --> 00:23:24.069
and accessibility,
and just like SwiftUI,

00:23:24.069 --> 00:23:27.339
Swift Charts offers support
for all Apple platforms,

00:23:27.339 --> 00:23:32.144
so you can make your charts
truly available to everyone.

00:23:32.144 --> 00:23:34.747
Swift Charts allows for easy
communication of patterns

00:23:34.747 --> 00:23:36.915
or trends in your data.

00:23:36.915 --> 00:23:39.118
Line charts, bar charts,
and scatter plots

00:23:39.118 --> 00:23:40.919
are all easy to create.

00:23:40.919 --> 00:23:43.656
And when you create a chart,
it automatically generates

00:23:43.656 --> 00:23:46.158
scales and axes
that fit your data,

00:23:46.158 --> 00:23:50.229
adjusting them as needed
when your data changes.

00:23:50.229 --> 00:23:53.165
Swift Charts is an easy way
to bring charts like these

00:23:53.165 --> 00:23:56.835
to apps that require data
reporting or visualization.

00:23:56.835 --> 00:23:59.271
Think of the beautiful ways
you could bring Swift Charts

00:23:59.271 --> 00:24:02.308
to your enterprise apps,
reporting dashboards,

00:24:02.308 --> 00:24:05.778
sales trends, real-time
metrics, patient health data,

00:24:05.778 --> 00:24:07.279
and anything else
you could imagine.

00:24:07.279 --> 00:24:11.850
Swift Charts can help you
bring it to life.

00:24:11.850 --> 00:24:16.055
With iPadOS 16, you can now
build some amazing new features

00:24:16.055 --> 00:24:19.892
into your iPad apps,
making them truly desktop class.

00:24:19.892 --> 00:24:23.429
We've added an all-new
Find and Replace UI.

00:24:23.429 --> 00:24:26.799
Search now takes up less space
and is shown inline

00:24:26.799 --> 00:24:29.601
in the navigation bar
on iPadOS,

00:24:29.601 --> 00:24:32.071
It can also collapse
to a button.

00:24:32.071 --> 00:24:34.873
Search suggestions appear
when the search is activated

00:24:34.873 --> 00:24:39.178
and can be updated
as the search query changes.

00:24:39.178 --> 00:24:43.515
And we've brought desktop-class
editing to the iPad.

00:24:43.515 --> 00:24:46.118
Edit menus now have
alternate presentations

00:24:46.118 --> 00:24:48.187
based on the input used.

00:24:48.187 --> 00:24:50.522
For touch interactions,
you'll see the familiar menu

00:24:50.522 --> 00:24:54.026
you're used to but with
a new paging behavior.

00:24:54.026 --> 00:24:56.228
When using the
Magic Keyboard or Trackpad,

00:24:56.228 --> 00:25:00.165
you'll see
a context menu presented.

00:25:00.165 --> 00:25:03.836
UIKit is formalizing the
existing navigation bar styles

00:25:03.836 --> 00:25:06.071
and introducing two new ones
with a denser

00:25:06.071 --> 00:25:10.175
and more customizable layout.

00:25:10.175 --> 00:25:14.380
Navigator apps have a familiar
push-pop navigation model.

00:25:14.380 --> 00:25:15.948
This is generally
appropriate for apps

00:25:15.948 --> 00:25:19.852
that display hierarchical data,
like Settings.

00:25:19.852 --> 00:25:23.856
Browsers, like Safari or Files,
are ideal for viewing

00:25:23.856 --> 00:25:26.625
and navigating back and forth
between multiple documents

00:25:26.625 --> 00:25:29.161
or folder structures.

00:25:29.161 --> 00:25:31.864
And editors are great
for focused viewing

00:25:31.864 --> 00:25:34.933
or editing of
individual documents.

00:25:34.933 --> 00:25:36.668
Just as we're getting
more specific

00:25:36.668 --> 00:25:39.371
with the navigation bar styles
on the iPad,

00:25:39.371 --> 00:25:41.740
we're introducing
new SwiftUI APIs

00:25:41.740 --> 00:25:46.145
for more specific
navigation styles as well.

00:25:46.145 --> 00:25:51.183
Until now, you used navigation
views for navigation-based apps.

00:25:51.183 --> 00:25:53.919
This year, we're moving away
from navigation views

00:25:53.919 --> 00:25:56.188
and have introduced
two more specific options

00:25:56.188 --> 00:25:58.724
to handle navigation.

00:25:58.724 --> 00:26:01.226
Let's start with
navigation split view,

00:26:01.226 --> 00:26:03.929
which is perfect
for multicolumn maps.

00:26:03.929 --> 00:26:06.098
Navigation split view
automatically adapts

00:26:06.098 --> 00:26:09.034
to a single-column stack
on iPhone.

00:26:09.034 --> 00:26:13.305
There's a two-column layout as
with the App Store Connect app.

00:26:13.305 --> 00:26:17.209
There's even a three-column
layout like Notes.

00:26:17.209 --> 00:26:20.245
Or the Mail app, which shows
a three-column layout

00:26:20.245 --> 00:26:22.181
on iPad and Mac.

00:26:22.181 --> 00:26:26.118
The single-column layout also
displays in Slide Over on iPad

00:26:26.118 --> 00:26:29.621
and even adapts for Apple Watch.

00:26:29.621 --> 00:26:32.958
Navigation stacks represent
a push-pop interface

00:26:32.958 --> 00:26:36.428
for navigating forward and
backward in a stack of views.

00:26:36.428 --> 00:26:39.097
We see this style of
navigation in many places,

00:26:39.097 --> 00:26:42.468
such as the Settings app
or Find My on Apple Watch.

00:26:42.468 --> 00:26:45.137
You can mix navigation stacks
with split views

00:26:45.137 --> 00:26:48.307
for even more ways
to create your interface.

00:26:48.307 --> 00:26:50.509
The new navigation stack
also allows

00:26:50.509 --> 00:26:53.045
for an easy implementation
of deep linking

00:26:53.045 --> 00:26:56.114
and programmatic navigation.

00:26:56.114 --> 00:26:57.483
Along with these updates,

00:26:57.483 --> 00:27:01.153
navigation links
have changed with iOS 16.

00:27:01.153 --> 00:27:05.958
Navigation links are used to
present other views in SwiftUI.

00:27:05.958 --> 00:27:08.560
In the Settings app, as you move
through the different options

00:27:08.560 --> 00:27:09.795
and hierarchies,

00:27:09.795 --> 00:27:14.099
navigation links tell your app
which view to present next.

00:27:14.099 --> 00:27:16.835
Previously, navigation links
were configured

00:27:16.835 --> 00:27:19.872
by providing a title and
a destination view to present,

00:27:19.872 --> 00:27:21.907
but now they can
also be triggered

00:27:21.907 --> 00:27:24.810
based on a presented data value.

00:27:24.810 --> 00:27:29.114
Finally, navigation stacks
also keep track of a path.

00:27:29.114 --> 00:27:31.283
Paths represent
all the data on the stack

00:27:31.283 --> 00:27:33.485
as you move between views.

00:27:33.485 --> 00:27:35.754
When the stack is
just showing its root view,

00:27:35.754 --> 00:27:37.523
the path is empty.

00:27:37.523 --> 00:27:39.358
As views are
added to the stack,

00:27:39.358 --> 00:27:41.793
their values are
appended to the path.

00:27:41.793 --> 00:27:44.129
Navigation stacks use
a binding to this path

00:27:44.129 --> 00:27:50.068
to easily enable data-driven
programmatic navigation.

00:27:50.068 --> 00:27:52.137
And for developers
using Device.name,

00:27:52.137 --> 00:27:54.640
I've got some important changes.

00:27:54.640 --> 00:27:58.410
Before iOS 16,
the UIDevice API allowed you

00:27:58.410 --> 00:28:01.146
to access the user-assigned
device name.

00:28:01.146 --> 00:28:02.915
To better safeguard user data,

00:28:02.915 --> 00:28:06.251
the UIDevice.name API
will now return only the model

00:28:06.251 --> 00:28:10.455
of the device instead
of the user-assigned name.

00:28:10.455 --> 00:28:12.791
We realize that there are
some circumstances

00:28:12.791 --> 00:28:15.827
where apps will still need
the device name.

00:28:15.827 --> 00:28:17.796
Perhaps you have
a document-management app

00:28:17.796 --> 00:28:20.265
where the user needs to see
on which of their devices

00:28:20.265 --> 00:28:22.901
they last edited a file.

00:28:22.901 --> 00:28:25.604
You can request
an entitlement to still access

00:28:25.604 --> 00:28:28.340
the user-assigned device name
as you always have.

00:28:28.340 --> 00:28:30.576
If you have an enterprise
or custom app

00:28:30.576 --> 00:28:32.210
that requires Device.name,

00:28:32.210 --> 00:28:34.212
please describe
your use case in detail

00:28:34.212 --> 00:28:36.682
when submitting
the entitlement request.

00:28:36.682 --> 00:28:40.719
Be sure to include whether
or not it's a shared device.

00:28:40.719 --> 00:28:43.121
For a full list
of eligibility criteria,

00:28:43.121 --> 00:28:44.222
check out the documentation

00:28:44.222 --> 00:28:48.193
for the user-assigned
device name entitlement.

00:28:48.193 --> 00:28:50.629
And that's UI frameworks.

00:28:50.629 --> 00:28:54.166
We introduced Swift Charts for
beautiful data visualizations

00:28:54.166 --> 00:28:56.335
and added several new features
to make the iPad

00:28:56.335 --> 00:28:58.570
truly desktop class.

00:28:58.570 --> 00:29:01.306
We've deprecated
navigation views in SwiftUI

00:29:01.306 --> 00:29:06.144
in favor of using navigation
stack or navigation split view.

00:29:06.144 --> 00:29:08.947
To make sure you're up to date
on all the latest details,

00:29:08.947 --> 00:29:13.352
go to the Developer app and
get started with these sessions.

00:29:13.352 --> 00:29:15.587
We just saw UI frameworks
that help you

00:29:15.587 --> 00:29:18.457
build great interfaces in code.

00:29:18.457 --> 00:29:21.159
Finally, let's take a look
at some ways we've improved

00:29:21.159 --> 00:29:24.429
the tools you use
to design those interfaces.

00:29:24.429 --> 00:29:26.698
But first, I'd like to take
a moment to talk about

00:29:26.698 --> 00:29:31.203
why design matters
and not just for consumer apps.

00:29:31.203 --> 00:29:33.005
Enterprise apps
that are well-designed

00:29:33.005 --> 00:29:35.741
can make a huge impact
on your business.

00:29:35.741 --> 00:29:37.976
Creating a consistent,
familiar interface

00:29:37.976 --> 00:29:41.279
that your users expect
can make them more productive,

00:29:41.279 --> 00:29:43.448
more effective employees.

00:29:43.448 --> 00:29:45.350
And that saves the business
money on things

00:29:45.350 --> 00:29:47.619
like training and support costs,

00:29:47.619 --> 00:29:51.056
all while ensuring a high level
of adoption for your app

00:29:51.056 --> 00:29:54.626
and efficiency for
your employee workflows.

00:29:54.626 --> 00:29:56.895
Because design is such
an important component

00:29:56.895 --> 00:29:58.664
of building great apps,

00:29:58.664 --> 00:30:02.534
we created the
Human Interface Guidelines.

00:30:02.534 --> 00:30:04.936
The Human Interface Guidelines
has long been

00:30:04.936 --> 00:30:06.805
a comprehensive resource
to help you

00:30:06.805 --> 00:30:11.043
create great experiences
across Apple platforms.

00:30:11.043 --> 00:30:14.046
Now it's been fully
redesigned and refreshed

00:30:14.046 --> 00:30:16.548
to meet your current needs.

00:30:16.548 --> 00:30:19.651
The HIG has merged
its platform-specific guidance

00:30:19.651 --> 00:30:21.620
into a unified document.

00:30:21.620 --> 00:30:24.723
This makes it simpler to explore
common design approaches

00:30:24.723 --> 00:30:28.627
while still preserving relevant
details about each platform.

00:30:28.627 --> 00:30:31.763
It's easier to navigate
and is now searchable.

00:30:31.763 --> 00:30:34.733
Coming later this year,
we're also adding change logs

00:30:34.733 --> 00:30:38.070
for the entire set
of guidelines.

00:30:38.070 --> 00:30:40.806
SF Symbols is a large library
of iconography

00:30:40.806 --> 00:30:45.277
that allows you to bring
consistent icons to your apps.

00:30:45.277 --> 00:30:49.347
With SF Symbols 4,
we've added 700 new symbols.

00:30:49.347 --> 00:30:53.618
So now, there are more than
4000 symbols to choose from,

00:30:53.618 --> 00:30:56.788
and all of these are now
available directly in Xcode

00:30:56.788 --> 00:31:00.125
or from the SF Symbols app.

00:31:00.125 --> 00:31:03.128
Rendering modes give you control
over how color is applied

00:31:03.128 --> 00:31:04.496
to a symbol.

00:31:04.496 --> 00:31:07.766
SF Symbols supports
four rendering modes:

00:31:07.766 --> 00:31:13.638
monochrome, hierarchical,
palette, and multicolor.

00:31:13.638 --> 00:31:16.441
These rendering modes allow
for a wide variety of ways

00:31:16.441 --> 00:31:18.777
to display symbols in your apps,

00:31:18.777 --> 00:31:22.214
choosing what works best
for a given context.

00:31:22.214 --> 00:31:25.117
Previously, if no rendering mode
was specified,

00:31:25.117 --> 00:31:28.453
the default would
always be monochrome.

00:31:28.453 --> 00:31:31.623
With SF Symbols 4, we've added
a new rendering mode

00:31:31.623 --> 00:31:33.558
called "automatic."

00:31:33.558 --> 00:31:36.595
With automatic rendering,
individual symbols can identify

00:31:36.595 --> 00:31:40.332
one of the four modes as their
own preferred rendering mode.

00:31:40.332 --> 00:31:44.669
This allows each symbol to best
highlight its unique features.

00:31:44.669 --> 00:31:48.306
For example, here, the cloud,
sun, and rain symbol

00:31:48.306 --> 00:31:51.309
as well as the hexagon grid
prefer monochrome,

00:31:51.309 --> 00:31:54.513
while the SharePlay and iPhone
radio waves icons

00:31:54.513 --> 00:31:56.548
prefer hierarchical.

00:31:56.548 --> 00:31:58.917
Automatic rendering will now be
the default mode

00:31:58.917 --> 00:32:02.187
for all symbols and is preferred
unless another mode

00:32:02.187 --> 00:32:06.291
is explicitly requested
for a certain context.

00:32:06.291 --> 00:32:07.959
To help visualize
how symbols look

00:32:07.959 --> 00:32:10.462
in different rendering modes
and configurations,

00:32:10.462 --> 00:32:13.698
the SF Symbols app has gained
a new preview area

00:32:13.698 --> 00:32:16.334
located in the right sidebar.

00:32:16.334 --> 00:32:20.705
SF Symbols 4 also adds support
for variable symbols.

00:32:20.705 --> 00:32:22.440
You can find
these updated symbols

00:32:22.440 --> 00:32:26.411
by selecting the variable
collection in the left sidebar.

00:32:26.411 --> 00:32:29.080
Variable symbols allow apps
to display different layers

00:32:29.080 --> 00:32:34.419
of a single symbol based
on a value from zero to one.

00:32:34.419 --> 00:32:36.421
An app can now use
a speaker symbol

00:32:36.421 --> 00:32:38.456
to represent current volume.

00:32:38.456 --> 00:32:42.227
At a value of zero,
the speaker waves are faded out;

00:32:42.227 --> 00:32:44.362
and as the value
increases up to one,

00:32:44.362 --> 00:32:46.731
the speaker waves
progressively fill in,

00:32:46.731 --> 00:32:51.136
indicating the change
in volume level as it happens.

00:32:51.136 --> 00:32:53.071
And if you're making
custom symbols,

00:32:53.071 --> 00:32:57.742
you'll want to check out the new
unified layer annotation,

00:32:57.742 --> 00:33:00.378
also shown in the preview area.

00:33:00.378 --> 00:33:02.681
This allows you to have
a shared-layer structure

00:33:02.681 --> 00:33:04.349
across rendering modes,

00:33:04.349 --> 00:33:08.587
making annotation
faster and easier.

00:33:08.587 --> 00:33:10.422
Continuing in design.

00:33:10.422 --> 00:33:12.557
This year, we've added
three new width styles

00:33:12.557 --> 00:33:15.393
to the San Francisco
font family:

00:33:15.393 --> 00:33:21.433
condensed, compressed,
and expanded.

00:33:21.433 --> 00:33:23.335
This means you have
more flexibility

00:33:23.335 --> 00:33:25.270
when designing your typography.

00:33:25.270 --> 00:33:27.439
You can see examples
of these new styles

00:33:27.439 --> 00:33:31.142
in Photo Memories
and Apple News.

00:33:31.142 --> 00:33:34.646
We've also added SF Arabic
and SF Arabic Rounded

00:33:34.646 --> 00:33:37.749
to the system fonts,
making Arabic typography

00:33:37.749 --> 00:33:42.687
on Apple platforms modern,
clear, and refined.

00:33:42.687 --> 00:33:46.424
We've made it a lot easier
to add an icon for your iOS app

00:33:46.424 --> 00:33:48.059
in Xcode 14.

00:33:48.059 --> 00:33:52.964
In Xcode 13 and before, you had
to provide images of all sizes.

00:33:52.964 --> 00:33:56.568
We're now only requiring
a single large-format image

00:33:56.568 --> 00:33:58.236
for iOS.

00:33:58.236 --> 00:34:00.505
The large app icon will be
scaled for display

00:34:00.505 --> 00:34:04.509
on all iPhone, iPad,
and Apple Watch devices.

00:34:04.509 --> 00:34:07.479
If you want to add custom images
for smaller sizes,

00:34:07.479 --> 00:34:12.217
you can still add specific
icon images just for those.

00:34:12.217 --> 00:34:14.586
This year,
we completely revamped

00:34:14.586 --> 00:34:17.822
the Human Interface Guidelines,
brought you new icons

00:34:17.822 --> 00:34:20.625
and ways to render them
with SF Symbols 4,

00:34:20.625 --> 00:34:21.526
font additions,

00:34:21.526 --> 00:34:25.497
and the ability to use
a single image for app icons.

00:34:25.497 --> 00:34:29.734
To find out more, check out
these Dub Dub sessions.

00:34:29.734 --> 00:34:33.271
Well, that was a lot,
but we made it!

00:34:33.271 --> 00:34:35.407
Those were the highlights
from this year's announcements

00:34:35.407 --> 00:34:37.642
that I wanted you all
to know about.

00:34:37.642 --> 00:34:39.711
And I think there were
a lot of great things here

00:34:39.711 --> 00:34:44.416
that you can use to make your
enterprise apps even better.

00:34:44.416 --> 00:34:46.451
To learn more about
everything I've covered,

00:34:46.451 --> 00:34:49.854
you can check out all of our
sessions in the Developer app.

00:34:49.854 --> 00:34:52.223
Start using the new SDKs today.

00:34:52.223 --> 00:34:56.828
And please provide feedback
as you explore the new features.

00:34:56.828 --> 00:34:59.364
I can't wait to see how
you'll use these new tools

00:34:59.364 --> 00:35:01.366
to improve your users'
experience

00:35:01.366 --> 00:35:06.371
and make their jobs faster
and easier to accomplish.

00:35:06.371 --> 00:35:08.373
Thanks for listening!