WEBVTT

00:00:22.740 --> 00:00:27.540
Hi, I'm Paul Marcos,
Application Services Evangelist at Apple.

00:00:27.580 --> 00:00:31.490
In-App Purchas is an exciting
technology that lets you offer services,

00:00:31.710 --> 00:00:36.180
products and subscriptions for sale
directly within your application.

00:00:36.250 --> 00:00:39.960
By taking advantage of In-App Purchas,
you can create your own virtual

00:00:39.960 --> 00:00:44.900
storefront in your app and tap
into a whole new revenue stream.

00:00:45.040 --> 00:00:47.840
Because you design and
develop the user interface,

00:00:47.890 --> 00:00:52.010
you can focus on tailoring the experience
so it's perfectly suited to your

00:00:52.050 --> 00:00:55.000
content and the needs of your users.

00:00:55.050 --> 00:00:58.640
To get you started,
I'm going to explain how In-App Purchasse

00:00:58.640 --> 00:01:02.150
works and highlight a number of
best practice tips to help you

00:01:02.150 --> 00:01:05.240
avoid some of the common pitfalls
you might encounter when adding

00:01:05.240 --> 00:01:08.160
In-App Purchasse to your application.

00:01:08.960 --> 00:01:12.620
I'd like to start off by providing
some context about how applications

00:01:12.620 --> 00:01:14.980
are making money in the App Store.

00:01:15.030 --> 00:01:17.540
In iTunes,
you can see a list of the top-grossing

00:01:17.540 --> 00:01:19.980
apps that are currently being sold.

00:01:20.040 --> 00:01:23.740
This list changes constantly,
but here we have a typical example

00:01:23.740 --> 00:01:26.780
of the top 25 grossing apps.

00:01:26.850 --> 00:01:31.060
Looking at this list,
we can see something very interesting.

00:01:31.120 --> 00:01:35.190
If we focus in on the top five apps,
we see that they're

00:01:35.420 --> 00:01:37.770
actually free applications.

00:01:37.850 --> 00:01:43.020
And if we look at the entire top 25,
17 of them are free.

00:01:43.070 --> 00:01:47.570
It's pretty common to see anywhere
between 12 to 20 of the top 25

00:01:47.640 --> 00:01:50.340
apps being offered for free.

00:01:50.410 --> 00:01:55.460
So how can these apps wind up as the
top-grossing apps in the App Store?

00:01:55.790 --> 00:01:59.620
Well, they do so by generating
revenue using In-App Purchas,

00:01:59.620 --> 00:02:03.200
which clearly shows just
how well this model works.

00:02:03.300 --> 00:02:07.020
So what I want for you to get out of
this presentation is an understanding

00:02:07.020 --> 00:02:12.890
of how you can include In-App Purchase
in your application to generate sales.

00:02:13.640 --> 00:02:17.340
To do this, we'll hit three main topics.

00:02:17.550 --> 00:02:20.300
First, we'll look at a few examples
of how applications are

00:02:20.300 --> 00:02:24.610
integrating In-App Purchasse,
and I'll highlight some key elements

00:02:24.610 --> 00:02:26.700
to a successful integration.

00:02:26.840 --> 00:02:30.620
Second, we'll spend the bulk of our time
looking at the details of how you

00:02:30.620 --> 00:02:33.540
actually integrate In-App Purchasse.

00:02:33.730 --> 00:02:37.340
And lastly, we'll look at our newest
type of In-App Purchasse,

00:02:37.480 --> 00:02:39.940
auto-renewable subscriptions.

00:02:40.160 --> 00:02:42.930
Let's get started with a few examples.

00:02:49.390 --> 00:02:53.640
First up is Smoothies by
Callaway Digital Arts.

00:02:53.700 --> 00:02:56.670
Smoothies is a beautiful app
that provides different recipes

00:02:56.770 --> 00:02:58.640
for delicious smoothies.

00:02:58.710 --> 00:03:02.410
As you can see, it's a really vibrant app
using rich colors and a

00:03:02.410 --> 00:03:05.670
simple UI to engage the users.

00:03:05.970 --> 00:03:09.320
Smoothies provides a base set of
recipes and then users can add

00:03:09.330 --> 00:03:12.000
new recipes to their libraries.

00:03:12.070 --> 00:03:14.560
Take a look at how they've
implemented their In-App Purchas

00:03:14.650 --> 00:03:17.320
in a simple and intuitive way.

00:03:17.380 --> 00:03:20.220
You can find recipes by
taking into account what

00:03:20.220 --> 00:03:22.280
ingredients you have on hand.

00:03:22.330 --> 00:03:26.260
They've presented this unique way of
indicating what ingredients you have.

00:03:26.340 --> 00:03:30.820
For example, first I can specify that
I want a citrus smoothie.

00:03:30.870 --> 00:03:34.500
Now I can define the type of
smoothie I want in more detail.

00:03:34.550 --> 00:03:37.160
So let's select tofu.

00:03:37.200 --> 00:03:39.540
I'm not sure I've ever seen
a tofu citrus smoothie,

00:03:39.540 --> 00:03:41.700
but I'm willing to try one.

00:03:41.750 --> 00:03:44.140
As you can see,
the app presents me with two recipes

00:03:44.140 --> 00:03:49.990
I have available in my library and an
additional recipe pack I can purchase.

00:03:50.360 --> 00:03:53.110
What's great about this
implementation is that the store

00:03:53.110 --> 00:03:55.340
is essentially embedded in the UI.

00:03:55.860 --> 00:03:57.050
See something you don't have?

00:03:57.570 --> 00:03:57.920
Buy it!

00:03:58.230 --> 00:04:01.960
All without having to go to a
dedicated store area in the app.

00:04:02.210 --> 00:04:05.840
It's a very seamless experience,
which is what I really

00:04:05.840 --> 00:04:07.730
like about this example.

00:04:07.820 --> 00:04:12.870
Now let's take a look at the
AmpliTube Fender app by IK Multimedia.

00:04:12.910 --> 00:04:15.470
Fender is a well-known
manufacturer of guitars,

00:04:15.570 --> 00:04:17.700
amplifiers and effects pedals.

00:04:17.810 --> 00:04:21.340
What they've done with this app is
to provide an innovative new medium

00:04:21.340 --> 00:04:25.430
for musicians to plug in their
instruments to an iPad and process

00:04:25.430 --> 00:04:27.700
various effects through the app.

00:04:27.700 --> 00:04:30.940
With In-App Purchas,
they've allowed musicians

00:04:31.050 --> 00:04:35.660
to add on various effects,
such as a phaser, overdrive pedal,

00:04:35.690 --> 00:04:37.700
echo and blender pedal.

00:04:37.810 --> 00:04:42.130
By offering this at an affordable price,
In-App Purchas is a great way for

00:04:42.130 --> 00:04:45.910
Fender to introduce these products
in a digital manner so musicians can

00:04:45.920 --> 00:04:48.700
then purchase the physical hardware.

00:04:50.510 --> 00:04:55.130
Now let's take a look at
Real Racing 2 HD by FireMint.

00:04:55.270 --> 00:04:59.400
FireMint is always at the forefront
of adopting new iOS technology.

00:04:59.620 --> 00:05:04.140
For example, in Real Racing 2 HD,
they're taking advantage of new features

00:05:04.140 --> 00:05:07.400
in iOS such as AirPlay mirroring.

00:05:07.540 --> 00:05:11.080
They've also implemented
In-App Purchas as a way to provide

00:05:11.120 --> 00:05:13.550
virtual currency within the app.

00:05:13.830 --> 00:05:17.380
You start the game driving a Volvo,
and as you progress through the game,

00:05:17.380 --> 00:05:18.650
you can win prize money.

00:05:18.700 --> 00:05:22.810
You can use your prize money
to buy new cars and upgrades,

00:05:22.880 --> 00:05:24.200
like this gorgeous Lotus.

00:05:24.200 --> 00:05:28.030
Now, I'm not a very good racer,
and thankfully I've got an alternative.

00:05:28.200 --> 00:05:31.100
Using In-App Purchasse,
you can upgrade your car

00:05:31.170 --> 00:05:32.540
with virtual currency.

00:05:32.700 --> 00:05:37.150
For an $8 In-App Purchasse,
I can now buy that Lotus.

00:05:38.200 --> 00:05:40.860
So this is an example of using
In-App Purchasse as a way to

00:05:40.860 --> 00:05:45.700
accelerate the advancement within
a game by using virtual currency,

00:05:45.700 --> 00:05:48.830
which can help keep your users
engaged and let them get the

00:05:48.910 --> 00:05:50.510
most out of your application.

00:05:52.200 --> 00:05:54.570
For our last example,
let's take a look at the

00:05:54.570 --> 00:05:58.900
latest type of In-App Purchase,
Auto-Renewable Subscriptions,

00:05:58.910 --> 00:06:01.600
which were made available in iOS 5.

00:06:01.680 --> 00:06:05.190
Auto-Renewable Subscriptions are the
definitive way to offer traditional

00:06:05.190 --> 00:06:09.560
subscription support to your customers,
allowing users to subscribe

00:06:09.560 --> 00:06:13.720
and be billed automatically,
while having new content pushed

00:06:13.840 --> 00:06:17.360
directly to their devices,
without any need for manual

00:06:17.360 --> 00:06:19.420
intervention or downloads.

00:06:19.660 --> 00:06:22.800
Let's take a look at how Esquire
is offering their subscription

00:06:22.800 --> 00:06:26.170
in a totally revamped,
digitally interactive

00:06:26.170 --> 00:06:27.790
version of their app.

00:06:31.930 --> 00:06:34.490
As you can see,
they've totally reinvented their

00:06:34.570 --> 00:06:39.340
publication to take advantage of all
the interactivity the iPad offers.

00:06:39.390 --> 00:06:42.570
Subscribers get the great
content they're accustomed to,

00:06:42.570 --> 00:06:46.660
but now they have the ability to receive
their monthly issues automatically,

00:06:46.660 --> 00:06:49.460
just like they do for
their paper versions.

00:06:49.510 --> 00:06:53.490
In addition to subscriptions,
users can purchase individual

00:06:53.590 --> 00:06:56.100
issues directly in the application.

00:06:56.170 --> 00:07:00.300
But they've gone a step further
and offer older issues for free

00:07:00.350 --> 00:07:04.280
to get users acquainted with
this exciting new digital format.

00:07:04.340 --> 00:07:07.250
The examples we've seen are just
a few of the countless ways you

00:07:07.290 --> 00:07:10.980
can use In-App Purchas to enhance
your application and tap into this

00:07:10.980 --> 00:07:13.810
potentially lucrative feature.

00:07:14.280 --> 00:07:17.520
So let's talk about some of the benefits
of In-App Purchasse to both you as

00:07:17.520 --> 00:07:20.440
the developer and to your customers.

00:07:20.540 --> 00:07:23.940
As a developer, you get these benefits
right out of the box.

00:07:24.070 --> 00:07:26.290
First,
you don't have to worry about collecting

00:07:26.290 --> 00:07:28.180
any of the payments from the users.

00:07:28.280 --> 00:07:30.960
Just like selling your
application in the App Store,

00:07:31.080 --> 00:07:34.420
Apple handles all the payment details.

00:07:34.490 --> 00:07:38.050
Next, you can broaden the reach of
your customer base by offering

00:07:38.050 --> 00:07:42.520
your products with localized
pricing and product details.

00:07:42.590 --> 00:07:45.520
Lastly,
all the sales reporting comes to you via

00:07:45.520 --> 00:07:49.780
the familiar iTunes Connect interface,
just like the sales reporting

00:07:49.780 --> 00:07:51.760
for your application itself.

00:07:52.460 --> 00:07:56.640
Using In-App Purchasse also presents
great benefits for your customers,

00:07:56.720 --> 00:08:00.780
making them more inclined to
make purchases within the app.

00:08:01.070 --> 00:08:04.760
First, the purchase experience
is immediately familiar.

00:08:04.780 --> 00:08:09.400
It's the same as buying music, movies,
books or apps.

00:08:09.420 --> 00:08:13.900
Second, the user doesn't have to
re-enter any payment information.

00:08:13.920 --> 00:08:18.400
No need to dig up their credit card
or fill in unfamiliar web forms.

00:08:18.400 --> 00:08:21.600
In fact, the user is not taken
out of the app at all.

00:08:21.670 --> 00:08:25.110
Finally, the receipts for purchases
come from a known,

00:08:25.110 --> 00:08:26.300
trusted place.

00:08:26.330 --> 00:08:30.000
It's all the same invoicing from
the App Store that users are already

00:08:30.120 --> 00:08:32.930
familiar with and comfortable with.

00:08:34.220 --> 00:08:38.180
So lots of options on how to integrate
In-App Purchasse into your application,

00:08:38.320 --> 00:08:41.800
tailored to your application,
and plenty of benefits

00:08:41.850 --> 00:08:43.600
for you and your users.

00:08:43.790 --> 00:08:47.250
Let's move on to look at the
implementation steps for adding

00:08:47.250 --> 00:08:49.330
In-App Purchasse to your app.

00:08:49.730 --> 00:08:53.160
As we go through these steps,
you'll see this energy-efficient

00:08:53.160 --> 00:08:54.400
light bulb pop-up.

00:08:54.510 --> 00:08:57.200
It will highlight key tips and
techniques that will help you

00:08:57.200 --> 00:09:00.570
avoid some of the common pitfalls
developers sometimes encounter

00:09:00.980 --> 00:09:03.680
when implementing In-App Purchas.

00:09:03.830 --> 00:09:08.190
So if you pay attention to these tips,
you'll find your implementation

00:09:08.270 --> 00:09:12.700
experience much simpler,
smoother and more energy-efficient.

00:09:14.020 --> 00:09:18.030
In-App Purchas relies on the
Store Kit Framework available in iOS,

00:09:18.030 --> 00:09:21.500
and as of last summer, OS X Lion.

00:09:21.660 --> 00:09:24.500
While I'm going to be focusing
on the iOS side of things,

00:09:24.610 --> 00:09:27.280
much of what I'll be covering
with the Store Kit implementation

00:09:27.650 --> 00:09:31.520
can be directly transferred to
your OS X Lion app development.

00:09:31.640 --> 00:09:35.360
You'll find the Store Kit Framework
is exactly the same on both platforms.

00:09:35.480 --> 00:09:38.450
All the tips and tricks you learn
here can be used when you want

00:09:38.450 --> 00:09:42.880
to offer In-App Purchas in your
Lion apps on the Mac App Store.

00:09:44.290 --> 00:09:47.590
As you consider adding
In-App Purchasse to your application,

00:09:47.590 --> 00:09:49.740
it's important to plan ahead.

00:09:49.790 --> 00:09:52.040
I want to spend a few minutes
talking about a couple of the

00:09:52.040 --> 00:09:56.680
most common questions I get
related to In-App Purchasse.

00:09:56.890 --> 00:10:01.320
First, what products are you allowed
to sell using In-App Purchasse?

00:10:01.450 --> 00:10:05.220
And second, when configuring your
items in iTunes Connect,

00:10:05.310 --> 00:10:08.760
what is the correct purchase
type that you should use?

00:10:08.890 --> 00:10:11.970
Let's talk about the types
of things you can sell.

00:10:12.380 --> 00:10:16.720
In-App Purchasse should be used to sell
digital content or services that are

00:10:16.720 --> 00:10:19.540
used directly within your application.

00:10:19.640 --> 00:10:23.160
This might be content that the user
gets access to locally on their

00:10:23.200 --> 00:10:27.490
device or services that you might
be providing over the internet.

00:10:27.660 --> 00:10:30.370
Regardless,
the expectation is that the user

00:10:30.520 --> 00:10:35.970
will make use of those content or
services by way of your application.

00:10:36.320 --> 00:10:39.110
Let's look at a couple concrete
examples of what you can and

00:10:39.170 --> 00:10:42.250
cannot sell using In-App Purchas.

00:10:42.490 --> 00:10:46.000
Here's a fitness app which sells
digital versions of workouts.

00:10:46.070 --> 00:10:48.440
This is a great use of In-App Purchas.

00:10:48.510 --> 00:10:50.750
However,
if you wanted to sell a membership

00:10:50.750 --> 00:10:53.650
for a gym down the street,
that would not be allowed

00:10:53.790 --> 00:10:56.980
with In-App Purchas because
it's not a digital good.

00:10:57.140 --> 00:11:00.900
Similarly, digital books can be
sold within your apps,

00:11:00.950 --> 00:11:03.500
but physical copies of books cannot.

00:11:03.890 --> 00:11:08.740
Physical or real-world goods
cannot be sold with In-App Purchas.

00:11:09.610 --> 00:11:11.860
Once you've determined
what you'll be selling,

00:11:12.010 --> 00:11:15.240
the next step is to determine
what purchase type it fits into,

00:11:15.330 --> 00:11:17.720
so let's take a look at those.

00:11:18.290 --> 00:11:21.200
There are five different types
of purchases you can offer.

00:11:21.330 --> 00:11:25.100
Consumable and non-consumable
are the two basic types.

00:11:25.210 --> 00:11:27.590
And then there are three
types of subscriptions,

00:11:27.590 --> 00:11:32.730
including non-renewable,
auto-renewable and free subscriptions.

00:11:32.830 --> 00:11:35.660
Let's go through each
of these in more detail.

00:11:35.750 --> 00:11:38.980
The first type of
In-App Purchas are consumables.

00:11:39.070 --> 00:11:42.160
Consumables are what
I call single-use items.

00:11:42.240 --> 00:11:44.680
That is,
each time the user wants to use the item,

00:11:44.770 --> 00:11:46.510
they have to pay for it.

00:11:46.630 --> 00:11:49.760
After they've used the item,
it's consumed.

00:11:49.860 --> 00:11:53.530
And if they want to use it again,
they have to purchase it again.

00:11:53.670 --> 00:11:56.790
Some examples of this would
be items used during gameplay,

00:11:56.790 --> 00:12:00.310
like pet food or the virtual
currency we saw in Real Racing that

00:12:00.310 --> 00:12:02.790
lets you advance through a game.

00:12:02.920 --> 00:12:07.730
Consumable items are available
for both iOS and Lion.

00:12:08.420 --> 00:12:12.500
Serving as the opposite to
consumables are non-consumables.

00:12:12.500 --> 00:12:15.160
These are considered durable goods.

00:12:15.170 --> 00:12:18.320
Once they're purchased,
the user gets to keep them and

00:12:18.400 --> 00:12:20.390
has ongoing access to them.

00:12:20.760 --> 00:12:23.350
When a user purchases
a non-consumable item,

00:12:23.560 --> 00:12:27.350
it must be made available on
all the devices the user has.

00:12:27.470 --> 00:12:31.470
So if they make a purchase on an iPhone,
they'll be able to make use of that

00:12:31.470 --> 00:12:33.350
same item on their iPad as well.

00:12:34.520 --> 00:12:37.240
We've seen a number of examples
of this type including the

00:12:37.310 --> 00:12:40.400
Recipe Pack from Smoothies,
a new Effect Pedal in Amplitube,

00:12:40.400 --> 00:12:43.400
or individual issues of Esquire Magazine.

00:12:43.400 --> 00:12:47.530
But it can also include things
like giving access to additional

00:12:47.530 --> 00:12:51.780
features in an app like the
ability to save documents.

00:12:52.030 --> 00:12:57.010
Non-consumable items are
available on iOS and Lion as well.

00:12:58.030 --> 00:13:02.080
Moving on to the subscription types,
auto-renewable subscriptions are

00:13:02.080 --> 00:13:04.390
the latest type of In-App Purchas.

00:13:04.560 --> 00:13:08.000
With auto-renewable subscriptions,
you can enable true subscription

00:13:08.000 --> 00:13:12.080
support within your app,
allowing users to subscribe to your

00:13:12.080 --> 00:13:17.410
content once and be automatically billed
each time a subscription term is up.

00:13:17.630 --> 00:13:21.410
Users can easily opt out on their
next renewal at any time using

00:13:21.410 --> 00:13:25.500
the Manage Subscription Interface
in iTunes or the App Store.

00:13:26.810 --> 00:13:30.680
Auto-renewable subscriptions are
primarily used for providing dynamic

00:13:31.170 --> 00:13:33.450
or episodic content to your user.

00:13:33.650 --> 00:13:36.900
That is,
content that is updated on a frequent

00:13:36.900 --> 00:13:41.010
and regular basis so that the user
is getting something new as they

00:13:41.040 --> 00:13:43.590
continue paying for the subscription.

00:13:43.920 --> 00:13:47.720
There are a variety of duration
options ranging from 7 days up to a

00:13:47.720 --> 00:13:50.710
year with several choices in between.

00:13:51.100 --> 00:13:54.640
As with non-consumables,
when a user subscribes to something,

00:13:54.980 --> 00:13:59.310
that content must be made available
to all the devices they are using.

00:13:59.750 --> 00:14:04.990
All Newsstand apps are required to use
auto-renewable type for subscriptions,

00:14:05.030 --> 00:14:09.200
but auto-renewables are not
limited to Newsstand apps only.

00:14:09.370 --> 00:14:13.420
Auto-renewables can be offered
in any type of application.

00:14:13.670 --> 00:14:18.070
Finally, auto-renewable subscriptions
are only available on iOS 5.

00:14:20.740 --> 00:14:24.440
Free subscriptions are also a
new type of In-App purchase.

00:14:24.510 --> 00:14:27.600
The implementation of free
subscriptions is virtually identical

00:14:27.600 --> 00:14:31.670
to auto-renewables with the exception
that there's no expiration date.

00:14:31.820 --> 00:14:35.440
Instead of expiring,
users simply turn off the subscription

00:14:35.440 --> 00:14:39.030
like they would opt out of an
auto-renewable subscription.

00:14:39.380 --> 00:14:44.350
Just like auto-renewables,
the content is available to

00:14:44.350 --> 00:14:44.350
the user on all their devices.

00:14:44.780 --> 00:14:51.630
Free subscriptions are only
available in iOS 5 and can only be

00:14:51.630 --> 00:14:51.630
offered by Newsstand applications.

00:14:53.420 --> 00:14:56.880
The last subscription option
is the Non-Renewable Type.

00:14:56.880 --> 00:15:00.260
Non-Renewables can be used for a
wide variety of purchases such as

00:15:00.260 --> 00:15:04.730
access to static content or online
services where the access is only

00:15:04.730 --> 00:15:07.240
provided for a limited amount of time.

00:15:07.370 --> 00:15:10.610
As the name implies,
when the subscription period is over,

00:15:10.680 --> 00:15:12.540
the subscription simply ends.

00:15:12.660 --> 00:15:16.200
In order to continue access,
the user would have to make another

00:15:16.200 --> 00:15:18.190
purchase of the subscription.

00:15:18.610 --> 00:15:21.530
Some examples might be providing
voice navigation service for

00:15:21.600 --> 00:15:25.370
a few months while a user is
traveling in an unfamiliar country,

00:15:25.380 --> 00:15:29.370
or allowing the user to scan
business cards for a year.

00:15:30.230 --> 00:15:33.550
Non-renewable subscriptions
are an older purchase type,

00:15:33.580 --> 00:15:35.200
and as such,
they don't have all the bells

00:15:35.240 --> 00:15:37.580
and whistles that the other
subscription types offer.

00:15:37.580 --> 00:15:41.210
In order to use them,
you have to explicitly keep track of

00:15:41.210 --> 00:15:45.360
purchases that the user has made and
give the user a way to transfer those

00:15:45.370 --> 00:15:47.630
subscriptions to all of their devices.

00:15:47.640 --> 00:15:52.000
You also have to manually track the
expiration date of the subscription.

00:15:52.000 --> 00:15:55.260
Lastly, if you want to prompt the
user in order to let them

00:15:55.260 --> 00:15:59.570
purchase another block of time,
you have to implement that yourself.

00:16:01.220 --> 00:16:05.070
Non-renewable subscriptions have
been available on iOS since 3.0

00:16:05.270 --> 00:16:09.670
and are still appropriate for use
with a wide variety of offerings.

00:16:10.660 --> 00:16:14.990
Let's dive into the details about how
you actually implement In-App Purchas.

00:16:15.050 --> 00:16:17.840
We're going to cover four key topics.

00:16:17.930 --> 00:16:21.840
Our first stop will be to set
things up in iTunes Connect.

00:16:21.910 --> 00:16:26.210
Next, we'll move to implementing your
code using the Store Kit framework.

00:16:26.540 --> 00:16:28.700
After writing your code,
you'll need to test things

00:16:28.700 --> 00:16:30.500
in the Sandbox environment.

00:16:30.630 --> 00:16:33.140
And once you've gotten
everything up and running great,

00:16:33.200 --> 00:16:37.640
you'll submit your app
and products for review.

00:16:37.720 --> 00:16:41.080
Let's start with how you set
things up in iTunes Connect.

00:16:42.480 --> 00:16:45.040
The first thing you want to do
is verify that you have a paid

00:16:45.040 --> 00:16:47.960
applications contract in effect.

00:16:48.190 --> 00:16:51.290
You'll need this if you're
selling items via In-App Purchas,

00:16:51.290 --> 00:16:54.490
even if your application itself is free.

00:16:55.050 --> 00:16:57.600
And here we have our
first energy saving tip.

00:16:57.750 --> 00:17:00.340
This one is simply to double
check that you have a paid

00:17:00.340 --> 00:17:02.500
applications contract in effect.

00:17:02.660 --> 00:17:07.140
It's easy to forget to do this and later
have issues with testing in the sandbox

00:17:07.140 --> 00:17:10.000
or submitting your In-App Purchas items.

00:17:11.260 --> 00:17:14.390
Next, you'll start by adding your
In-App Purchas products by

00:17:14.530 --> 00:17:18.480
specifying the metadata for
each product you want to sell.

00:17:18.730 --> 00:17:21.700
Begin by going into the
Manage In-App Purchases

00:17:21.700 --> 00:17:23.890
module of your application.

00:17:25.240 --> 00:17:27.740
In this module,
you can add a new product.

00:17:27.920 --> 00:17:30.180
When you do,
you'll have to choose the purchase type

00:17:30.420 --> 00:17:33.100
from the list that we looked at before.

00:17:33.240 --> 00:17:37.400
We'll first focus on how to add
consumable or non-consumable items.

00:17:37.530 --> 00:17:40.710
We'll look at adding
subscriptions a little bit later.

00:17:41.420 --> 00:17:44.560
The first thing you'll provide
is a reference name and product

00:17:44.560 --> 00:17:46.140
identifier for your item.

00:17:46.270 --> 00:17:50.900
These will show up in iTunes Connect and
on your Sales and Trends reports.

00:17:51.070 --> 00:17:55.170
The product ID is what your
application will use to indicate which

00:17:55.420 --> 00:17:57.900
product the user wants to purchase.

00:17:58.030 --> 00:18:02.420
It's important to remember that product
identifiers must be unique across

00:18:02.530 --> 00:18:04.650
both applications and platforms.

00:18:04.900 --> 00:18:08.590
If you have multiple
applications on OS X or iOS,

00:18:08.700 --> 00:18:13.730
it's a good idea to prefix your product
IDs with the bundle ID of your app.

00:18:15.340 --> 00:18:19.440
Next, you can provide localized display
names and descriptions for your items.

00:18:19.520 --> 00:18:24.390
Your application can access this
information via Store Kit in order to

00:18:24.390 --> 00:18:27.200
display product information to the user.

00:18:27.320 --> 00:18:30.070
If you haven't localized
your application or provided

00:18:30.070 --> 00:18:33.930
localized product information,
it's well worth your time to do so.

00:18:34.170 --> 00:18:37.390
It can significantly broaden
the reach for your products,

00:18:37.460 --> 00:18:38.940
translating into more sales.

00:18:40.040 --> 00:18:42.740
Moving on to the next section,
you'll select pricing and

00:18:42.740 --> 00:18:44.140
availability for your item.

00:18:44.140 --> 00:18:48.200
This is a similar experience to setting
the price for your main application,

00:18:48.200 --> 00:18:51.090
where you select from
a range of price tiers.

00:18:52.240 --> 00:18:56.240
Lastly, you'll submit a screenshot for
review with your In-App Purchas item.

00:18:56.240 --> 00:18:59.180
This screenshot is not seen
by customers or displayed

00:18:59.180 --> 00:19:01.200
anywhere within the app store.

00:19:01.200 --> 00:19:05.880
It is used solely by the app review
team to get a general understanding

00:19:05.880 --> 00:19:08.190
of what you are trying to sell.

00:19:08.970 --> 00:19:12.020
Now you're all set with regard to
iTunes Connect and you've specified

00:19:12.020 --> 00:19:14.300
the products you want to sell.

00:19:14.370 --> 00:19:17.730
Time to roll up your sleeves
and let's write some code.

00:19:19.530 --> 00:19:22.630
This diagram shows the start
to finish steps necessary for

00:19:22.720 --> 00:19:24.780
implementing In-App Purchases.

00:19:24.880 --> 00:19:27.980
As you can see,
there are a number of steps required,

00:19:28.020 --> 00:19:30.980
and it's pretty easy to overlook
some things along the way,

00:19:31.070 --> 00:19:33.980
so we'll go through the
whole process together.

00:19:34.520 --> 00:19:36.680
Well, it looks like there's a lot
of work for you to do here.

00:19:36.730 --> 00:19:39.080
It's actually nowhere near that bad.

00:19:39.220 --> 00:19:42.870
You'll find that most of the work is
provided by the Store Kit Framework.

00:19:43.000 --> 00:19:47.360
As with many of our other technologies,
the Frameworks guide the overall

00:19:47.360 --> 00:19:51.150
process and you hook into a
few well-defined places in the

00:19:51.290 --> 00:19:53.400
flow to complete the picture.

00:19:53.400 --> 00:19:56.400
Let's see how this all fits together.

00:19:57.470 --> 00:20:00.600
Before offering your user
the option to buy anything,

00:20:00.790 --> 00:20:05.300
you'll want to verify that the device
is not restricting In-App Purchases.

00:20:05.470 --> 00:20:10.790
You do this by calling CanMakePayments
on the SKPaymentQueue class.

00:20:10.930 --> 00:20:13.250
Sometimes parents will enable
this restriction so that their

00:20:13.310 --> 00:20:17.010
children cannot purchase items
without them knowing about it.

00:20:17.800 --> 00:20:22.670
Keep in mind that the user can enable
or disable this restriction at any time.

00:20:22.820 --> 00:20:24.980
It's not a setting
that will change often,

00:20:25.110 --> 00:20:28.580
but do pay attention to it in order
to prevent confusion with your

00:20:28.580 --> 00:20:32.990
user by letting them try to buy
something that will ultimately fail.

00:20:34.550 --> 00:20:36.770
In order to show the
products you have for sale,

00:20:36.890 --> 00:20:41.240
you'll need to fetch the details
about the products from the app store.

00:20:41.290 --> 00:20:45.740
You do this by gathering up a list
of product IDs you want to present.

00:20:45.820 --> 00:20:48.910
This list could be baked into
your application directly,

00:20:48.930 --> 00:20:51.160
or for more flexibility,
you could dynamically load

00:20:51.160 --> 00:20:53.400
this list from your server.

00:20:53.460 --> 00:20:57.350
These product IDs would be the same
ones you entered in iTunes Connect,

00:20:57.350 --> 00:21:01.540
so watch out for things like typos
or changes in iTunes Connect that

00:21:01.540 --> 00:21:04.060
need to be reflected in your app.

00:21:05.080 --> 00:21:09.850
Once you have your product IDs,
you use the SK Products Request class in

00:21:09.890 --> 00:21:13.100
Store Kit to fetch the product details.

00:21:13.180 --> 00:21:16.380
These requests are asynchronous,
so you provide a delegate

00:21:16.400 --> 00:21:20.480
object that will be called back
after you start the request.

00:21:21.820 --> 00:21:24.380
After Store Kit fetches
the details from the store,

00:21:24.670 --> 00:21:29.880
your delegate will be called back using
ProductsRequestDidReceiveResponse method,

00:21:29.880 --> 00:21:33.140
passing an SK Products response object.

00:21:33.310 --> 00:21:38.820
The response object contains two arrays,
one in response.products and the other

00:21:38.820 --> 00:21:42.110
in response.invalid product identifiers.

00:21:42.240 --> 00:21:46.230
The Invalid Product Identifiers array
is the list of product IDs that are

00:21:46.510 --> 00:21:49.100
currently not available on the store.

00:21:49.270 --> 00:21:52.590
This could be because you don't
have the paid contracts in effect,

00:21:52.830 --> 00:21:56.490
you might have a typo in the product ID,
or the product may not

00:21:56.600 --> 00:21:58.290
be cleared for sale yet.

00:21:58.870 --> 00:22:03.680
The Response.Products array holds
instances of SK product representing

00:22:03.680 --> 00:22:08.580
the items that have been approved and
are actually available to be purchased.

00:22:08.640 --> 00:22:12.390
These objects hold the localized
product details and pricing information

00:22:12.390 --> 00:22:14.150
that can be shown to the user.

00:22:14.260 --> 00:22:16.840
So at this point,
you're now far enough along

00:22:16.840 --> 00:22:20.290
to let users shop and pick out
the items they want to buy.

00:22:20.480 --> 00:22:22.840
And remember,
only products with the "Cleared for

00:22:22.840 --> 00:22:27.430
Sale" flag set to "Yes" in iTunes
Connect will be returned here.

00:22:28.310 --> 00:22:30.900
Once the user has decided
what they want to purchase,

00:22:31.030 --> 00:22:32.800
they'll hit the Buy button.

00:22:32.960 --> 00:22:35.300
One of the major benefits
of In-App Purchasse is that

00:22:35.350 --> 00:22:39.200
Store Kit will handle all of
the payment processing for you.

00:22:39.340 --> 00:22:44.760
All you need to do is use the
SKPaymentQueue class to request payment.

00:22:44.870 --> 00:22:49.420
As you add payment requests to the queue,
Store Kit will asynchronously

00:22:49.480 --> 00:22:51.300
process those payments.

00:22:51.920 --> 00:22:55.300
You'll participate in the process
by providing a Transaction

00:22:55.300 --> 00:22:56.800
Observer on the queue.

00:22:56.980 --> 00:23:00.770
The Transaction Observer will be
notified as a payment request is updated.

00:23:00.800 --> 00:23:03.950
It's important that you register
your Transaction Observer in

00:23:03.950 --> 00:23:07.420
application did finish launching,
because payment requests may be

00:23:07.420 --> 00:23:12.270
updated in the background while
your application is not running.

00:23:12.380 --> 00:23:15.330
In order to get those updates,
you'll need to set up your

00:23:15.330 --> 00:23:19.530
Transaction Observer during your
application's launch sequence.

00:23:20.120 --> 00:23:23.870
To begin processing a payment,
you create an SK Payment object

00:23:24.040 --> 00:23:28.700
using one of the SK Product objects
which we saw earlier.

00:23:28.890 --> 00:23:33.040
For those of you familiar with pre-iOS
5 versions of In-App Purchasse,

00:23:33.150 --> 00:23:38.750
note that Payment with Product replaces
Payment with Product Identifier.

00:23:39.800 --> 00:23:42.540
Once you've done that,
you simply add the payment to

00:23:42.540 --> 00:23:46.800
the queue and Store Kit swoops
into action taking it from there.

00:23:48.100 --> 00:23:51.370
Store Kit will prompt the user for
confirmation and authentication

00:23:51.820 --> 00:23:55.500
with the familiar blue dialogues
like purchasing an app.

00:23:55.750 --> 00:23:59.520
Store Kit will call the Payment Queue
Updated Transactions method on your

00:23:59.580 --> 00:24:04.570
Transaction Observer when there are
updates to the purchases in the queue.

00:24:05.040 --> 00:24:08.740
This is where you would handle the
various states a purchase can be in.

00:24:08.780 --> 00:24:13.000
It might have completed successfully or
the user might have canceled the request.

00:24:13.350 --> 00:24:15.800
Regardless of what the outcome is,
this is your place to keep

00:24:15.870 --> 00:24:17.220
track of what's going on.

00:24:19.640 --> 00:24:22.830
Once a payment has completed,
you have access to a receipt

00:24:23.110 --> 00:24:25.160
for that transaction.

00:24:25.480 --> 00:24:28.370
This receipt is really important
and can be used to validate

00:24:28.370 --> 00:24:30.900
the transaction which was made.

00:24:31.010 --> 00:24:34.710
It's a cryptographically signed piece
of data and you can use it to get

00:24:34.800 --> 00:24:38.000
details about the purchase transaction.

00:24:38.610 --> 00:24:42.150
To verify a receipt,
you take a Base64 encoded version

00:24:42.240 --> 00:24:47.100
of the receipt and send it to the
App Store by way of a web-based API.

00:24:47.140 --> 00:24:49.910
There are two different entry
points depending on whether you're

00:24:49.910 --> 00:24:53.040
working in the sandbox environment
or the production environment.

00:24:53.100 --> 00:24:56.360
Once you've verified the receipt,
you can deliver the product

00:24:56.380 --> 00:24:57.790
to the user purchased.

00:24:58.260 --> 00:25:02.280
Receipt validation is imperative
for protecting against piracy.

00:25:02.330 --> 00:25:07.150
This is your front-line defense
against things like jailbroken phones.

00:25:08.330 --> 00:25:10.940
Let's take a look at the
transaction receipts you'll

00:25:10.940 --> 00:25:12.740
receive after a payment is made.

00:25:12.770 --> 00:25:16.090
After a successful transaction,
your application can access the

00:25:16.130 --> 00:25:21.740
Transaction Receipt property from the
resulting payment transaction object.

00:25:21.790 --> 00:25:25.410
It will be signed and will contain
information about the purchase,

00:25:25.410 --> 00:25:29.200
like an original transaction ID,
the date the purchase was made,

00:25:29.240 --> 00:25:33.450
the product ID,
the quantity the user bought, and so on.

00:25:38.600 --> 00:25:43.300
You can then take this
receipt and Base64 encode it,

00:25:43.430 --> 00:25:48.730
wrap it in a JSON payload and pass
it to the Web API for validation.

00:25:49.230 --> 00:25:54.980
It's best to do this on your server,
although it can also be done

00:25:54.980 --> 00:25:54.980
directly from your application.

00:25:57.090 --> 00:26:01.910
The verification server will reply with
a JSON response containing a status

00:26:02.030 --> 00:26:05.190
code along with the receipt details.

00:26:05.450 --> 00:26:11.150
A status code of zero indicates success,
letting you know that

00:26:11.150 --> 00:26:11.150
the transaction is valid.

00:26:12.750 --> 00:26:15.240
After the payment and
verification is complete,

00:26:15.410 --> 00:26:18.330
you can go ahead and unlock
the items from within your app,

00:26:18.460 --> 00:26:23.600
or if your content is served remotely,
deliver that content to the application.

00:26:25.600 --> 00:26:29.100
From your user's perspective,
the process is now complete.

00:26:29.220 --> 00:26:31.140
But as the developer,
you've got a little bit

00:26:31.140 --> 00:26:34.190
of final bookkeeping that
you need to take care of.

00:26:34.590 --> 00:26:37.520
During this whole process,
the SK Payment Object has been

00:26:37.530 --> 00:26:39.530
sitting in the Payment Queue.

00:26:39.630 --> 00:26:43.180
Once you've verified the receipt
and unlocked the product,

00:26:43.270 --> 00:26:46.060
the transaction is complete
and you need to remove the

00:26:46.060 --> 00:26:48.360
Payment Object from the queue.

00:26:48.430 --> 00:26:51.990
You do this by calling the
FinishTransaction method.

00:26:52.400 --> 00:26:54.590
Depending on the purchase
type you're using,

00:26:54.720 --> 00:26:58.230
you might also need to store the
receipt on your server in order

00:26:58.230 --> 00:27:02.600
to provide the purchased item
to the user's other devices.

00:27:02.910 --> 00:27:06.970
Finally, it's important to note that you
might not be able to perform the

00:27:07.080 --> 00:27:09.480
verification of the receipt immediately.

00:27:09.550 --> 00:27:12.130
The user might have lost
their network connection,

00:27:12.130 --> 00:27:12.980
for example.

00:27:13.060 --> 00:27:16.700
So it's best to not call
Finish Transaction until after

00:27:16.970 --> 00:27:20.960
you've received the response
from the Verification API.

00:27:21.030 --> 00:27:23.860
Let's talk about restoring transactions.

00:27:23.940 --> 00:27:29.290
Just like with songs, apps or movies,
a user who purchases a non-consumable

00:27:29.290 --> 00:27:32.690
item or a subscription must
be able to restore that item

00:27:32.790 --> 00:27:36.700
back to a device they have,
or to a new one.

00:27:36.790 --> 00:27:41.680
It's important to make the restoration
process easy and intuitive for users.

00:27:41.780 --> 00:27:45.110
Here are a couple examples of
apps that present the restore

00:27:45.110 --> 00:27:47.050
UI in a user-friendly location.

00:27:47.240 --> 00:27:50.860
Often developers will bury this
feature in the settings of their app,

00:27:50.920 --> 00:27:53.570
making it confusing for the
users who want to restore

00:27:53.700 --> 00:27:56.020
previously purchased items.

00:27:56.060 --> 00:28:01.090
So be sure to make this an easy and
intuitive operation for your users.

00:28:02.280 --> 00:28:07.260
If you are offering non-consumable,
auto-renewing or free subscriptions,

00:28:07.260 --> 00:28:12.190
you can use the Store Kit Restore
API to give the items back to the user.

00:28:12.400 --> 00:28:15.200
When a user clicks on
the Restore Purchases UI,

00:28:15.200 --> 00:28:20.180
you would call the Restore Completed
Transactions method in Store Kit.

00:28:20.640 --> 00:28:24.130
The user will be prompted for
their Apple ID and password,

00:28:24.180 --> 00:28:28.880
and then all their previous transactions
will be replayed to your application.

00:28:29.080 --> 00:28:31.920
Your app will see all the
transactions come through as if

00:28:31.920 --> 00:28:36.870
the user had just bought them,
but the user won't be charged again.

00:28:38.320 --> 00:28:41.720
So those are the steps required
for implementing In-App Purchas.

00:28:41.930 --> 00:28:44.830
Like I said, it may seem like a lot,
but it's really pretty

00:28:44.830 --> 00:28:48.200
straightforward and Store Kit does
most of the work for you.

00:28:49.840 --> 00:28:52.380
Now that you have things in
iTunes Connect set up and

00:28:52.380 --> 00:28:55.810
you've written your code,
it's time to turn your eye towards

00:28:55.810 --> 00:28:57.890
testing things in the Sandbox.

00:29:00.030 --> 00:29:02.340
In order to test
something in the Sandbox,

00:29:02.490 --> 00:29:06.700
the items should be in the Ready to
Submit state in iTunes Connect.

00:29:06.810 --> 00:29:09.920
So double-check that your items
are in this state before trying

00:29:09.940 --> 00:29:12.100
to access them in the Sandbox.

00:29:12.270 --> 00:29:15.940
You do not have to submit your
items for review in order to test

00:29:15.940 --> 00:29:18.390
them in the Sandbox environment.

00:29:19.750 --> 00:29:23.230
The Sandbox environment is completely
separate from the Production environment

00:29:23.630 --> 00:29:25.600
and you cannot mix the two.

00:29:25.680 --> 00:29:28.100
In order to test
purchases in the Sandbox,

00:29:28.140 --> 00:29:32.870
you'll need to create a test user account
for each country you want to test in.

00:29:33.250 --> 00:29:36.530
Because the environments are separate,
you cannot use an existing iTunes

00:29:36.540 --> 00:29:39.140
Store account for your test user.

00:29:39.220 --> 00:29:42.710
You will have to create a new
Apple ID for each test user,

00:29:42.710 --> 00:29:45.360
and you should be careful to
not use these test accounts

00:29:45.360 --> 00:29:47.200
in the production environment.

00:29:47.420 --> 00:29:51.600
If you do, then you won't be able to use
them in the sandbox anymore.

00:29:51.740 --> 00:29:57.450
Also note that email verification
is required for each test

00:29:57.450 --> 00:29:57.450
user you are setting up.

00:29:58.780 --> 00:30:02.470
The second thing to remember for testing
your In-App Purchases is to sign out

00:30:02.490 --> 00:30:05.200
of the store settings on your device.

00:30:05.310 --> 00:30:07.700
Make sure that no user is logged in.

00:30:08.070 --> 00:30:11.600
You should not log in with your
test user account in the store

00:30:11.620 --> 00:30:13.600
settings or in the app store.

00:30:13.690 --> 00:30:17.690
You'll be able to enter the test
user account username directly in the

00:30:17.690 --> 00:30:22.700
authentication dialogs when you test
your purchases from your application.

00:30:22.700 --> 00:30:26.460
You should also note that the
same test user accounts can

00:30:26.460 --> 00:30:28.700
work across both iOS and Lion.

00:30:28.700 --> 00:30:32.520
You do not need to create a separate
In-App Purchase test user for testing

00:30:32.520 --> 00:30:34.700
your items across the two platforms.

00:30:34.700 --> 00:30:39.060
However, a test user can only be
assigned to a single country,

00:30:39.060 --> 00:30:43.850
so you will need to create a different
test user for each country where

00:30:43.850 --> 00:30:46.370
your application is being sold.

00:30:47.560 --> 00:30:50.620
Lastly, remember that when you are
testing your purchases,

00:30:50.740 --> 00:30:54.990
you should verify your receipts
against the Sandbox Web Validation API,

00:30:55.270 --> 00:30:57.480
not the production one.

00:30:59.370 --> 00:31:01.760
Once you've tested everything
in the Sandbox environment and

00:31:01.760 --> 00:31:05.590
things are working for you,
you're ready to submit your app and

00:31:05.750 --> 00:31:08.200
In-App Purchas items for app review.

00:31:08.420 --> 00:31:11.600
There are a couple things I want
to point out about the app review

00:31:11.600 --> 00:31:14.040
process which can cause some confusion.

00:31:14.780 --> 00:31:17.710
To complete your setup,
you'll hit the Submit for

00:31:17.710 --> 00:31:20.070
Review button in iTunes Connect.

00:31:20.290 --> 00:31:25.380
This will send your In-App Purchas items
to the app review team for approval.

00:31:26.350 --> 00:31:29.340
When you first add In-App Purchasse
support to your application,

00:31:29.480 --> 00:31:32.840
you'll need to submit a new app
binary at the same time you submit

00:31:32.930 --> 00:31:34.940
your In-App Purchasse items.

00:31:35.080 --> 00:31:40.150
Subsequent editions of In-App Purchasse
items can be submitted without a binary.

00:31:41.450 --> 00:31:44.390
Normally, while you're doing your
development and testing,

00:31:44.580 --> 00:31:47.090
your development-signed
application is using the sandbox

00:31:47.150 --> 00:31:49.300
environment for In-App Purchases.

00:31:49.470 --> 00:31:53.370
That's pretty straightforward,
and your app will use the Sandbox

00:31:53.370 --> 00:31:55.310
Receipt Verification APIs.

00:31:55.600 --> 00:31:59.420
After AppReview has approved your
application and users download it,

00:31:59.420 --> 00:32:02.930
the production-signed version of
your application will be talking

00:32:02.930 --> 00:32:04.800
to the production environment.

00:32:04.940 --> 00:32:06.940
That's also pretty straightforward.

00:32:07.060 --> 00:32:09.710
In this situation,
your app will be using the

00:32:09.710 --> 00:32:12.450
production receipt verification APIs.

00:32:12.560 --> 00:32:16.180
The confusion comes in during
the AppReview process itself,

00:32:16.290 --> 00:32:19.060
where the AppReview team is
using a production-signed

00:32:19.060 --> 00:32:22.490
version of your application,
but testing them against

00:32:22.490 --> 00:32:24.260
the sandbox environment.

00:32:24.340 --> 00:32:28.330
since your in-app purchase
items haven't yet been approved.

00:32:28.820 --> 00:32:32.370
This means that your application
needs to be prepared to handle sandbox

00:32:32.370 --> 00:32:35.860
receipts in a production application.

00:32:36.080 --> 00:32:40.020
It's not uncommon for developers
to take a sandbox receipt and

00:32:40.020 --> 00:32:45.080
inadvertently send it to the
Production Receipt Verification APIs.

00:32:45.180 --> 00:32:49.630
If you do this,
you'll get back a 21007 status

00:32:49.630 --> 00:32:51.940
code indicating an error.

00:32:52.020 --> 00:32:55.080
There are a couple ways you
can handle this situation.

00:32:55.670 --> 00:32:59.320
The simplest is to always use the
production verification APIs and

00:32:59.320 --> 00:33:02.440
then watch for that status code
that indicates you've sent a sandbox

00:33:02.440 --> 00:33:04.740
receipt to the production server.

00:33:04.820 --> 00:33:07.900
If you get this status code back,
then you can just simply turn

00:33:07.900 --> 00:33:13.530
around and re-issue the verification
request to the sandbox URL instead.

00:33:13.620 --> 00:33:16.960
Since this situation really
only happens during app review,

00:33:17.020 --> 00:33:19.800
it's pretty uncommon,
but it is worth paying attention

00:33:19.800 --> 00:33:24.520
to since it can cause problems
during the app review process.

00:33:26.110 --> 00:33:29.800
Now that we've covered the details of
adding In-App Purchasse of consumable and

00:33:29.800 --> 00:33:34.060
non-consumable items to your application,
let's move on to the newest

00:33:34.060 --> 00:33:38.220
type of In-App Purchasse:
Auto-Renewable Subscriptions.

00:33:40.060 --> 00:33:43.020
First, let's take a look at the
differences between subscriptions

00:33:43.100 --> 00:33:45.500
and the other purchase types.

00:33:45.760 --> 00:33:48.530
With subscriptions,
the developer is responsible

00:33:48.620 --> 00:33:52.400
for validating receipts in order
to verify the subscriptions.

00:33:52.560 --> 00:33:56.800
You'll need to do this in order to
determine whether a subscription is

00:33:56.800 --> 00:34:02.230
currently active or to determine the date
ranges that the subscription covered.

00:34:03.570 --> 00:34:08.300
Second, when doing receipt verification,
an additional layer of security is used

00:34:08.300 --> 00:34:13.730
in the form of a shared secret that
you pass along in the JSON request.

00:34:15.130 --> 00:34:19.210
Third, auto-renewable subscriptions
allow you to offer a marketing

00:34:19.210 --> 00:34:22.120
opt-in incentive to your users.

00:34:22.280 --> 00:34:25.830
When users opt-in, they agree to provide
you with their name,

00:34:26.120 --> 00:34:29.350
email address and zip code,
and in return,

00:34:29.700 --> 00:34:34.880
you agree to give them a small free
extension on their initial subscription.

00:34:35.030 --> 00:34:40.150
The publisher is responsible
for determining and displaying

00:34:40.150 --> 00:34:41.870
this duration bonus,
and it can be up to three months.

00:34:43.180 --> 00:34:45.960
Since you may have the option
to collect user data via the

00:34:45.960 --> 00:34:49.880
marketing opt-in incentive,
a privacy URL for your company

00:34:49.880 --> 00:34:53.940
is required and is displayed
on customers' invoices.

00:34:54.060 --> 00:34:57.730
We want to be sure that our users
understand how their personal

00:34:57.740 --> 00:34:59.670
information is being used.

00:34:59.830 --> 00:35:03.200
There are also a couple additional things
you'll need to do in iTunes Connect,

00:35:03.320 --> 00:35:05.040
so let's take a look at those now.

00:35:05.290 --> 00:35:08.700
First, you'll provide a reference
name for your subscription.

00:35:08.830 --> 00:35:11.260
This is just a name you
give to your collection of

00:35:11.330 --> 00:35:13.540
subscriptions in your application.

00:35:13.740 --> 00:35:16.460
Keep in mind that this is
never displayed to a user.

00:35:16.740 --> 00:35:23.120
It's only shown in your iTunes
Connect sales reports and in

00:35:23.120 --> 00:35:23.120
the iTunes Connect mobile app.

00:35:23.850 --> 00:35:26.900
Next, you'll provide the
Display Name for your item.

00:35:27.110 --> 00:35:30.330
This is the name that will appear
next to the Buy button in your

00:35:30.330 --> 00:35:32.190
app and it can be localized.

00:35:32.530 --> 00:35:37.180
Users will also see this name in the
Manage Subscription pages in iTunes

00:35:37.180 --> 00:35:39.890
and in their confirmation emails.

00:35:41.080 --> 00:35:44.270
Now you can determine your subscription
durations as well as provide the

00:35:44.480 --> 00:35:47.430
product identifier for each duration.

00:35:47.590 --> 00:35:50.510
Remember that the product
identifier is what you pass to the

00:35:50.620 --> 00:35:54.840
App Store via Store Kit in order to
determine which subscriptions your

00:35:54.840 --> 00:35:57.760
application can offer the user.

00:35:57.930 --> 00:36:01.020
Incentive duration is the field
you populate if you plan on

00:36:01.020 --> 00:36:05.170
offering that marketing opt-in
incentive for your subscription.

00:36:05.880 --> 00:36:08.800
For your product IDs,
it's a good practice to encode the

00:36:08.800 --> 00:36:12.840
durations into your identifiers
in order to easily know which

00:36:12.840 --> 00:36:14.740
duration the user chose.

00:36:14.820 --> 00:36:17.640
For example,
you might just append an indicator to

00:36:17.640 --> 00:36:22.820
the end of your product IDs to show
what duration the purchase was for.

00:36:23.990 --> 00:36:27.100
Now you can add the URL to
your privacy policy.

00:36:27.170 --> 00:36:30.880
This will appear on customer
invoices and in the App Store itself.

00:36:33.120 --> 00:36:36.400
One note about displaying
privacy policies.

00:36:36.420 --> 00:36:40.000
If you plan to include them
within your application,

00:36:40.050 --> 00:36:44.830
make sure they are embedded directly
within the app and not presented as a

00:36:44.830 --> 00:36:49.680
hyperlink that would take the user out
of your application and over to Safari.

00:36:49.760 --> 00:36:53.600
If you link outside of your app,
the app review team will request

00:36:53.600 --> 00:36:55.750
that you change this behavior.

00:36:57.190 --> 00:36:59.500
Within iTunes Connect,
you'll now be able to

00:36:59.500 --> 00:37:02.500
generate the Shared Secret,
which you'll use when making requests

00:37:02.580 --> 00:37:05.060
to the Receipt Validation Service.

00:37:05.210 --> 00:37:09.590
This Shared Secret can be used across
all of your auto-renewable subscriptions,

00:37:09.720 --> 00:37:11.880
so you only need one.

00:37:13.630 --> 00:37:17.000
Let's take a look at how this
all looks to the end user.

00:37:17.120 --> 00:37:19.900
In the Manage Subscriptions
section of the App Store,

00:37:20.030 --> 00:37:24.890
the user will first be presented with the
apps for which they have subscriptions.

00:37:25.370 --> 00:37:28.630
Clicking on an app will reveal
the display name that you entered

00:37:28.630 --> 00:37:31.440
in iTunes Connect for the item.

00:37:32.070 --> 00:37:35.260
And clicking on each display
name will reveal the offer

00:37:35.260 --> 00:37:37.340
names for the subscriptions.

00:37:37.530 --> 00:37:40.080
As you can see,
these are tied directly to

00:37:40.080 --> 00:37:41.900
the product identifiers.

00:37:41.990 --> 00:37:44.680
The user can always choose
a different duration,

00:37:44.680 --> 00:37:48.900
which will take effect on the next
auto-renewal of their subscription.

00:37:49.130 --> 00:37:53.400
This is also where users can opt out of
the auto-renew functionality altogether.

00:37:53.560 --> 00:37:56.790
It's really as simple as
just flipping a switch.

00:37:57.870 --> 00:38:01.560
When you look at the invoice a
user receives after subscribing,

00:38:01.640 --> 00:38:04.100
you'll see all the familiar fields.

00:38:04.230 --> 00:38:06.980
First, there's the display name
of the subscription,

00:38:07.070 --> 00:38:11.920
followed by the app name,
then the offer name, and lastly,

00:38:12.010 --> 00:38:14.480
the privacy URL you provided.

00:38:14.540 --> 00:38:18.600
One important note if you choose to
offer auto-renewable subscriptions:

00:38:18.670 --> 00:38:23.120
don't forget to update your base
application's metadata with information

00:38:23.120 --> 00:38:25.880
about your auto-renewing subscriptions.

00:38:25.950 --> 00:38:31.720
Make sure all the information in
the Paid Applications Contract,

00:38:31.730 --> 00:38:33.450
Section 3.8b,
is included in the application

00:38:33.510 --> 00:38:35.240
description on the store.

00:38:35.300 --> 00:38:38.600
This includes items such
as your privacy policy,

00:38:38.600 --> 00:38:41.700
durations, and auto-renewing policies.

00:38:42.960 --> 00:38:45.200
When we previously
discussed implementation,

00:38:45.260 --> 00:38:48.900
we covered all of these steps,
and for auto-renewable subscriptions,

00:38:48.980 --> 00:38:51.250
almost all of these are exactly the same.

00:38:51.590 --> 00:38:55.760
The only change you'll have to make
is how you handle receipt validation.

00:38:55.990 --> 00:38:58.600
As we saw earlier,
the App Store will pass back

00:38:58.600 --> 00:39:02.900
a transaction receipt to
your app after a purchase.

00:39:02.950 --> 00:39:06.900
You'll get back a receipt for the
original purchase of the subscription,

00:39:06.920 --> 00:39:10.310
and then each time the
subscription automatically renews,

00:39:10.310 --> 00:39:14.800
a new transaction will be generated,
and each of these transactions has

00:39:14.800 --> 00:39:17.300
its own receipt to go along with it.

00:39:17.410 --> 00:39:21.090
When considered all together,
these receipts paint the picture of the

00:39:21.160 --> 00:39:24.100
timeline of your user's subscription.

00:39:24.140 --> 00:39:27.990
This is the information you would
use to determine what specific dates

00:39:28.310 --> 00:39:31.480
a user's subscription was valid for.

00:39:33.220 --> 00:39:37.440
The receipts you get for auto-renewable
subscriptions will differ slightly.

00:39:37.620 --> 00:39:41.220
Let's take a look at the fields
you'll find in this type of receipt.

00:39:41.580 --> 00:39:44.090
The first is that you will
find the purchase date.

00:39:44.240 --> 00:39:47.700
For non-consumables,
this corresponds to either the date

00:39:47.700 --> 00:39:53.530
of the original download or the date
an item was last restored to a device.

00:39:53.760 --> 00:40:00.510
For auto-renewables though,
this will always be the date of

00:40:00.510 --> 00:40:00.510
the original buy or of a renewal.

00:40:01.850 --> 00:40:04.680
You'll also get an
original transaction ID.

00:40:04.720 --> 00:40:09.440
This will be constant across all receipts
a user has for a particular subscription.

00:40:09.600 --> 00:40:13.880
So it's a good candidate for
something like a customer ID.

00:40:14.560 --> 00:40:19.160
You'll get an expiration date and lastly,
we'll always include the latest receipt

00:40:19.160 --> 00:40:24.670
information with every receipt for handy
reference to the most recent transaction.

00:40:25.570 --> 00:40:28.520
If a subscription has expired,
you'll get the latest

00:40:28.590 --> 00:40:30.170
expired receipt instead.

00:40:32.710 --> 00:40:35.720
When verifying an auto-renewable
subscription receipt,

00:40:35.870 --> 00:40:39.400
the JSON response from the
App Store will contain a status,

00:40:39.630 --> 00:40:43.860
the receipt you passed,
as well as the latest receipt info.

00:40:47.260 --> 00:40:51.900
Now a status code of 0 will indicate
that a subscription is currently valid,

00:40:51.970 --> 00:40:55.030
but you can also get one of
these other status codes back.

00:40:55.270 --> 00:41:00.960
I'd like to focus on
status 21006 and 21007.

00:41:01.110 --> 00:41:05.200
As I mentioned before,
the status code of 21007 indicates

00:41:05.200 --> 00:41:09.000
that a sandbox receipt was
sent to the production server.

00:41:09.080 --> 00:41:12.200
You might see this status
code during app review.

00:41:12.250 --> 00:41:18.240
21006 is the status code that indicates
a subscription is no longer active.

00:41:18.300 --> 00:41:20.810
Most commonly,
this would tell you your user

00:41:20.810 --> 00:41:24.760
turned off auto-renewal and
let the subscription expire.

00:41:24.890 --> 00:41:28.100
But there's an edge condition where
this might happen when the subscription

00:41:28.190 --> 00:41:30.740
hasn't reached the expiration date.

00:41:30.790 --> 00:41:35.000
Users cannot normally cancel
subscriptions partway through a duration.

00:41:35.060 --> 00:41:40.120
They can only turn off the auto-renewal
at the end of the current duration.

00:41:40.300 --> 00:41:43.600
In some rare cases,
iTunes customer support will

00:41:43.600 --> 00:41:48.280
cancel a subscription midstream
and in those cases you'll get the

00:41:48.280 --> 00:41:53.700
21006 status code indicating the
subscription has been cancelled.

00:41:54.030 --> 00:41:56.800
Now let's talk about
restoring subscriptions.

00:41:56.830 --> 00:42:00.940
Just like physical magazines don't
vanish when a subscription expires,

00:42:00.980 --> 00:42:03.700
we don't think digital
ones should either.

00:42:03.740 --> 00:42:08.400
This is a key takeaway with regard to
restoring auto-renewable subscriptions.

00:42:08.440 --> 00:42:12.200
When a user chooses to restore
an auto-renewable subscription,

00:42:12.210 --> 00:42:15.360
you'll need to make sure you
give the user access to all

00:42:15.360 --> 00:42:17.560
the issues they're entitled to.

00:42:17.610 --> 00:42:21.200
You can do this with the Restore
Previous Transactions API.

00:42:21.250 --> 00:42:24.870
You'll get back a receipt for
the original subscription as

00:42:24.870 --> 00:42:26.940
well as each renewal period.

00:42:26.990 --> 00:42:30.380
You can then pass each of these
receipts for verification,

00:42:30.420 --> 00:42:34.400
and the purchase and expiration
dates will let you know what

00:42:34.400 --> 00:42:36.680
content a user qualifies for.

00:42:36.730 --> 00:42:39.410
If you're selling
content or publications,

00:42:39.410 --> 00:42:41.360
this is very valuable to you.

00:42:41.420 --> 00:42:46.880
However,
if you're selling access to a service,

00:42:46.880 --> 00:42:46.920
such as a streaming,
audio or video service,

00:42:46.970 --> 00:42:49.160
you may not care about the date ranges.

00:42:49.200 --> 00:42:53.300
You really only care if the
subscription is currently active.

00:42:53.350 --> 00:42:55.340
When we talk about
renewing subscriptions,

00:42:55.340 --> 00:42:58.040
the beauty is that they
will automatically renew,

00:42:58.040 --> 00:43:01.160
so you don't have to worry about
posting dialogues or notifications

00:43:01.160 --> 00:43:03.040
about expiring accounts.

00:43:03.130 --> 00:43:05.590
However,
there are circumstances where a user

00:43:05.670 --> 00:43:09.920
may click on the Buy button when they
already have an active subscription.

00:43:09.990 --> 00:43:13.610
In this case, the user will receive a
dialogue explaining that the

00:43:13.610 --> 00:43:16.280
subscription is active and
they will not be charged again.

00:43:16.280 --> 00:43:20.080
They'll be given a link to
the Manage Subscription page,

00:43:20.260 --> 00:43:22.830
which will allow them to
edit their subscription if

00:43:22.830 --> 00:43:24.550
that's what they wanted to do.

00:43:24.790 --> 00:43:28.650
Since this might be confusing to a user,
you might want to avoid

00:43:28.650 --> 00:43:30.700
this situation altogether.

00:43:30.750 --> 00:43:33.700
If your app has already
validated a user's subscription,

00:43:33.700 --> 00:43:37.680
you shouldn't even present the
option to buy the subscription again.

00:43:37.970 --> 00:43:40.660
However,
if the user's subscription has expired,

00:43:40.910 --> 00:43:43.580
then you should allow them to
buy the subscription again.

00:43:43.700 --> 00:43:47.700
This will let the user
renew right within the app.

00:43:48.010 --> 00:43:50.620
While the experience is
similar to the original buy,

00:43:50.700 --> 00:43:53.340
one difference is that they
will not be presented with the

00:43:53.420 --> 00:43:56.500
marketing opt-in incentive again.

00:43:57.050 --> 00:44:01.990
Two points here are that renewals
typically occur a few hours before

00:44:01.990 --> 00:44:06.230
expiration and that if the price
of your subscription goes up,

00:44:06.230 --> 00:44:10.750
auto-renew will be disabled and the
user will be notified via email.

00:44:12.120 --> 00:44:14.660
Just like with other types
of In-App Purchasese,

00:44:14.760 --> 00:44:18.520
you'll follow the same steps to
test in the Sandbox environment.

00:44:19.020 --> 00:44:23.450
One key point to note is that when you
are testing auto-renewables in a sandbox,

00:44:23.450 --> 00:44:26.390
there is a limit of six
renewals per purchase,

00:44:26.540 --> 00:44:29.100
and then the subscription will expire.

00:44:29.310 --> 00:44:32.530
This allows you to test a wide
variety of scenarios and make

00:44:32.570 --> 00:44:37.200
sure that your app handles receipt
verification correctly for each of them.

00:44:37.320 --> 00:44:40.310
You should obviously test how
your app responds to the base

00:44:40.310 --> 00:44:43.270
case of the subscription expiring.

00:44:43.550 --> 00:44:47.870
Then you should move on to test the
more complex cases like non-contiguous

00:44:47.870 --> 00:44:53.040
renewal histories as well as
changing durations between renewals.

00:44:53.100 --> 00:44:57.050
You want to make sure your application
handles the wide variety of renewals

00:44:57.050 --> 00:44:59.080
and time periods that can happen.

00:44:59.160 --> 00:45:02.900
Be sure to verify you handle these
situations correctly after doing a

00:45:02.900 --> 00:45:05.890
restore to a different device as well.

00:45:06.540 --> 00:45:10.180
Also, the subscription durations are
accelerated in the sandbox environment,

00:45:10.250 --> 00:45:12.960
so you don't have to wait a
whole year just to make sure

00:45:12.960 --> 00:45:14.800
your app is working right.

00:45:15.000 --> 00:45:17.520
The values are displayed in this table.

00:45:17.630 --> 00:45:21.200
Be sure to keep these shortened
durations in mind while you're testing.

00:45:21.350 --> 00:45:24.330
You could easily get up and leave your
computer to get a cup of coffee and

00:45:24.340 --> 00:45:29.000
find that your subscription has already
renewed six times and now it's expired.

00:45:29.120 --> 00:45:32.670
It's pretty common to do development
using the longer durations like six

00:45:32.670 --> 00:45:36.790
months and a year since that gives
you more time to get work done.

00:45:37.240 --> 00:45:40.100
Finally,
the Managed Subscription Interface

00:45:40.100 --> 00:45:42.140
is not available in the Sandbox.

00:45:43.110 --> 00:45:46.030
Well, that covers all the details about
auto-renewable subscriptions that

00:45:46.030 --> 00:45:50.500
I wanted to talk about and brings
us to an end of this presentation.

00:45:50.580 --> 00:45:54.260
Now you have all the details you
need to integrate In-App Purchasse

00:45:54.260 --> 00:45:55.880
into your application.

00:45:55.980 --> 00:45:58.180
By paying attention to
the highlighted tips,

00:45:58.270 --> 00:46:01.270
you can avoid some of the
common issues and have a smooth

00:46:01.270 --> 00:46:03.720
implementation experience.

00:46:03.790 --> 00:46:06.630
You'll find that it won't take long
before you're offering compelling

00:46:06.910 --> 00:46:11.820
and exciting products with a familiar
and convenient user experience.

00:46:11.890 --> 00:46:14.560
And I'm sure you'll enjoy the
additional revenue potential.