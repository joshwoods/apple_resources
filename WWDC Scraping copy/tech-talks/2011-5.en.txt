---
Title:  Newsstand Apps from Start to Finish
Year:   2011
Web:    https://nonstrict.eu/wwdcindex/tech-talks/2011-5/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

So way back in the good old days, you know, four or five years ago before iPhone came out, this was the most common experience for buying software. You'd go to a physical store and see all of these boxes on shelves, and they'd all be strongly branded to the product and to the company that is selling the product. And you could pick up one of these boxes, flip it over, and see more details about the software that you were about to buy. For example, maybe some screenshots and a short text description.

And in a lot of ways, this experience is really mimicked virtually on the App Store. So this is the new and noteworthy section of the games category on the App Store. Each app icon is sort of analogous to the front of a software box that you'd see in a physical real-world store. And if you were to tap on one of these icons, you'd see more details about this app. A written description and some images. This is kind of like the back of the box that you'd see in a real world store.

So this model is great for many types of apps, but it isn't quite right for magazine and newspaper publications. Buying items from a newsstand in real life is different. For one thing, if I were to come back here week after week or month after month, I'd see the covers of these publications change. They'd still be branded to the company selling the publication, in many cases due to the title, but the cover art and headlines would change to let me know what's inside and to entice me to buy.

Another way that magazines and newspapers are different is that you can often subscribe to one of these publications and have it delivered right to your door. So as you can see, the experience of buying a periodical in real life is really quite a bit different than the experience of buying a piece of software, or what we would now call an app. And actually, there are some aspects of the real-life Newsstand experience that would be very handy for iOS apps that deliver magazine or newspaper content.

To that end, we introduced a new feature in iOS 5, Newsstand. Now Newsstand has two aspects to it. There is the end user aspect, where magazine and newspaper apps are automatically collected into a single location and displayed on a shelf similar to a real life Newsstand. And then there's the developer aspect, a set of APIs that let you create a Newsstand app called Newsstand Kit. Using Newsstand Kit in your app lets you do several things. You can display a cover that is different than the standard app icon, which looks like the real world version of your publication.

You can update that cover to reflect the latest issue, both on the user's device and in the App Store. And most importantly, Newsstand apps can download new content in the background so that it's ready and waiting for users when they launch your app. Before Newsstand, a typical scenario would be that a user would launch a magazine or newspaper app and then they'd have to wait for the latest issue to be downloaded. If the issue was large, this could take several minutes. So this was not a great user experience.

There's one other aspect of Newsstand that is really great, and that is that Newsstand is a dedicated category on the App Store. So that means that magazine and newspapers that the user has bought are collected in one place on the device, and all magazine and newspaper apps are collected in one place on the App Store, making it very easy for users to discover new content. There's two ways that users can access this dedicated category. They can tap the Store button from within Newsstand. or they can use the App Store app or iTunes.

In fact, after Newsstand made its debut, CondiNASP published some sales data. After converting to Newsstand, sales of single copies increased by 142% and sales of subscriptions increased by 268%. The dedicated category on the App Store makes Newsstand apps easy to discover and the Newsstand Kit APIs make it easier to deliver content with a great user experience. So let's get started talking about newsstand apps. In the first section, I'm going to help you understand what makes a great Newsstand app and what's expected for Newsstand apps so that you can determine whether or not Newsstand is right for you.

In the next section, I'm going to discuss implementation, how to get started with Newsstand Kit, considerations for the architecture of your app, and best practices when using the Newsstand Kit APIs. And finally, I'm going to talk about distribution, some tips for testing, and what you need to know about iTunes Connect if you're a Newsstand app.

Regarding implementation, we went into a lot of implementation details at WWDC in 2011. I'm going to try not to repeat all of the details at that WWDC session and instead focus on what we've learned since Newsstand Kit was introduced. If you watch this video and decide that Newsstand is right for you, you should definitely watch session 504, Building Newsstand Apps, which can be found at this URL. So with that, let's get started understanding newsstand apps.

When it comes to designing and creating a Newsstand app, there is a single great guiding principle to keep in mind, and that is that your Newsstand app should be like the real-world paper version of your publication, only better. So there are a couple key points that go along with this principle. The first point here is simple. For Newsstand, we primarily expect to see apps that emulate publications found at a real-world newsstand. That, of course, includes things like newspapers and magazines. This definition might vary by region because newsstands in different countries may carry different types of content.

In all regions, however, a Newsstand app on iOS should not include a collection of several different titles for sale. For example, if your app currently sells three different titles, you should create three Newsstand apps, one for each of your three titles for sale. A Newsstand app should always correspond to a single title. Finally, you might be considering Newsstand so that your app can use the feature that allows background downloading. If you're only considering Newsstand to take advantage of this feature and your app doesn't contain any print content, then Newsstand is probably not right for you.

The second point is that you should use familiar models to sell and distribute content within your app. The first model of content delivery is simple. You can offer individual issues for sale within your Newsstand app as non-consumable items. But what about this model, where something is delivered to the user automatically without any explicit user action? Well, let's start by taking a look at how this works behind the scenes.

There are three components involved here: your server, the Apple Push Notification Service, and the user's device. Your server sends a message to the Apple Push Notification Service, which in turn sends a notification. You're in control of when this notification is sent, and you control which devices the notification is sent to. To initiate background downloading, the payload of this notification should be contentAvailable = 1.

When the iPhone or iPad receives the notification, your app is woken up in the background. It's then able to request content from your server and download the latest issue. Your Newsstand app is allowed one background download in a 24-hour period. So as you can see, all of this is happening automatically in the background. The user hasn't taken any explicit action to download the latest issue. So how does a user opt in to receiving content in this way? How do they know that they should expect and anticipate new content from your Newsstand app?

Well, the best approach for this type of automatic delivery of content is to offer it via a subscription. In fact, all Newsstand apps must offer a subscription for sale. There are two types of subscriptions available for Newsstand apps: auto-renewable subscriptions and free subscriptions. Auto-renewable subscriptions are available to any type of app on iOS, but free subscriptions are something new that we created just for Newsstand apps.

If you're delivering an issue as part of a subscription, that issue must be delivered via a background download. When a user subscribes to your content, they're going to expect it to be ready and waiting for them when they launch your app. Don't attempt to download the issue after the user has launched your app. Making the user wait in that way is exactly the kind of poor user experience that Newsstand was designed to alleviate. So there are quite a few benefits to letting users subscribe to your content.

The first is that users will come to expect and anticipate new issues of your publication. Not only will they be looking forward to receiving new content, but you know as your app receives new issues, the size of your app is going to grow over time. If a user hasn't opted into a subscription, they might be wondering why your app is getting larger and larger when they look at it in Settings, and they might even delete it.

Auto-renewable subscriptions let you offer an opt-in incentive. For some publishers, it's very important to collect the user's contact information so that they can market to them later on. With an auto-renewable subscription, you can offer them a free issue or even a few free issues of your publication in exchange for their contact info. Auto-renewable subscriptions, as their name suggests, renew automatically. This means the user can opt out of a subscription at any time, but if they choose not to, then it will renew automatically.

Free subscriptions never expire, so there's very little action that you have to take once they're set up. No expiration date to check on. And finally, using a subscription lets you focus on creating great content. You don't have to come up with a new way to deliver content on an ongoing basis. You can just use our APIs and our infrastructure for this, and you don't have to spend your time reinventing the wheel.

Okay, so that's it for subscriptions. A subscription is the right model for delivering issues to your app via background downloading. But, as I mentioned earlier, your Newsstand app is only allowed to perform one background download in a 24-hour period. For some apps, delivering up-to-the-minute breaking news is just as critical as delivering a standalone issue. Newsstand apps can also update themselves with breaking news throughout the day. To do this, you'll have to download a small amount of content when the app is launched. Remember, this should only take a few seconds because you should only be downloading a few pieces of breaking news.

Also, remember that although your Newsstand app can receive a special kind of notification to initiate a background download, it can also receive other types of notifications. This means that you can deliver notifications with a message, such as the headline of a breaking story. And this is actually a really nice experience with Notification Center on iOS 5. So here, I've put my iPad aside for a few hours, and when I came back to it, I had several notifications waiting for me, letting me know about breaking news that was happening throughout the day.

So just to recap the different ways that you can sell and distribute content in your Newsstand app. You can have a Newsstand app that offers only a subscription. You can have a Newsstand app that offers a subscription and individual non-consumable items for sale. Your Newsstand app can optionally offer breaking news. But you can't have a Newsstand app that offers only individual, non-consumable items for sale. And you can't have a Newsstand app that offers only breaking news.

So that's it for models of content delivery. And the third point is to remember to create content that is optimized for the platform. A lot of this advice might sound familiar to you if you've used an iPad or an iPhone before, but I just want to drive home a few key points that are relative to magazine and newspaper content.

The first is to take advantage of the display. iPads and iPhones have really beautiful displays, and the best magazines and newspapers definitely take advantage of it. On the left, we see this beautiful cover art for Wired Magazine. On the right, the layout on the inside is putting the photograph front and center, using an interesting font for the title, and an interesting layout to navigate through the article.

You should also remember to take advantage of iPhone and iPad's multi-touch interface. So lots of apps have swiping between pages, but you can take advantage of the multi-touch interface within a single page as well. So on the left we have this photograph of this machine, and as I tap different areas of this display, I get more information about this machine. On the right hand side, we have a timeline implemented of the Ghostbusters movie franchise, so a user can swipe right and left to get more information from this timeline.

Finally, remember to utilize iOS SDK technologies within your Newsstand app. So these devices, iPads and iPhones, they're always connected. So you can easily tap a link to send an email or make a phone call from within your Newsstand app. Audio and video is a great way to supplement the written print experience.

And don't forget about the rest of the iOS SDK. Your Newsstand app should be like your real-world paper publication, only better. Use APIs that you might think at first are atypical for a magazine or newspaper. For example, you could use the Location APIs to deliver content that is specific to that user's location. Or you could use the Twitter APIs to allow a user to tweet about an article that they've read within your app. So that's it for understanding Newsstand apps. Now let's move on to implementing Newsstand apps.

So as you know, Newsstand has this really great display. It's this beautiful shelf with all of these publications kind of lying against the shelf. And it's actually pretty easy to make your app appear in the Newsstand. All that you have to do is set a single key in your Info.plist file. You set the key UINewsstandApp to true.

And there you go. Your app is now appearing in the Newsstand. So even though my app is showing up, it's a white star on a blue background, my application icon doesn't look as good as everything else that's currently in the Newsstand. That's because my app icon is still using the standard app icon and I should be supplying a special icon that's just for Newsstand.

So the first thing that you need to do is create the cover art for your Newsstand app icon. Like any iOS icon, you should start with a flat image. And there are different size recommendations for different devices. On iPhone, the longest edge of your Newsstand app icon art should be 90 pixels. And the longest edge can be in the vertical direction or the horizontal direction.

On iPhone 4, the longest edge should be 180 pixels. And on iPad, the longest edge should be 126 pixels. In all of these cases, the aspect ratio should be between 1:2 and 2:1, meaning that your Newsstand app icon shouldn't be dramatically taller than it is wide or dramatically wider than it is tall. So now that we have created the art for our Newsstand app, it's time to actually use this art inside of our app.

What we have to do here is modify our Info.plist file. So this is what our Info.plist file would have looked like on iOS 4.3. We have a top level CFBundle icon files key, and the value for that key is an array of strings that point to all of our different icon files. In iOS 5, for Newsstand, there's a new top-level Info.plist key. That key is called CFBundle Icons and it lets you point to a dictionary of icon styles. We're going to be using two different styles in our Newsstand app: CFBundle Primary Icon and UI Newsstand Icon.

So let's go back to our Info.plist file. At the top level, we're going to have our new key, CFBundleIcons. Then we have a dictionary where the first key is CFBundle primary icon. And the value for that key is really just what we saw in our Info.plist file for iOS 4.3.

In fact, we could have just copied and pasted from that file into this new file. We're going to collapse that area. And we're going to add a new Newsstand style key, UI Newsstand icon. And the dictionary value for that key is our list of CFBundle icon files that point to our different Newsstand images.

So if you're looking to make a single app that is compatible with iOS 4.3 and iOS 5, there's good news. CFBundle Icons is required for Newsstand apps in iOS 5, but it can coexist with icon keys for earlier versions of iOS. You noticed that we kept our standard app icon around with CFBundle primary icon. That's because even though our magazine or newspaper cover is displayed inside of Newsstand, we still need the standard app icon for other places on the system, such as Settings, Search, and Notifications.

So we've created the art for our Newsstand app icon. We're pointing to it in our Info.plist file. And now it's time to add some real-world styling. So to do this, we're just going to keep modifying our Info.plist file. So here we have our Newsstand style key and icon files. And we're going to add a couple more keys: UINewstandBindingType with a value of UINewstandBindingTypeNewspaper and UINewstandBindingEdge with a value of UINewstandBindingEdgeBottom. So this is telling iOS that I want my Newsstand app icon to look as if it's bound like a newspaper on the bottom edge.

So there are several different types of adornments that you can add to your Newsstand app icon. We saw a couple in our Info.plist file, but you can specify a UINewstandBindingType magazine. That will add two adornments to your Newsstand app icon. It'll give you staples on one side and a little stack of pages on the opposite side.

If you specify UI Newsstand binding type newspaper, your Newsstand app will get this sort of stacked effect where it looks like a stack of papers. And you'll see a subtle shading on the bound edge to indicate a fold. So these are the two binding types, UI Newsstand binding type magazine and UI Newsstand binding type newspaper. Magazines can be bound on the left or right edge, and newspapers can be bound on the left edge, the right edge, or the bottom edge.

So we can add these decorations to our Newsstand app icon by modifying Info.plist, but when exactly are they supposed to show up? Well, I like to say that these decorations are displayed when your publication is off the shelf or lying flat. So this means that the staples and stacks decorations will show up in the app switcher and also in the app store.

These decorations are not applied when your Newsstand app is lying on the shelf. In this case, a 3D transform is going to be automatically applied to give perspective to your Newsstand app icon and make it look like it's lying flat against that angled shelf. In this view, if you specify a binding type of newspaper and a binding edge of the bottom, you'll see a subtle shading effect to indicate a fold at the bottom of your newspaper icon.

So far, I've talked a lot about the appearance of Newsstand apps, but what about the behavior? Specifically, how do we enable this experience where content is automatically delivered to the user? While we've seen this diagram once before, let's take a closer look at how to enable automatic content delivery.

The first thing that you have to do is register for Newsstand notifications. There's a new notification type in iOS 5. That's UI Remote Notification Type Newsstand Content Availability. You also have to set a key in your Info.plist file to enable the Newsstand background mode. This key is Newsstand Content, and this is what lets your Newsstand app be launched in the background and perform the download.

Finally, your Newsstand app has to support multitasking. So if you're bringing over an existing newspaper or magazine app over from iOS 4.3 to iOS 5, make sure that you do not have the UI exit on suspend key set. So now we know how to enable this notification. What else do we need to know about it? Well, as I mentioned before, your Newsstand app is only allowed one background download in a 24-hour period.

The reason for this is to preserve battery life. If there were several Newsstand apps on a device and they were all allowed to download new content throughout the day, this would be a lot of network activity that would drain the battery. You can send additional notifications to the device to attempt to initiate a background download, but if there's more than one in a 24-hour period, those additional notifications are just going to be ignored.

So there's a little bit of flex time built in here, meaning that if you are always sending out your publication at 5 a.m. every morning, but one day you're running late, or maybe the power is out, or there's a problem with the server, and you have to ship your issue at 5.03 or 5.04 or 5.05, so you might wonder if you always have to ship your issue at 5.05 the next day and the day after that and the day after that.

Well, the answer is no. There's a little bit of flex time built in here, but it's on the order of minutes, not hours, and it's not something that you should rely on for your implementation. If your app can only perform one background download in a 24-hour period, you might be wondering how you're going to test.

Well, there is a user default that you can set to disable this throttle. It's called NK Don't Throttle Newsstand Content Notifications. And if you set this default, your Newsstand app will be able to perform background downloads more than once in a 24-hour period. Just be sure to remove this before you submit your app to the App Store.

It's also important to understand how the notification settings work for Newsstand apps. On the left, we're looking at all of the settings for notifications for all of the apps on the system. Here, a user can toggle whether or not they want to receive different types of notifications, such as alerts, badges, and messages, from certain apps.

On the right, we're looking at Store Settings. And this is what a user looks at if they want to enable or disable background downloading for your Newsstand app. So the way it works is a user downloads your app and they receive the initial prompt asking them to allow your app to receive notifications. If they say yes, then both of these preferences are set to true. If they say no, they're both disabled. So remember that your app should be ready for any possible configuration of these separate settings.

So now you have sent a notification to the device. It has been received. What happens next? Well, there's two possible scenarios. The first is that your app is not running once the notification has been received. In this case, your app is launched in the background and it's up to you to begin downloading all of the assets, the text, images, et cetera, for your publication. An application did finish launching with options.

If the iPad or iPhone is on Wi-Fi, the downloads will start immediately. If the iPad or iPhone is on 3G, the downloads will be queued either until the app is brought to the foreground or until the device joins a Wi-Fi network. Also, be aware that if you're combining the content available payload with another payload in your notification, such as an alert, the alert will not be shown in this case. The second scenario is that the notification is received on the iPhone or iPad and your app is already running and in the foreground. Just like any type of notification, when your app is already running in the foreground, it's up to your app to handle that notification.

In this case, you're going to start downloading the assets for your publication if the application did receive remote notification. When the app is running in the foreground, downloading will start immediately whether the device is on 3G or Wi-Fi. Now the notification to initiate the background download has been received on the device and it's time to start downloading all of the assets such as images, text, and media that comprise your issue.

We recommend, if possible, delivering all of these files via a single compressed zip file. This is better for system performance because we don't always have to continuously wake up your app to let it know that a download has finished. And it's a little bit easier to code inside of your app.

If it's not possible to group all of the assets for your issue into a single download, maybe because of your company's content infrastructure, you should at least group these downloads into logical sets. For example, all of the images and text that I need for the front page or for a recent story would be one logical set.

Once you begin downloading individual assets for an issue, these downloads cannot be prioritized. Always remember to reconnect when your app wakes up and complete any unfinished downloads. Otherwise, over time, these downloads will be considered abandoned and eventually deleted. Once you have downloaded an issue to the device, you should remember to always organize your issues with NK Library.

NK Library provides a persistent state for available issues, ongoing downloads, and it lets you mark the issue that is currently being read. Each real-world issue that is downloaded by your app should correspond to an NK issue. You can create issues with a unique name and publication date and add them to your Newsstand library.

It's also possible to maintain a repository for each issue within your library. Just access the content URL for your NK issue. As you're downloading issues of your publication, each real-world issue should correspond to an NK issue. You can use NK Issue to create an issue with a unique name and publication date.

You can use NKissue to access the repository of assets for a single issue. And you can provide an NK issue to set currently reading issue to track the issue that is currently being read by the user. When you download an issue with the Newsstand Kit APIs, Newsstand Kit provides a managed repository for your issues. This directory is not backed up automatically via iCloud. And as I mentioned, issues are put in this repository either by downloading them with the Newsstand Kit APIs, or you could move them to the right location after you have downloaded all of the assets for your issue.

The Newsstand Kit Managed Repository acts as a cache. And given that it's a cache, issues may be evicted from the cache when system resources run low. And in this case, the system resource that we're really concerned about is available space. However, information that you provide helps Newsstand Kit prioritize which content should be preserved.

So if there's very little space left on the device and issues have to be deleted, you can tell Newsstand that you want to preserve the issues that are marked with the Currently Reading Issue property and the issue that you have most recently added to your NK library. So Newsstand will look at the date parameter and add issue with name and date. So you might be thinking that you want to guard against the scenario where an issue of yours could possibly be deleted. And you might be thinking that you'll just move all of your issues to the document. folder.

Well, I'm here to tell you do not move issues of your publication to the Documents folder. This will significantly decrease the amount of available space on the system. Since the Documents folder is backed up to iCloud, this will significantly increase the time it takes to backup a user's device. And in turn, this will significantly decrease battery life because of all the excess network activity.

Instead, let your publications be managed just like other publications on a system-wide basis. Remember that you should always allow users to access the items that they've purchased, even if it means letting them re-download one of those items. So that's it for implementation. Now let's move on to distribution.

Before you distribute your app, I would really encourage you to do a final round of testing. Try to prevent those one-star reviews before they happen. Walk through the user experience from start to finish and ask yourself: Are users downloading a magazine or just a store? I've perused the one-star reviews for Newsstand apps on the App Store, and one of the biggest complaints is that users will download a free app but then not get any content. Not a single article, not a single issue. If users don't know what your content even looks like, how will they know that they want to purchase more?

Are you offering to restore purchases? In this day and age, users have multiple devices, they're deleting apps, and when your app is downloaded to a different device or restored after it's been deleted, offering to restore all of the purchases is a great convenience for all users. Is your content intuitively easy to navigate? So many Newsstand apps that I've downloaded and tried out start off with a splash screen that has instructions on how to navigate the content. For example, tap three times in the upper left corner to go home.

If you You might think that these type of instructions are a service, but typically what happens is the user dismisses this dialogue and then the instructions are difficult to remember. So you're better off just making your content intuitively easy to navigate from the beginning. And finally, are newly downloaded issues easy to find? There's nothing more frustrating than purchasing a new issue and not being able to read it immediately.

So when you're ready to opt into Newsstand to become a Newsstand app on the App Store, the first thing that you're going to do is enable your status as a Newsstand app in iTunes Connect. So this is the summary page for your app, and in order for this Newsstand button to appear on the app summary page, your app has to be in a pre-binary upload state. So those states are: Prepare for Upload, Rejected, Developer Reject, Invalid Binary, or Waiting for Upload.

So once you click this button, you'll be taken to a confirmation screen that asks you if you truly want to enable Newsstand status. Once you enable Newsstand status for a certain binary, you cannot revoke that status for that binary. If you want to opt out of Newsstand later on, you'll have to revoke this binary and resubmit another one.

Once you click the Enable button, you'll be prompted to upload a default cover. So the default cover is really shown when there's no cover for the current issue of your publication available. This piece of art should be a generic version of your publication's cover. It should have the title of your publication, a generic piece of cover art that's not timely. For instance, you wouldn't want to have Christmas trees on your default cover. And also, this shouldn't be a cover that you've used for a previous issue.

Once you've uploaded your default cover art, it's time to add and manage new issues. So this is what the summary page for your app looks like after you've enabled Newsstand status. This time, if you click the Newsstand button, you're taken to a screen like this, where you can add and manage new issues. If you click the Add Issue button, you're able to enter information for your publication, such as the date that you want an issue to be published, the end date for that issue, the issue ID, a summary, and cover art for that issue.

Now, if you're only publishing new issues once a month or even maybe once a week, it's not a problem to go into iTunes Connect and enter all of this information manually. But if you're publishing issues more often than that, you might want to automate this process with an Atom Feed. The Atom Feed basically contains all of the same information that you would have included manually in iTunes Connect, but it's just parsed automatically.

So that's it for distribution and for all three sections: understanding Newsstand apps, implementing Newsstand apps, and finally distributing them. In conclusion, I just want to drive home a few key points. Remember that from the content that you're delivering inside your app to the actual behavior of your app, deliver a great user experience on Newsstand.

Use our built-in technologies to streamline your development and give users a familiar experience. Utilize in-app purchase and subscriptions and use the Newsstand Kit APIs and manage repository. And finally, understand how iTunes Connect interfaces with Newsstand apps. Remember how to enable Newsstand status for your app and how to upload new issue information for display in the App Store. If you're looking for more information, there are several pieces of documentation available on the iOS Dev Center. There's the Newsstand Kit Framework Reference. There's a Tech Note that answers a lot of frequently asked questions.

And there's Guides for Supporting Technologies, the Local and Push Notification Programming Guide, and the In-App Purchase Programming Guide. If you're looking for more information about how iTunes Connect interfaces with Newsstand apps, you can take a look at the iTunes Connect Programming Guide. And there's also a specification available for the Newsstand Atom Feed.

So that's it. By now you should know whether or not Newsstand is right for your app, understand what is possible with Newsstand, and have some ideas about how to approach your Newsstand app architecture. If you have any questions about the content of this video, you can find me on the Developer Forums or email me directly at vicki@apple.com.
