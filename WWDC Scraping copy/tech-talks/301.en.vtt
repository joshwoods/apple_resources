WEBVTT

00:00:02.001 --> 00:00:04.171
Welcome to Introducing
Extensible Enterprise

00:00:04.171 --> 00:00:05.672
Single Sign-On.

00:00:05.672 --> 00:00:07.174
My name is Matt Chanda.

00:00:07.174 --> 00:00:08.308
I am a consulting engineer

00:00:08.308 --> 00:00:11.378
and part of the team
that created single sign-on.

00:00:11.378 --> 00:00:14.915
In this video I will provide you
an overview of single sign-on,

00:00:14.915 --> 00:00:16.917
discuss how to create
extensions,

00:00:16.917 --> 00:00:19.786
how to use them in your apps,
how to deploy them,

00:00:19.786 --> 00:00:22.222
and finish up
with best practices.

00:00:22.222 --> 00:00:24.825
As you know, almost all
enterprise apps and websites

00:00:24.825 --> 00:00:27.261
need to authenticate
in order to function.

00:00:27.261 --> 00:00:29.196
These apps connect
the systems of record,

00:00:29.196 --> 00:00:32.332
either in the cloud,
on premise, or both.

00:00:32.332 --> 00:00:33.500
Recently though,

00:00:33.500 --> 00:00:35.936
authentication has been getting
more complicated.

00:00:35.936 --> 00:00:38.105
We need to consider multiple
authentication methods

00:00:38.105 --> 00:00:41.541
including OpenID Connect,
Kerberos, and SAML.

00:00:41.541 --> 00:00:44.645
We now have cloud resources that
need to federate authentication

00:00:44.645 --> 00:00:46.280
to on-premise systems.

00:00:46.280 --> 00:00:48.148
We also have to trust
our devices more,

00:00:48.148 --> 00:00:50.450
and sometimes
we don't have passwords.

00:00:50.450 --> 00:00:53.220
How do organizations deal
with these challenges?

00:00:53.220 --> 00:00:55.856
They use single sign-on to help.

00:00:55.856 --> 00:00:58.358
Single sign-on enables
a suite of apps or web sites

00:00:58.358 --> 00:01:01.662
to seamlessly authenticate
using the same credential.

00:01:01.662 --> 00:01:04.464
This results in
a better user experience.

00:01:04.464 --> 00:01:06.733
Some enterprises
do not have passwords,

00:01:06.733 --> 00:01:08.702
so they must use single sign-on.

00:01:08.702 --> 00:01:11.838
The problem is that not
every app supports their needs.

00:01:11.838 --> 00:01:13.507
The existing
authentication solutions

00:01:13.507 --> 00:01:15.742
can cause a lot
of user friction.

00:01:15.742 --> 00:01:17.210
They have multiple pop-ups,

00:01:17.210 --> 00:01:20.147
repeated prompts,
and bouncing between apps.

00:01:20.147 --> 00:01:22.783
There just hasn't been a way
to have true single sign-on

00:01:22.783 --> 00:01:26.353
that is both secure
and user friendly.

00:01:26.353 --> 00:01:27.354
Today I'd like to tell you

00:01:27.354 --> 00:01:29.690
about the powerful new
single sign-on capabilities

00:01:29.690 --> 00:01:35.028
we added to iOS 13, iPadOS,
and macOS Catalina.

00:01:35.028 --> 00:01:39.266
It's enabled by deploying the
new extensible SSO MDM profile

00:01:39.266 --> 00:01:41.234
and associated domains.

00:01:41.234 --> 00:01:43.704
It works with
user enrollment too.

00:01:43.704 --> 00:01:46.373
The extension can choose
to present a UI,

00:01:46.373 --> 00:01:49.810
load a web page,
or handle the request silently.

00:01:49.810 --> 00:01:51.645
We think these changes
will enable you

00:01:51.645 --> 00:01:53.513
to make and use SSO solutions

00:01:53.513 --> 00:01:56.416
that are both user-friendly
and secure.

00:01:56.416 --> 00:02:00.821
The new extensions will run
on iOS, iPadOS and macOS.

00:02:00.821 --> 00:02:03.156
They enable both native apps
and Safari to authenticate

00:02:03.156 --> 00:02:05.158
with your identity provider.

00:02:05.158 --> 00:02:07.060
The extensions are native code.

00:02:07.060 --> 00:02:08.929
They can enable
multi-factor auth,

00:02:08.929 --> 00:02:10.464
access the keychain,

00:02:10.464 --> 00:02:13.433
use secure enclave
generated keys, and more.

00:02:13.433 --> 00:02:15.235
They can leverage
managed-app config

00:02:15.235 --> 00:02:17.804
and even use per-app VPN.

00:02:17.804 --> 00:02:20.173
You may be wondering about
Sign in with Apple.

00:02:20.173 --> 00:02:23.043
Single sign-on is different
than Sign in with Apple.

00:02:23.043 --> 00:02:25.612
Sign in with Apple is intended
for your consumer apps

00:02:25.612 --> 00:02:27.848
and addresses
different problems.

00:02:27.848 --> 00:02:31.251
First, it is meant to solve
an account provisioning problem.

00:02:31.251 --> 00:02:33.453
Instead of making
a new account everywhere,

00:02:33.453 --> 00:02:35.555
just use your Apple ID instead.

00:02:35.555 --> 00:02:37.190
It also solves a privacy problem

00:02:37.190 --> 00:02:40.394
where a site doesnâ€™t need
all your personal information.

00:02:40.394 --> 00:02:42.596
On the other hand,
single sign-on enables you

00:02:42.596 --> 00:02:44.131
to use an existing
enterprise account

00:02:44.131 --> 00:02:46.333
for your apps that require them.

00:02:46.333 --> 00:02:48.668
Your enterprise apps need
to know exactly who you are

00:02:48.668 --> 00:02:51.304
and what you're allowed to do.

00:02:51.304 --> 00:02:52.806
Now that we have introduced it,

00:02:52.806 --> 00:02:54.875
you may be curious about
what it actually looks like

00:02:54.875 --> 00:02:56.143
to do single sign-on.

00:02:56.143 --> 00:02:59.079
Let's take a look.

00:02:59.079 --> 00:03:01.381
On iOS, let's start
by loading a web page

00:03:01.381 --> 00:03:03.417
that requires authentication.

00:03:03.417 --> 00:03:06.686
The extension will prompt me
for credentials.

00:03:06.686 --> 00:03:09.056
I'll enter my username...

00:03:11.792 --> 00:03:14.194
And now my password...

00:03:15.562 --> 00:03:18.765
I'll save my password,
then the page will then load.

00:03:18.765 --> 00:03:22.235
Notice that the page shows
my username after it loads.

00:03:22.235 --> 00:03:23.437
Now let's go to a native app

00:03:23.437 --> 00:03:26.039
and try to access
protected resources.

00:03:26.039 --> 00:03:28.275
This is where
single sign-on happens.

00:03:28.275 --> 00:03:31.445
The user should not be prompted
again for credentials.

00:03:31.445 --> 00:03:33.080
This app has two buttons.

00:03:33.080 --> 00:03:34.848
It'll try to load images
from the network

00:03:34.848 --> 00:03:37.317
that are protected
by the same credential.

00:03:37.317 --> 00:03:38.718
I'll start with the burger...

00:03:40.587 --> 00:03:42.155
and now the tacos...

00:03:43.390 --> 00:03:46.860
And that's single sign-on
in action on iOS.

00:03:46.860 --> 00:03:48.295
Now for macOS.

00:03:48.295 --> 00:03:50.363
Again, we try to load
a protected web page

00:03:50.363 --> 00:03:52.332
and get challenged
for credentials.

00:03:52.332 --> 00:03:55.802
So let me open Safari,
load my site...

00:03:58.438 --> 00:04:00.440
Now I'll enter my username...

00:04:02.309 --> 00:04:04.311
And my password...

00:04:09.449 --> 00:04:13.787
I'll save it,
and the page will load.

00:04:13.787 --> 00:04:15.388
Great, this is the first login,

00:04:15.388 --> 00:04:18.892
but it's not single sign-on
until we use it somewhere else.

00:04:18.892 --> 00:04:21.128
So let's try to access
other protected resources

00:04:21.128 --> 00:04:22.762
in a native app.

00:04:22.762 --> 00:04:24.764
So I'll start with the burger.

00:04:28.602 --> 00:04:30.937
Good, and now the tacos.

00:04:33.940 --> 00:04:36.176
And you can see
that they loaded as expected.

00:04:36.176 --> 00:04:38.411
If I hadn't logged in
to the browser first,

00:04:38.411 --> 00:04:39.913
then the same
authentication dialog

00:04:39.913 --> 00:04:42.048
would have shown
in the native app.

00:04:42.048 --> 00:04:43.950
After logging in,
the credentials would be stored,

00:04:43.950 --> 00:04:46.253
and access to the images
would be allowed.

00:04:46.253 --> 00:04:49.489
And that's single sign-on
on macOS.

00:04:49.489 --> 00:04:52.092
And now back to our slides.

00:04:52.092 --> 00:04:55.362
In order to use single sign-on
with your MDM managed devices,

00:04:55.362 --> 00:04:57.197
you need these things.

00:04:57.197 --> 00:04:59.166
You likely already have apps
and websites

00:04:59.166 --> 00:05:01.168
and an identity provider.

00:05:01.168 --> 00:05:03.203
So today we will spend our time
on the extension

00:05:03.203 --> 00:05:05.572
to glue those together.

00:05:05.572 --> 00:05:07.107
So how does it work?

00:05:07.107 --> 00:05:09.009
There are two types
of extensions:

00:05:09.009 --> 00:05:11.211
redirect and credential.

00:05:11.211 --> 00:05:14.047
Let's start
with Redirect extensions.

00:05:14.047 --> 00:05:15.448
Redirect extensions are intended

00:05:15.448 --> 00:05:17.851
for modern
authentication methods.

00:05:17.851 --> 00:05:21.588
Examples include OpenID Connect,
OAuth, and SAML.

00:05:21.588 --> 00:05:23.890
These methods are based on
web technologies

00:05:23.890 --> 00:05:26.693
and are frequently
used with federation.

00:05:26.693 --> 00:05:29.129
Let's look at an example
in Safari.

00:05:29.129 --> 00:05:31.565
Redirect extensions
also work with URLSession

00:05:31.565 --> 00:05:34.768
in iOS, iPadOS,
and macOS, too.

00:05:34.768 --> 00:05:36.703
Instead of loading
the login page,

00:05:36.703 --> 00:05:40.273
the OS will redirect the web
request to the extension.

00:05:40.273 --> 00:05:43.810
The extension will receive
the URL, headers, and body.

00:05:43.810 --> 00:05:45.545
The extension developer
is responsible

00:05:45.545 --> 00:05:47.180
for completing
the authentication process

00:05:47.180 --> 00:05:49.015
with the identity provider.

00:05:49.015 --> 00:05:52.552
When ready, it will return
the URL response to Safari.

00:05:52.552 --> 00:05:54.854
Note that this response
should not be large.

00:05:54.854 --> 00:05:56.990
It's intended for
a small web form

00:05:56.990 --> 00:06:00.493
to post a SAML response or
other tokens to the web server.

00:06:00.493 --> 00:06:04.064
Do not use it
for a giant 1-meg web page.

00:06:04.064 --> 00:06:07.200
So what can these
single sign-on extensions do?

00:06:07.200 --> 00:06:10.103
They can do several things.
Here are a few.

00:06:10.103 --> 00:06:12.172
The can choose
to present a native UI

00:06:12.172 --> 00:06:14.107
or request multifactors.

00:06:14.107 --> 00:06:16.276
They can generate
device-specific keys

00:06:16.276 --> 00:06:17.510
on the Secure Enclave

00:06:17.510 --> 00:06:20.981
or supplement authentication
requests with trust score data.

00:06:20.981 --> 00:06:25.051
The can implement other idP
specific security features too.

00:06:25.051 --> 00:06:27.854
They could load a web page and
follow the links for federation.

00:06:27.854 --> 00:06:30.056
And on macOS,
they can even use WebAuthN,

00:06:30.056 --> 00:06:32.325
if your identity provider
supports it.

00:06:32.325 --> 00:06:35.295
Redirect extensions
also work for native apps.

00:06:35.295 --> 00:06:37.964
However, native apps
have an additional option.

00:06:37.964 --> 00:06:40.634
They can send operations
to the extension.

00:06:40.634 --> 00:06:43.103
The app can decide
when it's a good time to login

00:06:43.103 --> 00:06:45.138
or refresh tokens silently.

00:06:45.138 --> 00:06:47.507
The extension will know if
it needs to authenticate again

00:06:47.507 --> 00:06:49.542
or just return saved tokens.

00:06:49.542 --> 00:06:51.444
And for the enterprise
app developers,

00:06:51.444 --> 00:06:53.346
this means you can use
the extension

00:06:53.346 --> 00:06:55.181
as your authentication client.

00:06:55.181 --> 00:06:56.583
It avoids the need to include

00:06:56.583 --> 00:06:58.184
a copy of an
authentication library

00:06:58.184 --> 00:07:00.954
in each app
and then maintaining it.

00:07:00.954 --> 00:07:02.122
Let's check out the flow.

00:07:02.122 --> 00:07:03.757
It's similar to Safari,

00:07:03.757 --> 00:07:05.725
except the native app
can send a command,

00:07:05.725 --> 00:07:08.061
such as login,
to start the process.

00:07:08.061 --> 00:07:09.696
Again, the extension
is responsible

00:07:09.696 --> 00:07:11.998
for completing
the authentication process.

00:07:11.998 --> 00:07:14.401
And when ready,
it can return the URL response

00:07:14.401 --> 00:07:17.037
with any tokens needed
by the native app.

00:07:17.037 --> 00:07:19.272
I also recommend using
managed app config

00:07:19.272 --> 00:07:20.307
to inform the native app

00:07:20.307 --> 00:07:23.643
of the identity provider URL
to use.

00:07:23.643 --> 00:07:25.612
Before I show you
how to build an extension,

00:07:25.612 --> 00:07:26.946
let's talk about how to deploy

00:07:26.946 --> 00:07:29.416
one of these extensions
in your enterprise.

00:07:29.416 --> 00:07:30.984
There are two requirements:

00:07:30.984 --> 00:07:34.354
the MDM payload
and associated domains.

00:07:34.354 --> 00:07:36.589
Lets start with
the MDM payload.

00:07:36.589 --> 00:07:39.859
It is enabled by the new
Extensible SSO payload

00:07:39.859 --> 00:07:43.963
for iOS 13, iPadOS,
and macOS Catalina.

00:07:43.963 --> 00:07:45.999
Check out the example here.

00:07:45.999 --> 00:07:49.669
The identifier is
com.apple.extensiblesso,

00:07:49.669 --> 00:07:52.572
and this payload
must be delivered by MDM.

00:07:52.572 --> 00:07:55.041
It specifies the extension
bundle identifier

00:07:55.041 --> 00:07:58.611
that you want to use,
including the team identifier,

00:07:58.611 --> 00:08:00.880
as well as the type
we just talked about.

00:08:00.880 --> 00:08:03.650
In this case,
a redirect extension.

00:08:03.650 --> 00:08:06.353
It lists the URL prefixes
that will determine

00:08:06.353 --> 00:08:09.055
which traffic to route
to the extension.

00:08:09.055 --> 00:08:11.458
And finally,
an optional dictionary

00:08:11.458 --> 00:08:14.494
of extension-specific values
from the MDM.

00:08:14.494 --> 00:08:17.030
In this example we are
sending it the user name.

00:08:17.030 --> 00:08:20.200
The second requirement
is to use associated domains.

00:08:20.200 --> 00:08:23.570
This starts with
the extension developers.

00:08:23.570 --> 00:08:24.871
Associated domains are required

00:08:24.871 --> 00:08:27.507
to prove that you
or your identity providers

00:08:27.507 --> 00:08:30.110
own the traffic
that is being redirected.

00:08:30.110 --> 00:08:33.880
It also prevents someone else
from redirecting your traffic.

00:08:33.880 --> 00:08:34.914
On Apple platforms,

00:08:34.914 --> 00:08:37.650
extensions are embedded
inside of a host app.

00:08:37.650 --> 00:08:39.785
In order to set up
associated domains,

00:08:39.785 --> 00:08:42.589
you need to configure the
associated domains capability

00:08:42.589 --> 00:08:45.558
in the host app
containing your extension.

00:08:45.558 --> 00:08:49.362
You add a new entry
with the authsrv service type,

00:08:49.362 --> 00:08:50.463
followed by a colon,

00:08:50.463 --> 00:08:52.866
followed by the domain name
used by the app.

00:08:52.866 --> 00:08:56.302
If you need multiple domains,
enter each one separately.

00:08:56.302 --> 00:08:59.606
Associated domains also
requires that the host app ID

00:08:59.606 --> 00:09:04.244
is listed in the Apple app site
association file on the server.

00:09:04.244 --> 00:09:06.079
This server must be accessible
by the device

00:09:06.079 --> 00:09:08.515
and have a valid SSL cert.

00:09:08.515 --> 00:09:10.817
User-approved
or custom root certificates

00:09:10.817 --> 00:09:15.255
are not supported for the
Apple app site association file.

00:09:15.255 --> 00:09:17.457
In some cases, the associated
domains are unknown

00:09:17.457 --> 00:09:19.225
when the app is developed.

00:09:19.225 --> 00:09:20.493
A good example of this

00:09:20.493 --> 00:09:23.129
is when an identity provider
develops an extension,

00:09:23.129 --> 00:09:25.565
but each customer's host
is different.

00:09:25.565 --> 00:09:27.033
They can't list
thousands of them

00:09:27.033 --> 00:09:28.668
in the entitlements file,

00:09:28.668 --> 00:09:31.104
so when this happens,
we can use the new managed

00:09:31.104 --> 00:09:33.840
associated domains payload
on macOS.

00:09:33.840 --> 00:09:36.876
Note that the value is in the
same format you would have used

00:09:36.876 --> 00:09:41.047
in the associated domain's
entitlement value in Xcode.

00:09:41.047 --> 00:09:43.049
And you can use
the new AssociatedDomains

00:09:43.049 --> 00:09:47.053
MDM application attribute
for iOS and iPadOS.

00:09:47.053 --> 00:09:50.723
Again, the value is the same
as it would have been in Xcode.

00:09:50.723 --> 00:09:53.593
And the last step for managed
associated domains

00:09:53.593 --> 00:09:56.296
is to add the MDM-managed
entitlement

00:09:56.296 --> 00:09:58.364
and have an
associated domains array

00:09:58.364 --> 00:10:01.434
to let the OS know
to use the MDM values.

00:10:01.434 --> 00:10:05.171
We will append the MDM values
to any that are already listed.

00:10:05.171 --> 00:10:08.241
For more details on associated
domains and how to use them,

00:10:08.241 --> 00:10:11.244
check out the What's New
in Universal Links session.

00:10:11.244 --> 00:10:14.113
And that concludes
redirect extensions.

00:10:14.113 --> 00:10:16.850
Now let's talk about
credential extensions.

00:10:16.850 --> 00:10:19.052
Credential extensions
are intended for

00:10:19.052 --> 00:10:21.221
challenge and response
authentication,

00:10:21.221 --> 00:10:23.590
and Kerberos
is the best example.

00:10:23.590 --> 00:10:25.692
Challenge/response
has a different flow.

00:10:25.692 --> 00:10:27.727
In that flow,
the client requests the data,

00:10:27.727 --> 00:10:30.230
then gets challenged
for authentication.

00:10:30.230 --> 00:10:32.131
Whereas with redirect
extensions,

00:10:32.131 --> 00:10:33.766
the client will request
the credentials

00:10:33.766 --> 00:10:35.935
before requesting the data.

00:10:35.935 --> 00:10:37.770
Credential extensions
can also be used

00:10:37.770 --> 00:10:39.606
to handle
authentication challenges

00:10:39.606 --> 00:10:41.641
when redirect extensions
are running.

00:10:41.641 --> 00:10:44.978
Credential extensions receive
an authentication challenge

00:10:44.978 --> 00:10:47.580
returned from the server
instead of the request.

00:10:47.580 --> 00:10:50.149
It receives the URL and headers.

00:10:50.149 --> 00:10:54.721
They also use a list of hosts in
the MDM payload instead of URL.

00:10:54.721 --> 00:10:57.123
The hosts can either be
individual hostnames

00:10:57.123 --> 00:11:00.260
or suffixes,
such as .example.com.

00:11:00.260 --> 00:11:02.395
Operations can be used
to help determine

00:11:02.395 --> 00:11:06.132
when UI should be shown
or request silent operations.

00:11:06.132 --> 00:11:08.468
And finally, associated domains
are not required

00:11:08.468 --> 00:11:10.537
for credential extensions.

00:11:10.537 --> 00:11:12.639
The configuration
for credential extensions

00:11:12.639 --> 00:11:14.274
is similar
to redirect extensions,

00:11:14.274 --> 00:11:15.408
with two differences.

00:11:15.408 --> 00:11:18.344
First, the type is credential.

00:11:18.344 --> 00:11:21.114
Second, a list of hosts
are used for selection.

00:11:21.114 --> 00:11:23.616
It is checked against
the hostname of the server.

00:11:23.616 --> 00:11:26.019
If the MDM value
begins with a period,

00:11:26.019 --> 00:11:28.788
then it is used to match
the suffix of the hostname.

00:11:28.788 --> 00:11:31.424
Otherwise, the entire
host name is matched.

00:11:31.424 --> 00:11:35.562
And again, this profile
must be delivered by MDM.

00:11:35.562 --> 00:11:37.730
Credential extensions
will work from both Safari

00:11:37.730 --> 00:11:39.432
and native apps.

00:11:39.432 --> 00:11:42.068
A request is sent
from the app to the server,

00:11:42.068 --> 00:11:45.104
and the server returns
an authentication challenge.

00:11:45.104 --> 00:11:47.073
If the host matches the profile,

00:11:47.073 --> 00:11:50.443
the operating system will route
the challenge to the extension.

00:11:50.443 --> 00:11:53.279
The extension is responsible
for handling the challenge

00:11:53.279 --> 00:11:54.480
or rejecting it.

00:11:54.480 --> 00:11:56.983
If handled, it returns
the authorization headers

00:11:56.983 --> 00:11:58.418
to complete the request.

00:11:58.418 --> 00:12:02.155
And the server will return
the response to the caller.

00:12:02.155 --> 00:12:04.524
A great example of
a credential extension

00:12:04.524 --> 00:12:06.759
is the system-supplied
Kerberos extension

00:12:06.759 --> 00:12:11.731
included in iOS 13, iPadOS,
and macOS Catalina.

00:12:11.731 --> 00:12:13.900
This extension is based
on Enterprise Connect,

00:12:13.900 --> 00:12:16.002
an Active Directory
integration solution

00:12:16.002 --> 00:12:18.237
that some of you
may already be using.

00:12:18.237 --> 00:12:20.773
It provides an easy way
to integrate your devices

00:12:20.773 --> 00:12:22.442
with Active Directory.

00:12:22.442 --> 00:12:24.577
On top of providing
Kerberos support,

00:12:24.577 --> 00:12:27.447
it helps you manage your
Active Directory password

00:12:27.447 --> 00:12:29.182
and helps you keep your local

00:12:29.182 --> 00:12:31.551
and Active Directory
passwords in sync.

00:12:31.551 --> 00:12:34.887
It supports authentication
using a username and password;

00:12:34.887 --> 00:12:37.790
an MDM-provided,
certificate-based identity;

00:12:37.790 --> 00:12:39.392
or a smart card.

00:12:39.392 --> 00:12:41.160
We think this extension
will help many of you

00:12:41.160 --> 00:12:43.496
more easily use Kerberos
and Active Directory

00:12:43.496 --> 00:12:45.098
in your organizations.

00:12:45.098 --> 00:12:52.772
And that completes credential
single sign-on extensions.

00:12:52.772 --> 00:12:54.741
First open Xcode,

00:12:54.741 --> 00:12:57.210
create a new project,
then add a target

00:12:57.210 --> 00:12:59.912
using the Authentication
Services template.

00:12:59.912 --> 00:13:02.181
It will look like this.

00:13:02.181 --> 00:13:05.151
Then implement
the RequestHandler protocol.

00:13:05.151 --> 00:13:07.987
The system will call
beginAuthorization function

00:13:07.987 --> 00:13:09.489
for each request.

00:13:09.489 --> 00:13:11.724
Remember that your extension
will be called multiple times

00:13:11.724 --> 00:13:13.426
by multiple different apps.

00:13:13.426 --> 00:13:14.927
So you need to handle
concurrency

00:13:14.927 --> 00:13:17.230
and separating data
for each app.

00:13:17.230 --> 00:13:18.731
The request parameter
will contain

00:13:18.731 --> 00:13:20.233
all the information needed

00:13:20.233 --> 00:13:23.336
about the current
authentication request.

00:13:23.336 --> 00:13:24.904
If the extension determines

00:13:24.904 --> 00:13:27.206
that it needs to show a UI,
then you call

00:13:27.206 --> 00:13:29.175
presentAuthorization
ViewController

00:13:29.175 --> 00:13:31.144
on the request to show it.

00:13:31.144 --> 00:13:33.946
The request contains the URL,

00:13:33.946 --> 00:13:36.382
the headers,

00:13:36.382 --> 00:13:39.152
the identifier
of the calling app,

00:13:39.152 --> 00:13:41.821
and the extension data
from the MDM payload

00:13:41.821 --> 00:13:43.723
we showed earlier.

00:13:43.723 --> 00:13:45.758
Remember that
in the flow diagram,

00:13:45.758 --> 00:13:48.061
redirect extensions
receive a request

00:13:48.061 --> 00:13:50.163
and return a URL response.

00:13:50.163 --> 00:13:51.564
Therefore when finished,

00:13:51.564 --> 00:13:55.401
a redirect extension must call
complete with httpResponse

00:13:55.401 --> 00:13:58.504
and httpBody,
or complete with an error.

00:13:58.504 --> 00:14:00.807
This will dismiss the view,
if showing,

00:14:00.807 --> 00:14:03.276
and return the response
back to the caller.

00:14:03.276 --> 00:14:04.343
If you call the wrong method,

00:14:04.343 --> 00:14:06.646
the system
will cancel your request.

00:14:06.646 --> 00:14:09.849
Credential extensions
will receive an httpChallenge

00:14:09.849 --> 00:14:12.151
and need to return
authorization headers.

00:14:12.151 --> 00:14:13.920
Therefore, credential extensions

00:14:13.920 --> 00:14:17.123
should use the complete with
AuthorizationHeaders method.

00:14:17.123 --> 00:14:18.725
If the authorization challenge

00:14:18.725 --> 00:14:20.827
is not supported
by your extension,

00:14:20.827 --> 00:14:24.597
then respond with doNotHandle
so that Safari or URLSession

00:14:24.597 --> 00:14:26.866
will proceed
with default handling.

00:14:26.866 --> 00:14:30.636
Now let's look at using
the extensions in your apps.

00:14:30.636 --> 00:14:32.672
Your credential challenges
will be handled

00:14:32.672 --> 00:14:35.374
if you use any of the standard
networking frameworks,

00:14:35.374 --> 00:14:38.311
including URLSession
and WKWebView.

00:14:38.311 --> 00:14:40.446
Requests will also
be redirected too,

00:14:40.446 --> 00:14:43.349
so you don't have to update
your app to make it work.

00:14:43.349 --> 00:14:46.586
However, the flow may not
be the best fit for your app.

00:14:46.586 --> 00:14:49.455
For example, redirects
will be sent to extensions,

00:14:49.455 --> 00:14:51.023
but it may overlay
other components

00:14:51.023 --> 00:14:53.326
or show other web dialogs first.

00:14:53.326 --> 00:14:55.895
You can use operations
to improve the flow of your app

00:14:55.895 --> 00:14:58.731
or do more than just login.

00:14:58.731 --> 00:15:01.234
For example,
the built-in Kerberos extension

00:15:01.234 --> 00:15:03.736
supports local login
and logout operations

00:15:03.736 --> 00:15:07.006
on iOS, iPadOS, and macOS.

00:15:07.006 --> 00:15:08.574
It also returns custom values

00:15:08.574 --> 00:15:10.343
in the response headers
for the apps

00:15:10.343 --> 00:15:12.812
to get information
about the user.

00:15:12.812 --> 00:15:14.680
To call an operation
in your app,

00:15:14.680 --> 00:15:17.483
first you make an instance
of the single sign-on provider

00:15:17.483 --> 00:15:20.353
and pass it a URL
for the identity provider.

00:15:20.353 --> 00:15:22.388
If you are using
a credential extension,

00:15:22.388 --> 00:15:24.690
you can use special realm
or host schemes

00:15:24.690 --> 00:15:27.527
to match on those values too.

00:15:27.527 --> 00:15:29.862
Then call
canPerformAuthorization

00:15:29.862 --> 00:15:34.333
to see if the URL will be
handled by single sign-on.

00:15:34.333 --> 00:15:35.635
If it can be handled,

00:15:35.635 --> 00:15:37.970
create the request
and set the operation.

00:15:37.970 --> 00:15:39.238
Remember that you can
also create

00:15:39.238 --> 00:15:41.707
your own custom operations.

00:15:41.707 --> 00:15:44.410
Next you create the controller
for the request.

00:15:44.410 --> 00:15:46.846
The controller is responsible
for handling the request

00:15:46.846 --> 00:15:49.348
and returning the response.

00:15:49.348 --> 00:15:52.552
You set the delegate
to handle the responses.

00:15:52.552 --> 00:15:54.921
You can set the
presentationContextProvider

00:15:54.921 --> 00:15:57.590
to let the OS know
which window in your Mac app

00:15:57.590 --> 00:15:59.192
to use for authentication.

00:15:59.192 --> 00:16:01.394
This can help maintain
the context of the request

00:16:01.394 --> 00:16:03.229
to the user.

00:16:03.229 --> 00:16:07.834
Finally, call performRequests
to send it to the extension.

00:16:07.834 --> 00:16:09.235
When the extension is finished,

00:16:09.235 --> 00:16:12.705
the didCompleteWithAuthorization
delegate method is called.

00:16:12.705 --> 00:16:14.674
The supplied authorization
instance includes

00:16:14.674 --> 00:16:17.243
a single sign-on credential
with easy methods

00:16:17.243 --> 00:16:21.581
for accessing the ID token,
access token, and more.

00:16:21.581 --> 00:16:23.382
The system-supplied
Kerberos extension

00:16:23.382 --> 00:16:24.884
will provide you
with some information

00:16:24.884 --> 00:16:27.854
about the logged-in user
in the headers.

00:16:27.854 --> 00:16:30.189
Now for some development tips.

00:16:30.189 --> 00:16:31.257
Your extension will be loaded

00:16:31.257 --> 00:16:33.292
when the first request
is received.

00:16:33.292 --> 00:16:36.229
It will likely be unloaded
when your request is completed.

00:16:36.229 --> 00:16:38.965
Therefore, I recommend
that you lazy load settings

00:16:38.965 --> 00:16:41.234
and then you should save
any values to disk

00:16:41.234 --> 00:16:43.569
before sending the response.

00:16:43.569 --> 00:16:45.471
Now for debugging.

00:16:45.471 --> 00:16:47.240
Extension debugging
can be a challenge

00:16:47.240 --> 00:16:50.509
because it is not loaded until
the first request is received.

00:16:50.509 --> 00:16:52.778
Therefore, the best way
to debug your extension

00:16:52.778 --> 00:16:56.148
is to use "Attach to Process
by Process ID or Name..."

00:16:56.148 --> 00:16:58.117
under the Debug menu.

00:16:58.117 --> 00:16:59.886
You just enter the name
of your extension

00:16:59.886 --> 00:17:03.356
and Xcode will attach to it
when it is first loaded.

00:17:03.356 --> 00:17:05.758
When using operations,
for consistency,

00:17:05.758 --> 00:17:07.827
I recommend using
the login operation

00:17:07.827 --> 00:17:10.529
for interactive scenarios
that will show UI.

00:17:10.529 --> 00:17:14.032
You should use a refresh
operation for silent operations,

00:17:14.032 --> 00:17:15.166
and if there is an error,

00:17:15.166 --> 00:17:18.637
the native app can follow up
with the login operation.

00:17:18.637 --> 00:17:20.806
Next, let's talk about
the host app.

00:17:20.806 --> 00:17:22.708
It's a good idea
to make the host app

00:17:22.708 --> 00:17:24.477
more than an empty container.

00:17:24.477 --> 00:17:26.646
You can consider
a menu extra, widget,

00:17:26.646 --> 00:17:28.513
or even a command line utility.

00:17:28.513 --> 00:17:30.683
It can handle onboarding,
device pairing,

00:17:30.683 --> 00:17:32.585
or other infrequently-used
functions,

00:17:32.585 --> 00:17:34.387
such as password changes.

00:17:34.387 --> 00:17:37.089
You can use NFC
in your host app too.

00:17:37.089 --> 00:17:39.091
You should consider integrating
credential extensions

00:17:39.091 --> 00:17:42.461
and redirect extensions
together also.

00:17:42.461 --> 00:17:44.563
There are now new capabilities
you can take advantage of

00:17:44.563 --> 00:17:46.132
in your extensions.

00:17:46.132 --> 00:17:47.566
You can keep
sensitive information,

00:17:47.566 --> 00:17:48.801
such as refresh tokens,

00:17:48.801 --> 00:17:51.437
in the extension
as a way to control it.

00:17:51.437 --> 00:17:53.139
You could locally sign a JWT,

00:17:53.139 --> 00:17:55.908
then send it to the server
for authentication.

00:17:55.908 --> 00:17:58.077
Or you can create
a certificate signing request

00:17:58.077 --> 00:18:01.914
on the device and send it
to your CA to pair the device.

00:18:01.914 --> 00:18:04.283
You can also share
authentication cookies

00:18:04.283 --> 00:18:06.919
from WKWebview
with URLSession

00:18:06.919 --> 00:18:10.089
to share sessions
with native requests.

00:18:10.089 --> 00:18:12.525
In summary, single sign-on
enables authentications

00:18:12.525 --> 00:18:14.427
for your apps and websites.

00:18:14.427 --> 00:18:18.431
It's available on iOS 13,
iPadOS, and macOS.

00:18:18.431 --> 00:18:20.132
There are two types available.

00:18:20.132 --> 00:18:23.336
We're really excited to see
what you can do with them.

00:18:23.336 --> 00:18:24.303
For more information,

00:18:24.303 --> 00:18:27.306
please visit
developer.apple.com