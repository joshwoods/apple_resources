WEBVTT

00:00:00.830 --> 00:00:05.000
Hello, and welcome to a reintroduction
to Uniform Type Identifiers.

00:00:05.020 --> 00:00:08.660
My name is Jonathan Grynspan,
and I work on the App Discovery and

00:00:08.660 --> 00:00:10.540
Engagement team at Apple.

00:00:10.570 --> 00:00:16.140
The last time we talked about Uniform
Type Identifiers was at WWDC 2004.

00:00:16.180 --> 00:00:18.590
That was a long time ago.

00:00:19.070 --> 00:00:21.500
I remember it like it was yesterday.

00:00:21.590 --> 00:00:24.610
Apple's 2004 product
lineup was classic cool,

00:00:24.930 --> 00:00:28.840
with products like the all-aluminum
design of the PowerBook G4,

00:00:28.980 --> 00:00:33.490
the eye-popping colors of the iPod Mini,
and the magical home theater

00:00:33.570 --> 00:00:35.740
experience of the iMac G5.

00:00:35.860 --> 00:00:39.110
Apple has stayed awesome,
but you've got to admit,

00:00:39.110 --> 00:00:41.910
2004 really was a long time ago.

00:00:42.330 --> 00:00:44.900
So,
we're going to cover the basics today,

00:00:45.020 --> 00:00:49.870
starting with how Apple's operating
systems determine the type of a file.

00:00:50.450 --> 00:00:53.870
Then, we'll explore how to tell
the system about new file

00:00:53.870 --> 00:00:57.400
types it doesn't know about,
and how to handle them.

00:00:57.600 --> 00:01:00.530
Finally,
we'll explore some new API in iOS

00:01:00.530 --> 00:01:05.500
14 and macOS Big Sur that makes
working with file types a breeze.

00:01:05.640 --> 00:01:09.220
Whether you're new to the subject or not,
we have something for you,

00:01:09.220 --> 00:01:10.360
so stick around.

00:01:11.070 --> 00:01:14.590
Let's take a look at a file that
could be on anybody's computer:

00:01:14.680 --> 00:01:16.830
a photo of a cat using an iPad Mini.

00:01:16.830 --> 00:01:21.960
When you save that picture to disk,
it produces what's called a regular file.

00:01:22.040 --> 00:01:26.540
That's POSIX terminology for a
sequence of bytes stored on disk.

00:01:26.620 --> 00:01:29.100
Later on,
when you want to open this photo again,

00:01:29.130 --> 00:01:31.740
you can double-click it,
and it will just work,

00:01:31.820 --> 00:01:34.150
opening in an image viewer like Preview.

00:01:34.270 --> 00:01:39.510
But how does the system
know that this is an image,

00:01:39.510 --> 00:01:42.920
in this case saved as JPEG,
rather than a text file, or an MP3 track,

00:01:42.920 --> 00:01:44.240
or a Pages document?

00:01:44.300 --> 00:01:47.460
Files are sequences of bytes,
so you might expect that when the

00:01:47.460 --> 00:01:51.760
system needs to know the type of a file,
it cracks it open and reads the

00:01:51.760 --> 00:01:54.120
bits inside to figure it out.

00:01:54.200 --> 00:01:57.130
Actually,
the system almost never does that,

00:01:57.210 --> 00:02:01.280
because it's extremely expensive
and requires read permissions

00:02:01.280 --> 00:02:03.280
most processes don't have.

00:02:03.830 --> 00:02:07.270
In fact, the operating system bases
most of its decisions on the

00:02:07.270 --> 00:02:11.200
file's path extension — that is,
the case-normalized substring

00:02:11.200 --> 00:02:15.510
following the last period character
— so long as it does not contain any

00:02:15.510 --> 00:02:18.020
whitespace or control characters.

00:02:18.020 --> 00:02:21.050
On Apple's platforms,
we don't typically show recognized

00:02:21.050 --> 00:02:24.580
path extensions to the user,
but they're still there.

00:02:24.740 --> 00:02:29.890
If we reveal this file's path extension,
we can see that it is JPEG,

00:02:30.240 --> 00:02:32.810
so this is a JPEG image.

00:02:32.980 --> 00:02:37.140
So .jpeg means a JPEG image, right?

00:02:37.210 --> 00:02:40.980
Yes, but there are other path
extensions for JPEG images.

00:02:41.070 --> 00:02:45.340
.jpg and .jpe are the most common.

00:02:45.440 --> 00:02:48.140
On the web, however,
it's a different story.

00:02:48.190 --> 00:02:52.160
Web servers don't generally identify
files by their path extension.

00:02:52.250 --> 00:02:55.570
Instead,
they use something called a MIME type,

00:02:55.570 --> 00:02:56.770
or media type.

00:02:57.630 --> 00:03:01.600
For JPEG, that's image/jpeg.

00:03:01.680 --> 00:03:04.260
Of course,
nothing in life is ever that simple,

00:03:04.390 --> 00:03:10.930
and some servers instead use the common
but non-standard image/jpg mind type.

00:03:11.050 --> 00:03:16.540
That's five different pieces of metadata,
all representing exactly the same thing.

00:03:16.650 --> 00:03:20.740
Well, on Apple's platforms, that's okay,
because we use a single string

00:03:21.000 --> 00:03:26.170
called a Uniform Type Identifier to
canonically identify this file format.

00:03:26.550 --> 00:03:29.720
For JPEG images,
the Uniform Type Identifier

00:03:29.800 --> 00:03:31.270
is public.jpg.

00:03:31.270 --> 00:03:34.050
This one string refers
to all JPEG images,

00:03:34.050 --> 00:03:36.700
whether they're local or on the web.

00:03:37.000 --> 00:03:39.040
Now,
an interesting property of file types

00:03:39.040 --> 00:03:40.790
is that they exist in a hierarchy.

00:03:40.840 --> 00:03:45.580
Every JPEG image is also,
more abstractly, an image,

00:03:45.810 --> 00:03:48.630
as are PNG images, TIFF images, etc.

00:03:48.690 --> 00:03:51.870
When talking about
Uniform Type Identifiers,

00:03:52.160 --> 00:03:56.210
we say that the JPEG type conforms
to the more abstract image type.

00:03:56.300 --> 00:04:00.820
This conformance tree implicitly
allows for multiple inheritance.

00:04:00.820 --> 00:04:03.930
If you think about it,
this is sort of like how protocols

00:04:04.070 --> 00:04:06.020
work in Swift and Objective-C.

00:04:06.960 --> 00:04:10.420
A concrete class or struct can
inherit from any number of protocols.

00:04:10.420 --> 00:04:13.220
Let me show you what I mean.

00:04:13.730 --> 00:04:15.760
Here's public.jpg.

00:04:15.760 --> 00:04:19.050
And here's public.image,
which is an abstract type that

00:04:19.150 --> 00:04:22.140
describes all image file formats.

00:04:22.180 --> 00:04:26.220
But all image file formats can be
represented as sequences of bytes.

00:04:26.310 --> 00:04:31.480
So public.image conforms to public.data,
which is a very abstract type

00:04:31.560 --> 00:04:35.840
representing any regular file on disk,
or really any sequence of bytes

00:04:35.890 --> 00:04:37.910
regardless of where they're stored.

00:04:38.990 --> 00:04:41.940
In turn,
public.data conforms to one final type:

00:04:41.990 --> 00:04:43.700
public.item.

00:04:43.700 --> 00:04:48.260
All file system objects — be they files,
folders, symlinks,

00:04:48.260 --> 00:04:52.190
or even something more esoteric
such as POSIX pipes — are

00:04:52.190 --> 00:04:54.590
represented by public.item.

00:04:54.830 --> 00:04:58.600
Just as we can go up the hierarchy,
we can travel down it.

00:04:58.630 --> 00:05:03.990
There are image formats other than JPEG,
such as public.png and public.tiff,

00:05:04.180 --> 00:05:07.400
and they are also
subtypes of public.image.

00:05:07.450 --> 00:05:11.570
However, they are not part of the
conformance hierarchy of public.jpg

00:05:11.710 --> 00:05:13.600
— they're just its siblings.

00:05:13.640 --> 00:05:16.250
If we move up a level
and focus on public.data,

00:05:16.250 --> 00:05:19.600
we can see that there are
many types that conform to it,

00:05:19.620 --> 00:05:23.010
because nearly everything on
your computer can be represented

00:05:23.090 --> 00:05:24.500
by a sequence of bytes.

00:05:24.550 --> 00:05:27.470
Here we see public.audio,
which is an abstract type

00:05:27.650 --> 00:05:30.600
describing audible sounds,
and public.text,

00:05:30.600 --> 00:05:33.840
which is an abstract type
describing legible text.

00:05:33.880 --> 00:05:38.760
There are subtypes of public.data
and siblings of public.image.

00:05:39.560 --> 00:05:42.740
I mentioned a while back that
multiple inheritance is possible

00:05:42.740 --> 00:05:44.580
with Uniform Type Identifiers.

00:05:44.580 --> 00:05:47.400
And that's true of images,
because images are data,

00:05:47.510 --> 00:05:50.780
but they're also content that
the user cares about — something

00:05:50.780 --> 00:05:55.170
the user might want to upload to
iCloud Drive or share over AirDraw.

00:05:55.340 --> 00:05:59.210
So, public.image also conforms
to public.content,

00:05:59.350 --> 00:06:02.740
which doesn't represent anything
concrete in the file system,

00:06:02.910 --> 00:06:06.210
but does tell us that we should
treat its subtypes as things

00:06:06.320 --> 00:06:08.410
that are important to the user.

00:06:09.260 --> 00:06:13.690
I've focused pretty heavily on how
Uniform Type Identifiers represent files.

00:06:13.810 --> 00:06:16.050
That's probably the most
common use for them,

00:06:16.050 --> 00:06:17.750
as far as users are concerned.

00:06:17.940 --> 00:06:21.320
But we use them throughout our
platforms for other purposes,

00:06:21.320 --> 00:06:21.860
too.

00:06:21.990 --> 00:06:24.300
For instance,
we also use them as the canonical

00:06:24.300 --> 00:06:26.080
type of pasteboard content.

00:06:26.200 --> 00:06:29.430
After all, if you can save it to disk,
you can copy and paste it, too.

00:06:30.550 --> 00:06:33.670
We also use them for hierarchies
that have nothing to do with files.

00:06:33.670 --> 00:06:37.350
This is a bit of an Apple secret,
but we also use Uniform

00:06:37.350 --> 00:06:40.800
Type Identifiers to identify
different models of hardware we ship.

00:06:40.800 --> 00:06:45.240
All Mac models, for instance,
conform to com.apple.mac.

00:06:45.490 --> 00:06:49.460
And if we want to get hypothetical,
you could even use Uniform

00:06:49.510 --> 00:06:53.390
Type Identifiers to refer to
hierarchies unrelated to computers,

00:06:53.680 --> 00:06:54.950
such as the Tree of Life.

00:06:55.310 --> 00:07:00.200
That's what Uniform Type Identifiers are
and how we use them on our platforms.

00:07:00.200 --> 00:07:03.780
Many apps create and maintain
their own data formats,

00:07:03.780 --> 00:07:07.210
and these formats deserve
their own unique types.

00:07:07.440 --> 00:07:11.790
When you create a new type,
how do you add it to the type hierarchy?

00:07:12.010 --> 00:07:14.360
If you're using types
declared by the system,

00:07:14.360 --> 00:07:15.900
you don't need to do much.

00:07:15.980 --> 00:07:20.480
We include a large number of types
in a bundle called CoreTypes in

00:07:20.480 --> 00:07:23.470
/system/library/coreservices.

00:07:23.590 --> 00:07:27.770
Any Uniform Type Identifier in that
bundle's Info.plist can be referenced

00:07:27.880 --> 00:07:30.800
by your app without additional changes.

00:07:30.910 --> 00:07:34.790
But for types you invented or which
you're borrowing from another app,

00:07:34.910 --> 00:07:37.490
you may need to tell
the system about them.

00:07:37.590 --> 00:07:42.290
To do so, you need to create your own
uniform type identifier.

00:07:43.100 --> 00:07:45.610
When creating your own
Uniform Type Identifier,

00:07:45.610 --> 00:07:47.840
there are a few naming rules to follow.

00:07:48.040 --> 00:07:51.980
First, Uniform Type Identifiers
are always case-insensitive

00:07:52.060 --> 00:07:57.200
ASCII and always reverse DNS,
such as com.example.file.

00:07:57.310 --> 00:08:00.400
Ideally, you'll use some more
descriptive identifiers.

00:08:00.520 --> 00:08:04.740
com.example.file doesn't
really make it easy to debug.

00:08:04.870 --> 00:08:10.100
Com.example.imageTemplate or
com.example.encryptedDatabase or

00:08:10.100 --> 00:08:13.200
something like that would be better.

00:08:13.600 --> 00:08:17.150
Apple reserves some prefixes
or namespaces in identifiers,

00:08:17.510 --> 00:08:21.110
and you should not create your own
identifiers that use these namespaces.

00:08:21.250 --> 00:08:23.800
The system may ignore them if you do.

00:08:24.510 --> 00:08:27.130
First is Public,
which is reserved for use by

00:08:27.130 --> 00:08:29.590
Apple to declare standardized types.

00:08:29.820 --> 00:08:33.300
If we're missing a standardized type,
please let us know via

00:08:33.400 --> 00:08:34.950
the feedback assistant.

00:08:35.780 --> 00:08:38.610
DYN, short for dynamic,
is reserved for use by

00:08:38.610 --> 00:08:42.340
the operating system when
generating compatibility shims.

00:08:42.520 --> 00:08:46.280
They're typically opaque strings and
they can change between OS releases,

00:08:46.510 --> 00:08:49.290
so don't hardcode their values.

00:08:49.420 --> 00:08:51.840
In practice,
they're fairly rare these days.

00:08:51.940 --> 00:08:55.200
You typically only see them
when encountering a file with

00:08:55.200 --> 00:08:57.330
an unrecognized path extension.

00:08:57.710 --> 00:09:02.240
com.example is reserved for templates,
examples, sample code, and the like.

00:09:02.240 --> 00:09:07.750
Finally,
com.apple is reserved for use by Apple.

00:09:09.280 --> 00:09:11.770
There are two broad steps you
need to take when adding a

00:09:11.770 --> 00:09:15.040
type to your application that
the system will recognize.

00:09:15.110 --> 00:09:17.840
The first step is to declare the type.

00:09:17.920 --> 00:09:21.080
Declaring a type basically
means your app is saying,

00:09:21.100 --> 00:09:24.960
"This type exists," but doesn't
mean you can open the type.

00:09:25.010 --> 00:09:29.930
If you actually want to open a type,
you need to support the type,

00:09:29.930 --> 00:09:35.180
which is your app's way of saying,
"No matter who declared the type,

00:09:35.190 --> 00:09:36.070
I can open it." These two
steps are distinct.

00:09:37.110 --> 00:09:40.020
When you declare your type,
you need to decide whether

00:09:40.070 --> 00:09:41.840
you will import or export it.

00:09:41.960 --> 00:09:45.660
If you are using a type that was
invented or designed by somebody else,

00:09:45.660 --> 00:09:48.240
or for use primarily
with another application,

00:09:48.320 --> 00:09:50.760
you should typically import the type.

00:09:50.870 --> 00:09:53.370
That tells the system, "This type exists.

00:09:53.600 --> 00:09:58.570
Here is some information about it." But,
if the app that invented it is installed,

00:09:58.570 --> 00:10:02.400
that app can provide more
authoritative information.

00:10:02.660 --> 00:10:04.750
On the other hand,
if you invented the type,

00:10:04.880 --> 00:10:07.070
or it's meant for use
specifically with your app,

00:10:07.440 --> 00:10:09.600
it is appropriate to export it.

00:10:09.670 --> 00:10:12.690
This tells the system,
"I am authoritative for

00:10:12.690 --> 00:10:15.880
this type." Finally,
if you are using a type that ships

00:10:15.880 --> 00:10:20.220
with the system as part of Core Types,
you don't need to import or export it.

00:10:20.260 --> 00:10:22.820
The system has already
provided a declaration,

00:10:22.900 --> 00:10:27.490
and you can just use the type's
Uniform Type Identifier immediately.

00:10:28.160 --> 00:10:31.240
I'd like to show you how to declare
a type in your app and how to show

00:10:31.240 --> 00:10:33.250
the system you support opening it.

00:10:33.410 --> 00:10:36.820
So let's take a look at Xcode,
where I'm hard at work on a brand new

00:10:36.890 --> 00:10:39.600
restauranting-over-the-web experience.

00:10:39.670 --> 00:10:43.230
This app has the ability to read
restaurant menus that have been saved

00:10:43.230 --> 00:10:46.100
in a JSON-based format we've designed.

00:10:46.170 --> 00:10:49.160
We want to be able to open
those menu files in our app,

00:10:49.220 --> 00:10:51.760
so we'll need to first
declare a type for them.

00:10:51.850 --> 00:10:55.630
Because we created this type
ourselves and we own the format,

00:10:55.630 --> 00:10:58.320
it makes sense for us to export the type.

00:10:58.400 --> 00:11:01.510
The first thing we'll do in
Xcode is select the project

00:11:01.510 --> 00:11:03.600
itself to reveal its settings.

00:11:03.690 --> 00:11:06.750
We want to select the target
corresponding to our app.

00:11:06.880 --> 00:11:10.510
Right now, I'm looking at our iOS app,
but we'd do the same

00:11:10.510 --> 00:11:12.100
thing for a macOS app.

00:11:12.170 --> 00:11:16.230
Then we'll switch over to the Info tab,
which represents the contents

00:11:16.230 --> 00:11:18.260
of an app's Info.plist file.

00:11:18.340 --> 00:11:21.520
Expand the Exported
Type Identifiers section.

00:11:21.590 --> 00:11:25.580
Click the Add button at the bottom
of the section to add a new type.

00:11:25.650 --> 00:11:30.370
The first thing we want to add is the
uniform type identifier we came up with.

00:11:32.050 --> 00:11:36.900
For this demo,
we'll use com.example.restaurantMenu.

00:11:37.010 --> 00:11:42.040
Remember, com.example is reserved by
Apple for use in examples and demos.

00:11:42.150 --> 00:11:46.030
You'll usually want to use a
reverse DNS name that you own.

00:11:46.150 --> 00:11:50.150
For instance,
the company Clarus would use com.clarus,

00:11:50.150 --> 00:11:53.060
while Beats would use com.beatsbydre.

00:11:53.170 --> 00:11:56.150
Now we have to think about conformance.

00:11:58.110 --> 00:12:01.420
Types that represent files in the
file system need to conform to

00:12:01.420 --> 00:12:05.500
public.data if they're regular files,
that is, sequences of bytes,

00:12:05.580 --> 00:12:09.770
or to com.apple.package if they're
directories that the operating

00:12:09.770 --> 00:12:11.760
system should treat as files.

00:12:11.820 --> 00:12:15.760
This type is going to be saved to
disk using Swift's JSON encoder,

00:12:15.800 --> 00:12:17.800
which means it's a sequence of bytes.

00:12:17.860 --> 00:12:21.990
That means regular file,
and that means public.data.

00:12:22.420 --> 00:12:24.700
Looks like we have a decision to make.

00:12:24.870 --> 00:12:27.000
Because these files
will contain JSON data,

00:12:27.200 --> 00:12:30.380
they will be readable by anything
that can read a JSON file.

00:12:30.510 --> 00:12:34.450
That means the type can
also conform to public.json.

00:12:34.570 --> 00:12:37.040
That's a really useful
property for some file types,

00:12:37.040 --> 00:12:39.730
where the ability to edit
them manually is important.

00:12:39.940 --> 00:12:43.940
But for other types,
it's an implementation detail only.

00:12:44.020 --> 00:12:47.210
We'll add conformance to
public.json for this type.

00:12:47.590 --> 00:12:50.660
You can skip these sorts of
implementation details when creating

00:12:50.660 --> 00:12:53.920
your types if you don't want
other developers to rely on them,

00:12:53.920 --> 00:12:57.140
or if you expect your type's
format may change in the future.

00:12:57.230 --> 00:13:00.820
This file type is something the
user would consider a document,

00:13:00.820 --> 00:13:03.700
or content worth
interacting with directly.

00:13:03.780 --> 00:13:08.560
So we'll also make sure it
conforms to public.content.

00:13:08.650 --> 00:13:13.560
Next, we'll need to decide on a file name
extension to associate with our type.

00:13:15.120 --> 00:13:18.630
This extension will tie the type back
into the file system and allow the

00:13:18.630 --> 00:13:22.940
system to recognize that appropriately
named files have this type.

00:13:23.030 --> 00:13:25.590
We may be tempted to use a
three-character extension,

00:13:25.830 --> 00:13:31.400
but no major platform vendor has required
three-character extensions since 1995.

00:13:31.490 --> 00:13:34.550
We have lots of room to breathe here,
and avoiding conflicts

00:13:34.550 --> 00:13:37.720
with other developers' type
declarations is important.

00:13:37.810 --> 00:13:41.810
So we'll use a longer extension,
Restaurant Menu.

00:13:42.130 --> 00:13:45.940
Note that we didn't put a dot there
— the operating system knows to add

00:13:45.960 --> 00:13:48.150
it for us when creating file names.

00:13:48.270 --> 00:13:52.430
Lastly, this is also a good opportunity
to come up with a human-readable

00:13:52.430 --> 00:13:53.750
name for this type.

00:13:53.910 --> 00:13:55.830
Since our app is simply
called Restaurant,

00:13:55.930 --> 00:13:58.560
and since we picked the
extension Restaurant Menu,

00:13:58.710 --> 00:14:02.090
we'll keep this simple and
name it Restaurant Menu.

00:14:03.150 --> 00:14:07.140
This string is localizable in
our Info.plist.strings file.

00:14:07.140 --> 00:14:10.540
Use the string we just typed
as your key when localizing.

00:14:10.590 --> 00:14:13.260
Now that we've declared the type,
we need to tell the system that

00:14:13.260 --> 00:14:15.340
our app is able to open it.

00:14:15.400 --> 00:14:18.070
Expand the Document Types section.

00:14:18.570 --> 00:14:21.960
Click the Add button at the bottom of
the section to add a new supported type.

00:14:22.280 --> 00:14:26.280
This section is simpler than the
exported Type Identifiers section.

00:14:26.300 --> 00:14:30.500
The only thing we're required to
specify is the list of Uniform

00:14:30.500 --> 00:14:32.520
Type Identifiers the app supports.

00:14:32.540 --> 00:14:36.100
To allow for flexibility,
we can specify multiple types

00:14:36.100 --> 00:14:37.200
for a single entry here.

00:14:37.200 --> 00:14:39.050
Or one per entry.

00:14:39.180 --> 00:14:42.460
I personally prefer
having one type per entry,

00:14:42.490 --> 00:14:45.090
but it's mostly a question
of personal preference,

00:14:45.250 --> 00:14:46.700
like tabs versus spaces.

00:14:47.760 --> 00:14:51.960
Anyway, we'll add our uniform type
identifier to this field.

00:14:55.560 --> 00:14:58.900
We should also set this
entry's handler rank to Owner.

00:14:58.960 --> 00:15:02.560
This step isn't required,
but it's strongly recommended because

00:15:02.570 --> 00:15:06.500
it helps the system intelligently
pick the right app for a given job.

00:15:06.570 --> 00:15:09.770
Since we invented this type, we own it.

00:15:09.960 --> 00:15:12.170
On macOS,
there is an additional role field

00:15:12.400 --> 00:15:17.040
that lets us specify whether we can
open files as an editor or a viewer.

00:15:17.090 --> 00:15:20.500
Editors can both open and
save files of a given type,

00:15:20.550 --> 00:15:22.640
while viewers can only open them.

00:15:22.690 --> 00:15:25.930
Because our app can both
read and write these files,

00:15:26.000 --> 00:15:29.900
we'd specify "Editor." We're
done editing the info section.

00:15:29.960 --> 00:15:32.510
Our app can now open our
restaurant menu files.

00:15:32.770 --> 00:15:37.120
We'll need to write some SwiftUI, UIKit,
or AppKit code to handle the document

00:15:37.300 --> 00:15:39.860
once the system passes it to us.

00:15:39.950 --> 00:15:43.860
For more information on building a
document-based application in SwiftUI,

00:15:43.910 --> 00:15:49.100
check out "Build Document-Based
Apps in SwiftUI" from WWDC20.

00:15:49.210 --> 00:15:53.890
Documentation for building document-based
applications using UIKit and AppKit is

00:15:53.890 --> 00:15:57.700
available online at developer.apple.com.

00:15:58.130 --> 00:16:00.050
Our app has a competitor
on the App Store,

00:16:00.300 --> 00:16:00.940
Compies Food.

00:16:00.940 --> 00:16:04.980
Lots of restaurant owners use that
app and have saved their menus in

00:16:04.980 --> 00:16:06.490
the file format owned by that app.

00:16:06.580 --> 00:16:09.040
We want to also support
reading those files.

00:16:09.160 --> 00:16:13.240
This type was invented by somebody else,
and we're only borrowing it,

00:16:13.310 --> 00:16:15.550
so we need to import it
instead of export it.

00:16:15.640 --> 00:16:19.270
Let's head back to the Info tab
for our app target and select

00:16:19.270 --> 00:16:20.880
Imported Type Identifiers.

00:16:20.900 --> 00:16:24.300
Note that because we
created a new SwiftUI app,

00:16:24.450 --> 00:16:26.930
we have an existing entry
here for an example type.

00:16:27.520 --> 00:16:30.350
We can replace the contents
of the form with our own data,

00:16:30.360 --> 00:16:31.450
which is what I'll do.

00:16:31.520 --> 00:16:34.840
If we didn't have an existing
example type in our target,

00:16:34.840 --> 00:16:37.610
we could, of course,
add a new type with the Add button below.

00:16:37.620 --> 00:16:41.580
I'll fill in the info section
specified by Compies Food.

00:16:41.600 --> 00:16:45.210
Of course,
the details here are examples only.

00:16:45.260 --> 00:16:48.170
If you're adding support for
a real competitor's type,

00:16:48.180 --> 00:16:52.010
you should strive to match what they've
included in their Info.plist file.

00:16:53.460 --> 00:16:56.370
Because this type is imported,
it tells the system about the sort of

00:16:56.370 --> 00:16:59.100
files produced by the CompuSfood app.

00:16:59.190 --> 00:17:03.810
But if the user has that app installed,
the system can prefer its declaration,

00:17:03.810 --> 00:17:07.090
which should be exported,
as more authoritative.

00:17:07.400 --> 00:17:11.140
We'll now add support for opening these
files so that the system can pick our app

00:17:11.510 --> 00:17:13.600
when the user wants to open one of them.

00:17:13.690 --> 00:17:16.700
We'll go back to the
Document Types section.

00:17:17.450 --> 00:17:20.720
will create a separate entry
for Compy's food list and

00:17:20.780 --> 00:17:22.580
add the new Type Identifier.

00:17:23.220 --> 00:17:26.100
This entry is a little different
from the other one because

00:17:26.100 --> 00:17:27.900
we're not the owner of the type.

00:17:28.040 --> 00:17:31.800
Instead,
we want our handler rank to be alternate.

00:17:32.060 --> 00:17:34.540
Because our app can read these
files but not write them,

00:17:34.850 --> 00:17:37.200
we'd specify a role of viewer on macOS.

00:17:37.280 --> 00:17:40.450
The system now knows
we can open this file,

00:17:40.540 --> 00:17:44.290
but that we may not be the best choice
if the user has Compy's Food installed,

00:17:44.660 --> 00:17:46.640
since that app is the
owner of the file type.

00:17:46.690 --> 00:17:49.470
We want to be good
citizens on the platform,

00:17:49.470 --> 00:17:52.060
so it's important to respect
type ownership this way,

00:17:52.320 --> 00:17:56.230
even though we both know our code is
way better than our competitor's code.

00:17:56.230 --> 00:17:59.100
Just as we did with our
own restaurant menu type,

00:17:59.100 --> 00:18:01.730
we'll need to write some
Swift or Objective-C to actually

00:18:01.730 --> 00:18:03.660
read these files in our app.

00:18:03.830 --> 00:18:06.280
Check out developer.apple.com
for more info.

00:18:06.300 --> 00:18:10.780
So now that we've declared a type
and told the system we support it,

00:18:10.900 --> 00:18:13.160
it's time to work with
that type in our code.

00:18:13.160 --> 00:18:16.860
This section assumes you're at
least broadly familiar with the

00:18:16.860 --> 00:18:20.940
Uniform Type Identifiers API in
the core services framework.

00:18:20.940 --> 00:18:25.250
Here we have a small program that walks
a directory or a set of file URLs.

00:18:25.250 --> 00:18:29.020
It gets the Uniform Type Identifier
of each represented file.

00:18:29.100 --> 00:18:32.940
And then prints a localized
description of that type identifier.

00:18:32.940 --> 00:18:36.420
If the file is an image,
it draws it somewhere.

00:18:36.520 --> 00:18:38.960
And if it's an audio clip,
it plays it over the

00:18:39.050 --> 00:18:40.770
user's speakers or AirPods.

00:18:40.780 --> 00:18:43.790
Right away,
there are some problems visible here.

00:18:43.860 --> 00:18:48.400
We have to explicitly cast our
strings to CFStrings to use them

00:18:48.400 --> 00:18:50.580
with the global UT type functions.

00:18:50.580 --> 00:18:54.550
And we have to manually manage
the lifetime of the CFString we

00:18:54.820 --> 00:18:57.400
get from UT type copy description.

00:18:57.800 --> 00:19:02.950
But — and I'm very happy to talk to you
about this — in iOS 14 and macOS Big Sur,

00:19:03.270 --> 00:19:06.690
we have introduced a brand new
UniForm Type Identifiers framework

00:19:07.060 --> 00:19:11.040
that brings first-class Swiftiness
to UniForm Type Identifiers.

00:19:11.140 --> 00:19:14.900
Where we previously used CFStrings to
represent Type Identifiers,

00:19:14.980 --> 00:19:19.370
we can now use UTType to represent
types and their properties.

00:19:19.500 --> 00:19:23.420
Let's walk through this code and
convert it to use the new framework.

00:19:24.260 --> 00:19:28.280
I've imported the framework in order
to get access to the API it contains,

00:19:28.560 --> 00:19:32.700
and now I'll change the Type Identifier
URL property to ContentType,

00:19:32.860 --> 00:19:35.720
whose value is an
instance of a new struct,

00:19:35.960 --> 00:19:36.640
UTType.

00:19:36.760 --> 00:19:39.860
This struct encapsulates
a Uniform Type Identifier

00:19:39.860 --> 00:19:41.650
alongside metadata about it.

00:19:42.020 --> 00:19:45.310
Next, we'll fix this unretained value.

00:19:45.900 --> 00:19:48.600
UTType has a localized
description property.

00:19:48.810 --> 00:19:52.530
Properties like this one are a much
more natural way to work with a type's

00:19:52.530 --> 00:19:54.800
attributes than global functions.

00:19:54.920 --> 00:19:57.900
The value of this property
corresponds to the description

00:19:57.900 --> 00:20:00.590
string you entered in Xcode,
and is localized when

00:20:00.590 --> 00:20:02.050
you localize your app.

00:20:02.260 --> 00:20:07.380
Next, let's turn to UTType Conforms To,
another global function.

00:20:07.920 --> 00:20:12.410
This function takes a CFString,
which necessitates explicit casts.

00:20:12.570 --> 00:20:16.130
Unsurprisingly,
UTType has a conformsTo member method.

00:20:16.260 --> 00:20:20.150
But what are these .image and .audio?

00:20:20.630 --> 00:20:22.100
Remember this slide?

00:20:22.280 --> 00:20:23.780
When we were designing
this new framework,

00:20:23.780 --> 00:20:26.650
we took a look at the set of
types declared by the system,

00:20:26.800 --> 00:20:31.220
as well as the set of CFString constants
exposed in the old API.

00:20:31.420 --> 00:20:34.980
And we brought them over to the
new framework as named constants.

00:20:35.170 --> 00:20:39.070
There are over 120 such constants
defined in the new framework,

00:20:39.110 --> 00:20:42.500
covering the most commonly
used system-defined types.

00:20:42.610 --> 00:20:46.180
Of course, earlier in this session,
we declared some types in our app.

00:20:46.370 --> 00:20:49.730
Wouldn't it be nice if we could
expose constants for them,

00:20:49.730 --> 00:20:50.250
too?

00:20:51.650 --> 00:20:55.540
I'm just full of good news today,
because you can do exactly that.

00:20:55.630 --> 00:20:59.360
We have API for declaring named
constants for types that you export,

00:20:59.360 --> 00:21:01.340
and for types that you import.

00:21:01.400 --> 00:21:04.600
The semantics are a
little different for each.

00:21:04.680 --> 00:21:07.800
When you export a type, you're saying,
"I own this type.

00:21:07.870 --> 00:21:08.900
I created it.

00:21:08.980 --> 00:21:12.640
My app is the authority for this
type." So we go ahead and create

00:21:12.640 --> 00:21:15.810
an instance of UTType for you,
safe in the knowledge that you

00:21:15.810 --> 00:21:17.770
know everything about this type.

00:21:17.840 --> 00:21:21.340
When you import a type, you're saying,
"I know about this type,

00:21:21.390 --> 00:21:24.450
but somebody else might know
more than me." And the owner

00:21:24.450 --> 00:21:27.840
of that type might declare the
type differently than you did.

00:21:27.890 --> 00:21:31.030
If that happens,
we can substitute that type on the

00:21:31.030 --> 00:21:33.240
fly in the most common use cases.

00:21:33.320 --> 00:21:35.450
We need your cooperation, though.

00:21:35.640 --> 00:21:38.440
Rather than declaring your
imported types as constants,

00:21:38.590 --> 00:21:41.210
declare them as static,
computed variables,

00:21:41.210 --> 00:21:44.860
so that if the declaration changes
due to an app installation,

00:21:44.970 --> 00:21:48.320
you'll pick up the updated
type automatically.

00:21:49.100 --> 00:21:53.230
We've built support into Xcode for
detecting issues with types you declare.

00:21:53.370 --> 00:21:57.850
We can detect if an exported or imported
type is missing from your Info.plist,

00:21:57.850 --> 00:22:01.130
or if you used the wrong
constant initializer.

00:22:01.230 --> 00:22:03.680
We'll work to improve
the support over time,

00:22:03.680 --> 00:22:07.840
and your input will be invaluable here,
so please provide feedback.

00:22:07.900 --> 00:22:13.200
A number of frameworks support our
new API in iOS 14 and macOS Big Sur.

00:22:13.280 --> 00:22:16.200
Foundation has the
URL property I just showed you,

00:22:16.250 --> 00:22:20.450
and it also has utilities for generating
recommended file names based on a

00:22:20.450 --> 00:22:23.680
string or URL in an instance of UTType.

00:22:24.100 --> 00:22:27.240
SwiftUI has extensive support for UTType.

00:22:27.360 --> 00:22:31.230
Pasteboard and drag-and-drop APIs,
such as the onDrop event handler,

00:22:31.230 --> 00:22:33.020
use them exclusively.

00:22:34.070 --> 00:22:37.260
And SwiftUI's new support
for document-based apps

00:22:37.260 --> 00:22:39.140
is designed to use UTType.

00:22:39.200 --> 00:22:43.510
I recommend you check out "Build
Document-Based Apps in SwiftUI"

00:22:43.510 --> 00:22:46.790
from WWDC20 to learn more about it.

00:22:47.680 --> 00:22:50.460
When using AppKit,
NSWorkspace will let you

00:22:50.480 --> 00:22:52.400
get an icon for any UTType.

00:22:52.450 --> 00:22:56.400
An NSOpenPanel and
NSSavePanel support UTTypes.

00:22:56.540 --> 00:22:59.950
UIKit supports using UTTypes
when presenting document

00:22:59.950 --> 00:23:01.980
pickers and document browsers.

00:23:02.050 --> 00:23:06.280
And Core Spotlight lets you create
an attribute set from a UTType.

00:23:06.690 --> 00:23:10.920
There are a number of APIs that do
not support UTType in this release,

00:23:11.090 --> 00:23:13.880
and you may find yourself
needing to interact with them.

00:23:14.000 --> 00:23:14.980
It's not difficult.

00:23:15.220 --> 00:23:18.600
If you need to pass a Uniform
Type Identifier to an API,

00:23:18.750 --> 00:23:23.440
get the UTType's identifier
property and cast it to a CFString.

00:23:23.520 --> 00:23:27.520
If you want to convert a Uniform
Type Identifier back to a UTType,

00:23:27.610 --> 00:23:32.660
cast it from CFString to String and
initialize your UTType with that String.

00:23:32.760 --> 00:23:36.560
This is a failable initializer,
so don't forget to check for nil.

00:23:37.890 --> 00:23:42.160
In Objective-C, it's a little wordier,
but the idea is the same.

00:23:42.210 --> 00:23:45.290
Cast the UTTypes
identifier to CFStringRef,

00:23:45.290 --> 00:23:50.660
or cast a CFString to NSString and
create a UTType from it.

00:23:51.120 --> 00:23:55.750
We've seen today how the system derives
a file's type from its metadata,

00:23:55.780 --> 00:23:59.030
and how Apple encapsulates
that information using

00:23:59.030 --> 00:24:00.990
Uniform Type Identifiers.

00:24:01.110 --> 00:24:04.030
We've learned how to declare
and use our own types,

00:24:04.130 --> 00:24:09.110
and how to interact with types that may
be shared among multiple applications.

00:24:09.430 --> 00:24:12.090
And we've introduced a new
UniForm Type Identifiers

00:24:12.200 --> 00:24:15.380
framework that provides a modern,
object-oriented way to

00:24:15.380 --> 00:24:17.620
interact with types.

00:24:17.690 --> 00:24:20.570
I look forward to seeing how you
use this knowledge and the new

00:24:20.570 --> 00:24:22.250
framework to build your apps.

00:24:22.380 --> 00:24:23.000
Thank you.