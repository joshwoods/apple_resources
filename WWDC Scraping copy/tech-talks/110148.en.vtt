WEBVTT

00:00:01.468 --> 00:00:02.870
Jon Davis: Hello,
I'm Jon Davis,

00:00:02.870 --> 00:00:07.474
web technologies evangelist
for the Safari and WebKit teams.

00:00:07.474 --> 00:00:09.776
I'm excited to be your guide
on how to build

00:00:09.776 --> 00:00:13.146
and deploy Safari extensions
for iOS.

00:00:13.146 --> 00:00:14.815
Now, there are a couple
of different types

00:00:14.815 --> 00:00:16.550
of extensions for iOS.

00:00:16.550 --> 00:00:19.353
We've had content blockers
on iOS for a few years,

00:00:19.353 --> 00:00:22.122
and that's a type of extension
that allows you to configure

00:00:22.122 --> 00:00:25.759
powerful rules
to block resource loads.

00:00:25.759 --> 00:00:28.896
But I'm here to tell you
about Safari web extensions.

00:00:28.896 --> 00:00:31.999
They were introduced last year
on macOS Big Sur

00:00:31.999 --> 00:00:36.703
and this fall, we brought them
to iOS 15 and iPadOS 15.

00:00:36.703 --> 00:00:40.207
It's a type of extension
that uses web technologies

00:00:40.207 --> 00:00:42.209
that works across
other browsers,

00:00:42.209 --> 00:00:44.211
and our users are loving them.

00:00:44.211 --> 00:00:46.914
It's the most popular category
on the App Store,

00:00:46.914 --> 00:00:49.983
and they're easy to install,
like any other app.

00:00:49.983 --> 00:00:51.852
And that's because
Safari web extensions

00:00:51.852 --> 00:00:54.288
are distributed with an app.

00:00:54.288 --> 00:00:56.423
And that means
you get the benefits

00:00:56.423 --> 00:00:58.792
of being on the App Store.

00:00:58.792 --> 00:01:00.694
Users can discover
your extensions,

00:01:00.694 --> 00:01:03.864
you can easily sell
your extensions up front --

00:01:03.864 --> 00:01:05.132
You can even take advantage

00:01:05.132 --> 00:01:07.134
of powerful features
like in-app payments

00:01:07.134 --> 00:01:10.070
to unlock advanced features
of your extensions

00:01:10.070 --> 00:01:12.773
or use TestFlight
to run a beta program.

00:01:12.773 --> 00:01:15.642
But maybe you're saying,
"That's all well and good, John,

00:01:15.642 --> 00:01:18.912
but I'm a web developer,
not an app developer."

00:01:18.912 --> 00:01:21.214
Well, me too! And they asked me
to be your guide.

00:01:21.214 --> 00:01:23.583
So I'm here
to help you learn Xcode,

00:01:23.583 --> 00:01:27.054
and we're going to build
a new project from scratch.

00:01:27.054 --> 00:01:28.355
I'm also going to touch on

00:01:28.355 --> 00:01:32.025
the privacy-preserving
permissions model of Safari

00:01:32.025 --> 00:01:33.727
and how to submit
your extension

00:01:33.727 --> 00:01:38.932
with some tips on sailing
through that App Review process.

00:01:38.932 --> 00:01:42.536
So let's get started
working with Xcode.

00:01:42.536 --> 00:01:45.505
And to do that, we'll need
to download and install it

00:01:45.505 --> 00:01:47.307
from the App Store.

00:01:47.307 --> 00:01:48.809
I'm going to launch
the App Store,

00:01:48.809 --> 00:01:51.178
and in Search
I'll type "Xcode"

00:01:51.178 --> 00:01:53.747
and it comes up
just about right away.

00:01:53.747 --> 00:01:55.882
And then all you need to do
is click the Get button

00:01:55.882 --> 00:01:57.517
and then click Install.

00:01:57.517 --> 00:02:00.120
Now, it is a sizeable download
that'll take a while

00:02:00.120 --> 00:02:01.989
but when you're able
to launch it,

00:02:01.989 --> 00:02:05.392
Xcode will prompt you to install
Command Line Tools.

00:02:05.392 --> 00:02:08.662
If you skipped installing them,
you can easily do that later

00:02:08.662 --> 00:02:12.466
from the command line
in Terminal.

00:02:12.466 --> 00:02:16.203
You'll just need to type
"xcode-select"

00:02:16.203 --> 00:02:17.504
and add the install flag,

00:02:17.504 --> 00:02:19.840
and that'll kick off
the install process.

00:02:19.840 --> 00:02:22.075
Now, my environment
is ready to go,

00:02:22.075 --> 00:02:24.111
so I won't run
this command now,

00:02:24.111 --> 00:02:25.879
but you'll want to make sure
you have them installed

00:02:25.879 --> 00:02:27.948
because they include
an important tool

00:02:27.948 --> 00:02:31.018
called the Safari
web extension converter.

00:02:31.018 --> 00:02:32.452
It's useful if you've written

00:02:32.452 --> 00:02:34.388
a web extension for
another browser

00:02:34.388 --> 00:02:36.823
or one you've written
for Safari on macOS

00:02:36.823 --> 00:02:41.161
that you'd like to upgrade
with support for Safari on iOS.

00:02:41.161 --> 00:02:44.865
Now I have a simple demo web
extension in my Documents folder

00:02:44.865 --> 00:02:48.635
and this hello-world extension
is written for another browser,

00:02:48.635 --> 00:02:51.271
and it simply shows
a "Hello World" message

00:02:51.271 --> 00:02:53.240
in a pop-up.

00:02:53.240 --> 00:02:57.277
Now I can use the converter tool
to upgrade it to work with iOS.

00:02:57.277 --> 00:02:59.946
In Terminal, just type "xc",
as in Xcode --

00:02:59.946 --> 00:03:03.884
so that's "xcrun".

00:03:03.884 --> 00:03:06.353
And then
"safari-web-extension-converter"

00:03:06.353 --> 00:03:08.588
and a path to the project.

00:03:08.588 --> 00:03:11.358
If you have an extension written
for Safari on macOS,

00:03:11.358 --> 00:03:14.294
you can also upgrade it
using the converter tool.

00:03:14.294 --> 00:03:18.498
Just type "xcrun
safari-web-extension-converter"

00:03:18.498 --> 00:03:20.801
and add the rebuild-project flag

00:03:20.801 --> 00:03:24.438
followed by the path
to the macOS extension.

00:03:24.438 --> 00:03:26.673
But let's actually see
what the convertor tool does

00:03:26.673 --> 00:03:30.177
when we run it on
the Hello World extension.

00:03:33.180 --> 00:03:36.249
And pressing Return,
it begins the process.

00:03:36.249 --> 00:03:38.518
And what it's actually doing
is wrapping our extension

00:03:38.518 --> 00:03:41.621
into an app project
that we can compile and run

00:03:41.621 --> 00:03:44.024
for iOS and macOS.

00:03:44.024 --> 00:03:46.760
Now, switching back
to the Terminal for a moment,

00:03:46.760 --> 00:03:49.429
I want to point out this note
that has a warning here,

00:03:49.429 --> 00:03:51.064
showing that iOS extensions

00:03:51.064 --> 00:03:53.900
require nonpersistent
background pages.

00:03:53.900 --> 00:03:56.336
This is actually really great
because it's basically giving us

00:03:56.336 --> 00:03:58.505
a to-do list of the things
we'll need to check

00:03:58.505 --> 00:04:02.209
to make sure our extension
will work for iOS.

00:04:02.209 --> 00:04:04.478
Let's get back into Xcode.

00:04:04.478 --> 00:04:06.980
This extension is almost ready.

00:04:06.980 --> 00:04:09.549
The background script
is already set up to run

00:04:09.549 --> 00:04:11.785
in a nonpersistent way.

00:04:11.785 --> 00:04:14.721
We just need to tell Safari
to run it that way.

00:04:14.721 --> 00:04:18.125
So all I need to do
to get this to work for iOS

00:04:18.125 --> 00:04:21.361
is to edit the manifest file.

00:04:21.361 --> 00:04:23.530
And in the background section,

00:04:23.530 --> 00:04:30.637
I'll add the persistent key
with a value of false.

00:04:30.637 --> 00:04:31.905
And that's it!

00:04:31.905 --> 00:04:34.441
Let's try running this
in the simulator.

00:04:34.441 --> 00:04:36.276
I'm going to use
the Build Targets menu

00:04:36.276 --> 00:04:38.812
and choose iPhone 13 Pro.

00:04:38.812 --> 00:04:41.681
Now, I have a lot of simulators
installed already,

00:04:41.681 --> 00:04:43.917
but you may need to use
the Add Additional Simulators

00:04:43.917 --> 00:04:46.353
to download the ones
you'd like to test in.

00:04:46.353 --> 00:04:50.323
So I'll select iPhone 13 Pro and
click the build and run button;

00:04:50.323 --> 00:04:52.592
the one that looks like
a play button.

00:04:52.592 --> 00:04:53.894
And this is going
to build our app

00:04:53.894 --> 00:04:55.061
and launch it in the simulator.

00:04:55.061 --> 00:04:56.530
You can see the status here

00:04:56.530 --> 00:04:58.932
in the upper-right
of the status bar.

00:04:58.932 --> 00:05:00.634
Now, switching to the simulator,

00:05:00.634 --> 00:05:03.770
I'll need to wait until the app
gets installed and launches.

00:05:07.774 --> 00:05:09.009
Once it's launched,

00:05:09.009 --> 00:05:13.446
I can switch over
to the Settings app,

00:05:13.446 --> 00:05:18.051
find the Safari section,
and tap on Extensions,

00:05:18.051 --> 00:05:24.724
and then turn on
our Hello World extension.

00:05:24.724 --> 00:05:26.726
Now we can try it out in Safari.

00:05:26.726 --> 00:05:30.230
Launch Safari
and tap the Aa menu.

00:05:30.230 --> 00:05:32.532
There, you'll find
the Hello World extension,

00:05:32.532 --> 00:05:35.335
and I can tap on it,
and it prompts for permission.

00:05:35.335 --> 00:05:36.603
I'll talk more about that later,

00:05:36.603 --> 00:05:39.739
but for now, I'll select
Allow For One Day.

00:05:39.739 --> 00:05:40.840
And there we go.

00:05:40.840 --> 00:05:43.276
A "Hello World!" message
in a pop-up.

00:05:43.276 --> 00:05:46.379
And that's how easy it is for
you to convert a web extension

00:05:46.379 --> 00:05:49.916
written for another browser.

00:05:49.916 --> 00:05:51.451
So I had an idea for a project

00:05:51.451 --> 00:05:54.688
to build a preview
of Open Graph metadata;

00:05:54.688 --> 00:05:57.123
the same metadata that's used
to show previews

00:05:57.123 --> 00:05:59.326
on social media sites
like Twitter.

00:05:59.326 --> 00:06:01.294
You get this nice image,
a title,

00:06:01.294 --> 00:06:04.464
and description of the web page.

00:06:04.464 --> 00:06:06.299
And so, I'd like to build
an extension

00:06:06.299 --> 00:06:08.902
that can preview that data
using a pop-up.

00:06:08.902 --> 00:06:13.974
So that's what we're going
to build today.

00:06:13.974 --> 00:06:18.878
So let's start by creating
a new project in Xcode.

00:06:18.878 --> 00:06:23.617
I'll select Safari Extension App
under Multiplatform

00:06:23.617 --> 00:06:27.053
and click Next.

00:06:27.053 --> 00:06:28.255
For the product name

00:06:28.255 --> 00:06:32.859
I'm going to use
"Open Graph Preview."

00:06:32.859 --> 00:06:36.496
It already has my team filled in
and an organization identifier

00:06:36.496 --> 00:06:38.898
using the reverse domain
convention.

00:06:38.898 --> 00:06:43.770
I'll leave the language as Swift
and click Next.

00:06:43.770 --> 00:06:46.473
Now it's asking for a place
to save the project --

00:06:46.473 --> 00:06:48.942
the desktop will work fine --
and I'm going to leave

00:06:48.942 --> 00:06:52.178
the "Create Git repository
on Mac" enabled --

00:06:52.178 --> 00:06:55.215
I love having version
control built in --

00:06:55.215 --> 00:06:58.351
and I'll click Create.

00:06:58.351 --> 00:07:00.186
And this will generate
the project for us

00:07:00.186 --> 00:07:02.589
from the template.

00:07:02.589 --> 00:07:04.691
Now, before we go any further,

00:07:04.691 --> 00:07:09.996
let me give you
a brief overview of Xcode.

00:07:09.996 --> 00:07:12.932
On the left side of the window
is the navigation sidebar

00:07:12.932 --> 00:07:18.605
with all of the resources for
your project organized for you.

00:07:18.605 --> 00:07:20.407
In the center is the main editor

00:07:20.407 --> 00:07:23.176
for the files you select
from the navigator sidebar

00:07:23.176 --> 00:07:25.945
and then the right
is an inspector sidebar

00:07:25.945 --> 00:07:29.282
that changes based on
the file you're editing.

00:07:29.282 --> 00:07:31.184
We're not going to need
the inspector sidebar

00:07:31.184 --> 00:07:34.854
so I'm going to go ahead
and hide it so that we have

00:07:34.854 --> 00:07:38.124
a little bit more room
to work with.

00:07:38.124 --> 00:07:40.026
Now let's take a look
at the files that make up

00:07:40.026 --> 00:07:42.028
a new Safari web extension
project,

00:07:42.028 --> 00:07:46.299
and at the top of the navigator
sidebar is the project file.

00:07:46.299 --> 00:07:48.368
When you select it,
it opens the main editor

00:07:48.368 --> 00:07:53.039
to a configuration option screen
for the project.

00:07:53.039 --> 00:07:55.342
Now below that
is the Shared (App) folder,

00:07:55.342 --> 00:07:58.411
and this has the resources
for the app launch screen.

00:07:58.411 --> 00:08:00.313
When you click
the disclosure triangle

00:08:00.313 --> 00:08:01.815
next to the Resources folder,

00:08:01.815 --> 00:08:05.051
you'll see it's just
web resources.

00:08:05.051 --> 00:08:08.388
In fact, it's just an HTML file
that you can edit,

00:08:08.388 --> 00:08:11.024
and the template sets you up
to easily customize the markup,

00:08:11.024 --> 00:08:13.493
the styles, and the script.

00:08:13.493 --> 00:08:16.663
The Shared (Extensions) folder
has all of the resources

00:08:16.663 --> 00:08:18.398
for our extension.

00:08:18.398 --> 00:08:21.768
And then when you expand
the Resources folder,

00:08:21.768 --> 00:08:27.841
you'll see all the familiar
files for a web extension.

00:08:27.841 --> 00:08:30.577
The manifest is here,
the background script,

00:08:30.577 --> 00:08:34.781
the content script,
and the pop-up files.

00:08:34.781 --> 00:08:38.885
The iOS (App)
and macOS (App) folders

00:08:38.885 --> 00:08:42.756
have platform-specific resources
and then below that

00:08:42.756 --> 00:08:46.426
the iOS (Extension)
and macOS (Extension) folders

00:08:46.426 --> 00:08:49.696
have extension-specific
resources for those platforms.

00:08:49.696 --> 00:08:51.931
We're not going to need to worry
about them for this project,

00:08:51.931 --> 00:08:53.666
so I'm going to go ahead
and put them away

00:08:53.666 --> 00:08:58.605
because all of our work will be
in the Shared (Extension) files.

00:08:58.605 --> 00:09:03.610
And let's start
in the manifest file.

00:09:03.610 --> 00:09:05.645
And you can see
that the template provides

00:09:05.645 --> 00:09:07.447
everything we need
to get started,

00:09:07.447 --> 00:09:10.683
including filling out
the name and description

00:09:10.683 --> 00:09:14.220
from the project information.

00:09:14.220 --> 00:09:17.657
Below that,
it specifies some default icons;

00:09:17.657 --> 00:09:19.292
you'll want to remember
to provide your own

00:09:19.292 --> 00:09:21.661
for your project.

00:09:24.664 --> 00:09:27.133
And then here,
it provides a background script,

00:09:27.133 --> 00:09:28.635
and you can see
it's already set up

00:09:28.635 --> 00:09:32.639
to run the background script
in a nonpersistent way.

00:09:32.639 --> 00:09:33.673
Now, for this project,

00:09:33.673 --> 00:09:35.909
we're actually not going to need
the background script,

00:09:35.909 --> 00:09:38.445
so I'm going to go ahead
and remove this entry

00:09:38.445 --> 00:09:41.948
from the manifest file
and go ahead and remove

00:09:41.948 --> 00:09:49.122
the background script itself
and move that to the trash.

00:09:49.122 --> 00:09:51.257
Next, it sets up
the content script,

00:09:51.257 --> 00:09:53.993
and here is where it declares
the JavaScript file

00:09:53.993 --> 00:09:57.797
and the domain pattern for the
website it can be injected on.

00:09:57.797 --> 00:10:00.433
Now, I want this tool
to be usable on any site

00:10:00.433 --> 00:10:04.370
the user wants to use it on,
so I'm actually going to change

00:10:04.370 --> 00:10:07.807
the "example.com" here
to an asterisk

00:10:07.807 --> 00:10:11.778
so it can match any domain.

00:10:11.778 --> 00:10:15.048
Below that, it declares
the browser action section

00:10:15.048 --> 00:10:18.618
and here we define
a "popup" file

00:10:18.618 --> 00:10:20.820
and then a set of default
toolbar icons --

00:10:20.820 --> 00:10:23.022
again, you'll want to remember
to supply your own

00:10:23.022 --> 00:10:25.625
for your project.

00:10:25.625 --> 00:10:27.360
And finally, we have
the permissions key,

00:10:27.360 --> 00:10:29.896
where I'm going to add activeTab

00:10:29.896 --> 00:10:31.865
as a permission
we're going to use.

00:10:31.865 --> 00:10:33.266
Why activeTab?

00:10:33.266 --> 00:10:35.568
I'm so glad you asked.

00:10:37.570 --> 00:10:38.638
Let's take a quick look

00:10:38.638 --> 00:10:42.575
at the different permissions
extensions can use.

00:10:42.575 --> 00:10:44.878
The extensions model
in Safari is set up

00:10:44.878 --> 00:10:47.146
to put users in control.

00:10:47.146 --> 00:10:49.382
It doesn't work
without user interaction first,

00:10:49.382 --> 00:10:51.584
and so they're badged
on first use

00:10:51.584 --> 00:10:54.087
to help train users.

00:10:54.087 --> 00:10:57.490
Permissions are granted
per website, and that means

00:10:57.490 --> 00:11:00.560
website permissions will show up
in Safari's settings

00:11:00.560 --> 00:11:04.097
and preferences
for users to control.

00:11:04.097 --> 00:11:08.134
Now, there are four fun flavors
of permissions to look at.

00:11:08.134 --> 00:11:10.603
Let's go through each.

00:11:10.603 --> 00:11:14.107
The first type of permission is
the script injection permission.

00:11:14.107 --> 00:11:16.643
This allows you
to inject JavaScript

00:11:16.643 --> 00:11:20.313
and even style sheets into
the page a user is browsing,

00:11:20.313 --> 00:11:25.285
based on the domains of websites
listed in the matches key.

00:11:25.285 --> 00:11:29.122
Extensions injecting scripts
get badged in the toolbar

00:11:29.122 --> 00:11:31.291
when the website
the user is browsing

00:11:31.291 --> 00:11:33.993
matches the pattern
in the matches key.

00:11:33.993 --> 00:11:37.130
The user will need to click
the extension to enable it.

00:11:37.130 --> 00:11:38.932
And it's always
just sitting there,

00:11:38.932 --> 00:11:42.201
waiting to be enabled
by the user.

00:11:42.201 --> 00:11:45.505
The next type of permission
is the implicit permission.

00:11:45.505 --> 00:11:47.340
Now, there are a couple
of different types

00:11:47.340 --> 00:11:50.443
of implicit permissions
declared in the manifest file.

00:11:50.443 --> 00:11:52.145
The first that I have
highlighted here

00:11:52.145 --> 00:11:53.713
are nonsensitive,

00:11:53.713 --> 00:11:57.150
which doesn't require
any extra privileges.

00:11:57.150 --> 00:11:59.285
And the second type
are sensitive permissions

00:11:59.285 --> 00:12:01.921
because they have
a website-identifying data,

00:12:01.921 --> 00:12:06.960
and this is one of the ways
that we protect user privacy.

00:12:06.960 --> 00:12:08.528
When you call an API,

00:12:08.528 --> 00:12:10.763
it waits for a callback
with the data.

00:12:10.763 --> 00:12:13.700
Users get prompted after
interacting with the extension,

00:12:13.700 --> 00:12:17.003
and they'll have about
a minute to respond.

00:12:17.003 --> 00:12:18.504
When they approve it,

00:12:18.504 --> 00:12:21.341
the callback gets fulfilled
and the data is given back.

00:12:21.341 --> 00:12:23.910
Anything they've already
approved gets fulfilled

00:12:23.910 --> 00:12:26.579
just about right away.

00:12:26.579 --> 00:12:28.948
The next type of permission
is the explicit permission,

00:12:28.948 --> 00:12:31.584
and this is explicit
because the extension itself

00:12:31.584 --> 00:12:34.654
is requesting permission.

00:12:34.654 --> 00:12:36.789
A prompt is always
shown modally,

00:12:36.789 --> 00:12:39.525
and it's not badged because
it's the extension itself

00:12:39.525 --> 00:12:42.495
requesting permission,
not the user.

00:12:42.495 --> 00:12:45.164
And the last type of permission
is the active tab permission.

00:12:45.164 --> 00:12:48.067
This is a special case where
if you want to avoid alerts,

00:12:48.067 --> 00:12:50.169
active tab is the answer.

00:12:50.169 --> 00:12:52.038
Users will need to interact
with the extension

00:12:52.038 --> 00:12:55.208
via the toolbar, or on Mac
they can use a keyboard shortcut

00:12:55.208 --> 00:12:57.176
or a contextual menu.

00:12:57.176 --> 00:13:00.613
This grants a tabs permission
for the current domain

00:13:00.613 --> 00:13:03.516
in the current tab.

00:13:03.516 --> 00:13:07.453
And that's the one
we want to use today.

00:13:07.453 --> 00:13:10.189
Now let's move on
to coding the content script.

00:13:10.189 --> 00:13:11.591
And the content script template

00:13:11.591 --> 00:13:14.160
is set up to send
and listen for messages.

00:13:14.160 --> 00:13:16.929
Now, we won't need to send a
message from the content script,

00:13:16.929 --> 00:13:19.599
but we will need
to listen for one.

00:13:19.599 --> 00:13:21.801
The first thing we need
our content script to do

00:13:21.801 --> 00:13:24.637
is to grab the Open Graph
metadata from the page

00:13:24.637 --> 00:13:26.773
the user is browsing,
and we can just use

00:13:26.773 --> 00:13:30.176
some simple DOM API
to find the right meta tags

00:13:30.176 --> 00:13:34.313
for the OG title,
description, and image.

00:13:34.313 --> 00:13:36.816
Now, the way the extension
will work,

00:13:36.816 --> 00:13:40.453
the user will tap on the
extension to open the pop-up

00:13:40.453 --> 00:13:43.122
and it will be
the pop-up script's job

00:13:43.122 --> 00:13:46.125
to ask the content script
for the Open Graph data

00:13:46.125 --> 00:13:47.894
from the current page.

00:13:47.894 --> 00:13:49.729
So in this listener callback,

00:13:49.729 --> 00:13:54.200
we want to listen for a message
with the magic word.

00:13:54.200 --> 00:13:59.405
Now, if we get a message
without the magic word,

00:13:59.405 --> 00:14:01.007
then we're just not going
to do anything.

00:14:01.007 --> 00:14:03.676
In fact, we'll just
return void here.

00:14:03.676 --> 00:14:06.713
But if we do get a message
with the magic word,

00:14:06.713 --> 00:14:10.550
then we'll send back the data
from the meta tags.

00:14:10.550 --> 00:14:13.753
And that's all we need to do
in the content script.

00:14:13.753 --> 00:14:17.023
So let's move on
to setting up our pop-up,

00:14:17.023 --> 00:14:19.859
and we'll start
in the pop-up HTML file.

00:14:19.859 --> 00:14:23.463
You can see the style sheet and
the JavaScript for the pop-up

00:14:23.463 --> 00:14:25.398
are included right here.

00:14:25.398 --> 00:14:27.967
So for web developers, you're
going to feel right at home.

00:14:27.967 --> 00:14:29.535
Now for our markup in this file,

00:14:29.535 --> 00:14:31.771
we just need to set up
some placeholder elements

00:14:31.771 --> 00:14:37.477
for our title and description
and image previews.

00:14:37.477 --> 00:14:42.181
So now we have a placeholder
element for the title,

00:14:42.181 --> 00:14:46.052
and for the description,
and for our image.

00:14:49.856 --> 00:14:55.094
Next, will make some adjustments
to our pop-up's style sheet.

00:14:55.094 --> 00:14:58.364
Here, I only need to make
a few minor adjustments

00:14:58.364 --> 00:15:04.003
to make it look great
on all platforms.

00:15:04.003 --> 00:15:06.706
And last, I just need to set up
a responsive design layout

00:15:06.706 --> 00:15:12.912
for the images to fill the space
and maintain aspect ratio.

00:15:12.912 --> 00:15:15.181
Finally, we come
to the heart of the extension

00:15:15.181 --> 00:15:18.151
by editing the popup script,
and first we need to grab

00:15:18.151 --> 00:15:20.119
a reference to those
placeholder elements

00:15:20.119 --> 00:15:24.123
we defined in our
popup HTML file.

00:15:24.123 --> 00:15:27.627
Next, we need to send a message
to the content script

00:15:27.627 --> 00:15:32.031
and to do that, we need to query
for the active tab.

00:15:32.031 --> 00:15:35.201
So to query for the active tab
in the current window,

00:15:35.201 --> 00:15:40.706
we'll use the tabs.query API.

00:15:40.706 --> 00:15:42.909
And in the tabs.query API,

00:15:42.909 --> 00:15:48.181
we'll filter by active tab
in the current window.

00:15:48.181 --> 00:15:53.886
Once we have the correct tab,
we can now send the message.

00:15:53.886 --> 00:15:59.158
And in sending the message,
we'll pass the current tabs ID

00:15:59.158 --> 00:16:04.063
and of course,
our magic word.

00:16:04.063 --> 00:16:07.266
Then when we get the response,
we simply need to update

00:16:07.266 --> 00:16:10.770
our placeholder elements
with the data.

00:16:10.770 --> 00:16:12.638
That's it!

00:16:12.638 --> 00:16:16.175
Now, let's try running
our extension in the simulator.

00:16:16.175 --> 00:16:17.877
Again, from the Target menu,

00:16:17.877 --> 00:16:21.180
I'll select iPhone 13 Pro
simulator.

00:16:21.180 --> 00:16:23.783
I'll click the build and run
button to kick off the process

00:16:23.783 --> 00:16:25.618
and switch to the simulator,

00:16:25.618 --> 00:16:28.788
where I'll wait
for the app to launch.

00:16:28.788 --> 00:16:31.691
Once it's launched,
I can enable our new extension

00:16:31.691 --> 00:16:33.326
in the Settings app.

00:16:33.326 --> 00:16:36.762
So let's switch to Settings

00:16:36.762 --> 00:16:38.831
and scroll to Safari.

00:16:38.831 --> 00:16:42.201
Then tap it and tap Extensions,

00:16:42.201 --> 00:16:48.174
and under Open Graph Preview
I can toggle it on.

00:16:48.174 --> 00:16:51.444
Now let's launch Safari

00:16:51.444 --> 00:16:56.115
and I'll tap the Aa menu.

00:16:56.115 --> 00:16:59.518
And there in the menu
is Open Graph Preview.

00:16:59.518 --> 00:17:01.721
Now, when I tap on this,

00:17:01.721 --> 00:17:04.056
I get a permission request
for the content script.

00:17:04.056 --> 00:17:06.759
I'll select Allow For One Day.

00:17:06.759 --> 00:17:11.430
And bingo, we have a preview
of this page's open graph data.

00:17:11.430 --> 00:17:15.635
Now let's try it
on another page.

00:17:15.635 --> 00:17:18.638
Again from the Aa menu,
I'll tap Open Graph Preview

00:17:18.638 --> 00:17:20.840
and Allow For One Day.

00:17:20.840 --> 00:17:23.242
And there we have it,
but that's not quite right.

00:17:23.242 --> 00:17:26.312
We shouldn't have
a broken image.

00:17:26.312 --> 00:17:27.647
So to figure out
what's going on here,

00:17:27.647 --> 00:17:30.783
I can use Web Inspector
in Safari.

00:17:30.783 --> 00:17:34.053
If you haven't enabled it,
go to Safari Preferences

00:17:34.053 --> 00:17:35.955
and under the Advanced tab

00:17:35.955 --> 00:17:39.292
enable Show Develop menu
in the menu bar.

00:17:39.292 --> 00:17:42.662
Then from the Develop menu,
you can select Web Inspector

00:17:42.662 --> 00:17:45.631
for the content
from the simulator.

00:17:45.631 --> 00:17:46.799
And when I do that,

00:17:46.799 --> 00:17:50.903
I can easily see that
the image did not load.

00:17:50.903 --> 00:17:52.905
So if the URL is wrong,

00:17:52.905 --> 00:17:55.207
that's probably coming
from the content.

00:17:55.207 --> 00:18:01.514
So let's open another
Web Inspector for webkit.org.

00:18:06.519 --> 00:18:10.890
Now I can search
for the og meta tag data.

00:18:10.890 --> 00:18:14.260
And here I can see
we have a title,

00:18:14.260 --> 00:18:18.331
and we have a description --
Ah, but we're missing the image.

00:18:18.331 --> 00:18:19.532
And that's what's going on.

00:18:19.532 --> 00:18:22.969
We have an undefined case
we're not handling.

00:18:22.969 --> 00:18:26.005
So back in Xcode,
all we need to do

00:18:26.005 --> 00:18:30.443
is handle that undefined case.

00:18:30.443 --> 00:18:33.012
Now I can try
running this again.

00:18:33.012 --> 00:18:34.847
Clicking the
Build and Run button,

00:18:34.847 --> 00:18:39.752
I'll click Replace to replace it
on the simulator,

00:18:39.752 --> 00:18:41.854
and once it launches
on the simulator,

00:18:41.854 --> 00:18:45.992
I can jump back into Safari
and try it again.

00:18:48.995 --> 00:18:53.899
From the Aa menu, I'll select
Open Graph Preview and bingo.

00:18:53.899 --> 00:18:55.401
Perfect!

00:18:55.401 --> 00:18:58.137
It shows the title
and description,

00:18:58.137 --> 00:18:59.672
but we should make sure it works

00:18:59.672 --> 00:19:04.310
on a page that does have
an image, and it does.

00:19:04.310 --> 00:19:07.013
Perfect!

00:19:07.013 --> 00:19:09.115
Well, getting it to work
in the simulator is a great way

00:19:09.115 --> 00:19:11.217
to test on a number of devices,

00:19:11.217 --> 00:19:15.388
but it's always a good idea
to test on a real device.

00:19:15.388 --> 00:19:18.791
So I have an iPhone handy.

00:19:18.791 --> 00:19:22.495
Back in Xcode,
I'll select the Target menu

00:19:22.495 --> 00:19:27.867
and choose the iPhone.

00:19:27.867 --> 00:19:33.739
Now let's build and run
and launch it on this device.

00:19:39.745 --> 00:19:43.382
After it's running on the device
and launches,

00:19:43.382 --> 00:19:45.751
I'll need to enable it
in Settings.

00:19:45.751 --> 00:19:48.287
So let's switch back
to the Settings app.

00:19:48.287 --> 00:19:51.524
Under Safari and Extensions

00:19:51.524 --> 00:19:54.960
and Open Graph Preview,
we'll toggle it on.

00:19:54.960 --> 00:19:59.065
Now, launching Safari again,
I'll tap the Aa menu.

00:19:59.065 --> 00:20:02.835
And I can see the extension
and tap it,

00:20:02.835 --> 00:20:05.838
and Allow For One Day.

00:20:05.838 --> 00:20:08.841
And it works perfect.

00:20:08.841 --> 00:20:11.610
Let's try this on a few
other pages to make sure

00:20:11.610 --> 00:20:14.046
we have all of
the cases working.

00:20:14.046 --> 00:20:16.048
Here on developer.apple.com

00:20:16.048 --> 00:20:17.650
it didn't prompt
for extra permission

00:20:17.650 --> 00:20:21.287
because it's part
of the apple.com domain.

00:20:21.287 --> 00:20:24.523
Let's try on webkit.org.

00:20:27.526 --> 00:20:32.231
And here we'll tap the Aa menu
again and Open Graph Preview

00:20:32.231 --> 00:20:36.869
and again it prompts because
this is a different website.

00:20:36.869 --> 00:20:38.938
Perfect.

00:20:38.938 --> 00:20:42.408
And one more on the post
with an image.

00:20:42.408 --> 00:20:46.512
We'll tap Aa,
Open Graph Preview.

00:20:46.512 --> 00:20:49.281
Perfect!

00:20:49.281 --> 00:20:50.583
So, excellent.

00:20:50.583 --> 00:20:52.518
Now that we have our app
and extension working

00:20:52.518 --> 00:20:54.520
in the simulator
and a real device,

00:20:54.520 --> 00:20:59.525
I'd say we're ready
to submit this to the App Store.

00:20:59.525 --> 00:21:03.195
First, there's a quick detail to
take care of before submitting.

00:21:03.195 --> 00:21:07.700
In your project settings,
select your iOS app target

00:21:07.700 --> 00:21:10.569
and be sure to set
an App Category.

00:21:10.569 --> 00:21:13.472
I'll select Developer Tools.

00:21:13.472 --> 00:21:19.211
Next, from the Product menu,
select Archive.

00:21:19.211 --> 00:21:21.480
And similar
to the build process,

00:21:21.480 --> 00:21:27.486
you'll see the progress in the
right side of the status bar.

00:21:27.486 --> 00:21:28.587
When it's ready,

00:21:28.587 --> 00:21:31.023
select the build archive
you're ready to submit,

00:21:31.023 --> 00:21:33.626
and click
the Distribute App button.

00:21:33.626 --> 00:21:36.328
From the assistant,
under method of distribution

00:21:36.328 --> 00:21:39.565
we'll select App Store Connect
and click Next.

00:21:39.565 --> 00:21:44.537
For destination, I'll leave
Upload and click Next.

00:21:44.537 --> 00:21:47.339
And it will begin to communicate
with App Store Connect

00:21:47.339 --> 00:21:49.708
to prepare an app record.

00:21:52.711 --> 00:21:55.481
Here I can review the name
and make sure my SKU

00:21:55.481 --> 00:21:57.750
is unique among SKUs
used for other apps

00:21:57.750 --> 00:22:00.819
in my App Store Connect account.

00:22:00.819 --> 00:22:03.155
Now I'll click the Next button,

00:22:03.155 --> 00:22:06.659
and it begins to prepare
our app record for review.

00:22:06.659 --> 00:22:09.495
First, though, there are some
distribution options

00:22:09.495 --> 00:22:10.829
that it will ask for.

00:22:10.829 --> 00:22:11.997
These are all very helpful,

00:22:11.997 --> 00:22:15.401
so I'm going to leave them
and click Next.

00:22:15.401 --> 00:22:18.337
And I definitely want to keep
Automatically manage signing

00:22:18.337 --> 00:22:22.541
and click Next.

00:22:22.541 --> 00:22:25.778
Now we'll get a chance
to review the app content

00:22:25.778 --> 00:22:28.314
and the extension content.

00:22:28.314 --> 00:22:35.821
When we're happy with it,
I'll click Upload.

00:22:35.821 --> 00:22:37.890
While we wait for the upload
to complete,

00:22:37.890 --> 00:22:39.525
let's take a quick look
at some tips

00:22:39.525 --> 00:22:41.894
for getting through
App Store Review.

00:22:41.894 --> 00:22:45.564
First, make sure you own
all the code and any content,

00:22:45.564 --> 00:22:49.268
images, or other assets
used in your project.

00:22:49.268 --> 00:22:52.538
Ensure you have or can prove
permission for any APIs

00:22:52.538 --> 00:22:55.975
or JavaScript frameworks
that are called.

00:22:55.975 --> 00:22:58.744
You'll also want to remember
to provide a custom icon

00:22:58.744 --> 00:23:01.213
and use a unique name
for your app --

00:23:01.213 --> 00:23:03.882
help it to stand out
on the App Store.

00:23:03.882 --> 00:23:05.918
And don't just decorate
the web with emojis.

00:23:05.918 --> 00:23:08.787
The best web extensions --
the ones that get featured --

00:23:08.787 --> 00:23:11.690
provide something useful
to the user.

00:23:11.690 --> 00:23:13.993
And if you have code
for any web payments

00:23:13.993 --> 00:23:16.328
or donations
for another browser,

00:23:16.328 --> 00:23:19.098
you'll need to disable it
for App Store Review.

00:23:19.098 --> 00:23:22.701
Upfront sales of extensions
are easy and wildly popular

00:23:22.701 --> 00:23:24.770
in the App Store.

00:23:24.770 --> 00:23:28.274
Let's check on that
upload process.

00:23:28.274 --> 00:23:30.442
The upload completed
successfully.

00:23:30.442 --> 00:23:31.577
Great.

00:23:31.577 --> 00:23:34.113
Now in Safari, I can log in
to App Store Connect

00:23:34.113 --> 00:23:36.649
and click on My Apps to see
the new app record

00:23:36.649 --> 00:23:38.050
that's been created.

00:23:38.050 --> 00:23:40.119
And clicking
on Open Graph Preview,

00:23:40.119 --> 00:23:43.255
I can provide some additional
information for the App Store.

00:23:43.255 --> 00:23:47.026
You'll want to provide some
preview images for your app.

00:23:47.026 --> 00:23:48.560
And then under Promotional Text

00:23:48.560 --> 00:23:50.729
you should provide some
descriptive information

00:23:50.729 --> 00:23:53.499
about what's new
in this release.

00:23:53.499 --> 00:23:55.167
Under Description,

00:23:55.167 --> 00:23:56.769
you'll want to provide
a complete description

00:23:56.769 --> 00:23:59.872
of what this extension does
for your users

00:23:59.872 --> 00:24:02.408
and then you can also supply
some keywords.

00:24:02.408 --> 00:24:04.143
Note the hundred-character
limit;

00:24:04.143 --> 00:24:06.578
you'll need to be precise.

00:24:06.578 --> 00:24:09.315
You'll also want to provide
a URL specifically for a page

00:24:09.315 --> 00:24:12.017
where users can get support
for your extension.

00:24:12.017 --> 00:24:16.188
And optionally, you can include
an address for a marketing page.

00:24:16.188 --> 00:24:18.357
Then you'll use the upload tools

00:24:18.357 --> 00:24:21.860
to select the correct upload
for your app.

00:24:21.860 --> 00:24:23.696
And once you have
all of that filled out,

00:24:23.696 --> 00:24:26.465
you can click
the Submit For Review button

00:24:26.465 --> 00:24:31.070
to begin the App Review process.

00:24:31.070 --> 00:24:34.039
And that's how easy it is
to build and submit

00:24:34.039 --> 00:24:36.342
Safari web extensions.

00:24:36.342 --> 00:24:37.576
We encourage you
to submit your extensions

00:24:37.576 --> 00:24:40.579
for both iOS and MacOS

00:24:40.579 --> 00:24:45.384
and check out the resources
associated with this session.

00:24:45.384 --> 00:24:48.454
And be sure to file feedback;
we'd love to hear from you.

00:24:48.454 --> 00:24:50.756
You can use Feedback Assistant
to file bugs

00:24:50.756 --> 00:24:54.360
or make feature requests.

00:24:54.360 --> 00:24:56.195
And thanks for watching.