WEBVTT

00:00:00.100 --> 00:00:02.536
Tom Grant: Welcome!
My name is Tom and I'm a member

00:00:02.536 --> 00:00:05.038
of the Apple Pay E-Commerce
team.

00:00:05.038 --> 00:00:07.441
Since the launch of Apple Pay,
I've worked with various

00:00:07.441 --> 00:00:10.477
technical teams to help launch
merchant and payment gateway

00:00:10.477 --> 00:00:12.746
Apple Pay
e-commerce integrations.

00:00:12.746 --> 00:00:15.315
Today, I'm excited to share
some of the key knowledge

00:00:15.315 --> 00:00:17.985
and best practices we've
accumulated over the years,

00:00:17.985 --> 00:00:19.486
and show you
how to integrate Apple Pay

00:00:19.486 --> 00:00:23.190
into your website
using the Payment Request API.

00:00:23.190 --> 00:00:26.627
Apple Pay was launched
in the US in October 2014.

00:00:26.627 --> 00:00:30.330
And since then, we have made
incredible progress.

00:00:30.330 --> 00:00:33.967
Apple Pay is now live in over
75 markets around the world,

00:00:33.967 --> 00:00:35.936
and millions of brands
have it integrated

00:00:35.936 --> 00:00:38.305
into their apps and websites.

00:00:38.305 --> 00:00:39.773
Apple Pay works by using

00:00:39.773 --> 00:00:43.043
device-specific
tokenized card credentials.

00:00:43.043 --> 00:00:44.544
Apple Pay transactions
are processed

00:00:44.544 --> 00:00:47.281
just like a regular
credit or debit card.

00:00:47.281 --> 00:00:49.950
And Apple does not process
Apple Pay payments,

00:00:49.950 --> 00:00:51.451
so you will still need
a relationship

00:00:51.451 --> 00:00:53.487
with a payment service provider.

00:00:53.487 --> 00:00:55.422
This might be the same provider
that you use

00:00:55.422 --> 00:00:57.658
to accept payments online today.

00:00:57.658 --> 00:01:00.160
To get a better understanding
of the payment process,

00:01:00.160 --> 00:01:02.229
let's look at what happens
during a transaction

00:01:02.229 --> 00:01:04.698
for Apple Pay on the web.

00:01:04.698 --> 00:01:06.900
The transaction flow starts
when your customer clicks

00:01:06.900 --> 00:01:09.636
on the Apple Pay button
and the payment sheet appears,

00:01:09.636 --> 00:01:12.406
allowing them to select
and confirm their details.

00:01:12.406 --> 00:01:14.841
The customer then
authenticates the transaction,

00:01:14.841 --> 00:01:16.376
and the payment data
is encrypted

00:01:16.376 --> 00:01:18.312
and passed to the website.

00:01:18.312 --> 00:01:20.447
Your website sends
the Apple Pay payment object

00:01:20.447 --> 00:01:22.482
to the merchant server.

00:01:22.482 --> 00:01:25.218
Your server receives the payment
object and sends the data

00:01:25.218 --> 00:01:27.921
to your payment service provider
for processing.

00:01:27.921 --> 00:01:30.757
The payment service provider
decrypts the payment data,

00:01:30.757 --> 00:01:33.160
then formats and sends
an authorization message

00:01:33.160 --> 00:01:35.329
to the acquirer,
who then sends the payment

00:01:35.329 --> 00:01:37.197
to the payment network.

00:01:37.197 --> 00:01:39.499
The payment network de-tokenizes
the data

00:01:39.499 --> 00:01:42.936
and sends the card number
to the issuer for authorization.

00:01:42.936 --> 00:01:45.739
The payment confirmation is then
sent back through the chain,

00:01:45.739 --> 00:01:47.741
and the customer is notified
by a checkmark

00:01:47.741 --> 00:01:49.609
on the payment sheet.

00:01:49.609 --> 00:01:52.245
Now, this journey looks
like a lot, but in reality,

00:01:52.245 --> 00:01:55.182
this all happens
in just a few seconds.

00:01:55.182 --> 00:01:57.017
Now that we know what is
happening behind the scenes

00:01:57.017 --> 00:01:59.152
during an Apple Pay transaction
on the web,

00:01:59.152 --> 00:02:02.389
let's take a look
at the customer experience.

00:02:02.389 --> 00:02:04.057
To do so, we're going
to head over

00:02:04.057 --> 00:02:08.996
to the Apple Pay demo site
at applepaydemo.apple.com.

00:02:08.996 --> 00:02:11.198
This site is a great resource
to get to grips

00:02:11.198 --> 00:02:12.599
with Apple Pay on the web,

00:02:12.599 --> 00:02:14.868
and allows you to set up
and test transactions

00:02:14.868 --> 00:02:17.304
without your card being charged.

00:02:17.304 --> 00:02:18.572
If you're running
into challenges

00:02:18.572 --> 00:02:20.374
when working
on your integration,

00:02:20.374 --> 00:02:23.010
the Apple Pay demo website
is a great place to come back

00:02:23.010 --> 00:02:25.278
and help you figure it out.

00:02:25.278 --> 00:02:26.847
This tool supports
many different types

00:02:26.847 --> 00:02:28.548
of Apple Pay configuration,

00:02:28.548 --> 00:02:32.352
including shipping information,
error handling, and more.

00:02:32.352 --> 00:02:34.254
But for now,
let's keep it simple

00:02:34.254 --> 00:02:35.756
and stick
to the default settings

00:02:35.756 --> 00:02:39.393
to see what a basic transaction
looks like.

00:02:39.393 --> 00:02:42.462
It starts when clicking
the Apple Pay button.

00:02:42.462 --> 00:02:43.964
A modal will appear
on screen,

00:02:43.964 --> 00:02:46.500
which we refer to as
the payment sheet.

00:02:46.500 --> 00:02:48.335
The customer selects
their payment options

00:02:48.335 --> 00:02:50.804
and authenticates
the transaction.

00:02:50.804 --> 00:02:52.973
The transaction is sent
for processing and the outcome

00:02:52.973 --> 00:02:55.709
will be displayed at the bottom
of the payment sheet.

00:02:55.709 --> 00:02:59.012
And with the payment completed,
the payment sheet will dismiss.

00:02:59.012 --> 00:03:02.682
And as easy as that, we've
completed a sample payment.

00:03:02.682 --> 00:03:04.684
Now that you've seen what
a typical Apple Pay transaction

00:03:04.684 --> 00:03:08.388
looks like, let's get set up
to accept Apple Pay.

00:03:08.388 --> 00:03:11.058
We're going to be taking a look
at integrating Apple Pay

00:03:11.058 --> 00:03:13.460
with the Payment Request API.

00:03:13.460 --> 00:03:16.763
The Payment Request API provides
a cross-browser standard

00:03:16.763 --> 00:03:19.132
that lets you collect payment,
shipping address,

00:03:19.132 --> 00:03:22.169
and contact information
from your customers.

00:03:22.169 --> 00:03:23.770
You can then use
this information

00:03:23.770 --> 00:03:25.672
to process their order.

00:03:25.672 --> 00:03:28.675
The Payment Request API
simplifies the payment journey

00:03:28.675 --> 00:03:33.547
while also ensuring security,
consistency, and accessibility.

00:03:33.547 --> 00:03:35.248
If you've integrated
Apple Pay already

00:03:35.248 --> 00:03:37.484
with the Apple Pay
JavaScript API,

00:03:37.484 --> 00:03:40.387
the steps in this video
should be familiar to you.

00:03:40.387 --> 00:03:44.024
So let's see what we need to do
to get Apple Pay integrated.

00:03:44.024 --> 00:03:45.859
First, I'll share
the steps required

00:03:45.859 --> 00:03:49.563
to configure your environment
in order to accept Apple Pay.

00:03:49.563 --> 00:03:51.965
Next, I will show you
how to implement Apple Pay,

00:03:51.965 --> 00:03:53.567
from creating a payment request

00:03:53.567 --> 00:03:56.269
through to completing
a transaction.

00:03:56.269 --> 00:03:59.106
And finally, I will take you
through some tools you can use

00:03:59.106 --> 00:04:01.675
to test your Apple Pay
implementation.

00:04:01.675 --> 00:04:04.177
We've got a lot to cover,
and by the end of the session,

00:04:04.177 --> 00:04:05.912
you'll have an in-depth
understanding

00:04:05.912 --> 00:04:08.882
on how to integrate Apple Pay
into your website.

00:04:08.882 --> 00:04:12.986
So, let's get started by getting
your environment configured.

00:04:12.986 --> 00:04:15.789
First off, confirm that
your payment service provider

00:04:15.789 --> 00:04:18.291
supports Apple Pay transactions.

00:04:18.291 --> 00:04:21.495
They may also offer Apple Pay
through their own SDK,

00:04:21.495 --> 00:04:23.630
which can be a reliable
and easy way

00:04:23.630 --> 00:04:26.133
to add Apple Pay to your site.

00:04:26.133 --> 00:04:29.002
Confirm that your server
has a valid SSL certificate

00:04:29.002 --> 00:04:32.439
and is able to use
TLS version 1.2 or newer.

00:04:32.439 --> 00:04:33.907
This will be needed
to communicate

00:04:33.907 --> 00:04:35.942
with the Apple Pay servers.

00:04:35.942 --> 00:04:39.579
Finally, make sure all pages
where Apple Pay is displayed

00:04:39.579 --> 00:04:42.282
are served over https://.

00:04:42.282 --> 00:04:44.818
With these items confirmed,
we can begin to create

00:04:44.818 --> 00:04:48.421
the credentials you will use
in your Apple Pay setup.

00:04:48.421 --> 00:04:51.658
Now, there are two main ways
to create these credentials.

00:04:51.658 --> 00:04:53.527
You can create and manage
these yourself

00:04:53.527 --> 00:04:55.462
through the Apple Developer
Portal,

00:04:55.462 --> 00:04:58.832
or register directly with your
payment service provider.

00:04:58.832 --> 00:05:00.700
To understand
the specific configuration

00:05:00.700 --> 00:05:02.836
required for your website,
please reach out

00:05:02.836 --> 00:05:06.173
to your payment service provider
for more information.

00:05:06.173 --> 00:05:07.807
In the following steps,
I'll show you

00:05:07.807 --> 00:05:09.543
how to create and manage
your credentials

00:05:09.543 --> 00:05:11.845
through the Apple Developer
Portal.

00:05:11.845 --> 00:05:14.881
Your organization may already
have an Apple Developer account,

00:05:14.881 --> 00:05:17.751
especially if they have an app
on the App Store already.

00:05:17.751 --> 00:05:19.619
Ask your account admin
to add you

00:05:19.619 --> 00:05:23.557
under the Users and Access
sections on App Store Connect.

00:05:23.557 --> 00:05:26.226
If your organization
doesn't already have an account,

00:05:26.226 --> 00:05:29.963
sign up
on developer.apple.com.

00:05:29.963 --> 00:05:32.299
At the heart
of every Apple Pay transaction

00:05:32.299 --> 00:05:34.100
is the merchant identifier,

00:05:34.100 --> 00:05:38.205
which identifies you as able
to accept Apple Pay payments.

00:05:38.205 --> 00:05:39.873
This is unique to each merchant,

00:05:39.873 --> 00:05:44.444
and we recommend using a reverse
domain name-style string.

00:05:44.444 --> 00:05:47.681
Next, create a payment
processing certificate.

00:05:47.681 --> 00:05:50.250
This will be used to securely
encrypt and decrypt

00:05:50.250 --> 00:05:54.187
the payment data passed to you
from your customers' devices.

00:05:54.187 --> 00:05:56.323
You will likely receive
a certificate signing request

00:05:56.323 --> 00:05:58.825
from your payment service
provider to create this,

00:05:58.825 --> 00:06:02.062
as they will be the party
decrypting the transaction.

00:06:02.062 --> 00:06:05.165
Then, create a merchant identity
certificate.

00:06:05.165 --> 00:06:07.100
This certificate
is used to verify your identity

00:06:07.100 --> 00:06:10.737
as a merchant when your customer
initiates a payment.

00:06:10.737 --> 00:06:13.940
Lastly, register and verify
the domains and subdomains

00:06:13.940 --> 00:06:17.644
where you will display the Apple
Pay button on your website.

00:06:17.644 --> 00:06:20.447
To do this, you will enter
the fully qualified domain

00:06:20.447 --> 00:06:22.916
you wish to be verified under
the Merchant Domain section

00:06:22.916 --> 00:06:24.985
in the Apple Developer Portal.

00:06:24.985 --> 00:06:27.754
A file will be generated which
you will download and place

00:06:27.754 --> 00:06:30.657
at the .well-known path
on your server.

00:06:30.657 --> 00:06:32.492
You will then click
the Verify button,

00:06:32.492 --> 00:06:34.861
and Apple servers will reach out
to that location

00:06:34.861 --> 00:06:37.530
to verify its presence.

00:06:37.530 --> 00:06:40.834
With your environment configured
and your merchant ID created,

00:06:40.834 --> 00:06:44.571
you can now implement Apple Pay
into your website.

00:06:44.571 --> 00:06:46.840
For a better understanding
of what we are building,

00:06:46.840 --> 00:06:48.642
let's take a look
at a more detailed view

00:06:48.642 --> 00:06:51.411
of an Apple Pay transaction
on the web.

00:06:51.411 --> 00:06:53.446
It begins when the customer
clicks or taps

00:06:53.446 --> 00:06:55.649
on the Apple Pay button.

00:06:55.649 --> 00:06:57.617
The website creates
a payment request

00:06:57.617 --> 00:07:00.320
containing all of the details
for the transaction,

00:07:00.320 --> 00:07:04.190
and reaches out to the merchant
server to request a new session.

00:07:04.190 --> 00:07:06.593
Once the merchant's identity
is verified,

00:07:06.593 --> 00:07:08.828
the Apple Pay servers
generate and return

00:07:08.828 --> 00:07:10.830
a merchant session object.

00:07:10.830 --> 00:07:12.365
This is passed back to the site

00:07:12.365 --> 00:07:14.968
to complete
the validation process.

00:07:14.968 --> 00:07:17.971
The customer can then confirm
the details on the payment sheet

00:07:17.971 --> 00:07:20.206
and authenticate the transaction
using Face ID,

00:07:20.206 --> 00:07:22.542
Touch ID, or their passcode.

00:07:22.542 --> 00:07:24.978
The payment data is generated
on the user's device

00:07:24.978 --> 00:07:27.514
and securely sent to Apple Pay
servers to be encrypted

00:07:27.514 --> 00:07:30.717
with the merchant-specific
payment processing certificate.

00:07:30.717 --> 00:07:34.220
The payment data is then
returned to your website.

00:07:34.220 --> 00:07:36.389
The data is then sent
to the payment service provider

00:07:36.389 --> 00:07:39.059
to be decrypted and processed.

00:07:39.059 --> 00:07:42.862
The payment status is returned
by the payment service provider.

00:07:42.862 --> 00:07:45.165
The website notifies the user
whether the transaction

00:07:45.165 --> 00:07:49.869
was a success, and if so,
the payment sheet is dismissed.

00:07:49.869 --> 00:07:53.940
This overall process can
be grouped into four key stages:

00:07:53.940 --> 00:07:57.410
presenting Apple Pay,
merchant validation,

00:07:57.410 --> 00:08:01.281
payment authentication,
and payment processing.

00:08:01.281 --> 00:08:03.483
First up
is presenting Apple Pay,

00:08:03.483 --> 00:08:05.452
which includes showing
the Apple Pay button

00:08:05.452 --> 00:08:07.987
and displaying
the payment sheet.

00:08:07.987 --> 00:08:11.691
Next up is merchant validation,
where certificates are exchanged

00:08:11.691 --> 00:08:15.929
between Apple and the merchant
server using two-way TLS.

00:08:15.929 --> 00:08:18.431
Then we have
payment authentication,

00:08:18.431 --> 00:08:21.401
where the payment is confirmed
and generated.

00:08:21.401 --> 00:08:23.937
And finally,
the payment processing stage,

00:08:23.937 --> 00:08:25.839
which is largely handled
between the merchant

00:08:25.839 --> 00:08:28.641
and the payment
service provider.

00:08:28.641 --> 00:08:30.777
Together,
these steps form the basis

00:08:30.777 --> 00:08:33.413
of a typical Apple Pay payment
on the web.

00:08:33.413 --> 00:08:35.448
We will use this flow
to structure our approach

00:08:35.448 --> 00:08:37.550
to implementing Apple Pay.

00:08:37.550 --> 00:08:40.220
Let's start by presenting
Apple Pay as a payment option

00:08:40.220 --> 00:08:42.155
on our website.

00:08:42.155 --> 00:08:44.023
You should display
the Apple Pay button

00:08:44.023 --> 00:08:47.093
whenever your customer
is using a supported device.

00:08:47.093 --> 00:08:49.496
To check if your customer's
device supports Apple Pay,

00:08:49.496 --> 00:08:53.333
call
ApplePaySession.canMakePayments.

00:08:53.333 --> 00:08:55.769
It's important to consider
which type of button

00:08:55.769 --> 00:08:57.904
best fits your checkout journey.

00:08:57.904 --> 00:09:00.974
The Apple Pay API
provides many button types

00:09:00.974 --> 00:09:03.576
and a variety of styles
to use in your website,

00:09:03.576 --> 00:09:05.612
so you can choose the button
that best fits

00:09:05.612 --> 00:09:08.081
the flow of your
purchase experience.

00:09:08.081 --> 00:09:10.984
Use the system-provided buttons
to guarantee you are using

00:09:10.984 --> 00:09:15.722
an Apple-approved font,
color, caption, and style.

00:09:15.722 --> 00:09:17.657
The button can be imported
into your site

00:09:17.657 --> 00:09:21.327
using either JavaScript or CSS,
and the style, type,

00:09:21.327 --> 00:09:25.231
and localization can easily
be set with attributes.

00:09:25.231 --> 00:09:28.067
To add the button
using the JavaScript SDK,

00:09:28.067 --> 00:09:31.404
load the button script from
the content delivery network.

00:09:31.404 --> 00:09:34.607
You can set CSS properties,
such as the border radius,

00:09:34.607 --> 00:09:37.610
to better align the button
with your current UI.

00:09:37.610 --> 00:09:40.880
Finally, add the Apple Pay
button element to the page,

00:09:40.880 --> 00:09:44.818
setting the attributes
for the style, type, and locale.

00:09:44.818 --> 00:09:47.854
For this example, we have chosen
to use the black button style

00:09:47.854 --> 00:09:49.923
with the "Check Out
with Apple Pay" caption

00:09:49.923 --> 00:09:52.025
and localized it to German.

00:09:52.025 --> 00:09:54.561
To view the available
Apple Pay button options,

00:09:54.561 --> 00:09:56.629
let's go back
to the Apple Pay demo site

00:09:56.629 --> 00:09:58.731
that we took a look at earlier.

00:09:58.731 --> 00:10:01.534
Here, you can quickly and easily
change the Apple Pay button's

00:10:01.534 --> 00:10:05.138
attributes and CSS properties,
showing the result in real time

00:10:05.138 --> 00:10:06.873
at the bottom of the page.

00:10:06.873 --> 00:10:10.009
This is a quick and easy way
to generate Apple Pay buttons

00:10:10.009 --> 00:10:12.912
and copy and paste the code
onto your website.

00:10:12.912 --> 00:10:15.348
Here, you can select
the type of button.

00:10:15.348 --> 00:10:17.183
I have chosen black.

00:10:17.183 --> 00:10:20.854
Then you can choose the type
to best fit the situation.

00:10:20.854 --> 00:10:23.823
And the last attribute
would be the language.

00:10:23.823 --> 00:10:27.861
Let's localize this to German
like in the previous example.

00:10:27.861 --> 00:10:30.396
Further down,
you have the CSS properties,

00:10:30.396 --> 00:10:32.932
such as the button width,
height,

00:10:32.932 --> 00:10:36.102
corner radius, and padding.

00:10:36.102 --> 00:10:38.738
The configuration for the button
is displayed and updated

00:10:38.738 --> 00:10:41.641
within the code block
just below the options.

00:10:41.641 --> 00:10:45.945
This can be copied and pasted
into your existing code.

00:10:45.945 --> 00:10:48.882
There are a number of different
payment request types available,

00:10:48.882 --> 00:10:50.884
allowing you to present
additional information

00:10:50.884 --> 00:10:53.453
about the transaction
to the customer.

00:10:53.453 --> 00:10:56.222
A typical transaction
is for a one-time payment,

00:10:56.222 --> 00:10:58.758
but Apple Pay also
provides payment request options

00:10:58.758 --> 00:11:02.595
for recurring payments,
such as subscriptions;

00:11:02.595 --> 00:11:06.399
automatic reload payments,
such as store card top-ups;

00:11:06.399 --> 00:11:09.669
and deferred payments,
such as for a preorder.

00:11:09.669 --> 00:11:11.905
For now, let's look
at building a payment request

00:11:11.905 --> 00:11:14.641
for a one-time payment.

00:11:14.641 --> 00:11:18.144
To accept Apple Pay payments
using the Payment Request API,

00:11:18.144 --> 00:11:20.547
you first need to specify it
as a payment method

00:11:20.547 --> 00:11:22.315
using its identifier,

00:11:22.315 --> 00:11:26.386
in this case
apple.com/apple-pay.

00:11:26.386 --> 00:11:28.154
Alongside the identifier,

00:11:28.154 --> 00:11:31.558
we also need to include
some associated data.

00:11:31.558 --> 00:11:34.327
This includes a version number,
and we recommend using

00:11:34.327 --> 00:11:36.329
the latest version available,
as this comes

00:11:36.329 --> 00:11:38.831
with all of the latest
Apple Pay functionality.

00:11:38.831 --> 00:11:42.001
Check out developer.apple.com
for the latest information.

00:11:42.001 --> 00:11:44.203
We also need
the merchantIdentifier

00:11:44.203 --> 00:11:45.805
configured earlier,

00:11:45.805 --> 00:11:49.309
what capabilities and networks
you wish to support,

00:11:49.309 --> 00:11:52.812
and the country code where
the payment will be processed.

00:11:52.812 --> 00:11:55.381
It is especially important
that this is set correctly

00:11:55.381 --> 00:11:56.916
to ensure
a compatible cryptogram

00:11:56.916 --> 00:12:00.486
is generated in PSD2 markets.

00:12:00.486 --> 00:12:03.456
You can optionally include
required contact details

00:12:03.456 --> 00:12:05.325
for either
the customer's billing address,

00:12:05.325 --> 00:12:07.994
shipping address, or both.

00:12:07.994 --> 00:12:11.431
Here, we are requesting
the customer's shipping address.

00:12:11.431 --> 00:12:14.434
However, trust and privacy
are extremely important

00:12:14.434 --> 00:12:17.403
to think about when requesting
customer data.

00:12:17.403 --> 00:12:19.105
Only request
information necessary

00:12:19.105 --> 00:12:21.341
to service the transaction
to ensure you are getting

00:12:21.341 --> 00:12:24.143
the best conversion
with Apple Pay.

00:12:24.143 --> 00:12:26.145
You next need to create
a details object

00:12:26.145 --> 00:12:27.580
for the transaction.

00:12:27.580 --> 00:12:30.016
This includes display items,

00:12:30.016 --> 00:12:33.219
where you can include
taxes, charges, and discounts;

00:12:33.219 --> 00:12:35.154
shipping options
to allow the customer

00:12:35.154 --> 00:12:37.023
to choose how their order
is shipped,

00:12:37.023 --> 00:12:40.460
which is great for offering
an express checkout option;

00:12:40.460 --> 00:12:42.095
and finally the total,

00:12:42.095 --> 00:12:44.530
containing the currency
and amount to be charged,

00:12:44.530 --> 00:12:47.667
and a label containing
the name for the merchant.

00:12:47.667 --> 00:12:49.402
The merchant name value
should be the name

00:12:49.402 --> 00:12:51.671
the customer associates
with the business,

00:12:51.671 --> 00:12:53.573
and will be displayed
next to the word "pay"

00:12:53.573 --> 00:12:55.375
in the payment sheet.

00:12:55.375 --> 00:12:57.710
The details object is
also where you would include

00:12:57.710 --> 00:13:00.079
any modifiers
for the transaction.

00:13:00.079 --> 00:13:02.782
Modifiers contain
transaction details that apply

00:13:02.782 --> 00:13:05.118
only under certain conditions.

00:13:05.118 --> 00:13:07.820
For example, you may wish
to add a surcharge

00:13:07.820 --> 00:13:10.289
for paying with a credit card.

00:13:10.289 --> 00:13:12.692
If you wanted to request
a recurring payment,

00:13:12.692 --> 00:13:15.228
such as for a subscription,
this is also where

00:13:15.228 --> 00:13:19.098
you would include the details
of the recurring request.

00:13:19.098 --> 00:13:21.334
We can now bring
all of these elements together

00:13:21.334 --> 00:13:24.037
to initiate
a new payment request.

00:13:24.037 --> 00:13:25.905
Create a new
payment request object

00:13:25.905 --> 00:13:28.841
and pass in the methods,
details, and options

00:13:28.841 --> 00:13:30.476
into the constructor.

00:13:30.476 --> 00:13:31.744
As we've explored,

00:13:31.744 --> 00:13:33.646
one of the great benefits
of Apple Pay

00:13:33.646 --> 00:13:36.215
is that it can be used
as an express checkout option

00:13:36.215 --> 00:13:38.351
to help improve conversion.

00:13:38.351 --> 00:13:39.852
You will want to make
the experience

00:13:39.852 --> 00:13:41.454
as seamless as possible.

00:13:41.454 --> 00:13:42.922
To do so, you should check

00:13:42.922 --> 00:13:45.692
that the user has a card
available to make the payment

00:13:45.692 --> 00:13:47.860
before displaying
the Apple Pay button.

00:13:47.860 --> 00:13:49.195
This can be done by using

00:13:49.195 --> 00:13:52.231
Payment Request's
canMakePayment method.

00:13:52.231 --> 00:13:54.033
This method checks
that the customer

00:13:54.033 --> 00:13:56.636
is on an Apple Pay-supported
device and browser,

00:13:56.636 --> 00:13:58.771
and resolves to true
only if the customer

00:13:58.771 --> 00:14:01.407
has a card available
to make a payment.

00:14:01.407 --> 00:14:03.609
When the customer
taps on the Apple Pay button,

00:14:03.609 --> 00:14:07.480
you should use the show method
to display the payment sheet.

00:14:07.480 --> 00:14:09.415
Once the payment sheet
is displayed,

00:14:09.415 --> 00:14:11.384
it shows
the processing animation

00:14:11.384 --> 00:14:14.754
and immediately starts
the merchant validation process.

00:14:14.754 --> 00:14:17.824
So, let's see
what that involves.

00:14:17.824 --> 00:14:20.293
The merchant validation process
is completed

00:14:20.293 --> 00:14:22.862
for every Apple Pay on the Web
transaction

00:14:22.862 --> 00:14:24.831
and is an important
security measure

00:14:24.831 --> 00:14:26.833
to ensure that the payment
is being processed

00:14:26.833 --> 00:14:30.069
by a legitimate
and authorized merchant.

00:14:30.069 --> 00:14:33.039
This helps protect users
from fraudulent transactions

00:14:33.039 --> 00:14:34.741
and enhances
the overall security

00:14:34.741 --> 00:14:36.943
of the payment process.

00:14:36.943 --> 00:14:40.613
There are three parties in
the merchant validation process:

00:14:40.613 --> 00:14:43.549
the merchant website,
the merchant server,

00:14:43.549 --> 00:14:45.518
and the Apple Pay server.

00:14:45.518 --> 00:14:47.386
When the Apple Pay button
is pressed,

00:14:47.386 --> 00:14:49.522
merchant validation
is automatically triggered

00:14:49.522 --> 00:14:52.892
with a call to the
onmerchantvalidation handler.

00:14:52.892 --> 00:14:55.895
Inside of this handler,
a call will need to be made

00:14:55.895 --> 00:14:57.864
to an endpoint
on the merchant server

00:14:57.864 --> 00:15:00.133
asking for a new session
to be created

00:15:00.133 --> 00:15:05.271
using the static hostname,
apple-pay-gateway.apple.com

00:15:05.271 --> 00:15:07.640
as the validation URL.

00:15:07.640 --> 00:15:09.909
To ensure your certificates
remain secure,

00:15:09.909 --> 00:15:11.711
the request
to the Apple Pay servers

00:15:11.711 --> 00:15:13.579
must come
from the merchant server

00:15:13.579 --> 00:15:15.848
and not from the browser
directly.

00:15:15.848 --> 00:15:17.650
This is so your merchant
identity certificates

00:15:17.650 --> 00:15:21.020
remain secure, are not shared
with users and other parties,

00:15:21.020 --> 00:15:23.923
and they cannot
imitate your website.

00:15:23.923 --> 00:15:25.391
To request a new session,

00:15:25.391 --> 00:15:28.194
the merchant server builds
a session request payload

00:15:28.194 --> 00:15:29.962
and posts it
to the Apple Pay servers

00:15:29.962 --> 00:15:32.231
using two-way TLS.

00:15:32.231 --> 00:15:34.033
The certificate used
for this connection

00:15:34.033 --> 00:15:36.869
is the merchant identity
certificate.

00:15:36.869 --> 00:15:39.438
Once the merchant's identity
is validated,

00:15:39.438 --> 00:15:41.774
a new merchant session object
is generated

00:15:41.774 --> 00:15:44.143
and returned to the server.

00:15:44.143 --> 00:15:47.013
This object should not
be modified in any way,

00:15:47.013 --> 00:15:51.250
otherwise merchant validation
will fail.

00:15:51.250 --> 00:15:54.720
The merchant session object is
then passed back to the browser.

00:15:54.720 --> 00:15:56.823
You then pass
the merchant session object

00:15:56.823 --> 00:15:58.224
to the completion method

00:15:58.224 --> 00:16:01.194
to complete
the merchant validation process.

00:16:01.194 --> 00:16:02.895
The system will then enable
the payment sheet

00:16:02.895 --> 00:16:04.797
for customer interaction.

00:16:04.797 --> 00:16:08.634
Let's see how to accomplish
this process in your code.

00:16:08.634 --> 00:16:10.937
As soon as the Apple Pay button
is pressed,

00:16:10.937 --> 00:16:13.840
the onmerchantvalidation
handler will be triggered.

00:16:13.840 --> 00:16:16.042
Inside of this handler,
a call should be made

00:16:16.042 --> 00:16:17.643
to an endpoint on the server

00:16:17.643 --> 00:16:20.446
to handle requesting
the merchant session.

00:16:20.446 --> 00:16:22.048
When received by the browser,

00:16:22.048 --> 00:16:24.784
the merchant session object
is then passed as JSON

00:16:24.784 --> 00:16:28.254
and used in the complete
callback to finish the process.

00:16:28.254 --> 00:16:29.755
Successful merchant validation

00:16:29.755 --> 00:16:33.092
results in the payment sheet
updating to notify the customer

00:16:33.092 --> 00:16:35.628
that the payment
is ready to be confirmed.

00:16:35.628 --> 00:16:38.598
Unsuccessful merchant validation
will cause the payment sheet

00:16:38.598 --> 00:16:40.166
to dismiss
right after the customer

00:16:40.166 --> 00:16:42.602
has clicked
the Apple Pay button.

00:16:42.602 --> 00:16:44.837
If you're having trouble
with merchant validation,

00:16:44.837 --> 00:16:46.038
you can use the console

00:16:46.038 --> 00:16:48.107
in Safari's built-in
Web Inspector tool

00:16:48.107 --> 00:16:49.475
to log errors and objects

00:16:49.475 --> 00:16:51.978
when working
on merchant validation.

00:16:51.978 --> 00:16:53.779
If you've never used it before,

00:16:53.779 --> 00:16:56.215
Web Inspector provides
a powerful set of tools

00:16:56.215 --> 00:17:01.854
to debug and inspect web pages,
web extensions, and WKWebViews.

00:17:01.854 --> 00:17:04.023
While you run Web Inspector
on your Mac,

00:17:04.023 --> 00:17:05.825
you can use it
to debug your code

00:17:05.825 --> 00:17:08.227
running on any connected device.

00:17:08.227 --> 00:17:10.162
To learn more
about Web Inspector,

00:17:10.162 --> 00:17:15.501
check out "Rediscover Safari
Developer Features" from WWDC23.

00:17:15.501 --> 00:17:17.236
With merchant validation
covered,

00:17:17.236 --> 00:17:21.173
let's now dig
into payment authentication.

00:17:21.173 --> 00:17:24.477
When the user changes or updates
fields on the payment sheet,

00:17:24.477 --> 00:17:26.913
these selections are shared
through event handlers,

00:17:26.913 --> 00:17:30.082
allowing the website
to respond to user input.

00:17:30.082 --> 00:17:32.118
Examples of these handlers are

00:17:32.118 --> 00:17:33.819
the customer-selected
payment method,

00:17:33.819 --> 00:17:35.588
including coupon codes;

00:17:35.588 --> 00:17:37.890
the chosen shipping option
is updated;

00:17:37.890 --> 00:17:39.458
or there are changes
to the location

00:17:39.458 --> 00:17:41.494
of their shipping address.

00:17:41.494 --> 00:17:43.462
When the browser calls
one of these handlers,

00:17:43.462 --> 00:17:45.531
you have 30 seconds
to process it

00:17:45.531 --> 00:17:48.301
and call the updateWith
callback function.

00:17:48.301 --> 00:17:51.604
Ensure any server calls to check
shipping address validity

00:17:51.604 --> 00:17:54.373
occur in this 30-second window.

00:17:54.373 --> 00:17:56.876
If the callback function
is not called in this time,

00:17:56.876 --> 00:17:58.978
a message will appear
on the payment sheet

00:17:58.978 --> 00:18:01.714
stating that the payment
could not be completed.

00:18:01.714 --> 00:18:04.450
Let's look into the
onshippingaddresschange handler

00:18:04.450 --> 00:18:06.419
in more detail.

00:18:06.419 --> 00:18:09.288
Before the user has
authenticated the transaction,

00:18:09.288 --> 00:18:11.023
redacted shipping
contact information

00:18:11.023 --> 00:18:13.426
is shared
with the merchant website.

00:18:13.426 --> 00:18:15.161
For privacy purposes,
this includes

00:18:15.161 --> 00:18:16.696
only the necessary data

00:18:16.696 --> 00:18:19.031
for calculating
final transaction costs,

00:18:19.031 --> 00:18:21.834
such as taxes or shipping.

00:18:21.834 --> 00:18:23.602
Once you've received
this information,

00:18:23.602 --> 00:18:26.605
you can calculate
relevant totals.

00:18:26.605 --> 00:18:28.074
If you determine
there is a problem

00:18:28.074 --> 00:18:29.742
with the address
or contact information

00:18:29.742 --> 00:18:32.311
provided by the customer,
you can also create

00:18:32.311 --> 00:18:35.081
your own customized
error messages.

00:18:35.081 --> 00:18:36.282
Error messaging allows you

00:18:36.282 --> 00:18:38.351
to highlight the fields
that require attention,

00:18:38.351 --> 00:18:40.920
and provides
clear, actionable guidance

00:18:40.920 --> 00:18:43.823
to make it easier for customers
to resolve problems quickly

00:18:43.823 --> 00:18:46.258
and complete their transaction.

00:18:46.258 --> 00:18:48.661
When Apple Pay provides you
with the data, you can perform

00:18:48.661 --> 00:18:51.764
the same validation as you would
for any manual input fields

00:18:51.764 --> 00:18:54.367
that you have today
on your website.

00:18:54.367 --> 00:18:55.935
When you determine
that there's a problem

00:18:55.935 --> 00:18:58.270
with the user's address
or contact information,

00:18:58.270 --> 00:18:59.538
you can use ApplePayError

00:18:59.538 --> 00:19:02.141
to create
a customized error message.

00:19:02.141 --> 00:19:05.578
The details you provide
in an ApplePayError include

00:19:05.578 --> 00:19:08.280
an error code that identifies
the area of the payment sheet

00:19:08.280 --> 00:19:09.448
with the error;

00:19:09.448 --> 00:19:11.384
contact field,
which is the specific field

00:19:11.384 --> 00:19:13.219
on the payment sheet
with the error;

00:19:13.219 --> 00:19:16.856
and finally the custom message
to display on the payment sheet.

00:19:16.856 --> 00:19:19.158
The ApplePayError is
then passed back into the update

00:19:19.158 --> 00:19:21.293
with callback from the event.

00:19:21.293 --> 00:19:23.729
You can also verify
the user's full address

00:19:23.729 --> 00:19:26.232
and contact information
after they have authorized

00:19:26.232 --> 00:19:29.702
the transaction with Face ID,
Touch ID, or their passcode.

00:19:29.702 --> 00:19:32.671
If there is an issue with
the user's address information,

00:19:32.671 --> 00:19:34.874
you can allow them
to retry the transaction

00:19:34.874 --> 00:19:38.144
and highlight the issues
that need to be fixed.

00:19:38.144 --> 00:19:40.780
If there are error objects
appended to the errors array,

00:19:40.780 --> 00:19:42.915
you can prevent the user
from checking out

00:19:42.915 --> 00:19:44.583
until the information
is in a format

00:19:44.583 --> 00:19:47.119
that your validation rules
expect.

00:19:47.119 --> 00:19:49.221
It is recommended
to be as flexible as possible

00:19:49.221 --> 00:19:50.656
with the address formats

00:19:50.656 --> 00:19:55.127
to ensure your users can perform
a successful transaction.

00:19:55.127 --> 00:19:57.163
Also inside of
the Apple Pay payload

00:19:57.163 --> 00:19:59.799
is the payment token, containing
the necessary information

00:19:59.799 --> 00:20:01.534
to process the transaction.

00:20:01.534 --> 00:20:04.203
If you are performing the
decryption of the payment token,

00:20:04.203 --> 00:20:06.272
you will do so at this point.

00:20:06.272 --> 00:20:08.641
In most cases,
the payment service provider

00:20:08.641 --> 00:20:10.676
will handle
the decryption process,

00:20:10.676 --> 00:20:14.346
and you can send the token
to them directly for processing.

00:20:14.346 --> 00:20:16.048
This token will also contain

00:20:16.048 --> 00:20:18.717
the display name of the card
used for the transaction,

00:20:18.717 --> 00:20:20.152
which includes the network

00:20:20.152 --> 00:20:22.988
and last four digits
of the card number.

00:20:22.988 --> 00:20:25.191
This will differ
from the device-specific token

00:20:25.191 --> 00:20:27.893
and is what you should use
to indicate to the customer

00:20:27.893 --> 00:20:29.895
what card was used
for the transaction,

00:20:29.895 --> 00:20:31.897
such as in the order
confirmation email

00:20:31.897 --> 00:20:34.300
or on their receipt.

00:20:34.300 --> 00:20:37.369
So, that was
payment authentication.

00:20:37.369 --> 00:20:40.806
Let's finish up by looking
at payment processing.

00:20:40.806 --> 00:20:42.341
Once the process
has been performed

00:20:42.341 --> 00:20:43.943
by the payment service provider,

00:20:43.943 --> 00:20:46.412
the result must be passed
into the complete method

00:20:46.412 --> 00:20:49.181
to notify the customer
of the outcome.

00:20:49.181 --> 00:20:50.683
For a successful transaction,

00:20:50.683 --> 00:20:53.085
this would be done
by passing in success.

00:20:53.085 --> 00:20:55.621
This would update the payment
sheet with a checkmark,

00:20:55.621 --> 00:20:58.891
and then dismiss it to complete
the Apple Pay payment process.

00:20:58.891 --> 00:21:01.127
Sometimes, a payment might fail,

00:21:01.127 --> 00:21:04.463
in which case you can pass fail
into the response handler.

00:21:04.463 --> 00:21:06.866
The payment sheet displays
an exclamation point

00:21:06.866 --> 00:21:09.235
and the customer is prompted
to try again,

00:21:09.235 --> 00:21:11.937
or you can dismiss
the payment sheet.

00:21:11.937 --> 00:21:13.839
And with that,
we have now covered

00:21:13.839 --> 00:21:17.810
the four primary steps
required to implement Apple Pay.

00:21:17.810 --> 00:21:21.147
But of course, no discussion
of implementation is complete

00:21:21.147 --> 00:21:22.781
without a mention of testing.

00:21:22.781 --> 00:21:26.652
So finally, let's take a quick
look at testing your solution.

00:21:26.652 --> 00:21:27.786
To do so,

00:21:27.786 --> 00:21:30.689
head over to the Apple Pay
sandbox testing site.

00:21:30.689 --> 00:21:33.425
There, you'll find
sandbox credit card numbers

00:21:33.425 --> 00:21:35.261
that can be provisioned
on devices to test

00:21:35.261 --> 00:21:38.164
your front-end integration
and decryption process.

00:21:38.164 --> 00:21:40.199
Keep in mind
that sandbox credit cards

00:21:40.199 --> 00:21:42.101
will not be processed
successfully if sent

00:21:42.101 --> 00:21:45.004
to a production payment
processing environment.

00:21:45.004 --> 00:21:47.606
Sandbox credit cards
are great for testing.

00:21:47.606 --> 00:21:51.177
However, we recommend that tests
are performed with real cards

00:21:51.177 --> 00:21:54.947
prior to pushing your
implementation to production.

00:21:54.947 --> 00:21:58.150
Testing with real cards ensures
your full end-to-end flow

00:21:58.150 --> 00:22:01.120
of the payment process
works as you would expect.

00:22:01.120 --> 00:22:03.088
And that wraps up testing
and my overview

00:22:03.088 --> 00:22:05.891
of getting started
with Apple Pay on the Web.

00:22:05.891 --> 00:22:07.059
I've covered a lot,

00:22:07.059 --> 00:22:09.128
from configuration
and implementation,

00:22:09.128 --> 00:22:10.729
to sandbox testing.

00:22:10.729 --> 00:22:12.565
But before I leave you,
I have some next steps

00:22:12.565 --> 00:22:15.734
to help you continue your
Apple Pay integration journey.

00:22:15.734 --> 00:22:19.071
First, be sure to visit
the Apple Pay demo site.

00:22:19.071 --> 00:22:20.673
It's the best starting point
when building

00:22:20.673 --> 00:22:22.374
your Apple Pay solution.

00:22:22.374 --> 00:22:25.411
Review the Merchant Integration
Guide linked to this session.

00:22:25.411 --> 00:22:27.846
It provides a ton of details
on each step on the path

00:22:27.846 --> 00:22:30.749
to a well-designed
implementation of Apple Pay.

00:22:30.749 --> 00:22:33.152
And finally, check out
the Apple Pay section

00:22:33.152 --> 00:22:35.254
of the Human Interface
Guidelines.

00:22:35.254 --> 00:22:37.923
There, you'll find
detailed user interface guidance

00:22:37.923 --> 00:22:40.392
on how to present Apple Pay
and the payment sheet

00:22:40.392 --> 00:22:41.994
on your website.

00:22:41.994 --> 00:22:43.262
Thanks for joining me,

00:22:43.262 --> 00:22:46.532
and I wish you the best
with your Apple Pay integration.