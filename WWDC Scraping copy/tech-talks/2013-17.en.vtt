WEBVTT

00:00:15.040 --> 00:00:16.730
Okay, everyone.

00:00:16.730 --> 00:00:20.410
Time to talk about security and privacy.

00:00:20.500 --> 00:00:23.830
I'm Paul Danbold,
CoreOS Technologies Evangelist,

00:00:23.990 --> 00:00:28.480
and I'll start by saying,
as I think we all know,

00:00:28.480 --> 00:00:31.820
there's news reports about
security and privacy every day,

00:00:31.820 --> 00:00:35.620
and usually the news reports
are scary for most people,

00:00:35.620 --> 00:00:40.060
but very rarely do you see
iOS and your apps mentioned.

00:00:40.060 --> 00:00:43.430
And we want to keep it that way,
and that's what we're

00:00:43.430 --> 00:00:48.910
going to be talking about,
preserving that great reputation we have.

00:00:50.770 --> 00:00:53.880
To keep us on track,
a couple of checklists for the

00:00:54.070 --> 00:00:55.980
things we want to talk about.

00:00:55.980 --> 00:00:57.970
On the security side,
we'll be talking about

00:00:57.970 --> 00:01:02.310
protecting data on the device,
protecting data on the wire, so to speak,

00:01:02.310 --> 00:01:04.840
a little bit about defensive coding.

00:01:05.620 --> 00:01:09.160
On the privacy front,
when we get to that section,

00:01:09.160 --> 00:01:11.860
we need to talk about identifiers.

00:01:11.990 --> 00:01:15.170
We need to talk about the
mechanisms that arbitrate access

00:01:15.170 --> 00:01:17.100
to personal data to your apps.

00:01:17.100 --> 00:01:23.020
And also the care that needs to be
taken when you're logging runtime

00:01:23.020 --> 00:01:28.970
events and other glitches in
ways that protect users' privacy.

00:01:29.260 --> 00:01:32.600
I want to start though by saying
a few sort of high level things.

00:01:32.710 --> 00:01:34.630
One is that��

00:01:35.020 --> 00:01:38.670
On the security side,
we always have to remember that

00:01:38.750 --> 00:01:42.400
security for mobile devices
is somewhat different than,

00:01:42.520 --> 00:01:43.540
say, desktops.

00:01:43.750 --> 00:01:46.880
You know, mobile devices,
they're always on,

00:01:46.910 --> 00:01:51.340
they move from network to network,
and they're more easily lost or stolen,

00:01:51.490 --> 00:01:56.860
and they're typically loaded with a lot
of personal data and often business data.

00:01:56.950 --> 00:02:00.970
And these are factors that play
into design and implementation

00:02:01.050 --> 00:02:04.780
decisions that we all have to
make pretty much every day.

00:02:05.640 --> 00:02:08.200
Another thing, look at this picture.

00:02:08.200 --> 00:02:11.240
Do these kids look like security experts?

00:02:11.250 --> 00:02:16.220
Well, actually, today, maybe they are,
but it's also fair to say that most

00:02:16.280 --> 00:02:21.240
of the people who are using your apps
aren't particularly security-minded.

00:02:21.240 --> 00:02:24.400
So, you know,
we all know that it's important to set a

00:02:24.400 --> 00:02:28.680
passcode and make it a strong passcode,
and we also all know that it's not

00:02:28.680 --> 00:02:33.070
a good idea to have the same login
credentials for multiple web services,

00:02:33.070 --> 00:02:34.430
you know, etc.

00:02:35.120 --> 00:02:38.000
And it's fine, of course,
to ask for a name and password,

00:02:38.100 --> 00:02:41.300
but generally it's futile to, you know,
present users with any

00:02:41.300 --> 00:02:44.840
kind of security alerts,
because human nature being what it is,

00:02:44.840 --> 00:02:47.740
a lot of people will just
try to find the quickest way,

00:02:47.780 --> 00:02:51.130
not necessarily the most
secure way to dismiss an alert.

00:02:52.720 --> 00:02:57.610
All that boils down to the fact that
you need to take the most responsibility

00:02:57.710 --> 00:03:01.920
for protecting any personal or
business data that your apps manage,

00:03:01.980 --> 00:03:04.840
and you need to do it in ways
that don't pester the user.

00:03:05.020 --> 00:03:09.110
In other words,
good security is mostly invisible.

00:03:09.880 --> 00:03:13.380
And just one other thing that we all
need to recognize is that there's no

00:03:13.420 --> 00:03:15.800
such thing as unbeatable security.

00:03:15.800 --> 00:03:19.920
So there's always the possibility
that bad guys will look for

00:03:19.920 --> 00:03:22.280
vulnerabilities in your apps.

00:03:22.300 --> 00:03:26.640
But on our secure platform,
if you take the measures that

00:03:26.710 --> 00:03:30.950
we're going to be talking about,
you're not going to be an

00:03:31.090 --> 00:03:33.800
attractive target for attackers.

00:03:33.800 --> 00:03:37.230
They're more likely to go after
softer targets on other platforms.

00:03:37.260 --> 00:03:41.220
And quite frankly,
I don't have to worry about that.

00:03:42.090 --> 00:03:44.630
Let's get into protecting
data on the device.

00:03:44.860 --> 00:03:51.060
The motto here is "Play it safe."
This isn't just about finance apps,

00:03:51.060 --> 00:03:53.500
medical apps, business apps.

00:03:53.730 --> 00:04:02.540
We see there's no limit to the creative
and unexpected ways that users use apps.

00:04:02.990 --> 00:04:06.320
Really, if there's any possibility,
if there's the slightest

00:04:06.810 --> 00:04:08.770
chance that an NSString,
for example,

00:04:08.840 --> 00:04:12.400
could contain data that would
be bad news if lost or stolen,

00:04:12.480 --> 00:04:14.350
you should protect it.

00:04:15.280 --> 00:04:19.240
When I go looking for security
vulnerabilities in an app,

00:04:19.380 --> 00:04:24.210
one of the first things I do is after
I get the app on my iPhone or my iPad is

00:04:24.210 --> 00:04:30.030
hook my phone up to my Mac and I've got
some device management and forensic apps.

00:04:30.160 --> 00:04:34.550
And it's very easy to
see all the app's files.

00:04:34.550 --> 00:04:38.200
I can move them out of
its container onto my Mac,

00:04:38.200 --> 00:04:41.740
maybe run the contents of a file
through a decoder if it's not

00:04:41.850 --> 00:04:44.540
immediately obvious what's in the file.

00:04:44.540 --> 00:04:48.500
And see if there's anything
interesting or potentially lucrative.

00:04:48.500 --> 00:04:50.990
And I don't need to be
a programmer to do this.

00:04:51.130 --> 00:04:52.880
These tools are widely available.

00:04:52.880 --> 00:04:55.890
And the point is,
if it's so easy to do it,

00:04:55.890 --> 00:04:58.230
you need to protect your data.

00:04:58.380 --> 00:05:01.450
You need to take measures to
make sure it's not so easy to

00:05:01.640 --> 00:05:07.800
get it in apps files and find
personal or sensitive data in them.

00:05:09.000 --> 00:05:11.900
So that's where data protection comes in.

00:05:11.900 --> 00:05:14.900
And we've had it since
iOS 4 and the iPhone 3GS.

00:05:14.900 --> 00:05:18.990
So it's by no means is it a new thing,
but we need to keep talking

00:05:18.990 --> 00:05:21.890
about it until everybody uses it.

00:05:22.140 --> 00:05:25.840
In a nutshell,
it's you telling the OS when you want

00:05:25.840 --> 00:05:32.000
access to your keychain and your files or
thinking about it the other way around,

00:05:32.000 --> 00:05:35.630
it's you telling us when you
want us to safely encrypt your

00:05:35.890 --> 00:05:40.110
data when you no longer need it,
when the device gets locked.

00:05:40.610 --> 00:05:44.460
It's as strong as a user's passcode,
so obviously a good idea for users to

00:05:44.630 --> 00:05:48.490
have a strong passcode that's going
to take a long time to brute force.

00:05:48.760 --> 00:05:53.500
And without going into too many details,
the way it's done is we take the

00:05:53.500 --> 00:05:57.400
device's unique encryption key,
we take a key derived

00:05:57.500 --> 00:06:00.980
from the user's password,
tangle them together,

00:06:00.980 --> 00:06:06.880
and use that to create a set of class
keys to protect keychain items and files.

00:06:07.810 --> 00:06:11.430
And class in this case
isn't an Objective-C class,

00:06:11.450 --> 00:06:16.290
it's just an attribute that you hand
us to tell us when you want access

00:06:16.290 --> 00:06:21.480
to keychain items and files or when
you want us to throw away the keys.

00:06:22.550 --> 00:06:25.890
And I think John mentioned
it this morning,

00:06:25.970 --> 00:06:30.220
I'm sure it's been mentioned
a couple of times today.

00:06:31.130 --> 00:06:34.220
Obviously when a device is unlocked,
you need access to your

00:06:34.220 --> 00:06:35.470
keychain and files.

00:06:36.160 --> 00:06:40.640
But�� You may need access
when the device is locked,

00:06:40.750 --> 00:06:43.320
and you can also do that
with a level of protection.

00:06:43.680 --> 00:06:47.250
And it's important to
understand how to do that,

00:06:47.380 --> 00:06:50.710
especially if you use the new
background execution modes in iOS 7.

00:06:50.860 --> 00:06:53.590
So we'll get into that in a few minutes.

00:06:54.140 --> 00:06:56.590
And for you,
the best thing about data protection

00:06:56.950 --> 00:06:58.570
is that it's a no-brainer.

00:06:58.810 --> 00:07:04.890
It's just about adding a little extra
information to API calls like this.

00:07:04.970 --> 00:07:07.690
So it's a very lightweight task.

00:07:09.260 --> 00:07:14.090
Listed here on this slide,
the protection classes for the keychain,

00:07:14.200 --> 00:07:17.740
for the file manager and core data,
for NSData.

00:07:17.960 --> 00:07:20.100
And we also have protection
classes for SQLite,

00:07:20.100 --> 00:07:24.100
only I couldn't fit
them in on this slide.

00:07:24.270 --> 00:07:27.740
It boils down to this:
Try to use the most�� the strongest

00:07:28.630 --> 00:07:31.100
protection class whenever you can.

00:07:31.100 --> 00:07:34.830
And that means that anything with that
strong protection class is going to

00:07:34.830 --> 00:07:38.920
be safely encrypted within about 10
seconds of the device being locked.

00:07:39.660 --> 00:07:44.070
You can also choose an intermediate
protection class when you need access

00:07:44.170 --> 00:07:46.460
to data when the device is locked.

00:07:46.460 --> 00:07:51.160
So, for example, if you can see here,
the second item for the file

00:07:51.570 --> 00:07:53.960
manager is complete unless open.

00:07:53.960 --> 00:07:58.270
What that means is the device has
to be unlocked to create the file,

00:07:58.270 --> 00:08:01.230
but subsequently when
the device is locked,

00:08:01.230 --> 00:08:03.470
you can still access the file.

00:08:03.480 --> 00:08:05.900
So, let's say you get a
background notification,

00:08:05.900 --> 00:08:09.930
this protection class will let you access
such a file with that protection class.

00:08:09.930 --> 00:08:13.300
And by the way, dot, dot, dot,
I hesitate to mention it,

00:08:13.350 --> 00:08:16.360
there is even a less secure
protection class and really

00:08:16.430 --> 00:08:18.600
there's no good case for using it.

00:08:18.750 --> 00:08:21.350
So, always go towards the
strongest protection class

00:08:21.490 --> 00:08:23.060
that's going to work for you.

00:08:25.300 --> 00:10:17.200
[ Transcript missing ]

00:10:18.500 --> 00:10:22.140
Along the same lines,
you don't want to compromise

00:10:22.140 --> 00:10:25.660
protection of your files just because,
let's say,

00:10:25.660 --> 00:10:30.620
you want to use the new NSURL session
background transfer service to download

00:10:30.690 --> 00:10:33.020
more data while the device is locked.

00:10:33.100 --> 00:10:36.410
So you can use one of the
intermediate protection classes.

00:10:38.890 --> 00:10:44.180
But what you should do when the download
is complete and you have this new file,

00:10:44.600 --> 00:10:51.100
check that the newly downloaded
data is okay and if it is okay,

00:10:51.100 --> 00:10:56.370
then upgrade the protection class
of the new file or else merge the

00:10:56.370 --> 00:10:59.800
downloaded data into a protected file.

00:11:01.910 --> 00:11:04.350
On this slide,
I'm just going to cover a few

00:11:04.420 --> 00:11:06.790
things that are also new in iOS 7.

00:11:06.970 --> 00:11:09.930
So we all like the fact
that your contacts,

00:11:09.930 --> 00:11:12.720
your calendars, and your notes, etc.

00:11:12.720 --> 00:11:16.570
sync via iCloud and now in iOS 7
you can do the same thing with your

00:11:16.570 --> 00:11:21.380
keychain items and I'll go through a few
details about that on the next slide.

00:11:21.600 --> 00:11:25.580
It's useful to know that the
state restoration archive is now

00:11:25.580 --> 00:11:28.160
protected when the device is locked.

00:11:28.300 --> 00:11:32.200
So you don't have to worry that if
your app is in the middle of handling

00:11:32.200 --> 00:11:37.110
some sensitive data that your state
restoration archive could be a weak link.

00:11:37.810 --> 00:11:44.420
Also, just so you know,
newly installed apps are now protected.

00:11:44.420 --> 00:11:48.650
That is, the documents, library,
and temp directories get the

00:11:48.750 --> 00:11:52.930
strongest protection class
when you install apps on iOS 7.

00:11:52.940 --> 00:11:56.750
But if you've got apps that
were on an iOS 6 device and you

00:11:56.790 --> 00:12:00.990
upgrade from iOS 6 to iOS 7,
those apps maintain whatever

00:12:00.990 --> 00:12:04.040
protection settings they already had.

00:12:05.880 --> 00:12:09.780
And one other thing you may have noticed
in the project's capability editor,

00:12:09.780 --> 00:12:12.240
there's now a switch for data protection.

00:12:12.260 --> 00:12:14.940
So if you turn that on,
you get by default the

00:12:14.940 --> 00:12:17.010
strongest protection class.

00:12:17.010 --> 00:12:19.860
That is for all your file operations,
etc.

00:12:19.860 --> 00:12:23.730
If the switch isn't on,
you get the default for the

00:12:23.980 --> 00:12:26.490
OS that the app's running on.

00:12:26.500 --> 00:12:30.740
And that may not be what you want
because default protection for files,

00:12:30.770 --> 00:12:31.200
etc.

00:12:31.210 --> 00:12:34.040
wasn't the same in iOS
6 as it is in iOS 7.

00:12:34.800 --> 00:12:38.320
And of course,
this setting the default doesn't

00:12:38.320 --> 00:12:42.710
get in the way of any explicit
declaration of data protection

00:12:42.710 --> 00:12:44.850
that you make in your code.

00:12:46.690 --> 00:12:50.390
So as I mentioned,
not only do you get synchronization

00:12:50.390 --> 00:12:54.720
for iCloud for things like your
calendars and your contacts,

00:12:54.850 --> 00:12:56.600
you can now do this for
your keychain items.

00:12:56.600 --> 00:13:01.720
All the uploads to the iCloud
servers use strong network security.

00:13:01.720 --> 00:13:03.750
Everything's stored encrypted
on the iCloud servers.

00:13:05.050 --> 00:13:06.440
But you don't get this by default.

00:13:06.460 --> 00:13:10.580
Items without this new KSEC at
a synchronizable attribute

00:13:10.650 --> 00:13:13.230
aren't synchronized by default.

00:13:13.260 --> 00:13:17.140
You have to basically go through
all your keychain items and

00:13:17.140 --> 00:13:21.350
decide on an item-by-item basis
what should be synchronized.

00:13:22.220 --> 00:13:25.780
And you need to think through
the implications of having an

00:13:25.780 --> 00:13:29.390
item that is synchronized when
you add an item or update it or

00:13:29.390 --> 00:13:32.110
delete it for things like logins,
etc.

00:13:34.040 --> 00:13:36.170
The implementation is
limited to passwords,

00:13:36.170 --> 00:13:38.860
so it doesn't apply to other
kinds of keychain items

00:13:38.910 --> 00:13:40.900
like certificates and keys.

00:13:40.900 --> 00:13:44.900
But passwords as a category not
only can be used for real passwords,

00:13:44.900 --> 00:13:46.580
but they can be used for
other things like account

00:13:46.580 --> 00:13:51.900
names and credit card numbers,
all sorts of things like that.

00:13:51.900 --> 00:13:57.730
It does work with shared keychain items,
items shared amongst your apps if you use

00:13:57.730 --> 00:14:00.900
the Keychain Access Group entitlement.

00:14:00.900 --> 00:14:07.370
Just make sure all your apps use
the same KSEC access group name.

00:14:07.540 --> 00:14:11.190
And also, just as you know,
anything that can be

00:14:11.190 --> 00:14:16.140
synchronized across devices,
there's a danger that references

00:14:16.140 --> 00:14:18.860
to that data could become stale.

00:14:18.860 --> 00:14:22.150
So be careful on that point.

00:14:22.850 --> 00:14:24.000
So that was keychain items.

00:14:24.080 --> 00:14:27.230
Well, as you know,
when it comes to synchronizing documents

00:14:27.310 --> 00:14:30.040
and core data and key value data,
you can use iCloud,

00:14:30.040 --> 00:14:33.770
and if you do that for free,
you get secure transmission of all

00:14:33.770 --> 00:14:38.600
that kind of data to the iCloud
servers and storage on them is secure.

00:14:38.600 --> 00:14:41.420
And you also, as you know,
have an alternative,

00:14:41.420 --> 00:14:46.240
which is to use your own servers and take
responsibility for securely communicating

00:14:46.240 --> 00:14:49.280
personal data to those servers,
and we'll talk about

00:14:49.280 --> 00:14:50.950
secure networking next.

00:14:52.630 --> 00:14:55.580
But just to summarize this section,
data protection,

00:14:55.650 --> 00:14:58.860
huge bang for the buck for
almost no code on your part.

00:14:58.860 --> 00:15:02.690
Be careful if you need access
to certain keychain items and

00:15:02.690 --> 00:15:04.940
files when the device is locked.

00:15:04.940 --> 00:15:07.710
That's where the intermediate
protection classes come in.

00:15:08.840 --> 00:15:13.130
And also remember that if your
app manages personal data,

00:15:13.390 --> 00:15:16.670
that's all well and good,
but it's not necessarily the

00:15:16.670 --> 00:15:19.090
whole security picture for you.

00:15:19.100 --> 00:15:22.880
If you have a server, for example,
you need to think about

00:15:22.990 --> 00:15:26.180
protecting that personal data
everywhere that data can be,

00:15:26.180 --> 00:15:30.510
so not just on the device,
but also everywhere else it can go.

00:15:32.420 --> 00:15:33.500
Secure transport.

00:15:33.580 --> 00:15:36.700
So it's near the bottom
of the iOS network stack.

00:15:36.700 --> 00:15:40.130
Most of you probably won't be coding
directly to the secure transport

00:15:40.130 --> 00:15:44.600
APIs and more likely you'll use an
SURL connection or an SURL session.

00:15:44.600 --> 00:15:47.930
But it's down in secure transport
where the secure networking

00:15:47.970 --> 00:15:49.680
protocols are implemented.

00:15:49.680 --> 00:15:51.770
Before I get into these slides,
of course,

00:15:51.770 --> 00:15:55.000
there's no way to do justice to
secure networking in a few slides.

00:15:55.000 --> 00:15:58.520
So I'm just going to cover a few basics
and then talk about a couple of things

00:15:58.590 --> 00:16:00.650
which you may want to get involved with.

00:16:02.600 --> 00:16:05.960
We were looking at how easy it is to
get at an app's files and it's kind

00:16:06.170 --> 00:16:08.990
of the same thing for networking.

00:16:09.140 --> 00:16:10.800
Here's a screenshot from Charles Proxy.

00:16:10.800 --> 00:16:13.700
It lets you set up your Mac as
a man in the middle proxy so you

00:16:13.910 --> 00:16:16.740
can view HTTP and HTTPS traffic.

00:16:16.900 --> 00:16:21.970
When I took this screenshot I was
playing with my banking app on my

00:16:21.970 --> 00:16:27.360
iPhone and fortunately everything
you can see here is gobbledygook

00:16:27.660 --> 00:16:29.340
and that's the way it should be.

00:16:29.510 --> 00:16:33.180
And the point I want to make here is
that you should be using these tools,

00:16:33.280 --> 00:16:36.340
packet sniffers, protocol analyzers, etc.

00:16:36.540 --> 00:16:40.100
to make sure everything that
you send from your apps and

00:16:40.100 --> 00:16:41.840
receive from your servers,
etc.

00:16:42.190 --> 00:16:47.930
is indecipherable to anybody who's
sniffing at the packets on the network.

00:16:48.690 --> 00:16:52.930
There are two basic and essential
requirements to secure networking.

00:16:53.110 --> 00:16:57.100
One is on the wire,
what we call on the wire confidentiality,

00:16:57.100 --> 00:17:00.240
just making sure that the packets you
send and receive are indecipherable

00:17:00.240 --> 00:17:02.800
to the passive attacker,
that's the packet sniffer.

00:17:02.800 --> 00:17:05.160
The other thing is the
ability to authenticate the

00:17:05.300 --> 00:17:08.200
server you want to talk to,
to make sure that you're basically

00:17:08.200 --> 00:17:10.410
immune from man-in-the-middle attacks.

00:17:10.470 --> 00:17:13.210
And then the server may
want to authenticate you.

00:17:13.210 --> 00:17:15.620
Often that's just asking
for a name and password,

00:17:15.620 --> 00:17:17.600
but sometimes there's more than that.

00:17:18.540 --> 00:17:21.280
And you need this confidentiality
and authentication.

00:17:21.280 --> 00:17:24.450
They are separate,
you can have one without the other,

00:17:24.450 --> 00:17:25.670
but do you want both?

00:17:26.480 --> 00:17:29.290
I'm going to talk about TLS in
the coming slides and of course

00:17:29.290 --> 00:17:30.720
there are other protocols.

00:17:31.010 --> 00:17:35.650
Just want to make sure that you all
use a secure networking protocol that's

00:17:35.650 --> 00:17:38.190
going to meet your security needs.

00:17:38.490 --> 00:17:41.170
Here's TLS in a nutshell,
obviously skipping a lot of

00:17:41.170 --> 00:17:42.680
details to fit on one slide.

00:17:42.990 --> 00:17:46.240
Maybe I should say TLS stands
for transport layer security.

00:17:46.530 --> 00:17:51.050
You know, 10 years ago,
it evolved out of SSL,

00:17:51.660 --> 00:17:53.370
secure sockets layer.

00:17:53.370 --> 00:17:53.370
Basically,

00:17:53.700 --> 00:17:55.090
There's three steps to it.

00:17:55.180 --> 00:17:59.310
The client needs to do what we
call the handshake with the server.

00:17:59.580 --> 00:18:00.690
That's where we start off.

00:18:00.700 --> 00:18:04.240
We tell the server what
versions of TLS we support,

00:18:04.430 --> 00:18:08.700
the cipher suites we have,
the compression modes we can handle.

00:18:09.190 --> 00:18:11.020
And then the server gets
back to us and says,

00:18:11.090 --> 00:18:14.500
"Okay,
I want you to use this version of TLS,

00:18:14.550 --> 00:18:17.460
this crypto,
this compression mode." That's

00:18:17.460 --> 00:18:19.090
all pretty straightforward.

00:18:19.250 --> 00:18:23.550
It also sends us this chain
of certificates and it's very

00:18:23.550 --> 00:18:27.100
important that on the device,
the iOS device,

00:18:27.100 --> 00:18:31.420
that we check that chain of certificates
to make sure the server is truly who

00:18:31.420 --> 00:18:33.100
it says it is and can be trusted.

00:18:33.100 --> 00:18:36.090
And that's what we're going to be
getting into in a couple of slides.

00:18:36.100 --> 00:18:39.440
By this stage,
we've got all the ingredients we need to

00:18:39.510 --> 00:18:42.100
set up a secure networking connection.

00:18:42.100 --> 00:18:47.090
The client knows the server's public key
because it's in the server's certificate.

00:18:47.100 --> 00:18:50.100
We encrypt a random number with that,
send it to the server.

00:18:50.100 --> 00:18:53.010
The server has its private key,
can decrypt it,

00:18:53.140 --> 00:18:55.070
and we now have this shared secret.

00:18:55.130 --> 00:18:58.440
And we can use that for symmetric
key encryption to basically

00:18:59.030 --> 00:19:02.730
make sure that all the packets,
all the data sent back and forth

00:19:02.730 --> 00:19:05.090
between server and client are protected.

00:19:05.100 --> 00:19:11.040
And the critical piece I want to get back
to here is this chain of certificates.

00:19:11.100 --> 00:19:16.100
And just to put the
visual picture on that,

00:19:16.100 --> 00:19:18.100
you know,
if you want to see a certificate chain,

00:19:18.100 --> 00:19:22.060
the easiest way to do it is
go into Safari on the Mac,

00:19:22.120 --> 00:19:26.190
click on the little lock
icon for any HTTPS site,

00:19:26.190 --> 00:19:28.790
and you'll see the certificate
chain going from the server down

00:19:28.820 --> 00:19:31.990
to what we call a root anchor,
which is a certificate that's

00:19:31.990 --> 00:19:34.100
implicitly trusted by the OS.

00:19:34.100 --> 00:19:39.080
typically because it's signed by a
well-known certificate authority.

00:19:39.550 --> 00:19:42.630
Let's say your app talks
to your server using HTTPS,

00:19:42.670 --> 00:19:45.280
for example,
and let's say you write your app

00:19:45.280 --> 00:19:49.000
and let's say somebody else sets
up and maintains your server.

00:19:49.000 --> 00:19:52.060
And, you know,
probably when your app gets

00:19:52.060 --> 00:19:57.000
published and your server's online,
everything works just fine.

00:19:57.000 --> 00:20:02.760
TLS takes care of the authentication
and everything's good.

00:20:02.800 --> 00:20:06.170
But there's a possibility one
day something's going to go wrong

00:20:06.200 --> 00:20:09.370
and the default server trust
evaluation that TLS does for you

00:20:09.530 --> 00:20:11.330
is going to run into a problem.

00:20:11.340 --> 00:20:14.940
Now,
before I get into what you should do,

00:20:14.940 --> 00:20:18.560
a couple of things you
really must not do.

00:20:18.560 --> 00:20:22.290
One is have any code in your app
to bypass server trust evaluation

00:20:22.930 --> 00:20:26.740
because then you're running the
risk of sending sensitive data,

00:20:26.740 --> 00:20:31.000
credentials, personal data,
business data to an imposter.

00:20:31.000 --> 00:20:35.330
And the second thing you really shouldn't
do is ask the user to make the connect

00:20:35.590 --> 00:20:39.190
or don't connect decision because,
quite frankly, I mean,

00:20:39.380 --> 00:20:42.470
how is the user going to know
what's safe to do or not?

00:20:42.660 --> 00:20:45.220
So that's really unfair on the user.

00:20:46.210 --> 00:20:51.790
In almost all cases,
the problem lies on the server side.

00:20:52.020 --> 00:20:56.740
And so wherever possible,
you should fix the server first.

00:20:57.070 --> 00:21:00.500
But in the real world,
quite often you can move faster than the

00:21:00.690 --> 00:21:02.840
folks who are maintaining your servers.

00:21:02.840 --> 00:21:05.700
You know,
in the case where the server certificate

00:21:05.910 --> 00:21:09.350
has expired or the server's DNS name
no longer matches the DNS name

00:21:09.450 --> 00:21:13.670
embedded in the server certificate,
you know, really get on the phone or call

00:21:13.670 --> 00:21:17.280
the server folks and get them
to fix that kind of problem.

00:21:17.280 --> 00:21:23.250
But there are a few problems that you
can work around in your app in ways

00:21:23.250 --> 00:21:29.990
which will allow server trust evaluation
to happen as they should happen.

00:21:30.000 --> 00:21:33.890
If the server, for example,
doesn't send a complete

00:21:33.920 --> 00:21:38.750
certificate chain to you or if the
server uses a self-signed cert,

00:21:38.750 --> 00:21:42.690
you can embed the missing
certificate in your app.

00:21:42.800 --> 00:21:47.260
And that enables you to allow
trust evaluation to happen.

00:21:48.080 --> 00:21:51.860
And so wherever possible,
you should fix the server first.

00:21:51.860 --> 00:21:55.050
But in the real world,
quite often you should fix the

00:21:55.050 --> 00:21:57.300
server certificate in your app.

00:21:58.620 --> 00:22:01.180
For many of you,
if you're doing any kind of app

00:22:01.290 --> 00:22:05.940
which has got kind of an extra
level of security required,

00:22:05.940 --> 00:22:09.880
you may want to go further
than allowing iOS to take care

00:22:09.880 --> 00:22:12.280
of server trust evaluation.

00:22:12.340 --> 00:22:17.340
We have, I think,
over 200 root certificates in the OS,

00:22:17.340 --> 00:22:22.160
but you may want to explicitly
require that certain certificates

00:22:22.600 --> 00:22:27.160
are in the certificate chain
received from the server.

00:22:28.500 --> 00:22:33.010
And if you want to do this,
this is what we call certificate pinning,

00:22:33.150 --> 00:22:36.260
you can get involved
with trust evaluation.

00:22:36.260 --> 00:22:39.200
Now, I'm not going to go into
any details on this,

00:22:39.200 --> 00:22:42.900
but I do want to point you to at
least one sample code project.

00:22:42.920 --> 00:22:45.800
The Advanced URL Connections
sample project,

00:22:45.890 --> 00:22:48.900
which has actually been
around for quite a while,

00:22:48.900 --> 00:22:55.050
it's a great introduction to the code
that you may want to put in your apps

00:22:55.160 --> 00:22:58.400
to deal with server trust evaluation.

00:22:58.460 --> 00:23:02.150
And I'd encourage you to check out
that sample code if you want to get

00:23:02.150 --> 00:23:04.420
into this area of network security.

00:23:04.420 --> 00:23:06.530
But for time reasons,
we need to move on to

00:23:06.530 --> 00:23:07.970
talk about other things.

00:23:08.000 --> 00:23:13.800
I just want to say a few words
about secure transport and OpenSSL.

00:23:13.800 --> 00:23:19.220
Probably, I'm guessing,
at least a few of you use OpenSSL.

00:23:19.220 --> 00:23:20.480
It's an open source project.

00:23:20.520 --> 00:23:22.890
It's got a lot in common
with open transport,

00:23:22.890 --> 00:23:24.780
sorry, with secure transport.

00:23:24.780 --> 00:23:28.600
And, you know,
I quite often hear developers say, "Oh,

00:23:28.600 --> 00:23:31.660
I have to use OpenSSL because, you know,
maybe they're developing

00:23:31.700 --> 00:23:33.990
for multiple platforms,
or they've just been told

00:23:34.180 --> 00:23:37.670
to use OpenSSL." I just
wanted you to consider this.

00:23:37.740 --> 00:23:43.340
You know, secure transport built on top
of FIPS 140-2 certified crypto.

00:23:43.340 --> 00:23:47.500
It's hardware accelerated,
and it's highly optimized

00:23:47.500 --> 00:23:48.490
for our devices.

00:23:48.500 --> 00:23:54.450
And, of course, if you use our code,
you basically get for free all

00:23:54.450 --> 00:23:58.200
the improvements we make from
one OS release to the next,

00:23:58.200 --> 00:24:00.780
without changing a line of
code or revving your apps.

00:24:00.800 --> 00:24:06.220
Using OpenSSL, you're building a lot
more code into your apps.

00:24:06.450 --> 00:24:09.660
You're revving your app every time you
want to integrate a new distribution.

00:24:09.700 --> 00:24:12.610
And you're probably spending
a lot more time on network

00:24:12.700 --> 00:24:16.750
security than maybe you'd like to,
you know, maybe you want to do other

00:24:16.850 --> 00:24:17.730
things with that time.

00:24:17.760 --> 00:24:22.970
So here,
just to plug for some fairly new code,

00:24:23.090 --> 00:24:28.100
if you are considering migrating from
OpenSSL to the native code in iOS,

00:24:28.100 --> 00:24:31.090
do check out the crypto
compatibility sample code.

00:24:31.100 --> 00:24:33.040
It's up on the dev center.

00:24:33.140 --> 00:24:38.560
It's in the Mac section,
but the code applies equally well to iOS.

00:24:40.140 --> 00:24:44.020
Before I move on,
basically just to plug for using

00:24:44.020 --> 00:24:50.190
the packet sniffers and protocol
analyzers I mentioned a few slides ago.

00:24:50.190 --> 00:24:55.740
Choose a secure networking
protocol and take the time using

00:24:55.740 --> 00:24:59.510
network packet sniffing tools,
etc.

00:24:59.610 --> 00:25:03.280
to make sure that you can't
find any personal sensitive

00:25:03.280 --> 00:25:05.500
data in your network traffic.

00:25:05.500 --> 00:25:08.080
If you can't find it,
there's a good chance that you're

00:25:08.190 --> 00:25:11.390
doing the right thing and attackers
won't have any luck trying to get

00:25:11.390 --> 00:25:13.340
at your network traffic either.

00:25:13.340 --> 00:25:19.000
I'm going to spend just a few minutes
on defensive coding or secure coding.

00:25:19.000 --> 00:25:22.240
When you hear talks or start to
read documents about this stuff,

00:25:22.340 --> 00:25:25.010
it's usually about buffer
overflows and unsafe string

00:25:25.010 --> 00:25:26.880
formatting and things like that.

00:25:26.960 --> 00:25:30.520
You know, techniques that attackers
have used to insert malware

00:25:30.520 --> 00:25:32.270
or cause apps to malfunction.

00:25:32.300 --> 00:25:37.720
And we will look at a few
things that you can do.

00:25:38.080 --> 00:25:41.290
But let me just start by saying,
you know, Apple does most of the

00:25:41.310 --> 00:25:42.280
heavy lifting here.

00:25:42.560 --> 00:25:44.190
You know, we've got a secure boot chain.

00:25:44.270 --> 00:25:47.560
It validates the integrity
of the OS stack at Power Up.

00:25:47.630 --> 00:25:51.380
We only run apps that are code
signed in their sandbox with baked-in

00:25:51.390 --> 00:25:56.050
entitlements to make sure that even a
compromised app can't do much damage.

00:25:57.170 --> 00:26:00.340
We've got things like ASLR,
address-based layout randomization,

00:26:00.340 --> 00:26:02.740
which makes it impossible
to predict where an app's

00:26:02.910 --> 00:26:05.450
memory is going to be loaded,
where an app's pages are going

00:26:05.590 --> 00:26:06.990
to be loaded into memory.

00:26:06.990 --> 00:26:10.020
So that guards against
memory management attacks.

00:26:10.110 --> 00:26:11.180
And we've got a whole lot more.

00:26:11.210 --> 00:26:16.760
Plug here for this iOS security white
paper that's up on the Apple website.

00:26:16.760 --> 00:26:20.330
And it's a good place to get a good
understanding of everything we've done

00:26:20.420 --> 00:26:22.560
to provide you with a secure platform.

00:26:24.400 --> 00:26:25.940
But that doesn't mean there's
nothing for you to do.

00:26:25.940 --> 00:26:28.540
So first thing I want
to say is use Clang,

00:26:28.540 --> 00:26:30.190
the static analyzer.

00:26:30.270 --> 00:26:33.340
I mean, it really does a whole
lot of work for you,

00:26:33.610 --> 00:26:35.900
weeds out exploitable flaws
and other bugs in your code.

00:26:35.900 --> 00:26:39.970
So periodically or frequently use Clang.

00:26:40.180 --> 00:26:43.830
Any text field that could possibly
contain sensitive information,

00:26:43.850 --> 00:26:47.730
you should protect it, in other words,
market a secure text.

00:26:47.790 --> 00:26:51.110
It's so easy to do,
either in code or an interface builder.

00:26:51.300 --> 00:26:53.390
Secure text is not cached.

00:26:53.400 --> 00:26:58.080
We disable auto-correction,
so take advantage of it.

00:26:58.600 --> 00:27:01.780
If you ask anywhere in your
app for an account name and

00:27:01.880 --> 00:27:06.450
password or just a password,
you can use the secure text input and the

00:27:06.520 --> 00:27:11.870
login and password input alert view style
methods just to mask what's on screen.

00:27:12.080 --> 00:27:14.410
As soon as you can,
if you've got any object,

00:27:14.520 --> 00:27:17.900
anything that could contain
potentially sensitive data,

00:27:18.090 --> 00:27:20.980
just purge it after you've
used it as soon as you can.

00:27:21.110 --> 00:27:25.790
Maybe you need to drop down to core
foundation or lower to get at the bits,

00:27:25.850 --> 00:27:27.350
but good practice.

00:27:28.390 --> 00:27:31.620
And if you have a show on screen,
what you wouldn't want to

00:27:31.690 --> 00:27:35.490
find in an app snapshot,
there are ways of basically

00:27:35.570 --> 00:27:40.330
hiding key windows to protect
that kind of information.

00:27:40.940 --> 00:27:44.680
We don't let users down version
iOS because that would obviously

00:27:44.930 --> 00:27:48.800
expose security flaws fixed in
more recent versions of the OS.

00:27:48.800 --> 00:27:52.950
So it may make sense for you to do
an OS version check in your app.

00:27:53.060 --> 00:27:56.310
I could have had more slides
talking about other things

00:27:56.310 --> 00:27:59.430
that are basically unsafe,
like storing sensitive

00:27:59.430 --> 00:28:01.510
data in NS user defaults,
etc.

00:28:01.510 --> 00:28:05.030
And hopefully you've looked at
these last few slides and gone,

00:28:05.030 --> 00:28:07.800
well, I do all these things,
and that's great.

00:28:07.880 --> 00:28:11.880
But I do need to point out that we
have seen cases where developers may

00:28:11.880 --> 00:28:15.520
be rushing to get their apps published,
have skimped on these

00:28:15.520 --> 00:28:18.610
secure coding practices,
and unfortunately found

00:28:18.610 --> 00:28:20.680
themselves in the headlines.

00:28:20.680 --> 00:28:25.720
So it is worth the time to basically
audit your apps periodically,

00:28:25.720 --> 00:28:28.860
make sure you're doing
these straightforward

00:28:29.390 --> 00:28:31.750
defensive coding techniques.

00:28:31.820 --> 00:28:35.460
I'll say just a few words about what a
lot of developers are concerned about,

00:28:35.460 --> 00:28:37.850
which is what happens
if my app is not secure.

00:28:37.860 --> 00:28:40.930
So what happens if my app is
running on a compromised device?

00:28:41.130 --> 00:28:42.950
First off, word of caution.

00:28:42.950 --> 00:28:45.690
So tamper detection
can be a little tricky,

00:28:45.790 --> 00:28:47.910
certainly not a trivial task.

00:28:48.100 --> 00:28:51.530
And what you want to be really
careful of is not compromising

00:28:51.790 --> 00:28:55.590
the stability of your app,
avoiding making your day-to-day

00:28:55.590 --> 00:29:00.120
development and testing complicated,
and especially you don't want to

00:29:00.260 --> 00:29:05.480
do anything that might impact users
running your apps on legitimate devices.

00:29:07.090 --> 00:29:09.680
You know,
code like this is fine except that

00:29:09.680 --> 00:29:12.950
if an attacker is patched F open,
it's not going to work for you.

00:29:13.010 --> 00:29:17.170
You know,
it's very easy to find scores of what are

00:29:17.510 --> 00:29:19.780
called jailbreak detection code snippets.

00:29:19.970 --> 00:29:22.760
Most of them try to do things
that are blocked by sandboxing.

00:29:22.900 --> 00:29:24.670
And I'm not saying don't do these things.

00:29:24.860 --> 00:29:28.290
You can litter little bits of
code like this through your apps.

00:29:28.410 --> 00:29:30.340
You know, just putting them in one
place isn't going to work,

00:29:30.340 --> 00:29:30.830
of course.

00:29:30.830 --> 00:29:33.070
By all means, do this carefully.

00:29:33.070 --> 00:29:36.030
You will frustrate an attacker.

00:29:36.040 --> 00:29:40.550
But you have to accept that a
skilled attacker with enough

00:29:40.700 --> 00:29:46.020
patience will probably overcome
most of these kind of checks.

00:29:46.270 --> 00:29:50.780
And that's why we don't have an
API to tell you if you're running on a

00:29:50.870 --> 00:29:57.040
compromised device because that would
be the first API attackers would hijack.

00:29:57.630 --> 00:30:03.130
Before I move on to privacy,
just want to say it's worth the time.

00:30:03.210 --> 00:30:06.930
Make sure you're using data protection,
that your networking is secure,

00:30:06.940 --> 00:30:09.100
that you're using defensive coding.

00:30:09.180 --> 00:30:12.480
If you do all these things
and repeatedly ask yourself,

00:30:12.630 --> 00:30:16.100
are you doing all these things correctly,
you'll be in good shape.

00:30:18.720 --> 00:30:23.700
Now on the privacy front,
you've seen us in successive iOS releases

00:30:23.750 --> 00:30:28.170
giving the user more and more control,
deciding on a per app basis who

00:30:28.170 --> 00:30:31.750
gets access to their personal
data and device features.

00:30:31.760 --> 00:30:35.860
You've also seen us deprecate
and remove mechanisms that enable

00:30:35.940 --> 00:30:38.150
apps to track devices and users.

00:30:38.290 --> 00:30:39.760
And there's a part for you to play.

00:30:39.760 --> 00:30:46.220
And the first thing I want to say is that
you should all want to have a reputation

00:30:46.220 --> 00:30:49.920
as developers who take privacy seriously.

00:30:49.920 --> 00:30:54.940
And you should also make efforts
to make it easy for users to find

00:30:54.940 --> 00:31:00.000
out what you do with the personal
data that your apps manage.

00:31:01.340 --> 00:31:04.190
Few words about identifiers,
but actually this section should

00:31:04.240 --> 00:31:05.590
be old news for all of you.

00:31:05.590 --> 00:31:08.340
No more long-lived identifiers.

00:31:08.560 --> 00:31:12.460
It's all about
purpose-scoped identifiers.

00:31:13.560 --> 00:31:19.340
We rolled out the app, the vendor,
and the advertising ID over a year ago.

00:31:19.340 --> 00:31:24.400
And of course, as I'm sure you all know,
we deprecated the unique identifier API.

00:31:24.400 --> 00:31:27.500
And now in iOS 7, it's completely gone.

00:31:27.500 --> 00:31:29.740
Also, get host UUID is gone.

00:31:32.330 --> 00:31:36.100
You need to use these identifiers in
the way for which they were designed.

00:31:36.100 --> 00:31:39.680
You need to pay attention
to how they behave.

00:31:39.690 --> 00:31:42.740
You know, they're always backed up,
but they don't last forever.

00:31:42.740 --> 00:31:45.250
In most cases,
the vendor ID replaces the old

00:31:45.340 --> 00:31:47.440
unique identifier or the old UUID.

00:31:47.780 --> 00:31:50.860
And you need to be careful, for example,
with the advertising ID.

00:31:50.860 --> 00:31:53.080
Remember,
the user can reset it at any time.

00:31:53.080 --> 00:31:57.150
So pay attention to the way these��
to the purpose for which these

00:31:57.150 --> 00:31:59.340
identifiers were implemented.

00:31:59.400 --> 00:32:00.820
Use them.

00:32:01.660 --> 00:32:07.000
And you obviously know by now you
need to get away from the old UUID.

00:32:07.450 --> 00:32:10.120
We also cranked up privacy
protection in a few other ways,

00:32:10.120 --> 00:32:11.720
which I'll list on this slide.

00:32:11.720 --> 00:32:13.230
You know, the MAC address.

00:32:13.230 --> 00:32:16.380
Well, we couldn't deprecate syscontrol
and iOctal because they're

00:32:16.380 --> 00:32:19.740
used for other purposes,
but we don't want the MAC address

00:32:19.740 --> 00:32:23.870
being used as a device identifier
any more than the old U did.

00:32:23.890 --> 00:32:27.130
Anyway, using the MAC address like that
was always a bad idea because

00:32:27.150 --> 00:32:29.930
it's so easy to spoof a device's
MAC address on a network.

00:32:30.540 --> 00:32:34.510
Push tokens, you should know they're
now scoped to the app,

00:32:34.510 --> 00:32:39.100
and I'll mention it was always a
bad idea to cache a push token.

00:32:39.100 --> 00:32:42.880
You always need to use the value
you get back from did register for

00:32:42.880 --> 00:32:45.420
remote notifications for device token.

00:32:47.210 --> 00:32:51.580
And just one more thing on this list
also to note is name pasteboards

00:32:51.580 --> 00:32:53.400
are now scoped to your team ID.

00:32:53.400 --> 00:32:59.100
So you can now share custom pasteboard
content among your apps but no further.

00:32:59.100 --> 00:33:02.680
System pasteboard stays the
same as it always has been.

00:33:03.840 --> 00:33:07.490
So the UDID is gone,
but I know there's some developers

00:33:07.640 --> 00:33:11.440
tempted to find other ways to
identify and track devices,

00:33:11.520 --> 00:33:14.310
what we call digital fingerprinting.

00:33:14.370 --> 00:33:16.900
But as far as we're concerned,
it's also a no-no.

00:33:19.030 --> 00:33:21.810
You know,
fingerprinting is sometimes used for

00:33:21.810 --> 00:33:25.890
things like targeted advertising or
some kind of fraud detection and,

00:33:26.010 --> 00:33:27.820
you know, other purposes.

00:33:28.880 --> 00:33:32.940
And it can be done even without
collecting personal data.

00:33:33.660 --> 00:33:36.960
But, you know, the problem with it is
lack of transparency.

00:33:36.960 --> 00:33:42.960
We really want users to be in control
of what their apps do on their devices.

00:33:44.030 --> 00:33:45.960
So we've been beating the drum
on identifiers for a while now.

00:33:45.960 --> 00:33:49.950
I'm going to move on,
but I'd say that pretty much every

00:33:49.950 --> 00:33:52.770
app is now using the new identifiers.

00:33:53.510 --> 00:33:55.480
But if you've still got
questions or concerns,

00:33:55.590 --> 00:33:58.330
you know, of course,
we're more than happy to hear from you.

00:33:58.820 --> 00:34:02.370
On the consent and transparency front,
this is where, as I mentioned,

00:34:02.370 --> 00:34:04.780
we're giving the user
more and more control.

00:34:04.970 --> 00:34:12.080
The OS intervenes between your app
and the user when you want access

00:34:12.080 --> 00:34:16.420
to personal data or device features.

00:34:16.590 --> 00:34:18.500
And there are three
things you need to do.

00:34:18.550 --> 00:34:23.300
You need to make sure that your app works
well even when the user says don't allow.

00:34:23.400 --> 00:34:26.750
You need to help the user by
providing these what we call

00:34:26.880 --> 00:34:31.250
purpose strings make an informed
decision about whether to grant your

00:34:31.250 --> 00:34:33.770
app access to their personal data.

00:34:33.770 --> 00:34:37.900
So here's a good example of an
app saying exactly why it wants

00:34:37.900 --> 00:34:42.240
access to your location and what
it will do with that information.

00:34:43.320 --> 00:34:47.510
And the third thing you need to do,
very important, is test.

00:34:47.510 --> 00:34:52.040
Test every possible scenario to
make sure your app works robustly

00:34:52.040 --> 00:34:54.550
as privacy settings can change.

00:34:56.880 --> 00:34:59.860
Here's the list of everything
that can trigger a consent alert.

00:34:59.890 --> 00:35:03.280
You know,
when you ask for location to start

00:35:03.280 --> 00:35:08.750
updating the location or the image
picker to access the asset library,

00:35:08.840 --> 00:35:09.360
etc.

00:35:09.430 --> 00:35:11.710
That's what triggers the consent alert.

00:35:11.760 --> 00:35:16.750
The user's consent or not happens
outside the address space of your app.

00:35:16.750 --> 00:35:20.060
You find out about it asynchronously,
either through a delegate

00:35:20.060 --> 00:35:21.110
or a block method.

00:35:22.690 --> 00:35:25.960
A few things that we changed
or introduced in iOS 7.

00:35:25.960 --> 00:35:29.140
So for social,
that's the account store framework.

00:35:29.240 --> 00:35:32.640
We added a new one,
a new account type for Tencent Weibo,

00:35:32.640 --> 00:35:35.590
which is the
Chinese microblogging service.

00:35:36.470 --> 00:35:40.180
For the camera now in some regions,
if you ask AV Foundation for

00:35:40.180 --> 00:35:42.980
camera input,
user will get a consent alert.

00:35:42.980 --> 00:35:47.220
So you need to be prepared to handle
the user maybe saying don't allow.

00:35:48.740 --> 00:35:51.600
And also new in iOS 7,
the microphone now.

00:35:52.920 --> 00:35:54.670
That'll trigger the consent alert.

00:35:54.770 --> 00:35:58.670
And if the user says no,
your audio recording session

00:35:58.770 --> 00:36:00.760
is going to return silence.

00:36:00.920 --> 00:36:02.800
Data stream will be all zeros.

00:36:03.570 --> 00:36:05.800
And last but by no means least,
core motion.

00:36:05.800 --> 00:36:08.800
So if you're going to use core motion,
that's also going to

00:36:08.910 --> 00:36:10.360
trigger a consent alert.

00:36:11.160 --> 00:36:13.690
And there are two things you need to do.

00:36:14.640 --> 00:36:19.700
You know, one, be prepared to handle the
user saying don't allow.

00:36:19.700 --> 00:36:19.700
In other words,

00:36:19.940 --> 00:36:22.410
Keep your app running with
as much functionality,

00:36:22.410 --> 00:36:25.060
keeping it as useful and
as engaging as possible,

00:36:25.140 --> 00:36:26.800
even when that happens.

00:36:27.120 --> 00:36:31.800
There's no telling the user what
they should and shouldn't do.

00:36:31.800 --> 00:36:34.240
You've just got to make your
app as useful as possible,

00:36:34.360 --> 00:36:36.080
even when the user says don't allow.

00:36:55.190 --> 00:36:55.190
Keep your app running with
as much functionality,

00:36:55.190 --> 00:36:55.190
keeping it as useful and
as engaging as possible,

00:36:55.190 --> 00:36:55.190
even when the user says don't allow.

00:36:56.500 --> 00:36:58.550
Quick word about restrictions.

00:36:58.800 --> 00:37:02.770
Some of you may have apps where
enterprise configuration�� sorry,

00:37:02.910 --> 00:37:07.030
apps running on devices where enterprise
configuration profiles are installed

00:37:07.160 --> 00:37:11.370
or running your apps on devices where
restrictions have been set manually.

00:37:11.490 --> 00:37:14.090
So whatever you do,
don't tell the user to

00:37:14.090 --> 00:37:18.240
change their privacy settings
because maybe the user can't.

00:37:18.460 --> 00:37:23.590
You've just got to keep your app running
with as much functionality as possible.

00:37:24.050 --> 00:37:25.700
I mentioned the purpose strings.

00:37:25.760 --> 00:37:28.920
This is where you help the
user decide whether it makes

00:37:28.920 --> 00:37:31.180
sense to grant your app access.

00:37:31.180 --> 00:37:36.100
And very easy to do in Xcode,
go into your app's Info.plist,

00:37:36.200 --> 00:37:39.430
look for things like the location
usage description entry or the

00:37:39.430 --> 00:37:41.410
photo library usage description.

00:37:41.450 --> 00:37:46.380
Put in the reason why you want access,
provide localizations, of course,

00:37:46.380 --> 00:37:50.480
help the user make an informed
decision about granting your app

00:37:50.480 --> 00:37:53.200
access to some kind of personal data.

00:37:56.060 --> 00:37:58.360
Testing, obviously important.

00:37:58.420 --> 00:37:59.960
Just make sure the right things happen.

00:38:00.000 --> 00:38:03.460
You know, when the user says okay,
when the user says don't allow,

00:38:03.460 --> 00:38:06.880
when the user later
changes her or his mind,

00:38:06.900 --> 00:38:09.470
and also when restrictions are in place.

00:38:09.500 --> 00:38:13.020
Now, the consent alert only comes up
once per test run of your app,

00:38:13.020 --> 00:38:16.680
so maybe you're going to have to
reset or toggle your privacy settings

00:38:16.680 --> 00:38:18.700
between one test run and the next.

00:38:18.780 --> 00:38:21.730
And you have to do this kind
of testing on the device.

00:38:21.920 --> 00:38:24.180
You can't use the simulator for this.

00:38:24.880 --> 00:38:27.940
And if you want to see how
to handle consent alerts,

00:38:27.940 --> 00:38:32.770
fairly new sample code, Privacy Prompts,
so I encourage you to download

00:38:32.780 --> 00:38:35.890
that and make sure your code
leverages that sample code.

00:38:38.430 --> 00:38:42.260
So that's data isolation
and data collection.

00:38:42.260 --> 00:38:44.700
That's the last thing I want to
talk about and I'm going to keep

00:38:44.840 --> 00:38:48.570
this fairly brief because we went
into a lot of detail actually in

00:38:48.580 --> 00:38:51.270
the last two WWDC privacy sessions.

00:38:51.300 --> 00:38:54.730
You know,
logging usage patterns and crashes

00:38:54.780 --> 00:38:59.300
and other events of interest
obviously is helpful to you.

00:38:59.400 --> 00:39:02.200
You know, you find out what
features are most popular,

00:39:02.540 --> 00:39:06.400
where code needs to be tightened up,
but you need to do it in ways

00:39:06.400 --> 00:39:08.240
to protect privacy of the user.

00:39:08.300 --> 00:39:12.700
And the way to think about
it is the data you log,

00:39:12.700 --> 00:39:17.460
if that did fall into the wrong hands,
could you explain to the user why

00:39:17.650 --> 00:39:20.300
you were collecting that data in
the way you were collecting it?

00:39:21.330 --> 00:39:25.710
Well, you need to do it in ways that
protect the information you were

00:39:25.710 --> 00:39:29.980
collecting in a way that the user
would understand and agree to.

00:39:30.000 --> 00:39:33.460
The bottom line is whether
you're logging this kind of

00:39:33.490 --> 00:39:37.990
runtime activity on the device or
collecting stats on your servers,

00:39:37.990 --> 00:39:41.240
you need to do it in ways
that ideally eliminate any

00:39:41.240 --> 00:39:43.960
kind of sensitive information.

00:39:45.740 --> 00:39:49.730
And somewhat related to this,
I'm sure you all know,

00:39:49.770 --> 00:39:54.490
you should have a privacy
policy statement explaining

00:39:54.490 --> 00:39:57.840
the data you collect,
what you do with that data,

00:39:57.840 --> 00:40:00.720
and whether or not you share
it with any third parties.

00:40:00.740 --> 00:40:04.760
And there's a link in iTunes Connect,
as you can see here.

00:40:04.760 --> 00:40:08.240
Provide that link,
and then that link's available to

00:40:08.240 --> 00:40:13.330
anybody running any App Store client on,
you know, any of our products.

00:40:16.160 --> 00:40:17.980
One last thing.

00:40:18.070 --> 00:40:22.470
I'm sure you all read the
App Store review guidelines every week.

00:40:22.650 --> 00:40:27.380
There's an important section for privacy
and I want to draw your attention.

00:40:27.380 --> 00:40:33.470
App Review added this last
clause fairly recently,

00:40:33.540 --> 00:40:38.300
so pay attention to that if any of your
apps are designed to be used by children.

00:40:40.190 --> 00:40:43.640
So we've run through this checklist.

00:40:43.710 --> 00:40:45.890
Hopefully as I've been
talking through these topics,

00:40:45.980 --> 00:40:48.820
you've said, "Yes, I do this, this, this,
and this, all the right things."

00:40:48.910 --> 00:40:50.860
And if you do that,
I'm happy.

00:40:51.100 --> 00:40:52.930
Congratulations and thank you.

00:40:53.010 --> 00:40:56.350
If you don't do all those things,
then you've got some homework.

00:40:56.440 --> 00:41:01.780
But hopefully you're on the right
track for all these security

00:41:01.820 --> 00:41:03.770
and privacy best practices.

00:41:04.650 --> 00:41:06.490
Here's my contact info.

00:41:06.500 --> 00:41:07.700
Always happy to hear from you.

00:41:07.700 --> 00:41:13.320
And definitely the Apple Developer Forums
is a great place to see what

00:41:13.570 --> 00:41:17.580
other developers are talking
about with these topics.

00:41:17.720 --> 00:41:23.450
The CoreOS section is a great
place to go and contribute and to,

00:41:23.450 --> 00:41:29.180
you know, to discuss various security
and privacy topics.

00:41:29.260 --> 00:41:30.660
So thanks very much.

00:41:30.660 --> 00:41:32.590
And I'm going to finish here.

00:41:32.590 --> 00:41:34.290
We'll take a short break.

00:41:34.290 --> 00:41:37.930
And then last session of the
day is going to be a great one.

00:41:37.930 --> 00:41:40.840
That's the hidden gems
for iOS development.

00:41:40.840 --> 00:41:42.490
So thanks very much.