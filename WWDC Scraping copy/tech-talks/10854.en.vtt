WEBVTT

00:00:01.100 --> 00:00:02.700
Hi, I'm Jeri Mason.

00:00:02.700 --> 00:00:05.230
I'm a software engineer
on the HomePod team,

00:00:05.230 --> 00:00:08.860
and I'm going to walk you through
bringing your media service into

00:00:08.860 --> 00:00:13.090
the home with SiriKit Media Intents,
now powered by cloud extensions.

00:00:13.530 --> 00:00:17.090
Let's start with everything
you need to start developing.

00:00:17.350 --> 00:00:19.560
First,
we'll cover some important prerequisites

00:00:19.560 --> 00:00:21.270
for developing a service effectively.

00:00:21.280 --> 00:00:23.840
How to configure a test home.

00:00:23.840 --> 00:00:26.640
How to set up your HomePod for testing.

00:00:26.640 --> 00:00:30.320
How to set up your iOS
device for development.

00:00:30.320 --> 00:00:33.960
And finally,
adopting the media setup framework

00:00:33.960 --> 00:00:36.790
in your app for onboarding
your service into a home.

00:00:36.800 --> 00:00:40.090
Once you've taken these steps,
you're well on your way to

00:00:40.100 --> 00:00:43.020
creating an awesome playback
experience on HomePod for the

00:00:43.360 --> 00:00:44.880
people who love your content.

00:00:45.950 --> 00:00:47.830
Let's dive into the prerequisites.

00:00:47.970 --> 00:00:50.240
To support SiriKit Media Intense
on HomePod,

00:00:50.240 --> 00:00:54.480
your service must already support
Media Intense in your iOS app.

00:00:54.480 --> 00:00:59.920
You'll need to apply for the
program on developer.apple.com/siri.

00:00:59.920 --> 00:01:04.510
After you apply, you'll receive more
details about accessing the

00:01:04.540 --> 00:01:08.560
Cloud Extension API specification,
which your service must implement.

00:01:08.560 --> 00:01:12.370
Then you can register your service
with us to get entitlements and

00:01:12.370 --> 00:01:14.320
profiles to begin development.

00:01:14.320 --> 00:01:16.880
And finally,
before a HomePod will be able

00:01:16.880 --> 00:01:18.730
to reach out to your service
via the Cloud Extension APIs,

00:01:18.730 --> 00:01:23.200
you must implement an OAuth flow
and a configuration web service

00:01:23.200 --> 00:01:26.830
defined in our specification.

00:01:26.940 --> 00:01:29.590
Let's talk more about registration.

00:01:29.730 --> 00:01:33.360
To register your service,
you'll need to provide your service name,

00:01:33.430 --> 00:01:38.130
a public sign-in key that you create
to verify the service on devices,

00:01:38.230 --> 00:01:43.790
a static URL to retrieve an icon for your
service from iOS devices in the home,

00:01:43.910 --> 00:01:47.640
and a list of bundle IDs of apps
which are using the service.

00:01:47.760 --> 00:01:51.500
This information will be used to create
a development profile you can install

00:01:51.500 --> 00:01:53.760
on your test and development devices.

00:01:53.880 --> 00:01:57.150
Only devices with a profile will
be able to test your service.

00:01:58.900 --> 00:02:01.760
It should come as no surprise,
since the cloud extension

00:02:01.760 --> 00:02:04.730
APIs use web technology,
we've adopted authentication

00:02:04.730 --> 00:02:06.630
using OAuth 2.0 endpoint.

00:02:06.740 --> 00:02:09.610
But since your app takes the
role of a trusted client,

00:02:09.750 --> 00:02:13.020
a service that implements client
credentials flow is required.

00:02:13.120 --> 00:02:17.290
A unique client ID and client
secret is required for each service

00:02:17.290 --> 00:02:18.930
account that is added to a home.

00:02:19.250 --> 00:02:23.550
Even though it's uncommon for this flow,
the issuing of renewal tokens is

00:02:23.560 --> 00:02:27.600
recommended so as to avoid a common
reuse of these credentials provided

00:02:27.600 --> 00:02:29.290
directly to the OAuth service.

00:02:29.610 --> 00:02:31.910
This is because without
a renewal token flow,

00:02:32.060 --> 00:02:34.630
the client ID and client
secret could be long-lived.

00:02:34.640 --> 00:02:37.460
As long as someone is using
your service from a home,

00:02:37.640 --> 00:02:40.750
either a renewal token or the original
authentication must be supported.

00:02:40.840 --> 00:02:45.540
Your iOS app must be able to supply
these credentials by requesting

00:02:45.540 --> 00:02:50.950
them from your service and providing
them to iOS Media Setup APIs.

00:02:51.830 --> 00:02:54.580
HomePods reach out to your
service to resolve intents.

00:02:54.580 --> 00:02:59.320
On iOS, the details of what intents you
support are part of your app's bundle.

00:02:59.330 --> 00:03:02.250
In Cloud extension,
you must implement one or more

00:03:02.250 --> 00:03:06.080
configuration resource endpoints,
which identify supported endpoints

00:03:06.190 --> 00:03:08.620
and what URLs you use to reach them.

00:03:08.640 --> 00:03:10.480
There's a lot of flexibility here.

00:03:10.510 --> 00:03:14.170
You can have multiple static
URLs or implement an endpoint

00:03:14.170 --> 00:03:17.900
that creates them dynamically,
all of which is useful for development

00:03:18.070 --> 00:03:20.380
in staging test configurations.

00:03:20.390 --> 00:03:23.580
Your endpoint can even check a
request authorization header,

00:03:23.600 --> 00:03:26.780
identifying the account
retrieving the configuration.

00:03:26.800 --> 00:03:30.460
The body of the configuration is
encoded using JavaScript object

00:03:30.480 --> 00:03:33.870
signing and encryption standards,
and it must be properly signed

00:03:33.940 --> 00:03:35.900
for the device to accept it.

00:03:35.950 --> 00:03:40.050
However you serve the resource,
it must provide standard HTTP cache

00:03:40.100 --> 00:03:44.340
control headers so that clients
do not have to retrieve it often.

00:03:44.360 --> 00:03:47.100
Every time your app adds
your service to a home,

00:03:47.100 --> 00:03:50.360
it provides the URL for this resource,
as well as the client credentials.

00:03:50.380 --> 00:03:56.690
But these prerequisites met,
let's talk about configuring a test home.

00:03:57.670 --> 00:03:59.580
While you're developing
and testing your service,

00:03:59.580 --> 00:04:03.540
having a dedicated test home in the
Apple Home app is strongly recommended.

00:04:03.540 --> 00:04:06.110
That way,
you won't affect any HomeKit homes

00:04:06.200 --> 00:04:09.220
you may use personally,
and you only have to manage

00:04:09.220 --> 00:04:12.370
the configuration of the
devices in your test home.

00:04:12.400 --> 00:04:15.210
You'll also want to have
multiple test iCloud accounts,

00:04:15.280 --> 00:04:18.900
so you can test your service with
different accounts in the same home.

00:04:18.900 --> 00:04:21.240
And naturally,
you want to make sure that you're

00:04:21.240 --> 00:04:24.520
using the same accounts on the
HomePod and your iOS test devices.

00:04:24.520 --> 00:04:27.440
Creating a new home in
the Home app is easy.

00:04:28.230 --> 00:04:34.060
First, tap Home Settings, add a home,
type in the name of the home.

00:04:34.060 --> 00:04:39.990
Now you can add people who
are your other test users.

00:04:44.160 --> 00:04:46.430
Okay, now that you've got
your test home set up,

00:04:46.700 --> 00:04:49.590
you'll need to add a HomePod to
it and then set it up.

00:04:49.720 --> 00:04:53.560
You'll usually want to install
the latest tvOS developer

00:04:53.560 --> 00:04:57.200
beta release on your HomePod,
or a release Apple currently

00:04:57.310 --> 00:04:58.860
advises for development.

00:04:58.860 --> 00:05:02.540
It's important to note that you cannot
use a regular tvOS release until

00:05:02.540 --> 00:05:04.390
you're ready to submit your app.

00:05:04.800 --> 00:05:07.560
Until then,
you'll also need to install a development

00:05:07.560 --> 00:05:11.500
profile provided by Apple for your
service in the home app on iOS.

00:05:12.530 --> 00:05:16.230
Be sure to repeat this process for each
device you plan to test in your home.

00:05:16.240 --> 00:05:20.860
When you update to a new version of tvOS,
you may have to reinstall the profile.

00:05:22.380 --> 00:05:28.690
To install a profile on a HomePod,
first make sure your test home

00:05:28.690 --> 00:05:28.690
is selected in the Home app.

00:05:29.370 --> 00:05:32.330
Open the profile on an iOS device.

00:05:32.420 --> 00:05:35.950
Select HomePod as the
device type to install.

00:05:36.300 --> 00:05:44.960
Tap "Install" Enter your passcode
Consent to the agreements

00:05:44.960 --> 00:05:44.960
Tap "Install" to complete installation

00:05:45.560 --> 00:05:49.700
You can then choose which HomePod in
your test home to install the profile to.

00:05:49.770 --> 00:05:53.440
That's it.

00:05:53.520 --> 00:05:56.180
You'll need to set up your iOS devices
for testing and development as well.

00:05:56.570 --> 00:06:00.100
You'll need to be using a
developer beta on your iOS device.

00:06:00.210 --> 00:06:04.000
Usually you want the version that was
released at the same time as tvOS,

00:06:04.190 --> 00:06:07.200
but check with Apple for the
latest recommended version.

00:06:07.360 --> 00:06:10.880
Like the HomePod, you'll need to install
your developer profile.

00:06:11.000 --> 00:06:14.950
Tap on the mobile config bundle in
an email or iMessage attachment.

00:06:15.090 --> 00:06:20.100
Choose to install it on your iOS device
and follow the typical flow for accepting

00:06:20.170 --> 00:06:22.890
and installing profiles in Settings.

00:06:23.310 --> 00:06:26.160
It's a good idea to check
that your iOS device and your

00:06:26.160 --> 00:06:30.300
HomePod devices are running the
expected releases at this point.

00:06:30.500 --> 00:06:33.370
You can repeat the setup for
any test devices you may need.

00:06:33.640 --> 00:06:36.600
They can be iPhone or iPad devices.

00:06:37.570 --> 00:06:45.340
With your devices configured,
you can now adopt the Media Setup

00:06:45.340 --> 00:06:47.800
Framework in your app.

00:06:47.800 --> 00:06:47.800
This is what ultimately will
allow people to set up your

00:06:47.800 --> 00:06:47.800
service for use in their home.

00:06:48.220 --> 00:06:50.420
To use Media Setup,
you'll need to implement

00:06:50.580 --> 00:06:54.520
functionality in your app to
retrieve or create OAuth material,

00:06:54.520 --> 00:06:57.660
choose a configuration
resource URL appropriate for

00:06:57.670 --> 00:07:00.790
the account being onboarded,
and then you'll have to add the

00:07:00.790 --> 00:07:04.060
entitlement you received after
registering your service with Apple.

00:07:04.060 --> 00:07:06.140
Otherwise,
you won't be able to use the framework.

00:07:06.310 --> 00:07:11.190
Make sure to add a prominent discoverable
onboarding presentation context

00:07:11.210 --> 00:07:16.130
in your app to trigger the account
installation flow using MS Setup Session.

00:07:16.940 --> 00:07:19.540
People will be guided through
the home account setup process.

00:07:19.540 --> 00:07:24.440
The setup process will use your OAuth
service to retrieve API tokens and

00:07:24.670 --> 00:07:28.920
verify your configuration resource
URL is properly signed and parsable.

00:07:28.920 --> 00:07:33.040
So all the prerequisites I mentioned
earlier must be met before a

00:07:33.040 --> 00:07:34.940
successful setup will complete.

00:07:35.010 --> 00:07:39.200
You can get more details
at developer.apple.com.

00:07:39.280 --> 00:07:42.600
Now that your development and
test environments are ready,

00:07:42.600 --> 00:07:45.220
a HomePod in your test panel
can reach out to your service.

00:07:45.220 --> 00:07:46.590
Let's go over the process.

00:07:46.620 --> 00:07:49.320
The system architecture of
handling intents in the cloud.

00:07:49.320 --> 00:07:53.660
On iPhones, iPads, or Apple TV,
when you ask Siri to play

00:07:53.660 --> 00:07:57.470
media in your iOS app,
you either handle intents directly or

00:07:57.470 --> 00:08:00.160
via an extension in your app bundle.

00:08:00.180 --> 00:08:03.260
Typically, when someone asks Siri to
play content from your app,

00:08:03.670 --> 00:08:07.190
Siri processes this request,
identifies your app bundle

00:08:07.360 --> 00:08:10.770
as the target of the intent,
and loads your app extension,

00:08:10.810 --> 00:08:13.250
which implements the intent resolution.

00:08:13.290 --> 00:08:16.100
Your extension can communicate
with your services,

00:08:16.630 --> 00:08:18.760
and the handling of the intent
will trigger launching of

00:08:18.760 --> 00:08:22.380
your app to begin playback,
or just signal it to handle changes.

00:08:22.480 --> 00:08:26.000
With cloud extension,
the process of resolving those intents

00:08:26.250 --> 00:08:30.880
moves from your extension implementation
on device to an API on your service,

00:08:31.000 --> 00:08:33.730
as the HomePod directly reaches
out to your cloud extension

00:08:33.890 --> 00:08:35.310
intent endpoints instead.

00:08:35.570 --> 00:08:38.590
The cloud extension API is
a web API specification

00:08:38.590 --> 00:08:40.800
designed for intent handling.

00:08:40.840 --> 00:08:45.500
It uses open API schemas to
define objects that closely

00:08:45.600 --> 00:08:46.480
follow the SiriKit interface.

00:08:46.620 --> 00:08:49.080
It uses a lot of the same code that
you use to create content APIs you're

00:08:49.090 --> 00:08:50.380
already familiar with on iOS.

00:08:50.470 --> 00:08:54.360
The configuration URLs I discussed
as we were getting started are

00:08:54.360 --> 00:08:58.070
also part of this specification,
and their content is defined in it.

00:08:58.180 --> 00:09:02.860
Each SiriKit media intent type has
a protocol endpoint configuration,

00:09:03.060 --> 00:09:07.190
and we can reach out to different URLs as
necessary for your implementation.

00:09:07.260 --> 00:09:14.200
The protocols supported are play media,
add media, and update media affinity.

00:09:14.360 --> 00:09:16.360
You may notice the search protocols
are not the same as the previous ones.

00:09:16.420 --> 00:09:16.580
They are the same as the previous ones.

00:09:16.620 --> 00:09:17.940
The search protocol is
not provided in HomePod,

00:09:17.940 --> 00:09:21.110
because there's no context to
display the results on HomePod,

00:09:21.120 --> 00:09:22.460
unlike on iOS devices.

00:09:22.460 --> 00:09:25.480
Let's look at what happens when
I tell Siri to play content.

00:09:25.480 --> 00:09:29.380
When I tell Siri,
play strange by Celeste,

00:09:29.500 --> 00:09:32.360
this triggers the play
media intent handling flow.

00:09:32.360 --> 00:09:33.470
When I tell Siri,
play strange by Celeste,

00:09:33.470 --> 00:09:33.470
this triggers the play
media intent handling flow.

00:09:33.720 --> 00:09:36.860
The HomePod starts resolving
a Play Media Intent with

00:09:36.860 --> 00:09:38.240
a Media Search object.

00:09:38.240 --> 00:09:42.130
It's serialized in JSON and
sent to your service.

00:09:42.260 --> 00:09:45.960
Once you match the Media Search to
something appropriate in your catalog,

00:09:45.960 --> 00:09:47.850
you'll create a response object.

00:09:47.980 --> 00:09:53.140
The Media Item has an identifier, type,
and additional metadata that Siri may use

00:09:53.140 --> 00:09:57.920
to formulate dialogue to tell the user,
"Now playing 'Strange' by

00:09:57.920 --> 00:10:01.500
Celeste." Additionally,
this protocol has a handle method

00:10:01.500 --> 00:10:04.760
that is called after resolving
other fields on the intent.

00:10:04.840 --> 00:10:07.080
If the fields on the intent
are already acceptable,

00:10:07.210 --> 00:10:10.270
there's no reason to delay
returning the final handle method,

00:10:10.380 --> 00:10:13.800
so include it in your response
to the initial request.

00:10:13.890 --> 00:10:18.020
Not doing so causes extra round trips
to your service unnecessarily and

00:10:18.020 --> 00:10:20.430
slows down the intent response time.

00:10:20.550 --> 00:10:23.530
Inside a handle response,
you can include an object called

00:10:23.530 --> 00:10:28.080
"UserActivity," which contains a
persistent identifier and user info that

00:10:28.080 --> 00:10:31.900
will be returned to your service when
the HomePod starts playing your content.

00:10:31.980 --> 00:10:34.960
Your service replies with these
results and may begin to formulate a

00:10:35.170 --> 00:10:39.440
queue of content to play based on the
request as the HomePod processes these

00:10:39.510 --> 00:10:42.200
results and starts a playback session.

00:10:42.430 --> 00:10:44.770
Now,
when media is playing from your service,

00:10:44.920 --> 00:10:47.440
let's consider what
happens when I tell Siri,

00:10:47.540 --> 00:10:51.900
"Add this to my library." The add
media intent handling flow starts

00:10:52.120 --> 00:10:55.970
with resolving media items as before,
except now that Siri knows what's

00:10:55.970 --> 00:10:59.390
currently playing from your service,
an identifier for the currently

00:10:59.510 --> 00:11:03.200
playing content is also part
of the media search parameters.

00:11:03.280 --> 00:11:06.010
As before,
your service must identify the content

00:11:06.010 --> 00:11:10.220
playing and add it to the library of
the count used to make the request.

00:11:10.300 --> 00:11:14.260
You'll then create an object to represent
the resolved media item and bundle

00:11:14.260 --> 00:11:19.350
together the handle method result that
indicates this operation was successful.

00:11:19.470 --> 00:11:21.920
Then you'll return that
response to the HomePod,

00:11:22.030 --> 00:11:24.730
where Siri will confirm the result.

00:11:25.070 --> 00:11:27.840
And finally,
when I tell Siri I like this,

00:11:27.920 --> 00:11:31.170
the update media affinity intent
handling starts again with

00:11:31.170 --> 00:11:34.290
resolving media items as before,
and your service will

00:11:34.290 --> 00:11:37.610
identify the content,
create a resolve media item result,

00:11:37.610 --> 00:11:41.000
register this affinity against
the taste profile the account

00:11:41.000 --> 00:11:44.770
used to authenticate the request,
and like the previous examples,

00:11:44.770 --> 00:11:46.970
include the handle method result.

00:11:47.820 --> 00:11:51.540
These context-specific requests will
only include a content identifier if

00:11:51.620 --> 00:11:55.900
your service is the service playing on
the HomePod when the request is made.

00:11:55.960 --> 00:11:58.430
Also,
don't forget that listeners can just say

00:11:58.490 --> 00:12:02.890
that they want to add something that's
not currently playing to their library.

00:12:02.900 --> 00:12:05.310
In this case,
you'll be provided with media

00:12:05.310 --> 00:12:07.420
names and artist names to resolve.

00:12:07.420 --> 00:12:09.900
This is a less common use case, though.

00:12:11.660 --> 00:12:16.850
Let's see a basic play media request and
response as it looks in the protocol,

00:12:16.920 --> 00:12:17.820
as JSON.

00:12:17.900 --> 00:12:22.500
If I ask my HomePod the most basic
request to play music on your service,

00:12:22.790 --> 00:12:25.630
every request to the intent
endpoints on your service will

00:12:25.630 --> 00:12:29.420
provide a session description
before the first item to resolve.

00:12:29.460 --> 00:12:32.940
Most objects in the specification
include the Cloud extension version

00:12:32.940 --> 00:12:35.300
number of the object being presented.

00:12:35.350 --> 00:12:39.400
Your service should support older
versions of these objects when possible.

00:12:39.440 --> 00:12:42.160
Newer versions also should
be backward compatible up to

00:12:42.160 --> 00:12:44.490
a new major version number.

00:12:44.780 --> 00:12:47.610
The intent resolution
session has an identifier,

00:12:47.610 --> 00:12:50.830
which is also carried in a
header on HTTPS requests.

00:12:50.840 --> 00:12:54.140
It will remain the same during
resolution of the intent interaction,

00:12:54.320 --> 00:12:57.240
and if multiple requests are
made to resolve this intent,

00:12:57.480 --> 00:13:00.440
this identifier will be
consistent between them.

00:13:00.660 --> 00:13:04.020
Two timestamps are provided:
the UTC time when the request

00:13:04.130 --> 00:13:07.650
was prepared and a deadline time,
after which the client

00:13:07.650 --> 00:13:09.560
will time out the request.

00:13:09.670 --> 00:13:12.190
If the deadline is missed,
Siri will explain the service

00:13:12.250 --> 00:13:13.640
cannot resolve the intent.

00:13:13.640 --> 00:13:16.940
Providing a timely response is important.

00:13:17.360 --> 00:13:19.240
Timeouts happen after 10 seconds.

00:13:19.240 --> 00:13:23.470
So consider how you can break up
the work of returning intent results

00:13:23.960 --> 00:13:26.740
and preparing content for playback,
so that your service can take

00:13:26.820 --> 00:13:29.400
advantage of the time between
requests from the HomePod.

00:13:29.400 --> 00:13:32.410
These constraints and player
context objects will be

00:13:32.440 --> 00:13:34.120
discussed in more depth later.

00:13:34.120 --> 00:13:37.340
They provide important information
about what's happening on the

00:13:37.340 --> 00:13:39.000
HomePod when the request was made.

00:13:40.630 --> 00:13:44.440
Most requests start with a
resolveMediaItems method on the protocol.

00:13:44.630 --> 00:13:47.660
The most important part of this
request is in the parameter,

00:13:47.660 --> 00:13:48.770
an intent object.

00:13:48.840 --> 00:13:53.430
This is a playMedia intent,
and all playMedia intent objects have

00:13:53.430 --> 00:13:58.290
a media search that defines attributes
of media parsed by Siri from speech.

00:13:58.540 --> 00:14:02.410
Other parameters of the intent include
information about whether I asked to

00:14:02.500 --> 00:14:06.700
play the content shuffled or repeating,
or to resume playing the content,

00:14:06.820 --> 00:14:09.960
or whether I said to play something
next or later instead of now.

00:14:10.500 --> 00:14:13.870
This object should appear
familiar to you if you've already

00:14:13.870 --> 00:14:15.940
handled playMediaIntents on iOS.

00:14:15.960 --> 00:14:19.590
The response you return from this
request should look familiar too,

00:14:20.040 --> 00:14:21.930
but there are a few new twists.

00:14:22.540 --> 00:14:26.150
Inside an array of results,
you provide the method name,

00:14:26.160 --> 00:14:29.710
a result object,
in this case a resolutionResult

00:14:29.710 --> 00:14:32.650
array with one item,
the resolutionResult class

00:14:32.650 --> 00:14:37.540
appropriate for this method,
which is in this case a success property,

00:14:37.540 --> 00:14:42.040
and as you can see, this resolveMediaItem
represents your favorites,

00:14:42.060 --> 00:14:44.810
a station based on my taste profile.

00:14:45.070 --> 00:14:47.380
Here is something new
for cloud extension.

00:14:47.410 --> 00:14:50.600
Each method you process should return
a metrics object that describes

00:14:50.600 --> 00:14:53.680
how long in seconds it took for
your service to provide results.

00:14:53.740 --> 00:14:57.460
Apple may use this data in aggregate
to roughly determine the experience of

00:14:57.460 --> 00:15:02.080
listeners and better evaluate when delays
are caused by network connectivity.

00:15:02.130 --> 00:15:05.120
You can see the next result item
is peeking around the break here:

00:15:05.200 --> 00:15:07.680
the handle method for this protocol.

00:15:07.720 --> 00:15:10.330
The result of a handle
method is a response object

00:15:10.330 --> 00:15:14.330
appropriate for that intent,
which has a status code and then a

00:15:14.330 --> 00:15:16.720
description of a user activity object.

00:15:16.820 --> 00:15:21.440
Think of user activities as a memento
representing the intent result.

00:15:21.700 --> 00:15:25.150
For Play Media Inteint results,
the user activity is used when starting

00:15:25.230 --> 00:15:27.920
or modifying playback of your content.

00:15:28.000 --> 00:15:31.100
Whereas on iOS devices,
the user activity object is made

00:15:31.100 --> 00:15:33.630
available to your app when it's launched.

00:15:33.710 --> 00:15:35.780
On HomePod,
your service defines the listening

00:15:35.780 --> 00:15:40.670
experience with another cloud
extension API for MediaCube playback.

00:15:41.700 --> 00:15:43.760
Up to this point,
intent handling should have been

00:15:43.760 --> 00:15:47.680
super familiar if you've implemented
SiriKit Media Inteints on iOS previously.

00:15:47.680 --> 00:15:58.190
Applying media from your cloud service is
the driving feature of cloud extension,

00:15:58.260 --> 00:15:59.320
and in this part,
I'll provide you the concepts

00:15:59.320 --> 00:15:59.320
and specifics to implement
media queues in the cloud.

00:16:00.400 --> 00:16:03.400
Let's review again what happens
when a person asks Siri to

00:16:03.400 --> 00:16:04.900
play media on a HomePod.

00:16:04.980 --> 00:16:09.350
The request is processed by Siri,
and our Cloud Media Service Extension has

00:16:09.380 --> 00:16:12.080
chosen to handle it on
behalf of your service.

00:16:12.370 --> 00:16:15.670
The HomePod uses the
Cloud Extension APIs implemented by

00:16:15.670 --> 00:16:17.960
your service to resolve an intent.

00:16:18.040 --> 00:16:21.680
Once we've resolved the intent,
a Cloud Media Player component will

00:16:21.680 --> 00:16:24.160
contact your service's queue endpoints.

00:16:24.230 --> 00:16:28.060
And it's those queue endpoints which
determine what content to play.

00:16:28.140 --> 00:16:31.340
In most services,
a content distribution service often

00:16:31.340 --> 00:16:33.900
provides the actual audio files to play.

00:16:33.980 --> 00:16:36.540
You might notice that there
are two HomePods depicted here.

00:16:36.610 --> 00:16:39.230
In certain situations,
the HomePod that resolves the

00:16:39.230 --> 00:16:42.960
intent may not be the same
HomePod that is playing your content.

00:16:43.200 --> 00:16:46.920
If a family has several HomePods,
the HomePod closest to someone

00:16:46.920 --> 00:16:49.950
in the living room might
respond to their request,

00:16:49.950 --> 00:16:52.810
even if your service had already
been playing to multiple locations

00:16:52.820 --> 00:16:56.230
in the house and that session
had started in the kitchen.

00:16:57.070 --> 00:17:00.300
Let's see how your service
provides content for your cues.

00:17:00.340 --> 00:17:04.020
I'm going to walk you through some
high-level concepts of media cues,

00:17:04.050 --> 00:17:09.160
including various idioms and use cases
for different listening experiences.

00:17:09.200 --> 00:17:13.520
And then dive into details of
managing cues and their lifetime.

00:17:13.550 --> 00:17:16.010
And finally,
I'll explain how your service

00:17:16.210 --> 00:17:18.640
defines playback controls on HomePod.

00:17:18.680 --> 00:17:23.140
Okay, let's explore what it means to
provide a cue from your service.

00:17:23.210 --> 00:17:27.050
All listening experiences supported
by Cloud Extension are defined by

00:17:27.290 --> 00:17:29.370
playing a cue of content items.

00:17:29.440 --> 00:17:32.740
Cues are created or modified
by submitting user activity

00:17:32.740 --> 00:17:36.060
objects resulting from intent
resolution to your service.

00:17:36.130 --> 00:17:39.220
Your service returns a cue
of content items all at once

00:17:39.290 --> 00:17:41.780
or more likely in segments.

00:17:41.840 --> 00:17:46.080
Let's look at some use cases and
how to conceptualize them as a cue.

00:17:46.150 --> 00:17:49.020
Internet radio content often
starts with a promotion track,

00:17:49.080 --> 00:17:52.940
then many songs,
quite often an advertisement, more songs,

00:17:53.330 --> 00:17:58.120
and then it continues indefinitely
until a listener stops playback.

00:17:58.260 --> 00:18:01.660
On-demand music requests can
resolve to a single album or other

00:18:01.660 --> 00:18:05.880
collection like a playlist and
be constrained to a finite cue.

00:18:06.040 --> 00:18:08.980
And live streaming content will
often have a single content item

00:18:09.120 --> 00:18:12.920
which forms a minimal cue response
that has one piece of content

00:18:12.920 --> 00:18:15.520
referencing the live stream source.

00:18:15.740 --> 00:18:18.740
Content items in a queue can be
described with an identifier,

00:18:18.940 --> 00:18:23.290
a URL, and various descriptive attributes
like the name of the content,

00:18:23.480 --> 00:18:24.860
the artist, and so on.

00:18:24.910 --> 00:18:34.250
Content selection can take any number
of algorithmic forms in your service,

00:18:34.250 --> 00:18:34.250
from a rigid album track order to
a completely dynamic selection.

00:18:35.210 --> 00:18:44.560
Queues are intended to
support all these use cases.

00:18:44.570 --> 00:18:44.570
Now let's talk about the various ways
you can represent your sequence of

00:18:44.570 --> 00:18:44.570
content items in a queue idiomatically.

00:18:45.120 --> 00:18:48.170
The idioms I'll be describing are
variations on using a cue broken

00:18:48.200 --> 00:18:49.660
into segments for different purposes.

00:18:49.660 --> 00:18:53.300
So here we have our content
conceptually realized over time,

00:18:53.320 --> 00:18:54.780
described by objects.

00:18:54.780 --> 00:18:58.200
Say these four pieces of content are
the complete listening experience

00:18:58.330 --> 00:19:01.770
you want to represent as the
result of an intent resolution.

00:19:01.780 --> 00:19:05.880
You can package them into a cue object,
which has its own identifier and a

00:19:06.120 --> 00:19:08.440
simple array of all these content items.

00:19:08.440 --> 00:19:10.460
That's a pretty basic cue object.

00:19:11.630 --> 00:19:14.820
This is the static content idiom,
where a cue contains a finite,

00:19:14.820 --> 00:19:16.580
non-changing list of content.

00:19:16.600 --> 00:19:20.520
It may fit into one cue segment,
or it might not, but conceptually,

00:19:20.520 --> 00:19:23.840
it is a rigid list of content
items that can be played in order.

00:19:23.860 --> 00:19:27.230
Use cases for this idiom include
the on-demand music request

00:19:27.360 --> 00:19:30.700
for an album or a playlist,
or the live stream use case where the

00:19:30.700 --> 00:19:34.840
cue is a simple wrapper for one piece
of content that streams indefinitely.

00:19:36.920 --> 00:19:39.170
Your service can have
more complicated queues,

00:19:39.170 --> 00:19:39.840
however.

00:19:39.950 --> 00:19:43.250
Queues can be split into segments,
and they internally link to

00:19:43.340 --> 00:19:47.080
the next content and previous
content items via URL references.

00:19:47.200 --> 00:19:50.380
The HomePod will retrieve these
segments as your service defines them,

00:19:50.500 --> 00:19:54.120
and any particular segment can be
dynamically generated and return

00:19:54.120 --> 00:19:57.980
different results as the listening
session moves to the new segment,

00:19:58.100 --> 00:20:02.010
either by transitioning naturally
or by skipping forward or backwards

00:20:02.160 --> 00:20:03.900
through your content items.

00:20:04.030 --> 00:20:06.620
This particular example might
fit a use case where a service

00:20:06.840 --> 00:20:10.420
provides an advertisement inside
a set of fixed content segments,

00:20:10.500 --> 00:20:13.310
and each time the player
encounters queue segment B,

00:20:13.530 --> 00:20:15.940
a different advertisement might play.

00:20:16.030 --> 00:20:18.730
This means your service queue
content is retrieved dynamically,

00:20:18.730 --> 00:20:22.170
so your service will experience
more requests for each queue

00:20:22.170 --> 00:20:23.770
segment as it is entered.

00:20:24.930 --> 00:20:27.430
Your service may want to have
the most discrete control over

00:20:27.430 --> 00:20:28.960
content and playback options.

00:20:29.000 --> 00:20:32.140
And in the fully dynamic idiom,
every cue segment contains one

00:20:32.140 --> 00:20:35.860
content item and a new content for
the cue can be retrieved dynamically

00:20:35.860 --> 00:20:38.040
as the listener proceeds through it.

00:20:38.170 --> 00:20:41.810
This is a popular idiom for internet
radio use cases because the cue is

00:20:41.810 --> 00:20:45.410
typically of indefinite size and
also because the cue content itself

00:20:45.690 --> 00:20:47.680
is a function of listening behavior.

00:20:47.770 --> 00:20:51.220
Skipping tracks and providing
content affinity through Siri Intents

00:20:51.220 --> 00:20:54.610
may change the taste profile
associated with the account,

00:20:54.610 --> 00:20:58.520
and therefore upcoming content
items may be selected differently.

00:20:58.590 --> 00:21:02.360
Naturally, this is also the idiom that
represents the most request

00:21:02.360 --> 00:21:04.220
processing on your service.

00:21:04.820 --> 00:21:08.860
Since these idioms are different ways
of using the same cue architecture,

00:21:08.860 --> 00:21:12.660
your service can provide cues using
any combination of these idioms,

00:21:12.660 --> 00:21:15.820
and you can even choose alternate
idioms to implement for a

00:21:15.820 --> 00:21:17.740
particular kind of request.

00:21:17.800 --> 00:21:22.580
They're useful for considering
trade-offs in complexity and capability.

00:21:22.610 --> 00:21:23.320
Enough theory.

00:21:23.320 --> 00:21:27.800
Let's talk about how your service
creates and manages these cues.

00:21:27.840 --> 00:21:32.200
When a Play Media Intent Handling request
returns from your intent endpoint,

00:21:32.260 --> 00:21:35.620
your service should start creating
your representation of a cue,

00:21:35.620 --> 00:21:38.610
because shortly afterward,
a request on your cue Play Media Endpoint

00:21:38.680 --> 00:21:42.940
will be made to retrieve the
initial or complete cue segment.

00:21:42.960 --> 00:21:46.970
Each segment can link to a next and
previous segment as your service desires,

00:21:47.070 --> 00:21:50.920
providing a set of content that is
potentially endless or circular.

00:21:50.960 --> 00:21:54.760
Usually, a newly retrieved cue starts
playing from the first content item.

00:21:54.810 --> 00:21:57.800
To support resuming playback
from a prior session,

00:21:57.840 --> 00:22:02.200
a Play Pointer object can be
provided in the initial cue segment,

00:22:02.200 --> 00:22:05.200
and playback begins from
the content item indicated,

00:22:05.200 --> 00:22:07.230
at a time offset you provide.

00:22:07.470 --> 00:22:11.840
To support smooth, gapless playback,
as the listening point is near the end of

00:22:11.840 --> 00:22:15.560
the last content item in the cue segment,
the next segment will be

00:22:15.560 --> 00:22:19.800
retrieved and appended at a
configurable pre-roll interval.

00:22:20.500 --> 00:26:48.400
[Transcript missing]

00:26:48.850 --> 00:26:52.190
I hope you have a good grasp of the
rich set of queue management tools your

00:26:52.250 --> 00:26:58.220
service can use to provide flexible and
timely content retrieval and updates.

00:26:58.350 --> 00:27:05.560
Finally, in this section,
I'll expand on controlling

00:27:05.560 --> 00:27:05.560
playback and defining how listeners
interact with your service.

00:27:06.300 --> 00:27:09.200
Not every kind of cue is the same,
and not all content in a

00:27:09.200 --> 00:27:10.890
cue can be treated the same.

00:27:10.900 --> 00:27:14.560
For example, the internet radio use case
typically supports only

00:27:14.560 --> 00:27:16.540
forward motion through the cue.

00:27:16.540 --> 00:27:19.740
Additionally,
when an advertisement is playing,

00:27:19.740 --> 00:27:22.510
you may not want to support
skipping that content at all.

00:27:22.520 --> 00:27:27.130
Skipping ahead in radio station cues
may be limited by many variables.

00:27:27.140 --> 00:27:31.410
Premium subscriptions, freemium models,
other more esoteric limitations.

00:27:31.460 --> 00:27:35.430
The fully dynamic idiom is often the
only way to support these requirements.

00:27:36.580 --> 00:27:40.310
Moving between different content in
a cue may be limited arbitrarily.

00:27:40.340 --> 00:27:42.920
Let's talk about how you
define this interaction.

00:27:44.260 --> 00:27:48.260
Cloud extension Q APIs let
your service define interaction

00:27:48.260 --> 00:27:52.580
with PlayMedia Control objects
you provide in the Q object.

00:27:52.610 --> 00:27:56.570
Each PlayMedia Control object can
choose a predefined scheme which

00:27:56.570 --> 00:27:58.920
supports several common use cases.

00:27:58.980 --> 00:28:05.060
This set of defined interactions
can be specified on each content

00:28:05.060 --> 00:28:05.060
item with a control attribute.

00:28:05.470 --> 00:28:08.920
Let's look at an example control
definition which might be appropriate

00:28:09.160 --> 00:28:12.890
for an on-demand service with
advertisements interspersed with songs.

00:28:12.900 --> 00:28:18.260
You include these definitions inside a
controls attribute for every cue object.

00:28:18.400 --> 00:28:21.000
In this example,
there are two definitions:

00:28:21.280 --> 00:28:25.300
the required "default" definition,
which is used when any content

00:28:25.300 --> 00:28:29.780
item does not specify a control,
and an "add" definition,

00:28:29.980 --> 00:28:33.300
that is specified on all content
items that are advertisements.

00:28:33.330 --> 00:28:36.020
All control definitions
have a prototype scheme.

00:28:36.020 --> 00:28:38.610
By default,
the content items in the cue are

00:28:38.610 --> 00:28:41.460
going to be the on-demand scheme,
and for the add content,

00:28:41.500 --> 00:28:42.820
the advertisement scheme.

00:28:42.820 --> 00:28:46.400
The scheme modifies the
Siri dialog when a user asks to

00:28:46.400 --> 00:28:47.850
move to the next content item.

00:28:47.850 --> 00:28:52.160
Siri may then reply that skipping
advertisements is not permitted.

00:28:52.160 --> 00:28:56.100
The scheme also defaults all
navigation commands to be disabled,

00:28:56.100 --> 00:28:58.900
though you can selectively
enable them again.

00:28:59.800 --> 00:29:02.260
An example of enabling
commands is also provided here,

00:29:02.260 --> 00:29:05.380
where the dislike and
like track commands,

00:29:05.510 --> 00:29:07.980
normally disabled by default,
are being enabled for

00:29:07.980 --> 00:29:09.380
your on-demand content.

00:29:09.380 --> 00:29:12.550
You can see how with a small
set of control definitions

00:29:12.600 --> 00:29:15.970
linked to items in your cue,
you can substantially customize

00:29:16.060 --> 00:29:17.620
interactions with your content.

00:29:17.620 --> 00:29:21.710
Finally, the control definitions also
allow specifying options

00:29:21.710 --> 00:29:24.860
for user activity reporting,
which is how your service

00:29:24.860 --> 00:29:28.340
receives optional command events,
navigation information, and play status,

00:29:28.340 --> 00:29:30.340
and play status of your content.

00:29:30.340 --> 00:29:34.020
These are all topics
I'm about to cover next.

00:29:34.770 --> 00:29:36.920
So far,
we've seen how a HomePod reaches out

00:29:36.920 --> 00:29:41.500
to your service to resolve intents
and manage a queue of content to play.

00:29:41.640 --> 00:29:44.990
Now, I'll talk about how your service is
made aware of playback events and

00:29:44.990 --> 00:29:49.930
can contextualize requests over time,
starting with how listening activity

00:29:49.970 --> 00:29:54.110
can be reported to your service,
how playback context is

00:29:54.330 --> 00:29:57.830
provided when already playing
any queue from your service,

00:29:57.860 --> 00:30:00.620
and finally,
how your service must respect

00:30:00.710 --> 00:30:02.890
certain playback constraints.

00:30:03.950 --> 00:30:06.630
So let's start with reporting.

00:30:06.660 --> 00:30:10.170
Listener activity is reported using
the Media Queue Update Activity

00:30:10.170 --> 00:30:13.200
Endpoint in the Cloud Extension API.

00:30:13.270 --> 00:30:16.990
This endpoint is technically optional,
but most services implement it

00:30:17.060 --> 00:30:20.780
to get status reports from the
HomePod as people listen to content.

00:30:20.850 --> 00:30:24.180
Your service receives reports
for transitions and media

00:30:24.180 --> 00:30:28.190
control events such as skips,
pausing, continuing playback,

00:30:28.190 --> 00:30:29.920
and scrubbing in a track.

00:30:30.000 --> 00:30:32.220
Your queue content can be
affected by these reports,

00:30:32.220 --> 00:30:36.500
especially if you've implemented a
partially or fully dynamic queue idiom.

00:30:36.580 --> 00:30:40.440
Your service can even return new
queue segments as a response.

00:30:40.690 --> 00:30:44.190
Since update activity requests
are made asynchronously from

00:30:44.190 --> 00:30:48.430
content retrieval for your queue,
returning a new queue on the report

00:30:48.470 --> 00:30:52.650
of a track skip may not present
your queue content cleanly and might

00:30:52.830 --> 00:30:54.980
fight the normal transition logic.

00:30:55.050 --> 00:30:58.160
Some audible jump in
playback would likely occur.

00:30:58.220 --> 00:31:02.350
Use queue responses from reporting
only to completely change the

00:31:02.620 --> 00:31:04.820
playback or insert new content.

00:31:04.880 --> 00:31:07.920
Use content URL templating
to get more context of why a

00:31:07.920 --> 00:31:09.490
queue segment was retrieved.

00:31:09.500 --> 00:31:13.840
Let's look at an example request
made to the update activity endpoint.

00:31:13.840 --> 00:31:18.020
In this example,
I asked Siri to skip to the next track.

00:31:18.140 --> 00:31:21.340
These simple interactions are
not intents but media controls.

00:31:21.340 --> 00:31:24.070
In JSON, the report looks like this.

00:31:24.080 --> 00:31:27.630
As you can see,
the type of report being made is

00:31:27.940 --> 00:31:32.000
tagged as a "Skip Next." The full
set of reporting types is defined

00:31:32.070 --> 00:31:36.300
in the specification and includes
natural transitions between tracks,

00:31:36.420 --> 00:31:39.210
scrubbing within a track,
and when a new queue

00:31:39.410 --> 00:31:41.120
replaces the existing queue.

00:31:41.300 --> 00:31:45.190
The now playing context is provided,
including the activity, queue,

00:31:45.200 --> 00:31:47.900
and content identifiers,
and an offset into the content

00:31:47.900 --> 00:31:49.440
that has currently been played.

00:31:49.540 --> 00:31:53.650
For transitions, a previously playing
context is also provided.

00:31:53.780 --> 00:31:57.460
It represents the identifiers
associated with the last content

00:31:57.460 --> 00:32:02.000
being played and the offset inside the
content when playback transitioned.

00:32:02.160 --> 00:32:05.190
You might use this to update
your listener's taste profile

00:32:05.350 --> 00:32:06.200
if they skipped quickly.

00:32:06.240 --> 00:32:09.340
But in this case, I listened to a good
portion of that song,

00:32:09.340 --> 00:32:11.700
as you can tell in the
offset in millis value.

00:32:11.700 --> 00:32:14.200
So your service may assume
I probably liked it.

00:32:14.200 --> 00:32:16.940
At least enough not to
lower its relative rating.

00:32:17.200 --> 00:32:19.440
And like other endpoints
in the queue API,

00:32:19.440 --> 00:32:22.430
the user activity object
is presented in full,

00:32:22.440 --> 00:32:26.200
in case the user info data is useful
for your service to recover state

00:32:26.200 --> 00:32:28.070
and quickly process this information.

00:32:28.200 --> 00:32:31.610
There are more advanced capabilities
your service can use as well.

00:32:31.700 --> 00:32:34.410
For example,
you can request playback interval

00:32:34.410 --> 00:32:37.040
reports as content is playing,
to know that a certain

00:32:37.040 --> 00:32:39.820
point has been reached,
or each time a particular

00:32:39.820 --> 00:32:42.100
repeating interval has elapsed.

00:32:42.250 --> 00:32:46.100
You can enable and receive reporting of
certain MP Remote Command Center commands

00:32:46.100 --> 00:32:50.080
when iOS devices control
playback on the HomePod.

00:32:50.210 --> 00:32:54.100
Note that the remote commands for like
track and dislike track are not the same

00:32:54.100 --> 00:32:57.100
as update media affinity intent handling.

00:32:57.200 --> 00:33:00.190
They are not voice intents,
but simple taps from an iOS

00:33:00.190 --> 00:33:02.100
device anywhere in the house.

00:33:02.350 --> 00:33:05.910
While I discussed returning
new queues previously,

00:33:06.000 --> 00:33:08.910
you can also update user activity
objects during playback by returning

00:33:08.970 --> 00:33:11.000
an updated version of the object.

00:33:11.000 --> 00:33:14.440
Here is an example we saw earlier
of custom control schemes which

00:33:14.440 --> 00:33:16.980
include activity definitions.

00:33:17.000 --> 00:33:20.410
The default control includes a play
elapsed interval of 60 seconds,

00:33:20.810 --> 00:33:24.750
which means that a report is generated
every 60 seconds as content items that

00:33:24.750 --> 00:33:27.000
have no control attribute are played.

00:33:27.100 --> 00:33:29.420
But for items with a
control attribute of add,

00:33:29.510 --> 00:33:32.000
as soon as 5 seconds of
the content have elapsed,

00:33:32.000 --> 00:33:34.190
a report is generated,
and then another report is

00:33:34.280 --> 00:33:35.900
generated every 10 seconds.

00:33:35.900 --> 00:33:40.900
There are several limits on reporting
intervals defined in the specification.

00:33:42.540 --> 00:33:45.030
Reporting provides your
service a lot of data,

00:33:45.150 --> 00:33:48.920
but tracking that context in your
service may be expensive as millions

00:33:48.920 --> 00:33:50.700
of listeners process intents.

00:33:50.900 --> 00:33:55.360
A session context can be provided to your
service to help bridge the queue playback

00:33:55.860 --> 00:33:58.260
and intent handling endpoints context.

00:33:58.400 --> 00:34:02.190
The session context is only
available if the HomePod is currently

00:34:02.340 --> 00:34:04.170
playing media from your service.

00:34:04.400 --> 00:34:07.400
When I tell Siri I like a
particular piece of content,

00:34:07.400 --> 00:34:11.400
your intent service endpoint
receives a player context object,

00:34:11.400 --> 00:34:15.270
much like how the "now playing"
object discussed in the reporting

00:34:15.270 --> 00:34:17.200
section is sent on every report.

00:34:17.400 --> 00:34:21.940
Player context includes content, queue,
and user activity persistent

00:34:21.940 --> 00:34:23.370
identifier values.

00:34:23.400 --> 00:34:27.400
These encompass three levels of
definition I have introduced previously:

00:34:27.580 --> 00:34:30.830
the activity persistent identifier,
which defines a potentially

00:34:30.830 --> 00:34:34.110
long-lived listening session,
the queue, which defines the current

00:34:34.230 --> 00:34:37.090
listener's experience,
and the particular content,

00:34:37.110 --> 00:34:40.400
which is now playing at the
time of the intent resolution.

00:34:40.400 --> 00:34:44.510
This item is also carried in
the intent media search object,

00:34:44.510 --> 00:34:47.380
and you may be familiar with
using it on iOS devices already.

00:34:47.400 --> 00:34:51.400
Consider whether session context is
enough information for your service

00:34:51.400 --> 00:34:54.400
to avoid the need of implementing
the update activity endpoint at all,

00:34:54.400 --> 00:34:57.330
and handle more complex reporting events.

00:34:57.530 --> 00:35:01.340
In this example request for update
media affinity intent handling,

00:35:01.580 --> 00:35:04.400
the HomePod was already playing
a queue from your service so

00:35:04.530 --> 00:35:07.400
a player context object is
provided to the intent endpoint.

00:35:07.400 --> 00:35:11.400
Inside the session object,
you will find player context,

00:35:11.500 --> 00:35:14.390
or a null value if your service
is not currently playing.

00:35:16.170 --> 00:35:19.460
If your service's taste profiles
are explicitly driven only by media

00:35:19.460 --> 00:35:22.650
affinity and play media requests,
player context may handle all

00:35:22.650 --> 00:35:25.890
of your requirements without
implementing full reporting.

00:35:26.150 --> 00:35:30.400
But before your service uses taste
profile information from these tools,

00:35:30.500 --> 00:35:34.930
it also must honor constraints
on usage sent with every request.

00:35:35.030 --> 00:35:39.360
In a home, there is a different kind of
contextual awareness your service

00:35:39.360 --> 00:35:40.990
must know about and honor.

00:35:41.700 --> 00:35:44.600
Each HomePod can be configured
with certain options that form

00:35:44.720 --> 00:35:46.160
constraints on your service.

00:35:46.230 --> 00:35:50.620
For example, a HomePod in a child's room
might have an option to exclude

00:35:50.620 --> 00:35:52.790
explicit content from results.

00:35:53.440 --> 00:35:55.700
Whenever a request is
made on this HomePod,

00:35:55.700 --> 00:35:58.100
it should not return explicit content.

00:35:58.340 --> 00:36:01.470
But a request to a HomePod in a
bedroom that does not have this

00:36:01.470 --> 00:36:04.740
setting enabled should be allowed
to return explicit content.

00:36:06.000 --> 00:39:20.500
[Transcript missing]