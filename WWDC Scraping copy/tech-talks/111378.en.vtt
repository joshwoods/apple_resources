WEBVTT

00:00:00.634 --> 00:00:02.469
Eric Kinnear: Hi,
my name is Eric

00:00:02.469 --> 00:00:04.705
from the Internet Technologies
team.

00:00:04.705 --> 00:00:07.207
Today, we'll cover
how your app can adapt

00:00:07.207 --> 00:00:09.710
to changing network conditions.

00:00:09.710 --> 00:00:12.779
We'll dive right in by looking
at different types of networks

00:00:12.779 --> 00:00:15.015
and their unique properties.

00:00:15.015 --> 00:00:18.452
We'll cover how to use APIs
available on Apple platforms

00:00:18.452 --> 00:00:21.555
to describe your networking
needs to the system.

00:00:21.555 --> 00:00:24.591
When things don't work right
away, we'll explore how your app

00:00:24.591 --> 00:00:27.728
can know when to try
connecting again.

00:00:27.728 --> 00:00:29.897
And finally,
we'll dig into testing

00:00:29.897 --> 00:00:31.999
under a variety
of network conditions

00:00:31.999 --> 00:00:33.734
to make sure that everyone
using your app

00:00:33.734 --> 00:00:36.670
has the best experience
possible.

00:00:36.670 --> 00:00:39.573
Let's start by talking
about networks.

00:00:39.573 --> 00:00:42.109
Apple devices often have
multiple ways to connect

00:00:42.109 --> 00:00:46.914
to a network, for example,
cellular networks or Wi-Fi.

00:00:46.914 --> 00:00:49.349
If the device just has
a cellular connection,

00:00:49.349 --> 00:00:52.786
internet traffic can, of course,
use that interface.

00:00:52.786 --> 00:00:54.855
Once the device joins
a Wi-Fi network,

00:00:54.855 --> 00:00:56.590
you might be tempted to think
that Internet traffic

00:00:56.590 --> 00:00:59.159
will just use that interface
instead.

00:00:59.159 --> 00:01:00.661
However, now the device has

00:01:00.661 --> 00:01:04.298
at least two different
interfaces it can use.

00:01:04.298 --> 00:01:06.433
Some protocols and apps
can use either,

00:01:06.433 --> 00:01:10.404
or even both of these interfaces
at the same time.

00:01:10.404 --> 00:01:13.373
Existing connections may see
a better route notification,

00:01:13.373 --> 00:01:14.775
indicating that they
should consider

00:01:14.775 --> 00:01:18.478
using a new connection
for subsequent communication.

00:01:18.478 --> 00:01:21.481
For example, apps can use
multipath technologies

00:01:21.481 --> 00:01:24.851
such as multipath TCP and QUIC
to create connections

00:01:24.851 --> 00:01:28.121
that seamlessly migrate
between cellular and Wi-Fi

00:01:28.121 --> 00:01:30.857
if connectivity is lost.

00:01:30.857 --> 00:01:33.493
Apps can also use 5G networks
instead of Wi-Fi

00:01:33.493 --> 00:01:37.064
when conditions would
make it a better experience.

00:01:37.064 --> 00:01:38.532
Networks have
different properties.

00:01:38.532 --> 00:01:41.835
making them suitable
for different types of use.

00:01:41.835 --> 00:01:43.603
For example,
some cellular networks

00:01:43.603 --> 00:01:46.840
may be expensive to use,
with metered data plans,

00:01:46.840 --> 00:01:49.476
while others may be unlimited.

00:01:49.476 --> 00:01:51.812
Some Wi-Fi networks, similarly,
should not be used

00:01:51.812 --> 00:01:56.016
for bulk data, like when
connected to Personal Hotspot.

00:01:56.016 --> 00:01:58.852
Someone may have put their
connection into Low Data mode,

00:01:58.852 --> 00:02:01.822
a signal that they
want to limit their data use.

00:02:01.822 --> 00:02:04.658
Other network resources may only
be available after the system

00:02:04.658 --> 00:02:08.962
does work to bring up
another interface, like VPN.

00:02:08.962 --> 00:02:11.665
iPhone or iPad might even have
an Ethernet connection

00:02:11.665 --> 00:02:14.735
available to apps as well.

00:02:14.735 --> 00:02:17.104
These are just a few examples
of the many different types

00:02:17.104 --> 00:02:21.375
of connectivity that may
be available to a device.

00:02:21.375 --> 00:02:24.011
Fortunately, your app
does not need to account for all

00:02:24.011 --> 00:02:29.016
of these different combinations
to create the best experience.

00:02:29.016 --> 00:02:32.152
Apple platforms intelligently
select the best interface

00:02:32.152 --> 00:02:34.821
for your app's connections.

00:02:34.821 --> 00:02:37.357
To get the most out of this,
you just need to describe

00:02:37.357 --> 00:02:40.627
your app's networking needs
to the system.

00:02:40.627 --> 00:02:44.164
Let's explore how to do that.

00:02:44.164 --> 00:02:46.700
The best way to account
for all of these network types

00:02:46.700 --> 00:02:49.136
is to reason about
the properties of the network,

00:02:49.136 --> 00:02:52.372
rather than the type
of the network.

00:02:52.372 --> 00:02:54.674
This lets the system select
the best interface

00:02:54.674 --> 00:03:00.013
in any of these combinations
for your app's connection.

00:03:00.013 --> 00:03:01.581
There are two properties
of a network

00:03:01.581 --> 00:03:05.018
that you can use to declare
your networking needs.

00:03:05.018 --> 00:03:07.721
Using just these two properties,
your app can respect

00:03:07.721 --> 00:03:09.856
user preferences
for how they want apps

00:03:09.856 --> 00:03:11.925
to use available networks.

00:03:11.925 --> 00:03:14.895
Constrained networks arise
when someone has requested

00:03:14.895 --> 00:03:18.465
that apps use less data
by enabling Low Data mode

00:03:18.465 --> 00:03:22.302
and is automatically enabled
for Personal Hotspot.

00:03:22.302 --> 00:03:24.771
Use
allowsConstrainedNetworkAccess

00:03:24.771 --> 00:03:29.109
on URLSessionConfiguration,
and prohibitsConstrainedPaths

00:03:29.109 --> 00:03:31.378
when using network framework
to determine whether

00:03:31.378 --> 00:03:34.448
a connection should proceed
on a constrained network.

00:03:34.448 --> 00:03:38.018
In general, apps should limit
transfers to small payloads and

00:03:38.018 --> 00:03:41.721
only perform tasks that enable
the user's explicit actions

00:03:41.721 --> 00:03:43.990
when on a constrained network.

00:03:43.990 --> 00:03:45.926
Bulk transfers
and background prefetching

00:03:45.926 --> 00:03:49.262
should not be performed
on constrained networks.

00:03:49.262 --> 00:03:52.532
Networks can also be
expensive to use.

00:03:52.532 --> 00:03:54.434
Similar logic applies here.

00:03:54.434 --> 00:03:59.106
These networks should only
be used for user-initiated work.

00:03:59.106 --> 00:04:02.209
Similar APIs in URLSession
and NetworkFramework

00:04:02.209 --> 00:04:05.645
let you allow or prohibit
using these networks.

00:04:05.645 --> 00:04:07.380
Consider using similar logic

00:04:07.380 --> 00:04:11.718
for both constrained
and expensive networks.

00:04:11.718 --> 00:04:13.587
Now that you've described
the kind of network

00:04:13.587 --> 00:04:16.356
your connection should use
based on its properties,

00:04:16.356 --> 00:04:19.559
you should just try to connect
right away.

00:04:19.559 --> 00:04:21.261
You may be tempted to check
whether the device

00:04:21.261 --> 00:04:24.030
is on Wi-Fi
or has access to VPN

00:04:24.030 --> 00:04:27.934
before you make your connection,
but that should be avoided.

00:04:27.934 --> 00:04:30.737
Network conditions change
frequently, and these changes

00:04:30.737 --> 00:04:33.940
can even be triggered
by your app's requests.

00:04:33.940 --> 00:04:36.877
That means that pre-flight
checks are often incorrect

00:04:36.877 --> 00:04:40.280
and can lead to unintended
behavior in your app.

00:04:40.280 --> 00:04:43.683
In fact, pre-flight checks
with SCNetworkReachability

00:04:43.683 --> 00:04:47.187
are deprecated in iOS 17.4.

00:04:47.187 --> 00:04:49.956
Instead, try to connect.

00:04:49.956 --> 00:04:52.559
If the system can't immediately
fulfill the request

00:04:52.559 --> 00:04:54.794
due to current
network conditions,

00:04:54.794 --> 00:04:58.398
using waitsForConnectivity
on your URLSessionConfiguration

00:04:58.398 --> 00:05:01.001
or the waiting state
on your NW connection

00:05:01.001 --> 00:05:03.870
means it will notify you that
your task is waiting,

00:05:03.870 --> 00:05:06.039
and the system will
automatically retry the request

00:05:06.039 --> 00:05:09.409
when conditions change.

00:05:09.409 --> 00:05:12.379
Because the system can wait
for connectivity automatically,

00:05:12.379 --> 00:05:16.883
this makes it really easy to
know when to try requests again.

00:05:16.883 --> 00:05:20.153
Let's explore what to do
in this situation.

00:05:20.153 --> 00:05:22.689
If the system can't immediately
start a network request

00:05:22.689 --> 00:05:24.858
when using waitsForConnectivity,

00:05:24.858 --> 00:05:27.527
the request will be placed
in a waiting state,

00:05:27.527 --> 00:05:29.629
and the app will be notified
through its urlSession

00:05:29.629 --> 00:05:34.201
task delegate that the task
is waiting for connectivity.

00:05:34.201 --> 00:05:37.070
In this case, you don't have
to retry the request again

00:05:37.070 --> 00:05:38.638
when connectivity changes.

00:05:38.638 --> 00:05:41.575
The system does it
automatically.

00:05:41.575 --> 00:05:43.877
When a task
is waiting for connectivity,

00:05:43.877 --> 00:05:46.146
consider communicating
the reason to help the user

00:05:46.146 --> 00:05:49.482
understand and take
any necessary actions,

00:05:49.482 --> 00:05:53.720
and provide a way for people
to continue using your app.

00:05:53.720 --> 00:05:56.590
In this example, the app's data
will sync automatically

00:05:56.590 --> 00:06:00.427
when the device has connectivity
to a nonconstrained network.

00:06:00.427 --> 00:06:04.164
However, tapping Sync Now
will relax this constraint

00:06:04.164 --> 00:06:07.867
and perform a sync
on their constrained network.

00:06:07.867 --> 00:06:09.736
When communicating
network conditions,

00:06:09.736 --> 00:06:12.405
use alerts sparingly.

00:06:12.405 --> 00:06:14.874
Alerts communicate
important information,

00:06:14.874 --> 00:06:17.377
but they can be
disruptive and confusing

00:06:17.377 --> 00:06:21.047
since network conditions are
often out of someone's control.

00:06:21.047 --> 00:06:23.750
Instead,
offer information and options

00:06:23.750 --> 00:06:28.288
in line with clear
and easy ways to proceed.

00:06:28.288 --> 00:06:31.324
Finally,
let's talk about testing.

00:06:31.324 --> 00:06:33.860
People will experience a variety
of different network conditions

00:06:33.860 --> 00:06:35.562
when using your app,

00:06:35.562 --> 00:06:40.233
so testing many different
conditions is essential.

00:06:40.233 --> 00:06:43.136
You can simulate different
network conditions with Xcode

00:06:43.136 --> 00:06:46.773
right in the Devices
and Simulators window.

00:06:46.773 --> 00:06:49.943
For example, you can select
the network link condition

00:06:49.943 --> 00:06:52.545
and LTE profile,
which will simulate

00:06:52.545 --> 00:06:56.283
a typical LTE network
in average conditions.

00:06:56.283 --> 00:06:58.285
You can then test workflows
in your app

00:06:58.285 --> 00:07:02.088
to make sure everything
is smooth and fluid.

00:07:02.088 --> 00:07:04.858
To test your app on an iPhone
or iPad, you can use

00:07:04.858 --> 00:07:08.695
the Network Link Conditioner
in Developer Settings.

00:07:08.695 --> 00:07:12.732
Here you can simulate the same
network conditions as in Xcode.

00:07:12.732 --> 00:07:15.335
And you can use Network Override
to simulate changes

00:07:15.335 --> 00:07:18.705
of the device's
network properties.

00:07:18.705 --> 00:07:21.474
Well, you can always use
the settings for each interface

00:07:21.474 --> 00:07:23.476
to enable Low Data mode.

00:07:23.476 --> 00:07:25.345
Here you can set
whether the cellular

00:07:25.345 --> 00:07:27.714
and the Wi-Fi interfaces
on the system

00:07:27.714 --> 00:07:31.251
are considered
expensive or inexpensive.

00:07:31.251 --> 00:07:34.054
You can also configure the
system to prefer a 5G network

00:07:34.054 --> 00:07:37.524
over poor or insecure Wi-Fi.

00:07:37.524 --> 00:07:38.992
This allows you
to find situations

00:07:38.992 --> 00:07:41.261
where legacy networking code
might not be able

00:07:41.261 --> 00:07:44.531
to take advantage
of better connectivity.

00:07:44.531 --> 00:07:46.866
The good news is,
as long as the app follows

00:07:46.866 --> 00:07:48.935
the best practices
we just covered,

00:07:48.935 --> 00:07:50.337
and is describing its needs

00:07:50.337 --> 00:07:52.372
to Network Framework
and urlSession,

00:07:52.372 --> 00:07:55.108
the system will intelligently
select the best interface

00:07:55.108 --> 00:07:58.211
without any extra work.

00:07:58.211 --> 00:08:01.214
Now is a great time to adopt
modern networking practices

00:08:01.214 --> 00:08:06.019
that take advantage of all of
the device's network interfaces.

00:08:06.019 --> 00:08:08.955
To do this, describe your
networking needs to the system

00:08:08.955 --> 00:08:11.257
in terms of properties,
like whether the request

00:08:11.257 --> 00:08:14.394
is suitable for
constrained networks.

00:08:14.394 --> 00:08:17.397
Avoid limiting requests
to specific interfaces,

00:08:17.397 --> 00:08:20.300
like Wi-Fi or cellular.

00:08:20.300 --> 00:08:23.536
Remove pre-flight networking
checks in your app,

00:08:23.536 --> 00:08:26.973
and use waitsForConnectivity
instead of manual retries

00:08:26.973 --> 00:08:29.509
so that your networking
resumes automatically

00:08:29.509 --> 00:08:32.979
when conditions meet
your app's needs.

00:08:32.979 --> 00:08:34.814
You should also ensure
your app is using

00:08:34.814 --> 00:08:39.686
modern and fast protocols,
like HTTP/3 and QUIC.

00:08:39.686 --> 00:08:41.121
To learn more, watch

00:08:41.121 --> 00:08:45.258
"Accelerate Networking
with HTTP/3 and QUIC."

00:08:45.258 --> 00:08:47.360
With this approach,
your app's networking

00:08:47.360 --> 00:08:50.730
will adapt to changing network
conditions automatically,

00:08:50.730 --> 00:08:53.433
and provide
the best experience possible.

00:08:53.433 --> 00:08:55.869
Thanks for watching.