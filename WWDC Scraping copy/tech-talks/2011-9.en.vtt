WEBVTT

00:00:24.260 --> 00:00:28.090
I'm Stefan Lesser,
Technology Evangelist at Apple.

00:00:28.090 --> 00:00:31.740
As a developer, you spend lots of time
with our development tools.

00:00:31.820 --> 00:00:35.400
However, there's a chance that you are
so focused on writing code that

00:00:35.400 --> 00:00:38.300
you haven't tried many of the
advanced features we introduced

00:00:38.350 --> 00:00:40.640
to Xcode in the last few releases.

00:00:40.780 --> 00:00:43.970
And they can make app
development so much easier.

00:00:44.750 --> 00:00:47.490
In this presentation,
I'm going to show you some of the latest

00:00:47.590 --> 00:00:53.270
techniques which make it easier for you
to create state of the art apps for iOS.

00:00:53.650 --> 00:00:56.600
First,
let's make sure your projects are ready

00:00:56.600 --> 00:00:58.910
for using the latest best practices.

00:00:59.330 --> 00:01:02.900
Then I'll cover Storyboarding,
a major new technique to design

00:01:02.900 --> 00:01:06.940
your app's user interface,
giving you a complete overview of your

00:01:06.940 --> 00:01:09.500
application's flow in one single place.

00:01:09.760 --> 00:01:13.030
You will learn about behaviors,
which is a great way to make Xcode

00:01:13.030 --> 00:01:16.090
adapt to your own personal workflow.

00:01:16.160 --> 00:01:18.520
And finally,
I'm going to show you how Xcode

00:01:18.520 --> 00:01:21.960
helps you with setting up your
test devices and how you can use

00:01:22.020 --> 00:01:24.900
archives to distribute your apps.

00:01:24.970 --> 00:01:26.830
So, let's get started.

00:01:26.980 --> 00:01:28.850
Modernizing your project.

00:01:28.850 --> 00:01:30.270
What does that actually mean?

00:01:30.390 --> 00:01:33.770
So you've just downloaded and installed
the latest tools and the latest SDK,

00:01:33.860 --> 00:01:35.360
so you're all set, right?

00:01:35.650 --> 00:01:36.800
Not quite.

00:01:36.870 --> 00:01:39.960
It's not enough to just install
the latest version of the tools.

00:01:40.140 --> 00:01:43.100
You should also ask yourself
some additional questions.

00:01:43.190 --> 00:01:45.400
Are your build settings up to date?

00:01:45.520 --> 00:01:47.300
What's your base SDK?

00:01:47.430 --> 00:01:49.400
What's your deployment target?

00:01:49.550 --> 00:01:51.800
And which compiler do you use?

00:01:51.960 --> 00:01:54.880
Let's see why these
questions are important.

00:01:56.500 --> 00:01:58.920
How can you make sure your build
settings are up to date and you

00:01:58.920 --> 00:02:01.280
use the latest best practices?

00:02:01.390 --> 00:02:05.030
Well, how do you know what the
latest best practices are?

00:02:05.150 --> 00:02:06.850
Xcode knows.

00:02:06.920 --> 00:02:09.800
So when you open a project,
Xcode will automatically check

00:02:09.830 --> 00:02:13.010
your project and build settings
and it will make you aware of

00:02:13.010 --> 00:02:15.210
anything that needs to be updated.

00:02:15.280 --> 00:02:19.580
If Xcode finds any settings
that should be updated,

00:02:19.580 --> 00:02:21.980
this Project Modernization
Workflow sheet comes up.

00:02:22.170 --> 00:02:25.550
You just click Perform Changes
and Xcode will change all these

00:02:25.710 --> 00:02:27.410
settings for you automatically.

00:02:27.680 --> 00:02:31.850
Also, you can deselect any changes you
don't want it to make right now

00:02:31.910 --> 00:02:36.100
and then get back to this sheet
later from the project navigator.

00:02:37.260 --> 00:02:41.050
But really,
if Xcode brings up anything here, fix it.

00:02:41.400 --> 00:02:44.460
This way you make sure your
project confirms to the latest

00:02:44.460 --> 00:02:47.800
SDKs and the latest best practices,
which will save you lots

00:02:47.800 --> 00:02:50.570
of time later and make sure
your project is future proof.

00:02:53.500 --> 00:02:55.600
Then there's the base SDK.

00:02:55.710 --> 00:02:58.710
You should always use the latest SDK.

00:02:58.830 --> 00:03:00.940
Of course,
this is the only way for you to

00:03:00.940 --> 00:03:05.580
leverage new APIs and frameworks
introduced in that version of the SDK.

00:03:05.750 --> 00:03:09.500
But even if you don't use them today,
you will also benefit from bug fixes

00:03:09.610 --> 00:03:13.740
and performance enhancements that we
add to every operating system release.

00:03:13.850 --> 00:03:18.980
So make sure your base SDK setting
always points to the latest SDK.

00:03:19.840 --> 00:03:22.300
And then there's the deployment target.

00:03:22.450 --> 00:03:26.200
This is what you set to support
any previous versions of iOS.

00:03:26.330 --> 00:03:30.370
Set this back to the earliest
version of iOS you want to support.

00:03:31.120 --> 00:03:35.660
Every API which has been introduced as
part of this version you're targeting,

00:03:35.660 --> 00:03:39.550
or APIs from the versions before that,
you can use these without

00:03:39.550 --> 00:03:41.620
any special considerations.

00:03:42.170 --> 00:03:45.930
But when you move this setting down,
you create a gap between the base

00:03:45.930 --> 00:03:48.560
SDK and the deployment target.

00:03:49.620 --> 00:03:53.300
And new APIs introduced in the
versions as part of this gap

00:03:53.460 --> 00:03:55.500
will be dynamically linked.

00:03:55.690 --> 00:03:59.500
Which means you can and
you should use them.

00:03:59.680 --> 00:04:02.580
But whenever you do so,
you must not forget to check for

00:04:02.580 --> 00:04:04.730
their availability at runtime.

00:04:04.930 --> 00:04:08.340
And you should also have a fallback in
place so you can still deliver a great

00:04:08.530 --> 00:04:13.070
experience for all of your users running
the latest and previous versions of iOS.

00:04:16.710 --> 00:04:20.030
Finally, let's talk about the compiler.

00:04:20.250 --> 00:04:25.490
Since Xcode 4.2, GCC is no longer shipped
as part of Xcode.

00:04:27.450 --> 00:04:30.790
The LLVM compiler is the
new default compiler.

00:04:30.940 --> 00:04:35.140
We finished our compiler transition to
LLVM for a couple of important reasons.

00:04:35.240 --> 00:04:40.220
LLVM is designed for speed,
flexibility and modularity.

00:04:40.540 --> 00:04:44.240
It compiles about twice as fast as GCC.

00:04:44.360 --> 00:04:48.200
At the same time it generates
better optimized code.

00:04:48.680 --> 00:04:53.040
And we are using LLVM technology as
the basis for many features in Xcode,

00:04:53.040 --> 00:04:55.950
like Code Completion and Fixit.

00:04:56.510 --> 00:05:00.730
And LLVM enables us to implement
support for new language features,

00:05:00.790 --> 00:05:05.400
which allows us to do amazing things
like automatic reference counting.

00:05:05.400 --> 00:05:08.970
Arc would not have been possible
without LLVM because of the way

00:05:08.970 --> 00:05:11.380
Compiler and Runtime work together.

00:05:11.400 --> 00:05:14.460
Arc might very well be the
feature that has the most

00:05:14.500 --> 00:05:16.590
impact on how you develop apps.

00:05:16.590 --> 00:05:19.390
And this is why we have a
whole session about Arc.

00:05:19.400 --> 00:05:22.340
So make sure you check out
the Arc session as well.

00:05:23.550 --> 00:05:25.400
And back to your compiler settings.

00:05:25.420 --> 00:05:28.570
If you haven't yet done so,
switch to LLVM and make sure

00:05:28.570 --> 00:05:31.420
your project builds with LLVM.

00:05:32.800 --> 00:05:36.140
Okay, so this is how you keep
your project up to date.

00:05:36.210 --> 00:05:39.200
Update your build settings
to the latest best practices.

00:05:39.410 --> 00:05:42.620
Make sure you always
use the latest base SDK.

00:05:42.700 --> 00:05:45.370
Choose your deployment target wisely.

00:05:45.370 --> 00:05:49.270
And switch to LLVM so you can
use great features like Arc.

00:05:52.300 --> 00:05:55.240
Next, let's look at Storyboarding.

00:05:55.360 --> 00:05:57.740
At some point in your
development process,

00:05:57.890 --> 00:06:00.760
preferably early at the beginning,
you need to think about

00:06:00.840 --> 00:06:02.280
your app's design.

00:06:02.540 --> 00:06:04.840
And you need to figure out two things.

00:06:04.900 --> 00:06:08.260
What are the different screens
you want to have in your app?

00:06:08.330 --> 00:06:11.070
And how do you navigate between them?

00:06:11.450 --> 00:06:14.250
So let's say you want to create a
very simple app to keep track of

00:06:14.330 --> 00:06:16.400
a list of things you care about.

00:06:16.440 --> 00:06:19.340
For example, all the great books
you still want to read.

00:06:19.400 --> 00:06:22.400
A simple reading list app.

00:06:22.450 --> 00:06:27.390
So what are the different screens
you want to design for this app?

00:06:28.130 --> 00:06:32.140
Well, first you need the list of things,
in this case the reading list.

00:06:32.220 --> 00:06:34.780
This could be just a simple table view.

00:06:36.560 --> 00:06:40.640
Then when you select a row in that list,
you want to see the details of that item.

00:06:40.780 --> 00:06:42.960
For books,
this would be something like the title,

00:06:43.050 --> 00:06:46.280
the author, maybe some notes,
and maybe a picture of the cover.

00:06:46.390 --> 00:06:49.380
So you need a detail view.

00:06:50.170 --> 00:06:53.790
And then of course, you need a way to add
new items to the list.

00:06:53.910 --> 00:06:58.020
So you put a little plus button on top
of your list and when you tap that,

00:06:58.130 --> 00:07:00.780
you get to another screen
where you can enter all the

00:07:00.780 --> 00:07:02.890
information about that new book.

00:07:04.610 --> 00:07:08.710
Okay, so now you have a rough concept
of your application's flow.

00:07:08.840 --> 00:07:13.460
And once you know which screens you need,
UIKit makes it very easy for you to

00:07:13.460 --> 00:07:15.990
model these with ViewControllers.

00:07:16.380 --> 00:07:19.620
For each screen you create a view
controller and then you configure

00:07:19.620 --> 00:07:22.010
the views in Interface Builder.

00:07:22.010 --> 00:07:25.960
And so you end up with
three view controllers.

00:07:26.900 --> 00:07:29.300
So the screens map nicely
to view controllers,

00:07:29.430 --> 00:07:31.280
but what happens to the transitions?

00:07:31.440 --> 00:07:34.280
What happens to all the arrows
on your UI sketch pointing

00:07:34.280 --> 00:07:35.800
from one screen to another?

00:07:35.840 --> 00:07:39.800
Well, they used to end up all
over the place in your code.

00:07:40.170 --> 00:07:42.920
Whenever you transitioned
to a new screen,

00:07:42.920 --> 00:07:45.800
you wrote code to instantiate
the new view controller,

00:07:46.060 --> 00:07:49.800
prepare the necessary data,
and then transition to it.

00:07:50.010 --> 00:07:53.430
But now with Storyboarding,
we introduce a way for you to model

00:07:53.540 --> 00:07:57.280
these transitions in one single place,
together with the rest

00:07:57.280 --> 00:07:58.790
of your user interface.

00:07:59.760 --> 00:08:01.520
And that's the storyboard.

00:08:01.690 --> 00:08:03.840
This is what it looks like in Xcode.

00:08:03.940 --> 00:08:07.770
It gives you a much better view
over your application's flow.

00:08:07.790 --> 00:08:11.600
And you can see all your app's
view controllers on one big canvas.

00:08:11.620 --> 00:08:15.190
And you can now define the
transitions between them right

00:08:15.190 --> 00:08:17.320
in Interface Builder as well.

00:08:18.760 --> 00:08:22.630
So let's take our reading list idea
and see how easy it is to turn that

00:08:22.660 --> 00:08:25.160
into an app with Storyboarding.

00:08:27.850 --> 00:08:31.890
The first thing you need to do
is to create the storyboard.

00:08:32.030 --> 00:08:35.880
And this means you need to lay
out the view controllers and in

00:08:36.200 --> 00:08:38.300
storyboards we call them scenes.

00:08:38.380 --> 00:08:41.200
And then you need to define the
transitions and relationships

00:08:41.270 --> 00:08:42.870
between different scenes.

00:08:42.870 --> 00:08:45.360
And these are called segways.

00:08:45.460 --> 00:08:47.370
So let's do this.

00:08:48.190 --> 00:08:53.600
When you create a new project in Xcode,
make sure "Use Storyboards" is selected.

00:08:54.120 --> 00:08:57.170
This will create a storyboard file
in your project and it sets it as

00:08:57.190 --> 00:08:59.000
the main storyboard for your app.

00:09:01.480 --> 00:09:04.580
And when you open that storyboard,
you see this giant blank canvas

00:09:04.690 --> 00:09:07.150
where you can put all your scenes.

00:09:07.480 --> 00:09:11.850
To create a new scene in the storyboard,
just drag any view controller

00:09:11.850 --> 00:09:14.180
from the library to the canvas.

00:09:14.910 --> 00:09:17.710
You can put scenes wherever
you want on the canvas and you

00:09:17.720 --> 00:09:19.980
can rearrange them as you like.

00:09:22.730 --> 00:09:25.100
Now, what are scenes?

00:09:25.190 --> 00:09:28.040
Scenes are just view
controllers in a storyboard.

00:09:28.100 --> 00:09:30.940
And they work exactly like you
are used to from working with

00:09:30.940 --> 00:09:33.200
Nib files in Interface Builder.

00:09:33.270 --> 00:09:35.790
Just drag views over
from the object library.

00:09:35.790 --> 00:09:38.560
You can move them, resize them,
edit them.

00:09:38.600 --> 00:09:41.380
Everything works just as it did before.

00:09:41.720 --> 00:09:45.100
And now that you can have multiple
scenes in the same storyboard,

00:09:45.160 --> 00:09:48.620
one of these scenes will
be the initial scene.

00:09:48.620 --> 00:09:52.920
And this will be the one that will
be displayed right after app launch.

00:09:54.470 --> 00:09:58.960
Below each view controller on the canvas,
you will see the dock.

00:09:59.060 --> 00:10:02.330
The dock gives you access to any
top level objects for this scene

00:10:02.470 --> 00:10:05.280
and you can use this to wire up
outlets to the view controller,

00:10:05.280 --> 00:10:08.510
for example,
and you can also put any other

00:10:08.520 --> 00:10:11.090
top level objects in here as well.

00:10:11.850 --> 00:10:12.680
And that's it.

00:10:12.720 --> 00:10:16.040
That's how you create a
storyboard and layout your scenes.

00:10:16.090 --> 00:10:19.280
So now let's define the
transitions between them.

00:10:21.200 --> 00:10:24.100
And for this we have Segways.

00:10:24.160 --> 00:10:27.590
A Segway represents a connection
between two view controllers,

00:10:27.710 --> 00:10:31.590
a source view controller and
a destination view controller.

00:10:34.890 --> 00:10:37.500
The great thing about
Segways is at runtime,

00:10:37.550 --> 00:10:40.810
they take care of a couple of
things for you automatically.

00:10:41.510 --> 00:10:45.160
They instantiate the destination
view controller for you and

00:10:45.170 --> 00:10:47.510
they initiate the transition.

00:10:47.510 --> 00:10:49.470
So you no longer have to
write this code yourself.

00:10:49.720 --> 00:10:52.910
You just define a Segway
in the Storyboard.

00:10:54.230 --> 00:10:57.100
And segues come in different styles.

00:10:57.240 --> 00:11:00.520
There's a push segue if you want to
use a push transition with navigation

00:11:00.540 --> 00:11:05.810
controllers or a modal segue for
bringing up a modal view controller.

00:11:06.450 --> 00:11:09.420
Now,
push and modal segues work for iPhone

00:11:09.500 --> 00:11:11.920
as well as iPad user interfaces.

00:11:12.020 --> 00:11:16.810
And if you're building an iPad UI,
you can also have popover segues for

00:11:17.190 --> 00:11:22.620
use with popovers and a replace segue,
for example, to switch the detail pane

00:11:22.760 --> 00:11:24.600
in a split view controller.

00:11:25.460 --> 00:11:28.590
If you want to come up with your
own visual transition style,

00:11:28.660 --> 00:11:33.070
you can also create custom segues
and create your own transition.

00:11:33.330 --> 00:11:35.760
And finally,
there's a relationship segue,

00:11:35.960 --> 00:11:37.180
which isn't really a transition.

00:11:37.340 --> 00:11:40.660
It just defines a relationship
between two view controllers,

00:11:41.000 --> 00:11:43.560
like the relationship between
the navigation controller

00:11:43.560 --> 00:11:45.200
and its root view controller.

00:11:45.200 --> 00:11:49.950
So let's build the storyboard
for the Reading List app.

00:11:53.330 --> 00:11:55.780
Let's say you already prepared
the two scenes for the

00:11:55.780 --> 00:11:59.530
Reading List View Controller and
the Book Details View Controller.

00:11:59.670 --> 00:12:04.320
A good way to navigate between them
is by using a Navigation Controller.

00:12:04.580 --> 00:12:09.500
So whenever a user taps a table cell,
the details for that book come up.

00:12:09.520 --> 00:12:12.740
And he can go back to the list
by tapping the back button.

00:12:13.430 --> 00:12:17.070
To model this, you first embed the
Reading List View Controller in

00:12:17.070 --> 00:12:19.060
a Navigation View Controller.

00:12:19.230 --> 00:12:23.140
And there's an "Embed in Navigation
Controller" action in the editor menu.

00:12:23.340 --> 00:12:26.300
And if you do that,
two things will happen.

00:12:26.330 --> 00:12:29.940
First, the Navigation Controller shows up
as a separate scene connected to the

00:12:29.940 --> 00:12:33.060
Reading List View Controller with
a relationship segue.

00:12:33.260 --> 00:12:35.440
Because the
Reading List View Controller is

00:12:35.440 --> 00:12:37.040
the Root View Controller.

00:12:37.410 --> 00:12:40.290
And second,
the Reading List View Controller now

00:12:40.290 --> 00:12:44.480
also gets a navigation bar where you can
set a title and add the plus button to

00:12:44.480 --> 00:12:47.400
bring up the Add View Controller later.

00:12:48.040 --> 00:12:50.800
Now you create a transition from
the Reading List View Controller to

00:12:50.910 --> 00:12:55.170
the Book Details View Controller by
control dragging from the table

00:12:55.170 --> 00:12:59.990
view cell in the source scene to
anywhere in the destination scene.

00:13:00.520 --> 00:13:02.870
And then you choose the type
of Segway you want to create.

00:13:02.970 --> 00:13:05.400
In this case,
you want to create a push Segway.

00:13:05.400 --> 00:13:08.090
And then you're almost done.

00:13:09.940 --> 00:13:12.800
The push segway shows up as an arrow.

00:13:12.810 --> 00:13:16.870
And the Book Details View Controller now
gets a navigation bar as well.

00:13:17.550 --> 00:13:19.800
There's one more thing
you want to do now.

00:13:19.960 --> 00:13:22.800
Segways are selectable
objects in Interface Builder

00:13:22.840 --> 00:13:25.200
and they have attributes.

00:13:25.270 --> 00:13:29.550
So if you select the push
segue by just clicking on it,

00:13:30.210 --> 00:13:33.880
You can set an identifier for this
Segway in the attribute inspector.

00:13:34.250 --> 00:13:37.980
And you want to give that
Segway a name so you can refer

00:13:37.980 --> 00:13:39.680
to it later on in your code.

00:13:41.260 --> 00:13:44.600
And that's all you need to do for
the Book Details View Controller.

00:13:44.660 --> 00:13:48.970
And you repeat almost the same steps
for the Add Book View Controller.

00:13:49.110 --> 00:13:51.370
Again,
embed the Add Book View Controller in

00:13:51.370 --> 00:13:53.240
a Navigation Controller.

00:13:53.300 --> 00:13:55.840
Although you don't really need the
Navigation Controller just yet,

00:13:55.890 --> 00:13:59.880
you probably want to add things like
a genre selection menu later on.

00:13:59.950 --> 00:14:03.110
And for this,
a Navigation Controller is quite useful.

00:14:03.320 --> 00:14:06.690
Also, this gives you an easy way
to add the Done and Cancel

00:14:06.690 --> 00:14:09.100
buttons to the Navigation Bar.

00:14:10.280 --> 00:14:14.370
And finally, wire up another Segway,
this time from the Add button in

00:14:14.370 --> 00:14:18.540
the reading list to the navigation
controller you just created.

00:14:18.630 --> 00:14:22.850
And this time you use a modal Segway
to bring up the AdBook user interface

00:14:22.990 --> 00:14:25.960
modally on top of the reading list.

00:14:26.050 --> 00:14:30.290
And don't forget to give that
Segway an identifier as well.

00:14:30.390 --> 00:14:34.960
And this is your application's flow,
all in one place in just one storyboard.

00:14:37.430 --> 00:14:40.300
So your user interface is
all wired up and ready to go.

00:14:40.300 --> 00:14:44.180
The next step is to
implement your data model.

00:14:44.360 --> 00:14:49.440
You can use simple data model objects or
managed objects from a core data backend.

00:14:49.440 --> 00:14:52.050
But we won't look at these things in
this video as this is out of scope

00:14:52.110 --> 00:14:54.970
for storyboarding and I'm pretty sure
you already know how this works and

00:14:54.970 --> 00:14:56.920
it doesn't change for storyboarding.

00:14:58.550 --> 00:15:01.330
So make sure you have your
model objects in place,

00:15:01.330 --> 00:15:04.380
some sample data to test with,
and you implemented the table

00:15:04.380 --> 00:15:07.570
view data source for the reading
list view controller so that it

00:15:07.640 --> 00:15:09.880
actually displays some books.

00:15:10.030 --> 00:15:15.310
And then you're ready to look into how
you can pass data from one scene to

00:15:15.970 --> 00:15:18.270
another and how to get results back.

00:15:20.400 --> 00:15:24.370
You need to pass data from the
reading list to the Book Details view.

00:15:24.520 --> 00:15:27.780
Because the Book Details view
controller needs to know which

00:15:27.950 --> 00:15:30.090
book details it should display.

00:15:30.400 --> 00:15:33.340
At this point, the view controller
transition already works.

00:15:33.480 --> 00:15:36.780
You just need to prepare
and send over the data.

00:15:38.850 --> 00:15:42.640
To do this, we introduce a new API on
UI View Controller,

00:15:42.700 --> 00:15:45.510
which is Prepare for Segway.

00:15:46.500 --> 00:15:49.900
This method gets called
whenever a Segway is initiated.

00:15:50.010 --> 00:15:53.690
And this is the central place in
your UI view controller subclass

00:15:53.690 --> 00:15:56.080
to prepare for the transition.

00:15:56.210 --> 00:16:01.020
All you need to do is to override prepare
for Segway on the source view controller.

00:16:01.210 --> 00:16:04.170
First, you check for which
Segway has been initiated,

00:16:04.280 --> 00:16:07.430
as you can easily have more than
one Segway starting from the

00:16:07.490 --> 00:16:09.310
same source view controller.

00:16:09.710 --> 00:16:13.980
To identify which Segway it is,
check for the identifier you

00:16:13.980 --> 00:16:15.740
set up in Interface Builder.

00:16:16.430 --> 00:16:19.960
And you should always do this,
even if you only have one Segway today,

00:16:19.960 --> 00:16:23.000
because this is just how you
can future-proof your code.

00:16:23.140 --> 00:16:27.110
In this case,
you check for the Show Details Segway.

00:16:29.050 --> 00:16:32.320
And then you prepare the data for
the Destination View Controller.

00:16:32.440 --> 00:16:36.430
You get access to the Destination
View Controller through a property

00:16:36.430 --> 00:16:39.000
on the UIStoryboardSegway object.

00:16:39.210 --> 00:16:41.880
In this case,
the Destination View Controller is

00:16:41.880 --> 00:16:43.780
the BookDetailsViewController.

00:16:44.090 --> 00:16:46.330
And now you can just set
the Book property on the

00:16:46.330 --> 00:16:50.900
Book Details View Controller to the book
that has been selected in the table view.

00:16:50.980 --> 00:16:54.360
And that's how you pass
data over to another scene.

00:16:55.700 --> 00:16:58.900
But how can you get results back?

00:16:59.030 --> 00:17:01.070
You might not need this
for the book details,

00:17:01.120 --> 00:17:04.240
but you need this when you
want to add a new book.

00:17:04.360 --> 00:17:09.420
If the user taps the plus button and
the add book UI slides up modally,

00:17:09.440 --> 00:17:11.980
you want to know if the
user taps done or cancel.

00:17:12.040 --> 00:17:15.420
And if he taps done,
the data about the new book he just

00:17:15.450 --> 00:17:19.760
entered needs to get back somehow
so it can be added to the list.

00:17:19.850 --> 00:17:23.820
And finally, the modal view controller
can be dismissed.

00:17:24.360 --> 00:17:27.300
For this,
we use a very common pattern in Cocoa,

00:17:27.310 --> 00:17:29.480
which is delegation.

00:17:30.520 --> 00:17:33.760
Let's see what do you need to
implement a proper delegation pattern.

00:17:33.760 --> 00:17:38.730
First of all, you need a host object,
which provides a way for

00:17:38.730 --> 00:17:40.400
delegates to register.

00:17:40.590 --> 00:17:42.560
That's usually a simple
delegate property.

00:17:42.560 --> 00:17:47.350
It also defines the delegation protocol,
and it needs to make sure

00:17:47.430 --> 00:17:51.190
that it actually calls the
methods on the delegate.

00:17:51.390 --> 00:17:54.610
And of course you also
need a delegate object.

00:17:54.770 --> 00:17:58.800
The delegate registers itself
with the host object and it

00:17:58.800 --> 00:18:01.280
implements the delegation protocol.

00:18:01.830 --> 00:18:05.280
So to get data back,
the source view controller will

00:18:05.280 --> 00:18:08.920
be the delegate here waiting for
the destination view controller,

00:18:08.920 --> 00:18:12.580
which is the host object,
to call back with the data.

00:18:12.660 --> 00:18:14.650
So let's implement that.

00:18:16.090 --> 00:18:18.590
So we start with the same
prepare for segue method in the

00:18:18.590 --> 00:18:22.030
Reading List View Controller,
because that's again the source view

00:18:22.030 --> 00:18:23.960
controller for the second segue.

00:18:24.060 --> 00:18:27.850
But this time,
look for the other segue's identifier,

00:18:27.860 --> 00:18:29.430
@Book in this case.

00:18:31.750 --> 00:18:35.400
The source view controller doesn't have
to pass any data model object here,

00:18:35.470 --> 00:18:38.030
but it passes itself as delegate.

00:18:38.390 --> 00:18:40.870
This works pretty much the same
by just setting a property on

00:18:40.870 --> 00:18:42.380
the destination view controller.

00:18:42.470 --> 00:18:46.290
However, there's one thing you
need to be careful about.

00:18:46.780 --> 00:18:50.490
Remember, in the storyboard you embedded
the @Book View Controller in

00:18:50.490 --> 00:18:52.140
a Navigation Controller.

00:18:52.240 --> 00:18:56.340
So the destination View Controller here
is the Navigation Controller.

00:18:56.470 --> 00:18:58.880
What you really want is the
top View Controller from

00:18:58.880 --> 00:19:03.400
that Navigation Controller,
which is the @Book View Controller.

00:19:03.670 --> 00:19:04.430
And that's step one.

00:19:04.660 --> 00:19:07.820
The source view controller is
now registered as a delegate with

00:19:07.820 --> 00:19:09.100
the destination view controller.

00:19:13.050 --> 00:19:15.850
Of course, for this to work,
the destination view controller

00:19:16.090 --> 00:19:18.000
needs to accept the delegate.

00:19:18.160 --> 00:19:21.190
So it needs to provide
a property for that.

00:19:21.380 --> 00:19:24.720
Note that to avoid retain cycles,
delegate properties are usually

00:19:24.720 --> 00:19:28.090
implemented as weak properties
or assigned properties

00:19:28.110 --> 00:19:31.660
if you don't use Arc yet,
which you should by the way.

00:19:34.750 --> 00:19:38.500
Also, you need the delegation protocol,
which can be very straightforward here.

00:19:38.500 --> 00:19:43.150
You just need to consider two cases.

00:19:43.500 --> 00:19:47.020
The user actually did create a new book,
and which book that is,

00:19:47.020 --> 00:19:49.900
which is the key method
to get the data back,

00:19:49.920 --> 00:19:52.610
or the user just canceled the action.

00:19:53.700 --> 00:19:57.620
And then you need to make sure that the
host object actually calls the delegate.

00:19:57.620 --> 00:20:01.700
When setting up your storyboard,
you wired up actions to the

00:20:01.700 --> 00:20:04.190
Done and Cancel buttons in
the Ad Book View Controller.

00:20:05.420 --> 00:20:09.580
The Done action creates the new book in
the data model and calls the delegate,

00:20:09.860 --> 00:20:12.780
passing the new book back as a parameter.

00:20:12.900 --> 00:20:16.460
The Cancel action doesn't need to do
anything other than just telling the

00:20:16.460 --> 00:20:18.410
delegate that the user cancelled.

00:20:19.640 --> 00:20:22.730
Finally, the delegate needs to
implement the protocol and

00:20:22.730 --> 00:20:24.940
react on the delegate methods.

00:20:24.960 --> 00:20:29.380
If the user wants to create a new book,
so the @BookViewControllerDid@Book

00:20:29.470 --> 00:20:32.580
method gets called,
the delegate adds it to

00:20:32.750 --> 00:20:35.840
the list in the data model,
updates the table view,

00:20:35.850 --> 00:20:39.880
and dismisses the modal view controller.

00:20:39.940 --> 00:20:42.630
If the user canceled,
it just needs to dismiss

00:20:42.630 --> 00:20:44.390
the modal view controller.

00:20:47.300 --> 00:20:51.000
And that's how you pass data
back and forth between scenes.

00:20:51.110 --> 00:20:55.080
Now, for this example,
you created a new project from scratch.

00:20:55.190 --> 00:20:57.680
You probably want to know how
you can use storyboards in

00:20:57.680 --> 00:21:00.310
your existing projects as well.

00:21:02.490 --> 00:21:05.020
If you want to migrate an
existing app to storyboards,

00:21:05.210 --> 00:21:07.590
there are two strategies.

00:21:07.710 --> 00:21:10.920
The first strategy is
wholesale conversion.

00:21:11.250 --> 00:21:15.710
To do this, you start with adding a
storyboard file to your project.

00:21:16.500 --> 00:21:20.330
And then you rebuild the whole
user interface in that storyboard.

00:21:20.370 --> 00:21:23.530
Which isn't as crazy as it sounds,
because this will also remove

00:21:23.590 --> 00:21:25.280
lots of code from your project.

00:21:25.410 --> 00:21:29.610
All the view controller instantiation
code and all the code for transitioning

00:21:29.630 --> 00:21:33.990
to another scene can be removed
once it's part of the storyboard.

00:21:34.220 --> 00:21:37.700
And the remaining code will be much
cleaner as well as you have all the data

00:21:37.700 --> 00:21:42.680
passing between scenes in well-defined
places like Prepare for Segway.

00:21:43.700 --> 00:21:46.720
Once you've finished building
your UI in the storyboard,

00:21:46.850 --> 00:21:49.860
you replace the main Nib file
setting with the main storyboard

00:21:49.970 --> 00:21:51.980
file setting and you're done.

00:21:52.070 --> 00:21:54.440
Now, if you're looking for a
more incremental approach,

00:21:54.570 --> 00:21:57.570
you can do this as well using new APIs.

00:21:57.680 --> 00:22:02.690
You can load any storyboard file on
demand at runtime with the UIS Storyboard

00:22:02.690 --> 00:22:05.610
StoryboardWithName bundle API.

00:22:05.970 --> 00:22:09.230
And with this you can migrate
to storyboards step by step,

00:22:09.230 --> 00:22:12.020
or better,
view controller by view controller.

00:22:12.290 --> 00:22:16.000
For example, if you implement a new
feature which requires new UI,

00:22:16.080 --> 00:22:20.520
just create the new UI as a view
controller in the storyboard

00:22:20.520 --> 00:22:22.490
and load them on demand.

00:22:22.600 --> 00:22:25.630
To instantiate the initial view
controller of that storyboard,

00:22:25.800 --> 00:22:29.900
use the instantiate initial
view controller API.

00:22:29.960 --> 00:22:33.960
And you can also instantiate any other
view controller from a storyboard

00:22:34.130 --> 00:22:35.850
by just using an identifier.

00:22:36.370 --> 00:22:38.360
And there's even more
you can do with that API.

00:22:38.640 --> 00:22:42.500
Basically, the whole storyboard is
available to you at runtime.

00:22:42.590 --> 00:22:45.190
So if your app has a very
dynamic user interface,

00:22:45.210 --> 00:22:49.480
you might want to look into the
UI Storyboard API in more detail.

00:22:51.050 --> 00:22:52.150
And this is Storyboards.

00:22:52.250 --> 00:22:54.680
All your applications flow in one place.

00:22:54.800 --> 00:22:57.600
Now we've looked at your applications
flow for quite some time now,

00:22:57.690 --> 00:23:00.790
so let's look at your own
personal workflow now.

00:23:01.470 --> 00:23:03.620
Let's look at behaviors.

00:23:03.790 --> 00:23:08.010
With behaviors you can make Xcode
adapt to your own personal workflow.

00:23:09.180 --> 00:23:13.160
Behaviors define how
Xcode reacts to events.

00:23:13.240 --> 00:23:16.000
There are lots of different
events Xcode can react to.

00:23:16.210 --> 00:23:20.610
For example, during building, testing,
and running your app.

00:23:20.930 --> 00:23:24.050
An Xcode can react with
lots of different actions.

00:23:24.090 --> 00:23:28.300
It can just alert you with a sound
or by displaying a bezel alert.

00:23:28.420 --> 00:23:32.170
Or it can reconfigure the user interface
to show things that you need in that

00:23:32.170 --> 00:23:35.200
situation and hide things you don't need.

00:23:35.340 --> 00:23:37.980
And you can even run custom scripts.

00:23:38.260 --> 00:23:41.200
But the best way to understand
the power of behaviors is to

00:23:41.230 --> 00:23:42.950
actually see that in action.

00:23:43.060 --> 00:23:45.360
So let's switch to the demo.

00:23:46.310 --> 00:23:50.200
In this demo, let's focus on what happens
when you debug your app.

00:23:50.430 --> 00:23:54.710
Before we change anything,
let's look at what Xcode does by default.

00:23:54.980 --> 00:23:58.000
So I just run this application here.

00:23:58.040 --> 00:24:01.500
And notice how Xcode brings up the
bezel alert that the build succeeded.

00:24:01.560 --> 00:24:04.500
And it also brings up the simulator.

00:24:04.540 --> 00:24:06.270
I've configured a
breakpoint in this demo.

00:24:06.390 --> 00:24:09.100
So let's just hit this breakpoint.

00:24:10.120 --> 00:24:12.990
And you can see Xcode
changes the user interface.

00:24:13.000 --> 00:24:17.730
It switches from the project navigator
to the debug navigator and it also

00:24:17.730 --> 00:24:20.550
brings up the debug area down below.

00:24:21.390 --> 00:24:24.610
and you can look at the local
variables and also you have the

00:24:24.620 --> 00:24:29.760
console over here waiting for input
so you can do whatever you want to

00:24:29.870 --> 00:24:32.430
do while debugging your application

00:24:33.800 --> 00:24:36.900
And once you've done with that,
you can just continue.

00:24:36.980 --> 00:24:40.480
And Xcode will bring
up the simulator again.

00:24:41.330 --> 00:24:44.490
And now when you stop
running your application,

00:24:44.500 --> 00:24:50.970
you can see that Xcode brings up
the project navigator again and

00:24:50.970 --> 00:24:54.700
it also dismisses the debug area.

00:24:55.450 --> 00:24:58.420
Now, let's say you really like working
in the console and you want to

00:24:58.490 --> 00:25:02.320
configure Xcode in a way that it
brings up the console automatically

00:25:02.660 --> 00:25:04.640
whenever you debug your project.

00:25:04.710 --> 00:25:07.790
And you can do this with behaviors.

00:25:07.920 --> 00:25:10.960
For that,
let's start with creating a new tab.

00:25:11.020 --> 00:25:17.070
Go to the File menu and choose
New Tab and you can also hit Command T.

00:25:18.230 --> 00:25:22.440
And let's give that tab a name
by just double clicking the tab.

00:25:22.590 --> 00:25:25.070
Let's call that tab Console.

00:25:27.040 --> 00:25:32.400
And now let's configure this tab the
way we want the console to look like.

00:25:32.520 --> 00:25:36.620
So we don't need any navigator,
so let's get rid of that.

00:25:36.800 --> 00:25:41.260
We don't need any utilities here,
so let's get rid of that as well.

00:25:41.480 --> 00:25:45.910
But we want to see the console and
the console is part of the debug area.

00:25:46.440 --> 00:25:49.780
And we want that to be
as large as possible,

00:25:49.780 --> 00:25:51.700
so let's make that larger.

00:25:51.830 --> 00:25:55.000
And let's focus on the console here.

00:25:56.180 --> 00:25:59.450
That's a nice view to work in the
console and we want to bring this

00:25:59.580 --> 00:26:01.530
up whenever the application runs.

00:26:03.810 --> 00:26:06.730
Now I can just close the tab here
again because the great thing about

00:26:06.730 --> 00:26:09.940
Xcode is that it's remembering
all the settings you made to

00:26:09.940 --> 00:26:11.880
the user interface in the tab.

00:26:12.050 --> 00:26:16.090
So whenever you bring up this tab again,
it will look exactly like you left it.

00:26:16.310 --> 00:26:21.110
And the way to bring up this tab
automatically is by using Behaviors.

00:26:21.200 --> 00:26:26.980
So let's configure a behavior by
going to the Edit Behaviors action.

00:26:26.980 --> 00:26:31.980
And let's look at the events happening
when you run your application.

00:26:33.700 --> 00:26:39.090
So when the run starts,
you want to bring up the Console tab.

00:26:41.460 --> 00:26:45.200
When the run pauses,
we don't want to bring up any navigators,

00:26:45.200 --> 00:26:47.540
so let's switch that off here.

00:26:49.550 --> 00:26:52.640
When the run generates output,
that's okay.

00:26:52.640 --> 00:26:55.550
And when the run completes,
we also don't want to

00:26:55.550 --> 00:26:59.120
bring up any navigator,
and we also don't want Xcode to

00:26:59.210 --> 00:27:01.400
hide the debugger in that case.

00:27:01.400 --> 00:27:07.400
Okay, so let's see what happens now
when we run the application.

00:27:11.500 --> 00:27:16.500
As you can see, Xcode automatically
brings up the console tab.

00:27:16.500 --> 00:27:18.700
And it's exactly like we configured it.

00:27:18.740 --> 00:27:21.160
And when I hit this breakpoint again,

00:27:22.290 --> 00:27:26.060
It takes us back to this console tab
and the debugger is waiting for input.

00:27:26.200 --> 00:27:29.170
You can do your testing.

00:27:30.430 --> 00:27:33.220
When you're finished,
you can continue and the

00:27:33.220 --> 00:27:35.290
simulator will come back up.

00:27:37.910 --> 00:27:42.200
And now when you stop
running your project,

00:27:42.330 --> 00:27:45.740
the console tab will still be on
screen and you can use this to look

00:27:46.080 --> 00:27:49.770
at the output and use that output
for any analysis you want to make.

00:27:49.840 --> 00:27:52.210
And when you're finished with that,
you can just easily

00:27:52.540 --> 00:27:53.700
close the console tab.

00:27:53.770 --> 00:27:56.840
Xcode will take you back
to the original tab,

00:27:57.150 --> 00:27:59.940
which will look exactly like you left it.

00:28:00.710 --> 00:28:05.000
And that's how you can use behaviors to
change the way Xcode reacts to events.

00:28:05.060 --> 00:28:07.300
There's lots more you
can do with behaviors,

00:28:07.310 --> 00:28:11.600
so try this out yourself and configure
Xcode the way you want it to work.

00:28:12.800 --> 00:28:14.520
So you've tested your
app in the simulator.

00:28:14.780 --> 00:28:16.860
Everything works great,
but now you want to put

00:28:16.860 --> 00:28:17.830
it on your testing device.

00:28:17.840 --> 00:28:20.360
Or even better,
you want to share it with others on

00:28:20.360 --> 00:28:22.180
your team so they can test it too.

00:28:22.180 --> 00:28:25.200
For many developers,
this is the first time they learn

00:28:25.330 --> 00:28:29.480
about things like code signing,
certificates and provisioning profiles.

00:28:29.480 --> 00:28:32.650
The reason is,
every app running on an iOS

00:28:32.660 --> 00:28:35.280
device needs to be code signed.

00:28:35.280 --> 00:28:38.600
And this means before you can
run the app on your device,

00:28:38.600 --> 00:28:42.150
you need to have two things
in place on the test devices.

00:28:42.700 --> 00:28:47.700
your app, code signed,
and a provisioning profile.

00:28:49.650 --> 00:28:54.200
A provisioning profile authorizes certain
apps to launch on certain devices.

00:28:54.310 --> 00:28:57.410
So you need to do some
administrative work before you

00:28:57.410 --> 00:28:59.830
can start testing apps on devices.

00:29:00.940 --> 00:29:05.380
For testing during development,
you need a development provisioning

00:29:05.380 --> 00:29:09.800
profile which authorizes members
of your development team to

00:29:09.800 --> 00:29:15.340
build and code sign apps for
devices configured for development.

00:29:15.340 --> 00:29:18.820
Which means these devices need to
be registered as test devices in the

00:29:18.820 --> 00:29:23.270
provisioning portal and also you need
to have app IDs in place and each

00:29:23.270 --> 00:29:26.330
team member needs a signing identity.

00:29:27.330 --> 00:29:30.720
And a signing identity is
a combination of a signing

00:29:30.740 --> 00:29:32.400
certificate and a private key.

00:29:34.160 --> 00:29:36.760
And if you don't have these yet,
you need to request them

00:29:37.200 --> 00:29:39.120
in the provisioning portal.

00:29:39.120 --> 00:29:41.450
And for that,
you need to generate your own

00:29:41.450 --> 00:29:43.500
unique private/public key pair.

00:29:43.500 --> 00:29:46.930
And that's all you need to get
your app running on test devices.

00:29:47.010 --> 00:29:47.940
Sounds complicated?

00:29:48.090 --> 00:29:50.280
Don't worry.

00:29:50.280 --> 00:29:54.580
Xcode makes it very easy for you
with automatic device provisioning.

00:29:54.580 --> 00:29:58.050
You can also create provisioning
profiles and renew expired

00:29:58.050 --> 00:30:01.510
provisioning profiles right from Xcode.

00:30:01.830 --> 00:30:06.270
So how difficult is it really to set
yourself up for some on-device testing?

00:30:06.500 --> 00:30:10.180
Let's see how automatic device
provisioning helps you with that.

00:30:13.090 --> 00:30:15.780
Go to the Xcode Organizer,
the Devices section,

00:30:15.780 --> 00:30:18.180
with your device attached
to your development Mac.

00:30:18.190 --> 00:30:21.400
And if you've never used this
device for development before,

00:30:21.530 --> 00:30:25.340
you'll see a button "Use for
Development". So step one is:

00:30:25.370 --> 00:30:27.450
click that button.

00:30:29.270 --> 00:30:32.460
Step 2 is you will need to sign in with
your developer account credentials.

00:30:32.460 --> 00:30:35.600
And that's it, you're done.

00:30:35.620 --> 00:30:38.140
Xcode does everything else
automatically for you.

00:30:38.140 --> 00:30:42.060
Which means there is a lot
happening behind the scenes.

00:30:43.810 --> 00:30:47.080
If your device hasn't yet been
registered with the portal,

00:30:47.080 --> 00:30:48.810
Xcode will do that for you.

00:30:49.330 --> 00:30:52.940
It also downloads a generic iOS
team provisioning profile which

00:30:52.940 --> 00:30:56.200
enables all members of the team
to sign apps for this profile.

00:30:56.380 --> 00:31:00.350
It uses a wildcard app ID so
it authorizes all basic apps

00:31:00.350 --> 00:31:04.560
from this team to run on any
device registered for this team.

00:31:06.860 --> 00:31:10.640
And if this iOS team provisioning
profile has not yet been created,

00:31:10.670 --> 00:31:14.220
it will create it and download
it to your development machine.

00:31:15.490 --> 00:31:18.520
If you haven't downloaded your
signing certificate from the portal,

00:31:18.610 --> 00:31:21.370
Xcode does that for you too.

00:31:21.460 --> 00:31:26.190
And if you haven't even requested it yet,
it requests it for you as well.

00:31:26.310 --> 00:31:29.390
And if you're an admin on the team,
it will immediately create

00:31:29.390 --> 00:31:31.320
and download your certificate.

00:31:31.420 --> 00:31:34.580
If you're not an admin,
it still works all automatically.

00:31:34.880 --> 00:31:38.750
You just need to wait for an admin
on the team to approve your request.

00:31:39.030 --> 00:31:43.670
Once it has been approved,
go to the Provisioning Profiles section

00:31:43.680 --> 00:31:49.000
in the organizer and hit refresh and
Xcode downloads everything for you.

00:31:49.020 --> 00:31:54.000
Now, what about apps where you need
a specific provisioning profile?

00:31:54.240 --> 00:31:58.830
Let's see how Xcode can help you
creating other provisioning profiles.

00:31:59.910 --> 00:32:03.150
There are some iOS technologies
that require an explicit app

00:32:03.190 --> 00:32:07.090
ID and they don't work with the
wildcard in the generic profile.

00:32:07.200 --> 00:32:13.810
These technologies include Game Center,
Push Notifications and In-App Purchase.

00:32:16.200 --> 00:32:19.240
To create a specific provisioning
profile right from Xcode,

00:32:19.320 --> 00:32:24.200
go to the organizer,
to Provisioning Profiles and click New.

00:32:24.410 --> 00:32:28.200
Again, you might have to sign in
with your developer account.

00:32:28.200 --> 00:32:30.640
Once you've done that,
you can configure all the

00:32:30.650 --> 00:32:32.200
details of the new profile.

00:32:32.280 --> 00:32:37.270
The profile name, the platform,
in this case iOS, the app ID,

00:32:37.350 --> 00:32:41.470
and this one needs to be set up
first in the provisioning portal.

00:32:41.830 --> 00:32:45.780
And you can select specific devices
which will be authorized to run apps for

00:32:45.780 --> 00:32:49.510
this profile and certificates which will
be the signing identities authorized

00:32:49.860 --> 00:32:51.800
to codesign apps for this profile.

00:32:51.800 --> 00:32:55.340
And as soon as you click Finish,
the profile will be generated and

00:32:55.340 --> 00:32:57.790
downloaded to your development machine.

00:32:57.830 --> 00:33:02.790
Finally,
what about expired provisioning profiles?

00:33:04.260 --> 00:33:07.230
The organizer makes you aware
of any profiles that already

00:33:07.230 --> 00:33:09.700
have expired or shortly will be.

00:33:09.880 --> 00:33:13.270
To renew them,
simply click the Renew Profile button.

00:33:13.340 --> 00:33:16.670
Again, you might need to log in to your
developer account to renew the profile.

00:33:16.930 --> 00:33:19.780
And that's how easy it is to set
up your test devices with Xcode.

00:33:22.260 --> 00:33:25.180
And that's it about
provisioning profiles.

00:33:25.980 --> 00:33:29.040
Now let's look at how you can
manage your app with Xcode.

00:33:29.040 --> 00:33:30.770
And this is about archiving.

00:33:30.970 --> 00:33:34.040
Archiving is how you
distribute your apps.

00:33:34.280 --> 00:33:37.840
You use archives to share
your apps with testers,

00:33:37.860 --> 00:33:40.880
to verify your apps before you
submit them to the app store,

00:33:40.900 --> 00:33:44.320
and then you can submit
them directly from Xcode.

00:33:44.360 --> 00:33:47.190
To create an archive,
you go to the product menu

00:33:47.360 --> 00:33:50.040
in Xcode and choose Archive.

00:33:50.070 --> 00:33:53.800
This will create an archive for the
currently active build configuration.

00:33:53.830 --> 00:33:56.400
So make sure you have a
device configuration selected,

00:33:56.430 --> 00:34:00.080
as for the simulator,
the archive action isn't available.

00:34:02.440 --> 00:34:04.410
So what is an archive?

00:34:04.780 --> 00:34:08.220
An archive is a time
stamped XC archive bundle.

00:34:08.250 --> 00:34:12.890
And this bundle includes an install
style build of your application.

00:34:13.290 --> 00:34:16.340
and it also includes
separate debug symbols.

00:34:16.340 --> 00:34:19.360
And that alone is a very good
reason for you to keep archives for

00:34:19.360 --> 00:34:22.900
every version that you distribute
to testers or to the App Store.

00:34:23.030 --> 00:34:26.220
Because with it,
you can look at symbolicated crash logs

00:34:26.330 --> 00:34:28.940
for every version you have an archive of.

00:34:28.960 --> 00:34:33.160
The archive also includes verification
and submission status for your app,

00:34:33.240 --> 00:34:35.980
and you can add your own commands too.

00:34:39.320 --> 00:34:42.900
Let's look at how archives make it
easier for you to share your apps

00:34:42.900 --> 00:34:47.170
with testers and how you submit
apps to the App Store from Xcode.

00:34:49.230 --> 00:34:52.270
This is how you share
apps with your testers.

00:34:52.270 --> 00:34:56.180
Go to the Archives tab in the Xcode
Organizer and select the app and

00:34:56.180 --> 00:34:58.390
then the archive you want to share.

00:34:58.390 --> 00:35:01.700
And then click the Distribute button.

00:35:02.420 --> 00:35:05.080
Xcode supports several
distribution methods.

00:35:05.270 --> 00:35:08.580
For sharing the app with testers,
you pick "Safe for Enterprise"

00:35:08.580 --> 00:35:12.830
or "Ad-Hoc Distribution",
which will create an IPA file.

00:35:13.620 --> 00:35:17.270
You need to sign the app with an
identity that allows ad hoc distribution

00:35:17.650 --> 00:35:20.700
and supports your testers devices.

00:35:20.830 --> 00:35:24.570
Then you choose a location where
you want to store the IPA file.

00:35:24.910 --> 00:35:27.960
And then you can send
this file to your testers.

00:35:28.110 --> 00:35:30.520
Before you ship your app,
you should always test your

00:35:30.520 --> 00:35:34.230
app using such an IPA file,
even on your own test devices,

00:35:34.350 --> 00:35:38.040
because this package is as close as
it can be to what users will be able

00:35:38.040 --> 00:35:42.140
to download from the App Store once
your app is ready for sale.

00:35:43.200 --> 00:35:46.180
The recommended way to share an
application with another team is

00:35:46.190 --> 00:35:48.600
through sharing the whole archive.

00:35:48.730 --> 00:35:53.090
And the workflow is the same as for
sharing the IPA file with your testers.

00:35:53.170 --> 00:35:58.260
Again, you click Distribute,
but this time you choose

00:35:58.400 --> 00:36:00.690
Export as Xcode Archive.

00:36:02.010 --> 00:36:04.920
And you don't have to select an
identity because the app in the

00:36:04.920 --> 00:36:09.480
archive will be codesigned for
distribution later on by the other team.

00:36:10.020 --> 00:36:14.130
You can then just share this archive
with your customer and they can sign

00:36:14.400 --> 00:36:18.950
it with their identity and upload it as
their own app under their own account.

00:36:20.340 --> 00:36:24.380
Submitting your app to the
App Store is also very similar.

00:36:24.490 --> 00:36:26.100
First of all,
make sure you've set up your

00:36:26.100 --> 00:36:28.240
app's metadata in iTunes Connect.

00:36:28.650 --> 00:36:32.900
Your app's status in iTunes
Connect should be "Waiting for upload".

00:36:33.350 --> 00:36:36.360
Then select the archive of
the app you want to submit and

00:36:36.360 --> 00:36:37.440
click the Distribute button.

00:36:37.440 --> 00:36:42.790
This time choose Submit to the App Store.

00:36:43.580 --> 00:36:47.660
You need to log into iTunes Connect,
choose the appropriate application

00:36:47.660 --> 00:36:51.510
record from iTunes Connect and
the correct signing identity

00:36:51.510 --> 00:36:53.290
for App Store distribution.

00:36:53.880 --> 00:36:57.240
Then Xcode will run some
checks and if everything is OK,

00:36:57.350 --> 00:36:59.270
it'll upload your app to iTunes Connect.

00:37:01.230 --> 00:37:03.360
And that's how you upload
your apps to the store.

00:37:03.470 --> 00:37:04.760
As simple as that.

00:37:05.120 --> 00:37:07.160
This was a quick tour of
some of the modern techniques

00:37:07.250 --> 00:37:09.710
available to you through Xcode.

00:37:09.990 --> 00:37:12.560
You've seen how you set up
your projects to use the latest

00:37:12.560 --> 00:37:15.040
SDK features and optimizations.

00:37:15.210 --> 00:37:19.690
How Storyboards simplify the way you
design your app's user interface.

00:37:19.960 --> 00:37:24.100
How Xcode adapts to your own
personal workflow with behaviors.

00:37:24.230 --> 00:37:29.040
How automatic device provisioning makes
your iOS devices ready for testing.

00:37:29.140 --> 00:37:32.720
And how you distribute
your apps using archives.

00:37:33.010 --> 00:37:35.760
And there's even more
Xcode can help you with.

00:37:35.790 --> 00:37:38.880
Have a look at the Xcode 4 User Guide to
learn about all the techniques

00:37:38.880 --> 00:37:44.000
I covered here and lots of other
helpful tips and tricks for using Xcode.

00:37:44.000 --> 00:37:46.970
And next time you download a
major new upgrade to Xcode,

00:37:46.970 --> 00:37:50.900
make sure you read the release notes
and take some time learning about

00:37:50.900 --> 00:37:53.000
the latest features and techniques.

00:37:53.270 --> 00:37:56.300
Because if you know how to
use the tools effectively,

00:37:56.580 --> 00:38:01.000
this will pay off very quickly and
you can focus on building great apps.