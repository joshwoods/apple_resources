WEBVTT

00:00:01.080 --> 00:00:05.130
Hi, my name is Charles Circlaeys,
and in this talk,

00:00:05.180 --> 00:00:08.490
we will dive into scrolling
in animation hitches in the

00:00:08.490 --> 00:00:10.910
commit phase of the render loop.

00:00:11.650 --> 00:00:14.840
iOS uses the render loop
to display your views.

00:00:14.860 --> 00:00:19.140
Touch events are sent to your app,
it responds by changing its views,

00:00:19.170 --> 00:00:23.370
and those views are rendered
onto the display by iOS.

00:00:24.640 --> 00:00:27.910
We will focus on finding and
fixing animation hitches in the

00:00:27.910 --> 00:00:30.380
commit phase of the render loop.

00:00:31.030 --> 00:00:34.180
To learn about the entire
render loop and what is a hitch,

00:00:34.360 --> 00:00:37.400
please watch the video
"Explore UI Animation Hitches

00:00:37.400 --> 00:00:39.090
and the Render Loop".

00:00:40.350 --> 00:00:45.170
We will first look into what
defines a commit transaction.

00:00:45.170 --> 00:00:47.970
Use Instruments to find hitches.

00:00:48.460 --> 00:00:52.080
and we will share our recommendations
to avoid commit hitches.

00:00:52.130 --> 00:00:54.580
Let's start by defining
a commit transaction.

00:00:54.710 --> 00:00:58.900
Here, we have an example of an
app's view hierarchy that is

00:00:58.900 --> 00:01:01.180
currently waiting for events.

00:01:01.240 --> 00:01:05.240
After it receives a touch event,
a view responds to it and processes the

00:01:05.240 --> 00:01:10.600
event by changing the background color
or the frame for some of its subviews.

00:01:10.670 --> 00:01:14.580
The system records that these subviews
will require a layout or display

00:01:14.890 --> 00:01:17.440
during the next commit transaction.

00:01:18.380 --> 00:01:21.760
During the commit transaction,
the views that needed display or

00:01:21.760 --> 00:01:27.500
layout will be updated accordingly by
calling drawRect or layoutSubviews.

00:01:28.690 --> 00:01:32.600
Let's take a look at the different phases
involved during a commit transaction.

00:01:32.720 --> 00:01:37.730
There are four steps: the layout phase,
the display phase, the prepare phase,

00:01:37.730 --> 00:01:40.370
and finally, the commit phase.

00:01:41.170 --> 00:01:44.250
During the layout phase,
LayoutSubViews will be called for

00:01:44.360 --> 00:01:46.420
every view that requires a layout.

00:01:46.420 --> 00:01:50.600
You can mark a layout needed by:
changing a view's position,

00:01:50.600 --> 00:01:53.940
adding or removing views,
or explicitly call

00:01:53.940 --> 00:01:56.130
SetNeedsLayout on the view.

00:01:56.520 --> 00:01:59.370
During the display phase,
drawRect will be called for

00:01:59.460 --> 00:02:01.630
every view that requires display.

00:02:01.750 --> 00:02:05.820
You can indicate that display is
needed by adding views to the view

00:02:05.820 --> 00:02:11.540
hierarchy that override drawRect,
or by calling setNeedsDisplay explicitly.

00:02:11.620 --> 00:02:15.110
During the prepare phase,
images that haven't been decoded yet

00:02:15.410 --> 00:02:17.990
will be decoded during this step.

00:02:18.140 --> 00:02:23.340
This kind of operation can take
considerable time for large images.

00:02:23.740 --> 00:02:26.300
Also,
if an image is in a color format that

00:02:26.500 --> 00:02:31.090
the GPU cannot directly work with,
it will be converted during this step.

00:02:31.270 --> 00:02:34.560
This will require the image to
be copied instead of sending

00:02:34.690 --> 00:02:38.500
a pointer to the original,
which will cost additional

00:02:38.500 --> 00:02:39.920
time and memory.

00:02:40.060 --> 00:02:43.760
To learn more about optimizing
the images in your app,

00:02:43.940 --> 00:02:47.720
watch the "Image and Graphics
Best Practices" video.

00:02:48.210 --> 00:02:51.970
Finally, during the commit phase,
the view hierarchy will be

00:02:52.060 --> 00:02:56.460
packaged up recursively and
sent to the render server.

00:02:56.520 --> 00:03:01.620
Note that deep view hierarchies
will take longer to be packaged up.

00:03:01.670 --> 00:03:04.890
Now that we have described the
details of a commit transaction,

00:03:05.050 --> 00:03:09.940
let's move to our second topic:
find hitches with Instruments.

00:03:10.020 --> 00:03:13.910
In Xcode 12,
we released a new Instrument template

00:03:13.910 --> 00:03:16.420
to profile hitches in your apps.

00:03:16.460 --> 00:03:20.660
This will help you to visualize
and investigate the render loop

00:03:20.660 --> 00:03:22.970
for the hitching frames detected.

00:03:23.500 --> 00:03:25.870
Let's look at some hitches
in our example app.

00:03:26.020 --> 00:03:30.940
We will record a trace in Instruments
as we scroll in our application.

00:03:31.320 --> 00:03:34.580
So here we have a recorded trace
of our scrolling performance,

00:03:34.630 --> 00:03:37.590
and we can see all the hitches detected.

00:03:43.820 --> 00:03:48.630
Let's take a closer look at the hitch 16.

00:03:48.740 --> 00:03:52.280
We can see on the left all the tracks
corresponding to the render loop

00:03:52.280 --> 00:03:56.260
phases required to compose the frames.

00:03:56.290 --> 00:04:00.500
The hitches track shows the
hitches and their durations.

00:04:01.370 --> 00:04:04.990
The User Events track shows
the user events associated

00:04:04.990 --> 00:04:06.700
with the hitching frame.

00:04:08.390 --> 00:04:11.050
The commits track shows the
commit phases and the processes

00:04:11.050 --> 00:04:13.800
that committed during this phase.

00:04:14.610 --> 00:04:18.970
Patrick will talk more about the
renders and GPU tracks in "Demystify and

00:04:18.970 --> 00:04:22.270
Eliminate Hitches in the Render Phase".

00:04:22.580 --> 00:04:26.200
The Frame Lifetimes track
shows the entire duration to

00:04:26.200 --> 00:04:28.130
compose the hitching frame.

00:04:28.290 --> 00:04:31.790
The built-in display track shows
all the frames that appeared on

00:04:31.790 --> 00:04:35.110
display along with the VSync events.

00:04:36.050 --> 00:04:39.690
You can compare the frame lifetime with
the beginning of the hitch duration to

00:04:39.690 --> 00:04:45.020
visualize the expected interval that the
frame should have been ready for display.

00:04:45.960 --> 00:04:49.780
This interval is called
the acceptable latency.

00:04:49.840 --> 00:04:53.190
All time after that
is the hitch duration.

00:04:53.690 --> 00:04:56.520
Below the tracks,
we can see detailed metrics for the

00:04:56.520 --> 00:04:59.780
hitch when the hitches track is selected.

00:04:59.780 --> 00:05:03.240
There are many hitches in our demo app,
but we have been focusing

00:05:03.240 --> 00:05:04.600
on the hitch 16 here.

00:05:06.880 --> 00:05:12.230
We can see the hitch duration,
the acceptable latency,

00:05:12.820 --> 00:05:14.920
and the hitch type.

00:05:14.920 --> 00:05:19.530
Hitch type is useful to get a hint
during which phase the frame was delayed,

00:05:19.530 --> 00:05:22.230
and where to start investigating.

00:05:22.740 --> 00:05:25.330
For this example,
we can see that the selected

00:05:25.330 --> 00:05:30.270
hitching frame was caused by
the commit and the GPU phase.

00:05:31.360 --> 00:05:34.850
I'd like to find what code is
taking too long in the commit phase,

00:05:34.870 --> 00:05:37.210
and thankfully,
the animation hitches template

00:05:37.570 --> 00:05:41.060
includes Time Profiler,
so we can see what code is running

00:05:41.060 --> 00:05:43.060
when this hitch is occurring.

00:05:43.250 --> 00:05:47.430
From here, I can select the interval
I want to investigate,

00:05:47.450 --> 00:05:50.260
and search for the process
that was committing.

00:05:50.350 --> 00:05:54.750
I can select the main
thread of this process,

00:05:54.750 --> 00:05:57.090
and display its call tree.

00:05:58.930 --> 00:06:02.630
Now we are able to analyze
which calls might be expensive.

00:06:02.650 --> 00:06:06.000
We can see that this call tree is
originated from a commit transaction,

00:06:06.180 --> 00:06:09.120
and it shows that we spent
about 10 milliseconds inside a

00:06:09.120 --> 00:06:14.480
method called updateTags in our
custom collection view cell.

00:06:14.630 --> 00:06:17.100
Let's look at what's in this app.

00:06:17.780 --> 00:06:20.160
It is composed of a
common collection view,

00:06:20.190 --> 00:06:25.270
and each cell shows:
a photo thumbnail using a UI image view,

00:06:25.400 --> 00:06:29.790
some text using UI label,
and some tags using a

00:06:29.790 --> 00:06:32.000
custom tag label view.

00:06:32.080 --> 00:06:35.960
Let's look at the implementation of
our custom collection view cell class,

00:06:35.960 --> 00:06:39.860
and more particularly,
where this method is being called.

00:06:39.980 --> 00:06:44.190
Here, we see that we have a property
observer on the menu item.

00:06:45.020 --> 00:06:49.340
This property observer will call
update tags in two scenarios:

00:06:49.460 --> 00:06:53.730
a valid menu item was set,
or it was set to nil.

00:06:54.060 --> 00:06:57.040
In the first scenario,
we pass an array of tags

00:06:57.040 --> 00:06:58.480
that we want to display.

00:06:58.550 --> 00:07:01.330
In the second scenario,
we pass an empty array to

00:07:01.390 --> 00:07:03.920
remove any remaining tags.

00:07:03.980 --> 00:07:08.080
Let's take a look inside the
UpdateTags method implementation now.

00:07:08.160 --> 00:07:12.290
As expected, we remove all the views from
the view hierarchy in case

00:07:12.290 --> 00:07:14.960
of an empty array of tags.

00:07:15.010 --> 00:07:18.830
Otherwise,
we create a stack view if needed.

00:07:19.140 --> 00:07:23.940
Then, recreate or reuse existing
tag labels for each tag.

00:07:24.420 --> 00:07:28.200
After that,
we remove any existing unused tag labels

00:07:28.580 --> 00:07:32.520
in case that the previous usage of this
cell had more tags than the new one.

00:07:32.540 --> 00:07:36.940
Let's go back to our calling scope and
let's look at the potential problem

00:07:36.940 --> 00:07:40.130
now that we have a better knowledge
of how things are implemented.

00:07:40.130 --> 00:07:45.060
The customCollectionView cell overrides
the prepareForReuse method that is

00:07:45.190 --> 00:07:47.340
called when a cell is dequeued for reuse.

00:07:47.340 --> 00:07:52.080
And inside this method,
we set the menu item to nil.

00:07:52.080 --> 00:07:56.820
Doing so will cause our second scenario
to happen which removes all the

00:07:56.820 --> 00:08:00.990
previous tag labels from the cellView
hierarchy without taking advantage

00:08:00.990 --> 00:08:03.970
of our reuse implementation logic.

00:08:04.560 --> 00:08:07.890
This means that for every dequeued cell,
we will remove all the

00:08:07.890 --> 00:08:12.000
previous label subviews,
and reinstantiate every single

00:08:12.000 --> 00:08:14.700
view needed to display our labels.

00:08:15.080 --> 00:08:18.900
This is not optimal,
and this might be causing the hitch.

00:08:18.960 --> 00:08:22.240
The solution for this is quite simple.

00:08:22.240 --> 00:08:25.300
We don't need to clear our menu item,
and we can simply remove

00:08:25.300 --> 00:08:28.600
the prepareForUse method
from the implementation.

00:08:28.600 --> 00:08:32.870
Now, when we set the new cells menu item,
we can take advantage of the

00:08:32.870 --> 00:08:37.800
reusable logic and avoid expensive
view hierarchy operations.

00:08:37.800 --> 00:08:41.250
If we record a new trace after our fix,
we notice that we drastically

00:08:41.250 --> 00:08:46.140
improved the number of hitches
detected compared to the first trace.

00:08:46.140 --> 00:08:50.280
The time profiler in Instruments was
very helpful for finding what code was

00:08:50.280 --> 00:08:53.240
taking too long and causing a hitch.

00:08:53.250 --> 00:08:57.080
To find out more about time profiler,
watch the Using Time Profiler

00:08:57.080 --> 00:08:58.290
in Instruments video.

00:08:59.800 --> 00:09:02.820
After learning how to profile
our application with Instruments,

00:09:02.930 --> 00:09:07.120
let's discuss some recommendations
to avoid hitches in the commit phase.

00:09:07.470 --> 00:09:10.100
Rule number one is to keep
your views lightweight.

00:09:10.430 --> 00:09:13.370
To do so,
try to take advantage as much as you

00:09:13.400 --> 00:09:18.540
can from the properties available
on CLayer that are GPU accelerated

00:09:18.830 --> 00:09:21.160
and avoid CPU custom drawing.

00:09:21.220 --> 00:09:24.200
In case that it is justified,
make sure to measure

00:09:24.200 --> 00:09:25.920
the performance of it.

00:09:25.920 --> 00:09:29.360
Avoid any empty implementations
of drawrect as the system must

00:09:29.360 --> 00:09:33.320
do extra work which will require
additional time and memory usage

00:09:33.320 --> 00:09:35.460
during the commit transaction.

00:09:35.460 --> 00:09:39.770
Try to reuse views as much as possible
to avoid expensive view hierarchy

00:09:39.770 --> 00:09:42.660
operations as adding and removing.

00:09:42.660 --> 00:09:45.680
Related to removing views,
try to take advantage of the

00:09:45.680 --> 00:09:49.170
view property hidden if you
need to stop showing a specific

00:09:49.170 --> 00:09:51.080
view during an animation.

00:09:51.080 --> 00:09:53.150
This is a lot cheaper.

00:09:53.520 --> 00:09:57.880
Rule number two is to reduce
expensive and redundant layout.

00:09:58.010 --> 00:10:01.830
Try to only rely on set-needs layout
when you need to update your layout.

00:10:01.830 --> 00:10:04.520
Layout if needed will expand
the current transaction

00:10:04.520 --> 00:10:06.670
lifetime and can cause hitches.

00:10:06.670 --> 00:10:09.560
Most of the time,
you can wait for the next run

00:10:09.560 --> 00:10:10.960
loop to update your layout.

00:10:11.040 --> 00:10:14.640
Try to use the minimum number of
constraints to avoid increasing

00:10:14.640 --> 00:10:16.970
the complexity for solving this.

00:10:17.320 --> 00:10:21.570
Finally, a view should only invalidate
itself or its children,

00:10:21.710 --> 00:10:24.200
but not its siblings or its parent view.

00:10:24.210 --> 00:10:28.520
Otherwise, the view's layout will be
recursively invalidated again.

00:10:28.520 --> 00:10:33.090
I recommend you to watch the two
WWDC talks mentioned below to learn

00:10:33.090 --> 00:10:37.880
more details about performant layout
and image and graphics best practices.

00:10:38.610 --> 00:10:41.130
Now that you understand the
commit transaction pipeline,

00:10:41.330 --> 00:10:43.540
you can avoid expensive commits.

00:10:43.540 --> 00:10:46.710
You can use the new animation
hitches template in Instruments

00:10:46.710 --> 00:10:49.700
to detect and investigate hitches.

00:10:49.700 --> 00:10:52.940
You've learned some strategies
for preventing commit hitches,

00:10:52.940 --> 00:10:56.320
such as:
Ensure "Prepare for reuse" does not incur

00:10:56.320 --> 00:11:01.430
additional work Keep your view hierarchy
shallow and lightweight Avoid expensive

00:11:01.430 --> 00:11:06.060
and redundant layouts Also,
be sure to learn about the next phase

00:11:06.060 --> 00:11:10.160
of the render loop in the video:
Demystify and eliminate

00:11:10.160 --> 00:11:12.100
hitches in the render phase.

00:11:12.100 --> 00:11:14.480
Thank you