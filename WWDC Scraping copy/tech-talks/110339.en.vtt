WEBVTT

00:00:00.500 --> 00:00:03.370
Hi, my name is Nat Brown,
and I manage a team of engineers

00:00:03.370 --> 00:00:05.973
working on game technologies
at Apple.

00:00:05.973 --> 00:00:08.675
Today I'd like to tell you
about the heads-up display

00:00:08.675 --> 00:00:11.979
for watching and collecting
key real-time graphic statistics

00:00:11.979 --> 00:00:14.214
in your applications and games.

00:00:14.214 --> 00:00:16.783
Let's take a look at
the Metal Performance HUD.

00:00:16.783 --> 00:00:19.086
When enabled,
it will appear as an overlay

00:00:19.086 --> 00:00:24.558
in the upper right-hand corner
of your application.

00:00:24.558 --> 00:00:26.526
Its purpose is to help you
and your testers

00:00:26.526 --> 00:00:28.862
easily spot potential
performance problems

00:00:28.862 --> 00:00:32.499
and to log some basic
information for later analysis.

00:00:32.499 --> 00:00:35.335
The HUD is a complement to
and not a replacement for

00:00:35.335 --> 00:00:38.605
your existing debugging
and performance analysis tools,

00:00:38.605 --> 00:00:40.440
one that helps you get
useful information

00:00:40.440 --> 00:00:42.643
from quality assurance teams
and customers

00:00:42.643 --> 00:00:44.344
with just screenshots and logs

00:00:44.344 --> 00:00:47.681
helping you more quickly
reproduce, analyze, and fix

00:00:47.681 --> 00:00:51.551
hard-to-reproduce performance
problems and graphics glitches.

00:00:51.551 --> 00:00:55.022
Let's take a look at what data
the HUD shows and can collect.

00:00:55.022 --> 00:00:57.024
The top line of the HUD
shows you information

00:00:57.024 --> 00:01:01.061
about the GPU and the display,
the device being used,

00:01:01.061 --> 00:01:02.863
the resolution being targeted,

00:01:02.863 --> 00:01:05.399
and the scaling state
of the display.

00:01:05.399 --> 00:01:07.901
The HUD shows you
whether you are in the direct

00:01:07.901 --> 00:01:10.871
or composited path
of the display.

00:01:10.871 --> 00:01:13.040
The direct path
has the least buffering

00:01:13.040 --> 00:01:14.908
and the fewest number
of refresh intervals

00:01:14.908 --> 00:01:16.643
between when you present
your drawable

00:01:16.643 --> 00:01:18.912
and when it appears
on the screen.

00:01:18.912 --> 00:01:20.147
When you are composited,

00:01:20.147 --> 00:01:22.916
there may be some additional
buffering and display latency

00:01:22.916 --> 00:01:25.719
due to system UI elements
or your own additional layers

00:01:25.719 --> 00:01:27.788
overlapping the screen.

00:01:27.788 --> 00:01:29.756
You're also going to see
the maximum refresh rate

00:01:29.756 --> 00:01:32.225
of the physical display
being used.

00:01:32.225 --> 00:01:34.227
For variable
refresh rate displays,

00:01:34.227 --> 00:01:37.397
you will also see the minimum
refresh rate of the display,

00:01:37.397 --> 00:01:39.566
so you'll see the possible
refresh rate ranges

00:01:39.566 --> 00:01:41.335
that are available.

00:01:41.335 --> 00:01:44.071
Next, the first column
of the real-time data

00:01:44.071 --> 00:01:46.673
shows the instantaneous
frame rate in Hertz

00:01:46.673 --> 00:01:48.208
or frames per second,

00:01:48.208 --> 00:01:51.244
then the pretime, or the time
between your presents,

00:01:51.244 --> 00:01:55.816
also known as the frame time or
frame interval in milliseconds.

00:01:55.816 --> 00:01:58.418
And finally, the amount of GPU
work that was completed

00:01:58.418 --> 00:02:02.089
in the frame interval
also measured in milliseconds.

00:02:02.089 --> 00:02:04.091
The second column shows you
a bit more information

00:02:04.091 --> 00:02:07.094
about the lowest values
of frame rate, frame interval,

00:02:07.094 --> 00:02:08.862
and GPU time spent in the frame

00:02:08.862 --> 00:02:11.565
over the last
one and a half seconds.

00:02:11.565 --> 00:02:13.967
The HUD highlights in red
when this low value

00:02:13.967 --> 00:02:17.037
has deviated significantly
from the average.

00:02:17.037 --> 00:02:19.072
The last column
of numerical data in the HUD

00:02:19.072 --> 00:02:21.041
shows you the highest
instantaneous frame rate

00:02:21.041 --> 00:02:23.343
in the last
one and a half seconds,

00:02:23.343 --> 00:02:26.513
the largest single frame time in
the last one and a half seconds,

00:02:26.513 --> 00:02:29.549
and the highest GPU cost
in milliseconds of work done

00:02:29.549 --> 00:02:32.486
in the last one and a half
seconds of frame intervals.

00:02:32.486 --> 00:02:34.821
Unusually high frame intervals
and GPU time

00:02:34.821 --> 00:02:38.859
compared to the average are once
again highlighted here in red.

00:02:38.859 --> 00:02:40.794
The final section
at the bottom of the HUD

00:02:40.794 --> 00:02:43.864
shows you process and GPU
memory consumption information

00:02:43.864 --> 00:02:46.533
to help you spot
potential leaks over time

00:02:46.533 --> 00:02:49.036
and also a dual-line graph
of the present intervals

00:02:49.036 --> 00:02:50.871
and GPU time spent.

00:02:50.871 --> 00:02:53.473
The purpose of this information
is to help you and your testers

00:02:53.473 --> 00:02:56.610
spot transient frame drops
which you might otherwise miss

00:02:56.610 --> 00:02:59.679
and to help you isolate
your deeper testing, debugging,

00:02:59.679 --> 00:03:02.749
and performance tuning
using more advanced Xcode

00:03:02.749 --> 00:03:04.684
and Instruments tools.

00:03:04.684 --> 00:03:07.521
So how do you turn on
the Metal Performance HUD?

00:03:07.521 --> 00:03:08.922
Well you might be
surprised to learn

00:03:08.922 --> 00:03:10.857
that there are a lot of
different ways to do it

00:03:10.857 --> 00:03:12.559
because we know
there are a lot of ways

00:03:12.559 --> 00:03:15.028
developers want
to interact with and automate

00:03:15.028 --> 00:03:16.997
this form of data collection.

00:03:16.997 --> 00:03:19.099
The first is right
from Xcode 14

00:03:19.099 --> 00:03:22.836
while you're developing
for iOS, macOS, or tvOS.

00:03:22.836 --> 00:03:25.272
In your Run scheme
under the Diagnostics tab,

00:03:25.272 --> 00:03:27.307
you'll see the option
to turn the HUD on

00:03:27.307 --> 00:03:29.743
by choosing
Show Graphics Overview

00:03:29.743 --> 00:03:31.945
and to enable logging data
to the system log

00:03:31.945 --> 00:03:34.581
by choosing
Log Graphics Overview.

00:03:34.581 --> 00:03:38.151
On iOS and tvOS, if you have
connected the device to Xcode

00:03:38.151 --> 00:03:41.221
and enabled it for development,
you can turn on the HUD

00:03:41.221 --> 00:03:44.057
and logging using
the Developer Settings.

00:03:44.057 --> 00:03:46.593
Just go to
Settings > Developer Settings,

00:03:46.593 --> 00:03:50.063
scroll down and enable the HUD
and optionally logging.

00:03:50.063 --> 00:03:54.067
On iOS and tvOS, the HUD will
only show up and perform logging

00:03:54.067 --> 00:03:56.069
for your own applications;

00:03:56.069 --> 00:03:59.372
that is, applications
you have installed via Xcode

00:03:59.372 --> 00:04:01.475
or using TestFlight.

00:04:01.475 --> 00:04:04.444
On macOS, you can enable
the HUD outside of Xcode

00:04:04.444 --> 00:04:06.480
through environment variables.

00:04:06.480 --> 00:04:11.184
Set the MTL_HUD_ENABLED
environment variable to one

00:04:11.184 --> 00:04:16.723
to show the HUD and set the
MTL_HUD_LOGGING_ENABLED

00:04:16.723 --> 00:04:20.794
environment variable to one
to trigger logging.

00:04:20.794 --> 00:04:22.562
Another option
you might find useful

00:04:22.562 --> 00:04:25.198
is using your application's
user defaults.

00:04:25.198 --> 00:04:30.370
On macOS, iOS, and tvOS, you can
set the MetalForceHudEnabled key

00:04:30.370 --> 00:04:33.106
to true in your standard
user defaults

00:04:33.106 --> 00:04:35.242
and the HUD will display
and logging will occur

00:04:35.242 --> 00:04:38.211
for subsequent launches
of your applications.

00:04:38.211 --> 00:04:40.947
On macOS, you can set a global
value to have the HUD show

00:04:40.947 --> 00:04:44.050
for all Metal-based
applications.

00:04:44.050 --> 00:04:46.253
Finally, you can add
the MetalHUDEnabled key

00:04:46.253 --> 00:04:49.589
to your Info.plist
to always enable the HUD.

00:04:49.589 --> 00:04:51.024
Now if the HUD is enabled,

00:04:51.024 --> 00:04:54.127
you can use the CAMetalLayer
developerHUDProperties

00:04:54.127 --> 00:04:56.696
dictionary to show
and hide the HUD

00:04:56.696 --> 00:04:59.366
and to enable
and disable logging.

00:04:59.366 --> 00:05:02.569
Setting the mode key to default
will show the HUD.

00:05:02.569 --> 00:05:04.971
Clearing the key
will hide the HUD.

00:05:04.971 --> 00:05:07.974
Setting the logging key
to default will enable logging.

00:05:07.974 --> 00:05:10.810
Clearing this key
will disable logging.

00:05:10.810 --> 00:05:13.880
You might add the Info.plist
key and use this API

00:05:13.880 --> 00:05:16.850
if you want to provide
your testers with a UI toggle

00:05:16.850 --> 00:05:20.287
in internal builds
to show and hide the HUD.

00:05:20.287 --> 00:05:23.823
Now let's take a look at what
the Metal Performance HUD logs.

00:05:23.823 --> 00:05:26.793
About once per second the Metal
Performance HUD writes data

00:05:26.793 --> 00:05:30.063
to the system log summarizing
the data it is collecting

00:05:30.063 --> 00:05:32.399
so you can analyze it
in your own way.

00:05:32.399 --> 00:05:34.167
Just launch
the console application

00:05:34.167 --> 00:05:38.605
and filter the output
with the string metal-HUD.

00:05:38.605 --> 00:05:43.043
Each resulting line will start
with the string metal-HUD.

00:05:43.043 --> 00:05:45.245
Next comes
the first frame number,

00:05:45.245 --> 00:05:47.914
then the number of estimated
frame misses.

00:05:47.914 --> 00:05:49.816
In this case, none were missed.

00:05:49.816 --> 00:05:51.918
Next, the process memory usage.

00:05:51.918 --> 00:05:55.689
Here it's 56.05 megabytes.

00:05:55.689 --> 00:05:58.091
After that are each frame's
present interval

00:05:58.091 --> 00:06:00.327
and GPU time in milliseconds.

00:06:00.327 --> 00:06:03.430
You might find all of this data
useful to analyze offline

00:06:03.430 --> 00:06:06.233
or to correlate with a video
you capture of gameplay

00:06:06.233 --> 00:06:08.101
to give you an even more
accurate insight

00:06:08.101 --> 00:06:12.105
into where to focus additional
debugging and optimization.

00:06:12.105 --> 00:06:13.306
I hope you enjoyed
learning about

00:06:13.306 --> 00:06:15.208
the Metal Performance HUD today.

00:06:15.208 --> 00:06:17.677
Use the HUD to visualize
your game's performance.

00:06:17.677 --> 00:06:20.180
It will help you spot subtle
performance issues

00:06:20.180 --> 00:06:21.381
and help you choose where to use

00:06:21.381 --> 00:06:23.450
more advanced tools
like Instruments.

00:06:23.450 --> 00:06:25.986
It's easy to enable
on all Apple platforms,

00:06:25.986 --> 00:06:27.854
and you can also capture
the data it logs

00:06:27.854 --> 00:06:30.190
for your own custom analysis.

00:06:30.190 --> 00:06:31.691
I really hope you find it useful

00:06:31.691 --> 00:06:35.195
for optimizing your games
and graphics applications.

00:06:35.195 --> 00:06:37.664
If you have any feedback,
be sure to send it through

00:06:37.664 --> 00:06:40.433
feedbackassistant.apple.com.

00:06:40.433 --> 00:06:42.335
Thanks for joining me.