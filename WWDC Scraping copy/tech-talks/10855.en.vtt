WEBVTT

00:00:00.610 --> 00:00:03.580
Hi, I'm Patrick, and I work on a
performance team at Apple.

00:00:03.710 --> 00:00:07.340
Today, we'll be discussing scrolling and
animation hitches in your apps,

00:00:07.410 --> 00:00:09.770
and look at the render loop in detail.

00:00:09.890 --> 00:00:12.860
First, we'll get a general
sense of what is a hitch.

00:00:13.030 --> 00:00:15.740
Then, we'll discuss the render
loop and the different types

00:00:15.740 --> 00:00:17.830
of hitches that can happen.

00:00:18.210 --> 00:00:21.260
Finally,
we'll discuss how to measure hitches.

00:00:21.370 --> 00:00:23.920
So first, what is a hitch?

00:00:24.300 --> 00:00:26.160
In your app,
a person might drag their finger

00:00:26.170 --> 00:00:28.600
across the screen to scroll,
they might tap a button

00:00:28.600 --> 00:00:31.340
and expect feedback,
or transition between

00:00:31.340 --> 00:00:32.840
views in a hierarchy.

00:00:33.000 --> 00:00:36.360
These animations build a visual
sense of connection between

00:00:36.360 --> 00:00:38.270
people and content on screen.

00:00:38.840 --> 00:00:43.060
Animation hitches can cause jumps in
animations and break that connection,

00:00:43.240 --> 00:00:46.090
causing confusion instead of delight.

00:00:46.770 --> 00:00:51.080
A hitch is any time a frame appears
on screen later than expected.

00:00:51.080 --> 00:00:55.140
Let's look at a common example
of scrolling a collection view.

00:00:55.230 --> 00:00:58.950
Here, we have a Meal Planner app that
helps us curate our favorite recipes.

00:00:59.050 --> 00:01:02.630
As user drags their finger up the screen,
the scroll view responds

00:01:02.630 --> 00:01:04.200
by moving the content up.

00:01:04.350 --> 00:01:07.620
But while scrolling,
we notice a jump in the content.

00:01:07.640 --> 00:01:11.330
If we look at this frame by frame,
we can see our finger moving with the

00:01:11.430 --> 00:01:13.970
content in the first three frames.

00:01:14.060 --> 00:01:17.500
But in the next frame,
the content appears to stall.

00:01:17.540 --> 00:01:19.950
That's because the third
frame actually repeated,

00:01:19.950 --> 00:01:22.660
staying on the display for another frame.

00:01:22.720 --> 00:01:26.490
Finally, comes the fourth frame,
and it appears to jump forward

00:01:26.490 --> 00:01:28.070
to where our finger is.

00:01:28.120 --> 00:01:31.200
The third frame repeated because
the fourth frame arrived late,

00:01:31.260 --> 00:01:33.580
and the user saw a hitch.

00:01:33.950 --> 00:01:37.830
Hitches are caused when the render
loop fails to finish a frame on time.

00:01:37.920 --> 00:01:40.170
So let's look into the render loop.

00:01:40.590 --> 00:01:43.180
The render loop is a continuous
process by which touch

00:01:43.180 --> 00:01:46.200
events are handed to an app,
and then changes to the UI are

00:01:46.200 --> 00:01:49.130
sent to the operating system
where the frame is finalized.

00:01:49.240 --> 00:01:52.730
It's a loop, and it happens at the
device's refresh rate.

00:01:52.850 --> 00:01:55.510
On iPhone and iPad,
this is 60 frames per second,

00:01:55.610 --> 00:02:00.260
which means a new frame can be
displayed every 16.67 milliseconds.

00:02:00.370 --> 00:02:03.590
On iPad Pro,
this is 120 frames per second,

00:02:03.710 --> 00:02:08.590
which means a new frame can be
displayed every 8.33 milliseconds.

00:02:08.850 --> 00:02:11.290
At the beginning of a frame,
the hardware emits an

00:02:11.290 --> 00:02:12.620
event called a VSYNC.

00:02:12.730 --> 00:02:16.180
The VSYNC denotes when a
new frame must be ready.

00:02:16.240 --> 00:02:20.230
We highlight them in the display track,
so it's easy to see the deadline.

00:02:20.450 --> 00:02:24.560
The render loop is timed to VSYNCs and
must hit checkpoints along the way

00:02:24.580 --> 00:02:26.590
in order to have a frame ready.

00:02:27.510 --> 00:02:29.280
It's broken up into three stages.

00:02:29.280 --> 00:02:31.900
The first stage is in your app,
where events are handled and

00:02:31.900 --> 00:02:34.040
changes are made to the UI.

00:02:34.120 --> 00:02:36.840
That work must complete
before the next VSync,

00:02:36.840 --> 00:02:38.630
so the next stage can begin.

00:02:38.730 --> 00:02:42.290
The next stage happens in a separate
process called the render server.

00:02:42.430 --> 00:02:45.160
This is where your
UI is actually rendered.

00:02:45.260 --> 00:02:47.760
This stage must also complete
before the next VSync,

00:02:47.840 --> 00:02:52.160
so that the frame can be displayed,
which is the third and final stage.

00:02:52.800 --> 00:02:56.330
An important caveat to the three-stage
process is that the frame is processed

00:02:56.360 --> 00:02:58.560
for two frames before display.

00:02:58.560 --> 00:03:01.640
We call this double buffering,
but there is another mode.

00:03:01.770 --> 00:03:04.800
To avoid hitches, the system may switch
to triple buffering,

00:03:04.960 --> 00:03:07.260
where the render server
is given one extra frame

00:03:07.260 --> 00:03:09.040
duration to complete its work.

00:03:09.040 --> 00:03:11.940
Since this is a fallback mode,
we're going to focus on double

00:03:11.940 --> 00:03:15.000
buffering while talking about
hitches and the render loop.

00:03:15.790 --> 00:03:19.190
Overall, the entire render loop is
made up of five phases.

00:03:19.300 --> 00:03:22.200
The loop begins with the first phase,
the event phase.

00:03:22.350 --> 00:03:27.100
Here, your app handles touch events and
decides if a change is needed in the UI.

00:03:27.200 --> 00:03:28.920
Next is the commit phase.

00:03:28.980 --> 00:03:31.850
In the commit phase,
your app updates its UI and submits

00:03:31.850 --> 00:03:34.460
that to the render server for rendering.

00:03:34.550 --> 00:03:37.260
On the next vSync,
the render server takes that submission

00:03:37.260 --> 00:03:41.540
and in the render prepare phase,
prepares it for drawing on the GPU.

00:03:41.650 --> 00:03:46.070
In the render execute phase,
the GPU draws your UI into a final image,

00:03:46.200 --> 00:03:50.510
so that on the next vSync,
the frame can be displayed to your user.

00:03:51.310 --> 00:03:55.560
Each stage is critical to having a
smooth user experience every frame,

00:03:55.700 --> 00:03:57.040
even the render work.

00:03:57.200 --> 00:03:59.070
Although it happens
in a separate process,

00:03:59.090 --> 00:04:03.270
it does work on your app's behalf,
so it's on you to ensure your layer

00:04:03.320 --> 00:04:06.190
tree can be processed and drawn in time.

00:04:06.330 --> 00:04:10.070
To understand this a little further,
let's look at an example.

00:04:11.120 --> 00:04:13.240
In this example,
we're going to follow this

00:04:13.240 --> 00:04:16.830
frame through the render loop
to see each phase along the way.

00:04:16.970 --> 00:04:20.440
First is the event phase,
where the app will receive events.

00:04:20.500 --> 00:04:24.270
These events are things like touches,
networking callbacks, keyboard presses,

00:04:24.340 --> 00:04:25.940
and timers.

00:04:26.010 --> 00:04:30.760
The app can respond to these events in
any way by altering its layer hierarchy.

00:04:30.830 --> 00:04:33.980
For example, the app can change the
background color of a layer,

00:04:33.980 --> 00:04:37.040
or even change a layer's
size and position.

00:04:37.940 --> 00:04:40.340
But when the app updates
the bounds of a layer,

00:04:40.340 --> 00:04:42.860
core animation also
calls set needs layout.

00:04:42.890 --> 00:04:47.760
This identifies all the layers which must
recalculate their layout in response.

00:04:47.800 --> 00:04:51.620
The system will coalesce these
need layout requests and perform

00:04:51.620 --> 00:04:55.750
them in order during the commit
phase to reduce duplicate work.

00:04:56.210 --> 00:04:59.340
If any layout is needed,
the commit phase will automatically

00:04:59.340 --> 00:05:02.230
start once the event phase finishes.

00:05:02.350 --> 00:05:07.080
First, the system takes all the layers
requiring layout and lays them out

00:05:07.260 --> 00:05:10.100
one at a time from parent to child.

00:05:10.200 --> 00:05:12.320
Layout is a common
performance bottleneck,

00:05:12.330 --> 00:05:14.570
so keep in mind that your
app only has a couple of

00:05:14.570 --> 00:05:17.220
milliseconds to complete this work.

00:05:17.330 --> 00:05:21.620
Some views also require custom drawing,
like labels, image views,

00:05:21.680 --> 00:05:23.860
or just any view overwriting draw rect.

00:05:23.910 --> 00:05:29.100
If these views require a visual update,
they must call set needs display.

00:05:29.150 --> 00:05:31.800
Like layout,
the system will coalesce these

00:05:31.880 --> 00:05:35.200
requests to perform them once
all layout has completed.

00:05:36.110 --> 00:05:39.250
During the drawing process,
every custom drawing layer will receive

00:05:39.320 --> 00:05:43.800
a texture-backed core graphics context,
which they'll draw into.

00:05:44.000 --> 00:05:48.000
As far as core animation is concerned,
these layers are now just images.

00:05:48.000 --> 00:05:51.000
And now that all layers
have laid out and drawn,

00:05:51.000 --> 00:05:54.130
the entire altered layer tree
is collected and sent to the

00:05:54.130 --> 00:05:56.410
render server for rendering.

00:05:57.960 --> 00:06:00.440
Now we are in the render server,
which is responsible for

00:06:00.490 --> 00:06:04.300
turning our layer tree into
an actual displayable image.

00:06:04.330 --> 00:06:07.350
In the prepare phase,
the render server iterates through the

00:06:07.350 --> 00:06:12.680
app's layer tree and prepares a linear
pipeline that the GPU can then execute.

00:06:13.080 --> 00:06:16.990
Starting from the top layer,
it works its way from parent to child

00:06:17.390 --> 00:06:22.590
and sibling to sibling so that the
layers are arranged from back to front.

00:06:24.350 --> 00:06:27.280
Next, this linear pipeline is
passed through the GPU,

00:06:27.540 --> 00:06:30.780
where each layer is composited
into a final texture.

00:06:30.870 --> 00:06:34.790
Some layers can take longer to render,
and this is another common performance

00:06:35.090 --> 00:06:37.220
bottleneck we will discuss shortly.

00:06:37.400 --> 00:06:38.420
Great.

00:06:38.500 --> 00:06:41.300
So once the GPU executes and
renders the image on the right,

00:06:41.360 --> 00:06:44.330
it's ready to be displayed
on the next vSync.

00:06:44.770 --> 00:06:48.140
Each phase of the render loop is
performance sensitive and has a deadline.

00:06:48.320 --> 00:06:50.580
The deadline is the next VSync.

00:06:50.630 --> 00:06:53.790
To hit the target frame rate
and maintain low input latency,

00:06:53.790 --> 00:06:58.620
this entire process is actually
happening in parallel every frame.

00:06:58.740 --> 00:07:01.120
This way,
the pipeline becomes concurrent,

00:07:01.200 --> 00:07:05.530
and our app can prepare a new frame while
the system is rendering the previous one.

00:07:05.670 --> 00:07:09.060
This is why any missed
deadlines are so important.

00:07:09.460 --> 00:07:11.180
Now that you see how
the render loop works,

00:07:11.360 --> 00:07:15.140
let's dive into what types of
hitches you might see in your apps.

00:07:15.330 --> 00:07:20.190
There are two primary types:
commit hitches,

00:07:20.190 --> 00:07:21.140
which happen within the app's process,
and render hitches,

00:07:21.300 --> 00:07:23.630
which happen in the render server.

00:07:23.880 --> 00:07:28.790
A commit hitch is when the app takes
too long to process events or commit.

00:07:29.100 --> 00:07:32.070
Here, the commit takes too long
and misses the deadline.

00:07:32.170 --> 00:07:35.600
So in the next VSync,
the render server has nothing to process.

00:07:35.740 --> 00:07:39.000
It now must wait for the next
VSync to begin rendering.

00:07:39.040 --> 00:07:42.680
And now we have delayed the
frame delivery time by one frame.

00:07:42.760 --> 00:07:45.960
In milliseconds,
that's 16.67 milliseconds

00:07:45.960 --> 00:07:47.500
on an iPhone or iPad.

00:07:47.620 --> 00:07:52.280
We call this delayed duration hitch time,
and we measure it in milliseconds.

00:07:52.820 --> 00:07:56.060
If the commit work took even longer
and went past the next v-sync,

00:07:56.260 --> 00:07:58.470
then the frame would
be late by two frames,

00:07:58.470 --> 00:08:00.700
or 33.34 milliseconds.

00:08:00.910 --> 00:08:06.010
That's 33.34 milliseconds that the
user is not seeing a smooth scroll.

00:08:06.210 --> 00:08:10.020
To understand more about commit hitches
and how you can fix them in your apps,

00:08:10.040 --> 00:08:13.390
check out Find and Fix Hitches
in the Commit phase.

00:08:13.710 --> 00:08:16.330
The second type of
hitch is a render hitch.

00:08:16.450 --> 00:08:19.220
These happen when the render
server is unable to prepare or

00:08:19.220 --> 00:08:21.720
execute our layer tree on time.

00:08:22.010 --> 00:08:26.300
Here, the render execute phase takes too
long and goes over the VSync boundary.

00:08:26.310 --> 00:08:28.500
The frame was therefore
not ready on time,

00:08:28.710 --> 00:08:32.070
and the green frame was displayed
one frame later than expected.

00:08:32.140 --> 00:08:35.330
Once again,
we have a 16 millisecond hitch time.

00:08:36.790 --> 00:08:39.800
To understand more about render hitches
and how to optimize your layer tree,

00:08:39.930 --> 00:08:43.860
check out "Demystify and Eliminate
Hitches in the Render Phase."

00:08:44.760 --> 00:08:46.030
Great.

00:08:46.110 --> 00:08:48.120
So those are the two
main types of hitches.

00:08:48.360 --> 00:08:52.500
Now let's turn our focus to how
we measure and quantify hitches.

00:08:53.060 --> 00:08:55.360
We looked at hitch time
in the previous slides.

00:08:55.440 --> 00:08:57.800
It's very useful when
talking about a single hitch,

00:08:57.870 --> 00:09:00.190
but can become intractable
when discussing longer

00:09:00.240 --> 00:09:04.070
term events like scrolls,
animations, or transitions.

00:09:04.220 --> 00:09:08.490
Firstly, it's difficult to compare unless
each scroll or animation takes

00:09:08.500 --> 00:09:11.260
the exact same amount of time,
and therefore,

00:09:11.340 --> 00:09:13.760
the exact same number of frames.

00:09:13.820 --> 00:09:17.900
What's worse is that iOS devices
do not always update the screen.

00:09:17.990 --> 00:09:20.280
If there are no commits
sent to the render server,

00:09:20.340 --> 00:09:22.130
no new frame is submitted.

00:09:22.460 --> 00:09:27.000
That makes it even harder to compare
hitch time across tests and devices.

00:09:27.000 --> 00:09:30.780
So instead,
we use a metric called hitch time ratio.

00:09:30.870 --> 00:09:36.750
Hitch time ratio is the total hitch time
in an interval divided by its duration.

00:09:36.850 --> 00:09:42.220
Because it's normalized to total time,
we can compare it across experiences.

00:09:42.310 --> 00:09:44.640
It's measured in hitch
milliseconds per second,

00:09:44.740 --> 00:09:47.030
so it represents the amount
of milliseconds the device

00:09:47.040 --> 00:09:49.450
was hitching every second.

00:09:49.530 --> 00:09:52.070
To learn about how you can
use this metric to measure

00:09:52.130 --> 00:09:55.420
your own app performance,
check out What's New in Metric Kit.

00:09:55.470 --> 00:09:58.340
To see how to track hitch
time ratio in your test suite,

00:09:58.380 --> 00:10:01.990
check out Eliminate
Animation Hitches with XCTest.

00:10:02.790 --> 00:10:07.040
Finally, let's look at an example where
hitch time ratio can be used.

00:10:07.100 --> 00:10:10.480
Here, we have 30 frames,
which on an iPhone is half

00:10:10.560 --> 00:10:12.340
a second's worth of work.

00:10:12.370 --> 00:10:16.180
Each frame hits its deadline,
and the user sees no hitches.

00:10:16.230 --> 00:10:20.740
The hitch time is zero,
and the hitch time ratio is also zero.

00:10:21.710 --> 00:10:25.760
But now, we see a display track on the
bottom with disjoint intervals.

00:10:25.880 --> 00:10:28.030
Some frames are on screen
longer than others,

00:10:28.030 --> 00:10:30.730
and some commits and
renders are causing hitches.

00:10:30.830 --> 00:10:35.070
If we add up this hitch time,
we get 100.02 milliseconds.

00:10:35.180 --> 00:10:37.830
Over half a second,
we have a hitch time ratio of

00:10:37.830 --> 00:10:41.190
200.04 milliseconds per second.

00:10:41.300 --> 00:10:42.560
This is just an example.

00:10:42.690 --> 00:10:47.100
In general, these are the target hitch
ratios we recommend and use

00:10:47.100 --> 00:10:48.730
in our tools here at Apple.

00:10:48.860 --> 00:10:51.830
Although this goal is zero
hitch milliseconds per second,

00:10:51.940 --> 00:10:54.970
anything under five hitch milliseconds
per second is considered good and

00:10:54.970 --> 00:10:57.370
mostly unnoticeable by a user.

00:10:57.500 --> 00:11:00.070
Between five and ten hitch
milliseconds per second,

00:11:00.200 --> 00:11:02.860
the user is going to
notice some interruptions,

00:11:03.070 --> 00:11:05.180
and these should be investigated.

00:11:05.260 --> 00:11:08.790
Over ten hitch milliseconds per second,
hitches are greatly impacting

00:11:08.880 --> 00:11:12.510
the user experience,
and you should immediately investigate

00:11:12.510 --> 00:11:14.710
how to optimize your render loop.

00:11:15.400 --> 00:11:18.050
To recap,
today we discussed the render loop and

00:11:18.050 --> 00:11:20.400
how a new frame is displayed to the user.

00:11:20.410 --> 00:11:22.680
We looked at what a hitch
is and the two types,

00:11:22.680 --> 00:11:25.400
a commit hitch and a render hitch.

00:11:25.520 --> 00:11:28.710
Finally, we defined the hitch time
ratio to measure the amount

00:11:28.710 --> 00:11:32.670
of hitching experienced by
users within a given duration.

00:11:33.000 --> 00:11:35.570
To learn more about the types
of hitches and how to catch

00:11:35.570 --> 00:11:38.340
and fix them in your apps,
please check out our two talks on

00:11:38.480 --> 00:11:40.690
commit hitches and render hitches.

00:11:40.810 --> 00:11:42.940
We can't wait to see
your buttery smooth apps,

00:11:42.960 --> 00:11:44.900
and thanks for watching.