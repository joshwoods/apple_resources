WEBVTT

00:00:10.480 --> 00:00:12.000
All right, welcome back.

00:00:12.060 --> 00:00:16.400
Welcome to Integrating
iOS 7 System Technologies.

00:00:16.440 --> 00:00:18.910
My name is Paul Marcos,
and I'm the app services

00:00:18.910 --> 00:00:21.020
evangelist at Apple.

00:00:21.020 --> 00:00:23.350
Now, obviously,
we've been talking about all this

00:00:23.350 --> 00:00:27.200
great new technology in iOS 7,
and there's a ton of it.

00:00:27.200 --> 00:00:32.040
And this is a pretty common slide and a
pretty common scenario for us to be in,

00:00:32.040 --> 00:00:35.360
where every year we have
a major release of iOS.

00:00:35.360 --> 00:00:40.120
And it brings just a whole lot
of new functionality and APIs and

00:00:40.120 --> 00:00:45.220
great stuff for game developers
and for app developers in general.

00:00:45.290 --> 00:00:48.670
But one of the challenges that
I think you all face-- and actually,

00:00:48.670 --> 00:00:51.350
I was talking with some folks
in the lab about this earlier

00:00:51.350 --> 00:00:55.760
today-- is really making sense of,
how do you take this new technology

00:00:56.240 --> 00:00:58.840
and integrate it into your app?

00:00:58.890 --> 00:01:01.240
And what pieces are
most important to you?

00:01:01.240 --> 00:01:04.010
And how do you actually
take that technology and

00:01:04.380 --> 00:01:06.580
use it in a meaningful way?

00:01:06.640 --> 00:01:08.860
And that's how I want to talk about this.

00:01:08.860 --> 00:01:08.860
Thank you.

00:01:08.860 --> 00:01:08.900
Thank you.

00:01:08.900 --> 00:01:12.220
out a couple of new pieces of
technology here and really put it

00:01:12.220 --> 00:01:18.040
in the context of some very specific
user experiences that people have in

00:01:18.040 --> 00:01:23.620
your games and in apps and how you
can apply some of this new technology

00:01:23.620 --> 00:01:26.720
to really enhance those experiences.

00:01:26.720 --> 00:01:30.010
So we're going to go through a
couple of different things here.

00:01:30.080 --> 00:01:33.810
I'm going to talk about the first two:
background transfers and how

00:01:33.810 --> 00:01:36.980
you can use that to minimize
the install time for your app.

00:01:37.150 --> 00:01:41.380
So really enhance the
installation experience.

00:01:41.400 --> 00:01:43.180
Then I'm going to talk
about multitasking,

00:01:43.370 --> 00:01:46.340
some of the new APIs that
John mentioned this morning,

00:01:46.460 --> 00:01:51.560
and how you can use those to really
make your game feel alive and always be

00:01:51.670 --> 00:01:55.140
ready for when someone wants to play it.

00:01:55.140 --> 00:01:57.360
And then third, a colleague,
another Paul,

00:01:57.360 --> 00:02:01.180
is going to come up and we're going
to shift gears a little bit and talk

00:02:01.350 --> 00:02:05.210
about security and privacy and how you
can take advantage of some of the new

00:02:05.330 --> 00:02:06.980
APIs that we have and best practices.

00:02:06.980 --> 00:02:15.940
So let me just dive into
background transfers.

00:02:16.190 --> 00:02:20.620
And the experience, as I mentioned,
the one that I want to focus on

00:02:20.620 --> 00:02:24.660
and explain how you can enhance
really centers around this alert,

00:02:24.660 --> 00:02:25.230
right?

00:02:25.290 --> 00:02:28.330
The cellular download limit alert.

00:02:28.470 --> 00:02:31.460
Which we�� as we mentioned this morning,
we raised from 50

00:02:31.570 --> 00:02:33.700
megabytes to 100 megabytes,
and that's great.

00:02:33.700 --> 00:02:38.510
That means a whole lot of games
can now be installed by users

00:02:38.510 --> 00:02:41.570
even over a cellular connection.

00:02:41.860 --> 00:02:44.310
And this is one of the most
common questions that we get,

00:02:44.440 --> 00:02:50.900
is how do I get my app or my game
under the cellular download limit?

00:02:50.940 --> 00:02:53.630
And that's a fair question,
but it's really,

00:02:53.630 --> 00:02:55.640
it's not quite the right question.

00:02:55.640 --> 00:02:57.180
It's close, but not quite right.

00:02:57.190 --> 00:03:02.830
What I think is the right question is
how do I minimize the install time?

00:03:02.840 --> 00:03:06.160
Because whether you're over
or under the cellular limit,

00:03:06.160 --> 00:03:10.820
that's the experience you really
want to enhance and improve,

00:03:10.820 --> 00:03:14.240
is minimizing the installation time.

00:03:14.830 --> 00:03:19.740
So to do that, I have a very simple
checklist of just three items.

00:03:19.830 --> 00:03:24.380
Taking inventory, using compression,
and downloading things later.

00:03:24.440 --> 00:03:27.450
Now the first two really
are just best practices,

00:03:27.460 --> 00:03:29.200
and I'll go through those in more detail.

00:03:29.200 --> 00:03:34.210
But these are things that apply to all
game developers and all app developers.

00:03:34.420 --> 00:03:38.760
And then the third one is where the
new technology in iOS 7 comes in.

00:03:39.100 --> 00:06:29.100
[ Transcript missing ]

00:06:29.800 --> 00:06:32.960
Now another example,
another case that we see are

00:06:32.960 --> 00:06:38.000
images or artwork that just take
up more space than necessary.

00:06:38.090 --> 00:06:39.700
Here's an example of a button.

00:06:39.760 --> 00:06:44.220
We see this a lot with buttons and
background images where the center

00:06:44.220 --> 00:06:46.700
pixels here really are just duplicated.

00:06:46.700 --> 00:06:50.540
It's this vertical row of pixels
that's duplicated over and over.

00:06:50.540 --> 00:06:56.160
And so there's a lot of pixels in
here that are extra and duplicate.

00:06:56.240 --> 00:07:00.240
So in Xcode 5,
there's a new feature when you add

00:07:00.240 --> 00:07:04.170
images to an asset catalog that
it's called the Xcode slicing.

00:07:04.240 --> 00:07:08.720
And you can come in here and say, well,
these pixels are actually duplicate

00:07:08.720 --> 00:07:10.960
and they can be stretched or tiled.

00:07:10.960 --> 00:07:13.830
And then at build time,
what we can do is we can actually

00:07:13.830 --> 00:07:17.650
take that larger piece of artwork and
just carve it up and compress it down

00:07:17.840 --> 00:07:19.840
and just take the bits that we need.

00:07:19.840 --> 00:07:22.130
So that's another way that
you can save some space.

00:07:22.860 --> 00:07:26.760
So this first item, taking inventory,
really just amounts to... You know,

00:07:26.760 --> 00:07:30.330
get rid of the garbage that might
be laying around in your app bundle.

00:07:30.490 --> 00:07:31.310
So very easy to do.

00:07:32.220 --> 00:07:34.460
Now the second one, use compression.

00:07:34.460 --> 00:07:37.220
And you almost certainly
are already doing this,

00:07:37.230 --> 00:07:40.710
but it doesn't hurt to point it
out and for you to double check.

00:07:41.420 --> 00:07:44.740
And you want to focus on those
things that take up the most space,

00:07:44.850 --> 00:07:45.400
right?

00:07:45.440 --> 00:07:48.650
The ones that's sorted to the
top when you sorted by size.

00:07:49.460 --> 00:07:50.900
Commonly, that's going to be video.

00:07:50.900 --> 00:07:53.580
So make sure you're
using H.264 compression.

00:07:53.580 --> 00:07:58.200
You get, you know, great quality while...
Saving space on disk.

00:07:58.420 --> 00:08:04.050
If your game has audio tracks, right,
most games do, make sure you're using

00:08:04.050 --> 00:08:06.960
AAC compression or at least MP3.

00:08:07.200 --> 00:08:11.170
And if you're using audio
that's at 44.1 kilohertz,

00:08:11.330 --> 00:08:15.440
consider dropping that
sample rate down to 22.05.

00:08:15.500 --> 00:08:17.990
You know, to be honest,
most players are never even

00:08:18.030 --> 00:08:19.760
going to notice the difference.

00:08:19.870 --> 00:08:23.260
Now if your game has a very,
very crafted audio experience,

00:08:23.260 --> 00:08:24.820
that might be different.

00:08:24.980 --> 00:08:25.120
But for the general purpose,
you want to make sure that you're

00:08:25.130 --> 00:08:25.280
using the right compression.

00:08:25.320 --> 00:08:25.320
And if you're using audio
that's at 44.1 kilohertz,

00:08:25.320 --> 00:08:25.360
consider dropping that
sample rate down to 22.05.

00:08:25.580 --> 00:08:29.270
But for the general purpose game,
a lot of them can benefit and

00:08:29.270 --> 00:08:31.340
save some space by doing this.

00:08:31.410 --> 00:08:36.250
And lastly, for big textures that
you might have in OpenGL,

00:08:36.710 --> 00:08:41.120
consider using PVRTC and use
images at four bits per pixel.

00:08:41.540 --> 00:08:47.290
So again, good space savings while
maintaining very good quality.

00:08:47.690 --> 00:08:48.860
So those are the first two items.

00:08:49.130 --> 00:08:52.990
Again, best practices that apply to
every app and game developer.

00:08:53.190 --> 00:08:55.690
And now the third one,
download things later.

00:08:55.700 --> 00:08:57.840
Let me explain what I mean by that.

00:08:57.900 --> 00:09:02.410
The idea here would be to identify
things in your app bundle that you

00:09:02.410 --> 00:09:07.860
would normally submit to the app store,
but that you might be able to separate

00:09:07.980 --> 00:09:13.180
out and not submit them to the app store,
but download them separately

00:09:13.180 --> 00:09:15.820
after the app has been installed.

00:09:16.160 --> 00:09:19.540
So sounds fairly simple,
but it's important to point out that this

00:09:19.540 --> 00:09:21.880
really may not be right for all apps.

00:09:22.120 --> 00:09:24.100
And that's fine if it isn't.

00:09:24.170 --> 00:09:30.040
If you can't provide a great
user experience by separating

00:09:30.160 --> 00:09:33.130
pieces of your game out,
then don't do that.

00:09:33.230 --> 00:09:39.260
Leave them all bundled together
and focus on the first two items,

00:09:39.260 --> 00:09:39.260
and then you'll get
some good space savings.

00:09:39.480 --> 00:09:42.590
And there's really no one right
answer for how to do this.

00:09:42.800 --> 00:09:46.600
So you need to evaluate this for
your game and your experience.

00:09:46.690 --> 00:09:49.740
But I think there's a couple categories
where it's very common that you could.

00:09:49.740 --> 00:09:52.770
And I'll go through a few
scenarios in a second.

00:09:53.070 --> 00:09:55.110
The other thing to point out
is this will almost certainly

00:09:55.160 --> 00:09:56.960
add complexity to your game,
right?

00:09:56.960 --> 00:10:00.510
You have to probably represent
somehow to the user what the

00:10:00.510 --> 00:10:04.360
state of these extra files are,
whether they're downloaded or not.

00:10:04.380 --> 00:10:08.780
You have to handle cases where they're
not downloaded and you need them.

00:10:08.780 --> 00:10:10.790
Maybe the disk filled up,
so you have to deal

00:10:10.910 --> 00:10:12.150
with disk space issues.

00:10:12.190 --> 00:10:14.720
It also complicates your testing matrix.

00:10:14.720 --> 00:10:18.900
You just have more scenarios to verify
that your game functions correctly in.

00:10:18.900 --> 00:10:21.150
So there's a lot of reasons
why this might add more

00:10:21.150 --> 00:10:22.620
complexity than it's worth.

00:10:22.740 --> 00:10:26.090
But there's also a lot of
benefit if you consider doing it.

00:10:26.200 --> 00:10:30.060
So let me go through a couple strategies
that you might consider employing.

00:10:30.100 --> 00:10:34.390
The first is simply download
these extra resources after your

00:10:34.390 --> 00:10:36.190
app has launched the first time.

00:10:36.200 --> 00:10:40.590
So after your game gets installed
and someone taps on it to launch it,

00:10:40.630 --> 00:10:43.150
figure out what platform you're on.

00:10:43.260 --> 00:10:44.740
Am I on an iPhone or an iPad?

00:10:44.860 --> 00:10:48.260
Is it a three and a half inch
iPhone or a four inch iPhone?

00:10:48.260 --> 00:10:51.840
Is this an iPad that has retina
display or is it an iPad 2?

00:10:52.480 --> 00:10:54.970
And then kind of figure
out which resources,

00:10:55.060 --> 00:10:59.400
which subset of your resources you
would need and go download just those.

00:10:59.500 --> 00:11:01.380
So that's one approach.

00:11:01.480 --> 00:11:06.230
Another one that I think may apply
to more apps and games especially is

00:11:06.320 --> 00:11:11.840
to lazily load these extra resources
as the need for them approaches.

00:11:11.840 --> 00:11:14.940
In a game, it's a perfect example.

00:11:14.940 --> 00:11:17.320
If you have a game that
has a linear progression,

00:11:17.320 --> 00:11:19.350
you have 50 levels in your game.

00:11:19.360 --> 00:11:22.290
When somebody installs your app,
they're probably going to start.

00:11:22.370 --> 00:11:22.460
They're probably going to start.

00:11:22.460 --> 00:11:24.300
They're probably going to start
at level zero or level one,

00:11:24.320 --> 00:11:26.010
depending if you're zero based or not.

00:11:26.040 --> 00:11:31.020
And they're going to need maybe
the first few levels immediately,

00:11:31.020 --> 00:11:35.640
but they probably won't need levels
20 through 50 until later on.

00:11:35.640 --> 00:11:38.830
So consider separating those
out and then download them when

00:11:38.830 --> 00:11:40.880
they're approaching those levels.

00:11:40.900 --> 00:11:43.920
You can do this kind of
transparently in the background,

00:11:43.920 --> 00:11:44.720
actually.

00:11:44.720 --> 00:11:47.810
And that's the new technology
that we have in iOS 7 that

00:11:47.810 --> 00:11:50.330
you could consider using,
which is this new

00:11:50.330 --> 00:11:52.100
background transfer service.

00:11:52.440 --> 00:11:55.180
What this is,
if you haven't seen it already,

00:11:55.180 --> 00:11:59.160
it's just a service to
upload and download data,

00:11:59.160 --> 00:12:03.470
and it's uploaded or
downloaded in the background.

00:12:03.480 --> 00:12:07.600
And when I say background here,
I don't mean in like a background

00:12:07.610 --> 00:12:09.330
thread in your process.

00:12:09.450 --> 00:12:13.140
I actually mean it's done in
an entirely different process.

00:12:13.140 --> 00:12:17.400
It's handled by a system daemon that's
running in the background in iOS.

00:12:19.800 --> 00:12:23.940
What that means is your game can actually
be suspended or it can be terminated.

00:12:23.940 --> 00:12:27.890
If we're in a low memory situation,
we might terminate your game.

00:12:28.550 --> 00:12:31.330
And the transfer will continue
being done because it's being

00:12:31.390 --> 00:12:34.090
handled by a system service now.

00:12:34.300 --> 00:14:23.700
[ Transcript missing ]

00:14:24.140 --> 00:14:26.450
So now that you get a
session object back,

00:14:26.450 --> 00:14:29.120
you're ready to begin adding tasks to it,
right?

00:14:29.120 --> 00:14:32.000
Adding requests to be downloaded.

00:14:32.230 --> 00:14:36.210
And you do that simply by
having a URL to a remote asset,

00:14:36.480 --> 00:14:38.300
you know,
these separated out files that you

00:14:38.300 --> 00:14:40.060
took out of your app store bundle.

00:14:40.060 --> 00:14:43.540
And you ask the session for a
download task with that URL.

00:14:43.540 --> 00:14:47.390
And when you get that back,
that's the object that represents the

00:14:47.390 --> 00:14:50.100
task happening in this background daemon.

00:14:50.100 --> 00:14:53.370
And by default,
it's paused so the transfer

00:14:54.010 --> 00:14:56.530
doesn't start immediately.

00:14:56.730 --> 00:14:58.890
And in order to start it,
you just simply call

00:14:58.890 --> 00:15:01.300
resume on this task object,
and that will start in

00:15:01.300 --> 00:15:02.650
the background then.

00:15:02.830 --> 00:15:07.030
Now these tasks�� these task
objects are�� they support all the

00:15:07.220 --> 00:15:11.170
common operations that you would
expect of a network transfer.

00:15:11.420 --> 00:15:13.890
You can suspend them,
you can resume them like we saw,

00:15:13.890 --> 00:15:14.800
you can cancel them.

00:15:15.120 --> 00:15:18.090
You can query for progress
and things like that.

00:15:18.580 --> 00:15:23.810
These are the objects that you might use
to build a UI representation around them.

00:15:24.260 --> 00:15:28.730
Now, there's a new UI application
delegate callback that will be used

00:15:28.730 --> 00:15:33.470
and has the methods called on the
delegate object that you passed in.

00:15:33.680 --> 00:15:36.600
And then importantly, and I'll talk about
this again in a second,

00:15:36.640 --> 00:15:40.740
there's a completion handler passed
to your UI application delegate.

00:15:40.740 --> 00:15:44.040
And this is kind of a new
emerging pattern that we have for

00:15:44.040 --> 00:15:46.010
a few different pieces of API.

00:15:46.420 --> 00:15:49.060
In this delegate method,
you'll commonly reestablish

00:15:49.060 --> 00:15:52.250
your connection to the session,
the NSURL session.

00:15:52.690 --> 00:15:57.300
You'll get the tasks that are
completed and then handle the results.

00:15:57.500 --> 00:15:59.270
Now as you implement
this delegate method,

00:15:59.280 --> 00:16:01.640
there's a few things,
there's a few really important

00:16:01.640 --> 00:16:03.080
things you should be aware of.

00:16:03.160 --> 00:16:07.890
The first is when this method is called,
you only have a short amount of time

00:16:07.930 --> 00:16:10.900
to execute if you're in the background.

00:16:11.030 --> 00:16:14.530
And by short amount of time,
I mean about 30 seconds, you know,

00:16:14.720 --> 00:16:16.230
seconds rather than minutes.

00:16:16.290 --> 00:16:20.370
You can inspect the amount of time you
have available using the UI application

00:16:20.470 --> 00:16:22.700
background time remaining property.

00:16:22.700 --> 00:16:25.930
That'll tell you how much
time you have left to process.

00:16:27.010 --> 00:16:29.610
And that completion handler
that I mentioned that was

00:16:29.610 --> 00:16:32.790
passed into the delegate,
it's critical that you call it and

00:16:33.020 --> 00:16:34.870
you call it as soon as possible.

00:16:34.880 --> 00:16:38.900
Because if you don't call that
indicating that you're done handling

00:16:38.900 --> 00:16:42.700
the results of the transfer,
then iOS may terminate your app.

00:16:42.770 --> 00:16:46.590
And this is very similar to
if your game doesn't launch or

00:16:46.700 --> 00:16:51.520
suspend or resume fast enough,
the iOS may terminate the app because,

00:16:51.820 --> 00:16:55.510
you know,
it's taking too long and it may be stuck.

00:16:56.840 --> 00:17:01.500
Now, it's also very important to
be aware of data protection.

00:17:01.500 --> 00:17:04.890
As you adopt this new API,
this may be the first time

00:17:04.890 --> 00:17:08.670
that your game is actually in
the background and running.

00:17:08.800 --> 00:17:11.140
And in some scenarios,
when you're in the background,

00:17:11.140 --> 00:17:14.900
if the device is locked and
there's a passcode on the device,

00:17:15.150 --> 00:17:20.130
then some files on disk and items in
the key chain may not be available.

00:17:20.230 --> 00:17:21.960
And this is because of
how data protection works.

00:17:24.120 --> 00:17:25.250
So if you're not familiar
with data protection,

00:17:25.250 --> 00:17:27.280
this is a really important
thing to read up on.

00:17:27.570 --> 00:17:29.890
And actually,
in the security part of this talk,

00:17:29.890 --> 00:17:32.690
we're going to go into more
details on data protection.

00:17:33.790 --> 00:17:37.900
Once these transfers are done,
NSURL Session is only going to hold

00:17:37.980 --> 00:17:41.640
onto this data on disk temporarily,
just up until the point the

00:17:41.650 --> 00:17:43.690
delegate callback is finished.

00:17:43.700 --> 00:17:47.700
So if you need to keep this data
for an extended period of time,

00:17:47.700 --> 00:17:51.700
which in my example of downloading
these extra assets for your game,

00:17:51.700 --> 00:17:54.300
you probably do,
you need to take responsibility

00:17:54.300 --> 00:17:57.640
and move that into your app's
sandbox and store it somewhere.

00:17:57.700 --> 00:18:00.510
And as you're deciding
where to store things,

00:18:00.610 --> 00:18:03.740
it's important that you
read and understand the iOS

00:18:03.890 --> 00:18:05.700
data storage guidelines.

00:18:05.700 --> 00:18:09.540
The app review team will be
enforcing these guidelines,

00:18:09.540 --> 00:18:13.700
which spell out what types of
files should go where on disk.

00:18:13.920 --> 00:18:16.480
What types of things should go
in the app support directory,

00:18:16.480 --> 00:18:18.700
in the documents directory, in temporary.

00:18:18.700 --> 00:18:23.710
And it also explains which of those
files will by default be backed up,

00:18:24.230 --> 00:18:26.360
especially to a user's iCloud backup.

00:18:26.770 --> 00:18:27.690
And we're concerned about that.

00:18:27.700 --> 00:18:30.690
We're concerned about the usage
of space in users' iCloud backups.

00:18:30.780 --> 00:18:34.700
And that's why it's important to be
aware of what's getting backed up.

00:18:34.700 --> 00:18:38.650
And this is one of the common causes
for rejection by the app review team,

00:18:38.790 --> 00:18:43.700
is having files in the wrong place and
they get included in iCloud backups.

00:18:43.700 --> 00:18:46.320
So to exclude things
from a user's backup,

00:18:46.400 --> 00:18:47.700
it's very simple.

00:18:47.700 --> 00:18:51.790
There's an API on NSURL,
so wherever you copied these files to,

00:18:51.790 --> 00:18:54.920
if you need to exclude them,
just call this set

00:18:55.040 --> 00:18:56.700
resource value for key.

00:18:56.700 --> 00:18:57.700
And you set this one particular key.

00:18:57.700 --> 00:19:00.650
And this URL is excluded from backup key.

00:19:00.860 --> 00:19:02.830
And that will keep it
out of the user's backup,

00:19:02.880 --> 00:19:03.700
iCloud backup.

00:19:03.700 --> 00:19:05.690
And it will keep the
app review team happy.

00:19:05.700 --> 00:19:09.700
So those are the three items
for minimizing install time.

00:19:09.700 --> 00:19:15.520
And these, especially the first two,
may seem really basic and really obvious.

00:19:15.700 --> 00:19:19.400
But we see this so frequently as
we review apps with developers that

00:19:19.400 --> 00:19:21.700
it's really worth pointing out here.

00:19:21.700 --> 00:19:24.820
And it's worth, you know,
you including in especially

00:19:24.820 --> 00:19:26.700
your pre-submission checklist.

00:19:26.700 --> 00:19:30.670
As you go through your checklist
of items before you submit

00:19:30.670 --> 00:19:34.160
something to the app store,
you know, go through these items and just

00:19:34.160 --> 00:19:36.700
make sure that you're minimizing
the size of your app bundle.

00:19:36.710 --> 00:19:39.690
Because that will give a
great install experience.

00:19:39.700 --> 00:19:44.510
So using background transfer, you can,
you know, make sure you clean up and

00:19:44.770 --> 00:19:48.560
compress things and then consider
splitting extra files out.

00:19:48.700 --> 00:19:53.700
NSURL session is really the
future of foundation networking.

00:19:53.700 --> 00:19:55.700
So if you're using the
networking at the foundation,

00:19:55.700 --> 00:19:55.700
you're going to have to make
sure that you're using the

00:19:55.700 --> 00:19:55.700
network at the foundation.

00:19:55.700 --> 00:19:59.320
So if you're using the networking
at the foundation framework layer,

00:19:59.320 --> 00:20:01.700
you want to be moving
now to NSURL session.

00:20:01.750 --> 00:20:04.890
Eventually,
NSURL connection will get deprecated

00:20:04.890 --> 00:20:06.700
in favor of NSURL session.

00:20:06.700 --> 00:20:08.680
So start that transition now.

00:20:11.030 --> 00:20:13.940
And be careful with the iOS
data storage guidelines.

00:20:13.940 --> 00:20:16.530
Just make sure you're putting the
right things in the right place and

00:20:16.540 --> 00:20:20.100
keeping things out of the user's
backup that shouldn't be there.

00:20:20.240 --> 00:20:22.260
So that's background transfers.

00:20:22.400 --> 00:20:25.290
So let me move on to multitasking.

00:20:25.950 --> 00:20:30.840
As John talked about this morning,
the multitasking APIs and the UI in

00:20:30.840 --> 00:20:33.880
iOS 7 have evolved quite a bit.

00:20:33.880 --> 00:20:36.420
Now this is what users
see in the app switcher.

00:20:36.620 --> 00:20:40.360
They see a great snapshot of your app,
your game.

00:20:40.720 --> 00:20:44.520
They can see the state of the app,
what's happening in there.

00:20:44.640 --> 00:20:47.760
And the experience I want to focus on
that I want all of you to consider,

00:20:47.760 --> 00:20:51.360
how you can improve this,
is by keeping that app

00:20:51.360 --> 00:20:56.400
snapshot up to date,
right, that will really present to the

00:20:56.430 --> 00:20:59.020
user that your game is alive.

00:20:59.290 --> 00:21:02.780
And a lot of games have
state that changes over time.

00:21:02.780 --> 00:21:06.760
And it's really important to reflect
that state here so that as users

00:21:06.760 --> 00:21:11.470
are swiping through these apps,
they can really quickly see, oh, look,

00:21:11.540 --> 00:21:14.660
something's happened in my game,
so let me go see it.

00:21:14.660 --> 00:21:17.110
You know, there's three examples
that I want to call out,

00:21:17.260 --> 00:21:19.830
three kind of styles of games
where I think this can really help.

00:21:20.420 --> 00:21:25.900
Here's Badland, incredibly great game.

00:21:25.900 --> 00:21:30.270
And it's actually not really right
because this is actually showing as if

00:21:30.350 --> 00:21:34.780
I was in the middle of playing the game,
right, which is what the state

00:21:34.780 --> 00:21:36.140
was when I left it.

00:21:36.180 --> 00:21:39.860
But when I go back into the app,
that's not the state that I'm in.

00:21:39.920 --> 00:21:43.920
When I go back into Badland,
the state I'm in is actually paused.

00:21:44.100 --> 00:21:46.180
So the game got paused,
but that wasn't reflected

00:21:46.180 --> 00:21:46.960
in the snapshot.

00:21:47.170 --> 00:21:50.010
So that's the type of thing
that I want you to think about.

00:21:50.060 --> 00:21:54.280
How can you make the snapshots
more accurate and more up to date?

00:21:54.540 --> 00:21:57.240
Now another style of game,
here's Clash of Clans.

00:21:57.420 --> 00:22:01.660
So a resource management game where
there are things in these games

00:22:01.660 --> 00:22:03.980
that actually take real world time.

00:22:04.080 --> 00:22:06.590
I'm training some new troops here.

00:22:06.640 --> 00:22:07.980
It's a little hard to
see in the screenshot,

00:22:08.070 --> 00:22:11.510
but I've got about an hour of time
left before those troops are trained

00:22:11.630 --> 00:22:13.410
and ready to go do battle for me.

00:22:14.620 --> 00:22:17.220
Now over time,
what I'd love to see is kind

00:22:17.240 --> 00:22:20.960
of that time being updated
periodically as I use my device.

00:22:20.960 --> 00:22:24.400
So that's another example where
updating that snapshot can

00:22:24.510 --> 00:22:26.320
really improve the experience.

00:22:27.010 --> 00:22:29.450
You know, or Letterpress,
another great game.

00:22:29.450 --> 00:22:34.560
Here maybe what I want to see is as
push notifications come in indicating

00:22:34.640 --> 00:22:37.860
that somebody's turn has been taken,
you know,

00:22:37.860 --> 00:22:39.460
maybe I want to see that reflected here.

00:22:39.460 --> 00:22:42.370
Now the little triangle
has moved back over to me.

00:22:43.570 --> 00:22:47.340
So those are the types of things that you
can do with these new multitasking APIs.

00:22:48.460 --> 00:22:53.220
So let me go through the typical sequence
of how these app snapshots come into

00:22:53.300 --> 00:22:56.460
existence and then what's new in iOS 7.

00:22:57.620 --> 00:23:01.780
So the typical scenario is your game gets
launched and you'll update your state,

00:23:01.850 --> 00:23:04.200
you'll contact your server,
you'll get the latest game state,

00:23:04.200 --> 00:23:06.470
you'll figure out, you know,
are the troops trained yet or not.

00:23:06.490 --> 00:23:09.450
And then you'll update the
UI and show that to the user.

00:23:09.490 --> 00:23:12.830
And that's kind of that ever present,
like you launch a game or launch

00:23:12.830 --> 00:23:15.540
an app and you have to wait for
the spinner to finish spinning

00:23:15.780 --> 00:23:17.840
before you're ready to use the game.

00:23:17.840 --> 00:23:20.220
That's what we want to get rid of, right?

00:23:20.290 --> 00:23:22.130
Make your games always ready.

00:23:35.890 --> 00:23:35.890
So you update your UI,
player plays the game,

00:23:35.890 --> 00:23:35.890
they're having a great time,
my troops are ready, I go to battle.

00:23:35.890 --> 00:23:35.890
Then I hit the home button, I leave.

00:23:35.890 --> 00:23:35.890
And now the app suspends and iOS
will take the snapshot at that point.

00:23:36.230 --> 00:23:39.740
Now in this flow,
this one is really user driven.

00:23:39.830 --> 00:23:43.220
And in this case,
at the end where the snapshot is taken,

00:23:43.220 --> 00:23:46.150
you know,
that's where you might want to reflect

00:23:46.150 --> 00:23:50.570
the state of the game being paused
just before the snapshot gets taken.

00:23:50.760 --> 00:23:53.460
Now in iOS 7,
we've got a couple new entry

00:23:53.460 --> 00:23:57.690
points into this flow that are
not driven by user activity.

00:23:57.710 --> 00:24:00.000
They're actually driven by iOS.

00:24:00.070 --> 00:24:04.480
And these are two new background
modes called remote notification

00:24:04.480 --> 00:24:06.200
and background fetch.

00:24:06.620 --> 00:24:08.740
These are new background modes,
as I mentioned.

00:24:08.740 --> 00:24:12.990
You can configure them in
Xcode's capabilities pane.

00:24:13.110 --> 00:24:15.530
And if you look at the
list of background modes,

00:24:15.610 --> 00:24:18.000
we now have two new
ones down at the bottom.

00:24:18.150 --> 00:24:20.950
And the interesting thing
about these background modes

00:24:20.950 --> 00:24:24.800
is unlike the other ones,
which are very narrowly scoped, right,

00:24:24.800 --> 00:24:29.060
they have a very specific purpose,
like background audio playing or

00:24:29.110 --> 00:24:34.480
location updates or if you're a VoIP app,
those are specific background modes

00:24:34.540 --> 00:24:36.400
that we only let certain apps use.

00:24:36.480 --> 00:24:41.300
These two new ones are general purpose,
and they're usable by everybody.

00:24:41.370 --> 00:24:43.960
And actually,
we want them to be used by everybody,

00:24:44.070 --> 00:24:46.880
because we think it can
improve these experiences.

00:24:48.270 --> 00:24:52.930
Now, because they're initiated
and really controlled by iOS,

00:24:53.050 --> 00:24:55.800
we can do so in a power smart way.

00:24:55.860 --> 00:24:57.840
Another thing that John talked
about this morning.

00:24:57.900 --> 00:25:01.810
We can ensure that we're not going to
be draining the battery while letting

00:25:01.920 --> 00:25:04.070
you have this background time to run.

00:25:04.720 --> 00:25:08.680
So let me go through both of these and
explain a little bit more what they are.

00:25:08.750 --> 00:25:10.800
The first one, remote notifications.

00:25:11.000 --> 00:25:15.440
What this means is when a push
notification is delivered to

00:25:15.590 --> 00:25:18.770
an iOS device for your app,
with the new remote

00:25:18.770 --> 00:25:22.140
notification background mode,
your app will get that even

00:25:22.140 --> 00:25:23.840
if it's in the background.

00:25:23.840 --> 00:25:26.800
And this is a big departure from iOS 6.

00:25:26.800 --> 00:25:30.700
Where in iOS 6,
you would only get that push notification

00:25:30.960 --> 00:25:33.380
if you happen to be the front most app.

00:25:33.540 --> 00:25:34.580
If you happen to be remote notification,
you would only get that push notification

00:25:34.580 --> 00:25:34.580
if you happen to be the front most app.

00:25:34.600 --> 00:25:38.660
So it's when you're running and your app
was front most when the push came in.

00:25:38.780 --> 00:25:42.520
Or second, when the user tapped on the
action button to launch your app.

00:25:42.660 --> 00:25:45.910
But at that point, you know,
it's kind of you're already behind

00:25:45.910 --> 00:25:49.090
the game because the user said,
yes, I want to act on this.

00:25:49.090 --> 00:25:52.480
But now you start the process of
doing your update and whatnot.

00:25:52.480 --> 00:25:54.600
And that's where the spinner comes in.

00:25:54.600 --> 00:25:57.910
So with remote notifications,
when the alert goes up on screen

00:25:57.910 --> 00:26:00.300
or when the sound is played,
your app is launched

00:26:00.500 --> 00:26:01.900
simultaneous with that.

00:26:01.910 --> 00:26:04.580
And that's where the spinner comes in.

00:26:04.580 --> 00:26:06.810
And you can start updating immediately.

00:26:06.810 --> 00:26:11.050
So that gives you the chance to be
up to date when the user taps on the

00:26:11.050 --> 00:26:13.610
action button and gets into your app.

00:26:13.610 --> 00:26:15.580
So you're already ready.

00:26:18.000 --> 00:26:20.800
The way you do this is
in your push payload,

00:26:20.870 --> 00:26:23.140
which might look like this
if you just have an alert,

00:26:23.260 --> 00:26:25.990
you add this content available key.

00:26:26.130 --> 00:26:30.260
And that's the indication that we
should deliver the push to your app

00:26:30.270 --> 00:26:32.610
even if you're in the background.

00:26:32.730 --> 00:26:33.560
And so that's great.

00:26:33.630 --> 00:26:36.500
That's a really nice
improvement over iOS 6.

00:26:36.640 --> 00:26:40.240
But it's not what I think
is really cool in iOS 7.

00:26:40.420 --> 00:26:43.540
What's really great is something
that you've all asked for

00:26:43.540 --> 00:26:45.110
for quite a few years now.

00:26:45.390 --> 00:26:49.810
And that's the ability to
send pushes that are silent.

00:26:50.140 --> 00:26:54.050
And now in iOS 7,
if you have a push notification and you

00:26:54.050 --> 00:26:59.490
omit the alert or sound or badge key and
you only include the content available,

00:26:59.500 --> 00:27:01.180
you can have custom
stuff in there as well,

00:27:01.180 --> 00:27:05.600
but if it only has the content available,
then that push notification will be

00:27:05.600 --> 00:27:10.320
delivered to your app even if it's not
running and there's no user visible

00:27:10.320 --> 00:27:12.950
indication that that push came in.

00:27:14.060 --> 00:27:15.680
So it's kind of a private
channel of communication

00:27:15.680 --> 00:27:17.550
from your server to your app.

00:27:17.900 --> 00:27:20.080
And that is something that
a lot of you have asked for.

00:27:20.080 --> 00:27:22.980
So we're really excited
to bring this into iOS 7.

00:27:23.470 --> 00:27:24.960
So that's remote notifications.

00:27:24.960 --> 00:27:28.980
And the second new background
mode is called background fetch.

00:27:29.640 --> 00:27:33.460
And what this is designed to do is
give you additional opportunities

00:27:33.460 --> 00:27:36.940
to execute in the background
primarily for the intention of,

00:27:36.940 --> 00:27:40.670
you know, fetching new content from your
servers or social feeds or

00:27:40.790 --> 00:27:42.890
wherever it might be coming from.

00:27:43.890 --> 00:27:47.400
And in both of these cases,
in both of these background modes,

00:27:47.400 --> 00:27:51.260
this is what gives you the opportunity
to do some kind of fetch or do

00:27:51.260 --> 00:27:55.470
some kind of work and then update
your UI and update the snapshot.

00:27:55.670 --> 00:28:00.120
As I mentioned for background fetch,
this is initiated by iOS

00:28:00.300 --> 00:28:02.200
and is based on two things.

00:28:02.280 --> 00:28:06.730
Either previous usage of your game where,
you know, in the letterpress example,

00:28:06.740 --> 00:28:08.970
I play that usually in the
morning and then in the evening.

00:28:08.970 --> 00:28:14.460
And iOS notices that pattern and it
will begin launching letterpress a

00:28:14.480 --> 00:28:18.980
little bit before I usually go into
the game so that it has a chance to

00:28:18.980 --> 00:28:21.400
get up to date before I launch it.

00:28:21.460 --> 00:28:25.340
The second time is just when
it's a good opportunity.

00:28:25.780 --> 00:28:28.910
When a device is plugged in,
when we know we're on a network,

00:28:29.310 --> 00:28:32.210
when the screen is turned on,
the user is actually

00:28:32.210 --> 00:28:33.630
interacting with the app.

00:28:33.700 --> 00:28:35.920
You know,
we typically have a lot of horsepower

00:28:35.920 --> 00:28:37.380
that's not really being used.

00:28:37.500 --> 00:28:40.690
So we can take some of that time
and that processing power and let

00:28:40.740 --> 00:28:42.600
apps do stuff in the background.

00:28:42.620 --> 00:28:45.850
So the way of thinking about
this is just for your game,

00:28:45.850 --> 00:28:48.990
be prepared to be launched
in the background if you add

00:28:49.090 --> 00:28:50.880
this new background mode.

00:28:51.490 --> 00:28:52.880
And that will give you
some extra time to run.

00:29:21.860 --> 00:29:25.770
And when you're updating your content,
a couple similar important things

00:29:25.770 --> 00:29:29.400
to consider is call that completion
handler as soon as possible.

00:29:29.450 --> 00:29:31.970
You have this short amount of time,
but it should be plenty of

00:29:31.970 --> 00:29:33.240
time to do a simple update.

00:29:33.240 --> 00:29:36.100
But you do want to keep
your fetches small.

00:29:36.360 --> 00:29:40.370
Maybe fetch just the metadata,
the new game scores, or whose move it is,

00:29:40.470 --> 00:29:44.500
and maybe just the minimal amount
of information about that last move.

00:29:44.540 --> 00:29:48.900
If you do have large pieces of data
that you now know you want to download,

00:29:48.900 --> 00:29:51.890
well, that's a great use for the
background transfer service

00:29:52.000 --> 00:29:53.160
that I just talked about.

00:29:53.190 --> 00:29:58.270
So you can use these new technologies
in conjunction with each other.

00:29:58.830 --> 00:30:01.760
And for a lot of games, you use OpenGL.

00:30:01.760 --> 00:30:05.260
And up to this point,
we've told you don't use

00:30:05.260 --> 00:30:06.610
OpenGL in the background.

00:30:06.690 --> 00:30:09.400
In fact,
your app will crash if you do that.

00:30:09.580 --> 00:30:14.580
So now in the context of these new
UI application delegate callbacks,

00:30:14.860 --> 00:30:18.900
it is okay to use OpenGL for the
purposes of updating your UI in

00:30:18.900 --> 00:30:21.360
order to update that snapshot.

00:30:41.130 --> 00:30:41.130
If you can render just a single frame,
that's great.

00:30:41.130 --> 00:30:41.130
Just do that.

00:30:41.130 --> 00:30:41.130
Do the minimal amount of work you need.

00:30:41.130 --> 00:30:41.130
And be careful about loading in lots
of resources if they had been unloaded.

00:30:41.130 --> 00:30:41.130
So you want to be minimal
usage of memory and time.

00:30:41.130 --> 00:30:41.130
But it is okay to use OpenGL.

00:30:41.130 --> 00:30:41.130
That's the important point.

00:30:41.130 --> 00:30:43.300
And again, be aware of data protection.

00:30:43.300 --> 00:30:47.560
One of the common things that we've
already seen by developers is when you

00:30:47.560 --> 00:30:51.880
need to go do a fetch from your server,
you probably need to sign in

00:30:51.880 --> 00:30:53.480
somehow and have credentials.

00:30:53.480 --> 00:30:57.510
And when data protection is enforced,
if the device is locked and

00:30:57.650 --> 00:31:01.400
you're being invoked to do this
background fetch in the background,

00:31:01.700 --> 00:31:04.400
you may not get access
to those credentials.

00:31:04.400 --> 00:31:06.660
So just handle that case correctly.

00:31:06.660 --> 00:31:08.730
We've seen it trip a few
developers up already.

00:31:09.430 --> 00:31:13.050
And we'll talk again more about
data protection in a moment.

00:31:13.050 --> 00:31:17.230
So that's multitasking and how you
can use the new APIs to really improve

00:31:17.230 --> 00:31:19.490
the experience of the app snapshots.

00:31:19.510 --> 00:31:20.840
So keep them up to date.

00:31:20.840 --> 00:31:23.070
Keep your app state always ready.

00:31:23.070 --> 00:31:26.790
Remote notifications let you get
these push notifications even

00:31:26.850 --> 00:31:28.790
when you're in the background.

00:31:28.790 --> 00:31:32.780
And background fetch are just new
opportunities to fetch and update

00:31:32.780 --> 00:31:35.310
state while you're in the background.

00:31:35.840 --> 00:31:38.710
And last time for me to say this,
be aware of data protection.

00:31:39.270 --> 00:31:40.710
And when the device is locked.

00:31:41.340 --> 00:31:44.280
Now, for both of these first two
items that I've covered,

00:31:44.280 --> 00:31:46.720
we had a couple WWDC sessions
this past summer.

00:31:46.740 --> 00:31:50.520
What's new with multitasking obviously
went into the multitasking APIs,

00:31:50.520 --> 00:31:54.280
and I've only scratched the surface
on here just to give you an idea.

00:31:54.950 --> 00:31:57.240
What's new in foundation networking?

00:31:57.260 --> 00:32:01.400
Talked about NSURL session and not
only the background transfer service,

00:32:01.480 --> 00:32:05.730
but the other pieces of functionality
that you can use for NSURL session.

00:32:05.730 --> 00:32:08.430
So definitely check those sessions out.

00:32:10.290 --> 00:32:12.530
So that's background
transferring multitasking.

00:32:12.650 --> 00:32:15.010
Now for the third item,
I'll hand it over to my

00:32:15.010 --> 00:32:17.800
colleague Paul Danbold to
cover security and privacy.

00:32:17.980 --> 00:32:21.540
Paul Danbold:
Let's start by just making sure we all

00:32:21.540 --> 00:32:24.600
agree security and privacy are important.

00:32:24.860 --> 00:32:26.600
They're in the news every day.

00:32:26.710 --> 00:32:30.390
But thanks to a lot of hard
work on our side and your side,

00:32:30.450 --> 00:32:33.970
very rarely is iOS mentioned
or your apps or games.

00:32:34.100 --> 00:32:37.570
So we're in a good spot,
but we want to maintain that

00:32:37.670 --> 00:32:40.270
reputation and get even better.

00:32:40.900 --> 00:32:43.650
Here's what we're going to talk about.

00:32:43.820 --> 00:32:47.180
Just to let you know in advance,
on the security side,

00:32:47.390 --> 00:32:49.350
we'll talk about data protection.

00:32:49.620 --> 00:32:52.510
And Paul was talking about
that a little bit earlier on.

00:32:52.570 --> 00:32:56.120
Protecting the data that
you send on the wire,

00:32:56.120 --> 00:32:57.190
so to speak.

00:32:57.360 --> 00:32:59.280
A little bit about defensive coding.

00:32:59.410 --> 00:33:02.560
And then when we get to privacy,
we'll be talking about identifiers,

00:33:02.560 --> 00:33:06.050
about data isolation,
which are the mechanisms that

00:33:06.070 --> 00:33:09.360
arbitrate access to personal
data and device features.

00:33:09.360 --> 00:33:14.820
And the care that needs to be taken
with logging runtime events and glitches

00:33:14.900 --> 00:33:17.790
in ways that protect user privacy.

00:33:18.720 --> 00:33:23.100
So on the security side,
I'm going to start by just with a

00:33:23.100 --> 00:33:26.340
couple of high level comments here.

00:33:26.570 --> 00:33:30.460
You know,
do these kids look like security experts?

00:33:30.500 --> 00:33:35.080
And quite frankly today, maybe they are,
but most of the people who play

00:33:35.260 --> 00:33:37.250
your games probably aren't.

00:33:37.550 --> 00:33:40.250
You know, it's fine to ask for a
login name and password,

00:33:40.370 --> 00:33:44.230
but generally,
it's futile and just plain annoying

00:33:44.720 --> 00:33:50.300
to present any kind of security alerts
to the people playing your games.

00:33:50.330 --> 00:33:53.510
So you've got to do the best
you can to protect the personal

00:33:53.510 --> 00:33:57.850
data that your apps have access
to without pestering the user.

00:33:57.960 --> 00:34:02.010
In other words,
good security is mostly invisible.

00:34:02.450 --> 00:34:05.870
And another thing to remember
is that there's no such

00:34:05.990 --> 00:34:08.340
thing as unbeatable security.

00:34:08.380 --> 00:34:11.700
You know, there will always be bad guys
looking for vulnerabilities in

00:34:11.700 --> 00:34:14.100
the OS and possibly in your games.

00:34:14.170 --> 00:34:16.550
But if you do the things that
we're going to be talking

00:34:16.590 --> 00:34:19.870
about in the next few minutes,
you're not going to be a soft target.

00:34:19.870 --> 00:34:24.350
And attackers being, you know,
just human beings like all of us,

00:34:24.350 --> 00:34:27.940
are likely to gravitate towards easier,
you know,

00:34:28.000 --> 00:34:34.390
more vulnerable platforms and softer,
you know, less secure apps.

00:34:35.640 --> 00:34:38.110
So protecting data on the device.

00:34:38.250 --> 00:34:41.100
So this is a data protection topic.

00:34:41.100 --> 00:34:43.750
And this isn't just about game scores.

00:34:43.750 --> 00:34:47.010
You know,
we see people use apps and games in

00:34:47.010 --> 00:34:49.150
very creative and unexpected ways.

00:34:49.150 --> 00:34:52.300
So if there's the slightest possibility,
you know,

00:34:52.300 --> 00:34:56.520
an NSString or NSData or some other
object contains something that would

00:34:56.520 --> 00:35:00.380
be bad news if it got lost or stolen,
you should protect it.

00:35:00.380 --> 00:35:02.180
You can't be too safe.

00:35:02.370 --> 00:35:06.430
One of the things I do when I'm
looking for possible security

00:35:06.430 --> 00:35:11.620
flaws in any app or game is get it
installed on my iPad or my iPhone,

00:35:11.620 --> 00:35:15.590
hook the device up to my Mac,
and then I've got some device management

00:35:15.720 --> 00:35:17.950
and forensic apps that I can use.

00:35:18.020 --> 00:35:21.860
And, you know, here you can see with a
screenshot from one app,

00:35:21.860 --> 00:35:25.470
it's very easy for me to pull
all the files out of an app's

00:35:25.470 --> 00:35:29.450
container back to my Mac,
take a look inside the files,

00:35:29.540 --> 00:35:32.460
maybe run the contents through
a decoder if the contents

00:35:32.460 --> 00:35:35.500
aren't immediately obvious,
and possibly find something

00:35:35.500 --> 00:35:37.400
that's interesting or lucrative.

00:35:37.400 --> 00:35:40.040
And I don't need to be
a programmer to do this.

00:35:40.110 --> 00:35:41.400
Anybody can get these tools.

00:35:41.400 --> 00:35:44.760
And so basically that's why
you need data protection.

00:35:44.780 --> 00:35:48.000
In a nutshell,
all it is���� and I'm going

00:35:48.000 --> 00:35:48.000
to go back to the screen.

00:35:48.000 --> 00:35:49.500
I'm not going to go into any details.

00:35:49.720 --> 00:35:54.580
It's you telling us the OS when you
want access to your key chain items

00:35:54.580 --> 00:35:59.600
or any files you have and when you
want us to safely encrypt them.

00:35:59.890 --> 00:36:03.130
And it's such a lightweight task to do.

00:36:03.290 --> 00:36:07.800
Take a line of code like this and
specify a data protection class.

00:36:07.800 --> 00:36:11.630
So it's extremely easy.

00:36:11.830 --> 00:36:16.230
Here I'll just list the
data protection classes,

00:36:16.230 --> 00:36:21.190
first for the key chain,
then for the file manager and core data,

00:36:21.190 --> 00:36:25.080
NSData, and we actually have
some for SQLite as well.

00:36:25.310 --> 00:36:26.980
And it boils down to this.

00:36:27.500 --> 00:36:33.000
Use the strongest protection class that's
accessible when unlocked for the key

00:36:33.010 --> 00:36:35.560
chain and protection complete for files.

00:36:35.560 --> 00:36:39.380
Use the strongest protection
class wherever you can.

00:36:39.380 --> 00:36:44.340
But if you need access to, say,
a key chain item or a file

00:36:44.340 --> 00:36:47.770
when the device is locked,
you can also do that

00:36:47.820 --> 00:36:50.330
with a level of security,
and that's where the intermediate

00:36:50.460 --> 00:36:52.940
protection classes come in,
and that's what we'll talk

00:36:52.940 --> 00:36:54.500
about in a couple of slides.

00:36:54.500 --> 00:36:57.700
By the way, dot, dot,
dot means there's even a

00:36:57.700 --> 00:37:01.500
less secure protection class,
but just don't use it.

00:37:01.500 --> 00:37:03.530
There's no good reason.

00:37:04.300 --> 00:38:41.500
[ Transcript missing ]

00:38:42.880 --> 00:38:49.220
And on the same theme for files, also,
if you want to access files

00:38:49.650 --> 00:38:52.800
while the device is locked,
you can do that.

00:38:52.800 --> 00:38:56.800
And a good example here is following
on from what Paul was talking about,

00:38:56.830 --> 00:38:59.880
the new NSURL session
background transfer service.

00:38:59.880 --> 00:39:04.850
So what you do here is use one
of the intermediate protection

00:39:05.770 --> 00:39:10.140
classes for a file that gets
downloaded in the background.

00:39:10.440 --> 00:39:15.360
And when your app is�� or when
your game is active again,

00:39:15.570 --> 00:39:18.240
check the data that's been downloaded,
check it's okay.

00:39:18.400 --> 00:39:21.700
And if it's okay,
you can upgrade the protection

00:39:21.700 --> 00:39:23.380
class on that new file.

00:39:23.380 --> 00:39:27.210
Or maybe merge the data
into another protected file.

00:39:28.850 --> 00:39:31.580
I'm going to mention a few other
things that are new in iOS 7.

00:39:31.580 --> 00:39:36.760
One is that, you know,
we all like the fact that, you know,

00:39:36.760 --> 00:39:39.020
you can synchronize your
calendars and notes and contacts,

00:39:39.040 --> 00:39:44.340
et cetera, via iCloud,
and we've been doing that for a while.

00:39:44.340 --> 00:39:46.730
But now you can do that
with keychain items.

00:39:46.740 --> 00:39:51.820
So this isn't for every
kind of keychain item.

00:39:51.820 --> 00:39:53.700
You want to think
through the implications.

00:39:53.900 --> 00:39:57.570
But if you set this new
KSEC at a synchronizable

00:39:57.570 --> 00:40:01.650
attribute on a keychain item,
obviously with a value true,

00:40:01.650 --> 00:40:04.310
it will be automatically synced.

00:40:04.510 --> 00:40:08.170
So if I've got your game
on my iPhone or my iPad,

00:40:08.180 --> 00:40:11.500
something that you store in the keychain
will be synced across those devices.

00:40:11.500 --> 00:40:14.740
You need to think through
the implications of,

00:40:14.740 --> 00:40:18.940
you know, adding, updating,
and deleting logins and things like that.

00:40:19.020 --> 00:40:21.480
But it's something you may
want to take advantage of.

00:40:21.500 --> 00:40:23.880
Should make sense.

00:40:23.880 --> 00:40:26.140
It's not for all kinds of keychain items.

00:40:26.140 --> 00:40:28.150
It doesn't apply to
certificates and keys.

00:40:28.180 --> 00:40:29.840
It's for passwords.

00:40:29.840 --> 00:40:32.680
But when we say passwords,
that category can cover a lot of things,

00:40:32.760 --> 00:40:35.780
an account name, number,
or something like that.

00:40:35.860 --> 00:40:43.340
And if you have multiple apps and you
share your keychain items using the

00:40:43.340 --> 00:40:49.620
keychain access group entitlement,
those items can be synchronized.

00:40:49.680 --> 00:40:55.320
Just make sure all the apps use the
same KSEC at an access group name.

00:40:56.510 --> 00:40:58.410
Okay, so that's data protection.

00:40:58.410 --> 00:41:00.750
And, you know,
the bottom line here is it's

00:41:00.820 --> 00:41:03.460
a huge bang for the buck for
almost no code on your part.

00:41:03.490 --> 00:41:06.990
But, again,
what we're stressing today is make

00:41:06.990 --> 00:41:12.100
sure you understand the right data
protection class to use for key chain

00:41:12.260 --> 00:41:17.160
items or files that you may need to
access when the device is locked.

00:41:17.960 --> 00:41:21.070
And I'll say one more thing,
which is that even if you do

00:41:21.070 --> 00:41:24.410
everything right on the device,
which hopefully you do,

00:41:24.410 --> 00:41:28.700
you really should think about everywhere
that that personal data can be.

00:41:29.190 --> 00:41:34.900
So it's beyond the scope of this talk,
but it may be not only

00:41:34.900 --> 00:41:41.000
on your users' devices,
but on your server, et cetera.

00:41:41.000 --> 00:41:41.000
So a lot to think about there.

00:41:42.530 --> 00:41:46.590
Now, secure transport, you know,
it's near the bottom of

00:41:46.590 --> 00:41:48.160
the iOS network stack.

00:41:48.310 --> 00:41:50.520
You can,
but you probably don't code directly

00:41:50.520 --> 00:41:52.190
to the secure transport APIs.

00:41:52.190 --> 00:41:54.190
You're more likely to use
the higher level frameworks.

00:41:54.190 --> 00:41:57.890
But it's down in secure transport
where the network security

00:41:58.010 --> 00:41:59.800
protocols are to be found.

00:41:59.800 --> 00:42:03.470
Now, I really can't do justice to
network security in a few slides,

00:42:03.470 --> 00:42:06.560
but I'm just going to focus on
a couple of things that I want

00:42:06.560 --> 00:42:08.500
you to take away from this talk.

00:42:10.220 --> 00:42:13.310
One is,
kind of like the example I gave for how

00:42:13.480 --> 00:42:18.760
easy it is to get an app's container,
it's really easy to see what any

00:42:18.760 --> 00:42:21.130
app or game is doing on the network.

00:42:21.160 --> 00:42:24.470
You know,
here's a screenshot from Charles' proxy.

00:42:24.640 --> 00:42:29.180
I used this basically to turn
my Mac into a man in the middle

00:42:29.180 --> 00:42:32.140
proxy for HTTP and HTTPS traffic.

00:42:32.140 --> 00:42:34.640
And I can see everything
that an app is sending,

00:42:34.830 --> 00:42:37.780
you know, typically back and forth
between its server.

00:42:37.840 --> 00:42:41.980
And fortunately here, you know,
it's all gobbledygook on screen,

00:42:42.080 --> 00:42:45.460
which is great because this
app that I was testing with is

00:42:45.530 --> 00:42:49.850
making sure that all its network
traffic is safely encrypted.

00:42:49.980 --> 00:42:54.280
And, you know, the point is you should
be using tools like this,

00:42:54.280 --> 00:42:59.520
packet sniffers and protocol analyzers,
to make sure your games are networking

00:43:00.080 --> 00:43:04.490
securely because attackers can use
exactly the same tools to see if they can

00:43:04.640 --> 00:43:07.560
find out what you're doing on the wire.

00:43:07.560 --> 00:43:08.790
Yeah.

00:43:09.900 --> 00:43:12.840
There are two things
about secure networking,

00:43:13.080 --> 00:43:14.700
two essential things.

00:43:14.790 --> 00:43:17.460
One is what we call on
the wire confidentiality.

00:43:17.800 --> 00:43:21.000
That's basically making sure
everything you send and receive is

00:43:21.000 --> 00:43:24.940
indecipherable to the passive attacker,
which is the packet sniffer.

00:43:26.120 --> 00:43:28.950
And the other thing you need
to do is authentication.

00:43:28.950 --> 00:43:32.270
And this is making sure that the
server you're talking to truly is

00:43:32.270 --> 00:43:33.810
the server you want to talk to.

00:43:33.940 --> 00:43:36.380
In other words,
you don't want to be vulnerable

00:43:36.380 --> 00:43:38.230
to a man in the middle attack.

00:43:38.230 --> 00:43:40.850
You want to authenticate the server.

00:43:40.850 --> 00:43:44.560
Sometimes the server wants
to authenticate the device.

00:43:44.600 --> 00:43:47.270
But I'm not going to
get into all of this.

00:43:47.880 --> 00:43:49.930
You need both things
that I just talked about,

00:43:49.930 --> 00:43:51.880
confidentiality and authentication.

00:43:52.900 --> 00:43:55.480
And, you know,
there's a lot of work to do.

00:43:55.650 --> 00:43:57.310
There's a lot of ways of getting this.

00:43:58.300 --> 00:44:01.920
You know, the obvious one is TLS.

00:44:01.920 --> 00:44:04.530
You know, that's just the S in HTTPS.

00:44:04.630 --> 00:44:09.820
And it's very simple to, you know,
make sure you're using a secure

00:44:09.820 --> 00:44:12.980
networking protocol by using HTTPS.

00:44:14.320 --> 00:44:15.480
But it's not your only option.

00:44:15.480 --> 00:44:18.080
And it's a fairly heavyweight protocol.

00:44:18.080 --> 00:44:21.340
You may want to use a lightweight
streaming protocol for your games.

00:44:22.100 --> 00:44:24.620
I just want to make the point,
you should make sure that your

00:44:24.620 --> 00:44:29.000
network... ...network traffic is
safe from any kind of attacker.

00:44:30.620 --> 00:44:34.980
And most importantly,
when you've got your code working,

00:44:35.010 --> 00:44:38.140
use the tools that I just
mentioned to make sure that all

00:44:38.140 --> 00:44:40.500
your network traffic is secure.

00:44:41.030 --> 00:44:42.980
In the real world,
a lot of people use the same

00:44:42.980 --> 00:44:44.780
credentials for multiple services.

00:44:45.680 --> 00:44:48.900
So even though you may think that...

00:44:49.780 --> 00:44:53.220
If somebody intercepts
your network traffic,

00:44:53.220 --> 00:44:55.180
not much damage can be done.

00:44:55.560 --> 00:44:59.360
But unfortunately,
people do tend to use the same

00:44:59.450 --> 00:45:01.690
credentials for multiple web services.

00:45:01.750 --> 00:45:04.590
So if somebody can steal
credentials from the network

00:45:04.930 --> 00:45:09.050
traffic your app is engaged in,
then they can potentially use

00:45:09.050 --> 00:45:18.460
those credentials to try to gain
real money from other web services

00:45:18.530 --> 00:45:19.680
that the same user may have.

00:45:19.700 --> 00:45:22.780
So think about that.

00:45:22.780 --> 00:45:24.730
Now, secure coding.

00:45:25.010 --> 00:45:28.000
You know, most times when people
talk about secure coding,

00:45:28.000 --> 00:45:33.590
it's the well-known topics of buffer
overflows and unsafe string formatting.

00:45:33.820 --> 00:45:39.090
I'm just going to give you a few
things that I want to get you to

00:45:39.090 --> 00:45:45.890
do regularly because they're very
lightweight and they're worthwhile.

00:45:46.900 --> 00:45:47.710
Use Clang.

00:45:48.000 --> 00:45:51.800
That would be my main recommendation.

00:45:51.900 --> 00:45:53.770
So easy to do, static analyzer.

00:45:54.030 --> 00:45:56.630
It will find exploitable
flaws and bugs in your code.

00:45:56.860 --> 00:46:01.900
Just make it part of your daily
development and testing practice.

00:46:02.050 --> 00:46:06.740
If you have any text that could possibly
contain any sensitive information,

00:46:06.770 --> 00:46:08.070
you know, market a secure text.

00:46:08.120 --> 00:46:10.480
And you can do it programmatically,
as you can see here,

00:46:10.480 --> 00:46:11.890
or in Interface Builder.

00:46:12.020 --> 00:46:16.390
Secure text, we don't cache it,
we disable auto correction.

00:46:16.620 --> 00:46:20.910
And of course, if you're ever asking your
users to provide a name and

00:46:20.910 --> 00:46:24.730
password or just a password,
use the secure text input or

00:46:24.770 --> 00:46:28.790
the login and password input
alert view style methods just

00:46:28.790 --> 00:46:31.090
to mask what's shown on screen.

00:46:31.550 --> 00:46:36.620
If you've got any object that might
contain sensitive information,

00:46:36.620 --> 00:46:39.110
don't hold onto it after you've used it.

00:46:39.270 --> 00:46:40.500
Just purge it.

00:46:40.500 --> 00:46:42.470
It's really very simple to do.

00:46:42.730 --> 00:46:44.520
Well, actually, sometimes not so simple.

00:46:44.520 --> 00:46:46.600
Maybe you have to drop down
to core foundation or lower.

00:46:46.600 --> 00:46:49.950
But it's worth zapping
anything that could possibly

00:46:49.970 --> 00:46:52.360
contain sensitive information.

00:46:52.360 --> 00:46:54.990
And I could have added
a lot of other examples.

00:46:54.990 --> 00:46:57.700
You know,
keeping sensitive information out of

00:46:57.700 --> 00:47:00.000
NS user defaults and the list goes on.

00:47:00.000 --> 00:47:04.090
And the point is that, you know,
most of these things are obvious.

00:47:04.210 --> 00:47:06.050
Hopefully most of these
things you're already doing.

00:47:06.310 --> 00:47:08.690
But, you know,
we have seen a few cases where a

00:47:08.760 --> 00:47:12.090
developer maybe in too much of a
hurry to get their apps or their

00:47:12.110 --> 00:47:15.900
games published has overlooked
these straightforward measures and

00:47:15.900 --> 00:47:18.150
found themselves in the headlines.

00:47:19.520 --> 00:47:23.340
If you're worried about your games
being run on compromised devices,

00:47:23.880 --> 00:47:29.300
you know, jailbreak detection,
we don't usually talk about it,

00:47:29.300 --> 00:47:30.830
but I'll just say a couple of things.

00:47:31.010 --> 00:47:33.180
First of all, it can be tricky.

00:47:33.400 --> 00:47:36.160
You want to make sure that
if you go down this road,

00:47:36.280 --> 00:47:41.130
you don't jeopardize the stability
of your app or interfere with day

00:47:41.130 --> 00:47:44.610
to day development or testing,
or even worse,

00:47:44.620 --> 00:47:48.190
impacting users running your
games on legitimate devices.

00:47:48.630 --> 00:47:53.430
And, you know, if you look at this code,
a little jailbreak detection snippet,

00:47:54.160 --> 00:47:57.370
this will work as long as the
attacker hasn't patched F open.

00:47:57.370 --> 00:48:00.990
And you can scour the web and you
can find scores of examples of

00:48:00.990 --> 00:48:03.570
so��called jailbreak detection code.

00:48:03.890 --> 00:48:06.740
And they usually try to do things
that are blocked by sandboxing.

00:48:06.740 --> 00:48:09.820
Now, I'm not saying don't do this.

00:48:09.910 --> 00:48:12.740
You can frustrate an attacker.

00:48:12.770 --> 00:48:16.630
But you also have to recognize
that an attacker with enough

00:48:16.630 --> 00:48:21.320
skill and patience will overcome
these kind of defensive measures.

00:48:21.540 --> 00:48:25.330
And that's why, basically,
we don't have an API to tell you

00:48:25.330 --> 00:48:28.350
you're running on a compromised device.

00:48:28.360 --> 00:48:31.590
Because, obviously,
that would be the first API that

00:48:31.590 --> 00:48:33.360
an attacker would hijack.

00:48:34.940 --> 00:48:38.070
So before we move on
to talk about privacy,

00:48:38.070 --> 00:48:39.850
just want to say this.

00:48:40.060 --> 00:48:42.270
Do a periodic audit of your games.

00:48:42.390 --> 00:48:45.610
Make sure you're using data protection
where it makes sense for you.

00:48:45.800 --> 00:48:48.550
Make sure all your networking is secure.

00:48:48.760 --> 00:48:53.260
Make sure you're adopting some
fairly basic and very lightweight

00:48:53.260 --> 00:48:55.590
defensive coding practices.

00:48:56.960 --> 00:49:01.480
Now, on the privacy front,
you've seen us in successive

00:49:01.600 --> 00:49:06.050
iOS releases give users more
and more control over what apps

00:49:06.050 --> 00:49:08.480
can do with their personal data.

00:49:08.590 --> 00:49:13.570
And you've seen us deprecate and
remove mechanisms that allow apps

00:49:13.820 --> 00:49:17.090
to track devices and possibly users.

00:49:17.500 --> 00:49:21.230
On your side,
you really need to have a reputation as

00:49:21.310 --> 00:49:24.540
a developer who takes privacy seriously.

00:49:24.580 --> 00:49:29.880
And you need to make it easy for users
to find out what your games do with

00:49:29.890 --> 00:49:33.180
any personal data they have access to.

00:49:34.490 --> 00:49:40.010
This section on identifiers is going
to be short because it's old news,

00:49:40.200 --> 00:49:42.590
hopefully old news for all of you.

00:49:42.600 --> 00:49:46.430
No more long-lived identifiers,
it's all about what we call

00:49:46.430 --> 00:49:48.640
purpose-scoped identifiers.

00:49:48.670 --> 00:49:52.370
And we rolled these identifiers
out over a year ago.

00:49:52.520 --> 00:49:56.460
You know,
we deprecated the unique identifier API,

00:49:56.570 --> 00:50:00.900
and we said, everybody,
you've got to use the app ID,

00:50:00.900 --> 00:50:06.960
the vendor ID, or the advertising IDs as
they were designed,

00:50:07.060 --> 00:50:12.540
and I think it's fair to say pretty much
everybody's using them now properly.

00:50:12.720 --> 00:50:16.100
Just remember, you know,
these identifiers don't last forever.

00:50:16.190 --> 00:50:18.720
They are backed up.

00:50:18.720 --> 00:50:24.300
In most cases,
the vendor ID replaces the old UD ID.

00:50:24.420 --> 00:50:28.150
And just a word of caution,
the advertising ID, if you use it,

00:50:28.150 --> 00:50:31.220
just remember,
users can reset it at any time.

00:50:32.370 --> 00:50:37.080
We also cranked up privacy protection
in iOS 7 in a few other ways.

00:50:37.280 --> 00:50:40.880
We couldn't deprecate or
remove sys control and iOctl.

00:50:40.940 --> 00:50:42.500
They're used for other purposes.

00:50:42.560 --> 00:50:45.990
But you don't want to be using
the Mac address as a device

00:50:46.380 --> 00:50:50.330
identifier any more than maybe
you were using the old UDID.

00:50:50.520 --> 00:50:54.780
And using the Mac address for that
purpose was always a bad idea because

00:50:54.900 --> 00:50:59.190
it's so easy to spoof a device's
Mac address on the network and get

00:50:59.190 --> 00:51:02.120
access to things that you didn't pay for.

00:51:02.390 --> 00:51:05.140
In case it affects you, push tokens.

00:51:05.250 --> 00:51:08.940
They're now scoped to the app.

00:51:08.940 --> 00:51:10.550
So it's never a good idea to cache them.

00:51:10.850 --> 00:51:14.530
You always have to use the value
returned by did register for remote

00:51:14.530 --> 00:51:16.690
notifications with device token.

00:51:16.950 --> 00:51:19.790
And one other thing to
mention to round up this list,

00:51:19.950 --> 00:51:20.740
name pasteboards.

00:51:20.740 --> 00:51:22.860
They're now scoped to your team ID.

00:51:23.140 --> 00:51:29.270
So you can share custom pasteboard
content between your games,

00:51:29.270 --> 00:51:30.430
but no further.

00:51:32.180 --> 00:51:34.250
So we've been beating
the drum on this topic,

00:51:34.250 --> 00:51:38.200
identifiers, for quite some time now,
at least a year.

00:51:38.250 --> 00:51:42.100
I think everybody's got used to
the fact that the old UDID's gone.

00:51:42.100 --> 00:51:46.690
But if you've still got questions,
more than happy to hear from you.

00:51:48.150 --> 00:51:52.280
Now, consent and transparency,
this is all about the consent alerts.

00:51:52.330 --> 00:51:57.320
We have been giving users more
and more control over different

00:51:57.320 --> 00:52:01.150
classes of data and device features.

00:52:01.150 --> 00:52:01.150
And

00:52:01.420 --> 00:52:02.890
You need to understand how this works.

00:52:02.920 --> 00:52:06.600
And there are really three
things you need to do.

00:52:06.600 --> 00:52:11.150
You do need to make sure that you can
handle the case where the user says,

00:52:11.150 --> 00:52:12.120
don't allow.

00:52:12.120 --> 00:52:19.920
You need to help the user understand
why your game wants access to certain

00:52:20.220 --> 00:52:21.900
kind of data or device features.

00:52:21.900 --> 00:52:24.700
So that's where what we call
purpose strings come into play.

00:52:24.700 --> 00:52:28.470
And very important, test.

00:52:28.870 --> 00:52:33.220
Test all the scenarios to make sure
your games behave correctly as privacy

00:52:33.220 --> 00:52:36.850
settings can change at any time.

00:52:39.480 --> 00:52:41.720
You know, when you ask, let's say,
core location to start

00:52:41.720 --> 00:52:44.670
updating your location,
that's what triggers the consent alert.

00:52:44.830 --> 00:52:50.110
And getting the users okay or
don't allow happens outside

00:52:50.110 --> 00:52:53.220
the address space of your app.

00:52:53.280 --> 00:52:56.340
You find out about the
permission asynchronously,

00:52:56.340 --> 00:52:57.960
either through a delegate
or a block method.

00:52:58.000 --> 00:53:01.310
And here are all the things that
are covered by the consent alerts.

00:53:01.400 --> 00:53:06.740
I'll just highlight a couple of
things that are new in iOS 7.

00:53:06.740 --> 00:53:09.190
One, for the microphone,
if you ask for an audio

00:53:09.190 --> 00:53:12.180
recording session,
the user will get a consent alert,

00:53:12.180 --> 00:53:15.540
and if the user decides to say no,
you will get silence.

00:53:15.710 --> 00:53:17.630
That is,
you'll get an audio stream of all zeros.

00:53:17.640 --> 00:53:22.820
And hopefully a lot of you are thinking
about or already adopting core motion,

00:53:23.020 --> 00:53:25.800
so that's another example
of a device feature that's

00:53:25.800 --> 00:53:28.890
covered by the consent alert.

00:53:28.920 --> 00:53:31.900
And there are two things you need to do.

00:53:31.900 --> 00:53:34.720
One, obviously,
is try to keep your game as

00:53:34.720 --> 00:53:39.020
interesting and engaging as possible,
even when the user says don't allow.

00:53:40.340 --> 00:53:44.850
And the other thing is nobody wants on
launch to see a bunch of consent alerts.

00:53:45.050 --> 00:53:49.550
So delay until you really
need access to that kind of

00:53:49.550 --> 00:53:52.040
personal data or device feature.

00:53:52.450 --> 00:53:54.870
And then the consent alert
will actually make sense.

00:53:54.970 --> 00:53:57.200
It will be in context for the user.

00:53:57.200 --> 00:54:00.230
So they're more likely to say yes.

00:54:01.330 --> 00:54:04.550
And helping them decide to say yes,
this is where the purpose

00:54:04.600 --> 00:54:07.560
strings come into play.

00:54:07.560 --> 00:54:12.040
In your app's info P list, you can go in,
find all these what we call

00:54:12.040 --> 00:54:16.060
the usage description strings
for all these classes here,

00:54:16.370 --> 00:54:21.930
put in the sentence that is going to
help your users make a good decision

00:54:21.930 --> 00:54:24.810
about granting your game access.

00:54:25.330 --> 00:54:28.520
And of course, provide localizations.

00:54:29.170 --> 00:54:32.590
And on the testing front,
test all the scenarios.

00:54:32.770 --> 00:54:36.190
Make sure that your
game behaves robustly,

00:54:36.190 --> 00:54:42.460
whether the user says yes, don't allow,
when the user changes her or his decision

00:54:42.480 --> 00:54:47.380
about granting access at a later time,
and when restrictions are

00:54:47.380 --> 00:54:49.200
in place on the device.

00:54:49.260 --> 00:54:52.800
And note,
the consent alert will only come

00:54:52.890 --> 00:54:57.460
up once per category for the app,
so you're going to have to

00:54:57.460 --> 00:55:00.560
toggle privacy settings between
one test run and the next.

00:55:00.750 --> 00:55:03.320
But also,
it's important to understand you've got

00:55:03.330 --> 00:55:05.560
to do this testing on the device itself.

00:55:05.680 --> 00:55:09.990
At this time, you can't use a simulator
for this kind of testing.

00:55:11.410 --> 00:55:13.340
So just one more topic to go.

00:55:13.410 --> 00:55:14.960
And that's data collection.

00:55:14.960 --> 00:55:22.060
So this is just a short version
of what we went into detail in the

00:55:22.280 --> 00:55:25.820
last two WWDC privacy sessions.

00:55:25.820 --> 00:55:29.100
And it's totally understandable
that by collecting data,

00:55:29.100 --> 00:55:34.000
you can find out what aspects
of your games are most popular,

00:55:34.050 --> 00:55:36.740
and where you need to tighten up
code in the case of logging crashes

00:55:36.740 --> 00:55:38.470
and other events of interest.

00:55:38.610 --> 00:55:42.170
So you can log data, of course.

00:55:42.600 --> 00:55:45.290
But you want to think about it like this.

00:55:45.450 --> 00:55:49.070
If the data you collected
fell into the wrong hands,

00:55:49.070 --> 00:55:53.290
could you explain to your users why
you were collecting that information

00:55:53.290 --> 00:55:58.150
in ways that they would say,
OK, I understand, and I agree to that?

00:55:58.290 --> 00:56:03.310
So whether you're collecting data on the
device or storing stats on your servers,

00:56:03.310 --> 00:56:07.080
do everything you can to eliminate
any kind of sensitive information

00:56:07.080 --> 00:56:08.330
or personal information.

00:56:09.840 --> 00:56:13.440
And somewhat related to that,
it's always a good idea to have

00:56:13.450 --> 00:56:15.420
a privacy policy statement.

00:56:15.420 --> 00:56:18.860
Write that up,
provide a link to it in iTunes Connect,

00:56:19.000 --> 00:56:24.770
and then your URL is accessible
from all the App Store clients.

00:56:25.840 --> 00:56:28.610
And one more thing,
I'm sure you're all familiar with

00:56:28.610 --> 00:56:32.680
app store review guidelines and
there's a privacy section in there.

00:56:33.000 --> 00:56:38.030
Fairly recently we added a clause
that you should pay attention to

00:56:38.030 --> 00:56:41.090
if your games are used by children.

00:56:42.970 --> 00:56:47.820
So we've covered a few things about
privacy and security before that,

00:56:47.920 --> 00:56:51.290
and hopefully as we've talked
through these various topics,

00:56:51.380 --> 00:56:54.300
you've said, "Yes,
I do all these things." And if you do,

00:56:54.300 --> 00:56:54.990
I'm happy.

00:56:55.160 --> 00:57:00.140
Congratulations and thank you.

00:57:03.510 --> 00:57:05.570
Email addresses for the two Pauls.

00:57:05.570 --> 00:57:09.680
And just a plug for the developer forums,
because that's where a lot of you,

00:57:09.680 --> 00:57:10.970
I'm sure, hang out.

00:57:11.060 --> 00:57:13.290
And you'll see all these
topics we just discussed,

00:57:13.800 --> 00:57:16.700
usually actively debated
pretty much every day.

00:57:16.700 --> 00:57:17.490
So thanks a lot.