WEBVTT

00:00:08.600 --> 00:00:11.260
So this is Getting Started with
Safari on iPhone,

00:00:11.260 --> 00:00:16.200
and my name is Vicki Murley, and I am the
Safari Technologies Evangelist at Apple.

00:00:16.310 --> 00:00:19.890
And as John mentioned this morning,
I worked on the Safari engineering

00:00:19.890 --> 00:00:24.070
team for the first version
of Safari on Mac OS X,

00:00:24.360 --> 00:00:27.280
and then I also worked on
the first version of iPhone,

00:00:27.460 --> 00:00:30.260
which came out last year.

00:00:30.260 --> 00:00:32.980
But for the last year or so,
I've been working as an

00:00:32.980 --> 00:00:37.260
evangelist on the evangelism team,
working with developers,

00:00:37.350 --> 00:00:39.790
just like you guys,
to help them move their web

00:00:39.860 --> 00:00:45.900
content to iPhone or to develop
full-fledged iPhone web applications.

00:00:45.950 --> 00:00:50.480
So today's two sessions
are going to focus on,

00:00:50.560 --> 00:00:53.340
you know,
getting started with Safari on iPhone.

00:00:53.340 --> 00:00:56.020
If you're new to the platform
and have an existing site,

00:00:56.080 --> 00:00:58.480
or are thinking about making
a full-fledged web app,

00:00:58.510 --> 00:01:00.080
this is the session to be in.

00:01:00.080 --> 00:01:02.440
And then later this afternoon,
we're going to talk about some

00:01:02.500 --> 00:01:07.110
advanced topics and new technologies
that you can use in your web apps.

00:01:08.770 --> 00:01:13.350
So in today's talk,
I'm going to cover five major areas.

00:01:13.730 --> 00:01:16.440
First,
we're just gonna talk briefly about

00:01:16.440 --> 00:01:21.020
kind of the impact and market trends
that we've seen with Safari on iPhone.

00:01:21.030 --> 00:01:26.290
So maybe some of you are a
one-man shop or two-man operation,

00:01:26.590 --> 00:01:31.010
and you're kind of wondering just how
many people are using Safari on iPhone.

00:01:31.020 --> 00:01:35.420
Why is it compelling for me
to develop for this platform?

00:01:35.820 --> 00:01:38.620
After that,
we're going to talk about Safari on

00:01:38.620 --> 00:01:42.610
iPhone fundamentals-- kind of
how Safari on iPhone works,

00:01:42.760 --> 00:01:44.950
how it does what it does.

00:01:45.010 --> 00:01:48.970
After that, we're going to talk about
optimizing for Safari on iPhone.

00:01:49.190 --> 00:01:55.180
This is a great section if you have an
existing website or existing web content,

00:01:55.210 --> 00:01:58.460
and you just kind of want to make
a couple tweaks that will make

00:01:58.550 --> 00:02:02.880
your site look great on the device
without breaking your existing site.

00:02:02.930 --> 00:02:05.300
That is the section for you.

00:02:05.710 --> 00:02:09.740
After that, we're going to get into
full-fledged web apps,

00:02:09.810 --> 00:02:12.980
and specifically,
creating them through Dash Code,

00:02:12.980 --> 00:02:16.850
which is an IDE on Mac OS X,
also used for developing

00:02:16.870 --> 00:02:18.220
dashboard widgets.

00:02:18.360 --> 00:02:21.450
And after that,
we're going to talk briefly about using

00:02:21.820 --> 00:02:24.600
web content in native applications.

00:02:24.710 --> 00:02:27.800
If you have a web app,
but you've decided that you want to add

00:02:27.870 --> 00:02:33.000
a feature that is SDK-only right now,
such as location-based services,

00:02:33.010 --> 00:02:35.440
you would need to make
a native application.

00:02:35.440 --> 00:02:38.640
But there's ways that you can
leverage your existing web code

00:02:39.040 --> 00:02:42.940
in that native application,
and I'm going to tell you how.

00:02:42.940 --> 00:02:47.520
Okay, so getting started with kind
of the impact of Safari on

00:02:47.520 --> 00:02:49.520
iPhone and some market trends.

00:02:49.610 --> 00:02:54.160
So iPhone was released
on June 29th of 2007.

00:02:54.160 --> 00:02:57.400
That's when it got into users'
hands for the first time.

00:02:57.470 --> 00:03:00.880
And later that year,
it was named the "Invention

00:03:00.880 --> 00:03:02.640
of the Year" by Time Magazine.

00:03:02.650 --> 00:03:05.100
So this was very exciting
for lots of people at Apple,

00:03:05.290 --> 00:03:07.080
including myself.

00:03:07.350 --> 00:03:10.790
And really, you know,
this is pretty exciting because

00:03:11.310 --> 00:03:16.190
iPhone really changed the way that
people interact with all different

00:03:16.190 --> 00:03:18.160
types of media on mobile devices.

00:03:18.210 --> 00:03:22.060
So it changed the way we look at photos,
changed the way we watch

00:03:22.140 --> 00:03:24.060
YouTube videos on mobile devices.

00:03:24.060 --> 00:03:26.100
I don't think I had
ever done that before,

00:03:26.130 --> 00:03:28.700
prior to having an iPhone.

00:03:28.710 --> 00:03:33.240
I probably haven't used a paper
map since I started using iPhone,

00:03:33.260 --> 00:03:36.680
so it's changed the way
we use maps on the go.

00:03:36.750 --> 00:03:39.060
It's changed the way we listen to music.

00:03:39.070 --> 00:03:42.160
But more than anything,
it's really changed the way that people

00:03:42.260 --> 00:03:45.230
browse the web on mobile devices.

00:03:45.270 --> 00:03:49.830
And this is because Safari on iPhone
is the first browser on a mobile

00:03:49.890 --> 00:03:57.240
device to really render desktop-quality
web content on a handheld handset.

00:03:57.300 --> 00:03:59.580
So we're flipping through a few now.

00:03:59.580 --> 00:04:04.240
We saw eBay, I think we saw the
New York Times in there as well,

00:04:04.260 --> 00:04:10.900
and this had a pretty amazing impact,
specifically that more people were

00:04:10.970 --> 00:04:16.280
browsing the web using Safari on iPhone,
using the iPhone OS,

00:04:16.300 --> 00:04:21.040
than any other mobile operating
system in a very short period of time.

00:04:21.050 --> 00:04:28.030
So if we look at the top three mobile
operating systems in November of '07,

00:04:28.030 --> 00:04:31.910
and we look at-- we divide up
the market share that the top

00:04:31.990 --> 00:04:37.150
three currently had at that time,
we can see that iPhone operating

00:04:37.230 --> 00:04:42.020
system accounts for more than
half of that pool of people.

00:04:42.170 --> 00:04:45.980
So more than all devices
running Windows CE,

00:04:46.050 --> 00:04:51.220
and more than all people running a device
that has the Hip Top OS on it combined.

00:04:51.250 --> 00:04:57.370
More people were using iPhone OS to
browse the web on mobile devices.

00:04:58.210 --> 00:05:04.050
Over the next eight or nine months or so,
you know,

00:05:04.570 --> 00:05:12.480
that number just continued to grow,
whereas the market share for other

00:05:12.480 --> 00:05:13.840
mobile operating systems-- in this case,
we're looking at Windows CE--

00:05:13.840 --> 00:05:13.840
just kind of stayed the same.

00:05:13.840 --> 00:05:13.840
No new adopters, really.

00:05:15.480 --> 00:05:20.470
So if all these facts and figures
aren't enough to make a compelling

00:05:20.470 --> 00:05:25.460
argument to develop for iPhone,
there's one more great reason,

00:05:25.460 --> 00:05:28.560
and that's because it's extremely easy.

00:05:28.780 --> 00:05:34.380
The tips that we're going to go over
today are maybe one or two lines of HTML,

00:05:34.390 --> 00:05:38.750
one or two lines of CSS,
and you're going to see it's very easy

00:05:39.120 --> 00:05:41.760
to integrate some of these features
and technologies into your web content.

00:05:43.250 --> 00:05:45.940
So when we talk about
web content on iPhone,

00:05:45.960 --> 00:05:48.810
we kind of have three
levels of adherence.

00:05:48.810 --> 00:05:52.270
The first is what we call
"compatible" with iPhone.

00:05:52.270 --> 00:05:55.500
So this is looks as expected,
works as expected,

00:05:55.500 --> 00:05:58.210
and many sites fall into this category.

00:05:58.210 --> 00:06:00.210
eBay is a great example here.

00:06:00.210 --> 00:06:02.920
The next level is optimized for iPhone.

00:06:02.920 --> 00:06:07.870
These are people who have taken advantage
of some of the features on iPhone,

00:06:07.870 --> 00:06:09.640
but still have a website.

00:06:09.640 --> 00:06:12.720
They haven't made a
full-blown web app yet.

00:06:14.210 --> 00:06:19.830
And then the last level of adherence
is full-blown iPhone web applications.

00:06:19.830 --> 00:06:24.720
So these are web applications
that have a UI that is

00:06:24.720 --> 00:06:28.460
specifically designed for iPhone.

00:06:28.460 --> 00:06:31.620
They have a discrete purpose.

00:06:31.620 --> 00:06:36.630
They're not, you know,
the full-fledged site.

00:06:36.630 --> 00:06:36.750
And the Facebook web app is a great
example of an iPhone web application.

00:06:37.870 --> 00:06:45.930
Okay, so talking about those, you know,
kind of three levels of adherence,

00:06:45.930 --> 00:06:53.090
we're going to go through
Safari on iPhone fundamentals,

00:06:53.090 --> 00:06:53.090
that kind of compatible category,
optimizing for Safari on iPhone,

00:06:53.090 --> 00:06:53.090
and creating web apps in Dashcode.

00:06:54.210 --> 00:06:59.640
So getting started with fundamentals,
the first thing we're going to do

00:06:59.740 --> 00:07:02.370
is just take a look at a case study.

00:07:02.370 --> 00:07:05.110
So this is the website KEXP.org.

00:07:05.330 --> 00:07:08.300
It's a public radio website in Seattle.

00:07:08.610 --> 00:07:13.650
Great radio station and great website,
but I noticed that there were

00:07:13.650 --> 00:07:17.200
a few things that they could
have done differently to

00:07:17.200 --> 00:07:17.200
look really great on iPhone.

00:07:17.200 --> 00:07:17.200
So we're gonna use them
as our case study today.

00:07:17.610 --> 00:07:21.500
So if we look at this page,
we can see that things look pretty good.

00:07:21.770 --> 00:07:24.750
I see images, I see content.

00:07:25.160 --> 00:07:28.780
It's laid out pretty much like
I would see it on a desktop browser.

00:07:29.050 --> 00:07:31.300
So things are looking pretty good.

00:07:31.420 --> 00:07:37.590
And that is because Safari on iPhone
is using the same rendering engine

00:07:37.890 --> 00:07:42.110
to take care of all of the kind of
core web technologies that is used

00:07:42.240 --> 00:07:44.500
in Safari on all other platforms.

00:07:44.610 --> 00:07:48.800
So Safari is now shipping on Windows,
on Mac OS X,

00:07:48.840 --> 00:07:53.110
and on iPhone and iPod Touch devices,
and all of those versions of Safari are

00:07:53.110 --> 00:07:56.670
using the same underlying engine,
which is WebKit.

00:07:56.860 --> 00:07:59.470
So as I mentioned,
WebKit is responsible for

00:07:59.470 --> 00:08:02.940
kind of core web technologies,
so things like parsing

00:08:02.940 --> 00:08:06.160
and rendering HTML,
rendering CSS styles,

00:08:06.220 --> 00:08:07.920
executing JavaScript.

00:08:07.930 --> 00:08:09.830
WebKit takes care of all of that.

00:08:09.870 --> 00:08:14.500
And that's why you're able to see this
kind of desktop-caliber web content

00:08:14.500 --> 00:08:17.210
on a mobile device because of WebKit.

00:08:19.470 --> 00:08:21.950
WebKit is also the name
of an open-source project,

00:08:22.050 --> 00:08:26.130
besides being the name of this engine
that supports Safari on all platforms.

00:08:26.280 --> 00:08:28.340
And this is great for you guys.

00:08:28.610 --> 00:08:34.140
So WebKit was originally based off of
another open-source project named KHTML,

00:08:34.240 --> 00:08:37.450
and then eventually,
WebKit branched far enough that

00:08:37.450 --> 00:08:41.730
Apple-- the folks who were working on
WebKit at Apple decided to make their

00:08:41.820 --> 00:08:44.620
own open-source project in 2005.

00:08:44.670 --> 00:08:50.540
And this is great for anyone developing
for WebKit or a WebKit-based browser,

00:08:50.540 --> 00:08:55.540
because we have many eyes on the engine,
you know, many bugs getting fixed,

00:08:55.560 --> 00:08:57.630
many bugs being reported.

00:08:57.670 --> 00:09:00.370
But also,
by virtue of being an open-source

00:09:00.370 --> 00:09:06.060
project and by being a kind of
small and highly portable code base,

00:09:06.090 --> 00:09:09.790
WebKit is showing up in all different
kinds of applications and on all

00:09:09.790 --> 00:09:12.220
different kinds of platforms.

00:09:12.290 --> 00:09:15.020
So for example,
you may not know that WebKit is

00:09:15.020 --> 00:09:18.640
the basis for the OmniWeb browser,
and it's also the basis for

00:09:18.640 --> 00:09:19.990
the new Google Chrome browser.

00:09:20.060 --> 00:09:22.950
Both of these web browsers use WebKit.

00:09:23.610 --> 00:09:26.730
As I mentioned, WebKit is highly portable
to other platforms.

00:09:26.740 --> 00:09:31.100
It's small and compact.

00:09:31.170 --> 00:09:38.020
So WebKit was used as the basis for the
web browser on Nokia E60 series phones,

00:09:38.020 --> 00:09:38.020
and it's also used by the
Open Handset Alliance.

00:09:38.500 --> 00:09:45.270
So this is great for you guys,
because for web developers,

00:09:45.270 --> 00:09:49.470
compatibility is king, you know?

00:09:49.470 --> 00:09:49.470
So if you're working with the same
engine in many different browsers,

00:09:49.470 --> 00:09:49.470
that's great for you.

00:09:49.770 --> 00:09:53.510
Another thing that is great for you guys
is that one of the tenets of WebKit is

00:09:53.920 --> 00:09:56.080
really standards-based compatibility.

00:09:56.080 --> 00:10:00.160
So when the folks at Apple who are
working at WebKit and the folks across

00:10:00.160 --> 00:10:04.000
the world who are working at WebKit look
for new features to implement,

00:10:04.000 --> 00:10:09.920
instead of kind of reinventing the wheel
every time we have a newfangled idea,

00:10:09.920 --> 00:10:14.060
we look to the developing web
standards for what's there,

00:10:14.060 --> 00:10:16.940
what's going to be implemented
in every browser in the future.

00:10:16.940 --> 00:10:18.770
That's what we look to first.

00:10:19.480 --> 00:10:22.340
We're going to talk later this
afternoon about some really exciting

00:10:22.340 --> 00:10:26.580
stuff that's in upcoming web standards
like offline web applications,

00:10:26.580 --> 00:10:29.230
database storage, stuff like that.

00:10:29.600 --> 00:10:32.380
Those are the things that we
choose to implement in Safari.

00:10:32.380 --> 00:10:36.460
And as I think I mentioned,
that's great for you guys

00:10:36.540 --> 00:10:39.420
because even if it's only
implemented in Safari right now,

00:10:39.420 --> 00:10:42.840
by virtue of being part of a standard,
it's going to be implemented in

00:10:42.840 --> 00:10:44.840
many other browsers in the future.

00:10:44.840 --> 00:10:49.080
So you're going to be kind of ahead
of the curve by adopting early.

00:10:49.260 --> 00:10:50.480
Thank you.

00:10:52.020 --> 00:10:57.930
Okay,
so going back to our case study here,

00:10:57.930 --> 00:11:03.930
kexp.org,
we mentioned this site is looking

00:11:04.520 --> 00:11:05.140
pretty good because it's using
this very powerful rendering

00:11:05.140 --> 00:11:05.140
engine that's also used on the
desktop to render this content.

00:11:05.350 --> 00:11:07.990
But if I zoom in on the
upper left-hand corner,

00:11:08.150 --> 00:11:11.530
I see that there are two
broken plug-in icons here.

00:11:11.860 --> 00:11:15.680
So plug-ins are not supported
in Safari on iPhone at all.

00:11:15.790 --> 00:11:19.270
So you have to come up with
some way to work around this.

00:11:19.280 --> 00:11:24.060
And the best thing to do is really
to provide a fallback content.

00:11:24.160 --> 00:11:27.450
So in order to do that,
the first thing I did in my exercise

00:11:27.450 --> 00:11:32.260
here was I took a look at what the
appearance was in a desktop browser--

00:11:32.260 --> 00:11:34.400
a browser that supported plug-ins.

00:11:34.450 --> 00:11:38.240
So there was this kind of
animated icon at the top,

00:11:38.260 --> 00:11:42.010
and then there was some text
scrolling across that "Now Playing"

00:11:42.470 --> 00:11:45.770
area that was showing me the name
of the artist and the current song

00:11:45.780 --> 00:11:48.240
that the radio station's playing.

00:11:48.280 --> 00:11:52.180
So I'm really looking to
provide fallback behavior here.

00:11:52.180 --> 00:11:55.980
You know, maybe I don't have
exactly the same thing,

00:11:56.020 --> 00:12:00.290
but the key word here, as I said,
is "fallback." So for that kind

00:12:00.290 --> 00:12:03.500
of animated image at the top,
you know, the easiest thing for me to do,

00:12:03.500 --> 00:12:10.570
is to probably just take a still
image of that logo and specify that

00:12:10.570 --> 00:12:13.440
image inside my object tag here.

00:12:13.590 --> 00:12:16.720
So then,
browsers that don't support plug-ins,

00:12:16.780 --> 00:12:18.520
instead of having the
broken plug-in icon,

00:12:18.520 --> 00:12:20.790
they will just render this image instead.

00:12:20.940 --> 00:12:26.250
So that is a super simple way
to provide fallback content.

00:12:26.790 --> 00:12:31.250
For the text that is scrolling down
here in the "Now Playing" area,

00:12:31.430 --> 00:12:36.460
we could have really used just straight
web technology to do the same thing.

00:12:36.580 --> 00:12:41.900
So a combination of set interval,
XMLHTP request, and either JavaScript or

00:12:41.900 --> 00:12:46.430
CSS animation to kind of move that
text across that area there would

00:12:46.560 --> 00:12:50.480
have achieved the same effect,
and we wouldn't have had to

00:12:50.480 --> 00:12:52.270
resort to using a plugin.

00:12:52.390 --> 00:12:56.450
So use straight web
technologies wherever possible.

00:12:59.650 --> 00:13:04.780
Okay, so that covers Safari on
iPhone fundamentals.

00:13:04.780 --> 00:13:10.950
Now, we're going to talk about
optimizing for Safari on iPhone.

00:13:10.950 --> 00:13:15.590
So this is kind of if you
have an existing website,

00:13:15.590 --> 00:13:21.290
you're new to the platform,
you want to make a couple tweaks so

00:13:21.290 --> 00:13:21.290
that your site looks great on iPhone,
but still displays well

00:13:21.290 --> 00:13:21.290
in desktop browsers.

00:13:22.310 --> 00:13:27.050
So back again to our case study here,
if I look at the right-hand

00:13:27.160 --> 00:13:32.100
side of the screen here,
I see this large area of white space.

00:13:32.130 --> 00:13:35.880
And that is not great
because the iPhone screen,

00:13:35.920 --> 00:13:40.880
while large for a mobile device,
is still relatively small.

00:13:40.960 --> 00:13:45.320
So we want to be kind of utilizing all
of the available screen real estate.

00:13:45.780 --> 00:13:52.380
What's happening here,
we're going from a desktop-based browser,

00:13:52.610 --> 00:13:55.960
very large screen,
down to the smaller screen.

00:13:56.230 --> 00:14:01.220
We have to find a way to render the
content that we would be able to make

00:14:01.430 --> 00:14:06.300
very large on a very compact device.

00:14:06.380 --> 00:14:09.870
So the way that we do that
behind the scenes is we take

00:14:09.870 --> 00:14:17.480
the window size of the browser,
and we assume a width of 980 pixels,

00:14:17.480 --> 00:14:17.830
okay?

00:14:18.080 --> 00:14:19.960
And then we scale that down and
we assume a width of 980 pixels,

00:14:19.960 --> 00:14:20.000
okay?

00:14:20.000 --> 00:14:23.170
And then we scale that down to the
width that is appropriate for iPhone,

00:14:23.300 --> 00:14:25.820
which is 320 pixels.

00:14:25.960 --> 00:14:31.800
So in the case of kexp.org, this website,
the web content is actually

00:14:31.800 --> 00:14:35.260
only 720 pixels wide.

00:14:35.370 --> 00:14:38.700
So you can see the content
is 720 pixels wide.

00:14:38.770 --> 00:14:40.020
We're assuming 980.

00:14:40.230 --> 00:14:43.280
That's what's making that white
space on the right-hand side for us.

00:14:43.310 --> 00:14:48.590
And then we're scaling it down to 320,
and the white space remains.

00:14:48.990 --> 00:14:57.530
So luckily, there's a very easy
way to deal with this,

00:14:57.530 --> 00:14:57.530
and that is by customizing
what's called the viewport.

00:14:57.980 --> 00:15:00.340
So it's easy to do.

00:15:00.410 --> 00:15:03.570
You just specify a meta tag,
and for web sites,

00:15:03.690 --> 00:15:07.700
we recommend that you specify
the page content width.

00:15:07.800 --> 00:15:10.980
So I mentioned that the
width of the content here,

00:15:10.980 --> 00:15:16.380
these columns of text and images,
is really only 720 pixels.

00:15:16.450 --> 00:15:21.860
So I could add this tag to my web
content-- meta name equals "viewport."

00:15:21.870 --> 00:15:25.500
The content equals "width" is 720.

00:15:25.510 --> 00:15:29.490
And that's going to take us from a layout
that looks like this with this empty

00:15:29.490 --> 00:15:31.820
white space to one that looks like this.

00:15:31.870 --> 00:15:34.590
No white space at all
on the right-hand side.

00:15:34.740 --> 00:15:36.460
And that's what we want.

00:15:36.480 --> 00:15:40.300
This meta tag is gonna be ignored in
browsers that don't understand it.

00:15:40.400 --> 00:15:45.230
So any desktop browser that doesn't have
this tag implemented-- I don't know of

00:15:45.230 --> 00:15:48.450
one that does-- will just ignore it,
and your content will be

00:15:48.490 --> 00:15:51.940
unaltered in any other browser.

00:15:52.620 --> 00:16:02.270
So if you have an iPhone or
iPod Touch web application,

00:16:02.270 --> 00:16:05.040
we recommend that you use a
constant here for the width value,

00:16:05.040 --> 00:16:05.040
and that constant is
width equals device width.

00:16:05.930 --> 00:16:09.100
Okay, so we mentioned, you know,
one of the most useful

00:16:09.140 --> 00:16:11.800
values for a viewport here,
the width, you know,

00:16:11.800 --> 00:16:13.770
but there are a couple
other ones as well.

00:16:13.780 --> 00:16:17.720
So they are width, height, initial scale.

00:16:17.720 --> 00:16:21.740
You know, we mentioned we're scaling
down from 980 pixels to 320.

00:16:21.740 --> 00:16:24.890
You can set all of these values
in the viewport tag besides

00:16:24.960 --> 00:16:26.660
being able to set the width.

00:16:26.760 --> 00:16:32.160
The important thing to remember here
is that if you set one of these values,

00:16:32.160 --> 00:16:34.590
the other values are calculated for you.

00:16:35.090 --> 00:16:39.370
So we set the width to be 720,
and the height was calculated for us,

00:16:39.520 --> 00:16:41.680
and the initial scale
was calculated for us.

00:16:43.440 --> 00:16:47.560
Other values that you can set in the
Viewport tag include the minimum and

00:16:47.560 --> 00:16:53.180
maximum scale-- how far a user can
zoom in or zoom out on your webpage.

00:16:53.180 --> 00:16:56.440
And also,
you can disable scaling altogether

00:16:56.880 --> 00:17:01.160
on a webpage by setting this
value "user scalable" to "no."

00:17:01.160 --> 00:17:05.270
And that's very useful if you have
a full-fledged web application.

00:17:05.290 --> 00:17:09.660
Like, most web apps that you see on
iPhone don't allow scaling,

00:17:09.660 --> 00:17:11.690
they just want you to
be in this one view.

00:17:11.990 --> 00:17:14.970
So that's how you would disable that.

00:17:19.250 --> 00:17:23.640
So we've talked a little bit about
how things look on iPhone right now,

00:17:23.780 --> 00:17:26.810
and now we're going to talk
about how people interact

00:17:26.810 --> 00:17:29.200
with web content on iPhone.

00:17:29.220 --> 00:17:34.020
So the first thing I wanna mention
is interacting with input fields.

00:17:34.020 --> 00:17:36.140
I notice this all the time.

00:17:36.280 --> 00:17:42.870
When I am logging into a website
or updating my Facebook status,

00:17:42.880 --> 00:17:46.470
for instance,
I actually don't want my text

00:17:46.470 --> 00:17:50.760
to be automatically capitalized
and if I'm entering a password,

00:17:50.770 --> 00:17:53.440
I don't want my text
to be auto-corrected.

00:17:53.440 --> 00:17:57.600
I don't want that pop-up bubble
to show up and then I have to

00:17:57.670 --> 00:18:02.520
dismiss it and I've lost my place
and I'm just totally confused.

00:18:02.590 --> 00:18:05.750
So luckily,
there's an easy way to disable the

00:18:05.880 --> 00:18:11.760
default sort of keyboard behavior
in text areas in your web pages.

00:18:11.760 --> 00:18:17.540
And that's through two attributes
here-- auto-correct and auto-capitalize.

00:18:17.600 --> 00:18:20.710
Of course,
auto-correct-- it handles whether

00:18:20.710 --> 00:18:24.380
or not words are automatically
corrected for you and auto-capitalize

00:18:24.530 --> 00:18:26.540
deals with capitalization.

00:18:26.540 --> 00:18:30.720
And if you set both of those to "off,"
both of those features are disabled.

00:18:30.960 --> 00:18:34.560
So as I mentioned,
very useful for username and password

00:18:34.980 --> 00:18:38.850
fields in your web applications
and web content in general.

00:18:38.870 --> 00:18:42.620
And of course, if a web browser doesn't
understand these attributes,

00:18:42.620 --> 00:18:45.990
it will just ignore them and your
content will continue to look

00:18:46.150 --> 00:18:50.780
great in a desktop browser that
doesn't implement these attributes.

00:18:51.870 --> 00:18:57.560
Okay, talking some more about how people
interact with content on iPhone.

00:18:57.650 --> 00:19:00.280
Another thing to think
about is double tap.

00:19:00.280 --> 00:19:05.420
We have this desktop caliber web
content on this very small screen.

00:19:05.460 --> 00:19:08.740
So a way that people interact with it,
I'm sure you all have done this,

00:19:08.740 --> 00:19:13.300
is to double tap on a given
area of the screen to zoom in.

00:19:13.410 --> 00:19:17.740
So what's actually happening here
is iPhone is detecting where the

00:19:17.770 --> 00:19:22.010
touch has happened and finding the
closest logical block of web content

00:19:22.010 --> 00:19:24.040
and then zooming into that block.

00:19:24.100 --> 00:19:28.870
So by a block,
I mean like a paragraph or a div or

00:19:28.920 --> 00:19:32.590
what's called a replaced element,
like an image or a video,

00:19:32.660 --> 00:19:38.260
where the dimensions of that media
define the dimensions of the block.

00:19:38.420 --> 00:19:41.570
So here, I've highlighted a couple
blocks on this page.

00:19:41.810 --> 00:19:45.900
If I double tap in on this image here,
it looks pretty good.

00:19:45.970 --> 00:19:49.130
I see, you know,
the text and the image looks good.

00:19:49.530 --> 00:19:54.870
Here's this menu that was on the
upper left-hand part of the screen.

00:19:54.890 --> 00:19:59.030
And here, I've double-tapped on the
center area of the page.

00:19:59.150 --> 00:20:04.670
So this is arguably, you know,
the most important part of the webpage.

00:20:04.730 --> 00:20:08.100
It's kind of telling me what's new,
what's next.

00:20:08.130 --> 00:20:10.240
And I can barely read this text.

00:20:10.240 --> 00:20:12.480
I can barely make it out.

00:20:12.580 --> 00:20:14.480
So that's not good.

00:20:14.480 --> 00:20:17.010
There's a way-- lucky for
you-- there's a way that you

00:20:17.010 --> 00:20:20.350
can customize this for iPhone,
and that is just through

00:20:20.420 --> 00:20:24.590
this CSS property,
"Webkit Text Size Adjust." So here,

00:20:24.590 --> 00:20:27.620
on the left,
we have set it to "Auto"-- or it's

00:20:27.720 --> 00:20:29.420
set to "Auto," which is the default.

00:20:29.420 --> 00:20:32.120
And we see the view that we
saw on the previous slide.

00:20:32.120 --> 00:20:35.990
And on the right,
we've scaled the text up by 220%. So now,

00:20:36.100 --> 00:20:40.100
I can, you know,
read this text with no problem at all.

00:20:40.100 --> 00:20:42.020
And it looks great.

00:20:42.050 --> 00:20:46.000
One thing to keep in mind when you
are using "Webkit Text Size Adjust"

00:20:46.000 --> 00:20:50.480
is to make sure that it kind of jives
with the rest of the CSS on your site,

00:20:50.490 --> 00:20:53.180
particularly line height.

00:20:53.180 --> 00:20:57.480
You want to use a relative line height,
a multiplier like 1.2 or

00:20:57.480 --> 00:21:01.320
1.5 or something like that,
as opposed to using kind

00:21:01.320 --> 00:21:06.020
of an absolute line height,
because the line height is going to be

00:21:06.120 --> 00:21:11.040
calculated off of the adjusted text size
if you're using a relative line height.

00:21:11.080 --> 00:21:16.690
So if I have adjusted the text up
by 220%, but my line height is,

00:21:16.770 --> 00:21:21.540
you know, 20 pixels or something,
you could end up with a scenario where

00:21:21.540 --> 00:21:27.420
you have text overlapping vertically,
and that's not what you want.

00:21:27.460 --> 00:21:31.700
So make sure to use a relative line
height if you're using the CSS property.

00:21:32.760 --> 00:21:35.230
More about tap behavior.

00:21:35.410 --> 00:21:39.280
So, if anyone has ever touched
and held on a link,

00:21:39.610 --> 00:21:43.980
you have seen this little bubble pop up,
and this is what we call the "callout

00:21:43.980 --> 00:21:49.030
bubble." And this is really designed
to provide users with additional

00:21:49.030 --> 00:21:51.500
information when they are on your site.

00:21:51.620 --> 00:21:54.810
You know, in this case,
we can read the text, but you know,

00:21:54.810 --> 00:21:57.600
in many cases,
the text might be too small to read,

00:21:57.600 --> 00:22:00.620
even after they've double-tapped in.

00:22:00.740 --> 00:22:05.230
So the call out bubble
provides additional info.

00:22:05.460 --> 00:22:09.440
The point here is to actually provide
useful information in this callout,

00:22:09.570 --> 00:22:10.570
like the info.

00:22:10.620 --> 00:22:13.230
"Click here," I already
know that this is a link,

00:22:13.290 --> 00:22:14.680
it's colored like a link.

00:22:14.680 --> 00:22:16.640
This bubble has popped up.

00:22:16.860 --> 00:22:22.320
"Click here" is not the most useful
phrase to have in the bubble here.

00:22:22.440 --> 00:22:26.540
So the title is actually defined-- the
title meaning the first line of the

00:22:26.540 --> 00:22:31.200
callout bubble is actually defined by
the text that's inside the anchor tag,

00:22:31.340 --> 00:22:35.410
and then the subtitle on this
bubble is defined by the href

00:22:35.410 --> 00:22:38.540
attribute within that tag.

00:22:38.640 --> 00:22:43.900
So we can't really allow customization
on this bubble because that would be

00:22:43.900 --> 00:22:45.980
kind of a security risk for users.

00:22:45.980 --> 00:22:52.330
Imagine I tell you I am paypal.com,
but then you touch the link and

00:22:52.330 --> 00:22:57.090
I direct you to my malicious site and
take all of your username and password

00:22:57.090 --> 00:22:58.820
info and then take all your money.

00:22:58.840 --> 00:22:59.900
That would be bad.

00:22:59.980 --> 00:23:02.260
So we don't allow
customization on this bubble,

00:23:02.290 --> 00:23:04.260
but we do allow you to disable it.

00:23:04.260 --> 00:23:08.740
If it's getting in the way,
especially if you have a web application,

00:23:08.740 --> 00:23:13.040
you might want to disable it if
it's not doing the behavior that you

00:23:13.040 --> 00:23:16.390
think your users would expect to see.

00:23:16.480 --> 00:23:19.840
So you can disable this callout
with just one line of CSS,

00:23:19.850 --> 00:23:23.600
and that's "webkit touch callout = none."

00:23:29.000 --> 00:23:31.540
thing that you can do
with the tap behavior,

00:23:31.560 --> 00:23:33.870
which is kind of neat to do
in your existing web content,

00:23:33.950 --> 00:23:36.700
and also very useful if
you're doing a web app,

00:23:36.730 --> 00:23:39.860
is to customize the
highlight color on links.

00:23:39.860 --> 00:23:43.690
So the default highlight color
is just this ugly gray color,

00:23:43.820 --> 00:23:48.180
but here I've customized it to be this
kind of orange color that fits in with

00:23:48.190 --> 00:23:51.600
the rest of the color scheme of my app.

00:23:51.600 --> 00:23:54.210
And I've done that with
just a line of CSS.

00:23:54.540 --> 00:23:55.770
There's a theme here.

00:23:55.870 --> 00:24:00.570
It's WebKit Tap Highlight Color,
and you specify an RGBA value here.

00:24:00.650 --> 00:24:04.120
I have this orange color,
and I also have an opacity

00:24:04.120 --> 00:24:07.390
that's about 40-- that is 40%.

00:24:10.750 --> 00:24:15.860
The last thing I want to talk about in
terms of optimization is optimizing the

00:24:15.860 --> 00:24:21.000
page load time for your application,
optimizing performance.

00:24:21.000 --> 00:24:25.410
So the main thing that you're going
to run into a mobile device is

00:24:25.410 --> 00:24:28.520
network latency on cellular networks.

00:24:28.580 --> 00:24:32.060
So by latency,
I mean the time it takes for a

00:24:32.070 --> 00:24:36.800
packet to go from your device
to the server and back again,

00:24:36.800 --> 00:24:40.100
as opposed to bandwidth,
which is kind of throughput.

00:24:40.100 --> 00:24:43.600
You know,
of the pipe-- the size of the pipe.

00:24:43.650 --> 00:24:47.480
So latency is round-trip time,
and on Wi-Fi networks,

00:24:47.480 --> 00:24:49.210
latency is relatively low.

00:24:49.350 --> 00:24:51.260
It's about 100 milliseconds.

00:24:51.490 --> 00:24:54.040
So pretty low.

00:24:54.040 --> 00:24:56.970
But on cellular networks,
cell networks have

00:24:56.970 --> 00:25:01.880
inherently high latency,
about 500 milliseconds.

00:25:01.950 --> 00:25:06.540
So you can see that, you know,
if you have a lot of resources

00:25:06.540 --> 00:25:09.500
that you're requesting,
and if they are loaded,

00:25:09.500 --> 00:25:12.900
not in parallel-- if you're
waiting for one to finish loading

00:25:13.040 --> 00:25:17.140
before you can load another one,
you can see that those, you know,

00:25:17.220 --> 00:25:19.680
500 milliseconds are going
to add up really quickly,

00:25:19.770 --> 00:25:23.400
and your page is going
to load very slowly.

00:25:23.880 --> 00:25:28.190
So we actually did a real-world
test of two websites.

00:25:28.260 --> 00:25:33.840
We happened to choose
apple.com versus microsoft.com.

00:25:33.840 --> 00:25:40.090
And you can see the total amount of
resources on apple.com is greater

00:25:40.190 --> 00:25:43.720
than that number on microsoft.com.

00:25:43.720 --> 00:25:48.490
So we're looking at 610K versus 494K.

00:25:48.490 --> 00:25:49.070
So we have a larger amount
of resources on apple.com.

00:25:49.590 --> 00:25:53.080
If we look at the number of resources,
though, you know,

00:25:53.080 --> 00:25:56.330
apple.com has almost half the
number that Microsoft.com has.

00:25:56.430 --> 00:25:59.680
We are looking at 31 versus 55.

00:25:59.700 --> 00:26:06.570
And what that really means is we
have fewer large resources-- fewer

00:26:06.570 --> 00:26:10.580
larger resources on apple.com,
and more smaller resources

00:26:10.580 --> 00:26:12.260
on microsoft.com.

00:26:12.380 --> 00:26:16.000
So the average bytes per
resource on apple.com are 20K,

00:26:16.070 --> 00:26:20.730
and on Microsoft.com, much smaller, 9K.

00:26:21.510 --> 00:26:26.430
So when we loaded these two pages,
both over Edge and 3G,

00:26:26.480 --> 00:26:34.170
the result was that Apple.com loaded two
to three times faster than Microsoft.com.

00:26:34.170 --> 00:26:37.920
You know,
even though the site was bigger,

00:26:38.010 --> 00:26:43.710
you know, in terms of total size,
that fewer number of resources,

00:26:43.710 --> 00:26:45.780
minimizing the number of resources,
really caused this site

00:26:45.780 --> 00:26:45.780
to load much faster.

00:26:46.860 --> 00:26:51.340
So there are a couple suggestions
that I can give you for minimizing

00:26:51.340 --> 00:26:53.130
the number of resources.

00:26:53.170 --> 00:26:57.290
The first is to use this
technique called image spriting.

00:26:57.550 --> 00:27:00.350
Many of you have probably
heard of it before,

00:27:00.480 --> 00:27:03.790
but for those of you who haven't,
this is a technique where you

00:27:03.940 --> 00:27:07.300
use CSS background images,
CSS positioning,

00:27:07.300 --> 00:27:11.130
and the element size to use
really a single image for

00:27:11.130 --> 00:27:13.380
multiple items on the page.

00:27:13.510 --> 00:27:15.970
So let's take a look at an example here.

00:27:16.090 --> 00:27:21.800
I went to this page,
apple.com/iphone/softwareupdate,

00:27:21.870 --> 00:27:27.240
and there was this menu bar at the top
that's divided into eight sections,

00:27:27.310 --> 00:27:32.320
and the iPhone section is this darker
gray because I'm on an iPhone page,

00:27:32.390 --> 00:27:34.460
so that's like the primary highlight.

00:27:34.500 --> 00:27:39.220
And then,
I moved my mouse over the Store button,

00:27:39.220 --> 00:27:42.560
and that turned kind of a medium
gray color when I moused over.

00:27:42.640 --> 00:27:45.300
So you may think, "Okay,
we have these eight images here.

00:27:45.300 --> 00:27:50.010
"And then, you know, six of those,
"maybe we have to duplicate for

00:27:50.010 --> 00:27:55.340
the medium gray "and the primary
dark gray highlight color."

00:27:55.460 --> 00:27:57.740
So that's adding up pretty quickly.

00:27:57.760 --> 00:28:00.820
We're about at 20 images by now.

00:28:00.870 --> 00:28:03.630
But really,
if we take a look at the resources

00:28:03.680 --> 00:28:08.950
for this page-- I looked at it in the
Web Inspector-- I noticed that this was

00:28:09.070 --> 00:28:14.600
really one image on this page that was
accounting for all of these menu items,

00:28:14.600 --> 00:28:19.200
both the very lightest gray color,
the dark gray highlight color,

00:28:19.200 --> 00:28:21.680
and there were actually two
highlight colors in between.

00:28:21.680 --> 00:28:23.680
One of them I didn't run across.

00:28:23.680 --> 00:28:27.400
But we're using one image for all
of these menu items on the page,

00:28:27.450 --> 00:28:31.920
just positioning it in
different ways using CSS.

00:28:31.960 --> 00:28:36.560
So we've gone down
from 26 resources here,

00:28:36.560 --> 00:28:38.860
maybe more, down to one.

00:28:38.870 --> 00:28:41.510
So that's how image sprites work.

00:28:42.450 --> 00:28:46.550
The next thing you can do is really
combine and compress your resource files,

00:28:46.610 --> 00:28:47.800
like JavaScript and CSS.

00:28:47.800 --> 00:28:52.720
So it's really not practical during
your development to work with,

00:28:52.720 --> 00:28:54.660
like, one large JavaScript file.

00:28:54.660 --> 00:28:55.920
I don't know anyone who would do that.

00:28:56.060 --> 00:28:57.890
Or one large CSS file.

00:28:57.900 --> 00:29:04.190
But you can kind of make a script that
concatenates those files and then,

00:29:04.190 --> 00:29:08.440
you know, modifies the files that link to
them on the fly when you're ready

00:29:08.480 --> 00:29:09.760
to kind of deploy your site.

00:29:10.420 --> 00:29:15.350
There are also some compressors
out there that do a great job of,

00:29:15.480 --> 00:29:18.100
you know, not only compressing your
files and making them smaller,

00:29:18.100 --> 00:29:21.490
but some of them also will do
that concatenation for you.

00:29:21.500 --> 00:29:22.710
So...

00:29:26.540 --> 00:29:31.810
Another thing that you can do to optimize
for cellular network page load time is

00:29:31.810 --> 00:29:35.340
to improve your loading parallelism.

00:29:35.340 --> 00:29:38.590
I mentioned earlier,
latency on cell networks

00:29:38.740 --> 00:29:41.860
is 500 milliseconds,
and if you're waiting on one

00:29:41.860 --> 00:29:44.480
resource to load before you
start loading another one,

00:29:44.500 --> 00:29:49.160
before you start loading another one,
those little hunks of 500 milliseconds

00:29:49.160 --> 00:29:50.480
are going to add up quickly.

00:29:50.580 --> 00:29:54.440
So you're better off making sure
that you have as many resources

00:29:54.550 --> 00:29:57.600
floating at one time as possible.

00:29:57.920 --> 00:30:03.860
So one way to kind of examine the
behavior of your page load is in this

00:30:03.980 --> 00:30:07.540
view in Safari and WebKit Nightly builds.

00:30:07.590 --> 00:30:10.900
In the Web Inspector,
if I click on the Resources tab,

00:30:10.980 --> 00:30:13.860
I'm taken to this Network Timeline view.

00:30:13.920 --> 00:30:18.910
And not only does it show me
how much the amount of space I'm

00:30:18.910 --> 00:30:24.520
using for things like documents,
stylesheets, images, scripts, et cetera,

00:30:24.550 --> 00:30:29.360
I can also sort by start time here by
using this little menu at the bottom,

00:30:29.360 --> 00:30:32.960
and that's showing me the order in
which all of my resources are loading,

00:30:32.960 --> 00:30:36.440
which ones are loading at the same time,
et cetera.

00:30:36.550 --> 00:30:37.940
So very valuable.

00:30:37.940 --> 00:30:42.900
One thing to mention here is that
the bars that you see-- the light

00:30:42.900 --> 00:30:46.920
part of the bar is-- the beginning
is you have requested the resource,

00:30:46.940 --> 00:30:51.820
and the end of that light bar is the
resource has actually started loading.

00:30:51.860 --> 00:30:56.320
So the dark area of the bar
is actual resource load time,

00:30:56.320 --> 00:31:00.910
and the light part is the request for
the resource to the start of load,

00:31:00.910 --> 00:31:02.500
that amount of time.

00:31:02.840 --> 00:31:10.660
So as I mentioned,
this tool is available in Safari,

00:31:10.660 --> 00:31:14.920
and it's also part of WebKit,
so you can get the latest version of

00:31:14.920 --> 00:31:14.920
this tool by downloading a Knightly
WebKit build at knightly.webkit.org.

00:31:16.980 --> 00:31:20.150
So you may be thinking, "Well,
that tool looks great, "but, you know,

00:31:20.150 --> 00:31:22.950
it's only available on the desktop,
"and I care about

00:31:22.950 --> 00:31:25.440
cellular networks." Well,
luckily,

00:31:25.440 --> 00:31:29.140
there's a way that you can simulate
network latency on the desktop.

00:31:29.150 --> 00:31:34.090
And it's just a command line tool, IPFW,
make yourself the

00:31:34.090 --> 00:31:38.460
pseudo user in terminal,
IPFW, add pipe 1,

00:31:38.770 --> 00:31:43.030
the source port is HTTP,
configure the delay in

00:31:43.140 --> 00:31:44.900
the second command there.

00:31:44.910 --> 00:31:49.710
And that's gonna give you a pretty
good approximation of cellular

00:31:49.710 --> 00:31:54.270
network latency on a desktop machine.

00:31:55.470 --> 00:32:06.030
So you can use that for testing
when you're ready to go back to

00:32:06.030 --> 00:32:08.580
your super-fast Wi-Fi connection.

00:32:08.580 --> 00:32:08.580
Just execute this command, ipfw flush,
to clear those settings.

00:32:13.200 --> 00:32:18.800
So we have optimized our KEXP site
and we have gone from this layout

00:32:18.800 --> 00:32:22.700
that you see here to one that
looks like this one on the right.

00:32:22.800 --> 00:32:27.050
So some of the changes are subtle,
but now this site doesn't

00:32:27.050 --> 00:32:29.660
have broken plug-in icons.

00:32:29.660 --> 00:32:32.030
It's using all the available
screen real estate.

00:32:32.070 --> 00:32:36.980
I can see the primary text that's
telling me the main info about the page.

00:32:36.980 --> 00:32:38.720
And it looks great.

00:32:38.780 --> 00:32:41.720
So just to kind of recap
the things that we did,

00:32:41.720 --> 00:32:44.980
we defined a viewport to
maximize the screen real estate.

00:32:44.990 --> 00:32:47.680
We customized for the touch interface.

00:32:47.680 --> 00:32:51.060
We optimized performance,
primarily by minimizing

00:32:51.060 --> 00:32:53.200
the number of resources.

00:32:53.200 --> 00:32:55.480
And one more thing I just
want to mention again,

00:32:55.480 --> 00:32:59.140
even though it falls more under
compatibility than optimization,

00:32:59.140 --> 00:33:02.070
we provided fallback
content for plug-ins.

00:33:02.200 --> 00:33:06.080
Plug-ins are not supported
in Safari on iPhone.

00:33:07.290 --> 00:33:18.910
Okay, so that covers optimization,
and now we're going to

00:33:18.910 --> 00:33:18.910
move on to full-fledged web
applications in Safari on iPhone.

00:33:22.410 --> 00:33:25.540
So iPhone web applications
are different from,

00:33:25.640 --> 00:33:31.050
you know, just websites in that they
have a few key characteristics.

00:33:31.080 --> 00:33:35.820
The first is that they often
look like a native application.

00:33:35.900 --> 00:33:39.840
Lots of times,
you'll see web apps kind of emulating

00:33:39.840 --> 00:33:45.800
that sliding browser view or the flip
transition that you see in native apps.

00:33:45.860 --> 00:33:49.610
So they often look native,
or at least have UI that

00:33:49.610 --> 00:33:50.840
is customized for iPhone.

00:33:51.280 --> 00:33:54.200
Secondly, the best ones feel built-in.

00:33:54.200 --> 00:33:59.840
You know, when you touch on a menu item,
you don't see the whole page reload,

00:33:59.840 --> 00:34:04.660
and it's a cue to the user that
you're definitely in a web browser.

00:34:04.710 --> 00:34:08.340
The best iPhone web
applications feel built-in.

00:34:08.440 --> 00:34:13.260
They've built-in, like,
a sliding transition or something else

00:34:13.260 --> 00:34:16.380
to avoid that page reload kind of effect.

00:34:16.380 --> 00:34:17.210
Links don't feel like links,
they feel like menu items.

00:34:17.690 --> 00:34:21.320
And lastly, they often provide
discrete functionality.

00:34:21.350 --> 00:34:23.990
So, you know,
you may have a huge website,

00:34:23.990 --> 00:34:28.240
but it's up to you to decide, you know,
what the most important things

00:34:28.300 --> 00:34:29.780
are for users on the go.

00:34:29.780 --> 00:34:32.870
You know,
the typical way that people use iPhones,

00:34:32.980 --> 00:34:37.660
with the exception of games, of course,
is, you know, they pull them out,

00:34:37.740 --> 00:34:40.680
do a couple things,
they want the key information

00:34:40.760 --> 00:34:42.900
right there at their fingertips.

00:34:42.900 --> 00:34:46.140
It's true of native apps,
and it's also true of web applications.

00:34:47.120 --> 00:34:51.540
Okay, so one example of a web
app on iPhone is Fandango.

00:34:51.540 --> 00:34:55.030
They actually have two versions
available to their users.

00:34:55.130 --> 00:34:58.570
They have their full-blown website here,
which looks good,

00:34:58.650 --> 00:35:00.420
and I'm able to interact with it.

00:35:00.420 --> 00:35:05.060
You know, I double-- I tap in on that
text field near the top,

00:35:05.120 --> 00:35:09.350
and I can enter my zip code,
and see some movies, and it's great.

00:35:09.460 --> 00:35:12.350
But they also have an
iPhone web application,

00:35:12.360 --> 00:35:14.800
and that looks like this.

00:35:15.240 --> 00:35:19.920
So this web app,
it looks pretty good right now.

00:35:19.920 --> 00:35:24.200
You know, it has this set of menu items
that we're used to seeing in

00:35:24.200 --> 00:35:27.910
lots of iPhone applications,
but when I touch on one of

00:35:27.990 --> 00:35:31.570
these items in the list,
the experience kind of

00:35:31.810 --> 00:35:33.170
starts to degrade a bit.

00:35:33.380 --> 00:35:35.180
Like, the whole page reloads.

00:35:35.310 --> 00:35:37.140
It's obvious to me that I'm using,
you know,

00:35:37.140 --> 00:35:40.500
a web application at that point.

00:35:40.820 --> 00:35:44.260
So if you're looking to develop
an app like this one that kind

00:35:44.260 --> 00:35:47.710
of emulates the look and feel
of some of the built-in apps,

00:35:47.870 --> 00:35:50.200
there's a great tool
that's available to you,

00:35:50.350 --> 00:35:53.840
and that tool is DashCode.

00:35:53.860 --> 00:35:56.940
DashCode has a bunch of advantages.

00:35:56.940 --> 00:35:59.520
We're gonna go through a
little demo walk-through here,

00:35:59.520 --> 00:36:03.660
but first,
I wanna just give you a quick overview.

00:36:03.740 --> 00:36:08.370
So one of the biggest advantages are
these prepackaged interface elements.

00:36:08.540 --> 00:36:13.890
So you can basically drag and
drop these elements onto your UI,

00:36:13.890 --> 00:36:19.260
and the CSS and HTML is generated
for you behind the scenes.

00:36:19.350 --> 00:36:21.190
So this is extremely valuable.

00:36:21.400 --> 00:36:23.860
You know, a year ago,
we were doing these Tech Talks,

00:36:23.890 --> 00:36:29.280
and there was no SDK,
so we were talking all about web apps.

00:36:29.340 --> 00:36:32.600
There was also no DashCode for
iPhone web apps at that time.

00:36:32.670 --> 00:36:38.080
This came out along with
the SDK earlier this year.

00:36:38.130 --> 00:36:41.880
So we were having to
describe to people exactly,

00:36:41.880 --> 00:36:44.460
you know, "Okay, well,
if you want a back button "that looks

00:36:44.530 --> 00:36:47.820
like one of the built-in back buttons,
"it has to have this font,

00:36:47.830 --> 00:36:50.720
"and the font should be this size,
and this color,

00:36:50.740 --> 00:36:54.160
"and the background should be this color,
"and here's how you do the gradient,

00:36:54.160 --> 00:36:57.840
"and here's the JavaScript that
you should attach to it." You know,

00:36:57.840 --> 00:37:01.900
that's really a lot of code to
write for your user interface.

00:37:01.920 --> 00:37:03.880
So with DashCode,
all of that is done for you.

00:37:04.020 --> 00:37:07.740
So it takes a huge step,
right out of the box,

00:37:07.810 --> 00:37:11.200
right out of the process,
and lets you kind of focus, you know,

00:37:11.230 --> 00:37:14.070
on your web app, on the functionality.

00:37:14.460 --> 00:37:19.220
So besides just looking great, you know,
the functionality is also built

00:37:19.220 --> 00:37:21.460
in to these prepackaged elements.

00:37:21.640 --> 00:37:23.510
So here we have a list part.

00:37:23.510 --> 00:37:26.610
Another very popular one
is this browser part.

00:37:26.700 --> 00:37:31.520
And the functionality here kind of,
you know, you touch one of these menu

00:37:31.520 --> 00:37:36.200
items and detail view slides in,
and that functionality is built in.

00:37:36.330 --> 00:37:39.870
So the point is, you know,
these elements look great,

00:37:39.870 --> 00:37:44.070
but they also function just
as you would expect as well.

00:37:50.770 --> 00:37:54.100
Another advantage of Dash code
is that when you're building

00:37:54.100 --> 00:37:56.330
a web app in Dash code,
you're building an

00:37:56.380 --> 00:37:58.280
Ajax-based application.

00:37:58.310 --> 00:38:03.340
So we all probably know what Ajax is,
but I will mention it anyway.

00:38:03.340 --> 00:38:06.930
It allows you to fetch content
asynchronously and then

00:38:07.160 --> 00:38:11.210
modify your page-- the DOM of
your page-- dynamically.

00:38:11.220 --> 00:38:14.820
So you're pulling less data
across the wire because you're

00:38:14.880 --> 00:38:18.150
just pulling little pieces that
you need to update on the page.

00:38:18.340 --> 00:38:22.380
So your app is going
to be more responsive.

00:38:22.380 --> 00:38:25.810
Also since you're just
updating parts of the page,

00:38:25.910 --> 00:38:30.860
you can avoid those kind of ugly
and obvious page reloads that you

00:38:30.860 --> 00:38:33.860
see in a web browser all the time.

00:38:33.860 --> 00:38:36.590
You're making a web app, not a website.

00:38:36.610 --> 00:38:39.250
So you want to kind of
avoid those page reloads,

00:38:39.280 --> 00:38:43.000
and by using Ajax,
you can build in some great transitions

00:38:43.000 --> 00:38:48.100
between views instead of having
your whole view wiped out when a

00:38:48.100 --> 00:38:50.920
user is using touches the menu item.

00:38:53.130 --> 00:38:55.640
I think this is the last
advantage that I want to mention,

00:38:55.640 --> 00:39:00.610
and that's that Dashcode also
builds applications that follow

00:39:00.610 --> 00:39:03.480
the model-view-controller paradigm.

00:39:03.680 --> 00:39:05.930
And that really just means that you have,
kind of,

00:39:06.110 --> 00:39:08.420
three layers to your application.

00:39:08.440 --> 00:39:13.940
So this is a very common paradigm
in native desktop programming.

00:39:13.970 --> 00:39:18.020
In Dashcode,
the view is basically your HTML and CSS.

00:39:18.020 --> 00:39:20.110
That's kind of your UI.

00:39:20.210 --> 00:39:25.500
The model is your JavaScript objects,
handles all of your data.

00:39:25.530 --> 00:39:28.360
And the layer between those two layers,
the-- you know,

00:39:28.360 --> 00:39:31.270
how they talk to each other,
the controller, that's really just

00:39:31.270 --> 00:39:34.300
JavaScript in a web application.

00:39:34.360 --> 00:39:38.440
So the big advantage here is, you know,
I may have a web app, I've put it out,

00:39:38.440 --> 00:39:40.380
I've released it, everyone loves it.

00:39:40.430 --> 00:39:44.110
Six months later, I decide I want to
revise the way it looks.

00:39:44.140 --> 00:39:46.920
You know, same functionality,
but I want it to look different.

00:39:46.940 --> 00:39:51.020
Well, I can just rewrite that view layer,
rewrite my HTML and CSS,

00:39:51.070 --> 00:39:53.480
but reuse the controller
and model layers,

00:39:53.480 --> 00:39:56.200
which saves me, you know,
two-thirds of my development time,

00:39:56.200 --> 00:39:58.120
which is great.

00:40:00.460 --> 00:40:04.700
So I'm going to go through a
little quick tutorial here to

00:40:04.850 --> 00:40:06.800
kind of show you around Dash Code.

00:40:06.800 --> 00:40:09.410
But while I'm doing that,
I want to give you an

00:40:09.620 --> 00:40:11.710
overview of the workflow.

00:40:11.820 --> 00:40:14.020
So the first thing that people do
when they use Dash Code is they

00:40:14.460 --> 00:40:18.660
use those prepackaged elements
to make up their interface.

00:40:18.730 --> 00:40:22.630
The next thing they do is they kind of
modify that interface via these different

00:40:22.720 --> 00:40:24.560
inspectors that I'm going to show you.

00:40:24.800 --> 00:40:26.720
And lastly, people edit code directly.

00:40:27.010 --> 00:40:31.730
You know, because you're working with a
GUI tool to lay out your UI,

00:40:32.010 --> 00:40:34.200
you're dealing with code
generation on the backend.

00:40:34.270 --> 00:40:37.000
And while that code
generation is extremely clean,

00:40:37.050 --> 00:40:40.240
you know, in some cases,
it can overwrite manual changes

00:40:40.240 --> 00:40:41.470
that you might make to those files.

00:40:41.590 --> 00:40:46.740
So it's best to really just
leave that step till the end.

00:40:46.870 --> 00:40:48.290
Okay.

00:40:49.700 --> 00:40:55.390
I'm just going to start by launching
Dashcode from the dock here.

00:40:58.610 --> 00:41:06.000
And when I do that, I am presented with
this panel of templates.

00:41:06.000 --> 00:41:08.470
And I mentioned earlier that
Dash Code was originally

00:41:08.590 --> 00:41:11.870
created for dashboard widgets,
so there's a bunch of templates

00:41:11.870 --> 00:41:13.940
there for widgets on Mac OS X.

00:41:13.950 --> 00:41:18.300
But the functionality that was added
back when the SDK was released were these

00:41:18.300 --> 00:41:21.360
templates for iPhone web applications.

00:41:21.400 --> 00:41:24.700
So this one, custom,
it's pretty much just like a blank slate.

00:41:24.840 --> 00:41:29.600
You can drag whatever
UI elements you want onto it.

00:41:29.600 --> 00:41:33.180
It's just your kind of
GUI interface to get started.

00:41:33.200 --> 00:41:37.740
These last two, RSS and podcast,
all that these strictly

00:41:37.740 --> 00:41:44.020
require are like a data URL,
either for the RSS feed or the podcast.

00:41:44.020 --> 00:41:47.170
Of course,
you can customize the UI as you like,

00:41:47.340 --> 00:41:53.330
but most of the functionality is already
built in for you for these two templates.

00:41:53.340 --> 00:41:57.010
And then the middle two templates
are browser and utility.

00:41:57.340 --> 00:42:01.560
So browser is the one that we saw
on a slide earlier that has the kind

00:42:01.560 --> 00:42:07.480
of sliding panels that we're used to
seeing on iPhone built-in applications.

00:42:07.480 --> 00:42:10.890
And utility allows you to
create the type of app,

00:42:10.890 --> 00:42:14.820
like weather or stocks,
that has a front side with information

00:42:14.820 --> 00:42:18.170
and then you flip to the back
side and you have your settings.

00:42:18.400 --> 00:42:21.410
So I'm going to choose utility.

00:42:22.340 --> 00:42:27.150
And when I do that,
here's what I get in Dashcode.

00:42:27.350 --> 00:42:30.700
So, this main area here is
what's called the canvas,

00:42:30.720 --> 00:42:33.450
and this is where you
kind of build your UI,

00:42:33.570 --> 00:42:35.800
where the UI is shown.

00:42:36.040 --> 00:42:43.030
If I go over here in
the upper left corner,

00:42:43.060 --> 00:42:49.590
this is what is called the Navigator.

00:42:49.590 --> 00:42:49.590
And this Navigator really reflects
the DOM structure of your HTML.

00:42:49.590 --> 00:42:49.590
So I can click through,

00:42:49.810 --> 00:43:01.090
And as I select different
items in this navigator list,

00:43:01.090 --> 00:43:01.280
you can see that the corresponding
item is selected in my Canvas view,

00:43:01.280 --> 00:43:01.280
the GUI area here.

00:43:01.760 --> 00:43:06.100
Here's the backside setting,
there's my header, this group,

00:43:06.130 --> 00:43:09.250
the reset button, etc.

00:43:11.000 --> 00:43:17.320
On the bottom left-hand corner
is this set of steps that

00:43:17.320 --> 00:43:20.680
every template comes with.

00:43:20.800 --> 00:43:27.920
So they're not strictly required,
but they're a great way to

00:43:27.920 --> 00:43:28.300
kind of get started with a
template and kind of learn,

00:43:28.300 --> 00:43:28.300
you know, how to approach things.

00:43:28.300 --> 00:43:28.300
So that's great.

00:43:29.110 --> 00:43:33.700
There is also at the bottom
here an integrated code view.

00:43:33.700 --> 00:43:39.410
If you've ever used, you know,
Xcode or other text editors on Mac OS X,

00:43:39.430 --> 00:43:42.980
you're used to seeing this file switcher.

00:43:42.980 --> 00:43:47.970
And here we have, you know,
all of the code for our project.

00:43:47.970 --> 00:43:50.260
So here's a look at the CSS.

00:43:50.260 --> 00:43:52.480
You can see it looks really good,
very clean.

00:43:52.480 --> 00:43:52.480
And that's where you're
going to edit code directly.

00:43:55.150 --> 00:43:58.640
There is also an Inspector panel,
similar to, you know,

00:43:58.720 --> 00:44:03.640
every inspector that you've ever seen
for every application on Mac OS X.

00:44:03.640 --> 00:44:06.370
And this is what you use to
kind of customize the elements

00:44:06.540 --> 00:44:08.140
in your Canvas view here.

00:44:08.180 --> 00:44:12.460
So I have, you know,
this sticky note selected,

00:44:12.610 --> 00:44:15.320
and if I wanna change
the background color,

00:44:15.350 --> 00:44:18.420
I can do that right
here in the Inspector,

00:44:18.500 --> 00:44:22.280
and that generates the CSS for
me behind the scenes to

00:44:22.280 --> 00:44:24.620
change that background color.

00:44:24.620 --> 00:44:28.030
Of course, you can customize other
things like the size,

00:44:28.030 --> 00:44:31.720
position, the font of the text,
the color of the text, et cetera.

00:44:31.750 --> 00:44:33.360
We won't walk through
all of them right now,

00:44:33.360 --> 00:44:36.720
but it's all there for you to explore.

00:44:37.010 --> 00:44:41.650
There is also a library,
and this is where you find those

00:44:41.870 --> 00:44:45.680
pre-packaged interface elements
that I've mentioned a few times.

00:44:45.680 --> 00:44:49.780
What's also nice is if-- I probably
would not want to add a back

00:44:49.930 --> 00:44:53.270
button to this application,
because it's a utility app that's

00:44:53.320 --> 00:44:56.160
gonna flip to the other side,
but if I did want to add it,

00:44:56.160 --> 00:44:59.800
these guides would show up
to tell me exactly where,

00:45:00.000 --> 00:45:02.380
you know,
the right place is to drop that button.

00:45:02.570 --> 00:45:06.730
So, I know-- you know,
I don't have to guess on how to make

00:45:06.840 --> 00:45:08.490
this look and feel like a built-in app.

00:45:10.900 --> 00:45:18.860
Also in the library view are some
code snippets for just commonly used

00:45:19.010 --> 00:45:26.790
operations that you might need to
interact with the prepackaged parts.

00:45:26.790 --> 00:45:26.790
So get this indicator value,
get this gauge value, etc.

00:45:26.790 --> 00:45:26.790
All of these code snippets
are here for you to use.

00:45:27.630 --> 00:45:31.030
So now, you know,
that's a brief overview of

00:45:31.030 --> 00:45:37.160
the UI and how it works,
and now I'm just going to go ahead,

00:45:37.160 --> 00:45:37.160
and I'm gonna click "Run"
to see what happens.

00:45:39.090 --> 00:45:41.990
And the iPhone simulator
is going to launch,

00:45:41.990 --> 00:45:43.170
and it's going to load my app.

00:45:43.300 --> 00:45:49.490
The last time I loaded it,
I set the color to green,

00:45:49.490 --> 00:45:49.490
so I'm going to reset it to black.

00:45:49.780 --> 00:45:50.480
And click done.

00:45:50.480 --> 00:45:57.340
And so this is looking a lot like
a built-in iPhone application.

00:45:57.340 --> 00:46:01.550
I can also click pause here in the main
view and you see this message come up,

00:46:01.710 --> 00:46:03.130
pausing at the next opportunity.

00:46:03.160 --> 00:46:06.240
So I'll have to do something over here.

00:46:06.240 --> 00:46:11.620
And now we've paused and this canvas
area has been replaced by all of my

00:46:11.650 --> 00:46:16.470
local variables and down here in the
code view the current line of code

00:46:16.480 --> 00:46:19.000
that's being executed is highlighted.

00:46:19.200 --> 00:46:23.560
So this is great not only to debug
the functionality of your app,

00:46:23.560 --> 00:46:27.220
but also to kind of get a
closer look at how the default

00:46:27.330 --> 00:46:31.220
templates are doing what they do,
so maybe you wanna build a flip

00:46:31.330 --> 00:46:34.780
transition into your existing web app.

00:46:34.780 --> 00:46:39.380
Working with the debugger and the default
templates is a great way to get insight

00:46:39.380 --> 00:46:41.480
into how that functionality works.

00:46:42.900 --> 00:46:45.940
Okay, so I'm going to click continue.

00:46:45.980 --> 00:46:50.030
And then another thing
I wanted to show you today,

00:46:50.190 --> 00:46:53.740
oh, I'll have to click run again, sorry.

00:46:54.740 --> 00:46:58.340
Uh, is that there's a new
feature in iPhone OS,

00:46:58.410 --> 00:47:00.440
uh, 2.1, actually.

00:47:00.490 --> 00:47:02.740
Some people haven't
quite discovered it yet,

00:47:02.740 --> 00:47:04.340
so I'm gonna mention it here.

00:47:04.410 --> 00:47:10.820
Um, I can add this to my home screen.

00:47:11.190 --> 00:47:13.910
and then, whenever I launch it
from the home screen,

00:47:13.980 --> 00:47:16.790
it's running in what we
call full screen mode.

00:47:16.920 --> 00:47:20.680
So the Safari UI elements, you know,
it's still a web app,

00:47:20.680 --> 00:47:25.720
but you no longer see the URL field
or the Safari buttons at the bottom

00:47:25.740 --> 00:47:29.920
that are like back and forward,
and you know, the bookmarks or whatever.

00:47:29.930 --> 00:47:34.270
And now, this looks, you know,
even more like a built-in application.

00:47:34.390 --> 00:47:38.280
So this is a feature that's new in 2.1,
and we're going to go over

00:47:38.670 --> 00:47:41.930
all the specifics of the
code later this afternoon,

00:47:42.030 --> 00:47:43.830
how to achieve this effect.

00:47:43.870 --> 00:47:46.640
But right now, I just wanted to mention,
you know,

00:47:46.640 --> 00:47:50.700
it's also just a checkbox to enable
this feature here in Dashcode.

00:47:50.700 --> 00:47:54.000
Under "Application Attributes"
on the left-hand column,

00:47:54.020 --> 00:47:58.580
if we look under "Web Clip," we see
a checkbox for full screen mode.

00:47:58.640 --> 00:48:02.340
So just check that, and then,
every time a user launches your web

00:48:02.340 --> 00:48:05.230
application from the home screen icon,
they'll be running in

00:48:05.260 --> 00:48:07.660
this full screen mode,
and your web app is going to, you know,

00:48:07.660 --> 00:48:10.810
look and feel even more
like a built-in app.

00:48:11.570 --> 00:48:13.970
The last thing about dashcode
that I want to mention is

00:48:13.970 --> 00:48:17.070
that they are easy to deploy.

00:48:17.130 --> 00:48:20.360
You know,
you can add a web server to deploy to.

00:48:20.380 --> 00:48:23.860
You can also deploy, you know,
directly to your mobile me account.

00:48:23.880 --> 00:48:27.860
And I've actually deployed just the
browser template and this utility

00:48:27.860 --> 00:48:29.620
template to my mobile me account.

00:48:29.700 --> 00:48:33.630
And I'll have those URLs up at the end
of this session so that you can see,

00:48:33.840 --> 00:48:36.760
you know, how these templates
behave on a real device.

00:48:36.900 --> 00:48:39.780
You know,
we're looking on a laptop right now.

00:48:39.780 --> 00:48:41.410
So I'll have those up at
the end of the session.

00:48:41.420 --> 00:48:43.320
Okay.

00:48:49.490 --> 00:48:50.830
So that's it for Dashcode.

00:48:51.080 --> 00:48:57.280
I think you can see it's a
way to get up and running,

00:48:57.390 --> 00:49:03.920
you know, with a web app that's really,
really quickly,

00:49:03.920 --> 00:49:03.920
especially if you want it to kind of,
you know,

00:49:03.920 --> 00:49:03.920
emulate the look and feel of some
of the built-in apps on iPhone.

00:49:04.500 --> 00:49:06.800
So the last thing we're going
to talk about today is web

00:49:06.870 --> 00:49:09.310
content in native applications.

00:49:09.600 --> 00:49:11.740
So I mentioned this in the beginning.

00:49:11.740 --> 00:49:15.860
If you have an app, a web app,
and you decide that you want

00:49:16.060 --> 00:49:20.350
to have or utilize a feature
that's SDK only right now.

00:49:20.450 --> 00:49:24.200
So some of those include
location-based services,

00:49:24.320 --> 00:49:27.960
accelerometer data,
accessing built-in contacts.

00:49:28.020 --> 00:49:31.700
Those are all features that you can
only utilize from the SDK right now.

00:49:31.710 --> 00:49:34.900
So you would have to build
a native application.

00:49:34.900 --> 00:49:39.690
But it's easy to kind of leverage
your existing web code in the

00:49:39.770 --> 00:49:44.970
interface for that application by
using this view called UI WebView.

00:49:45.470 --> 00:49:50.180
So all of the technologies that you would
expect to be supported in a web view are,

00:49:50.200 --> 00:49:54.290
of course, supported-- so HTML, CSS,
and JavaScript.

00:49:54.330 --> 00:49:58.420
These other document types that you
can view from within Safari on iPhone,

00:49:58.470 --> 00:50:02.820
like PDF, Iwork, and Office documents,
and also SVG and Style Text,

00:50:02.990 --> 00:50:07.060
just to name a few of the
supported technologies.

00:50:07.060 --> 00:50:09.720
Also worth mentioning--
you can load-- of course,

00:50:09.720 --> 00:50:12.870
load content from an
HTTP URL over the wire,

00:50:13.080 --> 00:50:16.760
but you can also load content
locally from your application bundle.

00:50:16.830 --> 00:50:20.140
So maybe, you know,
you have an index.html file,

00:50:20.340 --> 00:50:23.140
it's not gonna change for a while,
or maybe some CSS.

00:50:23.170 --> 00:50:24.870
You don't have to load
that over the wire.

00:50:25.040 --> 00:50:28.750
You can put it in your
application bundle and load it,

00:50:28.910 --> 00:50:32.590
you know, on the fly when your
application launches.

00:50:34.480 --> 00:50:38.230
One thing I want to mention here,
you know, iPhone SDK has been out

00:50:38.230 --> 00:50:42.400
for six months now or so,
and we have a full-fledged

00:50:42.540 --> 00:50:46.460
SDK on the desktop,
WebKit SDK, that is, you know,

00:50:46.460 --> 00:50:48.660
has a wealth of functionality.

00:50:48.660 --> 00:50:51.320
You could use it to make a
full-fledged web browser,

00:50:51.320 --> 00:50:51.920
if you like.

00:50:52.000 --> 00:50:56.860
This is not exactly equivalent
to UI WebView on iPhone.

00:50:56.860 --> 00:51:00.680
You know, UI WebView, for now,
is primarily... its primary

00:51:00.760 --> 00:51:02.500
purpose is to display web content.

00:51:03.290 --> 00:51:07.480
So these two are not designed
to be equal right now,

00:51:07.480 --> 00:51:12.260
but that said, there's a lot that you
can do with UI WebView,

00:51:12.260 --> 00:51:15.520
especially in terms of kind of
bridging your web code to the

00:51:15.550 --> 00:51:17.920
native code of your application.

00:51:17.920 --> 00:51:20.880
So there's two directions on that bridge.

00:51:21.000 --> 00:51:24.350
The first is executing
JavaScript from native code,

00:51:24.360 --> 00:51:28.900
and the second is the other direction,
calling native code from JavaScript.

00:51:29.060 --> 00:51:32.380
And we're going to go over how
to do both of these things.

00:51:37.630 --> 00:51:40.900
So starting off,
executing JavaScript from native code.

00:51:40.950 --> 00:51:43.080
This part is really straightforward.

00:51:43.100 --> 00:51:45.350
You create a string-- this
is in your native code.

00:51:45.540 --> 00:51:47.450
You make a string of JavaScript.

00:51:47.630 --> 00:51:51.240
Here, I've made one with using
a string with string.

00:51:51.250 --> 00:51:57.070
And I've created a string of
JavaScript that is "window.alert wow."

00:51:57.530 --> 00:52:06.990
Next, I'm going to just pass this to
the method "string by evaluating

00:52:06.990 --> 00:52:06.990
JavaScript from string," and
that will execute my JavaScript.

00:52:07.870 --> 00:52:13.100
One thing to mention,
you should wait until the content

00:52:13.370 --> 00:52:16.640
of your UI WebView has fully loaded.

00:52:17.050 --> 00:52:22.320
So there's a callback available
that you can listen for,

00:52:22.320 --> 00:52:26.230
and when you get that callback,
WebView did finish load,

00:52:26.230 --> 00:52:26.230
you'll know that, you know,
content has fully loaded,

00:52:26.230 --> 00:52:26.230
and it's now safe to execute JavaScript.

00:52:33.400 --> 00:52:43.790
Another direction on that bridge between
your web code and the native code is

00:52:43.870 --> 00:52:47.920
executing native code from JavaScript.

00:52:47.920 --> 00:52:47.920
So, there are kind of three pieces
of the puzzle here that you need

00:52:47.920 --> 00:52:47.920
to be aware of to make this work.

00:52:48.410 --> 00:52:54.430
The first is-- the first piece that you
need to know about is that you can define

00:52:54.430 --> 00:52:57.920
a custom URL scheme for your application.

00:52:57.920 --> 00:53:03.050
So URL schemes that we're all used
to seeing are things like HTTP,

00:53:03.150 --> 00:53:04.610
Tel Links, FTP.

00:53:04.710 --> 00:53:08.860
Those are all URL schemes
that we're used to seeing.

00:53:08.890 --> 00:53:11.530
But you can create your own
URL scheme for your application.

00:53:11.530 --> 00:53:11.530
So here, I've created my URL scheme.

00:53:11.530 --> 00:53:11.530
It's my app.

00:53:13.110 --> 00:53:19.280
The second piece of the puzzle is to
know that every time a load is initiated,

00:53:19.280 --> 00:53:24.010
there's a callback,
and that is "Should start

00:53:24.010 --> 00:53:26.850
load with request." Okay?

00:53:27.330 --> 00:53:32.250
And in that callback,
you can look at the scheme of

00:53:32.250 --> 00:53:34.630
the URL for my application.

00:53:34.630 --> 00:53:34.630
Is it equal to my app?

00:53:34.630 --> 00:53:34.630
Okay,
so that's the second piece of the puzzle.

00:53:34.880 --> 00:53:37.570
The last piece is your HTML.

00:53:37.920 --> 00:53:40.630
So we mentioned that
"shouldStartLoadWithRequest,"

00:53:40.860 --> 00:53:45.000
that's a callback that fires
every time a load is initiated.

00:53:45.060 --> 00:53:51.370
Well, you can initiate a load by setting
"window.location" to a URL that is equal

00:53:51.490 --> 00:53:53.750
to the URL scheme for your application.

00:53:53.890 --> 00:53:59.610
So what's going to happen here is
a user clicks on whatever element

00:53:59.740 --> 00:54:01.390
has this onclick attached to it.

00:54:01.550 --> 00:54:03.650
So they click on this element.

00:54:03.740 --> 00:54:07.160
A load request is initiated,
so this callback fires.

00:54:07.170 --> 00:54:12.370
And then, in that method,
you look to see if the URL scheme is

00:54:12.480 --> 00:54:15.240
equal to the scheme for your application.

00:54:15.240 --> 00:54:17.710
If it is, maybe you want to do
something interesting,

00:54:17.800 --> 00:54:22.280
take a picture, get the location,
whatever, and then return "no" so

00:54:22.280 --> 00:54:25.340
that the load is abandoned.

00:54:25.350 --> 00:54:28.420
And if it's not your URL scheme,
you just return "yes," and if

00:54:28.420 --> 00:54:32.420
it's an HTTP request or whatever,
that request goes through,

00:54:32.420 --> 00:54:36.490
the content loads,
and everything is great.

00:54:36.840 --> 00:54:42.900
So this is, you know,
kind of the three pieces of the puzzle,

00:54:42.900 --> 00:54:42.900
executing native code from JavaScript.

00:54:45.210 --> 00:54:52.030
Okay, so that really covers all that
I wanted to talk about today.

00:54:52.030 --> 00:54:59.310
We talked a little bit about how
Safari on iPhone has changed the way

00:54:59.310 --> 00:55:03.990
people browse the web on mobile devices.

00:55:03.990 --> 00:55:04.650
We went over how Safari on
iPhone does what it does,

00:55:04.650 --> 00:55:04.650
and how you can utilize
that in your web content.

00:55:04.810 --> 00:55:07.440
We talked about optimizing
for Safari on iPhone,

00:55:07.440 --> 00:55:10.700
how to-- you know,
if you have an existing site,

00:55:10.840 --> 00:55:13.950
and you wanna make just a couple tweaks,
and, you know,

00:55:13.950 --> 00:55:17.930
have those-- have that degrade
gracefully in desktop browsers,

00:55:17.940 --> 00:55:20.820
we went over some tips
that you could follow.

00:55:21.010 --> 00:55:23.810
We took a look at creating
web apps in Dash code,

00:55:24.100 --> 00:55:27.080
how to get up and running quickly
with a web app that looks and

00:55:27.080 --> 00:55:29.860
feels like a built-in application.

00:55:29.900 --> 00:55:33.240
And the last piece that we
covered was integrating web

00:55:33.420 --> 00:55:35.720
content into native applications.

00:55:35.860 --> 00:55:40.690
So if you wanna integrate with a
feature that's SDK-only right now,

00:55:40.880 --> 00:55:43.230
you'd have to make a native app,
and we talked about how to do

00:55:43.260 --> 00:55:47.890
that and how to bridge your
web code with your native code.

00:55:49.290 --> 00:55:53.050
So coming up this afternoon,
we're going to go in-depth on

00:55:53.050 --> 00:55:57.480
some of the latest and greatest
web technologies available.

00:55:57.650 --> 00:56:01.820
So we're going to talk about
CSS transforms and animations.

00:56:01.820 --> 00:56:06.610
This is a way to add hardware
accelerated animations to your

00:56:06.610 --> 00:56:09.260
web applications-- very exciting.

00:56:09.350 --> 00:56:13.360
We're also going to talk about what
we call DOM touch and gesture events.

00:56:13.360 --> 00:56:15.650
This is like multi-touch
through JavaScript.

00:56:15.890 --> 00:56:19.200
So in native apps,
you can define your own gesture,

00:56:19.260 --> 00:56:21.120
detector rotation, et cetera.

00:56:21.280 --> 00:56:23.090
You can also do that
through JavaScript now.

00:56:23.100 --> 00:56:25.300
We're gonna go over that.

00:56:25.340 --> 00:56:28.940
We're going to talk, lastly,
about local data storage.

00:56:28.980 --> 00:56:35.220
So storing structured data in
SQLite databases and also creating

00:56:35.220 --> 00:56:39.490
a version of your web application
that fully functions offline.

00:56:39.530 --> 00:56:43.790
We're gonna cover both of those
topics in terms of local data storage.

00:56:45.590 --> 00:56:49.740
So here's my name and contact info,
vicki@apple.com.

00:56:49.760 --> 00:56:54.010
And then,
I have a couple titles of documents that

00:56:54.100 --> 00:56:56.420
I think would be useful for you guys.

00:56:56.420 --> 00:57:00.780
And they're all linked from
developer.apple.com/webapps.

00:57:00.840 --> 00:57:02.460
So the URLs here are really long.

00:57:02.480 --> 00:57:06.780
The best thing to do is just go
to developer.apple.com/webapps

00:57:06.780 --> 00:57:08.460
and look for these titles.

00:57:08.520 --> 00:57:14.070
So we have the iPhone Web Content Guide,
and also the Dash Code User Guide,

00:57:14.100 --> 00:57:18.330
which provides a tutorial of
creating an iPhone web application.

00:57:18.390 --> 00:57:21.400
It goes more in-depth than what
we had time for here today.

00:57:21.420 --> 00:57:24.950
And also, the iPhone Developer site,
which has all your

00:57:25.050 --> 00:57:28.620
information about native apps,
including that class I mentioned,

00:57:28.620 --> 00:57:32.840
UI WebView,
that's at developer.apple.com/iphone.