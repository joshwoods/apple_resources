WEBVTT

00:00:07.516 --> 00:00:17.156
[ Music ]

00:00:17.656 --> 00:00:18.916
>> Good morning, everyone.

00:00:19.016 --> 00:00:20.436
[ Applause ]

00:00:20.436 --> 00:00:20.666
Wow.

00:00:22.786 --> 00:00:23.206
Thank you.

00:00:24.616 --> 00:00:26.046
Welcome to Advanced Dark Mode.

00:00:26.696 --> 00:00:27.786
I'm Matt Jacobson.

00:00:27.786 --> 00:00:29.336
I'll be joined later on stage by

00:00:29.336 --> 00:00:30.366
my colleague, Jeff Nadeau.

00:00:30.966 --> 00:00:32.136
We're engineers in the Cocoa

00:00:32.136 --> 00:00:33.286
Frameworks group at Apple.

00:00:34.516 --> 00:00:36.576
We are super excited to talk to

00:00:36.576 --> 00:00:39.076
you today about the awesome Dark

00:00:39.076 --> 00:00:40.086
Mode in Mojave.

00:00:40.666 --> 00:00:45.976
Now, in the intro session

00:00:45.976 --> 00:00:48.326
yesterday, you learned all the

00:00:48.326 --> 00:00:50.266
things you need to get started

00:00:50.266 --> 00:00:51.936
adapting your app for Dark Mode,

00:00:52.526 --> 00:00:54.356
like rebuilding on the macOS

00:00:54.356 --> 00:00:55.456
10.14 SDK.

00:00:55.456 --> 00:00:58.676
Making use of dynamic colors

00:00:58.676 --> 00:01:00.426
instead of static or hardcoded

00:01:00.426 --> 00:01:00.966
colors.

00:01:01.916 --> 00:01:03.406
Making correct use of template

00:01:03.406 --> 00:01:04.796
images and materials.

00:01:05.456 --> 00:01:07.516
And, most of all, making use of

00:01:07.516 --> 00:01:09.876
the new features in Xcode 10 to

00:01:09.876 --> 00:01:11.966
define custom color and image

00:01:11.966 --> 00:01:14.046
assets specifically for Dark

00:01:14.046 --> 00:01:14.216
Mode.

00:01:15.176 --> 00:01:17.636
Now, if you need a review on any

00:01:17.636 --> 00:01:18.726
of those topics, I highly

00:01:18.726 --> 00:01:20.236
recommend going back and

00:01:20.236 --> 00:01:21.406
watching the intro session on

00:01:21.406 --> 00:01:22.026
video later.

00:01:24.486 --> 00:01:27.296
Now, most UI will look great in

00:01:27.296 --> 00:01:28.686
Dark Mode using just those

00:01:28.716 --> 00:01:29.266
techniques.

00:01:29.586 --> 00:01:31.386
In fact, some of our system apps

00:01:31.386 --> 00:01:32.796
required no other changes.

00:01:32.796 --> 00:01:33.326
It was great.

00:01:34.636 --> 00:01:36.016
But we know some cases will

00:01:36.016 --> 00:01:37.436
require a little bit more work

00:01:37.756 --> 00:01:38.626
and that's what we're going to

00:01:38.626 --> 00:01:39.686
get into in this session.

00:01:43.696 --> 00:01:46.266
We're going to cover six main

00:01:46.266 --> 00:01:46.956
areas today.

00:01:47.716 --> 00:01:49.806
First, the appearance system,

00:01:50.266 --> 00:01:51.826
how it works, and how you can

00:01:51.826 --> 00:01:53.086
make use of it in your custom

00:01:53.086 --> 00:01:53.596
views.

00:01:54.716 --> 00:01:57.236
Second, materials, what they

00:01:57.236 --> 00:01:59.406
are, and how you can best make

00:01:59.406 --> 00:02:01.836
use of them in your UI.

00:02:02.006 --> 00:02:03.296
Then I'll hand it over to Jeff

00:02:03.296 --> 00:02:05.296
and he'll talk about vibrant

00:02:05.296 --> 00:02:06.716
blending, which is an awesome

00:02:06.716 --> 00:02:07.946
way to make your views look

00:02:08.056 --> 00:02:08.446
great.

00:02:09.696 --> 00:02:11.576
As well as reacting correctly to

00:02:11.576 --> 00:02:13.336
selection using something called

00:02:13.446 --> 00:02:14.236
background style.

00:02:15.526 --> 00:02:17.096
Finally, he'll wrap it up with

00:02:17.526 --> 00:02:19.376
some discussion on how to back

00:02:19.596 --> 00:02:21.036
deploy your app to older

00:02:21.036 --> 00:02:22.916
versions of macOS while still

00:02:22.916 --> 00:02:25.006
supporting Dark Mode, as well as

00:02:25.006 --> 00:02:26.956
some general tips and tricks for

00:02:27.026 --> 00:02:28.606
polishing your apps for Dark

00:02:28.606 --> 00:02:28.796
Mode.

00:02:30.346 --> 00:02:30.966
All right.

00:02:30.966 --> 00:02:33.006
Let's get started.

00:02:33.146 --> 00:02:36.296
So, in Mojave, your app will

00:02:36.296 --> 00:02:38.886
need to look great in light and

00:02:38.886 --> 00:02:39.106
dark.

00:02:40.026 --> 00:02:41.626
And the way you'll do that is

00:02:41.626 --> 00:02:42.726
using something called

00:02:42.916 --> 00:02:44.006
NSAppearance.

00:02:45.186 --> 00:02:47.396
NSAppearance is the theme system

00:02:47.596 --> 00:02:49.906
used throughout Cocoa and the

00:02:49.906 --> 00:02:51.966
key part about it is you only

00:02:51.966 --> 00:02:53.416
have to maintain a single view

00:02:53.416 --> 00:02:55.066
hierarchy and NSAppearance will

00:02:55.066 --> 00:02:57.176
help it look great in light and

00:02:57.176 --> 00:02:57.536
dark.

00:02:59.186 --> 00:03:01.956
Now, in addition to being at the

00:03:01.956 --> 00:03:03.976
core of Dark Mode, we've already

00:03:03.976 --> 00:03:05.426
been using NSAppearance for

00:03:05.426 --> 00:03:06.936
several years and it's underlied

00:03:06.936 --> 00:03:08.316
[phonetic] such features as the

00:03:08.316 --> 00:03:10.636
high contrast mode of macOS as

00:03:10.636 --> 00:03:12.376
well as the touch bar UI

00:03:12.616 --> 00:03:14.266
designed specifically for that

00:03:14.266 --> 00:03:15.266
awesome piece of hardware.

00:03:16.116 --> 00:03:20.056
Now, previously we've had one

00:03:20.196 --> 00:03:21.726
main appearance, one main light

00:03:21.726 --> 00:03:23.546
appearance for aqua windows and

00:03:23.546 --> 00:03:24.226
we called aqua.

00:03:24.816 --> 00:03:26.336
And, of course, in 10.14, we're

00:03:26.336 --> 00:03:27.806
introducing a second appearance

00:03:27.806 --> 00:03:29.636
for aqua windows for Dark Mode

00:03:30.166 --> 00:03:30.966
called darkAqua.

00:03:32.346 --> 00:03:33.916
These objects contain all the

00:03:33.916 --> 00:03:35.556
assets that views draw with.

00:03:36.336 --> 00:03:38.036
So, any time you use system

00:03:38.036 --> 00:03:39.886
dynamic colors or standard

00:03:39.886 --> 00:03:42.226
effects or named images or even

00:03:42.226 --> 00:03:43.606
just standard Cocoa controls,

00:03:43.786 --> 00:03:45.076
this is where all that stuff is

00:03:45.166 --> 00:03:45.746
coming from.

00:03:46.166 --> 00:03:49.436
And AppKit will automatically

00:03:49.436 --> 00:03:51.486
provide appearances for all of

00:03:51.486 --> 00:03:53.646
you views and windows based on

00:03:53.646 --> 00:03:55.136
the user's light/dark preference

00:03:55.136 --> 00:03:56.796
in system preferences once you

00:03:56.796 --> 00:03:59.326
link on the macOS 10.14 SDK.

00:04:00.046 --> 00:04:02.056
So, here's our beautiful

00:04:02.356 --> 00:04:03.786
Chameleon Wrangler app that

00:04:03.896 --> 00:04:06.916
Rachel and Taylor created in the

00:04:06.916 --> 00:04:08.646
intro session and you can see

00:04:08.776 --> 00:04:10.096
once we linked it on the macOS

00:04:10.096 --> 00:04:13.046
10.14 SDK, AppKit went ahead and

00:04:13.106 --> 00:04:14.506
automatically gave it the

00:04:14.506 --> 00:04:15.526
darkAqua appearance.

00:04:16.676 --> 00:04:18.196
Now, that's great, but what if

00:04:18.196 --> 00:04:19.315
we want to change the

00:04:19.315 --> 00:04:20.005
appearance?

00:04:20.296 --> 00:04:22.106
For example, what if we wanted

00:04:22.676 --> 00:04:25.266
to change the appearance of this

00:04:25.266 --> 00:04:25.986
notes view?

00:04:26.736 --> 00:04:29.136
We might think that in the dark

00:04:29.136 --> 00:04:30.946
appearance we still might want

00:04:30.946 --> 00:04:32.636
the notes view to appear light.

00:04:33.856 --> 00:04:35.626
Well, you can do that using

00:04:35.626 --> 00:04:37.146
something called

00:04:37.146 --> 00:04:38.786
NSAppearanceCustomization.

00:04:39.626 --> 00:04:41.026
Now, this is a protocol, but

00:04:41.026 --> 00:04:42.386
it's not a protocol you have to

00:04:42.386 --> 00:04:43.616
go off and adopt in your

00:04:43.616 --> 00:04:44.376
applications.

00:04:45.266 --> 00:04:47.486
It's already adopted by NSView

00:04:47.786 --> 00:04:50.226
and NSWindow and, in Mojave,

00:04:50.226 --> 00:04:52.116
NSApplication conforms as well.

00:04:53.086 --> 00:04:54.556
It's a pretty simple protocol.

00:04:54.706 --> 00:04:55.956
It just adds two properties.

00:04:56.466 --> 00:04:58.946
First property is appearance and

00:04:58.946 --> 00:05:00.336
this is where you can override

00:05:00.336 --> 00:05:01.916
the appearance for a particular

00:05:01.916 --> 00:05:02.386
object.

00:05:03.346 --> 00:05:05.066
Now, it's an optional

00:05:05.116 --> 00:05:07.696
NSAppearance because, if you set

00:05:07.696 --> 00:05:09.216
it to nil, the object will

00:05:09.216 --> 00:05:10.716
simply inherit its appearance

00:05:10.916 --> 00:05:11.886
from its ancestors.

00:05:13.496 --> 00:05:15.346
There's also effective

00:05:15.346 --> 00:05:17.356
appearance and this is a

00:05:17.476 --> 00:05:19.456
read-only property that you can

00:05:19.456 --> 00:05:21.806
use to find out what appearance

00:05:22.006 --> 00:05:22.976
a view will draw with.

00:05:23.516 --> 00:05:26.986
And of course, to use this,

00:05:26.986 --> 00:05:28.346
you'll have to get the right

00:05:28.346 --> 00:05:30.086
NSAppearance object and you can

00:05:30.086 --> 00:05:32.216
do that pretty easily using the

00:05:32.216 --> 00:05:34.456
NSAppearance named initializer.

00:05:34.896 --> 00:05:38.416
Just pass aqua or darkAqua based

00:05:38.416 --> 00:05:40.166
on which appearance you want and

00:05:41.576 --> 00:05:42.996
then you can go ahead and just

00:05:42.996 --> 00:05:44.396
assign that to the appearance

00:05:44.396 --> 00:05:45.886
property of the object that

00:05:45.886 --> 00:05:46.936
you'd like to customize.

00:05:47.106 --> 00:05:49.046
So, in this case, we'll assign

00:05:49.136 --> 00:05:51.466
the aqua appearance to the

00:05:51.466 --> 00:05:52.826
appearance property of the text

00:05:52.826 --> 00:05:54.416
view and now it uses the light

00:05:54.416 --> 00:05:54.996
appearance.

00:05:54.996 --> 00:05:55.646
All right.

00:05:56.956 --> 00:05:59.836
That was pretty easy, so let's

00:05:59.836 --> 00:06:00.986
take a look at another case.

00:06:02.186 --> 00:06:04.626
You might have a window that

00:06:04.836 --> 00:06:06.076
kind of hangs off of a

00:06:06.076 --> 00:06:07.026
particular view.

00:06:07.936 --> 00:06:09.306
And you probably want its

00:06:09.306 --> 00:06:11.236
appearance to match the view it

00:06:11.236 --> 00:06:12.016
hangs off of.

00:06:12.886 --> 00:06:15.196
Now, we could just assign the

00:06:15.196 --> 00:06:16.446
aqua appearance to this window

00:06:16.476 --> 00:06:17.756
just like we did to the view,

00:06:18.766 --> 00:06:20.316
but what we really want is

00:06:20.616 --> 00:06:21.636
something a little stronger.

00:06:21.636 --> 00:06:23.196
We want its appearance to

00:06:23.196 --> 00:06:26.576
inherit from the view and we can

00:06:26.576 --> 00:06:28.716
do that-- first of all, AppKit

00:06:28.716 --> 00:06:30.316
will automatically do this for

00:06:30.316 --> 00:06:31.696
us for a number of common

00:06:31.696 --> 00:06:34.586
windows, like menus, popovers,

00:06:34.626 --> 00:06:36.546
tool tips, and sheets, so you

00:06:36.546 --> 00:06:37.456
don't have to worry about it in

00:06:37.456 --> 00:06:38.156
those cases.

00:06:39.286 --> 00:06:40.966
But, for custom cases like this,

00:06:41.476 --> 00:06:43.266
there's new API in Mojave that

00:06:43.266 --> 00:06:45.436
you can use to do this.

00:06:46.746 --> 00:06:48.256
It's called Appearance Source.

00:06:49.486 --> 00:06:51.746
Now, this is a property that

00:06:51.746 --> 00:06:54.446
takes any object that conforms

00:06:54.446 --> 00:06:54.776
to that

00:06:54.856 --> 00:06:55.976
NSAppearanceCustomization

00:06:55.976 --> 00:06:57.386
protocol-- so, views and

00:06:57.386 --> 00:07:00.506
windows-- and you just assign it

00:07:00.506 --> 00:07:03.926
to the appearanceSource property

00:07:04.496 --> 00:07:06.176
and the window will inherit its

00:07:06.176 --> 00:07:07.526
appearance from that object.

00:07:08.146 --> 00:07:11.516
So, in this case, we'll assign

00:07:11.516 --> 00:07:12.636
the text view to the

00:07:12.636 --> 00:07:14.926
appearanceSource property of

00:07:14.926 --> 00:07:16.816
that child window and now it's

00:07:16.816 --> 00:07:18.186
appearance will always inherit

00:07:18.186 --> 00:07:19.956
from that view no matter what it

00:07:20.656 --> 00:07:20.746
is.

00:07:22.476 --> 00:07:24.826
In fact, you should think of the

00:07:24.826 --> 00:07:26.616
appearance system as a sort of

00:07:26.616 --> 00:07:27.316
hierarchy.

00:07:27.986 --> 00:07:29.666
Similar to the view hierarchy

00:07:29.706 --> 00:07:30.926
you're probably familiar with,

00:07:31.016 --> 00:07:32.726
but extending to windows and the

00:07:32.726 --> 00:07:33.756
application as well.

00:07:34.896 --> 00:07:37.196
And when we ask AppKit for a

00:07:37.196 --> 00:07:38.686
view's effective appearance,

00:07:39.916 --> 00:07:41.806
AppKit will simply walk up this

00:07:41.806 --> 00:07:43.646
hierarchy until it finds an

00:07:43.646 --> 00:07:45.116
object with a specified

00:07:45.116 --> 00:07:47.486
appearance and that's the

00:07:47.486 --> 00:07:48.546
appearance we'll use.

00:07:49.096 --> 00:07:49.196
OK.

00:07:50.476 --> 00:07:53.326
So, now that we know how objects

00:07:53.376 --> 00:07:54.406
get an appearance and how the

00:07:54.406 --> 00:07:55.876
appearance system works, let's

00:07:55.876 --> 00:07:57.156
talk about how you can use it in

00:07:57.156 --> 00:07:58.676
your custom views and controls.

00:07:59.156 --> 00:08:00.876
Here's an example.

00:08:00.876 --> 00:08:02.736
Let's say I wanted this custom

00:08:02.736 --> 00:08:04.956
header view here to use a

00:08:04.956 --> 00:08:07.176
different color in light and

00:08:07.176 --> 00:08:07.956
dark appearance.

00:08:09.246 --> 00:08:11.136
Now, we already know in Xcode 10

00:08:11.426 --> 00:08:13.366
I can go into the asset catalog

00:08:13.366 --> 00:08:15.656
editor and specify specific

00:08:15.656 --> 00:08:17.566
color assets for light and dark.

00:08:18.266 --> 00:08:21.036
But then how do I use that in my

00:08:21.036 --> 00:08:21.676
custom view?

00:08:22.886 --> 00:08:24.866
Well, here's one way that seems

00:08:24.866 --> 00:08:26.916
tempting but won't work and I'll

00:08:26.916 --> 00:08:27.486
show you why.

00:08:28.516 --> 00:08:30.156
First, we'll add an NSColor

00:08:30.156 --> 00:08:31.196
property to our view.

00:08:32.535 --> 00:08:34.916
And in init, we'll use that

00:08:34.916 --> 00:08:37.736
color to populate our layer.

00:08:38.216 --> 00:08:41.606
And if the color changes, we'll

00:08:41.606 --> 00:08:42.846
go ahead and update our layer

00:08:42.846 --> 00:08:43.316
there too.

00:08:44.646 --> 00:08:45.546
Let's try that out.

00:08:46.936 --> 00:08:48.356
OK. It looks pretty good in

00:08:48.356 --> 00:08:51.666
light, but if we switch to dark,

00:08:51.666 --> 00:08:52.726
we can see our color didn't

00:08:52.726 --> 00:08:53.786
actually change.

00:08:55.016 --> 00:08:56.316
And that's because even though

00:08:56.316 --> 00:08:59.016
our NSColor is dynamic, the CG

00:08:59.016 --> 00:09:00.496
color that we get from it is

00:09:00.496 --> 00:09:00.906
static.

00:09:00.906 --> 00:09:02.146
It won't change for the

00:09:02.146 --> 00:09:02.816
appearance.

00:09:03.806 --> 00:09:05.666
And, since we configured our

00:09:05.666 --> 00:09:08.076
layer in our initializer, we

00:09:08.076 --> 00:09:09.206
didn't get a chance to run any

00:09:09.206 --> 00:09:10.916
code when the appearance

00:09:10.916 --> 00:09:11.396
changed.

00:09:11.946 --> 00:09:14.616
Now, the key takeaway from this

00:09:14.616 --> 00:09:15.686
is you need to do your

00:09:15.846 --> 00:09:17.766
appearance sensitive work in

00:09:17.886 --> 00:09:19.086
specific areas.

00:09:19.666 --> 00:09:21.576
Specifically, the update

00:09:21.576 --> 00:09:23.936
constraints, layout, draw, and

00:09:23.986 --> 00:09:26.336
update layer methods of NSView.

00:09:27.616 --> 00:09:29.406
Now, AppKit will automatically

00:09:29.486 --> 00:09:30.956
call these methods as needed

00:09:31.196 --> 00:09:32.446
when the appearance changes.

00:09:32.996 --> 00:09:34.246
And if you need to trigger them

00:09:34.246 --> 00:09:35.746
manually, of course you can

00:09:35.846 --> 00:09:36.586
always use the

00:09:36.966 --> 00:09:38.296
needsUpdateConstraints,

00:09:38.596 --> 00:09:39.926
needsLayout, and

00:09:39.926 --> 00:09:42.026
needsDisplayProperties and

00:09:42.026 --> 00:09:44.306
AppKit will automatically call

00:09:45.696 --> 00:09:45.806
them.

00:09:46.146 --> 00:09:46.896
So, let's go back to our

00:09:46.896 --> 00:09:47.296
example.

00:09:48.616 --> 00:09:50.196
Instead of overriding init,

00:09:50.856 --> 00:09:53.666
we'll implement updateLayer and

00:09:53.666 --> 00:09:56.726
there we can go ahead and safely

00:09:57.056 --> 00:09:59.346
populate our layer by asking our

00:09:59.346 --> 00:10:00.796
NSColor for a CG color.

00:10:01.836 --> 00:10:03.436
And if our color changes,

00:10:03.606 --> 00:10:05.356
instead of updating our layer

00:10:05.356 --> 00:10:07.306
right there, we'll just set the

00:10:07.386 --> 00:10:08.946
needsDisplay property to true.

00:10:09.426 --> 00:10:10.776
AppKit will come back around

00:10:10.856 --> 00:10:12.446
automatically and call

00:10:12.446 --> 00:10:12.906
updateLayer.

00:10:14.336 --> 00:10:15.076
So, let's run it again.

00:10:16.536 --> 00:10:17.426
Still looks good in light.

00:10:17.426 --> 00:10:21.496
And now it uses the correct

00:10:21.496 --> 00:10:22.896
color in dark just like we

00:10:22.896 --> 00:10:24.706
wanted, so that's great.

00:10:25.976 --> 00:10:27.216
Now, what if we want to do

00:10:27.216 --> 00:10:28.146
something a little more

00:10:28.146 --> 00:10:29.826
complicated that might not be

00:10:29.826 --> 00:10:31.486
expressible just with dynamic

00:10:31.706 --> 00:10:32.576
colors or images?

00:10:33.656 --> 00:10:35.796
For example, maybe I would like

00:10:35.796 --> 00:10:38.546
to add this nice white glow

00:10:38.936 --> 00:10:40.416
behind Chloe's beautiful face

00:10:40.416 --> 00:10:42.206
here, but only in Dark Mode.

00:10:43.166 --> 00:10:43.796
How would I do that?

00:10:44.806 --> 00:10:46.476
Well, for cases like that, we

00:10:46.476 --> 00:10:49.166
have new API in Mojave that you

00:10:49.166 --> 00:10:50.876
can use to match against your

00:10:50.876 --> 00:10:51.686
view's appearance.

00:10:51.786 --> 00:10:52.686
Let me show you how it works.

00:10:53.856 --> 00:10:56.676
So, in this view, I'll override

00:10:56.676 --> 00:10:58.846
the layout method and I'll

00:10:58.846 --> 00:11:00.916
switch on effectiveAppearance

00:11:01.356 --> 00:11:05.286
bestMatch(from:, I'll pass an

00:11:05.286 --> 00:11:06.796
array with all of the appearance

00:11:06.796 --> 00:11:08.576
names that my view happens to

00:11:08.576 --> 00:11:08.916
know about.

00:11:08.976 --> 00:11:11.276
In this case, aqua and darkAqua.

00:11:11.806 --> 00:11:14.326
Then it's just a matter of

00:11:14.666 --> 00:11:16.606
implementing behavior for each

00:11:16.606 --> 00:11:17.416
of those appearances.

00:11:17.716 --> 00:11:19.366
So, for the aqua appearance,

00:11:19.676 --> 00:11:21.616
I'll simply use my imageView

00:11:21.616 --> 00:11:23.856
with Chloe's face as a subview.

00:11:24.456 --> 00:11:27.856
And for darkAqua, I'll not only

00:11:27.856 --> 00:11:28.786
use that imageView, but I'll

00:11:28.786 --> 00:11:30.946
also through my glowView behind

00:11:31.536 --> 00:11:31.606
it.

00:11:33.736 --> 00:11:35.766
Finally, I'll implement a

00:11:35.766 --> 00:11:38.146
default case and this is for

00:11:38.146 --> 00:11:40.266
appearances my view doesn't know

00:11:40.266 --> 00:11:41.586
about and that includes

00:11:41.636 --> 00:11:43.006
potential appearances Apple

00:11:43.006 --> 00:11:44.026
might come out with in the

00:11:44.086 --> 00:11:44.436
future.

00:11:45.076 --> 00:11:45.176
OK.

00:11:46.056 --> 00:11:47.536
Let's take a look at what it

00:11:47.536 --> 00:11:48.236
looks like.

00:11:48.636 --> 00:11:50.696
So, there it is in light, no

00:11:50.696 --> 00:11:52.106
glow, that's what we wanted.

00:11:52.836 --> 00:11:54.696
Switch to dark and we have that

00:11:54.696 --> 00:11:55.006
glow.

00:11:55.276 --> 00:11:55.666
That's great.

00:11:56.106 --> 00:11:56.266
All right.

00:11:58.116 --> 00:11:59.596
Let's talk for a minute about

00:11:59.596 --> 00:12:00.746
high contrast.

00:12:01.606 --> 00:12:02.716
So, I said before that we've

00:12:02.746 --> 00:12:05.256
been using NSAppearance for the

00:12:05.256 --> 00:12:07.596
high contrast mode of macOS.

00:12:08.176 --> 00:12:10.056
And one of the nice side effects

00:12:10.106 --> 00:12:11.196
of doing all this work to

00:12:11.196 --> 00:12:12.586
support Dark Mode is it makes it

00:12:12.586 --> 00:12:14.416
really easy to support high

00:12:14.416 --> 00:12:19.546
contrast really well as well.

00:12:19.756 --> 00:12:21.636
As a reminder, high contrast is

00:12:21.636 --> 00:12:23.356
enabled through the increase

00:12:23.486 --> 00:12:24.846
contrast checkbox in system

00:12:24.846 --> 00:12:25.496
preferences.

00:12:26.056 --> 00:12:29.586
And in this mode, colors are

00:12:29.586 --> 00:12:31.346
changed so that control bounds

00:12:31.346 --> 00:12:32.946
and other kinds of boundaries

00:12:32.946 --> 00:12:36.366
are more easy to see.

00:12:36.856 --> 00:12:38.696
Now, in this mode, AppKit

00:12:38.786 --> 00:12:41.286
automatically replaces the aqua

00:12:41.286 --> 00:12:43.036
and darkAqua appearances with

00:12:43.236 --> 00:12:44.656
high contrast counterparts.

00:12:45.186 --> 00:12:46.576
Now, these high contrast

00:12:46.576 --> 00:12:48.296
appearances inherit from their

00:12:48.296 --> 00:12:50.326
normal contrast versions.

00:12:50.836 --> 00:12:53.236
So, what that means is any code

00:12:53.236 --> 00:12:54.706
you've written to take advantage

00:12:54.706 --> 00:12:56.366
of Dark Mode will automatically

00:12:56.396 --> 00:12:58.226
apply in high contrast Dark

00:12:58.276 --> 00:12:58.456
Mode.

00:13:00.056 --> 00:13:01.676
But you can go even further.

00:13:02.606 --> 00:13:04.496
In Xcode 10, if you check this

00:13:04.616 --> 00:13:06.216
high contrast checkbox in the

00:13:06.216 --> 00:13:08.576
asset catalog editor, it'll

00:13:08.576 --> 00:13:10.876
allow you to specify color and

00:13:10.876 --> 00:13:13.136
image assets specifically for

00:13:13.296 --> 00:13:15.766
the high contrast versions of

00:13:15.766 --> 00:13:16.486
the appearances.

00:13:17.076 --> 00:13:20.166
Now, you can also use those

00:13:20.166 --> 00:13:21.656
appearance names in code.

00:13:21.656 --> 00:13:24.676
You might be temped to think,

00:13:24.736 --> 00:13:26.286
well, great, I'll just pass them

00:13:26.286 --> 00:13:27.716
to NSAppearance themed and I'll

00:13:27.716 --> 00:13:29.156
get the NSAppearance object and

00:13:29.156 --> 00:13:31.296
I'll do something with that, but

00:13:31.296 --> 00:13:31.836
that won't work.

00:13:32.876 --> 00:13:34.036
Those appearances are only

00:13:34.036 --> 00:13:35.126
available through system

00:13:35.126 --> 00:13:35.706
preferences.

00:13:36.396 --> 00:13:39.236
But what you can do is pass them

00:13:39.236 --> 00:13:41.296
to bestMatch(from:) just like we

00:13:41.296 --> 00:13:42.846
did before for Dark Mode to

00:13:42.846 --> 00:13:44.816
implement custom programmatic

00:13:44.816 --> 00:13:45.246
behavior.

00:13:48.166 --> 00:13:48.276
OK.

00:13:48.516 --> 00:13:49.706
Let's talk for a minute about

00:13:49.706 --> 00:13:50.476
sublayers.

00:13:51.256 --> 00:13:52.316
I know a lot of you out there

00:13:52.506 --> 00:13:54.646
have views that manage their own

00:13:54.646 --> 00:13:56.736
sublayers and there are

00:13:56.736 --> 00:13:58.146
important things to be aware of

00:13:58.656 --> 00:13:59.866
for Dark Mode.

00:14:01.236 --> 00:14:03.316
Primarily, you need to know that

00:14:03.566 --> 00:14:05.466
custom sublayers will not

00:14:05.716 --> 00:14:07.066
inherit your view's appearance

00:14:07.156 --> 00:14:07.936
automatically.

00:14:08.586 --> 00:14:12.456
Now, the easiest fix for this is

00:14:12.536 --> 00:14:13.656
to switch them from being

00:14:13.726 --> 00:14:15.476
sublayers to subviews.

00:14:15.626 --> 00:14:17.606
If you do that, AppKit will

00:14:17.606 --> 00:14:19.056
automatically handle the

00:14:19.226 --> 00:14:22.096
appearance inheritance for those

00:14:22.096 --> 00:14:23.826
views, just like any other view.

00:14:25.226 --> 00:14:27.186
Otherwise, you'll have to manage

00:14:27.186 --> 00:14:29.136
those layers manually using a

00:14:29.136 --> 00:14:30.266
couple techniques that I'll talk

00:14:30.266 --> 00:14:31.866
about now, viewDidChange

00:14:31.866 --> 00:14:33.686
EffectiveAppearance and the

00:14:33.686 --> 00:14:35.076
concept of the current

00:14:35.076 --> 00:14:35.576
appearance.

00:14:36.146 --> 00:14:39.856
So, first viewDidChange

00:14:39.856 --> 00:14:40.996
EffectiveAppearance.

00:14:41.416 --> 00:14:43.886
This is a new method on NSView

00:14:44.186 --> 00:14:47.226
that you can override to find

00:14:47.226 --> 00:14:48.896
out when your view's effective

00:14:48.896 --> 00:14:49.746
appearance changes.

00:14:51.166 --> 00:14:52.246
Now, this is a good time to

00:14:52.326 --> 00:14:53.906
perform any custom invalidation

00:14:53.906 --> 00:14:56.276
you might need to do or drop any

00:14:56.276 --> 00:14:57.426
caches that are no longer

00:14:57.426 --> 00:14:57.826
relevant.

00:14:58.636 --> 00:15:00.246
But remember you don't need to

00:15:00.246 --> 00:15:02.136
invalidate the view itself here,

00:15:02.576 --> 00:15:03.736
AppKit will do that for you

00:15:03.776 --> 00:15:04.546
automatically.

00:15:07.236 --> 00:15:08.676
Second, the concept of the

00:15:08.896 --> 00:15:09.726
current appearance.

00:15:10.536 --> 00:15:12.796
Now, this is a thread local

00:15:12.796 --> 00:15:14.766
variable that you can access

00:15:14.796 --> 00:15:16.076
through a class property on

00:15:16.076 --> 00:15:16.976
NSAppearance.

00:15:17.536 --> 00:15:20.196
If you're familiar with concepts

00:15:20.196 --> 00:15:21.576
like the current NSGraphics

00:15:21.576 --> 00:15:22.836
context or the current

00:15:22.836 --> 00:15:24.516
NSProgress, you already know

00:15:24.516 --> 00:15:25.516
what I'm talking about.

00:15:25.976 --> 00:15:27.836
If not, just remember that this

00:15:27.956 --> 00:15:29.416
is the appearance used to

00:15:29.416 --> 00:15:31.476
resolve dynamic colors and

00:15:32.096 --> 00:15:32.326
images.

00:15:34.076 --> 00:15:35.856
AppKit will set up the current

00:15:35.856 --> 00:15:37.386
appearance automatically for you

00:15:37.386 --> 00:15:39.146
before we call any of those

00:15:39.146 --> 00:15:40.866
special NSView methods we talked

00:15:40.866 --> 00:15:41.806
about before, like

00:15:41.986 --> 00:15:44.286
updateConstraints, layout, draw,

00:15:44.286 --> 00:15:47.116
and updateLayer, but you can

00:15:47.166 --> 00:15:49.076
also set it up yourself where

00:15:49.076 --> 00:15:50.656
necessary and let's take a look

00:15:50.656 --> 00:15:51.796
at an example why you might do

00:15:51.796 --> 00:15:52.046
that.

00:15:55.396 --> 00:15:57.146
So, here's a custom that

00:15:57.146 --> 00:15:58.576
maintains some sublayers.

00:16:00.416 --> 00:16:02.066
I'll override this new

00:16:02.266 --> 00:16:03.206
viewDidChange

00:16:03.206 --> 00:16:05.966
EffectiveAppearance method and

00:16:05.966 --> 00:16:07.416
I'll set my sublayer

00:16:07.416 --> 00:16:08.176
needsDisplay.

00:16:08.986 --> 00:16:10.626
Now, if I didn't do this, my

00:16:10.626 --> 00:16:12.586
sublayer wouldn't update when my

00:16:12.586 --> 00:16:13.626
view's effective appearance

00:16:13.626 --> 00:16:14.066
changed.

00:16:14.156 --> 00:16:15.106
It would just stay the same.

00:16:15.136 --> 00:16:19.096
And then in my layer delegate

00:16:19.096 --> 00:16:21.106
routine, I'll save off the

00:16:21.106 --> 00:16:22.996
current appearance for later and

00:16:22.996 --> 00:16:24.546
then I'll go ahead and set the

00:16:24.546 --> 00:16:26.286
current appearance to my view's

00:16:26.336 --> 00:16:27.376
effective appearance.

00:16:27.906 --> 00:16:31.276
Then I can go ahead and update

00:16:31.276 --> 00:16:31.706
my layer.

00:16:32.316 --> 00:16:34.306
Now, if I hadn't set the current

00:16:34.306 --> 00:16:36.316
appearance before this, this

00:16:36.316 --> 00:16:38.016
code wouldn't be using my view's

00:16:38.016 --> 00:16:39.456
appearance and so it would end

00:16:39.456 --> 00:16:40.346
up looking wrong.

00:16:41.556 --> 00:16:42.956
Finally, when I'm done, I'll

00:16:42.956 --> 00:16:44.626
just restore the old current

00:16:44.626 --> 00:16:45.136
appearance.

00:16:48.726 --> 00:16:49.826
Here's another thing to be aware

00:16:49.826 --> 00:16:51.676
of if you're managing layers.

00:16:52.686 --> 00:16:54.036
You might have code that looks

00:16:54.256 --> 00:16:55.696
like one of these two examples.

00:16:56.296 --> 00:16:57.506
Either you're setting the

00:16:57.506 --> 00:16:59.306
contents of a layer to an

00:16:59.306 --> 00:17:01.896
NSImage or you're using the

00:17:01.896 --> 00:17:04.226
layer contents for content scale

00:17:04.226 --> 00:17:06.636
API to create layer contents

00:17:06.715 --> 00:17:08.246
from an image for your layer.

00:17:09.876 --> 00:17:11.276
If you have code like this, you

00:17:11.276 --> 00:17:12.726
should know that the image will

00:17:12.726 --> 00:17:14.626
not automatically inherit the

00:17:14.626 --> 00:17:15.326
appearance.

00:17:15.856 --> 00:17:19.256
As before, the best fix is to

00:17:19.256 --> 00:17:20.286
switch to views.

00:17:20.286 --> 00:17:21.935
In this case, NSImageView.

00:17:22.286 --> 00:17:23.776
NSImageView will take care of

00:17:23.776 --> 00:17:25.266
this detail as well as a bunch

00:17:25.266 --> 00:17:28.046
of others automatically, so do

00:17:28.046 --> 00:17:30.576
that if you can.

00:17:30.766 --> 00:17:32.676
Otherwise, you'll need to create

00:17:32.676 --> 00:17:35.266
a CGImage from your NSImage for

00:17:35.266 --> 00:17:35.786
your layer.

00:17:36.466 --> 00:17:37.776
And you'll do that using the

00:17:37.776 --> 00:17:40.166
cgImage(forProposedRect:,

00:17:40.786 --> 00:17:43.886
context:, hints: API on NSImage.

00:17:44.496 --> 00:17:46.056
And you'll have to be careful to

00:17:46.186 --> 00:17:47.506
do this at a point where the

00:17:47.776 --> 00:17:49.536
current appearance is correct.

00:17:49.776 --> 00:17:51.406
So, a good place to do it is in

00:17:51.406 --> 00:17:52.486
your updateLayer method.

00:17:52.766 --> 00:17:55.596
All right, so that's appearance.

00:17:56.486 --> 00:17:57.856
Now let's talk about materials.

00:17:57.946 --> 00:18:00.046
Now, you've probably heard that

00:18:00.466 --> 00:18:02.636
materials are one of the

00:18:02.636 --> 00:18:04.356
building blocks of the modern

00:18:04.356 --> 00:18:06.146
Mac UI, but you may have

00:18:06.146 --> 00:18:07.466
wondered to yourself, well, what

00:18:07.466 --> 00:18:09.596
exactly is a material, so let's

00:18:09.596 --> 00:18:10.586
start with a definition.

00:18:11.816 --> 00:18:13.436
Materials are dynamic

00:18:13.496 --> 00:18:15.726
backgrounds that make use of

00:18:15.726 --> 00:18:18.136
effects like blurs, gradient,

00:18:18.516 --> 00:18:21.856
tinting, translucency, and they

00:18:21.856 --> 00:18:24.276
provide a sense of depth or

00:18:24.276 --> 00:18:26.806
context to your UI, as well as

00:18:26.806 --> 00:18:28.206
just a bit of added beauty.

00:18:28.726 --> 00:18:31.626
Here's a pretty typical Mac

00:18:31.656 --> 00:18:33.606
desktop and you can see all the

00:18:33.606 --> 00:18:35.076
different places where we're

00:18:35.076 --> 00:18:36.476
using these material effects--

00:18:36.596 --> 00:18:37.896
actually, this isn't even all of

00:18:37.896 --> 00:18:38.000
them.

00:18:41.286 --> 00:18:42.986
Now, AppKit automatically

00:18:42.986 --> 00:18:44.936
provides materials in a number

00:18:44.936 --> 00:18:47.096
of common places, like the title

00:18:47.096 --> 00:18:49.166
bars and backgrounds of windows,

00:18:49.986 --> 00:18:52.696
table views, sidebars, popovers,

00:18:52.696 --> 00:18:55.246
menus, and even other places as

00:18:56.016 --> 00:18:56.136
well.

00:18:56.336 --> 00:18:58.366
But you can create a material

00:18:58.366 --> 00:19:00.426
yourself and add it to your UI

00:19:01.136 --> 00:19:02.156
using a view called

00:19:02.356 --> 00:19:03.676
NSVisualEffectView.

00:19:04.466 --> 00:19:05.416
If you're not familiar with

00:19:05.416 --> 00:19:07.206
NSVisualEffectView, quite

00:19:07.206 --> 00:19:09.016
simply, it's a view that shows a

00:19:09.016 --> 00:19:09.466
material.

00:19:10.676 --> 00:19:11.836
And if you want to use one,

00:19:12.346 --> 00:19:14.136
you'll need to be aware of three

00:19:14.136 --> 00:19:15.406
main properties that you'll have

00:19:15.446 --> 00:19:17.156
to set up and I'll go through

00:19:17.156 --> 00:19:17.696
these in order.

00:19:17.836 --> 00:19:19.556
The state, blendingMode, and

00:19:19.556 --> 00:19:20.636
material properties.

00:19:23.046 --> 00:19:24.206
So, first, the state property.

00:19:24.766 --> 00:19:27.336
This controls whether the

00:19:27.336 --> 00:19:29.536
material uses the active window

00:19:29.536 --> 00:19:29.786
look.

00:19:30.246 --> 00:19:31.776
Now, by default, the material

00:19:31.776 --> 00:19:33.366
will just match its containing

00:19:33.366 --> 00:19:34.916
window and so when that window

00:19:34.916 --> 00:19:36.256
is active it'll look active.

00:19:36.556 --> 00:19:37.926
When the window's inactive, the

00:19:37.926 --> 00:19:39.106
material will look inactive.

00:19:39.686 --> 00:19:42.456
But you can also specify this

00:19:42.866 --> 00:19:44.776
specifically to be active or

00:19:44.776 --> 00:19:46.076
inactive if you'd like to

00:19:46.076 --> 00:19:47.006
control it manually.

00:19:49.546 --> 00:19:50.556
Second, the blendingMode

00:19:50.556 --> 00:19:51.076
property.

00:19:51.776 --> 00:19:53.846
This property controls whether

00:19:53.846 --> 00:19:55.886
the material punches through the

00:19:55.886 --> 00:19:56.646
back of the window.

00:19:56.856 --> 00:19:57.926
Let me show you what I mean by

00:19:57.926 --> 00:19:58.146
that.

00:19:59.676 --> 00:20:02.106
Here's a preview using two

00:20:02.106 --> 00:20:03.146
different materials.

00:20:04.406 --> 00:20:06.236
For one, this title bar

00:20:06.236 --> 00:20:09.146
material, if we peel it back, we

00:20:09.146 --> 00:20:10.726
can see that it's blending the

00:20:10.726 --> 00:20:12.286
contents within the window,

00:20:12.286 --> 00:20:13.826
including that color image

00:20:13.826 --> 00:20:14.056
there.

00:20:14.916 --> 00:20:16.506
So, it's not punching through

00:20:16.506 --> 00:20:17.956
the back of the window.

00:20:19.036 --> 00:20:20.366
There's also the sidebar

00:20:20.366 --> 00:20:22.216
material and if we peel it back

00:20:23.656 --> 00:20:24.856
we can see it's blurring the

00:20:24.856 --> 00:20:26.506
contents behind the window, so

00:20:26.506 --> 00:20:27.786
it's punching through the back

00:20:28.006 --> 00:20:29.926
so it can see to the windows

00:20:29.966 --> 00:20:31.626
behind it as well as the

00:20:32.306 --> 00:20:32.526
desktop.

00:20:40.666 --> 00:20:42.516
So, by default, a visual effect

00:20:42.516 --> 00:20:43.946
view will be in behind window

00:20:43.946 --> 00:20:46.756
mode, but you can control that

00:20:46.756 --> 00:20:48.066
using the blendingMode property.

00:20:48.516 --> 00:20:51.436
Finally, the material property.

00:20:52.236 --> 00:20:53.876
This property encapsulates the

00:20:53.876 --> 00:20:55.976
material effect definition.

00:20:56.836 --> 00:20:57.546
What do I mean by that?

00:20:58.476 --> 00:21:00.366
That means the exact recipe of

00:21:00.496 --> 00:21:03.246
blur, translucency, gradience,

00:21:03.246 --> 00:21:05.246
tinting-- that all depends on

00:21:05.246 --> 00:21:06.216
the material property.

00:21:07.316 --> 00:21:08.506
Now, when we first started using

00:21:08.506 --> 00:21:10.916
materials in Yosemite, we had

00:21:11.006 --> 00:21:12.726
two main materials, the light

00:21:12.966 --> 00:21:14.586
and dark materials, and those

00:21:14.586 --> 00:21:15.876
served us really well at the

00:21:15.876 --> 00:21:18.276
time, but since then we've

00:21:18.276 --> 00:21:19.736
really expanded our use of

00:21:19.736 --> 00:21:21.196
materials across the system.

00:21:22.026 --> 00:21:23.576
And now with Dark Mode, it no

00:21:23.576 --> 00:21:24.716
longer really makes sense to

00:21:24.716 --> 00:21:26.716
specify a material just as light

00:21:27.086 --> 00:21:28.086
or dark.

00:21:28.776 --> 00:21:29.976
Instead, we have something

00:21:29.976 --> 00:21:31.806
called semantic materials.

00:21:32.666 --> 00:21:33.616
Now, if you're familiar with

00:21:33.686 --> 00:21:36.066
semantic colors, you know that

00:21:36.276 --> 00:21:37.406
they're named after where

00:21:37.406 --> 00:21:39.406
they're used, not necessarily

00:21:39.536 --> 00:21:40.366
what they look like.

00:21:41.686 --> 00:21:42.876
Same thing for semantic

00:21:42.876 --> 00:21:43.506
materials.

00:21:44.486 --> 00:21:46.096
The menu material, for example,

00:21:46.166 --> 00:21:47.456
will always look like system

00:21:47.456 --> 00:21:49.626
contextual menus, regardless of

00:21:49.626 --> 00:21:50.706
light versus dark.

00:21:51.386 --> 00:21:55.086
And in Mojave, we're introducing

00:21:55.086 --> 00:21:57.716
a bunch more semantic materials

00:21:58.716 --> 00:21:59.976
so that you can always use the

00:21:59.976 --> 00:22:02.056
right one for your specific use

00:22:02.056 --> 00:22:02.476
case.

00:22:02.626 --> 00:22:06.296
In fact, these semantic

00:22:06.346 --> 00:22:08.996
materials are now our preferred

00:22:08.996 --> 00:22:10.726
way of using materials and we're

00:22:10.726 --> 00:22:12.836
deprecating these non-semantic

00:22:12.836 --> 00:22:14.896
materials like light, dark,

00:22:15.186 --> 00:22:16.636
medium light, and ultra dark.

00:22:17.866 --> 00:22:19.026
If you're using one of these

00:22:19.026 --> 00:22:21.506
materials, now is a great time

00:22:21.506 --> 00:22:23.296
to go ahead and switch over to a

00:22:23.296 --> 00:22:24.786
semantic material that's right

00:22:24.866 --> 00:22:25.846
for your use case.

00:22:29.476 --> 00:22:30.876
Just to give you an idea of

00:22:30.876 --> 00:22:32.366
where we're using these semantic

00:22:32.366 --> 00:22:33.676
materials across the system,

00:22:34.456 --> 00:22:35.726
here's the Finder using the

00:22:35.726 --> 00:22:37.406
title bar and sidebar materials.

00:22:39.396 --> 00:22:41.156
Here's Mail using the header

00:22:41.156 --> 00:22:42.516
view and content background

00:22:42.516 --> 00:22:43.236
materials.

00:22:45.656 --> 00:22:47.396
Here's our Chameleon Wrangler

00:22:47.396 --> 00:22:48.266
app using the

00:22:48.266 --> 00:22:49.776
underPageBackground material.

00:22:50.346 --> 00:22:54.426
And here's system preferences

00:22:54.426 --> 00:22:55.546
using the window background

00:22:55.546 --> 00:22:56.056
material.

00:22:57.276 --> 00:22:58.236
Now, of course this window

00:22:58.236 --> 00:22:59.666
background material, as you've

00:22:59.716 --> 00:23:00.886
probably heard, is one of these

00:23:00.886 --> 00:23:03.116
special desktop-tinted materials

00:23:03.226 --> 00:23:04.186
new in Mojave.

00:23:04.186 --> 00:23:06.616
And the way these work is they

00:23:06.896 --> 00:23:09.476
pick up a slight tint from the

00:23:09.476 --> 00:23:11.406
desktop picture based on the

00:23:11.406 --> 00:23:12.776
window's location onscreen.

00:23:13.366 --> 00:23:14.706
And the idea here is to help

00:23:14.796 --> 00:23:16.726
your window blend in with the

00:23:16.726 --> 00:23:17.736
windows on the rest of the

00:23:17.736 --> 00:23:18.186
system.

00:23:18.726 --> 00:23:24.166
Again, the easiest way to get

00:23:24.166 --> 00:23:25.226
one of these desktop-tinted

00:23:25.226 --> 00:23:26.396
materials is to use the

00:23:26.516 --> 00:23:28.926
automatic support in NSWindow,

00:23:29.086 --> 00:23:30.946
NSScrollView, NSTableView, and

00:23:30.976 --> 00:23:31.846
NSCollectionView.

00:23:32.196 --> 00:23:33.886
The default configurations of

00:23:33.886 --> 00:23:35.666
these objects will come with

00:23:35.666 --> 00:23:37.226
this desktop-tinted effect.

00:23:37.716 --> 00:23:42.956
You can also configure NSBox to

00:23:42.956 --> 00:23:45.856
get these materials by setting

00:23:45.856 --> 00:23:48.156
its type to custom and selecting

00:23:48.286 --> 00:23:50.016
one of these fill colors.

00:23:50.286 --> 00:23:51.726
It'll use the corresponding

00:23:51.826 --> 00:23:53.406
NSVisualEffectView material.

00:23:54.816 --> 00:23:55.736
Here's an example.

00:23:56.486 --> 00:23:58.866
I'll set my box's type to custom

00:23:59.336 --> 00:24:00.806
and then I'll set its fillColor

00:24:00.856 --> 00:24:02.746
to the underPageBackgroundColor.

00:24:03.286 --> 00:24:05.366
Of course, I can also use

00:24:05.366 --> 00:24:06.986
NSVisualEffectView, I can set

00:24:06.986 --> 00:24:08.506
it's material property to the

00:24:08.506 --> 00:24:09.906
underPageBackground material.

00:24:10.116 --> 00:24:11.296
Now, the advantage of using

00:24:11.416 --> 00:24:13.506
NSBox is it's back-deployable

00:24:13.506 --> 00:24:15.416
actually all the way back to

00:24:15.416 --> 00:24:15.956
Leopard.

00:24:17.076 --> 00:24:18.086
VisualEffectView, on the other

00:24:18.086 --> 00:24:19.086
hand, gives you a little more

00:24:19.086 --> 00:24:21.346
flexibility and I'll give you an

00:24:21.346 --> 00:24:22.246
example of that later.

00:24:22.826 --> 00:24:26.906
So, just as a reminder, these

00:24:26.906 --> 00:24:28.356
materials will show their

00:24:28.496 --> 00:24:30.656
untinted color in light.

00:24:31.156 --> 00:24:33.946
And in dark, they'll show that

00:24:33.946 --> 00:24:35.026
desktop-tinting effect.

00:24:35.726 --> 00:24:37.366
But remember that the tint

00:24:37.366 --> 00:24:39.046
effect can be disabled.

00:24:39.176 --> 00:24:40.026
Let me show you why.

00:24:40.706 --> 00:24:45.826
So, in Mojave, you can choose an

00:24:45.926 --> 00:24:47.376
accent color for the system.

00:24:47.896 --> 00:24:52.276
And if I switch this over to

00:24:52.386 --> 00:24:55.276
graphite, you'll probably first

00:24:55.276 --> 00:24:56.696
notice that all the controls

00:24:56.696 --> 00:24:59.806
lost their colored accents, but

00:25:00.116 --> 00:25:01.646
those desktop-tinted materials

00:25:01.796 --> 00:25:03.166
also lost their tint.

00:25:04.616 --> 00:25:06.476
So, just make sure you're not

00:25:06.476 --> 00:25:07.866
depending on that tint being

00:25:07.866 --> 00:25:11.866
there in any way.

00:25:12.106 --> 00:25:16.036
Now, VisualEffectView by default

00:25:16.336 --> 00:25:18.226
will show its material in its

00:25:18.226 --> 00:25:19.536
frame rectangle like this.

00:25:19.956 --> 00:25:20.886
And that's pretty great, but

00:25:21.796 --> 00:25:23.046
what if I wanted to show a

00:25:23.046 --> 00:25:24.586
custom UI element with this

00:25:24.586 --> 00:25:26.476
material, like say a chat

00:25:26.476 --> 00:25:26.796
bubble.

00:25:27.416 --> 00:25:28.086
How would I do that?

00:25:29.276 --> 00:25:32.016
Well, here's one way that seems

00:25:32.016 --> 00:25:33.496
tempting, but won't work, and

00:25:33.496 --> 00:25:34.176
I'll show you why.

00:25:35.606 --> 00:25:38.276
We'll first implement the draw

00:25:38.276 --> 00:25:42.226
method on NSView and then I'll

00:25:42.226 --> 00:25:44.436
go get my custom chat bubble

00:25:44.786 --> 00:25:45.426
BezierPath.

00:25:45.936 --> 00:25:48.716
And then I'll fill with the

00:25:48.716 --> 00:25:51.926
controlBackgroundColor in that

00:25:52.696 --> 00:25:52.806
path.

00:25:53.016 --> 00:25:54.916
Now, if you do that, you'll find

00:25:54.916 --> 00:25:56.486
it looks something like this and

00:25:56.486 --> 00:25:58.796
it looks pretty good, but if we

00:25:58.796 --> 00:26:01.296
zoom in closely, you'll see that

00:26:01.296 --> 00:26:02.696
the bubbles are not getting that

00:26:02.746 --> 00:26:04.166
desktop-tinting effect that we

00:26:04.166 --> 00:26:04.476
want.

00:26:04.476 --> 00:26:05.676
It's just a plain gray.

00:26:07.096 --> 00:26:07.986
So, what went wrong?

00:26:09.376 --> 00:26:11.766
Well, this effect is provided by

00:26:11.766 --> 00:26:13.136
the Quartz window server like a

00:26:13.136 --> 00:26:14.376
lot of our other material

00:26:14.376 --> 00:26:14.876
effects.

00:26:15.746 --> 00:26:16.876
And what this means is it

00:26:16.976 --> 00:26:19.216
updates asynchronously from your

00:26:19.216 --> 00:26:20.856
application and this is great

00:26:20.906 --> 00:26:23.706
for performance, but it also

00:26:23.706 --> 00:26:25.516
means that you can't directly

00:26:25.516 --> 00:26:27.396
draw with that color or get it's

00:26:27.396 --> 00:26:28.476
RGB values.

00:26:29.916 --> 00:26:31.676
Instead, you can use the

00:26:31.676 --> 00:26:33.546
maskImage property of

00:26:33.546 --> 00:26:35.156
VisualEffectView to do something

00:26:35.196 --> 00:26:35.806
very similar.

00:26:37.106 --> 00:26:40.276
maskImage is an optional NSImage

00:26:40.596 --> 00:26:43.336
on VisualEffectView that

00:26:44.026 --> 00:26:45.696
VisualEffectView will use to

00:26:45.696 --> 00:26:47.706
mask its material, the material

00:26:47.706 --> 00:26:48.386
that it shows.

00:26:49.646 --> 00:26:50.996
And in addition to using

00:26:50.996 --> 00:26:53.126
standard art-based images, you

00:26:53.126 --> 00:26:54.866
can use drawing handler images

00:26:55.006 --> 00:26:56.506
to simulate drawing with the

00:26:56.506 --> 00:26:56.996
material.

00:26:56.996 --> 00:26:59.356
Let me show you an example.

00:27:00.466 --> 00:27:01.896
So, I'll go back to my view,

00:27:01.896 --> 00:27:04.736
I'll override layout, and I'll

00:27:04.736 --> 00:27:05.816
go ahead and add a

00:27:05.816 --> 00:27:06.816
VisualEffectView.

00:27:07.896 --> 00:27:09.716
I'll set its material to the

00:27:09.716 --> 00:27:11.786
contentBackground material, and

00:27:12.916 --> 00:27:14.616
then I'll create a drawing

00:27:14.616 --> 00:27:17.176
handler image using the NSImage

00:27:17.356 --> 00:27:19.816
size flipped initializer that

00:27:19.816 --> 00:27:20.516
takes a block.

00:27:22.076 --> 00:27:24.306
In it, I'll set the white

00:27:24.416 --> 00:27:25.686
color-- this color doesn't

00:27:25.686 --> 00:27:27.056
really matter as long as its

00:27:27.056 --> 00:27:27.426
opaque.

00:27:27.426 --> 00:27:29.426
And then I'll go ahead and fill

00:27:29.486 --> 00:27:32.796
with my path.

00:27:32.956 --> 00:27:34.956
Then I'll set that image ask the

00:27:34.956 --> 00:27:36.146
maskImage on my

00:27:36.146 --> 00:27:36.846
VisualEffectView.

00:27:37.676 --> 00:27:39.006
All right.

00:27:39.276 --> 00:27:41.606
Let's look at it now.

00:27:41.846 --> 00:27:42.666
Looks a lot better.

00:27:43.616 --> 00:27:44.626
It's desktop-tinted.

00:27:45.706 --> 00:27:47.936
And, if we look side by side, we

00:27:47.936 --> 00:27:51.476
can really see the difference.

00:27:51.636 --> 00:27:53.356
So, this technique works with

00:27:53.466 --> 00:27:55.626
any material, but just remember

00:27:55.626 --> 00:27:57.256
that only the alpha channel of

00:27:57.256 --> 00:27:58.596
the image is used for the mask.

00:27:58.726 --> 00:27:59.976
This is similar to template

00:27:59.976 --> 00:28:00.496
images.

00:28:01.386 --> 00:28:03.886
And the mask only masks the

00:28:03.886 --> 00:28:06.626
material, not any subviews or

00:28:06.626 --> 00:28:07.926
other descendent views of the

00:28:07.926 --> 00:28:08.696
VisualEffectView.

00:28:10.096 --> 00:28:12.516
A common technique is to provide

00:28:12.516 --> 00:28:15.156
a resizable image for this-- for

00:28:15.156 --> 00:28:16.406
the maskImage using the

00:28:16.406 --> 00:28:18.246
capInsets and resizingMode

00:28:18.246 --> 00:28:19.796
properties of NSImage.

00:28:20.206 --> 00:28:22.046
And this is really good for

00:28:22.046 --> 00:28:22.706
performance.

00:28:24.176 --> 00:28:24.496
OK.

00:28:24.646 --> 00:28:25.846
With that, I'll hand it off to

00:28:25.846 --> 00:28:26.886
Jeff, who is going to talk about

00:28:26.886 --> 00:28:27.856
vibrant blending.

00:28:28.506 --> 00:28:30.506
[ Applause ]

00:28:30.996 --> 00:28:31.316
Jeff.

00:28:33.336 --> 00:28:33.666
>> All right.

00:28:33.726 --> 00:28:34.436
Thank you, Matt.

00:28:35.466 --> 00:28:36.506
So, now that we've had a look at

00:28:36.506 --> 00:28:38.076
our great materials, I want to

00:28:38.076 --> 00:28:39.666
cover the things that we draw in

00:28:39.666 --> 00:28:40.906
front of those materials,

00:28:41.446 --> 00:28:42.646
particularly the materials that

00:28:42.646 --> 00:28:44.696
we use that pull in part of the

00:28:44.696 --> 00:28:46.466
background and provide that

00:28:46.466 --> 00:28:47.626
really awesome blur effect.

00:28:48.786 --> 00:28:50.846
So, if we revisit our Chameleon

00:28:51.036 --> 00:28:52.786
Wrangler application, we have

00:28:52.786 --> 00:28:53.916
this UI here, it's our

00:28:53.916 --> 00:28:54.756
mood-o-meter.

00:28:54.756 --> 00:28:56.156
It's where we go to record how

00:28:56.156 --> 00:28:57.836
our various reptiles are

00:28:57.836 --> 00:28:58.226
feeling.

00:28:58.996 --> 00:29:00.786
And it's in a popover, which

00:29:00.786 --> 00:29:01.806
means that it's automatically

00:29:01.806 --> 00:29:03.846
getting that awesome popover

00:29:03.846 --> 00:29:04.746
material backing.

00:29:05.256 --> 00:29:07.636
And what we want when we're

00:29:07.636 --> 00:29:08.676
drawing over this backing

00:29:08.676 --> 00:29:10.576
material is for our content to

00:29:10.576 --> 00:29:12.236
really stand out on top of that

00:29:12.236 --> 00:29:13.166
varied background.

00:29:13.776 --> 00:29:14.736
Something like this.

00:29:15.256 --> 00:29:16.706
And we do that with an effect

00:29:16.706 --> 00:29:17.806
that we call vibrancy.

00:29:18.386 --> 00:29:20.456
So, what is vibrancy?

00:29:20.846 --> 00:29:22.996
It's a blending mode that we

00:29:22.996 --> 00:29:24.456
apply to the content that

00:29:24.456 --> 00:29:26.266
uniformly lightens or darkens

00:29:26.266 --> 00:29:28.326
the content behind it.

00:29:28.536 --> 00:29:30.136
It's very similar to a color

00:29:30.136 --> 00:29:31.266
dodge or burn that you might

00:29:31.266 --> 00:29:32.516
have seen in your favorite photo

00:29:32.516 --> 00:29:33.746
editor or design tool.

00:29:34.406 --> 00:29:35.686
But let's take a closer look.

00:29:36.726 --> 00:29:38.226
Here we have a glyph that's

00:29:38.226 --> 00:29:39.716
drawing in about a medium gray,

00:29:39.716 --> 00:29:42.296
about a 50% gray, but at 100%

00:29:42.296 --> 00:29:42.876
opacity.

00:29:44.206 --> 00:29:45.706
And when we apply the vibrant

00:29:45.706 --> 00:29:47.296
blending effect that we use

00:29:47.296 --> 00:29:48.896
against dark materials, which we

00:29:48.896 --> 00:29:51.606
call a lightening effect, we can

00:29:51.606 --> 00:29:53.256
see that it's not that the

00:29:53.256 --> 00:29:54.586
opacity has dropped on our

00:29:54.586 --> 00:29:55.686
glyph, but we're actually

00:29:55.916 --> 00:29:57.586
lightening the content behind it

00:29:58.066 --> 00:29:59.626
using the lightness of that gray

00:29:59.626 --> 00:29:59.976
value.

00:29:59.976 --> 00:30:03.366
And in fact, when we look at how

00:30:03.366 --> 00:30:04.866
this works on a range of gray

00:30:04.866 --> 00:30:06.236
values-- here we have swatches

00:30:06.236 --> 00:30:08.666
going from 0% to 100% gray, all

00:30:08.666 --> 00:30:09.456
totally opaque.

00:30:10.396 --> 00:30:11.326
When we apply our lightening

00:30:11.326 --> 00:30:12.736
effect, we can see a number of

00:30:12.736 --> 00:30:13.876
interesting things have

00:30:14.436 --> 00:30:14.946
happened.

00:30:15.106 --> 00:30:16.466
Down on the bottom right side,

00:30:16.506 --> 00:30:19.196
we have 100% light, and because

00:30:19.196 --> 00:30:20.626
we have added the lightness of

00:30:20.626 --> 00:30:23.056
white to the content behind, it

00:30:23.186 --> 00:30:24.076
just remains white.

00:30:24.176 --> 00:30:25.346
There is nowhere further to go.

00:30:26.466 --> 00:30:27.516
But on the top left where we

00:30:27.516 --> 00:30:29.726
were drawing black, there was no

00:30:29.726 --> 00:30:31.216
lightness to add, which means

00:30:31.216 --> 00:30:33.076
that it completely disappears.

00:30:33.076 --> 00:30:33.956
In fact, you wouldn't be able to

00:30:33.956 --> 00:30:34.976
see it if I didn't have an

00:30:34.976 --> 00:30:35.516
outline there.

00:30:35.936 --> 00:30:37.716
And in-between we can see that

00:30:37.716 --> 00:30:39.016
we have varying degrees of

00:30:39.016 --> 00:30:40.576
lightening which we can use to

00:30:40.576 --> 00:30:42.126
establish a hierarchy of content

00:30:42.496 --> 00:30:43.296
in our application.

00:30:44.526 --> 00:30:45.696
But where does this effect come

00:30:45.696 --> 00:30:45.976
from?

00:30:47.176 --> 00:30:48.076
Well, it's our old friend

00:30:48.076 --> 00:30:49.266
NSAppearance, it turns out.

00:30:50.356 --> 00:30:52.086
We have two special vibrant

00:30:52.086 --> 00:30:53.216
NSAppearance objects,

00:30:53.546 --> 00:30:56.976
vibrantDark and vibrantLight and

00:30:57.066 --> 00:30:58.676
these are a complete package.

00:30:58.676 --> 00:31:00.086
Not only do they include the

00:31:00.086 --> 00:31:01.786
exact formula that we use for

00:31:01.786 --> 00:31:03.236
that lightening or darkening

00:31:03.236 --> 00:31:05.306
effect, but they also have a set

00:31:05.306 --> 00:31:06.876
of control artwork and color

00:31:06.876 --> 00:31:07.806
definitions that have been

00:31:07.806 --> 00:31:09.596
designed to work great with that

00:31:09.636 --> 00:31:10.126
blend mode.

00:31:10.646 --> 00:31:13.426
But how does your code use it?

00:31:14.176 --> 00:31:15.436
Well, it's very simple.

00:31:16.356 --> 00:31:18.286
In your NSView subclass, you can

00:31:18.286 --> 00:31:19.676
override the allowsVibrancy

00:31:19.676 --> 00:31:22.206
property to return true and the

00:31:22.206 --> 00:31:23.206
blending effect is going to

00:31:23.206 --> 00:31:24.546
automatically apply to your

00:31:24.546 --> 00:31:25.906
views drawing and also the

00:31:25.906 --> 00:31:27.456
drawing of all of its

00:31:27.676 --> 00:31:28.000
descendants.

00:31:29.946 --> 00:31:31.046
Typically, when you're drawing

00:31:31.046 --> 00:31:33.116
in this vibrant context, you

00:31:33.116 --> 00:31:34.566
want to use one of the built-in

00:31:34.566 --> 00:31:35.886
label colors, depending on the

00:31:35.886 --> 00:31:37.166
prominence of your content.

00:31:37.996 --> 00:31:38.976
Both vibrantDark and

00:31:38.976 --> 00:31:39.896
vibrantLight have great

00:31:39.896 --> 00:31:41.166
definitions for all four of

00:31:41.166 --> 00:31:42.636
these colors that allow you to

00:31:42.636 --> 00:31:44.036
establish that nice hierarchy.

00:31:45.476 --> 00:31:46.616
However, you don't have to use

00:31:46.616 --> 00:31:47.176
these colors.

00:31:47.176 --> 00:31:48.696
You can use any color that you'd

00:31:48.696 --> 00:31:50.336
like, but we prefer to use

00:31:50.336 --> 00:31:51.866
non-grayscale colors.

00:31:52.546 --> 00:31:53.936
Avoid non-grayscale colors

00:31:53.976 --> 00:31:55.736
because, if you use them, the

00:31:56.126 --> 00:31:57.696
blending effect is going to

00:31:57.746 --> 00:31:59.696
impact the design intent of your

00:31:59.696 --> 00:32:00.876
color and it's going to wash it

00:32:00.876 --> 00:32:01.846
out in a way that is not

00:32:01.846 --> 00:32:02.366
desirable.

00:32:03.376 --> 00:32:04.456
I'll show you an example of that

00:32:04.456 --> 00:32:04.726
later.

00:32:06.866 --> 00:32:08.836
So, revisiting our application,

00:32:09.236 --> 00:32:11.496
we can go ahead and override

00:32:11.496 --> 00:32:13.066
allowsVibrancy on our view and

00:32:13.066 --> 00:32:14.116
in this case we're going to just

00:32:14.116 --> 00:32:15.826
set it on the view that contains

00:32:15.826 --> 00:32:18.256
our entire meter in the entire

00:32:18.256 --> 00:32:18.806
popover.

00:32:19.246 --> 00:32:20.136
And let's see what that looks

00:32:20.136 --> 00:32:20.326
like.

00:32:21.896 --> 00:32:23.796
Well, our slider looks pretty

00:32:23.796 --> 00:32:24.106
good.

00:32:24.106 --> 00:32:25.946
It's exactly what we expected.

00:32:25.946 --> 00:32:27.326
But what happened to the faces?

00:32:28.016 --> 00:32:28.756
They're all washed out.

00:32:30.146 --> 00:32:32.286
And what happened here is that

00:32:32.286 --> 00:32:34.336
when we set allowsVibrancy on

00:32:34.336 --> 00:32:36.946
the overall meter view, not only

00:32:36.946 --> 00:32:37.726
are we getting the vibrant

00:32:37.726 --> 00:32:39.636
blending on that view, but also

00:32:39.716 --> 00:32:41.056
both of these subviews.

00:32:42.216 --> 00:32:43.086
And the fix here is pretty

00:32:43.086 --> 00:32:43.456
simple.

00:32:44.016 --> 00:32:45.646
If we localize our definition of

00:32:45.646 --> 00:32:47.266
allowsVibrancy to just the part

00:32:47.266 --> 00:32:49.086
that's drawing the slider, we

00:32:49.086 --> 00:32:50.386
get exactly what we expected.

00:32:50.806 --> 00:32:52.146
Our slider is drawing vibrantly

00:32:52.556 --> 00:32:53.786
and the colors in our face

00:32:53.836 --> 00:32:55.296
buttons look exactly the way

00:32:55.296 --> 00:32:55.846
that we wanted.

00:32:57.366 --> 00:32:58.286
When you're drawing vibrantly,

00:32:58.286 --> 00:32:59.536
typically you'd want to apply

00:32:59.536 --> 00:33:01.376
vibrancy to only the leaf views

00:33:01.656 --> 00:33:03.136
that are drawing the content

00:33:03.136 --> 00:33:04.026
that you actually want to have

00:33:04.026 --> 00:33:04.416
vibrant.

00:33:05.476 --> 00:33:06.596
And, if you have views that are

00:33:06.596 --> 00:33:08.186
drawing a mix of content, that

00:33:08.186 --> 00:33:09.296
means that you probably want to

00:33:09.296 --> 00:33:10.656
break your drawing out into

00:33:10.656 --> 00:33:12.596
separate sibling views that you

00:33:12.596 --> 00:33:14.406
can use to apply vibrancy at the

00:33:14.406 --> 00:33:15.606
granularity that you want.

00:33:17.616 --> 00:33:19.016
Further, you should avoid

00:33:19.016 --> 00:33:20.266
overlapping vibrant and

00:33:20.266 --> 00:33:21.346
non-vibrant views.

00:33:22.716 --> 00:33:24.736
If you do this, the blending

00:33:24.736 --> 00:33:26.116
modes can clash and you might

00:33:26.116 --> 00:33:27.336
find that some of your content

00:33:27.336 --> 00:33:28.976
is drawing with a blend mode

00:33:29.116 --> 00:33:31.396
that it didn't expect.

00:33:31.506 --> 00:33:33.306
Further, don't subclass Cocoa

00:33:33.306 --> 00:33:34.696
controls just to override

00:33:34.696 --> 00:33:35.516
allowsVibrancy.

00:33:36.046 --> 00:33:37.146
I mentioned earlier that the

00:33:37.146 --> 00:33:38.476
vibrantLight and vibrantDark

00:33:38.476 --> 00:33:40.156
appearances have been designed

00:33:40.156 --> 00:33:41.786
with control artwork and colors

00:33:41.786 --> 00:33:43.186
that were designed specially for

00:33:43.186 --> 00:33:45.046
the blend mode and if you remove

00:33:45.046 --> 00:33:47.096
that blend mode, the contrast on

00:33:47.096 --> 00:33:48.296
that artwork is not going to be

00:33:48.296 --> 00:33:49.966
what you expected because we're

00:33:49.966 --> 00:33:51.396
using the blend mode to provide

00:33:51.396 --> 00:33:52.636
a lot of that pop against the

00:33:52.636 --> 00:33:54.466
material, so you should only

00:33:54.466 --> 00:33:56.216
override allows vibrancy if

00:33:56.216 --> 00:33:57.286
you're actually overriding

00:33:57.286 --> 00:33:58.646
drawing and you know what

00:33:58.646 --> 00:34:00.066
vibrant blend mode or

00:34:00.066 --> 00:34:01.006
non-vibrant blend mode is

00:34:01.006 --> 00:34:02.176
appropriate for the drawing that

00:34:02.176 --> 00:34:02.646
you're doing.

00:34:03.536 --> 00:34:04.256
That's vibrancy.

00:34:05.366 --> 00:34:06.316
Next, I want to talk a little

00:34:06.316 --> 00:34:07.566
bit about background styles,

00:34:07.846 --> 00:34:09.085
specifically the ones that we

00:34:09.085 --> 00:34:10.766
use for selections.

00:34:11.886 --> 00:34:12.726
So, here we have a pretty

00:34:12.726 --> 00:34:14.706
typical situation in a aqua

00:34:14.706 --> 00:34:15.606
Cocoa application.

00:34:16.556 --> 00:34:18.386
In this case, it's a message

00:34:18.386 --> 00:34:20.775
from the Mail application and we

00:34:20.775 --> 00:34:22.126
can see that when we have a

00:34:22.126 --> 00:34:23.775
selection state, we need our

00:34:23.775 --> 00:34:25.646
content inside of this table row

00:34:26.036 --> 00:34:28.775
to invert to look good against

00:34:28.775 --> 00:34:29.656
that blue selection.

00:34:30.206 --> 00:34:32.786
But when we add darkAqua into

00:34:32.786 --> 00:34:36.025
the mix, we can see that we

00:34:36.025 --> 00:34:37.366
can't just naively invert our

00:34:37.366 --> 00:34:38.235
content anymore.

00:34:38.396 --> 00:34:39.226
That's not going to work

00:34:39.226 --> 00:34:39.815
uniformly.

00:34:40.216 --> 00:34:41.416
And so we need to describe these

00:34:41.416 --> 00:34:42.556
states semantically.

00:34:43.206 --> 00:34:45.286
Now, if you're familiar with

00:34:45.286 --> 00:34:48.216
Cocoa, you've probably seen the

00:34:48.216 --> 00:34:50.496
NSView.BackgroundStyle enum and

00:34:50.496 --> 00:34:51.726
that includes a couple of cases,

00:34:51.726 --> 00:34:54.036
including light and dark, and

00:34:54.036 --> 00:34:54.996
NSTableView sets this

00:34:54.996 --> 00:34:56.226
automatically on the

00:34:56.226 --> 00:34:58.816
TableRowView, TableCellView, and

00:34:58.816 --> 00:35:00.176
also all of the controls that

00:35:00.176 --> 00:35:01.676
are immediate subviews of your

00:35:01.676 --> 00:35:02.426
TableCellView.

00:35:03.856 --> 00:35:05.286
Now, traditionally, we have set

00:35:05.286 --> 00:35:07.376
the light background style on

00:35:07.376 --> 00:35:09.146
unselected rows and the dark

00:35:09.146 --> 00:35:10.346
background style on selected

00:35:10.346 --> 00:35:10.666
ones.

00:35:11.206 --> 00:35:13.336
But, in the face of this

00:35:13.336 --> 00:35:15.416
brand-new, beautiful theme where

00:35:15.416 --> 00:35:16.586
the background is effectively

00:35:16.586 --> 00:35:18.526
always dark, these names don't

00:35:18.526 --> 00:35:20.006
make sense anymore and so we've

00:35:20.006 --> 00:35:22.096
renamed them to normal and

00:35:22.096 --> 00:35:23.426
emphasized, respectively.

00:35:24.006 --> 00:35:25.616
And these are just more semantic

00:35:25.616 --> 00:35:27.356
descriptions that better match

00:35:27.356 --> 00:35:29.266
the way that these enum cases

00:35:29.266 --> 00:35:30.496
are used in a modern Cocoa

00:35:30.496 --> 00:35:31.076
application.

00:35:32.636 --> 00:35:33.866
We also have some additional

00:35:33.866 --> 00:35:35.146
updates with background styles,

00:35:35.396 --> 00:35:37.196
including that TableView will

00:35:37.196 --> 00:35:38.446
now automatically set that

00:35:38.446 --> 00:35:40.806
background style recursively on

00:35:40.806 --> 00:35:41.796
all of the controls in your

00:35:41.796 --> 00:35:43.586
table row, not just the ones

00:35:43.586 --> 00:35:44.946
that are immediate subviews of

00:35:44.946 --> 00:35:45.496
your CellView.

00:35:46.006 --> 00:35:46.996
And so, if you've been catching

00:35:46.996 --> 00:35:48.316
that background style and trying

00:35:48.316 --> 00:35:49.556
to forward it along to all these

00:35:49.556 --> 00:35:51.036
subviews because you wanted to

00:35:51.036 --> 00:35:52.226
use a stacked view or something

00:35:52.226 --> 00:35:53.886
for layout, you no longer have

00:35:53.886 --> 00:35:55.346
to do that on Mojave.

00:35:56.086 --> 00:35:58.286
That's the applause of somebody

00:35:58.286 --> 00:35:59.196
who's done this manually.

00:35:59.196 --> 00:35:59.996
Thank you, I agree.

00:36:01.376 --> 00:36:03.176
Further, all four of our label

00:36:03.176 --> 00:36:05.306
colors now automatically adapt

00:36:05.336 --> 00:36:07.416
to the background style, which

00:36:07.416 --> 00:36:08.426
means that you can just set up

00:36:08.426 --> 00:36:09.876
your content hierarchy once,

00:36:10.026 --> 00:36:11.606
describe it semantically, and

00:36:11.606 --> 00:36:12.796
it's going to look great in both

00:36:12.796 --> 00:36:13.726
of these contexts.

00:36:14.396 --> 00:36:17.086
You can also use these

00:36:17.086 --> 00:36:18.396
emphasized variants manually and

00:36:18.396 --> 00:36:19.256
I'll give you an example.

00:36:19.496 --> 00:36:20.826
So, here we have something that

00:36:20.826 --> 00:36:22.206
looks a little bit like the icon

00:36:22.206 --> 00:36:22.836
view in Finder.

00:36:23.686 --> 00:36:25.366
And we've got two labels that

00:36:25.366 --> 00:36:26.546
are ascribed with label color

00:36:26.686 --> 00:36:27.856
and secondary label color.

00:36:28.796 --> 00:36:30.066
And we want to draw a custom

00:36:30.066 --> 00:36:31.236
selection behind them, so we've

00:36:31.236 --> 00:36:32.306
got this custom Bezier

00:36:32.306 --> 00:36:33.806
path-based selection, maybe

00:36:33.806 --> 00:36:34.936
we're filling it with alternate

00:36:34.936 --> 00:36:36.936
selected control color, and we

00:36:36.936 --> 00:36:39.216
want our labels to match the

00:36:40.146 --> 00:36:42.406
primary and secondary variants

00:36:42.466 --> 00:36:43.646
in this emphasized style.

00:36:44.596 --> 00:36:45.926
And to get that is very simple.

00:36:46.456 --> 00:36:47.676
All we have to do is set the

00:36:47.676 --> 00:36:49.086
background style to emphasized

00:36:49.086 --> 00:36:50.796
on both of our text fields and

00:36:50.796 --> 00:36:51.716
they're automatically going to

00:36:51.716 --> 00:36:52.986
provide this nice emphasized

00:36:52.986 --> 00:36:53.456
variant.

00:36:53.916 --> 00:36:55.346
And the great thing is that now

00:36:55.346 --> 00:36:56.396
that we've described it this

00:36:56.396 --> 00:36:58.826
way, when we switch into Dark

00:36:58.826 --> 00:37:00.106
Mode, everything just works.

00:37:00.106 --> 00:37:01.026
We don't have to do anything

00:37:01.026 --> 00:37:04.466
special to support that.

00:37:04.466 --> 00:37:05.846
One final note on selections.

00:37:06.906 --> 00:37:08.736
The selection material that you

00:37:08.736 --> 00:37:10.966
commonly see in sidebars, menus,

00:37:10.966 --> 00:37:13.696
and popovers now follows the

00:37:13.696 --> 00:37:15.086
accent color preference on

00:37:15.086 --> 00:37:15.546
Mojave.

00:37:16.186 --> 00:37:17.226
And what that means is that if

00:37:17.226 --> 00:37:18.446
you're drawing a custom blue

00:37:18.446 --> 00:37:20.116
selection, it's not going to fit

00:37:20.116 --> 00:37:20.326
in.

00:37:21.426 --> 00:37:22.436
Instead, you should use

00:37:22.436 --> 00:37:23.446
NSVisualEffectView.

00:37:23.756 --> 00:37:24.826
It has a special selection

00:37:24.826 --> 00:37:26.726
material just for this and when

00:37:26.726 --> 00:37:27.696
you use this it's going to

00:37:27.696 --> 00:37:28.666
automatically follow the

00:37:28.666 --> 00:37:30.000
preference, as you expect.

00:37:33.716 --> 00:37:35.476
Now, before I get into the

00:37:35.476 --> 00:37:36.676
exciting part, the tips and the

00:37:36.676 --> 00:37:38.156
tricks, I want to say a couple

00:37:38.156 --> 00:37:39.316
of words about backward

00:37:39.316 --> 00:37:40.996
deployment because we know that

00:37:40.996 --> 00:37:42.446
many of you, especially on the

00:37:42.446 --> 00:37:43.856
Mac, like to deploy your

00:37:43.856 --> 00:37:45.256
applications back to previous

00:37:45.256 --> 00:37:47.016
releases of macOS and it was

00:37:47.016 --> 00:37:48.086
important to us to make sure

00:37:48.086 --> 00:37:49.446
that you could adopt Dark Mode

00:37:49.876 --> 00:37:51.456
without necessarily compromising

00:37:51.456 --> 00:37:52.456
on your backward deployment.

00:37:52.976 --> 00:37:55.136
And so I'm going to step through

00:37:55.136 --> 00:37:56.186
a couple of APIs and just

00:37:56.186 --> 00:37:57.146
examine them for backward

00:37:57.146 --> 00:37:58.576
deployment, starting with system

00:37:58.576 --> 00:37:59.076
colors.

00:37:59.506 --> 00:38:00.856
So, here's a sampling of the

00:38:00.856 --> 00:38:02.186
system colors that we support

00:38:02.246 --> 00:38:03.146
that are dynamic for the

00:38:03.146 --> 00:38:03.686
appearance.

00:38:04.006 --> 00:38:05.076
And what I want to highlight

00:38:05.076 --> 00:38:06.446
here is that the ones

00:38:06.446 --> 00:38:07.586
highlighted in green have been

00:38:07.586 --> 00:38:10.406
available since at least 10.10

00:38:10.406 --> 00:38:12.076
Yosemite, many of them actually

00:38:12.076 --> 00:38:12.896
far further back.

00:38:12.896 --> 00:38:15.426
And that means that we think

00:38:15.426 --> 00:38:17.166
that you have a great vocabulary

00:38:17.166 --> 00:38:18.416
of colors available to you to

00:38:18.416 --> 00:38:20.046
describe more or less any UI

00:38:20.046 --> 00:38:22.206
that you'd like and that all

00:38:22.206 --> 00:38:23.936
supports backward deployment out

00:38:23.936 --> 00:38:24.586
of the box.

00:38:26.336 --> 00:38:28.266
For custom colors, our modern

00:38:28.266 --> 00:38:29.576
preferred solution for defining

00:38:29.576 --> 00:38:32.146
them is asset catalogs and these

00:38:32.146 --> 00:38:33.936
are available back to 10.13.

00:38:35.326 --> 00:38:37.376
Now, when you do specify dark

00:38:37.646 --> 00:38:39.276
variants for any of your assets,

00:38:39.596 --> 00:38:41.246
when you back deploy them, those

00:38:41.246 --> 00:38:42.776
dark variants are safely ignored

00:38:42.776 --> 00:38:43.816
on previous versions of the

00:38:43.816 --> 00:38:45.786
operating system, so that's a--

00:38:45.786 --> 00:38:46.996
that's a solution that has

00:38:47.036 --> 00:38:48.156
backward deployment built right

00:38:48.156 --> 00:38:48.336
in.

00:38:49.116 --> 00:38:50.126
But if you want to deploy back

00:38:50.126 --> 00:38:52.556
further than 10.13, you can use

00:38:52.556 --> 00:38:55.256
a technique like this where you

00:38:55.396 --> 00:38:56.776
write a custom color property.

00:38:57.826 --> 00:38:59.386
And here we just encapsulate the

00:38:59.386 --> 00:39:01.116
availability check to use our

00:39:01.116 --> 00:39:02.816
asset catalog color on operating

00:39:02.816 --> 00:39:04.526
systems that support it and then

00:39:04.526 --> 00:39:05.856
we can go ahead and put in a

00:39:05.856 --> 00:39:07.516
hardcoded fallback color for

00:39:07.516 --> 00:39:09.106
those older operating systems.

00:39:09.506 --> 00:39:13.006
Desktop-tinted materials is

00:39:13.006 --> 00:39:13.976
another great new thing in

00:39:13.976 --> 00:39:16.116
Mojave and if you want to

00:39:16.116 --> 00:39:17.556
address those materials directly

00:39:17.556 --> 00:39:19.166
with VisualEffectView, of course

00:39:19.166 --> 00:39:20.546
that's only available starting

00:39:20.546 --> 00:39:23.256
in 10.14, but we've been

00:39:23.256 --> 00:39:24.526
providing-- but we have classes

00:39:24.556 --> 00:39:25.256
that are providing these

00:39:25.256 --> 00:39:26.476
materials automatically,

00:39:26.896 --> 00:39:28.236
including Window, ScrollView,

00:39:28.236 --> 00:39:29.966
and TableView, which have been

00:39:29.966 --> 00:39:31.626
available since essentially the

00:39:31.626 --> 00:39:32.336
beginning of time.

00:39:32.856 --> 00:39:34.266
In fact, some of these predate

00:39:34.416 --> 00:39:35.456
macOS 10.0.

00:39:35.776 --> 00:39:37.636
And so, if you configure them

00:39:37.636 --> 00:39:40.156
correctly, they're going to on

00:39:40.156 --> 00:39:41.956
previous operating systems show

00:39:41.956 --> 00:39:43.686
that special NSColor which looks

00:39:43.686 --> 00:39:44.626
exactly the way that you would

00:39:44.626 --> 00:39:46.866
expect in previous versions and

00:39:46.866 --> 00:39:48.116
then when you run it on Mojave

00:39:48.116 --> 00:39:48.736
you're going to get that

00:39:48.736 --> 00:39:49.786
material automatically.

00:39:50.866 --> 00:39:52.886
And of course NSBox, the custom

00:39:52.886 --> 00:39:53.876
style that allows you to set a

00:39:53.876 --> 00:39:55.786
fill color, deploys back to

00:39:56.316 --> 00:39:58.406
Leopard 10.5 and so does

00:39:58.406 --> 00:39:59.096
NSCollectionView.

00:39:59.496 --> 00:40:00.556
And this works whether you're

00:40:00.556 --> 00:40:01.626
using the legacy

00:40:01.746 --> 00:40:03.406
NSCollectionView API or the

00:40:03.406 --> 00:40:05.016
modern one, although we'd prefer

00:40:05.016 --> 00:40:07.776
that you use the modern one.

00:40:08.396 --> 00:40:11.706
Finally, enabling Dark Mode is

00:40:12.266 --> 00:40:14.386
generally gated on linking

00:40:14.386 --> 00:40:17.426
against the 10.14 SDK, but, as

00:40:17.426 --> 00:40:19.966
you can see, really, the tools

00:40:19.966 --> 00:40:21.376
that you need to develop a great

00:40:21.376 --> 00:40:23.126
Dark Mode application aren't

00:40:23.126 --> 00:40:24.876
necessarily specific to the

00:40:24.876 --> 00:40:26.866
10.14 SDK and you could have

00:40:26.866 --> 00:40:28.466
developed one just using the

00:40:28.466 --> 00:40:30.126
10.13 SDK that you have today.

00:40:31.246 --> 00:40:33.356
And so, if you have a situation

00:40:33.356 --> 00:40:34.396
where you can't necessarily

00:40:34.396 --> 00:40:36.446
update your SDK, we have an

00:40:36.446 --> 00:40:38.036
Info.plist key that you can use

00:40:38.036 --> 00:40:39.326
to opt-in to Dark Mode.

00:40:39.926 --> 00:40:40.396
It's called

00:40:40.506 --> 00:40:42.286
NSRequiresAquaSystemAppearance

00:40:42.576 --> 00:40:43.706
and if you set that to NO

00:40:43.706 --> 00:40:45.206
explicitly, then that's going to

00:40:45.206 --> 00:40:46.706
enable Dark Mode even if you're

00:40:46.706 --> 00:40:47.926
linking on an earlier SDK,

00:40:48.546 --> 00:40:50.176
although we very strongly prefer

00:40:50.446 --> 00:40:51.396
that you update your SDK.

00:40:51.396 --> 00:40:52.696
It's a far better solution.

00:40:53.586 --> 00:40:55.276
You can also set this key to YES

00:40:55.276 --> 00:40:57.136
to disable it temporarily-- and

00:40:57.136 --> 00:40:58.916
I want to emphasize temporarily.

00:40:59.326 --> 00:41:00.586
This is a key that you can use

00:41:00.586 --> 00:41:01.956
to give yourself time to really

00:41:01.956 --> 00:41:03.506
build a great polished update

00:41:03.506 --> 00:41:05.146
for supporting Dark Mode.

00:41:07.876 --> 00:41:09.576
Finally, some tips and tricks.

00:41:11.416 --> 00:41:13.126
First of all, when you're

00:41:13.126 --> 00:41:15.196
updating your application, one

00:41:15.196 --> 00:41:16.016
of the greatest things that you

00:41:16.016 --> 00:41:17.866
can do is just audit your use of

00:41:17.906 --> 00:41:20.366
NSColor just by searching

00:41:20.366 --> 00:41:21.066
through your code base and

00:41:21.066 --> 00:41:22.606
seeing where you're using it.

00:41:23.156 --> 00:41:24.066
And you're going to find a

00:41:24.066 --> 00:41:25.866
couple situations that you can

00:41:25.866 --> 00:41:27.756
use to upgrade to make your Dark

00:41:27.756 --> 00:41:28.786
Mode experience a lot better.

00:41:28.786 --> 00:41:30.536
And so, for example here, we can

00:41:30.536 --> 00:41:31.856
find places where we're using

00:41:31.856 --> 00:41:33.016
named colors that are not

00:41:33.046 --> 00:41:34.886
dynamic and also colors that

00:41:34.886 --> 00:41:36.126
have hardcoded components.

00:41:36.386 --> 00:41:37.556
And when we encounter these

00:41:37.586 --> 00:41:39.756
kinds of situations, we can look

00:41:39.756 --> 00:41:41.446
at these and decide one of two

00:41:41.446 --> 00:41:41.956
things.

00:41:42.456 --> 00:41:44.876
One, maybe there is a built-in

00:41:44.876 --> 00:41:46.226
system color that describes what

00:41:46.226 --> 00:41:47.746
I'm going for and is fully

00:41:47.746 --> 00:41:48.976
dynamic for the appearance.

00:41:49.376 --> 00:41:51.596
Or, two, this is a custom color

00:41:51.596 --> 00:41:53.006
that I think is really important

00:41:53.006 --> 00:41:53.936
to be specific to my

00:41:53.936 --> 00:41:54.576
application.

00:41:55.286 --> 00:41:56.496
And so the first case is pretty

00:41:56.496 --> 00:41:57.066
straightforward.

00:41:57.066 --> 00:41:58.236
We were using black color for

00:41:58.236 --> 00:41:59.526
this label and we can just

00:41:59.526 --> 00:42:00.696
switch that to labelColor and

00:42:00.696 --> 00:42:02.106
that's going to be fully dynamic

00:42:02.106 --> 00:42:02.996
and do what we expect.

00:42:03.956 --> 00:42:05.756
But in the second case, we might

00:42:05.756 --> 00:42:06.816
decide that this color is

00:42:06.816 --> 00:42:07.906
actually really special to our

00:42:07.906 --> 00:42:09.476
app and that's a really great

00:42:09.476 --> 00:42:10.526
candidate for moving into the

00:42:10.526 --> 00:42:11.386
asset catalog.

00:42:12.576 --> 00:42:13.646
Not only does this clean up our

00:42:13.646 --> 00:42:15.286
code because we get all of these

00:42:15.286 --> 00:42:16.466
magic numbers out of our code

00:42:16.466 --> 00:42:17.746
and into a data-driven source,

00:42:18.396 --> 00:42:20.186
but we can also then set a dark

00:42:20.396 --> 00:42:22.616
variant for that color and so we

00:42:22.616 --> 00:42:24.206
get great Dark Mode support

00:42:24.206 --> 00:42:25.286
built in.

00:42:28.136 --> 00:42:29.716
Another common source of issues

00:42:29.716 --> 00:42:30.866
is offscreen drawing.

00:42:31.526 --> 00:42:33.266
To do offscreen drawing, you

00:42:33.406 --> 00:42:34.226
have to make sure that you're

00:42:34.226 --> 00:42:35.266
being sensitive to the

00:42:35.266 --> 00:42:36.736
appearance and also other

00:42:36.736 --> 00:42:37.676
drawing conditions.

00:42:38.216 --> 00:42:39.546
One really common case of this

00:42:39.546 --> 00:42:41.386
is using the NSImage lockFocus

00:42:41.386 --> 00:42:43.456
API to try and draw custom

00:42:43.496 --> 00:42:44.246
NSImages.

00:42:45.246 --> 00:42:46.266
In this case, we're going to go

00:42:46.266 --> 00:42:47.656
ahead and try and draw this

00:42:48.726 --> 00:42:49.906
badged image where we have a

00:42:49.906 --> 00:42:50.906
base image and we're applying a

00:42:50.906 --> 00:42:52.036
badge because something new is

00:42:52.036 --> 00:42:53.286
happening with our lizard.

00:42:53.926 --> 00:42:55.786
And, in this case, we're

00:42:55.786 --> 00:42:57.776
creating an NSImage, calling

00:42:57.776 --> 00:42:59.366
lockFocus on it, and then doing

00:42:59.366 --> 00:42:59.796
our drawing.

00:43:00.736 --> 00:43:02.206
And the problem with this is

00:43:02.206 --> 00:43:03.816
that once we've used lockFocus,

00:43:04.196 --> 00:43:05.656
we lose a lot of the semantics.

00:43:05.856 --> 00:43:07.116
We just have a single bitmap

00:43:07.116 --> 00:43:07.906
representation.

00:43:08.466 --> 00:43:10.496
And so if the appearance changes

00:43:10.756 --> 00:43:12.086
or if many other conditions

00:43:12.086 --> 00:43:13.106
change, including say the

00:43:13.106 --> 00:43:14.436
backing scale factor because

00:43:14.436 --> 00:43:15.606
you've moved your window from a

00:43:15.606 --> 00:43:16.966
Retina display to a non-Retina

00:43:16.966 --> 00:43:18.926
display, suddenly this drawing

00:43:18.926 --> 00:43:19.706
is going to be stale.

00:43:20.846 --> 00:43:22.106
So, a better solution is to use

00:43:22.106 --> 00:43:24.596
the block-based image-- image

00:43:24.866 --> 00:43:27.386
initializer, NSImage size

00:43:27.586 --> 00:43:28.796
flipped drawing handler.

00:43:29.656 --> 00:43:31.516
And we can just do the exact

00:43:31.516 --> 00:43:32.516
same drawing that we were doing

00:43:32.516 --> 00:43:34.036
before, but inside of this

00:43:34.086 --> 00:43:34.426
block.

00:43:34.716 --> 00:43:36.286
And when you assign this kind of

00:43:36.286 --> 00:43:38.286
image to an NSImageView, you're

00:43:38.286 --> 00:43:39.466
automatically going to have this

00:43:39.466 --> 00:43:41.796
block rerun when the appearance

00:43:41.796 --> 00:43:43.636
changes, scale factor changes,

00:43:43.666 --> 00:43:45.036
color gamut changes-- anything

00:43:45.036 --> 00:43:45.946
changes, essentially.

00:43:46.706 --> 00:43:48.006
And so that's great news because

00:43:48.006 --> 00:43:49.816
if our, say, badge fill color is

00:43:49.816 --> 00:43:51.336
a dynamic color, it's going to

00:43:51.336 --> 00:43:52.296
always resolve against the

00:43:52.296 --> 00:43:53.196
correct appearance.

00:43:54.696 --> 00:43:55.906
There are a couple of other ways

00:43:55.906 --> 00:43:56.546
that you might be doing

00:43:56.546 --> 00:43:57.206
offscreen drawing.

00:43:57.906 --> 00:43:59.056
You might be making custom

00:43:59.056 --> 00:44:00.646
bitmap graphics contexts using

00:44:00.776 --> 00:44:02.036
NSGraphicsContext or

00:44:02.036 --> 00:44:03.326
CGBitmapContext.

00:44:03.876 --> 00:44:04.866
And, depending on what you're

00:44:04.866 --> 00:44:06.546
doing, these might also be great

00:44:06.546 --> 00:44:07.856
candidates for replacing with a

00:44:07.856 --> 00:44:09.066
block-based NSImage.

00:44:09.556 --> 00:44:11.796
Further, if you're using the

00:44:11.796 --> 00:44:13.826
NSView cacheDisplay in Rect

00:44:13.826 --> 00:44:15.676
method to cache your image to a

00:44:15.676 --> 00:44:18.186
bitmap rep, just be aware that

00:44:18.186 --> 00:44:19.356
this method is not going to

00:44:19.356 --> 00:44:20.656
capture some of our more

00:44:21.006 --> 00:44:22.966
advanced rendering techniques

00:44:22.966 --> 00:44:25.356
like materials and blurs and

00:44:25.356 --> 00:44:26.466
it's also just another way that

00:44:26.466 --> 00:44:27.546
you can produce drawing that

00:44:27.546 --> 00:44:28.856
goes stale when the appearance

00:44:28.856 --> 00:44:33.376
changes, so be aware of that.

00:44:33.506 --> 00:44:34.426
Here's another situation that

00:44:34.426 --> 00:44:35.366
you might find yourself running

00:44:35.366 --> 00:44:35.676
into.

00:44:36.996 --> 00:44:37.626
If you have an

00:44:37.626 --> 00:44:38.826
NSAttributedString or

00:44:38.866 --> 00:44:40.416
NSTextStorage and you're

00:44:40.416 --> 00:44:41.806
manipulating those attributes

00:44:42.166 --> 00:44:44.156
manually-- say I am in this

00:44:44.156 --> 00:44:44.926
case, I've just set my

00:44:44.926 --> 00:44:46.086
attributes to just be a

00:44:46.086 --> 00:44:47.226
dictionary with a font in it--

00:44:48.166 --> 00:44:48.816
you might find that this

00:44:48.816 --> 00:44:49.316
happens.

00:44:49.316 --> 00:44:51.496
Your text is drawing black even

00:44:51.496 --> 00:44:52.596
when you switch into Dark Mode

00:44:52.596 --> 00:44:53.526
and what has happened here?

00:44:54.666 --> 00:44:56.286
Well, we're missing a foreground

00:44:56.286 --> 00:44:58.536
color attribute and when the

00:44:58.536 --> 00:45:00.136
text drawing engine encounters a

00:45:00.136 --> 00:45:01.956
range of attributed strings that

00:45:02.006 --> 00:45:02.956
doesn't have a foreground

00:45:02.956 --> 00:45:04.956
attribute, it defaults to black.

00:45:04.956 --> 00:45:06.596
And this is what it has always

00:45:06.596 --> 00:45:08.006
defaulted to and it's going to

00:45:08.006 --> 00:45:09.296
continue to be the default for

00:45:09.296 --> 00:45:10.016
compatibility.

00:45:11.036 --> 00:45:12.596
So, one way to fix this is to

00:45:12.596 --> 00:45:13.586
set a foreground color

00:45:13.586 --> 00:45:15.726
explicitly to one of our dynamic

00:45:15.726 --> 00:45:17.436
system colors, and that's going

00:45:17.436 --> 00:45:18.236
to do what you expect.

00:45:19.616 --> 00:45:21.596
But a better alternative is that

00:45:21.596 --> 00:45:22.596
if you're doing manual

00:45:22.596 --> 00:45:24.196
attributed string drawing, you

00:45:24.196 --> 00:45:25.776
should switch to a Cocoa

00:45:25.776 --> 00:45:27.256
control, like an NSTextField,

00:45:27.536 --> 00:45:28.426
which does this for you

00:45:28.426 --> 00:45:30.876
automatically, or, if you're

00:45:30.876 --> 00:45:32.386
manipulating the storage of a

00:45:32.386 --> 00:45:36.376
textView, we have new API called

00:45:36.376 --> 00:45:38.256
performValidatedReplacement on

00:45:38.256 --> 00:45:40.256
textView that does a nice thing

00:45:40.256 --> 00:45:40.636
for you.

00:45:40.966 --> 00:45:42.846
If you go ahead and replace a

00:45:43.026 --> 00:45:45.336
string with an attributed string

00:45:45.336 --> 00:45:47.976
in your textView, it will fill

00:45:47.976 --> 00:45:50.336
in any missing attributes with

00:45:50.406 --> 00:45:51.456
the typing attributes from the

00:45:51.456 --> 00:45:54.666
textView, so that way you can go

00:45:54.666 --> 00:45:55.776
ahead and specify your new

00:45:55.776 --> 00:45:56.936
attributed string without having

00:45:57.036 --> 00:45:58.776
to manually merge all your

00:45:58.776 --> 00:46:00.000
attributes together.

00:46:03.376 --> 00:46:04.546
Here's something else that we've

00:46:04.546 --> 00:46:05.776
encountered in a couple places,

00:46:06.296 --> 00:46:07.526
which is appearances that are

00:46:07.526 --> 00:46:08.666
set in Interface Builder.

00:46:09.346 --> 00:46:10.246
So, if you're going ahead and

00:46:10.246 --> 00:46:11.576
building and debugging your

00:46:11.576 --> 00:46:12.796
application and you find that

00:46:12.796 --> 00:46:13.646
there's some part of your app

00:46:13.686 --> 00:46:15.596
that just isn't switching, you

00:46:15.596 --> 00:46:17.506
might have this in your

00:46:17.506 --> 00:46:18.136
Interface Builder.

00:46:18.136 --> 00:46:20.496
A hardcoded aqua appearance.

00:46:20.746 --> 00:46:21.976
And it's easy to miss, because

00:46:22.016 --> 00:46:23.756
before today, essentially, you

00:46:23.756 --> 00:46:24.956
were always running under aqua,

00:46:25.366 --> 00:46:26.536
so you didn't notice it.

00:46:27.056 --> 00:46:29.226
And the fix for this is easy.

00:46:29.866 --> 00:46:30.976
If you set this back to the

00:46:30.976 --> 00:46:32.696
Inherited option in the pop-up

00:46:32.696 --> 00:46:34.206
menu, your view's going to

00:46:34.206 --> 00:46:35.596
automatically inherit from its

00:46:35.596 --> 00:46:36.146
ancestor.

00:46:36.696 --> 00:46:40.516
An extra special case of this is

00:46:40.626 --> 00:46:41.556
NSVisualEffectView.

00:46:41.916 --> 00:46:42.966
It's very likely that if you

00:46:42.966 --> 00:46:44.646
have a VisualEffectView in

00:46:44.646 --> 00:46:45.866
Interface Builder or even in

00:46:45.866 --> 00:46:47.516
code, you're setting one of the

00:46:47.516 --> 00:46:49.656
two vibrant appearances on it

00:46:49.746 --> 00:46:51.936
and the great news is that in

00:46:51.936 --> 00:46:54.446
macOS 10.14 this is no longer

00:46:54.446 --> 00:46:55.086
necessary.

00:46:55.436 --> 00:46:56.606
NSVisualEffectView will

00:46:56.676 --> 00:46:58.076
automatically pick the right

00:46:58.076 --> 00:46:59.576
vibrant appearance based on the

00:46:59.576 --> 00:47:00.516
appearance it's inheriting.

00:47:00.886 --> 00:47:02.246
So, if it inherits darkAqua,

00:47:02.366 --> 00:47:03.526
it's going to choose vibrantDark

00:47:03.826 --> 00:47:05.176
and if it inherits aqua, it'll

00:47:05.176 --> 00:47:05.916
choose vibrantLight.

00:47:06.146 --> 00:47:08.666
And so the fix for this is easy.

00:47:08.666 --> 00:47:10.186
In Interface builder, you can

00:47:10.186 --> 00:47:11.606
set this to inherited and then

00:47:11.606 --> 00:47:12.666
in code you can set the

00:47:12.666 --> 00:47:14.236
appearance to nil or just delete

00:47:14.236 --> 00:47:14.806
your override.

00:47:15.126 --> 00:47:18.476
Interface-- speaking of

00:47:18.476 --> 00:47:20.086
Interface Builder, Interface

00:47:20.086 --> 00:47:22.016
Builder is a great tool for

00:47:22.016 --> 00:47:23.766
designing and previewing your

00:47:23.766 --> 00:47:24.656
views visually.

00:47:25.206 --> 00:47:27.136
And so, for example, here I have

00:47:27.136 --> 00:47:28.726
a view that is actually a custom

00:47:28.726 --> 00:47:30.596
view using IB designable.

00:47:30.986 --> 00:47:32.086
So, I'm rendering a gradient

00:47:32.086 --> 00:47:33.316
here and I can see it right here

00:47:33.316 --> 00:47:34.026
in the canvas.

00:47:34.326 --> 00:47:35.926
And, by default, my canvas is

00:47:35.926 --> 00:47:37.886
previewing my custom designable

00:47:37.886 --> 00:47:39.496
view using the canvas's

00:47:39.496 --> 00:47:41.426
appearance, in this case dark.

00:47:42.336 --> 00:47:43.596
But down at the bottom, we have

00:47:43.596 --> 00:47:45.306
a new toggle that lets you go

00:47:45.306 --> 00:47:46.646
ahead and set it to the light

00:47:46.646 --> 00:47:47.906
appearance so that you can

00:47:47.906 --> 00:47:48.986
preview the way that your view

00:47:48.986 --> 00:47:50.426
looks in either appearance.

00:47:50.936 --> 00:47:52.936
And thanks to Interface

00:47:52.936 --> 00:47:54.156
Builder's great support for

00:47:54.156 --> 00:47:56.446
asset catalog colors, we can

00:47:56.446 --> 00:47:57.876
actually use our custom asset

00:47:57.876 --> 00:47:59.436
catalog colors, which have dark

00:47:59.436 --> 00:48:01.116
and light variants, and we can

00:48:01.116 --> 00:48:03.116
preview them in the canvas live.

00:48:03.696 --> 00:48:04.776
And if you see there's a little

00:48:04.776 --> 00:48:05.966
arrow button built into that

00:48:05.966 --> 00:48:07.156
pop-up button and you can use

00:48:07.156 --> 00:48:08.096
that to follow it and go

00:48:08.096 --> 00:48:09.396
straight to the definition in

00:48:09.396 --> 00:48:10.936
your asset catalog, so you can

00:48:10.936 --> 00:48:12.866
see live as you're changing it.

00:48:13.816 --> 00:48:15.106
And you can do this all without

00:48:15.106 --> 00:48:16.416
even building and recompiling.

00:48:16.456 --> 00:48:18.136
When you do build and run,

00:48:18.136 --> 00:48:20.646
you're going to see a new item

00:48:20.646 --> 00:48:22.646
in your Debug Bar and it

00:48:22.646 --> 00:48:24.056
produces a menu that allows you

00:48:24.056 --> 00:48:25.016
to choose the appearance for

00:48:25.016 --> 00:48:25.766
your application.

00:48:26.446 --> 00:48:27.636
And this is really handy for

00:48:27.636 --> 00:48:29.096
previewing your app in various

00:48:29.096 --> 00:48:30.746
appearances without having to go

00:48:30.746 --> 00:48:31.966
and reconfigure your entire

00:48:31.966 --> 00:48:32.426
system.

00:48:33.686 --> 00:48:34.886
Not only can you choose light

00:48:34.886 --> 00:48:36.056
and dark, but you can also

00:48:36.056 --> 00:48:37.066
choose the high contrast

00:48:37.066 --> 00:48:38.996
variants and test those as well.

00:48:40.146 --> 00:48:41.276
And, if you have a Touch Bar

00:48:41.276 --> 00:48:42.796
Mac, this appears in the

00:48:42.796 --> 00:48:44.476
expanded Debug Bar as well, so

00:48:44.476 --> 00:48:45.566
you can do this without even

00:48:45.566 --> 00:48:47.156
leaving your app to go back to

00:48:47.746 --> 00:48:48.000
Xcode.

00:48:50.316 --> 00:48:51.326
Finally, I want to talk about

00:48:51.326 --> 00:48:53.176
one last tool in Xcode that is

00:48:53.176 --> 00:48:54.326
really great for debugging your

00:48:54.326 --> 00:48:55.426
Dark Mode applications.

00:48:56.346 --> 00:48:58.676
So, here we have our app and

00:48:58.676 --> 00:48:59.766
really things are looking pretty

00:48:59.766 --> 00:48:59.996
good.

00:48:59.996 --> 00:49:01.536
There's nothing out of place,

00:49:02.286 --> 00:49:04.156
but I find that when I scroll

00:49:04.156 --> 00:49:06.586
and rubber band a bit, oh, I'm

00:49:06.586 --> 00:49:07.476
revealing something that I

00:49:07.476 --> 00:49:08.236
didn't expect.

00:49:08.346 --> 00:49:09.326
There's a light background

00:49:09.426 --> 00:49:11.516
hiding back there somewhere, but

00:49:11.516 --> 00:49:12.936
it's hard to see without doing

00:49:12.936 --> 00:49:14.056
that little scroll gesture.

00:49:14.776 --> 00:49:16.446
And this is a great case for

00:49:16.446 --> 00:49:17.446
using the View Debugger.

00:49:18.686 --> 00:49:19.606
Using the View Debugger's

00:49:19.606 --> 00:49:22.026
expanded 3D view, the view

00:49:22.026 --> 00:49:23.336
that's drawing unexpectedly is

00:49:23.416 --> 00:49:24.686
really easy to spot.

00:49:25.606 --> 00:49:26.786
And in this case, we can see

00:49:26.786 --> 00:49:27.756
that although our collection

00:49:27.756 --> 00:49:29.266
view was drawing the background

00:49:29.416 --> 00:49:31.116
that we expected, the scroll

00:49:31.116 --> 00:49:32.696
view behind it still has a light

00:49:32.696 --> 00:49:33.526
background for some reason.

00:49:33.526 --> 00:49:35.556
And when we select it, we can

00:49:35.556 --> 00:49:37.396
use the Inspector to see how

00:49:37.396 --> 00:49:38.226
it's being configured.

00:49:38.226 --> 00:49:39.606
And in this case, we can verify

00:49:39.606 --> 00:49:40.726
that, yeah, it's just drawing a

00:49:40.726 --> 00:49:42.156
hardcoded white color and that's

00:49:42.156 --> 00:49:43.776
a really easy fix.

00:49:44.916 --> 00:49:46.036
The View Debugger has made a

00:49:46.036 --> 00:49:47.276
number of enhancements in Xcode

00:49:47.276 --> 00:49:48.756
10 that are great for debugging

00:49:48.756 --> 00:49:49.836
Dark Mode applications,

00:49:50.666 --> 00:49:53.096
including colors.

00:49:53.146 --> 00:49:54.326
They can now show you the names

00:49:54.326 --> 00:49:55.756
of colors, both dynamic system

00:49:55.756 --> 00:49:57.416
colors and your asset catalog

00:49:57.416 --> 00:49:59.016
colors, so you can identify

00:49:59.096 --> 00:50:00.546
where these RGB components are

00:50:00.546 --> 00:50:02.476
coming from, and it'll show you

00:50:02.476 --> 00:50:03.896
the configuration of your view

00:50:04.206 --> 00:50:05.956
for NSAppearance, including the

00:50:05.956 --> 00:50:06.946
appearance that it's going to

00:50:06.946 --> 00:50:08.586
draw with as well as whether

00:50:08.586 --> 00:50:10.196
there's any local overrides of

00:50:10.196 --> 00:50:12.000
NSAppearance on that object.

00:50:14.496 --> 00:50:16.396
So, we have covered an awful lot

00:50:16.396 --> 00:50:17.806
of content and so let's rewind

00:50:17.806 --> 00:50:18.836
and make sure that we remember

00:50:18.836 --> 00:50:19.096
it all.

00:50:19.926 --> 00:50:21.436
We started off with NSAppearance

00:50:21.906 --> 00:50:23.526
and leveraging it effectively to

00:50:23.526 --> 00:50:25.226
draw your custom views that

00:50:25.226 --> 00:50:26.486
adapt based on the theme.

00:50:27.596 --> 00:50:28.796
Then we learned how to add depth

00:50:28.796 --> 00:50:30.356
and beauty to our UI using our

00:50:30.356 --> 00:50:31.906
new and updated palette of

00:50:31.966 --> 00:50:33.506
NSVisualEffectView materials.

00:50:34.306 --> 00:50:35.686
We talked about drawing in a

00:50:35.686 --> 00:50:37.026
couple of interesting contexts,

00:50:37.026 --> 00:50:39.176
both vibrancy and selections,

00:50:39.516 --> 00:50:40.826
and then we walked through some

00:50:40.826 --> 00:50:42.056
of the great ways that Xcode can

00:50:42.056 --> 00:50:43.406
help you design and debug your

00:50:43.406 --> 00:50:44.566
Dark Mode applications.

00:50:44.916 --> 00:50:46.196
As always, you can go to

00:50:46.196 --> 00:50:47.886
developer.apple.com to re-watch

00:50:47.886 --> 00:50:49.286
the video for this talk and see

00:50:49.286 --> 00:50:51.196
any related resources and we

00:50:51.196 --> 00:50:52.166
have labs today.

00:50:52.576 --> 00:50:54.186
We have a special Cocoa and Dark

00:50:54.186 --> 00:50:58.106
Mode Lab, it's at 2:00, and not

00:50:58.106 --> 00:50:59.266
only will we have Cocoa

00:50:59.266 --> 00:51:00.326
engineers onsite to help you

00:51:00.326 --> 00:51:01.426
with your code, but we'll also

00:51:01.426 --> 00:51:02.836
have human interface designers

00:51:02.836 --> 00:51:03.766
onsite to help you with your

00:51:03.766 --> 00:51:04.936
design questions as well.

00:51:05.286 --> 00:51:07.136
So, go get lunch, think about

00:51:07.136 --> 00:51:08.646
Dark Mode the entire time, and

00:51:08.646 --> 00:51:09.676
then come see us.

00:51:09.996 --> 00:51:11.086
And then, finally, we have an

00:51:11.086 --> 00:51:12.546
additional Cocoa Lab on Friday

00:51:12.546 --> 00:51:14.000
at 11:00 as well.

00:51:14.496 --> 00:51:14.696
All right.

00:51:14.746 --> 00:51:15.466
Thank you very much.

00:51:16.346 --> 00:51:18.000
[ Applause ]