WEBVTT

00:00:07.516 --> 00:00:15.500
[ Music ]

00:00:22.476 --> 00:00:23.016
>> All right.

00:00:23.016 --> 00:00:23.083
[ Applause ]

00:00:28.136 --> 00:00:28.946
>> My name is Pierre-Olivier

00:00:28.946 --> 00:00:29.476
Martel.

00:00:29.476 --> 00:00:31.186
I'm an engineering manager in

00:00:31.186 --> 00:00:32.235
the Security, Engineering, and

00:00:32.235 --> 00:00:33.146
Occupational Group here at

00:00:33.146 --> 00:00:33.396
Apple.

00:00:34.236 --> 00:00:35.756
And today, along with two of my

00:00:35.756 --> 00:00:36.946
colleagues, I am here to talk to

00:00:36.946 --> 00:00:38.046
you about some of the new

00:00:38.046 --> 00:00:39.736
security features in macOS

00:00:39.736 --> 00:00:41.766
Mojave and how you can make the

00:00:41.766 --> 00:00:44.626
most of it in your apps.

00:00:44.886 --> 00:00:46.286
I'll start by going over some of

00:00:46.286 --> 00:00:47.586
the high-level security

00:00:47.586 --> 00:00:48.896
improvements that went into the

00:00:48.896 --> 00:00:49.506
OS this year.

00:00:50.266 --> 00:00:51.086
And then I would like to

00:00:51.086 --> 00:00:52.206
dedicate the rest of this

00:00:52.206 --> 00:00:53.776
session to talk about some of

00:00:53.776 --> 00:00:54.556
the enhancements that we are

00:00:54.556 --> 00:00:54.976
putting in Gatekeeper.

00:00:59.816 --> 00:01:01.186
A few years ago we introduced a

00:01:01.186 --> 00:01:02.616
feature called Systemic Security

00:01:02.616 --> 00:01:04.426
Protection to macOS with the

00:01:04.426 --> 00:01:06.406
goal to increase the protection

00:01:06.706 --> 00:01:08.566
of the operating system by

00:01:08.566 --> 00:01:10.536
making it so that platform

00:01:10.536 --> 00:01:12.366
binaries are protected from

00:01:12.366 --> 00:01:14.806
modification both on disk and at

00:01:15.356 --> 00:01:15.536
runtime.

00:01:16.276 --> 00:01:17.936
This year we are taking it one

00:01:17.936 --> 00:01:20.066
step further by enforcing

00:01:20.066 --> 00:01:21.066
additional code-sending

00:01:21.066 --> 00:01:22.306
requirements on platform

00:01:22.306 --> 00:01:22.726
binaries.

00:01:24.036 --> 00:01:26.866
The system will now enforce the

00:01:27.076 --> 00:01:29.356
validity of code signatures

00:01:29.446 --> 00:01:31.016
throughout the lifetime of

00:01:31.016 --> 00:01:32.766
system processes and will

00:01:32.766 --> 00:01:34.726
automatically abort any process

00:01:35.036 --> 00:01:36.236
that deviates from its code

00:01:36.236 --> 00:01:38.656
signature or that attempts to

00:01:38.656 --> 00:01:40.846
execute any code that is not

00:01:40.846 --> 00:01:41.786
properly signed by Apple.

00:01:42.886 --> 00:01:44.956
In addition to that, the system

00:01:44.956 --> 00:01:47.936
will monitor it - the dynamic

00:01:48.046 --> 00:01:50.136
loading of any libraries,

00:01:50.236 --> 00:01:51.856
frameworks, and plug-ins and

00:01:51.856 --> 00:01:53.566
enforce that - those objects

00:01:53.886 --> 00:01:55.226
also be signed by Apple.

00:01:55.696 --> 00:01:57.826
It's a mechanism that has been

00:01:57.826 --> 00:01:59.246
enforced on iOS for several

00:01:59.246 --> 00:02:00.656
years now, and we are excited to

00:02:00.656 --> 00:02:01.886
make this to be for the macOS.

00:02:02.466 --> 00:02:04.326
Of course, not that this only

00:02:04.326 --> 00:02:05.266
applies to the system.

00:02:05.266 --> 00:02:06.776
This does not apply - it does

00:02:06.776 --> 00:02:07.876
not apply to your apps.

00:02:08.476 --> 00:02:11.466
However, there still remains a

00:02:11.466 --> 00:02:13.786
few system extension points

00:02:13.876 --> 00:02:15.036
throughout the operating system

00:02:15.376 --> 00:02:16.636
that have not yet made the move

00:02:16.886 --> 00:02:18.046
to the app extensions model.

00:02:19.006 --> 00:02:19.976
And those are technically

00:02:19.976 --> 00:02:21.526
considered to be platform

00:02:21.526 --> 00:02:22.936
binaries; OK, it's the plug-in

00:02:22.936 --> 00:02:23.316
loaders.

00:02:24.126 --> 00:02:25.436
So for those we are going to

00:02:25.436 --> 00:02:26.826
relax that policy, and the

00:02:26.826 --> 00:02:29.176
system will still allow these

00:02:29.176 --> 00:02:32.006
processes to load code that is

00:02:32.006 --> 00:02:34.406
either third-party signed or

00:02:34.406 --> 00:02:35.156
completely unsigned.

00:02:35.686 --> 00:02:38.866
So if you ship any of these

00:02:38.866 --> 00:02:41.186
plug-ins in your app, please

00:02:41.186 --> 00:02:42.606
make sure that you test on the

00:02:42.666 --> 00:02:44.656
developer preview and make sure

00:02:44.656 --> 00:02:45.476
it works properly.

00:02:45.626 --> 00:02:46.526
If not, please let us know.

00:02:47.006 --> 00:02:50.576
Next, I would like to talk about

00:02:50.576 --> 00:02:51.716
UI automation.

00:02:52.156 --> 00:02:54.986
The security model of a macOS,

00:02:55.236 --> 00:02:56.476
especially when it comes to user

00:02:56.476 --> 00:02:58.996
data access, relies on the user

00:02:59.456 --> 00:03:00.876
making security decisions for

00:03:00.876 --> 00:03:02.346
their self - for themselves.

00:03:03.146 --> 00:03:04.726
We deliberately captured those

00:03:04.726 --> 00:03:07.556
decisions, either via the user

00:03:07.556 --> 00:03:09.536
intent using the mechanisms like

00:03:09.536 --> 00:03:11.206
the open/save dialogs or

00:03:11.206 --> 00:03:13.606
drag-and-drop operations -- or

00:03:13.996 --> 00:03:15.946
by a user consent, with more

00:03:15.946 --> 00:03:18.176
explicit authorization dialogs

00:03:18.556 --> 00:03:20.246
or asking the user to make

00:03:20.586 --> 00:03:22.296
security configuration changes

00:03:22.366 --> 00:03:23.336
in System Preferences.

00:03:23.756 --> 00:03:26.886
As such, it's critical for the

00:03:26.886 --> 00:03:28.386
operating system to be able to

00:03:28.386 --> 00:03:30.456
differentiate between the user

00:03:30.706 --> 00:03:32.696
actually making these decisions

00:03:33.646 --> 00:03:35.976
and software driving the UI on

00:03:35.976 --> 00:03:36.416
their behalf.

00:03:36.856 --> 00:03:39.346
In the past we have made a few

00:03:39.426 --> 00:03:41.186
targeted enhancements to some of

00:03:41.186 --> 00:03:43.176
the system authorization dialogs

00:03:43.176 --> 00:03:43.996
to make sure that they can

00:03:43.996 --> 00:03:46.446
detect and block these synthetic

00:03:46.446 --> 00:03:46.856
events.

00:03:47.926 --> 00:03:49.386
But these decision points have

00:03:49.386 --> 00:03:51.456
become so pervasive across the

00:03:51.456 --> 00:03:53.396
OS that we need a better model.

00:03:53.916 --> 00:03:58.076
In macOS Mojave, the system will

00:03:58.136 --> 00:04:00.216
only allow UI events to be

00:04:00.216 --> 00:04:02.326
dispatched by processes that the

00:04:02.326 --> 00:04:04.176
user has specifically configured

00:04:05.066 --> 00:04:06.836
to control the UI on their

00:04:06.836 --> 00:04:09.186
behalf and effectively

00:04:09.546 --> 00:04:10.226
impersonate them.

00:04:11.226 --> 00:04:13.456
This configuration is made in

00:04:13.456 --> 00:04:14.976
the Security and Privacy Press

00:04:14.976 --> 00:04:17.026
pane in the System Preferences.

00:04:17.266 --> 00:04:19.005
And it's currently co-located

00:04:19.196 --> 00:04:20.466
with the existing accessing to

00:04:20.466 --> 00:04:21.466
the key list.

00:04:23.516 --> 00:04:25.256
This is the list of APIs that

00:04:25.526 --> 00:04:26.916
will be impacted moving forward.

00:04:27.356 --> 00:04:28.416
They mostly fall under two

00:04:28.416 --> 00:04:29.106
categories.

00:04:29.616 --> 00:04:31.546
First, the kidlet [phonetic]

00:04:31.706 --> 00:04:34.346
Layer: IOHIDPostEvent and the

00:04:34.346 --> 00:04:37.026
IOHIDSetMouseLocation; and then

00:04:37.076 --> 00:04:38.786
second, at the CG Layer.

00:04:39.406 --> 00:04:41.316
If you attempt to post any CG

00:04:41.316 --> 00:04:44.376
event or if you create any CG

00:04:44.376 --> 00:04:46.526
event tab, we are now providing

00:04:46.526 --> 00:04:48.126
the Listen Only option --

00:04:48.986 --> 00:04:50.196
effectively creating what we

00:04:50.196 --> 00:04:51.276
call a modifying tab.

00:04:51.276 --> 00:04:52.756
And the user will have to

00:04:52.756 --> 00:04:53.976
approve those processes as well.

00:04:54.956 --> 00:05:01.146
And then next, we put a lot of

00:05:01.146 --> 00:05:03.186
focus of hardening Safari

00:05:03.186 --> 00:05:03.506
itself.

00:05:04.756 --> 00:05:06.156
It is, after all, one of the

00:05:06.156 --> 00:05:07.806
most important Internet facing

00:05:07.806 --> 00:05:09.346
applications on the machine.

00:05:09.946 --> 00:05:11.776
So it deserves special

00:05:11.776 --> 00:05:12.146
attention.

00:05:12.716 --> 00:05:16.746
In Mojave, Safari, as well as

00:05:16.966 --> 00:05:19.286
every satellite processes that

00:05:19.286 --> 00:05:21.386
ship as part of it, it's fully

00:05:21.386 --> 00:05:21.996
sandboxed.

00:05:22.796 --> 00:05:25.076
If you are a web developer, this

00:05:25.076 --> 00:05:26.316
may potentially have an impact

00:05:26.316 --> 00:05:27.356
on your local development

00:05:27.356 --> 00:05:29.406
workflow due to the way that

00:05:29.406 --> 00:05:30.806
Safari now acts as its local

00:05:30.806 --> 00:05:32.226
resources on this.

00:05:32.766 --> 00:05:34.766
If you want more details, please

00:05:34.766 --> 00:05:35.986
check out the What's New in

00:05:35.986 --> 00:05:37.786
Safari and WebKit session this

00:05:37.786 --> 00:05:38.006
Friday.

00:05:39.116 --> 00:05:40.486
And then of course, WebKit has

00:05:40.486 --> 00:05:41.656
been sandboxed for many years

00:05:41.656 --> 00:05:41.886
now.

00:05:42.506 --> 00:05:44.356
We put a lot of attention in

00:05:44.606 --> 00:05:46.276
auditing the existing sandboxes

00:05:46.956 --> 00:05:49.056
as well as removing any risky

00:05:49.056 --> 00:05:50.466
and unnecessary dependencies

00:05:50.466 --> 00:05:51.046
from those.

00:05:51.606 --> 00:05:53.636
For example, the web content

00:05:54.026 --> 00:05:56.166
process no longer needs access

00:05:56.216 --> 00:05:57.696
through the Windows server, to

00:05:57.696 --> 00:05:59.906
the dock, or to the network.

00:05:59.906 --> 00:06:03.416
If your app uses the system

00:06:03.416 --> 00:06:05.676
WebKit, then there is nothing

00:06:05.676 --> 00:06:06.736
for you to do in order to adopt

00:06:06.736 --> 00:06:06.836
this.

00:06:06.836 --> 00:06:08.586
You will automatically benefit

00:06:08.586 --> 00:06:09.426
from those improvements.

00:06:12.736 --> 00:06:15.006
Next, I'd like to talk about

00:06:15.856 --> 00:06:16.076
Gatekeeper.

00:06:16.156 --> 00:06:17.256
So Gatekeeper has done a great

00:06:17.256 --> 00:06:19.116
job over the years in stopping

00:06:19.116 --> 00:06:21.616
widespread malware attacks on

00:06:21.616 --> 00:06:22.056
the platform.

00:06:22.776 --> 00:06:23.266
It's here.

00:06:23.266 --> 00:06:24.856
We would like to make it better.

00:06:24.966 --> 00:06:26.546
And we are focusing on three

00:06:26.546 --> 00:06:27.686
main aspects.

00:06:28.896 --> 00:06:31.446
First, I invite Kelly onstage to

00:06:31.446 --> 00:06:33.286
tell you about a new security

00:06:33.286 --> 00:06:35.756
mechanism that puts the user in

00:06:35.756 --> 00:06:38.086
control over the way apps access

00:06:38.126 --> 00:06:39.496
their personal data.

00:06:40.356 --> 00:06:42.366
Then I'll introduce a new

00:06:42.366 --> 00:06:43.656
security feature that you as a

00:06:43.656 --> 00:06:45.836
developer can adopt in your apps

00:06:46.596 --> 00:06:47.866
to increase their security and

00:06:47.866 --> 00:06:48.896
their transparency.

00:06:50.256 --> 00:06:51.476
And then finally, I am sure you

00:06:51.476 --> 00:06:52.616
are all very impatient to hear

00:06:52.616 --> 00:06:54.426
more about the Developer ID

00:06:54.686 --> 00:06:56.146
notary service that Sebastian

00:06:56.146 --> 00:06:57.306
mentioned in his talk yesterday.

00:06:57.976 --> 00:06:59.746
So I invite Garrett onstage to

00:06:59.746 --> 00:07:02.556
tell you more about that.

00:07:02.736 --> 00:07:02.966
All right?

00:07:03.076 --> 00:07:03.586
Let's get started.

00:07:03.656 --> 00:07:03.776
Kelly?

00:07:04.516 --> 00:07:10.546
[ Applause ]

00:07:11.046 --> 00:07:11.766
>> OK, thank you Pierre.

00:07:12.616 --> 00:07:13.826
Hi, my name is Kelly Yancy.

00:07:13.886 --> 00:07:15.316
I'm with the OS Security Team

00:07:15.316 --> 00:07:15.906
here at Apple.

00:07:15.906 --> 00:07:17.726
And I am really excited today to

00:07:17.726 --> 00:07:18.996
tell you about the new user data

00:07:18.996 --> 00:07:20.666
protections in macOS Mojave.

00:07:21.536 --> 00:07:24.846
Now in macOS High Sierra, these

00:07:24.846 --> 00:07:24.976
APIs --

00:07:29.196 --> 00:07:30.896
-- prompt the user for consent

00:07:31.146 --> 00:07:32.656
before allowing apps to access

00:07:32.656 --> 00:07:33.556
their respective data.

00:07:34.096 --> 00:07:37.536
With these prompts,

00:07:37.766 --> 00:07:39.206
well-intentioned software can

00:07:39.206 --> 00:07:40.666
honor the user's preferences

00:07:41.316 --> 00:07:43.106
with regards to how they access

00:07:43.316 --> 00:07:44.816
their personal data.

00:07:46.076 --> 00:07:48.066
Well now, in macOS Mojave,

00:07:48.466 --> 00:07:50.076
access to this data requires

00:07:50.076 --> 00:07:51.776
user consent -- even for apps

00:07:51.776 --> 00:07:53.246
that access the Backing/Store

00:07:53.296 --> 00:07:54.596
directly via the file system.

00:07:55.586 --> 00:07:56.786
Now apps that currently use

00:07:56.816 --> 00:07:59.386
prescribed APIs to access this

00:08:00.356 --> 00:08:01.666
data should be well prepared.

00:08:02.236 --> 00:08:03.516
But as always, we encourage you

00:08:03.516 --> 00:08:04.786
to test your apps against the

00:08:04.786 --> 00:08:06.646
latest macOS release.

00:08:07.986 --> 00:08:09.926
Now if your app does access the

00:08:09.926 --> 00:08:11.416
underlying databases directly

00:08:11.416 --> 00:08:13.866
via the file system, be aware

00:08:13.866 --> 00:08:15.786
that that may - that access may

00:08:15.786 --> 00:08:17.366
now block the calling thread

00:08:17.856 --> 00:08:18.866
while the operating system

00:08:18.866 --> 00:08:20.296
presents an authorization prompt

00:08:20.296 --> 00:08:20.866
to the user.

00:08:21.626 --> 00:08:22.906
And in a world where computers

00:08:23.076 --> 00:08:24.586
do billions of operations per

00:08:24.586 --> 00:08:26.216
second, it turns out people are

00:08:26.216 --> 00:08:27.356
relatively high latency.

00:08:28.096 --> 00:08:29.436
So you don't want to do that I/O

00:08:29.436 --> 00:08:31.126
in your app's main thread, or it

00:08:31.196 --> 00:08:33.486
may appear hung while the prompt

00:08:33.486 --> 00:08:33.976
is displayed.

00:08:36.176 --> 00:08:37.756
So here is an example of code

00:08:38.216 --> 00:08:39.336
that accesses the user's

00:08:39.395 --> 00:08:40.936
pictures via the file system.

00:08:42.025 --> 00:08:43.506
Now by default, the Photos app

00:08:43.506 --> 00:08:45.226
stores the user's Photos library

00:08:45.516 --> 00:08:46.496
in the Pictures folder.

00:08:47.406 --> 00:08:51.636
So when this code traverses the

00:08:51.636 --> 00:08:53.696
user's Photos library, it may

00:08:53.696 --> 00:08:54.906
now trigger an authorization

00:08:54.906 --> 00:08:56.376
prompt for access to the user's

00:08:56.376 --> 00:08:58.206
photos -- where it would not

00:08:58.206 --> 00:09:00.106
have in macOS High Sierra.

00:09:00.106 --> 00:09:03.656
Now apps that traverse the

00:09:03.656 --> 00:09:05.746
user's Home folder could trigger

00:09:05.856 --> 00:09:08.196
multiple approval prompts, not

00:09:08.196 --> 00:09:09.936
just for photos -- for contacts,

00:09:09.936 --> 00:09:12.166
for calendars, and so on -- as

00:09:12.166 --> 00:09:13.256
many apps that traverse the

00:09:13.256 --> 00:09:15.176
entire file system, such as disk

00:09:15.176 --> 00:09:16.676
management or backup software.

00:09:17.886 --> 00:09:19.746
So user can pre-approve such

00:09:19.746 --> 00:09:22.086
apps by adding them to the new

00:09:22.166 --> 00:09:24.036
System Application Data category

00:09:24.286 --> 00:09:25.536
in the System Preferences

00:09:25.666 --> 00:09:26.846
Security and Privacy pane.

00:09:27.886 --> 00:09:28.886
By doing so, the user

00:09:28.886 --> 00:09:30.536
preauthorizes those apps to

00:09:30.536 --> 00:09:31.526
access all of their

00:09:31.526 --> 00:09:33.426
privacy-sensitive data without

00:09:33.456 --> 00:09:33.876
prompting.

00:09:34.766 --> 00:09:35.976
Authorization can also be

00:09:35.976 --> 00:09:38.796
preconfigured in education or

00:09:38.796 --> 00:09:40.996
enterprise environments via MDM

00:09:40.996 --> 00:09:42.286
server as long as it's a

00:09:42.286 --> 00:09:43.706
user-improved enrollment.

00:09:46.256 --> 00:09:47.546
When the user is prompted to

00:09:47.546 --> 00:09:49.616
authorize access to their

00:09:49.616 --> 00:09:51.546
personal data, it is important

00:09:51.546 --> 00:09:52.886
to communicate the purpose of

00:09:52.886 --> 00:09:53.566
that access.

00:09:54.456 --> 00:09:56.006
Imagine that you just installed

00:09:56.006 --> 00:09:57.536
an app that you had never used

00:09:57.586 --> 00:09:58.036
before.

00:09:58.886 --> 00:10:00.236
And the very first time you

00:10:00.236 --> 00:10:02.256
launch it, you saw this prompt.

00:10:03.036 --> 00:10:04.006
That's a tough decision.

00:10:04.166 --> 00:10:06.366
But we can make that decision

00:10:06.366 --> 00:10:08.736
easier by including purpose

00:10:08.736 --> 00:10:11.396
text, which makes it clear why

00:10:11.396 --> 00:10:13.576
the app is requesting access and

00:10:13.576 --> 00:10:14.866
what the consequences of

00:10:14.866 --> 00:10:16.366
declining that access would be.

00:10:17.486 --> 00:10:18.916
Now your app can specify the

00:10:18.916 --> 00:10:20.266
text displayed in the

00:10:20.266 --> 00:10:21.736
authorization prompts displayed

00:10:21.736 --> 00:10:24.406
on its behalf by including keys

00:10:24.466 --> 00:10:25.726
in your Info.plist file.

00:10:26.306 --> 00:10:28.806
So here are the Info.plist keys

00:10:28.806 --> 00:10:29.986
for each of the APIs that we

00:10:29.986 --> 00:10:30.966
have been looking at.

00:10:32.296 --> 00:10:33.476
Now you may notice that these

00:10:33.476 --> 00:10:35.756
are largely the same as on iOS.

00:10:35.756 --> 00:10:38.206
I want to call out one

00:10:38.206 --> 00:10:39.016
difference, and that's the

00:10:39.016 --> 00:10:40.876
Locations Services Info.plist

00:10:40.876 --> 00:10:41.126
key.

00:10:41.626 --> 00:10:44.956
This key is actually deprecated

00:10:44.956 --> 00:10:47.586
on iOS, but I assure you it is

00:10:47.586 --> 00:10:49.696
the correct key to use in macOS

00:10:49.926 --> 00:10:50.396
Mojave.

00:10:50.986 --> 00:10:54.066
So these keys will be required

00:10:54.306 --> 00:10:55.986
for apps linked against the

00:10:55.986 --> 00:10:57.226
10.14 SDK.

00:10:58.666 --> 00:11:00.666
So besides informing the user,

00:11:00.936 --> 00:11:02.496
these keys are also being used

00:11:02.496 --> 00:11:04.066
to inform the operating system

00:11:04.486 --> 00:11:06.926
that -- as the developer -- you

00:11:06.926 --> 00:11:08.366
intend for your app to access

00:11:08.406 --> 00:11:09.506
the user's personal data.

00:11:10.816 --> 00:11:12.636
And should an app try to access

00:11:12.696 --> 00:11:14.716
the user personal data but not

00:11:14.716 --> 00:11:17.406
include the appropriate key and

00:11:17.406 --> 00:11:18.726
purpose string for that data,

00:11:20.056 --> 00:11:22.156
macOS Mojave assumes that that

00:11:22.156 --> 00:11:24.296
access was unintended -- and the

00:11:24.296 --> 00:11:24.946
app exits.

00:11:26.426 --> 00:11:28.146
For compatibility, these keys

00:11:28.226 --> 00:11:30.256
are optional for apps that link

00:11:30.306 --> 00:11:31.926
- that target older SDKs.

00:11:33.126 --> 00:11:34.146
So for example, if you have an

00:11:34.146 --> 00:11:36.176
app that still targets the 10.13

00:11:36.396 --> 00:11:38.426
SDK and tries to access the

00:11:38.426 --> 00:11:40.246
user's personal data via one of

00:11:40.246 --> 00:11:43.376
these APIs, the app will not

00:11:43.426 --> 00:11:45.516
exit but will display a prompt

00:11:45.686 --> 00:11:46.856
lacking the purpose string --

00:11:47.006 --> 00:11:48.246
like the first one that we saw a

00:11:48.246 --> 00:11:48.706
minute ago.

00:11:49.276 --> 00:11:50.556
So we still encourage you to

00:11:50.556 --> 00:11:53.016
include the Info.plist keys in

00:11:53.016 --> 00:11:54.586
your apps, even if you are

00:11:54.586 --> 00:11:56.716
targeting an older SDK, so that

00:11:57.786 --> 00:11:59.516
the user is better informed why

00:11:59.516 --> 00:12:00.616
your app is accessing their

00:12:00.616 --> 00:12:00.906
data.

00:12:01.486 --> 00:12:04.856
So in addition to these

00:12:04.856 --> 00:12:07.516
prompting categories, macOS

00:12:07.786 --> 00:12:10.936
Mojave also restricts access to

00:12:10.936 --> 00:12:12.696
this privacy-sensitive user data

00:12:12.696 --> 00:12:12.976
as well.

00:12:19.686 --> 00:12:21.536
So the operating system will not

00:12:21.536 --> 00:12:24.006
prompt for authorization to

00:12:24.006 --> 00:12:25.396
access this data via the file

00:12:25.436 --> 00:12:25.766
system.

00:12:26.376 --> 00:12:28.236
Only the respective system apps

00:12:28.816 --> 00:12:30.566
or services have access to this

00:12:30.566 --> 00:12:33.066
data plus any apps that the user

00:12:33.066 --> 00:12:35.186
has preauthorized for system

00:12:35.186 --> 00:12:36.246
application data via the

00:12:36.286 --> 00:12:37.586
Security and Privacy Preference

00:12:37.626 --> 00:12:39.076
pane that we just saw.

00:12:39.716 --> 00:12:43.056
In addition, authorization may

00:12:43.056 --> 00:12:45.276
be preconfigured via MDM

00:12:45.276 --> 00:12:45.886
enrollment.

00:12:47.696 --> 00:12:49.946
Another way that this data can

00:12:49.946 --> 00:12:53.066
be accessed is via scripting.

00:12:53.066 --> 00:12:55.666
So Mail, Messages, and Safari

00:12:55.836 --> 00:12:57.376
are all scriptable, exposing

00:12:57.426 --> 00:12:58.306
some of their functionalities

00:12:58.306 --> 00:12:59.536
automation by other apps.

00:13:00.736 --> 00:13:01.976
Let's use Mail for an example.

00:13:02.696 --> 00:13:04.196
Mail's local database contains

00:13:04.196 --> 00:13:05.596
lots of personal information.

00:13:06.176 --> 00:13:07.466
It has the e-mail addresses of

00:13:07.466 --> 00:13:09.446
my friends, family, companies I

00:13:09.446 --> 00:13:10.136
do business with.

00:13:10.136 --> 00:13:11.126
And then there is the contents

00:13:11.126 --> 00:13:12.746
of the mail messages themselves

00:13:13.466 --> 00:13:15.056
-- my private correspondence, my

00:13:15.526 --> 00:13:16.866
shopping receipts, my shipping

00:13:16.866 --> 00:13:19.336
notifications, and my temporary

00:13:19.336 --> 00:13:20.926
passwords for services I forgot

00:13:20.956 --> 00:13:21.646
the password of.

00:13:22.206 --> 00:13:24.576
So the Mail app necessarily has

00:13:24.576 --> 00:13:25.936
access to its own local

00:13:25.936 --> 00:13:26.456
database.

00:13:27.306 --> 00:13:30.026
And in macOS Mojave, other apps

00:13:30.026 --> 00:13:31.066
do not.

00:13:32.256 --> 00:13:34.086
But since Mail can be scripted

00:13:34.226 --> 00:13:35.626
by other applications, we need

00:13:35.626 --> 00:13:37.206
to be sure that Mail only shares

00:13:37.206 --> 00:13:38.946
my personal information with my

00:13:38.946 --> 00:13:39.446
consent.

00:13:42.946 --> 00:13:43.956
Because we want the user to be

00:13:43.956 --> 00:13:45.286
in control of how apps they have

00:13:45.286 --> 00:13:46.586
trusted with access to their

00:13:46.586 --> 00:13:48.186
data act on behalf of other

00:13:48.186 --> 00:13:50.886
apps, macOS Mojave will include

00:13:50.886 --> 00:13:51.806
prompts like this one,

00:13:52.166 --> 00:13:53.946
authorizing apps to control

00:13:53.946 --> 00:13:54.456
other apps.

00:13:55.616 --> 00:13:57.026
Now the developer preview does

00:13:57.026 --> 00:13:58.096
not currently require

00:13:58.096 --> 00:13:59.556
authorization to automate other

00:13:59.556 --> 00:13:59.966
apps.

00:14:00.436 --> 00:14:01.796
But you can try this new

00:14:01.796 --> 00:14:03.216
protection out in a future

00:14:03.216 --> 00:14:03.616
preview.

00:14:04.116 --> 00:14:08.646
Only if the user consents will

00:14:08.646 --> 00:14:10.356
Mail accept being automated by

00:14:10.356 --> 00:14:11.616
other apps.

00:14:12.456 --> 00:14:14.516
So this applies to Apple events.

00:14:15.166 --> 00:14:18.436
But there are exceptions.

00:14:18.496 --> 00:14:19.726
And there are exceptions for

00:14:19.726 --> 00:14:21.676
Apple events that are not

00:14:21.676 --> 00:14:23.116
particularly privacy sensitive

00:14:23.736 --> 00:14:25.266
-- for example, opening

00:14:25.266 --> 00:14:26.176
documents in a default

00:14:26.176 --> 00:14:28.236
application, opening URLs in the

00:14:28.236 --> 00:14:29.526
default handler for that URL

00:14:29.616 --> 00:14:31.846
scheme, or opening other

00:14:31.846 --> 00:14:32.526
applications.

00:14:35.516 --> 00:14:38.416
Finally, macOS Mojave brings

00:14:38.416 --> 00:14:39.636
every one of my favorite

00:14:39.796 --> 00:14:41.166
features from iOS.

00:14:42.156 --> 00:14:43.536
User authorization for camera

00:14:43.536 --> 00:14:46.626
and microphone: I think I am

00:14:46.626 --> 00:14:48.326
going to decline this one.

00:14:51.056 --> 00:14:53.066
So apps can - that's not a link

00:14:53.066 --> 00:14:54.126
in [inaudible] - apps can

00:14:54.206 --> 00:14:55.266
enumerate the camera and

00:14:55.266 --> 00:14:56.966
microphone hardware without user

00:14:57.006 --> 00:14:57.466
consent.

00:14:58.046 --> 00:15:00.776
But initiating capture requires

00:15:00.776 --> 00:15:01.726
user authorization.

00:15:03.016 --> 00:15:04.706
And this applies to all devices

00:15:04.706 --> 00:15:05.736
supported by the built-in

00:15:05.736 --> 00:15:06.176
drivers.

00:15:09.096 --> 00:15:13.946
Now your app can query the

00:15:14.216 --> 00:15:15.316
authorization status.

00:15:15.966 --> 00:15:18.526
And this is useful if you'd like

00:15:18.526 --> 00:15:20.086
your app's user experience to

00:15:20.086 --> 00:15:21.386
reflect user's previous

00:15:21.796 --> 00:15:22.276
decisions.

00:15:23.356 --> 00:15:24.906
And this API provided by

00:15:24.906 --> 00:15:27.036
AVFoundation is the same as on

00:15:27.036 --> 00:15:27.226
iOS.

00:15:27.226 --> 00:15:29.956
And what's interesting is it

00:15:29.996 --> 00:15:31.366
doesn't just return a simple

00:15:31.366 --> 00:15:32.596
Boolean yes/no.

00:15:33.456 --> 00:15:34.416
It actually returns an

00:15:34.416 --> 00:15:36.006
enumeration of four possible

00:15:36.006 --> 00:15:36.456
values.

00:15:36.676 --> 00:15:39.196
And I'd like to drill down on

00:15:39.306 --> 00:15:40.576
those because I think these are

00:15:40.576 --> 00:15:41.116
relevant.

00:15:41.836 --> 00:15:44.166
The first one, notDetermined,

00:15:44.166 --> 00:15:45.456
means that the user has not

00:15:45.496 --> 00:15:47.376
previously been consented for

00:15:47.376 --> 00:15:49.016
your app to access the camera or

00:15:49.016 --> 00:15:49.636
microphone.

00:15:51.256 --> 00:15:53.166
So should your app try to access

00:15:53.536 --> 00:15:55.636
that hardware, the operating

00:15:55.636 --> 00:15:56.796
system will display a prompt at

00:15:56.796 --> 00:15:56.976
that time.

00:16:01.056 --> 00:16:03.516
The restricted value actually

00:16:03.516 --> 00:16:04.476
means that the user cannot

00:16:04.476 --> 00:16:06.606
consent, that the hardware --

00:16:06.786 --> 00:16:08.626
the camera or microphone -- has

00:16:08.626 --> 00:16:10.416
been disabled -- the parental

00:16:10.416 --> 00:16:11.686
controls or mobile device

00:16:11.686 --> 00:16:12.136
management.

00:16:12.656 --> 00:16:16.496
The denied value means the user

00:16:16.496 --> 00:16:18.166
has previously been prompted,

00:16:18.206 --> 00:16:21.306
but the user declined to give

00:16:21.306 --> 00:16:21.756
consent.

00:16:22.216 --> 00:16:23.536
They don't want your app to

00:16:23.536 --> 00:16:25.126
access that hardware.

00:16:25.666 --> 00:16:28.786
And finally, the authorized

00:16:28.786 --> 00:16:30.126
value means that the user has

00:16:30.176 --> 00:16:32.016
previously been prompted, and

00:16:32.016 --> 00:16:33.346
they did consent and your app

00:16:33.486 --> 00:16:34.976
can access that hardware.

00:16:40.576 --> 00:16:42.606
So we believe it's important to

00:16:42.606 --> 00:16:43.696
prompt in context.

00:16:44.416 --> 00:16:45.286
And this is the reason why the

00:16:45.286 --> 00:16:47.396
operating system currently

00:16:47.396 --> 00:16:48.656
displays the prompts kind of

00:16:48.656 --> 00:16:49.416
just in time.

00:16:49.416 --> 00:16:50.456
At the moment that your app

00:16:50.596 --> 00:16:52.716
accesses the microphone of the

00:16:52.716 --> 00:16:55.306
camera, the operating system

00:16:55.306 --> 00:16:56.496
will present a prompt when

00:16:56.496 --> 00:16:57.156
necessary.

00:16:57.506 --> 00:16:58.346
And we feel that that's the

00:16:58.346 --> 00:17:00.116
right time because the user has

00:17:00.116 --> 00:17:02.126
the most context to understand

00:17:02.126 --> 00:17:03.866
why your app is accessing the

00:17:03.866 --> 00:17:04.205
hardware.

00:17:04.746 --> 00:17:07.356
But there are times where your

00:17:07.356 --> 00:17:09.156
app might want more control over

00:17:09.156 --> 00:17:10.046
the timing of those

00:17:10.046 --> 00:17:11.036
authorization prompts.

00:17:11.526 --> 00:17:13.286
For example, if your app opens a

00:17:13.286 --> 00:17:14.846
new window, and in that window

00:17:14.846 --> 00:17:16.986
displays frames from the camera

00:17:17.195 --> 00:17:19.435
or a visualization of the audio

00:17:19.606 --> 00:17:21.566
from the microphone, you might

00:17:21.566 --> 00:17:22.726
want to avoid displaying an

00:17:22.726 --> 00:17:24.046
empty window if the user

00:17:24.046 --> 00:17:26.306
declines authorization -- in

00:17:26.306 --> 00:17:27.445
which case it's better to prompt

00:17:27.726 --> 00:17:28.976
before opening the window.

00:17:29.946 --> 00:17:32.146
So AVFoundation provides this

00:17:32.146 --> 00:17:35.146
API so that you can preflight

00:17:35.146 --> 00:17:36.036
that authorization.

00:17:36.596 --> 00:17:39.416
And I'd like to call out that

00:17:39.416 --> 00:17:40.656
this API is actually

00:17:40.656 --> 00:17:41.136
asynchronous.

00:17:41.416 --> 00:17:43.816
It takes a block with - that is

00:17:43.876 --> 00:17:46.366
called with a Boolean value of

00:17:46.366 --> 00:17:47.956
whether your app has access or

00:17:47.956 --> 00:17:48.236
not.

00:17:48.276 --> 00:17:49.066
So this is a little bit

00:17:49.066 --> 00:17:50.046
different than the enumeration

00:17:50.046 --> 00:17:50.736
that we just saw.

00:17:52.216 --> 00:17:53.526
That block may be invoked

00:17:53.636 --> 00:17:55.236
immediately when you make - when

00:17:55.236 --> 00:17:56.456
your app makes this call.

00:17:56.656 --> 00:17:57.606
For example, if the user has

00:17:57.686 --> 00:17:59.756
previously already consented or

00:17:59.756 --> 00:18:01.766
denied access, the operating

00:18:01.766 --> 00:18:02.806
system already knows that answer

00:18:02.806 --> 00:18:04.706
and can immediately invoke the

00:18:04.706 --> 00:18:05.656
block telling you what that

00:18:05.656 --> 00:18:06.166
answer is.

00:18:06.636 --> 00:18:09.216
Similarly, if the parental

00:18:10.126 --> 00:18:13.836
controls or MDM server has made

00:18:13.836 --> 00:18:15.866
that hardware unavailable, the

00:18:15.866 --> 00:18:17.246
callback is immediately invoked

00:18:17.246 --> 00:18:19.516
with a Boolean value of fault.

00:18:22.706 --> 00:18:24.586
But it's also possible that this

00:18:24.586 --> 00:18:26.306
callback will be invoked later

00:18:26.966 --> 00:18:29.106
-- possibly much later -- as a

00:18:29.106 --> 00:18:30.896
prompt is displayed while we are

00:18:30.896 --> 00:18:31.956
waiting for - and then only when

00:18:31.956 --> 00:18:34.076
the user makes their decision

00:18:34.326 --> 00:18:35.486
will this callback actually be

00:18:35.486 --> 00:18:35.816
invoked.

00:18:36.766 --> 00:18:38.446
At that time we will know the

00:18:38.446 --> 00:18:39.296
Boolean "Yes your app has

00:18:39.296 --> 00:18:39.976
access" or "No it doesn't."

00:18:44.746 --> 00:18:46.626
So your app can include purpose

00:18:46.656 --> 00:18:47.976
text for both the camera and

00:18:47.976 --> 00:18:48.526
microphone.

00:18:49.426 --> 00:18:50.576
And as with the other purpose

00:18:50.576 --> 00:18:53.076
strings, these are required for

00:18:53.076 --> 00:18:54.626
apps linked against the 10.14

00:18:54.786 --> 00:18:58.486
SDK, and optional and certainly

00:18:58.486 --> 00:18:59.396
encouraged because they are

00:18:59.396 --> 00:19:00.596
informative for apps linked

00:19:00.596 --> 00:19:01.666
against earlier SDKs.

00:19:05.126 --> 00:19:06.586
So to recap: Here is an overview

00:19:06.586 --> 00:19:08.026
of all the topics that we just

00:19:08.026 --> 00:19:09.106
looked at.

00:19:11.176 --> 00:19:14.346
macOS Mojave does not solicit

00:19:14.346 --> 00:19:17.136
user approval for access to this

00:19:17.136 --> 00:19:17.646
user data.

00:19:18.356 --> 00:19:20.116
Only the respective system apps

00:19:20.506 --> 00:19:21.446
and apps the user has

00:19:21.446 --> 00:19:22.916
preapproved via the Security and

00:19:22.916 --> 00:19:24.906
Privacy Preference pane, or

00:19:24.906 --> 00:19:26.846
preconfigured the parental

00:19:26.846 --> 00:19:29.496
controls or MDM are permitted to

00:19:29.496 --> 00:19:30.476
access this data.

00:19:31.016 --> 00:19:34.916
And here are the categories of

00:19:34.916 --> 00:19:36.566
user data and devices the apps

00:19:36.566 --> 00:19:38.546
may access with user consent.

00:19:39.196 --> 00:19:40.786
Now the operating system --

00:19:40.786 --> 00:19:43.096
macOS -- presents the

00:19:43.246 --> 00:19:44.896
authorization prompt to the user

00:19:45.166 --> 00:19:46.846
the first time the app accesses

00:19:47.086 --> 00:19:47.526
this data.

00:19:47.526 --> 00:19:49.686
And then it remembers the user's

00:19:49.686 --> 00:19:50.136
decision.

00:19:50.446 --> 00:19:51.536
And this is great for users

00:19:51.576 --> 00:19:53.796
because then they only see one

00:19:53.796 --> 00:19:55.956
prompt per app per piece of

00:19:55.956 --> 00:19:56.166
data.

00:19:56.166 --> 00:19:57.356
They don't get multiple prompts.

00:19:58.246 --> 00:20:00.586
But as a developer, you may

00:20:00.846 --> 00:20:01.806
actually want to get

00:20:01.806 --> 00:20:03.716
pre-prompted so that you can

00:20:03.716 --> 00:20:05.876
test how your app behaves while

00:20:05.876 --> 00:20:08.586
the prompt is displayed, if the

00:20:08.586 --> 00:20:11.386
user consents, and if the user

00:20:11.786 --> 00:20:12.906
declines authorization.

00:20:13.826 --> 00:20:15.246
So for that purpose macOS

00:20:15.376 --> 00:20:17.376
provides a tool, called tccutil,

00:20:18.396 --> 00:20:19.666
that you can use to make the

00:20:19.746 --> 00:20:22.596
operating system forget your

00:20:22.596 --> 00:20:23.876
previous answers to consent

00:20:24.096 --> 00:20:24.436
prompts.

00:20:25.506 --> 00:20:26.626
So the next time that you run

00:20:26.626 --> 00:20:28.676
your app, and your app requires

00:20:28.676 --> 00:20:30.626
authorization, the operating

00:20:30.626 --> 00:20:31.606
system will re-prompt.

00:20:32.776 --> 00:20:33.776
So this tool is provided for

00:20:33.776 --> 00:20:34.966
testing purposes only.

00:20:35.726 --> 00:20:37.406
Your app should not invoke this

00:20:37.406 --> 00:20:38.736
tool automatically, even in

00:20:38.736 --> 00:20:39.386
debug builds.

00:20:39.386 --> 00:20:42.576
So in summary, ensure your

00:20:43.296 --> 00:20:44.806
approval prompts are presented

00:20:44.806 --> 00:20:45.436
in context.

00:20:46.046 --> 00:20:46.996
This is important so that the

00:20:46.996 --> 00:20:48.716
user understands why they are

00:20:48.716 --> 00:20:49.476
being prompted.

00:20:50.966 --> 00:20:53.566
And add Info.plist keys so the

00:20:53.566 --> 00:20:55.726
user understands what your app

00:20:55.726 --> 00:20:57.906
is going to do with the data and

00:20:57.906 --> 00:20:59.006
what functionality will be

00:20:59.006 --> 00:21:01.056
unavailable if they decline.

00:21:02.506 --> 00:21:04.166
Access approval-gated resources

00:21:04.166 --> 00:21:05.426
from threads other than the main

00:21:05.426 --> 00:21:06.806
thread so that your app doesn't

00:21:06.806 --> 00:21:08.056
appear to be hung while waiting

00:21:08.096 --> 00:21:08.696
for approval.

00:21:09.656 --> 00:21:11.166
And gracefully handle failure to

00:21:11.166 --> 00:21:12.926
access approval-gated resources

00:21:13.216 --> 00:21:14.506
in the event that the user does

00:21:14.566 --> 00:21:15.456
decline.

00:21:15.986 --> 00:21:18.796
But finally, when the user does

00:21:19.096 --> 00:21:21.126
consent, be responsible with the

00:21:21.126 --> 00:21:22.046
user's personal data.

00:21:22.606 --> 00:21:25.446
So these are the new user data

00:21:25.446 --> 00:21:26.776
protections available in macOS

00:21:26.776 --> 00:21:27.216
Mojave.

00:21:27.766 --> 00:21:28.946
Thank you, and I will turn the

00:21:28.946 --> 00:21:30.116
stage back to over to Pierre to

00:21:30.116 --> 00:21:31.366
tell you about the enhanced

00:21:31.366 --> 00:21:31.976
runtime protections.

00:21:32.516 --> 00:21:38.396
[ Applause ]

00:21:38.896 --> 00:21:39.396
>> Thanks Kelly.

00:21:39.966 --> 00:21:42.516
So in the few years since the

00:21:42.516 --> 00:21:43.676
maturity of system integrity of

00:21:43.676 --> 00:21:45.526
protection to the Mac, a lot of

00:21:45.526 --> 00:21:47.036
you have asked us what you could

00:21:47.036 --> 00:21:49.126
do in your apps to adopt some of

00:21:49.126 --> 00:21:50.566
the runtime protections that we

00:21:50.566 --> 00:21:51.356
afford to the rest of the

00:21:51.356 --> 00:21:51.786
system.

00:21:53.026 --> 00:21:54.246
Until now, there wasn't really a

00:21:54.246 --> 00:21:56.346
good story for this.

00:21:56.836 --> 00:21:58.896
Today, we are introducing a new

00:21:58.896 --> 00:22:00.146
set of runtime protections that

00:22:00.146 --> 00:22:01.656
you can easily adopt within your

00:22:02.456 --> 00:22:02.526
app.

00:22:03.486 --> 00:22:05.196
It is a new opt-in mechanism

00:22:05.446 --> 00:22:06.556
that is available within the

00:22:06.556 --> 00:22:07.946
10.14 SDK.

00:22:07.946 --> 00:22:10.716
It effectively sets a new

00:22:10.716 --> 00:22:12.816
security baseline for your app

00:22:13.276 --> 00:22:14.496
by enabling the full set of

00:22:14.496 --> 00:22:15.496
runtime protections that the

00:22:15.546 --> 00:22:18.206
system provides, and requiring

00:22:18.206 --> 00:22:20.326
you - requires you to opt to

00:22:20.326 --> 00:22:22.436
back into more risky behaviors

00:22:22.436 --> 00:22:22.826
or ideas.

00:22:23.436 --> 00:22:26.376
It is easily configurable with a

00:22:26.376 --> 00:22:27.516
new set of unrestricted

00:22:27.516 --> 00:22:28.146
entitlements.

00:22:28.706 --> 00:22:30.656
Unrestricted here means that

00:22:31.026 --> 00:22:32.466
these entitlements are available

00:22:32.466 --> 00:22:34.266
to everybody without any prior

00:22:34.266 --> 00:22:34.666
approval.

00:22:35.236 --> 00:22:38.326
It can be easily configured from

00:22:38.326 --> 00:22:39.616
within the Xcode UI.

00:22:39.616 --> 00:22:42.596
And then finally, it is fully

00:22:42.596 --> 00:22:44.456
backward compatible if you need

00:22:44.456 --> 00:22:45.716
to be able to deploy your app to

00:22:45.716 --> 00:22:48.386
older releases of macOS and its

00:22:48.386 --> 00:22:48.836
version.

00:22:49.336 --> 00:22:51.156
So as we add more features to

00:22:51.156 --> 00:22:52.246
this one time in the future,

00:22:52.506 --> 00:22:53.636
apps that have already shipped

00:22:53.886 --> 00:22:54.746
will not be impacted.

00:22:55.836 --> 00:22:57.156
Now let's see what - let's talk

00:22:57.156 --> 00:22:58.036
about these new protections.

00:22:59.236 --> 00:23:02.086
First off, code signing: When

00:23:02.086 --> 00:23:03.646
you opt into this new runtime,

00:23:04.016 --> 00:23:05.506
the system will enforce that

00:23:05.876 --> 00:23:07.846
every single executable page

00:23:07.946 --> 00:23:09.746
within your address space must

00:23:09.746 --> 00:23:11.176
be backed by the original code

00:23:11.176 --> 00:23:12.636
signature that shipped with your

00:23:13.296 --> 00:23:13.366
app.

00:23:14.586 --> 00:23:17.336
It is a fine behavior for most

00:23:17.336 --> 00:23:17.946
apps out there.

00:23:18.046 --> 00:23:18.866
Of course it might be

00:23:18.866 --> 00:23:20.546
undesirable in some of these

00:23:20.546 --> 00:23:20.766
cases.

00:23:20.956 --> 00:23:21.596
So let's see how we can

00:23:21.596 --> 00:23:22.246
configure this.

00:23:22.746 --> 00:23:25.136
Let's say, for example, that

00:23:25.136 --> 00:23:27.206
your app has a scripting runtime

00:23:27.336 --> 00:23:28.086
for which you have

00:23:28.086 --> 00:23:29.326
high-performance requirements --

00:23:29.996 --> 00:23:31.346
in which case, you'll most

00:23:31.346 --> 00:23:33.476
likely use JIT compiled code if

00:23:33.576 --> 00:23:34.606
you want to execute a runtime.

00:23:35.586 --> 00:23:37.826
With this, you can use the first

00:23:37.826 --> 00:23:38.816
entitlement in this list.

00:23:39.596 --> 00:23:40.666
It gives you access to the new

00:23:40.666 --> 00:23:43.286
MAP JIT flag in the MMAP system

00:23:43.286 --> 00:23:45.046
call, which allows you to create

00:23:45.046 --> 00:23:46.586
what we call JIT regions, which

00:23:46.586 --> 00:23:48.406
are memory regions that are

00:23:48.406 --> 00:23:50.686
readable, writable, and

00:23:51.436 --> 00:23:51.856
executable.

00:23:52.306 --> 00:23:54.596
And if you have a poliacre

00:23:54.596 --> 00:23:54.976
[phonetic] system,

00:23:55.086 --> 00:23:56.926
where you might expect to be

00:23:56.926 --> 00:23:58.936
able to execute load plug-ins

00:23:59.256 --> 00:24:01.246
that are not properly signed or

00:24:01.246 --> 00:24:03.626
not signed at all, then you have

00:24:03.676 --> 00:24:05.096
to use the second entitlement in

00:24:05.096 --> 00:24:05.456
this list.

00:24:06.886 --> 00:24:09.016
And finally, if your app needs

00:24:09.016 --> 00:24:10.626
the ability to modify its own

00:24:10.626 --> 00:24:11.816
code pages at runtime,

00:24:12.286 --> 00:24:14.056
effectively breaking its own

00:24:14.056 --> 00:24:15.896
code signature, then you will

00:24:15.896 --> 00:24:18.616
have to use the last entitlement

00:24:18.846 --> 00:24:19.376
in the system.

00:24:20.226 --> 00:24:21.766
And note that the vast majority

00:24:21.766 --> 00:24:23.496
of apps should not need that

00:24:23.496 --> 00:24:24.146
functionality.

00:24:24.606 --> 00:24:28.756
But we still want it to operate

00:24:28.786 --> 00:24:28.936
anyway.

00:24:28.936 --> 00:24:31.686
Next, library validation: When

00:24:31.686 --> 00:24:32.986
you opt into the new runtime,

00:24:33.536 --> 00:24:35.216
the system will enforce the code

00:24:35.216 --> 00:24:37.296
signature of every library,

00:24:37.476 --> 00:24:39.546
framework, and plug-in that you

00:24:39.546 --> 00:24:41.706
dynamically load at runtime, and

00:24:41.706 --> 00:24:44.666
by default will enforce that.

00:24:45.366 --> 00:24:47.316
These modules have - these

00:24:47.316 --> 00:24:48.606
objects have to be signed by

00:24:48.606 --> 00:24:49.966
Apple and shipping as part of

00:24:49.966 --> 00:24:52.256
the OS -- or that they be signed

00:24:52.256 --> 00:24:53.496
with the same Team ID as the

00:24:53.496 --> 00:24:55.086
main executable that ships with

00:24:55.086 --> 00:24:55.376
your app.

00:24:56.306 --> 00:24:57.866
If you have a plug-in ecosystem

00:24:57.866 --> 00:24:59.646
here and you need the ability to

00:24:59.646 --> 00:25:02.936
load objects that are signed by

00:25:02.936 --> 00:25:05.016
another team, you can use this

00:25:05.016 --> 00:25:06.496
entitlement to relax that

00:25:06.496 --> 00:25:06.916
policy.

00:25:08.096 --> 00:25:09.496
Note that it still requires you

00:25:09.496 --> 00:25:11.576
to load signed code; it just can

00:25:11.576 --> 00:25:12.766
be signed by other teams.

00:25:13.016 --> 00:25:14.516
If you need the ability to load

00:25:14.936 --> 00:25:16.796
fully unsigned code, you will

00:25:16.796 --> 00:25:18.156
need to use one of the

00:25:18.156 --> 00:25:19.926
entitlements from the previous

00:25:21.656 --> 00:25:21.816
slide.

00:25:21.986 --> 00:25:24.626
Next, debugging: Apps that are

00:25:24.726 --> 00:25:26.326
opting into the new runtime

00:25:26.626 --> 00:25:29.746
cannot be debugged and cannot

00:25:29.746 --> 00:25:30.706
debug other apps.

00:25:31.806 --> 00:25:33.116
If you need the ability to debug

00:25:33.116 --> 00:25:34.346
your app while it's opting into

00:25:34.346 --> 00:25:35.846
the new runtime, you can use the

00:25:35.846 --> 00:25:37.206
get-task-allow entitlement.

00:25:37.706 --> 00:25:39.716
Note that Xcode will

00:25:39.716 --> 00:25:40.736
automatically add this

00:25:40.736 --> 00:25:42.736
entitlement for you when you hit

00:25:42.926 --> 00:25:44.356
Build and Run from Xcode.

00:25:44.356 --> 00:25:45.566
So if you use Xcode as part of

00:25:45.566 --> 00:25:46.936
your local development workflow,

00:25:47.396 --> 00:25:48.126
then you don't need to do

00:25:48.126 --> 00:25:48.486
anything.

00:25:49.076 --> 00:25:50.516
Executable will also make sure

00:25:50.516 --> 00:25:51.966
that the entitlement is properly

00:25:51.966 --> 00:25:53.016
stripped from your signature

00:25:53.016 --> 00:25:54.646
when you do an export for

00:25:54.646 --> 00:25:55.166
distribution.

00:25:55.836 --> 00:25:57.406
If you don't use Xcode, make

00:25:57.406 --> 00:25:58.376
sure you don't ship your app

00:25:58.376 --> 00:25:59.696
with this entitlement unless you

00:25:59.696 --> 00:26:00.686
really need it.

00:26:01.296 --> 00:26:02.746
If your app is actually a

00:26:02.746 --> 00:26:04.296
debugger, then you will use the

00:26:04.296 --> 00:26:05.576
second entitlement in the list.

00:26:06.466 --> 00:26:07.776
And then finally, in the few

00:26:07.776 --> 00:26:09.176
rare occasions where your app

00:26:09.766 --> 00:26:11.476
needs to rely on the DYLD

00:26:11.476 --> 00:26:12.736
environment variables to modify

00:26:12.736 --> 00:26:12.976
its BFU [phonetic]

00:26:13.096 --> 00:26:15.756
at runtime, then you can use the

00:26:15.756 --> 00:26:19.856
last entitlement in this list.

00:26:19.856 --> 00:26:20.766
And finally, your resource

00:26:20.766 --> 00:26:23.636
access: This runtime requires

00:26:23.636 --> 00:26:25.356
you to be transparent about the

00:26:25.356 --> 00:26:27.196
kind of data classing that your

00:26:27.196 --> 00:26:28.246
app needs to access.

00:26:28.886 --> 00:26:30.176
So if your app attempts to

00:26:30.176 --> 00:26:32.736
access any data that is part of

00:26:32.736 --> 00:26:34.216
one of the protected categories

00:26:34.216 --> 00:26:35.426
that Kelly described in his

00:26:35.526 --> 00:26:37.616
previous section, and you don't

00:26:37.616 --> 00:26:38.856
have the appropriate entitlement

00:26:38.906 --> 00:26:40.296
signed in your app, then the

00:26:40.296 --> 00:26:41.346
system will automatically

00:26:41.346 --> 00:26:42.446
terminate it.

00:26:44.096 --> 00:26:45.786
We have entitlements that map to

00:26:45.786 --> 00:26:47.156
every single category that Kelly

00:26:47.156 --> 00:26:47.646
described.

00:26:48.906 --> 00:26:50.986
But remember that just adding

00:26:50.986 --> 00:26:52.256
this entitlement is not enough.

00:26:53.616 --> 00:26:54.656
You also need to add a purpose

00:26:54.656 --> 00:26:55.436
string if you are linking

00:26:55.436 --> 00:26:56.586
against the 10.14 SDK.

00:26:56.586 --> 00:26:58.876
And finally, it does not

00:26:58.876 --> 00:27:00.306
automatically grant you access

00:27:00.356 --> 00:27:00.746
to the data.

00:27:01.356 --> 00:27:02.726
The user is still in control of

00:27:02.726 --> 00:27:03.416
the final decision.

00:27:03.966 --> 00:27:07.276
So how do we enable this?

00:27:07.396 --> 00:27:09.966
Well, from Xcode you can go into

00:27:09.966 --> 00:27:12.296
Target setting in the

00:27:12.296 --> 00:27:14.006
Tap-ability tab.

00:27:15.096 --> 00:27:16.426
There you will find a new hard

00:27:16.426 --> 00:27:18.566
and Runtime section, which you

00:27:18.566 --> 00:27:18.976
can enable.

00:27:20.266 --> 00:27:21.136
We have checkboxes for every

00:27:21.136 --> 00:27:22.346
single of the entitlements that

00:27:22.346 --> 00:27:22.976
are previously described.

00:27:29.686 --> 00:27:31.306
And then a few more comportable

00:27:31.306 --> 00:27:32.606
[phonetic] using the using the

00:27:32.606 --> 00:27:34.486
Command Line interface, then we

00:27:34.486 --> 00:27:36.576
can use the new runtime option

00:27:37.016 --> 00:27:37.936
in the codesign command.

00:27:38.506 --> 00:27:40.966
And in order for you to validate

00:27:40.966 --> 00:27:42.146
that you have properly enrolled

00:27:42.456 --> 00:27:43.766
and opted into this new runtime,

00:27:43.866 --> 00:27:44.806
you can use the dash-dash

00:27:44.836 --> 00:27:45.566
display option.

00:27:46.096 --> 00:27:48.066
And here, the things to look for

00:27:48.066 --> 00:27:51.566
are the runtime flag as well as

00:27:52.436 --> 00:27:52.976
the runtime version.

00:27:57.266 --> 00:27:57.546
All right.

00:27:57.856 --> 00:27:58.726
Now let's look at the final

00:27:58.726 --> 00:28:00.376
piece of that puzzle and talk

00:28:00.376 --> 00:28:01.346
about notarized apps.

00:28:01.696 --> 00:28:01.846
Garrett?

00:28:02.516 --> 00:28:06.716
[ Applause ]

00:28:07.216 --> 00:28:07.836
>> Thanks Pierre.

00:28:09.186 --> 00:28:09.786
Hi everyone.

00:28:10.206 --> 00:28:11.516
I'm Garrett, and I work on the

00:28:11.516 --> 00:28:13.686
Trusted Execution Team here at

00:28:14.646 --> 00:28:14.786
Apple.

00:28:14.966 --> 00:28:16.596
Now my colleague earlier, Kelly,

00:28:16.966 --> 00:28:18.476
talked about one way we help

00:28:18.476 --> 00:28:19.696
protect users from malicious

00:28:19.696 --> 00:28:21.586
software by ensuring the user is

00:28:21.586 --> 00:28:22.856
always in control of their

00:28:22.856 --> 00:28:23.576
private data.

00:28:24.356 --> 00:28:25.436
I'd like to talk about another

00:28:25.436 --> 00:28:26.516
way that we protect users from

00:28:26.516 --> 00:28:27.256
malicious software.

00:28:27.836 --> 00:28:29.956
And that's by identifying and

00:28:29.956 --> 00:28:31.406
blocking malicious software so

00:28:31.406 --> 00:28:32.246
it doesn't have the chance to

00:28:32.246 --> 00:28:32.506
run.

00:28:33.126 --> 00:28:35.786
Now the Mac App Store is a great

00:28:35.786 --> 00:28:37.396
place for users to find and

00:28:37.396 --> 00:28:38.376
download new software.

00:28:38.376 --> 00:28:40.226
And people can confidently

00:28:40.226 --> 00:28:42.146
install apps knowing that Apple

00:28:42.146 --> 00:28:44.306
has taken steps to ensure they

00:28:44.306 --> 00:28:45.036
are not harmful.

00:28:45.616 --> 00:28:47.936
Now the Mac App Store is getting

00:28:47.936 --> 00:28:49.056
a lot of attention this year,

00:28:49.376 --> 00:28:50.046
and that's great.

00:28:50.046 --> 00:28:51.686
But we also understand that some

00:28:51.686 --> 00:28:53.476
developers need the flexibility

00:28:53.626 --> 00:28:54.886
of the Developer ID program.

00:28:56.306 --> 00:28:57.876
Together, Gatekeeper and

00:28:57.876 --> 00:28:59.276
Developer ID have done a great

00:28:59.276 --> 00:29:00.716
job of preventing widespread

00:29:00.716 --> 00:29:02.016
outbreaks of malicious software.

00:29:02.686 --> 00:29:04.096
And today, we are making the

00:29:04.096 --> 00:29:06.046
Developer ID program even safer

00:29:06.486 --> 00:29:07.796
with the introduction of app

00:29:07.846 --> 00:29:08.606
notarization.

00:29:09.186 --> 00:29:11.756
Now app notarization is a

00:29:11.756 --> 00:29:13.256
process designed to help

00:29:13.256 --> 00:29:15.096
identify and block malicious

00:29:15.096 --> 00:29:17.046
software before distribution

00:29:17.726 --> 00:29:19.056
while still maintaining all the

00:29:19.056 --> 00:29:20.746
flexibility of the Developer ID

00:29:20.746 --> 00:29:21.186
program.

00:29:22.196 --> 00:29:23.466
That means that you can continue

00:29:23.466 --> 00:29:24.766
to ship your apps the way you do

00:29:24.766 --> 00:29:26.636
today with the same capabilities

00:29:26.636 --> 00:29:27.326
that they have today.

00:29:27.856 --> 00:29:29.646
And the key to this is the

00:29:29.646 --> 00:29:31.276
Develop ID notary service.

00:29:31.846 --> 00:29:35.096
Now the notary service is an

00:29:35.096 --> 00:29:37.236
automated service that performs

00:29:37.236 --> 00:29:39.756
security checks of Developer ID

00:29:39.756 --> 00:29:40.566
signed content.

00:29:41.476 --> 00:29:43.006
It's an optional extension to

00:29:43.006 --> 00:29:44.436
the Developer ID program, and

00:29:44.736 --> 00:29:48.056
it's not an app review.

00:29:48.206 --> 00:29:50.376
Starting today, developers can

00:29:50.526 --> 00:29:51.566
start uploading

00:29:51.776 --> 00:29:53.566
distribution-ready content to

00:29:53.566 --> 00:29:54.456
the notary service.

00:29:55.096 --> 00:29:56.016
And assuming that those

00:29:56.016 --> 00:29:57.636
applications, installer

00:29:57.636 --> 00:30:00.076
packages, and disk images don't

00:30:00.076 --> 00:30:01.446
contain any malicious software,

00:30:02.006 --> 00:30:03.316
the notary service will issue a

00:30:03.316 --> 00:30:05.346
notarization ticket back to your

00:30:05.346 --> 00:30:05.946
application.

00:30:07.036 --> 00:30:08.636
That ticket can be stapled and

00:30:08.636 --> 00:30:09.916
then distributed alongside your

00:30:09.916 --> 00:30:10.516
application.

00:30:10.816 --> 00:30:12.076
And when Gatekeeper launches a

00:30:12.076 --> 00:30:13.176
notarized app for the first

00:30:13.176 --> 00:30:14.776
time, it can verify the

00:30:14.776 --> 00:30:16.376
notarization and provide a new

00:30:16.376 --> 00:30:17.446
first-launch experience.

00:30:18.106 --> 00:30:20.816
Now your development workflow

00:30:20.816 --> 00:30:22.386
prior to distribution is

00:30:22.386 --> 00:30:22.976
completely unchanged.

00:30:27.586 --> 00:30:28.466
Now you may have heard, in the

00:30:28.466 --> 00:30:29.636
State of the Union, that this

00:30:29.636 --> 00:30:30.966
process will be required in the

00:30:30.966 --> 00:30:31.356
future.

00:30:31.826 --> 00:30:33.596
And while that's true, for now

00:30:33.866 --> 00:30:35.096
notarization is completely

00:30:35.096 --> 00:30:36.246
optional while we roll the

00:30:36.246 --> 00:30:37.466
service out and listen to

00:30:37.466 --> 00:30:37.886
feedback.

00:30:40.256 --> 00:30:41.776
Before we move on, I want to

00:30:41.776 --> 00:30:43.386
make one important point.

00:30:43.976 --> 00:30:45.586
This is not an app review.

00:30:46.486 --> 00:30:47.846
The notary service is simply

00:30:47.846 --> 00:30:49.126
performing a set of security

00:30:49.126 --> 00:30:50.586
checks to ensure that your

00:30:50.586 --> 00:30:51.826
content can be distributed

00:30:51.826 --> 00:30:52.346
safely.

00:30:52.926 --> 00:30:56.416
So what does this actually look

00:30:56.416 --> 00:30:57.196
like for your development

00:30:57.196 --> 00:30:57.536
workflow?

00:30:58.406 --> 00:30:59.686
Well here's a high level and

00:30:59.686 --> 00:31:01.176
simplified overview of the

00:31:01.176 --> 00:31:02.126
development process.

00:31:03.486 --> 00:31:05.236
Over on the left, a developer

00:31:05.236 --> 00:31:07.036
iterates on an application local

00:31:07.036 --> 00:31:08.556
to their system building

00:31:08.556 --> 00:31:10.806
features, debugging, and signing

00:31:10.806 --> 00:31:11.666
with their Mac Developer

00:31:11.666 --> 00:31:12.126
certificate.

00:31:13.226 --> 00:31:14.446
When the application is ready

00:31:14.446 --> 00:31:17.016
for release, it's signed with

00:31:17.016 --> 00:31:18.246
the Developer ID certificate,

00:31:18.246 --> 00:31:19.836
and a final test task can be

00:31:19.836 --> 00:31:20.256
performed.

00:31:21.396 --> 00:31:23.196
After that, the content can be

00:31:23.196 --> 00:31:24.656
distributed directly to users --

00:31:24.896 --> 00:31:26.336
who can run it -- or Gatekeeper

00:31:26.336 --> 00:31:27.356
can verify that it wasn't

00:31:27.356 --> 00:31:29.066
tampered with; and the user gets

00:31:29.066 --> 00:31:29.896
to run your application.

00:31:30.846 --> 00:31:32.136
For this app to be notarized,

00:31:32.386 --> 00:31:33.696
only one additional step is

00:31:33.696 --> 00:31:34.146
required.

00:31:35.616 --> 00:31:37.036
You continue to develop locally,

00:31:37.306 --> 00:31:38.116
just like before.

00:31:39.166 --> 00:31:40.156
And once you sign it with your

00:31:40.156 --> 00:31:42.666
Develop ID certificate, a copy

00:31:42.666 --> 00:31:43.696
can be uploaded to the Apple

00:31:43.696 --> 00:31:44.486
notary service.

00:31:45.256 --> 00:31:46.416
Assuming that the Developer ID

00:31:46.416 --> 00:31:47.736
content doesn't contain anything

00:31:47.736 --> 00:31:50.036
malicious, a ticket will be

00:31:50.036 --> 00:31:51.496
issued back that can be attached

00:31:51.786 --> 00:31:53.466
to the content through a process

00:31:53.466 --> 00:31:54.406
we call stapling.

00:31:54.936 --> 00:31:58.786
And then the stapled content can

00:31:58.786 --> 00:32:00.206
be distributed just like before.

00:32:00.956 --> 00:32:02.256
And when it ends up on a user's

00:32:02.256 --> 00:32:04.196
system, Gatekeeper will verify

00:32:04.196 --> 00:32:05.996
notarization and provide the new

00:32:05.996 --> 00:32:06.936
first-launch experience.

00:32:07.606 --> 00:32:11.796
Now because this is a highly

00:32:11.796 --> 00:32:13.396
automated process, we are

00:32:13.396 --> 00:32:15.046
targeting providing tickets back

00:32:15.296 --> 00:32:16.026
within an hour.

00:32:16.776 --> 00:32:17.916
But we'll be working to improve

00:32:17.916 --> 00:32:19.496
the speed and quality of the

00:32:19.496 --> 00:32:20.996
service as we roll it out.

00:32:22.356 --> 00:32:23.256
So let's talk a little more

00:32:23.256 --> 00:32:24.016
about those security

00:32:24.016 --> 00:32:24.876
requirements I mentioned

00:32:24.876 --> 00:32:25.226
earlier.

00:32:26.226 --> 00:32:29.016
Well, first and foremost, no

00:32:29.016 --> 00:32:29.906
malicious software.

00:32:30.646 --> 00:32:32.966
If the security check finds

00:32:32.966 --> 00:32:34.216
anything malicious inside of the

00:32:34.216 --> 00:32:35.706
Developer ID signed content, it

00:32:35.776 --> 00:32:36.746
will immediately create a

00:32:36.746 --> 00:32:37.946
special kind of ticket called a

00:32:37.946 --> 00:32:39.636
revocation ticket and

00:32:39.636 --> 00:32:40.486
immediately notify the

00:32:40.486 --> 00:32:40.906
developer.

00:32:42.156 --> 00:32:44.846
Second, all executables need to

00:32:44.846 --> 00:32:45.976
be properly code signed.

00:32:46.926 --> 00:32:47.976
And this is important to make

00:32:47.976 --> 00:32:49.356
sure that when the application

00:32:49.356 --> 00:32:50.656
ends up on a develop - on a

00:32:50.656 --> 00:32:52.646
user's system, Gatekeeper can

00:32:52.646 --> 00:32:53.976
verify that it wasn't tampered

00:32:53.976 --> 00:32:54.176
with.

00:32:54.666 --> 00:32:58.466
And finally, all binaries must

00:32:58.466 --> 00:32:59.786
opt into the enhanced runtime

00:32:59.786 --> 00:33:01.446
that Pierre described earlier so

00:33:01.446 --> 00:33:02.376
they can benefit from the

00:33:02.376 --> 00:33:03.426
additional protections of the

00:33:03.426 --> 00:33:04.906
operating system without

00:33:04.906 --> 00:33:06.046
reducing their capabilities.

00:33:07.586 --> 00:33:08.756
So assuming that you have an app

00:33:08.796 --> 00:33:10.036
that's ready for notarization,

00:33:10.536 --> 00:33:11.596
how do you actually go about

00:33:11.596 --> 00:33:12.106
uploading it?

00:33:12.826 --> 00:33:14.136
Well, it's built into the

00:33:14.166 --> 00:33:15.256
Archive and Distribution

00:33:15.256 --> 00:33:16.426
workflow inside of Xcode.

00:33:16.816 --> 00:33:17.906
So if you already use that, you

00:33:17.906 --> 00:33:18.766
are pretty much set.

00:33:19.816 --> 00:33:20.926
Here you can see the Archive

00:33:20.976 --> 00:33:21.856
pane of the Organizer.

00:33:22.196 --> 00:33:23.526
And I have the Watch Grass Grow

00:33:23.526 --> 00:33:24.556
app already archived.

00:33:25.316 --> 00:33:26.486
So I click the Distribute App

00:33:26.486 --> 00:33:27.226
button on the right.

00:33:27.816 --> 00:33:30.676
I'll be taken to my distribution

00:33:30.676 --> 00:33:31.056
options.

00:33:31.906 --> 00:33:33.046
I'll continue to distribute it

00:33:33.046 --> 00:33:34.406
via Developer ID just like I

00:33:34.406 --> 00:33:35.156
have in the past.

00:33:35.936 --> 00:33:36.866
And when I select that, I'll

00:33:36.866 --> 00:33:38.386
have a new option -- to upload

00:33:38.386 --> 00:33:39.926
to the notary service.

00:33:40.456 --> 00:33:41.966
Clicking Next will show a

00:33:41.966 --> 00:33:43.526
progress bar while the Developer

00:33:43.526 --> 00:33:44.846
ID content is uploaded to the

00:33:44.846 --> 00:33:45.596
notary service.

00:33:46.196 --> 00:33:47.156
And as soon as the upload is

00:33:47.156 --> 00:33:49.376
complete, you'll be notified

00:33:49.376 --> 00:33:50.926
that notarization has started.

00:33:51.446 --> 00:33:54.186
From here you can export a copy

00:33:54.186 --> 00:33:55.426
of your app to perform any local

00:33:55.426 --> 00:33:56.286
testing that you might want to

00:33:56.286 --> 00:33:56.926
do in parallel.

00:33:56.926 --> 00:33:59.346
And if you click Close, you'll

00:33:59.346 --> 00:34:00.466
be taken back to the Archive

00:34:00.466 --> 00:34:02.616
pane; and you can see that the

00:34:02.616 --> 00:34:04.596
status has switched to

00:34:05.256 --> 00:34:05.496
Processing.

00:34:05.566 --> 00:34:07.526
When notarization is complete, a

00:34:09.196 --> 00:34:10.856
push notification will arrive

00:34:10.856 --> 00:34:12.596
and Xcode will notify you that

00:34:12.596 --> 00:34:13.565
notarization is done.

00:34:14.806 --> 00:34:16.295
Xcode will then automatically

00:34:16.295 --> 00:34:18.235
download the ticket, staple it

00:34:18.235 --> 00:34:18.926
to your content.

00:34:19.266 --> 00:34:20.315
So the next time you go into the

00:34:20.315 --> 00:34:22.196
Archive pane and click Export,

00:34:22.496 --> 00:34:23.686
you'll already have a stapled

00:34:23.686 --> 00:34:25.156
Developer ID notarized

00:34:25.576 --> 00:34:26.146
application.

00:34:26.676 --> 00:34:28.726
And when the user launches it

00:34:28.726 --> 00:34:30.255
for the first time, they'll see

00:34:30.255 --> 00:34:30.866
a new version of the

00:34:30.866 --> 00:34:32.406
first-launch dialog that

00:34:32.406 --> 00:34:33.726
includes your app's icon.

00:34:34.326 --> 00:34:37.295
Now we understand that not

00:34:37.295 --> 00:34:38.485
everybody uses Xcode's

00:34:38.485 --> 00:34:40.255
distribution workflow, although

00:34:40.255 --> 00:34:41.346
this Xcode works - dah.

00:34:41.576 --> 00:34:42.846
The Xcode workflow is available

00:34:42.846 --> 00:34:43.556
today in the preview.

00:34:43.556 --> 00:34:45.306
We have also built a set of

00:34:45.306 --> 00:34:46.966
command line tools to perform

00:34:46.966 --> 00:34:48.016
every step of this so that you

00:34:48.016 --> 00:34:48.916
can integrate them with any

00:34:48.916 --> 00:34:49.666
custom flows [phonetic] you

00:34:49.666 --> 00:34:49.966
have.

00:34:50.235 --> 00:34:52.576
And the first step is to upload

00:34:52.576 --> 00:34:53.755
a copy for notarization.

00:34:54.326 --> 00:34:57.896
Now the notary service accepts

00:34:57.976 --> 00:35:00.176
Zip files, installer packages,

00:35:00.376 --> 00:35:01.136
and disk images.

00:35:02.156 --> 00:35:03.006
So if you have a bare

00:35:03.006 --> 00:35:04.556
application, you'll need to zip

00:35:04.556 --> 00:35:05.806
it up prior to uploading to the

00:35:05.806 --> 00:35:06.566
notary service.

00:35:07.396 --> 00:35:08.416
The tool for working with the

00:35:08.416 --> 00:35:09.936
notary service is altool.

00:35:10.816 --> 00:35:12.116
Here you can see a command line

00:35:12.116 --> 00:35:13.866
indication sending the Watch

00:35:13.866 --> 00:35:15.316
Grass Grow image up for

00:35:15.316 --> 00:35:16.026
notarization.

00:35:17.186 --> 00:35:18.546
Note that altool does require

00:35:18.546 --> 00:35:20.206
authentication, but you can pass

00:35:20.206 --> 00:35:20.966
in your credentials via

00:35:20.966 --> 00:35:22.496
Environment Variables or the key

00:35:22.496 --> 00:35:22.756
chain.

00:35:24.076 --> 00:35:25.966
Once upload is complete, you'll

00:35:25.966 --> 00:35:27.486
get a UUID that can be used to

00:35:27.486 --> 00:35:28.816
monitor status of processing.

00:35:29.346 --> 00:35:31.616
But you can also turn back and

00:35:31.616 --> 00:35:33.276
pass the altool to check on the

00:35:33.276 --> 00:35:34.456
status of your notarization.

00:35:35.936 --> 00:35:37.426
Here we see another command line

00:35:37.426 --> 00:35:39.166
indication of altool to just

00:35:39.166 --> 00:35:39.866
check the status of

00:35:39.866 --> 00:35:40.506
notarization.

00:35:40.586 --> 00:35:42.896
And then you can see here that

00:35:42.896 --> 00:35:44.676
notarization was complete, was

00:35:44.676 --> 00:35:45.266
successful.

00:35:45.756 --> 00:35:47.316
And importantly, there is a log

00:35:47.316 --> 00:35:48.726
file that comes back from the

00:35:48.726 --> 00:35:49.806
notarization service.

00:35:50.266 --> 00:35:51.536
This is a great place to check

00:35:51.536 --> 00:35:54.136
for any warnings, or it tells

00:35:54.136 --> 00:35:55.626
you exactly what was included in

00:35:55.626 --> 00:35:56.646
your notarization ticket.

00:35:56.936 --> 00:35:57.906
So you can make sure that

00:35:57.906 --> 00:35:59.316
everything in your package was

00:35:59.316 --> 00:36:00.196
notarized properly.

00:36:00.706 --> 00:36:04.376
And the last step before you

00:36:04.376 --> 00:36:06.086
distribute content is to staple

00:36:06.086 --> 00:36:07.466
your notarization ticket to

00:36:07.466 --> 00:36:08.336
whatever content you are going

00:36:08.336 --> 00:36:08.836
to distribute.

00:36:09.876 --> 00:36:10.926
Now we have a special tool for

00:36:10.926 --> 00:36:11.716
that called Stapler.

00:36:12.406 --> 00:36:13.626
Now you can staple tickets

00:36:13.676 --> 00:36:16.296
directly to applications, disk

00:36:16.296 --> 00:36:18.326
images, and installer packages.

00:36:19.096 --> 00:36:20.326
And Stapler combines both

00:36:20.326 --> 00:36:22.246
retrieving the ticket and

00:36:22.246 --> 00:36:23.396
attaching it to the content in

00:36:23.396 --> 00:36:23.916
one easy step.

00:36:24.756 --> 00:36:26.066
Here you can see I am stapling

00:36:26.066 --> 00:36:27.096
the ticket directly to this

00:36:27.096 --> 00:36:27.506
image.

00:36:28.346 --> 00:36:29.836
After that's done, I can

00:36:29.836 --> 00:36:31.636
distribute the disk image, and

00:36:31.686 --> 00:36:33.396
the users will already get a

00:36:33.396 --> 00:36:34.416
notarized application.

00:36:34.986 --> 00:36:40.376
So as a quick reminder, in macOS

00:36:40.376 --> 00:36:42.646
Mojave, for non-notarized apps

00:36:42.946 --> 00:36:43.856
we'll continue to keep the

00:36:43.856 --> 00:36:45.536
first-launch dialog that

00:36:45.536 --> 00:36:46.736
Gatekeeper has always had for

00:36:46.736 --> 00:36:47.846
Developer ID applications.

00:36:48.866 --> 00:36:50.156
For notarized applications,

00:36:51.346 --> 00:36:52.166
they'll get a new version of

00:36:52.166 --> 00:36:53.696
this dialog that prominently

00:36:53.696 --> 00:36:54.886
displays the app's icon.

00:36:55.366 --> 00:36:57.856
And if the user does manage to

00:36:57.856 --> 00:36:59.856
download software that has

00:36:59.856 --> 00:37:02.016
malicious content in it, the

00:37:02.016 --> 00:37:03.306
content won't run, and they'll

00:37:03.306 --> 00:37:06.336
be treated to this warning.

00:37:06.336 --> 00:37:08.196
Now this is not a new

00:37:08.196 --> 00:37:10.206
capability; macOS has always had

00:37:10.206 --> 00:37:13.066
the capability to block

00:37:13.066 --> 00:37:14.146
applications like this.

00:37:14.606 --> 00:37:17.566
But notarization does allow us

00:37:17.566 --> 00:37:19.196
to identify specific malicious

00:37:19.196 --> 00:37:21.396
content earlier and provides a

00:37:21.396 --> 00:37:23.156
much better experience than if a

00:37:23.156 --> 00:37:24.426
developer needs to revoke their

00:37:24.426 --> 00:37:25.816
entire Developer ID certificate.

00:37:26.366 --> 00:37:29.366
So that's how to build notarized

00:37:29.366 --> 00:37:30.376
apps and how they are going to

00:37:30.376 --> 00:37:31.796
help keep Mac users safer.

00:37:33.136 --> 00:37:33.806
What can you do?

00:37:34.716 --> 00:37:36.216
Well, the notary service is

00:37:36.216 --> 00:37:36.996
available today.

00:37:37.836 --> 00:37:39.396
So feel free to start uploading

00:37:39.396 --> 00:37:40.206
your applications.

00:37:40.846 --> 00:37:42.936
And there is no reason to wait

00:37:42.936 --> 00:37:44.036
for your next app update.

00:37:44.486 --> 00:37:45.626
The service will gladly check

00:37:45.626 --> 00:37:46.576
your back catalog, too.

00:37:46.686 --> 00:37:47.636
So send in anything you have

00:37:47.636 --> 00:37:47.866
got.

00:37:48.026 --> 00:37:50.246
We are looking for feedback

00:37:50.246 --> 00:37:51.356
while we roll the service out.

00:37:51.466 --> 00:37:52.566
So if you have any issues with

00:37:52.566 --> 00:37:54.076
notarization, please come to the

00:37:54.076 --> 00:37:55.096
labs and we'd love to work

00:37:55.096 --> 00:37:55.616
through them with you.

00:37:57.006 --> 00:37:58.216
Remember that signing issues,

00:37:58.216 --> 00:38:00.146
for now, will be warnings but

00:38:00.146 --> 00:38:01.156
are going to become errors in

00:38:01.156 --> 00:38:01.616
the future.

00:38:02.796 --> 00:38:04.236
And when macOS Mojave ships

00:38:04.236 --> 00:38:06.216
later this year, Gatekeeper will

00:38:06.216 --> 00:38:07.356
be highlighting notarized

00:38:07.356 --> 00:38:08.506
applications to users.

00:38:09.096 --> 00:38:10.266
But then in a future macOS

00:38:10.266 --> 00:38:11.776
release, Gatekeeper will be

00:38:11.776 --> 00:38:13.256
requiring notarized apps by

00:38:13.256 --> 00:38:13.606
default.

00:38:14.116 --> 00:38:16.716
And that's all for Gatekeeper.

00:38:16.806 --> 00:38:17.746
So now I'd like to hand it back

00:38:17.746 --> 00:38:18.636
to Pierre for some closing

00:38:18.636 --> 00:38:18.866
words.

00:38:19.516 --> 00:38:27.756
[ Applause ]

00:38:28.256 --> 00:38:28.806
>> Thank you Garrett.

00:38:30.416 --> 00:38:31.556
All right, let's look at the key

00:38:31.556 --> 00:38:32.576
takeaways from this session.

00:38:33.056 --> 00:38:36.096
First, the macOS Mojave, the

00:38:36.376 --> 00:38:38.326
user is now in control over the

00:38:38.326 --> 00:38:40.516
way apps can access their

00:38:40.686 --> 00:38:41.206
personal data.

00:38:42.516 --> 00:38:43.716
It means your app needs to be

00:38:43.896 --> 00:38:46.086
ready to handle their decisions

00:38:46.386 --> 00:38:48.006
-- first, because the user make

00:38:48.006 --> 00:38:49.106
take a while before they

00:38:49.106 --> 00:38:50.046
actually give you an answer.

00:38:51.106 --> 00:38:52.326
Second, because they might

00:38:52.356 --> 00:38:54.866
completely decline the request.

00:38:54.996 --> 00:38:56.766
Additionally, please be

00:38:56.766 --> 00:38:59.546
transparent to the user about

00:38:59.616 --> 00:39:01.246
what did I need to access and

00:39:01.246 --> 00:39:03.756
why you need to access it, using

00:39:03.756 --> 00:39:05.676
new entitlements and purpose

00:39:05.676 --> 00:39:06.656
strings for this effect.

00:39:07.696 --> 00:39:09.146
Also, make sure you request

00:39:09.146 --> 00:39:11.096
access to this data in context

00:39:11.096 --> 00:39:12.466
-- in the context where the user

00:39:12.666 --> 00:39:14.076
can actually understand why you

00:39:14.076 --> 00:39:16.436
need it and is more likely to

00:39:16.436 --> 00:39:17.396
grant you this request.

00:39:17.916 --> 00:39:20.656
We have a new higher runtime,

00:39:20.656 --> 00:39:21.696
which you can adopt in your app

00:39:21.696 --> 00:39:22.026
today.

00:39:23.206 --> 00:39:24.736
It effectively increases the

00:39:24.736 --> 00:39:26.136
security and the transparency of

00:39:26.136 --> 00:39:26.446
your app.

00:39:26.966 --> 00:39:28.316
It does not take away any of the

00:39:28.316 --> 00:39:29.336
capabilities that you have

00:39:29.386 --> 00:39:29.696
today.

00:39:30.126 --> 00:39:32.516
It just requires you to opt into

00:39:33.876 --> 00:39:33.976
them.

00:39:34.196 --> 00:39:35.886
And finally, please help us make

00:39:36.186 --> 00:39:38.876
our users feel more secure and

00:39:38.996 --> 00:39:40.596
stop malware as soon as possible

00:39:41.156 --> 00:39:42.376
by getting your apps notarized.

00:39:43.096 --> 00:39:44.956
The Developer ID notary service

00:39:44.956 --> 00:39:46.206
is open for submission right

00:39:46.206 --> 00:39:46.406
now.

00:39:47.036 --> 00:39:49.286
If you need more information

00:39:49.286 --> 00:39:51.026
about this session, please check

00:39:51.026 --> 00:39:52.036
out our developer website.

00:39:53.206 --> 00:39:55.016
We have a lab immediately after

00:39:55.016 --> 00:39:56.726
this section from 3:00 to 6:00

00:39:56.876 --> 00:39:58.276
and then another lab tomorrow

00:39:58.276 --> 00:40:00.176
from 9:00 to 12:00.

00:40:00.326 --> 00:40:01.206
And finally, there will be

00:40:01.206 --> 00:40:02.296
another lab on Thursday

00:40:02.296 --> 00:40:03.786
dedicated to signing and

00:40:03.786 --> 00:40:04.336
distribution.

00:40:04.756 --> 00:40:07.086
Again, thank you very much for

00:40:07.086 --> 00:40:07.456
coming.

00:40:07.876 --> 00:40:08.666
Hope you have a great rest of

00:40:08.696 --> 00:40:08.946
the week.

00:40:09.016 --> 00:40:11.000
[ Applause ]