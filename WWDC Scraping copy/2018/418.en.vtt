WEBVTT

00:00:07.516 --> 00:00:17.386
[ Music ]

00:00:17.886 --> 00:00:19.716
>> Hi. I'm Eric Dudiak, an

00:00:19.716 --> 00:00:21.316
engineer on the Xcode team.

00:00:21.756 --> 00:00:22.746
And today we're going to talk

00:00:22.746 --> 00:00:24.156
about source control workflows

00:00:24.386 --> 00:00:25.026
in Xcode.

00:00:25.466 --> 00:00:27.216
Now, developing apps requires

00:00:27.216 --> 00:00:28.976
making lots of changes in your

00:00:28.976 --> 00:00:30.106
source code and projects.

00:00:30.526 --> 00:00:32.286
To help manage that change Xcode

00:00:32.286 --> 00:00:33.366
provides a number of source

00:00:33.366 --> 00:00:33.976
control tools.

00:00:36.046 --> 00:00:36.906
So, today we're going to take a

00:00:36.906 --> 00:00:38.006
look at a few of them.

00:00:38.806 --> 00:00:40.146
To start, we're going to take a

00:00:40.146 --> 00:00:41.316
look at how you create your

00:00:41.316 --> 00:00:42.786
first project using source

00:00:42.786 --> 00:00:43.136
control.

00:00:45.396 --> 00:00:47.186
Next, we'll look at making and

00:00:47.186 --> 00:00:48.566
viewing changes to your project

00:00:48.566 --> 00:00:49.376
using source control.

00:00:51.926 --> 00:00:53.216
We're also going to look at how

00:00:53.216 --> 00:00:54.416
you host and share your

00:00:54.416 --> 00:00:55.726
repositories with your team,

00:00:55.846 --> 00:00:57.296
including synchronizing changes.

00:00:59.326 --> 00:01:00.426
We'll take a brief look at

00:01:00.426 --> 00:01:01.516
resolving and avoiding

00:01:01.516 --> 00:01:02.306
conflicts.

00:01:03.526 --> 00:01:05.075
And finally, take a quick look

00:01:05.075 --> 00:01:06.756
at pull requests and forking.

00:01:09.236 --> 00:01:10.746
So first, let's take a look at

00:01:10.746 --> 00:01:12.296
creating a new project using

00:01:12.296 --> 00:01:13.796
Git, the industry standard

00:01:13.796 --> 00:01:15.506
source control system, supported

00:01:15.606 --> 00:01:16.916
and included in Xcode.

00:01:19.196 --> 00:01:21.146
The first step to using Git is

00:01:21.146 --> 00:01:22.706
to set up your author name and

00:01:22.706 --> 00:01:23.016
email.

00:01:23.646 --> 00:01:24.866
This identifies you in Git

00:01:24.866 --> 00:01:26.666
commits and makes it easy to

00:01:26.666 --> 00:01:28.616
identify who made what changes

00:01:28.906 --> 00:01:30.026
when working on a team.

00:01:30.896 --> 00:01:32.236
Xcode supports quickly setting

00:01:32.236 --> 00:01:35.226
this up in the preferences under

00:01:35.226 --> 00:01:36.826
the Git options of the Source

00:01:36.826 --> 00:01:37.566
Control tab.

00:01:41.206 --> 00:01:42.666
When creating a new project in

00:01:42.716 --> 00:01:44.646
Xcode, you can also choose to

00:01:44.646 --> 00:01:45.976
create a Git repository.

00:01:47.976 --> 00:01:49.346
During the Save operation for a

00:01:49.346 --> 00:01:50.996
new project you can simply check

00:01:50.996 --> 00:01:52.746
the box shown here, and Xcode

00:01:52.746 --> 00:01:54.396
will create one automatically.

00:01:55.446 --> 00:01:57.136
Now let's look at what that does

00:01:57.136 --> 00:01:58.696
and what a Git repository is.

00:02:00.096 --> 00:02:01.536
So you may be familiar with the

00:02:01.536 --> 00:02:03.116
typical Xcode project,

00:02:03.546 --> 00:02:05.346
represented here by a folder on

00:02:05.346 --> 00:02:05.796
disk.

00:02:06.536 --> 00:02:07.876
This includes your source files

00:02:08.336 --> 00:02:09.205
and things like that.

00:02:10.496 --> 00:02:11.746
Now, when you check the box to

00:02:11.786 --> 00:02:13.456
also create a Git repository,

00:02:14.506 --> 00:02:16.246
you'll get a .Git folder.

00:02:17.246 --> 00:02:18.906
This represents the repository

00:02:18.906 --> 00:02:20.276
for your project and will be

00:02:20.276 --> 00:02:21.396
hidden from you normally.

00:02:23.276 --> 00:02:24.526
Now it gets put into your

00:02:24.526 --> 00:02:26.786
project folder, making it a

00:02:26.786 --> 00:02:27.926
working copy.

00:02:30.256 --> 00:02:31.576
The first thing that happens

00:02:31.636 --> 00:02:33.156
with a new repository created in

00:02:33.156 --> 00:02:35.686
Xcode is that the whole copy of

00:02:35.686 --> 00:02:37.356
your project is made and

00:02:37.356 --> 00:02:39.246
snapshotted at a point in time.

00:02:40.236 --> 00:02:41.596
This snapshot of your project is

00:02:41.596 --> 00:02:42.416
known as a commit.

00:02:47.636 --> 00:02:49.166
Each commit in Xcode gets a

00:02:49.166 --> 00:02:50.296
unique identifier.

00:02:51.816 --> 00:02:53.046
As you make changes to our

00:02:53.046 --> 00:02:54.076
project source code you can

00:02:54.076 --> 00:02:55.406
create commits, which will take

00:02:55.406 --> 00:02:56.476
further snapshots of your

00:02:56.476 --> 00:02:58.606
project throughout time, while

00:02:58.606 --> 00:03:00.456
you see those changes at the

00:03:00.456 --> 00:03:01.426
point they were created.

00:03:04.576 --> 00:03:06.636
These snapshots make up your

00:03:06.636 --> 00:03:07.636
project's history.

00:03:08.166 --> 00:03:10.436
As you make more, they form

00:03:10.436 --> 00:03:11.646
something of a timeline.

00:03:14.176 --> 00:03:16.296
And this information is what

00:03:16.296 --> 00:03:17.606
makes up your repository.

00:03:19.876 --> 00:03:21.056
So now that we've discussed

00:03:21.056 --> 00:03:22.616
conceptually how this works,

00:03:22.986 --> 00:03:24.146
let's take a look at making

00:03:24.146 --> 00:03:26.276
changes and easily tracking them

00:03:26.506 --> 00:03:27.186
in Xcode.

00:03:29.116 --> 00:03:30.776
One of the easiest ways to do

00:03:30.776 --> 00:03:32.186
this is with the Source Control

00:03:32.186 --> 00:03:32.946
Change bar.

00:03:33.606 --> 00:03:35.126
It highlights the lines of code

00:03:35.256 --> 00:03:36.956
you change as you change them.

00:03:38.516 --> 00:03:40.066
The change bar makes it easy to

00:03:40.066 --> 00:03:42.026
see where in a file you've made

00:03:42.026 --> 00:03:42.966
changes when you come back

00:03:42.966 --> 00:03:43.366
later.

00:03:44.106 --> 00:03:46.166
As changes are made, the bar

00:03:46.166 --> 00:03:47.536
highlights the lines of files

00:03:47.536 --> 00:03:48.666
with modifications.

00:03:51.806 --> 00:03:53.586
In large files, it also makes it

00:03:53.586 --> 00:03:54.746
quick to jump between your

00:03:54.746 --> 00:03:55.216
changes.

00:03:55.656 --> 00:03:57.176
In fact, you can quickly jump

00:03:57.176 --> 00:03:58.756
between them from the Navigate

00:03:58.756 --> 00:03:59.656
menu in Xcode.

00:04:01.476 --> 00:04:03.316
In addition to the change bar,

00:04:03.506 --> 00:04:04.926
you'll see status flags in the

00:04:04.926 --> 00:04:06.506
project navigator telling you

00:04:06.506 --> 00:04:08.006
which files have changed since

00:04:08.006 --> 00:04:08.856
you last committed.

00:04:12.096 --> 00:04:13.256
So now that we've made some

00:04:13.256 --> 00:04:14.726
changes, let's talk about

00:04:14.726 --> 00:04:15.326
committing.

00:04:16.106 --> 00:04:17.216
These are snapshots of your

00:04:17.216 --> 00:04:19.255
project at a point in time that

00:04:19.625 --> 00:04:20.826
you can reference later.

00:04:21.206 --> 00:04:22.526
Let's take a brief look at

00:04:22.526 --> 00:04:24.516
creating these commits in Xcode.

00:04:27.186 --> 00:04:28.996
So we've seen you can easily see

00:04:28.996 --> 00:04:30.156
changes as you make them in your

00:04:30.156 --> 00:04:30.726
project.

00:04:30.726 --> 00:04:32.636
Now, when you're ready to record

00:04:32.636 --> 00:04:33.986
these changes to your

00:04:33.986 --> 00:04:35.996
repository, use the Source

00:04:35.996 --> 00:04:37.706
Control menu to create a commit.

00:04:44.246 --> 00:04:45.776
The commit sheet will show all

00:04:45.776 --> 00:04:47.296
of the changes currently in your

00:04:47.296 --> 00:04:47.896
project.

00:04:48.716 --> 00:04:49.886
They show the side-by-side

00:04:49.886 --> 00:04:51.516
comparison for you to review.

00:04:52.026 --> 00:04:54.026
You can select which files and

00:04:54.026 --> 00:04:56.006
even which specific changes to

00:04:56.006 --> 00:04:57.116
include in the commit.

00:04:58.416 --> 00:04:59.816
With the appropriate changes

00:04:59.816 --> 00:05:02.236
selected, enter a message to

00:05:02.236 --> 00:05:03.346
record the reason for your

00:05:03.346 --> 00:05:03.916
changes.

00:05:04.626 --> 00:05:05.906
This message makes it easy to

00:05:05.906 --> 00:05:07.126
understand the reason for the

00:05:07.126 --> 00:05:08.906
changes later when going back to

00:05:08.906 --> 00:05:09.506
review them.

00:05:12.206 --> 00:05:13.236
Now that we've made a couple

00:05:13.236 --> 00:05:15.486
commits, let's talk about

00:05:15.486 --> 00:05:16.116
viewing them.

00:05:16.616 --> 00:05:18.336
You may want to refer back to

00:05:18.336 --> 00:05:20.116
them to better understand how

00:05:20.116 --> 00:05:21.566
your code and project have

00:05:21.566 --> 00:05:22.626
changed over time.

00:05:23.296 --> 00:05:24.216
This can be useful for

00:05:24.216 --> 00:05:25.606
discovering the timeline of when

00:05:25.606 --> 00:05:26.656
code was introduced in your

00:05:26.656 --> 00:05:28.486
project, and why specific

00:05:28.486 --> 00:05:29.306
changes were made.

00:05:30.146 --> 00:05:31.616
Xcode offers several ways to

00:05:31.616 --> 00:05:32.416
view this history.

00:05:34.876 --> 00:05:36.736
First is the comparison mode,

00:05:36.806 --> 00:05:38.066
which we just saw a little bit

00:05:38.066 --> 00:05:38.856
in the commit sheet.

00:05:39.606 --> 00:05:41.386
Xcode lets you view every file

00:05:41.386 --> 00:05:42.626
in your project as it has

00:05:42.626 --> 00:05:43.846
changed through time in this

00:05:43.936 --> 00:05:44.286
way.

00:05:45.706 --> 00:05:47.206
To access it, use the Version

00:05:47.206 --> 00:05:48.706
Editor mode from the toolbar,

00:05:49.236 --> 00:05:49.816
seen here.

00:05:52.776 --> 00:05:54.056
Clicking and holding the

00:05:54.056 --> 00:05:55.896
selector will let you jump to a

00:05:55.896 --> 00:05:57.516
specific mode of the version

00:05:57.516 --> 00:05:57.866
editor.

00:06:01.336 --> 00:06:03.206
The comparison mode provides a

00:06:03.206 --> 00:06:05.146
side-by-side view of source code

00:06:05.146 --> 00:06:06.996
changes, allowing you to compare

00:06:06.996 --> 00:06:08.556
the file between two points in

00:06:08.556 --> 00:06:08.986
time.

00:06:10.456 --> 00:06:11.856
While in the comparison mode,

00:06:12.316 --> 00:06:13.736
you can change what version of

00:06:13.736 --> 00:06:15.516
the file you are viewing using

00:06:15.516 --> 00:06:17.216
the jump bar at the bottom.

00:06:19.516 --> 00:06:21.616
Next is the Author View of the

00:06:21.616 --> 00:06:22.346
version editor.

00:06:23.436 --> 00:06:24.856
It is accessed in the same way

00:06:25.286 --> 00:06:25.956
in the toolbar.

00:06:29.536 --> 00:06:31.746
The Author View groups code by

00:06:31.746 --> 00:06:33.486
the author who made the most

00:06:33.486 --> 00:06:35.396
recent change to a particular

00:06:35.396 --> 00:06:36.356
line in the file.

00:06:37.566 --> 00:06:39.886
It shows the author, message,

00:06:40.036 --> 00:06:41.166
and date of the commit.

00:06:42.116 --> 00:06:43.456
Additional information about the

00:06:43.456 --> 00:06:45.166
commit can be seen by clicking

00:06:45.166 --> 00:06:46.136
on one of the slices.

00:06:48.146 --> 00:06:49.756
Last, it is possible to see a

00:06:49.756 --> 00:06:51.546
log of each change made to a

00:06:51.546 --> 00:06:51.996
file.

00:06:52.836 --> 00:06:53.666
Just like authors and

00:06:53.666 --> 00:06:55.586
comparison, it is accessed from

00:06:55.586 --> 00:06:56.136
the toolbar.

00:06:59.596 --> 00:07:01.876
The source control log looks at

00:07:01.876 --> 00:07:04.066
a file's entire history so you

00:07:04.066 --> 00:07:06.326
can see who made changes and why

00:07:06.806 --> 00:07:08.036
over the entire history of the

00:07:08.036 --> 00:07:08.396
file.

00:07:10.026 --> 00:07:11.426
Now, sometimes you want a way to

00:07:11.426 --> 00:07:12.806
see changes made using source

00:07:12.806 --> 00:07:14.506
control across not just a single

00:07:14.506 --> 00:07:16.836
file, but your entire project.

00:07:17.646 --> 00:07:18.896
To see this, you can select the

00:07:18.896 --> 00:07:21.956
Source Control Navigator as the

00:07:21.956 --> 00:07:23.376
second navigator in Xcode.

00:07:27.196 --> 00:07:28.626
The Source Control Navigator

00:07:28.966 --> 00:07:30.726
provides a view of your whole

00:07:30.726 --> 00:07:32.466
repository by listing branches

00:07:32.466 --> 00:07:33.166
and tags.

00:07:34.476 --> 00:07:35.656
Branches are the individual

00:07:35.656 --> 00:07:37.136
streams of history that make up

00:07:37.136 --> 00:07:38.616
your project, such as the

00:07:38.616 --> 00:07:39.796
current in development work.

00:07:40.796 --> 00:07:42.026
When you start a new project,

00:07:42.376 --> 00:07:43.586
you'll have just one branch,

00:07:44.066 --> 00:07:45.306
typically named Master.

00:07:46.666 --> 00:07:47.876
Selecting it will show the

00:07:47.876 --> 00:07:49.336
history of that branch, which

00:07:49.336 --> 00:07:50.226
can be seen here.

00:07:51.786 --> 00:07:53.676
In this history view, you can

00:07:53.676 --> 00:07:54.956
see the history is marked with

00:07:54.956 --> 00:07:56.616
tags shown in purple.

00:07:57.396 --> 00:07:58.566
Tags are bookmarks of

00:07:58.566 --> 00:08:00.606
particularly important points in

00:08:00.606 --> 00:08:02.566
your project such as shipped

00:08:02.566 --> 00:08:03.186
versions.

00:08:04.646 --> 00:08:05.846
For more information on

00:08:05.846 --> 00:08:07.646
branches, viewing history, and

00:08:07.646 --> 00:08:11.776
tags, please see the 2017 WWDC

00:08:11.776 --> 00:08:13.826
Session, GitHub, and the new

00:08:13.826 --> 00:08:15.106
Source control Workflows in

00:08:15.106 --> 00:08:15.866
Xcode 9.

00:08:22.196 --> 00:08:23.036
Now that we've looked at the

00:08:23.036 --> 00:08:24.306
benefits of having a project

00:08:24.306 --> 00:08:25.606
under source control, let's look

00:08:25.606 --> 00:08:27.116
at taking things to the next

00:08:27.116 --> 00:08:27.426
level.

00:08:29.606 --> 00:08:31.226
So far we've seen what happens

00:08:31.226 --> 00:08:32.936
when a project is just locally

00:08:32.936 --> 00:08:34.726
managed by Git on your machine.

00:08:35.606 --> 00:08:37.046
But in many cases, you'll want

00:08:37.046 --> 00:08:38.736
to store a copy on a server.

00:08:39.486 --> 00:08:41.346
This provides an off-site backup

00:08:41.346 --> 00:08:42.515
as well as a means to

00:08:42.515 --> 00:08:43.895
synchronize your changes from

00:08:43.895 --> 00:08:45.516
one machine to another.

00:08:45.556 --> 00:08:47.866
This is also the basis of

00:08:47.866 --> 00:08:50.366
collaboration in Xcode projects.

00:08:54.116 --> 00:08:56.126
Xcode works with any server that

00:08:56.126 --> 00:08:57.166
supports hosting Git

00:08:57.166 --> 00:08:58.026
repositories.

00:08:58.806 --> 00:09:00.596
In these cases, the features are

00:09:00.596 --> 00:09:01.866
limited to standard Git

00:09:01.866 --> 00:09:04.086
operations such as push and

00:09:04.086 --> 00:09:04.356
pull.

00:09:04.356 --> 00:09:06.356
And there is no account to sign

00:09:06.356 --> 00:09:06.696
into.

00:09:07.386 --> 00:09:09.066
You just authenticate on demand

00:09:09.066 --> 00:09:09.586
as needed.

00:09:11.276 --> 00:09:13.456
Xcode also supports many common

00:09:13.456 --> 00:09:15.416
hosting solutions such as

00:09:15.566 --> 00:09:17.896
GitHub, BitBucket, and

00:09:17.896 --> 00:09:19.026
GitLab.com.

00:09:19.956 --> 00:09:21.696
With these services, additional

00:09:21.696 --> 00:09:23.836
features are supported, such as

00:09:23.836 --> 00:09:25.086
searching for repositories to

00:09:25.086 --> 00:09:26.726
clone and creating new

00:09:26.726 --> 00:09:28.066
repositories on the server

00:09:28.406 --> 00:09:29.456
directly from Xcode.

00:09:30.236 --> 00:09:31.856
In addition to the cloud

00:09:31.856 --> 00:09:33.076
versions of these services,

00:09:33.716 --> 00:09:34.986
self-hosted and enterprise

00:09:34.986 --> 00:09:36.776
versions used on premise by

00:09:36.776 --> 00:09:38.946
larger teams are also supported

00:09:38.946 --> 00:09:39.546
in Xcode.

00:09:42.096 --> 00:09:43.486
So let's take a look at adding

00:09:43.486 --> 00:09:44.706
one of these hosted accounts.

00:09:45.236 --> 00:09:47.816
You can add this account type

00:09:47.976 --> 00:09:50.326
from Xcode's preferences under

00:09:50.326 --> 00:09:51.696
the Account Preference pane.

00:09:52.236 --> 00:09:55.636
You just sign into the account

00:09:56.146 --> 00:09:57.476
using your username and

00:09:57.476 --> 00:09:59.336
password, just like you would on

00:09:59.336 --> 00:09:59.866
the website.

00:10:00.486 --> 00:10:01.336
If you're signing into a

00:10:01.336 --> 00:10:03.666
self-hosted version, you'll also

00:10:03.666 --> 00:10:05.256
get a chance to provide the URL

00:10:05.256 --> 00:10:06.506
for the specific server that you

00:10:06.506 --> 00:10:09.806
want to connect to.

00:10:09.806 --> 00:10:11.486
Now that Xcode is signed into a

00:10:11.486 --> 00:10:13.126
hosted source control account,

00:10:13.566 --> 00:10:15.026
we can start sending our changes

00:10:15.026 --> 00:10:16.686
up to the server and getting

00:10:16.686 --> 00:10:19.426
other changes from it.

00:10:19.716 --> 00:10:20.956
But before we start pushing and

00:10:20.956 --> 00:10:23.456
pulling code in Xcode, let's

00:10:23.456 --> 00:10:25.006
take a brief moment to discuss

00:10:25.006 --> 00:10:26.956
how Git and these hosting

00:10:26.956 --> 00:10:28.716
solutions handle security.

00:10:32.296 --> 00:10:34.106
Git supports two main methods

00:10:34.106 --> 00:10:35.266
for securing changes when

00:10:35.266 --> 00:10:36.456
connecting to a server.

00:10:36.956 --> 00:10:40.546
The first, HTTPS, is the same

00:10:40.546 --> 00:10:42.226
way most websites are secured.

00:10:43.146 --> 00:10:44.726
It trusts the server based on a

00:10:44.726 --> 00:10:46.986
certificate and uses a username

00:10:46.986 --> 00:10:48.536
and password to authenticate you

00:10:48.536 --> 00:10:49.046
as a user.

00:10:50.626 --> 00:10:53.676
The other method, SSH, works a

00:10:53.676 --> 00:10:55.396
bit differently, particularly

00:10:55.396 --> 00:10:56.846
with these hosted solutions.

00:10:58.186 --> 00:11:00.236
In general, SSH connections for

00:11:00.236 --> 00:11:02.576
Git are secured using a public

00:11:02.846 --> 00:11:05.636
and private key pair that is

00:11:05.636 --> 00:11:07.396
generated on each machine.

00:11:08.586 --> 00:11:09.936
The public portion of the pair

00:11:09.936 --> 00:11:11.906
is then uploaded to the hosting

00:11:11.906 --> 00:11:12.336
site.

00:11:13.336 --> 00:11:14.266
This means that it is easy to

00:11:14.266 --> 00:11:16.136
have one set of keys per

00:11:16.136 --> 00:11:16.836
machine.

00:11:16.936 --> 00:11:18.956
And often even one per service

00:11:19.516 --> 00:11:20.936
so they can be managed and

00:11:20.936 --> 00:11:22.696
revoked much more easily than a

00:11:22.696 --> 00:11:23.276
password.

00:11:24.956 --> 00:11:27.116
Xcode can help you easily do

00:11:27.116 --> 00:11:28.886
these setup steps for SSH.

00:11:28.986 --> 00:11:31.566
When you sign into an account

00:11:31.566 --> 00:11:33.436
but have not created an SSH key

00:11:33.436 --> 00:11:35.966
pair locally, Xcode will offer

00:11:35.966 --> 00:11:38.226
to create a pair.

00:11:38.416 --> 00:11:40.096
The private portion of the SSH

00:11:40.096 --> 00:11:41.956
key should be protected by a

00:11:41.956 --> 00:11:42.836
pass phrase.

00:11:43.876 --> 00:11:45.426
This adds an additional layer of

00:11:45.426 --> 00:11:47.426
security and prevents it from

00:11:47.426 --> 00:11:49.246
being used even in the event

00:11:49.246 --> 00:11:50.906
someone else were to get a copy

00:11:50.906 --> 00:11:54.136
of your private key.

00:11:54.366 --> 00:11:55.796
Once the key pair has been

00:11:55.796 --> 00:11:58.586
created, Xcode can also upload

00:11:58.586 --> 00:12:00.076
the public portion of the key

00:12:00.536 --> 00:12:01.956
directly to the hosting site.

00:12:03.116 --> 00:12:04.766
With the public key upload

00:12:04.766 --> 00:12:07.246
complete, Xcode can transmit Git

00:12:07.246 --> 00:12:09.636
data securely to the server over

00:12:09.636 --> 00:12:11.776
the SSH protocol in addition to

00:12:11.776 --> 00:12:12.736
HTTPS.

00:12:13.466 --> 00:12:14.586
That also means we can now

00:12:14.586 --> 00:12:16.076
create new repositories on the

00:12:16.076 --> 00:12:18.176
server and clone existing ones.

00:12:18.766 --> 00:12:19.796
So let's take a quick look at

00:12:19.796 --> 00:12:20.016
that.

00:12:21.766 --> 00:12:23.596
If we go back to our local only

00:12:23.596 --> 00:12:26.046
repository, we can now create a

00:12:26.046 --> 00:12:27.076
new remote for it.

00:12:27.736 --> 00:12:29.316
This is a full copy of that

00:12:29.316 --> 00:12:31.456
repository up on the hosted

00:12:31.456 --> 00:12:31.896
site.

00:12:32.446 --> 00:12:34.236
We can do this from the Source

00:12:34.236 --> 00:12:36.356
Control Navigator in the Context

00:12:36.356 --> 00:12:38.506
menu by selecting Create New

00:12:38.506 --> 00:12:38.936
Remote.

00:12:41.216 --> 00:12:42.516
We then have a few options

00:12:42.546 --> 00:12:43.936
depending on the hosting site.

00:12:44.366 --> 00:12:45.626
And we can choose to make it

00:12:45.626 --> 00:12:48.086
either public or private, based

00:12:48.086 --> 00:12:49.426
on our exact needs for this

00:12:49.526 --> 00:12:50.036
project.

00:12:51.156 --> 00:12:52.246
It can then be shared with other

00:12:52.246 --> 00:12:54.016
developers or synched across

00:12:54.016 --> 00:12:54.606
machines.

00:12:55.406 --> 00:12:56.766
And when you want to download a

00:12:56.766 --> 00:12:57.946
project that has already been

00:12:57.946 --> 00:12:59.896
hosted on a server, such as on a

00:12:59.896 --> 00:13:01.406
new machine or when joining a

00:13:01.406 --> 00:13:03.576
team, you can browse and search

00:13:03.576 --> 00:13:05.206
for a repository in the clone

00:13:05.206 --> 00:13:07.366
window, accessed from the source

00:13:07.366 --> 00:13:09.516
control menu in Xcode.

00:13:13.176 --> 00:13:14.786
If you already had the URL to

00:13:14.786 --> 00:13:16.416
use for the repository, you can

00:13:16.416 --> 00:13:17.776
directly enter it in the search

00:13:17.776 --> 00:13:18.096
field.

00:13:18.596 --> 00:13:20.296
Additionally, all of the hosting

00:13:20.296 --> 00:13:21.706
solutions supported in Xcode

00:13:21.806 --> 00:13:22.836
offer the option to clone

00:13:22.836 --> 00:13:25.116
projects directly in Xcode via a

00:13:25.116 --> 00:13:26.236
button on their websites.

00:13:27.676 --> 00:13:29.506
For additional information on

00:13:29.506 --> 00:13:31.396
using hosted services including

00:13:31.396 --> 00:13:33.766
creating remote repositories and

00:13:33.766 --> 00:13:35.066
the varies clone workflows,

00:13:35.606 --> 00:13:38.146
please refer to the 2017 WWDC

00:13:38.146 --> 00:13:39.906
session GitHub and the New

00:13:39.906 --> 00:13:41.266
Source control Workflows in

00:13:41.266 --> 00:13:42.036
Xcode 9.

00:13:45.646 --> 00:13:47.086
Now that we have a local and

00:13:47.086 --> 00:13:49.766
remote copy of our project, we

00:13:49.766 --> 00:13:51.036
need to make sure that they stay

00:13:51.336 --> 00:13:51.906
in sync.

00:13:53.046 --> 00:13:54.976
In Git that is done by

00:13:54.976 --> 00:13:57.596
operations known as pulling and

00:13:57.596 --> 00:13:58.056
pushing.

00:14:00.156 --> 00:14:02.166
After you commit one or more

00:14:02.166 --> 00:14:03.986
changes locally, you will want

00:14:03.986 --> 00:14:05.586
to push to upload them to the

00:14:05.586 --> 00:14:06.056
server.

00:14:06.916 --> 00:14:08.286
This can be done either directly

00:14:08.286 --> 00:14:10.656
while committing, right in the

00:14:10.656 --> 00:14:13.696
commit sheet, or from the Xcode

00:14:13.696 --> 00:14:14.586
source control menu.

00:14:17.676 --> 00:14:18.976
The push sheet allows you to

00:14:18.976 --> 00:14:20.436
select exactly what branch you

00:14:20.436 --> 00:14:22.706
want to push to and optionally

00:14:22.706 --> 00:14:24.166
allows you to include tags

00:14:24.166 --> 00:14:26.176
you've created locally during

00:14:26.176 --> 00:14:26.666
the push.

00:14:29.526 --> 00:14:30.826
Now, when working with others,

00:14:30.936 --> 00:14:32.416
it'll often be necessary to get

00:14:32.416 --> 00:14:33.516
their changes locally.

00:14:34.526 --> 00:14:36.306
For this you'll need to do what

00:14:36.306 --> 00:14:37.896
is referred to in Git as a pull.

00:14:38.606 --> 00:14:40.226
This, similarly, can be done

00:14:40.356 --> 00:14:41.536
from the source control menu.

00:14:43.916 --> 00:14:46.396
Now, Xcode offers two options

00:14:46.396 --> 00:14:47.976
for pulling, either the Git

00:14:47.976 --> 00:14:50.516
default of using a merge, or

00:14:50.516 --> 00:14:52.396
Xcode can pull using a rebase

00:14:52.396 --> 00:14:53.016
operation.

00:14:53.806 --> 00:14:55.096
These work slightly differently

00:14:55.096 --> 00:14:55.466
in Git.

00:14:55.886 --> 00:14:57.066
So let's take a look at them.

00:14:59.276 --> 00:15:00.316
Here we will look at a

00:15:00.316 --> 00:15:02.066
conceptual timeline of commits.

00:15:02.716 --> 00:15:04.376
If you've made local changes and

00:15:04.376 --> 00:15:05.816
others have also made changes

00:15:05.816 --> 00:15:07.346
while you were working, you will

00:15:07.346 --> 00:15:09.536
have to pull before you push.

00:15:10.466 --> 00:15:12.506
In this situation, your work,

00:15:13.196 --> 00:15:14.696
shown in green, has diverged

00:15:14.696 --> 00:15:16.406
from your coworker's work, shown

00:15:16.406 --> 00:15:17.076
here in blue.

00:15:19.876 --> 00:15:21.766
To rectify this, you'll have two

00:15:21.766 --> 00:15:24.586
options in Git: merging and

00:15:24.586 --> 00:15:25.146
rebasing.

00:15:26.026 --> 00:15:26.956
Let's take a look at both.

00:15:28.016 --> 00:15:29.086
So again, in this scenario you

00:15:29.086 --> 00:15:31.056
have two changes to push and

00:15:31.056 --> 00:15:31.676
three to pull.

00:15:32.486 --> 00:15:34.016
When merging, this situation is

00:15:34.016 --> 00:15:35.526
resolved by creating a new

00:15:35.526 --> 00:15:37.756
commit, after both yours and

00:15:37.756 --> 00:15:39.796
your coworker's, that indicates

00:15:39.796 --> 00:15:40.936
how the divergence should be

00:15:40.936 --> 00:15:41.506
handled.

00:15:42.756 --> 00:15:44.036
With the commits now unified

00:15:44.036 --> 00:15:46.356
back into a single branch, this

00:15:46.356 --> 00:15:47.556
can be pushed up to the server

00:15:47.556 --> 00:15:49.186
and synchronized across all your

00:15:49.186 --> 00:15:49.686
machines.

00:15:50.956 --> 00:15:52.496
A rebase pull works a little

00:15:52.496 --> 00:15:53.046
differently.

00:15:53.456 --> 00:15:54.776
Instead of creating a new merge

00:15:54.776 --> 00:15:56.306
commit, your local changes are

00:15:56.306 --> 00:15:58.266
set aside and then replayed

00:15:58.566 --> 00:15:59.776
after the changes you just

00:15:59.846 --> 00:16:00.266
pulled.

00:16:02.186 --> 00:16:03.436
This can make looking back at

00:16:03.436 --> 00:16:05.536
history much more simple, as

00:16:05.536 --> 00:16:07.266
there is no merge commit or

00:16:07.266 --> 00:16:08.726
divergence in history.

00:16:11.356 --> 00:16:12.666
Sometimes when pulling, you will

00:16:12.666 --> 00:16:14.586
have made local commits that

00:16:14.586 --> 00:16:16.326
change something in the same

00:16:16.326 --> 00:16:17.726
place as someone else is making

00:16:17.726 --> 00:16:18.176
changes.

00:16:18.976 --> 00:16:20.176
This can cause what is known in

00:16:20.176 --> 00:16:22.336
Git as a conflict, where it is

00:16:22.336 --> 00:16:24.266
unclear how to have both changes

00:16:24.266 --> 00:16:25.006
coexist.

00:16:27.736 --> 00:16:29.856
Xcode allows you to resolve

00:16:29.856 --> 00:16:31.086
conflicts when pulling or

00:16:31.086 --> 00:16:32.026
merging a branch.

00:16:33.006 --> 00:16:34.196
Xcode will present a sheet

00:16:34.196 --> 00:16:35.976
similar to the commit sheet with

00:16:36.056 --> 00:16:38.466
options to take your change, or

00:16:38.466 --> 00:16:39.226
the other change.

00:16:39.566 --> 00:16:41.716
It is also possible to manually

00:16:41.716 --> 00:16:43.786
edit the file, or take both

00:16:43.786 --> 00:16:45.406
changes if there are better ways

00:16:45.406 --> 00:16:46.236
to combine the work.

00:16:48.576 --> 00:16:50.376
In this case, we see that two

00:16:50.376 --> 00:16:51.976
users have both made changes on

00:16:51.976 --> 00:16:52.786
the same line.

00:16:53.896 --> 00:16:55.106
It seems that the local changes

00:16:55.106 --> 00:16:56.936
are a bit more up to date, so

00:16:56.936 --> 00:16:58.406
the easiest way to resolve this

00:16:58.486 --> 00:16:59.776
is to take the left changes.

00:17:01.526 --> 00:17:02.806
Now, with all the conflicts

00:17:02.806 --> 00:17:04.516
resolved, the pull can continue.

00:17:05.705 --> 00:17:06.935
If this were a merge pull,

00:17:07.566 --> 00:17:08.626
conflicts are all resolved at

00:17:08.626 --> 00:17:09.866
once and the resolution is

00:17:09.866 --> 00:17:11.256
stored in the merge commit.

00:17:12.796 --> 00:17:14.556
If we were doing a pull rebase,

00:17:14.896 --> 00:17:15.955
it is possible to have to

00:17:15.955 --> 00:17:17.425
resolve a set of conflicts

00:17:17.756 --> 00:17:19.226
multiple times as each

00:17:19.226 --> 00:17:21.146
individual commit is replayed on

00:17:21.266 --> 00:17:23.056
top of your coworker's changes.

00:17:23.906 --> 00:17:25.086
The resolution information in

00:17:25.086 --> 00:17:27.296
this case is stored on the

00:17:27.296 --> 00:17:29.576
original commit as if it never

00:17:29.576 --> 00:17:29.976
occurred.

00:17:31.536 --> 00:17:32.656
Now, because conflicts can be a

00:17:32.656 --> 00:17:34.316
bit annoying to resolve, it can

00:17:34.316 --> 00:17:36.206
be very useful to anticipate

00:17:36.206 --> 00:17:37.956
conflicts and avoid having them

00:17:37.956 --> 00:17:39.156
happen in the first place.

00:17:40.496 --> 00:17:41.566
In Xcode Source Control

00:17:41.566 --> 00:17:43.746
Preferences, the Change bar can

00:17:43.916 --> 00:17:45.166
optionally be shown to show

00:17:45.166 --> 00:17:47.416
coworker's changes as they push

00:17:47.416 --> 00:17:47.636
them.

00:17:50.536 --> 00:17:52.806
This makes it easy to tell what

00:17:52.806 --> 00:17:54.406
part of a file is out of date.

00:17:55.046 --> 00:17:56.226
The changes are fetched from the

00:17:56.226 --> 00:17:57.886
server at a 10-minute interval.

00:18:00.036 --> 00:18:02.396
Here we see the Change bar that

00:18:02.396 --> 00:18:04.726
we saw before, when upstream

00:18:04.726 --> 00:18:07.366
changes are showing, turns to

00:18:07.366 --> 00:18:09.256
red to indicate where our

00:18:09.436 --> 00:18:10.436
coworkers have been making

00:18:10.436 --> 00:18:10.956
changes.

00:18:11.846 --> 00:18:13.536
This indicates a conflict will

00:18:13.536 --> 00:18:14.976
have to be resolved to

00:18:14.976 --> 00:18:16.446
reintegrate the local changes.

00:18:17.156 --> 00:18:18.706
In many cases it can be easier

00:18:18.706 --> 00:18:20.446
to pull before making changes to

00:18:20.446 --> 00:18:22.356
a file that already has changes

00:18:22.356 --> 00:18:22.956
upstream.

00:18:24.496 --> 00:18:25.926
Some details about the

00:18:25.926 --> 00:18:27.786
conflicting commit can be seen

00:18:27.826 --> 00:18:29.076
by clicking on the Change bar.

00:18:32.416 --> 00:18:33.726
All of the hosting solutions

00:18:33.796 --> 00:18:35.676
supported in Xcode also support

00:18:35.776 --> 00:18:37.926
two other common workflows, pull

00:18:37.926 --> 00:18:39.376
requests and forks.

00:18:40.266 --> 00:18:41.686
These are based on Git concepts

00:18:41.686 --> 00:18:43.546
and features, but are distinct

00:18:43.586 --> 00:18:44.616
from Git's feature set.

00:18:45.896 --> 00:18:47.556
Pull requests are a method for

00:18:47.556 --> 00:18:48.586
doing code reviews.

00:18:49.846 --> 00:18:51.306
It is usually best practice to

00:18:51.306 --> 00:18:52.596
do all disruptive work to a

00:18:52.596 --> 00:18:54.166
project on a branch.

00:18:54.616 --> 00:18:55.996
This is an isolated line of

00:18:55.996 --> 00:18:58.256
commit history that is separate

00:18:58.386 --> 00:18:59.576
from the other history of a

00:18:59.576 --> 00:19:00.146
project.

00:19:01.496 --> 00:19:03.666
Just like when pulling, the work

00:19:03.666 --> 00:19:04.976
done on a branch will diverge

00:19:04.976 --> 00:19:06.306
from the main branch of code.

00:19:06.626 --> 00:19:08.116
So a merge will be necessary to

00:19:08.116 --> 00:19:10.196
resolve any conflicts and

00:19:10.196 --> 00:19:11.186
reintegrate the work.

00:19:12.356 --> 00:19:13.956
A pull request, shown here in

00:19:13.956 --> 00:19:16.236
yellow, is a way to see what

00:19:16.236 --> 00:19:18.336
will be merged and allow the

00:19:18.336 --> 00:19:20.126
commenting on that work by other

00:19:20.126 --> 00:19:20.756
individuals.

00:19:21.426 --> 00:19:22.456
Often this will mean making

00:19:22.456 --> 00:19:24.136
additional changes on the branch

00:19:24.476 --> 00:19:25.776
before merging and integrating

00:19:25.776 --> 00:19:25.916
it.

00:19:27.046 --> 00:19:28.476
Since pull requests are built on

00:19:28.476 --> 00:19:30.246
Git's branching model, you can

00:19:30.246 --> 00:19:31.836
always locally check out that

00:19:31.836 --> 00:19:33.326
branch from the source control

00:19:33.326 --> 00:19:35.196
navigator in Xcode when

00:19:35.196 --> 00:19:35.766
reviewing it.

00:19:36.746 --> 00:19:38.036
This lets you build and test the

00:19:38.036 --> 00:19:39.426
work on your local machine

00:19:39.866 --> 00:19:42.016
before approving it and merging

00:19:42.016 --> 00:19:43.346
it back into the main branch.

00:19:44.756 --> 00:19:46.316
Forks take advantage of the

00:19:46.316 --> 00:19:48.076
distributed nature of Git.

00:19:49.296 --> 00:19:50.646
Just like how the server copy of

00:19:50.646 --> 00:19:52.386
the repository and the local

00:19:52.386 --> 00:19:54.356
copy on your machine are two

00:19:54.356 --> 00:19:55.996
copies of the same repository,

00:19:56.726 --> 00:19:58.466
you can create multiple copies

00:19:58.466 --> 00:20:00.006
of a repository on the same

00:20:00.006 --> 00:20:00.526
server.

00:20:01.616 --> 00:20:04.346
This is often useful when there

00:20:04.346 --> 00:20:06.066
is a canonical copy that is

00:20:06.106 --> 00:20:08.416
tightly managed, such as a large

00:20:08.966 --> 00:20:10.126
open-source project.

00:20:11.156 --> 00:20:12.496
A fork can be useful for making

00:20:12.496 --> 00:20:14.506
experimental changes without

00:20:14.506 --> 00:20:15.946
disrupting the main copy.

00:20:16.856 --> 00:20:18.056
This can be more useful than a

00:20:18.056 --> 00:20:19.756
branch when there are many

00:20:19.756 --> 00:20:21.786
contributors, because each fork

00:20:21.786 --> 00:20:23.436
can have its own named branches,

00:20:23.856 --> 00:20:25.556
minimizing the amount of noise

00:20:25.626 --> 00:20:26.886
in the main repository.

00:20:27.886 --> 00:20:29.576
Just like the local copy, the

00:20:29.576 --> 00:20:30.836
fork can be synced with the main

00:20:30.836 --> 00:20:31.296
copy.

00:20:31.906 --> 00:20:33.186
This is often done in the form

00:20:33.186 --> 00:20:34.916
of PR's and is where pull

00:20:34.916 --> 00:20:36.196
requests get their name.

00:20:36.946 --> 00:20:38.516
Xcode and Git allow setting

00:20:38.646 --> 00:20:41.186
multiple remotes on your local

00:20:41.186 --> 00:20:41.936
repository.

00:20:42.526 --> 00:20:43.766
So you can sync with both the

00:20:43.766 --> 00:20:46.186
name and the fork from the same

00:20:46.186 --> 00:20:47.366
local copy on your machine.

00:20:50.126 --> 00:20:51.606
So that covers the basics of

00:20:51.606 --> 00:20:53.326
using source control and Git in

00:20:53.326 --> 00:20:53.766
Xcode.

00:20:54.866 --> 00:20:55.766
We've seen how to use Git

00:20:55.766 --> 00:20:57.556
locally to manage your project.

00:20:58.376 --> 00:20:59.596
We've taken a look at making and

00:20:59.596 --> 00:21:01.346
viewing changes in your project.

00:21:02.346 --> 00:21:03.996
We also saw how repositories can

00:21:03.996 --> 00:21:05.226
be hosted and changes

00:21:05.226 --> 00:21:06.266
synchronized when working with

00:21:06.336 --> 00:21:06.836
teams.

00:21:07.396 --> 00:21:08.816
And when syncing those changes,

00:21:09.276 --> 00:21:10.966
how you resolve and even avoid

00:21:10.966 --> 00:21:11.656
conflicts.

00:21:12.246 --> 00:21:13.956
And last, we took a brief look

00:21:14.156 --> 00:21:15.166
at some additional hosting

00:21:15.166 --> 00:21:17.176
features like pull requests and

00:21:17.176 --> 00:21:17.656
forks.

00:21:19.746 --> 00:21:20.646
More information for this

00:21:20.646 --> 00:21:21.676
session is available at

00:21:21.676 --> 00:21:23.106
Developer.apple.com.

00:21:24.596 --> 00:21:25.366
And thank you.