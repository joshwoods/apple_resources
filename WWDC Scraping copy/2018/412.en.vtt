WEBVTT

00:00:07.516 --> 00:00:15.500
[ Music ]

00:00:28.016 --> 00:00:29.116
[ Applause ]

00:00:29.116 --> 00:00:31.336
>> Hello and welcome to advanced

00:00:31.336 --> 00:00:33.336
debugging with Xcode and LLDB.

00:00:33.916 --> 00:00:34.986
I'm Chris Miles, one of the

00:00:34.986 --> 00:00:36.266
engineering managers on the

00:00:36.266 --> 00:00:37.336
Xcode team, and I'm really

00:00:37.336 --> 00:00:38.436
excited to be here today.

00:00:38.856 --> 00:00:39.876
Now, I'm well aware there's

00:00:39.876 --> 00:00:41.336
nothing between you and Beer

00:00:41.336 --> 00:00:42.996
Bash but our session, so thanks

00:00:42.996 --> 00:00:43.476
for coming.

00:00:43.646 --> 00:00:44.936
We'll get you out on time, but

00:00:44.936 --> 00:00:46.066
we've packed in lots of great

00:00:46.066 --> 00:00:47.236
content for you guys today.

00:00:47.626 --> 00:00:49.366
So let's get straight into it.

00:00:49.506 --> 00:00:50.846
I'd like to start by talking

00:00:50.846 --> 00:00:52.176
about Swift debugging

00:00:52.176 --> 00:00:52.846
reliability.

00:00:53.316 --> 00:00:54.596
The main point to make here is

00:00:54.596 --> 00:00:55.746
that there's good news.

00:00:56.026 --> 00:00:57.426
The team has landed a lot of

00:00:57.426 --> 00:01:00.016
reliability fixes in Xcode 10.

00:01:00.996 --> 00:01:02.626
The -- thank you.

00:01:04.516 --> 00:01:08.066
[ Applause ]

00:01:08.566 --> 00:01:09.936
The compiler and debugger teams

00:01:09.936 --> 00:01:11.146
have been able to smooth over

00:01:11.146 --> 00:01:12.666
many of the rough edges that

00:01:12.666 --> 00:01:14.056
were causing Swift debugging

00:01:14.056 --> 00:01:14.496
headaches.

00:01:14.726 --> 00:01:15.756
I'd like to tell you about a

00:01:15.756 --> 00:01:17.096
couple of them.

00:01:17.566 --> 00:01:19.266
In some cases, usually with more

00:01:19.266 --> 00:01:20.506
complex projects or build

00:01:20.506 --> 00:01:22.466
configurations, attempts to po

00:01:22.466 --> 00:01:23.566
an object or evaluate an

00:01:23.566 --> 00:01:25.236
expression in the console may

00:01:25.646 --> 00:01:27.466
have failed with an error such

00:01:27.466 --> 00:01:27.986
as this.

00:01:28.186 --> 00:01:30.306
The AST context that this error

00:01:30.306 --> 00:01:32.266
refers to is an expression

00:01:32.266 --> 00:01:34.196
context that LLDB needs to

00:01:34.196 --> 00:01:35.456
reconstruct the state of the

00:01:35.456 --> 00:01:36.716
compiler from when it built your

00:01:36.716 --> 00:01:37.216
project.

00:01:37.656 --> 00:01:39.086
And, in some cases, such as if

00:01:39.086 --> 00:01:40.686
there are module conflicts, the

00:01:40.906 --> 00:01:42.446
expression context cannot be

00:01:42.446 --> 00:01:44.196
reliably reconstructed, and your

00:01:44.196 --> 00:01:45.316
expression would fail.

00:01:46.386 --> 00:01:47.956
In Xcode 10, LLDB have

00:01:47.956 --> 00:01:49.486
implemented a fallback mechanism

00:01:49.486 --> 00:01:50.576
for when this problem case

00:01:50.576 --> 00:01:51.086
occurs.

00:01:51.366 --> 00:01:52.836
So if it can't reconstruct the

00:01:52.836 --> 00:01:54.496
context, it will fall back to

00:01:54.496 --> 00:01:56.476
creating a simpler context for

00:01:56.476 --> 00:01:58.146
the current frame and use that

00:01:58.146 --> 00:01:59.406
to evaluate your expression.

00:02:00.636 --> 00:02:02.216
Another failure case that some

00:02:02.216 --> 00:02:03.766
developers may have had was due

00:02:03.766 --> 00:02:05.286
to the debugger being unable to

00:02:05.286 --> 00:02:07.406
materialize variable types while

00:02:07.406 --> 00:02:07.826
debugging.

00:02:08.806 --> 00:02:09.946
This would manifest itself in

00:02:09.946 --> 00:02:11.216
Xcode looking something like

00:02:11.266 --> 00:02:11.626
this.

00:02:11.986 --> 00:02:12.866
Where on the left, you can see

00:02:12.866 --> 00:02:14.486
the variables' view shows all

00:02:14.486 --> 00:02:15.586
the names of the variables in

00:02:15.586 --> 00:02:17.216
the frame but there'd be no type

00:02:17.216 --> 00:02:18.626
information or values visible.

00:02:18.966 --> 00:02:19.966
And attempts to print out the

00:02:19.966 --> 00:02:22.086
value of a variable would fail

00:02:22.086 --> 00:02:23.116
with errors like these.

00:02:23.596 --> 00:02:26.216
Now, thanks again, in big part

00:02:26.216 --> 00:02:27.386
to your bug reports, the team

00:02:27.386 --> 00:02:28.806
has been able to track down and

00:02:28.806 --> 00:02:30.706
fix these many edge cases where

00:02:30.706 --> 00:02:32.386
debug information was not being

00:02:32.386 --> 00:02:33.366
reliably generated.

00:02:33.826 --> 00:02:34.916
So I want to thank you guys on

00:02:34.916 --> 00:02:36.326
behalf of the team again for

00:02:36.326 --> 00:02:38.076
filing issues when you've

00:02:38.226 --> 00:02:40.246
encountered any problems while

00:02:40.246 --> 00:02:40.716
debugging.

00:02:41.206 --> 00:02:42.366
And if you find any more

00:02:42.366 --> 00:02:44.226
problems with Xcode 10 while

00:02:44.226 --> 00:02:45.696
debugging a project, please

00:02:45.696 --> 00:02:47.136
continue to file bug reports for

00:02:47.136 --> 00:02:47.376
us.

00:02:47.376 --> 00:02:48.376
For those of you at the

00:02:48.376 --> 00:02:49.696
conference, if you find a

00:02:49.696 --> 00:02:50.536
problem with your project,

00:02:50.616 --> 00:02:51.776
please come along to the labs.

00:02:51.876 --> 00:02:54.236
We have an Xcode debugging and

00:02:54.236 --> 00:02:55.796
profiling lab tomorrow morning

00:02:55.796 --> 00:02:56.656
from nine till 12.

00:02:57.156 --> 00:02:58.266
Bring your project and ask for

00:02:58.266 --> 00:02:59.816
an Xcode debugger engineer or an

00:02:59.816 --> 00:03:01.106
LLDB engineer, as they would

00:03:01.106 --> 00:03:02.336
love to see your projects.

00:03:02.866 --> 00:03:06.596
Now I'd like to move on to

00:03:06.596 --> 00:03:08.256
telling you about some of my

00:03:08.366 --> 00:03:09.736
favorite debugging tips and

00:03:09.736 --> 00:03:11.476
tricks that I like to use to

00:03:11.476 --> 00:03:12.856
enhance my debugging webflow.

00:03:13.456 --> 00:03:14.346
In fact, I'm not just going to

00:03:14.346 --> 00:03:15.626
tell you about it, I'd like to

00:03:15.626 --> 00:03:18.626
show you with a demo.

00:03:19.508 --> 00:03:21.508
[ Applause ]

00:03:26.116 --> 00:03:27.656
Now the project we'll be using

00:03:27.656 --> 00:03:29.396
today is an iOS app called Solar

00:03:29.396 --> 00:03:29.816
System.

00:03:30.006 --> 00:03:31.046
And you may have seen Solar

00:03:31.046 --> 00:03:33.136
System appear in such keynotes

00:03:33.136 --> 00:03:34.746
as the Keynote and State of the

00:03:34.746 --> 00:03:35.176
Union.

00:03:35.246 --> 00:03:36.916
We're going to be debugging an

00:03:36.916 --> 00:03:38.696
area of the Solar System called

00:03:38.696 --> 00:03:39.356
Moon Jumper.

00:03:40.426 --> 00:03:41.526
Moon Jumper allows the user to

00:03:41.526 --> 00:03:42.916
hold a phone in the hand and

00:03:42.916 --> 00:03:43.646
jump in the air.

00:03:44.456 --> 00:03:45.686
The app measures the force of

00:03:45.686 --> 00:03:46.986
your jump and then translates

00:03:46.986 --> 00:03:49.006
that to moon gravity and shows

00:03:49.006 --> 00:03:50.276
you a visual representation of

00:03:50.276 --> 00:03:51.266
how high you would have jumped

00:03:51.296 --> 00:03:52.246
if you were standing on the

00:03:52.246 --> 00:03:52.546
moon.

00:03:53.466 --> 00:03:55.306
You can set a bar to choose a

00:03:55.306 --> 00:03:56.796
limit, so you can try and

00:03:56.796 --> 00:03:58.046
challenge yourself to jump as

00:03:58.046 --> 00:03:59.336
high as the bar, in terms of

00:03:59.336 --> 00:03:59.916
moon gravity.

00:04:01.076 --> 00:04:02.986
Now in making some enhancements

00:04:02.986 --> 00:04:05.046
to Moon Jumper, such as some

00:04:05.046 --> 00:04:06.886
visual enhancements and a

00:04:06.886 --> 00:04:08.816
GamePlay mode, while we're not

00:04:08.816 --> 00:04:10.866
ready to ship, we've done a test

00:04:10.926 --> 00:04:12.156
pass and come up with a list of

00:04:12.226 --> 00:04:14.506
bugs that we need to look at.

00:04:14.756 --> 00:04:15.886
So these are the bugs for Solar

00:04:15.886 --> 00:04:16.286
System.

00:04:16.495 --> 00:04:18.026
I'll be tackling the iOS bugs

00:04:18.026 --> 00:04:19.516
first, and later on, Sebastian

00:04:19.516 --> 00:04:21.076
will come out and solve the

00:04:21.076 --> 00:04:22.256
macOS bugs.

00:04:22.716 --> 00:04:24.146
Now, as it says, none of us are

00:04:24.146 --> 00:04:25.476
getting out of here to the Beer

00:04:25.476 --> 00:04:26.876
Bash until we fix all of these

00:04:26.876 --> 00:04:28.706
bugs, so there's nothing more

00:04:28.706 --> 00:04:29.656
exhilarating than peer

00:04:29.656 --> 00:04:31.236
programming with 2000 people.

00:04:31.746 --> 00:04:34.066
Let's get straight into it and

00:04:34.066 --> 00:04:35.486
start with the first bug.

00:04:35.776 --> 00:04:37.036
The jump failure animation does

00:04:37.036 --> 00:04:38.226
not match the specification.

00:04:38.986 --> 00:04:39.936
So what's that talking about?

00:04:40.716 --> 00:04:41.936
Well, switching to the simulator

00:04:42.186 --> 00:04:42.836
because we're using the

00:04:42.836 --> 00:04:44.486
simulator to speed up debugging

00:04:44.486 --> 00:04:45.596
and development.

00:04:45.866 --> 00:04:46.996
I've wired up a tap just to

00:04:46.996 --> 00:04:48.466
recognize them, so every time I

00:04:48.466 --> 00:04:49.776
tap the astronaut he performs a

00:04:49.776 --> 00:04:51.156
successful jump to the height of

00:04:51.196 --> 00:04:51.856
the bar.

00:04:52.436 --> 00:04:53.886
Now this bug is talking about

00:04:53.886 --> 00:04:54.936
the case where the astronaut

00:04:54.986 --> 00:04:55.866
doesn't reach the height of the

00:04:55.866 --> 00:04:57.096
bar, so let's reproduce that.

00:04:57.856 --> 00:04:59.086
Switching to the editor, I'm

00:04:59.376 --> 00:05:00.656
going to use the jump bar to

00:05:00.656 --> 00:05:02.296
navigate to the jump function

00:05:02.706 --> 00:05:03.986
and set a breakpoint at the

00:05:03.986 --> 00:05:04.816
start of that function.

00:05:05.526 --> 00:05:06.786
Now I'll tap the astronaut, and

00:05:07.076 --> 00:05:08.576
we'll start a jump and now we

00:05:08.576 --> 00:05:09.646
are paused in the debugger.

00:05:10.536 --> 00:05:11.876
The first thing to point out is

00:05:11.876 --> 00:05:13.136
actually up here in the tab bar.

00:05:13.686 --> 00:05:14.876
We now have four tabs.

00:05:14.876 --> 00:05:16.226
This debug tab was just created

00:05:16.226 --> 00:05:18.096
for us by Xcode, and for those

00:05:18.096 --> 00:05:19.426
of you that like working in tabs

00:05:19.426 --> 00:05:21.236
like I do, this is an Xcode

00:05:21.236 --> 00:05:22.416
behavior that you can define.

00:05:23.516 --> 00:05:26.506
[ Applause ]

00:05:27.006 --> 00:05:28.666
So to do that you use the Xcode

00:05:28.666 --> 00:05:30.356
menu to edit behaviors and that

00:05:30.356 --> 00:05:32.246
takes you to the preferences in

00:05:32.246 --> 00:05:33.216
the behavior's tab.

00:05:33.216 --> 00:05:34.796
And here you can configure many

00:05:34.796 --> 00:05:35.316
behaviors.

00:05:35.686 --> 00:05:36.976
In this case, you would need to

00:05:36.976 --> 00:05:38.966
configure the pause's behavior

00:05:39.306 --> 00:05:40.356
in the running section.

00:05:40.746 --> 00:05:41.866
And this is the behavior that

00:05:41.866 --> 00:05:44.666
will be actioned when Xcode

00:05:44.666 --> 00:05:45.526
pauses in the debugger.

00:05:45.636 --> 00:05:46.506
So you can see here I've

00:05:46.506 --> 00:05:47.666
configured it to show a tab

00:05:47.736 --> 00:05:49.366
named debug, and Xcode will

00:05:49.456 --> 00:05:50.726
always switch to that the tab

00:05:50.726 --> 00:05:51.826
when pausing in the debugger.

00:05:52.236 --> 00:05:53.486
So that's great for users who

00:05:53.486 --> 00:05:54.916
like to work in tabs like I do.

00:05:55.696 --> 00:05:56.726
Now switching back to the code,

00:05:56.726 --> 00:05:57.446
we can see that there's a

00:05:57.446 --> 00:05:58.876
condition based on this property

00:05:59.126 --> 00:06:00.816
did reach selected height, so

00:06:00.816 --> 00:06:02.306
I'd like to have a look at the

00:06:02.306 --> 00:06:03.206
value of this property.

00:06:03.596 --> 00:06:04.916
So switching to the debug

00:06:04.916 --> 00:06:07.436
console, I can use po to look at

00:06:07.436 --> 00:06:09.326
the value of that property and

00:06:09.396 --> 00:06:13.746
it's currently set to true.

00:06:13.746 --> 00:06:15.176
So the [inaudible] always sets

00:06:15.226 --> 00:06:16.386
this to true, and I'd like to

00:06:16.386 --> 00:06:17.336
change it to false so we can

00:06:17.336 --> 00:06:18.146
reproduce the bug.

00:06:18.146 --> 00:06:20.126
Now I could go to the code and

00:06:20.126 --> 00:06:21.896
modify it, tap just to recognize

00:06:21.896 --> 00:06:23.316
it to set it to false, but I

00:06:23.316 --> 00:06:24.876
don't like to make changes to my

00:06:24.876 --> 00:06:26.626
code just for debugging purposes

00:06:26.736 --> 00:06:27.596
if I can avoid it.

00:06:28.096 --> 00:06:29.846
So in this case, what I can do

00:06:29.846 --> 00:06:31.126
is use the debugger to do it for

00:06:31.126 --> 00:06:31.306
me.

00:06:31.716 --> 00:06:32.666
I can use the expression

00:06:32.666 --> 00:06:33.076
command.

00:06:33.436 --> 00:06:35.756
And here I can give it any Swift

00:06:35.756 --> 00:06:38.066
expression, such as did reach

00:06:38.066 --> 00:06:39.476
selected height equals false,

00:06:39.926 --> 00:06:41.826
and it will evaluate that and

00:06:41.826 --> 00:06:42.386
execute it.

00:06:42.516 --> 00:06:43.906
So now, we can see that this

00:06:44.036 --> 00:06:45.496
property has indeed changed to

00:06:45.496 --> 00:06:45.926
false.

00:06:46.486 --> 00:06:48.096
And if I step over the line

00:06:48.096 --> 00:06:49.286
using the debugger, we can see

00:06:49.386 --> 00:06:50.286
that we've entered the false

00:06:50.286 --> 00:06:51.116
side of the branch.

00:06:51.686 --> 00:06:52.946
So now, when we continue, we can

00:06:52.946 --> 00:06:54.496
see that the astronaut doesn't

00:06:54.496 --> 00:06:55.396
quite reach the height of the

00:06:55.396 --> 00:06:56.736
bar and falls down.

00:06:57.256 --> 00:06:58.136
So that's the case we're trying

00:06:58.136 --> 00:06:58.796
to reproduce.

00:06:59.236 --> 00:07:00.626
I'd like this to happen every

00:07:00.626 --> 00:07:02.176
time I tap on the astronaut, and

00:07:02.176 --> 00:07:03.696
I don't want to have to pause

00:07:03.696 --> 00:07:04.916
and type this expression each

00:07:04.916 --> 00:07:06.336
time, so what I'm going to do is

00:07:06.336 --> 00:07:08.046
configure this breakpoint to do

00:07:08.046 --> 00:07:08.596
that for me.

00:07:09.336 --> 00:07:10.156
If I right click on the

00:07:10.156 --> 00:07:12.216
breakpoint, I can select edit

00:07:12.216 --> 00:07:13.676
breakpoint and this gives me a

00:07:13.676 --> 00:07:15.616
popover window with some

00:07:15.616 --> 00:07:17.346
configuration to customize how

00:07:17.346 --> 00:07:18.486
the breakpoint behaves.

00:07:18.486 --> 00:07:20.186
I'm going to select the debugger

00:07:20.186 --> 00:07:22.686
command action and enter the

00:07:22.686 --> 00:07:24.366
expression command with the

00:07:24.366 --> 00:07:26.226
command that I used in the debug

00:07:26.226 --> 00:07:28.696
console and make this an

00:07:28.696 --> 00:07:30.016
auto-continuing breakpoint.

00:07:30.326 --> 00:07:31.596
So what we've configured here is

00:07:31.596 --> 00:07:33.066
a breakpoint that once execution

00:07:33.236 --> 00:07:34.136
enters this function, the

00:07:34.136 --> 00:07:35.956
breakpoint will trigger execute

00:07:35.996 --> 00:07:37.216
this command for us to change

00:07:37.216 --> 00:07:38.156
the value of the property and

00:07:38.156 --> 00:07:39.306
then automatically continue.

00:07:40.006 --> 00:07:40.986
So now, every time I tap the

00:07:40.986 --> 00:07:42.556
astronaut, he'll perform this

00:07:42.626 --> 00:07:44.226
unsuccessful jump and fall back

00:07:44.276 --> 00:07:44.506
down.

00:07:45.206 --> 00:07:46.146
Now what's the problem that we

00:07:46.146 --> 00:07:47.136
need to fix?

00:07:47.476 --> 00:07:48.576
The specification said that

00:07:48.576 --> 00:07:49.446
after falling down, the

00:07:49.446 --> 00:07:50.806
astronaut should stand back up

00:07:50.806 --> 00:07:52.486
again, so let's fix that now.

00:07:53.196 --> 00:07:55.486
I'm going to navigate to this

00:07:55.486 --> 00:07:56.976
function update UI for jump

00:07:56.976 --> 00:07:58.576
failed, and we can see this

00:07:58.576 --> 00:08:00.256
function uses UIKit Dynamics to

00:08:00.256 --> 00:08:02.216
simulate failing the jump.

00:08:02.216 --> 00:08:04.916
So it starts by creating a UI

00:08:04.956 --> 00:08:06.756
Dynamic animator and then calls

00:08:06.756 --> 00:08:07.976
a function to add behaviors to

00:08:07.976 --> 00:08:09.056
create the physics effects.

00:08:09.516 --> 00:08:10.766
And then the astronaut is meant

00:08:10.766 --> 00:08:12.756
to be reoriented and recentered

00:08:13.036 --> 00:08:14.866
in the dynamic animator did

00:08:15.106 --> 00:08:17.016
pause delegate callback.

00:08:17.386 --> 00:08:18.546
Now we can scroll down and see

00:08:18.546 --> 00:08:20.016
that that delegate callback is

00:08:20.016 --> 00:08:21.686
implemented successfully, so

00:08:21.686 --> 00:08:22.336
that looks fine.

00:08:22.996 --> 00:08:23.856
But I'm noticing that no

00:08:23.856 --> 00:08:25.516
delegate is set on this object,

00:08:26.416 --> 00:08:28.956
so if I add that code in here, I

00:08:28.956 --> 00:08:30.016
think this is the change I'll

00:08:30.016 --> 00:08:31.016
need to fix the problem.

00:08:31.336 --> 00:08:32.676
Now, at this point, I can

00:08:32.976 --> 00:08:34.806
recompile and rerun and try and

00:08:34.806 --> 00:08:36.866
verify my fix, but I'd like to

00:08:36.866 --> 00:08:38.275
shortcut that whole cycle if I

00:08:38.275 --> 00:08:38.556
can.

00:08:38.765 --> 00:08:40.476
So what I'm going to do is use a

00:08:40.476 --> 00:08:41.986
breakpoint to inject this change

00:08:41.986 --> 00:08:43.806
for me so I can see if this does

00:08:43.806 --> 00:08:45.486
fix the problem quickly and

00:08:45.486 --> 00:08:46.066
conveniently.

00:08:46.586 --> 00:08:47.556
So I'll create a break point,

00:08:47.916 --> 00:08:49.956
double click to bring up the

00:08:49.956 --> 00:08:51.836
edit window, which is a shortcut

00:08:51.836 --> 00:08:52.976
for bringing up the edit window.

00:08:52.976 --> 00:08:54.636
And then, once again, use a

00:08:54.636 --> 00:08:55.846
debugger command action to

00:08:55.846 --> 00:08:57.576
inject an expression, and I can

00:08:57.576 --> 00:08:59.696
type in that line of code that I

00:08:59.696 --> 00:09:01.396
think will fix the problem and

00:09:01.396 --> 00:09:01.836
make this an [inaudible]

00:09:01.836 --> 00:09:02.986
continuing breakpoint.

00:09:03.506 --> 00:09:04.406
So what I've configured here,

00:09:04.406 --> 00:09:05.356
even though I've made the change

00:09:05.356 --> 00:09:06.096
in the code, I haven't

00:09:06.096 --> 00:09:07.046
recompiled, of course.

00:09:07.216 --> 00:09:09.036
So I'm using the custom

00:09:09.036 --> 00:09:10.536
breakpoint to inject that change

00:09:10.536 --> 00:09:12.376
for me so I can test it using

00:09:12.376 --> 00:09:13.916
the current live application.

00:09:14.336 --> 00:09:15.586
So now, if I tap the astronaut,

00:09:15.656 --> 00:09:17.076
he performs this unsuccessful

00:09:17.076 --> 00:09:18.626
jump and falls over and stands

00:09:18.626 --> 00:09:19.736
back up again, so it looks like

00:09:19.736 --> 00:09:20.536
we fixed the problem.

00:09:20.536 --> 00:09:21.336
I like this effect, so I'm going

00:09:21.336 --> 00:09:21.946
to do it again.

00:09:22.516 --> 00:09:28.146
[ Applause ]

00:09:28.646 --> 00:09:30.496
Now let me just launch notes

00:09:30.496 --> 00:09:30.966
again.

00:09:31.716 --> 00:09:34.126
And we can tick off the first

00:09:34.836 --> 00:09:35.966
bug as fixed.

00:09:36.686 --> 00:09:38.116
Nothing better than checking off

00:09:38.366 --> 00:09:38.956
fixed bugs.

00:09:39.536 --> 00:09:40.736
Now the next three bugs are to

00:09:40.736 --> 00:09:42.376
do with the new GamePlay mode

00:09:42.376 --> 00:09:43.096
I've been working on.

00:09:43.386 --> 00:09:44.446
So I'm going to press play in

00:09:44.446 --> 00:09:45.656
the simulator to show you that,

00:09:45.856 --> 00:09:47.316
and the challenge here is to try

00:09:47.316 --> 00:09:48.716
and jump higher than the bar 10

00:09:48.716 --> 00:09:49.196
times.

00:09:49.506 --> 00:09:50.726
And the bar starts low and

00:09:50.726 --> 00:09:51.636
raises each time.

00:09:53.156 --> 00:09:54.736
And you can also see some score

00:09:54.736 --> 00:09:55.906
labels have been added to the

00:09:55.906 --> 00:09:56.446
top.

00:09:56.536 --> 00:09:57.736
So if I tap the astronaut,

00:09:57.896 --> 00:09:58.966
you'll see he's still configured

00:09:58.966 --> 00:10:00.436
to perform an unsuccessful jump,

00:10:00.916 --> 00:10:02.496
and then the attempts label at

00:10:02.496 --> 00:10:03.606
the top should have incremented

00:10:03.846 --> 00:10:04.336
but it didn't.

00:10:04.796 --> 00:10:06.076
And that's the first bug we've

00:10:06.076 --> 00:10:07.086
got here, where these labels

00:10:07.086 --> 00:10:08.176
flash but do not change.

00:10:08.386 --> 00:10:10.036
We've also got an issue with the

00:10:10.036 --> 00:10:11.506
end-of-game state not being

00:10:11.506 --> 00:10:13.256
handled properly and a problem

00:10:13.256 --> 00:10:14.626
with the layout of those score

00:10:14.626 --> 00:10:15.626
and attempts labels, but we'll

00:10:15.626 --> 00:10:16.466
come back to those.

00:10:16.986 --> 00:10:18.546
So returning to this bug, if you

00:10:18.546 --> 00:10:19.566
didn't notice it, let me tap the

00:10:19.566 --> 00:10:20.926
astronaut again and keep an eye

00:10:20.926 --> 00:10:22.236
up on the top on the attempts

00:10:22.236 --> 00:10:22.566
label.

00:10:23.216 --> 00:10:24.716
You'll see that it does flash

00:10:24.716 --> 00:10:25.756
but it doesn't update.

00:10:25.756 --> 00:10:27.346
So what this tells me is that

00:10:27.346 --> 00:10:28.896
the label is getting a value set

00:10:28.896 --> 00:10:29.846
on it because we're seeing the

00:10:29.846 --> 00:10:31.616
transition animation but the

00:10:31.616 --> 00:10:32.556
value is incorrect.

00:10:32.776 --> 00:10:34.136
So I'd like to find the code

00:10:34.436 --> 00:10:36.346
that is modifying this label to

00:10:36.346 --> 00:10:37.606
have a look at what the logic is

00:10:37.606 --> 00:10:38.106
at that point.

00:10:38.746 --> 00:10:40.316
So we note UI label is getting

00:10:40.316 --> 00:10:42.016
the text property changed, so

00:10:42.016 --> 00:10:42.996
what I'm going to do is switch

00:10:42.996 --> 00:10:44.106
to the breakpoint navigator and

00:10:44.406 --> 00:10:45.736
down at the bottom here select

00:10:45.796 --> 00:10:47.616
this plus button to create one

00:10:47.616 --> 00:10:49.386
of many specialized breakpoints.

00:10:49.386 --> 00:10:50.896
You can see we've got

00:10:51.026 --> 00:10:52.246
breakpoints for Swift errors and

00:10:52.246 --> 00:10:53.796
exceptions and even test values,

00:10:54.106 --> 00:10:55.006
but for this case, I'm going to

00:10:55.006 --> 00:10:56.226
use a symbolic breakpoint.

00:10:56.896 --> 00:10:58.436
So that creates a new breakpoint

00:10:58.436 --> 00:10:59.776
and brings up the editor for

00:11:00.046 --> 00:11:01.626
that, and here we can enter any

00:11:02.306 --> 00:11:04.226
function or method name such as

00:11:04.226 --> 00:11:06.706
UI labels, set text, which we'll

00:11:06.706 --> 00:11:09.066
need in this case, and we enter

00:11:09.066 --> 00:11:10.966
it in Objective-C format because

00:11:11.016 --> 00:11:12.306
UIKit is in Objective-C

00:11:12.306 --> 00:11:12.806
framework.

00:11:13.546 --> 00:11:14.456
The thing to point out, if I

00:11:14.456 --> 00:11:16.516
dismiss that, is that below the

00:11:16.786 --> 00:11:18.906
breakpoint, there is a

00:11:18.906 --> 00:11:20.586
[inaudible] added and this is

00:11:20.586 --> 00:11:21.506
the feedback from the debugger

00:11:21.506 --> 00:11:22.696
to tell us that it was able to

00:11:22.696 --> 00:11:24.176
resolve this breakpoint to one

00:11:24.176 --> 00:11:25.586
location in UIKit, Core.

00:11:26.136 --> 00:11:27.336
Some symbols may result in

00:11:27.336 --> 00:11:28.466
multiple locations, and you

00:11:28.466 --> 00:11:29.306
would see them all here.

00:11:29.546 --> 00:11:30.786
And if you saw no [inaudible]

00:11:30.786 --> 00:11:32.216
entries, that would indicate

00:11:32.256 --> 00:11:33.886
that the debugger wasn't able to

00:11:33.886 --> 00:11:35.176
resolve your breakpoint, so it

00:11:35.176 --> 00:11:35.606
wouldn't hit.

00:11:36.396 --> 00:11:38.216
So with that in place, I'm going

00:11:38.216 --> 00:11:40.476
to tap the astronaut again, and

00:11:40.476 --> 00:11:41.726
now we see that we've hit the

00:11:41.726 --> 00:11:43.416
breakpoint in UI label set text.

00:11:43.876 --> 00:11:45.216
Now we don't have the source

00:11:45.216 --> 00:11:46.926
code for UIKit, of course, so

00:11:46.926 --> 00:11:48.166
we're looking at assembly code,

00:11:48.586 --> 00:11:49.716
but there's no need to remain in

00:11:49.716 --> 00:11:50.876
the dark even if you're in

00:11:50.876 --> 00:11:53.256
assembly code of one of the

00:11:53.256 --> 00:11:54.116
system frameworks.

00:11:54.426 --> 00:11:56.186
We can inspect the arguments

00:11:56.226 --> 00:11:57.196
passed into a function.

00:11:57.196 --> 00:11:58.556
You just need to know the

00:11:58.556 --> 00:11:59.586
calling convention for the

00:11:59.586 --> 00:12:00.446
architecture, and you can

00:12:00.446 --> 00:12:02.106
inspect the registers to see the

00:12:02.106 --> 00:12:02.596
arguments.

00:12:03.056 --> 00:12:04.086
Well, I'll admit I never

00:12:04.086 --> 00:12:06.486
remember what those registers

00:12:06.486 --> 00:12:08.116
are but thankfully, I don't have

00:12:08.166 --> 00:12:09.866
to because the debugger provides

00:12:09.866 --> 00:12:10.786
pseudo-registers.

00:12:11.426 --> 00:12:13.896
Dollar arg one is translated to

00:12:13.896 --> 00:12:14.856
the register that holds the

00:12:14.856 --> 00:12:15.606
first argument.

00:12:15.956 --> 00:12:16.986
So in this case, we can have a

00:12:16.986 --> 00:12:18.276
look at the receiver of that

00:12:18.276 --> 00:12:19.956
Objective-C message, which is a

00:12:19.956 --> 00:12:21.056
UI label instance.

00:12:22.056 --> 00:12:23.356
Now we see that it has a value

00:12:23.356 --> 00:12:25.916
of 17 feet, and that indicates

00:12:25.916 --> 00:12:26.886
to me that it's this height

00:12:26.886 --> 00:12:28.496
label here, so it's not the

00:12:28.496 --> 00:12:29.746
label we're interested in, but

00:12:29.746 --> 00:12:30.556
while we're here, let's look at

00:12:30.556 --> 00:12:31.386
the other arguments.

00:12:32.186 --> 00:12:32.976
If you're familiar with

00:12:32.976 --> 00:12:34.576
Objective-C message send, you

00:12:34.576 --> 00:12:35.636
may remember that the second

00:12:35.636 --> 00:12:36.876
argument should be the selector.

00:12:37.656 --> 00:12:38.576
We don't see that here but

00:12:38.576 --> 00:12:39.956
that's because LLDB doesn't

00:12:39.956 --> 00:12:41.116
implicitly know the types of

00:12:41.476 --> 00:12:42.156
these arguments.

00:12:42.156 --> 00:12:43.306
So in some cases, we need to

00:12:43.306 --> 00:12:44.836
typecast it and now we see the

00:12:44.836 --> 00:12:45.966
selector for this message.

00:12:46.376 --> 00:12:48.226
Now the third argument is the

00:12:48.226 --> 00:12:50.516
first parameter passed into the

00:12:50.516 --> 00:12:50.906
method.

00:12:50.986 --> 00:12:52.846
In other words, it's the string

00:12:52.846 --> 00:12:53.906
passed into the set text.

00:12:54.206 --> 00:12:55.516
So this is a great convenience

00:12:55.516 --> 00:12:56.896
for inspecting the arguments, if

00:12:56.896 --> 00:12:59.316
you're in an assembly frame for

00:12:59.316 --> 00:13:00.216
one of the frameworks.

00:13:00.896 --> 00:13:02.206
But like I said, this wasn't the

00:13:02.206 --> 00:13:03.306
object or the label we're

00:13:03.306 --> 00:13:04.346
interested in, so let's press

00:13:04.346 --> 00:13:05.806
continue, and now we've hit the

00:13:05.806 --> 00:13:06.526
breakpoint again.

00:13:06.526 --> 00:13:08.746
So we can inspect dollar arg one

00:13:08.746 --> 00:13:11.046
to see what the receiver is, and

00:13:11.046 --> 00:13:12.276
it looks like it's the same

00:13:12.396 --> 00:13:13.916
height label with zero feet now.

00:13:14.296 --> 00:13:15.276
And I can see the problem with

00:13:15.276 --> 00:13:15.916
my strategy.

00:13:16.886 --> 00:13:18.306
While the astronaut is jumping,

00:13:18.726 --> 00:13:19.956
the code is updating the height

00:13:19.956 --> 00:13:22.806
label in real time, so the

00:13:23.056 --> 00:13:24.376
breakpoint is going to hit on

00:13:24.376 --> 00:13:26.246
this object quite frequently,

00:13:26.246 --> 00:13:27.466
and it's going to take us a long

00:13:27.466 --> 00:13:27.686
time.

00:13:27.686 --> 00:13:28.776
It'll be very difficult to hit a

00:13:28.776 --> 00:13:31.116
breakpoint on UI label set text

00:13:31.116 --> 00:13:31.986
for the attempts label.

00:13:32.386 --> 00:13:33.986
So what I think I should do is

00:13:33.986 --> 00:13:35.876
only set this symbolic

00:13:35.876 --> 00:13:37.206
breakpoint after the jump

00:13:37.206 --> 00:13:39.196
animation has completed, so let

00:13:39.196 --> 00:13:40.206
me show you a way to do that.

00:13:40.206 --> 00:13:41.736
I'm going to switch to the

00:13:41.736 --> 00:13:42.716
breakpoint navigator.

00:13:43.116 --> 00:13:44.216
And if I double-click on the

00:13:44.216 --> 00:13:45.456
indicator for the symbolic

00:13:45.456 --> 00:13:47.036
breakpoint, we can bring the

00:13:47.036 --> 00:13:48.746
editor back up and we can use

00:13:48.746 --> 00:13:49.736
this condition field.

00:13:50.026 --> 00:13:51.236
We can enter an expression here

00:13:51.236 --> 00:13:52.906
that returns true or false, and

00:13:52.906 --> 00:13:54.216
the breakpoint will only trigger

00:13:54.216 --> 00:13:55.436
if that expression evaluates to

00:13:55.436 --> 00:13:55.886
true.

00:13:56.226 --> 00:13:57.716
So if we had a property such as

00:13:57.716 --> 00:13:59.656
jump animation in progress, we

00:13:59.656 --> 00:14:01.066
could edit an expression to test

00:14:01.066 --> 00:14:02.386
if that was false and then the

00:14:02.386 --> 00:14:03.506
breakpoint would trigger.

00:14:03.506 --> 00:14:04.876
I don't have a property in this

00:14:04.876 --> 00:14:05.866
case, so I'm going to show you a

00:14:05.866 --> 00:14:06.536
different method.

00:14:06.536 --> 00:14:08.046
I'm going to delete that

00:14:08.046 --> 00:14:10.426
symbolic breakpoint and instead,

00:14:10.426 --> 00:14:12.196
scroll down to this function

00:14:12.196 --> 00:14:13.286
jump completed and set a

00:14:13.286 --> 00:14:14.076
breakpoint here.

00:14:14.716 --> 00:14:16.046
Now jump completed is called

00:14:16.046 --> 00:14:17.896
after the animation has finished

00:14:18.256 --> 00:14:19.526
so that it can update UI and

00:14:19.526 --> 00:14:20.406
update game state.

00:14:20.406 --> 00:14:22.196
However, we don't want a break

00:14:22.196 --> 00:14:23.106
in this function.

00:14:23.346 --> 00:14:24.526
What I want to do is configure

00:14:24.526 --> 00:14:26.436
this breakpoint to actually set

00:14:26.436 --> 00:14:27.956
the symbolic breakpoint in UI

00:14:27.956 --> 00:14:29.086
label set text for me.

00:14:29.126 --> 00:14:30.806
And I can do that by adding a

00:14:30.806 --> 00:14:32.736
debugger command action, which

00:14:32.736 --> 00:14:34.366
is breakpoint set, and I'm going

00:14:34.366 --> 00:14:36.366
to use the option one shot true.

00:14:36.576 --> 00:14:38.746
And a one shot breakpoint is a

00:14:38.746 --> 00:14:40.396
temporary breakpoint that only

00:14:40.396 --> 00:14:41.996
exists until it's triggered and

00:14:41.996 --> 00:14:43.196
then it's automatically deleted.

00:14:43.716 --> 00:14:45.546
And we can give it the symbolic

00:14:45.546 --> 00:14:48.366
name, UI label set text, and

00:14:48.366 --> 00:14:49.586
make this an order continuing

00:14:49.586 --> 00:14:50.076
breakpoint.

00:14:50.466 --> 00:14:51.646
So what we've created, in this

00:14:51.646 --> 00:14:53.936
case, is a breakpoint that when

00:14:53.936 --> 00:14:55.336
the execution enters the jump

00:14:55.396 --> 00:14:57.766
completed function, it sets a

00:14:58.146 --> 00:14:59.136
temporary breakpoint in the

00:14:59.136 --> 00:15:00.396
location we're interested in and

00:15:00.396 --> 00:15:01.206
then continues.

00:15:01.486 --> 00:15:02.896
So then we'll only hit that set

00:15:02.896 --> 00:15:04.756
text breakpoint after flowing

00:15:04.756 --> 00:15:05.546
through this function.

00:15:06.196 --> 00:15:07.496
So let's press continue, and we

00:15:07.496 --> 00:15:08.696
see that the jump animation

00:15:08.736 --> 00:15:11.046
completes in the simulator, and

00:15:11.046 --> 00:15:12.636
now we hit the breakpoint on UI

00:15:12.636 --> 00:15:13.576
label set text.

00:15:14.066 --> 00:15:15.396
So now we can have a look at the

00:15:15.396 --> 00:15:17.376
receiver of that message by

00:15:17.666 --> 00:15:18.906
using po dollar arg one.

00:15:18.906 --> 00:15:20.526
And we see that is indeed a

00:15:20.526 --> 00:15:22.486
different UI label instance with

00:15:22.486 --> 00:15:23.966
a value of zero, so that's

00:15:24.046 --> 00:15:25.236
likely to be one of these at the

00:15:25.236 --> 00:15:25.776
top.

00:15:25.976 --> 00:15:26.766
So we think we've found the

00:15:26.766 --> 00:15:28.286
right object, so let's have a

00:15:28.286 --> 00:15:29.166
look at the code that's

00:15:29.166 --> 00:15:30.546
modifying this label's value.

00:15:31.156 --> 00:15:32.596
We can do that in the debug

00:15:32.596 --> 00:15:34.046
navigator by selecting the next

00:15:34.046 --> 00:15:34.876
frame up in the stack.

00:15:34.996 --> 00:15:36.286
And now we've found the code

00:15:36.286 --> 00:15:37.346
that's modifying the label

00:15:37.346 --> 00:15:37.676
value.

00:15:38.186 --> 00:15:39.696
It's currently passing in a

00:15:39.696 --> 00:15:41.646
string of zero using the label

00:15:41.646 --> 00:15:43.276
text variable, and looking up,

00:15:43.276 --> 00:15:44.816
we can see that label text is

00:15:44.966 --> 00:15:46.156
always set to the label's

00:15:46.156 --> 00:15:47.196
current value, so that's not

00:15:47.196 --> 00:15:47.856
going to change.

00:15:48.336 --> 00:15:49.846
It looks like value text is the

00:15:49.846 --> 00:15:51.826
variable that contains the new

00:15:51.826 --> 00:15:53.736
value, so probably just a typo;

00:15:53.736 --> 00:15:54.446
let's fix that.

00:15:55.606 --> 00:15:57.000
Let's make it value text.

00:16:00.266 --> 00:16:01.766
And then, what I'd like to do,

00:16:02.376 --> 00:16:03.856
rather than recompile and rerun

00:16:03.856 --> 00:16:05.936
to test this change, I'd like to

00:16:06.266 --> 00:16:08.336
actually test this change in the

00:16:08.336 --> 00:16:09.416
context of the current running

00:16:09.416 --> 00:16:10.606
application like before.

00:16:10.606 --> 00:16:12.086
So I'm going to add a breakpoint

00:16:12.086 --> 00:16:13.276
below the current line because

00:16:13.276 --> 00:16:14.286
remember, we've changed the code

00:16:14.286 --> 00:16:15.536
but we haven't recompiled.

00:16:15.906 --> 00:16:17.076
So while the label will still be

00:16:17.076 --> 00:16:19.226
set, we'll add our line below

00:16:19.226 --> 00:16:20.366
that to set it to the value we

00:16:20.366 --> 00:16:21.046
think it should be.

00:16:21.476 --> 00:16:22.906
So another custom breakpoint,

00:16:23.276 --> 00:16:24.746
and we can use expression once

00:16:24.746 --> 00:16:27.346
again to inject that code and

00:16:27.346 --> 00:16:28.566
make this auto-continuing.

00:16:29.656 --> 00:16:30.856
So now, if I press continue,

00:16:30.986 --> 00:16:32.846
code execution will continue to

00:16:32.846 --> 00:16:34.406
flow through here, and we see

00:16:34.406 --> 00:16:35.446
that the attempts label is

00:16:35.446 --> 00:16:36.236
indeed updated.

00:16:36.546 --> 00:16:38.196
I'd like to make sure that also

00:16:38.196 --> 00:16:38.676
works.

00:16:38.676 --> 00:16:39.226
Well, thank you.

00:16:40.516 --> 00:16:43.896
[ Applause ]

00:16:44.396 --> 00:16:45.826
I'd like to make sure that also

00:16:45.826 --> 00:16:47.676
works for the score label after

00:16:47.676 --> 00:16:49.546
a successful jump, so let's

00:16:49.826 --> 00:16:51.296
navigate back to here.

00:16:51.756 --> 00:16:53.606
I can remove this jump-completed

00:16:53.706 --> 00:16:54.916
breakpoint that was creating the

00:16:54.916 --> 00:16:56.016
one shot breakpoint because we

00:16:56.016 --> 00:16:56.916
don't need that anymore.

00:16:57.386 --> 00:16:59.026
And I can disable the breakpoint

00:16:59.026 --> 00:17:00.626
in jump because we don't want to

00:17:00.626 --> 00:17:02.016
modify did reach selected height

00:17:02.016 --> 00:17:02.396
anymore.

00:17:02.666 --> 00:17:03.496
And now, when I tap the

00:17:03.496 --> 00:17:04.536
astronaut, he performs a

00:17:04.536 --> 00:17:06.296
successful jump, and we can see

00:17:06.296 --> 00:17:07.376
that all the labels update

00:17:07.376 --> 00:17:08.766
properly, so that bug looks

00:17:08.766 --> 00:17:09.836
great to me.

00:17:10.955 --> 00:17:12.866
So let's return and check that

00:17:12.866 --> 00:17:13.175
one off.

00:17:14.185 --> 00:17:14.556
All right.

00:17:14.646 --> 00:17:16.215
The next bug is a problem with

00:17:16.215 --> 00:17:17.256
the end-of-game state.

00:17:17.576 --> 00:17:19.876
So the game is meant to end

00:17:19.876 --> 00:17:21.096
after 10 attempts, so I could

00:17:21.096 --> 00:17:22.606
tap the astronaut, wait for the

00:17:22.606 --> 00:17:24.096
animations to play out, and

00:17:24.096 --> 00:17:25.586
progress through the game to get

00:17:25.586 --> 00:17:26.576
through that state to try and

00:17:26.576 --> 00:17:27.185
reproduce it.

00:17:27.626 --> 00:17:28.676
But the animations take some

00:17:28.676 --> 00:17:30.316
time, and I may need to do this

00:17:30.316 --> 00:17:32.316
numerous times while I test and

00:17:32.316 --> 00:17:34.336
verify my fixes, so I'd like to

00:17:34.576 --> 00:17:36.156
skip all the jump animations.

00:17:36.546 --> 00:17:37.796
So let me show you how I'll do

00:17:37.796 --> 00:17:37.906
that.

00:17:37.906 --> 00:17:40.556
I'm going to navigate to update

00:17:40.596 --> 00:17:43.006
UI for jump succeeded, and we

00:17:43.006 --> 00:17:45.596
can see this function modifies

00:17:45.596 --> 00:17:47.316
some colors and then calls jump

00:17:47.376 --> 00:17:48.596
astronaut animated true.

00:17:48.666 --> 00:17:50.066
So it looks like I just need to

00:17:50.066 --> 00:17:51.286
call jump astronaut animated

00:17:51.286 --> 00:17:51.736
false.

00:17:52.166 --> 00:17:53.026
I could change the code and

00:17:53.026 --> 00:17:54.106
recompile, but like I said

00:17:54.106 --> 00:17:55.546
before, I don't like to change

00:17:55.546 --> 00:17:56.826
my code for debugging purposes

00:17:56.826 --> 00:17:58.446
if I can avoid it, so let me

00:17:58.446 --> 00:17:59.386
show you the technique I'll use

00:17:59.386 --> 00:17:59.766
instead.

00:18:00.176 --> 00:18:01.356
I'm going to set a breakpoint on

00:18:01.356 --> 00:18:01.806
this line.

00:18:02.086 --> 00:18:03.466
Let's clear the debug console

00:18:03.776 --> 00:18:05.226
and initiate a new jump by

00:18:05.226 --> 00:18:06.636
tapping the astronaut, and now

00:18:06.636 --> 00:18:07.646
we're paused on this line.

00:18:08.156 --> 00:18:10.286
So I need to ask the debugger to

00:18:10.286 --> 00:18:11.806
replace this line with a call to

00:18:11.806 --> 00:18:13.226
jump astronaut animated false.

00:18:13.656 --> 00:18:15.026
Well, the code's compiled in, we

00:18:15.076 --> 00:18:16.306
can't replace it, but what we

00:18:16.306 --> 00:18:17.756
can do is ask the debugger to

00:18:17.926 --> 00:18:19.506
skip over this line, to not

00:18:19.506 --> 00:18:20.656
execute it but skip over it.

00:18:20.656 --> 00:18:21.776
And then we can use expression

00:18:21.776 --> 00:18:23.016
to inject the change that we --

00:18:23.016 --> 00:18:24.226
or the call that we'd like to

00:18:24.226 --> 00:18:24.506
make.

00:18:25.096 --> 00:18:26.416
So how do we skip over a line?

00:18:26.626 --> 00:18:27.996
Well, let me draw your attention

00:18:27.996 --> 00:18:29.476
to this green annotation label

00:18:29.476 --> 00:18:30.116
thread one.

00:18:30.566 --> 00:18:31.836
We call this the instruction

00:18:31.836 --> 00:18:32.256
pointer.

00:18:32.666 --> 00:18:34.076
It points to the line containing

00:18:34.076 --> 00:18:35.076
the instructions that will be

00:18:35.076 --> 00:18:36.016
executed next.

00:18:36.016 --> 00:18:37.576
And this icon here, that kind of

00:18:37.576 --> 00:18:39.416
looks like a grab handle, in

00:18:39.416 --> 00:18:40.446
fact, is a grab handle.

00:18:40.446 --> 00:18:41.616
If I hold the mouse down, I can

00:18:41.616 --> 00:18:43.236
move this around, and I'm able

00:18:43.236 --> 00:18:44.406
to change the instruction

00:18:44.406 --> 00:18:46.166
pointer while paused, so I can

00:18:46.166 --> 00:18:47.846
move it down one line and let go

00:18:47.936 --> 00:18:49.926
and then we get a scary message

00:18:49.926 --> 00:18:50.516
from Xcode.

00:18:50.926 --> 00:18:52.166
And basically, what it's saying

00:18:52.436 --> 00:18:54.216
is, with great power comes great

00:18:54.216 --> 00:18:54.956
responsibility.

00:18:55.126 --> 00:18:56.076
And I'll be honest with you,

00:18:56.076 --> 00:18:57.076
this is the riskiest feature

00:18:57.076 --> 00:18:57.916
I'll tell you about today.

00:18:57.916 --> 00:19:00.116
But it's only risky because the

00:19:00.116 --> 00:19:01.456
debugger allows you to move the

00:19:01.456 --> 00:19:02.416
instruction point wherever you

00:19:02.416 --> 00:19:02.736
like.

00:19:02.736 --> 00:19:04.266
It does not care, but it cannot

00:19:04.266 --> 00:19:05.766
guarantee that the application's

00:19:05.766 --> 00:19:06.876
state will remain intact.

00:19:07.186 --> 00:19:08.326
So you could, for example, cause

00:19:08.326 --> 00:19:10.096
memory management issues if you

00:19:10.096 --> 00:19:11.376
end up referencing an object

00:19:11.376 --> 00:19:12.146
that has not yet been

00:19:12.146 --> 00:19:13.926
initialized or over-releasing an

00:19:13.926 --> 00:19:14.756
object, for example.

00:19:15.316 --> 00:19:16.826
But we've all been to the

00:19:16.826 --> 00:19:17.956
advanced debugging session now,

00:19:17.956 --> 00:19:18.766
so we know what we're doing.

00:19:18.766 --> 00:19:19.826
So let's press the blue button.

00:19:21.416 --> 00:19:21.916
All right.

00:19:21.916 --> 00:19:23.076
So we've skipped over that line,

00:19:23.076 --> 00:19:24.336
and now in the console, we can

00:19:24.336 --> 00:19:25.726
use expression and call jump

00:19:25.726 --> 00:19:26.986
astronaut animated false.

00:19:28.816 --> 00:19:30.316
And now we press continue to see

00:19:30.316 --> 00:19:32.956
if all this worked, and indeed,

00:19:33.376 --> 00:19:34.516
the game state updated, and we

00:19:34.516 --> 00:19:35.826
skipped all the jump animations.

00:19:36.896 --> 00:19:38.436
So I'd like that to happen every

00:19:38.436 --> 00:19:40.256
time I tap the astronaut, so I'm

00:19:40.256 --> 00:19:41.186
going to configure this

00:19:41.186 --> 00:19:42.446
breakpoint here to do that for

00:19:42.446 --> 00:19:42.606
me.

00:19:43.756 --> 00:19:45.156
So first, we need a debugger

00:19:45.156 --> 00:19:47.556
action that skips over one line,

00:19:47.716 --> 00:19:48.856
and the command for that is

00:19:48.886 --> 00:19:49.536
thread jump.

00:19:50.126 --> 00:19:51.426
And I give it the option by one,

00:19:51.426 --> 00:19:52.916
and this tells the debugger to

00:19:53.156 --> 00:19:55.486
jump over one line of code for

00:19:55.486 --> 00:19:55.976
the current thread.

00:19:56.216 --> 00:19:58.976
And then we just need to call

00:19:58.976 --> 00:20:00.096
our expression and we can do

00:20:00.096 --> 00:20:01.596
that by pressing the plus button

00:20:02.006 --> 00:20:03.446
and adding another command

00:20:03.446 --> 00:20:03.786
action.

00:20:04.686 --> 00:20:06.756
Expression jump astronaut

00:20:06.756 --> 00:20:08.176
animated false.

00:20:08.526 --> 00:20:09.566
And we make this order

00:20:09.566 --> 00:20:10.086
continuing.

00:20:10.736 --> 00:20:11.806
So what we've got here is a

00:20:11.806 --> 00:20:14.096
breakpoint then when execution

00:20:14.096 --> 00:20:16.336
reaches this line but before it

00:20:16.336 --> 00:20:17.526
executes this line, the

00:20:17.856 --> 00:20:18.796
breakpoint is triggered.

00:20:18.796 --> 00:20:20.686
It will perform the command to

00:20:20.686 --> 00:20:22.976
jump over that line and then use

00:20:22.976 --> 00:20:25.196
expression to call the function

00:20:25.196 --> 00:20:26.126
call that we'd like to make

00:20:26.126 --> 00:20:26.966
instead.

00:20:27.336 --> 00:20:28.936
So now, if we tap on the

00:20:28.936 --> 00:20:30.796
astronaut, we can rapidly

00:20:30.796 --> 00:20:31.936
progress through the game state

00:20:31.936 --> 00:20:33.386
and skip all the animations and

00:20:33.386 --> 00:20:34.476
easily reproduce our bug.

00:20:35.396 --> 00:20:36.656
So, as I said, the game was

00:20:36.656 --> 00:20:38.646
meant to end after 10 attempts,

00:20:38.646 --> 00:20:40.386
and we've gone well beyond that,

00:20:40.676 --> 00:20:42.916
so let's have a look at the game

00:20:42.916 --> 00:20:43.266
state.

00:20:44.206 --> 00:20:45.836
That is all stored in a property

00:20:45.836 --> 00:20:48.376
up here called GamePlay, so I'm

00:20:48.506 --> 00:20:49.636
going to set a breakpoint on

00:20:49.636 --> 00:20:51.736
that property and start a new

00:20:51.736 --> 00:20:52.016
jump.

00:20:52.196 --> 00:20:53.906
And now we've paused at the next

00:20:53.906 --> 00:20:54.916
reference to that property.

00:20:55.626 --> 00:20:56.926
I'm going to use po to look at

00:20:56.976 --> 00:20:58.296
the current state of that

00:20:58.296 --> 00:21:00.026
object, and here we see the

00:21:00.026 --> 00:21:01.656
debugged description for this

00:21:01.656 --> 00:21:02.556
GamePlay object.

00:21:02.986 --> 00:21:04.186
And we have a custom debugged

00:21:04.186 --> 00:21:05.676
description here, so it's worth

00:21:05.736 --> 00:21:07.726
pointing out that po requests

00:21:07.726 --> 00:21:08.596
the programmatic debug

00:21:08.626 --> 00:21:10.116
description of an object and you

00:21:10.116 --> 00:21:11.196
can customize these.

00:21:11.696 --> 00:21:12.586
I'll show you how we did that

00:21:12.586 --> 00:21:13.246
for GamePlay.

00:21:13.316 --> 00:21:14.546
If I switch to the source code

00:21:14.906 --> 00:21:16.626
and scroll to the bottom, you

00:21:16.626 --> 00:21:17.856
can see that we've added an

00:21:17.856 --> 00:21:19.656
extension to conform GamePlay to

00:21:19.796 --> 00:21:21.626
custom debug string convertible.

00:21:22.206 --> 00:21:23.546
And conformance requires that

00:21:23.546 --> 00:21:25.676
you implement a property called

00:21:25.676 --> 00:21:27.126
debug description and return a

00:21:27.126 --> 00:21:27.526
string.

00:21:27.896 --> 00:21:29.656
And you can return whatever

00:21:29.656 --> 00:21:31.136
string you like to represent

00:21:31.136 --> 00:21:32.756
this object for your debugging

00:21:32.756 --> 00:21:33.386
purposes.

00:21:34.096 --> 00:21:35.896
You can do the same for

00:21:35.976 --> 00:21:37.486
Objective-C objects as well by

00:21:37.486 --> 00:21:38.736
implementing debug description.

00:21:39.786 --> 00:21:41.366
Compare that with the command p

00:21:41.366 --> 00:21:41.826
GamePlay.

00:21:43.036 --> 00:21:46.796
P is an alternate LLDB command,

00:21:47.136 --> 00:21:48.746
which uses LLDB's built-in

00:21:48.746 --> 00:21:50.256
formatters to represent the

00:21:50.256 --> 00:21:50.676
object.

00:21:50.926 --> 00:21:51.586
So here, we see two

00:21:51.586 --> 00:21:52.706
representations of the same

00:21:52.706 --> 00:21:55.106
object, and default formatter

00:21:55.106 --> 00:21:56.126
shows you the full [inaudible]

00:21:56.126 --> 00:21:57.446
type name, the memory address,

00:21:57.806 --> 00:21:58.826
and then a list of all the

00:21:58.826 --> 00:21:59.986
properties and their values.

00:22:00.376 --> 00:22:01.536
So we can see here that there is

00:22:01.536 --> 00:22:02.636
a max attempts property, and

00:22:02.636 --> 00:22:04.636
it's correctly set to 10, so it

00:22:04.636 --> 00:22:06.126
looks like there's perhaps a

00:22:06.126 --> 00:22:07.716
logic error where, after

00:22:07.716 --> 00:22:08.876
attempts is incremented, it's

00:22:08.876 --> 00:22:10.476
not successfully determining

00:22:10.476 --> 00:22:11.926
that it's past the maximum.

00:22:12.296 --> 00:22:13.406
So I'd like to find the code

00:22:13.406 --> 00:22:14.616
that's modifying attempts to see

00:22:14.616 --> 00:22:15.646
what the logic looks like.

00:22:15.776 --> 00:22:17.646
I'm going to open the variables

00:22:17.646 --> 00:22:19.046
view and expand the view

00:22:19.046 --> 00:22:20.016
controller to see all its

00:22:20.016 --> 00:22:20.886
properties and down at the

00:22:20.886 --> 00:22:22.056
bottom, I'm going to use the

00:22:22.136 --> 00:22:24.796
filter to enter GamePlay to find

00:22:24.796 --> 00:22:25.296
that property.

00:22:25.746 --> 00:22:27.286
Expand its properties and then

00:22:27.286 --> 00:22:28.586
I'm going to select the attempts

00:22:28.616 --> 00:22:28.956
property.

00:22:29.516 --> 00:22:31.566
And down here, I'm going to open

00:22:31.566 --> 00:22:33.786
the contextual menu and select

00:22:34.086 --> 00:22:34.956
watch attempts.

00:22:36.276 --> 00:22:37.716
Now what this does is creates

00:22:37.716 --> 00:22:39.026
what's called a watchpoint.

00:22:39.656 --> 00:22:40.876
In the breakpoint navigator,

00:22:40.916 --> 00:22:42.116
below all the breakpoints,

00:22:42.406 --> 00:22:43.586
you'll see there's a new group

00:22:43.586 --> 00:22:44.926
called watchpoints, and we have

00:22:44.926 --> 00:22:46.366
one watchpoint for attempts.

00:22:46.706 --> 00:22:48.156
And a watchpoint is like a

00:22:48.156 --> 00:22:49.546
breakpoint, but it pauses the

00:22:49.546 --> 00:22:50.826
debugger the next time the value

00:22:50.826 --> 00:22:52.966
of that variable is changed, so

00:22:52.966 --> 00:22:54.126
we can remove this property

00:22:54.126 --> 00:22:55.226
breakpoint because we no longer

00:22:55.226 --> 00:22:56.766
need it and press continue.

00:22:57.186 --> 00:22:58.456
And now we've paused at this

00:22:58.456 --> 00:22:59.886
watchpoint, and we found the

00:22:59.886 --> 00:23:00.796
code that's modifying the

00:23:00.796 --> 00:23:01.706
attempts variable.

00:23:02.186 --> 00:23:04.436
I can disable this watchpoint

00:23:04.436 --> 00:23:05.336
because I no longer need it.

00:23:05.336 --> 00:23:06.736
And we can look at the code here

00:23:06.936 --> 00:23:07.896
while the game's playing,

00:23:07.896 --> 00:23:09.126
increment attempts, and if

00:23:09.126 --> 00:23:10.376
successful, increment score.

00:23:10.716 --> 00:23:12.106
So I'm not seeing any logic that

00:23:12.106 --> 00:23:13.406
will detect if attempts has

00:23:13.406 --> 00:23:15.426
exceeded maximum and transition

00:23:15.426 --> 00:23:16.526
to the end-of-game state.

00:23:17.136 --> 00:23:18.086
So I think that's all that's

00:23:18.086 --> 00:23:19.416
needed, but in this case, I'd

00:23:19.416 --> 00:23:20.786
like to test my hypothesis

00:23:21.006 --> 00:23:22.406
before I make any actual code

00:23:22.406 --> 00:23:22.916
changes.

00:23:23.316 --> 00:23:24.596
So I'm going to create a

00:23:24.596 --> 00:23:26.306
breakpoint and configure it to

00:23:26.306 --> 00:23:27.616
inject that change to see if it

00:23:27.616 --> 00:23:29.246
fixes the problem before I make

00:23:29.246 --> 00:23:30.096
any code changes.

00:23:30.536 --> 00:23:31.656
So once again, I can add a

00:23:31.656 --> 00:23:32.876
debugger command action with an

00:23:32.876 --> 00:23:34.676
expression and I think what we

00:23:34.676 --> 00:23:36.406
need is if attempts is greater

00:23:36.406 --> 00:23:38.516
and equal to max attempts, then

00:23:38.516 --> 00:23:39.826
we change the game state to

00:23:39.826 --> 00:23:41.826
ended and make this order

00:23:41.826 --> 00:23:42.356
continuing.

00:23:42.996 --> 00:23:44.406
So now it's easy just to test if

00:23:44.406 --> 00:23:45.666
that actually fixes the problem

00:23:45.666 --> 00:23:46.616
by pressing continue.

00:23:46.876 --> 00:23:48.136
Execution will continue through

00:23:48.136 --> 00:23:48.816
this breakpoint.

00:23:49.116 --> 00:23:50.486
Inject the code and we can see

00:23:50.546 --> 00:23:51.856
that it does look like it fixes

00:23:51.856 --> 00:23:52.286
the problem.

00:23:52.386 --> 00:23:54.166
I'd like to verify that from the

00:23:54.166 --> 00:23:55.356
start of the game and I can

00:23:55.356 --> 00:23:56.386
quickly and easily do that by

00:23:56.386 --> 00:23:58.146
clicking play again and rapidly

00:23:58.146 --> 00:23:59.526
progressing through 10 attempts.

00:23:59.976 --> 00:24:01.186
And at the tenth, we see that it

00:24:01.186 --> 00:24:02.566
does indeed detect end-of-game

00:24:02.566 --> 00:24:03.586
state, so it looks like that's

00:24:03.586 --> 00:24:04.846
the fix we need.

00:24:05.516 --> 00:24:11.666
[ Applause ]

00:24:12.166 --> 00:24:13.646
And now, don't forget to apply

00:24:13.646 --> 00:24:14.326
that to your code.

00:24:14.326 --> 00:24:16.276
So I'm just copy that out, drag

00:24:16.306 --> 00:24:17.426
the breakpoint to delete it.

00:24:17.426 --> 00:24:18.966
And then I can paste that in and

00:24:18.966 --> 00:24:19.516
that looks good.

00:24:20.396 --> 00:24:21.646
So let's check that one off, and

00:24:21.646 --> 00:24:22.776
we've only got one more left for

00:24:22.776 --> 00:24:24.326
this section and that's the

00:24:24.326 --> 00:24:25.826
layout of the attempt and score

00:24:25.826 --> 00:24:26.276
labels.

00:24:26.726 --> 00:24:28.076
Now, the layout of this

00:24:28.076 --> 00:24:29.406
application has been left up to

00:24:29.406 --> 00:24:31.066
the engineers, and as good

00:24:31.066 --> 00:24:32.516
engineers do, we've found an

00:24:32.516 --> 00:24:34.116
efficient location stuffed right

00:24:34.116 --> 00:24:35.136
up in the top corners.

00:24:35.556 --> 00:24:37.126
But the team decided that wasn't

00:24:37.126 --> 00:24:39.056
very appropriate, so they've

00:24:39.056 --> 00:24:40.306
sent it back and asked us to try

00:24:40.306 --> 00:24:40.616
again.

00:24:40.956 --> 00:24:42.636
So I'd like to mock up a new

00:24:42.636 --> 00:24:44.406
layout for these score labels.

00:24:44.736 --> 00:24:45.866
Now I could get out my graphical

00:24:45.866 --> 00:24:46.986
application and start mocking it

00:24:46.986 --> 00:24:48.176
up, but I'm an engineer and I

00:24:48.176 --> 00:24:49.236
like to mock up using code.

00:24:49.236 --> 00:24:50.466
In fact, I'm a debugger

00:24:50.466 --> 00:24:51.796
engineer, so I like to mock up

00:24:51.796 --> 00:24:52.896
using the debugger with a live

00:24:52.896 --> 00:24:54.026
application and real data.

00:24:54.126 --> 00:24:55.006
So let me show you how to do

00:24:55.006 --> 00:24:56.000
that.

00:24:59.146 --> 00:25:01.226
Let's navigate back and put

00:25:01.226 --> 00:25:02.796
breakpoint in the jump function.

00:25:03.136 --> 00:25:04.686
What we need to do is first find

00:25:04.686 --> 00:25:06.126
a reference to a view that we

00:25:06.126 --> 00:25:07.796
can play around with, so I'm

00:25:07.796 --> 00:25:09.466
going to clear everything and

00:25:09.466 --> 00:25:10.946
open that up and start a new

00:25:10.976 --> 00:25:11.216
jump.

00:25:11.216 --> 00:25:12.446
So we're paused in the debugger

00:25:13.006 --> 00:25:14.656
in this jump function within the

00:25:14.656 --> 00:25:15.336
view controller.

00:25:16.016 --> 00:25:17.666
So if you have of course a

00:25:17.666 --> 00:25:18.906
property or an outlet for a

00:25:18.906 --> 00:25:19.686
view, then that's a good

00:25:19.686 --> 00:25:20.176
reference.

00:25:20.446 --> 00:25:21.596
But if you don't, then you need

00:25:21.596 --> 00:25:22.536
to get the memory address of a

00:25:22.536 --> 00:25:22.756
view.

00:25:22.756 --> 00:25:24.176
So let me show you some ways to

00:25:24.176 --> 00:25:25.286
find the memory address and how

00:25:25.286 --> 00:25:26.946
to manipulate a view only by

00:25:26.946 --> 00:25:27.636
memory address.

00:25:28.206 --> 00:25:30.396
Well, like we said before, the

00:25:30.396 --> 00:25:31.686
debug description contains a

00:25:31.686 --> 00:25:32.616
custom description.

00:25:32.986 --> 00:25:33.826
So looking at the view

00:25:33.826 --> 00:25:35.036
controller's view, we can see

00:25:35.036 --> 00:25:36.386
the default debug description

00:25:36.386 --> 00:25:38.426
for a UI view has the class of

00:25:38.426 --> 00:25:39.476
the view and then the memory

00:25:39.476 --> 00:25:39.906
address.

00:25:40.216 --> 00:25:41.606
So one way is to just get the

00:25:41.606 --> 00:25:44.676
debug description for objects.

00:25:45.176 --> 00:25:46.476
So that's easy to get it for

00:25:46.476 --> 00:25:47.686
this one because there's a

00:25:47.686 --> 00:25:48.456
property for it.

00:25:48.746 --> 00:25:50.306
But how about all of the views

00:25:50.346 --> 00:25:51.976
below this view controller's

00:25:51.976 --> 00:25:52.166
view?

00:25:52.806 --> 00:25:53.506
Well, we need to look at the

00:25:53.506 --> 00:25:55.256
view hierarchy and one way to do

00:25:55.256 --> 00:25:57.126
that is to use this button here,

00:25:57.126 --> 00:25:59.136
which invokes Xcode's visual

00:25:59.136 --> 00:25:59.606
view debugger.

00:25:59.676 --> 00:26:01.136
It will snapshot the hierarchy

00:26:01.136 --> 00:26:03.216
and give you a 3D exploded view,

00:26:03.216 --> 00:26:04.446
and you can use that to inspect

00:26:04.536 --> 00:26:05.166
views that way.

00:26:05.676 --> 00:26:06.706
Sebastian's going to talk more

00:26:06.706 --> 00:26:07.806
about that in a few minutes, so

00:26:07.806 --> 00:26:08.816
let me show you an alternative

00:26:08.816 --> 00:26:10.616
way, which is good for simpler

00:26:10.616 --> 00:26:13.126
hierarchies and keeps you in the

00:26:13.126 --> 00:26:13.846
debug console.

00:26:13.976 --> 00:26:15.936
And that's using a debug

00:26:16.006 --> 00:26:17.846
function on UI view called

00:26:17.846 --> 00:26:18.886
recursive description.

00:26:20.296 --> 00:26:21.716
So we should be able to call po

00:26:21.716 --> 00:26:23.726
self.view recursive description.

00:26:24.806 --> 00:26:25.716
However, that doesn't work.

00:26:26.136 --> 00:26:26.816
Why is that?

00:26:27.536 --> 00:26:29.066
Well, recursive description only

00:26:29.066 --> 00:26:30.376
exists for debugging purposes.

00:26:30.506 --> 00:26:31.866
It's not part of the public API

00:26:32.286 --> 00:26:33.656
and so isn't [inaudible] to

00:26:34.386 --> 00:26:35.146
Swift.

00:26:35.546 --> 00:26:37.066
And Swift is a strict language

00:26:37.066 --> 00:26:37.886
and doesn't allow you to call

00:26:37.886 --> 00:26:38.916
functions that haven't been

00:26:38.916 --> 00:26:39.686
strictly defined.

00:26:40.536 --> 00:26:41.366
However, Objective-C [inaudible]

00:26:41.366 --> 00:26:43.426
code can run wild and free in

00:26:43.426 --> 00:26:44.776
Objective-C world and you can

00:26:44.776 --> 00:26:45.416
pretty much do whatever you

00:26:45.416 --> 00:26:45.646
like.

00:26:45.646 --> 00:26:46.746
I mean it's a dynamic language

00:26:46.746 --> 00:26:48.276
so you can call functions like

00:26:48.276 --> 00:26:48.526
this.

00:26:48.846 --> 00:26:51.086
So what we need to do is to tell

00:26:51.086 --> 00:26:52.496
the debugger to evaluate this

00:26:52.496 --> 00:26:54.986
expression in an Objective-C

00:26:55.096 --> 00:26:55.666
syntax.

00:26:55.706 --> 00:26:57.166
And the way to do that is to use

00:26:57.166 --> 00:26:59.146
expression with the option - l

00:26:59.146 --> 00:26:59.726
objc.

00:26:59.726 --> 00:27:02.026
That tells expression that

00:27:02.026 --> 00:27:02.706
you're about to give it

00:27:02.876 --> 00:27:04.126
Objective-C code even though

00:27:04.126 --> 00:27:05.056
you're in a Swift frame.

00:27:05.346 --> 00:27:08.226
And we'll give it -O, tell it

00:27:08.296 --> 00:27:09.546
that we also want the debug

00:27:09.546 --> 00:27:10.956
description the same as po would

00:27:10.956 --> 00:27:12.976
do and -- to indicate that there

00:27:12.976 --> 00:27:14.156
are no more options.

00:27:14.946 --> 00:27:16.406
The rest of the line is just raw

00:27:16.406 --> 00:27:17.116
expression input.

00:27:17.496 --> 00:27:18.846
So we should be able to then

00:27:18.846 --> 00:27:20.996
give it the Objective-C format

00:27:20.996 --> 00:27:22.056
of this method call.

00:27:22.906 --> 00:27:23.786
Unfortunately, that doesn't

00:27:23.786 --> 00:27:25.056
quite work and the reason for

00:27:25.056 --> 00:27:26.126
that is that expression will

00:27:26.126 --> 00:27:27.366
create a temporary expression

00:27:27.366 --> 00:27:28.726
context for the Objective-C

00:27:29.016 --> 00:27:30.446
compilation, and it doesn't

00:27:30.446 --> 00:27:31.596
inherit all the variables from

00:27:31.596 --> 00:27:32.216
the Swift frame.

00:27:32.616 --> 00:27:33.486
So there's a way around that,

00:27:33.486 --> 00:27:33.686
though.

00:27:34.506 --> 00:27:35.566
If we just put [inaudible] view

00:27:35.566 --> 00:27:36.216
in back ticks.

00:27:36.466 --> 00:27:37.536
Back ticks is like a [inaudible]

00:27:37.536 --> 00:27:39.626
step that says first, evaluate

00:27:39.626 --> 00:27:40.496
the contents of this in the

00:27:40.546 --> 00:27:41.806
current frame and insert the

00:27:41.806 --> 00:27:43.026
result, and then we can evaluate

00:27:43.026 --> 00:27:43.486
the rest.

00:27:43.526 --> 00:27:44.606
And now we get the recursive

00:27:44.606 --> 00:27:44.956
description.

00:27:45.516 --> 00:27:51.586
[ Applause ]

00:27:52.086 --> 00:27:53.246
So using this, we can see all

00:27:53.246 --> 00:27:54.346
the debug descriptions for all

00:27:54.346 --> 00:27:54.706
the views.

00:27:54.866 --> 00:27:56.376
And I'm interested in the

00:27:56.376 --> 00:27:57.606
scoreboard views, which host

00:27:57.606 --> 00:27:59.196
these labels, so we can find the

00:27:59.196 --> 00:28:00.346
memory address for one of those.

00:28:00.406 --> 00:28:01.536
And now we can use [inaudible]

00:28:01.936 --> 00:28:04.036
po memory address, which you

00:28:04.036 --> 00:28:05.116
might be familiar with if you're

00:28:05.116 --> 00:28:06.176
an Objective-C developer.

00:28:06.526 --> 00:28:07.376
Well, that doesn't work and

00:28:07.496 --> 00:28:08.696
that's because Swift doesn't

00:28:08.696 --> 00:28:12.046
treat numbers as pointers and

00:28:12.046 --> 00:28:12.936
de-reference them for you.

00:28:13.236 --> 00:28:14.326
So once again, we need to do

00:28:14.326 --> 00:28:16.026
this from an Objective-C

00:28:16.026 --> 00:28:16.616
context.

00:28:16.986 --> 00:28:18.036
So we could do the same thing we

00:28:18.036 --> 00:28:19.566
did before, but I find this to

00:28:19.566 --> 00:28:21.296
be so convenient that I like to

00:28:21.496 --> 00:28:23.926
shortcut this down to just a

00:28:23.926 --> 00:28:25.676
simple short command.

00:28:26.136 --> 00:28:27.726
So I'm going to do that by using

00:28:27.796 --> 00:28:29.466
command alias, and I'm going to

00:28:29.466 --> 00:28:30.616
call that command poc.

00:28:31.216 --> 00:28:32.076
So now that I've created an

00:28:32.076 --> 00:28:33.416
alias, I can simply poc that

00:28:33.416 --> 00:28:34.756
memory address and see the debug

00:28:34.756 --> 00:28:35.886
description for that object.

00:28:36.326 --> 00:28:37.856
I'd like to show you another way

00:28:38.106 --> 00:28:40.396
to look at the description of an

00:28:40.396 --> 00:28:41.366
object if you only have its

00:28:41.366 --> 00:28:42.066
memory address.

00:28:42.396 --> 00:28:43.886
And in Swift, you can use a

00:28:43.886 --> 00:28:45.596
function called unsafe bit cast.

00:28:46.436 --> 00:28:47.416
Give it the memory address and

00:28:47.416 --> 00:28:48.546
then it's unsafe because it's up

00:28:48.576 --> 00:28:50.016
to you to provide the correct

00:28:50.496 --> 00:28:52.416
type, so I'll give it scoreboard

00:28:52.416 --> 00:28:53.096
view.self.

00:28:53.736 --> 00:28:55.436
And now we see we can use unsafe

00:28:55.496 --> 00:28:57.146
bit cast to see the debug

00:28:57.146 --> 00:28:58.146
description for an object.

00:28:58.876 --> 00:29:00.366
Now the great thing about unsafe

00:29:00.456 --> 00:29:01.926
bit cast is that it returns a

00:29:01.926 --> 00:29:04.026
typed result, so we can call our

00:29:04.026 --> 00:29:05.266
functions and property names on

00:29:05.296 --> 00:29:06.276
it such as .frame.

00:29:06.856 --> 00:29:08.036
And in this case, I'd like to

00:29:08.036 --> 00:29:09.936
inspect a center point and then

00:29:09.936 --> 00:29:11.026
modify that center point.

00:29:11.026 --> 00:29:12.216
Let's change it to 300

00:29:12.896 --> 00:29:14.276
[inaudible] we can see it has

00:29:14.276 --> 00:29:17.076
changed to 300, but the view in

00:29:17.076 --> 00:29:18.176
the simulator hasn't moved.

00:29:18.376 --> 00:29:18.876
Well, why not?

00:29:19.756 --> 00:29:20.526
Well, we're paused in the

00:29:20.526 --> 00:29:22.126
debugger, so cronomation isn't

00:29:22.126 --> 00:29:23.606
currently applying any view

00:29:23.606 --> 00:29:24.776
module changes to the screen's

00:29:24.776 --> 00:29:25.156
frame buffer.

00:29:25.156 --> 00:29:26.976
But we can ask cronomation to do

00:29:26.976 --> 00:29:28.566
that for us, just use the

00:29:28.566 --> 00:29:31.526
expression ca transaction.flush

00:29:32.016 --> 00:29:34.486
and that tells cronomation to

00:29:34.486 --> 00:29:35.606
update the screen's frame

00:29:35.606 --> 00:29:35.836
buffer.

00:29:36.516 --> 00:29:41.616
[ Applause ]

00:29:42.116 --> 00:29:43.436
So now, I can just use these two

00:29:43.436 --> 00:29:45.506
lines to fix the new positions

00:29:45.596 --> 00:29:46.996
and continue flashing and we can

00:29:46.996 --> 00:29:47.516
move [inaudible] around.

00:29:48.036 --> 00:29:48.986
And in fact, I find this to be

00:29:48.986 --> 00:29:50.046
so convenient that I kind of

00:29:50.046 --> 00:29:51.146
wanted to wrap all this up in

00:29:51.146 --> 00:29:52.496
just a single command to nudge

00:29:52.496 --> 00:29:53.816
views around, and so that's what

00:29:53.816 --> 00:29:54.046
I did.

00:29:54.726 --> 00:29:55.336
Let me show you that.

00:29:55.336 --> 00:29:57.296
I'm going to switch to terminal

00:29:57.656 --> 00:29:58.916
and open a Python file.

00:29:59.916 --> 00:30:00.926
Why a Python file?

00:30:01.416 --> 00:30:03.496
Well, LLDB is scriptable using

00:30:03.496 --> 00:30:04.536
Python, where you get full

00:30:04.536 --> 00:30:06.256
access to the LLDB API.

00:30:06.936 --> 00:30:09.436
So I've created an LLDB Python

00:30:09.436 --> 00:30:11.176
script to create a nudge

00:30:11.176 --> 00:30:12.516
command, which takes an x

00:30:12.516 --> 00:30:13.676
offset, a y offset and a view

00:30:13.676 --> 00:30:15.156
expression, and you can use that

00:30:15.156 --> 00:30:16.186
to nudge views around while

00:30:16.236 --> 00:30:16.976
paused in the debugger.

00:30:16.976 --> 00:30:18.436
Now, it might look like a sort

00:30:18.436 --> 00:30:19.846
of long script but most of that

00:30:19.846 --> 00:30:20.876
is argument pausing.

00:30:21.366 --> 00:30:22.716
The core of it, in the middle,

00:30:22.806 --> 00:30:24.516
is just calling out to the

00:30:24.516 --> 00:30:25.726
expressions we would call in

00:30:25.726 --> 00:30:26.186
manually.

00:30:26.786 --> 00:30:27.956
We don't have time unfortunately

00:30:27.956 --> 00:30:28.986
to go into detail in this

00:30:28.986 --> 00:30:29.276
script.

00:30:29.276 --> 00:30:30.206
But we're going to make this

00:30:30.206 --> 00:30:31.116
available for you guys to

00:30:31.116 --> 00:30:32.406
download, so you can see how it

00:30:32.406 --> 00:30:33.556
works and use it as the basis

00:30:33.556 --> 00:30:34.576
for your custom debugging

00:30:34.576 --> 00:30:35.096
commands.

00:30:36.376 --> 00:30:39.506
Let me show you how to enable a

00:30:39.506 --> 00:30:40.376
script like this.

00:30:40.666 --> 00:30:42.606
Just edit your .lldb in it file

00:30:43.266 --> 00:30:45.846
in your home directory and add a

00:30:45.846 --> 00:30:47.196
line command script import.

00:30:47.736 --> 00:30:49.056
I'd also like to add some of the

00:30:49.056 --> 00:30:50.566
aliases that I find convenient,

00:30:50.786 --> 00:30:52.426
such as the poc alias I created

00:30:52.426 --> 00:30:53.866
before, and an alias for

00:30:53.866 --> 00:30:54.846
flushing the transaction.

00:30:55.086 --> 00:30:56.000
I think I'll remember this one.

00:31:00.156 --> 00:31:01.326
I'm going to copy command script

00:31:01.326 --> 00:31:02.896
import so we can just paste it

00:31:02.896 --> 00:31:04.886
in to the debug session to save

00:31:04.886 --> 00:31:06.026
us restarting that session.

00:31:06.266 --> 00:31:07.406
And now we have a command called

00:31:07.406 --> 00:31:07.776
nudge.

00:31:08.256 --> 00:31:10.586
So I can, let's say, nudge zero

00:31:10.626 --> 00:31:11.986
horizontally, minus five

00:31:11.986 --> 00:31:13.606
vertically, give it the memory

00:31:13.606 --> 00:31:15.516
address of that view and start

00:31:15.516 --> 00:31:17.076
just nudging it around in the

00:31:17.376 --> 00:31:17.886
simulator.

00:31:18.516 --> 00:31:26.306
[ Applause ]

00:31:26.806 --> 00:31:28.176
The great thing about LLDB is if

00:31:28.176 --> 00:31:29.746
you just hit enter on a blank

00:31:29.746 --> 00:31:30.856
line, it repeats the previous

00:31:30.856 --> 00:31:32.006
line, so it's great for nudging.

00:31:32.736 --> 00:31:34.446
And I can nudge it across to the

00:31:34.446 --> 00:31:35.776
right a bit, just to get it

00:31:35.776 --> 00:31:36.136
right.

00:31:36.576 --> 00:31:37.966
And then let's do the other

00:31:37.966 --> 00:31:38.326
view.

00:31:38.326 --> 00:31:41.346
We can give it any view

00:31:41.346 --> 00:31:43.096
expression, say the attempts

00:31:43.096 --> 00:31:44.026
view down to here.

00:31:44.446 --> 00:31:45.606
The other feature of nudge is

00:31:45.606 --> 00:31:46.566
once you've given it a view

00:31:46.566 --> 00:31:47.826
expression, you don't have to

00:31:47.856 --> 00:31:48.816
repeat that expression.

00:31:49.436 --> 00:31:51.756
It remembers that and applies it

00:31:51.756 --> 00:31:53.886
to the same view that you've

00:31:53.886 --> 00:31:54.686
specified previously.

00:31:54.686 --> 00:31:55.546
So something like that looks

00:31:55.546 --> 00:31:55.866
fine.

00:31:56.136 --> 00:31:57.086
It's a better layout than we had

00:31:57.086 --> 00:31:57.486
before.

00:31:57.666 --> 00:31:59.386
And what I can do now is take

00:31:59.806 --> 00:32:01.596
the information provided by

00:32:01.596 --> 00:32:03.186
nudge, such as the total offset

00:32:03.186 --> 00:32:04.746
applied to that view relative to

00:32:04.746 --> 00:32:06.156
its original center point, and

00:32:06.156 --> 00:32:07.116
then your frame value.

00:32:07.456 --> 00:32:09.026
Back to my code and modify my

00:32:09.026 --> 00:32:10.586
layout code or my auto-layout

00:32:10.586 --> 00:32:12.086
constraints, and I've easily

00:32:12.086 --> 00:32:13.676
mocked up a new layout for my

00:32:13.676 --> 00:32:14.026
scene.

00:32:14.616 --> 00:32:17.406
Now the last thing to do --

00:32:17.736 --> 00:32:19.396
well, firstly, don't forget to

00:32:19.396 --> 00:32:21.366
check off debug, very important.

00:32:22.006 --> 00:32:23.786
And then the last thing to do

00:32:23.786 --> 00:32:25.506
before restarting or recompiling

00:32:25.506 --> 00:32:27.516
and rerunning is to disable or

00:32:27.516 --> 00:32:29.466
remove any breakpoints that are

00:32:29.466 --> 00:32:30.566
injecting expressions because

00:32:30.566 --> 00:32:31.606
you don't want those lines to be

00:32:31.606 --> 00:32:32.516
executed twice.

00:32:33.266 --> 00:32:34.676
Simply selecting them or a group

00:32:34.676 --> 00:32:35.686
of them and hitting delete is a

00:32:35.686 --> 00:32:36.816
quick way to delete those.

00:32:37.546 --> 00:32:38.576
And so those are some of the

00:32:38.576 --> 00:32:40.276
debugging techniques that I like

00:32:40.276 --> 00:32:41.596
to use to enhance my debugging

00:32:41.596 --> 00:32:42.276
workflows.

00:32:43.086 --> 00:32:45.346
Notice how we were able to

00:32:45.346 --> 00:32:48.196
diagnose and fix all four bugs

00:32:48.196 --> 00:32:50.166
without having to recompile or

00:32:50.166 --> 00:32:50.626
rerun.

00:32:51.336 --> 00:32:53.106
This can be a huge timesaver,

00:32:53.106 --> 00:32:54.946
especially for complex projects

00:32:55.236 --> 00:32:57.226
and can be crucial when trying

00:32:57.226 --> 00:32:59.316
to solve hard to reproduce bugs.

00:32:59.756 --> 00:33:01.526
So thanks for [inaudible] I hope

00:33:01.616 --> 00:33:02.616
you enjoyed that and can use

00:33:02.616 --> 00:33:03.536
these techniques in your

00:33:03.536 --> 00:33:04.536
debugging sessions.

00:33:05.516 --> 00:33:14.966
[ Applause ]

00:33:15.466 --> 00:33:17.396
I'd just like to quickly recap

00:33:17.396 --> 00:33:19.556
all of the features and tricks

00:33:19.556 --> 00:33:21.676
that we went over during that

00:33:21.676 --> 00:33:22.416
debug session.

00:33:22.806 --> 00:33:24.486
So firstly, we looked at how we

00:33:24.486 --> 00:33:25.926
can use Xcode behaviors to

00:33:25.926 --> 00:33:27.246
dedicate attempt to debugging

00:33:27.586 --> 00:33:29.196
and how to use LLDB expressions

00:33:29.196 --> 00:33:30.416
to modify program state.

00:33:31.076 --> 00:33:32.526
We can use auto-continuing

00:33:32.526 --> 00:33:33.486
breakpoints with debugger

00:33:33.486 --> 00:33:35.136
commands to inject code live,

00:33:35.696 --> 00:33:37.246
and we can create dependent

00:33:37.246 --> 00:33:38.746
breakpoint configurations using

00:33:38.746 --> 00:33:40.696
breakpoint set one shot as a

00:33:40.696 --> 00:33:42.056
debugger command action for

00:33:42.056 --> 00:33:42.736
another breakpoint.

00:33:43.536 --> 00:33:45.286
Even when in assembly frames, we

00:33:45.286 --> 00:33:47.036
can easily inspect the function

00:33:47.036 --> 00:33:48.626
arguments using po dollar arg

00:33:48.626 --> 00:33:49.766
one, dollar arg two, et cetera,

00:33:50.256 --> 00:33:52.476
and we can skip lines of code by

00:33:52.476 --> 00:33:53.726
dragging the instruction pointer

00:33:53.906 --> 00:33:55.206
or using the command thread

00:33:55.206 --> 00:33:55.446
jump.

00:33:56.336 --> 00:33:57.736
We can request that the debugger

00:33:57.736 --> 00:33:58.746
pause when a variable is

00:33:58.746 --> 00:34:01.586
modified using watchpoints, and

00:34:01.756 --> 00:34:03.706
we can even evaluate Objective-C

00:34:03.706 --> 00:34:05.336
code in Swift frames using

00:34:05.336 --> 00:34:06.686
expression -l objc.

00:34:06.816 --> 00:34:10.525
We can request that view changes

00:34:10.525 --> 00:34:11.466
are flashed directly to the

00:34:11.466 --> 00:34:12.806
screen, even while paused in the

00:34:12.806 --> 00:34:14.166
debugger, using the expression

00:34:14.216 --> 00:34:15.366
ca transition flush.

00:34:16.136 --> 00:34:18.516
And you can add custom LLDB

00:34:18.516 --> 00:34:20.116
commands, either aliasing

00:34:20.246 --> 00:34:21.596
commonly used commands to

00:34:21.596 --> 00:34:23.466
correct shortcuts or by

00:34:23.466 --> 00:34:25.196
completely customizing and

00:34:25.196 --> 00:34:26.886
creating your own command using

00:34:26.886 --> 00:34:28.356
LLDB's Python scripting.

00:34:28.775 --> 00:34:29.936
And don't forget to check out

00:34:29.936 --> 00:34:30.815
our session website.

00:34:30.815 --> 00:34:32.076
We'll be posting that nudge

00:34:32.076 --> 00:34:33.436
script soon, so you can download

00:34:33.436 --> 00:34:34.746
it, check it out, and use it as

00:34:34.746 --> 00:34:36.005
the basis for your commands.

00:34:37.956 --> 00:34:39.116
There's one more thing I wanted

00:34:39.116 --> 00:34:40.516
to cover with you guys and

00:34:40.516 --> 00:34:42.306
that's just the current LLDB

00:34:42.306 --> 00:34:43.076
print commands.

00:34:43.476 --> 00:34:44.766
So you might be familiar with

00:34:44.766 --> 00:34:44.833
po.

00:34:44.833 --> 00:34:45.746
We used it a lot during the

00:34:45.746 --> 00:34:47.646
demo, and we saw that po

00:34:47.646 --> 00:34:49.266
requests the debug description

00:34:49.266 --> 00:34:50.346
of an object, and you can

00:34:50.346 --> 00:34:51.036
customize that.

00:34:51.036 --> 00:34:52.696
And that's because po is simply

00:34:52.696 --> 00:34:54.216
an alias for expression --

00:34:54.216 --> 00:34:58.156
object description or expression

00:34:58.156 --> 00:35:00.866
-O, compared with the p

00:35:00.866 --> 00:35:02.046
commands, which is simply an

00:35:02.046 --> 00:35:03.006
alias for expression.

00:35:03.476 --> 00:35:05.946
And it uses LLDB's built-in

00:35:05.946 --> 00:35:07.116
formatters to show a

00:35:07.116 --> 00:35:08.716
representation of that object.

00:35:10.126 --> 00:35:10.976
The third command that's

00:35:10.976 --> 00:35:12.836
important to know is frame

00:35:12.836 --> 00:35:13.296
variable.

00:35:13.696 --> 00:35:14.916
It differs from the previous two

00:35:14.916 --> 00:35:15.736
in that it doesn't have to

00:35:15.736 --> 00:35:16.886
compile and evaluate an

00:35:16.886 --> 00:35:17.756
expression at all.

00:35:17.986 --> 00:35:19.446
It simply reads the value of the

00:35:19.446 --> 00:35:21.066
name variable directly from

00:35:21.066 --> 00:35:22.686
memory and then uses LLDB's

00:35:22.686 --> 00:35:23.586
built-in formatters.

00:35:24.216 --> 00:35:25.196
So the choice of which command

00:35:25.196 --> 00:35:26.266
to use is more personal

00:35:26.266 --> 00:35:27.336
preference and the type of

00:35:27.426 --> 00:35:28.436
information you want to see

00:35:28.436 --> 00:35:29.076
while debugging.

00:35:29.636 --> 00:35:30.876
But it's important to remember

00:35:30.876 --> 00:35:31.746
that if you ever end up in a

00:35:31.746 --> 00:35:33.986
situation where expressions are

00:35:33.986 --> 00:35:36.356
failing or so po and p may not

00:35:36.356 --> 00:35:38.036
be working for you, if you need

00:35:38.036 --> 00:35:39.006
to inspect a variable in the

00:35:39.006 --> 00:35:40.066
current frame, then frame

00:35:40.066 --> 00:35:40.906
variable should still work for

00:35:40.946 --> 00:35:41.000
you.

00:35:44.176 --> 00:35:45.436
And with that, I'd like to hand

00:35:45.436 --> 00:35:47.246
over to Sebastian, who's going

00:35:47.246 --> 00:35:48.596
to tell you about some advanced

00:35:48.596 --> 00:35:49.536
view debugging techniques.

00:35:49.536 --> 00:35:49.866
Thank you.

00:35:50.516 --> 00:35:55.026
[ Applause ]

00:35:55.526 --> 00:35:56.076
>> Thank you, Chris.

00:35:58.476 --> 00:36:01.646
I'm excited to show you tips and

00:36:01.646 --> 00:36:02.976
tricks how to get the most out

00:36:02.976 --> 00:36:03.956
of Xcode's view debugger.

00:36:04.226 --> 00:36:05.406
And we'll also take a look at

00:36:05.406 --> 00:36:07.506
the enhancements we made for

00:36:07.506 --> 00:36:09.266
Xcode 10 to provide a great

00:36:09.266 --> 00:36:10.676
debugging experience when you

00:36:10.676 --> 00:36:12.696
adopt a dark look in macOS

00:36:12.696 --> 00:36:12.763
[inaudible].

00:36:12.763 --> 00:36:16.466
And we'll take a look at this in

00:36:16.466 --> 00:36:16.756
a demo.

00:36:17.696 --> 00:36:19.076
So let me switch to the demo

00:36:19.076 --> 00:36:21.826
machine, and I'll be using the

00:36:21.896 --> 00:36:23.496
same project that Chris has been

00:36:23.496 --> 00:36:24.706
using and you already saw that

00:36:24.706 --> 00:36:26.476
there are two more bugs we have

00:36:26.526 --> 00:36:26.956
to solve.

00:36:27.046 --> 00:36:30.596
However, I'm not going to be

00:36:30.596 --> 00:36:33.036
using the iOS App, I'm going to

00:36:33.036 --> 00:36:33.756
be using the [inaudible].

00:36:34.296 --> 00:36:36.446
So we can see the Mac version of

00:36:36.446 --> 00:36:38.296
our Solar System app here, we

00:36:38.296 --> 00:36:39.316
can see that looks pretty good

00:36:39.316 --> 00:36:41.736
in dark mode but there are two

00:36:41.736 --> 00:36:42.606
bugs that we have to solve

00:36:42.636 --> 00:36:42.856
today.

00:36:43.426 --> 00:36:45.536
First of all, the planet image

00:36:45.536 --> 00:36:46.776
is not centered horizontally

00:36:46.776 --> 00:36:48.586
correctly and that is a very

00:36:48.586 --> 00:36:49.206
obvious bug.

00:36:49.446 --> 00:36:50.376
You can see on the right-hand

00:36:50.376 --> 00:36:52.526
side this Earth image is shifted

00:36:52.526 --> 00:36:54.686
to the right-hand side, so we'll

00:36:54.686 --> 00:36:55.676
take a look at this problem.

00:36:55.946 --> 00:36:57.506
And the second bug is that the

00:36:57.506 --> 00:36:59.666
description in a popover is not

00:36:59.696 --> 00:37:00.996
readable in dark mode.

00:37:01.226 --> 00:37:02.476
Let me show you what that is

00:37:02.476 --> 00:37:03.066
referring to.

00:37:03.696 --> 00:37:05.526
When I switch to this app, I can

00:37:05.526 --> 00:37:07.006
bring up the orbital details

00:37:07.136 --> 00:37:08.376
information in this popover

00:37:08.376 --> 00:37:08.676
here.

00:37:09.186 --> 00:37:10.256
You can see that the labels at

00:37:10.256 --> 00:37:11.426
the top and nice and readable;

00:37:11.506 --> 00:37:13.416
however, the label at the bottom

00:37:13.416 --> 00:37:14.436
is so hard to read, I really

00:37:14.436 --> 00:37:15.666
have to select the text to read

00:37:15.666 --> 00:37:15.806
it.

00:37:16.616 --> 00:37:17.626
So these are the two bugs we

00:37:17.626 --> 00:37:18.626
have to take a look at.

00:37:19.196 --> 00:37:20.776
Let me hide the to do list and

00:37:20.776 --> 00:37:21.436
let's jump right in.

00:37:21.926 --> 00:37:23.536
So what I want to do is I want

00:37:23.536 --> 00:37:24.676
to capture the view hierarchy of

00:37:24.716 --> 00:37:26.086
this application with Xcode,

00:37:26.686 --> 00:37:27.756
then inspect it.

00:37:28.566 --> 00:37:29.846
We'll find the problem and then

00:37:29.846 --> 00:37:31.026
hopefully find the fix, so we

00:37:31.026 --> 00:37:31.746
can all have a beer.

00:37:32.876 --> 00:37:34.306
The problem is when I switch to

00:37:34.306 --> 00:37:35.386
Xcode to capture the view

00:37:35.386 --> 00:37:37.276
hierarchy, this popover will be

00:37:37.276 --> 00:37:39.336
dismissed since the application

00:37:39.336 --> 00:37:40.756
goes into the background, and we

00:37:40.756 --> 00:37:41.936
won't be able to capture its

00:37:41.936 --> 00:37:42.396
view hierarchy.

00:37:43.226 --> 00:37:44.296
So what we have to do is we have

00:37:44.296 --> 00:37:46.056
to capture the app in its active

00:37:46.056 --> 00:37:47.586
state, and I will show you two

00:37:47.586 --> 00:37:48.526
ways how to do that.

00:37:49.876 --> 00:37:50.856
And you can see when I now

00:37:50.856 --> 00:37:52.306
switch to Xcode how this popover

00:37:52.306 --> 00:37:53.086
is being dismissed.

00:37:54.116 --> 00:37:55.486
First of all, we can use the

00:37:55.486 --> 00:37:56.776
touch bar, and I'll show you

00:37:56.776 --> 00:37:57.896
what that looks like by bringing

00:37:57.896 --> 00:37:59.276
up the touch bar simulator from

00:37:59.276 --> 00:38:00.306
Xcode's window menu.

00:38:00.816 --> 00:38:01.846
I'll switch back to the Solar

00:38:01.846 --> 00:38:02.816
System app and bring up the

00:38:03.116 --> 00:38:03.776
popover again.

00:38:04.126 --> 00:38:05.606
And taking a look at the touch

00:38:05.606 --> 00:38:06.436
bar, you can see that there's

00:38:06.516 --> 00:38:08.936
this spray can icon, and when I

00:38:08.936 --> 00:38:10.056
tap that on the touch bar, you

00:38:10.056 --> 00:38:12.096
can see that there's a subset of

00:38:12.096 --> 00:38:14.306
the debug option that Xcode

00:38:14.306 --> 00:38:15.536
provides in its debug bar.

00:38:15.966 --> 00:38:17.246
So it's a very convenient way to

00:38:17.246 --> 00:38:18.816
access these from your touch

00:38:18.856 --> 00:38:19.106
bar.

00:38:19.456 --> 00:38:20.646
And as you can see, I can bring

00:38:20.646 --> 00:38:22.306
those up with Xcode being in the

00:38:22.306 --> 00:38:23.456
background, so you can access

00:38:23.506 --> 00:38:24.566
them even when you're, for

00:38:24.566 --> 00:38:25.866
example, developing your app in

00:38:25.866 --> 00:38:26.516
full screen mode.

00:38:27.516 --> 00:38:29.386
And one of these options allows

00:38:29.386 --> 00:38:31.256
me to capture the view

00:38:31.256 --> 00:38:31.646
hierarchy.

00:38:32.066 --> 00:38:32.936
Now I'm not going to do that

00:38:32.936 --> 00:38:33.766
because I know that not

00:38:33.866 --> 00:38:35.056
everybody has a touch bar

00:38:35.056 --> 00:38:35.856
[inaudible] so I will show you

00:38:35.856 --> 00:38:36.416
an alternative.

00:38:36.956 --> 00:38:38.796
I'm going to close the

00:38:38.796 --> 00:38:40.186
simulator, and I will make use

00:38:40.556 --> 00:38:42.956
of command click to perform the

00:38:42.956 --> 00:38:44.706
click on the button in Xcode's

00:38:44.706 --> 00:38:45.236
debug bar.

00:38:46.536 --> 00:38:47.836
Command click is a system-wide

00:38:47.836 --> 00:38:48.746
gesture that allows you to

00:38:48.746 --> 00:38:50.366
perform mouse events without

00:38:50.366 --> 00:38:51.646
activating the application that

00:38:51.646 --> 00:38:52.816
the mouse event is performed on.

00:38:53.966 --> 00:38:57.426
So this allowed us to invoke the

00:38:57.426 --> 00:38:58.576
capture of the view hierarchy.

00:38:58.826 --> 00:38:59.676
The debugger paused the

00:38:59.676 --> 00:39:00.676
application while it was still

00:39:00.826 --> 00:39:02.476
in its active state, and we can

00:39:02.476 --> 00:39:04.346
see that the UI still renders as

00:39:04.346 --> 00:39:05.796
if the app was front most and

00:39:05.796 --> 00:39:06.556
the popover hasn't been

00:39:06.556 --> 00:39:07.006
dismissed.

00:39:07.456 --> 00:39:08.266
If you're wondering why that

00:39:08.266 --> 00:39:09.406
spinning [inaudible] is coming

00:39:09.406 --> 00:39:10.236
up, that's because the

00:39:10.236 --> 00:39:11.216
application is paused in the

00:39:11.216 --> 00:39:12.226
debugger and doesn't respond to

00:39:12.226 --> 00:39:12.986
mouse events anymore.

00:39:14.806 --> 00:39:16.116
Now, you may be wondering, if we

00:39:16.116 --> 00:39:17.156
take a look at the view debugger

00:39:17.156 --> 00:39:19.256
here, why the popover isn't

00:39:19.256 --> 00:39:19.616
visible.

00:39:20.426 --> 00:39:21.696
Don't worry, the view hierarchy

00:39:21.696 --> 00:39:22.396
has been captured.

00:39:22.486 --> 00:39:24.176
I'll get to how we take a look

00:39:24.176 --> 00:39:25.346
at the popover once we get to

00:39:25.346 --> 00:39:26.986
that bug, but first I want to

00:39:26.986 --> 00:39:28.176
take a look at the layout issue

00:39:28.176 --> 00:39:29.786
of this image view here.

00:39:29.836 --> 00:39:31.356
So I'll select the image view

00:39:31.356 --> 00:39:32.396
here and I'll zoom in a little

00:39:32.586 --> 00:39:32.676
bit.

00:39:33.176 --> 00:39:34.096
When we take a look at the

00:39:34.096 --> 00:39:35.416
inspect on the right-hand side,

00:39:35.906 --> 00:39:37.276
we can see that this is an

00:39:37.326 --> 00:39:39.146
underscore NS image view simple

00:39:39.146 --> 00:39:39.546
image view.

00:39:39.806 --> 00:39:41.556
Now the fact that this is prefix

00:39:41.556 --> 00:39:43.426
with an underscore usually hints

00:39:43.426 --> 00:39:44.466
at the fact that this is an

00:39:44.516 --> 00:39:45.836
internal class from a system

00:39:45.836 --> 00:39:48.496
framework and not what we use

00:39:48.496 --> 00:39:50.576
when we set up image views in

00:39:50.576 --> 00:39:51.716
code or in interface builder.

00:39:51.976 --> 00:39:52.876
So let's take a look at this

00:39:52.876 --> 00:39:54.486
object in the view hierarchy.

00:39:54.656 --> 00:39:55.836
And I can do that by using the

00:39:55.836 --> 00:39:57.696
navigate menu, select reveal in

00:39:57.696 --> 00:39:58.476
debug navigator.

00:39:59.016 --> 00:40:00.016
We can now, on the left-hand

00:40:00.016 --> 00:40:02.186
side, see it relative to its

00:40:02.316 --> 00:40:03.456
super and sub views.

00:40:04.526 --> 00:40:05.696
Now, we can see that super view

00:40:05.696 --> 00:40:07.216
is in fact an NS image view, so

00:40:07.216 --> 00:40:08.116
that's what we're looking for.

00:40:08.656 --> 00:40:10.066
We can also see that its super

00:40:10.066 --> 00:40:12.226
view is a planet globe view, and

00:40:12.696 --> 00:40:14.026
the super view of the planet

00:40:14.026 --> 00:40:15.656
globe view is an NS effect view.

00:40:16.666 --> 00:40:18.226
So I will select the image view

00:40:18.756 --> 00:40:20.856
here and we can now also see

00:40:20.856 --> 00:40:22.166
other properties of the image

00:40:22.166 --> 00:40:22.956
view on the right-hand side.

00:40:23.586 --> 00:40:24.746
So let's inspect the layout of

00:40:24.796 --> 00:40:25.176
this view.

00:40:25.826 --> 00:40:26.856
I'm using auto-layout in this

00:40:26.856 --> 00:40:28.296
application, so I want to take a

00:40:28.296 --> 00:40:28.996
look at the auto-layout

00:40:28.996 --> 00:40:29.536
constraints.

00:40:30.286 --> 00:40:31.656
I can show the constraints using

00:40:31.656 --> 00:40:34.466
this button here, and we can now

00:40:34.466 --> 00:40:35.666
see all the constraints that

00:40:35.666 --> 00:40:36.816
currently affect the layout of

00:40:36.886 --> 00:40:37.276
this view.

00:40:37.276 --> 00:40:39.406
You can see that there's, for

00:40:39.406 --> 00:40:40.176
example, an [inaudible]

00:40:40.386 --> 00:40:41.496
constraint here.

00:40:42.006 --> 00:40:43.346
We can also see this vertical

00:40:43.556 --> 00:40:45.116
line here, which is an alignment

00:40:45.116 --> 00:40:45.586
constraint.

00:40:46.526 --> 00:40:48.336
When I select this constraint,

00:40:48.336 --> 00:40:49.766
we can see all the properties in

00:40:49.766 --> 00:40:50.746
the inspect on the right-hand

00:40:50.746 --> 00:40:50.976
side.

00:40:51.326 --> 00:40:52.326
If you're wondering why the view

00:40:52.326 --> 00:40:53.236
debugger only shows you

00:40:53.236 --> 00:40:55.086
wireframes right now, that is

00:40:55.156 --> 00:40:56.156
because it only shows the

00:40:56.156 --> 00:40:57.316
content of the views that

00:40:57.406 --> 00:40:58.566
currently participate in the

00:40:58.566 --> 00:40:59.706
layout of the selected view.

00:41:00.076 --> 00:41:01.246
And since all those views

00:41:01.246 --> 00:41:02.776
themselves don't have content,

00:41:03.146 --> 00:41:04.186
we currently only show

00:41:04.186 --> 00:41:04.676
wireframes.

00:41:05.356 --> 00:41:07.626
So with the constraint selected,

00:41:08.016 --> 00:41:09.166
let's take a look at the inspect

00:41:09.166 --> 00:41:09.916
on the right-hand side.

00:41:10.516 --> 00:41:12.696
We can see that it aligns the

00:41:12.696 --> 00:41:14.006
horizontal center of the image

00:41:14.006 --> 00:41:15.716
view with the horizontal center

00:41:15.716 --> 00:41:17.126
of the planet globe view and it

00:41:17.126 --> 00:41:18.916
does so with a constant of zero.

00:41:19.076 --> 00:41:20.536
So it aligns it horizontally

00:41:20.536 --> 00:41:21.516
centered in its super view.

00:41:22.606 --> 00:41:24.136
Now let's select the planet

00:41:24.136 --> 00:41:26.186
globe view from the debug

00:41:26.186 --> 00:41:27.756
navigator, and we can see that

00:41:27.756 --> 00:41:29.036
it's a little bit larger towards

00:41:29.036 --> 00:41:30.826
the left-hand side but it aligns

00:41:30.826 --> 00:41:31.526
on the right-hand side.

00:41:31.526 --> 00:41:32.526
So that's a little bit weird

00:41:32.526 --> 00:41:33.556
because we just saw the

00:41:33.556 --> 00:41:34.746
constraints aligning them

00:41:34.816 --> 00:41:36.326
correctly or exactly

00:41:36.326 --> 00:41:38.486
horizontally, but that's not

00:41:38.556 --> 00:41:39.556
really what we see in the view

00:41:39.556 --> 00:41:39.866
debugger.

00:41:40.146 --> 00:41:40.986
So let's take a look at the

00:41:40.986 --> 00:41:42.666
constraints of the planet globe

00:41:42.666 --> 00:41:43.376
view and see if we can

00:41:43.426 --> 00:41:45.286
understand what's going on.

00:41:45.596 --> 00:41:46.416
I'll select the leading

00:41:46.416 --> 00:41:47.956
constraint here, and taking a

00:41:47.956 --> 00:41:49.476
look at the inspect again, we

00:41:49.476 --> 00:41:50.526
can see that it aligns the

00:41:50.526 --> 00:41:51.856
leading edge of the planet globe

00:41:51.856 --> 00:41:53.696
view with the leading edge of

00:41:53.806 --> 00:41:55.316
the NS visual effect view, which

00:41:55.316 --> 00:41:56.446
we saw in super view.

00:41:56.906 --> 00:41:58.656
So it simply inserts it relative

00:41:58.656 --> 00:42:00.196
to its super view and it does so

00:42:00.196 --> 00:42:02.176
with a constant of 30, so that

00:42:02.176 --> 00:42:02.666
makes sense.

00:42:03.366 --> 00:42:04.536
And then the trailing constraint

00:42:04.536 --> 00:42:07.916
here aligns the trailing edge of

00:42:07.916 --> 00:42:09.256
the planet globe view with the

00:42:09.256 --> 00:42:10.546
trailing edge of the super view,

00:42:10.956 --> 00:42:11.956
and it also does so with a

00:42:12.096 --> 00:42:12.846
constant of 30.

00:42:13.426 --> 00:42:14.156
Now the fact that this

00:42:14.156 --> 00:42:15.686
constraint doesn't attach to

00:42:15.686 --> 00:42:16.796
anything on the right-hand side

00:42:16.796 --> 00:42:17.866
is a little bit suspicious and

00:42:17.866 --> 00:42:19.016
makes me wonder if we see the

00:42:19.016 --> 00:42:19.716
whole picture here.

00:42:20.206 --> 00:42:21.306
In such a situation, it's

00:42:21.306 --> 00:42:22.426
usually a good idea to see if

00:42:22.426 --> 00:42:23.326
there's any content that's

00:42:23.326 --> 00:42:24.396
currently being clipped that we

00:42:24.396 --> 00:42:25.336
don't see by default.

00:42:26.006 --> 00:42:27.456
And you can do so using this

00:42:27.496 --> 00:42:28.776
button down here to show clip

00:42:28.826 --> 00:42:29.316
content.

00:42:29.706 --> 00:42:30.916
Now, when I enable this

00:42:30.916 --> 00:42:32.186
functionality, you can see that

00:42:32.186 --> 00:42:33.296
the planet globe view actually

00:42:33.326 --> 00:42:34.816
extends past the window bounds

00:42:34.816 --> 00:42:36.436
towards the right-hand side, and

00:42:36.436 --> 00:42:38.026
now the horizontal centering

00:42:38.516 --> 00:42:39.876
constraint makes sense again

00:42:39.876 --> 00:42:40.926
since it actually correctly

00:42:40.926 --> 00:42:42.946
centers it in the super view.

00:42:43.316 --> 00:42:44.916
However, the super view just

00:42:44.916 --> 00:42:46.176
extends past the window.

00:42:46.326 --> 00:42:48.166
This is a very common issue if

00:42:48.166 --> 00:42:49.186
you set up your constraints in

00:42:49.186 --> 00:42:50.216
code, where you accidentally

00:42:50.216 --> 00:42:51.696
swap first and second item and

00:42:51.696 --> 00:42:52.826
thereby get the layout direction

00:42:52.826 --> 00:42:53.106
wrong.

00:42:53.506 --> 00:42:54.906
Or you accidentally invert the

00:42:54.906 --> 00:42:57.166
constant, and in this case, we

00:42:57.166 --> 00:42:58.636
used 30 instead of using

00:42:58.636 --> 00:43:00.226
negative 30 to insert it towards

00:43:00.226 --> 00:43:00.806
the left-hand side.

00:43:01.116 --> 00:43:03.246
So what I want to do is I want

00:43:03.246 --> 00:43:04.576
to try out that fix to invert

00:43:04.576 --> 00:43:05.126
the constant.

00:43:05.126 --> 00:43:06.236
I will make use of the same

00:43:06.236 --> 00:43:07.986
technique that Chris introduced

00:43:07.986 --> 00:43:09.526
earlier by simply applying it

00:43:09.666 --> 00:43:10.286
through LLDB.

00:43:11.086 --> 00:43:13.096
So, with this constraint

00:43:13.096 --> 00:43:19.026
selected, I'll select edit,

00:43:19.286 --> 00:43:19.716
copy.

00:43:20.396 --> 00:43:22.536
And I will bring up the console

00:43:22.536 --> 00:43:24.416
area at the bottom, and what

00:43:24.796 --> 00:43:27.916
this copying gives me is the

00:43:28.236 --> 00:43:28.986
[inaudible] pointer to the

00:43:28.986 --> 00:43:30.246
selected object, and that works

00:43:30.246 --> 00:43:31.876
for all objects that you select

00:43:31.876 --> 00:43:32.996
in the view debugger as well as

00:43:32.996 --> 00:43:33.846
in the memory graph debugger.

00:43:33.846 --> 00:43:35.306
It makes it super convenient to

00:43:35.306 --> 00:43:36.166
use them in the console.

00:43:36.426 --> 00:43:37.206
So let's --

00:43:38.516 --> 00:43:41.616
[ Applause ]

00:43:42.116 --> 00:43:42.366
Thank you.

00:43:43.326 --> 00:43:44.026
Let's print the debug

00:43:44.026 --> 00:43:45.366
description and we can confirm

00:43:45.366 --> 00:43:46.746
that the constant is in fact

00:43:46.966 --> 00:43:47.726
positive 30.

00:43:48.236 --> 00:43:49.596
That's what we saw in the

00:43:49.596 --> 00:43:50.286
inspector as well.

00:43:50.496 --> 00:43:52.236
So let's set the constant to

00:43:52.236 --> 00:43:52.846
negative 30.

00:43:53.226 --> 00:43:54.836
I'll type e, which is the super

00:43:54.836 --> 00:43:57.076
short form of expression by

00:43:57.076 --> 00:43:59.786
casting the pointer and then say

00:43:59.786 --> 00:44:02.776
set constant to negative 30.

00:44:03.276 --> 00:44:05.006
We have the same problem that

00:44:05.306 --> 00:44:06.736
the path application doesn't

00:44:06.736 --> 00:44:08.066
update that Chris saw earlier,

00:44:08.606 --> 00:44:09.796
so what I'm going to do or what

00:44:09.796 --> 00:44:11.006
I have to do is I have to

00:44:11.356 --> 00:44:13.076
[inaudible] the ca transaction

00:44:13.176 --> 00:44:16.086
to [inaudible] application

00:44:16.456 --> 00:44:18.716
schedule update of its UI.

00:44:18.716 --> 00:44:21.166
I can use the handy command that

00:44:21.166 --> 00:44:24.216
Chris added earlier, so I can

00:44:24.616 --> 00:44:25.526
take the command from here.

00:44:26.246 --> 00:44:27.896
And we can now see that the

00:44:27.926 --> 00:44:29.246
planet image is horizontally

00:44:29.246 --> 00:44:30.866
centered correctly, so inverting

00:44:30.866 --> 00:44:31.696
the constant was the correct

00:44:31.696 --> 00:44:32.066
fix.

00:44:32.466 --> 00:44:34.026
So we were able to confirm this,

00:44:34.426 --> 00:44:35.676
so let's apply this change in

00:44:35.676 --> 00:44:36.126
our code.

00:44:36.696 --> 00:44:39.186
With the constraints selected,

00:44:39.466 --> 00:44:40.236
you can see that on the

00:44:40.236 --> 00:44:42.156
right-hand side I can see this

00:44:42.156 --> 00:44:43.416
back trace here, and that is the

00:44:43.416 --> 00:44:44.836
allocation back trace of the

00:44:44.896 --> 00:44:46.116
constraint and tells me exactly

00:44:46.116 --> 00:44:47.746
in which frame it was allocated.

00:44:48.016 --> 00:44:49.236
So it allows me to jump right to

00:44:49.236 --> 00:44:51.276
the code where I created that

00:44:51.276 --> 00:44:51.796
constraint.

00:44:52.726 --> 00:44:55.076
Now to have this creation back

00:44:55.076 --> 00:44:56.276
traces show up, you have to

00:44:56.276 --> 00:44:58.356
enable mailx backlogging and let

00:44:58.356 --> 00:44:59.906
me show you how you enable that.

00:45:00.366 --> 00:45:01.736
You go to your scheme up here

00:45:01.736 --> 00:45:02.816
and [inaudible] edit scheme.

00:45:03.836 --> 00:45:05.606
And in the diagnostics tab of

00:45:05.656 --> 00:45:08.096
the scheme options, under

00:45:08.096 --> 00:45:09.556
logging, you can enable mailx

00:45:09.836 --> 00:45:11.396
stack logging for all

00:45:11.396 --> 00:45:12.766
allocations in prehistory.

00:45:13.606 --> 00:45:14.546
And that will provide you with

00:45:14.546 --> 00:45:15.816
these handy allocation

00:45:15.816 --> 00:45:17.076
backtraces for all selected

00:45:17.076 --> 00:45:18.406
objects in the view debugger as

00:45:18.436 --> 00:45:19.766
well as in Xcode's memory graph

00:45:19.766 --> 00:45:20.016
debugger.

00:45:21.146 --> 00:45:22.766
Now, when I mouse over this

00:45:23.256 --> 00:45:24.866
stackframe here, we can see the

00:45:24.866 --> 00:45:26.926
full name of that frame.

00:45:27.596 --> 00:45:29.546
And we can see that it is the

00:45:29.546 --> 00:45:30.886
set up planet globe view layout

00:45:30.886 --> 00:45:31.966
method in the scene view

00:45:31.966 --> 00:45:32.476
controller.

00:45:33.496 --> 00:45:35.956
And I can jump to these points

00:45:35.956 --> 00:45:37.706
in code using this jump to

00:45:37.706 --> 00:45:38.086
arrow.

00:45:38.906 --> 00:45:40.466
And I will do so by holding down

00:45:40.466 --> 00:45:42.196
shift control option, which

00:45:42.196 --> 00:45:44.096
brings us this navigational

00:45:44.246 --> 00:45:45.006
[inaudible] and allows me to

00:45:45.006 --> 00:45:46.776
open this file in a separate

00:45:46.776 --> 00:45:47.056
window.

00:45:47.586 --> 00:45:50.376
Now you can see that the line of

00:45:50.486 --> 00:45:51.356
code where the constraint is

00:45:51.356 --> 00:45:52.376
allocated is highlighted.

00:45:52.896 --> 00:45:54.196
We can see the constant of 30,

00:45:54.246 --> 00:45:55.526
and I can invert it to negative

00:45:55.526 --> 00:45:55.836
30.

00:45:56.526 --> 00:45:58.436
I'll save this file and close it

00:45:58.436 --> 00:45:59.736
and we're done with our first

00:46:00.256 --> 00:46:00.346
bug.

00:46:01.036 --> 00:46:01.576
Perfect.

00:46:01.646 --> 00:46:03.636
So the second bug was that we

00:46:03.636 --> 00:46:06.076
wouldn't be able to read the

00:46:06.076 --> 00:46:08.106
description inside that popover,

00:46:08.316 --> 00:46:09.676
so let's take a look at that.

00:46:10.446 --> 00:46:11.996
First of all, I want to disable

00:46:11.996 --> 00:46:14.456
constraint mode and clipping so

00:46:14.456 --> 00:46:17.046
we see the constant again.

00:46:17.166 --> 00:46:18.576
And I will also clear the

00:46:18.576 --> 00:46:18.926
console.

00:46:19.976 --> 00:46:20.736
Now, I showed you at the

00:46:20.736 --> 00:46:22.556
beginning how to capture this

00:46:22.826 --> 00:46:23.796
[inaudible] in its active state

00:46:23.796 --> 00:46:25.566
so we would be able to get to

00:46:25.666 --> 00:46:26.646
the view hierarchy of the

00:46:26.646 --> 00:46:27.766
popover while it's open;

00:46:28.256 --> 00:46:29.186
however, we don't see it.

00:46:29.506 --> 00:46:30.416
That is because the view

00:46:30.416 --> 00:46:31.816
debugger only shows you a single

00:46:31.816 --> 00:46:32.556
window at a time.

00:46:33.516 --> 00:46:34.806
Let me show you how to take a

00:46:34.806 --> 00:46:35.596
look at other windows.

00:46:36.416 --> 00:46:37.436
When I scroll up in the view

00:46:37.436 --> 00:46:38.796
hierarchy and walk up the view

00:46:38.796 --> 00:46:40.746
hierarchy to eventually hit the

00:46:40.746 --> 00:46:42.266
window of the current window

00:46:42.266 --> 00:46:43.566
that we see, we can see that

00:46:43.566 --> 00:46:44.516
it's hosted by a window

00:46:44.516 --> 00:46:44.986
controller.

00:46:45.156 --> 00:46:47.196
And if I collapse this root

00:46:47.196 --> 00:46:48.846
level item here, we can see that

00:46:48.846 --> 00:46:49.946
there's actually another root

00:46:49.946 --> 00:46:51.226
level item, which is exactly

00:46:51.226 --> 00:46:51.966
what we're looking for.

00:46:52.716 --> 00:46:53.416
Our popover.

00:46:54.276 --> 00:46:55.286
So if your application has

00:46:55.286 --> 00:46:56.446
multiple windows, and that is

00:46:56.446 --> 00:46:58.536
true for macOS and iOS, they

00:46:58.536 --> 00:46:59.856
show up as multiple root level

00:46:59.856 --> 00:47:01.586
objects in the outline on the

00:47:01.586 --> 00:47:02.236
left-hand side.

00:47:02.756 --> 00:47:05.056
So take a look there, if you

00:47:05.056 --> 00:47:06.436
think your application should

00:47:06.436 --> 00:47:07.816
have multiple windows that

00:47:08.106 --> 00:47:09.186
should be captured by the view

00:47:09.186 --> 00:47:09.456
debugger.

00:47:10.026 --> 00:47:11.576
So we can take a look at this in

00:47:11.576 --> 00:47:12.966
3D, and we can see that there's

00:47:12.966 --> 00:47:16.026
this large view that's obscuring

00:47:16.426 --> 00:47:18.066
clicks to the labels.

00:47:18.066 --> 00:47:18.956
I would like to take a look at

00:47:18.956 --> 00:47:20.586
the labels to inspect them.

00:47:20.996 --> 00:47:22.556
There's a trick to click through

00:47:22.556 --> 00:47:23.456
views in the view debugger.

00:47:23.456 --> 00:47:24.526
You can simply hold down

00:47:24.526 --> 00:47:25.046
command.

00:47:25.666 --> 00:47:27.046
So I can click through this view

00:47:27.046 --> 00:47:28.466
in front and select this blue

00:47:28.466 --> 00:47:28.816
label.

00:47:29.496 --> 00:47:31.346
So let's take a look at the text

00:47:31.346 --> 00:47:32.086
color for this label.

00:47:32.086 --> 00:47:33.326
I want to first look at the

00:47:33.326 --> 00:47:34.566
labels that look great in dark

00:47:34.726 --> 00:47:35.896
so that we can hopefully derive

00:47:35.926 --> 00:47:37.666
a solution for the problematic

00:47:37.666 --> 00:47:38.426
label at the bottom.

00:47:38.456 --> 00:47:41.016
So let's take a look at the text

00:47:41.016 --> 00:47:42.196
color and we can see that this

00:47:42.196 --> 00:47:44.406
is a RGB color resulting in this

00:47:44.406 --> 00:47:45.846
blue and we can also see that

00:47:45.846 --> 00:47:47.366
the inspector provides us with a

00:47:47.366 --> 00:47:48.166
name for this color.

00:47:48.276 --> 00:47:49.386
Now this indicates that this

00:47:49.386 --> 00:47:51.426
color is coming from an asset

00:47:51.426 --> 00:47:53.026
catalogue in our project and

00:47:53.026 --> 00:47:54.366
with Xcode 10, you can provide

00:47:54.366 --> 00:47:56.506
multiple variants of a color for

00:47:56.506 --> 00:47:57.726
a single color that you define.

00:47:57.766 --> 00:47:58.956
So, for example, you can provide

00:47:58.956 --> 00:48:00.296
one for light and one for dark.

00:48:00.826 --> 00:48:03.376
And which variant is picked is

00:48:04.036 --> 00:48:05.546
determined by the appearance of

00:48:05.546 --> 00:48:07.416
a view, and you can get that

00:48:07.586 --> 00:48:08.716
information in the inspector as

00:48:08.716 --> 00:48:08.986
well.

00:48:09.456 --> 00:48:10.486
And I scroll down here to the

00:48:10.486 --> 00:48:12.096
view section in the inspector.

00:48:12.476 --> 00:48:13.186
You can see that there's

00:48:13.186 --> 00:48:14.506
appearance and effective

00:48:14.506 --> 00:48:15.066
appearance.

00:48:15.446 --> 00:48:17.136
Now appearance is not set

00:48:17.216 --> 00:48:18.326
explicitly on this view.

00:48:18.326 --> 00:48:19.446
And this is a very common

00:48:19.446 --> 00:48:20.826
scenario because most views

00:48:20.826 --> 00:48:23.706
inherit the appearance from

00:48:23.706 --> 00:48:24.866
either one of the super views,

00:48:24.916 --> 00:48:26.286
the window or the application.

00:48:27.156 --> 00:48:28.476
But you can see the inherited

00:48:28.566 --> 00:48:29.676
effective appearance here.

00:48:29.676 --> 00:48:31.596
And that is vibrant dark, so

00:48:31.596 --> 00:48:33.146
that determines which color of

00:48:33.146 --> 00:48:34.086
the color that you define in

00:48:34.086 --> 00:48:34.976
your asset catalogue is

00:48:34.976 --> 00:48:35.386
selected.

00:48:36.526 --> 00:48:38.556
Okay. Actually, while I'm down

00:48:38.556 --> 00:48:40.176
here in the inspector, I want to

00:48:40.176 --> 00:48:41.166
point out the description

00:48:41.166 --> 00:48:42.496
property, which is the debug

00:48:42.496 --> 00:48:43.816
description of that object.

00:48:44.176 --> 00:48:45.236
And Chris showed you earlier how

00:48:45.236 --> 00:48:46.346
to provide a custom debug

00:48:46.346 --> 00:48:47.496
description for your objects.

00:48:47.596 --> 00:48:49.476
So you don't only benefit from

00:48:49.736 --> 00:48:51.046
providing a great debug

00:48:51.046 --> 00:48:52.386
description in your console when

00:48:52.386 --> 00:48:54.696
you use po on an object but you

00:48:54.696 --> 00:48:56.026
also benefit from it in the view

00:48:56.026 --> 00:48:57.096
debugger, since it shows up

00:48:57.096 --> 00:48:57.846
right in the inspector.

00:48:59.226 --> 00:49:01.056
Okay, so let's get back to the

00:49:01.056 --> 00:49:01.576
text color.

00:49:01.926 --> 00:49:03.126
And I want to select the second

00:49:03.126 --> 00:49:04.376
label since that also looks good

00:49:04.376 --> 00:49:04.826
in dark.

00:49:05.126 --> 00:49:06.326
And in this case, we can see

00:49:06.326 --> 00:49:07.456
there's also a name color.

00:49:07.456 --> 00:49:08.956
It's a label color, but it's

00:49:08.956 --> 00:49:10.046
prefixed with system.

00:49:10.226 --> 00:49:11.366
And that indicates that it's not

00:49:11.366 --> 00:49:12.506
coming from our own asset

00:49:12.506 --> 00:49:13.736
catalogue but from the system,

00:49:14.036 --> 00:49:15.226
and of course, system colors

00:49:15.226 --> 00:49:16.316
automatically adapt to

00:49:16.316 --> 00:49:17.376
appearance changes as well.

00:49:18.336 --> 00:49:19.886
Now, taking a look at the

00:49:19.886 --> 00:49:21.756
problematic label here, we can

00:49:21.756 --> 00:49:23.246
see that it's this very dark

00:49:23.246 --> 00:49:24.786
gray, and it doesn't have a

00:49:24.786 --> 00:49:25.046
name.

00:49:25.176 --> 00:49:27.266
That means it's a custom color

00:49:27.436 --> 00:49:29.696
that doesn't adapt to appearance

00:49:29.696 --> 00:49:30.066
changes.

00:49:30.906 --> 00:49:32.206
So what we want to do is we want

00:49:32.206 --> 00:49:34.436
to change its color, its text

00:49:34.436 --> 00:49:37.776
color, to a system color.

00:49:37.946 --> 00:49:39.316
So with this object selected,

00:49:39.316 --> 00:49:40.316
I'll hit command c.

00:49:41.196 --> 00:49:43.396
I'll type e, paste in the

00:49:43.396 --> 00:49:44.916
[inaudible] pointer and say set

00:49:44.916 --> 00:49:49.476
text color to NS color text

00:49:49.476 --> 00:49:49.696
color.

00:49:51.436 --> 00:49:52.576
Again, I have to [inaudible] to

00:49:52.576 --> 00:49:53.296
see a transaction.

00:49:53.996 --> 00:49:55.296
And we can see that the popover

00:49:55.296 --> 00:49:56.926
now updates, and the font is

00:49:56.926 --> 00:49:57.576
nice and readable.

00:49:58.556 --> 00:49:59.846
Now, I'm not going to apply this

00:49:59.966 --> 00:50:01.866
fix in my storybook file.

00:50:02.626 --> 00:50:03.636
But one thing I want to point

00:50:03.636 --> 00:50:05.826
out is it's very important that

00:50:05.826 --> 00:50:07.156
you verify that your application

00:50:07.156 --> 00:50:08.336
still looks good across all

00:50:08.336 --> 00:50:09.806
appearances when you make a

00:50:09.806 --> 00:50:10.656
change to your [inaudible] now

00:50:10.766 --> 00:50:12.866
that there are multiple system

00:50:12.866 --> 00:50:13.406
appearances.

00:50:14.096 --> 00:50:15.326
And I will show you how to do

00:50:15.326 --> 00:50:15.506
that.

00:50:15.506 --> 00:50:17.306
I will continue running, and

00:50:18.156 --> 00:50:20.106
instead of switching my entire

00:50:20.106 --> 00:50:21.906
system appearance to light to

00:50:21.906 --> 00:50:23.266
take a look if the label still

00:50:23.266 --> 00:50:24.016
looks good on a light

00:50:24.046 --> 00:50:25.936
background, Xcode 10 provides

00:50:25.936 --> 00:50:27.416
you with a way to override the

00:50:27.416 --> 00:50:28.776
appearance only for the target

00:50:28.776 --> 00:50:29.316
application.

00:50:29.426 --> 00:50:30.996
And you can use this button in

00:50:30.996 --> 00:50:31.646
the debug bar.

00:50:31.956 --> 00:50:33.626
And I can select light here, and

00:50:33.916 --> 00:50:35.446
you can see that the application

00:50:35.446 --> 00:50:36.526
now is presented in a light

00:50:36.526 --> 00:50:37.026
appearance.

00:50:37.586 --> 00:50:38.796
And I can bring up the popover,

00:50:38.796 --> 00:50:41.446
and we can verify that the text

00:50:41.446 --> 00:50:42.066
is nice and readable.

00:50:42.586 --> 00:50:44.826
So that confirms that we fixed

00:50:44.826 --> 00:50:45.326
our issue.

00:50:45.786 --> 00:50:46.916
Now, since this is a very common

00:50:47.056 --> 00:50:48.486
action to take a look at your

00:50:48.486 --> 00:50:49.576
application in different

00:50:49.576 --> 00:50:50.656
appearances, we actually made

00:50:50.656 --> 00:50:52.286
that option available in the

00:50:52.286 --> 00:50:52.766
touch bar.

00:50:53.106 --> 00:50:53.756
I will show you [inaudible].

00:50:53.756 --> 00:50:55.336
I'll bring up the touch bar

00:50:55.336 --> 00:50:57.186
simulator again, and with the

00:50:57.186 --> 00:51:00.016
popover opened, I can select

00:51:00.016 --> 00:51:00.696
this option here.

00:51:01.786 --> 00:51:02.776
And you can now see all the

00:51:02.776 --> 00:51:03.976
override options right in your

00:51:03.976 --> 00:51:05.526
touch bar, so even if your

00:51:05.526 --> 00:51:06.616
application is in full screen

00:51:06.616 --> 00:51:07.786
mode, for example, I can access

00:51:07.856 --> 00:51:08.016
these.

00:51:08.786 --> 00:51:10.026
Let me switch to high contrast

00:51:10.026 --> 00:51:12.326
light, which enables the

00:51:12.326 --> 00:51:13.906
accessibility feature of high

00:51:13.906 --> 00:51:16.006
contrast as well as overrides

00:51:16.076 --> 00:51:18.016
the appearance to light, so you

00:51:18.016 --> 00:51:18.926
can make sure that your app

00:51:18.926 --> 00:51:21.296
looks good in that configuration

00:51:21.296 --> 00:51:21.636
as well.

00:51:22.346 --> 00:51:23.786
And, of course, I can go back to

00:51:23.786 --> 00:51:24.826
the system appearance as well.

00:51:25.276 --> 00:51:27.286
So we confirmed that our issue

00:51:27.396 --> 00:51:29.036
is fixed.

00:51:29.036 --> 00:51:30.216
And that allows me to check off

00:51:30.216 --> 00:51:31.916
this on our bug list [inaudible]

00:51:32.356 --> 00:51:33.476
with this, we're at the end of

00:51:33.476 --> 00:51:34.916
the demo and I will go back to

00:51:34.916 --> 00:51:35.366
slides.

00:51:36.516 --> 00:51:43.316
[ Applause ]

00:51:43.816 --> 00:51:45.776
So let's recap what we just saw.

00:51:46.286 --> 00:51:47.926
I showed you how to use reveal

00:51:47.926 --> 00:51:49.426
in debug navigator to orient

00:51:49.426 --> 00:51:51.136
your current selection in the

00:51:51.136 --> 00:51:52.276
hierarchical outline on the

00:51:52.276 --> 00:51:52.926
left-hand side.

00:51:53.616 --> 00:51:54.946
I showed you how to show clip

00:51:55.026 --> 00:51:57.656
content, and we made use of the

00:51:57.656 --> 00:51:58.376
auto-layout debugging

00:51:58.376 --> 00:51:59.716
functionality to track down our

00:51:59.716 --> 00:52:00.486
constraint problem.

00:52:00.716 --> 00:52:03.236
I showed you how to use the

00:52:03.236 --> 00:52:04.206
object pointers that you can

00:52:04.206 --> 00:52:06.096
easily access by just copying

00:52:06.096 --> 00:52:07.506
the selected objects and use

00:52:07.506 --> 00:52:08.006
them in LLDB.

00:52:08.006 --> 00:52:09.896
We had a look at the creation

00:52:09.896 --> 00:52:11.866
backtraces, which are available

00:52:11.866 --> 00:52:12.956
if you have mailx stack logging

00:52:12.956 --> 00:52:14.276
enabled in your scheme options

00:52:15.176 --> 00:52:16.316
to jump right to the code and

00:52:16.316 --> 00:52:18.426
applied a change that we needed

00:52:18.426 --> 00:52:19.226
for our constraint.

00:52:19.876 --> 00:52:21.116
We had a look at the debug

00:52:21.116 --> 00:52:22.686
description that's conveniently

00:52:22.686 --> 00:52:23.936
available in the inspector of

00:52:23.976 --> 00:52:24.556
the view debugger.

00:52:25.426 --> 00:52:27.486
And we had a look at click

00:52:27.486 --> 00:52:28.766
through to select a view that

00:52:28.766 --> 00:52:29.656
was behind another view.

00:52:30.106 --> 00:52:32.256
And regarding debugging dark

00:52:32.256 --> 00:52:34.086
mode, we saw that you can easily

00:52:34.346 --> 00:52:35.526
override the appearance of the

00:52:35.526 --> 00:52:37.056
target application right from

00:52:37.056 --> 00:52:38.316
Xcode's debug bar or from the

00:52:38.316 --> 00:52:38.736
touch bar.

00:52:39.706 --> 00:52:40.596
I showed you how to capture a

00:52:40.596 --> 00:52:42.256
Mac app in its active state.

00:52:42.346 --> 00:52:43.726
And we had a look at the name

00:52:43.726 --> 00:52:44.856
color information and its

00:52:44.856 --> 00:52:46.006
appearance information that is

00:52:46.006 --> 00:52:47.446
now available in Xcode's view

00:52:47.446 --> 00:52:48.246
debugger inspector.

00:52:48.746 --> 00:52:50.426
If you want to learn more about

00:52:50.426 --> 00:52:52.646
adapting the dark mode in your

00:52:52.646 --> 00:52:54.226
Mac application, please check

00:52:54.226 --> 00:52:55.536
out the videos for these two

00:52:55.536 --> 00:52:55.926
sessions.

00:52:57.046 --> 00:52:58.716
That brings us to the end of

00:52:58.776 --> 00:52:59.246
this talk.

00:52:59.906 --> 00:53:01.056
If you want more information

00:53:01.056 --> 00:53:02.846
about the talk, including the

00:53:02.846 --> 00:53:04.116
[inaudible] script that Chris

00:53:04.176 --> 00:53:05.656
showed you earlier, it will be

00:53:05.656 --> 00:53:07.226
posted on the session's website.

00:53:07.576 --> 00:53:08.846
And if you have any questions to

00:53:08.846 --> 00:53:09.716
any of the content of this

00:53:09.716 --> 00:53:11.386
session, or debugging in

00:53:11.386 --> 00:53:12.896
general, there's a profiling and

00:53:12.896 --> 00:53:14.046
debugging lab tomorrow morning

00:53:14.046 --> 00:53:14.716
at 9 am.

00:53:15.006 --> 00:53:15.856
Chris and I will be there.

00:53:15.856 --> 00:53:16.776
We'll be happy to answer any

00:53:16.776 --> 00:53:17.656
questions you may have.

00:53:18.136 --> 00:53:19.826
And there's also an iOS memory

00:53:19.826 --> 00:53:21.346
deep dive talk, in case you're

00:53:21.346 --> 00:53:22.756
interested, in memory debugging

00:53:22.906 --> 00:53:24.006
that is also tomorrow.

00:53:24.976 --> 00:53:26.416
With that, I hope you have a

00:53:26.416 --> 00:53:27.796
fantastic time at the Beer Bash

00:53:27.796 --> 00:53:28.646
and enjoy the rest of the

00:53:28.646 --> 00:53:28.936
conference.

00:53:29.516 --> 00:53:32.500
[ Applause ]