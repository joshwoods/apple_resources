WEBVTT

00:00:07.516 --> 00:00:15.500
[ Music ]

00:00:21.516 --> 00:00:26.116
[ Applause ]

00:00:26.616 --> 00:00:27.566
>> Hello, everybody.

00:00:27.926 --> 00:00:28.396
Welcome.

00:00:29.436 --> 00:00:30.756
I'm really excited to be here

00:00:30.756 --> 00:00:31.066
today.

00:00:31.606 --> 00:00:32.716
So let's get started.

00:00:34.046 --> 00:00:35.946
Shaders are important part of

00:00:35.946 --> 00:00:37.906
graphics, and they help you

00:00:37.956 --> 00:00:39.896
create great-looking games and

00:00:41.036 --> 00:00:41.166
apps.

00:00:41.506 --> 00:00:42.996
Given the massively parallel

00:00:42.996 --> 00:00:45.026
execution environment, working

00:00:45.026 --> 00:00:46.306
with shaders is not easy.

00:00:47.076 --> 00:00:48.076
There are a number of things

00:00:48.076 --> 00:00:49.556
that can go wrong during

00:00:49.556 --> 00:00:51.886
development, and even when you

00:00:51.886 --> 00:00:53.236
get it right, they have to

00:00:53.296 --> 00:00:54.406
perform really fast.

00:00:55.446 --> 00:00:57.426
My name is Alp and today I am

00:00:57.626 --> 00:00:59.426
going to show you great tools

00:00:59.426 --> 00:01:02.126
and workflows to help you debug

00:01:02.296 --> 00:01:04.105
and profile Metal shaders.

00:01:04.626 --> 00:01:07.526
Let's talk about Metal first.

00:01:08.836 --> 00:01:10.426
Metal is not just about the

00:01:10.426 --> 00:01:12.206
framework and the language.

00:01:12.626 --> 00:01:15.556
We have Metal kits, Metal

00:01:15.556 --> 00:01:17.956
Performance shaders, and we have

00:01:17.956 --> 00:01:19.166
great tools to make your

00:01:19.166 --> 00:01:20.946
development process efficient

00:01:20.946 --> 00:01:21.376
and easy.

00:01:22.426 --> 00:01:24.956
With Metal system trace, fully

00:01:24.956 --> 00:01:26.776
integrated into instruments, you

00:01:26.776 --> 00:01:29.306
get visibility into how your CPU

00:01:29.306 --> 00:01:31.646
and GPU work in parallel and the

00:01:31.646 --> 00:01:33.066
runtime performance of your app.

00:01:34.496 --> 00:01:36.346
It's a great first tool to start

00:01:36.346 --> 00:01:37.696
profiling your apps, and seeing

00:01:37.696 --> 00:01:38.436
your bottlenecks.

00:01:38.986 --> 00:01:42.196
But today, my focus is going to

00:01:42.196 --> 00:01:44.106
be on Metal frame debugger.

00:01:46.596 --> 00:01:48.516
Metal frame debugger lets you

00:01:48.516 --> 00:01:51.116
capture Metal work with a frame

00:01:51.116 --> 00:01:53.096
of a game, or computer upload,

00:01:53.636 --> 00:01:55.366
and step through your course.

00:01:56.996 --> 00:01:59.556
Inspect state and resources.

00:02:00.656 --> 00:02:03.806
And it provides great profiling

00:02:03.806 --> 00:02:05.336
features, giving you access to

00:02:05.336 --> 00:02:06.466
GPU counters and pipeline

00:02:06.466 --> 00:02:07.186
statistics.

00:02:07.706 --> 00:02:09.746
It is fully integrated into

00:02:09.746 --> 00:02:12.586
Xcode, providing you one place

00:02:13.006 --> 00:02:15.296
to debug and profile your Metal

00:02:15.296 --> 00:02:15.866
workloads.

00:02:16.356 --> 00:02:19.436
And this year, we have some

00:02:19.706 --> 00:02:21.916
great additions to Metal frame

00:02:21.916 --> 00:02:22.196
debugger.

00:02:23.006 --> 00:02:25.266
With the dependency viewer, now

00:02:25.266 --> 00:02:26.756
you get visibility into how your

00:02:26.756 --> 00:02:28.926
encoders are working together

00:02:28.926 --> 00:02:31.026
and connected through the use of

00:02:31.026 --> 00:02:32.096
resources.

00:02:33.026 --> 00:02:35.076
It's a great tool to navigate

00:02:35.076 --> 00:02:36.336
your workload and just

00:02:36.336 --> 00:02:37.296
understand how your [inaudible]

00:02:37.536 --> 00:02:40.136
are working together to create

00:02:40.506 --> 00:02:42.356
that frame.

00:02:42.356 --> 00:02:44.536
Tomorrow at 10:00 a.m., we have

00:02:44.736 --> 00:02:45.876
Metal Game Performance

00:02:45.876 --> 00:02:47.846
Optimization talk, and part of

00:02:47.846 --> 00:02:48.966
it, we will be covering the

00:02:48.966 --> 00:02:49.656
dependency viewer.

00:02:50.656 --> 00:02:53.126
But today I will be focusing on

00:02:53.756 --> 00:02:55.806
geometry viewer, shader

00:02:55.806 --> 00:02:57.486
debugger, and enhanced shaded

00:02:57.486 --> 00:02:57.936
profiler.

00:02:58.576 --> 00:03:00.216
And I will be showing you

00:03:00.216 --> 00:03:02.086
workloads that will help you in

00:03:02.086 --> 00:03:04.066
your day-to-day shaded elements.

00:03:04.516 --> 00:03:06.736
So, let's start with the

00:03:06.736 --> 00:03:07.336
geometry viewer.

00:03:11.786 --> 00:03:14.226
Vertex Stage is the first stage

00:03:14.226 --> 00:03:15.286
of the graphics pipeline.

00:03:16.196 --> 00:03:18.126
And when you get it wrong, it

00:03:18.126 --> 00:03:19.526
can mess up your entire scene.

00:03:20.016 --> 00:03:22.416
So it is important to rule out

00:03:22.926 --> 00:03:25.346
some of the vertex issues before

00:03:25.346 --> 00:03:26.656
moving on to debugging your

00:03:26.656 --> 00:03:27.216
shaders.

00:03:27.756 --> 00:03:31.556
In Vertex Stage, there are

00:03:31.616 --> 00:03:33.446
several things to check.

00:03:33.636 --> 00:03:35.906
Mainly, your vertex inputs, your

00:03:35.906 --> 00:03:37.596
indices, and your vertex

00:03:37.596 --> 00:03:38.076
outputs.

00:03:39.116 --> 00:03:41.256
Last year, with Xcode 9, we

00:03:41.256 --> 00:03:43.226
introduced input attribute view

00:03:43.226 --> 00:03:45.096
where we can see all this data

00:03:45.266 --> 00:03:47.166
combined in a table view format.

00:03:48.146 --> 00:03:50.036
But it is still hard to debug

00:03:50.546 --> 00:03:54.006
such visual data without really

00:03:54.006 --> 00:03:55.356
correlating back to 3D.

00:03:56.296 --> 00:03:58.966
So that's why this year we

00:03:58.966 --> 00:04:01.006
combined all this data and

00:04:01.006 --> 00:04:02.896
created one place you can

00:04:02.896 --> 00:04:04.526
visualize and inspect it.

00:04:05.196 --> 00:04:06.986
Now, I would like to introduce

00:04:06.986 --> 00:04:11.000
you to geometry viewer.

00:04:12.516 --> 00:04:15.616
[ Applause ]

00:04:16.116 --> 00:04:17.886
>> Geometry viewer is a new tool

00:04:17.886 --> 00:04:19.166
that visualizes the

00:04:19.166 --> 00:04:21.146
post-transform vertex data in 3D

00:04:21.146 --> 00:04:22.896
so that you can actually see

00:04:22.896 --> 00:04:24.116
what your vertex output is.

00:04:25.106 --> 00:04:27.126
Alongside, it provides you your

00:04:27.126 --> 00:04:29.876
data input indices and output,

00:04:30.236 --> 00:04:31.136
so that you can actually

00:04:31.136 --> 00:04:32.706
correlate that back to 3D.

00:04:33.956 --> 00:04:35.526
It is available per-draw call

00:04:35.886 --> 00:04:37.266
just like your attachments and

00:04:37.266 --> 00:04:39.176
bond resources, so you'll have

00:04:39.466 --> 00:04:41.996
one place to investigate all

00:04:41.996 --> 00:04:42.996
your vertex issues.

00:04:44.506 --> 00:04:47.336
Now, let's take a look at three

00:04:47.336 --> 00:04:49.226
common vertex problems, and

00:04:49.226 --> 00:04:50.516
let's see how you can use

00:04:50.516 --> 00:04:52.306
geometry viewer to tackle them.

00:04:52.886 --> 00:04:56.256
So this is the first problem,

00:04:56.706 --> 00:04:58.506
and I am going to draw call,

00:04:58.506 --> 00:05:00.496
drawing the tree, and as you can

00:05:00.496 --> 00:05:03.236
see, some of the vertices of the

00:05:03.236 --> 00:05:05.876
triangle is off screen, causing

00:05:05.876 --> 00:05:06.956
this triangle to get skewed.

00:05:07.916 --> 00:05:09.246
Just using the geometry viewer,

00:05:09.596 --> 00:05:10.676
you can click on the visibly

00:05:10.676 --> 00:05:11.296
wrong triangle.

00:05:12.076 --> 00:05:13.966
And just using the viewer below,

00:05:14.396 --> 00:05:17.466
you can see all the data that

00:05:17.596 --> 00:05:20.516
these vertices are taking in and

00:05:20.516 --> 00:05:21.096
outputting.

00:05:24.796 --> 00:05:27.906
And in our second case, I'm on

00:05:27.906 --> 00:05:29.736
the same draw [inaudible] but

00:05:29.736 --> 00:05:31.386
this time, the tree is

00:05:31.386 --> 00:05:33.386
completely missing.

00:05:33.386 --> 00:05:34.636
Just using the geometry viewer

00:05:34.776 --> 00:05:38.456
and the free fly camera, you can

00:05:38.586 --> 00:05:40.426
see that the tree is drawn

00:05:40.426 --> 00:05:41.596
completely outside of the

00:05:41.596 --> 00:05:42.086
Frustum.

00:05:43.536 --> 00:05:45.006
So it makes sense that it is not

00:05:45.006 --> 00:05:45.816
rendered on screen.

00:05:46.716 --> 00:05:48.526
So it is really easy to use

00:05:48.526 --> 00:05:50.706
geometry viewer to detect cases

00:05:50.706 --> 00:05:53.416
like this, and on to our last

00:05:54.526 --> 00:05:56.296
case, sometimes it's not even

00:05:56.296 --> 00:05:57.946
possible to form triangles to

00:05:58.176 --> 00:05:59.156
visualize in 3D.

00:05:59.726 --> 00:06:01.576
And these are tricky to debug.

00:06:01.716 --> 00:06:04.476
You might have degenerated

00:06:04.476 --> 00:06:05.946
triangles, where you have

00:06:05.946 --> 00:06:07.716
multiple of your vertices going

00:06:07.716 --> 00:06:08.656
into the same location.

00:06:09.296 --> 00:06:11.146
Or you might have infinites and

00:06:11.146 --> 00:06:12.666
[inaudible] in your vertex

00:06:12.666 --> 00:06:14.086
output position, which is

00:06:14.086 --> 00:06:15.716
undefined behavior for GPU.

00:06:16.736 --> 00:06:18.906
Thankfully, geometry viewer

00:06:19.196 --> 00:06:21.126
detects these cases and provides

00:06:21.126 --> 00:06:22.566
an issue button for you.

00:06:22.916 --> 00:06:28.766
With a single click to that, you

00:06:28.766 --> 00:06:30.316
can get a list of issues it

00:06:30.316 --> 00:06:30.736
finds.

00:06:31.356 --> 00:06:34.036
In this case, it found several

00:06:34.036 --> 00:06:35.466
degenerate triangles.

00:06:36.476 --> 00:06:38.466
Clicking one, you can directly

00:06:38.466 --> 00:06:39.126
see the data.

00:06:40.126 --> 00:06:42.046
And just looking at this data, I

00:06:42.046 --> 00:06:44.036
can clearly tell that two of my

00:06:44.036 --> 00:06:46.286
vertices are going to the

00:06:46.286 --> 00:06:48.206
origin, so it's a degenerate

00:06:48.206 --> 00:06:48.556
triangle.

00:06:50.366 --> 00:06:52.526
And so as you've seen in all

00:06:52.526 --> 00:06:55.186
these examples, geometry viewer

00:06:55.216 --> 00:06:57.666
is a powerful tool to quickly

00:06:57.666 --> 00:06:59.016
investigate all your

00:06:59.016 --> 00:07:01.186
geometry-related issues, and if

00:07:01.186 --> 00:07:02.486
the problem is in your inputs,

00:07:03.036 --> 00:07:04.556
then you have to go back and

00:07:04.696 --> 00:07:05.286
check your model.

00:07:05.766 --> 00:07:07.246
But if the problem is in your

00:07:07.246 --> 00:07:09.646
output, then you have to debug

00:07:09.646 --> 00:07:10.426
vertex shaders.

00:07:11.336 --> 00:07:12.776
Which brings us to our next

00:07:13.166 --> 00:07:13.326
topic.

00:07:15.976 --> 00:07:18.076
Debugging shaders, using the new

00:07:18.076 --> 00:07:18.686
Shader Debugger.

00:07:20.196 --> 00:07:21.496
Shaders are hard to debug.

00:07:22.556 --> 00:07:24.386
They have math-heavy code, with

00:07:24.386 --> 00:07:25.736
lots of vector operations.

00:07:26.446 --> 00:07:28.556
And they are highly parallel.

00:07:28.776 --> 00:07:30.196
The shader code you are writing

00:07:30.526 --> 00:07:32.716
gets executed millions of times,

00:07:32.806 --> 00:07:33.736
every single frame.

00:07:33.736 --> 00:07:37.706
Here is the scene from Unity's

00:07:37.706 --> 00:07:39.016
Book of the Dead demo, that

00:07:39.016 --> 00:07:41.056
we've seen in the keynote and

00:07:41.056 --> 00:07:42.306
State of the Union earlier this

00:07:42.306 --> 00:07:42.466
week.

00:07:43.296 --> 00:07:45.486
In a single frame of this scene

00:07:46.426 --> 00:07:48.246
makes 10 million vertexing

00:07:48.246 --> 00:07:51.196
locations, and rendering into 60

00:07:51.196 --> 00:07:53.196
million triangles, every single

00:07:53.196 --> 00:07:54.236
frame, in all the different

00:07:54.236 --> 00:07:54.776
passes.

00:07:55.866 --> 00:07:57.696
So when you have a problem with

00:07:57.696 --> 00:07:59.356
your shaders, it's not going to

00:07:59.356 --> 00:08:00.846
be easy to find where the

00:08:00.846 --> 00:08:02.766
problem is, which shader it is,

00:08:02.766 --> 00:08:04.256
and what part of the shader

00:08:04.256 --> 00:08:04.556
code.

00:08:05.496 --> 00:08:07.426
So to help you debugging your

00:08:07.426 --> 00:08:10.146
shaders, now I'm really excited

00:08:10.236 --> 00:08:12.156
to introduce to you the new

00:08:12.156 --> 00:08:14.736
Shader Debugger [applause].

00:08:20.986 --> 00:08:23.106
Shader Debugger is a new tool

00:08:23.306 --> 00:08:25.276
for debugging all Metal shaders,

00:08:25.946 --> 00:08:27.666
providing you rich visualization

00:08:27.666 --> 00:08:29.606
across thousands of threads at

00:08:29.646 --> 00:08:33.456
once, and it shows you the real

00:08:33.456 --> 00:08:35.046
data from GPU, not from

00:08:35.046 --> 00:08:35.596
emulator.

00:08:36.285 --> 00:08:39.546
It provides you flexible way of

00:08:39.546 --> 00:08:40.946
setting, so that you can follow

00:08:40.946 --> 00:08:42.716
your execution easily, without

00:08:42.716 --> 00:08:44.015
needing to have breakpoints at

00:08:44.015 --> 00:08:44.285
all.

00:08:45.726 --> 00:08:47.836
And it is fully integrated into

00:08:47.836 --> 00:08:49.456
Metal frame debugger, so that

00:08:49.716 --> 00:08:51.766
you have everything you need to

00:08:51.766 --> 00:08:52.846
debug your shaders.

00:08:53.776 --> 00:08:55.896
Now, I would like to bring my

00:08:55.896 --> 00:08:57.966
colleague, Xavier, to the stage,

00:08:58.246 --> 00:08:59.846
to show you Shader Profiler in

00:09:00.266 --> 00:09:00.706
action.

00:09:01.046 --> 00:09:01.330
Xavier?

00:09:02.516 --> 00:09:05.076
[ Applause ]

00:09:05.576 --> 00:09:06.536
>> Thank you, Alp, and good

00:09:07.066 --> 00:09:08.936
afternoon everyone.

00:09:09.046 --> 00:09:10.606
For today's demo, I wanted to

00:09:10.606 --> 00:09:11.976
create a cool-looking water

00:09:11.976 --> 00:09:14.326
simulation, but as you can see,

00:09:14.666 --> 00:09:15.516
there are some geometry

00:09:15.516 --> 00:09:16.156
problems.

00:09:17.036 --> 00:09:18.646
My name is Xavier, and I am

00:09:18.646 --> 00:09:20.226
really excited to show you how

00:09:20.226 --> 00:09:21.806
to use the new Shader Debugger

00:09:21.946 --> 00:09:22.906
and geometry view ware to

00:09:23.226 --> 00:09:24.646
identify and fix geometry

00:09:24.646 --> 00:09:25.016
issues.

00:09:25.016 --> 00:09:27.966
So we are going to start by

00:09:27.966 --> 00:09:28.836
taking our friend capture.

00:09:28.836 --> 00:09:31.066
You can easily do this by

00:09:31.066 --> 00:09:32.566
clicking on the UP cutter button

00:09:32.676 --> 00:09:33.786
here in the debug bar.

00:09:34.316 --> 00:09:38.426
Now that we have captured our

00:09:38.426 --> 00:09:39.946
frame, we can start debugging

00:09:39.946 --> 00:09:40.516
our issue.

00:09:40.986 --> 00:09:44.006
Since we are having geometry

00:09:44.006 --> 00:09:45.526
problems, we are going to use

00:09:45.526 --> 00:09:46.686
the new Geometry Viewer.

00:09:49.396 --> 00:09:51.406
The Geometry Viewer allows you

00:09:51.406 --> 00:09:53.006
to navigate and inspect the

00:09:53.006 --> 00:09:54.806
geometry of your draw call.

00:09:56.516 --> 00:09:58.306
The water surface should be

00:09:58.306 --> 00:10:00.456
smooth, but as we can see, there

00:10:00.576 --> 00:10:01.596
is a steep cliff.

00:10:02.416 --> 00:10:03.696
So let's pick one of the

00:10:03.696 --> 00:10:04.966
triangles that looks wrong.

00:10:04.966 --> 00:10:06.276
For example, this one.

00:10:06.686 --> 00:10:08.596
And now, let's select the broken

00:10:08.656 --> 00:10:10.576
vertex that is the one here at

00:10:10.576 --> 00:10:11.126
the bottom.

00:10:11.476 --> 00:10:13.686
You can easily do this, by using

00:10:13.686 --> 00:10:14.456
this table here.

00:10:14.456 --> 00:10:17.816
So now that we have found our

00:10:17.816 --> 00:10:20.316
broken vertex, let's take the

00:10:20.316 --> 00:10:21.346
input positions.

00:10:21.636 --> 00:10:24.666
As we can see here, all of the

00:10:24.666 --> 00:10:26.496
input positions are very similar

00:10:26.496 --> 00:10:27.846
for all of the vertices of this

00:10:27.906 --> 00:10:30.316
triangle, and in fact, the white

00:10:30.316 --> 00:10:32.126
coordinate is exactly the same.

00:10:32.546 --> 00:10:34.616
So this looks correct, and it

00:10:34.616 --> 00:10:35.346
was inspected.

00:10:35.766 --> 00:10:39.216
Seeing the input is correct, but

00:10:39.216 --> 00:10:40.556
as we can see here, in the 3D

00:10:40.556 --> 00:10:43.076
view, the output is wrong, then

00:10:43.076 --> 00:10:44.566
the problem has been our vertex

00:10:44.566 --> 00:10:44.946
shader.

00:10:45.616 --> 00:10:46.686
So let's use the new Shader

00:10:46.686 --> 00:10:48.176
Debugger to debug and fix this

00:10:48.176 --> 00:10:51.016
issue, just by clicking on the

00:10:51.016 --> 00:10:52.556
Debug button that you can find

00:10:52.556 --> 00:10:54.046
here in the bottom right corner.

00:10:54.556 --> 00:10:58.946
And just like that, we are now

00:10:58.946 --> 00:10:59.896
in the Shader Debugger.

00:11:00.026 --> 00:11:01.196
It is that easy.

00:11:05.496 --> 00:11:06.916
The first thing that you will

00:11:06.916 --> 00:11:08.926
notice in the Shader Debugger is

00:11:08.926 --> 00:11:10.796
that alongside your source code,

00:11:11.136 --> 00:11:12.126
you have access to all the

00:11:12.126 --> 00:11:14.066
variables that were modified on

00:11:14.066 --> 00:11:16.426
its line, and if you want more

00:11:16.426 --> 00:11:17.926
details about your variables,

00:11:18.276 --> 00:11:19.716
you can just open the detail

00:11:19.716 --> 00:11:21.956
views by clicking in this detail

00:11:21.956 --> 00:11:23.006
view button here.

00:11:24.836 --> 00:11:27.366
The detail view will show you in

00:11:27.366 --> 00:11:29.186
language of source code the full

00:11:29.186 --> 00:11:30.276
value of the variable.

00:11:30.826 --> 00:11:33.136
And not just that, but also the

00:11:33.136 --> 00:11:35.036
value of the variable across all

00:11:35.036 --> 00:11:36.316
the vertices of the triangle

00:11:36.316 --> 00:11:37.216
that you are debugging.

00:11:37.216 --> 00:11:42.646
Here in the Debug Navigator, you

00:11:42.646 --> 00:11:43.856
have access to the [inaudible]

00:11:43.856 --> 00:11:46.106
history, which shows you what

00:11:46.106 --> 00:11:47.636
your shader did from the very

00:11:47.636 --> 00:11:50.816
beginning to the very end, and

00:11:51.166 --> 00:11:53.126
as you can see, it's really easy

00:11:53.176 --> 00:11:54.686
to step through your code by

00:11:54.686 --> 00:11:55.806
just using the arrow keys.

00:11:57.916 --> 00:11:59.566
As you may have noticed, as I

00:11:59.566 --> 00:12:01.726
navigate through the navigator,

00:12:02.056 --> 00:12:03.406
its position in the source code

00:12:03.406 --> 00:12:04.226
is highlighted.

00:12:04.796 --> 00:12:06.056
And this works in both

00:12:06.056 --> 00:12:06.756
directions.

00:12:07.056 --> 00:12:08.556
You can select one line in your

00:12:08.556 --> 00:12:10.136
source code and its position in

00:12:10.136 --> 00:12:11.336
the Debug Navigator will be

00:12:11.336 --> 00:12:11.876
selected.

00:12:12.396 --> 00:12:15.466
And at any point, you have

00:12:15.466 --> 00:12:17.096
access to all the variables that

00:12:17.096 --> 00:12:18.686
are alive in a scope by just

00:12:18.686 --> 00:12:20.216
taking the variables view, here

00:12:20.216 --> 00:12:20.836
at the bottom.

00:12:20.836 --> 00:12:24.806
So now that we are more familiar

00:12:24.806 --> 00:12:26.096
with the Shader Debugger, let's

00:12:26.216 --> 00:12:27.276
debug our issue.

00:12:30.436 --> 00:12:32.686
The water is calculated by

00:12:32.716 --> 00:12:34.356
generating a displacement vector

00:12:34.446 --> 00:12:36.056
that is later added to our final

00:12:36.056 --> 00:12:36.676
position.

00:12:37.566 --> 00:12:38.826
So let's get more information

00:12:38.826 --> 00:12:39.986
about this displacement vector

00:12:39.986 --> 00:12:41.776
just by opening this detail

00:12:42.266 --> 00:12:42.366
view.

00:12:46.536 --> 00:12:48.616
As we can see here in the detail

00:12:48.856 --> 00:12:51.206
view, the right coordinate for

00:12:51.206 --> 00:12:52.576
the vertex that we are debugging

00:12:52.686 --> 00:12:54.116
is a big, negative number,

00:12:54.416 --> 00:12:55.816
compared to its more positive

00:12:55.816 --> 00:12:57.386
one in the other vertices that

00:12:57.386 --> 00:12:57.976
were correct.

00:12:58.256 --> 00:13:00.416
Then the issue must be in how we

00:13:00.416 --> 00:13:01.336
are calculating this

00:13:01.336 --> 00:13:02.116
displacement vector.

00:13:02.116 --> 00:13:05.556
So let's use the debug navigator

00:13:05.806 --> 00:13:07.046
to go through the function and

00:13:07.046 --> 00:13:09.000
investigate what is happening.

00:13:17.086 --> 00:13:18.236
And here, without even having to

00:13:18.236 --> 00:13:19.906
read the code, we can already

00:13:19.906 --> 00:13:21.076
tell that there is something

00:13:21.076 --> 00:13:21.696
going wrong.

00:13:22.156 --> 00:13:24.176
One of our variables has a value

00:13:24.176 --> 00:13:25.966
that is not a number, and this

00:13:25.966 --> 00:13:27.706
is likely corrupt in further

00:13:27.706 --> 00:13:28.136
math.

00:13:28.666 --> 00:13:30.276
So let's check why this is

00:13:30.276 --> 00:13:30.826
happening.

00:13:31.356 --> 00:13:32.846
If we check here in the

00:13:32.846 --> 00:13:34.796
debugger, it turns out that we

00:13:34.796 --> 00:13:37.096
are doing this operation on this

00:13:37.096 --> 00:13:38.826
negative number, and this is

00:13:38.826 --> 00:13:40.036
what is causing the [inaudible].

00:13:40.806 --> 00:13:42.316
So now that we have found the

00:13:42.316 --> 00:13:43.956
cause of our issue, let me

00:13:43.956 --> 00:13:45.396
quickly fix this just by

00:13:45.396 --> 00:13:47.176
swapping those two lines, so

00:13:47.176 --> 00:13:48.966
that we don't do operation on a

00:13:48.966 --> 00:13:49.786
negative number.

00:13:50.526 --> 00:13:53.826
And now that we have done our

00:13:54.026 --> 00:13:55.686
changes to the shader, let's try

00:13:55.686 --> 00:13:56.946
out those changes just by

00:13:56.946 --> 00:13:58.166
clicking in the reload changes

00:13:58.166 --> 00:14:03.466
button, here in the debug bar.

00:14:03.666 --> 00:14:05.696
Reloading the shaders will run

00:14:05.756 --> 00:14:06.976
your full [inaudible] using the

00:14:06.976 --> 00:14:08.566
new shaders, so that you can

00:14:08.566 --> 00:14:10.096
check the results right away.

00:14:11.356 --> 00:14:14.236
And as we can see here now our

00:14:14.236 --> 00:14:15.916
water surface is smooth.

00:14:17.266 --> 00:14:18.876
But let's check it in action,

00:14:19.166 --> 00:14:20.686
just by clicking on the continue

00:14:20.686 --> 00:14:27.706
button here in the debug bar.

00:14:27.706 --> 00:14:28.656
And, as we can see [applause

00:14:29.446 --> 00:14:31.016
begins] now our water simulation

00:14:31.096 --> 00:14:31.826
is correct.

00:14:34.456 --> 00:14:36.306
In this ex-- in this demo, we

00:14:36.306 --> 00:14:37.896
have seen how to take a frame

00:14:37.896 --> 00:14:39.846
cocktail, how to use the new

00:14:39.846 --> 00:14:41.606
geometry viewer to find broken

00:14:41.606 --> 00:14:43.506
vertices, and how to use the new

00:14:43.506 --> 00:14:45.636
Shader Debugger to debug and fix

00:14:45.636 --> 00:14:46.696
your vertex shaders.

00:14:46.966 --> 00:14:47.976
Thank you, and back to Alp.

00:14:48.516 --> 00:14:57.016
[ Applause ]

00:14:57.516 --> 00:14:58.226
>> Pretty cool, huh?

00:14:58.636 --> 00:15:00.426
Thank you, Xavier.

00:15:01.646 --> 00:15:02.836
Now that you have seen Shader

00:15:02.836 --> 00:15:04.676
Debugger in action, let's take a

00:15:04.676 --> 00:15:06.666
closer look at how you can use

00:15:06.666 --> 00:15:08.266
this tool for your debugging

00:15:08.266 --> 00:15:08.636
needs.

00:15:09.246 --> 00:15:10.476
First things first, though.

00:15:11.326 --> 00:15:13.196
Let's talk about how you can get

00:15:13.196 --> 00:15:16.656
into the Shader Debugger.

00:15:16.696 --> 00:15:18.736
Here I already captured a frame,

00:15:18.896 --> 00:15:20.316
and am on the last roll call,

00:15:20.776 --> 00:15:23.176
and then you will have draw or

00:15:23.176 --> 00:15:25.486
dispatch call selected, the

00:15:25.746 --> 00:15:27.606
debug shader button on the debug

00:15:27.666 --> 00:15:29.706
bar will be enabled for your

00:15:30.126 --> 00:15:31.266
easy access to the Shader

00:15:31.266 --> 00:15:31.576
Debugger.

00:15:32.636 --> 00:15:34.416
Clicking that will show a view

00:15:34.646 --> 00:15:35.676
for you to select the thread

00:15:35.706 --> 00:15:36.506
you're interested in.

00:15:37.906 --> 00:15:39.246
And selecting threads means

00:15:39.336 --> 00:15:41.166
different things depending on

00:15:41.166 --> 00:15:42.126
the type of shader you are

00:15:42.126 --> 00:15:42.636
debugging.

00:15:43.726 --> 00:15:45.996
For fragment shader, you will be

00:15:46.196 --> 00:15:47.956
using the pixel inspector to

00:15:47.956 --> 00:15:49.496
select the pixel you want to

00:15:49.566 --> 00:15:49.976
debug.

00:15:50.966 --> 00:15:53.176
For vertex shader, you will be

00:15:53.176 --> 00:15:54.596
using the geometry viewer we

00:15:54.596 --> 00:15:56.446
have just seen to select the

00:15:56.446 --> 00:15:57.636
vertex you want to focus on.

00:15:58.166 --> 00:16:01.236
And for compute, you will be

00:16:01.236 --> 00:16:03.286
using the controls to select the

00:16:03.286 --> 00:16:04.516
thread you are interested in.

00:16:05.176 --> 00:16:07.166
And then, just click the debug

00:16:07.166 --> 00:16:08.906
button, and that's it.

00:16:09.596 --> 00:16:10.556
You are in the Shader Debugger.

00:16:11.556 --> 00:16:12.696
And whilst you're in the Shader

00:16:12.696 --> 00:16:14.666
Debugger, it is so easy to

00:16:14.666 --> 00:16:16.006
inspect any variable you are

00:16:16.006 --> 00:16:16.686
interested in.

00:16:17.846 --> 00:16:18.706
You just need to go to the

00:16:18.706 --> 00:16:19.936
source line you have the

00:16:19.936 --> 00:16:21.716
variable, and that is all you

00:16:21.716 --> 00:16:22.836
have to do.

00:16:22.996 --> 00:16:24.256
You don't need any break points,

00:16:24.546 --> 00:16:25.436
you don't need to step through

00:16:25.436 --> 00:16:25.926
your code.

00:16:26.566 --> 00:16:28.356
The values of the modified

00:16:28.356 --> 00:16:30.376
variables in the line are going

00:16:30.376 --> 00:16:31.716
to be available on the side bar.

00:16:32.946 --> 00:16:34.406
And as you have seen in the

00:16:34.406 --> 00:16:35.836
demo, we highlight [inaudible]

00:16:35.956 --> 00:16:38.976
and infinite values in there, so

00:16:38.976 --> 00:16:40.576
that it's really easy to spot

00:16:40.576 --> 00:16:41.466
common mistakes.

00:16:42.636 --> 00:16:43.806
You can just use the button on

00:16:43.806 --> 00:16:45.826
the side bar to enable the

00:16:45.826 --> 00:16:47.816
detail views, and get full

00:16:47.816 --> 00:16:49.486
details about your variables.

00:16:49.946 --> 00:16:53.356
This is pretty handy, especially

00:16:53.356 --> 00:16:54.696
if you want to inspect the

00:16:54.696 --> 00:16:56.196
complex [inaudible] and want to

00:16:56.196 --> 00:16:57.786
dive into different components.

00:16:59.396 --> 00:17:02.136
Or you can just hover on any

00:17:02.136 --> 00:17:03.346
variable you have in your source

00:17:03.346 --> 00:17:05.776
code, and you will instantly see

00:17:05.776 --> 00:17:07.316
the value of the variable at

00:17:07.316 --> 00:17:07.866
that point.

00:17:08.685 --> 00:17:11.256
And this is partially useful if

00:17:11.526 --> 00:17:13.366
you are sampling from a texture,

00:17:13.526 --> 00:17:15.726
like in this example, and you

00:17:15.726 --> 00:17:17.715
want to quickly check whether

00:17:17.715 --> 00:17:20.506
this is the right texture.

00:17:20.626 --> 00:17:23.016
And just like in CPU debuggers,

00:17:23.705 --> 00:17:24.626
you have access to your

00:17:24.626 --> 00:17:26.796
variables view, showing you all

00:17:26.796 --> 00:17:29.876
your variables in scope.

00:17:30.046 --> 00:17:32.496
So inspecting variables is a

00:17:32.496 --> 00:17:33.656
core part of debugging your

00:17:33.656 --> 00:17:35.856
shaders, but that is only half

00:17:35.856 --> 00:17:36.396
of the story.

00:17:37.096 --> 00:17:38.696
You also want to know what is

00:17:38.726 --> 00:17:40.376
the order of your code getting

00:17:40.376 --> 00:17:40.996
executed?

00:17:41.536 --> 00:17:42.896
And Shader Debugger makes this

00:17:42.896 --> 00:17:43.866
really easy as well.

00:17:44.486 --> 00:17:46.876
When you get into Shader

00:17:46.876 --> 00:17:48.356
Debugger, in the Debug

00:17:48.356 --> 00:17:50.386
Navigator, you will see all your

00:17:50.386 --> 00:17:52.316
source line execute by your

00:17:52.316 --> 00:17:53.546
shader for your selected

00:17:53.546 --> 00:17:53.946
threads.

00:17:55.906 --> 00:17:58.276
And you can select any line you

00:17:58.276 --> 00:17:59.596
want and directly navigate to

00:17:59.596 --> 00:17:59.856
that.

00:18:00.866 --> 00:18:03.156
This also provides a unique

00:18:03.156 --> 00:18:04.486
stepping experience where you

00:18:04.486 --> 00:18:06.656
can just use your cursor keys to

00:18:06.656 --> 00:18:08.326
step through your code.

00:18:09.206 --> 00:18:10.776
Functions are groups in the

00:18:10.776 --> 00:18:12.306
navigator, so that you can just

00:18:12.306 --> 00:18:17.166
expand them and step into them.

00:18:17.166 --> 00:18:18.676
This also enables backward

00:18:18.746 --> 00:18:21.046
debugging, which is a really

00:18:21.046 --> 00:18:22.976
powerful way of debugging your

00:18:22.976 --> 00:18:23.526
shaders.

00:18:23.866 --> 00:18:25.326
Just find the variable that has

00:18:25.326 --> 00:18:27.476
the wrong value, and just work

00:18:27.476 --> 00:18:29.266
your way backward to see where

00:18:29.336 --> 00:18:33.396
it got wrong, and why.

00:18:33.596 --> 00:18:35.026
Also you can use the filtering.

00:18:35.946 --> 00:18:37.686
Filtering is a great way to

00:18:37.686 --> 00:18:41.576
focus, and you can filter for

00:18:41.576 --> 00:18:42.716
anything you are interested in

00:18:42.746 --> 00:18:43.506
your shader code.

00:18:44.396 --> 00:18:46.336
Filter will be matching with

00:18:46.486 --> 00:18:48.876
function calls, variables,

00:18:49.296 --> 00:18:50.046
resources.

00:18:50.996 --> 00:18:53.676
And your shader code might span

00:18:53.676 --> 00:18:55.936
across many different files, but

00:18:55.936 --> 00:18:58.046
if you use filter, it will only

00:18:58.046 --> 00:18:59.686
match with what your shader

00:18:59.686 --> 00:19:01.996
executed, so it's a really great

00:19:01.996 --> 00:19:05.966
way to focus.

00:19:06.166 --> 00:19:08.286
So far, what we have seen is

00:19:08.406 --> 00:19:09.686
great for debugging a single

00:19:09.686 --> 00:19:12.286
thread, but what about other

00:19:12.286 --> 00:19:12.706
threads?

00:19:14.346 --> 00:19:16.156
Shader Debugger also gives you

00:19:16.156 --> 00:19:18.276
access to other threads based on

00:19:18.276 --> 00:19:20.596
the initial thread you selected.

00:19:21.866 --> 00:19:23.926
What this means is, for vertex,

00:19:24.456 --> 00:19:25.886
you'll get the primitive of your

00:19:25.886 --> 00:19:27.846
selected vertex.

00:19:28.156 --> 00:19:30.056
For fragment, you'll get direct

00:19:30.056 --> 00:19:31.576
angle area, and on your selected

00:19:31.576 --> 00:19:31.996
pixel.

00:19:33.436 --> 00:19:35.316
For compute, you'll be getting

00:19:35.316 --> 00:19:36.596
the full thread group of your

00:19:36.596 --> 00:19:38.326
selected compute thread, so that

00:19:38.326 --> 00:19:39.836
you have access to all variables

00:19:40.106 --> 00:19:42.146
interacting with the thread

00:19:42.636 --> 00:19:43.696
group memory.

00:19:43.936 --> 00:19:46.476
Now, let's look at how accessing

00:19:46.476 --> 00:19:48.966
other threads can help you debug

00:19:48.966 --> 00:19:49.786
fragment shaders.

00:19:50.336 --> 00:19:54.766
So while your code executes

00:19:55.106 --> 00:19:56.606
millions of different pixels,

00:19:57.576 --> 00:20:00.196
seeing a single variable for a

00:20:00.196 --> 00:20:02.056
single pixel may not help you in

00:20:02.056 --> 00:20:02.716
all the cases.

00:20:03.546 --> 00:20:05.136
Here, I have an example, I'm

00:20:05.506 --> 00:20:08.016
calculating a gradient, and I

00:20:08.016 --> 00:20:09.156
can't see the single gradient

00:20:09.156 --> 00:20:09.476
value.

00:20:09.796 --> 00:20:11.546
But I can't really tell whether

00:20:11.546 --> 00:20:13.256
this gradient value is good for

00:20:13.256 --> 00:20:14.776
my pixels, or bad for my pixels.

00:20:15.756 --> 00:20:18.306
With a single click, to bring up

00:20:18.336 --> 00:20:21.106
the detail views, I can see this

00:20:21.106 --> 00:20:23.136
gradient value across thousands

00:20:23.136 --> 00:20:25.036
of other pixels around my pixel,

00:20:25.316 --> 00:20:27.596
and now I can tell this gradient

00:20:27.596 --> 00:20:29.296
is not correct because I can

00:20:29.296 --> 00:20:31.236
clearly see it's not smooth.

00:20:32.216 --> 00:20:34.146
As you've seen, detail views

00:20:34.176 --> 00:20:35.716
help you understand your shader,

00:20:36.536 --> 00:20:39.456
and identify good and bad values

00:20:39.456 --> 00:20:40.376
for your shaders.

00:20:40.916 --> 00:20:44.506
You can quickly hover into any

00:20:44.506 --> 00:20:47.116
other pixel to instantly see the

00:20:47.116 --> 00:20:48.776
value of that variable for that

00:20:48.776 --> 00:20:49.196
pixel.

00:20:49.796 --> 00:20:54.036
And you can also use this view

00:20:54.286 --> 00:20:56.926
to switch threads.

00:20:57.036 --> 00:20:58.826
Switching threads is great for

00:20:58.826 --> 00:21:00.596
comparing cases where you can

00:21:00.596 --> 00:21:02.566
clearly see good and bad pixels.

00:21:03.006 --> 00:21:04.456
You can quickly switch between

00:21:04.456 --> 00:21:06.676
them and see what the back pixel

00:21:06.676 --> 00:21:07.116
is doing.

00:21:08.666 --> 00:21:10.526
Once we switch threads, we

00:21:10.526 --> 00:21:12.306
update the execution history and

00:21:12.306 --> 00:21:14.456
the variable views, so that you

00:21:14.456 --> 00:21:15.806
can fully debug your

00:21:15.806 --> 00:21:17.606
newly-selected threads.

00:21:19.096 --> 00:21:20.596
This gets even better.

00:21:21.716 --> 00:21:23.276
Detail views also help you

00:21:23.276 --> 00:21:24.836
understand your divergence.

00:21:26.256 --> 00:21:29.706
So whenever you enable detail

00:21:29.706 --> 00:21:31.716
view, the mask on the right-hand

00:21:31.716 --> 00:21:34.716
side will always show you what

00:21:34.786 --> 00:21:36.556
other threads executed the same

00:21:36.556 --> 00:21:37.226
line of code.

00:21:38.686 --> 00:21:40.456
In this example, it's

00:21:40.556 --> 00:21:43.776
conditional, and just looking at

00:21:43.776 --> 00:21:45.416
the mask, I can clearly tell

00:21:45.416 --> 00:21:47.796
that roughly half of my threads

00:21:48.086 --> 00:21:49.786
executed inside this-- if

00:21:49.786 --> 00:21:51.786
conditional, in a diagonal

00:21:51.786 --> 00:21:52.046
shape.

00:21:53.556 --> 00:21:57.276
So now, to show you how you can

00:21:57.276 --> 00:21:59.196
use detail views to fix problems

00:21:59.196 --> 00:22:00.946
in fragment shaders, I would

00:22:00.946 --> 00:22:02.916
like to invite Xavier back to

00:22:02.916 --> 00:22:03.366
the stage.

00:22:03.746 --> 00:22:04.136
Xavier?

00:22:05.516 --> 00:22:08.596
[ Applause ]

00:22:09.096 --> 00:22:09.476
>> Thank you, Alp.

00:22:10.136 --> 00:22:11.486
After fixing our geometric

00:22:11.486 --> 00:22:13.086
problems in the first demo, I

00:22:13.316 --> 00:22:15.096
added highlights as a process

00:22:15.096 --> 00:22:15.606
and effect.

00:22:16.176 --> 00:22:17.376
But the results were not as

00:22:17.376 --> 00:22:17.986
suspected.

00:22:18.646 --> 00:22:19.936
So I took a frame capture to

00:22:19.936 --> 00:22:20.706
debug the issue.

00:22:25.756 --> 00:22:27.506
It was here in the [inaudible]

00:22:27.506 --> 00:22:30.016
view, we can see that our

00:22:30.096 --> 00:22:31.356
highlights are actually

00:22:31.356 --> 00:22:33.076
generating dark areas in the

00:22:33.076 --> 00:22:33.886
bottom parts.

00:22:34.336 --> 00:22:36.246
So let's use the Shader Debugger

00:22:36.346 --> 00:22:37.526
to debug and fix this issue.

00:22:38.756 --> 00:22:40.746
By not pressing, I'm bringing up

00:22:40.886 --> 00:22:42.796
the pixel inspector, which

00:22:42.796 --> 00:22:44.246
allows you to select the pixel

00:22:44.246 --> 00:22:45.096
that you want to debug.

00:22:45.776 --> 00:22:47.736
So here, we are going to select

00:22:47.736 --> 00:22:49.576
one of the pixels, for example

00:22:49.576 --> 00:22:51.446
this one, and to start the

00:22:51.446 --> 00:22:52.876
Shader Debugger, you have to

00:22:52.876 --> 00:22:54.636
click the debug button here on

00:22:54.636 --> 00:22:55.566
the bottom right corner.

00:22:58.216 --> 00:22:59.556
And now, we are debugging the

00:22:59.556 --> 00:23:00.296
frame and shader.

00:23:05.416 --> 00:23:07.656
As we can see here, the

00:23:07.726 --> 00:23:09.186
highlights are generated in

00:23:09.186 --> 00:23:10.416
three different steps.

00:23:10.976 --> 00:23:12.346
So let's use the detailed views

00:23:12.346 --> 00:23:13.646
to quickly understand what is

00:23:13.646 --> 00:23:14.126
happening.

00:23:14.516 --> 00:23:16.466
Let's start at the beginning on

00:23:16.466 --> 00:23:17.416
this close first one.

00:23:17.876 --> 00:23:21.676
As we can see here, we are just

00:23:21.676 --> 00:23:23.336
sampling from our original

00:23:23.336 --> 00:23:25.576
color, and this looks correct.

00:23:25.986 --> 00:23:29.056
So let's see what is next.

00:23:29.176 --> 00:23:30.596
Here, we are accumulating

00:23:30.676 --> 00:23:31.716
highlights in one of the

00:23:31.716 --> 00:23:33.696
directions, so let's take the

00:23:33.696 --> 00:23:35.246
results by opening the detailed

00:23:35.246 --> 00:23:35.436
view.

00:23:35.926 --> 00:23:39.246
And as we can see here in the

00:23:39.246 --> 00:23:41.116
detailed view, there is already

00:23:41.116 --> 00:23:42.776
dark area in the bottom part,

00:23:42.896 --> 00:23:45.556
right here, so then the problem

00:23:45.556 --> 00:23:46.696
must be in how we are

00:23:46.696 --> 00:23:48.066
accumulating those highlights.

00:23:48.726 --> 00:23:51.016
As you can see, detailed views

00:23:51.016 --> 00:23:52.136
are a powerful tool to

00:23:52.376 --> 00:23:53.816
understand your shader without

00:23:53.816 --> 00:23:55.186
even having to read the code.

00:23:56.396 --> 00:23:58.376
So let's use the Debug Navigator

00:23:58.476 --> 00:24:00.056
to go to that first one and

00:24:00.056 --> 00:24:01.396
investigate what is happening.

00:24:01.866 --> 00:24:06.386
As we can see here, this

00:24:06.386 --> 00:24:08.106
function is mainly a loop that

00:24:08.106 --> 00:24:09.316
iterates a few times,

00:24:09.456 --> 00:24:11.256
accumulating samples from

00:24:13.036 --> 00:24:13.326
[inaudible] map.

00:24:13.326 --> 00:24:14.946
Loops are highlighted just in

00:24:14.946 --> 00:24:16.976
the Shader Debugger, which means

00:24:16.976 --> 00:24:18.666
that you can navigate through

00:24:18.666 --> 00:24:20.426
your iterations using the Debug

00:24:20.426 --> 00:24:22.396
Navigator, and you will get,

00:24:22.696 --> 00:24:24.086
alongside with your source code,

00:24:24.316 --> 00:24:25.766
the value of the variables at

00:24:25.766 --> 00:24:27.266
each one of the iterations.

00:24:27.796 --> 00:24:31.596
If we focus here, we can see

00:24:31.596 --> 00:24:32.786
that as I navigate through the

00:24:32.786 --> 00:24:34.606
different iterations, the values

00:24:34.606 --> 00:24:35.046
change.

00:24:37.016 --> 00:24:39.656
But what is really powerful is

00:24:39.656 --> 00:24:40.956
combining this with detailed

00:24:40.956 --> 00:24:41.466
views.

00:24:42.186 --> 00:24:44.196
So here, we are going to bring

00:24:44.196 --> 00:24:45.566
up the detailed view for final

00:24:45.566 --> 00:24:47.226
color, that this is where we are

00:24:47.226 --> 00:24:48.666
accumulating our highlights.

00:24:51.536 --> 00:24:53.556
And now let's iterate using the

00:24:53.556 --> 00:24:54.476
Debug Navigator.

00:24:55.326 --> 00:24:57.906
As we can see, as I iterate, we

00:24:58.056 --> 00:24:59.346
are starting to accumulate

00:24:59.346 --> 00:25:00.946
highlights in our final color.

00:25:01.536 --> 00:25:03.296
But as I continue iterating

00:25:03.296 --> 00:25:05.106
toward the end of the loop, we

00:25:05.106 --> 00:25:06.626
are actually seeing this, there

00:25:06.626 --> 00:25:07.236
is a pattern.

00:25:07.766 --> 00:25:09.986
So let's investigate why this is

00:25:09.986 --> 00:25:10.506
happening.

00:25:14.116 --> 00:25:15.806
As we see here in the Debugger,

00:25:16.156 --> 00:25:18.176
we can actually see that our

00:25:18.176 --> 00:25:19.116
weight is negative.

00:25:19.626 --> 00:25:21.076
And this is what is causing the

00:25:21.076 --> 00:25:23.206
color to be distracted rather

00:25:23.206 --> 00:25:25.146
than accumulated in our final

00:25:25.146 --> 00:25:25.346
color.

00:25:26.436 --> 00:25:28.286
So now that we have found the

00:25:28.476 --> 00:25:30.056
cause of our issue, let me

00:25:30.056 --> 00:25:31.586
quickly fix this.

00:25:34.616 --> 00:25:36.296
And now, let's check the

00:25:36.296 --> 00:25:38.036
results, just by checking in the

00:25:38.036 --> 00:25:39.716
reload changes button, here in

00:25:39.716 --> 00:25:42.776
the debug bar.

00:25:42.776 --> 00:25:44.946
And as we can see here, now

00:25:45.036 --> 00:25:46.366
there is no more other carriers,

00:25:46.656 --> 00:25:48.496
but let's see it in action, just

00:25:48.496 --> 00:25:49.566
by clicking on the Continue

00:25:49.566 --> 00:25:50.036
button.

00:25:54.556 --> 00:25:56.686
And indeed, now our highlight

00:25:56.686 --> 00:25:57.346
looks correct.

00:25:58.066 --> 00:26:00.146
This is just an example of how

00:26:00.146 --> 00:26:01.516
you can use the Shader Debugger

00:26:01.516 --> 00:26:03.896
and its powerful detailed views

00:26:04.086 --> 00:26:05.376
to debug [inaudible] Shaders.

00:26:05.896 --> 00:26:06.426
Thank you.

00:26:06.426 --> 00:26:07.466
And back to Alp.

00:26:08.516 --> 00:26:11.646
[ Applause ]

00:26:12.146 --> 00:26:12.766
>> Thank you, Xavier.

00:26:14.316 --> 00:26:16.316
Now that you have seen

00:26:16.316 --> 00:26:17.196
everything about Shader

00:26:17.196 --> 00:26:19.996
Debugger, let's recap what we've

00:26:19.996 --> 00:26:22.526
talked about so far.

00:26:22.716 --> 00:26:25.036
Shader Debugger is specifically

00:26:25.036 --> 00:26:26.496
designed for debugging Metal

00:26:26.496 --> 00:26:28.736
shaders, taking into account of

00:26:28.736 --> 00:26:30.236
the highly parallel nature of

00:26:30.236 --> 00:26:33.666
GPUs, and as you've seen, it's

00:26:33.666 --> 00:26:36.066
great for fixing bugs with the

00:26:36.066 --> 00:26:37.796
highlights to nans and

00:26:37.796 --> 00:26:40.456
infinites, it is so easy to spot

00:26:40.456 --> 00:26:43.036
common mistakes, and also it's

00:26:43.036 --> 00:26:44.706
great for understanding your

00:26:44.706 --> 00:26:45.136
shader.

00:26:45.976 --> 00:26:47.426
With the detailed views, you

00:26:47.426 --> 00:26:48.836
don't even need to read the code

00:26:49.116 --> 00:26:50.296
to understand what your shader

00:26:50.296 --> 00:26:50.726
is doing.

00:26:51.756 --> 00:26:53.996
And also it provides excellent

00:26:53.996 --> 00:26:55.476
environment to develop your

00:26:55.476 --> 00:26:56.066
shaders in.

00:26:56.766 --> 00:26:58.016
Just get into Shader Debugger

00:26:58.306 --> 00:27:01.356
and start editing, and read out

00:27:01.476 --> 00:27:02.916
to quickly iterate all your

00:27:02.916 --> 00:27:03.426
results.

00:27:03.916 --> 00:27:07.486
Shader Debugger supports iOS,

00:27:07.806 --> 00:27:10.336
Mac, OS and tvOS with the recent

00:27:10.336 --> 00:27:10.726
hardware.

00:27:12.066 --> 00:27:14.456
And it is yours to enjoy with

00:27:14.956 --> 00:27:15.660
Xcode 10.

00:27:17.516 --> 00:27:21.546
[ Applause ]

00:27:22.046 --> 00:27:23.286
>> And now that we've seen how

00:27:23.286 --> 00:27:24.866
you can use geometric viewer and

00:27:24.866 --> 00:27:26.726
the Shader Debugger to debug

00:27:26.726 --> 00:27:28.896
your shader problems, now let's

00:27:28.896 --> 00:27:30.836
focus on how we can make your

00:27:30.836 --> 00:27:32.426
shaders run faster.

00:27:36.276 --> 00:27:39.796
So optimizing your use of GPU is

00:27:39.796 --> 00:27:42.266
important, because you want your

00:27:42.406 --> 00:27:44.196
apps to run fast, and consume

00:27:44.196 --> 00:27:46.166
less battery for a great user

00:27:46.166 --> 00:27:46.866
experience.

00:27:47.416 --> 00:27:49.556
But before starting to optimize,

00:27:50.016 --> 00:27:52.836
it is important to know what to

00:27:53.406 --> 00:27:53.876
optimize.

00:27:54.236 --> 00:27:56.366
If you are GPU bound, typical

00:27:56.366 --> 00:27:57.576
Metal workload has many

00:27:57.576 --> 00:27:58.406
different passes.

00:27:59.106 --> 00:28:01.236
And knowing which pass to focus

00:28:01.236 --> 00:28:02.846
on is quite important.

00:28:03.646 --> 00:28:05.876
The good news is we have great

00:28:05.876 --> 00:28:07.756
profiling tools built into Metal

00:28:07.756 --> 00:28:09.886
frame debugger to help you with

00:28:11.236 --> 00:28:11.386
this.

00:28:11.576 --> 00:28:13.636
GPU counters gives you high

00:28:13.636 --> 00:28:14.736
level performance [inaudible] of

00:28:14.736 --> 00:28:15.476
your app.

00:28:16.406 --> 00:28:17.846
That you can see, time

00:28:17.946 --> 00:28:19.946
[inaudible] or draw call, and

00:28:19.946 --> 00:28:21.896
also providing you different

00:28:21.896 --> 00:28:23.786
counters showing bottlenecks.

00:28:25.066 --> 00:28:26.686
And from here, once you know

00:28:26.856 --> 00:28:28.616
your expansive pass, you can

00:28:28.616 --> 00:28:29.526
just move to pipeline

00:28:29.526 --> 00:28:30.276
statistics.

00:28:31.076 --> 00:28:33.446
And here you get great compile

00:28:33.646 --> 00:28:36.486
for your shaders, giving you the

00:28:36.486 --> 00:28:38.926
type of instructions you have.

00:28:39.676 --> 00:28:42.566
And using the Shader Profiler,

00:28:42.986 --> 00:28:44.846
you get visibility into timings

00:28:44.896 --> 00:28:47.136
for draw call or per-pipeline

00:28:48.366 --> 00:28:48.536
states.

00:28:48.826 --> 00:28:51.896
So today, I'll be focusing on

00:28:51.986 --> 00:28:53.736
Shader Profiler, and I will show

00:28:53.736 --> 00:28:55.296
you work flows that will help

00:28:55.296 --> 00:28:57.016
you optimize your shaders.

00:28:57.516 --> 00:29:02.176
So once you are in the Metal

00:29:02.176 --> 00:29:04.306
frame debugger, going to read by

00:29:04.306 --> 00:29:06.156
performance navigator, you will

00:29:06.156 --> 00:29:07.826
see all your pipeline states

00:29:08.226 --> 00:29:09.976
sorted by the time it takes to

00:29:09.976 --> 00:29:10.666
execute them.

00:29:11.446 --> 00:29:13.806
This is a great place to see all

00:29:13.806 --> 00:29:15.786
your expansive pipelines that we

00:29:15.786 --> 00:29:16.786
are optimizing.

00:29:18.036 --> 00:29:19.766
And here, you also have access

00:29:19.766 --> 00:29:21.366
to your draw-calls, using these

00:29:21.366 --> 00:29:23.016
pipeline states, so that you can

00:29:23.016 --> 00:29:24.836
directly navigate to one and see

00:29:24.836 --> 00:29:25.656
what it is drawing.

00:29:26.166 --> 00:29:29.486
And if you're in iOS or tvOS,

00:29:30.466 --> 00:29:31.806
just going to the Shader Source,

00:29:32.076 --> 00:29:32.966
you'll get the per line

00:29:32.966 --> 00:29:33.976
execution cost.

00:29:34.846 --> 00:29:36.286
This is a great place to see

00:29:36.626 --> 00:29:38.806
where you are spending the most

00:29:38.806 --> 00:29:40.456
time in your shaders, per line

00:29:40.456 --> 00:29:40.966
basis.

00:29:41.996 --> 00:29:44.056
And once you are in your shader

00:29:44.056 --> 00:29:46.046
source, you can just start

00:29:46.046 --> 00:29:48.086
editing your code, and reload to

00:29:48.086 --> 00:29:50.326
see if it makes any difference

00:29:50.796 --> 00:29:51.776
in timing.

00:29:52.816 --> 00:29:54.726
Or you can just get into Shader

00:29:54.726 --> 00:29:55.096
Debugger.

00:29:56.136 --> 00:29:57.736
This is a great workflow if you

00:29:57.736 --> 00:29:58.586
are trying to optimize an

00:29:58.586 --> 00:30:00.676
algorithm or when I just get

00:30:00.676 --> 00:30:02.166
through this control flow, and

00:30:02.166 --> 00:30:04.046
when I understand whether you

00:30:05.676 --> 00:30:06.196
can.

00:30:06.196 --> 00:30:08.906
So Shader Profiler helps you a

00:30:08.906 --> 00:30:10.596
lot trying to optimize your

00:30:10.596 --> 00:30:13.336
shaders, but we made this even

00:30:13.336 --> 00:30:17.330
better for A11.

00:30:18.096 --> 00:30:19.286
Now, A11 [inaudible] being the

00:30:19.606 --> 00:30:21.366
completely [inaudible] design

00:30:21.366 --> 00:30:23.486
GPU, now we have hardware

00:30:23.486 --> 00:30:24.826
support to give you even more

00:30:24.826 --> 00:30:26.366
insight in what your shaders are

00:30:27.696 --> 00:30:27.816
doing.

00:30:28.046 --> 00:30:30.126
Now with A11, you get this

00:30:30.126 --> 00:30:32.596
chart, per line, showing you the

00:30:32.686 --> 00:30:34.196
cost breakdown of the executed

00:30:34.196 --> 00:30:34.496
line.

00:30:35.096 --> 00:30:37.106
So Shader consists different

00:30:37.106 --> 00:30:39.706
execution units, and if you are

00:30:39.706 --> 00:30:41.526
using one of them heavily, you

00:30:41.526 --> 00:30:42.716
might be bottlenecked by that.

00:30:43.936 --> 00:30:46.096
So seeing ALU and memory

00:30:46.096 --> 00:30:48.456
breakdown gives you visibility

00:30:48.926 --> 00:30:50.776
into like time spent in

00:30:50.776 --> 00:30:51.996
different execution units.

00:30:53.516 --> 00:30:55.196
We did a lot of work for how

00:30:55.196 --> 00:30:56.516
precision instructions to be

00:30:56.516 --> 00:30:57.876
much more efficient in A11.

00:30:58.366 --> 00:31:00.136
So using health, overflows,

00:31:00.186 --> 00:31:02.026
might bring significant things

00:31:02.346 --> 00:31:03.296
on your GP budget.

00:31:03.526 --> 00:31:07.596
And another category now you

00:31:07.596 --> 00:31:08.786
have visibility into is

00:31:08.886 --> 00:31:10.786
synchronization, which is an

00:31:10.786 --> 00:31:12.006
important category to look at

00:31:12.006 --> 00:31:13.696
because you want your Shader

00:31:13.696 --> 00:31:16.246
core to be busy doing work, not

00:31:16.246 --> 00:31:17.396
waiting for synchronization.

00:31:18.266 --> 00:31:20.776
And in your shader code, if you

00:31:20.776 --> 00:31:21.826
are reading from texture,

00:31:21.826 --> 00:31:24.616
buffers, or using atomics or

00:31:24.616 --> 00:31:26.886
barriers, you might have stalls

00:31:27.046 --> 00:31:28.286
waiting for synchronization.

00:31:29.576 --> 00:31:32.196
And also now we provide you

00:31:32.196 --> 00:31:34.066
ability to see cost of in-line

00:31:34.066 --> 00:31:35.706
functions, you are calling from

00:31:35.706 --> 00:31:36.396
your shaders.

00:31:36.946 --> 00:31:39.286
This way you can directly

00:31:39.286 --> 00:31:40.646
navigate to your most expensive

00:31:40.646 --> 00:31:42.706
function, and start optimizing

00:31:46.326 --> 00:31:47.000
that [applause].

00:31:48.886 --> 00:31:51.166
>> Welcome to the Apple designed

00:31:51.166 --> 00:31:52.566
A11 bionic chip.

00:31:53.056 --> 00:31:54.786
We can provide better profiling

00:31:54.786 --> 00:31:55.666
data than ever.

00:31:56.346 --> 00:31:58.256
This year, we are introducing

00:31:58.256 --> 00:32:00.456
per line timing information and

00:32:00.456 --> 00:32:02.386
instruction categories, even in

00:32:02.386 --> 00:32:03.326
inline functions.

00:32:03.966 --> 00:32:05.546
My name is Max, and I am going

00:32:05.546 --> 00:32:07.686
to help you max out your Shader

00:32:09.796 --> 00:32:12.500
performance [applause].

00:32:13.776 --> 00:32:15.846
So I've captured the same water

00:32:15.846 --> 00:32:17.946
simulation again, but this time,

00:32:18.206 --> 00:32:19.636
on my iPhone.

00:32:20.636 --> 00:32:23.736
Let's begin by change to view

00:32:23.736 --> 00:32:25.046
frame by performance.

00:32:25.566 --> 00:32:28.216
We now see a list of pipelines

00:32:28.216 --> 00:32:30.066
being used in our frame, ordered

00:32:30.106 --> 00:32:32.546
by time, and we can easily see

00:32:32.866 --> 00:32:34.066
that the noise pipeline is

00:32:34.116 --> 00:32:35.526
taking a significant amount of

00:32:35.526 --> 00:32:35.876
time.

00:32:37.046 --> 00:32:39.716
Disclosing this, we can see that

00:32:39.716 --> 00:32:41.226
we spent nearly all the time in

00:32:41.226 --> 00:32:42.176
our fragment Shader.

00:32:42.736 --> 00:32:44.456
But this year, we can go deeper.

00:32:45.096 --> 00:32:48.896
We can see the time we are

00:32:48.896 --> 00:32:51.046
spending each inside of each of

00:32:51.046 --> 00:32:52.656
the functions that this shader

00:32:52.656 --> 00:32:53.306
is calling.

00:32:53.816 --> 00:32:56.766
Just clicking here goes to the

00:32:56.766 --> 00:32:58.126
source code file, and directly

00:32:58.126 --> 00:32:59.256
jumps to the right line.

00:32:59.506 --> 00:33:00.736
And that is the start of our

00:33:00.736 --> 00:33:01.536
investigation.

00:33:04.256 --> 00:33:07.306
So what we see here right now on

00:33:07.306 --> 00:33:08.716
the right-hand side is a

00:33:08.716 --> 00:33:10.446
percentage of time we are

00:33:10.446 --> 00:33:11.666
spending inside of this

00:33:11.666 --> 00:33:14.196
function, and further down the

00:33:14.196 --> 00:33:16.326
percentage of time we spend in

00:33:16.326 --> 00:33:17.846
each file-- each line.

00:33:19.186 --> 00:33:20.916
Be aware the Shader Profiler

00:33:20.916 --> 00:33:23.386
works on optimized code, so the

00:33:23.386 --> 00:33:24.786
compiler can reorder the

00:33:24.786 --> 00:33:26.946
instructions and there may be no

00:33:26.946 --> 00:33:28.416
timing information for some

00:33:28.416 --> 00:33:28.786
lines.

00:33:29.536 --> 00:33:32.366
Next to the timing information,

00:33:32.866 --> 00:33:33.766
we have the instruction

00:33:33.766 --> 00:33:34.386
categories.

00:33:34.526 --> 00:33:37.346
Let's take a look.

00:33:37.606 --> 00:33:39.626
We can see that we spend time in

00:33:39.626 --> 00:33:41.986
ALU doing math operations, we

00:33:41.986 --> 00:33:43.346
are reading from memory, from

00:33:43.346 --> 00:33:45.696
textures, but what raises my

00:33:45.696 --> 00:33:46.986
concern is the time we are

00:33:46.986 --> 00:33:48.536
spending in synchronization,

00:33:48.936 --> 00:33:50.656
specifically, waiting on memory

00:33:50.656 --> 00:33:50.966
here.

00:33:51.586 --> 00:33:53.316
That means our GPU could not

00:33:53.316 --> 00:33:55.336
read data fast enough, and it

00:33:55.336 --> 00:33:57.216
could not hide this latency by

00:33:57.216 --> 00:33:58.866
doing ALU work in other threads.

00:34:00.236 --> 00:34:01.806
So let's figure out why.

00:34:02.326 --> 00:34:06.696
Just following the performance

00:34:06.696 --> 00:34:08.456
numbers, we will arrive at this

00:34:08.456 --> 00:34:11.196
line, where we spent over 50% of

00:34:11.196 --> 00:34:13.235
our entire shader time.

00:34:14.016 --> 00:34:15.176
Taking a look into the

00:34:15.176 --> 00:34:17.275
instruction categories again, we

00:34:17.275 --> 00:34:18.755
can see that we spend a

00:34:18.755 --> 00:34:20.376
significant amount in

00:34:20.376 --> 00:34:21.286
synchronization.

00:34:21.866 --> 00:34:22.346
But why?

00:34:26.176 --> 00:34:28.166
We are using a color value here

00:34:28.936 --> 00:34:30.255
that we have read from a color

00:34:30.255 --> 00:34:32.766
texture here using an offset.

00:34:34.356 --> 00:34:36.045
This offset was read from a

00:34:36.045 --> 00:34:37.085
noise texture here.

00:34:37.406 --> 00:34:39.466
So we have a dependent texture

00:34:39.466 --> 00:34:39.786
read.

00:34:39.906 --> 00:34:42.545
The GPU could not process until

00:34:42.545 --> 00:34:43.786
data from the texture read

00:34:43.876 --> 00:34:44.706
became available.

00:34:45.106 --> 00:34:47.396
So what can we do about this?

00:34:47.846 --> 00:34:50.596
Well, instead of reading from a

00:34:50.596 --> 00:34:52.536
noise texture, we could just

00:34:52.536 --> 00:34:54.166
simply calculate a noise value

00:34:54.166 --> 00:34:55.025
in our GPU.

00:34:55.886 --> 00:34:59.136
Let me do that.

00:34:59.266 --> 00:35:01.226
Now, let me update my Shader.

00:35:02.126 --> 00:35:03.806
The Shader is now sent to the

00:35:03.806 --> 00:35:06.286
device as we compiled, and then

00:35:06.286 --> 00:35:09.106
the entire frame is rerun and

00:35:09.106 --> 00:35:11.106
reprofiled, because changing a

00:35:11.106 --> 00:35:12.896
single Shader or pipeline might

00:35:12.896 --> 00:35:14.566
influence your entire GPU

00:35:14.566 --> 00:35:15.006
timing.

00:35:16.496 --> 00:35:18.096
Once that is done, let's take a

00:35:18.836 --> 00:35:18.926
look.

00:35:20.336 --> 00:35:22.606
We can see that we now spend

00:35:22.796 --> 00:35:24.376
just three milliseconds in the

00:35:24.376 --> 00:35:26.166
shader from down over to 20.

00:35:26.846 --> 00:35:28.656
But let's also take a look into

00:35:28.656 --> 00:35:29.866
the instruction categories.

00:35:30.586 --> 00:35:35.496
Here we can see that we nearly

00:35:35.496 --> 00:35:37.206
eliminated the entire time in

00:35:37.206 --> 00:35:39.116
synchronization, and we keep our

00:35:39.116 --> 00:35:41.256
GPU busy doing work for us.

00:35:42.526 --> 00:35:44.396
So, as a summary, when you

00:35:44.396 --> 00:35:45.506
detect the bottleneck in your

00:35:45.506 --> 00:35:47.516
shader, the per line timing

00:35:47.516 --> 00:35:49.706
information tells you exactly

00:35:49.706 --> 00:35:51.226
where your problem is, and the

00:35:51.226 --> 00:35:53.396
instruction categories help you

00:35:53.396 --> 00:35:54.516
to understand why.

00:35:55.316 --> 00:35:56.146
That's it for me.

00:35:56.626 --> 00:35:57.576
Back to my colleague, Alp.

00:35:58.516 --> 00:36:04.216
[ Applause ]

00:36:04.716 --> 00:36:06.006
>> Thank you, Max.

00:36:06.006 --> 00:36:08.596
And before closing, I would like

00:36:08.596 --> 00:36:10.786
to talk about one last thing to

00:36:10.786 --> 00:36:12.546
make it easier for you to work

00:36:12.546 --> 00:36:14.466
with these new great tools.

00:36:15.696 --> 00:36:18.596
Hopefully all of you are already

00:36:18.596 --> 00:36:20.016
compiling your Shaders offline,

00:36:20.166 --> 00:36:21.226
so that you are not paying the

00:36:21.226 --> 00:36:22.596
runtime cost of online

00:36:22.596 --> 00:36:23.126
completion.

00:36:23.936 --> 00:36:25.576
And if you are compiling your

00:36:25.576 --> 00:36:27.236
shaders offline, now we have a

00:36:27.236 --> 00:36:29.956
new compiler option to save

00:36:29.956 --> 00:36:31.496
Shader sources into the built

00:36:31.496 --> 00:36:33.196
Metal [inaudible] so that you

00:36:33.196 --> 00:36:34.156
have access to your shader

00:36:34.156 --> 00:36:35.696
sources from anywhere using

00:36:35.696 --> 00:36:36.316
these tools.

00:36:37.306 --> 00:36:38.916
If you are compiling your

00:36:38.916 --> 00:36:41.406
shaders using Xcode Project, you

00:36:41.406 --> 00:36:42.826
can just go to Build Settings,

00:36:42.826 --> 00:36:43.906
and Enable this option.

00:36:44.736 --> 00:36:46.756
Or if you are compiling using

00:36:46.756 --> 00:36:48.876
command line, you can just pass

00:36:49.106 --> 00:36:50.776
dash MO option to the Metal

00:36:50.776 --> 00:36:51.356
compilers.

00:36:52.356 --> 00:36:53.996
But please remember to only

00:36:53.996 --> 00:36:56.186
enable this in debug builds so

00:36:56.186 --> 00:36:58.296
that you don't mistakenly ship

00:36:58.296 --> 00:37:00.126
your shader sources alongside

00:37:00.126 --> 00:37:00.526
your app.

00:37:00.946 --> 00:37:02.256
All right.

00:37:03.316 --> 00:37:06.226
Let's recap what we talked about

00:37:07.596 --> 00:37:07.726
today.

00:37:07.916 --> 00:37:09.056
We started with geometric

00:37:09.056 --> 00:37:11.866
viewer, providing you one place

00:37:11.866 --> 00:37:13.686
to investigate all your vertex

00:37:13.686 --> 00:37:16.266
related issues, and debugging

00:37:16.266 --> 00:37:18.376
visual problems, please remember

00:37:18.376 --> 00:37:19.646
to check with geometric viewer

00:37:19.646 --> 00:37:21.276
first, and make sure that your

00:37:21.276 --> 00:37:23.216
geometry is right before moving

00:37:23.216 --> 00:37:24.736
on to debugging your shaders.

00:37:25.476 --> 00:37:27.906
And then we have seen shader

00:37:27.906 --> 00:37:30.096
debuggers, powerful tools to

00:37:30.096 --> 00:37:31.986
debug all your Metal shaders.

00:37:32.656 --> 00:37:33.816
Great for fixing bugs,

00:37:34.786 --> 00:37:36.546
understanding your shaders, and

00:37:36.546 --> 00:37:37.876
just developing your shaders.

00:37:38.376 --> 00:37:40.956
And within [inaudible] profiler,

00:37:41.486 --> 00:37:43.286
now you get even more visibility

00:37:43.416 --> 00:37:45.706
into what your GPU is doing with

00:37:45.706 --> 00:37:48.746
the power of A11 bionic chip.

00:37:49.696 --> 00:37:51.786
For more information, please

00:37:51.926 --> 00:37:52.526
check the link.

00:37:53.606 --> 00:37:55.486
Tomorrow at 10:00 a.m., we have

00:37:55.486 --> 00:37:57.326
a great talk on Metal game

00:37:57.326 --> 00:37:59.226
performance optimization, where

00:37:59.226 --> 00:38:00.976
we will be talking about common

00:38:00.976 --> 00:38:02.376
performance problems that we

00:38:02.376 --> 00:38:04.506
found in games and tools

00:38:04.506 --> 00:38:06.266
available for you to detect and

00:38:06.266 --> 00:38:06.636
fix them.

00:38:06.946 --> 00:38:07.236
Thank you [applause].